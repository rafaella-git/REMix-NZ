# import pandas as pd
# from collections import defaultdict
# import re

# def process_data(input_file, output_file, year=2030, sector="Wholesale", carrier="Electricity"):
#     # Step 1: Read and process original data
#     df = pd.read_csv(input_file)
#     prefix_dict = defaultdict(list)
    
#     # Group columns by prefix
#     for column in df.columns:
#         match = re.match(r'^([A-Z]{3})', column)
#         if match:
#             prefix = match.group(1)
#             if prefix == "TRK":
#                 prefix = "TRN"  # Remap TRK to TRN
#             prefix_dict[prefix].append(column)
    
#     # Sum columns with same prefix and divide by 1000
#     summed_data = pd.DataFrame()
#     for prefix, columns in prefix_dict.items():
#         if len(columns) > 1:
#             summed_data[prefix] = df[columns].sum(axis=1) / 1000
#         else:
#             summed_data[prefix] = df[columns[0]] / 1000
    
#     # Step 2: Print original totals (in thousands)
#     print("\nOriginal Data Column Totals (in thousands):")
#     original_totals = summed_data.sum()
#     for prefix, total in original_totals.items():
#         print(f"{prefix}: {total:,.2f}")
#     print(f"\nOriginal Data Grand Total: {original_totals.sum():,.2f} (thousands)\n")
    
#     # Step 3: Transpose and create new format
#     transposed = summed_data.transpose()
    
#     # Create new structure - ensure nodes are in correct order
#     final_df = pd.DataFrame({
#         'node': transposed.index.tolist(),  # Explicitly use the transposed index
#         'year': year,
#         'sector': sector,
#         'carrier': carrier
#     })
    
#     # Add hourly columns
#     hour_cols = [f't{str(i).zfill(4)}' for i in range(1, 8761)]
#     transposed.columns = hour_cols
    
#     # Reset transposed index to align with final_df
#     transposed = transposed.reset_index(drop=True)
#     final_df = pd.concat([final_df, transposed], axis=1)
    
#     # Step 4: Print transformed totals (should match original totals)
#     print("\nTransformed Data Totals (by node, in thousands):")
#     for _, row in final_df.iterrows():
#         node = row['node']
#         total = row[hour_cols].sum()
#         print(f"{node}: {total:,.2f}")
#     print(f"\nTransformed Data Grand Total: {final_df[hour_cols].sum().sum():,.2f} (thousands)\n")
    
#     # Save to CSV
#     final_df.to_csv(output_file, index=False)
#     print(f"Final file saved to {output_file}")
    
#     return final_df

# # Run the processing
# input_file = 'C:/Local/REMix/remix_nz/input/demand/hadi/loads-p(for_Rafa).csv'  # Change to your filename
# output_file = 'C:/Local/REMix/remix_nz/input/demand/hadi/loads-p-grouped4remix.csv'   # Replace with your desired output file path
# result = process_data(input_file, output_file)

# # Print sample
# print("\nFirst 5 rows of final data:")
# print(result.head())
import pandas as pd
from collections import defaultdict
import re

def process_data(input_file, output_file_elec, output_file_h2, year=2030):
    # Step 1: Read the CSV
    df = pd.read_csv(input_file)

    # Separate dictionaries for Electricity and H2
    prefix_dict_elec = defaultdict(list)
    prefix_dict_h2 = defaultdict(list)

    # Step 2: Classify and group columns
    for column in df.columns:
        original_column = column  # Keep original for lookup

        # Fix mislabeled column "NZ.18"
        if column == "NZ.18":
            column = "WEL" + column  # So it can be matched with prefix "WEL"

        match = re.match(r'^([A-Z]{3})', column)
        if match:
            prefix = match.group(1)

            # Remap TRK → TRN
            if prefix == "TRK":
                prefix = "TRN"

            # Classify as H2 if contains "H2" or "fuel cell"
            if re.search(r'h2|fuel\s*cell', original_column, re.IGNORECASE):
                prefix_dict_h2[prefix].append(original_column)
            else:
                prefix_dict_elec[prefix].append(original_column)

    # Step 3: Sum and normalize (divide by 1000)
    def sum_columns(prefix_dict):
        summed = pd.DataFrame()
        for prefix, columns in prefix_dict.items():
            if len(columns) > 1:
                summed[prefix] = df[columns].sum(axis=1) / 1000
            else:
                summed[prefix] = df[columns[0]] / 1000
        return summed

    summed_elec = sum_columns(prefix_dict_elec)
    summed_h2 = sum_columns(prefix_dict_h2)

    # Step 4: Display totals
    print("\nOriginal Data Column Totals (in thousands):")
    for label, data in [('Electricity', summed_elec), ('H2', summed_h2)]:
        print(f"\n{label}:")
        total = data.sum()
        for prefix, val in total.items():
            print(f"{prefix}: {val:,.2f}")
        print(f"{label} Total: {total.sum():,.2f}")

    # Step 5: Transform format
    def build_final_df(summed_data, year, sector, carrier):
        transposed = summed_data.transpose()
        final = pd.DataFrame({
            'node': transposed.index.tolist(),
            'year': year,
            'sector': sector,
            'carrier': carrier
        })
        hour_cols = [f't{str(i).zfill(4)}' for i in range(1, 8761)]
        transposed.columns = hour_cols
        transposed = transposed.reset_index(drop=True)
        final = pd.concat([final, transposed], axis=1)
        return final, hour_cols

    final_elec, _ = build_final_df(summed_elec, year, "Wholesale", "Electricity")
    final_h2, _ = build_final_df(summed_h2, year, "Demand", "H2")

    # Step 6: Transformed totals check
    print("\nTransformed Data Totals (by node, in thousands):")
    for label, final in [('Electricity', final_elec), ('H2', final_h2)]:
        print(f"\n{label}:")
        for _, row in final.iterrows():
            node = row['node']
            total = row.iloc[4:].sum()
            print(f"{node}: {total:,.2f}")
        print(f"{label} Total: {final.iloc[:, 4:].sum().sum():,.2f}")

    # Step 7: Save to separate CSVs
    final_elec.to_csv(output_file_elec, index=False)
    final_h2.to_csv(output_file_h2, index=False)
    print(f"\n✅ Electricity file saved to: {output_file_elec}")
    print(f"✅ H2 file saved to: {output_file_h2}")

    return final_elec, final_h2

# --- Run the script ---

input_file = 'C:/Local/REMix/remix_nz/input/demand/hadi/loads-p(for_Rafa).csv'
output_file_elec = 'C:/Local/REMix/remix_nz/input/demand/hadi/loads-p-electricity.csv'
output_file_h2 = 'C:/Local/REMix/remix_nz/input/demand/hadi/loads-p-h2.csv'

result_elec, result_h2 = process_data(input_file, output_file_elec, output_file_h2)

# Preview
print("\nFirst 5 rows of ELECTRICITY data:")
print(result_elec.head())

print("\nFirst 5 rows of H2 data:")
print(result_h2.head())
