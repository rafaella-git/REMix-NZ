GAMS 40.4.0  d540b52e Oct 3, 2022           WEX-WEI x86 64bit/MS Windows - 03/25/24 11:58:05 Page 1
G e n e r a l   A l g e b r a i c   M o d e l i n g   S y s t e m
C o m p i l a t i o n


   1  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
   2  * SPDX-License-Identifier: BSD-3-Clause
   3   
   4  * ==== REMix version number ====
   6   
   7  * ==== global settings ====
  12   
  14   
  15  * ==== write metadata and inherit dataset ====
INCLUDE    C:\Local\REMix\framework\remix\framework\model\source\metadata.gms
  24   
  28   
  44   
  60   
  61  set metadata(*) /
INCLUDE    C:\Local\REMix\remix_nz\process\225a\metadata
  63  remix_version "0.9.7"
  64  gams_version "40.4.0"
  65  timestamp "03/25/24 11:58:05"
  66  framework_path "C:\Local\REMix\framework\remix\framework\model\source"
  67   
  68  framework_hash 7f8d5986f26877794fa525573cbfe4d2f340fe0b
  69   
  70  framework_branch "main"
  71   
  72  project_path "C:\Local\REMix\remix_nz\output\will\01-battery-distributed_2020-2035-2050\data"
  73   
  74  project_hash "7f8d5986f26877794fa525573cbfe4d2f340fe0b"
  75   
  76  project_branch "main"
  77   
  78  /;
INCLUDE    C:\Local\REMix\framework\remix\framework\model\source\data_inheritance.gms
  80  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
  81  * SPDX-License-Identifier: BSD-3-Clause
  82   
  85   
  90   
  91  * pandas based data inheritance reading in the dat files, merging them and writing csv files in the scrdir
 113  ;
 114   
 118   
 119  * ==== run remix ====
INCLUDE    C:\Local\REMix\framework\remix\framework\model\source\remix.gms
 124  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
 125  * SPDX-License-Identifier: BSD-3-Clause
 126   
 127  * ==== global settings ====
 135   
 138   
 140   
 143   
 144  * ==== include modules ====
INCLUDE    C:\Local\REMix\framework\remix\framework\model\source\sets.gms
 146  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
 147  * SPDX-License-Identifier: BSD-3-Clause
 148   
 149  * // # sets
 150  * // Sets are the indices of variables and parameters.
 151   
 152  * // ## Reference
 153  * // {special_table_sets}
 154   
 155  * // ## Input Files
 156  * // {special_table_set_input_files}
 870   
 871  map_accNodes(accNodesModel,accNodesModel_aggregation)
 872      $sum((nodesData, nodesModelToCalc)
 873              $( sameas(nodesModelToCalc,accNodesModel)
 874                  and map_accNodesLoad(nodesData,accNodesModel_aggregation)
 875                  and aggregateNodesModel(nodesData,nodesModelToCalc)), 1) = yes;
 876   
 877  map_accNodes(accNodesModel,"global")$sum(nodesModelToCalc$sameas(accNodesModel,nodesModelToCalc), 1) = yes;
 878  map_accNodes(accNodesModel,"global")$sum(accNodes$sameas(accNodesModel,accNodes), 1) = yes;
 879  map_accNodes(accNodesModel,accNodesModel) = yes;
 880  map_accLinks(accLinksModel,"global")$sum(linksModelToCalc$sameas(accLinksModel,linksModelToCalc), 1) = yes;
 881  map_accLinks(accLinksModel,accLinksModel) = yes;
 882  map_accYears(accYears,"horizon")$sum(yearsToCalc$sameas(accYears,yearsToCalc), 1)  = yes;
 883  map_accYears(accYears,accYears) = yes;
 884   
 885  map_accNodesToCalc(accNodesModel,nodesModelToCalc)
 886      $sum((nodesData)
 887              $( map_accNodesLoad(nodesData,accNodesModel)
 888                  and aggregateNodesModel(nodesData,nodesModelToCalc)), 1) = yes;
 889   
 890  map_accNodesToCalc("global",nodesModelToCalc) = yes;
 891  map_accNodesToCalc(accNodesModel,nodesModelToCalc)$sameas(accNodesModel,nodesModelToCalc) = yes;
 892  map_accLinksToCalc("global",linksModelToCalc) = yes;
 893  map_accLinksToCalc(accLinksModel,linksModelToCalc)$sameas(accLinksModel,linksModelToCalc) = yes;
 894  map_accYearsToCalc("horizon",yearsToCalc) = yes;
 895  map_accYearsToCalc(accYears,yearsToCalc)$sameas(accYears,yearsToCalc) = yes;
 896   
 897  * Duplicate sets for postcalc reporting without horizon and accYears
 898  map_accNodesPostCalc(accNodesModel,nodesModelToCalc) = map_accNodesToCalc(accNodesModel,nodesModelToCalc);
 899  map_accLinksPostCalc(accLinksModel,linksModelToCalc) = map_accLinksToCalc(accLinksModel,linksModelToCalc);
 900  map_accYearsPostCalc(accYears,yearsToCalc)$sameas(accYears,yearsToCalc) = yes;
 901  map_accYearsPostCalc(accYears,years)$(sameas(accYears,years) and years.val < sum(yearsToCalc$(ord(yearsToCalc) = 1), yearsToCalc.val)) = yes;
 902   
 903  set map_nodesAccounting(accNodesModel_aggregation,accNodesModel) "Map accounting nodes describes the mapping between model accounting nodes and data nodes." ;
 904  option map_nodesAccounting < map_accNodes;
 905   
 906  * ==== Generic sets  ====
 907  * These set names are repeated across different profile parameters.
 908  * they are not strictly related to each other and are not input data but
 909  * are needed for validation.
 910  ** // PROFILE: profileTypes | Profile Types | OEO_00140056:flow potential | set_profiletypes.csv
 911   
 912  ** // SET: scenario | Scenario | OEO_00000364:scenario | set_scenarios.csv
 913  * "Scenario indexes help to differentiate scenarios." /
 914   
 915  ** // SET: capType | Capacity Types | OEO_00030019:balance process attribute | set_captypes.csv
 916  * "Capacity types differentiate investment decisions." /
 917   
 918  ** // SET: balanceType | Balance Types | OEO_00030019:balance process attribute | set_balancetypes.csv
 919  * "Balance types differentiate types of balances." /
INCLUDE    C:\Local\REMix\framework\remix\framework\model\source\accounting\input.gms
 921  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
 922  * SPDX-License-Identifier: BSD-3-Clause
 923   
 924  * // # accounting_input
 925  * // The parameters in this file describe the accounting of indicators in the model.
 926   
 927  * // ## Variables
 928  * // {special_table_input_variables}
1289   
1290  * Aggregate accounting parameters
BATINCLUDE C:\Local\REMix\framework\remix\framework\model\source\battools\aggregateAccountingMean.gms
1292  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
1293  * SPDX-License-Identifier: BSD-3-Clause
1294   
1296   
1298   
1299  set accounting_converterUnitsNonzero(indicator,accnodesData,converter_techs,vintage);
1300  accounting_converterUnitsNonzero(indicator,accnodesData,converter_techs,vintage)
1301      $sum(pc_accounting_converterUnits$accounting_converterUnitsIn(indicator,accnodesData,converter_techs,vintage,pc_accounting_converterUnits), 1)
1302      = yes;
1303   
1305  set accounting_converterUnitsChk(indicator,nodesModel,converter_techs,vintage,pc_accounting_converterUnits);
1306  accounting_converterUnitsChk(indicator,nodesModel,converter_techs,vintage,"useAnnuity")
1307      $sum((nodesData,accnodesData)
1308              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1309                  and accounting_converterUnitsNonzero(indicator,accnodesData,converter_techs,vintage)), 1)
1310      = smax((nodesData,accnodesData)
1311              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1312                  and accounting_converterUnitsNonzero(indicator,accnodesData,converter_techs,vintage)),
1313          accounting_converterUnitsIn(indicator,accnodesData,converter_techs,vintage,"useAnnuity"))
1314      - smin((nodesData,accnodesData)
1315              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1316                  and accounting_converterUnitsNonzero(indicator,accnodesData,converter_techs,vintage)),
1317          accounting_converterUnitsIn(indicator,accnodesData,converter_techs,vintage,"useAnnuity"));
1318   
1319  abort$sum(accounting_converterUnitsChk(indicator,nodesModel,converter_techs,vintage,pc_accounting_converterUnits), 1) "Cannot aggregate technologies with different useAnnuity values."
1321   
1322  parameter accounting_converterUnitsAgg(indicator,nodesModel,converter_techs,vintage,pc_accounting_converterUnits);
1323  accounting_converterUnitsAgg(indicator,nodesModel,converter_techs,vintage,pc_accounting_converterUnits)
1324      $sum((nodesData,accnodesData)
1325              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1326                  and accounting_converterUnitsNonzero(indicator,accnodesData,converter_techs,vintage)), 1)
1327      = sum((nodesData,accnodesData)
1328              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1329                  and accounting_converterUnitsNonzero(indicator,accnodesData,converter_techs,vintage)),
1330          accounting_converterUnitsIn(indicator,accnodesData,converter_techs,vintage,pc_accounting_converterUnits))
1331      / sum((nodesData,accnodesData)
1332              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1333                  and accounting_converterUnitsNonzero(indicator,accnodesData,converter_techs,vintage)),
1334          1);
1335   
1336  parameter accounting_converterUnits(indicator,nodesModel,converter_techs,vintage,pc_accounting_converterUnits);
1337  loop(accnodes,
1338  accounting_converterUnits(indicator,nodesModel,converter_techs,vintage,pc_accounting_converterUnits)
1339      $sum(accnodesData$(map_accnodesToCalc(accnodes,nodesModel) and sameas(accnodes,accnodesData)
1340                              and accounting_converterUnitsIn(indicator,accnodesData,converter_techs,vintage,pc_accounting_converterUnits)), 1)
1341      = sum(accnodesData$(map_accnodesToCalc(accnodes,nodesModel) and sameas(accnodes,accnodesData)),
1342              accounting_converterUnitsIn(indicator,accnodesData,converter_techs,vintage,pc_accounting_converterUnits));
1343  );
1344   
1345  accounting_converterUnits(indicator,nodesModel,converter_techs,vintage,pc_accounting_converterUnits)
1346      $accounting_converterUnitsAgg(indicator,nodesModel,converter_techs,vintage,pc_accounting_converterUnits)
1347      = accounting_converterUnitsAgg(indicator,nodesModel,converter_techs,vintage,pc_accounting_converterUnits);
1348   
1349  * option kill %paramName%Nonzero %paramName%Chk %paramName%Agg
BATINCLUDE C:\Local\REMix\framework\remix\framework\model\source\battools\aggregateAccountingMean.gms
1351  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
1352  * SPDX-License-Identifier: BSD-3-Clause
1353   
1355   
1357   
1358  set accounting_converterActivityNonzero(indicator,accnodesData,converter_techs,vintage,activity);
1359  accounting_converterActivityNonzero(indicator,accnodesData,converter_techs,vintage,activity)
1360      $sum(pc_accounting_converterActivity$accounting_converterActivityIn(indicator,accnodesData,converter_techs,vintage,activity,pc_accounting_converterActivity), 1)
1361      = yes;
1362   
1364   
1365  parameter accounting_converterActivityAgg(indicator,nodesModel,converter_techs,vintage,activity,pc_accounting_converterActivity);
1366  accounting_converterActivityAgg(indicator,nodesModel,converter_techs,vintage,activity,pc_accounting_converterActivity)
1367      $sum((nodesData,accnodesData)
1368              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1369                  and accounting_converterActivityNonzero(indicator,accnodesData,converter_techs,vintage,activity)), 1)
1370      = sum((nodesData,accnodesData)
1371              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1372                  and accounting_converterActivityNonzero(indicator,accnodesData,converter_techs,vintage,activity)),
1373          accounting_converterActivityIn(indicator,accnodesData,converter_techs,vintage,activity,pc_accounting_converterActivity))
1374      / sum((nodesData,accnodesData)
1375              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1376                  and accounting_converterActivityNonzero(indicator,accnodesData,converter_techs,vintage,activity)),
1377          1);
1378   
1379  parameter accounting_converterActivity(indicator,nodesModel,converter_techs,vintage,activity,pc_accounting_converterActivity);
1380  loop(accnodes,
1381  accounting_converterActivity(indicator,nodesModel,converter_techs,vintage,activity,pc_accounting_converterActivity)
1382      $sum(accnodesData$(map_accnodesToCalc(accnodes,nodesModel) and sameas(accnodes,accnodesData)
1383                              and accounting_converterActivityIn(indicator,accnodesData,converter_techs,vintage,activity,pc_accounting_converterActivity)), 1)
1384      = sum(accnodesData$(map_accnodesToCalc(accnodes,nodesModel) and sameas(accnodes,accnodesData)),
1385              accounting_converterActivityIn(indicator,accnodesData,converter_techs,vintage,activity,pc_accounting_converterActivity));
1386  );
1387   
1388  accounting_converterActivity(indicator,nodesModel,converter_techs,vintage,activity,pc_accounting_converterActivity)
1389      $accounting_converterActivityAgg(indicator,nodesModel,converter_techs,vintage,activity,pc_accounting_converterActivity)
1390      = accounting_converterActivityAgg(indicator,nodesModel,converter_techs,vintage,activity,pc_accounting_converterActivity);
1391   
1392  * option kill %paramName%Nonzero %paramName%Chk %paramName%Agg
BATINCLUDE C:\Local\REMix\framework\remix\framework\model\source\battools\aggregateAccountingMean.gms
1394  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
1395  * SPDX-License-Identifier: BSD-3-Clause
1396   
1398   
1400   
1401  set accounting_converterStartupNonzero(indicator,accnodesData,converter_techs,vintage);
1402  accounting_converterStartupNonzero(indicator,accnodesData,converter_techs,vintage)
1403      $sum(pc_accounting_converterStartup$accounting_converterStartupIn(indicator,accnodesData,converter_techs,vintage,pc_accounting_converterStartup), 1)
1404      = yes;
1405   
1407   
1408  parameter accounting_converterStartupAgg(indicator,nodesModel,converter_techs,vintage,pc_accounting_converterStartup);
1409  accounting_converterStartupAgg(indicator,nodesModel,converter_techs,vintage,pc_accounting_converterStartup)
1410      $sum((nodesData,accnodesData)
1411              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1412                  and accounting_converterStartupNonzero(indicator,accnodesData,converter_techs,vintage)), 1)
1413      = sum((nodesData,accnodesData)
1414              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1415                  and accounting_converterStartupNonzero(indicator,accnodesData,converter_techs,vintage)),
1416          accounting_converterStartupIn(indicator,accnodesData,converter_techs,vintage,pc_accounting_converterStartup))
1417      / sum((nodesData,accnodesData)
1418              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1419                  and accounting_converterStartupNonzero(indicator,accnodesData,converter_techs,vintage)),
1420          1);
1421   
1422  parameter accounting_converterStartup(indicator,nodesModel,converter_techs,vintage,pc_accounting_converterStartup);
1423  loop(accnodes,
1424  accounting_converterStartup(indicator,nodesModel,converter_techs,vintage,pc_accounting_converterStartup)
1425      $sum(accnodesData$(map_accnodesToCalc(accnodes,nodesModel) and sameas(accnodes,accnodesData)
1426                              and accounting_converterStartupIn(indicator,accnodesData,converter_techs,vintage,pc_accounting_converterStartup)), 1)
1427      = sum(accnodesData$(map_accnodesToCalc(accnodes,nodesModel) and sameas(accnodes,accnodesData)),
1428              accounting_converterStartupIn(indicator,accnodesData,converter_techs,vintage,pc_accounting_converterStartup));
1429  );
1430   
1431  accounting_converterStartup(indicator,nodesModel,converter_techs,vintage,pc_accounting_converterStartup)
1432      $accounting_converterStartupAgg(indicator,nodesModel,converter_techs,vintage,pc_accounting_converterStartup)
1433      = accounting_converterStartupAgg(indicator,nodesModel,converter_techs,vintage,pc_accounting_converterStartup);
1434   
1435  * option kill %paramName%Nonzero %paramName%Chk %paramName%Agg
BATINCLUDE C:\Local\REMix\framework\remix\framework\model\source\battools\aggregateAccountingMean.gms
1437  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
1438  * SPDX-License-Identifier: BSD-3-Clause
1439   
1441   
1443   
1444  set accounting_storageUnitsNonzero(indicator,accnodesData,storage_techs,vintage);
1445  accounting_storageUnitsNonzero(indicator,accnodesData,storage_techs,vintage)
1446      $sum(pc_accounting_storageUnits$accounting_storageUnitsIn(indicator,accnodesData,storage_techs,vintage,pc_accounting_storageUnits), 1)
1447      = yes;
1448   
1450  set accounting_storageUnitsChk(indicator,nodesModel,storage_techs,vintage,pc_accounting_storageUnits);
1451  accounting_storageUnitsChk(indicator,nodesModel,storage_techs,vintage,"useAnnuity")
1452      $sum((nodesData,accnodesData)
1453              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1454                  and accounting_storageUnitsNonzero(indicator,accnodesData,storage_techs,vintage)), 1)
1455      = smax((nodesData,accnodesData)
1456              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1457                  and accounting_storageUnitsNonzero(indicator,accnodesData,storage_techs,vintage)),
1458          accounting_storageUnitsIn(indicator,accnodesData,storage_techs,vintage,"useAnnuity"))
1459      - smin((nodesData,accnodesData)
1460              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1461                  and accounting_storageUnitsNonzero(indicator,accnodesData,storage_techs,vintage)),
1462          accounting_storageUnitsIn(indicator,accnodesData,storage_techs,vintage,"useAnnuity"));
1463   
1464  abort$sum(accounting_storageUnitsChk(indicator,nodesModel,storage_techs,vintage,pc_accounting_storageUnits), 1) "Cannot aggregate technologies with different useAnnuity values."
1466   
1467  parameter accounting_storageUnitsAgg(indicator,nodesModel,storage_techs,vintage,pc_accounting_storageUnits);
1468  accounting_storageUnitsAgg(indicator,nodesModel,storage_techs,vintage,pc_accounting_storageUnits)
1469      $sum((nodesData,accnodesData)
1470              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1471                  and accounting_storageUnitsNonzero(indicator,accnodesData,storage_techs,vintage)), 1)
1472      = sum((nodesData,accnodesData)
1473              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1474                  and accounting_storageUnitsNonzero(indicator,accnodesData,storage_techs,vintage)),
1475          accounting_storageUnitsIn(indicator,accnodesData,storage_techs,vintage,pc_accounting_storageUnits))
1476      / sum((nodesData,accnodesData)
1477              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1478                  and accounting_storageUnitsNonzero(indicator,accnodesData,storage_techs,vintage)),
1479          1);
1480   
1481  parameter accounting_storageUnits(indicator,nodesModel,storage_techs,vintage,pc_accounting_storageUnits);
1482  loop(accnodes,
1483  accounting_storageUnits(indicator,nodesModel,storage_techs,vintage,pc_accounting_storageUnits)
1484      $sum(accnodesData$(map_accnodesToCalc(accnodes,nodesModel) and sameas(accnodes,accnodesData)
1485                              and accounting_storageUnitsIn(indicator,accnodesData,storage_techs,vintage,pc_accounting_storageUnits)), 1)
1486      = sum(accnodesData$(map_accnodesToCalc(accnodes,nodesModel) and sameas(accnodes,accnodesData)),
1487              accounting_storageUnitsIn(indicator,accnodesData,storage_techs,vintage,pc_accounting_storageUnits));
1488  );
1489   
1490  accounting_storageUnits(indicator,nodesModel,storage_techs,vintage,pc_accounting_storageUnits)
1491      $accounting_storageUnitsAgg(indicator,nodesModel,storage_techs,vintage,pc_accounting_storageUnits)
1492      = accounting_storageUnitsAgg(indicator,nodesModel,storage_techs,vintage,pc_accounting_storageUnits);
1493   
1494  * option kill %paramName%Nonzero %paramName%Chk %paramName%Agg
BATINCLUDE C:\Local\REMix\framework\remix\framework\model\source\battools\aggregateAccountingMean.gms
1496  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
1497  * SPDX-License-Identifier: BSD-3-Clause
1498   
1500   
1502   
1503  set accounting_transferLinksNonzero(indicator,acclinksData,transfer_techs,vintage);
1504  accounting_transferLinksNonzero(indicator,acclinksData,transfer_techs,vintage)
1505      $sum(pc_accounting_transferLinks$accounting_transferLinksIn(indicator,acclinksData,transfer_techs,vintage,pc_accounting_transferLinks), 1)
1506      = yes;
1507   
1509  set accounting_transferLinksChk(indicator,linksModel,transfer_techs,vintage,pc_accounting_transferLinks);
1510  accounting_transferLinksChk(indicator,linksModel,transfer_techs,vintage,"useAnnuity")
1511      $sum((linksData,acclinksData)
1512              $(aggregatelinksModel(linksData,linksModel) and sameas(linksData,acclinksData)
1513                  and accounting_transferLinksNonzero(indicator,acclinksData,transfer_techs,vintage)), 1)
1514      = smax((linksData,acclinksData)
1515              $(aggregatelinksModel(linksData,linksModel) and sameas(linksData,acclinksData)
1516                  and accounting_transferLinksNonzero(indicator,acclinksData,transfer_techs,vintage)),
1517          accounting_transferLinksIn(indicator,acclinksData,transfer_techs,vintage,"useAnnuity"))
1518      - smin((linksData,acclinksData)
1519              $(aggregatelinksModel(linksData,linksModel) and sameas(linksData,acclinksData)
1520                  and accounting_transferLinksNonzero(indicator,acclinksData,transfer_techs,vintage)),
1521          accounting_transferLinksIn(indicator,acclinksData,transfer_techs,vintage,"useAnnuity"));
1522   
1523  abort$sum(accounting_transferLinksChk(indicator,linksModel,transfer_techs,vintage,pc_accounting_transferLinks), 1) "Cannot aggregate technologies with different useAnnuity values."
1525   
1526  parameter accounting_transferLinksAgg(indicator,linksModel,transfer_techs,vintage,pc_accounting_transferLinks);
1527  accounting_transferLinksAgg(indicator,linksModel,transfer_techs,vintage,pc_accounting_transferLinks)
1528      $sum((linksData,acclinksData)
1529              $(aggregatelinksModel(linksData,linksModel) and sameas(linksData,acclinksData)
1530                  and accounting_transferLinksNonzero(indicator,acclinksData,transfer_techs,vintage)), 1)
1531      = sum((linksData,acclinksData)
1532              $(aggregatelinksModel(linksData,linksModel) and sameas(linksData,acclinksData)
1533                  and accounting_transferLinksNonzero(indicator,acclinksData,transfer_techs,vintage)),
1534          accounting_transferLinksIn(indicator,acclinksData,transfer_techs,vintage,pc_accounting_transferLinks))
1535      / sum((linksData,acclinksData)
1536              $(aggregatelinksModel(linksData,linksModel) and sameas(linksData,acclinksData)
1537                  and accounting_transferLinksNonzero(indicator,acclinksData,transfer_techs,vintage)),
1538          1);
1539   
1540  parameter accounting_transferLinks(indicator,linksModel,transfer_techs,vintage,pc_accounting_transferLinks);
1541  loop(acclinks,
1542  accounting_transferLinks(indicator,linksModel,transfer_techs,vintage,pc_accounting_transferLinks)
1543      $sum(acclinksData$(map_acclinksToCalc(acclinks,linksModel) and sameas(acclinks,acclinksData)
1544                              and accounting_transferLinksIn(indicator,acclinksData,transfer_techs,vintage,pc_accounting_transferLinks)), 1)
1545      = sum(acclinksData$(map_acclinksToCalc(acclinks,linksModel) and sameas(acclinks,acclinksData)),
1546              accounting_transferLinksIn(indicator,acclinksData,transfer_techs,vintage,pc_accounting_transferLinks));
1547  );
1548   
1549  accounting_transferLinks(indicator,linksModel,transfer_techs,vintage,pc_accounting_transferLinks)
1550      $accounting_transferLinksAgg(indicator,linksModel,transfer_techs,vintage,pc_accounting_transferLinks)
1551      = accounting_transferLinksAgg(indicator,linksModel,transfer_techs,vintage,pc_accounting_transferLinks);
1552   
1553  * option kill %paramName%Nonzero %paramName%Chk %paramName%Agg
BATINCLUDE C:\Local\REMix\framework\remix\framework\model\source\battools\aggregateAccountingMean.gms
1555  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
1556  * SPDX-License-Identifier: BSD-3-Clause
1557   
1559   
1561   
1562  set accounting_transferPerLengthNonzero(indicator,acclinksData,transfer_techs,vintage,link_types);
1563  accounting_transferPerLengthNonzero(indicator,acclinksData,transfer_techs,vintage,link_types)
1564      $sum(pc_accounting_transferPerLength$accounting_transferPerLengthIn(indicator,acclinksData,transfer_techs,vintage,link_types,pc_accounting_transferPerLength), 1)
1565      = yes;
1566   
1568  set accounting_transferPerLengthChk(indicator,linksModel,transfer_techs,vintage,link_types,pc_accounting_transferPerLength);
1569  accounting_transferPerLengthChk(indicator,linksModel,transfer_techs,vintage,link_types,"useAnnuity")
1570      $sum((linksData,acclinksData)
1571              $(aggregatelinksModel(linksData,linksModel) and sameas(linksData,acclinksData)
1572                  and accounting_transferPerLengthNonzero(indicator,acclinksData,transfer_techs,vintage,link_types)), 1)
1573      = smax((linksData,acclinksData)
1574              $(aggregatelinksModel(linksData,linksModel) and sameas(linksData,acclinksData)
1575                  and accounting_transferPerLengthNonzero(indicator,acclinksData,transfer_techs,vintage,link_types)),
1576          accounting_transferPerLengthIn(indicator,acclinksData,transfer_techs,vintage,link_types,"useAnnuity"))
1577      - smin((linksData,acclinksData)
1578              $(aggregatelinksModel(linksData,linksModel) and sameas(linksData,acclinksData)
1579                  and accounting_transferPerLengthNonzero(indicator,acclinksData,transfer_techs,vintage,link_types)),
1580          accounting_transferPerLengthIn(indicator,acclinksData,transfer_techs,vintage,link_types,"useAnnuity"));
1581   
1582  abort$sum(accounting_transferPerLengthChk(indicator,linksModel,transfer_techs,vintage,link_types,pc_accounting_transferPerLength), 1) "Cannot aggregate technologies with different useAnnuity values."
1584   
1585  parameter accounting_transferPerLengthAgg(indicator,linksModel,transfer_techs,vintage,link_types,pc_accounting_transferPerLength);
1586  accounting_transferPerLengthAgg(indicator,linksModel,transfer_techs,vintage,link_types,pc_accounting_transferPerLength)
1587      $sum((linksData,acclinksData)
1588              $(aggregatelinksModel(linksData,linksModel) and sameas(linksData,acclinksData)
1589                  and accounting_transferPerLengthNonzero(indicator,acclinksData,transfer_techs,vintage,link_types)), 1)
1590      = sum((linksData,acclinksData)
1591              $(aggregatelinksModel(linksData,linksModel) and sameas(linksData,acclinksData)
1592                  and accounting_transferPerLengthNonzero(indicator,acclinksData,transfer_techs,vintage,link_types)),
1593          accounting_transferPerLengthIn(indicator,acclinksData,transfer_techs,vintage,link_types,pc_accounting_transferPerLength))
1594      / sum((linksData,acclinksData)
1595              $(aggregatelinksModel(linksData,linksModel) and sameas(linksData,acclinksData)
1596                  and accounting_transferPerLengthNonzero(indicator,acclinksData,transfer_techs,vintage,link_types)),
1597          1);
1598   
1599  parameter accounting_transferPerLength(indicator,linksModel,transfer_techs,vintage,link_types,pc_accounting_transferPerLength);
1600  loop(acclinks,
1601  accounting_transferPerLength(indicator,linksModel,transfer_techs,vintage,link_types,pc_accounting_transferPerLength)
1602      $sum(acclinksData$(map_acclinksToCalc(acclinks,linksModel) and sameas(acclinks,acclinksData)
1603                              and accounting_transferPerLengthIn(indicator,acclinksData,transfer_techs,vintage,link_types,pc_accounting_transferPerLength)), 1)
1604      = sum(acclinksData$(map_acclinksToCalc(acclinks,linksModel) and sameas(acclinks,acclinksData)),
1605              accounting_transferPerLengthIn(indicator,acclinksData,transfer_techs,vintage,link_types,pc_accounting_transferPerLength));
1606  );
1607   
1608  accounting_transferPerLength(indicator,linksModel,transfer_techs,vintage,link_types,pc_accounting_transferPerLength)
1609      $accounting_transferPerLengthAgg(indicator,linksModel,transfer_techs,vintage,link_types,pc_accounting_transferPerLength)
1610      = accounting_transferPerLengthAgg(indicator,linksModel,transfer_techs,vintage,link_types,pc_accounting_transferPerLength);
1611   
1612  * option kill %paramName%Nonzero %paramName%Chk %paramName%Agg
BATINCLUDE C:\Local\REMix\framework\remix\framework\model\source\battools\aggregateAccountingMean.gms
1614  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
1615  * SPDX-License-Identifier: BSD-3-Clause
1616   
1618   
1620   
1621  set accounting_sourcesinkFlowNonzero(indicator,accnodesData,years,sourcesink_techs,commodity);
1622  accounting_sourcesinkFlowNonzero(indicator,accnodesData,years,sourcesink_techs,commodity)
1623      $sum(pc_accounting_sourcesinkFlow$accounting_sourcesinkFlowIn(indicator,accnodesData,years,sourcesink_techs,commodity,pc_accounting_sourcesinkFlow), 1)
1624      = yes;
1625   
1627   
1628  parameter accounting_sourcesinkFlowAgg(indicator,nodesModel,years,sourcesink_techs,commodity,pc_accounting_sourcesinkFlow);
1629  accounting_sourcesinkFlowAgg(indicator,nodesModel,years,sourcesink_techs,commodity,pc_accounting_sourcesinkFlow)
1630      $sum((nodesData,accnodesData)
1631              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1632                  and accounting_sourcesinkFlowNonzero(indicator,accnodesData,years,sourcesink_techs,commodity)), 1)
1633      = sum((nodesData,accnodesData)
1634              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1635                  and accounting_sourcesinkFlowNonzero(indicator,accnodesData,years,sourcesink_techs,commodity)),
1636          accounting_sourcesinkFlowIn(indicator,accnodesData,years,sourcesink_techs,commodity,pc_accounting_sourcesinkFlow))
1637      / sum((nodesData,accnodesData)
1638              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1639                  and accounting_sourcesinkFlowNonzero(indicator,accnodesData,years,sourcesink_techs,commodity)),
1640          1);
1641   
1642  parameter accounting_sourcesinkFlow(indicator,nodesModel,years,sourcesink_techs,commodity,pc_accounting_sourcesinkFlow);
1643  loop(accnodes,
1644  accounting_sourcesinkFlow(indicator,nodesModel,years,sourcesink_techs,commodity,pc_accounting_sourcesinkFlow)
1645      $sum(accnodesData$(map_accnodesToCalc(accnodes,nodesModel) and sameas(accnodes,accnodesData)
1646                              and accounting_sourcesinkFlowIn(indicator,accnodesData,years,sourcesink_techs,commodity,pc_accounting_sourcesinkFlow)), 1)
1647      = sum(accnodesData$(map_accnodesToCalc(accnodes,nodesModel) and sameas(accnodes,accnodesData)),
1648              accounting_sourcesinkFlowIn(indicator,accnodesData,years,sourcesink_techs,commodity,pc_accounting_sourcesinkFlow));
1649  );
1650   
1651  accounting_sourcesinkFlow(indicator,nodesModel,years,sourcesink_techs,commodity,pc_accounting_sourcesinkFlow)
1652      $accounting_sourcesinkFlowAgg(indicator,nodesModel,years,sourcesink_techs,commodity,pc_accounting_sourcesinkFlow)
1653      = accounting_sourcesinkFlowAgg(indicator,nodesModel,years,sourcesink_techs,commodity,pc_accounting_sourcesinkFlow);
1654   
1655  * option kill %paramName%Nonzero %paramName%Chk %paramName%Agg
1656   
1657  parameter accounting_indicatorBounds_links(linksModel,years,indicator,pc_accounting_indicatorBounds_links);
1658  accounting_indicatorBounds_links(linksModelToCalc,yearsToCalc,indicator,pc_accounting_indicatorBounds_links)
1659      = sum((linksData)$sameas(linksModelToCalc,linksData),
1660              accounting_indicatorBounds_linksIn(linksData,yearsToCalc,indicator,pc_accounting_indicatorBounds_links));
1661   
1662  accounting_indicatorBounds_links(linksModelToCalc,yearsToCalc,indicator,pc_accounting_indicatorBounds_links)
1663      = sum((linksData)$links_aggregate(linksModelToCalc,linksData),
1664              accounting_indicatorBounds_linksIn(linksData,yearsToCalc,indicator,pc_accounting_indicatorBounds_links));
1665   
1666  parameter accounting_indicatorBounds(accNodesModel,accYears,indicator,pc_accounting_indicatorBounds);
1667  accounting_indicatorBounds(accNodesModel,accYears,indicator,pc_accounting_indicatorBounds)
1668      = sum (accNodesData$sameas(accNodesModel,accNodesData),
1669          accounting_indicatorBoundsIn(accNodesData,accYears,indicator,pc_accounting_indicatorBounds));
1670   
1671  accounting_indicatorBounds(accNodesModel,accYears,indicator,pc_accounting_indicatorBounds)
1672      $(sum (nodesModel$sameas(accNodesModel,nodesModel), 1) > 0)
1673      = sum ((accNodesData,nodesData,nodesModel)
1674              $(aggregateNodesModel(nodesData,nodesModel) and sameas(accNodesModel,nodesModel) and sameas(accNodesData,nodesData)),
1675          accounting_indicatorBoundsIn(accNodesData,accYears,indicator,pc_accounting_indicatorBounds));
1676   
1677  set accounting_perIndicatorNonzero(indicator,indicator_a,accNodesData,accYears);
1678  accounting_perIndicatorNonzero(indicator,indicator_a,accNodesData,accYears)
1679      $sum(pc_accounting_perIndicator$accounting_perIndicatorIn(indicator,indicator_a,accNodesData,accYears,pc_accounting_perIndicator), 1)
1680      = yes;
1681   
1682  parameter accounting_perIndicatorAgg(indicator,indicator_a,nodesModel,accYears,pc_accounting_perIndicator);
1683  accounting_perIndicatorAgg(indicator,indicator_a,nodesModel,accYears,pc_accounting_perIndicator)
1684      $sum((nodesData,accnodesData)
1685              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1686                  and accounting_perIndicatorNonzero(indicator,indicator_a,accnodesData,accYears)), 1)
1687      = sum((nodesData,accnodesData)
1688              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1689                  and accounting_perIndicatorNonzero(indicator,indicator_a,accnodesData,accYears)),
1690          accounting_perIndicatorIn(indicator,indicator_a,accnodesData,accYears,pc_accounting_perIndicator))
1691      / sum((nodesData,accnodesData)
1692              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1693                  and accounting_perIndicatorNonzero(indicator,indicator_a,accnodesData,accYears)),
1694          1);
1695   
1696  parameter accounting_perIndicator(indicator,indicator_a,accNodesModel,accYears,pc_accounting_perIndicator);
1697   
1698  loop(accNodes,
1699  accounting_perIndicator(indicator,indicator_a,accNodesModel,accYears,pc_accounting_perIndicator)
1700      $(sum(accNodesData$(sameas(accNodes,accNodesData)
1701              and accounting_perIndicatorIn(indicator,indicator_a,accNodesData,"horizon",pc_accounting_perIndicator)), 1)
1702          and map_accNodes(accNodesModel,accNodes)
1703              )
1704      = sum(accNodesData$(sameas(accNodes,accNodesData)),
1705              accounting_perIndicatorIn(indicator,indicator_a,accNodesData,"horizon",pc_accounting_perIndicator));
1706   
1707  accounting_perIndicator(indicator,indicator_a,accNodesModel,accYears,pc_accounting_perIndicator)
1708      $(sum(accNodesData$(sameas(accNodes,accNodesData)
1709              and accounting_perIndicatorIn(indicator,indicator_a,accNodesData,accYears,pc_accounting_perIndicator)), 1)
1710          and map_accNodes(accNodesModel,accNodes)
1711          and not sameas(accYears, "horizon"))
1712      = sum(accNodesData$(sameas(accNodes,accNodesData)),
1713              accounting_perIndicatorIn(indicator,indicator_a,accNodesData,accYears,pc_accounting_perIndicator));
1714  );
1715   
1716  accounting_perIndicator(indicator,indicator_a,accNodesModel,accYears,pc_accounting_perIndicator)
1717      $sum(nodesModel$(accounting_perIndicatorAgg(indicator,indicator_a,nodesModel,"horizon",pc_accounting_perIndicator)
1718          and sameas(accNodesModel,nodesModel)), 1)
1719      = sum(nodesModel$sameas(accNodesModel,nodesModel),
1720          accounting_perIndicatorAgg(indicator,indicator_a,nodesModel,"horizon",pc_accounting_perIndicator));
1721   
1722  accounting_perIndicator(indicator,indicator_a,accNodesModel,accYears,pc_accounting_perIndicator)
1723      $sum(nodesModel$(accounting_perIndicatorAgg(indicator,indicator_a,nodesModel,accYears,pc_accounting_perIndicator)
1724          and sameas(accNodesModel,nodesModel) and not sameas(accYears, "horizon")), 1)
1725      = sum(nodesModel$sameas(accNodesModel,nodesModel),
1726          accounting_perIndicatorAgg(indicator,indicator_a,nodesModel,accYears,pc_accounting_perIndicator));
1727   
1728   
1729  * Make sure all required indicators end up in the model
1730  set activeIndicators(accNodesModel,accYears,indicator);
1731  activeIndicators(accNodesModel,accYears,indicator)
1732     $((accounting_indicatorBounds(accNodesModel,accYears,indicator,"obj") <> 0
1735        or accounting_indicatorBounds(accNodesModel,accYears,indicator,"useFixed") <> 0
1736        or accounting_indicatorBounds(accNodesModel,accYears,indicator,"useLower") <> 0
1737        or accounting_indicatorBounds(accNodesModel,accYears,indicator,"useUpper") <> 0 )
1738          and not accounting_indicatorBounds(accNodesModel,accYears,indicator,"isVariable"))
1739     = yes;
1740   
1741  set activeIndicators_links(linksModel,years,indicator);
1742  activeIndicators_links(linksModelToCalc,yearsToCalc,indicator)
1743     $(accounting_indicatorBounds_links(linksModelToCalc,yearsToCalc,indicator,"useFixed") <> 0
1744        or accounting_indicatorBounds_links(linksModelToCalc,yearsToCalc,indicator,"useLower") <> 0
1745        or accounting_indicatorBounds_links(linksModelToCalc,yearsToCalc,indicator,"useUpper") <> 0 )
1746     = yes;
1747   
1748  set variableIndicators(accNodesModel,accYears,indicator);
1749  variableIndicators(accNodesModel,accYears,indicator)
1750     $(accounting_indicatorBounds(accNodesModel,accYears,indicator,"obj") = 0
1751        and accounting_indicatorBounds(accNodesModel,accYears,indicator,"isVariable"))
1752     = yes;
1753   
1754  * Calculate length of years and discount rates per indicator
1755  parameter yearFactor(accNodesModel,accYears,indicator,accYears);
1756  yearFactor(accNodesModel,accYears,indicator,accYears_a)
1757      $(map_accYears(accYears_a,accYears)
1758          and sum(yearsToCalc$(sameas(yearsToCalc,accYears_a)), 1))
1759      = 1;
1760   
1761  yearFactor(accNodesModel,accYears,indicator,accYears_a)
1762      $(map_accYears(accYears_a,accYears)
1763          and sum(yearsToCalc$(sameas(yearsToCalc,accYears_a)), 1)
1764          and accounting_indicatorBounds(accNodesModel,accYears,indicator,"integral"))
1765      = sum(yearsToCalc$sameas(accYears_a,yearsToCalc), yearsLen(yearsToCalc));
1766   
1767  yearFactor(accNodesModel,accYears,indicator,accYears_a)
1768      $(map_accYears(accYears_a,accYears)
1769          and sum(yearsToCalc$(sameas(yearsToCalc,accYears_a)), 1)
1770          and accounting_indicatorBounds(accNodesModel,accYears,indicator,"integral")
1771          and accounting_indicatorBounds(accNodesModel,accYears,indicator,"endyear")
1772          and yearFactor(accNodesModel,accYears,indicator,accYears_a) = inf)
1773      = accounting_indicatorBounds(accNodesModel,accYears,indicator,"endyear");
1774   
1775  yearFactor(accNodesModel,accYears,indicator,accYears_a)
1776      $(map_accYears(accYears_a,accYears)
1777          and sum(yearsToCalc$(sameas(yearsToCalc,accYears_a)), 1)
1778          and accounting_indicatorBounds(accNodesModel,accYears,indicator,"integral")
1779          and accounting_indicatorBounds(accNodesModel,accYears,indicator,"discount"))
1780      = yearFactor(accNodesModel,accYears,indicator,accYears_a)
1781          * (1 - accounting_indicatorBounds(accNodesModel,accYears,indicator,"discount"))
1782                  ** (accYears_a.val - smin(yearsToCalc, yearsToCalc.val));
1783   
1784   
1785  * ==== calculate compound indicators for the optimization ====
1786  scalar compIndicators_pre;
1787  scalar compIndicators_post;
1788   
1789  parameter compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a);
1790  compoundIndicators(accNodesModel,accYears,indicator,accNodesModel,accYears,indicator)
1791      $activeIndicators(accNodesModel,accYears,indicator) = 1;
1792   
1793  set compoundIndicators_act(accNodesModel,accYears,indicator);
1794  option compoundIndicators_act < compoundIndicators;
1795   
1796  parameter compoundIndicatorsExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa);
1797  parameter compoundIndicatorsExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a);
1798  compoundIndicatorsExt(accNodesModel,accYears,indicator,accNodesModel,accYears,indicator,accNodesModel,accYears,indicator)
1799      $compoundIndicators_act(accNodesModel,accYears,indicator) = 1;
1800   
1801  compIndicators_pre = 0;
1802  compIndicators_post = 1;
1803   
1804  option sparseval = 1;
1805  while(compIndicators_pre < compIndicators_post,
1806      compIndicators_pre = sum((accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa)
1807          $compoundIndicatorsExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa), 1);
1808   
1809      compoundIndicatorsExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa)
1810          $(compoundIndicators_act(accNodesModel,accYears,indicator)
1811              and compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
1812              and not accounting_indicatorBounds(accNodesModel_a,accYears_a,indicator_a,"isVariable")
1813              and map_accNodes(accNodesModel_aa,accNodesModel_a)
1814              and map_accYears(accYears_aa,accYears_a))
1815          = compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
1816              * accounting_perIndicator(indicator_a,indicator_aa,accNodesModel_aa,accYears_aa,"perIndicator");
1817   
1818      option compoundIndicatorsExt_r < compoundIndicatorsExt;
1819   
1820      compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa)
1821          $(compoundIndicators_act(accNodesModel,accYears,indicator)
1822              and sum((accNodesModel_a,accYears_a,indicator_a)
1823                      $compoundIndicatorsExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a), 1) = 1)
1824          = sum((accNodesModel_a,accYears_a,indicator_a)
1825                  $(compoundIndicatorsExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a)),
1826              compoundIndicatorsExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a));
1827   
1828      compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa)
1829          $(compoundIndicators_act(accNodesModel,accYears,indicator)
1830              and sum((accNodesModel_a,accYears_a,indicator_a)
1831                      $compoundIndicatorsExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a), 1) > 1)
1832          = sum((accNodesModel_a,accYears_a,indicator_a)
1833                  $(compoundIndicatorsExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a)
1834                      and not (sameas(accNodesModel, accNodesModel_a) and sameas(accYears, accYears_a) and sameas(indicator, indicator_a))),
1835              compoundIndicatorsExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a))
1836          / sum((accNodesModel_a,accYears_a,indicator_a)
1837                  $(compoundIndicatorsExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a)
1838                      and not (sameas(accNodesModel, accNodesModel_a) and sameas(accYears, accYears_a) and sameas(indicator, indicator_a))), 1);
1839   
1840      option compoundIndicators_act < compoundIndicators;
1841      compIndicators_post = sum((accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa)
1842          $compoundIndicatorsExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa), 1);
1843  );
1844  option sparseval = 0;
1845   
1846  * map to sub-years and sub-nodes
1847  compoundIndicatorsExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_a)
1848      $(compoundIndicators_act(accNodesModel,accYears,indicator)
1849          and compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
1850          and map_accYears(accYears_aa,accYears_a)
1851          and map_accNodes(accNodesModel_aa,accNodesModel_a))
1852      = compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
1853          * yearFactor(accNodesModel,accYears,indicator,accYears_aa);
1854   
1855  * Remove all accounting regions and accounting years
1856  compoundIndicatorsExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa)
1857      $(compoundIndicatorsExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa)
1858          and not accounting_indicatorBounds(accNodesModel_aa,accYears_aa,indicator_aa,"isVariable")
1859          and sum(accNodes$(sameas(accNodes,accNodesModel_aa)), 1)
1860              or sameas("horizon",accYears_aa))
1861      = 0;
1862   
1863  * Map from extended parameter to final parameter
1864  option compoundIndicatorsExt_r < compoundIndicatorsExt;
1865  compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa)
1866      $(compoundIndicators_act(accNodesModel,accYears,indicator)
1867          and sum((accNodesModel_a,accYears_a,indicator_a)
1868                  $compoundIndicatorsExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a), 1) = 1)
1869      = sum((accNodesModel_a,accYears_a,indicator_a)
1870              $(compoundIndicatorsExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a)),
1871          compoundIndicatorsExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a));
1872   
1873  compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa)
1874      $(compoundIndicators_act(accNodesModel,accYears,indicator)
1875          and sum((accNodesModel_a,accYears_a,indicator_a)
1876                  $compoundIndicatorsExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a), 1) > 1)
1877      = sum((accNodesModel_a,accYears_a,indicator_a)
1878              $(compoundIndicatorsExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a)
1879                  and not (sameas(accNodesModel, accNodesModel_a) and sameas(accYears, accYears_a) and sameas(indicator, indicator_a))),
1880          compoundIndicatorsExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a))
1881      / sum((accNodesModel_a,accYears_a,indicator_a)
1882              $(compoundIndicatorsExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a)
1883                  and not (sameas(accNodesModel, accNodesModel_a) and sameas(accYears, accYears_a) and sameas(indicator, indicator_a))), 1);
1884   
1885  * Remove all accounting regions and accounting years
1886  compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
1887      $(compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
1888          and not accounting_indicatorBounds(accNodesModel_a,accYears_a,indicator_a,"isVariable")
1889          and (sum(accNodes$(sameas(accNodes,accNodesModel_a)), 1)
1890              or sameas("horizon",accYears_a)))
1891      = 0;
1892   
1893  * Remove all slack indicators except the ones declared in indicatorBounds
1894  compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
1895      $(compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
1896          and sum((accNodesModel_aa,accYears_aa)$accounting_indicatorBounds(accNodesModel_aa,accYears_aa,indicator_a,"isVariable"), 1)
1897          and not accounting_indicatorBounds(accNodesModel_a,accYears_a,indicator_a,"isVariable"))
1898      = 0;
1899   
1900  * ==== compound indicators for the post calculation ====
1901  parameter compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a);
1902  compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel,accYears,indicator)
1903      $(sum(nodesModelToCalc$map_accNodesToCalc(accNodesModel,nodesModelToCalc), 1)
1904          and sum(yearsToCalc$map_accYearsToCalc(accYears,yearsToCalc), 1)) = 1;
1905   
1906  set compoundIndicatorsFull_act(accNodesModel,accYears,indicator);
1907  option compoundIndicatorsFull_act < compoundIndicatorsFull;
1908   
1909  parameter compoundIndicatorsFullExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa);
1910  parameter compoundIndicatorsFullExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a);
1911  compoundIndicatorsFullExt(accNodesModel,accYears,indicator,accNodesModel,accYears,indicator,accNodesModel,accYears,indicator) = 1;
1912   
1913  compIndicators_pre = 0;
1914  compIndicators_post = 1;
1915   
1916  option sparseval = 1;
1917  while(compIndicators_pre < compIndicators_post,
1918      compIndicators_pre = sum((accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa)
1919          $compoundIndicatorsFullExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa), 1);
1920   
1921      compoundIndicatorsFullExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa)
1922          $(compoundIndicatorsFull_act(accNodesModel,accYears,indicator)
1923              and compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
1924              and not accounting_indicatorBounds(accNodesModel_a,accYears_a,indicator_a,"isVariable")
1925              and map_accNodes(accNodesModel_aa,accNodesModel_a)
1926              and map_accYears(accYears_aa,accYears_a))
1927          = compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
1928              * accounting_perIndicator(indicator_a,indicator_aa,accNodesModel_aa,accYears_aa,"perIndicator");
1929   
1930      option compoundIndicatorsFullExt_r < compoundIndicatorsFullExt;
1931   
1932      compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa)
1933          $(compoundIndicatorsFull_act(accNodesModel,accYears,indicator)
1934              and sum((accNodesModel_a,accYears_a,indicator_a)
1935                      $compoundIndicatorsFullExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a), 1) = 1)
1936          = sum((accNodesModel_a,accYears_a,indicator_a)
1937                  $(compoundIndicatorsFullExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a)),
1938              compoundIndicatorsFullExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a));
1939   
1940      compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa)
1941          $(compoundIndicatorsFull_act(accNodesModel,accYears,indicator)
1942              and sum((accNodesModel_a,accYears_a,indicator_a)
1943                      $compoundIndicatorsFullExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a), 1) > 1)
1944          = sum((accNodesModel_a,accYears_a,indicator_a)
1945                  $(compoundIndicatorsFullExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a)
1946                      and not (sameas(accNodesModel, accNodesModel_a) and sameas(accYears, accYears_a) and sameas(indicator, indicator_a))),
1947              compoundIndicatorsFullExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a))
1948          / sum((accNodesModel_a,accYears_a,indicator_a)
1949                  $(compoundIndicatorsFullExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a)
1950                      and not (sameas(accNodesModel, accNodesModel_a) and sameas(accYears, accYears_a) and sameas(indicator, indicator_a))), 1);
1951   
1952      option compoundIndicatorsFull_act < compoundIndicatorsFull;
1953      compIndicators_post = sum((accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa)
1954          $compoundIndicatorsFullExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa), 1);
1955  );
1956  option sparseval = 0;
1957   
1958  * map to sub-years and sub-nodes
1959  compoundIndicatorsFullExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_a)
1960      $(compoundIndicatorsFull_act(accNodesModel,accYears,indicator)
1961          and compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
1962          and map_accYears(accYears_aa,accYears_a)
1963          and map_accNodes(accNodesModel_aa,accNodesModel_a))
1964      = compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
1965          * yearFactor(accNodesModel,accYears,indicator,accYears_aa);
1966   
1967  * Remove all accounting regions and accounting years
1968  compoundIndicatorsFullExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa)
1969      $(compoundIndicatorsFullExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa)
1970          and not accounting_indicatorBounds(accNodesModel_aa,accYears_aa,indicator_aa,"isVariable")
1971          and sum(accNodes$(sameas(accNodes,accNodesModel_aa)), 1)
1972              or sameas("horizon",accYears_aa))
1973      = 0;
1974   
1975  * Map from extended parameter to final parameter
1976  option compoundIndicatorsFullExt_r < compoundIndicatorsFullExt;
1977  compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa)
1978      $(compoundIndicatorsFull_act(accNodesModel,accYears,indicator)
1979          and sum((accNodesModel_a,accYears_a,indicator_a)
1980                  $compoundIndicatorsFullExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a), 1) = 1)
1981      = sum((accNodesModel_a,accYears_a,indicator_a)
1982              $(compoundIndicatorsFullExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a)),
1983          compoundIndicatorsFullExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a));
1984   
1985  compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa)
1986      $(compoundIndicatorsFull_act(accNodesModel,accYears,indicator)
1987          and sum((accNodesModel_a,accYears_a,indicator_a)
1988                  $compoundIndicatorsFullExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a), 1) > 1)
1989      = sum((accNodesModel_a,accYears_a,indicator_a)
1990              $(compoundIndicatorsFullExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a)
1991                  and not (sameas(accNodesModel, accNodesModel_a) and sameas(accYears, accYears_a) and sameas(indicator, indicator_a))),
1992          compoundIndicatorsFullExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a))
1993      / sum((accNodesModel_a,accYears_a,indicator_a)
1994              $(compoundIndicatorsFullExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a)
1995                  and not (sameas(accNodesModel, accNodesModel_a) and sameas(accYears, accYears_a) and sameas(indicator, indicator_a))), 1);
1996   
1997  * Remove all accounting regions and accounting years
1998  compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
1999      $(compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
2000          and not accounting_indicatorBounds(accNodesModel_a,accYears_a,indicator_a,"isVariable")
2001          and (sum(accNodes$(sameas(accNodes,accNodesModel_a)), 1)
2002              or sameas("horizon",accYears_a)))
2003      = 0;
2004   
2005  * Remove all slack indicators except the ones declared in indicatorBounds
2006  compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
2007      $(compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
2008          and sum((accNodesModel_aa,accYears_aa)$accounting_indicatorBounds(accNodesModel_aa,accYears_aa,indicator_a,"isVariable"), 1)
2009          and not accounting_indicatorBounds(accNodesModel_a,accYears_a,indicator_a,"isVariable"))
2010      = 0;
2011   
2012  * Check if the objective value and optimization sense is set correctly
2013  scalar opti_values, opti_sense;
2014  opti_values = sum((accNodesModel,accYears,indicator)$(accounting_indicatorBounds(accNodesModel,accYears,indicator,"obj") <> 0), 1);
2015  opti_sense = sum((accNodesModel,accYears,indicator), accounting_indicatorBounds(accNodesModel,accYears,indicator,"obj"));
2016  abort$(opti_values < 1)
2017      "Accounting: No indicator specified as objective value"
2018  abort$(opti_values > 1)
2019      "Accounting: Too many indicators specified as objective value"
2020  abort$(opti_sense <> -1 and opti_sense <> 1)
2021      "Accounting: Optimization sense has to be either -1 or 1"
INCLUDE    C:\Local\REMix\framework\remix\framework\model\source\accounting\annuities.gms
2023  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
2024  * SPDX-License-Identifier: BSD-3-Clause
2025   
2026  * Calculation of annuities
2027   
2028  abort$(sum((indicator,nodesModelToCalc,converter_techs,vintage)
2029          $(accounting_converterUnits(indicator,nodesModelToCalc,converter_techs,vintage,"useAnnuity") = 1
2030          and accounting_converterUnits(indicator,nodesModelToCalc,converter_techs,vintage,"amorTime") < 1), 1) > 0 )
2031      "Accounting: Some converter technologies use annuities but have no amortization time"
2032   
2033  parameter accounting_annuityFactor_converter(indicator,nodesModel,converter_techs,vintage);
2034  accounting_annuityFactor_converter(indicator,nodesModelToCalc,converter_techs,vintage)
2035      $accounting_converterUnits(indicator,nodesModelToCalc,converter_techs,vintage,"useAnnuity")
2036      =
2037      accounting_converterUnits(indicator,nodesModelToCalc,converter_techs,vintage,"interest")
2038          * (1 + accounting_converterUnits(indicator,nodesModelToCalc,converter_techs,vintage,"interest"))
2039          ** accounting_converterUnits(indicator,nodesModelToCalc,converter_techs,vintage,"amorTime")
2040      / ((1 + accounting_converterUnits(indicator,nodesModelToCalc,converter_techs,vintage,"interest"))
2041          ** accounting_converterUnits(indicator,nodesModelToCalc,converter_techs,vintage,"amorTime") - 1);
2042   
2043   
2044  abort$(sum((indicator,nodesModelToCalc,storage_techs,vintage)
2045          $(accounting_storageUnits(indicator,nodesModelToCalc,storage_techs,vintage,"useAnnuity") = 1
2046          and accounting_storageUnits(indicator,nodesModelToCalc,storage_techs,vintage,"amorTime") < 1), 1) > 0 )
2047      "Accounting: Some storage technologies use annuities but have no amortization time"
2048   
2049  parameter accounting_annuityFactor_storage(indicator,nodesModel,storage_techs,vintage);
2050  accounting_annuityFactor_storage(indicator,nodesModelToCalc,storage_techs,vintage)
2051      $accounting_storageUnits(indicator,nodesModelToCalc,storage_techs,vintage,"useAnnuity")
2052      =
2053      accounting_storageUnits(indicator,nodesModelToCalc,storage_techs,vintage,"interest")
2054          * (1 + accounting_storageUnits(indicator,nodesModelToCalc,storage_techs,vintage,"interest"))
2055          ** accounting_storageUnits(indicator,nodesModelToCalc,storage_techs,vintage,"amorTime")
2056      / ((1 + accounting_storageUnits(indicator,nodesModelToCalc,storage_techs,vintage,"interest"))
2057          ** accounting_storageUnits(indicator,nodesModelToCalc,storage_techs,vintage,"amorTime") - 1);
2058   
2059   
2060  abort$(sum((indicator,linksModelToCalc,transfer_techs,vintage)
2061          $(accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"useAnnuity") = 1
2062          and accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"amorTime") < 1), 1) > 0 )
2063      "Accounting: Some transfer technologies use annuities but have no amortization time"
2064   
2065  parameter accounting_annuityFactor_transferLink(indicator,linksModel,transfer_techs,vintage);
2066  accounting_annuityFactor_transferLink(indicator,linksModelToCalc,transfer_techs,vintage)
2067      $accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"useAnnuity")
2068      =
2069      accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"interest")
2070          * (1 + accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"interest"))
2071          ** accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"amorTime")
2072      / ((1 + accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"interest"))
2073          ** accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"amorTime") - 1);
2074   
2075   
2076   
2077  abort$(sum((indicator,linksModelToCalc,transfer_techs,vintage,link_types)
2078          $(accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"useAnnuity") = 1
2079          and accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"amorTime") < 1), 1) > 0 )
2080      "Accounting: Some transfer-per-length technologies use annuities but have no amortization time"
2081   
2082  parameter accounting_annuityFactor_transferPerLength(indicator,linksModel,transfer_techs,vintage,link_types);
2083  accounting_annuityFactor_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types) = 1;
2084   
2085  accounting_annuityFactor_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types)
2086      $accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"useAnnuity")
2087      =
2088      accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"interest")
2089          * (1 + accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"interest"))
2090          ** accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"amorTime")
2091      / ((1 + accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"interest"))
2092          ** accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"amorTime") - 1);
2093   
2095   
INCLUDE    C:\Local\REMix\framework\remix\framework\model\source\methods\mga_pre.gms
2097  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
2098  * SPDX-License-Identifier: BSD-3-Clause
2099   
INCLUDE    C:\Local\REMix\framework\remix\framework\model\source\methods\pareto_pre.gms
2103  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
2104  * SPDX-License-Identifier: BSD-3-Clause
2105   
INCLUDE    C:\Local\REMix\framework\remix\framework\model\source\postcalc\declaration.gms
2109  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
2110  * SPDX-License-Identifier: BSD-3-Clause
2111  * // # Output data
2112  * // This is the reference data model of the REMix output.
2113  * //
2114  * // ## Standard output
2117   
2124   
2126   
2127  set capType / "build", "decom", "total", "lowerLimit", "upperLimit", "total_degraded" /;
2128  set balanceType / "netto", "brutto", "positive", "negative", "flh" /;
2129  set profileType / "upper", "fixed", "lower" /;
2130  set r2a_has_converter_cost(indicator,nodesModel,years,techs,vintage,commodity);
2131   
2132  ** // OUTPUT: indicator_accounting | OEO_00000350:quantity value
2133  * // ### indicator_accounting
2134  * // Title: Accounting indicators Post-calculation
2135  parameter indicator_accounting(accNodesModel,accYears,indicator) "Post-calculation aggregated indicator accounting" ;
2136  * //
2137  ** // OUTPUT: indicator_accounting_ref | OEO_00000350:quantity value
2138  * // ### indicator_accounting_ref
2139  * // Title: Accounting indicators reference
2140  parameter indicator_accounting_ref(accNodesModel,accYears,indicator) "Indicator accounting optimization levels" ;
2141  * //
2142  ** // OUTPUT: indicator_accounting_comp | OEO_00000350:quantity value
2143  * // ### indicator_accounting_comp
2144  * // Title: Accounting indicators composition
2145  parameter indicator_accounting_comp(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a) "Indicator accounting with other indicator composition" ;
2146  * //
2147  ** // OUTPUT: indicator_accounting_detailed | OEO_00000350:quantity value
2148  * // ### indicator_accounting_detailed
2149  * // Title: Accounting indicators detail
2150  parameter indicator_accounting_detailed(indicator,nodesModel,years,techs) "Indicator accounting with technological composition" ;
2151  * //
2152  ** // OUTPUT: indicator_accounting_links | OEO_00000350:quantity value
2153  * // ### indicator_accounting_links
2154  * // Title: Accounting indicators per transfer link
2155  parameter indicator_accounting_links(indicator,nodesModel,nodesModel_a,linksModel,years,techs) "Indicator accounting of transfer technologies" ;
2156  * //
2157  parameter converter_ratedInput(techs,vintage,commodity);
2158  parameter converter_ratedOutput(techs,vintage,commodity);
2159  parameter converter_ratedOutput_min(nodesModel,years,techs,commodity);
2160  parameter converter_ratedOutput_max(nodesModel,years,techs,commodity);
2161   
2162  ** // OUTPUT: converter_caps | OEO_00010257:power capacity
2163  * // ### converter_caps
2164  * // Title: Coverter capacities post-calculation
2165  parameter converter_caps(accNodesModel,accYears,techs,commodity,capType) "Converter capacities, aggregated total" ;
2166  * //
2167  parameter converter_caps_ext(accNodesModel,nodesModel,accYears,years,techs,vintage,commodity,capType);
2168   
2169  ** // OUTPUT: converter_units | OEO_00000350:quantity value
2170  * // ### converter_units
2171  * // Title: Coverter units post-calculation
2172  parameter converter_units(accNodesModel,accYears,techs,vintage,capType) "Converter units" ;
2173  * //
2174  parameter converter_units_ext(accNodesModel,nodesModel,accYears,years,techs,vintage,capType);
2175   
2176  set transfer_usedStartEnd(nodesModel,nodesModel,linksModel,years,techs);
2177  parameter max_transfer_coefficient(techs,commodity);
2178  parameter min_transfer_coefficient(techs,commodity);
2179  ** // OUTPUT: transfer_links | OEO_00000350:quantity value
2180  * // ### transfer_links
2181  * // Title: Transfer post-calculation
2182  parameter transfer_links(linksModel,years,techs,vintage,capType) "Transfer links" ;
2183  * //
2184  ** // OUTPUT: transfer_caps | OEO_00010257:power capacity
2185  * // ### transfer_caps
2186  * // Title: Transfer capacities post-calculation
2187  parameter transfer_caps(nodesModel_start,nodesModel_end,linksModel,years,techs,commodity,capType) "Transfer capacities, aggregated total" ;
2188  * //
2189  ** // OUTPUT: transfer_flows | OEO_00050019:energy amount value
2190  * // ### transfer_flows
2191  * // Title: Transfer hourly flows
2192  parameter transfer_flows(timeModel,nodesModel_start,nodesModel_end,linksModel,years,techs,commodity) "Hourly link flows" ;
2193  * //
2194  ** // OUTPUT: transfer_flows_annual | OEO_00050019:energy amount value
2195  * // ### transfer_flows_annual
2196  * // Title: Transfer annual flows
2197  parameter transfer_flows_annual(nodesModel_start,nodesModel_end,linksModel,years,techs,commodity,balanceType) "Annual link flows" ;
2198  * //
2199  ** // OUTPUT: transfer_losses | OEO_00050019:energy amount value
2200  * // ### transfer_losses
2201  * // Title: Transfer hourly losses
2202  parameter transfer_losses(timeModel,nodesModel_start,nodesModel_end,linksModel,years,techs,commodity) "Hourly link losses" ;
2203  * //
2204  ** // OUTPUT: transfer_losses_annual | OEO_00050019:energy amount value
2205  * // ### transfer_losses_annual
2206  * // Title: Transfer annual losses
2207  parameter transfer_losses_annual(nodesModel_start,nodesModel_end,linksModel,years,techs,commodity,balanceType) "Annual link losses" ;
2208  * //
2209  parameter storage_size_max(nodesModel,years,techs,commodity);
2210  parameter storage_size_min(nodesModel,years,techs,commodity);
2211  ** // OUTPUT: storage_units |  OEO_00000350:quantity value
2212  * // ### storage_units
2213  * // Title: Storage units post-calculation
2214  parameter storage_units(accNodesModel,accYears,techs,vintage,capType) "Storage units" ;
2215  * //
2216  parameter storage_units_ext(accNodesModel,nodesModel,accYears,years,techs,vintage,capType);
2217  ** // OUTPUT: storage_caps | OEO_00230000:energy storage capacity
2218  * // ### storage_caps
2219  * // Title: Storage capacities post-calculation
2220  parameter storage_caps(accNodesModel,accYears,techs,commodity,capType) "Storage capacities, aggregated total" ;
2221  * //
2222  parameter storage_caps_ext(accNodesModel,nodesModel,accYears,years,techs,vintage,commodity,capType);
2223  ** // OUTPUT: storage_level_out | OEO_00330012:energy storage content
2224  * // ### storage_level_out
2225  * // Title: Storage level
2226  parameter storage_level_out(timeModel,accNodesModel,accYears,techs,commodity) "Storage level per time step" ;
2227  * //
2228  parameter storage_level_out_ext(timeModel,accNodesModel,nodesModel,accYears,years,techs,vintage,commodity);
2229  ** // OUTPUT: storage_flows | OEO_00050019:energy amount value
2230  * // ### storage_flows
2231  * // Title: Storage hourly flows
2232  parameter storage_flows(timeModel,accNodesModel,accYears,techs,commodity) "Storage flows per time step" ;
2233  * //
2234  parameter storage_flows_ext(timeModel,accNodesModel,nodesModel,accYears,years,techs,vintage,commodity);
2235  ** // OUTPUT: storage_flows_annual | OEO_00050019:energy amount value
2236  * // ### storage_flows_annual
2237  * // Title: Storage annual flows
2238  parameter storage_flows_annual(accNodesModel,accYears,techs,commodity,balanceType) "Aggregated storage flows" ;
2239  * //
2240  ** // OUTPUT: storage_losses_out | OEO_00050019:energy amount value
2241  * // ### storage_losses_out
2242  * // Title: Storage hourly losses
2243  parameter storage_losses_out(timeModel,accNodesModel,accYears,techs,commodity) "Storage losses per time step" ;
2244  * //
2245  ** // OUTPUT: storage_losses_annual | OEO_00050019:energy amount value
2246  * // ### storage_losses_annual
2247  * // Title: Storage annual losses
2248  parameter storage_losses_annual(accNodesModel,accYears,techs,commodity,balanceType) "Aggregated storage losses" ;
2249  * //
2250  ** // OUTPUT: commodity_balance | OEO_00000350:quantity value
2251  * // ### commodity_balance
2252  * // Title: Hourly commodity balance
2253  parameter commodity_balance(timeModel,accNodesModel,accYears,techs,commodity) "Commodity balances per model hour" ;
2254  parameter commodity_balance_ext(timeModel,accNodesModel,nodesModel,accYears,years,techs,vintage,commodity);
2255  * //
2256  ** // OUTPUT: commodity_balance_annual | OEO_00000350:quantity value
2257  * // ### commodity_balance_annual
2258  * // Title: Annual commodity balance
2259  parameter commodity_balance_annual(accNodesModel,accYears,techs,commodity,balanceType) "Aggregated commodity balances" ;
2260  * //
2261  ** // OUTPUT: marginals_sourcesink_profile | OEO_00040008:marginal cost
2262  * // ### marginals_sourcesink_profile
2263  * // Title: Source-sink marginals
2264  parameter marginals_sourcesink_profile(timeModel,nodesModel,years,techs,commodity) "Source and sink flow marginal values" ;
2265  * //
2266  ** // OUTPUT: marginals_balance | OEO_00040008:marginal cost
2267  * // ### marginals_balance
2268  * // Title: Nodel balance marginals
2269  parameter marginals_balance(timeModel,nodesModel,years,commodity) "Nodal balance marginal values" ;
2270  * //
2271  ** // OUTPUT: marginals_sourcesink_sum | OEO_00040008:marginal cost
2272  * // ### marginals_sourcesink_sum
2273  * // Title: Source-sink annual marginals
2274  parameter marginals_sourcesink_sum(nodesModel,years,techs,commodity) "Annual source and sink flow marginal values" ;
2275  * //
2276  ** // OUTPUT: marginals_indicator_bounds | OEO_00040008:marginal cost
2277  * // ### marginals_indicator_bounds
2278  * // Title: Indicator bounds marginals
2279  parameter marginals_indicator_bounds(accNodesModel,accYears,indicator) "Accounting indicator marginals" ;
2280  * //
2281  * // ## REMix-AMIRIS interface output
2282  * //
2283  ** // OUTPUT: r2a_annuity_cost_converter | OEO_00040009:cost
2284  * // ### r2a_annuity_cost_converter
2285  * // Title: Converter annuity cost
2286  parameter r2a_annuity_cost_converter(indicator,accNodesModel,accYears,techs,vintage,commodity) "Annuity cost of converters" ;
2287  * //
2288  ** // OUTPUT: r2a_spec_cost_converter | OEO_00040009:cost
2289  * // ### r2a_spec_cost_converter
2290  * // Title: Converter specific cost
2291  parameter r2a_spec_cost_converter(indicator,accNodesModel,accYears,techs,vintage,commodity) "Specific cost of converters" ;
2292  * //
2293  ** // OUTPUT: r2a_spec_cost_fuel | OEO_00040009:cost
2294  * // ### r2a_spec_cost_fuel
2295  * // Title: Commodity specific cost
2296  parameter r2a_spec_cost_fuel(indicator,accNodesModel,accYears,techs,commodity) "Specific cost of commodities, used particularly for fuels" ;
2297  * //
2298  ** // OUTPUT: r2a_spec_cost_indicator | OEO_00040009:cost
2299  * // ### r2a_spec_cost_indicator
2300  * // Title: Indicator specific cost
2301  parameter r2a_spec_cost_indicator(indicator,indicator_a,accNodesModel,accYears) "Specific indicator cost" ;
2302  * //
2303  ** // OUTPUT: r2a_converter_efficiencies | OEO_00140050:efficiency value
2304  * // ### r2a_converter_efficiencies
2305  * // Title: Indicator specific cost
2306  parameter r2a_converter_efficiencies(techs,vintage,activity,commodity,commodity_a) "Converter-specific efficiency" ;
2307  * //
2308  ** // OUTPUT: r2a_converter_avail_factor | OEO_00000350:quantity value
2309  * // ### r2a_converter_avail_factor
2310  * // Title: Converter availability factor
2311  parameter r2a_converter_avail_factor(accNodesModel,accYears,techs,vintage) "Availability factor of converter technologies" ;
2312  parameter r2a_converter_avail_profile(timeModel,accNodesModel,accYears,techs,commodity,profileType) "Availability of converter technologies" ;
2313  parameter r2a_converter_avail_profile_ext(timeModel,accNodesModel,nodesModel,accYears,years,techs,vintage,commodity,profileType);
2314  * //
2315  ** // OUTPUT: r2a_storage_e2p | OEO_00000350:quantity value
2316  * // ### r2a_storage_e2p
2317  * // Title: E2P Storage
2318  parameter r2a_storage_e2p(accNodesModel,accYears,techs,vintage,commodity,capType) "Energy-to-power ratio" ;
2319  * //
2320  ** // OUTPUT: r2a_storage_selfdischarge | OEO_00000350:quantity value
2321  * // ### r2a_storage_selfdischarge
2322  * // Title: Storage self discharge rates
2323  parameter r2a_storage_selfdischarge(accNodesModel,accYears,techs,vintage,commodity);
2324   
INCLUDE    C:\Local\REMix\framework\remix\framework\model\source\loadgdx.gms
2328  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
2329  * SPDX-License-Identifier: BSD-3-Clause
2330   
2331  * ==== global settings ====
2333   
2335   
INCLUDE    C:\Local\REMix\framework\remix\framework\model\source\core\converter.gms
2337  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
2338  * SPDX-License-Identifier: BSD-3-Clause
2339   
2340  * // # core_converter
2341  * // The equations in this file describe the converters in the model.
2342   
2343  * // ## Advanced features
2344  * //
2345  * // You can find a more detailed explanation of the %curly_open%ref%curly_close%`MIP features <explanations_mip_label>`.
2346  ** // There is also a more detailed explanation on the modeling of outages at the %curly_open%ref%curly_close%`resilience section <explanations_resilience_label>`.
2347  * //
2348  * // In the following table you can see which modifications you have to make to your data to use the different features.
2349  * //
2350  * // | Feature | Modification |
2351  * // | ------ | ------ |
2352  * // | MIP expansion | The converter_tech_Parameter "mipUnits" has to be set to 1 in converter_techParam.dat for the technologies and years where descrete expansion is wanted |
2353  * // | Minimum up/downtime | The converter_tech_Parameters "minUptime" and/or "minDowntime" need to be set to the according amount of minimum time steps.Furthermore, the converter_tech_Parameter "mipDispatch" has to be set to 1 in converter_techParam.dat
2354  * // for the technologies and years where a minimum up- or downtime should be applied so that the units can be shut down. "mipUnits" will automatically be set to 1 |
2355  * // | Partial load | The converter_tech_Parameter "mipDispatch" has to be set to 1 in converter_techParam.dat for the technologies and years where you want to make use of the partial load feature. You also have to set a value to
2356  * // the converter_coefficient_parameters "minLoad" and/or "maxLoad" for the according technologies, vintages, activities and commodities. You can then for example set different "coefficient" values for each activity in converter_coefficient.dat |
2357  ** // | Outages | You have to include the converter_outageProfile.dat-file and while executing the model you have to set --method=resilience |
2358   
2359  * // ## %curly_open%ref%curly_close%`sets <remix_model_sets_label>`
2360  * //
2361  * // ### set_converter_techs.dat
2362  * // In this file all converter technologies are listed that can be used within your model.
2363  * //
2364  * // ### set_activities.dat
2365  * // All modes with which the converter technologies can be operated need to be added here.
2366  * // Examples: Charge (for the charging mode of a storage), Powergen (for the mode in which a converter produces electricity), Curtailment (for the mode in which a renewable power plant is shut down), …
2367  * // If you would like to use the partial load feature, all activity modes that should be available for this feature need to be defined here as well.
2368  * //
2369  * // ### set_commodities.dat
2370  * // In this file all commodities are listed that can be used and converted by the converter technologies.
2371  * // Examples: Electricity, Coal, Biomass, Hydrogen, …
2372   
2373  * // ## Variables
2374  * // {special_table_converter_variables}
----   3630 Data Decla converter_activityProfileLoad    0.609    15.078 SECS    105 MB  3076073
4285   
4286  * ==== loading units from gdx file ====
4287   
4288  * Load units from gdx file
4290   
4291  * ==== calculation of mappings ====
4292   
4293  * Technologies with a lifeTime > 0 are available
4294  set converter_availTech(nodesModel,years,converter_techs,vintage);
4295  converter_availTech(nodesModel,years,converter_techs,vintage)
4296      $(vintage.val = smax(vintage_a$(vintage_a.val <= years.val
4297          and converter_techParam(converter_techs,vintage_a,"lifeTime") > 0), vintage_a.val)) = yes;
4298   
4299  * Technologies to optimize become unavailable if they have an unitsUpperLimit of 0
4300  converter_availTech(nodesModel,years,converter_techs,vintage)
4301      $(yearsToCalc(years) and converter_capacityParam(nodesModel,years,converter_techs,"unitsUpperLimit") = 0 ) = no;
4302   
4303  * Technologies already built become unavailable if they have an unitsBuild of 0
4304  converter_availTech(nodesModel,years,converter_techs,vintage)
4305      $( ( not yearsToCalc(years)) and converter_capacityParam(nodesModel,years,converter_techs,"unitsBuild") = 0 ) = no;
4306   
4307  * Used technologies are available technologies over their technical lifeTime
4308  set converter_usedTech(nodesModel,years,converter_techs,vintage);
4309  converter_usedTech(nodesModel,years,converter_techs,vintage)
4310      $(vintage.val <= years.val
4311          and years.val < smax(years_a$converter_availTech(nodesModel,years_a,converter_techs,vintage),
4312                                  years_a.val + converter_techParam(converter_techs,vintage,"lifeTime"))
4313          ) = yes;
4314   
4315  * Technologies have to be decomissioned in the interval of first avail + lifetime to last avail + lifetime
4316  set converter_decomTech(nodesModel,years,converter_techs,vintage);
4317  converter_decomTech(nodesModel,years,converter_techs,vintage)
4318    $(sum(years_a$converter_usedTech(nodesModel,years_a,converter_techs,vintage), 1)
4319      and sum(yearsToCalc
4320        $(sameas(years, yearsToCalc)
4321          and yearsToCalc.val >= smin(years_a$converter_availTech(nodesModel,years_a,converter_techs,vintage), years_a.val) + converter_techParam(converter_techs,vintage,"lifeTime")
4322          and yearsToCalc.val <= smax(years_a$converter_availTech(nodesModel,years_a,converter_techs,vintage), years_a.val) + converter_techParam(converter_techs,vintage,"lifeTime")), 1))
4323    = yes;
4324   
4325  * Extend the decom frame to the year after the last year of usedTech
4326  converter_decomTech(nodesModel,yearsToCalc,converter_techs,vintage)
4327    $(converter_usedTech(nodesModel,yearsToCalc-1,converter_techs,vintage)
4328      and converter_decomTech(nodesModel,yearsToCalc-1,converter_techs,vintage))
4329    = yes;
4330   
4331  * Mapping for used activities and commodities
4332  set converter_usedActCom(converter_techs,vintage,activity,commodity);
4333  option converter_usedActCom < converter_coefficient;
4334   
4335  set converter_usedAct(converter_techs,vintage,activity);
4336  option converter_usedAct < converter_usedActCom;
4337   
4338  set converter_usedCom(converter_techs,vintage,commodity);
4339  option converter_usedCom < converter_usedActCom;
4340   
4341  set converter_usedTechAct(nodesModel,years,converter_techs,vintage,activity);
4342  converter_usedTechAct(nodesModel,years,converter_techs,vintage,activity)
4343      $(converter_usedTech(nodesModel,years,converter_techs,vintage)
4344          and converter_usedAct(converter_techs,vintage,activity))
4345      = yes;
4346   
4347  set converter_useRampPos(nodesModel,years,converter_techs,vintage);
4348  converter_useRampPos(nodesModelToCalc,yearsToCalc,converter_techs,vintage)
4349    $(sum(indicator$accounting_converterStartup(indicator,nodesModelToCalc,converter_techs,vintage,"perRamp"), 1)
4350      or sum(indicator$accounting_converterStartup(indicator,nodesModelToCalc,converter_techs,vintage,"perRampPos"), 1))
4351    = 1;
4352   
4353  set converter_useRampNeg(nodesModel,years,converter_techs,vintage);
4354  converter_useRampNeg(nodesModelToCalc,yearsToCalc,converter_techs,vintage)
4355    $(sum(indicator$accounting_converterStartup(indicator,nodesModelToCalc,converter_techs,vintage,"perRamp"), 1)
4356      or sum(indicator$accounting_converterStartup(indicator,nodesModelToCalc,converter_techs,vintage,"perRampNeg"), 1))
4357    = 1;
4358   
4359   
4360  * ==== aggregation of profiles ====
4361   
4362  * derive upper and lower profiles then aggregate
4363  set converter_activity_hasProfileIn(nodesData,years,converter_techs,pc_converter_activityProfile);
4364  option converter_activity_hasProfileIn < converter_activityProfileIn;
4365   
4366  set converter_activity_hasProfile(nodesModel,years,converter_techs,pc_converter_activityProfile);
4367  converter_activity_hasProfile(nodesModelToCalc,yearsToCalc,converter_techs,pc_converter_activityProfile)
4368      = sum(nodesData$aggregateNodesModel(nodesData,nodesModelToCalc),
4369              converter_activity_hasProfileIn(nodesData,yearsToCalc,converter_techs,pc_converter_activityProfile));
4370   
4371  set converter_coefficient_hasProfileIn(nodesData,years,converter_techs,vintage,activity,commodity);
4372  option converter_coefficient_hasProfileIn < converter_coefficientProfileIn;
4373   
4374  set converter_coefficient_hasProfile(nodesModel,years,converter_techs,vintage,activity,commodity);
4375  converter_coefficient_hasProfile(nodesModelToCalc,yearsToCalc,converter_techs,vintage,activity,commodity)
4376      = sum(nodesData$aggregateNodesModel(nodesData,nodesModelToCalc),
4377              converter_coefficient_hasProfileIn(nodesData,yearsToCalc,converter_techs,vintage,activity,commodity));
4378   
4379  * aagregate time dimension
4380  parameter converter_activityProfileIn_aggTime(timeModel,nodesData,yearsToCalc,converter_techs,pc_converter_activityProfile);
4381  converter_activityProfileIn_aggTime(timeModelToCalc,nodesData,yearsToCalc,converter_techs,pc_converter_activityProfile)
4382    $converter_activity_hasProfileIn(nodesData,yearsToCalc,converter_techs,pc_converter_activityProfile)
4383    = sum(timeData$timeMapping(timeData,timeModelToCalc),
4384            converter_activityProfileIn(timeData,nodesData,yearsToCalc,converter_techs,pc_converter_activityProfile)
4385            / timeLength(timeModelToCalc));
4386  option clear = converter_activityProfileIn;
4387   
4388  * weighted average for a real sum of units upper limits, plain average if one region has an upper limit of inf
4389  parameter converter_activityProfile(timeModel,nodesModel,years,converter_techs,vintage,pc_converter_activityProfile);
4390  converter_activityProfile(timeModelToCalc,converter_usedTech(nodesModelToCalc,yearsToCalc,converter_techs,vintage),"upper")
4391      = converter_techParam(converter_techs,vintage,"activityUpperLimit");
4392  converter_activityProfile(timeModelToCalc,converter_usedTech(nodesModelToCalc,yearsToCalc,converter_techs,vintage),"lower")
4393      = converter_techParam(converter_techs,vintage,"activityLowerLimit");
4394   
4395   
4396  set converter_finiteUnitLimit(nodesModelToCalc,yearsToCalc,converter_techs);
4397  converter_finiteUnitLimit(nodesModelToCalc,yearsToCalc,converter_techs)
4398      = sum(nodesData$aggregateNodesModel(nodesData,nodesModelToCalc), converter_capacityParamIn(nodesData,yearsToCalc,converter_techs,"unitsUpperLimit")) > 0
4399          and sum(nodesData$aggregateNodesModel(nodesData,nodesModelToCalc), converter_capacityParamIn(nodesData,yearsToCalc,converter_techs,"unitsUpperLimit")) < inf;
4400   
4401  set converter_infiniteUnitLimit(nodesModelToCalc,yearsToCalc,converter_techs);
4402  converter_infiniteUnitLimit(nodesModelToCalc,yearsToCalc,converter_techs)
4403      = sum(nodesData$aggregateNodesModel(nodesData,nodesModelToCalc), converter_capacityParamIn(nodesData,yearsToCalc,converter_techs,"unitsUpperLimit")) = inf;
4404   
4405  converter_activityProfile(timeModelToCalc,converter_usedTech(nodesModelToCalc,yearsToCalc,converter_techs,vintage),pc_converter_activityProfile)
4406      $(converter_activity_hasProfile(nodesModelToCalc,yearsToCalc,converter_techs,pc_converter_activityProfile)
4407          and converter_finiteUnitLimit(nodesModelToCalc,yearsToCalc,converter_techs))
4408      = sum(nodesData$(aggregateNodesModel(nodesData,nodesModelToCalc)
4409                  and converter_capacityParamIn(nodesData,yearsToCalc,converter_techs,"unitsUpperLimit") < inf ),
4410                converter_activityProfileIn_aggTime(timeModelToCalc,nodesData,yearsToCalc,converter_techs,pc_converter_activityProfile)
4411                * converter_capacityParamIn(nodesData,yearsToCalc,converter_techs,"unitsUpperLimit"))
4412      / sum(nodesData$aggregateNodesModel(nodesData,nodesModelToCalc),
4413              converter_capacityParamIn(nodesData,yearsToCalc,converter_techs,"unitsUpperLimit"));
4414   
4415  converter_activityProfile(timeModelToCalc,converter_usedTech(nodesModelToCalc,yearsToCalc,converter_techs,vintage),pc_converter_activityProfile)
4416      $(converter_activity_hasProfile(nodesModelToCalc,yearsToCalc,converter_techs,pc_converter_activityProfile)
4417          and converter_infiniteUnitLimit(nodesModelToCalc,yearsToCalc,converter_techs))
4418      = sum(nodesData$(aggregateNodesModel(nodesData,nodesModelToCalc)
4419                  and converter_capacityParamIn(nodesData,yearsToCalc,converter_techs,"unitsUpperLimit") = inf),
4420                converter_activityProfileIn_aggTime(timeModelToCalc,nodesData,yearsToCalc,converter_techs,pc_converter_activityProfile)
4421                * converter_capacityParamIn(nodesData,yearsToCalc,converter_techs,"unitsUpperLimit"))
4422      / sum(nodesData$(aggregateNodesModel(nodesData,nodesModelToCalc)
4423                      and converter_capacityParamIn(nodesData,yearsToCalc,converter_techs,"unitsUpperLimit") = inf ),
4424              1);
4425  option clear = converter_activityProfileIn_aggTime;
4426   
4427  * for fixed profiles overwrite upper and lower profile
4428  converter_activityProfile(timeModelToCalc,nodesModelToCalc,yearsToCalc,converter_techs,vintage,"lower")
4429      $converter_activity_hasProfile(nodesModelToCalc,yearsToCalc,converter_techs,"fixed")
4430      = converter_activityProfile(timeModelToCalc,nodesModelToCalc,yearsToCalc,converter_techs,vintage,"fixed");
4431   
4432  converter_activityProfile(timeModelToCalc,nodesModelToCalc,yearsToCalc,converter_techs,vintage,"upper")
4433      $converter_activity_hasProfile(nodesModelToCalc,yearsToCalc,converter_techs,"fixed")
4434      = converter_activityProfile(timeModelToCalc,nodesModelToCalc,yearsToCalc,converter_techs,vintage,"fixed");
4435   
4437   
4438  * weighted average for a real sum of units upper limits, plain average if one region has an upper limit of inf
4439  parameter converter_coefficientProfile(timeModel,nodesModel,years,converter_techs,vintage,activity,commodity);
4440  converter_coefficientProfile(timeModelToCalc,converter_usedTechAct(nodesModelToCalc,yearsToCalc,converter_techs,vintage,activity),commodity)
4441      = converter_coefficient(converter_techs,vintage,activity,commodity,"coefficient");
4442   
4443  converter_coefficientProfile(timeModelToCalc,converter_usedTechAct(nodesModelToCalc,yearsToCalc,converter_techs,vintage,activity),commodity)
4444      $( converter_coefficient_hasProfile(nodesModelToCalc,yearsToCalc,converter_techs,vintage,activity,commodity)
4445          and converter_finiteUnitLimit(nodesModelToCalc,yearsToCalc,converter_techs) )
4446      = sum(nodesData$aggregateNodesModel(nodesData,nodesModelToCalc),
4447            sum(timeData$timeMapping(timeData,timeModelToCalc),
4448                    converter_coefficientProfileIn(timeData,nodesData,yearsToCalc,converter_techs,vintage,activity,commodity))
4449                / timeLength(timeModelToCalc)
4450              * converter_capacityParamIn(nodesData,yearsToCalc,converter_techs,"unitsUpperLimit") )
4451      / sum(nodesData$aggregateNodesModel(nodesData,nodesModelToCalc),
4452              converter_capacityParamIn(nodesData,yearsToCalc,converter_techs,"unitsUpperLimit"));
4453   
4454  converter_coefficientProfile(timeModelToCalc,converter_usedTechAct(nodesModelToCalc,yearsToCalc,converter_techs,vintage,activity),commodity)
4455      $( converter_coefficient_hasProfile(nodesModelToCalc,yearsToCalc,converter_techs,vintage,activity,commodity)
4456          and converter_infiniteUnitLimit(nodesModelToCalc,yearsToCalc,converter_techs))
4457      = sum(nodesData$(aggregateNodesModel(nodesData,nodesModelToCalc)
4458                      and converter_capacityParamIn(nodesData,yearsToCalc,converter_techs,"unitsUpperLimit") = inf ),
4459            sum(timeData$timeMapping(timeData,timeModelToCalc),
4460                    converter_coefficientProfileIn(timeData,nodesData,yearsToCalc,converter_techs,vintage,activity,commodity))
4461                / timeLength(timeModelToCalc))
4462      / sum(nodesData$(aggregateNodesModel(nodesData,nodesModelToCalc)
4463                      and converter_capacityParamIn(nodesData,yearsToCalc,converter_techs,"unitsUpperLimit") = inf ), 1);
4464   
4466   
4467  * ==== prepare partial load behavior parameters ====
4468   
4469  * set disabled max load requirements to 1 to avoid excessive logical expressions later on
4470  alias(commodity, com);
4471  converter_coefficient(converter_techs,vintage,activity,commodity,"maxLoad")
4472      $((converter_coefficient(converter_techs,vintage,activity,commodity,"maxLoad") = 0)
4473        and converter_usedAct(converter_techs,vintage,activity))
4474      = 1;
4475   
4476  * indicate that at least one activity of a technology makes use of partial load behavior
4477  set converter_hasMaxLoad(converter_techs,vintage);
4478  converter_hasMaxLoad(converter_techs,vintage)
4479    = smin((activity,commodity)$converter_usedAct(converter_techs,vintage,activity),
4480              converter_coefficient(converter_techs,vintage,activity,commodity,"maxLoad")) < 1;
4481   
4482  set converter_hasMinLoad(converter_techs,vintage);
4483  converter_hasMinLoad(converter_techs,vintage)
4484    = smax((activity,commodity)$converter_usedAct(converter_techs,vintage,activity),
4485              converter_coefficient(converter_techs,vintage,activity,commodity,"minLoad")) > 0;
4486   
4487  set converter_hasConstantFluxInActivity(converter_techs,vintage);
4488  converter_hasConstantFluxInActivity(converter_techs,vintage)
4489    = sum((activity,commodity)$converter_usedAct(converter_techs,vintage,activity),
4490                          abs(converter_coefficient(converter_techs,vintage,activity,commodity,"constant"))) > 0;
4491   
4492  * setting up a requirements parameter to avoid having to cycle through commodities in equations
4493  set pc_converter_activityRequirements
4494      /
4495      minLoad             "Lower profile for converter activity"
4496      maxLoad             "Upper profile for converter activity"
4497      /;
4498  parameter converter_activityRequirements(converter_techs,vintage,activity,pc_converter_activityRequirements);
4499  converter_activityRequirements(converter_techs,vintage,activity,"minLoad")
4500    = smax(commodity, converter_coefficient(converter_techs,vintage,activity,commodity,"minLoad"));
4501  converter_activityRequirements(converter_techs,vintage,activity,"maxLoad")
4502    = smin(commodity, converter_coefficient(converter_techs,vintage,activity,commodity,"maxLoad"));
4503   
4504  * ==== activate MIP units for MIP dispatch or partial load technologies ====
4505   
4506  set converter_hasMinUptime(converter_techs,vintage);
4507  converter_hasMinUptime(converter_techs,vintage)
4508    $(converter_techParam(converter_techs,vintage,"minUptime")
4509      and converter_techParam(converter_techs,vintage,"mipDispatch"))
4510    = yes;
4511   
4512  set converter_hasMinDowntime(converter_techs,vintage);
4513  converter_hasMinDowntime(converter_techs,vintage)
4514    $(converter_techParam(converter_techs,vintage,"minDowntime")
4515      and converter_techParam(converter_techs,vintage,"mipDispatch"))
4516    = yes;
4517   
4518  * require integer unit counts if online state is to be tracked
4519  converter_techParam(converter_techs,vintage,"mipUnits")
4520      $(converter_techParam(converter_techs,vintage,"mipDispatch")
4521        or converter_hasMinLoad(converter_techs, vintage)
4522        or converter_hasMaxLoad(converter_techs, vintage)
4523        or converter_hasConstantFluxInActivity(converter_techs,vintage))
4524      = 1;
4525   
4526  * ==== floor mip converter units to integer values ====
4527  converter_capacityParam(nodesModelToCalc,yearsToCalc,converter_techs,"unitsLowerLimit")
4528      $sum(vintage, converter_techParam(converter_techs,vintage,"mipUnits"))
4529      = floor(converter_capacityParam(nodesModelToCalc,yearsToCalc,converter_techs,"unitsLowerLimit"));
4530  converter_capacityParam(nodesModelToCalc,yearsToCalc,converter_techs,"unitsUpperLimit")
4531      $sum(vintage, converter_techParam(converter_techs,vintage,"mipUnits"))
4532      = ceil(converter_capacityParam(nodesModelToCalc,yearsToCalc,converter_techs,"unitsUpperLimit"));
4533   
4534  * ==== scalars and sets for minUptime and minDowntime ====
4535   
4536  scalar converter_maxUptimeReq;
4537  converter_maxUptimeReq = smax((converter_techs,vintage), converter_techParam(converter_techs,vintage,"minUptime"));
4538  set uptimeSearchRange(timeModelToCalc);
4539  uptimeSearchRange(timeModelToCalc) = ord(timeModelToCalc) <= converter_maxUptimeReq;
4540   
4541  scalar converter_maxDowntimeReq;
4542  converter_maxDowntimeReq = smax((converter_techs,vintage), converter_techParam(converter_techs,vintage,"minDowntime"));
4543  set downtimeSearchRange(timeModelToCalc);
4544  downtimeSearchRange(timeModelToCalc) = ord(timeModelToCalc) <= converter_maxDowntimeReq;
4545   
4546  * ==== definition of variables ====
4547   
4548  * Initialise variables for unitsBuild
4549  converter_unitsBuild.l(nodesModel,years,converter_techs,vintage)
4550      $converter_availTech(nodesModel,years,converter_techs,vintage)
4551      = converter_capacityParam(nodesModel,years,converter_techs,"unitsBuild");
4552  converter_unitsBuild.lo(nodesModel,yearsToCalc,converter_techs,vintage)
4553      $converter_availTech(nodesModel,yearsToCalc,converter_techs,vintage)
4554      = converter_unitsBuild.l(nodesModel,yearsToCalc,converter_techs,vintage);
4555  converter_unitsBuild.fx(nodesModel,years,converter_techs,vintage)
4556      $converter_capacityParam(nodesModel,years,converter_techs,"noExpansion")
4557      = converter_unitsBuild.l(nodesModel,years,converter_techs,vintage);
4558   
4559  * Initialise variables for unitsDecom
4560  converter_unitsDecom.l(nodesModel,years,converter_techs,vintage)
4561    $(converter_decomTech(nodesModel,years,converter_techs,vintage)
4562      and years.val < sum(yearsToCalc$(ord(yearsToCalc) = 1), yearsToCalc.val))
4563    = sum((years_a,years_aa)$(sameas(years-1, years_aa)
4564                        and years_a.val > years_aa.val - converter_techParam(converter_techs,vintage,'lifeTime')
4565                        and years_a.val <= years.val - converter_techParam(converter_techs,vintage,'lifeTime')
4566                        and converter_availTech(nodesModel,years_a,converter_techs,vintage)),
4567          converter_unitsBuild.l(nodesModel,years_a,converter_techs,vintage));
4568   
4569  converter_unitsDecom.l(nodesModel,yearsToCalc,converter_techs,vintage)
4570    $converter_decomTech(nodesModel,yearsToCalc,converter_techs,vintage)
4571    = sum(years$
4572          (years.val < sum(yearsToCalc_a$(ord(yearsToCalc_a) = 1), yearsToCalc_a.val)
4573            and converter_availTech(nodesModel,years,converter_techs,vintage)
4574            and years.val > sum(years_a$sameas(years_a, yearsToCalc-1), years_a.val) - converter_techParam(converter_techs,vintage,'lifeTime')
4575            and years.val <= yearsToCalc.val - converter_techParam(converter_techs,vintage,'lifeTime')),
4576        converter_unitsBuild.l(nodesModel,years,converter_techs,vintage))
4577      + sum(yearsToCalc_a$
4578          (yearsToCalc_a.val < sum(yearsToCalc_aa$(ord(yearsToCalc_aa) > 1), yearsToCalc_a.val)
4579            and converter_availTech(nodesModel,yearsToCalc_a,converter_techs,vintage)
4580            and yearsToCalc_a.val > sum(years_a$sameas(years_a, yearsToCalc-1), years_a.val) - converter_techParam(converter_techs,vintage,'lifeTime')
4581            and yearsToCalc_a.val <= yearsToCalc.val - converter_techParam(converter_techs,vintage,'lifeTime')),
4582        converter_unitsBuild.l(nodesModel,yearsToCalc_a,converter_techs,vintage));
4583        ;
4584   
4585  converter_unitsDecom.lo(nodesModel,yearsToCalc,converter_techs,vintage)
4586      $(converter_usedTech(nodesModel,yearsToCalc,converter_techs,vintage)
4587          and not converter_techParam(converter_techs,vintage,"freeDecom"))
4588      = converter_unitsDecom.l(nodesModel,yearsToCalc,converter_techs,vintage)
4589   
4590  * Calculate planned unit expansion
4591  parameter converter_unitsPlanned(nodesModel,years,converter_techs,vintage);
4592  converter_unitsPlanned(nodesModel,years,converter_techs,vintage) = 0;
4593  loop(years,
4594    converter_unitsPlanned(nodesModel,years,converter_techs,vintage)
4595      =
4596      converter_unitsPlanned(nodesModel,years-1,converter_techs,vintage)
4597          $converter_usedTech(nodesModel,years-1,converter_techs,vintage)
4598      + converter_unitsBuild.l(nodesModel,years,converter_techs,vintage)
4599          $converter_availTech(nodesModel,years,converter_techs,vintage)
4600      - converter_unitsDecom.l(nodesModel,years,converter_techs,vintage)
4601          $converter_usedTech(nodesModel,years,converter_techs,vintage);
4602  );
4603   
4604  * Set initial state for planned units
4605  converter_unitsTotal.l(nodesModel,years,converter_techs,vintage)
4606    = converter_unitsPlanned(nodesModel,years,converter_techs,vintage)
4607   
4608  * Calculate if planned unit expansion is bounded by upper and lower limits
4609  set converter_unitBoundsFixed(nodesModel,years,converter_techs);
4610  converter_unitBoundsFixed(nodesModel,years,converter_techs)
4611    $(sum(vintage$converter_usedTech(nodesModel,years,converter_techs,vintage),
4612          converter_unitsPlanned(nodesModel,years,converter_techs,vintage))
4613      = converter_capacityParam(nodesModel,years,converter_techs,"unitsUpperLimit")
4614    and sum(vintage$converter_usedTech(nodesModel,years,converter_techs,vintage),
4615          converter_unitsPlanned(nodesModel,years,converter_techs,vintage))
4616      = converter_capacityParam(nodesModel,years,converter_techs,"unitsLowerLimit"))
4617    = yes;
4618   
4619  * Fix unitsBuild, unitsDecom, unitsTotal if levels are predetermined by upper and lower limits
4620  converter_unitsBuild.fx(nodesModel,years,converter_techs,vintage)
4621    $(converter_availTech(nodesModel,years,converter_techs,vintage)
4622      and converter_unitBoundsFixed(nodesModel,years,converter_techs))
4623    = converter_unitsBuild.l(nodesModel,years,converter_techs,vintage);
4624  converter_unitsDecom.fx(nodesModel,years,converter_techs,vintage)
4625    $(converter_usedTech(nodesModel,years,converter_techs,vintage)
4626      and converter_unitBoundsFixed(nodesModel,years,converter_techs))
4627    = converter_unitsDecom.l(nodesModel,years,converter_techs,vintage);
4628  converter_unitsTotal.fx(nodesModel,years,converter_techs,vintage)
4629    $(converter_usedTech(nodesModel,years,converter_techs,vintage)
4630      and converter_unitBoundsFixed(nodesModel,years,converter_techs))
4631    = converter_unitsTotal.l(nodesModel,years,converter_techs,vintage);
4632   
4633  converter_unitsOnline_MIP.up(timeModelToCalc,nodesModel,years,converter_techs,vintage)
4634      $(converter_usedTech(nodesModel,years,converter_techs,vintage)
4635        and converter_techParam(converter_techs,vintage,"mipDispatch") = 1)
4636      = converter_capacityParam(nodesModel,years,converter_techs,"unitsUpperLimit");
4637   
4638  converter_unitsTotal_MIP.up(nodesModel,years,converter_techs,vintage)
4639      $(converter_usedTech(nodesModel,years,converter_techs,vintage)
4640        and converter_techParam(converter_techs,vintage,"mipUnits") = 1)
4641      = converter_capacityParam(nodesModel,years,converter_techs,"unitsUpperLimit");
4642   
4643  converter_unitsUsingActivity_MIP.up(timeModelToCalc,nodesModel,years,converter_techs,vintage,activity)
4644      $(converter_usedTech(nodesModel,years,converter_techs,vintage)
4645        and (converter_hasMinLoad(converter_techs, vintage)
4646              or converter_hasMaxLoad(converter_techs, vintage)))
4647      = converter_capacityParam(nodesModel,years,converter_techs,"unitsUpperLimit");
4648   
4649  * Add parameter for fixing capacities during myopic runs
4650  parameter converter_unitsDelta(nodesModel,years,converter_techs);
4651   
4652  * ==== declaration of equations ====
4653   
4654  equations
4655    Eq_converter_unitsBalance(nodesModel,years,converter_techs,vintage
4656      ) "Ensures the units balance over the planning period."
4657    Eq_converter_unitsFixedDecom(nodesModel,years,converter_techs,vintage
4658      ) "Restricts the fixed decommissioning of units over the planning period."
4659    Eq_converter_unitsFreeDecom(nodesModel,years,converter_techs,vintage
4660      ) "Restricts the free decommissioning of units over the planning period."
4661    Eq_converter_unitsUpperLimit(nodesModel,years,converter_techs
4662      ) "Upper bound for the total number of units."
4663    Eq_converter_unitsLowerLimit(nodesModel,years,converter_techs
4664      ) "Lower bound for the total number of units."
4665    Eq_converter_unitsFixedLimit(nodesModel,years,converter_techs
4666      ) "Fixed bound for the total number of units."
4667    Eq_converter_unitsTotalMIP(nodesModel,years,converter_techs,vintage
4668      ) "Fixes the total number of units to the corresponding integer variable."
4669    Eq_converter_unitsOnlineMIP(timeModel,nodesModel,years,converter_techs,vintage
4670      ) "Fixes the number of online units to the corresponding integer variable."
4671   
4672    Eq_converter_activityLowerLimit(timeModel,nodesModel,years,converter_techs,vintage
4673      ) "Lower limit on the activity."
4674    Eq_converter_activityUpperLimit(timeModel,nodesModel,years,converter_techs,vintage
4675      ) "Upper limit on the activity."
4676   
4677    Eq_converter_activityFixedLimit(timeModel,nodesModel,years,converter_techs,vintage
4678      ) "Fixed limit on the activity."
4679    Eq_converter_rampPos(timeModel,nodesModel,years,converter_techs,vintage
4680      ) "Positive ramping of unit activity."
4681    Eq_converter_rampNeg(timeModel,nodesModel,years,converter_techs,vintage
4682      ) "Negative ramping of unit activity."
4683    Eq_converter_rampLimit(timeModel,nodesModel,years,converter_techs,vintage
4684      ) "Restrict ramping up of unit activity."
4685   
4686    Eq_converter_unitsOnline(timeModel,nodesModel,years,converter_techs,vintage
4687      ) "Set online units to total number of operational units."
4688    Eq_converter_unitsOnlineUC(timeModel,nodesModel,years,converter_techs,vintage
4689      ) "Allow shutting down units."
4690    Eq_converter_activityStartups(timeModel,nodesModel,years,converter_techs,vintage
4691      ) "Variable counting the number of unit startups."
4692    Eq_converter_activityShutdowns(timeModel,nodesModel,years,converter_techs,vintage
4693      ) "Variable tracking the number of unit shutdowns."
4694    Eq_converter_limitStartups(nodesModel,years,converter_techs,vintage
4695      ) "Limit the number of startup cycles a unit can perform."
4696    Eq_converter_minUptime(timeModel,nodesModel,years,converter_techs,vintage
4697      ) "Require recently started units to remain online for their respective minimum uptime."
4698    Eq_converter_minDowntime(timeModel,nodesModel,years,converter_techs,vintage
4699      ) "Require recently shut down units to remain offline for their respective minimum downtime."
4700    Eq_converter_activityUpperLimitDetailedPartLoadMinReq(timeModel,nodesModel,years,converter_techs,vintage,activity
4701      ) "Limit activity coefficients of activities with a given load requirement or stricter to the number of units in such modes."
4702    Eq_converter_activityUpperLimitDetailedPartLoadMaxReq(timeModel,nodesModel,years,converter_techs,vintage,activity
4703      ) "Limit activity coefficients of activities with a given load requirement or stricter to the number of units in such modes."
4704    Eq_converter_activityLowerLimitDetailedPartLoadMinReq(timeModel,nodesModel,years,converter_techs,vintage,activity
4705      ) "Enforce sufficient activity coefficients of activities to justify all active modes."
4706    Eq_converter_noOnlineIdle(timeModel,nodesModel,years,converter_techs,vintage
4707      ) "Prevent the circumvention of requirements by keeping units online without using any modes."
4708    Eq_converter_noOnlineIdleDetailedPartLoad(timeModel,nodesModel,years,converter_techs,vintage
4709      ) "Prevent the circumvention of requirements by keeping units online without using any modes. Allow more than one mode activation per unit."
4710    Eq_converter_activityUpperLimitPartLoad(timeModel,nodesModel,years,converter_techs,vintage,activity
4711      ) "Limit usage of an activity to corresponding units."
4712    Eq_converter_activityLowerLimitPartLoad(timeModel,nodesModel,years,converter_techs,vintage,activity
4713      ) "Limit usage of an activity to corresponding units."
4714    Eq_converter_activityModeLimit(timeModel,nodesModel,years,converter_techs,vintage,activity
4715      ) "Limit the number of units in one particular mode to the number of operational units."
4716    ;
4717   
4718  * ==== equation definition ====
4719  * // ## Equations
4720  * // ### Converter Units Balance
4721  * // Ensures that the total units are consistent with the built and decommissioned units.
4722  * // {Eq_converter_unitsBalance}
4723  Eq_converter_unitsBalance(nodesModelSel,yearsSel,converter_techs,vintage)
4724      $((converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
4725            or sum(years$sameas(years,yearsSel), converter_usedTech(nodesModelSel,years-1,converter_techs,vintage)))
4726          and not converter_unitBoundsFixed(nodesModelSel,yearsSel,converter_techs))
4727      ..
4728      converter_unitsTotal(nodesModelSel,yearsSel,converter_techs,vintage)
4729      =e=
4730      sum(yearsToCalc$(ord(yearsToCalc) = 1 and sameas(yearsToCalc, yearsSel)),
4731        sum(years$sameas(years, yearsToCalc),
4732          converter_unitsTotal(nodesModelSel,years-1,converter_techs,vintage)
4733            $converter_usedTech(nodesModelSel,years-1,converter_techs,vintage)))
4734      + sum((yearsToCalc)$(ord(yearsToCalc) > 1 and sameas(yearsToCalc, yearsSel)),
4735        converter_unitsTotal(nodesModelSel,yearsToCalc-1,converter_techs,vintage)
4736          $converter_usedTech(nodesModelSel,yearsToCalc-1,converter_techs,vintage))
4737      + converter_unitsBuild(nodesModelSel,yearsSel,converter_techs,vintage)
4738          $converter_availTech(nodesModelSel,yearsSel,converter_techs,vintage)
4739      - converter_unitsDecom(nodesModelSel,yearsSel,converter_techs,vintage)
4740          $converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage);
4741   
4742  * // ### Converter Units Fixed Decommission
4743  * // Restricts the fixed decommissioning of units over the planning period.
4744  * // {Eq_converter_unitsFixedDecom}
4745  Eq_converter_unitsFixedDecom(nodesModelSel,yearsSel,converter_techs,vintage)
4746      $(converter_decomTech(nodesModelSel,yearsSel,converter_techs,vintage)
4747          and not converter_techParam(converter_techs,vintage,"freeDecom") = 1
4748          and not converter_unitBoundsFixed(nodesModelSel,yearsSel,converter_techs))
4749      ..
4750      converter_unitsDecom(nodesModelSel,yearsSel,converter_techs,vintage)
4751      =e=
4752      sum(years$
4753          (converter_availTech(nodesModelSel,years,converter_techs,vintage)
4754            and years.val > sum(yearsToCalc$sameas(yearsToCalc+1, yearsSel), yearsToCalc.val) - converter_techParam(converter_techs,vintage,'lifeTime')
4755            and years.val <= yearsSel.val - converter_techParam(converter_techs,vintage,'lifeTime')),
4756        converter_unitsBuild(nodesModelSel,years,converter_techs,vintage));
4757   
4758  * // ### Converter Units Free Decommission
4759  * // Restricts the free decommissioning of units over the planning period.
4760  * // {Eq_converter_unitsFreeDecom}
4761  Eq_converter_unitsFreeDecom(nodesModelSel,yearsSel,converter_techs,vintage)
4762      $((converter_decomTech(nodesModelSel,yearsSel,converter_techs,vintage)
4763          or converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage))
4764          and converter_techParam(converter_techs,vintage,"freeDecom") = 1)
4765      ..
4766      sum(years$
4767            ((converter_decomTech(nodesModelSel,years,converter_techs,vintage)
4768              or converter_usedTech(nodesModelSel,years,converter_techs,vintage))
4769              and years.val < sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)),
4770          converter_unitsDecom(nodesModelSel,years,converter_techs,vintage))
4771      + sum(yearsToCalc$
4772            ((converter_decomTech(nodesModelSel,yearsToCalc,converter_techs,vintage)
4773              or converter_usedTech(nodesModelSel,yearsToCalc,converter_techs,vintage))
4774              and yearsToCalc.val >= sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
4775              and yearsToCalc.val <= yearsSel.val),
4776          converter_unitsDecom(nodesModelSel,yearsToCalc,converter_techs,vintage))
4777      =g=
4778      sum(years$
4779            (converter_availTech(nodesModelSel,years,converter_techs,vintage)
4780              and years.val < sum(yearsToCalc$(ord(yearsToCalc)=1), yearsToCalc.val) - converter_techParam(converter_techs,vintage,'lifeTime')),
4781          converter_unitsBuild(nodesModelSel,years,converter_techs,vintage))
4782      + sum(yearsToCalc$
4783            (converter_availTech(nodesModelSel,yearsToCalc,converter_techs,vintage)
4784              and yearsToCalc.val >= sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
4785              and yearsToCalc.val <= yearsSel.val - converter_techParam(converter_techs,vintage,'lifeTime')),
4786          converter_unitsBuild(nodesModelSel,yearsToCalc,converter_techs,vintage));
4787   
4788  * // ### Converter Units Upper Limit
4789  * // Upper bound for the total number of units.
4790  * // {Eq_converter_unitsUpperLimit}
4791  Eq_converter_unitsUpperLimit(nodesModelSel,yearsSel,converter_techs)
4792      $(converter_capacityParam(nodesModelSel,yearsSel,converter_techs,'unitsUpperLimit') >= 0
4793          and converter_capacityParam(nodesModelSel,yearsSel,converter_techs,'unitsUpperLimit') < +inf
4794          and converter_capacityParam(nodesModelSel,yearsSel,converter_techs,'unitsUpperLimit')
4795              <> converter_capacityParam(nodesModelSel,yearsSel,converter_techs,'unitsLowerLimit'))
4796      ..
4797      sum(vintage$converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage),
4798          converter_unitsTotal(nodesModelSel,yearsSel,converter_techs,vintage))
4799      =l=
4800      converter_capacityParam(nodesModelSel,yearsSel,converter_techs,"unitsUpperLimit");
4801   
4802  * // ### Converter Units Lower Limit
4803  * // Lower bound for the total number of units.
4804  * // {Eq_converter_unitsLowerLimit}
4805  Eq_converter_unitsLowerLimit(nodesModelSel,yearsSel,converter_techs)
4806      $(converter_capacityParam(nodesModelSel,yearsSel,converter_techs,'unitsLowerLimit') > 0
4807          and converter_capacityParam(nodesModelSel,yearsSel,converter_techs,'unitsLowerLimit')
4808              <> converter_capacityParam(nodesModelSel,yearsSel,converter_techs,'unitsUpperLimit'))
4809      ..
4810      sum(vintage$converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage),
4811          converter_unitsTotal(nodesModelSel,yearsSel,converter_techs,vintage))
4812      =g=
4813      converter_capacityParam(nodesModelSel,yearsSel,converter_techs,"unitsLowerLimit");
4814   
4815  Eq_converter_unitsFixedLimit(nodesModelSel,yearsSel,converter_techs)
4816      $(converter_capacityParam(nodesModelSel,yearsSel,converter_techs,'unitsLowerLimit')
4817          = converter_capacityParam(nodesModelSel,yearsSel,converter_techs,'unitsUpperLimit'))
4818      ..
4819      sum(vintage$converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage),
4820          converter_unitsTotal(nodesModelSel,yearsSel,converter_techs,vintage))
4821      =e=
4822      converter_capacityParam(nodesModelSel,yearsSel,converter_techs,"unitsUpperLimit");
4823   
4824  * // ### Converter Units Total MIP
4825  * // Fixes the total number of units to the corresponding integer variable.
4826  * // {Eq_converter_unitsTotalMIP}
4827  Eq_converter_unitsTotalMIP(nodesModelSel,yearsSel,converter_techs,vintage)
4828      $( converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
4829          and converter_techParam(converter_techs,vintage,"mipUnits") = 1 )
4830      ..
4831      converter_unitsTotal(nodesModelSel,yearsSel,converter_techs,vintage)
4832      =e=
4833      converter_unitsTotal_MIP(nodesModelSel,yearsSel,converter_techs,vintage);
4834   
4835  * // ### Converter Units Online MIP
4836  * // Fixes the number of online units to the corresponding integer variable.
4837  * // {Eq_converter_unitsOnlineMIP}
4838  Eq_converter_unitsOnlineMIP(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
4839      $( converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
4840          and converter_techParam(converter_techs,vintage,"mipDispatch") = 1 )
4841      ..
4842      converter_unitsOnline(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
4843      =e=
4844      converter_unitsOnline_MIP(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage);
4845   
4846  * // ### Converter Activity Lower Limit
4847  * // Lower limit on the activity.
4848  * // {Eq_converter_activityLowerLimit}
4849  Eq_converter_activityLowerLimit(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
4850      $(converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
4851          and converter_activityProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,"lower") > 0
4852          and converter_activityProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,"lower")
4853               <> converter_activityProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,"upper")
4854          and not converter_hasMinLoad(converter_techs, vintage))
4855      ..
4856      sum(activity$converter_usedAct(converter_techs,vintage,activity),
4857          converter_activity(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity)
4858      )
4859      =g=
4860      converter_activityProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,"lower")
4862      * converter_unitsOnline(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage);
4864   
4865  * // ### Converter Activity Upper Limit
4866  * // Upper limit on the activity.
4867  * // {Eq_converter_activityUpperLimit}
4868  Eq_converter_activityUpperLimit(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
4869      $(converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
4870          and converter_activityProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,"upper") >= 0
4871          and converter_activityProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,"upper")
4872               <> converter_activityProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,"lower"))
4873      ..
4874      sum(activity$converter_usedAct(converter_techs,vintage,activity),
4875          converter_activity(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity)
4876      )
4877      =l=
4878      converter_activityProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,"upper")
4880      * converter_unitsOnline(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage);
4882   
4883  Eq_converter_activityFixedLimit(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
4884      $(converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
4885          and converter_activityProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,"lower")
4886               = converter_activityProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,"upper"))
4887      ..
4888      sum(activity$converter_usedAct(converter_techs,vintage,activity),
4889          converter_activity(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity)
4890      )
4891      =e=
4892      converter_activityProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,"upper")
4894      * converter_unitsOnline(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage);
4896   
4897  * // ### Converter Positive Ramping
4898  * // Positive ramping of unit activity.
4899  * // {Eq_converter_rampPos}
4900  Eq_converter_rampPos(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,converter_techs,vintage)
4901    $( converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
4902        and converter_useRampPos(nodesModelSel,yearsSel,converter_techs,vintage))
4903      ..
4904      converter_rampPos(timeModelToCalc,nodesModelSel,yearsSel,converter_techs,vintage)
4905      =g=
4906      sum(activity$converter_usedAct(converter_techs,vintage,activity),
4907              converter_activity(timeModelToCalc,nodesModelSel,yearsSel,converter_techs,vintage,activity)
4908              - converter_activity(timeModelToCalc--1,nodesModelSel,yearsSel,converter_techs,vintage,activity));
4909   
4910  * // ### Converter Negative Ramping
4911  * // Negative ramping of unit activity.
4912  * // {Eq_converter_rampNeg}
4913  Eq_converter_rampNeg(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,converter_techs,vintage)
4914    $( converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
4915        and converter_useRampNeg(nodesModelSel,yearsSel,converter_techs,vintage))
4916      ..
4917      converter_rampNeg(timeModelToCalc,nodesModelSel,yearsSel,converter_techs,vintage)
4918      =g=
4919      - sum(activity$converter_usedAct(converter_techs,vintage,activity),
4920              converter_activity(timeModelToCalc,nodesModelSel,yearsSel,converter_techs,vintage,activity)
4921              - converter_activity(timeModelToCalc--1,nodesModelSel,yearsSel,converter_techs,vintage,activity));
4922   
4923  * // ### Converter Ramping Limit
4924  * // Restrict ramping up of unit activity.
4925  * // {Eq_converter_rampLimit}
4926  Eq_converter_rampLimit(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,converter_techs,vintage)
4927    $( converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
4928          and converter_techParam(converter_techs,vintage,"activityRampLimit") > 0)
4929      ..
4930      sum(activity$converter_usedAct(converter_techs,vintage,activity),
4931              converter_activity(timeModelToCalc,nodesModelSel,yearsSel,converter_techs,vintage,activity)
4932              - converter_activity(timeModelToCalc--1,nodesModelSel,yearsSel,converter_techs,vintage,activity))
4933    =l=
4934    converter_techParam(converter_techs,vintage,"activityRampLimit")
4936      * converter_unitsOnline(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage);
4938   
4939   
4941   
4942  * // ### Converter MIP Units Online
4943  * // Restrict ramping up of unit activity.
4944  * // {Eq_converter_unitsOnline}
4945  Eq_converter_unitsOnline(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
4946      $( converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
4947          and converter_techParam(converter_techs,vintage,"mipDispatch") = 0 )
4948    ..
4949    converter_unitsOnline(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
4950    =e=
4951    converter_unitsTotal(nodesModelSel,yearsSel,converter_techs,vintage)
4952      ;
4953   
4954  * // ### Converter MIP Units Shutting Down
4955  * // Allow shutting down units.
4956  * // {Eq_converter_unitsOnlineUC}
4957  Eq_converter_unitsOnlineUC(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
4958      $( converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
4959          and converter_techParam(converter_techs,vintage,"mipDispatch") = 1 )
4960    ..
4961    converter_unitsOnline(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
4962    =l=
4963    converter_unitsTotal(nodesModelSel,yearsSel,converter_techs,vintage)
4964      ;
4966   
4967  * // ### Converter Activity Startups
4968  * // Variable counting the number of unit startups.
4969  * // {Eq_converter_activityStartups}
4970  Eq_converter_activityStartups(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,converter_techs,vintage)
4971    $( converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
4972          and converter_techParam(converter_techs,vintage,"mipDispatch") = 1 )
4973      ..
4974      converter_unitStartups(timeModelToCalc,nodesModelSel,yearsSel,converter_techs,vintage)
4975      =g=
4976          converter_unitsOnline(timeModelToCalc,nodesModelSel,yearsSel,converter_techs,vintage)
4977      - converter_unitsOnline(timeModelToCalc--1,nodesModelSel,yearsSel,converter_techs,vintage);
4978   
4979  * // ### Converter Activity Shutdowns
4980  * // Variable tracking the number of unit shutdowns.
4981  * // {Eq_converter_activityShutdowns}
4982  Eq_converter_activityShutdowns(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,converter_techs,vintage)
4983    $( converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
4984          and converter_techParam(converter_techs,vintage,"mipDispatch") = 1
4985          and converter_techParam(converter_techs,vintage,"minDowntime") > 0)
4986      ..
4987      converter_unitShutdowns(timeModelToCalc,nodesModelSel,yearsSel,converter_techs,vintage)
4988      =g=
4989          converter_unitsOnline(timeModelToCalc--1,nodesModelSel,yearsSel,converter_techs,vintage)
4990      - converter_unitsOnline(timeModelToCalc,nodesModelSel,yearsSel,converter_techs,vintage);
4991   
4992  * // ### Converter Activity Startup Limit
4993  * // Limit the number of startup cycles a unit can perform.
4994  * // {Eq_converter_limitStartups}
4995  Eq_converter_limitStartups(nodesModelSel,yearsSel,converter_techs,vintage)
4996    $( converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
4997          and converter_techParam(converter_techs,vintage,"mipDispatch") = 1
4998      and converter_techParam(converter_techs,vintage,"startupLimit") > 0)
4999      ..
5000      sum(timeModelToCalc, converter_unitStartups(timeModelToCalc,nodesModelSel,yearsSel,converter_techs,vintage))
5001    =l=
5002    converter_techParam(converter_techs,vintage,"startupLimit")
5003    * converter_unitsTotal(nodesModelSel,yearsSel,converter_techs,vintage);
5004   
5005  alias(timeModelToCalc,ttc);
5006   
5007  * // ### Converter Units Minimum Uptime
5008  * // Require recently started units to remain online for their respective minimum uptime.
5009  * // {Eq_converter_minUptime}
5010  Eq_converter_minUptime(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,converter_techs,vintage)
5011    $( converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
5012          and converter_techParam(converter_techs,vintage,"mipDispatch") = 1
5013      and converter_techParam(converter_techs,vintage,"minUptime") > 0)
5014      ..
5015      sum(ttc$[uptimeSearchRange(ttc) and ord(ttc)<=converter_techParam(converter_techs,vintage,"minUptime")],
5016          converter_unitStartups(ttc+[ord(timeModelToCalc)-converter_techParam(converter_techs,vintage,"minUptime")],
5017              nodesModelSel,yearsSel,converter_techs,vintage))
5018          =l=
5019          converter_unitsOnline(timeModelToCalc,nodesModelSel,yearsSel,converter_techs,vintage);
5020   
5021  * // ### Converter Units Minimum Downtime
5022  * // Require recently shut down units to remain offline for their respective minimum downtime.
5023  * // {Eq_converter_minDowntime}
5024  Eq_converter_minDowntime(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,converter_techs,vintage)
5025    $( converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
5026          and converter_techParam(converter_techs,vintage,"mipDispatch") = 1
5027      and converter_techParam(converter_techs,vintage,"minDowntime") > 0)
5028      ..
5029      sum(ttc$[downtimeSearchRange(ttc) and ord(ttc)<=converter_techParam(converter_techs,vintage,"minDowntime")],
5030          converter_unitShutdowns(ttc+[ord(timeModelToCalc)-converter_techParam(converter_techs,vintage,"minDowntime")],
5031              nodesModelSel,yearsSel,converter_techs,vintage))
5032          =l=
5033          converter_unitsTotal(nodesModelSel,yearsSel,converter_techs,vintage)
5034      - converter_unitsOnline(timeModelToCalc,nodesModelSel,yearsSel,converter_techs,vintage);
5035   
5036  * This equation is meant to cause the units to activate particular mode counters to gain access to the corresponding activities.
5037  * Activities are allowed to be used on units with stricter activity requirements but not the other way around.
5038  alias(activity, act);
5039   
5040  * // ### Converter MIP Units Activity Upper Limit Minimum Required Load
5041  * // Limit activity coefficients of activities with a given load requirement or stricter to the number of units in such modes.
5042  * // {Eq_converter_activityUpperLimitDetailedPartLoadMinReq}
5043  Eq_converter_activityUpperLimitDetailedPartLoadMinReq(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity)
5044    $( converter_usedTechAct(nodesModelSel,yearsSel,converter_techs,vintage,activity)
5045          and converter_hasMinLoad(converter_techs, vintage)
5046          and converter_techParam(converter_techs,vintage,"mipDetailedPartialLoad"))
5047      ..
5048      sum(act$(converter_activityRequirements(converter_techs,vintage,act,"minLoad")
5049                  >= converter_activityRequirements(converter_techs,vintage,activity,"minLoad")
5050               and converter_usedAct(converter_techs,vintage,act)),
5051      converter_activity(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,act))
5052    =l=
5053    converter_activityProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,"upper")
5054      * sum(act$(converter_activityRequirements(converter_techs,vintage,act,"minLoad")
5055                  >= converter_activityRequirements(converter_techs,vintage,activity,"minLoad")
5056                 and converter_usedAct(converter_techs,vintage,act)),
5057      converter_unitsUsingActivity_MIP(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,act));
5058   
5059  * // ### Converter MIP Units Activity Upper Limit Maximum Required Load
5060  * // Limit activity coefficients of activities with a given load requirement or stricter to the number of units in such modes.
5061  * // {Eq_converter_activityUpperLimitDetailedPartLoadMaxReq}
5062  Eq_converter_activityUpperLimitDetailedPartLoadMaxReq(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity)
5063    $( converter_usedTechAct(nodesModelSel,yearsSel,converter_techs,vintage,activity)
5064          and converter_hasMaxLoad(converter_techs,vintage)
5065          and converter_techParam(converter_techs,vintage,"mipDetailedPartialLoad"))
5066      ..
5067      sum(act$(converter_activityRequirements(converter_techs,vintage,act,"maxLoad")
5068                  <= converter_activityRequirements(converter_techs,vintage,activity,"maxLoad")
5069               and converter_usedAct(converter_techs,vintage,act)),
5070      converter_activity(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,act))
5071    =l=
5072      sum(act$(converter_activityRequirements(converter_techs,vintage,act,"maxLoad")
5073                  <= converter_activityRequirements(converter_techs,vintage,activity,"maxLoad")
5074               and converter_usedAct(converter_techs,vintage,act)),
5075      min(converter_activityRequirements(converter_techs,vintage,act,"maxLoad"),
5076            converter_activityProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,"upper"))
5077            * converter_unitsUsingActivity_MIP(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,act));
5078   
5079  * This equation is meant to enforce the lower limit requirements of activities in use.
5080  * Loads produced by activities with less strict requirements can contribute to the minimum load requirement of strict activities but not the other way around,
5081  * because these activities can only run on units in the respectively strict activation state.
5082   
5083  * // ### Converter MIP Units Activity Lower Limit Minimum Required Load
5084  * // Enforce sufficient activity coefficients of activities to justify all active modes.
5085  * // {Eq_converter_activityLowerLimitDetailedPartLoadMinReq}
5086  Eq_converter_activityLowerLimitDetailedPartLoadMinReq(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity)
5087    $( converter_usedTechAct(nodesModelSel,yearsSel,converter_techs,vintage,activity)
5088          and converter_hasMinLoad(converter_techs, vintage)
5089          and converter_techParam(converter_techs,vintage,"mipDetailedPartialLoad"))
5090      ..
5091      sum(act$(converter_activityRequirements(converter_techs,vintage,act,"minLoad")
5092                  <= converter_activityRequirements(converter_techs,vintage,activity,"minLoad")
5093               and converter_usedAct(converter_techs,vintage,act)),
5094      converter_activity(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,act))
5095    =g=
5096      sum(act$(converter_activityRequirements(converter_techs,vintage,act,"minLoad")
5097                  <= converter_activityRequirements(converter_techs,vintage,activity,"minLoad")
5098               and converter_usedAct(converter_techs,vintage,act)),
5099      max(converter_activityRequirements(converter_techs,vintage,act,"minLoad"),
5100            converter_activityProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,"lower"))
5101            * converter_unitsUsingActivity_MIP(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,act));
5102   
5103   
5104  * Simple one-activity-per-unit partial load equations
5105  * // ### Converter MIP Units Activity Upper Limit Partial Load Balance
5106  * // Enforce MIP units partial load upper limit.
5107  * // {Eq_converter_activityUpperLimitPartLoad}
5108  Eq_converter_activityUpperLimitPartLoad(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity)
5109    $( converter_usedTechAct(nodesModelSel,yearsSel,converter_techs,vintage,activity)
5110          and (converter_hasMinLoad(converter_techs, vintage)
5111                or converter_hasMaxLoad(converter_techs, vintage)
5112                or converter_hasConstantFluxInActivity(converter_techs, vintage))
5113          and not converter_techParam(converter_techs,vintage,"mipDetailedPartialLoad"))
5114      ..
5115      converter_activity(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity)
5116    =l=
5117    min(converter_activityRequirements(converter_techs,vintage,activity,"maxLoad"),
5118          converter_activityProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,"upper"))
5119          * converter_unitsUsingActivity_MIP(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity);
5120   
5121  * // ### Converter MIP Units Activity Lower Limit Partial Load Balance
5122  * // Enforce MIP units partial load lower limit.
5123  * // {Eq_converter_activityLowerLimitPartLoad}
5124  Eq_converter_activityLowerLimitPartLoad(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity)
5125    $( converter_usedTechAct(nodesModelSel,yearsSel,converter_techs,vintage,activity)
5126          and (converter_hasMinLoad(converter_techs, vintage)
5127                or converter_hasMaxLoad(converter_techs, vintage))
5128          and not converter_techParam(converter_techs,vintage,"mipDetailedPartialLoad"))
5129      ..
5130      converter_activity(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity)
5131    =g=
5132    max(converter_activityRequirements(converter_techs,vintage,activity,"minLoad"),
5133          converter_activityProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,"lower"))
5134          * converter_unitsUsingActivity_MIP(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity);
5135   
5136  * // ### Converter MIP Units Idle Online Units
5137  * // Counts idle online units at every time step
5138  * // {Eq_converter_noOnlineIdle}
5139  Eq_converter_noOnlineIdle(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
5140    $( converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
5141          and (converter_hasMinLoad(converter_techs, vintage)
5142              or converter_hasMaxLoad(converter_techs, vintage)
5143              or converter_hasConstantFluxInActivity(converter_techs,vintage))
5144          and not converter_techParam(converter_techs,vintage,"mipDetailedPartialLoad"))
5145      ..
5146      converter_unitsOnline(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
5147      =e=
5148      sum(activity$converter_usedAct(converter_techs,vintage,activity),
5149            converter_unitsUsingActivity_MIP(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity));
5150   
5151  * // ### Converter MIP Units Idle Online Units Partial load
5152  * // Counts idle online units at every time step
5153  * // {Eq_converter_noOnlineIdleDetailedPartLoad}
5154  Eq_converter_noOnlineIdleDetailedPartLoad(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
5155    $( converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
5156          and (converter_hasMinLoad(converter_techs, vintage)
5157                  or converter_hasMaxLoad(converter_techs, vintage))
5158          and converter_techParam(converter_techs,vintage,"mipDetailedPartialLoad"))
5159      ..
5160      converter_unitsOnline(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
5161      =l=
5162      sum(activity$converter_usedAct(converter_techs,vintage,activity),
5163            converter_unitsUsingActivity_MIP(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity));
5164   
5165  * // ### Converter MIP activity model limit
5166  * // Converter activity model limit
5167  * // {Eq_converter_activityModeLimit}
5168  Eq_converter_activityModeLimit(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity)
5169    $( converter_usedTechAct(nodesModelSel,yearsSel,converter_techs,vintage,activity)
5170          and (converter_hasMinLoad(converter_techs, vintage)
5171                or converter_hasMaxLoad(converter_techs, vintage))
5172          and converter_techParam(converter_techs,vintage,"mipDetailedPartialLoad"))
5173      ..
5174      converter_unitsOnline(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
5175      =g=
5176      converter_unitsUsingActivity_MIP(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity);
5177   
5178  * ==== model definition ====
5179   
5180  Model M_converter
5181  /
5182    Eq_converter_unitsBalance
5183    Eq_converter_unitsFixedDecom
5184    Eq_converter_unitsFreeDecom
5185    Eq_converter_unitsUpperLimit
5186    Eq_converter_unitsLowerLimit
5187    Eq_converter_unitsFixedLimit
5188    Eq_converter_unitsTotalMIP
5189    Eq_converter_unitsOnlineMIP
5190    Eq_converter_activityUpperLimit
5191    Eq_converter_activityLowerLimit
5192    Eq_converter_activityFixedLimit
5193    Eq_converter_rampPos
5194    Eq_converter_rampNeg
5195    Eq_converter_rampLimit
5197    Eq_converter_unitsOnline
5198    Eq_converter_unitsOnlineUC
5200    Eq_converter_activityStartups
5201    Eq_converter_activityShutdowns
5202    Eq_converter_limitStartups
5203    Eq_converter_minUptime
5204    Eq_converter_minDowntime
5205    Eq_converter_activityUpperLimitDetailedPartLoadMinReq
5206    Eq_converter_activityUpperLimitDetailedPartLoadMaxReq
5207    Eq_converter_activityLowerLimitDetailedPartLoadMinReq
5208    Eq_converter_activityUpperLimitPartLoad
5209    Eq_converter_activityLowerLimitPartLoad
5210    Eq_converter_noOnlineIdle
5211    Eq_converter_noOnlineIdleDetailedPartLoad
5212    Eq_converter_activityModeLimit
5213  /;
INCLUDE    C:\Local\REMix\framework\remix\framework\model\source\core\storage.gms
5215  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
5216  * SPDX-License-Identifier: BSD-3-Clause
5217   
5218  * // # core_storage
5219  * // The equations in this file describe the storages in the model.
5220   
5221  * // ## Variables
5222  * // {special_table_storage_variables}
5537   
5538   
5539  * === SoC mappings ===
5540  set storage_usedTechSoCState(storage_techs,vintage,soc_statesIn);
5541  storage_usedTechSoCState(storage_techs,vintage,soc_states(soc_statesIn))
5542      $(storage_SoCParam(storage_techs,vintage,soc_states,"eRate") > 0
5543        and storage_SoCParam(storage_techs,vintage,soc_states,"cRate") > 0)
5544      = yes;
5545   
5546  set storage_validSoCRange(storage_techs,vintage);
5547  storage_validSoCRange(storage_techs,vintage)
5548      = smax(soc_states$storage_usedTechSoCState(storage_techs,vintage,soc_states), storage_SoCParam(storage_techs,vintage,soc_states,"SoC")) = 1
5549        and smin(soc_states$storage_usedTechSoCState(storage_techs,vintage,soc_states), storage_SoCParam(storage_techs,vintage,soc_states,"SoC")) = 0;
5550   
5551  * === Translate SoC parameters to ordered SoC-set ===
5552  * set ordered_socs / soc1*soc20 /;
5553  * alias(soc_states, soc_states_c);
5554  * parameter storage_SoCParam_ordered(storage_techs,vintage,ordered_socs,pc_storage_SoCParam);
5555  * storage_SoCParam_ordered(storage_techs,vintage,ordered_socs,pc_storage_SoCParam)
5556  *     $storage_validSoCRange(storage_techs,vintage)
5557  *     = sum(soc_states$(ord(ordered_socs) = sum(soc_states_c$(storage_SoCParam(storage_techs,vintage,soc_states_c,"SoC") <= storage_SoCParam(storage_techs,vintage,soc_states,"SoC")
5558  *                                                            and storage_usedTechSoCState(storage_techs,vintage,soc_states_c)), 1)
5559  *                       and storage_usedTechSoCState(storage_techs,vintage,soc_states)),
5560  *           storage_SoCParam(storage_techs,vintage,soc_states,pc_storage_SoCParam));
5561  *
5562  * set storage_usedTechSoCStateOrdered(storage_techs,vintage,ordered_socs);
5563  * storage_usedTechSoCStateOrdered(storage_techs,vintage,ordered_socs)
5564  *     $(storage_SoCParam_ordered(storage_techs,vintage,ordered_socs,"eRate") > 0
5565  *       and storage_SoCParam_ordered(storage_techs,vintage,ordered_socs,"cRate") > 0)
5566  *     = yes;
5567   
5568  parameter storage_bigM(storage_techs,vintage);
5569  storage_bigM(storage_techs,vintage) = smax((nodesModel,years), storage_reservoirParam(nodesModel,years,storage_techs,"unitsUpperLimit"));
5570  storage_bigM(storage_techs,vintage)$(storage_bigM(storage_techs,vintage) = INF) = 10000;
5571  storage_bigM(storage_techs,vintage)$(storage_bigM(storage_techs,vintage) = 0) = 10000;
5572   
5573  * === calculate the number of years represented by single year to calc ===
5574  alias(yearsToCalc, yearsToCalc_a)
5575  parameter representedYears(years);
5576  representedYears(years) = 0.5 *(smin(yearsToCalc$(yearsToCalc.val > years.val or yearsToCalc.val = smax(yearsToCalc_a, yearsToCalc_a.val)), yearsToCalc.val)
5577                                  - smax(yearsToCalc$(yearsToCalc.val < years.val or yearsToCalc.val = smin(yearsToCalc_a, yearsToCalc_a.val)), yearsToCalc.val));
5578   
5579  * ==== calculation of mappings ====
5580   
5581  * Technologies with a lifeTime > 0 are available
5582  set storage_availTech(nodesModel,years,storage_techs,vintage);
5583  storage_availTech(nodesModel,years,storage_techs,vintage)
5584      $(vintage.val = smax(vintage_a$(vintage_a.val <= years.val
5585          and storage_techParam(storage_techs,vintage_a,"lifeTime") > 0), vintage_a.val)) = yes;
5586   
5587  * Technologies to optimize become unavailable if they have an unitsUpperLimit of 0
5588  storage_availTech(nodesModel,years,storage_techs,vintage)
5589      $(yearsToCalc(years) and storage_reservoirParam(nodesModel,years,storage_techs,"unitsUpperLimit") = 0 ) = no;
5590   
5591  * Technologies already built become unavailable if they have an unitsBuild of 0
5592  storage_availTech(nodesModel,years,storage_techs,vintage)
5593      $( ( not yearsToCalc(years)) and storage_reservoirParam(nodesModel,years,storage_techs,"unitsBuild") = 0 ) = no;
5594   
5595  * Used technologies are available technologies over their technical lifeTime
5596  set storage_usedTech(nodesModel,years,storage_techs,vintage);
5597  storage_usedTech(nodesModel,years,storage_techs,vintage)
5598      $(vintage.val <= years.val
5599          and years.val < smax(years_a$storage_availTech(nodesModel,years_a,storage_techs,vintage),
5600                                              years_a.val + storage_techParam(storage_techs,vintage,"lifeTime"))
5601          ) = yes;
5602   
5603  * Technologies have to be decomissioned in the interval of first avail + lifetime to last avail + lifetime
5604  set storage_decomTech(nodesModel,years,storage_techs,vintage);
5605  storage_decomTech(nodesModel,years,storage_techs,vintage)
5606    $(sum(years_a$storage_usedTech(nodesModel,years_a,storage_techs,vintage), 1)
5607      and sum(yearsToCalc
5608        $(sameas(years, yearsToCalc)
5609          and yearsToCalc.val >= smin(years_a$storage_availTech(nodesModel,years_a,storage_techs,vintage), years_a.val) + storage_techParam(storage_techs,vintage,"lifeTime")
5610          and yearsToCalc.val <= smax(years_a$storage_availTech(nodesModel,years_a,storage_techs,vintage), years_a.val) + storage_techParam(storage_techs,vintage,"lifeTime")), 1))
5611    = yes;
5612   
5613  * Extend the decom frame to the year after the last year of usedTech
5614  storage_decomTech(nodesModel,yearsToCalc,storage_techs,vintage)
5615    $(storage_usedTech(nodesModel,yearsToCalc-1,storage_techs,vintage)
5616      and storage_decomTech(nodesModel,yearsToCalc-1,storage_techs,vintage))
5617    = yes;
5618   
5619  * Mapping for used commodities
5620  set storage_usedCom(storage_techs,vintage,commodity);
5621  option storage_usedCom < storage_sizeParam;
5622   
5623  set storage_usedTechCom(nodesModel,years,storage_techs,vintage,commodity);
5624  storage_usedTechCom(nodesModel,years,storage_techs,vintage,commodity)
5625      $(storage_usedTech(nodesModel,years,storage_techs,vintage)
5626          and storage_usedCom(storage_techs,vintage,commodity))
5627      = yes;
5628   
5629   
5630  * // ## Load units from gdx file
5632   
5633  * ==== aggregation of profiles ====
5634  * derive upper and lower profiles then aggregate
5635  set storage_level_hasProfileIn(nodesData,years,storage_techs,pc_storage_levelProfile);
5636  option storage_level_hasProfileIn < storage_levelProfileIn;
5637   
5638  set storage_level_hasProfile(nodesModel,years,storage_techs,pc_storage_levelProfile);
5639  storage_level_hasProfile(nodesModelToCalc,yearsToCalc,storage_techs,pc_storage_levelProfile)
5640      = sum(nodesData$aggregateNodesModel(nodesData,nodesModelToCalc),
5641              storage_level_hasProfileIn(nodesData,yearsToCalc,storage_techs,pc_storage_levelProfile));
5642   
5643  * weighted average for a real sum of units upper limits, plain average if one region has an upper limit of inf
5644  parameter storage_levelProfile(timeModel,nodesModel,years,storage_techs,vintage,pc_storage_levelProfile);
5645  storage_levelProfile(timeModelToCalc,storage_usedTech(nodesModelToCalc,yearsToCalc,storage_techs,vintage),"upper")
5646      = storage_techParam(storage_techs,vintage,"levelUpperLimit");
5647  storage_levelProfile(timeModelToCalc,storage_usedTech(nodesModelToCalc,yearsToCalc,storage_techs,vintage),"lower")
5648      = storage_techParam(storage_techs,vintage,"levelLowerLimit");
5649   
5650  set storage_finiteUnitLimit(nodesModelToCalc,yearsToCalc,storage_techs);
5651  storage_finiteUnitLimit(nodesModelToCalc,yearsToCalc,storage_techs) = sum(nodesData$aggregateNodesModel(nodesData,nodesModelToCalc), storage_reservoirParamIn(nodesData,yearsToCalc,storage_techs,"unitsUpperLimit")) > 0
5652                                                   and sum(nodesData$aggregateNodesModel(nodesData,nodesModelToCalc), storage_reservoirParamIn(nodesData,yearsToCalc,storage_techs,"unitsUpperLimit")) < inf;
5653   
5654  storage_levelProfile(timeModelToCalc,storage_usedTech(nodesModelToCalc,yearsToCalc,storage_techs,vintage),pc_storage_levelProfile)
5655      $( storage_level_hasProfile(nodesModelToCalc,yearsToCalc,storage_techs,pc_storage_levelProfile)
5656          and storage_finiteUnitLimit(nodesModelToCalc,yearsToCalc,storage_techs))
5657      = sum(nodesData$aggregateNodesModel(nodesData,nodesModelToCalc),
5658              sum(timeData$timeMapping(timeData,timeModelToCalc),
5659                    storage_levelProfileIn(timeData,nodesData,yearsToCalc,storage_techs,pc_storage_levelProfile))
5660                / timeLength(timeModelToCalc)
5661              * storage_reservoirParamIn(nodesData,yearsToCalc,storage_techs,"unitsUpperLimit"))
5662      / sum(nodesData$aggregateNodesModel(nodesData,nodesModelToCalc),
5663              storage_reservoirParamIn(nodesData,yearsToCalc,storage_techs,"unitsUpperLimit"));
5664   
5665  storage_levelProfile(timeModelToCalc,storage_usedTech(nodesModelToCalc,yearsToCalc,storage_techs,vintage),pc_storage_levelProfile)
5666      $( storage_level_hasProfile(nodesModelToCalc,yearsToCalc,storage_techs,pc_storage_levelProfile)
5667          and sum(nodesData$aggregateNodesModel(nodesData,nodesModelToCalc),
5668                      storage_reservoirParamIn(nodesData,yearsToCalc,storage_techs,"unitsUpperLimit")) = inf )
5669      = sum(nodesData$(aggregateNodesModel(nodesData,nodesModelToCalc)
5670                      and storage_reservoirParamIn(nodesData,yearsToCalc,storage_techs,"unitsUpperLimit") = inf ),
5671              sum(timeData$timeMapping(timeData,timeModelToCalc),
5672                    storage_levelProfileIn(timeData,nodesData,yearsToCalc,storage_techs,pc_storage_levelProfile))
5673                / timeLength(timeModelToCalc))
5674      / sum(nodesData$(aggregateNodesModel(nodesData,nodesModelToCalc)
5675                      and storage_reservoirParamIn(nodesData,yearsToCalc,storage_techs,"unitsUpperLimit") = inf ), 1);
5676   
5677  * for fixed profiles overwrite upper and lower profile
5678  storage_levelProfile(timeModelToCalc,nodesModelToCalc,yearsToCalc,storage_techs,vintage,"lower")
5679      $storage_level_hasProfile(nodesModelToCalc,yearsToCalc,storage_techs,"fixed")
5680      = storage_levelProfile(timeModelToCalc,nodesModelToCalc,yearsToCalc,storage_techs,vintage,"fixed");
5681   
5682  storage_levelProfile(timeModelToCalc,nodesModelToCalc,yearsToCalc,storage_techs,vintage,"upper")
5683      $storage_level_hasProfile(nodesModelToCalc,yearsToCalc,storage_techs,"fixed")
5684      = storage_levelProfile(timeModelToCalc,nodesModelToCalc,yearsToCalc,storage_techs,vintage,"fixed");
5685   
5686   
5687  * ==== parameter modifications ====
5688  storage_reservoirParam(nodesModel,years,storage_techs,"unitsLowerLimit")
5689          $sum(vintage, storage_techParam(storage_techs,vintage,"mipUnits"))
5690      = floor(storage_reservoirParam(nodesModel,years,storage_techs,"unitsLowerLimit"));
5691  storage_reservoirParam(nodesModel,years,storage_techs,"unitsUpperLimit")
5692          $sum(vintage, storage_techParam(storage_techs,vintage,"mipUnits"))
5693      = ceil(storage_reservoirParam(nodesModel,years,storage_techs,"unitsUpperLimit"));
5694   
5695   
5696  * ==== definition of variables ====
5697   
5698  * Initialise variables for unitsBuild
5699  storage_unitsBuild.l(nodesModel,years,storage_techs,vintage)
5700      $storage_availTech(nodesModel,years,storage_techs,vintage)
5701      = storage_reservoirParam(nodesModel,years,storage_techs,"unitsBuild");
5702  storage_unitsBuild.lo(nodesModel,yearsToCalc,storage_techs,vintage)
5703      $storage_availTech(nodesModel,yearsToCalc,storage_techs,vintage)
5704      = storage_unitsBuild.l(nodesModel,yearsToCalc,storage_techs,vintage);
5705  storage_unitsBuild.fx(nodesModel,years,storage_techs,vintage)
5706      $storage_reservoirParam(nodesModel,years,storage_techs,"noExpansion")
5707      = storage_unitsBuild.l(nodesModel,years,storage_techs,vintage);
5708   
5709  * Initialise variables for unitsDecom
5710  storage_unitsDecom.l(nodesModel,years,storage_techs,vintage)
5711      $(storage_decomTech(nodesModel,years,storage_techs,vintage)
5712        and years.val < sum(yearsToCalc$(ord(yearsToCalc) = 1), yearsToCalc.val))
5713      = sum((years_a,years_aa)$(sameas(years-1, years_aa)
5714                        and years_a.val > years_aa.val - storage_techParam(storage_techs,vintage,'lifeTime')
5715                        and years_a.val <= years.val - storage_techParam(storage_techs,vintage,'lifeTime')
5716                        and storage_availTech(nodesModel,years_a,storage_techs,vintage)),
5717          storage_unitsBuild.l(nodesModel,years_a,storage_techs,vintage));
5718   
5719  storage_unitsDecom.l(nodesModel,yearsToCalc,storage_techs,vintage)
5720    $storage_decomTech(nodesModel,yearsToCalc,storage_techs,vintage)
5721    = sum(years$
5722          (years.val < sum(yearsToCalc_a$(ord(yearsToCalc_a) = 1), yearsToCalc_a.val)
5723            and storage_availTech(nodesModel,years,storage_techs,vintage)
5724            and years.val > sum(years_a$sameas(years_a, yearsToCalc-1), years_a.val) - storage_techParam(storage_techs,vintage,'lifeTime')
5725            and years.val <= yearsToCalc.val - storage_techParam(storage_techs,vintage,'lifeTime')),
5726        storage_unitsBuild.l(nodesModel,years,storage_techs,vintage))
5727      + sum(yearsToCalc_a$
5728          (yearsToCalc_a.val < sum(yearsToCalc_aa$(ord(yearsToCalc_aa) > 1), yearsToCalc_a.val)
5729            and storage_availTech(nodesModel,yearsToCalc_a,storage_techs,vintage)
5730            and yearsToCalc_a.val > sum(years_a$sameas(years_a, yearsToCalc-1), years_a.val) - storage_techParam(storage_techs,vintage,'lifeTime')
5731            and yearsToCalc_a.val <= yearsToCalc.val - storage_techParam(storage_techs,vintage,'lifeTime')),
5732        storage_unitsBuild.l(nodesModel,yearsToCalc_a,storage_techs,vintage));
5733        ;
5734   
5735  storage_unitsDecom.lo(nodesModel,yearsToCalc,storage_techs,vintage)
5736      $(storage_usedTech(nodesModel,yearsToCalc,storage_techs,vintage)
5737        and not storage_techParam(storage_techs,vintage,"freeDecom"))
5738      = storage_unitsDecom.l(nodesModel,yearsToCalc,storage_techs,vintage)
5739   
5740  * Calculate planned unit expansion
5741  parameter storage_unitsPlanned(nodesModel,years,storage_techs,vintage);
5742  storage_unitsPlanned(nodesModel,years,storage_techs,vintage) = 0;
5743  loop(years,
5744    storage_unitsPlanned(nodesModel,years,storage_techs,vintage)
5745      =
5746      storage_unitsPlanned(nodesModel,years-1,storage_techs,vintage)
5747          $storage_usedTech(nodesModel,years-1,storage_techs,vintage)
5748      + storage_unitsBuild.l(nodesModel,years,storage_techs,vintage)
5749          $storage_availTech(nodesModel,years,storage_techs,vintage)
5750      - storage_unitsDecom.l(nodesModel,years,storage_techs,vintage)
5751          $storage_usedTech(nodesModel,years,storage_techs,vintage);
5752  );
5753   
5754  * Set initial state for planned units
5755  storage_unitsTotal.l(nodesModel,years,storage_techs,vintage)
5756    = storage_unitsPlanned(nodesModel,years,storage_techs,vintage)
5757   
5758  * Calculate if planned unit expansion is bounded by upper and lower limits
5759  set storage_unitBoundsFixed(nodesModel,years,storage_techs);
5760  storage_unitBoundsFixed(nodesModel,years,storage_techs)
5761    $(sum(vintage$storage_usedTech(nodesModel,years,storage_techs,vintage),
5762          storage_unitsPlanned(nodesModel,years,storage_techs,vintage))
5763      = storage_reservoirParam(nodesModel,years,storage_techs,"unitsUpperLimit")
5764    and sum(vintage$storage_usedTech(nodesModel,years,storage_techs,vintage),
5765          storage_unitsPlanned(nodesModel,years,storage_techs,vintage))
5766      = storage_reservoirParam(nodesModel,years,storage_techs,"unitsLowerLimit"))
5767    = yes;
5768   
5769  * Fix unitsBuild, unitsDecom, unitsTotal if levels are predetermined by upper and lower limits
5770  storage_unitsBuild.fx(nodesModel,years,storage_techs,vintage)
5771    $(storage_availTech(nodesModel,years,storage_techs,vintage)
5772      and storage_unitBoundsFixed(nodesModel,years,storage_techs))
5773    = storage_unitsBuild.l(nodesModel,years,storage_techs,vintage);
5774  storage_unitsDecom.fx(nodesModel,years,storage_techs,vintage)
5775    $(storage_usedTech(nodesModel,years,storage_techs,vintage)
5776      and storage_unitBoundsFixed(nodesModel,years,storage_techs))
5777    = storage_unitsDecom.l(nodesModel,years,storage_techs,vintage);
5778  storage_unitsTotal.fx(nodesModel,years,storage_techs,vintage)
5779    $(storage_usedTech(nodesModel,years,storage_techs,vintage)
5780      and storage_unitBoundsFixed(nodesModel,years,storage_techs))
5781    = storage_unitsTotal.l(nodesModel,years,storage_techs,vintage);
5782   
5783  storage_unitsTotal_MIP.up(nodesModel,years,storage_techs,vintage)
5784      $(storage_usedTech(nodesModel,years,storage_techs,vintage)
5785        and storage_techParam(storage_techs,vintage,"mipUnits") = 1)
5786      = storage_reservoirParam(nodesModel,years,storage_techs,"unitsUpperLimit");
5787   
5788  * Add parameter for fixing capacities during myopic runs
5789  parameter storage_unitsDelta(nodesModel,years,storage_techs);
5790   
5791   
5792  * ==== declaration of equations ====
5793   
5794  equations
5795    Eq_storage_unitsBalance(nodesModel,years,storage_techs,vintage
5796      ) "Ensures the units balance over the planning period."
5797    Eq_storage_unitsFixedDecom(nodesModel,years,storage_techs,vintage
5798      ) "Restricts the fixed decommissioning of units over the planning period."
5799    Eq_storage_unitsFreeDecom(nodesModel,years,storage_techs,vintage
5800      ) "Restricts the free decommissioning of units over the planning period."
5801    Eq_storage_unitsUpperLimit(nodesModel,years,storage_techs
5802      ) "Upper bound for the total number of units."
5803    Eq_storage_unitsLowerLimit(nodesModel,years,storage_techs
5804      ) "Lower bound for the total number of units."
5805    Eq_storage_unitsTotalMIP(nodesModel,years,storage_techs,vintage
5806      ) "Fixes the total number of units to the corresponding integer variable."
5807   
5808    Eq_storage_levelUpperLimit(timeModel,nodesModel,years,storage_techs,vintage,commodity
5809      ) "Upper bound for the total number of units."
5810    Eq_storage_levelUpperLimit_degradation(timeModel,nodesModel,years,storage_techs,vintage,commodity
5811      ) "Upper bound for the total number of units if the storage technology accounts for degradation."
5812    Eq_storage_levelLowerLimit(timeModel,nodesModel,years,storage_techs,vintage,commodity
5813      ) "Lower bound for the total number of units."
5814    Eq_storage_losses(timeModel,nodesModel,years,storage_techs,vintage,commodity
5815      ) "Stored commodities lost due to self discharge."
5816    Eq_storage_unitsBalanceStates(nodesModel,years,storage_techs,vintage
5817      ) "Currently available units must have been built at some point in time and have some state of degradation."
5818    Eq_storage_unitsUpperLimitPerState(nodesModel,years,yearsCom,storage_techs,vintage
5819      ) "There cannot be more units from a certain year than the amount built in that year."
5820    Eq_storage_unitsStatesNoRecovery(nodesModel,years,yearsCom,storage_techs,vintage,degradation_states
5821      ) "There is no recovery."
5822    Eq_storage_cRateLimit(timeModel,nodesModel,years,storage_techs,vintage,commodity
5823      ) "Limit charging rate based on unit capacity."
5824    Eq_storage_eRateLimit(timeModel,nodesModel,years,storage_techs,vintage,commodity
5825      ) "Limit discharging rate based on unit capacity."
5826    Eq_storage_charge(timeModel,nodesModel,years,storage_techs,vintage,commodity
5827      ) "Positive change in state of charge is influx."
5828    Eq_storage_discharge(timeModel,nodesModel,years,storage_techs,vintage,commodity
5829      ) "Negative change in state of charge is outflux."
5830   
5831    Eq_storage_levelStateSum(timeModel,nodesModel,years,storage_techs,vintage,commodity
5832      ) "Sum of degradation class storage levels is the global level."
5833    Eq_storage_levelUpperLimitPerAge(timeModel,nodesModel,years,yearsCom,storage_techs,vintage,commodity
5834      ) "Upper bound for units of a certain state."
5835    Eq_storage_chargingPerAge(timeModel,nodesModel,years,yearsCom,storage_techs,vintage,commodity
5836      ) "Positive change in state of charge is influx for each degradation class."
5837    Eq_storage_chargeBasedDegradationDistribution(nodesModel,years,yearsCom,storage_techs,vintage,commodity
5838      ) "Determine degradation states of storage units."
5839    Eq_storage_unitsDecomStateSum(nodesModel,years,storage_techs,vintage
5840      ) "All decomminsioned units must have a degradation state."
5841    Eq_storage_unitsDegradation(nodesModel,years,yearsCom,storage_techs,vintage,degradation_states
5842      ) "Only allow one range of degradation states per year and age group."
5843    Eq_storage_unitsDegradation_onlyOneRange(nodesModel,years,yearsCom,storage_techs,vintage
5844      ) "Limit usable degradation states to one range, i.e., two neighboring states."
5845   
5846    Eq_storage_unitsSoC_sum(timeModel,nodesModel,years,storage_techs,vintage
5847      ) "Every unit has a state of charge."
5848    Eq_storage_levelSoC(timeModel,nodesModel,years,storage_techs,vintage,commodity
5849      ) "Every unit has a state of charge."
5850    Eq_storage_unitsSoC(timeModel,nodesModel,years,storage_techs,vintage,soc_statesIn
5851      ) "Number of units in particular SoC."
5852    Eq_storage_unitsSoC_onlyOneRange(timeModel,nodesModel,years,storage_techs,vintage
5853      ) "Limit usable SoC states to one range, i.e., two neighboring states."
5854   
5855    Eq_storage_cRateLimit_SoC(timeModel,nodesModel,years,storage_techs,vintage,commodity
5856      ) "Limit charging rate based on unit capacity."
5857    Eq_storage_eRateLimit_SoC(timeModel,nodesModel,years,storage_techs,vintage,commodity
5858      ) "Limit discharging rate based on unit capacity."
5859    ;
5860   
5861  * ==== equation definition ====
5862  * // ## Equations
5863  * // ### Storage Units Balance
5864  * // Ensures that the total units are consistent with the built and decommissioned units.
5865  * // {Eq_storage_unitsBalance}
5866  Eq_storage_unitsBalance(nodesModelSel,yearsSel,storage_techs,vintage)
5867      $((storage_usedTech(nodesModelSel,yearsSel,storage_techs,vintage)
5868            or sum(years$sameas(years,yearsSel), storage_usedTech(nodesModelSel,years-1,storage_techs,vintage)))
5869          and not storage_unitBoundsFixed(nodesModelSel,yearsSel,storage_techs))
5870      ..
5871      storage_unitsTotal(nodesModelSel,yearsSel,storage_techs,vintage)
5872      =e=
5873          sum(yearsToCalc$(ord(yearsToCalc) = 1 and sameas(yearsToCalc, yearsSel)),
5874        sum(years$sameas(years, yearsToCalc),
5875          storage_unitsTotal(nodesModelSel,years-1,storage_techs,vintage)
5876            $storage_usedTech(nodesModelSel,years-1,storage_techs,vintage)))
5877      + sum((yearsToCalc)$(ord(yearsToCalc) > 1 and sameas(yearsToCalc, yearsSel)),
5878        storage_unitsTotal(nodesModelSel,yearsToCalc-1,storage_techs,vintage)
5879          $storage_usedTech(nodesModelSel,yearsToCalc-1,storage_techs,vintage))
5880      + storage_unitsBuild(nodesModelSel,yearsSel,storage_techs,vintage)
5881          $storage_availTech(nodesModelSel,yearsSel,storage_techs,vintage)
5882      - storage_unitsDecom(nodesModelSel,yearsSel,storage_techs,vintage)
5883          $storage_usedTech(nodesModelSel,yearsSel,storage_techs,vintage);
5884   
5885  * // ### Storage Units Fixed Decommission
5886  * // Restricts the fixed decommissioning of storage units over the planning period.
5887  * // {Eq_storage_unitsFixedDecom}
5888  Eq_storage_unitsFixedDecom(nodesModelSel,yearsSel,storage_techs,vintage)
5889      $(storage_decomTech(nodesModelSel,yearsSel,storage_techs,vintage)
5890          and not storage_techParam(storage_techs,vintage,"freeDecom") = 1
5891          and not storage_unitBoundsFixed(nodesModelSel,yearsSel,storage_techs))
5892      ..
5893      storage_unitsDecom(nodesModelSel,yearsSel,storage_techs,vintage)
5894      =e=
5895      sum(years$
5896          (storage_availTech(nodesModelSel,years,storage_techs,vintage)
5897            and years.val > sum(yearsToCalc$sameas(yearsToCalc+1, yearsSel), yearsToCalc.val) - storage_techParam(storage_techs,vintage,'lifeTime')
5898            and years.val <= yearsSel.val - storage_techParam(storage_techs,vintage,'lifeTime')),
5899        storage_unitsBuild(nodesModelSel,years,storage_techs,vintage));
5900   
5901  * // ### Storage Units Free Decomission
5902  * // Restricts the free decommissioning of storage units over the planning period.
5903  * // {Eq_storage_unitsFreeDecom}
5904  Eq_storage_unitsFreeDecom(nodesModelSel,yearsSel,storage_techs,vintage)
5905      $((storage_decomTech(nodesModelSel,yearsSel,storage_techs,vintage)
5906          or storage_usedTech(nodesModelSel,yearsSel,storage_techs,vintage))
5907          and storage_techParam(storage_techs,vintage,"freeDecom") = 1)
5908      ..
5909      sum(years$
5910            ((storage_decomTech(nodesModelSel,years,storage_techs,vintage)
5911              or storage_usedTech(nodesModelSel,years,storage_techs,vintage))
5912              and years.val < sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)),
5913          storage_unitsDecom(nodesModelSel,years,storage_techs,vintage))
5914      + sum(yearsToCalc$
5915            ((storage_decomTech(nodesModelSel,yearsToCalc,storage_techs,vintage)
5916              or storage_usedTech(nodesModelSel,yearsToCalc,storage_techs,vintage))
5917              and yearsToCalc.val >= sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
5918              and yearsToCalc.val <= yearsSel.val),
5919          storage_unitsDecom(nodesModelSel,yearsToCalc,storage_techs,vintage))
5920      =g=
5921      sum(years$
5922            (storage_availTech(nodesModelSel,years,storage_techs,vintage)
5923              and years.val < sum(yearsToCalc$(ord(yearsToCalc)=1), yearsToCalc.val) - storage_techParam(storage_techs,vintage,'lifeTime')),
5924          storage_unitsBuild(nodesModelSel,years,storage_techs,vintage))
5925      + sum(yearsToCalc$
5926            (storage_availTech(nodesModelSel,yearsToCalc,storage_techs,vintage)
5927              and yearsToCalc.val >= sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
5928              and yearsToCalc.val <= yearsSel.val - storage_techParam(storage_techs,vintage,'lifeTime')),
5929          storage_unitsBuild(nodesModelSel,yearsToCalc,storage_techs,vintage));
5930   
5931  * // ### Storage Units Lower Limit
5932  * // Lower bound for the total number of storage units.
5933  * // {Eq_storage_unitsLowerLimit}
5934  Eq_storage_unitsLowerLimit(nodesModelSel,yearsSel,storage_techs)
5935      $(storage_reservoirParam(nodesModelSel,yearsSel,storage_techs,'unitsLowerLimit') > 0 )
5936      ..
5937      sum(vintage$storage_usedTech(nodesModelSel,yearsSel,storage_techs,vintage),
5938          storage_unitsTotal(nodesModelSel,yearsSel,storage_techs,vintage))
5939      =g=
5940      storage_reservoirParam(nodesModelSel,yearsSel,storage_techs,"unitsLowerLimit");
5941   
5942  * // ### Storage Units Upper Limit
5943  * // Upper bound for the total number of storage units.
5944  * // {Eq_storage_unitsUpperLimit}
5945  Eq_storage_unitsUpperLimit(nodesModelSel,yearsSel,storage_techs)
5946      $(storage_reservoirParam(nodesModelSel,yearsSel,storage_techs,'unitsUpperLimit') >= 0
5947          and storage_reservoirParam(nodesModelSel,yearsSel,storage_techs,'unitsUpperLimit') < +inf )
5948      ..
5949      sum(vintage$storage_usedTech(nodesModelSel,yearsSel,storage_techs,vintage),
5950          storage_unitsTotal(nodesModelSel,yearsSel,storage_techs,vintage))
5951      =l=
5952      storage_reservoirParam(nodesModelSel,yearsSel,storage_techs,"unitsUpperLimit");
5953   
5954  * // ### Storage Units Total MIP
5955  * // Fixes the total number of storage units to the corresponding integer variable.
5956  * // {Eq_storage_unitsTotalMIP}
5957  Eq_storage_unitsTotalMIP(nodesModelSel,yearsSel,storage_techs,vintage)
5958      $( storage_usedTech(nodesModelSel,yearsSel,storage_techs,vintage)
5959          and storage_techParam(storage_techs,vintage,"mipUnits") = 1 )
5960      ..
5961      storage_unitsTotal(nodesModelSel,yearsSel,storage_techs,vintage)
5962      =e=
5963      storage_unitsTotal_MIP(nodesModelSel,yearsSel,storage_techs,vintage);
5964   
5965  * // ### Storage Level Lower Limit
5966  * // Lower limit on the storage level.
5967  * // {Eq_storage_levelLowerLimit}
5968  Eq_storage_levelLowerLimit(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
5969      $(storage_usedTechCom(nodesModelSel,yearsSel,storage_techs,vintage,commodity)
5970          and storage_levelProfile(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,"lower") > 0)
5971      ..
5972      storage_level(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
5973      =g=
5974      storage_levelProfile(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,"lower")
5975      * storage_sizeParam(storage_techs,vintage,commodity,"size")
5976      * storage_unitsTotal(nodesModelSel,yearsSel,storage_techs,vintage);
5977   
5978  * // ### Storage Level Upper Limit
5979  * // Upper limit on the storage level.
5980  * // {Eq_storage_levelUpperLimit}
5981  Eq_storage_levelUpperLimit(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
5982      $(storage_usedTechCom(nodesModelSel,yearsSel,storage_techs,vintage,commodity)
5983          and not storage_hasDegradation(storage_techs,vintage)
5984          and storage_levelProfile(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,"upper") >= 0)
5985      ..
5986      storage_level(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
5987      =l=
5988      storage_levelProfile(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,"upper")
5989      * storage_sizeParam(storage_techs,vintage,commodity,"size")
5990      * storage_unitsTotal(nodesModelSel,yearsSel,storage_techs,vintage);
5991   
5992  * // ### Storage Level Upper Limit (degradation)
5993  * // Upper limit on the storage level if the storage technology accounts for degradation.
5994  * // {Eq_storage_levelUpperLimit_degradation}
5995  Eq_storage_levelUpperLimit_degradation(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
5996      $(storage_usedTechCom(nodesModelSel,yearsSel,storage_techs,vintage,commodity)
5997          and storage_hasDegradation(storage_techs,vintage)
5998          and storage_levelProfile(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,"upper") >= 0)
5999      ..
6000      storage_level(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
6001      =l=
6002      storage_levelProfile(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,"upper")
6003      * storage_sizeParam(storage_techs,vintage,commodity,"size")
6004      * sum((degradation_states,yearsCom)$storage_usedDegradation(storage_techs,vintage,degradation_states),
6005              (storage_degradationParam(storage_techs,vintage,degradation_states,"remainingCapacity")
6006                - (yearsSel.val - yearsCom.val) * storage_techParam(storage_techs,vintage,"annualDegradation"))
6007                * storage_unitsStateTracker(nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,degradation_states));
6008   
6009  * // ### Storage Unit States Sum (degradation)
6010  * // The number of units in all degradation state must match the total unit number.
6011  * // {Eq_storage_unitsBalanceStates}
6012  Eq_storage_unitsBalanceStates(nodesModelSel,yearsSel,storage_techs,vintage)
6013      $(storage_usedTech(nodesModelSel,yearsSel,storage_techs,vintage)
6014        and storage_hasDegradation(storage_techs,vintage))
6015      ..
6016      storage_unitsTotal(nodesModelSel,yearsSel,storage_techs,vintage)
6017      =e=
6018      sum((yearsCom,degradation_states)$storage_usedDegradation(storage_techs,vintage,degradation_states),
6019            storage_unitsStateTracker(nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,degradation_states));
6020   
6021  * // ### Storage Unit States Upper Limit(degradation)
6022  * // The states of all commissioned units in one year (unitsBuilt) must either still be tracked or have been decommissioned.
6023  * // {Eq_storage_unitsUpperLimitPerState}
6024  Eq_storage_unitsUpperLimitPerState(nodesModelSel,yearsSel,yearsCom,storage_techs,vintage)
6025      $(storage_usedTech(nodesModelSel,yearsSel,storage_techs,vintage)
6026          and storage_hasDegradation(storage_techs,vintage))
6027      ..
6028      sum(degradation_states$storage_usedDegradation(storage_techs,vintage,degradation_states),
6029            storage_unitsStateTracker(nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,degradation_states)
6030            + sum(years$(years.val <= yearsSel.val),
6031                  storage_unitsStateTrackerDecom(nodesModelSel,years,yearsCom,storage_techs,vintage,degradation_states)))
6032      =e=
6033      storage_unitsBuild(nodesModelSel,yearsCom,storage_techs,vintage)$(yearsCom.val <= yearsSel.val);
6034   
6035  * // ### Storage Unit States Progression (degradation)
6036  * // Unit recovery by reassigning the storage cycles to other units is disabled. Therefore, the number of units in a particular degradation state can only increase if the number in a less degraded state is decreased by at least the same amount.
6037  * // {Eq_storage_unitsStatesNoRecovery}
6038  alias(degradation_states, dc_states);
6039  Eq_storage_unitsStatesNoRecovery(nodesModelSel,yearsSel(yearsToCalc),yearsCom,storage_techs,vintage,degradation_states)
6040      $(storage_usedTech(nodesModelSel,yearsSel,storage_techs,vintage)
6041        and yearsToCalc.val > yearsCom.val
6042        and storage_usedDegradation(storage_techs,vintage,degradation_states))
6043      ..
6044      sum(dc_states$(storage_usedDegradation(storage_techs,vintage,dc_states)
6045                and storage_degradationParam(storage_techs,vintage,dc_states,"maxFullCycles") <= storage_degradationParam(storage_techs,vintage,degradation_states,"maxFullCycles")),
6046              storage_unitsStateTracker(nodesModelSel,yearsToCalc,yearsCom,storage_techs,vintage,dc_states)
6047              + sum(years$(years.val <= yearsToCalc.val), storage_unitsStateTrackerDecom(nodesModelSel,years,yearsCom,storage_techs,vintage,dc_states)))
6048      =l=
6049      sum(dc_states$(storage_usedDegradation(storage_techs,vintage,dc_states)
6050                      and storage_degradationParam(storage_techs,vintage,dc_states,"maxFullCycles") <= storage_degradationParam(storage_techs,vintage,degradation_states,"maxFullCycles")),
6051              storage_unitsStateTracker(nodesModelSel,yearsToCalc-1,yearsCom,storage_techs,vintage,dc_states)
6052              + sum(years$(years.val < yearsToCalc.val), storage_unitsStateTrackerDecom(nodesModelSel,years,yearsCom,storage_techs,vintage,dc_states)));
6053   
6054  * // ### Storage Losses
6055  * // Accumulation of storage losses.
6056  * // {Eq_storage_losses}
6057  Eq_storage_losses(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,storage_techs,vintage,commodity)
6058      $storage_usedTechCom(nodesModelSel,yearsSel,storage_techs,vintage,commodity)
6059      ..
6060      storage_losses(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
6061      =e=
6062      - storage_level(timeModelToCalc--1,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
6063        * storage_sizeParam(storage_techs,vintage,commodity,"selfdischarge")
6064      + storage_sizeParam(storage_techs,vintage,commodity,"selfdischargeAbs")
6065      + (storage_techParam(storage_techs,vintage,"chargingLoss")
6066          /(1 - storage_techParam(storage_techs,vintage,"chargingLoss")))
6067        * storage_charge(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
6068          $(storage_techParam(storage_techs,vintage,"chargingLoss") > 0)
6069      + storage_techParam(storage_techs,vintage,"dischargingLoss")
6070        * storage_discharge(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
6071          $(storage_techParam(storage_techs,vintage,"dischargingLoss") > 0)
6072      - storage_sizeParam(storage_techs,vintage,commodity,"size")
6073        * sum(soc_states$(storage_usedTechSoCState(storage_techs,vintage,soc_states)
6074                          and storage_validSoCRange(storage_techs,vintage)),
6075              storage_unitsSoC(timeModelToCalc--1,nodesModelSel,yearsSel,storage_techs,vintage,soc_states)
6076              * storage_SoCParam(storage_techs,vintage,soc_states,"SoC")
6077              * storage_SoCParam(storage_techs,vintage,soc_states,"selfdischarge"));
6078   
6079  * // ### C-Rate Limit
6080  * // The increase in storage level per time step, i.e., the charging rate, is limited relative to the storage capacity.
6081  * // {Eq_storage_cRateLimit}
6082  Eq_storage_cRateLimit(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,storage_techs,vintage,commodity)
6083      $(storage_usedTechCom(nodesModelSel,yearsSel,storage_techs,vintage,commodity)
6084        and storage_techParam(storage_techs,vintage,"maxCRate") > 0)
6085      ..
6086      storage_level(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
6087      - storage_level(timeModelToCalc--1,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
6088      =l=
6089      storage_techParam(storage_techs,vintage,"maxCRate")
6090      * storage_sizeParam(storage_techs,vintage,commodity,"size")
6091      * storage_unitsTotal(nodesModelSel,yearsSel,storage_techs,vintage);
6092   
6093  * // ### E-Rate Limit
6094  * // The decrease in storage level per time step, i.e., the discharging rate, is limited relative to the storage capacity.
6095  * // {Eq_storage_eRateLimit}
6096  Eq_storage_eRateLimit(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,storage_techs,vintage,commodity)
6097      $(storage_usedTechCom(nodesModelSel,yearsSel,storage_techs,vintage,commodity)
6098        and storage_techParam(storage_techs,vintage,"maxERate") > 0)
6099      ..
6100      storage_level(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
6101      - storage_level(timeModelToCalc--1,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
6102      =g=
6103      - storage_techParam(storage_techs,vintage,"maxERate")
6104      * storage_sizeParam(storage_techs,vintage,commodity,"size")
6105      * storage_unitsTotal(nodesModelSel,yearsSel,storage_techs,vintage);
6106   
6107  * // ### Storage Charging
6108  * // Increases in storage levels are accounted as charging amounts.
6109  * // {Eq_storage_charge}
6110  Eq_storage_charge(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,storage_techs,vintage,commodity)
6111      $(storage_usedTechCom(nodesModelSel,yearsSel,storage_techs,vintage,commodity)
6112        and storage_techParam(storage_techs,vintage,"chargingLoss") > 0)
6113      ..
6114      storage_charge(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
6115      =g=
6116      storage_level(timeModelToCalc,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
6117      - storage_level(timeModelToCalc--1,nodesModelSel,yearsSel,storage_techs,vintage,commodity);
6118   
6119  * // ### Storage Discharging
6120  * // Decreases in storage levels are accounted as discharging amounts.
6121  * // {Eq_storage_discharge}
6122  Eq_storage_discharge(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,storage_techs,vintage,commodity)
6123      $(storage_usedTechCom(nodesModelSel,yearsSel,storage_techs,vintage,commodity)
6124        and storage_techParam(storage_techs,vintage,"dischargingLoss") > 0)
6125      ..
6126      storage_discharge(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
6127      =g=
6128      storage_level(timeModelToCalc--1,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
6129      - storage_level(timeModelToCalc,nodesModelSel,yearsSel,storage_techs,vintage,commodity);
6130   
6131  * // ### Storage Level Sum (degradation)
6132  * // The storage level is accounted individually by commissioning year in the case of degradation in order to prohibit the model to assign pre-existing storage cycles to newly built storage reservoirs and thereby avoiding degradation. All those storage levels represent the total storage level.
6133  * // {Eq_storage_levelStateSum}
6134  Eq_storage_levelStateSum(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
6135      $(storage_usedTechCom(nodesModelSel,yearsSel,storage_techs,vintage,commodity)
6136        and storage_techParam(storage_techs,vintage,"usageDegradation"))
6137      ..
6138      storage_level(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
6139      =e=
6140      sum(yearsCom, storage_levelPerAge(timeModelSel,nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,commodity));
6141   
6142  * // ### Storage Level Upper Limit per Age Group (degradation)
6143  * // Upper limit on the storage level per commissioning year if the storage technology accounts for degradation.
6144  * // {Eq_storage_levelUpperLimitPerAge}
6145  Eq_storage_levelUpperLimitPerAge(timeModelSel,nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,commodity)
6146      $(storage_usedTechCom(nodesModelSel,yearsSel,storage_techs,vintage,commodity)
6147        and storage_techParam(storage_techs,vintage,"usageDegradation"))
6148      ..
6149      storage_levelPerAge(timeModelSel,nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,commodity)
6150      =l=
6151      storage_techParam(storage_techs,vintage,"levelUpperLimit")
6152      * storage_sizeParam(storage_techs,vintage,commodity,"size")
6153      * sum(degradation_states,
6154              (storage_degradationParam(storage_techs,vintage,degradation_states,"remainingCapacity")
6155                - (yearsSel.val - yearsCom.val) * storage_techParam(storage_techs,vintage,"annualDegradation"))
6156                * storage_unitsStateTracker(nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,degradation_states));
6157   
6158  * // ### Storage Cycle Distribution to Degradation States per Commissioning Year (degradation)
6159  * // The charging amounts are converted to equivalent full cycles which then must be represented by an adequate distribution of degradation states.
6160  * // {Eq_storage_chargeBasedDegradationDistribution}
6161  alias(years, prev_years);
6162  Eq_storage_chargeBasedDegradationDistribution(nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,commodity)
6163      $(storage_usedTechCom(nodesModelSel,yearsSel,storage_techs,vintage,commodity)
6164        and storage_techParam(storage_techs,vintage,"usageDegradation"))
6165      ..
6166      sum(prev_years$(prev_years.val <= yearsSel.val), representedYears(prev_years)
6167          * sum(timeModel, storage_chargePerAge(timeModel,nodesModelSel,prev_years,yearsCom,storage_techs,vintage,commodity)))
6168      =l=
6169      storage_sizeParam(storage_techs,vintage,commodity,"size")
6170      * sum(dc_states$storage_usedDegradation(storage_techs,vintage,dc_states),
6171          storage_degradationParam(storage_techs,vintage,dc_states,"maxFullCycles")
6172          * (storage_unitsStateTracker(nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,dc_states)
6173             + sum(prev_years$(prev_years.val <= yearsSel.val), storage_unitsStateTrackerDecom(nodesModelSel,prev_years,yearsCom,storage_techs,vintage,dc_states))));
6174   
6175  * // ### Storage Charging per Commissioning Year (degradation)
6176  * // Increases in storage levels are accounted as charging amounts.
6177  * // {Eq_storage_chargingPerAge}
6178  Eq_storage_chargingPerAge(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,commodity)
6179      $(storage_usedTechCom(nodesModelSel,yearsSel,storage_techs,vintage,commodity)
6180        and storage_techParam(storage_techs,vintage,"usageDegradation"))
6181      ..
6182      storage_chargePerAge(timeModelSel,nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,commodity)
6183      =g=
6184      storage_levelPerAge(timeModelToCalc,nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,commodity)
6185      - storage_levelPerAge(timeModelToCalc--1,nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,commodity);
6186   
6187  * // ### Storage Unit Decommissioning States Sum (degradation)
6188  * // The number of decommissioned units in all degradation state must match the total decommissioning unit number.
6189  * // {Eq_storage_unitsDecomStateSum}
6190  Eq_storage_unitsDecomStateSum(nodesModelSel,yearsSel,storage_techs,vintage)
6191      $(storage_techParam(storage_techs,vintage,"usageDegradation"))
6192      ..
6193      storage_unitsDecom(nodesModelSel,yearsSel,storage_techs,vintage)
6194      =e=
6195      sum((yearsCom,degradation_states)$storage_usedDegradation(storage_techs,vintage,degradation_states),
6196          storage_unitsStateTrackerDecom(nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,degradation_states));
6197   
6198  * // ### Storage Unit Sequential Degradation (degradation)
6199  * // Only active degradation ranges, i.e., two neighboring degradation states, can be used.
6200  * // {Eq_storage_unitsDegradation}
6201  alias(degradation_states, degradation_states_a, degradation_states_b);
6202  Eq_storage_unitsDegradation(nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,degradation_states)
6203      $(storage_techParam(storage_techs,vintage,"usageDegradation")
6204        and storage_techParam(storage_techs,vintage,"sequentialDegradationStates"))
6205      ..
6206      sum(degradation_states_a$((storage_degradationParam(storage_techs,vintage,degradation_states_a,"maxFullCycles") = storage_degradationParam(storage_techs,vintage,degradation_states,"maxFullCycles")
6207                        or storage_degradationParam(storage_techs,vintage,degradation_states_a,"maxFullCycles")
6208                                         = smax(degradation_states_b$(storage_degradationParam(storage_techs,vintage,degradation_states_b,"maxFullCycles") < storage_degradationParam(storage_techs,vintage,degradation_states,"maxFullCycles")
6209                                                              and storage_usedDegradation(storage_techs,vintage,degradation_states_b)),
6210                                                              storage_degradationParam(storage_techs,vintage,degradation_states_b,"maxFullCycles")))
6211                        and storage_usedDegradation(storage_techs,vintage,degradation_states_a)),
6212          storage_unitsStateTracker_activeRange(nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,degradation_states_a))
6213      * storage_bigM(storage_techs,vintage)
6214      =g=
6215      storage_unitsStateTracker(nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,degradation_states);
6216   
6217  * // ### Storage Unit Sequential Degradation Range (degradation)
6218  * // Only one degradation range can be active.
6219  * // {Eq_storage_unitsDegradation_onlyOneRange}
6220  Eq_storage_unitsDegradation_onlyOneRange(nodesModelSel,yearsSel,yearsCom,storage_techs,vintage)
6221      $(storage_techParam(storage_techs,vintage,"usageDegradation") and storage_techParam(storage_techs,vintage,"sequentialDegradationStates"))
6222      ..
6223      sum(degradation_states$storage_usedDegradation(storage_techs,vintage,degradation_states),
6224            storage_unitsStateTracker_activeRange(nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,degradation_states))
6225      =e= 1;
6226   
6227  * // ### Storage Unit Sequential State of Charge (SoC)
6228  * // Only active state of charge ranges, i.e., two neighboring states of charge, can be used.
6229  * // {Eq_storage_unitsSoC}
6230  alias(soc_states, soc_states_a, soc_states_b);
6231  Eq_storage_unitsSoC(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,storage_techs,vintage,soc_states)
6232      $(storage_validSoCRange(storage_techs,vintage) and storage_techParam(storage_techs,vintage,"sequentialSoC"))
6233      ..
6234      sum(soc_states_a$((storage_SoCParam(storage_techs,vintage,soc_states_a,"SoC") = storage_SoCParam(storage_techs,vintage,soc_states,"SoC")
6235                        or storage_SoCParam(storage_techs,vintage,soc_states_a,"SoC")
6236                                         = smax(soc_states_b$(storage_SoCParam(storage_techs,vintage,soc_states_b,"SoC") < storage_SoCParam(storage_techs,vintage,soc_states,"SoC")
6237                                                              and storage_usedTechSoCState(storage_techs,vintage,soc_states_b)),
6238                                                              storage_SoCParam(storage_techs,vintage,soc_states_b,"SoC")))
6239                        and storage_usedTechSoCState(storage_techs,vintage,soc_states_a)),
6240          storage_unitsSoC_activeRange(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,soc_states_a))
6241      * storage_bigM(storage_techs,vintage)
6242      =g=
6243      storage_unitsSoC(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,soc_states);
6244   
6245  * // ### Storage Unit Sequential State of Charge Range (SoC)
6246  * // Only one state of charge range can be active.
6247  * // {Eq_storage_unitsSoC_onlyOneRange}
6248  Eq_storage_unitsSoC_onlyOneRange(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,storage_techs,vintage)
6249      $(storage_validSoCRange(storage_techs,vintage) and storage_techParam(storage_techs,vintage,"sequentialSoC"))
6250      ..
6251      sum(soc_states$storage_usedTechSoCState(storage_techs,vintage,soc_states),
6252            storage_unitsSoC_activeRange(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,soc_states)) =e= 1;
6253   
6254  * // ### Storage Unit State of Charge Sum (SoC)
6255  * // Each storage unit must have one state of charge.
6256  * // {Eq_storage_unitsSoC_sum}
6257  Eq_storage_unitsSoC_sum(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,storage_techs,vintage)
6258      $storage_validSoCRange(storage_techs,vintage)
6259      ..
6260      storage_unitsTotal(nodesModelSel,yearsSel,storage_techs,vintage)
6261      =e=
6262      sum(soc_states$storage_usedTechSoCState(storage_techs,vintage,soc_states),
6263            storage_unitsSoC(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,soc_states));
6264   
6265  * // ### Storage Level State of Charge Sum (SoC)
6266  * // The total storage level must be represented by units in their specific states of charge.
6267  * // {Eq_storage_levelSoC}
6268  Eq_storage_levelSoC(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,storage_techs,vintage,commodity)
6269      $(storage_validSoCRange(storage_techs,vintage) and storage_usedTechCom(nodesModelSel,yearsSel,storage_techs,vintage,commodity))
6270      ..
6271      storage_level(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
6272      =e=
6273      storage_sizeParam(storage_techs,vintage,commodity,"size")
6274      * sum(soc_states$storage_usedTechSoCState(storage_techs,vintage,soc_states),
6275              storage_unitsSoC(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,soc_states)
6276              * storage_SoCParam(storage_techs,vintage,soc_states,"SoC"));
6277   
6278  * // ### C-Rate Limit (SoC)
6279  * // The increase in storage level per time step, i.e., the charging rate, is limited relative to the storage capacity. The coefficients can vary between states of charge.
6280  * // {Eq_storage_cRateLimit_SoC}
6281  Eq_storage_cRateLimit_SoC(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,storage_techs,vintage,commodity)
6282      $(storage_usedTechCom(nodesModelSel,yearsSel,storage_techs,vintage,commodity)
6283        and storage_validSoCRange(storage_techs,vintage)
6284        and sum(soc_states, storage_SoCParam(storage_techs,vintage,soc_states,"cRate")) < inf)
6285      ..
6286      storage_level(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
6287      - storage_level(timeModelToCalc--1,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
6288      =l=
6289      storage_sizeParam(storage_techs,vintage,commodity,"size")
6290      * sum(soc_states$storage_usedTechSoCState(storage_techs,vintage,soc_states),
6291                      storage_SoCParam(storage_techs,vintage,soc_states,"cRate")
6292                      * storage_unitsSoC(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,soc_states));
6293   
6294  * // ### E-Rate Limit (SoC)
6295  * // The decrease in storage level per time step, i.e., the discharging rate, is limited relative to the storage capacity. The coefficients can vary between states of charge.
6296  * // {Eq_storage_cRateLimit_SoC}
6297  Eq_storage_eRateLimit_SoC(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,storage_techs,vintage,commodity)
6298      $(storage_usedTechCom(nodesModelSel,yearsSel,storage_techs,vintage,commodity)
6299        and storage_validSoCRange(storage_techs,vintage)
6300        and sum(soc_states, storage_SoCParam(storage_techs,vintage,soc_states,"eRate")) < inf)
6301      ..
6302      storage_level(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
6303      - storage_level(timeModelToCalc--1,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
6304      =g=
6305      - storage_sizeParam(storage_techs,vintage,commodity,"size")
6306      * sum(soc_states$storage_usedTechSoCState(storage_techs,vintage,soc_states),
6307                      storage_SoCParam(storage_techs,vintage,soc_states,"eRate")
6308                      * storage_unitsSoC(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,soc_states));
6309   
6310   
6311  * ==== model definition ====
6312   
6313  Model M_storage
6314  /
6315    Eq_storage_unitsBalance
6316    Eq_storage_unitsFixedDecom
6317    Eq_storage_unitsFreeDecom
6318    Eq_storage_unitsLowerLimit
6319    Eq_storage_unitsUpperLimit
6320    Eq_storage_levelUpperLimit_degradation
6321    Eq_storage_unitsTotalMIP
6322    Eq_storage_levelLowerLimit
6323    Eq_storage_levelUpperLimit
6325    Eq_storage_losses
6327    Eq_storage_unitsBalanceStates
6328    Eq_storage_unitsUpperLimitPerState
6329    Eq_storage_unitsStatesNoRecovery
6330    Eq_storage_cRateLimit
6331    Eq_storage_eRateLimit
6332    Eq_storage_charge
6333    Eq_storage_discharge
6334    Eq_storage_levelStateSum
6335    Eq_storage_levelUpperLimitPerAge
6336    Eq_storage_chargeBasedDegradationDistribution
6337    Eq_storage_chargingPerAge
6338    Eq_storage_unitsDecomStateSum
6339    Eq_storage_unitsDegradation
6340    Eq_storage_unitsDegradation_onlyOneRange
6341   
6342    Eq_storage_unitsSoC
6343    Eq_storage_unitsSoC_sum
6344    Eq_storage_unitsSoC_onlyOneRange
6345    Eq_storage_levelSoC
6346    Eq_storage_cRateLimit_SoC
6347    Eq_storage_eRateLimit_SoC
6348  /;
INCLUDE    C:\Local\REMix\framework\remix\framework\model\source\core\transfer.gms
6350  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
6351  * SPDX-License-Identifier: BSD-3-Clause
6352   
6353  * // # core_transfer
6354  * // The equations in this file describe the commodity transfer in the model.
6355   
6356  * // ## Variables
6357  * // {special_table_transfer_variables}
6360   
6365   
6642   
6643  parameter transfer_linksParam(linksModel,years,transfer_techs,pc_transfer_linksParam);
6644  transfer_linksParam(linksModelToCalc,years,transfer_techs,pc_transfer_linksParam)
6645      = sum(linksData$links_aggregate(linksModelToCalc,linksData), transfer_linksParamIn(linksData,years,transfer_techs,pc_transfer_linksParam));
6646   
6647  * // ## Load links from gdx file
6649   
6650   
6651  set transfer_hasflowProfileIn(linksData,years,transfer_techs,pc_transfer_flowProfile);
6652  option transfer_hasflowProfileIn < transfer_flowProfileIn;
6653   
6654  * === modify transfer_flowProfileIn vector to fill with default values, in case profile is not specified ===
6655  transfer_linksParamIn(linksData,years,transfer_techs,"flowAlongLimit")
6656      $(not transfer_linksParamIn(linksData,years,transfer_techs,"limitFlows"))
6657      = 1;
6658   
6659  transfer_linksParamIn(linksData,years,transfer_techs,"flowAgainstLimit")
6660      $(not transfer_linksParamIn(linksData,years,transfer_techs,"limitFlows"))
6661      = 1;
6662   
6663  transfer_flowProfileIn(timeData,linksData,years,transfer_techs,"along")
6664      $(not transfer_hasflowProfileIn(linksData,years,transfer_techs,"along"))
6665      = transfer_linksParamIn(linksData,years,transfer_techs,"flowAlongLimit");
6666   
6667  transfer_flowProfileIn(timeData,linksData,years,transfer_techs,"against")
6668      $(not transfer_hasflowProfileIn(linksData,years,transfer_techs,"against"))
6669      = transfer_linksParamIn(linksData,years,transfer_techs,"flowAgainstLimit");
6670   
6671  * aggregate time dimension
6672  parameter transfer_flowProfileIn_aggTime(timeModel,linksData,yearsToCalc,transfer_techs,pc_transfer_flowProfile);
6673  transfer_flowProfileIn_aggTime(timeModelToCalc,linksData,yearsToCalc,transfer_techs,pc_transfer_flowProfile)
6674      $transfer_hasflowProfileIn(linksData,yearsToCalc,transfer_techs,pc_transfer_flowProfile)
6675      = sum(timeData$timeMapping(timeData,timeModelToCalc),
6676            transfer_flowProfileIn(timeData,linksData,yearsToCalc,transfer_techs,pc_transfer_flowProfile)
6677            / timeLength(timeModelToCalc));
6678  option clear = transfer_flowProfileIn;
6679   
6680  transfer_flowProfileIn_aggTime(timeModelToCalc,linksData,yearsToCalc,transfer_techs,pc_transfer_flowProfile)
6681      $(not transfer_hasflowProfileIn(linksData,yearsToCalc,transfer_techs,pc_transfer_flowProfile) and
6682        not transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"limitFlows"))
6683      = 1;
6684   
6685  transfer_flowProfileIn_aggTime(timeModelToCalc,linksData,yearsToCalc,transfer_techs,"along")
6686      $(not transfer_hasflowProfileIn(linksData,yearsToCalc,transfer_techs,"along") and
6687        transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"limitFlows"))
6688      = transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"flowAlongLimit");
6689   
6690  transfer_flowProfileIn_aggTime(timeModelToCalc,linksData,yearsToCalc,transfer_techs,"against")
6691      $(not transfer_hasflowProfileIn(linksData,yearsToCalc,transfer_techs,"against") and
6692        transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"limitFlows"))
6693      = transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"flowAgainstLimit");
6694   
6695  set transfer_finiteLinkLimit(linksModel,years,transfer_techs);
6696  transfer_finiteLinkLimit(linksModelToCalc,yearsToCalc,transfer_techs)
6697      = sum(linksData$links_aggregate(linksModelToCalc,linksData), transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"linksUpperLimit")) > 0
6698          and sum(linksData$links_aggregate(linksModelToCalc,linksData), transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"linksUpperLimit")) < inf;
6699   
6700  set transfer_infiniteLinkLimit(linksModel,years,transfer_techs);
6701  transfer_infiniteLinkLimit(linksModelToCalc,yearsToCalc,transfer_techs)
6702      = sum(linksData$links_aggregate(linksModelToCalc,linksData), transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"linksUpperLimit")) = inf;
6704   
6705  parameter transfer_lengthParam(linksModel,link_types,pc_transfer_lengthParam);
6706  transfer_lengthParam(linksModelToCalc,link_types,pc_transfer_lengthParam)
6707      = sum(linksData$links_aggregate(linksModelToCalc,linksData), transfer_lengthParamIn(linksData,link_types,pc_transfer_lengthParam))
6708          / sum(linksData$links_aggregate(linksModelToCalc,linksData), 1);
6709   
6710  parameter transfer_gridSegments(linksModel,transfer_techs,gridSegments,pc_transfer_gridSegments);
6711  transfer_gridSegments(linksModelToCalc,transfer_techs,gridSegments,pc_transfer_gridSegments)
6712      = smax(linksData$links_aggregate(linksModelToCalc,linksData), transfer_gridSegmentsIn(linksData,transfer_techs,gridSegments,pc_transfer_gridSegments));
6713   
6714  parameter transfer_dcopf_Xtech(linksModel,years,transfer_techs,vintage,gridSegments);
6715  transfer_dcopf_Xtech(linksModelToCalc,yearsToCalc,transfer_techs,vintage,gridSegments)
6716      $(transfer_gridSegments(linksModelToCalc,transfer_techs,gridSegments,"useDCopf")
6717          and transfer_linksParam(linksModelToCalc,yearsToCalc,transfer_techs,"circuits") > 0
6718          and sum(link_types, transfer_reactPerLength(transfer_techs,vintage,link_types,"reactPerLength")) > 0 )
6719      = (1 / sum(linksData
6720                  $links_aggregate(linksModelToCalc,linksData),
6721              1 / ( sum(link_types,
6722                          transfer_lengthParamIn(linksData,link_types,"length")
6723                          * transfer_reactPerLength(transfer_techs,vintage,link_types,"reactPerLength"))
6724                      / transfer_linksParam(linksModelToCalc,yearsToCalc,transfer_techs,"circuits"))));
6725   
6726  set transfer_hasflowProfile(linksModel,years,transfer_techs,pc_transfer_flowProfile);
6727  transfer_hasflowProfile(linksModelToCalc,yearsToCalc,transfer_techs,pc_transfer_flowProfile)
6728      = sum(linksData$links_aggregate(linksModelToCalc,linksData),
6729              transfer_hasflowProfileIn(linksData,yearsToCalc,transfer_techs,pc_transfer_flowProfile));
6730   
6731  * ==== parameter modifications ====
6732  transfer_linksParam(linksModelToCalc,yearsToCalc,transfer_techs,"linksLowerLimit")
6733      $sum(vintage, transfer_techParam(transfer_techs,vintage,"mipLinks"))
6734      = floor(transfer_linksParam(linksModelToCalc,yearsToCalc,transfer_techs,"linksLowerLimit"));
6735  transfer_linksParam(linksModelToCalc,yearsToCalc,transfer_techs,"linksUpperLimit")
6736      $sum(vintage, transfer_techParam(transfer_techs,vintage,"mipLinks"))
6737      = ceil(transfer_linksParam(linksModelToCalc,yearsToCalc,transfer_techs,"linksUpperLimit"));
6738   
6739   
6740  * ==== calculation of mappings ====
6741   
6742  * Technologies with a lifeTime > 0 are available
6743  set transfer_availTech(linksModel,years,transfer_techs,vintage);
6744  transfer_availTech(linksModel,years,transfer_techs,vintage)
6745      $(vintage.val = smax(vintage_a$(vintage_a.val <= years.val
6746          and transfer_techParam(transfer_techs,vintage_a,"lifeTime") > 0), vintage_a.val)) = yes;
6747   
6748  * Technologies to optimize become unavailable if they have an linksUpperLimit of 0
6749  transfer_availTech(linksModelToCalc,years,transfer_techs,vintage)
6750      $(yearsToCalc(years) and transfer_linksParam(linksModelToCalc,years,transfer_techs,"linksUpperLimit") = 0 ) = no;
6751   
6752  * Technologies already built become unavailable if they have an linksBuild of 0
6753  transfer_availTech(linksModelToCalc,years,transfer_techs,vintage)
6754      $( ( not yearsToCalc(years)) and transfer_linksParam(linksModelToCalc,years,transfer_techs,"linksBuild") = 0 ) = no;
6755   
6756  * Used technologies are available technologies over their technical lifeTime
6757  set transfer_usedTech(linksModel,years,transfer_techs,vintage);
6758  transfer_usedTech(linksModelToCalc,years,transfer_techs,vintage)
6759      $(vintage.val <= years.val
6760          and years.val < smax(years_a$transfer_availTech(linksModelToCalc,years_a,transfer_techs,vintage),
6761                                  years_a.val + transfer_techParam(transfer_techs,vintage,"lifeTime"))
6762          ) = yes;
6763   
6764  * Technologies have to be decomissioned in the interval of first avail + lifetime to last avail + lifetime
6765  set transfer_decomTech(linksModel,years,transfer_techs,vintage);
6766  transfer_decomTech(linksModel,years,transfer_techs,vintage)
6767    $(sum(years_a$transfer_usedTech(linksModel,years_a,transfer_techs,vintage), 1)
6768      and sum(yearsToCalc
6769        $(sameas(years, yearsToCalc)
6770          and yearsToCalc.val >= smin(years_a$transfer_availTech(linksModel,years_a,transfer_techs,vintage), years_a.val) + transfer_techParam(transfer_techs,vintage,"lifeTime")
6771          and yearsToCalc.val <= smax(years_a$transfer_availTech(linksModel,years_a,transfer_techs,vintage), years_a.val) + transfer_techParam(transfer_techs,vintage,"lifeTime")), 1))
6772    = yes;
6773   
6774  * Extend the decom frame to the year after the last year of usedTech
6775  transfer_decomTech(linksModel,yearsToCalc,transfer_techs,vintage)
6776    $(transfer_usedTech(linksModel,yearsToCalc-1,transfer_techs,vintage)
6777      and transfer_decomTech(linksModel,yearsToCalc-1,transfer_techs,vintage))
6778    = yes;
6779   
6780  parameter transfer_flowProfile(timeModel,linksModel,years,transfer_techs,vintage,pc_transfer_flowProfile);
6781   
6782  transfer_flowProfile(timeModelToCalc,linksModelToCalc,yearsToCalc,transfer_techs,vintage,"along")
6783      $transfer_finiteLinkLimit(linksModelToCalc,yearsToCalc,transfer_techs)
6784      = (sum(linksData$(links_aggregate(linksModelToCalc,linksData)
6785                       and transfer_incidenceData_flip(linksData) = 1),
6786              transfer_flowProfileIn_aggTime(timeModelToCalc,linksData,yearsToCalc,transfer_techs,"along")
6787              * transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"linksUpperLimit"))
6788          + sum(linksData$(links_aggregate(linksModelToCalc,linksData)
6789                          and transfer_incidenceData_flip(linksData) = -1),
6790              transfer_flowProfileIn_aggTime(timeModelToCalc,linksData,yearsToCalc,transfer_techs,"against")
6791              * transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"linksUpperLimit")))
6792      / sum(linksData$links_aggregate(linksModelToCalc,linksData),
6793              transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"linksUpperLimit"));
6794   
6795  transfer_flowProfile(timeModelToCalc,linksModelToCalc,yearsToCalc,transfer_techs,vintage,"against")
6796      $transfer_finiteLinkLimit(linksModelToCalc,yearsToCalc,transfer_techs)
6797      = (sum(linksData$(links_aggregate(linksModelToCalc,linksData)
6798                       and transfer_incidenceData_flip(linksData) = 1),
6799              transfer_flowProfileIn_aggTime(timeModelToCalc,linksData,yearsToCalc,transfer_techs,"against")
6800              * transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"linksUpperLimit"))
6801          + sum(linksData$(links_aggregate(linksModelToCalc,linksData)
6802                          and transfer_incidenceData_flip(linksData) = -1),
6803              transfer_flowProfileIn_aggTime(timeModelToCalc,linksData,yearsToCalc,transfer_techs,"along")
6804              * transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"linksUpperLimit")))
6805      / sum(linksData$links_aggregate(linksModelToCalc,linksData),
6806              transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"linksUpperLimit"));
6807   
6808  transfer_flowProfile(timeModelToCalc,linksModelToCalc,yearsToCalc,transfer_techs,vintage,"along")
6809      $transfer_infiniteLinkLimit(linksModelToCalc,yearsToCalc,transfer_techs)
6810      = (sum(linksData$(links_aggregate(linksModelToCalc,linksData)
6811                       and transfer_incidenceData_flip(linksData) = 1
6812                       and transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"linksUpperLimit") = inf ),
6813              transfer_flowProfileIn_aggTime(timeModelToCalc,linksData,yearsToCalc,transfer_techs,"along"))
6814          + sum(linksData$(links_aggregate(linksModelToCalc,linksData)
6815                          and transfer_incidenceData_flip(linksData) = -1
6816                          and transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"linksUpperLimit") = inf ),
6817              transfer_flowProfileIn_aggTime(timeModelToCalc,linksData,yearsToCalc,transfer_techs,"against")))
6818      / sum(linksData$(links_aggregate(linksModelToCalc,linksData)
6819                      and transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"linksUpperLimit") = inf ),
6820              1);
6821   
6822  transfer_flowProfile(timeModelToCalc,linksModelToCalc,yearsToCalc,transfer_techs,vintage,"against")
6823      $transfer_infiniteLinkLimit(linksModelToCalc,yearsToCalc,transfer_techs)
6824      = (sum(linksData$(links_aggregate(linksModelToCalc,linksData)
6825                       and transfer_incidenceData_flip(linksData) = 1
6826                       and transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"linksUpperLimit") = inf ),
6827              transfer_flowProfileIn_aggTime(timeModelToCalc,linksData,yearsToCalc,transfer_techs,"against"))
6828          + sum(linksData$(links_aggregate(linksModelToCalc,linksData)
6829                          and transfer_incidenceData_flip(linksData) = -1
6830                          and transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"linksUpperLimit") = inf ),
6831              transfer_flowProfileIn_aggTime(timeModelToCalc,linksData,yearsToCalc,transfer_techs,"along")))
6832      / sum(linksData$(links_aggregate(linksModelToCalc,linksData)
6833                      and transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"linksUpperLimit") = inf ),
6834              1);
6835  option clear = transfer_flowProfileIn_aggTime;
6836   
6837  * Orientation of links affects the flowAlongLimit/flowAgainstLimit
6838   
6839  transfer_linksParam(linksModelToCalc,years,transfer_techs,"flowAlongLimit")
6840      $transfer_finiteLinkLimit(linksModelToCalc,years,transfer_techs)
6841      = (sum(linksData$(links_aggregate(linksModelToCalc,linksData)
6842                       and transfer_incidenceData_flip(linksData) = 1),
6843              transfer_linksParamIn(linksData,years,transfer_techs,"flowAlongLimit")
6844              * transfer_linksParamIn(linksData,years,transfer_techs,"linksUpperLimit"))
6845          + sum(linksData$(links_aggregate(linksModelToCalc,linksData)
6846                          and transfer_incidenceData_flip(linksData) = -1),
6847              transfer_linksParamIn(linksData,years,transfer_techs,"flowAgainstLimit")
6848              * transfer_linksParamIn(linksData,years,transfer_techs,"linksUpperLimit")))
6849      / sum(linksData$links_aggregate(linksModelToCalc,linksData),
6850              transfer_linksParamIn(linksData,years,transfer_techs,"linksUpperLimit"));
6851   
6852  transfer_linksParam(linksModelToCalc,years,transfer_techs,"flowAgainstLimit")
6853      $transfer_finiteLinkLimit(linksModelToCalc,years,transfer_techs)
6854      = (sum(linksData$(links_aggregate(linksModelToCalc,linksData)
6855                       and transfer_incidenceData_flip(linksData) = -1),
6856              transfer_linksParamIn(linksData,years,transfer_techs,"flowAlongLimit")
6857              * transfer_linksParamIn(linksData,years,transfer_techs,"linksUpperLimit"))
6858          + sum(linksData$(links_aggregate(linksModelToCalc,linksData)
6859                          and transfer_incidenceData_flip(linksData) = 1),
6860              transfer_linksParamIn(linksData,years,transfer_techs,"flowAgainstLimit")
6861              * transfer_linksParamIn(linksData,years,transfer_techs,"linksUpperLimit")))
6862      / sum(linksData$links_aggregate(linksModelToCalc,linksData),
6863              transfer_linksParamIn(linksData,years,transfer_techs,"linksUpperLimit"));
6864   
6865  transfer_linksParam(linksModelToCalc,years,transfer_techs,"flowAlongLimit")
6866      $transfer_infiniteLinkLimit(linksModelToCalc,years,transfer_techs)
6867      = (sum(linksData$(links_aggregate(linksModelToCalc,linksData)
6868                       and transfer_incidenceData_flip(linksData) = 1
6869                       and transfer_linksParamIn(linksData,years,transfer_techs,"linksUpperLimit") = inf),
6870              transfer_linksParamIn(linksData,years,transfer_techs,"flowAlongLimit"))
6871          + sum(linksData$(links_aggregate(linksModelToCalc,linksData)
6872                          and transfer_incidenceData_flip(linksData) = -1
6873                          and transfer_linksParamIn(linksData,years,transfer_techs,"linksUpperLimit") = inf),
6874              transfer_linksParamIn(linksData,years,transfer_techs,"flowAgainstLimit")))
6875      / sum(linksData$(links_aggregate(linksModelToCalc,linksData)
6876                      and transfer_linksParamIn(linksData,years,transfer_techs,"linksUpperLimit") = inf ),
6877              1);
6878   
6879  transfer_linksParam(linksModelToCalc,years,transfer_techs,"flowAgainstLimit")
6880      $transfer_infiniteLinkLimit(linksModelToCalc,years,transfer_techs)
6881      = (sum(linksData$(links_aggregate(linksModelToCalc,linksData)
6882                       and transfer_incidenceData_flip(linksData) = -1
6883                       and transfer_linksParamIn(linksData,years,transfer_techs,"linksUpperLimit") = inf),
6884              transfer_linksParamIn(linksData,years,transfer_techs,"flowAlongLimit"))
6885          + sum(linksData$(links_aggregate(linksModelToCalc,linksData)
6886                          and transfer_incidenceData_flip(linksData) = 1
6887                          and transfer_linksParamIn(linksData,years,transfer_techs,"linksUpperLimit") = inf),
6888              transfer_linksParamIn(linksData,years,transfer_techs,"flowAgainstLimit")))
6889      / sum(linksData$(links_aggregate(linksModelToCalc,linksData)
6890                      and transfer_linksParamIn(linksData,years,transfer_techs,"linksUpperLimit") = inf ),
6891              1);
6892   
6893  * Mapping for grid segments using DC optimal power flow
6894  set gridSegments_dcopf(linksModel,transfer_techs,gridSegments);
6895  gridSegments_dcopf(linksModelToCalc,transfer_techs,gridSegments)
6896      $transfer_gridSegments(linksModelToCalc,transfer_techs,gridSegments,"useDCopf")
6898      = yes;
6900   
6901  * Ensure each grid segment uses exactly one commodity
6902  parameter checkGridSegmentCommodities(gridSegments);
6903  checkGridSegmentCommodities(gridSegments)
6904      = sum (commodity$(sum((linksModelToCalc,transfer_techs,vintage)
6905                              $( transfer_coefficient(transfer_techs,vintage,commodity,"coefficient") > 0
6906                                  and gridSegments_dcopf(linksModelToCalc,transfer_techs,gridSegments)) , 1) > 0), 1);
6907   
6908  parameter transfer_incidenceSegments(nodesModel,linksModel,years,gridSegments);
6909  transfer_incidenceSegments(nodesModelToCalc,linksModelToCalc,yearsToCalc,gridSegments)
6910      $(sum((transfer_techs,vintage)$(transfer_usedTech(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
6911                                          and gridSegments_dcopf(linksModelToCalc,transfer_techs,gridSegments)
6912                                          and transfer_incidenceModel(nodesModelToCalc,linksModelToCalc) <> 0), 1) > 0)
6913      = transfer_incidenceModel(nodesModelToCalc,linksModelToCalc);
6914   
6915   
6919   
6920  scalar transfer_enableMIP;
6921  transfer_enableMIP = sum(transfer_usedTech(linksModelToCalc,yearsToCalc,transfer_techs,vintage)$transfer_techParam(transfer_techs,vintage,"mipLinks"), 1 );
6922   
6923   
6924  * ==== definition of variables ====
6925   
6926  * Initialise variables for linksBuild
6927  transfer_linksBuild.l(linksModel,years,transfer_techs,vintage)
6928      $transfer_availTech(linksModel,years,transfer_techs,vintage)
6929      = transfer_linksParam(linksModel,years,transfer_techs,"linksBuild");
6930  transfer_linksBuild.lo(linksModel,yearsToCalc,transfer_techs,vintage)
6931      $transfer_availTech(linksModel,yearsToCalc,transfer_techs,vintage)
6932      = transfer_linksBuild.l(linksModel,yearsToCalc,transfer_techs,vintage);
6933  transfer_linksBuild.fx(linksModel,years,transfer_techs,vintage)
6934      $transfer_linksParam(linksModel,years,transfer_techs,"noExpansion")
6935      = transfer_linksBuild.l(linksModel,years,transfer_techs,vintage);
6936   
6937  * Initialise variables for linksDecom
6938  transfer_linksDecom.l(linksModel,years,transfer_techs,vintage)
6939      $(transfer_decomTech(linksModel,years,transfer_techs,vintage)
6940        and years.val < sum(yearsToCalc$(ord(yearsToCalc) = 1), yearsToCalc.val))
6941      = sum((years_a,years_aa)$(sameas(years-1, years_aa)
6942                        and years_a.val > years_aa.val - transfer_techParam(transfer_techs,vintage,'lifeTime')
6943                        and years_a.val <= years.val - transfer_techParam(transfer_techs,vintage,'lifeTime')
6944                        and transfer_availTech(linksModel,years_a,transfer_techs,vintage)),
6945          transfer_linksBuild.l(linksModel,years_a,transfer_techs,vintage));
6946   
6947  transfer_linksDecom.l(linksModel,yearsToCalc,transfer_techs,vintage)
6948    $transfer_decomTech(linksModel,yearsToCalc,transfer_techs,vintage)
6949    = sum(years$
6950          (years.val < sum(yearsToCalc_a$(ord(yearsToCalc_a) = 1), yearsToCalc_a.val)
6951            and transfer_availTech(linksModel,years,transfer_techs,vintage)
6952            and years.val > sum(years_a$sameas(years_a, yearsToCalc-1), years_a.val) - transfer_techParam(transfer_techs,vintage,'lifeTime')
6953            and years.val <= yearsToCalc.val - transfer_techParam(transfer_techs,vintage,'lifeTime')),
6954        transfer_linksBuild.l(linksModel,years,transfer_techs,vintage))
6955      + sum(yearsToCalc_a$
6956          (yearsToCalc_a.val < sum(yearsToCalc_aa$(ord(yearsToCalc_aa) > 1), yearsToCalc_a.val)
6957            and transfer_availTech(linksModel,yearsToCalc_a,transfer_techs,vintage)
6958            and yearsToCalc_a.val > sum(years_a$sameas(years_a, yearsToCalc-1), years_a.val) - transfer_techParam(transfer_techs,vintage,'lifeTime')
6959            and yearsToCalc_a.val <= yearsToCalc.val - transfer_techParam(transfer_techs,vintage,'lifeTime')),
6960        transfer_linksBuild.l(linksModel,yearsToCalc_a,transfer_techs,vintage));
6961        ;
6962   
6963  transfer_linksDecom.lo(linksModel,yearsToCalc,transfer_techs,vintage)
6964      $(transfer_usedTech(linksModel,yearsToCalc,transfer_techs,vintage)
6965          and not transfer_techParam(transfer_techs,vintage,"freeDecom"))
6966      = transfer_linksDecom.l(linksModel,yearsToCalc,transfer_techs,vintage)
6967   
6968  * Calculate planned transfer links expansion
6969  parameter transfer_linksPlanned(linksModel,years,transfer_techs,vintage);
6970  transfer_linksPlanned(linksModel,years,transfer_techs,vintage) = 0;
6971  loop(years,
6972    transfer_linksPlanned(linksModel,years,transfer_techs,vintage)
6973      =
6974      transfer_linksPlanned(linksModel,years-1,transfer_techs,vintage)
6975          $transfer_usedTech(linksModel,years-1,transfer_techs,vintage)
6976      + transfer_linksBuild.l(linksModel,years,transfer_techs,vintage)
6977          $transfer_availTech(linksModel,years,transfer_techs,vintage)
6978      - transfer_linksDecom.l(linksModel,years,transfer_techs,vintage)
6979          $transfer_usedTech(linksModel,years,transfer_techs,vintage);
6980  );
6981   
6982  * Set initial state for planned units
6983  transfer_linksTotal.l(linksModel,years,transfer_techs,vintage)
6984    = transfer_linksPlanned(linksModel,years,transfer_techs,vintage)
6985   
6986  * Calculate if planned links expansion is bound by upper and lower limits
6987  set transfer_linkBoundsFixed(linksModel,years,transfer_techs);
6988  transfer_linkBoundsFixed(linksModel,years,transfer_techs)
6989    $(sum(vintage$transfer_usedTech(linksModel,years,transfer_techs,vintage),
6990          transfer_linksPlanned(linksModel,years,transfer_techs,vintage))
6991      = transfer_linksParam(linksModel,years,transfer_techs,"linksUpperLimit")
6992    and sum(vintage$transfer_usedTech(linksModel,years,transfer_techs,vintage),
6993          transfer_linksPlanned(linksModel,years,transfer_techs,vintage))
6994      = transfer_linksParam(linksModel,years,transfer_techs,"linksLowerLimit"))
6995    = yes;
6996   
6997  * Fix linksBuild, linksDecom, linksTotal if levels are predetermined by upper and lower limits
6998  transfer_linksBuild.fx(linksModel,years,transfer_techs,vintage)
6999    $(transfer_availTech(linksModel,years,transfer_techs,vintage)
7000      and transfer_linkBoundsFixed(linksModel,years,transfer_techs))
7001    = transfer_linksBuild.l(linksModel,years,transfer_techs,vintage);
7002  transfer_linksDecom.fx(linksModel,years,transfer_techs,vintage)
7003    $(transfer_usedTech(linksModel,years,transfer_techs,vintage)
7004      and transfer_linkBoundsFixed(linksModel,years,transfer_techs))
7005    = transfer_linksDecom.l(linksModel,years,transfer_techs,vintage);
7006  transfer_linksTotal.fx(linksModel,years,transfer_techs,vintage)
7007    $(transfer_usedTech(linksModel,years,transfer_techs,vintage)
7008      and transfer_linkBoundsFixed(linksModel,years,transfer_techs))
7009    = transfer_linksTotal.l(linksModel,years,transfer_techs,vintage);
7010   
7011  transfer_linksTotal_MIP.up(linksModel,years,transfer_techs,vintage)
7012      $(transfer_usedTech(linksModel,years,transfer_techs,vintage)
7013        and transfer_techParam(transfer_techs,vintage,"miplinks") = 1)
7014      = transfer_linksParam(linksModel,years,transfer_techs,"linksUpperLimit");
7015   
7016  * Add parameter for fixing capacities during myopic runs
7017  parameter transfer_linksDelta(linksModel,years,transfer_techs);
7018   
7019   
7020  * ==== declaration of equations ====
7021   
7022  equations
7023    Eq_transfer_linksBalance(linksModel,years,transfer_techs,vintage
7024      ) "Ensures the links balance over the planning period."
7025    Eq_transfer_linksFixedDecom(linksModel,years,transfer_techs,vintage
7026      ) "Restricts the fixed decommissioning of links over the planning period."
7027    Eq_transfer_linksFreeDecom(linksModel,years,transfer_techs,vintage
7028      ) "Restricts the free decommissioning of links over the planning period."
7029    Eq_transfer_linksUpperLimit(linksModel,years,transfer_techs
7030      ) "Upper bound for the total number of links."
7031    Eq_transfer_linksLowerLimit(linksModel,years,transfer_techs
7032      ) "Lower bound for the total number of links."
7033    Eq_transfer_linksTotalMIP(linksModel,years,transfer_techs,vintage
7034      ) "Fixes the total number of links to the corresponding integer variable."
7035   
7036    Eq_transfer_flowAlongUpperLimit(timeModel,linksModel,years,transfer_techs,vintage
7037      ) "Upper bound for the flow along the transfer links."
7038    Eq_transfer_flowAgainstUpperLimit(timeModel,linksModel,years,transfer_techs,vintage
7039      ) "Upper bound for the flow against the transfer links."
7040    Eq_transfer_dcopf_angleFlows(timeModel,linksModel,years,gridSegments
7041      )
7042    Eq_transfer_dcopf_cycleFlows(timeModel,years,cycles,gridSegments
7043      )
7044    ;
7045   
7046   
7047  * ==== equation definition ====
7048  * // ## Equations
7049  * // ### Transfer Links Balance
7050  * // Ensures that the transfer between nodes is balanced.
7051  * // {Eq_transfer_linksBalance}
7052  Eq_transfer_linksBalance(linksModelToCalc,yearsSel,transfer_techs,vintage)
7053      $((transfer_usedTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
7054            or sum(years$sameas(years,yearsSel), transfer_usedTech(linksModelToCalc,years-1,transfer_techs,vintage)))
7055          and not transfer_linkBoundsFixed(linksModelToCalc,yearsSel,transfer_techs))
7056      ..
7057      transfer_linksTotal(linksModelToCalc,yearsSel,transfer_techs,vintage)
7058      =e=
7059      sum(yearsToCalc$(ord(yearsToCalc) = 1 and sameas(yearsToCalc, yearsSel)),
7060        sum(years$sameas(years, yearsToCalc),
7061          transfer_linksTotal(linksModelToCalc,years-1,transfer_techs,vintage)
7062            $transfer_usedTech(linksModelToCalc,years-1,transfer_techs,vintage)))
7063      + sum((yearsToCalc)$(ord(yearsToCalc) > 1 and sameas(yearsToCalc, yearsSel)),
7064        transfer_linksTotal(linksModelToCalc,yearsToCalc-1,transfer_techs,vintage)
7065          $transfer_usedTech(linksModelToCalc,yearsToCalc-1,transfer_techs,vintage))
7066      + transfer_linksBuild(linksModelToCalc,yearsSel,transfer_techs,vintage)
7067          $transfer_availTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
7068      - transfer_linksDecom(linksModelToCalc,yearsSel,transfer_techs,vintage)
7069          $transfer_usedTech(linksModelToCalc,yearsSel,transfer_techs,vintage);
7070   
7071  * // ### Transfer Links Fixed Decommissioning
7072  * // Balances fixed link decommissioning.
7073  * // {Eq_transfer_linksFixedDecom}
7074  Eq_transfer_linksFixedDecom(linksModelToCalc,yearsSel,transfer_techs,vintage)
7075      $(transfer_decomTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
7076          and not transfer_techParam(transfer_techs,vintage,"freeDecom") = 1
7077          and not transfer_linkBoundsFixed(linksModelToCalc,yearsSel,transfer_techs))
7078      ..
7079      transfer_linksDecom(linksModelToCalc,yearsSel,transfer_techs,vintage)
7080      =e=
7081      sum(years$
7082          (transfer_availTech(linksModelToCalc,years,transfer_techs,vintage)
7083              and years.val > sum(yearsToCalc$sameas(yearsToCalc+1, yearsSel), yearsToCalc.val) - transfer_techParam(transfer_techs,vintage,'lifeTime')
7084              and years.val <= yearsSel.val - transfer_techParam(transfer_techs,vintage,'lifeTime')),
7085          transfer_linksBuild(linksModelToCalc,years,transfer_techs,vintage));
7086   
7087  * // ### Transfer Links Free Decommissioning
7088  * // Balances free link decommissioning.
7089  * // {Eq_transfer_linksFreeDecom}
7090  Eq_transfer_linksFreeDecom(linksModelToCalc,yearsSel,transfer_techs,vintage)
7091      $((transfer_decomTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
7092          or transfer_usedTech(linksModelToCalc,yearsSel,transfer_techs,vintage))
7093          and transfer_techParam(transfer_techs,vintage,"freeDecom") = 1)
7094      ..
7095      sum(years$
7096            ((transfer_decomTech(linksModelToCalc,years,transfer_techs,vintage)
7097              or transfer_usedTech(linksModelToCalc,years,transfer_techs,vintage))
7098              and years.val < sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)),
7099          transfer_linksDecom(linksModelToCalc,years,transfer_techs,vintage))
7100      + sum(yearsToCalc$
7101            ((transfer_decomTech(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
7102              or transfer_usedTech(linksModelToCalc,yearsToCalc,transfer_techs,vintage))
7103              and yearsToCalc.val >= sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
7104              and yearsToCalc.val <= yearsSel.val),
7105          transfer_linksDecom(linksModelToCalc,yearsToCalc,transfer_techs,vintage))
7106      =g=
7107      sum(years$
7108            (transfer_availTech(linksModelToCalc,years,transfer_techs,vintage)
7109              and years.val < sum(yearsToCalc$(ord(yearsToCalc)=1), yearsToCalc.val) - transfer_techParam(transfer_techs,vintage,'lifeTime')),
7110          transfer_linksBuild(linksModelToCalc,years,transfer_techs,vintage))
7111      + sum(yearsToCalc$
7112            (transfer_availTech(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
7113              and yearsToCalc.val >= sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
7114              and yearsToCalc.val <= yearsSel.val - transfer_techParam(transfer_techs,vintage,'lifeTime')),
7115          transfer_linksBuild(linksModelToCalc,yearsToCalc,transfer_techs,vintage));
7116   
7117  * // ### Transfer Links Lower Limit
7118  * // Ensures link capacity lower limits.
7119  * // {Eq_transfer_linksLowerLimit}
7120  Eq_transfer_linksLowerLimit(linksModelToCalc,yearsSel,transfer_techs)
7121      $(transfer_linksParam(linksModelToCalc,yearsSel,transfer_techs,'linksLowerLimit') > 0 )
7122      ..
7123      sum(vintage$transfer_usedTech(linksModelToCalc,yearsSel,transfer_techs,vintage),
7124          transfer_linksTotal(linksModelToCalc,yearsSel,transfer_techs,vintage))
7125      =g=
7126      transfer_linksParam(linksModelToCalc,yearsSel,transfer_techs,"linksLowerLimit");
7127   
7128  * // ### Transfer Links Upper Limit
7129  * // Ensures link capacity upper limits.
7130  * // {Eq_transfer_linksUpperLimit}
7131  Eq_transfer_linksUpperLimit(linksModelToCalc,yearsSel,transfer_techs)
7132      $(transfer_linksParam(linksModelToCalc,yearsSel,transfer_techs,'linksUpperLimit') >= 0
7133          and transfer_linksParam(linksModelToCalc,yearsSel,transfer_techs,'linksUpperLimit') < +inf )
7134      ..
7135      sum(vintage$transfer_usedTech(linksModelToCalc,yearsSel,transfer_techs,vintage),
7136          transfer_linksTotal(linksModelToCalc,yearsSel,transfer_techs,vintage))
7137      =l=
7138      transfer_linksParam(linksModelToCalc,yearsSel,transfer_techs,"linksUpperLimit");
7139   
7140  * // ### Transfer Links Total MIP
7141  * // Ensures number of MIP links.
7142  * // {Eq_transfer_linksTotalMIP}
7143  Eq_transfer_linksTotalMIP(linksModelToCalc,yearsSel,transfer_techs,vintage)
7144      $(transfer_usedTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
7145          and transfer_techParam(transfer_techs,vintage,"mipLinks"))
7146      ..
7147      transfer_linksTotal(linksModelToCalc,yearsSel,transfer_techs,vintage)
7148      =e=
7149      transfer_linksTotal_MIP(linksModelToCalc,yearsSel,transfer_techs,vintage);
7150   
7151  * // ### Transfer Links Flow Along Upper Limit
7152  * // Ensures links flow along upper limit.
7153  * // {Eq_transfer_flowAlongUpperLimit}
7154  Eq_transfer_flowAlongUpperLimit(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
7155      $transfer_usedTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
7156      ..
7157      transfer_flowAlong(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
7158      =l=
7159      transfer_flowProfile(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage,"along")
7160      * transfer_linksTotal(linksModelToCalc,yearsSel,transfer_techs,vintage)
7161      * transfer_techParam(transfer_techs,vintage,"flowUpperLimit")
7162      ;
7163   
7164  * // ### Transfer Links Flow Against Upper Limit
7165  * // Ensures links flow against upper limit.
7166  * // {Eq_transfer_flowAgainstUpperLimit}
7167  Eq_transfer_flowAgainstUpperLimit(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
7168      $transfer_usedTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
7169      ..
7170      transfer_flowAgainst(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
7171      =l=
7172      transfer_flowProfile(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage,"against")
7173      * transfer_linksTotal(linksModelToCalc,yearsSel,transfer_techs,vintage)
7174      * transfer_techParam(transfer_techs,vintage,"flowUpperLimit")
7175      ;
7176   
7177  set transfer_usedOpf(linksModel,years,gridSegments,transfer_techs,vintage);
7178  transfer_usedOpf(linksModel,yearsToCalc,gridSegments,transfer_techs,vintage)
7179      $(transfer_usedTech(linksModel,yearsToCalc,transfer_techs,vintage)
7180          and gridSegments_dcopf(linksModel,transfer_techs,gridSegments))
7181      = yes;
7182   
7183  set transfer_usedOpfLinks(linksModel,years,gridSegments);
7184  option transfer_usedOpfLinks < transfer_usedOpf;
7185   
7186  set transfer_usedOpfSegments(years,gridSegments);
7187  option transfer_usedOpfSegments < transfer_usedOpf;
7188   
7192  * // ### Transfer DC optimal flow angle flows
7193  * // Angle flows.
7194  * // {Eq_transfer_dcopf_cycleFlows}
7195  Eq_transfer_dcopf_angleFlows(timeModelSel,linksModelToCalc,yearsSel,gridSegments)
7196      $transfer_usedOpfLinks(linksModelToCalc,yearsSel,gridSegments)
7197      ..
7198      sum ((transfer_techs,vintage)
7199              $transfer_usedOpf(linksModelToCalc,yearsSel,gridSegments,transfer_techs,vintage),
7200          ( transfer_flowAlong(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
7201              - transfer_flowAgainst(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage) )
7202          * transfer_dcopf_Xtech(linksModelToCalc,yearsSel,transfer_techs,vintage,gridSegments) )
7203      =e=
7204      sum ( nodesModelSel,
7205          - transfer_incidenceModel(nodesModelSel,linksModelToCalc)
7206          * transfer_dcopf_voltageAngle(timeModelSel,nodesModelSel,yearsSel,gridSegments));
7210   
7211   
7212  * ==== model definition ====
7213   
7214  Model M_transfer
7215  /
7216    Eq_transfer_linksBalance
7217    Eq_transfer_linksFixedDecom
7218    Eq_transfer_linksFreeDecom
7219    Eq_transfer_linksLowerLimit
7220    Eq_transfer_linksUpperLimit
7221    Eq_transfer_linksTotalMIP
7222    Eq_transfer_flowAlongUpperLimit
7223    Eq_transfer_flowAgainstUpperLimit
7227    Eq_transfer_dcopf_angleFlows
7231  /;
INCLUDE    C:\Local\REMix\framework\remix\framework\model\source\core\sourcesink.gms
7233  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
7234  * SPDX-License-Identifier: BSD-3-Clause
7235   
7236  * // # core_sourcesink
7237  * // The equations in this file describe the sources and sinks in the model.
7238   
7239  * // ## Variables
7240  * // {special_table_sourcesink_variables}
----   7522 Data Decla sourcesink_profileLoad    0.125    15.234 SECS    127 MB  665592
7755   
7756  * // ## Aggregation of profiles
7757  * // Profiles are rescaled based on the annual sum.
7758   
7759  set sourcesink_usesProfileScaling(nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile);
7760  sourcesink_usesProfileScaling(nodesData,years,sourcesink_techs,commodity,"fixed")
7761      $sourcesink_configIn(nodesData,years,sourcesink_techs,commodity,"scaleFixProfileWithFixSum") = yes;
7762  sourcesink_usesProfileScaling(nodesData,years,sourcesink_techs,commodity,"lower")
7763      $sourcesink_configIn(nodesData,years,sourcesink_techs,commodity,"scaleLowProfileWithLowSum") = yes;
7764  sourcesink_usesProfileScaling(nodesData,years,sourcesink_techs,commodity,"upper")
7765      $sourcesink_configIn(nodesData,years,sourcesink_techs,commodity,"scaleUpProfileWithUpSum") = yes;
7766   
7767  parameter sourcesink_ProfileSum(nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile);
7768  sourcesink_ProfileSum(nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile)
7769      $sourcesink_usesProfileScaling(nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile)
7770      = sum(timeData, sourcesink_profileIn(timeData,nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile));
7771   
7772  parameter sourcesink_ProfileAbsSum(nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile);
7773  sourcesink_ProfileAbsSum(nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile)
7774      $sourcesink_usesProfileScaling(nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile)
7775      = sum(timeData, abs(sourcesink_profileIn(timeData,nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile)));
7776   
7777  set sourcesink_ProfileScaleError(nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile);
7778  sourcesink_ProfileScaleError(nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile)
7779      $(sourcesink_usesProfileScaling(nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile)
7780          and sourcesink_ProfileSum(nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile) = 0
7781          and sourcesink_ProfileAbsSum(nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile) > 0)
7782      = yes;
7783   
7784  abort$sum((nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile),
7785              sourcesink_ProfileScaleError(nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile)) "One or more profiles cannot be rescaled as their annual sum equals zero!"
7786   
7787  * calculate scaling factor for each type
7788  parameter sourcesink_scalingFactor(nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile);
7789  sourcesink_scalingFactor(nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile)
7790      $(sourcesink_ProfileSum(nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile)
7791          and sourcesink_usesProfileScaling(nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile))
7792      = sum(pc_sourcesink_annualSum$sameas(pc_sourcesink_profile,pc_sourcesink_annualSum),
7793          sourcesink_annualSumIn(nodesData,years,sourcesink_techs,commodity,pc_sourcesink_annualSum)
7794              / sourcesink_ProfileSum(nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile));
7795   
7796  * rescale profiles
7797  sourcesink_profileIn(timeData,nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile)
7798      $sourcesink_usesProfileScaling(nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile)
7799      = sourcesink_profileIn(timeData,nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile)
7800          * sourcesink_scalingFactor(nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile)
7801   
7802  * // ## Aggregation of profiles
7803  * // Profiles are aggregated based on the mapping from data nodes to model nodes.
7804   
7805  * ==== aggregation of profiles ====
7806  set sourcesink_usesProfileIn(nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile);
7807  option sourcesink_usesProfileIn < sourcesink_profileIn
7808   
7809  set sourcesink_usesProfile(nodesModel,years,sourcesink_techs,commodity,pc_sourcesink_profile);
7810  sourcesink_usesProfile(nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity,pc_sourcesink_profile)
7811      $sum(nodesData$(aggregateNodesModel(nodesData,nodesModelToCalc)
7812          and sourcesink_usesProfileIn(nodesData,yearsToCalc,sourcesink_techs,commodity,pc_sourcesink_profile)), 1)
7813      = yes;
7814   
7815  * aagregate time dimension
7816  parameter sourcesink_profileIn_aggTime(timeModel,nodesData,yearsToCalc,sourcesink_techs,commodity,pc_sourcesink_profile);
7817  sourcesink_profileIn_aggTime(timeModelToCalc,nodesData,yearsToCalc,sourcesink_techs,commodity,pc_sourcesink_profile)
7818    $sourcesink_usesProfileIn(nodesData,yearsToCalc,sourcesink_techs,commodity,pc_sourcesink_profile)
7819    = sum(timeData$timeMapping(timeData,timeModelToCalc),
7820            sourcesink_profileIn(timeData,nodesData,yearsToCalc,sourcesink_techs,commodity,pc_sourcesink_profile)
7821            / timeLength(timeModelToCalc));
7822  option clear = sourcesink_profileIn;
7823   
7824  * sum up absolute profiles
7825  parameter sourcesink_profile(timeModel,nodesModel,years,sourcesink_techs,commodity,pc_sourcesink_profile);
7826  sourcesink_profile(timeModelToCalc,nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity,pc_sourcesink_profile)
7827      $sourcesink_usesProfile(nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity,pc_sourcesink_profile)
7828      = sum(nodesData$aggregateNodesModel(nodesData,nodesModelToCalc),
7829              sourcesink_profileIn_aggTime(timeModelToCalc,nodesData,yearsToCalc,sourcesink_techs,commodity,pc_sourcesink_profile));
7830  option clear = sourcesink_profileIn_aggTime;
7831   
7832  set sourcesink_enabled(nodesModel,years,sourcesink_techs,commodity);
7833  option sourcesink_enabled < sourcesink_config;
7834   
7836   
7837  * ==== declaration of variables ====
7838  * // ## Bounding of variables
7839  * // Source-sink variables with either a lower, fixed, or upper profile are bounded to their respective profiles given by the input parameters.
7840   
7841  sourcesink_flow.lo(timeModelToCalc,nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity)
7842      $( sourcesink_enabled(nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity)
7843          and sourcesink_config(nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity,"usesLowerProfile") = 1
7844          and sourcesink_profile(timeModelToCalc,nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity,"lower") > -inf )
7845      = sourcesink_profile(timeModelToCalc,nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity,"lower");
7846   
7847  sourcesink_flow.up(timeModelToCalc,nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity)
7848      $( sourcesink_enabled(nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity)
7849          and sourcesink_config(nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity,"usesUpperProfile") = 1
7850          and sourcesink_profile(timeModelToCalc,nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity,"upper") < inf )
7851      = sourcesink_profile(timeModelToCalc,nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity,"upper");
7852   
7853  sourcesink_flow.fx(timeModelToCalc,nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity)
7854      $( sourcesink_enabled(nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity)
7855          and sourcesink_config(nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity,"usesFixedProfile") = 1 )
7856      = sourcesink_profile(timeModelToCalc,nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity,"fixed");
7857   
7858  option clear = sourcesink_profile;
7859   
7860   
7861  * ==== equation definition ====
7862  * // ## Equations
7863  equations
7864  Eq_sourcesink_useFixedSum(nodesModel,years,sourcesink_techs,commodity
7865      ) "Fixes the annual sum from sources / to sinks"
7866  Eq_sourcesink_useLowerSum(nodesModel,years,sourcesink_techs,commodity
7867      ) "Limits the lower sum from sources / to sinks"
7868  Eq_sourcesink_useUpperSum(nodesModel,years,sourcesink_techs,commodity
7869      ) "Limits the upper sum from sources / to sinks"
7870    ;
7871   
7872  * // ### Fixed annual sums for sources and sinks
7873  * // Ensures that the sources and sinks with annual sums given as fixed limits are balanced.
7874  * // {Eq_sourcesink_useFixedSum}
7875  Eq_sourcesink_useFixedSum(nodesModelSel,yearsSel,sourcesink_techs,commodity)
7876      $( sourcesink_enabled(nodesModelSel,yearsSel,sourcesink_techs,commodity)
7877          and sourcesink_config(nodesModelSel,yearsSel,sourcesink_techs,commodity,"usesFixedSum") = 1 )
7878      ..
7879      sum(timeModelSel,
7880          sourcesink_flow(timeModelSel,nodesModelSel,yearsSel,sourcesink_techs,commodity))
7881      =e=
7882      sourcesink_annualSum(nodesModelSel,yearsSel,sourcesink_techs,commodity,"fixed")
7883      ;
7884   
7885  * // ### Lower annual sums for sources and sinks
7886  * // Ensures that the sources and sinks with annual sums given as lower limits are balanced.
7887  * // {Eq_sourcesink_useLowerSum}
7888  Eq_sourcesink_useLowerSum(nodesModelSel,yearsSel,sourcesink_techs,commodity)
7889      $( sourcesink_enabled(nodesModelSel,yearsSel,sourcesink_techs,commodity)
7890          and sourcesink_config(nodesModelSel,yearsSel,sourcesink_techs,commodity,"usesLowerSum") = 1
7891          and sourcesink_annualSum(nodesModelSel,yearsSel,sourcesink_techs,commodity,"lower") > -inf )
7892      ..
7893      sum(timeModelSel,
7894          sourcesink_flow(timeModelSel,nodesModelSel,yearsSel,sourcesink_techs,commodity))
7895      =g=
7896      sourcesink_annualSum(nodesModelSel,yearsSel,sourcesink_techs,commodity,"lower")
7897      ;
7898   
7899  * // ### Upper annual sums for sources and sinks
7900  * // Ensures that the sources and sinks with annual sums given as upper limits are balanced.
7901  * // {Eq_sourcesink_useUpperSum}
7902  Eq_sourcesink_useUpperSum(nodesModelSel,yearsSel,sourcesink_techs,commodity)
7903      $( sourcesink_enabled(nodesModelSel,yearsSel,sourcesink_techs,commodity)
7904          and sourcesink_config(nodesModelSel,yearsSel,sourcesink_techs,commodity,"usesUpperSum") = 1
7905          and sourcesink_annualSum(nodesModelSel,yearsSel,sourcesink_techs,commodity,"upper") < inf )
7906      ..
7907      sum(timeModelSel,
7908          sourcesink_flow(timeModelSel,nodesModelSel,yearsSel,sourcesink_techs,commodity))
7909      =l=
7910      sourcesink_annualSum(nodesModelSel,yearsSel,sourcesink_techs,commodity,"upper")
7911      ;
7912   
7913   
7914  * ==== model definition ====
7915   
7916  Model M_sourcesink
7917  /
7918    Eq_sourcesink_useFixedSum
7919    Eq_sourcesink_useLowerSum
7920    Eq_sourcesink_useUpperSum
7921  /;
INCLUDE    C:\Local\REMix\framework\remix\framework\model\source\core\balance.gms
7923  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
7924  * SPDX-License-Identifier: BSD-3-Clause
7925   
7926  * // # balance
7927  * // The equations in this file describe the commodity balancing in the model.
7928   
7929  Equations
7930    Eq_balance_commodities(timeModel,nodesModel,years,commodity
7931      ) "Balance for each commodity used in each time step, region, and year";
7932   
7933   
7934  * ==== calculation of mappings ====
7935   
7936  set balance_techComm(techs,commodity);
7937  balance_techComm(converter_techs(techs),commodity)
7938      $sum((vintage,activity)$converter_coefficient(converter_techs,vintage,activity,commodity,"coefficient"), 1) = yes;
7939  balance_techComm(storage_techs(techs),commodity)
7940      $sum((vintage)$storage_sizeParam(storage_techs,vintage,commodity,"size"), 1) = yes;
7941  balance_techComm(transfer_techs(techs),commodity)
7942      $sum((vintage)$transfer_coefficient(transfer_techs,vintage,commodity,"coefficient"), 1) = yes;
7943  balance_techComm(sourcesink_techs(techs),commodity)
7944      $sum((nodesModelToCalc,yearsToCalc)$sourcesink_enabled(nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity), 1) = yes;
7945   
7946  set balance_usedConverter(nodesModel,years,commodity);
7947  set balance_usedStorage(nodesModel,years,commodity);
7948  set balance_usedTransfer(nodesModel,years,commodity);
7949  set balance_usedSourceSink(nodesModel,years,commodity);
7950  set balance_usedBalance(nodesModel,years,commodity);
7951   
7952  balance_usedConverter(nodesModel,years,commodity)
7953      = sum ((converter_techs,vintage,activity)
7954              $( converter_coefficient(converter_techs,vintage,activity,commodity,"coefficient") <> 0
7955                  and converter_usedTech(nodesModel,years,converter_techs,vintage) ), 1);
7956   
7957  balance_usedStorage(nodesModel,years,commodity)
7958      = sum ((storage_techs,vintage,activity)
7959              $(storage_sizeParam(storage_techs,vintage,commodity,"size") <> 0
7960                  and storage_usedTech(nodesModel,years,storage_techs,vintage) ), 1);
7961   
7962  balance_usedTransfer(nodesModel,years,commodity)
7963      = sum ((linksModel,transfer_techs,vintage)
7964              $(transfer_coefficient(transfer_techs,vintage,commodity,"coefficient") <> 0
7965                  and transfer_incidenceModel(nodesModel,linksModel) <> 0), 1);
7966   
7967  option balance_usedSourceSink < sourcesink_enabled;
7968   
7969  balance_usedBalance(nodesModel,years,commodity)
7970      $(balance_usedConverter(nodesModel,years,commodity)
7971          or balance_usedStorage(nodesModel,years,commodity)
7972          or balance_usedTransfer(nodesModel,years,commodity)
7973          or balance_usedSourceSink(nodesModel,years,commodity) )
7974      = yes;
7975   
7976   
7977  * ==== equation definition ====
7978   
7979  * // ### Balance commodities
7980  * // Balancing of commodities for all model regions, time steps, and years
7981  * // {Eq_balance_commodities}
7982  Eq_balance_commodities(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,commodity)
7983      $balance_usedBalance(nodesModelSel,yearsSel,commodity)
7984      ..
7985  * converter
7986      sum((converter_techs,vintage,activity)
7987              $( converter_coefficientProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity,commodity) <> 0
7988                  AND converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage) ),
7989          converter_activity(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity)
7990              * converter_coefficientProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity,commodity)
7991              * timeLength(timeModelSel)
7992          + converter_unitsUsingActivity_MIP(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity)
7993              * converter_coefficient(converter_techs,vintage,activity,commodity,"constant")
7994              * timeLength(timeModelSel))
7995   
7996  * storages
7997      + sum((storage_techs,vintage)
7998              $( storage_sizeParam(storage_techs,vintage,commodity,"size") <> 0
7999                  and storage_usedTech(nodesModelSel,yearsSel,storage_techs,vintage) ),
8000          storage_level(timeModelToCalc--1,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
8001          - storage_level(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
8003          - storage_losses(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
8004          * timeLength(timeModelSel)
8006          )
8007   
8008  * transfer
8009      + sum((linksModel,transfer_techs,vintage)
8010              $(transfer_usedTech(linksModel,yearsSel,transfer_techs,vintage)
8011                  and linksModelToCalc(linksModel)),
8012          (   transfer_flowAlong(timeModelSel,linksModel,yearsSel,transfer_techs,vintage)
8013                  $(transfer_incidenceModel(nodesModelSel,linksModel) > 0)
8014            + transfer_flowAgainst(timeModelSel,linksModel,yearsSel,transfer_techs,vintage)
8015                  $(transfer_incidenceModel(nodesModelSel,linksModel) < 0) )
8016          * transfer_coefficient(transfer_techs,vintage,commodity,"coefficient")
8017          * timeLength(timeModelSel))
8018   
8019      - sum((linksModel,transfer_techs,vintage)
8020              $(transfer_usedTech(linksModel,yearsSel,transfer_techs,vintage)
8021                  and linksModelToCalc(linksModel)),
8022          (   transfer_flowAlong(timeModelSel,linksModel,yearsSel,transfer_techs,vintage)
8023                  $(transfer_incidenceModel(nodesModelSel,linksModel) < 0)
8024            + transfer_flowAgainst(timeModelSel,linksModel,yearsSel,transfer_techs,vintage)
8025                  $(transfer_incidenceModel(nodesModelSel,linksModel) > 0) )
8026          * transfer_coefficient(transfer_techs,vintage,commodity,"coefficient")
8027          * timeLength(timeModelSel))
8028   
8029      + 0.5 * sum((linksModel,transfer_techs,vintage)
8030              $(transfer_usedTech(linksModel,yearsSel,transfer_techs,vintage)
8031                  AND linksModelToCalc(linksModel)),
8032          (   transfer_flowAlong(timeModelSel,linksModel,yearsSel,transfer_techs,vintage)
8033                  $(transfer_incidenceModel(nodesModelSel,linksModel) <> 0)
8034            + transfer_flowAgainst(timeModelSel,linksModel,yearsSel,transfer_techs,vintage)
8035                  $(transfer_incidenceModel(nodesModelSel,linksModel) <> 0) )
8036          * timeLength(timeModelSel)
8037          * ( transfer_coefPerFlow(transfer_techs,vintage,commodity,"coefPerFlow")
8038              + sum(link_types,
8039                  transfer_coefPerLength(transfer_techs,vintage,commodity,link_types,"coefPerLength")
8040                  * transfer_lengthParam(linksModel,link_types,"length"))))
8041   
8042  * sourcesink
8043      + sum((sourcesink_techs)
8044              $sourcesink_enabled(nodesModelSel,yearsSel,sourcesink_techs,commodity),
8045          sourcesink_flow(timeModelSel,nodesModelSel,yearsSel,sourcesink_techs,commodity)
8046          * timeLength(timeModelSel))
8047      =e=
8048      0;
8049   
8050   
8051  * ==== model definition ====
8052   
8053  Model M_balance
8054  /
8055    Eq_balance_commodities
8056  /;
8057   
INCLUDE    C:\Local\REMix\framework\remix\framework\model\source\accounting\equations.gms
8059  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
8060  * SPDX-License-Identifier: BSD-3-Clause
8061   
8062  * // # accounting_equations
8063   
8064  * ==== declaration of variables ====
8065   
8066  variables
8067  accounting_indicator(accNodesModel,accYears,indicator)
8068  accounting_indicator_links(linksModel,years,indicator)
8069  accounting_objective
8070    ;
8071   
8072   
8073  * ==== definition of variables ====
8074   
8075  * set the variable levels to be fixed for years before the optimization years
8076  accounting_indicator.l(accNodesModel,accYears,indicator)
8077      $activeIndicators(accNodesModel,accYears,indicator)
8078      = 0;
8079   
8080  accounting_indicator.lo(accNodesModel,accYears,indicator)
8081      $(accounting_indicatorBounds(accNodesModel,accYears,indicator,"useLower") <> 0 )
8082      = accounting_indicatorBounds(accNodesModel,accYears,indicator,"lowerValue");
8083   
8084  accounting_indicator.up(accNodesModel,accYears,indicator)
8085      $(accounting_indicatorBounds(accNodesModel,accYears,indicator,"useUpper") <> 0 )
8086      = accounting_indicatorBounds(accNodesModel,accYears,indicator,"upperValue");
8087   
8088  accounting_indicator.fx(accNodesModel,accYears,indicator)
8089      $(accounting_indicatorBounds(accNodesModel,accYears,indicator,"useFixed") <> 0 )
8090      = accounting_indicatorBounds(accNodesModel,accYears,indicator,"fixedValue");
8091   
8092   
8093  accounting_indicator_links.lo(linksModelToCalc,yearsToCalc,indicator)
8094      $(accounting_indicatorBounds_links(linksModelToCalc,yearsToCalc,indicator,"useLower") <> 0 )
8095      = accounting_indicatorBounds_links(linksModelToCalc,yearsToCalc,indicator,"lowerValue");
8096   
8097  accounting_indicator_links.up(linksModelToCalc,yearsToCalc,indicator)
8098      $(accounting_indicatorBounds_links(linksModelToCalc,yearsToCalc,indicator,"useUpper") <> 0 )
8099      = accounting_indicatorBounds_links(linksModelToCalc,yearsToCalc,indicator,"upperValue");
8100   
8101  accounting_indicator_links.fx(linksModelToCalc,yearsToCalc,indicator)
8102      $(accounting_indicatorBounds_links(linksModelToCalc,yearsToCalc,indicator,"useFixed") <> 0 )
8103      = accounting_indicatorBounds_links(linksModelToCalc,yearsToCalc,indicator,"fixedValue");
8104   
8105   
8106  * ==== declaration of equations ====
8107   
8108  equations
8109  Eq_accounting_indicatorCalc(accNodesModel,accYears,indicator
8110      ) "Calculates the level of an indicator per accounting region"
8111  Eq_accounting_indicatorCalc_links(linksModel,years,indicator
8112      ) "Calculates the level of an indicator per model link"
8113  Eq_accounting_objective "Calculates the objective value based on the specified indicator"
8114    ;
8115   
8116   
8117  * ==== equations definition ====
8118  * // ## Equations
8119  * // ### Accounting Indicator Calculation
8120  * // Calculates the indicators for each model node for converters, sources and sinks, transfer, storage and variable indicators.
8121  * // {Eq_accounting_indicatorCalc}
8122  Eq_accounting_indicatorCalc(accNodesModel,accYearsSel(accYears),indicator)
8123      $activeIndicators(accNodesModel,accYears,indicator)
8124      ..
8125      accounting_indicator(accNodesModel,accYears,indicator)
8126      =e=
8127   
8128  * == variable indicators ==
8129      sum((accNodesModel_a,accYears_a,indicator_a)
8130          $(compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
8131              and variableIndicators(accNodesModel_a,accYears_a,indicator_a)),
8132          compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
8133          * accounting_indicator(accNodesModel_a,accYears_a,indicator_a))
8134   
8135  * == converters ==
8136      + sum ((accNodesModel_a,nodesModelSel,accYears_a,yearsSel,indicator_a)
8137              $( compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
8138                  and sameas(nodesModelSel,accNodesModel_a) and sameas(yearsSel,accYears_a)),
8139          compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
8140          *
8141          ( sum ((converter_techs,vintage)
8142                      $(converter_availTech(nodesModelSel,yearsSel,converter_techs,vintage)
8143                          and accounting_converterUnits(indicator_a,nodesModelSel,converter_techs,vintage,"useAnnuity") = 0),
8144              converter_unitsBuild(nodesModelSel,yearsSel,converter_techs,vintage)
8145              * accounting_converterUnits(indicator_a,nodesModelSel,converter_techs,vintage,"perUnitBuild"))
8146   
8147          + sum ((years_a,converter_techs,vintage)
8148                      $(converter_availTech(nodesModelSel,years_a,converter_techs,vintage)
8149                          and years_a.val < sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
8150                          and accounting_converterUnits(indicator_a,nodesModelSel,converter_techs,vintage,"useAnnuity") = 1
8151                          and years_a.val + accounting_converterUnits(indicator_a,nodesModelSel,converter_techs,vintage,"amorTime") > yearsSel.val
8152                          and years_a.val <= yearsSel.val ),
8153              converter_unitsBuild(nodesModelSel,years_a,converter_techs,vintage)
8154              * accounting_converterUnits(indicator_a,nodesModelSel,converter_techs,vintage,"perUnitBuild")
8155              * accounting_annuityFactor_converter(indicator_a,nodesModelSel,converter_techs,vintage) )
8156   
8157          + sum ((yearsToCalc,converter_techs,vintage)
8158                      $(converter_availTech(nodesModelSel,yearsToCalc,converter_techs,vintage)
8159                          and yearsToCalc.val >= sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
8160                          and accounting_converterUnits(indicator_a,nodesModelSel,converter_techs,vintage,"useAnnuity") = 1
8161                          and yearsToCalc.val + accounting_converterUnits(indicator_a,nodesModelSel,converter_techs,vintage,"amorTime") > yearsSel.val
8162                          and yearsToCalc.val <= yearsSel.val ),
8163              converter_unitsBuild(nodesModelSel,yearsToCalc,converter_techs,vintage)
8164              * accounting_converterUnits(indicator_a,nodesModelSel,converter_techs,vintage,"perUnitBuild")
8165              * accounting_annuityFactor_converter(indicator_a,nodesModelSel,converter_techs,vintage) )
8166   
8167          + sum ((converter_techs,vintage)
8168                      $converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage),
8169              converter_unitsDecom(nodesModelSel,yearsSel,converter_techs,vintage)
8170              * accounting_converterUnits(indicator_a,nodesModelSel,converter_techs,vintage,"perUnitDecom")
8171   
8172              + converter_unitsTotal(nodesModelSel,yearsSel,converter_techs,vintage)
8173              * accounting_converterUnits(indicator_a,nodesModelSel,converter_techs,vintage,"perUnitTotal") )
8174   
8175          + sum ((timeModelSel,converter_techs,vintage,activity)
8176                      $converter_usedTechAct(nodesModelSel,yearsSel,converter_techs,vintage,activity),
8177              converter_activity(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity)
8178              * timeLength(timeModelSel)
8179              * accounting_converterActivity(indicator_a,nodesModelSel,converter_techs,vintage,activity,"perActivity") )
8180   
8181          + sum ((timeModelSel,converter_techs,vintage)
8182                      $converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage),
8183              converter_unitStartups(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
8184              * accounting_converterStartup(indicator_a,nodesModelSel,converter_techs,vintage,"perStartup") )
8185   
8186          + sum ((timeModelSel,converter_techs,vintage)
8187                      $converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage),
8188              converter_rampPos(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
8189              * (accounting_converterStartup(indicator_a,nodesModelSel,converter_techs,vintage,"perRamp")
8190                 + accounting_converterStartup(indicator_a,nodesModelSel,converter_techs,vintage,"perRampPos"))
8191   
8192              + converter_rampNeg(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
8193              * (accounting_converterStartup(indicator_a,nodesModelSel,converter_techs,vintage,"perRamp")
8194                 + accounting_converterStartup(indicator_a,nodesModelSel,converter_techs,vintage,"perRampNeg")))
8195          )
8196      )
8197   
8198  * == storage ==
8199      + sum ((accNodesModel_a,nodesModelSel,accYears_a,yearsSel,indicator_a)
8200              $( compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
8201                  and sameas(nodesModelSel,accNodesModel_a) and sameas(yearsSel,accYears_a)),
8202          compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
8203          *
8204          ( sum ((storage_techs,vintage)
8205                      $(storage_availTech(nodesModelSel,yearsSel,storage_techs,vintage)
8206                          and accounting_storageUnits(indicator_a,nodesModelSel,storage_techs,vintage,"useAnnuity") = 0),
8207              storage_unitsBuild(nodesModelSel,yearsSel,storage_techs,vintage)
8208              * accounting_storageUnits(indicator_a,nodesModelSel,storage_techs,vintage,"perUnitBuild") )
8209   
8210          + sum ((years_a,storage_techs,vintage)
8211                      $(storage_availTech(nodesModelSel,years_a,storage_techs,vintage)
8212                          and years_a.val < sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
8213                          and accounting_storageUnits(indicator_a,nodesModelSel,storage_techs,vintage,"useAnnuity") = 1
8214                          and years_a.val + accounting_storageUnits(indicator_a,nodesModelSel,storage_techs,vintage,"amorTime") > yearsSel.val
8215                          and years_a.val <= yearsSel.val ),
8216              storage_unitsBuild(nodesModelSel,years_a,storage_techs,vintage)
8217              * accounting_storageUnits(indicator_a,nodesModelSel,storage_techs,vintage,"perUnitBuild")
8218              * accounting_annuityFactor_storage(indicator_a,nodesModelSel,storage_techs,vintage) )
8219   
8220          + sum ((yearsToCalc,storage_techs,vintage)
8221                      $(storage_availTech(nodesModelSel,yearsToCalc,storage_techs,vintage)
8222                          and yearsToCalc.val >= sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
8223                          and accounting_storageUnits(indicator_a,nodesModelSel,storage_techs,vintage,"useAnnuity") = 1
8224                          and yearsToCalc.val + accounting_storageUnits(indicator_a,nodesModelSel,storage_techs,vintage,"amorTime") > yearsSel.val
8225                          and yearsToCalc.val <= yearsSel.val ),
8226              storage_unitsBuild(nodesModelSel,yearsToCalc,storage_techs,vintage)
8227              * accounting_storageUnits(indicator_a,nodesModelSel,storage_techs,vintage,"perUnitBuild")
8228              * accounting_annuityFactor_storage(indicator_a,nodesModelSel,storage_techs,vintage) )
8229   
8230          + sum ((storage_techs,vintage)
8231                      $storage_usedTech(nodesModelSel,yearsSel,storage_techs,vintage),
8232              storage_unitsDecom(nodesModelSel,yearsSel,storage_techs,vintage)
8233              * accounting_storageUnits(indicator_a,nodesModelSel,storage_techs,vintage,"perUnitDecom")
8234   
8235              + storage_unitsTotal(nodesModelSel,yearsSel,storage_techs,vintage)
8236              * accounting_storageUnits(indicator_a,nodesModelSel,storage_techs,vintage,"perUnitTotal") )
8237          )
8238      )
8239   
8240   
8241  * == transfer ==
8242      + sum ((accNodesModel_a,nodesModelSel,accYears_a,yearsSel,indicator_a)
8243              $( compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
8244                  and sameas(nodesModelSel,accNodesModel_a) and sameas(yearsSel,accYears_a)),
8245          compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
8246          *
8247          ( sum ((linksModelToCalc,transfer_techs,vintage)
8248                      $(transfer_availTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
8249                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0
8250                          and accounting_transferLinks(indicator_a,linksModelToCalc,transfer_techs,vintage,"useAnnuity") = 0),
8251              0.5
8252              * transfer_linksBuild(linksModelToCalc,yearsSel,transfer_techs,vintage)
8253              * accounting_transferLinks(indicator_a,linksModelToCalc,transfer_techs,vintage,"perLinkBuild") )
8254   
8255          + sum ((linksModelToCalc,years_a,transfer_techs,vintage)
8256                      $(transfer_availTech(linksModelToCalc,years_a,transfer_techs,vintage)
8257                          and years_a.val < sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
8258                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0
8259                          and accounting_transferLinks(indicator_a,linksModelToCalc,transfer_techs,vintage,"useAnnuity") = 1
8260                          and years_a.val + accounting_transferLinks(indicator_a,linksModelToCalc,transfer_techs,vintage,"amorTime") > yearsSel.val
8261                          and years_a.val <= yearsSel.val ),
8262              0.5
8263              * transfer_linksBuild(linksModelToCalc,years_a,transfer_techs,vintage)
8264              * accounting_transferLinks(indicator_a,linksModelToCalc,transfer_techs,vintage,"perLinkBuild")
8265              * accounting_annuityFactor_transferLink(indicator_a,linksModelToCalc,transfer_techs,vintage) )
8266   
8267          + sum ((linksModelToCalc,yearsToCalc,transfer_techs,vintage)
8268                      $(transfer_availTech(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
8269                          and yearsToCalc.val >= sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
8270                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0
8271                          and accounting_transferLinks(indicator_a,linksModelToCalc,transfer_techs,vintage,"useAnnuity") = 1
8272                          and yearsToCalc.val + accounting_transferLinks(indicator_a,linksModelToCalc,transfer_techs,vintage,"amorTime") > yearsSel.val
8273                          and yearsToCalc.val <= yearsSel.val ),
8274              0.5
8275              * transfer_linksBuild(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
8276              * accounting_transferLinks(indicator_a,linksModelToCalc,transfer_techs,vintage,"perLinkBuild")
8277              * accounting_annuityFactor_transferLink(indicator_a,linksModelToCalc,transfer_techs,vintage) )
8278   
8279          + sum ((linksModelToCalc,transfer_techs,vintage,link_types)
8280                      $(transfer_availTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
8281                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0
8282                          and accounting_transferPerLength(indicator_a,linksModelToCalc,transfer_techs,vintage,link_types,"useAnnuity") = 0 ),
8283              0.5
8284              * transfer_linksBuild(linksModelToCalc,yearsSel,transfer_techs,vintage)
8285              * transfer_lengthParam(linksModelToCalc,link_types,"length")
8286              * accounting_transferPerLength(indicator_a,linksModelToCalc,transfer_techs,vintage,link_types,"perLengthBuild") )
8287   
8288          + sum ((linksModelToCalc,years_a,transfer_techs,vintage,link_types)
8289                      $(transfer_availTech(linksModelToCalc,years_a,transfer_techs,vintage)
8290                          and years_a.val < sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
8291                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0
8292                          and accounting_transferPerLength(indicator_a,linksModelToCalc,transfer_techs,vintage,link_types,"useAnnuity") = 1
8293                          and years_a.val + accounting_transferPerLength(indicator_a,linksModelToCalc,transfer_techs,vintage,link_types,"amorTime") > yearsSel.val
8294                          and years_a.val <= yearsSel.val ),
8295              0.5
8296              * transfer_linksBuild(linksModelToCalc,years_a,transfer_techs,vintage)
8297              * transfer_lengthParam(linksModelToCalc,link_types,"length")
8298              * accounting_transferPerLength(indicator_a,linksModelToCalc,transfer_techs,vintage,link_types,"perLengthBuild")
8299              * accounting_annuityFactor_transferPerLength(indicator_a,linksModelToCalc,transfer_techs,vintage,link_types) )
8300   
8301          + sum ((linksModelToCalc,yearsToCalc,transfer_techs,vintage,link_types)
8302                      $(transfer_availTech(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
8303                          and yearsToCalc.val >= sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
8304                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0
8305                          and accounting_transferPerLength(indicator_a,linksModelToCalc,transfer_techs,vintage,link_types,"useAnnuity") = 1
8306                          and yearsToCalc.val + accounting_transferPerLength(indicator_a,linksModelToCalc,transfer_techs,vintage,link_types,"amorTime") > yearsSel.val
8307                          and yearsToCalc.val <= yearsSel.val ),
8308              0.5
8309              * transfer_linksBuild(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
8310              * transfer_lengthParam(linksModelToCalc,link_types,"length")
8311              * accounting_transferPerLength(indicator_a,linksModelToCalc,transfer_techs,vintage,link_types,"perLengthBuild")
8312              * accounting_annuityFactor_transferPerLength(indicator_a,linksModelToCalc,transfer_techs,vintage,link_types) )
8313   
8314          + sum ((linksModelToCalc,transfer_techs,vintage)
8315                      $(transfer_usedTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
8316                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0 ),
8317              0.5
8318              * transfer_linksDecom(linksModelToCalc,yearsSel,transfer_techs,vintage)
8319              * accounting_transferLinks(indicator_a,linksModelToCalc,transfer_techs,vintage,"perLinkDecom")
8320   
8321              + 0.5
8322              * transfer_linksTotal(linksModelToCalc,yearsSel,transfer_techs,vintage)
8323              * accounting_transferLinks(indicator_a,linksModelToCalc,transfer_techs,vintage,"perLinkTotal")
8324   
8325              + 0.5
8326              * sum (link_types,
8327                  transfer_linksDecom(linksModelToCalc,yearsSel,transfer_techs,vintage)
8328                  * transfer_lengthParam(linksModelToCalc,link_types,"length")
8329                  * accounting_transferPerLength(indicator_a,linksModelToCalc,transfer_techs,vintage,link_types,"perLengthDecom")
8330   
8331                  + transfer_linksTotal(linksModelToCalc,yearsSel,transfer_techs,vintage)
8332                  * transfer_lengthParam(linksModelToCalc,link_types,"length")
8333                  * accounting_transferPerLength(indicator_a,linksModelToCalc,transfer_techs,vintage,link_types,"perLengthTotal"))
8334   
8335              + 0.5
8336              * sum (timeModelSel,
8337                  transfer_flowAlong(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
8338                  * timeLength(timeModelSel)
8339                  * ( accounting_transferLinks(indicator_a,linksModelToCalc,transfer_techs,vintage,"perFlow")
8340                      + accounting_transferLinks(indicator_a,linksModelToCalc,transfer_techs,vintage,"perFlowAlong"))
8341   
8342                  + transfer_flowAgainst(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
8343                  * timeLength(timeModelSel)
8344                  * ( accounting_transferLinks(indicator_a,linksModelToCalc,transfer_techs,vintage,"perFlow")
8345                      + accounting_transferLinks(indicator_a,linksModelToCalc,transfer_techs,vintage,"perFlowAgainst")))
8346   
8347              + 0.5
8348              * sum ((timeModelSel, link_types),
8349                  transfer_flowAlong(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
8350                  * timeLength(timeModelSel)
8351                  * transfer_lengthParam(linksModelToCalc,link_types,"length")
8352                  * (accounting_transferPerLength(indicator_a,linksModelToCalc,transfer_techs,vintage,link_types,"perFlow")
8353                      + accounting_transferPerLength(indicator_a,linksModelToCalc,transfer_techs,vintage,link_types,"perFlowAlong"))
8354   
8355                  + transfer_flowAgainst(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
8356                  * timeLength(timeModelSel)
8357                  * transfer_lengthParam(linksModelToCalc,link_types,"length")
8358                  * (accounting_transferPerLength(indicator_a,linksModelToCalc,transfer_techs,vintage,link_types,"perFlow")
8359                      + accounting_transferPerLength(indicator_a,linksModelToCalc,transfer_techs,vintage,link_types,"perFlowAgainst")))
8360              )
8361          )
8362      )
8363   
8364   
8365  * == sources / sinks ==
8366      + sum ((accNodesModel_a,nodesModelSel,accYears_a,yearsSel,indicator_a)
8367              $( compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
8368                  and sameas(nodesModelSel,accNodesModel_a) and sameas(yearsSel,accYears_a)),
8369          compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
8370          *
8371          sum ((timeModelSel,sourcesink_techs,commodity)
8372                  $sourcesink_enabled(nodesModelSel,yearsSel,sourcesink_techs,commodity),
8373              sourcesink_flow(timeModelSel,nodesModelSel,yearsSel,sourcesink_techs,commodity)
8374              * timeLength(timeModelSel)
8375              * accounting_sourcesinkFlow(indicator_a,nodesModelSel,yearsSel,sourcesink_techs,commodity,"perFlow") )
8376      );
8377   
8378  * // ### Accounting Indicator Calculation Links
8379  * // Calculates the indicators for each transfer for converters, sources and sinks, transfer, storage and variable indicators.
8380  * // {Eq_accounting_indicatorCalc_links}
8381  Eq_accounting_indicatorCalc_links(linksModelToCalc,yearsSel,indicator)
8382      $activeIndicators_links(linksModelToCalc,yearsSel,indicator)
8383      ..
8384      accounting_indicator_links(linksModelToCalc,yearsSel,indicator)
8385      =e=
8386      sum ((transfer_techs,vintage)
8387                  $(transfer_availTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
8388                      and accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"useAnnuity") = 0),
8389          transfer_linksBuild(linksModelToCalc,yearsSel,transfer_techs,vintage)
8390          * accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"perLinkBuild") )
8391   
8392      + sum ((years_a,transfer_techs,vintage)
8393                  $(transfer_availTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
8394                      and accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"useAnnuity") = 1
8395                      and years_a.val + accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"amorTime") > yearsSel.val
8396                      and years_a.val <= yearsSel.val ),
8397          transfer_linksBuild(linksModelToCalc,years_a,transfer_techs,vintage)
8398          * accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"perLinkBuild")
8399          * accounting_annuityFactor_transferLink(indicator,linksModelToCalc,transfer_techs,vintage) )
8400   
8401      + sum ((transfer_techs,vintage,link_types)
8402                  $(transfer_availTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
8403                      and accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"useAnnuity") = 0 ),
8404          transfer_linksBuild(linksModelToCalc,yearsSel,transfer_techs,vintage)
8405          * transfer_lengthParam(linksModelToCalc,link_types,"length")
8406          * accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"perLengthBuild") )
8407   
8408      + sum ((years_a,transfer_techs,vintage,link_types)
8409                  $(transfer_availTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
8410                      and accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"useAnnuity") = 1
8411                      and years_a.val + accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"amorTime") > yearsSel.val
8412                      and years_a.val <= yearsSel.val ),
8413          transfer_linksBuild(linksModelToCalc,years_a,transfer_techs,vintage)
8414          * transfer_lengthParam(linksModelToCalc,link_types,"length")
8415          * accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"perLengthBuild")
8416          * accounting_annuityFactor_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types) )
8417   
8418      + sum ((transfer_techs,vintage)
8419                  $(transfer_usedTech(linksModelToCalc,yearsSel,transfer_techs,vintage)),
8420          transfer_linksDecom(linksModelToCalc,yearsSel,transfer_techs,vintage)
8421          * accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"perLinkDecom")
8422   
8423          + transfer_linksTotal(linksModelToCalc,yearsSel,transfer_techs,vintage)
8424          * accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"perLinkTotal")
8425   
8426          + sum (link_types,
8427              transfer_linksDecom(linksModelToCalc,yearsSel,transfer_techs,vintage)
8428              * transfer_lengthParam(linksModelToCalc,link_types,"length")
8429              * accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"perLengthDecom")
8430   
8431              + transfer_linksTotal(linksModelToCalc,yearsSel,transfer_techs,vintage)
8432              * transfer_lengthParam(linksModelToCalc,link_types,"length")
8433              * accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"perLengthTotal"))
8434   
8435          + sum (timeModelSel,
8436              transfer_flowAlong(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
8437              * timeLength(timeModelSel)
8438              * ( accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"perFlow")
8439                  + accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"perFlowAlong"))
8440   
8441              + transfer_flowAgainst(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
8442              * timeLength(timeModelSel)
8443              * ( accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"perFlow")
8444                  + accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"perFlowAgainst")))
8445   
8446          + sum ((timeModelSel, link_types),
8447              transfer_flowAlong(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
8448              * timeLength(timeModelSel)
8449              * transfer_lengthParam(linksModelToCalc,link_types,"length")
8450              * (accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"perFlow")
8451                  + accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"perFlowAlong"))
8452   
8453              + transfer_flowAgainst(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
8454              * timeLength(timeModelSel)
8455              * transfer_lengthParam(linksModelToCalc,link_types,"length")
8456              * (accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"perFlow")
8457                  + accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"perFlowAgainst")))
8458          );
8459   
8460  * // ### Accounting Objective
8461  * // Calculates the indicators for the objective.
8462  * // {Eq_accounting_objective}
8463  Eq_accounting_objective
8464      ..
8465      accounting_objective
8466      =e=
8467      sum ((accNodesModel,accYears,indicator)
8468              $(accounting_indicatorBounds(accNodesModel,accYears,indicator,"obj") <> 0 ),
8469          accounting_indicator(accNodesModel,accYears,indicator) )
8470   
8471   
8472  * ==== model definition ====
8473   
8474  Model M_accounting
8475  /
8476  Eq_accounting_indicatorCalc_links
8477  Eq_accounting_indicatorCalc
8478  Eq_accounting_objective
8479  /;
INCLUDE    C:\Local\REMix\framework\remix\framework\model\source\optiframe.gms
8481  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
8482  * SPDX-License-Identifier: BSD-3-Clause
8483   
8484  * ==== optimization frames ====
8486   
8487  * mapping from optimization frame to years
8489  set optiframe / of1 * of3 /;
8490  set optiframeToCalc(optiframe);
8491   
8493  set map_optiframe(optiframe,years) / #optiframe : #yearsToCalc /;
8495   
8497   
8498  option optiframeToCalc < map_optiframe;
8499   
8500  Model remix /
8501    M_converter
8502    M_storage
8503    M_transfer
8504    M_sourcesink
8505    M_balance
8506    M_accounting
8507  /;
8508   
8509   
8510  * ==== include methods  ====
8511   
8512  * check if the method is valid
8518   
8519   
8520  * if method is pips write the checkanno tool
INCLUDE    C:\Local\REMix\framework\remix\framework\model\source\methods\checkanno.gms
8522  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
8523  * SPDX-License-Identifier: BSD-3-Clause
8524   
8527   
8530   
8531  * if method is pips generate the annotated gdx file
INCLUDE    C:\Local\REMix\framework\remix\framework\model\source\methods\pips.gms
8533  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
8534  * SPDX-License-Identifier: BSD-3-Clause
8535   
8539   
8540  * if method is solve run the model with commercial solvers
INCLUDE    C:\Local\REMix\framework\remix\framework\model\source\methods\solve.gms
8542  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
8543  * SPDX-License-Identifier: BSD-3-Clause
8544   
8547   
8549   
8550  * ==== global options ====
8557   
8558  * ==== general solver options ====
8568   
8569  * ==== cplex options ====
8578   
8579  * ==== gurobi options ====
8580   
8581   
8582  * ==== copt options ====
8586   
8587  * ==== debug options ====
8590   
8591   
8592  * ==== setup optimization ====
8593  if ((sum(nodesModelToCalc, 1)>40 or sum(timeModelToCalc, 1)>50) and not 0,
8594     option limRow=0, limCol=0, solPrint=off;
8595  else
8596     option limRow=100000, limCol=100000, solPrint=on;
8597  );
8598   
8600   
8601  option mip = cplex;
8602  option reslim = 1209600;
8603  option optcr = 1e-3;
8604  remix.threads = 12;
8605  remix.optFile = 1;
8606  remix.solveLink = 0;
8607  remix.holdFixed = 1;
8608   
8609   
8610  * ==== configure option files ====
8611   
8614   
8615  file opt / "cplex.opt" /;
8616  put opt;
8618  put "rerun no" /;
8619  put "iis 1" /;
8620  put "lpmethod 4" /;
8622  put "barorder 3" /;
8623  put "preind 1" /;
8624  put "scaind 0" /;
8625  put "predual -1" /;
8626  put "baralg 0" /;
8627  put "barstartalg 1" /;
8628  put "barepcomp 1e-6" /;
8629  put "solutiontype 2" /;
8631  put "startalg 4" /;
8632  put "epgap 1e-3" /;
8633  put "quality 1" /;
8634  put "barcolnz 0" /;
8635  put "threads 12" /;
8636  put "parallelmode 1" /;
8639  putclose;
8640   
8642   
8643   
8644  * ==== solve the problem ====
8645   
8646  loop ( optiframeToCalc,
8647      yearsSel(years) = no;
8648      yearsSel(years)$map_optiframe(optiframeToCalc,years) = yes;
8649      yearsToFix(years) = no;
8650      yearsToFix(years)$(years.val < smin(years_a$yearsSel(years_a), years_a.val)) = yes;
8651      accYearsSel(accYears) = no;
8652      accYearsSel("horizon") = yes;
8653      accYearsSel(accYears)$(sum(yearsSel$sameas(accYears,yearsSel), 1)) = yes;
8654      accYearsToFix(accYears) = no;
8655      accYearsToFix(accYears)$(sum(years$(sameas(years,accYears) and years.val < smin(years_a$yearsSel(years_a), years_a.val)), 1) > 0) = yes;
8656      timeModelSel(timeModel) = no;
8657      timeModelSel(timeModel)$timeModelToCalc(timeModel) = yes;
8658      nodesModelSel(nodesModel) = no;
8659      nodesModelSel(nodesModel)$nodesModelToCalc(nodesModel) = yes;
8660   
8661  * Fix decision for years previously optimized in case of myopic or foresight
8662      converter_unitsDelta(nodesModelToCalc,yearsToFix,converter_techs)
8663          $(sum(yearsToCalc$sameas(yearsToFix, yearsToCalc), 1))
8664          = sum(vintage, converter_unitsTotal.l(nodesModelToCalc,yearsToFix,converter_techs,vintage))
8665              - converter_capacityParam(nodesModelToCalc,yearsToFix,converter_techs,"unitsUpperLimit");
8666      converter_unitsDelta(nodesModelToCalc,yearsToFix,converter_techs)
8667          $(converter_unitsDelta(nodesModelToCalc,yearsToFix,converter_techs) < 0) = 0;
8668   
8669      converter_unitsBuild.l(nodesModelToCalc,yearsToFix,converter_techs,vintage)
8670          $converter_availTech(nodesModelToCalc,yearsToFix,converter_techs,vintage)
8671          = converter_unitsBuild.l(nodesModelToCalc,yearsToFix,converter_techs,vintage)
8672              - converter_unitsDelta(nodesModelToCalc,yearsToFix,converter_techs);
8673   
8674      converter_unitsBuild.l(nodesModelToCalc,yearsToFix,converter_techs,vintage)
8675          $(converter_unitsBuild.l(nodesModelToCalc,yearsToFix,converter_techs,vintage) < 0) = 0;
8676      converter_unitsBuild.fx(nodesModelToCalc,yearsToFix,converter_techs,vintage)
8677          = converter_unitsBuild.l(nodesModelToCalc,yearsToFix,converter_techs,vintage);
8678      converter_unitsDecom.l(nodesModelToCalc,yearsToFix,converter_techs,vintage)
8679          $(converter_unitsDecom.l(nodesModelToCalc,yearsToFix,converter_techs,vintage) < 0) = 0;
8680      converter_unitsDecom.fx(nodesModelToCalc,yearsToFix,converter_techs,vintage)
8681          = converter_unitsDecom.l(nodesModelToCalc,yearsToFix,converter_techs,vintage);
8682      converter_unitsTotal.fx(nodesModelToCalc,yearsToFix,converter_techs,vintage)
8683          = converter_unitsTotal.l(nodesModelToCalc,yearsToFix,converter_techs,vintage);
8684   
8685   
8686      storage_unitsDelta(nodesModelToCalc,yearsToFix,storage_techs)
8687          $(sum(yearsToCalc$sameas(yearsToFix, yearsToCalc), 1))
8688          = sum(vintage, storage_unitsTotal.l(nodesModelToCalc,yearsToFix,storage_techs,vintage))
8689              - storage_reservoirParam(nodesModelToCalc,yearsToFix,storage_techs,"unitsUpperLimit");
8690      storage_unitsDelta(nodesModelToCalc,yearsToFix,storage_techs)
8691          $(storage_unitsDelta(nodesModelToCalc,yearsToFix,storage_techs) < 0) = 0;
8692   
8693      storage_unitsBuild.l(nodesModelToCalc,yearsToFix,storage_techs,vintage)
8694          $storage_availTech(nodesModelToCalc,yearsToFix,storage_techs,vintage)
8695          = storage_unitsBuild.l(nodesModelToCalc,yearsToFix,storage_techs,vintage)
8696              - storage_unitsDelta(nodesModelToCalc,yearsToFix,storage_techs);
8697   
8698      storage_unitsBuild.l(nodesModelToCalc,yearsToFix,storage_techs,vintage)
8699          $(storage_unitsBuild.l(nodesModelToCalc,yearsToFix,storage_techs,vintage) < 0) = 0;
8700      storage_unitsBuild.fx(nodesModelToCalc,yearsToFix,storage_techs,vintage)
8701          = storage_unitsBuild.l(nodesModelToCalc,yearsToFix,storage_techs,vintage);
8702      storage_unitsDecom.l(nodesModelToCalc,yearsToFix,storage_techs,vintage)
8703          $(storage_unitsDecom.l(nodesModelToCalc,yearsToFix,storage_techs,vintage) < 0) = 0;
8704      storage_unitsDecom.fx(nodesModelToCalc,yearsToFix,storage_techs,vintage)
8705          = storage_unitsDecom.l(nodesModelToCalc,yearsToFix,storage_techs,vintage);
8706      storage_unitsTotal.fx(nodesModelToCalc,yearsToFix,storage_techs,vintage)
8707          = storage_unitsTotal.l(nodesModelToCalc,yearsToFix,storage_techs,vintage);
8708   
8709   
8710      transfer_linksDelta(linksModelToCalc,yearsToFix,transfer_techs)
8711          $(sum(yearsToCalc$sameas(yearsToFix, yearsToCalc), 1))
8712          = sum(vintage, transfer_linksTotal.l(linksModelToCalc,yearsToFix,transfer_techs,vintage))
8713              - transfer_linksParam(linksModelToCalc,yearsToFix,transfer_techs,"linksUpperLimit");
8714      transfer_linksDelta(linksModelToCalc,yearsToFix,transfer_techs)
8715          $(transfer_linksDelta(linksModelToCalc,yearsToFix,transfer_techs) < 0) = 0;
8716   
8717      transfer_linksBuild.l(linksModelToCalc,yearsToFix,transfer_techs,vintage)
8718          $transfer_availTech(linksModelToCalc,yearsToFix,transfer_techs,vintage)
8719          = transfer_linksBuild.l(linksModelToCalc,yearsToFix,transfer_techs,vintage)
8720              - transfer_linksDelta(linksModelToCalc,yearsToFix,transfer_techs);
8721   
8722      transfer_linksBuild.l(linksModelToCalc,yearsToFix,transfer_techs,vintage)
8723          $(transfer_linksBuild.l(linksModelToCalc,yearsToFix,transfer_techs,vintage) < 0) = 0;
8724      transfer_linksBuild.fx(linksModelToCalc,yearsToFix,transfer_techs,vintage)
8725          = transfer_linksBuild.l(linksModelToCalc,yearsToFix,transfer_techs,vintage);
8726      transfer_linksDecom.l(linksModelToCalc,yearsToFix,transfer_techs,vintage)
8727          $(transfer_linksDecom.l(linksModelToCalc,yearsToFix,transfer_techs,vintage) < 0) = 0;
8728      transfer_linksDecom.fx(linksModelToCalc,yearsToFix,transfer_techs,vintage)
8729          = transfer_linksDecom.l(linksModelToCalc,yearsToFix,transfer_techs,vintage);
8730      transfer_linksTotal.fx(linksModelToCalc,yearsToFix,transfer_techs,vintage)
8731          = transfer_linksTotal.l(linksModelToCalc,yearsToFix,transfer_techs,vintage);
8732   
8733      accounting_indicator.fx(accNodesModel,accYearsToFix,indicator)
8734          = accounting_indicator.l(accNodesModel,accYearsToFix,indicator);
8735   
8736  * Optimize and log values
8737      if (opti_sense < 0,
8738      solve remix minimizing accounting_objective using mip;
8739      else
8740      solve remix maximizing accounting_objective using mip;
8741      );
8742   
8743      put_utility 'log' / 'Model status ' remix.modelstat:0:0;
8744      put_utility 'log' / 'Objective value ' accounting_objective.l:0:3;
8745   
8746  );
8747   
8751   
8752  * if method is pareto solve the model once and afterwards run multiple points along the pareto front
INCLUDE    C:\Local\REMix\framework\remix\framework\model\source\methods\pareto.gms
8754  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
8755  * SPDX-License-Identifier: BSD-3-Clause
8756   
8760   
8761  * if method is mga solve the model once and afterwards maximize the length metric of indicators
INCLUDE    C:\Local\REMix\framework\remix\framework\model\source\methods\mga.gms
8763  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
8764  * SPDX-License-Identifier: BSD-3-Clause
8765   
8769   
8770  * if method is iternodes run the model by iterating through all nodesToCalc
INCLUDE    C:\Local\REMix\framework\remix\framework\model\source\methods\iternodes.gms
8772  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
8773  * SPDX-License-Identifier: BSD-3-Clause
8774   
8778   
8779  * if postcalc is one write the results gdx
INCLUDE    C:\Local\REMix\framework\remix\framework\model\source\postcalc\definition.gms
8781  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
8782  * SPDX-License-Identifier: BSD-3-Clause
8783   
8785   
8786  * ==== indicator accounting ====
8787   
8788  indicator_accounting_detailed(indicator,nodesModelToCalc,yearsToCalc,techs)
8789      =
8790  * == converters ==
8791      sum ((converter_techs(techs),vintage)
8792                  $(converter_availTech(nodesModelToCalc,yearsToCalc,converter_techs,vintage)
8793                      and accounting_converterUnits(indicator,nodesModelToCalc,converter_techs,vintage,"useAnnuity") = 0),
8794          converter_unitsBuild.l(nodesModelToCalc,yearsToCalc,converter_techs,vintage)
8795          * accounting_converterUnits(indicator,nodesModelToCalc,converter_techs,vintage,"perUnitBuild"))
8796   
8797      + sum ((years_a,converter_techs(techs),vintage)
8798                  $(converter_availTech(nodesModelToCalc,years_a,converter_techs,vintage)
8799                      and accounting_converterUnits(indicator,nodesModelToCalc,converter_techs,vintage,"useAnnuity") = 1
8800                      and years_a.val + accounting_converterUnits(indicator,nodesModelToCalc,converter_techs,vintage,"amorTime") > yearsToCalc.val
8801                      and years_a.val <= yearsToCalc.val ),
8802          converter_unitsBuild.l(nodesModelToCalc,years_a,converter_techs,vintage)
8803          * accounting_converterUnits(indicator,nodesModelToCalc,converter_techs,vintage,"perUnitBuild")
8804          * accounting_annuityFactor_converter(indicator,nodesModelToCalc,converter_techs,vintage) )
8805   
8806      + sum ((converter_techs(techs),vintage)
8807                  $converter_usedTech(nodesModelToCalc,yearsToCalc,converter_techs,vintage),
8808          converter_unitsDecom.l(nodesModelToCalc,yearsToCalc,converter_techs,vintage)
8809          * accounting_converterUnits(indicator,nodesModelToCalc,converter_techs,vintage,"perUnitDecom")
8810   
8811          + converter_unitsTotal.l(nodesModelToCalc,yearsToCalc,converter_techs,vintage)
8812          * accounting_converterUnits(indicator,nodesModelToCalc,converter_techs,vintage,"perUnitTotal") )
8813   
8814      + sum ((timeModelToCalc,converter_techs(techs),vintage,activity)
8815                  $converter_usedTechAct(nodesModelToCalc,yearsToCalc,converter_techs,vintage,activity),
8816          converter_activity.l(timeModelToCalc,nodesModelToCalc,yearsToCalc,converter_techs,vintage,activity)
8817          * timeLength(timeModelToCalc)
8818          * accounting_converterActivity(indicator,nodesModelToCalc,converter_techs,vintage,activity,"perActivity") )
8819   
8820      + sum ((timeModelToCalc,converter_techs(techs),vintage)
8821                  $converter_usedTech(nodesModelToCalc,yearsToCalc,converter_techs,vintage),
8822          converter_unitStartups.l(timeModelToCalc,nodesModelToCalc,yearsToCalc,converter_techs,vintage)
8823          * accounting_converterStartup(indicator,nodesModelToCalc,converter_techs,vintage,"perStartup") )
8824   
8825      + sum ((timeModelToCalc,converter_techs(techs),vintage)
8826                  $converter_usedTech(nodesModelToCalc,yearsToCalc,converter_techs,vintage),
8827          converter_rampPos.l(timeModelToCalc,nodesModelToCalc,yearsToCalc,converter_techs,vintage)
8828          * (accounting_converterStartup(indicator,nodesModelToCalc,converter_techs,vintage,"perRamp")
8829              + accounting_converterStartup(indicator,nodesModelToCalc,converter_techs,vintage,"perRampPos"))
8830   
8831          + converter_rampNeg.l(timeModelToCalc,nodesModelToCalc,yearsToCalc,converter_techs,vintage)
8832          * (accounting_converterStartup(indicator,nodesModelToCalc,converter_techs,vintage,"perRamp")
8833              + accounting_converterStartup(indicator,nodesModelToCalc,converter_techs,vintage,"perRampNeg")))
8834   
8835  * == storage ==
8836      + sum ((storage_techs(techs),vintage)
8837                  $(storage_availTech(nodesModelToCalc,yearsToCalc,storage_techs,vintage)
8838                      and accounting_storageUnits(indicator,nodesModelToCalc,storage_techs,vintage,"useAnnuity") = 0),
8839          storage_unitsBuild.l(nodesModelToCalc,yearsToCalc,storage_techs,vintage)
8840          * accounting_storageUnits(indicator,nodesModelToCalc,storage_techs,vintage,"perUnitBuild") )
8841   
8842      + sum ((years_a,storage_techs(techs),vintage)
8843                  $(storage_availTech(nodesModelToCalc,yearsToCalc,storage_techs,vintage)
8844                      and accounting_storageUnits(indicator,nodesModelToCalc,storage_techs,vintage,"useAnnuity") = 1
8845                      and years_a.val + accounting_storageUnits(indicator,nodesModelToCalc,storage_techs,vintage,"amorTime") > yearsToCalc.val
8846                      and years_a.val <= yearsToCalc.val ),
8847          storage_unitsBuild.l(nodesModelToCalc,years_a,storage_techs,vintage)
8848          * accounting_storageUnits(indicator,nodesModelToCalc,storage_techs,vintage,"perUnitBuild")
8849          * accounting_annuityFactor_storage(indicator,nodesModelToCalc,storage_techs,vintage) )
8850   
8851      + sum ((storage_techs(techs),vintage)
8852                  $storage_usedTech(nodesModelToCalc,yearsToCalc,storage_techs,vintage),
8853          storage_unitsDecom.l(nodesModelToCalc,yearsToCalc,storage_techs,vintage)
8854          * accounting_storageUnits(indicator,nodesModelToCalc,storage_techs,vintage,"perUnitDecom")
8855   
8856          + storage_unitsTotal.l(nodesModelToCalc,yearsToCalc,storage_techs,vintage)
8857          * accounting_storageUnits(indicator,nodesModelToCalc,storage_techs,vintage,"perUnitTotal") )
8858   
8859  * == transfer ==
8860      + sum ((linksModel,transfer_techs(techs),vintage)
8861                  $(transfer_availTech(linksModel,yearsToCalc,transfer_techs,vintage)
8862                      and linksModelToCalc(linksModel)
8863                      and transfer_incidenceModel(nodesModelToCalc,linksModel) <> 0
8864                      and accounting_transferLinks(indicator,linksModel,transfer_techs,vintage,"useAnnuity") = 0),
8865          0.5
8866          * transfer_linksBuild.l(linksModel,yearsToCalc,transfer_techs,vintage)
8867          * accounting_transferLinks(indicator,linksModel,transfer_techs,vintage,"perLinkBuild") )
8868   
8869      + sum ((linksModel,years_a,transfer_techs(techs),vintage)
8870                  $(transfer_availTech(linksModel,yearsToCalc,transfer_techs,vintage)
8871                      and linksModelToCalc(linksModel)
8872                      and transfer_incidenceModel(nodesModelToCalc,linksModel) <> 0
8873                      and accounting_transferLinks(indicator,linksModel,transfer_techs,vintage,"useAnnuity") = 1
8874                      and years_a.val + accounting_transferLinks(indicator,linksModel,transfer_techs,vintage,"amorTime") > yearsToCalc.val
8875                      and years_a.val <= yearsToCalc.val ),
8876          0.5
8877          * transfer_linksBuild.l(linksModel,years_a,transfer_techs,vintage)
8878          * accounting_transferLinks(indicator,linksModel,transfer_techs,vintage,"perLinkBuild")
8879          * accounting_annuityFactor_transferLink(indicator,linksModel,transfer_techs,vintage) )
8880   
8881      + sum ((linksModel,transfer_techs(techs),vintage,link_types)
8882                  $(transfer_availTech(linksModel,yearsToCalc,transfer_techs,vintage)
8883                      and linksModelToCalc(linksModel)
8884                      and transfer_incidenceModel(nodesModelToCalc,linksModel) <> 0
8885                      and accounting_transferPerLength(indicator,linksModel,transfer_techs,vintage,link_types,"useAnnuity") = 0 ),
8886          0.5
8887          * transfer_linksBuild.l(linksModel,yearsToCalc,transfer_techs,vintage)
8888          * transfer_lengthParam(linksModel,link_types,"length")
8889          * accounting_transferPerLength(indicator,linksModel,transfer_techs,vintage,link_types,"perLengthBuild") )
8890   
8891      + sum ((linksModel,years_a,transfer_techs(techs),vintage,link_types)
8892                  $(transfer_availTech(linksModel,yearsToCalc,transfer_techs,vintage)
8893                      and linksModelToCalc(linksModel)
8894                      and transfer_incidenceModel(nodesModelToCalc,linksModel) <> 0
8895                      and accounting_transferPerLength(indicator,linksModel,transfer_techs,vintage,link_types,"useAnnuity") = 1
8896                      and years_a.val + accounting_transferPerLength(indicator,linksModel,transfer_techs,vintage,link_types,"amorTime") > yearsToCalc.val
8897                      and years_a.val <= yearsToCalc.val ),
8898          0.5
8899          * transfer_linksBuild.l(linksModel,years_a,transfer_techs,vintage)
8900          * transfer_lengthParam(linksModel,link_types,"length")
8901          * accounting_transferPerLength(indicator,linksModel,transfer_techs,vintage,link_types,"perLengthBuild")
8902          * accounting_annuityFactor_transferPerLength(indicator,linksModel,transfer_techs,vintage,link_types) )
8903   
8904      + sum ((linksModel,transfer_techs(techs),vintage)
8905                  $(transfer_usedTech(linksModel,yearsToCalc,transfer_techs,vintage)
8906                      and linksModelToCalc(linksModel)
8907                      and transfer_incidenceModel(nodesModelToCalc,linksModel) <> 0 ),
8908          0.5
8909          * transfer_linksDecom.l(linksModel,yearsToCalc,transfer_techs,vintage)
8910          * accounting_transferLinks(indicator,linksModel,transfer_techs,vintage,"perLinkDecom")
8911   
8912          + 0.5
8913          * transfer_linksTotal.l(linksModel,yearsToCalc,transfer_techs,vintage)
8914          * accounting_transferLinks(indicator,linksModel,transfer_techs,vintage,"perLinkTotal")
8915   
8916          + 0.5
8917          * sum (link_types,
8918              transfer_linksDecom.l(linksModel,yearsToCalc,transfer_techs,vintage)
8919              * transfer_lengthParam(linksModel,link_types,"length")
8920              * accounting_transferPerLength(indicator,linksModel,transfer_techs,vintage,link_types,"perLengthDecom")
8921   
8922              + transfer_linksTotal.l(linksModel,yearsToCalc,transfer_techs,vintage)
8923              * transfer_lengthParam(linksModel,link_types,"length")
8924              * accounting_transferPerLength(indicator,linksModel,transfer_techs,vintage,link_types,"perLengthTotal"))
8925   
8926          + 0.5
8927          * sum (timeModelToCalc,
8928              transfer_flowAlong.l(timeModelToCalc,linksModel,yearsToCalc,transfer_techs,vintage)
8929              * timeLength(timeModelToCalc)
8930              * ( accounting_transferLinks(indicator,linksModel,transfer_techs,vintage,"perFlow")
8931                  + accounting_transferLinks(indicator,linksModel,transfer_techs,vintage,"perFlowAlong"))
8932   
8933              + transfer_flowAgainst.l(timeModelToCalc,linksModel,yearsToCalc,transfer_techs,vintage)
8934              * timeLength(timeModelToCalc)
8935              * ( accounting_transferLinks(indicator,linksModel,transfer_techs,vintage,"perFlow")
8936                  + accounting_transferLinks(indicator,linksModel,transfer_techs,vintage,"perFlowAgainst")))
8937   
8938          + 0.5
8939          * sum ((timeModelToCalc, link_types),
8940              transfer_flowAlong.l(timeModelToCalc,linksModel,yearsToCalc,transfer_techs,vintage)
8941              * timeLength(timeModelToCalc)
8942              * transfer_lengthParam(linksModel,link_types,"length")
8943              * (accounting_transferPerLength(indicator,linksModel,transfer_techs,vintage,link_types,"perFlow")
8944                  + accounting_transferPerLength(indicator,linksModel,transfer_techs,vintage,link_types,"perFlowAlong"))
8945   
8946              + transfer_flowAgainst.l(timeModelToCalc,linksModel,yearsToCalc,transfer_techs,vintage)
8947              * timeLength(timeModelToCalc)
8948              * transfer_lengthParam(linksModel,link_types,"length")
8949              * (accounting_transferPerLength(indicator,linksModel,transfer_techs,vintage,link_types,"perFlow")
8950                  + accounting_transferPerLength(indicator,linksModel,transfer_techs,vintage,link_types,"perFlowAgainst"))))
8951   
8952   
8953  * == sources / sinks ==
8954      + sum ((timeModelToCalc,sourcesink_techs(techs),commodity)
8955              $sourcesink_enabled(nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity),
8956          sourcesink_flow.l(timeModelToCalc,nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity)
8957          * timeLength(timeModelToCalc)
8958          * accounting_sourcesinkFlow(indicator,nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity,"perFlow"))
8959      ;
8960   
8961   
8962  * ==== full set of main indicators ====
8963   
8964  indicator_accounting(accNodesModel,accYears,indicator)
8965      $sum((accNodesModel_a,accYears_a,indicator_a)
8966              $compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a), 1)
8967      =
8968      + sum((accNodesModel_a,accYears_a,indicator_a)
8969              $(compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
8970                  and variableIndicators(accNodesModel_a,accYears_a,indicator_a)),
8971          compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
8972          * accounting_indicator.l(accNodesModel_a,accYears_a,indicator_a))
8973   
8974      + sum((accNodesModel_a,accYears_a,indicator_a)
8975              $(compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)),
8976          compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
8977          * (sum((nodesModelToCalc,yearsToCalc,techs)
8978                  $(sameas(accNodesModel_a, nodesModelToCalc)
8979                      and sameas(accYears_a, yearsToCalc)),
8980                  indicator_accounting_detailed(indicator_a,nodesModelToCalc,yearsToCalc,techs))))
8981      ;
8982   
8983  indicator_accounting_comp(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
8984      $compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
8985      =
8986          compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
8987          * accounting_indicator.l(accNodesModel_a,accYears_a,indicator_a)
8988              $variableIndicators(accNodesModel_a,accYears_a,indicator_a)
8989   
8990          + compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
8991          * (sum((nodesModelToCalc,yearsToCalc,techs)
8992                  $(sameas(accNodesModel_a, nodesModelToCalc)
8993                      and sameas(accYears_a, yearsToCalc)),
8994                  indicator_accounting_detailed(indicator_a,nodesModelToCalc,yearsToCalc,techs)))
8995      ;
8996   
8997  indicator_accounting_ref(accNodesModel,accYears,indicator)
8998      $accounting_indicator.l(accNodesModel,accYears,indicator)
8999      = accounting_indicator.l(accNodesModel,accYears,indicator);
9000   
9001  * ==== link-specific indicator accounting ====
9002   
9003  indicator_accounting_links(indicator,nodesModelToCalc,nodesModelToCalc_a,linksModelToCalc,yearsToCalc,techs)
9004      $(transfer_incidenceModel(nodesModelToCalc,linksModelToCalc) < 0
9005          and transfer_incidenceModel(nodesModelToCalc_a,linksModelToCalc) > 0)
9006      =
9007      sum ((transfer_techs(techs),vintage)
9008                  $(transfer_availTech(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
9009                      and accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"useAnnuity") = 0),
9010          transfer_linksBuild.l(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
9011          * accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"perLinkBuild") )
9012   
9013      + sum ((years_a,transfer_techs(techs),vintage)
9014                  $(transfer_availTech(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
9015                      and accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"useAnnuity") = 1
9016                      and years_a.val + accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"amorTime") > yearsToCalc.val
9017                      and years_a.val <= yearsToCalc.val ),
9018          transfer_linksBuild.l(linksModelToCalc,years_a,transfer_techs,vintage)
9019          * accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"perLinkBuild")
9020          * accounting_annuityFactor_transferLink(indicator,linksModelToCalc,transfer_techs,vintage) )
9021   
9022      + sum ((transfer_techs(techs),vintage,link_types)
9023                  $(transfer_availTech(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
9024                      and accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"useAnnuity") = 0 ),
9025          transfer_linksBuild.l(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
9026          * transfer_lengthParam(linksModelToCalc,link_types,"length")
9027          * accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"perLengthBuild") )
9028   
9029      + sum ((years_a,transfer_techs(techs),vintage,link_types)
9030                  $(transfer_availTech(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
9031                      and accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"useAnnuity") = 1
9032                      and years_a.val + accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"amorTime") > yearsToCalc.val
9033                      and years_a.val <= yearsToCalc.val ),
9034          transfer_linksBuild.l(linksModelToCalc,years_a,transfer_techs,vintage)
9035          * transfer_lengthParam(linksModelToCalc,link_types,"length")
9036          * accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"perLengthBuild")
9037          * accounting_annuityFactor_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types) )
9038   
9039      + sum ((transfer_techs(techs),vintage)
9040                  $(transfer_usedTech(linksModelToCalc,yearsToCalc,transfer_techs,vintage)),
9041          transfer_linksDecom.l(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
9042          * accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"perLinkDecom")
9043   
9044          + transfer_linksTotal.l(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
9045          * accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"perLinkTotal")
9046   
9047          + sum (link_types,
9048              transfer_linksDecom.l(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
9049              * transfer_lengthParam(linksModelToCalc,link_types,"length")
9050              * accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"perLengthDecom")
9051   
9052              + transfer_linksTotal.l(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
9053              * transfer_lengthParam(linksModelToCalc,link_types,"length")
9054              * accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"perLengthTotal"))
9055   
9056          + sum (timeModelToCalc,
9057              transfer_flowAlong.l(timeModelToCalc,linksModelToCalc,yearsToCalc,transfer_techs,vintage)
9058              * timeLength(timeModelToCalc)
9059              * ( accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"perFlow")
9060                  + accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"perFlowAlong"))
9061   
9062              + transfer_flowAgainst.l(timeModelToCalc,linksModelToCalc,yearsToCalc,transfer_techs,vintage)
9063              * timeLength(timeModelToCalc)
9064              * ( accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"perFlow")
9065                  + accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"perFlowAgainst")))
9066   
9067          + sum ((timeModelToCalc, link_types),
9068              transfer_flowAlong.l(timeModelToCalc,linksModelToCalc,yearsToCalc,transfer_techs,vintage)
9069              * timeLength(timeModelToCalc)
9070              * transfer_lengthParam(linksModelToCalc,link_types,"length")
9071              * (accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"perFlow")
9072                  + accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"perFlowAlong"))
9073   
9074              + transfer_flowAgainst.l(timeModelToCalc,linksModelToCalc,yearsToCalc,transfer_techs,vintage)
9075              * timeLength(timeModelToCalc)
9076              * transfer_lengthParam(linksModelToCalc,link_types,"length")
9077              * (accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"perFlow")
9078                  + accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"perFlowAgainst")))
9079      );
9080   
9081   
9082  * == converter capacities ==
9083   
9084  converter_ratedInput(converter_techs,vintage,commodity)
9085      $(converter_techParam(converter_techs,vintage,"lifeTime") > 0)
9086      = smin(activity$converter_usedAct(converter_techs,vintage,activity),
9087              converter_coefficient(converter_techs,vintage,activity,commodity,"coefficient"));
9088  converter_ratedInput(converter_techs,vintage,commodity)
9089      $(converter_ratedInput(converter_techs,vintage,commodity) > 0)
9090      = 0;
9091   
9092  converter_ratedOutput(converter_techs,vintage,commodity)
9093      $(converter_techParam(converter_techs,vintage,"lifeTime") > 0)
9094      = smax(activity$converter_usedAct(converter_techs,vintage,activity),
9095              converter_coefficient(converter_techs,vintage,activity,commodity,"coefficient"));
9096  converter_ratedOutput(converter_techs,vintage,commodity)
9097      $(converter_ratedOutput(converter_techs,vintage,commodity) < 0)
9098      = 0;
9099   
9100  converter_ratedOutput_min(nodesModelToCalc,years,converter_techs(techs),commodity)
9101      $sum(vintage$(converter_usedTech(nodesModelToCalc,years,converter_techs,vintage)
9102          and converter_ratedOutput(converter_techs,vintage,commodity)), 1)
9103      = smin(vintage$(converter_usedTech(nodesModelToCalc,years,converter_techs,vintage)
9104              and converter_ratedOutput(converter_techs,vintage,commodity)),
9105          converter_ratedOutput(converter_techs,vintage,commodity));
9106   
9107  converter_ratedOutput_max(nodesModelToCalc,years,converter_techs(techs),commodity)
9108      $sum(vintage$(converter_usedTech(nodesModelToCalc,years,converter_techs,vintage)
9109          and converter_ratedOutput(converter_techs,vintage,commodity)), 1)
9110      = smax(vintage$(converter_usedTech(nodesModelToCalc,years,converter_techs,vintage)
9111              and converter_ratedOutput(converter_techs,vintage,commodity)),
9112          converter_ratedOutput(converter_techs,vintage,commodity));
9113   
9114  converter_units_ext(map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,years),converter_techs(techs),vintage,"build")
9115      = converter_unitsBuild.l(nodesModelToCalc,years,converter_techs,vintage);
9116   
9117  converter_units_ext(map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,years),converter_techs(techs),vintage,"decom")
9118      = converter_unitsDecom.l(nodesModelToCalc,years,converter_techs,vintage);
9119   
9120  converter_units_ext(map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,years),converter_techs(techs),vintage,"total")
9121      = converter_unitsTotal.l(nodesModelToCalc,years,converter_techs,vintage);
9122   
9123  converter_caps_ext(map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,years),converter_techs(techs),vintage,commodity,capType)
9124      $(converter_ratedOutput(converter_techs,vintage,commodity))
9125      = converter_units_ext(accNodesModel,nodesModelToCalc,accYears,years,techs,vintage,capType)
9126          * converter_ratedOutput(converter_techs,vintage,commodity);
9127   
9128  converter_caps_ext(map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,years),converter_techs(techs),vintage,commodity,"lowerLimit")
9129      $(converter_usedTech(nodesModelToCalc,years,converter_techs,vintage)
9130          and converter_capacityParam(nodesModelToCalc,years,converter_techs,"unitsLowerLimit") > 0
9131          and converter_ratedOutput_min(nodesModelToCalc,years,converter_techs,commodity))
9132      = converter_capacityParam(nodesModelToCalc,years,converter_techs,"unitsLowerLimit")
9133          * converter_ratedOutput_min(nodesModelToCalc,years,converter_techs,commodity);
9134   
9135  converter_caps_ext(map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,years),converter_techs(techs),vintage,commodity,"upperLimit")
9136      $(converter_usedTech(nodesModelToCalc,years,converter_techs,vintage)
9137          and converter_capacityParam(nodesModelToCalc,years,converter_techs,"unitsUpperLimit") < inf
9138          and converter_ratedOutput_min(nodesModelToCalc,years,converter_techs,commodity))
9139      = converter_capacityParam(nodesModelToCalc,years,converter_techs,"unitsUpperLimit")
9140          * converter_ratedOutput_max(nodesModelToCalc,years,converter_techs,commodity);
9141   
9142  converter_caps(accNodesModel,accYears,converter_techs(techs),commodity,capType)
9143      = sum((nodesModelToCalc,years,vintage)
9144              $(map_accNodesPostCalc(accNodesModel,nodesModelToCalc)
9145                  and map_accYearsPostCalc(accYears,years)),
9146          converter_caps_ext(accNodesModel,nodesModelToCalc,accYears,years,converter_techs,vintage,commodity,capType));
9147  option clear = converter_caps_ext;
9148   
9149  converter_units(accNodesModel,accYears,converter_techs(techs),vintage,capType)
9150      = sum((nodesModelToCalc,years)
9151              $(map_accNodesPostCalc(accNodesModel,nodesModelToCalc)
9152                  and map_accYearsPostCalc(accYears,years)),
9153          converter_units_ext(accNodesModel,nodesModelToCalc,accYears,years,converter_techs,vintage,capType));
9154  option clear = converter_units_ext;
9155   
9156   
9157  * ==== transfer capacities ====
9158   
9159  max_transfer_coefficient(transfer_techs(techs),commodity)
9160          $(smax(vintage, transfer_coefficient(transfer_techs,vintage,commodity,"coefficient")) > 0)
9161          = smax(vintage, transfer_coefficient(transfer_techs,vintage,commodity,"coefficient"));
9162   
9163  min_transfer_coefficient(transfer_techs(techs),commodity)
9164          $(smin(vintage, transfer_coefficient(transfer_techs,vintage,commodity,"coefficient")) > 0)
9165          = smin(vintage, transfer_coefficient(transfer_techs,vintage,commodity,"coefficient"));
9166   
9167  transfer_usedStartEnd(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,years,transfer_techs)
9168      $(transfer_incidenceModel(nodesModelToCalc_start,linksModel) < 0
9169          and transfer_incidenceModel(nodesModelToCalc_end,linksModel) > 0
9170          and sum(vintage$transfer_usedTech(linksModel,years,transfer_techs,vintage), 1))
9171      = yes;
9172   
9173  transfer_links(linksModel,years,transfer_techs,vintage,"build")
9174      = transfer_linksBuild.l(linksModel,years,transfer_techs,vintage);
9175   
9176  transfer_links(linksModel,years,transfer_techs,vintage,"decom")
9177      = transfer_linksDecom.l(linksModel,years,transfer_techs,vintage);
9178   
9179  transfer_links(linksModel,years,transfer_techs,vintage,"total")
9180      = transfer_linksTotal.l(linksModel,years,transfer_techs,vintage);
9181   
9182  transfer_caps(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,years,transfer_techs(techs),commodity,capType)
9183      $(transfer_usedStartEnd(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,years,transfer_techs)
9184          and sum(vintage$(transfer_usedTech(linksModel,years,transfer_techs,vintage)
9185                              and transfer_coefficient(transfer_techs,vintage,commodity,"coefficient")), 1))
9186      = sum(vintage,
9187          transfer_links(linksModel,years,transfer_techs,vintage,capType)
9188          * transfer_coefficient(transfer_techs,vintage,commodity,"coefficient"));
9189   
9190  transfer_caps(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,years,transfer_techs(techs),commodity,"lowerLimit")
9191      $(transfer_usedStartEnd(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,years,transfer_techs)
9192          and sum(vintage$(transfer_usedTech(linksModel,years,transfer_techs,vintage)
9193                              and transfer_coefficient(transfer_techs,vintage,commodity,"coefficient")), 1))
9194      = transfer_linksParam(linksModel,years,transfer_techs,'linksLowerLimit')
9195          * min_transfer_coefficient(transfer_techs,commodity);
9196   
9197  transfer_caps(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,years,transfer_techs(techs),commodity,"upperLimit")
9198      $(transfer_usedStartEnd(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,years,transfer_techs)
9199          and sum(vintage$(transfer_usedTech(linksModel,years,transfer_techs,vintage)
9200                              and transfer_coefficient(transfer_techs,vintage,commodity,"coefficient")), 1))
9201      = transfer_linksParam(linksModel,years,transfer_techs,'linksUpperLimit')
9202          * max_transfer_coefficient(transfer_techs,commodity);
9203   
9204   
9205  * ==== transfer flows ====
9206   
9207  transfer_flows(timeModelToCalc,nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs(techs),commodity)
9208      $transfer_usedStartEnd(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs)
9209      = sum(vintage,
9210          ( transfer_flowAlong.l(timeModelToCalc,linksModel,yearsToCalc,transfer_techs,vintage)
9211              - transfer_flowAgainst.l(timeModelToCalc,linksModel,yearsToCalc,transfer_techs,vintage) )
9212          * timeLength(timeModelToCalc)
9213          * transfer_coefficient(transfer_techs,vintage,commodity,"coefficient"));
9214   
9215  transfer_flows_annual(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs(techs),commodity,"netto")
9216      $transfer_usedStartEnd(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs)
9217      = sum(timeModelToCalc,
9218          transfer_flows(timeModelToCalc,nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs,commodity));
9219   
9220  transfer_flows_annual(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs(techs),commodity,"positive")
9221      $transfer_usedStartEnd(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs)
9222      = sum(timeModelToCalc
9223              $(transfer_flows(timeModelToCalc,nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs,commodity) > 0),
9224          transfer_flows(timeModelToCalc,nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs,commodity));
9225   
9226  transfer_flows_annual(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs(techs),commodity,"negative")
9227      $transfer_usedStartEnd(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs)
9228      = sum(timeModelToCalc
9229              $(transfer_flows(timeModelToCalc,nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs,commodity) < 0),
9230          transfer_flows(timeModelToCalc,nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs,commodity));
9231   
9232  transfer_flows_annual(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs(techs),commodity,"brutto")
9233      $transfer_usedStartEnd(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs)
9234      = transfer_flows_annual(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs,commodity,"positive")
9235          - transfer_flows_annual(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs,commodity,"negative");
9236   
9237  transfer_flows_annual(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs(techs),commodity,"flh")
9238      $(transfer_usedStartEnd(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs)
9239          and transfer_flows_annual(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs,commodity,"brutto") > 0
9240          and transfer_caps(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs,commodity,"total") > 0)
9241      = transfer_flows_annual(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs,commodity,"brutto")
9242          / transfer_caps(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs,commodity,"total");
9243   
9244  transfer_losses(timeModelToCalc,nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs(techs),commodity)
9245      $(transfer_usedStartEnd(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs)
9246          and (sum(vintage$transfer_coefPerFlow(transfer_techs,vintage,commodity,"coefPerFlow"), 1)
9247              or sum((vintage, link_types)$transfer_coefPerLength(transfer_techs,vintage,commodity,link_types,"coefPerLength"), 1)))
9248      = -1 * abs(sum(vintage,
9249          ( transfer_flowAlong.l(timeModelToCalc,linksModel,yearsToCalc,transfer_techs,vintage)
9250              - transfer_flowAgainst.l(timeModelToCalc,linksModel,yearsToCalc,transfer_techs,vintage) )
9251          * ( transfer_coefPerFlow(transfer_techs,vintage,commodity,"coefPerFlow")
9252              + sum(link_types,
9253                  transfer_coefPerLength(transfer_techs,vintage,commodity,link_types,"coefPerLength")
9254                  * transfer_lengthParam(linksModel,link_types,"length")))))
9255          * timeLength(timeModelToCalc);
9256   
9257  transfer_losses_annual(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs(techs),commodity,"netto")
9258      $(transfer_usedStartEnd(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs)
9259          and (sum(vintage$transfer_coefPerFlow(transfer_techs,vintage,commodity,"coefPerFlow"), 1)
9260              or sum((vintage, link_types)$transfer_coefPerLength(transfer_techs,vintage,commodity,link_types,"coefPerLength"), 1)))
9261      = sum(timeModelToCalc,
9262          transfer_losses(timeModelToCalc,nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs,commodity));
9263   
9264   
9265  * ==== storage capacities ====
9266   
9267  storage_size_max(nodesModelToCalc,years,storage_techs(techs),commodity)
9268      $sum(vintage$(storage_usedTech(nodesModelToCalc,years,storage_techs,vintage)
9269              and storage_usedCom(storage_techs,vintage,commodity)
9270              and storage_sizeParam(storage_techs,vintage,commodity,"size")), 1)
9271      = smax(vintage$(storage_usedTech(nodesModelToCalc,years,storage_techs,vintage)
9272              and storage_usedCom(storage_techs,vintage,commodity)
9273              and storage_sizeParam(storage_techs,vintage,commodity,"size")),
9274          storage_sizeParam(storage_techs,vintage,commodity,"size"));
9275   
9276  storage_size_min(nodesModelToCalc,years,storage_techs(techs),commodity)
9277      $sum(vintage$(storage_usedTech(nodesModelToCalc,years,storage_techs,vintage)
9278              and storage_usedCom(storage_techs,vintage,commodity)
9279              and storage_sizeParam(storage_techs,vintage,commodity,"size")), 1)
9280      = smin(vintage$(storage_usedTech(nodesModelToCalc,years,storage_techs,vintage)
9281              and storage_usedCom(storage_techs,vintage,commodity)
9282              and storage_sizeParam(storage_techs,vintage,commodity,"size")),
9283          storage_sizeParam(storage_techs,vintage,commodity,"size"));
9284   
9285  storage_units_ext(map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,years),storage_techs(techs),vintage,"build")
9286      $storage_usedTech(nodesModelToCalc,years,storage_techs,vintage)
9287      = storage_unitsBuild.l(nodesModelToCalc,years,storage_techs,vintage);
9288   
9289  storage_units_ext(map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,years),storage_techs(techs),vintage,"decom")
9290      $storage_usedTech(nodesModelToCalc,years,storage_techs,vintage)
9291      = storage_unitsDecom.l(nodesModelToCalc,years,storage_techs,vintage);
9292   
9293  storage_units_ext(map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,years),storage_techs(techs),vintage,"total")
9294      $storage_usedTech(nodesModelToCalc,years,storage_techs,vintage)
9295      = storage_unitsTotal.l(nodesModelToCalc,years,storage_techs,vintage);
9296   
9297  storage_caps_ext(map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,years),storage_techs(techs),vintage,commodity,capType)
9298      $storage_sizeParam(storage_techs,vintage,commodity,"size")
9299      = storage_units_ext(accNodesModel,nodesModelToCalc,accYears,years,storage_techs,vintage,capType)
9300          * storage_sizeParam(storage_techs,vintage,commodity,"size");
9301   
9302  storage_caps_ext(map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,years),storage_techs(techs),vintage,commodity,"lowerLimit")
9303      $(storage_usedTech(nodesModelToCalc,years,storage_techs,vintage)
9304          and storage_reservoirParam(nodesModelToCalc,years,storage_techs,"unitsLowerLimit") > 0
9305          and storage_size_min(nodesModelToCalc,years,storage_techs,commodity))
9306      = storage_reservoirParam(nodesModelToCalc,years,storage_techs,"unitsLowerLimit")
9307          * storage_size_min(nodesModelToCalc,years,storage_techs,commodity);
9308   
9309  storage_caps_ext(map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,years),storage_techs(techs),vintage,commodity,"upperLimit")
9310      $(storage_usedTech(nodesModelToCalc,years,storage_techs,vintage)
9311          and storage_reservoirParam(nodesModelToCalc,years,storage_techs,"unitsUpperLimit") < inf
9312          and storage_size_max(nodesModelToCalc,years,storage_techs,commodity))
9313      = storage_reservoirParam(nodesModelToCalc,years,storage_techs,"unitsUpperLimit")
9314          * storage_size_max(nodesModelToCalc,years,storage_techs,commodity);
9315   
9316  storage_caps_ext(map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,years),storage_techs(techs),vintage,commodity,"total_degraded")
9317      $(storage_usedCom(storage_techs,vintage,commodity)
9318          and (storage_techParam(storage_techs,vintage,"annualDegradation") > 0
9319               or storage_techParam(storage_techs,vintage,"usageDegradation")))
9320      = sum((degradation_states,yearsCom), (storage_degradationParam(storage_techs,vintage,degradation_states,"remainingCapacity")
9321                                      - (years.val - yearsCom.val) * storage_techParam(storage_techs,vintage,"annualDegradation"))
9322                                      * storage_unitsStateTracker.l(nodesModelToCalc,years,yearsCom,storage_techs,vintage,degradation_states)
9323                                      * storage_sizeParam(storage_techs,vintage,commodity,"size"));
9324   
9325  storage_caps(accNodesModel,accYears,storage_techs(techs),commodity,capType)
9326      = sum((nodesModelToCalc,years,vintage)
9327              $(map_accNodesPostCalc(accNodesModel,nodesModelToCalc)
9328                  and map_accYearsPostCalc(accYears,years)),
9329          storage_caps_ext(accNodesModel,nodesModelToCalc,accYears,years,storage_techs,vintage,commodity,capType));
9330  option clear = storage_caps_ext;
9331   
9332  storage_units(accNodesModel,accYears,storage_techs(techs),vintage,capType)
9333      = sum((nodesModelToCalc,years)
9334              $(map_accNodesPostCalc(accNodesModel,nodesModelToCalc)
9335                  and map_accYearsPostCalc(accYears,years)),
9336          storage_units_ext(accNodesModel,nodesModelToCalc,accYears,years,storage_techs,vintage,capType));
9337  option clear = storage_units_ext;
9338   
9339   
9340  * ==== storage levels and flows ====
9341   
9342  storage_flows_ext(timeModelToCalc,map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,yearsToCalc),storage_techs(techs),vintage,commodity)
9343      $(storage_usedTech(nodesModelToCalc,yearsToCalc,storage_techs,vintage) and balance_techComm(storage_techs,commodity))
9344      = storage_level.l(timeModelToCalc,nodesModelToCalc,yearsToCalc,storage_techs,vintage,commodity)
9345          - storage_level.l(timeModelToCalc--1,nodesModelToCalc,yearsToCalc,storage_techs,vintage,commodity)
9347      + storage_losses.l(timeModelToCalc,nodesModelToCalc,yearsToCalc,storage_techs,vintage,commodity)
9348          * timeLength(timeModelToCalc)
9350      ;
9351   
9352  storage_flows(timeModelToCalc,accNodesModel,accYears,storage_techs(techs),commodity)
9353      = sum((nodesModelToCalc,yearsToCalc,vintage)
9354              $(storage_usedTech(nodesModelToCalc,yearsToCalc,storage_techs,vintage) and balance_techComm(storage_techs,commodity)),
9355          storage_flows_ext(timeModelToCalc,accNodesModel,nodesModelToCalc,accYears,yearsToCalc,storage_techs,vintage,commodity));
9356  option clear = storage_flows_ext;
9357   
9358  storage_level_out_ext(timeModelToCalc,map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,yearsToCalc),storage_techs(techs),vintage,commodity)
9359      $(storage_usedTech(nodesModelToCalc,yearsToCalc,storage_techs,vintage) and balance_techComm(storage_techs,commodity))
9360      = storage_level.l(timeModelToCalc,nodesModelToCalc,yearsToCalc,storage_techs,vintage,commodity);
9361   
9362  storage_level_out(timeModelToCalc,accNodesModel,accYears,storage_techs(techs),commodity)
9363      = sum((nodesModelToCalc,yearsToCalc,vintage)
9364              $(storage_usedTech(nodesModelToCalc,yearsToCalc,storage_techs,vintage) and balance_techComm(storage_techs,commodity)),
9365          storage_level_out_ext(timeModelToCalc,accNodesModel,nodesModelToCalc,accYears,yearsToCalc,storage_techs,vintage,commodity));
9366  option clear = storage_level_out_ext;
9367   
9368  storage_flows_annual(accNodesModel,accYears,storage_techs(techs),commodity,"netto")
9369      = sum(timeModelToCalc,
9370          storage_flows(timeModelToCalc,accNodesModel,accYears,storage_techs,commodity));
9371   
9372  storage_flows_annual(accNodesModel,accYears,storage_techs(techs),commodity,"positive")
9373      = sum(timeModelToCalc
9374              $(storage_flows(timeModelToCalc,accNodesModel,accYears,storage_techs,commodity) > 0),
9375          storage_flows(timeModelToCalc,accNodesModel,accYears,storage_techs,commodity));
9376   
9377  storage_flows_annual(accNodesModel,accYears,storage_techs(techs),commodity,"negative")
9378      = sum(timeModelToCalc
9379              $(storage_flows(timeModelToCalc,accNodesModel,accYears,storage_techs,commodity) < 0),
9380          storage_flows(timeModelToCalc,accNodesModel,accYears,storage_techs,commodity));
9381   
9382  storage_flows_annual(accNodesModel,accYears,storage_techs(techs),commodity,"brutto")
9383      = storage_flows_annual(accNodesModel,accYears,storage_techs,commodity,"positive")
9384          + storage_flows_annual(accNodesModel,accYears,storage_techs,commodity,"negative");
9385   
9386  storage_flows_annual(accNodesModel,accYears,storage_techs(techs),commodity,"flh")
9387      $(storage_flows_annual(accNodesModel,accYears,storage_techs,commodity,"brutto") > 0
9388          and storage_caps(accNodesModel,accYears,storage_techs,commodity,"total") > 0)
9389      = storage_flows_annual(accNodesModel,accYears,storage_techs,commodity,"brutto")
9390          / storage_caps(accNodesModel,accYears,storage_techs,commodity,"total");
9391   
9392  storage_losses_out(timeModelToCalc,accNodesModel,accYears,storage_techs(techs),commodity)
9393      = sum((nodesModelToCalc,yearsToCalc,vintage)
9394              $(storage_losses.l(timeModelToCalc,nodesModelToCalc,yearsToCalc,storage_techs,vintage,commodity)
9395                  and map_accNodesPostCalc(accNodesModel,nodesModelToCalc)
9396                  and map_accYearsPostCalc(accYears,yearsToCalc)),
9397          storage_losses.l(timeModelToCalc,nodesModelToCalc,yearsToCalc,storage_techs,vintage,commodity)
9398          * timeLength(timeModelToCalc));
9399   
9400  storage_losses_annual(accNodesModel,accYears,storage_techs(techs),commodity,"netto")
9401      = sum(timeModelToCalc,
9402          storage_losses_out(timeModelToCalc,accNodesModel,accYears,storage_techs,commodity));
9403   
9404   
9405  * == commodity balance ==
9406   
9407  commodity_balance_ext(timeModelToCalc,map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,yearsToCalc),converter_techs(techs),vintage,commodity)
9408      $(converter_usedTech(nodesModelToCalc,yearsToCalc,converter_techs,vintage)
9409          and balance_usedConverter(nodesModelToCalc,yearsToCalc,commodity))
9410      = sum((activity)
9411              $(converter_coefficientProfile(timeModelToCalc,nodesModelToCalc,yearsToCalc,converter_techs,vintage,activity,commodity)),
9412          converter_activity.l(timeModelToCalc,nodesModelToCalc,yearsToCalc,converter_techs,vintage,activity)
9413              * timeLength(timeModelToCalc)
9414              * converter_coefficientProfile(timeModelToCalc,nodesModelToCalc,yearsToCalc,converter_techs,vintage,activity,commodity)
9415          + converter_unitsUsingActivity_MIP.l(timeModelToCalc,nodesModelToCalc,yearsToCalc,converter_techs,vintage,activity)
9416              * timeLength(timeModelToCalc)
9417              * converter_coefficient(converter_techs,vintage,activity,commodity,"constant"));
9418   
9419  commodity_balance_ext(timeModelToCalc,map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,yearsToCalc),storage_techs(techs),vintage,commodity)
9420      $(storage_usedTech(nodesModelToCalc,yearsToCalc,storage_techs,vintage)
9421          and storage_sizeParam(storage_techs,vintage,commodity,"size"))
9422      = commodity_balance_ext(timeModelToCalc,accNodesModel,nodesModelToCalc,accYears,yearsToCalc,storage_techs,vintage,commodity)
9423      + storage_level.l(timeModelToCalc--1,nodesModelToCalc,yearsToCalc,storage_techs,vintage,commodity)
9424          - storage_level.l(timeModelToCalc,nodesModelToCalc,yearsToCalc,storage_techs,vintage,commodity)
9425      - storage_losses.l(timeModelToCalc,nodesModelToCalc,yearsToCalc,storage_techs,vintage,commodity)
9426      * timeLength(timeModelToCalc);
9427   
9428  commodity_balance_ext(timeModelToCalc,map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,yearsToCalc),sourcesink_techs(techs),vintage,commodity)
9429      $(sourcesink_enabled(nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity)
9430          and sameas(yearsToCalc,vintage))
9431      = commodity_balance_ext(timeModelToCalc,accNodesModel,nodesModelToCalc,accYears,yearsToCalc,sourcesink_techs,vintage,commodity)
9432      + sourcesink_flow.l(timeModelToCalc,nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity)
9433      * timeLength(timeModelToCalc);
9434   
9435  commodity_balance_ext(timeModelToCalc,map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,yearsToCalc),transfer_techs(techs),vintage,commodity)
9436      $sum((linksModel)
9437          $(transfer_incidenceModel(nodesModelToCalc,linksModel)
9438                  and transfer_usedTech(linksModel,yearsToCalc,transfer_techs,vintage)
9439                  and transfer_coefficient(transfer_techs,vintage,commodity,"coefficient")), 1)
9440      = commodity_balance_ext(timeModelToCalc,accNodesModel,nodesModelToCalc,accYears,yearsToCalc,transfer_techs,vintage,commodity)
9441      + sum((linksModel)
9442              $(transfer_incidenceModel(nodesModelToCalc,linksModel)
9443                  and transfer_usedTech(linksModel,yearsToCalc,transfer_techs,vintage)
9444                  and transfer_coefficient(transfer_techs,vintage,commodity,"coefficient")),
9445   
9446              (transfer_flowAlong.l(timeModelToCalc,linksModel,yearsToCalc,transfer_techs,vintage)
9447                      $(transfer_incidenceModel(nodesModelToCalc,linksModel) > 0)
9448                + transfer_flowAgainst.l(timeModelToCalc,linksModel,yearsToCalc,transfer_techs,vintage)
9449                      $(transfer_incidenceModel(nodesModelToCalc,linksModel) < 0))
9450              * timeLength(timeModelToCalc)
9451              * transfer_coefficient(transfer_techs,vintage,commodity,"coefficient")
9452   
9453              - (transfer_flowAlong.l(timeModelToCalc,linksModel,yearsToCalc,transfer_techs,vintage)
9454                      $(transfer_incidenceModel(nodesModelToCalc,linksModel) < 0)
9455                + transfer_flowAgainst.l(timeModelToCalc,linksModel,yearsToCalc,transfer_techs,vintage)
9456                      $(transfer_incidenceModel(nodesModelToCalc,linksModel) > 0))
9457              * timeLength(timeModelToCalc)
9458              * transfer_coefficient(transfer_techs,vintage,commodity,"coefficient")
9459   
9460              + 0.5 * ((transfer_flowAlong.l(timeModelToCalc,linksModel,yearsToCalc,transfer_techs,vintage)
9461                          $(transfer_incidenceModel(nodesModelToCalc,linksModel) <> 0)
9462                      + transfer_flowAgainst.l(timeModelToCalc,linksModel,yearsToCalc,transfer_techs,vintage)
9463                          $(transfer_incidenceModel(nodesModelToCalc,linksModel) <> 0))
9464                      * timeLength(timeModelToCalc)
9465                      * ( transfer_coefPerFlow(transfer_techs,vintage,commodity,"coefPerFlow")
9466                          + sum(link_types,
9467                              transfer_coefPerLength(transfer_techs,vintage,commodity,link_types,"coefPerLength")
9468                              * transfer_lengthParam(linksModel,link_types,"length")))))
9469      ;
9470   
9471  commodity_balance(timeModelToCalc,accNodesModel,accYears,balance_techComm(techs,commodity))
9472      = sum((nodesModelToCalc,yearsToCalc,vintage)
9473              $(commodity_balance_ext(timeModelToCalc,accNodesModel,nodesModelToCalc,accYears,yearsToCalc,techs,vintage,commodity)
9474                  and map_accNodesPostCalc(accNodesModel,nodesModelToCalc)
9475                  and map_accYearsPostCalc(accYears,yearsToCalc)),
9476          commodity_balance_ext(timeModelToCalc,accNodesModel,nodesModelToCalc,accYears,yearsToCalc,techs,vintage,commodity));
9477  option clear = commodity_balance_ext;
9478   
9479   
9480  * ==== annual commodity sums ====
9481   
9482  commodity_balance_annual(accNodesModel,accYears,techs,commodity,"netto")
9483      = sum(timeModelToCalc,
9484          commodity_balance(timeModelToCalc,accNodesModel,accYears,techs,commodity));
9485   
9486  commodity_balance_annual(accNodesModel,accYears,techs,commodity,"positive")
9487      = sum(timeModelToCalc
9488              $(commodity_balance(timeModelToCalc,accNodesModel,accYears,techs,commodity) > 0),
9489          commodity_balance(timeModelToCalc,accNodesModel,accYears,techs,commodity));
9490   
9491  commodity_balance_annual(accNodesModel,accYears,techs,commodity,"negative")
9492      = sum(timeModelToCalc
9493              $(commodity_balance(timeModelToCalc,accNodesModel,accYears,techs,commodity) < 0),
9494          commodity_balance(timeModelToCalc,accNodesModel,accYears,techs,commodity));
9495   
9496  commodity_balance_annual(accNodesModel,accYears,techs,commodity,"brutto")
9497      = commodity_balance_annual(accNodesModel,accYears,techs,commodity,"positive")
9498          - commodity_balance_annual(accNodesModel,accYears,techs,commodity,"negative");
9499   
9500  commodity_balance_annual(accNodesModel,accYears,techs,commodity,"flh")
9501      $(commodity_balance_annual(accNodesModel,accYears,techs,commodity,"brutto") > 0
9502          and converter_caps(accNodesModel,accYears,techs,commodity,"total") > 0 )
9503      = commodity_balance_annual(accNodesModel,accYears,techs,commodity,"brutto")
9504          / converter_caps(accNodesModel,accYears,techs,commodity,"total");
9505   
9506   
9507  * ==== marginal information ====
9508   
9509  marginals_balance(timeModelToCalc,nodesModelToCalc,yearsToCalc,commodity)
9510    $balance_usedBalance(nodesModelToCalc,yearsToCalc,commodity)
9511    =
9512    Eq_balance_commodities.m(timeModelToCalc,nodesModelToCalc,yearsToCalc,commodity);
9513   
9514  marginals_sourcesink_profile(timeModelToCalc,nodesModelToCalc,yearsToCalc,sourcesink_techs(techs),commodity)
9515      $( sourcesink_flow.m(timeModelToCalc,nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity) <> 0 )
9516      =
9517      sourcesink_flow.m(timeModelToCalc,nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity);
9518   
9519  marginals_sourcesink_sum(nodesModelToCalc,yearsToCalc,sourcesink_techs(techs),commodity)
9520      $( ( Eq_sourcesink_useLowerSum.m(nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity)
9521          + Eq_sourcesink_useUpperSum.m(nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity)
9522          + Eq_sourcesink_useFixedSum.m(nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity) ) <> eps )
9523      =
9524      ( Eq_sourcesink_useLowerSum.m(nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity)
9525      + Eq_sourcesink_useUpperSum.m(nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity)
9526      + Eq_sourcesink_useFixedSum.m(nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity) );
9527   
9528  marginals_indicator_bounds(accNodesModel,accYears,indicator)
9529      $( accounting_indicator.m(accNodesModel,accYears,indicator) <> 0 )
9530      =
9531      accounting_indicator.m(accNodesModel,accYears,indicator);
9532   
9533   
9534  * ==== R2A postcalc information ====
9535   
9537   
9538   
9539  * ==== round profiles to reduce size of gdx ====
9540   
9542  commodity_balance(timeModelToCalc,accNodesModel,accYears,techs,commodity)
9543      $commodity_balance(timeModelToCalc,accNodesModel,accYears,techs,commodity)
9544      = round(commodity_balance(timeModelToCalc,accNodesModel,accYears,techs,commodity), 6);
9545   
9546  transfer_flows(timeModelToCalc,nodesModelToCalc,nodesModelToCalc_a,linksModel,yearsToCalc,transfer_techs,commodity)
9547      $transfer_flows(timeModelToCalc,nodesModelToCalc,nodesModelToCalc_a,linksModel,yearsToCalc,transfer_techs,commodity)
9548      = round(transfer_flows(timeModelToCalc,nodesModelToCalc,nodesModelToCalc_a,linksModel,yearsToCalc,transfer_techs,commodity), 6);
9549   
9550  transfer_losses(timeModelToCalc,nodesModelToCalc,nodesModelToCalc_a,linksModel,yearsToCalc,transfer_techs,commodity)
9551      $transfer_losses(timeModelToCalc,nodesModelToCalc,nodesModelToCalc_a,linksModel,yearsToCalc,transfer_techs,commodity)
9552      = round(transfer_losses(timeModelToCalc,nodesModelToCalc,nodesModelToCalc_a,linksModel,yearsToCalc,transfer_techs,commodity), 6);
9553   
9554  storage_flows(timeModelToCalc,accNodesModel,accYears,storage_techs,commodity)
9555      $storage_flows(timeModelToCalc,accNodesModel,accYears,storage_techs,commodity)
9556      = round(storage_flows(timeModelToCalc,accNodesModel,accYears,storage_techs,commodity), 6);
9557   
9558  storage_level_out(timeModelToCalc,accNodesModel,accYears,storage_techs,commodity)
9559      $storage_level_out(timeModelToCalc,accNodesModel,accYears,storage_techs,commodity)
9560      = round(storage_level_out(timeModelToCalc,accNodesModel,accYears,storage_techs,commodity), 6);
9561   
9562  marginals_balance(timeModelToCalc,nodesModelToCalc,yearsToCalc,commodity)
9563      $marginals_balance(timeModelToCalc,nodesModelToCalc,yearsToCalc,commodity)
9564      = round(marginals_balance(timeModelToCalc,nodesModelToCalc,yearsToCalc,commodity), 6);
9565   
9566  marginals_sourcesink_profile(timeModelToCalc,nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity)
9567      $marginals_sourcesink_profile(timeModelToCalc,nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity)
9568      = round(marginals_sourcesink_profile(timeModelToCalc,nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity), 6);
9570   
INCLUDE    C:\Local\REMix\framework\remix\framework\model\source\postcalc\writegdx.gms
9573  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
9574  * SPDX-License-Identifier: BSD-3-Clause
9575   
9578   
9579  execute_unload "C:\Local\REMix\remix_nz\output\will\01-battery-distributed_2020-2035-2050\result\01-battery-distributed_2020-2035-2050.gdx"
9580      metadata
9581      timeModel
9582      timeModelToCalc
9583      nodesModel
9584      linksModel
9585      indicator
9586      commodity
9587      techs
9588      accNodesModel
9589      accYears
9590   
9591      map_nodesModel
9592      map_linksModel
9593      map_nodesAccounting
9594   
9595      indicator_accounting
9596      indicator_accounting_ref
9597      indicator_accounting_comp
9598      indicator_accounting_detailed
9599      indicator_accounting_links
9600   
9601      converter_caps
9602      converter_units
9604   
9605      transfer_caps
9606      transfer_links
9607      transfer_flows
9608      transfer_flows_annual
9609      transfer_losses
9610      transfer_losses_annual
9611   
9612      storage_caps
9613      storage_units
9614      storage_flows
9615      storage_level_out
9616      storage_flows_annual
9617      storage_losses_out
9618      storage_losses_annual
9620   
9621      commodity_balance
9622      commodity_balance_annual
9623   
9624      marginals_balance
9625      marginals_sourcesink_profile
9626      marginals_sourcesink_sum
9627      marginals_indicator_bounds
9628   
9630      ;
GAMS 40.4.0  d540b52e Oct 3, 2022           WEX-WEI x86 64bit/MS Windows - 03/25/24 11:58:05 Page 2
G e n e r a l   A l g e b r a i c   M o d e l i n g   S y s t e m
Include File Summary


   SEQ   GLOBAL TYPE      PARENT   LOCAL  FILENAME

     1        1 INPUT          0       0  C:\Local\REMix\framework\remix\framework\model\run_remix.gms
     2       13 IF DEXIST      1      13  C:\Local\REMix\remix_nz\output\will\01-battery-distributed_2020-2035-2050\data\
     3       16 INCLUDE        1      16  .C:\Local\REMix\framework\remix\framework\model\source\metadata.gms
     4       25 CALL           3       9  .printf "remix_version \"0.9.7\"\n" > C:\Local\REMix\remix_nz\process\225a\\metadata
     5       26 CALL           3      10  .printf "gams_version \"40.4.0\"\n" >> C:\Local\REMix\remix_nz\process\225a\\metadata
     6       27 CALL           3      11  .printf "timestamp \"03/25/24 11:58:05\"\n" >> C:\Local\REMix\remix_nz\process\225a\\metadata
     7       29 CALL           3      13  .printf "framework_path " >> C:\Local\REMix\remix_nz\process\225a\\metadata
     8       31 CALL           3      15  .cd C:\Local\REMix\framework\remix\framework\model\source && cd| sed "s/^/\"/;s/$/\"/" >> C:\Local\REMix\remix_nz\process\225a\\metadata
     9       33 CALL           3      19  .printf "\n" >> C:\Local\REMix\remix_nz\process\225a\\metadata
    10       34 CALL           3      20  .printf "framework_hash " >> C:\Local\REMix\remix_nz\process\225a\\metadata
    11       36 CALL           3      22  .cd C:\Local\REMix\framework\remix\framework\model\source && git rev-parse HEAD >nul 2>&1 && git rev-parse HEAD >> C:\Local\REMix\remix_nz\process\225a\\metadata
    12       38 CALL           3      26  .printf "\n" >> C:\Local\REMix\remix_nz\process\225a\\metadata
    13       39 CALL           3      27  .printf "framework_branch " >> C:\Local\REMix\remix_nz\process\225a\\metadata
    14       41 CALL           3      29  .cd C:\Local\REMix\framework\remix\framework\model\source && git rev-parse --abbrev-ref HEAD >nul 2>&1 && git rev-parse --abbrev-ref HEAD | sed "s/^/\"/;s/$/\"/" >> C:\Local\REMix\remix_nz\process\225a\\metadata
    15       43 CALL           3      33  .printf "\n" >> C:\Local\REMix\remix_nz\process\225a\\metadata
    16       45 CALL           3      35  .printf "project_path " >> C:\Local\REMix\remix_nz\process\225a\\metadata
    17       47 CALL           3      37  .cd C:\Local\REMix\remix_nz\output\will\01-battery-distributed_2020-2035-2050\data\./ && cd| sed "s/^/\"/;s/$/\"/" >> C:\Local\REMix\remix_nz\process\225a\\metadata
    18       49 CALL           3      41  .printf "\n" >> C:\Local\REMix\remix_nz\process\225a\\metadata
    19       50 CALL           3      42  .printf "project_hash " >> C:\Local\REMix\remix_nz\process\225a\\metadata
    20       52 CALL           3      44  .cd C:\Local\REMix\remix_nz\output\will\01-battery-distributed_2020-2035-2050\data\./ && git rev-parse HEAD >nul 2>&1 && git rev-parse HEAD | sed "s/^/\"/;s/$/\"/" >> C:\Local\REMix\remix_nz\process\225a\\metadata
    21       54 CALL           3      48  .printf "\n" >> C:\Local\REMix\remix_nz\process\225a\\metadata
    22       55 CALL           3      49  .printf "project_branch " >> C:\Local\REMix\remix_nz\process\225a\\metadata
    23       57 CALL           3      51  .cd C:\Local\REMix\remix_nz\output\will\01-battery-distributed_2020-2035-2050\data\./ && git rev-parse --abbrev-ref HEAD >nul 2>&1 && git rev-parse --abbrev-ref HEAD | sed "s/^/\"/;s/$/\"/" >> C:\Local\REMix\remix_nz\process\225a\\metadata
    24       59 CALL           3      55  .printf "\n" >> C:\Local\REMix\remix_nz\process\225a\\metadata
    25       62 INCLUDE        3      58  ..C:\Local\REMix\remix_nz\process\225a\metadata
    26       79 INCLUDE        1      17  .C:\Local\REMix\framework\remix\framework\model\source\data_inheritance.gms
    27      123 INCLUDE        1      26  .C:\Local\REMix\framework\remix\framework\model\source\remix.gms
    28      145 INCLUDE       27      22  ..C:\Local\REMix\framework\remix\framework\model\source\sets.gms
    29      165 IF EXIST      28      20  ..C:\Local\REMix\remix_nz\process\225a\map_aggregatetimemodel.csv
    30      216 IF EXIST      28      97  ..C:\Local\REMix\remix_nz\process\225a\set_nodesmodel.csv
    31      216 INCLUDE       28      97  ...C:\Local\REMix\remix_nz\process\225a\set_nodesmodel.csv
    32      229 IF EXIST      28      99  ..C:\Local\REMix\remix_nz\process\225a\set_nodesmodel.csv
    33      236 IF EXIST      28     106  ..C:\Local\REMix\remix_nz\process\225a\set_nodesdata.csv
    34      236 INCLUDE       28     106  ...C:\Local\REMix\remix_nz\process\225a\set_nodesdata.csv
    35      249 IF EXIST      28     108  ..C:\Local\REMix\remix_nz\process\225a\set_nodesdata.csv
    36      255 IF EXIST      28     114  ..C:\Local\REMix\remix_nz\process\225a\set_nodesmodelsel.csv
    37      257 IF EXIST      28     116  ..C:\Local\REMix\remix_nz\process\225a\set_nodesmodelsel.csv
    38      259 IF EXIST      28     118  ..C:\Local\REMix\remix_nz\process\225a\set_nodesmodelsel.csv
    39      272 IF EXIST      28     131  ..C:\Local\REMix\remix_nz\process\225a\map_aggregatenodesmodel.csv
    40      272 INCLUDE       28     131  ...C:\Local\REMix\remix_nz\process\225a\map_aggregatenodesmodel.csv
    41      285 IF EXIST      28     133  ..C:\Local\REMix\remix_nz\process\225a\map_aggregatenodesmodel.csv
    42      288 IF EXIST      28     136  ..C:\Local\REMix\remix_nz\process\225a\map_aggregatenodesmodel.csv
    43      311 IF EXIST      28     159  ..C:\Local\REMix\remix_nz\process\225a\set_years.csv
    44      311 INCLUDE       28     159  ...C:\Local\REMix\remix_nz\process\225a\set_years.csv
    45      346 IF EXIST      28     161  ..C:\Local\REMix\remix_nz\process\225a\set_years.csv
    46      355 IF EXIST      28     170  ..C:\Local\REMix\remix_nz\process\225a\set_years.csv
    47      355 INCLUDE       28     170  ...C:\Local\REMix\remix_nz\process\225a\set_years.csv
    48      390 IF EXIST      28     172  ..C:\Local\REMix\remix_nz\process\225a\set_years.csv
    49      396 IF EXIST      28     178  ..C:\Local\REMix\remix_nz\process\225a\set_yearssel.csv
    50      396 INCLUDE       28     178  ...C:\Local\REMix\remix_nz\process\225a\set_yearssel.csv
    51      401 IF EXIST      28     180  ..C:\Local\REMix\remix_nz\process\225a\set_yearssel.csv
    52      419 IF EXIST      28     198  ..C:\Local\REMix\remix_nz\process\225a\set_activities.csv
    53      419 INCLUDE       28     198  ...C:\Local\REMix\remix_nz\process\225a\set_activities.csv
    54      427 IF EXIST      28     200  ..C:\Local\REMix\remix_nz\process\225a\set_activities.csv
    55      435 IF EXIST      28     208  ..C:\Local\REMix\remix_nz\process\225a\set_gridsegments.csv
    56      437 IF EXIST      28     210  ..C:\Local\REMix\remix_nz\process\225a\set_gridsegments.csv
    57      445 IF EXIST      28     218  ..C:\Local\REMix\remix_nz\process\225a\set_linksdata.csv
    58      445 INCLUDE       28     218  ...C:\Local\REMix\remix_nz\process\225a\set_linksdata.csv
    59      459 IF EXIST      28     220  ..C:\Local\REMix\remix_nz\process\225a\set_linksdata.csv
    60      477 IF EXIST      28     238  ..C:\Local\REMix\remix_nz\process\225a\set_link_types.csv
    61      477 INCLUDE       28     238  ...C:\Local\REMix\remix_nz\process\225a\set_link_types.csv
    62      481 IF EXIST      28     240  ..C:\Local\REMix\remix_nz\process\225a\set_link_types.csv
    63      490 IF EXIST      28     249  ..C:\Local\REMix\remix_nz\process\225a\set_commodities.csv
    64      490 INCLUDE       28     249  ...C:\Local\REMix\remix_nz\process\225a\set_commodities.csv
    65      498 IF EXIST      28     251  ..C:\Local\REMix\remix_nz\process\225a\set_commodities.csv
    66      507 IF EXIST      28     260  ..C:\Local\REMix\remix_nz\process\225a\set_indicators.csv
    67      507 INCLUDE       28     260  ...C:\Local\REMix\remix_nz\process\225a\set_indicators.csv
    68      516 IF EXIST      28     262  ..C:\Local\REMix\remix_nz\process\225a\set_indicators.csv
    69      525 IF EXIST      28     271  ..C:\Local\REMix\remix_nz\process\225a\set_converter_techs.csv
    70      525 INCLUDE       28     271  ...C:\Local\REMix\remix_nz\process\225a\set_converter_techs.csv
    71      544 IF EXIST      28     274  ..C:\Local\REMix\remix_nz\process\225a\set_storage_techs.csv
    72      544 INCLUDE       28     274  ...C:\Local\REMix\remix_nz\process\225a\set_storage_techs.csv
    73      549 IF EXIST      28     277  ..C:\Local\REMix\remix_nz\process\225a\set_transfer_techs.csv
    74      549 INCLUDE       28     277  ...C:\Local\REMix\remix_nz\process\225a\set_transfer_techs.csv
    75      553 IF EXIST      28     280  ..C:\Local\REMix\remix_nz\process\225a\set_sourcesink_techs.csv
    76      553 INCLUDE       28     280  ...C:\Local\REMix\remix_nz\process\225a\set_sourcesink_techs.csv
    77      564 IF EXIST      28     285  ..C:\Local\REMix\remix_nz\process\225a\set_converter_techs.csv
    78      564 INCLUDE       28     285  ...C:\Local\REMix\remix_nz\process\225a\set_converter_techs.csv
    79      581 IF EXIST      28     286  ..C:\Local\REMix\remix_nz\process\225a\set_converter_techs.csv
    80      585 IF EXIST      28     290  ..C:\Local\REMix\remix_nz\process\225a\set_storage_techs.csv
    81      585 INCLUDE       28     290  ...C:\Local\REMix\remix_nz\process\225a\set_storage_techs.csv
    82      588 IF EXIST      28     291  ..C:\Local\REMix\remix_nz\process\225a\set_storage_techs.csv
    83      593 IF EXIST      28     296  ..C:\Local\REMix\remix_nz\process\225a\set_transfer_techs.csv
    84      593 INCLUDE       28     296  ...C:\Local\REMix\remix_nz\process\225a\set_transfer_techs.csv
    85      595 IF EXIST      28     297  ..C:\Local\REMix\remix_nz\process\225a\set_transfer_techs.csv
    86      599 IF EXIST      28     301  ..C:\Local\REMix\remix_nz\process\225a\set_sourcesink_techs.csv
    87      599 INCLUDE       28     301  ...C:\Local\REMix\remix_nz\process\225a\set_sourcesink_techs.csv
    88      606 IF EXIST      28     302  ..C:\Local\REMix\remix_nz\process\225a\set_sourcesink_techs.csv
    89      616 IF EXIST      28     312  ..C:\Local\REMix\remix_nz\process\225a\set_degradation_states.csv
    90      618 IF EXIST      28     314  ..C:\Local\REMix\remix_nz\process\225a\set_degradation_states.csv
    91      627 IF EXIST      28     323  ..C:\Local\REMix\remix_nz\process\225a\set_soc.csv
    92      629 IF EXIST      28     325  ..C:\Local\REMix\remix_nz\process\225a\set_soc.csv
    93      645 IF EXIST      28     341  ..C:\Local\REMix\remix_nz\process\225a\transfer_linkstartend.csv
    94      645 INCLUDE       28     341  ...C:\Local\REMix\remix_nz\process\225a\transfer_linkstartend.csv
    95      672 IF EXIST      28     343  ..C:\Local\REMix\remix_nz\process\225a\transfer_linkstartend.csv
    96      686 BATINCLUDE    28     357  ...C:\Local\REMix\framework\remix\framework\model\source\battools\aggregateNodes.gms
    97      797 IF EXIST      28     466  ..C:\Local\REMix\remix_nz\process\225a\set_accnodes.csv
    98      799 IF EXIST      28     468  ..C:\Local\REMix\remix_nz\process\225a\set_accnodes.csv
    99      864 IF EXIST      28     533  ..C:\Local\REMix\remix_nz\process\225a\map_accnodes.csv
   100      866 IF EXIST      28     535  ..C:\Local\REMix\remix_nz\process\225a\map_accnodes.csv
   101      920 INCLUDE       27      23  ..C:\Local\REMix\framework\remix\framework\model\source\accounting\input.gms
   102      952 IF EXIST     101      32  ..C:\Local\REMix\remix_nz\process\225a\accounting_converterunits.csv
   103      952 INCLUDE      101      32  ...C:\Local\REMix\remix_nz\process\225a\accounting_converterunits.csv
   104     1033 IF EXIST     101      34  ..C:\Local\REMix\remix_nz\process\225a\accounting_converterunits.csv
   105     1047 IF EXIST     101      48  ..C:\Local\REMix\remix_nz\process\225a\accounting_converteractivity.csv
   106     1047 INCLUDE      101      48  ...C:\Local\REMix\remix_nz\process\225a\accounting_converteractivity.csv
   107     1074 IF EXIST     101      50  ..C:\Local\REMix\remix_nz\process\225a\accounting_converteractivity.csv
   108     1091 IF EXIST     101      67  ..C:\Local\REMix\remix_nz\process\225a\accounting_converterstartup.csv
   109     1093 IF EXIST     101      69  ..C:\Local\REMix\remix_nz\process\225a\accounting_converterstartup.csv
   110     1112 IF EXIST     101      88  ..C:\Local\REMix\remix_nz\process\225a\accounting_storageunits.csv
   111     1112 INCLUDE      101      88  ...C:\Local\REMix\remix_nz\process\225a\accounting_storageunits.csv
   112     1119 IF EXIST     101      90  ..C:\Local\REMix\remix_nz\process\225a\accounting_storageunits.csv
   113     1141 IF EXIST     101     112  ..C:\Local\REMix\remix_nz\process\225a\accounting_transferlinks.csv
   114     1141 INCLUDE      101     112  ...C:\Local\REMix\remix_nz\process\225a\accounting_transferlinks.csv
   115     1150 IF EXIST     101     114  ..C:\Local\REMix\remix_nz\process\225a\accounting_transferlinks.csv
   116     1172 IF EXIST     101     136  ..C:\Local\REMix\remix_nz\process\225a\accounting_transferperlength.csv
   117     1172 INCLUDE      101     136  ...C:\Local\REMix\remix_nz\process\225a\accounting_transferperlength.csv
   118     1187 IF EXIST     101     138  ..C:\Local\REMix\remix_nz\process\225a\accounting_transferperlength.csv
   119     1202 IF EXIST     101     153  ..C:\Local\REMix\remix_nz\process\225a\accounting_sourcesinkflow.csv
   120     1202 INCLUDE      101     153  ...C:\Local\REMix\remix_nz\process\225a\accounting_sourcesinkflow.csv
   121     1212 IF EXIST     101     155  ..C:\Local\REMix\remix_nz\process\225a\accounting_sourcesinkflow.csv
   122     1226 IF EXIST     101     169  ..C:\Local\REMix\remix_nz\process\225a\accounting_perindicator.csv
   123     1226 INCLUDE      101     169  ...C:\Local\REMix\remix_nz\process\225a\accounting_perindicator.csv
   124     1234 IF EXIST     101     171  ..C:\Local\REMix\remix_nz\process\225a\accounting_perindicator.csv
   125     1260 IF EXIST     101     197  ..C:\Local\REMix\remix_nz\process\225a\accounting_indicatorbounds.csv
   126     1260 INCLUDE      101     197  ...C:\Local\REMix\remix_nz\process\225a\accounting_indicatorbounds.csv
   127     1264 IF EXIST     101     199  ..C:\Local\REMix\remix_nz\process\225a\accounting_indicatorbounds.csv
   128     1283 IF EXIST     101     218  ..C:\Local\REMix\remix_nz\process\225a\accounting_indicatorbounds_links.csv
   129     1285 IF EXIST     101     220  ..C:\Local\REMix\remix_nz\process\225a\accounting_indicatorbounds_links.csv
   130     1291 BATINCLUDE   101     226  ...C:\Local\REMix\framework\remix\framework\model\source\battools\aggregateAccountingMean.gms
   131     1350 BATINCLUDE   101     227  ...C:\Local\REMix\framework\remix\framework\model\source\battools\aggregateAccountingMean.gms
   132     1393 BATINCLUDE   101     228  ...C:\Local\REMix\framework\remix\framework\model\source\battools\aggregateAccountingMean.gms
   133     1436 BATINCLUDE   101     229  ...C:\Local\REMix\framework\remix\framework\model\source\battools\aggregateAccountingMean.gms
   134     1495 BATINCLUDE   101     230  ...C:\Local\REMix\framework\remix\framework\model\source\battools\aggregateAccountingMean.gms
   135     1554 BATINCLUDE   101     231  ...C:\Local\REMix\framework\remix\framework\model\source\battools\aggregateAccountingMean.gms
   136     1613 BATINCLUDE   101     232  ...C:\Local\REMix\framework\remix\framework\model\source\battools\aggregateAccountingMean.gms
   137     2022 INCLUDE       27      24  ..C:\Local\REMix\framework\remix\framework\model\source\accounting\annuities.gms
   138     2096 INCLUDE       27      26  ..C:\Local\REMix\framework\remix\framework\model\source\methods\mga_pre.gms
   139     2102 INCLUDE       27      27  ..C:\Local\REMix\framework\remix\framework\model\source\methods\pareto_pre.gms
   140     2108 INCLUDE       27      28  ..C:\Local\REMix\framework\remix\framework\model\source\postcalc\declaration.gms
   141     2125 IF DEXIST    140      17  ..C:\Local\REMix\remix_nz\output\will\01-battery-distributed_2020-2035-2050\result\
   142     2327 INCLUDE       27      29  ..C:\Local\REMix\framework\remix\framework\model\source\loadgdx.gms
   143     2336 INCLUDE       27      31  ..C:\Local\REMix\framework\remix\framework\model\source\core\converter.gms
   144     2439 IF EXIST     143     103  ..C:\Local\REMix\remix_nz\process\225a\converter_capacityparam.csv
   145     2439 INCLUDE      143     103  ...C:\Local\REMix\remix_nz\process\225a\converter_capacityparam.csv
   146     3516 IF EXIST     143     105  ..C:\Local\REMix\remix_nz\process\225a\converter_capacityparam.csv
   147     3524 BATINCLUDE   143     113  ...C:\Local\REMix\framework\remix\framework\model\source\battools\aggregateNodes.gms
   148     3535 BATINCLUDE   143     114  ...C:\Local\REMix\framework\remix\framework\model\source\battools\aggregateNodes.gms
   149     3568 IF EXIST     143     137  ..C:\Local\REMix\remix_nz\process\225a\converter_techparam.csv
   150     3568 INCLUDE      143     137  ...C:\Local\REMix\remix_nz\process\225a\converter_techparam.csv
   151     3610 IF EXIST     143     139  ..C:\Local\REMix\remix_nz\process\225a\converter_techparam.csv
   152     3632 IF EXIST     143     161  ..C:\Local\REMix\remix_nz\process\225a\converter_activityprofile.csv
   153     3632 INCLUDE      143     161  ...C:\Local\REMix\remix_nz\process\225a\converter_activityprofile.csv
   154     4117 IF EXIST     143     162  ..C:\Local\REMix\remix_nz\process\225a\converter_activityprofile.csv
   155     4119 IF EXIST     143     164  ..C:\Local\REMix\remix_nz\process\225a\converter_activityprofile.csv
   156     4139 IF EXIST     143     184  ..C:\Local\REMix\remix_nz\process\225a\converter_coefficient.csv
   157     4139 INCLUDE      143     184  ...C:\Local\REMix\remix_nz\process\225a\converter_coefficient.csv
   158     4260 IF EXIST     143     185  ..C:\Local\REMix\remix_nz\process\225a\converter_coefficient.csv
   159     4261 IF EXIST     143     186  ..C:\Local\REMix\remix_nz\process\225a\converter_coefficient.csv
   160     4263 IF EXIST     143     188  ..C:\Local\REMix\remix_nz\process\225a\converter_coefficient.csv
   161     4275 IF EXIST     143     200  ..C:\Local\REMix\remix_nz\process\225a\converter_coefficientprofile.csv
   162     4276 IF EXIST     143     201  ..C:\Local\REMix\remix_nz\process\225a\converter_coefficientprofile.csv
   163     4278 IF EXIST     143     203  ..C:\Local\REMix\remix_nz\process\225a\converter_coefficientprofile.csv
   164     5214 INCLUDE       27      32  ..C:\Local\REMix\framework\remix\framework\model\source\core\storage.gms
   165     5305 IF EXIST     164      91  ..C:\Local\REMix\remix_nz\process\225a\storage_reservoirparam.csv
   166     5305 INCLUDE      164      91  ...C:\Local\REMix\remix_nz\process\225a\storage_reservoirparam.csv
   167     5375 IF EXIST     164      93  ..C:\Local\REMix\remix_nz\process\225a\storage_reservoirparam.csv
   168     5379 BATINCLUDE   164      97  ...C:\Local\REMix\framework\remix\framework\model\source\battools\aggregateNodes.gms
   169     5390 BATINCLUDE   164      98  ...C:\Local\REMix\framework\remix\framework\model\source\battools\aggregateNodes.gms
   170     5426 IF EXIST     164     124  ..C:\Local\REMix\remix_nz\process\225a\storage_techparam.csv
   171     5426 INCLUDE      164     124  ...C:\Local\REMix\remix_nz\process\225a\storage_techparam.csv
   172     5431 IF EXIST     164     126  ..C:\Local\REMix\remix_nz\process\225a\storage_techparam.csv
   173     5452 IF EXIST     164     147  ..C:\Local\REMix\remix_nz\process\225a\storage_sizeparam.csv
   174     5452 INCLUDE      164     147  ...C:\Local\REMix\remix_nz\process\225a\storage_sizeparam.csv
   175     5457 IF EXIST     164     149  ..C:\Local\REMix\remix_nz\process\225a\storage_sizeparam.csv
   176     5474 IF EXIST     164     166  ..C:\Local\REMix\remix_nz\process\225a\storage_socparam.csv
   177     5476 IF EXIST     164     168  ..C:\Local\REMix\remix_nz\process\225a\storage_socparam.csv
   178     5495 IF EXIST     164     187  ..C:\Local\REMix\remix_nz\process\225a\storage_degradationparam.csv
   179     5497 IF EXIST     164     189  ..C:\Local\REMix\remix_nz\process\225a\storage_degradationparam.csv
   180     5526 IF EXIST     164     218  ..C:\Local\REMix\remix_nz\process\225a\storage_levelprofile.csv
   181     5527 IF EXIST     164     219  ..C:\Local\REMix\remix_nz\process\225a\storage_levelprofile.csv
   182     5529 IF EXIST     164     221  ..C:\Local\REMix\remix_nz\process\225a\storage_levelprofile.csv
   183     6349 INCLUDE       27      33  ..C:\Local\REMix\framework\remix\framework\model\source\core\transfer.gms
   184     6416 IF EXIST     183      73  ..C:\Local\REMix\remix_nz\process\225a\transfer_linksparam.csv
   185     6416 INCLUDE      183      73  ...C:\Local\REMix\remix_nz\process\225a\transfer_linksparam.csv
   186     6455 IF EXIST     183      75  ..C:\Local\REMix\remix_nz\process\225a\transfer_linksparam.csv
   187     6471 IF EXIST     183      91  ..C:\Local\REMix\remix_nz\process\225a\transfer_flowprofile.csv
   188     6473 IF EXIST     183      93  ..C:\Local\REMix\remix_nz\process\225a\transfer_flowprofile.csv
   189     6493 IF EXIST     183     113  ..C:\Local\REMix\remix_nz\process\225a\transfer_techparam.csv
   190     6493 INCLUDE      183     113  ...C:\Local\REMix\remix_nz\process\225a\transfer_techparam.csv
   191     6499 IF EXIST     183     115  ..C:\Local\REMix\remix_nz\process\225a\transfer_techparam.csv
   192     6513 IF EXIST     183     129  ..C:\Local\REMix\remix_nz\process\225a\transfer_coefficient.csv
   193     6513 INCLUDE      183     129  ...C:\Local\REMix\remix_nz\process\225a\transfer_coefficient.csv
   194     6519 IF EXIST     183     131  ..C:\Local\REMix\remix_nz\process\225a\transfer_coefficient.csv
   195     6533 IF EXIST     183     145  ..C:\Local\REMix\remix_nz\process\225a\transfer_coefperflow.csv
   196     6533 INCLUDE      183     145  ...C:\Local\REMix\remix_nz\process\225a\transfer_coefperflow.csv
   197     6539 IF EXIST     183     147  ..C:\Local\REMix\remix_nz\process\225a\transfer_coefperflow.csv
   198     6553 IF EXIST     183     161  ..C:\Local\REMix\remix_nz\process\225a\transfer_coefperlength.csv
   199     6553 INCLUDE      183     161  ...C:\Local\REMix\remix_nz\process\225a\transfer_coefperlength.csv
   200     6562 IF EXIST     183     163  ..C:\Local\REMix\remix_nz\process\225a\transfer_coefperlength.csv
   201     6576 IF EXIST     183     177  ..C:\Local\REMix\remix_nz\process\225a\transfer_reactperlength.csv
   202     6578 IF EXIST     183     179  ..C:\Local\REMix\remix_nz\process\225a\transfer_reactperlength.csv
   203     6592 IF EXIST     183     193  ..C:\Local\REMix\remix_nz\process\225a\transfer_lengthparam.csv
   204     6592 INCLUDE      183     193  ...C:\Local\REMix\remix_nz\process\225a\transfer_lengthparam.csv
   205     6619 IF EXIST     183     195  ..C:\Local\REMix\remix_nz\process\225a\transfer_lengthparam.csv
   206     6633 IF EXIST     183     209  ..C:\Local\REMix\remix_nz\process\225a\transfer_gridsegments.csv
   207     6635 IF EXIST     183     211  ..C:\Local\REMix\remix_nz\process\225a\transfer_gridsegments.csv
   208     7232 INCLUDE       27      34  ..C:\Local\REMix\framework\remix\framework\model\source\core\sourcesink.gms
   209     7270 IF EXIST     208      38  ..C:\Local\REMix\remix_nz\process\225a\sourcesink_config.csv
   210     7270 INCLUDE      208      38  ...C:\Local\REMix\remix_nz\process\225a\sourcesink_config.csv
   211     7492 IF EXIST     208      40  ..C:\Local\REMix\remix_nz\process\225a\sourcesink_config.csv
   212     7496 BATINCLUDE   208      44  ...C:\Local\REMix\framework\remix\framework\model\source\battools\aggregateNodes.gms
   213     7524 IF EXIST     208      62  ..C:\Local\REMix\remix_nz\process\225a\sourcesink_profile.csv
   214     7524 INCLUDE      208      62  ...C:\Local\REMix\remix_nz\process\225a\sourcesink_profile.csv
   215     7602 IF EXIST     208      63  ..C:\Local\REMix\remix_nz\process\225a\sourcesink_profile.csv
   216     7603 IF EXIST     208      64  ..C:\Local\REMix\remix_nz\process\225a\sourcesink_profile.csv
   217     7605 IF EXIST     208      66  ..C:\Local\REMix\remix_nz\process\225a\sourcesink_profile.csv
   218     7625 IF EXIST     208      86  ..C:\Local\REMix\remix_nz\process\225a\sourcesink_annualsum.csv
   219     7625 INCLUDE      208      86  ...C:\Local\REMix\remix_nz\process\225a\sourcesink_annualsum.csv
   220     7738 IF EXIST     208      88  ..C:\Local\REMix\remix_nz\process\225a\sourcesink_annualsum.csv
   221     7741 BATINCLUDE   208      91  ...C:\Local\REMix\framework\remix\framework\model\source\battools\aggregateNodes.gms
   222     7922 INCLUDE       27      35  ..C:\Local\REMix\framework\remix\framework\model\source\core\balance.gms
   223     8058 INCLUDE       27      37  ..C:\Local\REMix\framework\remix\framework\model\source\accounting\equations.gms
   224     8480 INCLUDE       27      38  ..C:\Local\REMix\framework\remix\framework\model\source\optiframe.gms
   225     8521 INCLUDE       27      72  ..C:\Local\REMix\framework\remix\framework\model\source\methods\checkanno.gms
   226     8532 INCLUDE       27      75  ..C:\Local\REMix\framework\remix\framework\model\source\methods\pips.gms
   227     8541 INCLUDE       27      78  ..C:\Local\REMix\framework\remix\framework\model\source\methods\solve.gms
   228     8753 INCLUDE       27      81  ..C:\Local\REMix\framework\remix\framework\model\source\methods\pareto.gms
   229     8762 INCLUDE       27      84  ..C:\Local\REMix\framework\remix\framework\model\source\methods\mga.gms
   230     8771 INCLUDE       27      87  ..C:\Local\REMix\framework\remix\framework\model\source\methods\iternodes.gms
   231     8780 INCLUDE       27      90  ..C:\Local\REMix\framework\remix\framework\model\source\postcalc\definition.gms
   232     9572 INCLUDE       27      91  ..C:\Local\REMix\framework\remix\framework\model\source\postcalc\writegdx.gms


COMPILATION TIME     =       15.328 SECONDS    127 MB  40.4.0 d540b52e WEX-WEI
----      1 InitE                    0.016     0.016 SECS    128 MB 
GAMS 40.4.0  d540b52e Oct 3, 2022           WEX-WEI x86 64bit/MS Windows - 03/25/24 11:58:05 Page 3
G e n e r a l   A l g e b r a i c   M o d e l i n g   S y s t e m
E x e c u t i o n


----      1 ExecInit                 0.000     0.016 SECS    128 MB 
----    183 Other                    0.000     0.016 SECS    128 MB 
----    185 Other                    0.000     0.016 SECS    128 MB 
----    187 Other                    0.000     0.016 SECS    128 MB 
----    196 Other                    0.000     0.016 SECS    129 MB 
----    203 Assignment timeLength    0.000     0.016 SECS    130 MB   8760
----    290 Other                    0.000     0.016 SECS    130 MB 
----    294 Assignment validate_nodesModelToCalc    0.000     0.016 SECS    130 MB     11
----    296 Assignment validate_nodesModelToCalc    0.000     0.016 SECS    130 MB      0
----    299 Display                  0.000     0.016 SECS    130 MB 
----    300 Display                  0.000     0.016 SECS    130 MB 
----    301 Other                    0.000     0.016 SECS    130 MB 
----    411 Assignment yearsLen      0.000     0.016 SECS    130 MB      3
----    675 Other                    0.000     0.016 SECS    130 MB 
----    678 Assignment check_linkStartEnd    0.000     0.016 SECS    130 MB      0
----    683 Other                    0.000     0.016 SECS    130 MB 
----    695 Assignment transfer_linkStartEnd    0.000     0.016 SECS    130 MB     24
----    700 Assignment transfer_incidenceData    0.000     0.016 SECS    130 MB     12
----    707 Assignment transfer_incidenceData    0.000     0.016 SECS    130 MB     24
----    716 Assignment transfer_incidenceData_flip    0.000     0.016 SECS    130 MB     12
----    717 Assignment transfer_incidenceData_flip    0.000     0.016 SECS    130 MB     12
----    729 Other                    0.000     0.016 SECS    130 MB 
----    733 Assignment map_linksDataToNodes    0.000     0.016 SECS    130 MB     12
----    742 Assignment linkOrdNodesNodes    0.000     0.016 SECS    130 MB     24
----    749 Assignment map_linksModelToNodes    0.000     0.016 SECS    130 MB     24
----    756 Assignment links_aggregateTemp    0.000     0.016 SECS    130 MB     12
----    762 Other                    0.000     0.016 SECS    130 MB 
----    771 Other                    0.000     0.016 SECS    130 MB 
----    774 Assignment transfer_incidenceModel    0.000     0.016 SECS    130 MB     24
----    779 Assignment transfer_incidenceModel    0.000     0.016 SECS    130 MB     24
----    783 Assignment transfer_incidenceModel    0.000     0.016 SECS    130 MB     24
----    788 Other                    0.000     0.016 SECS    130 MB 
----    871 Assignment map_accNodes    0.000     0.016 SECS    130 MB      0
----    877 Assignment map_accNodes    0.000     0.016 SECS    130 MB     11
----    878 Assignment map_accNodes    0.000     0.016 SECS    130 MB     12
----    879 Assignment map_accNodes    0.000     0.016 SECS    130 MB     23
----    880 Assignment map_accLinks    0.000     0.016 SECS    130 MB     12
----    881 Assignment map_accLinks    0.000     0.016 SECS    130 MB     25
----    882 Assignment map_accYears    0.000     0.016 SECS    130 MB      3
----    883 Assignment map_accYears    0.000     0.016 SECS    130 MB     37
----    885 Assignment map_accNodesToCalc    0.000     0.016 SECS    130 MB      0
----    890 Assignment map_accNodesToCalc    0.000     0.016 SECS    130 MB     11
----    891 Assignment map_accNodesToCalc    0.000     0.016 SECS    130 MB     22
----    892 Assignment map_accLinksToCalc    0.000     0.016 SECS    130 MB     12
----    893 Assignment map_accLinksToCalc    0.000     0.016 SECS    130 MB     24
----    894 Assignment map_accYearsToCalc    0.000     0.016 SECS    130 MB      3
----    895 Assignment map_accYearsToCalc    0.000     0.016 SECS    130 MB      6
----    898 Assignment map_accNodesPostCalc    0.000     0.016 SECS    130 MB     22
----    899 Assignment map_accLinksPostCalc    0.000     0.016 SECS    130 MB     24
----    900 Assignment map_accYearsPostCalc    0.000     0.016 SECS    130 MB      3
----    901 Assignment map_accYearsPostCalc    0.000     0.016 SECS    130 MB     29
----    904 Other                    0.000     0.016 SECS    130 MB 
----   1300 Assignment accounting_converterUnitsNonzero    0.000     0.016 SECS    130 MB     39
----   1306 Assignment accounting_converterUnitsChk    0.000     0.016 SECS    130 MB      0
----   1319 Other                    0.000     0.016 SECS    130 MB 
----   1323 Assignment accounting_converterUnitsAgg    0.015     0.031 SECS    130 MB      0
----   1337 Loop                     0.000     0.031 SECS    130 MB 
----   1345 Assignment accounting_converterUnits    0.000     0.031 SECS    130 MB   1716
----   1359 Assignment accounting_converterActivityNonzero    0.000     0.031 SECS    130 MB     24
----   1366 Assignment accounting_converterActivityAgg    0.016     0.047 SECS    130 MB      0
----   1380 Loop                     0.031     0.078 SECS    130 MB 
----   1388 Assignment accounting_converterActivity    0.000     0.078 SECS    130 MB    264
----   1402 Assignment accounting_converterStartupNonzero    0.000     0.078 SECS    130 MB      0
----   1409 Assignment accounting_converterStartupAgg    0.000     0.078 SECS    130 MB      0
----   1423 Loop                     0.000     0.078 SECS    130 MB 
----   1431 Assignment accounting_converterStartup    0.000     0.078 SECS    130 MB      0
----   1445 Assignment accounting_storageUnitsNonzero    0.000     0.078 SECS    130 MB      2
----   1451 Assignment accounting_storageUnitsChk    0.000     0.078 SECS    130 MB      0
----   1464 Other                    0.000     0.078 SECS    130 MB 
----   1468 Assignment accounting_storageUnitsAgg    0.000     0.078 SECS    130 MB      0
----   1482 Loop                     0.000     0.078 SECS    130 MB 
----   1490 Assignment accounting_storageUnits    0.000     0.078 SECS    130 MB     88
----   1504 Assignment accounting_transferLinksNonzero    0.000     0.078 SECS    130 MB      6
----   1510 Assignment accounting_transferLinksChk    0.000     0.078 SECS    130 MB      0
----   1523 Other                    0.000     0.078 SECS    130 MB 
----   1527 Assignment accounting_transferLinksAgg    0.000     0.078 SECS    130 MB      0
----   1541 Loop                     0.000     0.078 SECS    130 MB 
----   1549 Assignment accounting_transferLinks    0.000     0.078 SECS    130 MB    180
----   1563 Assignment accounting_transferPerLengthNonzero    0.000     0.078 SECS    130 MB     12
----   1569 Assignment accounting_transferPerLengthChk    0.000     0.078 SECS    130 MB      0
----   1582 Other                    0.000     0.078 SECS    130 MB 
----   1586 Assignment accounting_transferPerLengthAgg    0.000     0.078 SECS    130 MB      0
----   1600 Loop                     0.000     0.078 SECS    130 MB 
----   1608 Assignment accounting_transferPerLength    0.000     0.078 SECS    130 MB    360
----   1622 Assignment accounting_sourcesinkFlowNonzero    0.000     0.078 SECS    130 MB      7
----   1629 Assignment accounting_sourcesinkFlowAgg    0.016     0.094 SECS    130 MB      0
----   1643 Loop                     0.000     0.094 SECS    130 MB 
----   1651 Assignment accounting_sourcesinkFlow    0.000     0.094 SECS    130 MB     77
----   1658 Assignment accounting_indicatorBounds_links    0.000     0.094 SECS    130 MB      0
----   1662 Assignment accounting_indicatorBounds_links    0.000     0.094 SECS    130 MB      0
----   1667 Assignment accounting_indicatorBounds    0.015     0.109 SECS    130 MB      2
----   1671 Assignment accounting_indicatorBounds    0.000     0.109 SECS    130 MB      2
----   1678 Assignment accounting_perIndicatorNonzero    0.000     0.109 SECS    130 MB      5
----   1683 Assignment accounting_perIndicatorAgg    0.000     0.109 SECS    130 MB      0
----   1698 Loop                     0.000     0.109 SECS    130 MB 
----   1716 Assignment accounting_perIndicator    0.000     0.109 SECS    130 MB   2040
----   1722 Assignment accounting_perIndicator    0.000     0.109 SECS    130 MB   2040
----   1731 Assignment activeIndicators    0.000     0.109 SECS    130 MB      1
----   1742 Assignment activeIndicators_links    0.000     0.109 SECS    130 MB      0
----   1749 Assignment variableIndicators    0.000     0.109 SECS    130 MB      0
----   1756 Assignment yearFactor    0.016     0.125 SECS    130 MB    504
----   1761 Assignment yearFactor    0.000     0.125 SECS    130 MB    504
----   1767 Assignment yearFactor    0.000     0.125 SECS    130 MB    504
----   1775 Assignment yearFactor    0.000     0.125 SECS    130 MB    504
----   1790 Assignment compoundIndicators    0.000     0.125 SECS    130 MB      1
----   1794 Other                    0.000     0.125 SECS    130 MB 
----   1798 Assignment compoundIndicatorsExt    0.000     0.125 SECS    130 MB      1
----   1801 Assignment compIndicators_pre    0.000     0.125 SECS    130 MB      1
----   1802 Assignment compIndicators_post    0.000     0.125 SECS    130 MB      1
----   1804 Other                    0.000     0.125 SECS    130 MB 
----   1805 While-Loop               0.000     0.125 SECS    130 MB 
----   1844 Other                    0.000     0.125 SECS    130 MB 
----   1847 Assignment compoundIndicatorsExt    0.000     0.125 SECS    130 MB    966
----   1856 Assignment compoundIndicatorsExt    0.000     0.125 SECS    130 MB    858
----   1864 Other                    0.000     0.125 SECS    130 MB 
----   1865 Assignment compoundIndicators    0.000     0.125 SECS    130 MB    274
----   1873 Assignment compoundIndicators    0.000     0.125 SECS    130 MB    274
----   1886 Assignment compoundIndicators    0.000     0.125 SECS    130 MB    198
----   1894 Assignment compoundIndicators    0.000     0.125 SECS    130 MB    198
----   1902 Assignment compoundIndicatorsFull    0.000     0.125 SECS    130 MB    336
----   1907 Other                    0.000     0.125 SECS    130 MB 
----   1911 Assignment compoundIndicatorsFullExt    0.000     0.125 SECS    130 MB   2856
----   1913 Assignment compIndicators_pre    0.000     0.125 SECS    130 MB      1
----   1914 Assignment compIndicators_post    0.000     0.125 SECS    130 MB      1
----   1916 Other                    0.000     0.125 SECS    130 MB 
----   1917 While-Loop               0.016     0.141 SECS    131 MB 
----   1956 Other                    0.000     0.141 SECS    131 MB 
----   1959 Assignment compoundIndicatorsFullExt    0.000     0.141 SECS    131 MB   5821
----   1968 Assignment compoundIndicatorsFullExt    0.000     0.141 SECS    131 MB   5379
----   1976 Other                    0.000     0.141 SECS    131 MB 
----   1977 Assignment compoundIndicatorsFull    0.000     0.141 SECS    131 MB   1834
----   1985 Assignment compoundIndicatorsFull    0.109     0.250 SECS    132 MB   1834
----   1998 Assignment compoundIndicatorsFull    0.000     0.250 SECS    131 MB   1584
----   2006 Assignment compoundIndicatorsFull    0.000     0.250 SECS    131 MB   1584
----   2014 Assignment opti_values    0.000     0.250 SECS    131 MB      1
----   2015 Assignment opti_sense    0.000     0.250 SECS    131 MB      1
----   2016 Other                    0.000     0.250 SECS    131 MB 
----   2018 Other                    0.000     0.250 SECS    131 MB 
----   2020 Other                    0.000     0.250 SECS    131 MB 
----   2028 Other                    0.000     0.250 SECS    131 MB 
----   2034 Assignment accounting_annuityFactor_converter    0.000     0.250 SECS    131 MB    429
----   2044 Other                    0.000     0.250 SECS    131 MB 
----   2050 Assignment accounting_annuityFactor_storage    0.000     0.250 SECS    131 MB     22
----   2060 Other                    0.000     0.250 SECS    131 MB 
----   2066 Assignment accounting_annuityFactor_transferLink    0.000     0.250 SECS    131 MB     36
----   2077 Other                    0.000     0.250 SECS    131 MB 
----   2083 Assignment accounting_annuityFactor_transferPerLength    0.000     0.250 SECS    131 MB   5544
----   2085 Assignment accounting_annuityFactor_transferPerLength    0.000     0.250 SECS    131 MB   5544
----   3533 Assignment converter_capacityParam    0.016     0.266 SECS    132 MB   1340
----   3544 Assignment converter_capacityParam    0.000     0.266 SECS    132 MB   1340
----   4122 Other                    0.546     0.812 SECS    323 MB 
----   4123 Clear      converter_activityProfileLoad    0.032     0.844 SECS    323 MB 
----   4281 Other                    0.000     0.844 SECS    323 MB 
----   4295 Assignment converter_availTech    0.109     0.953 SECS    323 MB   5159
----   4300 Assignment converter_availTech    0.000     0.953 SECS    323 MB   5101
----   4304 Assignment converter_availTech    0.000     0.953 SECS    323 MB    506
----   4309 Assignment converter_usedTech    0.063     1.016 SECS    323 MB   5357
----   4317 Assignment converter_decomTech    0.031     1.047 SECS    323 MB     92
----   4326 Assignment converter_decomTech    0.000     1.047 SECS    323 MB     96
----   4333 Other                    0.000     1.047 SECS    323 MB 
----   4336 Other                    0.000     1.047 SECS    323 MB 
----   4339 Other                    0.000     1.047 SECS    323 MB 
----   4342 Assignment converter_usedTechAct    0.000     1.047 SECS    323 MB   5632
----   4348 Assignment converter_useRampPos    0.000     1.047 SECS    323 MB      0
----   4354 Assignment converter_useRampNeg    0.000     1.047 SECS    323 MB      0
----   4364 Other                    0.078     1.125 SECS    323 MB 
----   4367 Assignment converter_activity_hasProfile    0.000     1.125 SECS    323 MB    207
----   4372 Other                    0.000     1.125 SECS    323 MB 
----   4375 Assignment converter_coefficient_hasProfile    0.094     1.219 SECS    323 MB      0
----   4381 Assignment converter_activityProfileIn_aggTime    6.765     7.984 SECS    396 MB  1318317
----   4386 Clear      converter_activityProfileIn    0.063     8.047 SECS    396 MB 
----   4390 Assignment converter_activityProfile    1.344     9.391 SECS    396 MB  2768160
----   4392 Assignment converter_activityProfile    0.937    10.328 SECS    396 MB  2768160
----   4397 Assignment converter_finiteUnitLimit    0.000    10.328 SECS    396 MB    416
----   4402 Assignment converter_infiniteUnitLimit    0.000    10.328 SECS    396 MB     21
----   4405 Assignment converter_activityProfile    6.719    17.047 SECS    527 MB  4973497
----   4415 Assignment converter_activityProfile    0.062    17.109 SECS    527 MB  4973497
----   4425 Clear      converter_activityProfileIn_aggTime    0.016    17.125 SECS    527 MB 
----   4428 Assignment converter_activityProfile    0.000    17.125 SECS    527 MB  4973497
----   4432 Assignment converter_activityProfile    0.000    17.125 SECS    527 MB  4973497
----   4440 Assignment converter_coefficientProfile    3.781    20.906 SECS  1,035 MB  7262040
----   4443 Assignment converter_coefficientProfile    0.000    20.906 SECS  1,035 MB  7262040
----   4454 Assignment converter_coefficientProfile    0.000    20.906 SECS  1,035 MB  7262040
----   4471 Assignment converter_coefficient    0.000    20.906 SECS  1,035 MB    292
----   4478 Assignment converter_hasMaxLoad    0.000    20.906 SECS  1,035 MB      0
----   4483 Assignment converter_hasMinLoad    0.000    20.906 SECS  1,035 MB      0
----   4488 Assignment converter_hasConstantFluxInActivity    0.000    20.906 SECS  1,035 MB      0
----   4499 Assignment converter_activityRequirements    0.000    20.906 SECS  1,035 MB      0
----   4501 Assignment converter_activityRequirements    0.000    20.906 SECS  1,035 MB     41
----   4507 Assignment converter_hasMinUptime    0.000    20.906 SECS  1,035 MB      0
----   4513 Assignment converter_hasMinDowntime    0.000    20.906 SECS  1,035 MB      0
----   4519 Assignment converter_techParam    0.000    20.906 SECS  1,035 MB     54
----   4527 Assignment converter_capacityParam    0.000    20.906 SECS  1,035 MB   1340
----   4530 Assignment converter_capacityParam    0.000    20.906 SECS  1,035 MB   1340
----   4537 Assignment converter_maxUptimeReq    0.000    20.906 SECS  1,035 MB      1
----   4539 Assignment uptimeSearchRange    0.000    20.906 SECS  1,035 MB      0
----   4542 Assignment converter_maxDowntimeReq    0.000    20.906 SECS  1,035 MB      1
----   4544 Assignment downtimeSearchRange    0.000    20.906 SECS  1,035 MB      0
----   4549 Assignment converter_unitsBuild    0.000    20.906 SECS  1,035 MB     72
----   4552 Assignment converter_unitsBuild    0.000    20.906 SECS  1,035 MB     72
----   4555 Assignment converter_unitsBuild    0.000    20.906 SECS  1,035 MB   6959
----   4560 Assignment converter_unitsDecom    0.000    20.906 SECS  1,035 MB      0
----   4569 Assignment converter_unitsDecom    0.000    20.906 SECS  1,035 MB     31
----   4585 Assignment converter_unitsDecom    0.000    20.906 SECS  1,035 MB     31
----   4592 Clear      converter_unitsPlanned    0.000    20.906 SECS  1,035 MB 
----   4593 Loop                     0.031    20.937 SECS  1,035 MB 
----   4605 Assignment converter_unitsTotal    0.000    20.937 SECS  1,035 MB    717
----   4610 Assignment converter_unitBoundsFixed    0.000    20.937 SECS  1,035 MB   4272
----   4620 Assignment converter_unitsBuild    0.000    20.937 SECS  1,035 MB   6959
----   4624 Assignment converter_unitsDecom    0.000    20.937 SECS  1,036 MB   3225
----   4628 Assignment converter_unitsTotal    0.000    20.937 SECS  1,036 MB   3911
----   4633 Assignment converter_unitsOnline_MIP    8.266    29.203 SECS  1,036 MB      0
----   4638 Assignment converter_unitsTotal_MIP    0.000    29.203 SECS  1,036 MB      0
----   4643 Assignment converter_unitsUsingActivity_MIP    0.469    29.672 SECS  1,036 MB      0
----   5388 Assignment storage_reservoirParam    0.000    29.672 SECS  1,036 MB    138
----   5399 Assignment storage_reservoirParam    0.000    29.672 SECS  1,036 MB    138
----   5434 Assignment storage_hasDegradation    0.000    29.672 SECS  1,036 MB      0
----   5480 Assignment soc_states    0.000    29.672 SECS  1,036 MB      0
----   5501 Assignment storage_degradationParam    0.000    29.672 SECS  1,036 MB      0
----   5503 Assignment storage_degradationParam    0.000    29.672 SECS  1,036 MB      0
----   5505 Assignment storage_degradationParam    0.000    29.672 SECS  1,036 MB      0
----   5511 Other                    0.000    29.672 SECS  1,036 MB 
----   5532 Other                    0.000    29.672 SECS  1,036 MB 
----   5533 Clear      storage_levelProfileLoad    0.000    29.672 SECS  1,036 MB 
----   5541 Assignment storage_usedTechSoCState    0.000    29.672 SECS  1,036 MB      0
----   5547 Assignment storage_validSoCRange    0.000    29.672 SECS  1,036 MB      0
----   5569 Assignment storage_bigM    0.000    29.672 SECS  1,036 MB     66
----   5570 Assignment storage_bigM    0.000    29.672 SECS  1,036 MB     66
----   5571 Assignment storage_bigM    0.000    29.672 SECS  1,036 MB     66
----   5576 Assignment representedYears    0.000    29.672 SECS  1,036 MB      7
----   5583 Assignment storage_availTech    0.015    29.687 SECS  1,036 MB    440
----   5588 Assignment storage_availTech    0.000    29.687 SECS  1,036 MB    406
----   5592 Assignment storage_availTech    0.000    29.687 SECS  1,036 MB     36
----   5597 Assignment storage_usedTech    0.000    29.687 SECS  1,036 MB    275
----   5605 Assignment storage_decomTech    0.000    29.687 SECS  1,036 MB      0
----   5614 Assignment storage_decomTech    0.000    29.687 SECS  1,036 MB      0
----   5621 Other                    0.000    29.687 SECS  1,036 MB 
----   5624 Assignment storage_usedTechCom    0.000    29.687 SECS  1,036 MB    275
----   5636 Other                    0.000    29.687 SECS  1,036 MB 
----   5639 Assignment storage_level_hasProfile    0.000    29.687 SECS  1,036 MB      0
----   5645 Assignment storage_levelProfile    0.204    29.891 SECS  1,075 MB  376680
----   5647 Assignment storage_levelProfile    0.125    30.016 SECS  1,075 MB  376680
----   5651 Assignment storage_finiteUnitLimit    0.000    30.016 SECS  1,075 MB     32
----   5654 Assignment storage_levelProfile    0.000    30.016 SECS  1,075 MB  376680
----   5665 Assignment storage_levelProfile    0.000    30.016 SECS  1,075 MB  376680
----   5678 Assignment storage_levelProfile    0.000    30.016 SECS  1,075 MB  376680
----   5682 Assignment storage_levelProfile    0.000    30.016 SECS  1,075 MB  376680
----   5688 Assignment storage_reservoirParam    0.000    30.016 SECS  1,075 MB    138
----   5691 Assignment storage_reservoirParam    0.000    30.016 SECS  1,075 MB    138
----   5699 Assignment storage_unitsBuild    0.000    30.016 SECS  1,075 MB      4
----   5702 Assignment storage_unitsBuild    0.000    30.016 SECS  1,075 MB      4
----   5705 Assignment storage_unitsBuild    0.000    30.016 SECS  1,075 MB   2211
----   5710 Assignment storage_unitsDecom    0.000    30.016 SECS  1,075 MB      0
----   5719 Assignment storage_unitsDecom    0.000    30.016 SECS  1,075 MB      0
----   5735 Assignment storage_unitsDecom    0.000    30.016 SECS  1,075 MB      0
----   5742 Clear      storage_unitsPlanned    0.000    30.016 SECS  1,075 MB 
----   5743 Loop                     0.000    30.016 SECS  1,075 MB 
----   5755 Assignment storage_unitsTotal    0.015    30.031 SECS  1,075 MB     80
----   5760 Assignment storage_unitBoundsFixed    0.000    30.031 SECS  1,075 MB    611
----   5770 Assignment storage_unitsBuild    0.000    30.031 SECS  1,075 MB   2211
----   5774 Assignment storage_unitsDecom    0.000    30.031 SECS  1,075 MB    160
----   5778 Assignment storage_unitsTotal    0.000    30.031 SECS  1,075 MB    240
----   5783 Assignment storage_unitsTotal_MIP    0.000    30.031 SECS  1,075 MB      0
----   6476 Other                    0.000    30.031 SECS  1,075 MB 
----   6477 Clear      transfer_flowProfileLoad    0.000    30.031 SECS  1,075 MB 
----   6638 Other                    0.000    30.031 SECS  1,075 MB 
----   6644 Assignment transfer_linksParam    0.000    30.031 SECS  1,075 MB     36
----   6652 Other                    0.000    30.031 SECS  1,075 MB 
----   6655 Assignment transfer_linksParamIn    0.000    30.031 SECS  1,075 MB    432
----   6659 Assignment transfer_linksParamIn    0.000    30.031 SECS  1,075 MB    828
----   6663 Assignment transfer_flowProfileIn    0.688    30.719 SECS  1,355 MB  3468960
----   6667 Assignment transfer_flowProfileIn    0.625    31.344 SECS  1,466 MB  6937920
----   6673 Assignment transfer_flowProfileIn_aggTime    0.000    31.344 SECS  1,466 MB      0
----   6678 Clear      transfer_flowProfileIn    0.062    31.406 SECS  1,466 MB 
----   6680 Assignment transfer_flowProfileIn_aggTime    0.110    31.516 SECS  1,466 MB  630720
----   6685 Assignment transfer_flowProfileIn_aggTime    0.015    31.531 SECS  1,466 MB  630720
----   6690 Assignment transfer_flowProfileIn_aggTime    0.000    31.531 SECS  1,466 MB  630720
----   6696 Assignment transfer_finiteLinkLimit    0.000    31.531 SECS  1,466 MB     36
----   6701 Assignment transfer_infiniteLinkLimit    0.000    31.531 SECS  1,466 MB      0
----   6706 Assignment transfer_lengthParam    0.000    31.531 SECS  1,466 MB     12
----   6711 Assignment transfer_gridSegments    0.000    31.531 SECS  1,466 MB      0
----   6715 Assignment transfer_dcopf_Xtech    0.000    31.531 SECS  1,466 MB      0
----   6727 Assignment transfer_hasflowProfile    0.000    31.531 SECS  1,466 MB      0
----   6732 Assignment transfer_linksParam    0.000    31.531 SECS  1,466 MB     36
----   6735 Assignment transfer_linksParam    0.000    31.531 SECS  1,466 MB     36
----   6744 Assignment transfer_availTech    0.000    31.531 SECS  1,466 MB     84
----   6749 Assignment transfer_availTech    0.000    31.531 SECS  1,466 MB     84
----   6753 Assignment transfer_availTech    0.000    31.531 SECS  1,466 MB     36
----   6758 Assignment transfer_usedTech    0.000    31.531 SECS  1,466 MB    144
----   6766 Assignment transfer_decomTech    0.031    31.562 SECS  1,466 MB      0
----   6775 Assignment transfer_decomTech    0.000    31.562 SECS  1,466 MB      0
----   6782 Assignment transfer_flowProfile    8.375    39.937 SECS  1,714 MB  10406880
----   6795 Assignment transfer_flowProfile    8.297    48.234 SECS  2,047 MB  20813760
----   6808 Assignment transfer_flowProfile    0.000    48.234 SECS  2,047 MB  20813760
----   6822 Assignment transfer_flowProfile    0.000    48.234 SECS  2,047 MB  20813760
----   6835 Clear      transfer_flowProfileIn_aggTime    0.000    48.234 SECS  2,047 MB 
----   6839 Assignment transfer_linksParam    0.000    48.234 SECS  2,047 MB     72
----   6852 Assignment transfer_linksParam    0.000    48.234 SECS  2,047 MB    108
----   6865 Assignment transfer_linksParam    0.000    48.234 SECS  2,047 MB    108
----   6879 Assignment transfer_linksParam    0.000    48.234 SECS  2,047 MB    108
----   6895 Assignment gridSegments_dcopf    0.000    48.234 SECS  2,047 MB      0
----   6903 Assignment checkGridSegmentCommodities    0.000    48.234 SECS  2,047 MB      0
----   6909 Assignment transfer_incidenceSegments    0.000    48.234 SECS  2,047 MB      0
----   6921 Assignment transfer_enableMIP    0.000    48.234 SECS  2,047 MB      1
----   6927 Assignment transfer_linksBuild    0.000    48.234 SECS  2,047 MB      0
----   6930 Assignment transfer_linksBuild    0.000    48.234 SECS  2,047 MB      0
----   6933 Assignment transfer_linksBuild    0.000    48.234 SECS  2,047 MB      0
----   6938 Assignment transfer_linksDecom    0.000    48.234 SECS  2,047 MB      0
----   6947 Assignment transfer_linksDecom    0.000    48.234 SECS  2,047 MB      0
----   6963 Assignment transfer_linksDecom    0.000    48.234 SECS  2,047 MB      0
----   6970 Clear      transfer_linksPlanned    0.000    48.234 SECS  2,047 MB 
----   6971 Loop                     0.000    48.234 SECS  2,047 MB 
----   6983 Assignment transfer_linksTotal    0.000    48.234 SECS  2,047 MB      0
----   6988 Assignment transfer_linkBoundsFixed    0.000    48.234 SECS  2,047 MB    360
----   6998 Assignment transfer_linksBuild    0.000    48.234 SECS  2,047 MB      0
----   7002 Assignment transfer_linksDecom    0.000    48.234 SECS  2,047 MB     72
----   7006 Assignment transfer_linksTotal    0.000    48.234 SECS  2,047 MB     72
----   7011 Assignment transfer_linksTotal_MIP    0.000    48.234 SECS  2,047 MB      0
----   7178 Assignment transfer_usedOpf    0.000    48.234 SECS  2,047 MB      0
----   7184 Other                    0.000    48.234 SECS  2,047 MB 
----   7187 Other                    0.000    48.234 SECS  2,047 MB 
----   7505 Assignment sourcesink_config    0.047    48.281 SECS  2,047 MB    329
----   7609 Other                    0.094    48.375 SECS  2,072 MB 
----   7610 Clear      sourcesink_profileLoad    0.000    48.375 SECS  2,072 MB 
----   7750 Assignment sourcesink_annualSum    0.016    48.391 SECS  2,072 MB     33
----   7760 Assignment sourcesink_usesProfileScaling    0.000    48.391 SECS  2,072 MB      0
----   7762 Assignment sourcesink_usesProfileScaling    0.000    48.391 SECS  2,072 MB      0
----   7764 Assignment sourcesink_usesProfileScaling    0.000    48.391 SECS  2,072 MB      0
----   7768 Assignment sourcesink_ProfileSum    0.000    48.391 SECS  2,072 MB      0
----   7773 Assignment sourcesink_ProfileAbsSum    0.000    48.391 SECS  2,072 MB      0
----   7778 Assignment sourcesink_ProfileScaleError    0.000    48.391 SECS  2,072 MB      0
----   7784 Other                    0.000    48.391 SECS  2,072 MB 
----   7789 Assignment sourcesink_scalingFactor    0.000    48.391 SECS  2,072 MB      0
----   7797 Assignment sourcesink_profileIn    0.000    48.391 SECS  2,072 MB  665592
----   7807 Other                    0.015    48.406 SECS  2,072 MB 
----   7810 Assignment sourcesink_usesProfile    0.000    48.406 SECS  2,072 MB     76
----   7817 Assignment sourcesink_profileIn_aggTime    3.297    51.703 SECS  2,129 MB  665592
----   7822 Clear      sourcesink_profileIn    0.016    51.719 SECS  2,129 MB 
----   7826 Assignment sourcesink_profile    0.687    52.406 SECS  2,135 MB  665592
----   7830 Clear      sourcesink_profileIn_aggTime    0.016    52.422 SECS  2,135 MB 
----   7833 Other                    0.000    52.422 SECS  2,135 MB 
----   7841 Assignment sourcesink_flow    1.594    54.016 SECS  2,146 MB  289080
----   7847 Assignment sourcesink_flow    1.562    55.578 SECS  2,170 MB  867240
----   7853 Assignment sourcesink_flow    0.438    56.016 SECS  2,200 MB  1533000
----   7858 Clear      sourcesink_profile    0.015    56.031 SECS  2,200 MB 
----   7937 Assignment balance_techComm    0.000    56.031 SECS  2,200 MB     18
----   7939 Assignment balance_techComm    0.000    56.031 SECS  2,200 MB     19
----   7941 Assignment balance_techComm    0.000    56.031 SECS  2,200 MB     20
----   7943 Assignment balance_techComm    0.000    56.031 SECS  2,200 MB     26
----   7952 Assignment balance_usedConverter    0.000    56.031 SECS  2,200 MB    869
----   7957 Assignment balance_usedStorage    0.000    56.031 SECS  2,200 MB    275
----   7962 Assignment balance_usedTransfer    0.000    56.031 SECS  2,200 MB    363
----   7967 Other                    0.000    56.031 SECS  2,200 MB 
----   7969 Assignment balance_usedBalance    0.000    56.031 SECS  2,200 MB    958
----   8076 Assignment accounting_indicator    0.000    56.031 SECS  2,200 MB      0
----   8080 Assignment accounting_indicator    0.000    56.031 SECS  2,200 MB      0
----   8084 Assignment accounting_indicator    0.000    56.031 SECS  2,200 MB      0
----   8088 Assignment accounting_indicator    0.000    56.031 SECS  2,200 MB      0
----   8093 Assignment accounting_indicator_links    0.000    56.031 SECS  2,200 MB      0
----   8097 Assignment accounting_indicator_links    0.000    56.031 SECS  2,200 MB      0
----   8101 Assignment accounting_indicator_links    0.000    56.031 SECS  2,200 MB      0
----   8498 Other                    0.000    56.031 SECS  2,200 MB 
----   8593 IF-ELSE                  0.000    56.031 SECS  2,200 MB 
----   8601 Other                    0.000    56.031 SECS  2,200 MB 
----   8602 Other                    0.000    56.031 SECS  2,200 MB 
----   8603 Other                    0.000    56.031 SECS  2,200 MB 
----   8604 Assignment remix         0.000    56.031 SECS  2,200 MB     75
----   8605 Assignment remix         0.000    56.031 SECS  2,200 MB     75
----   8606 Assignment remix         0.000    56.031 SECS  2,200 MB     75
----   8607 Assignment remix         0.000    56.031 SECS  2,200 MB     75
----   8616 Put                      0.000    56.031 SECS  2,200 MB 
----   8618 Put                      0.000    56.031 SECS  2,200 MB 
----   8619 Put                      0.000    56.031 SECS  2,200 MB 
----   8620 Put                      0.000    56.031 SECS  2,200 MB 
----   8622 Put                      0.000    56.031 SECS  2,200 MB 
----   8623 Put                      0.000    56.031 SECS  2,200 MB 
----   8624 Put                      0.000    56.031 SECS  2,200 MB 
----   8625 Put                      0.000    56.031 SECS  2,200 MB 
----   8626 Put                      0.000    56.031 SECS  2,200 MB 
----   8627 Put                      0.000    56.031 SECS  2,200 MB 
----   8628 Put                      0.000    56.031 SECS  2,200 MB 
----   8629 Put                      0.000    56.031 SECS  2,200 MB 
----   8631 Put                      0.000    56.031 SECS  2,200 MB 
----   8632 Put                      0.000    56.031 SECS  2,200 MB 
----   8633 Put                      0.000    56.031 SECS  2,200 MB 
----   8634 Put                      0.000    56.031 SECS  2,200 MB 
----   8635 Put                      0.000    56.031 SECS  2,200 MB 
----   8636 Put                      0.000    56.031 SECS  2,200 MB 
----   8639 Put                      0.000    56.031 SECS  2,200 MB 
GAMS 40.4.0  d540b52e Oct 3, 2022           WEX-WEI x86 64bit/MS Windows - 03/25/24 11:58:05 Page 4
G e n e r a l   A l g e b r a i c   M o d e l i n g   S y s t e m
Model Analysis      SOLVE remix Using MIP From line 8738


----   8738 Solve Init remix         0.000    56.094 SECS  2,222 MB 
----   4723 Equation   Eq_converter_unitsBalance    0.000    56.094 SECS  2,222 MB    153
----   4745 Equation   Eq_converter_unitsFixedDecom    0.000    56.094 SECS  2,222 MB      4
----   4761 Equation   Eq_converter_unitsFreeDecom    0.000    56.094 SECS  2,222 MB      0
----   4791 Equation   Eq_converter_unitsUpperLimit    0.000    56.094 SECS  2,222 MB    146
----   4805 Equation   Eq_converter_unitsLowerLimit    0.000    56.094 SECS  2,222 MB      0
----   4815 Equation   Eq_converter_unitsFixedLimit    0.000    56.094 SECS  2,222 MB      0
----   4827 Equation   Eq_converter_unitsTotalMIP    0.000    56.094 SECS  2,222 MB      0
----   4838 Equation   Eq_converter_unitsOnlineMIP    0.281    56.375 SECS  2,222 MB      0
----   4868 Equation   Eq_converter_activityUpperLimit    2.281    58.656 SECS  2,951 MB  1175279
----   4849 Equation   Eq_converter_activityLowerLimit    0.500    59.156 SECS  2,951 MB      0
----   4883 Equation   Eq_converter_activityFixedLimit    1.047    60.203 SECS  2,964 MB  165001
----   4900 Equation   Eq_converter_rampPos    0.000    60.203 SECS  2,964 MB      0
----   4913 Equation   Eq_converter_rampNeg    0.000    60.203 SECS  2,964 MB      0
----   4926 Equation   Eq_converter_rampLimit    0.516    60.719 SECS  2,964 MB      0
----   4945 Equation   Eq_converter_unitsOnline    1.875    62.594 SECS  3,466 MB  1340280
----   4957 Equation   Eq_converter_unitsOnlineUC    0.297    62.891 SECS  3,466 MB      0
----   4970 Equation   Eq_converter_activityStartups    0.328    63.219 SECS  3,466 MB      0
----   4982 Equation   Eq_converter_activityShutdowns    0.328    63.547 SECS  3,466 MB      0
----   4995 Equation   Eq_converter_limitStartups    0.000    63.547 SECS  3,466 MB      0
----   5010 Equation   Eq_converter_minUptime    0.328    63.875 SECS  3,466 MB      0
----   5024 Equation   Eq_converter_minDowntime    0.359    64.234 SECS  3,466 MB      0
----   5043 Equation   Eq_converter_activityUpperLimitDetailedPartLoadMinReq    0.047    64.281 SECS  3,466 MB      0
----   5062 Equation   Eq_converter_activityUpperLimitDetailedPartLoadMaxReq    0.047    64.328 SECS  3,466 MB      0
----   5086 Equation   Eq_converter_activityLowerLimitDetailedPartLoadMinReq    0.047    64.375 SECS  3,466 MB      0
----   5108 Equation   Eq_converter_activityUpperLimitPartLoad    0.031    64.406 SECS  3,466 MB      0
----   5124 Equation   Eq_converter_activityLowerLimitPartLoad    0.016    64.422 SECS  3,466 MB      0
----   5139 Equation   Eq_converter_noOnlineIdle    0.015    64.437 SECS  3,466 MB      0
----   5154 Equation   Eq_converter_noOnlineIdleDetailedPartLoad    0.032    64.469 SECS  3,466 MB      0
----   5168 Equation   Eq_converter_activityModeLimit    0.015    64.484 SECS  3,466 MB      0
----   5866 Equation   Eq_storage_unitsBalance    0.000    64.484 SECS  3,466 MB     18
----   5888 Equation   Eq_storage_unitsFixedDecom    0.000    64.484 SECS  3,466 MB      0
----   5904 Equation   Eq_storage_unitsFreeDecom    0.000    64.484 SECS  3,466 MB      0
----   5934 Equation   Eq_storage_unitsLowerLimit    0.000    64.484 SECS  3,466 MB      0
----   5945 Equation   Eq_storage_unitsUpperLimit    0.000    64.484 SECS  3,466 MB     18
----   5995 Equation   Eq_storage_levelUpperLimit_degradation    0.032    64.516 SECS  3,466 MB      0
----   5957 Equation   Eq_storage_unitsTotalMIP    0.000    64.516 SECS  3,466 MB      0
----   5968 Equation   Eq_storage_levelLowerLimit    0.046    64.562 SECS  3,466 MB      0
----   5981 Equation   Eq_storage_levelUpperLimit    0.344    64.906 SECS  3,466 MB  157680
----   6057 Equation   Eq_storage_losses    0.406    65.312 SECS  3,466 MB  157680
----   6012 Equation   Eq_storage_unitsBalanceStates    0.000    65.312 SECS  3,466 MB      0
----   6024 Equation   Eq_storage_unitsUpperLimitPerState    0.000    65.312 SECS  3,466 MB      0
----   6039 Equation   Eq_storage_unitsStatesNoRecovery    0.000    65.312 SECS  3,466 MB      0
----   6082 Equation   Eq_storage_cRateLimit    0.063    65.375 SECS  3,466 MB      0
----   6096 Equation   Eq_storage_eRateLimit    0.062    65.437 SECS  3,466 MB      0
----   6110 Equation   Eq_storage_charge    0.063    65.500 SECS  3,466 MB      0
----   6122 Equation   Eq_storage_discharge    0.062    65.562 SECS  3,466 MB      0
----   6134 Equation   Eq_storage_levelStateSum    0.047    65.609 SECS  3,466 MB      0
----   6145 Equation   Eq_storage_levelUpperLimitPerAge    1.844    67.453 SECS  3,466 MB      0
----   6162 Equation   Eq_storage_chargeBasedDegradationDistribution    0.000    67.453 SECS  3,466 MB      0
----   6178 Equation   Eq_storage_chargingPerAge    1.672    69.125 SECS  3,466 MB      0
----   6190 Equation   Eq_storage_unitsDecomStateSum    0.000    69.125 SECS  3,466 MB      0
----   6202 Equation   Eq_storage_unitsDegradation    0.000    69.125 SECS  3,466 MB      0
----   6220 Equation   Eq_storage_unitsDegradation_onlyOneRange    0.000    69.125 SECS  3,466 MB      0
----   6231 Equation   Eq_storage_unitsSoC    0.016    69.141 SECS  3,466 MB      0
----   6257 Equation   Eq_storage_unitsSoC_sum    0.015    69.156 SECS  3,466 MB      0
----   6248 Equation   Eq_storage_unitsSoC_onlyOneRange    0.016    69.172 SECS  3,466 MB      0
----   6268 Equation   Eq_storage_levelSoC    0.000    69.172 SECS  3,466 MB      0
----   6281 Equation   Eq_storage_cRateLimit_SoC    5.719    74.891 SECS  3,466 MB      0
----   6297 Equation   Eq_storage_eRateLimit_SoC    5.750    80.641 SECS  3,466 MB      0
----   7052 Equation   Eq_transfer_linksBalance    0.000    80.641 SECS  3,466 MB     12
----   7074 Equation   Eq_transfer_linksFixedDecom    0.000    80.641 SECS  3,466 MB      0
----   7090 Equation   Eq_transfer_linksFreeDecom    0.000    80.641 SECS  3,466 MB      0
----   7120 Equation   Eq_transfer_linksLowerLimit    0.000    80.641 SECS  3,466 MB      0
----   7131 Equation   Eq_transfer_linksUpperLimit    0.000    80.641 SECS  3,466 MB     12
----   7143 Equation   Eq_transfer_linksTotalMIP    0.000    80.641 SECS  3,466 MB      0
----   7154 Equation   Eq_transfer_flowAlongUpperLimit    0.328    80.969 SECS  3,466 MB  105120
----   7167 Equation   Eq_transfer_flowAgainstUpperLimit    0.328    81.297 SECS  3,466 MB  105120
----   7195 Equation   Eq_transfer_dcopf_angleFlows    0.000    81.297 SECS  3,466 MB      0
----   7875 Equation   Eq_sourcesink_useFixedSum    0.000    81.297 SECS  3,466 MB      0
----   7888 Equation   Eq_sourcesink_useLowerSum    0.000    81.297 SECS  3,466 MB      0
----   7902 Equation   Eq_sourcesink_useUpperSum    0.140    81.437 SECS  3,466 MB     11
----   7982 Equation   Eq_balance_commodities    9.360    90.797 SECS  3,715 MB  446760
----   8381 Equation   Eq_accounting_indicatorCalc_links    0.000    90.797 SECS  3,715 MB      0
----   8122 Equation   Eq_accounting_indicatorCalc    1.234    92.031 SECS  3,732 MB      1
----   8463 Equation   Eq_accounting_objective    0.000    92.031 SECS  3,732 MB      1
GAMS 40.4.0  d540b52e Oct 3, 2022           WEX-WEI x86 64bit/MS Windows - 03/25/24 11:58:05 Page 5
G e n e r a l   A l g e b r a i c   M o d e l i n g   S y s t e m
Range Statistics    SOLVE remix Using MIP From line 8738


RANGE STATISTICS (ABSOLUTE NON-ZERO FINITE VALUES)

RHS       [min, max] : [ 6.000E-04, 3.000E+03] - Zero values observed as well
Bound     [min, max] : [ 8.450E-03, 7.500E-01] - Zero values observed as well
Matrix    [min, max] : [ 1.000E-02, 1.000E+02]

GAMS 40.4.0  d540b52e Oct 3, 2022           WEX-WEI x86 64bit/MS Windows - 03/25/24 11:58:05 Page 6
G e n e r a l   A l g e b r a i c   M o d e l i n g   S y s t e m
Model Statistics    SOLVE remix Using MIP From line 8738


LOOPS                           optiframeToCalc   of1


MODEL STATISTICS

BLOCKS OF EQUATIONS          75     SINGLE EQUATIONS    3,653,296
BLOCKS OF VARIABLES          38     SINGLE VARIABLES    3,653,311
NON ZERO ELEMENTS    10,076,046


----   8738 Solve Fini remix         6.141    98.172 SECS  3,750 MB  10076046
GENERATION TIME      =       42.078 SECONDS  3,750 MB  40.4.0 d540b52e WEX-WEI


EXECUTION TIME       =       98.172 SECONDS  3,750 MB  40.4.0 d540b52e WEX-WEI
----   8738 GAMS Fini                3.656     3.656 SECS  3,750 MB 
----      1 InitE                    0.328     0.328 SECS  2,648 MB 
----      1 ExecInit                 0.000     0.328 SECS  2,648 MB 
----   8738 Solve Alg  remix         0.000     0.328 SECS  2,648 MB 
               L O O P S         optiframeToCalc of1

GAMS 40.4.0  d540b52e Oct 3, 2022           WEX-WEI x86 64bit/MS Windows - 03/25/24 11:58:05 Page 7
G e n e r a l   A l g e b r a i c   M o d e l i n g   S y s t e m
Solution Report     SOLVE remix Using MIP From line 8738


               S O L V E      S U M M A R Y

     MODEL   remix               OBJECTIVE  accounting_objective
     TYPE    MIP                 DIRECTION  MINIMIZE
     SOLVER  CPLEX               FROM LINE  8738

**** SOLVER STATUS     13 System Failure
**** MODEL STATUS      13 Error No Solution
**** OBJECTIVE VALUE               NA

 RESOURCE USAGE, LIMIT         NA       1209600.000
 ITERATION COUNT, LIMIT        NA    2147483647
--- GAMS/Cplex Link licensed for continuous and discrete problems.

Reading parameter(s) from "C:\Local\REMix\remix_nz\process\cplex.opt"
>>  rerun no
>>  iis 1
>>  lpmethod 4
>>  barorder 3
>>  preind 1
>>  scaind 0
>>  predual -1
>>  baralg 0
>>  barstartalg 1
>>  barepcomp 1e-6
>>  solutiontype 2
>>  startalg 4
>>  epgap 1e-3
>>  quality 1
>>  barcolnz 0
>>  threads 12
>>  parallelmode 1
Finished reading from "C:\Local\REMix\remix_nz\process\cplex.opt"

--- GMO setup time: 0.00s
--- Space for names approximately 462.08 Mb
--- Use option 'names no' to turn use of names off
--- GMO memory 1297.68 Mb (peak 1325.55 Mb)
--- Dictionary memory 0.00 Mb
--- Cplex 22.1.0.0 link memory 111.49 Mb (peak 762.05 Mb)
--- Starting Cplex


No solution returned
GAMS 40.4.0  d540b52e Oct 3, 2022           WEX-WEI x86 64bit/MS Windows - 03/25/24 11:58:05 Page 8
G e n e r a l   A l g e b r a i c   M o d e l i n g   S y s t e m
Solution Report     SOLVE remix Using MIP From line 8738


**** SOLVER STATUS FILE LISTED BELOW
=1
=2
=0IBM ILOG CPLEX   40.4.0 d540b52e Oct 3, 2022           WEI x86 64bit/MS Window
=1
--- GAMS/Cplex Link licensed for continuous and discrete problems.
=2
=C
=1
=CReading parameter(s) from "C:\Local\REMix\remix_nz\process\cplex.opt"
=C>>  rerun no
=C>>  iis 1
=C>>  lpmethod 4
=C>>  barorder 3
=C>>  preind 1
=C>>  scaind 0
=C>>  predual -1
=C>>  baralg 0
=C>>  barstartalg 1
=C>>  barepcomp 1e-6
=C>>  solutiontype 2
=C>>  startalg 4
=C>>  epgap 1e-3
=C>>  quality 1
=C>>  barcolnz 0
=C>>  threads 12
=C>>  parallelmode 1
=CFinished reading from "C:\Local\REMix\remix_nz\process\cplex.opt"
=2
=C
=1
--- GMO setup time: 0.00s
=2
=1
--- Space for names approximately 462.08 Mb
=2
=1
--- Use option 'names no' to turn use of names off
=2
=1
--- GMO memory 1297.68 Mb (peak 1325.55 Mb)
=2
=1
--- Dictionary memory 0.00 Mb
=2
=1
--- Cplex 22.1.0.0 link memory 111.49 Mb (peak 762.05 Mb)
=2
=1
--- Starting Cplex
=2
=C
Version identifier: 22.1.0.0 | 2022-03-09 | 1a383f8ce
CPXPARAM_Advance                                 0
CPXPARAM_Preprocessing_Dual                      -1
CPXPARAM_LPMethod                                4
CPXPARAM_Threads                                 12
CPXPARAM_Parallel                                1
CPXPARAM_SolutionType                            2
CPXPARAM_MIP_Display                             4
CPXPARAM_MIP_Strategy_StartAlgorithm             4
CPXPARAM_MIP_Pool_Capacity                       0
CPXPARAM_Barrier_Ordering                        3
CPXPARAM_TimeLimit                               1209600
CPXPARAM_MIP_Tolerances_AbsMIPGap                0
CPXPARAM_MIP_Tolerances_MIPGap                   0.001
CPXPARAM_Barrier_ConvergeTol                     9.9999999999999995e-07
Tried aggregator 1 time.
LP Presolve eliminated 2676597 rows and 2443087 columns.
Aggregator did 503658 substitutions.
Reduced LP has 473040 rows, 706566 columns, and 1670143 nonzeros.
Presolve time = 6.50 sec. (6899.57 ticks)
Parallel mode: using up to 12 threads for barrier.

***NOTE: Found 23 dense columns.

Number of nonzeros in lower triangle of A*A' = 762120
Total time for nested dissection ordering = 0.39 sec. (245.92 ticks)
Summary statistics for Cholesky factor:
  Threads                   = 12
  Rows in Factor            = 473063
  Integer space required    = 1243015
  Total non-zeros in factor = 4473404
  Total FP ops to factor    = 78460180
 Itn      Primal Obj        Dual Obj  Prim Inf Upper Inf  Dual Inf Inf Ratio
   0   1.0194654e+06  -4.3633908e+05  6.77e+05  3.75e+05  1.04e+06  1.00e+00
   1   1.8606667e+05  -1.0927233e+05  1.30e+05  7.23e+04  2.36e+05  3.76e+00
   2   2.9175688e+04  -2.0591743e+04  2.29e+04  1.27e+04  3.69e+04  2.46e+01
   3   1.1079065e+04  -6.8034684e+03  8.23e+03  4.56e+03  1.32e+04  6.32e+01
   4   8.6017119e+03  -4.8750136e+03  6.32e+03  3.51e+03  9.66e+03  7.82e+01
   5   6.8928786e+03  -3.1310279e+03  4.94e+03  2.74e+03  6.69e+03  1.01e+02
   6   6.0749861e+03  -2.3921391e+03  4.20e+03  2.33e+03  5.60e+03  1.13e+02
   7   5.3204475e+03  -2.0979727e+03  3.55e+03  1.97e+03  5.15e+03  1.19e+02
   8   4.5221277e+03  -9.0318729e+02  2.81e+03  1.56e+03  3.42e+03  1.67e+02
   9   3.7530626e+03  -3.7009748e+02  2.00e+03  1.11e+03  2.76e+03  1.90e+02
  10   3.0746886e+03   2.5191938e+02  1.15e+03  6.39e+02  2.08e+03  2.40e+02
  11   2.7295769e+03   7.8408330e+02  6.96e+02  3.86e+02  1.51e+03  3.25e+02
  12   2.7660919e+03   8.3225165e+02  6.96e+02  3.86e+02  1.51e+03  3.20e+02
  13   2.7776495e+03   9.1662702e+02  6.89e+02  3.82e+02  1.47e+03  3.29e+02
  14   2.7576560e+03   1.1149495e+03  6.42e+02  3.56e+02  1.28e+03  3.86e+02
  15   2.6705038e+03   1.4467453e+03  4.42e+02  2.45e+02  9.71e+02  5.22e+02
  16   2.5474964e+03   1.6891571e+03  2.63e+02  1.46e+02  7.15e+02  7.20e+02
  17   2.5162835e+03   1.8775798e+03  2.19e+02  1.21e+02  5.15e+02  1.01e+03
  18   2.5013001e+03   1.9573895e+03  2.00e+02  1.11e+02  4.26e+02  1.22e+03
  19   2.4725119e+03   2.0492872e+03  1.66e+02  9.22e+01  3.21e+02  1.62e+03
  20   2.4307757e+03   2.1389183e+03  1.19e+02  6.58e+01  2.17e+02  2.37e+03
  21   2.4042271e+03 
**** SOLVER STATUS FILE LISTED ABOVE
GAMS 40.4.0  d540b52e Oct 3, 2022           WEX-WEI x86 64bit/MS Windows - 03/25/24 11:58:05 Page 9
G e n e r a l   A l g e b r a i c   M o d e l i n g   S y s t e m
Solution Report     SOLVE remix Using MIP From line 8738


----   8738 Solve Read remix         0.094     0.422 SECS  2,648 MB 
GAMS 40.4.0  d540b52e Oct 3, 2022           WEX-WEI x86 64bit/MS Windows - 03/25/24 11:58:05 Page 10
G e n e r a l   A l g e b r a i c   M o d e l i n g   S y s t e m
Model Analysis      SOLVE remix Using MIP From line 8738


----   8738 Solve Init remix         0.000     0.484 SECS  2,651 MB 
----   4723 Equation   Eq_converter_unitsBalance    0.000     0.484 SECS  2,651 MB    274
----   4745 Equation   Eq_converter_unitsFixedDecom    0.000     0.484 SECS  2,651 MB     22
----   4761 Equation   Eq_converter_unitsFreeDecom    0.000     0.484 SECS  2,651 MB      0
----   4791 Equation   Eq_converter_unitsUpperLimit    0.000     0.484 SECS  2,651 MB    135
----   4805 Equation   Eq_converter_unitsLowerLimit    0.000     0.484 SECS  2,651 MB      0
----   4815 Equation   Eq_converter_unitsFixedLimit    0.000     0.484 SECS  2,651 MB      0
----   4827 Equation   Eq_converter_unitsTotalMIP    0.000     0.484 SECS  2,651 MB      0
----   4838 Equation   Eq_converter_unitsOnlineMIP    0.438     0.922 SECS  2,651 MB      0
----   4868 Equation   Eq_converter_activityUpperLimit    3.484     4.406 SECS  3,581 MB  2166598
----   4849 Equation   Eq_converter_activityLowerLimit    0.453     4.859 SECS  3,581 MB      0
----   4883 Equation   Eq_converter_activityFixedLimit    1.407     6.266 SECS  3,608 MB  330002
----   4900 Equation   Eq_converter_rampPos    0.000     6.266 SECS  3,608 MB      0
----   4913 Equation   Eq_converter_rampNeg    0.015     6.281 SECS  3,608 MB      0
----   4926 Equation   Eq_converter_rampLimit    0.485     6.766 SECS  3,608 MB      0
----   4945 Equation   Eq_converter_unitsOnline    2.734     9.500 SECS  4,429 MB  2496600
----   4957 Equation   Eq_converter_unitsOnlineUC    0.406     9.906 SECS  4,429 MB      0
----   4970 Equation   Eq_converter_activityStartups    0.532    10.438 SECS  4,429 MB      0
----   4982 Equation   Eq_converter_activityShutdowns    0.312    10.750 SECS  4,429 MB      0
----   4995 Equation   Eq_converter_limitStartups    0.000    10.750 SECS  4,429 MB      0
----   5010 Equation   Eq_converter_minUptime    0.313    11.063 SECS  4,429 MB      0
----   5024 Equation   Eq_converter_minDowntime    0.328    11.391 SECS  4,429 MB      0
----   5043 Equation   Eq_converter_activityUpperLimitDetailedPartLoadMinReq    0.062    11.453 SECS  4,429 MB      0
----   5062 Equation   Eq_converter_activityUpperLimitDetailedPartLoadMaxReq    0.063    11.516 SECS  4,429 MB      0
----   5086 Equation   Eq_converter_activityLowerLimitDetailedPartLoadMinReq    0.062    11.578 SECS  4,429 MB      0
----   5108 Equation   Eq_converter_activityUpperLimitPartLoad    0.016    11.594 SECS  4,429 MB      0
----   5124 Equation   Eq_converter_activityLowerLimitPartLoad    0.031    11.625 SECS  4,429 MB      0
----   5139 Equation   Eq_converter_noOnlineIdle    0.000    11.625 SECS  4,429 MB      0
----   5154 Equation   Eq_converter_noOnlineIdleDetailedPartLoad    0.031    11.656 SECS  4,429 MB      0
----   5168 Equation   Eq_converter_activityModeLimit    0.016    11.672 SECS  4,429 MB      0
----   5866 Equation   Eq_storage_unitsBalance    0.000    11.672 SECS  4,429 MB      7
----   5888 Equation   Eq_storage_unitsFixedDecom    0.000    11.672 SECS  4,429 MB      0
----   5904 Equation   Eq_storage_unitsFreeDecom    0.000    11.672 SECS  4,429 MB      0
----   5934 Equation   Eq_storage_unitsLowerLimit    0.000    11.672 SECS  4,429 MB      0
----   5945 Equation   Eq_storage_unitsUpperLimit    0.000    11.672 SECS  4,429 MB      7
----   5995 Equation   Eq_storage_levelUpperLimit_degradation    0.031    11.703 SECS  4,429 MB      0
----   5957 Equation   Eq_storage_unitsTotalMIP    0.000    11.703 SECS  4,429 MB      0
----   5968 Equation   Eq_storage_levelLowerLimit    0.047    11.750 SECS  4,429 MB      0
----   5981 Equation   Eq_storage_levelUpperLimit    0.328    12.078 SECS  4,429 MB  157680
----   6057 Equation   Eq_storage_losses    0.422    12.500 SECS  4,429 MB  157680
----   6012 Equation   Eq_storage_unitsBalanceStates    0.000    12.500 SECS  4,429 MB      0
----   6024 Equation   Eq_storage_unitsUpperLimitPerState    0.000    12.500 SECS  4,429 MB      0
----   6039 Equation   Eq_storage_unitsStatesNoRecovery    0.000    12.500 SECS  4,429 MB      0
----   6082 Equation   Eq_storage_cRateLimit    0.063    12.563 SECS  4,429 MB      0
----   6096 Equation   Eq_storage_eRateLimit    0.031    12.594 SECS  4,429 MB      0
----   6110 Equation   Eq_storage_charge    0.062    12.656 SECS  4,429 MB      0
----   6122 Equation   Eq_storage_discharge    0.032    12.688 SECS  4,429 MB      0
----   6134 Equation   Eq_storage_levelStateSum    0.062    12.750 SECS  4,429 MB      0
----   6145 Equation   Eq_storage_levelUpperLimitPerAge    1.594    14.344 SECS  4,429 MB      0
----   6162 Equation   Eq_storage_chargeBasedDegradationDistribution    0.000    14.344 SECS  4,429 MB      0
----   6178 Equation   Eq_storage_chargingPerAge    1.469    15.813 SECS  4,429 MB      0
----   6190 Equation   Eq_storage_unitsDecomStateSum    0.000    15.813 SECS  4,429 MB      0
----   6202 Equation   Eq_storage_unitsDegradation    0.000    15.813 SECS  4,429 MB      0
----   6220 Equation   Eq_storage_unitsDegradation_onlyOneRange    0.000    15.813 SECS  4,429 MB      0
----   6231 Equation   Eq_storage_unitsSoC    0.015    15.828 SECS  4,429 MB      0
----   6257 Equation   Eq_storage_unitsSoC_sum    0.016    15.844 SECS  4,429 MB      0
----   6248 Equation   Eq_storage_unitsSoC_onlyOneRange    0.000    15.844 SECS  4,429 MB      0
----   6268 Equation   Eq_storage_levelSoC    0.015    15.859 SECS  4,429 MB      0
----   6281 Equation   Eq_storage_cRateLimit_SoC    5.813    21.672 SECS  4,429 MB      0
----   6297 Equation   Eq_storage_eRateLimit_SoC    5.812    27.484 SECS  4,429 MB      0
----   7052 Equation   Eq_transfer_linksBalance    0.000    27.484 SECS  4,429 MB     24
----   7074 Equation   Eq_transfer_linksFixedDecom    0.000    27.484 SECS  4,429 MB      0
----   7090 Equation   Eq_transfer_linksFreeDecom    0.000    27.484 SECS  4,429 MB      0
----   7120 Equation   Eq_transfer_linksLowerLimit    0.000    27.484 SECS  4,429 MB      0
----   7131 Equation   Eq_transfer_linksUpperLimit    0.000    27.484 SECS  4,429 MB     12
----   7143 Equation   Eq_transfer_linksTotalMIP    0.000    27.484 SECS  4,429 MB      0
----   7154 Equation   Eq_transfer_flowAlongUpperLimit    0.438    27.922 SECS  4,429 MB  210240
----   7167 Equation   Eq_transfer_flowAgainstUpperLimit    0.469    28.391 SECS  4,429 MB  210240
----   7195 Equation   Eq_transfer_dcopf_angleFlows    0.000    28.391 SECS  4,429 MB      0
----   7875 Equation   Eq_sourcesink_useFixedSum    0.000    28.391 SECS  4,429 MB      0
----   7888 Equation   Eq_sourcesink_useLowerSum    0.000    28.391 SECS  4,429 MB      0
----   7902 Equation   Eq_sourcesink_useUpperSum    0.156    28.547 SECS  4,429 MB     11
----   7982 Equation   Eq_balance_commodities   10.844    39.391 SECS  4,535 MB  446760
----   8381 Equation   Eq_accounting_indicatorCalc_links    0.000    39.391 SECS  4,535 MB      0
----   8122 Equation   Eq_accounting_indicatorCalc    2.047    41.438 SECS  4,575 MB      1
----   8463 Equation   Eq_accounting_objective    0.000    41.438 SECS  4,575 MB      1
GAMS 40.4.0  d540b52e Oct 3, 2022           WEX-WEI x86 64bit/MS Windows - 03/25/24 11:58:05 Page 11
G e n e r a l   A l g e b r a i c   M o d e l i n g   S y s t e m
Range Statistics    SOLVE remix Using MIP From line 8738


RANGE STATISTICS (ABSOLUTE NON-ZERO FINITE VALUES)

RHS       [min, max] : [ 6.000E-04, 3.000E+03] - Zero values observed as well
Bound     [min, max] : [ 6.000E-04, 3.770E-01] - Zero values observed as well
Matrix    [min, max] : [ 1.000E-02, 1.994E+02]

GAMS 40.4.0  d540b52e Oct 3, 2022           WEX-WEI x86 64bit/MS Windows - 03/25/24 11:58:05 Page 12
G e n e r a l   A l g e b r a i c   M o d e l i n g   S y s t e m
Model Statistics    SOLVE remix Using MIP From line 8738


LOOPS                           optiframeToCalc   of2


MODEL STATISTICS

BLOCKS OF EQUATIONS          75     SINGLE EQUATIONS    6,176,294
BLOCKS OF VARIABLES          38     SINGLE VARIABLES    6,176,556
NON ZERO ELEMENTS    16,919,683


----   8738 Solve Fini remix         8.812    50.250 SECS  4,595 MB  16919683
GENERATION TIME      =       49.766 SECONDS  4,595 MB  40.4.0 d540b52e WEX-WEI


EXECUTION TIME       =       50.250 SECONDS  4,595 MB  40.4.0 d540b52e WEX-WEI
----   8738 GAMS Fini                4.172     4.172 SECS  4,595 MB 
