GAMS 40.4.0  d540b52e Oct 3, 2022           WEX-WEI x86 64bit/MS Windows - 01/30/24 10:50:31 Page 1
G e n e r a l   A l g e b r a i c   M o d e l i n g   S y s t e m
C o m p i l a t i o n


   1  * SPDX-FileCopyrightText: Copyright (c) 2023 German Aerospace Center (DLR)
   2  * SPDX-License-Identifier: BSD-3-Clause
   3   
   4  * ==== REMix version number ====
   6   
   7  * ==== global settings ====
  11   
  13   
  14  * ==== write metadata and inherit dataset ====
INCLUDE    C:\Local\REMix\framework\remix\framework\model\source\metadata.gms
  22   
  26   
  42   
  58   
  59  set metadata(*) /
INCLUDE    c:\Local\REMix\remix_nz\process\225b\metadata
  61  remix_version "0.9.2"
  62  gams_version "40.4.0"
  63  timestamp "01/30/24 10:50:31"
  64  framework_path "C:\Local\REMix\framework\remix\framework\model\source"
  65   
  66  framework_hash 96c2159997fb47c52b8300c49677756ddfb1ee40
  67   
  68  framework_branch "dev"
  69   
  70  project_path "C:\Local\REMix\remix_nz\output\nz-h2_2020-2050\data"
  71   
  72  project_hash "d2f098d8b97c2ab1f5b12df7beb7782d36330f38"
  73   
  74  project_branch "main"
  75   
  76  /;
INCLUDE    C:\Local\REMix\framework\remix\framework\model\source\data_inheritance.gms
  78  * SPDX-FileCopyrightText: Copyright (c) 2023 German Aerospace Center (DLR)
  79  * SPDX-License-Identifier: BSD-3-Clause
  80   
  83   
  88   
  89  * pandas based data inheritance reading in the dat files, merging them and writing csv files in the scrdir
 109  ;
 110   
 114   
 115  * ==== run remix ====
INCLUDE    C:\Local\REMix\framework\remix\framework\model\source\remix.gms
 120  * SPDX-FileCopyrightText: Copyright (c) 2023 German Aerospace Center (DLR)
 121  * SPDX-License-Identifier: BSD-3-Clause
 122   
 123  * ==== global settings ====
 130   
 133   
 135   
 138   
 139  * ==== include modules ====
INCLUDE    C:\Local\REMix\framework\remix\framework\model\source\sets.gms
 141  * SPDX-FileCopyrightText: Copyright (c) 2023 German Aerospace Center (DLR)
 142  * SPDX-License-Identifier: BSD-3-Clause
 143   
 144  * // # sets
 145  * // Sets are the indices of variables and parameters.
 146   
 147  * // ## Reference
 148  * // {special_table_sets}
 149   
 150  * // ## Input Files
 151  * // {special_table_set_input_files}
1048   
1049  map_accNodes(accNodesModel,accNodesModel_aggregation)
1050      $sum((nodesData, nodesModelToCalc)
1051              $( sameas(nodesModelToCalc,accNodesModel)
1052                  and map_accNodesLoad(nodesData,accNodesModel_aggregation)
1053                  and aggregateNodesModel(nodesData,nodesModelToCalc)), 1) = yes;
1054   
1055  map_accNodes(accNodesModel,"global")$sum(nodesModelToCalc$sameas(accNodesModel,nodesModelToCalc), 1) = yes;
1056  map_accNodes(accNodesModel,"global")$sum(accNodes$sameas(accNodesModel,accNodes), 1) = yes;
1057  map_accNodes(accNodesModel,accNodesModel) = yes;
1058  map_accLinks(accLinksModel,"global")$sum(linksModelToCalc$sameas(accLinksModel,linksModelToCalc), 1) = yes;
1059  map_accLinks(accLinksModel,accLinksModel) = yes;
1060  map_accYears(accYears,"horizon")$sum(yearsToCalc$sameas(accYears,yearsToCalc), 1)  = yes;
1061  map_accYears(accYears,accYears) = yes;
1062   
1063  map_accNodesToCalc(accNodesModel,nodesModelToCalc)
1064      $sum((nodesData)
1065              $( map_accNodesLoad(nodesData,accNodesModel)
1066                  and aggregateNodesModel(nodesData,nodesModelToCalc)), 1) = yes;
1067   
1068  map_accNodesToCalc("global",nodesModelToCalc) = yes;
1069  map_accNodesToCalc(accNodesModel,nodesModelToCalc)$sameas(accNodesModel,nodesModelToCalc) = yes;
1070  map_accLinksToCalc("global",linksModelToCalc) = yes;
1071  map_accLinksToCalc(accLinksModel,linksModelToCalc)$sameas(accLinksModel,linksModelToCalc) = yes;
1072  map_accYearsToCalc("horizon",yearsToCalc) = yes;
1073  map_accYearsToCalc(accYears,yearsToCalc)$sameas(accYears,yearsToCalc) = yes;
1074   
1075  * Duplicate sets for postcalc reporting without horizon and accYears
1076  map_accNodesPostCalc(accNodesModel,nodesModelToCalc) = map_accNodesToCalc(accNodesModel,nodesModelToCalc);
1077  map_accLinksPostCalc(accLinksModel,linksModelToCalc) = map_accLinksToCalc(accLinksModel,linksModelToCalc);
1078  map_accYearsPostCalc(accYears,yearsToCalc)$sameas(accYears,yearsToCalc) = yes;
1079  map_accYearsPostCalc(accYears,years)$(sameas(accYears,years) and years.val < sum(yearsToCalc$(ord(yearsToCalc) = 1), yearsToCalc.val)) = yes;
1080   
1081  set map_nodesAccounting(accNodesModel_aggregation,accNodesModel) "Map accounting nodes describes the mapping between model accounting nodes and data nodes." ;
1082  option map_nodesAccounting < map_accNodes;
1083   
1084  * ==== Generic sets  ====
1085  * These set names are repeated across different profile parameters.
1086  * they are not strictly related to each other and are not input data but
1087  * are needed for validation.
1088  ** // PROFILE: profileTypes | Profile Types | OEO_00140056:flow potential | set_profiletypes.csv
1089   
1090  ** // SET: scenario | Scenario | OEO_00000364:scenario | set_scenarios.csv
1091  * "Scenario indexes help to differentiate scenarios." /
1092   
1093  ** // SET: capType | Capacity Types | OEO_00030019:balance process attribute | set_captypes.csv
1094  * "Capacity types differentiate investment decisions." /
1095   
1096  ** // SET: balanceType | Balance Types | OEO_00030019:balance process attribute | set_balancetypes.csv
1097  * "Balance types differentiate types of balances." /
INCLUDE    C:\Local\REMix\framework\remix\framework\model\source\accounting\input.gms
1099  * SPDX-FileCopyrightText: Copyright (c) 2023 German Aerospace Center (DLR)
1100  * SPDX-License-Identifier: BSD-3-Clause
1101   
1102  * // # accounting_input
1103  * // The parameters in this file describe the accounting of indicators in the model.
1104   
1105  * // ## Variables
1106  * // {special_table_input_variables}
1499   
1500  * Aggregate accounting parameters
BATINCLUDE C:\Local\REMix\framework\remix\framework\model\source\battools\aggregateAccountingMean.gms
1502  * SPDX-FileCopyrightText: Copyright (c) 2023 German Aerospace Center (DLR)
1503  * SPDX-License-Identifier: BSD-3-Clause
1504   
1506   
1508   
1509  set accounting_converterUnitsNonzero(indicator,accnodesData,converter_techs,vintage);
1510  accounting_converterUnitsNonzero(indicator,accnodesData,converter_techs,vintage)
1511      $sum(pc_accounting_converterUnits$accounting_converterUnitsIn(indicator,accnodesData,converter_techs,vintage,pc_accounting_converterUnits), 1)
1512      = yes;
1513   
1515  set accounting_converterUnitsChk(indicator,nodesModel,converter_techs,vintage,pc_accounting_converterUnits);
1516  accounting_converterUnitsChk(indicator,nodesModel,converter_techs,vintage,"useAnnuity")
1517      $sum((nodesData,accnodesData)
1518              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1519                  and accounting_converterUnitsNonzero(indicator,accnodesData,converter_techs,vintage)), 1)
1520      = smax((nodesData,accnodesData)
1521              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1522                  and accounting_converterUnitsNonzero(indicator,accnodesData,converter_techs,vintage)),
1523          accounting_converterUnitsIn(indicator,accnodesData,converter_techs,vintage,"useAnnuity"))
1524      - smin((nodesData,accnodesData)
1525              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1526                  and accounting_converterUnitsNonzero(indicator,accnodesData,converter_techs,vintage)),
1527          accounting_converterUnitsIn(indicator,accnodesData,converter_techs,vintage,"useAnnuity"));
1528   
1529  abort$sum(accounting_converterUnitsChk(indicator,nodesModel,converter_techs,vintage,pc_accounting_converterUnits), 1) "Cannot aggregate technologies with different useAnnuity values."
1531   
1532  parameter accounting_converterUnitsAgg(indicator,nodesModel,converter_techs,vintage,pc_accounting_converterUnits);
1533  accounting_converterUnitsAgg(indicator,nodesModel,converter_techs,vintage,pc_accounting_converterUnits)
1534      $sum((nodesData,accnodesData)
1535              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1536                  and accounting_converterUnitsNonzero(indicator,accnodesData,converter_techs,vintage)), 1)
1537      = sum((nodesData,accnodesData)
1538              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1539                  and accounting_converterUnitsNonzero(indicator,accnodesData,converter_techs,vintage)),
1540          accounting_converterUnitsIn(indicator,accnodesData,converter_techs,vintage,pc_accounting_converterUnits))
1541      / sum((nodesData,accnodesData)
1542              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1543                  and accounting_converterUnitsNonzero(indicator,accnodesData,converter_techs,vintage)),
1544          1);
1545   
1546  parameter accounting_converterUnits(indicator,nodesModel,converter_techs,vintage,pc_accounting_converterUnits);
1547  loop(accnodes,
1548  accounting_converterUnits(indicator,nodesModel,converter_techs,vintage,pc_accounting_converterUnits)
1549      $sum(accnodesData$(map_accnodesToCalc(accnodes,nodesModel) and sameas(accnodes,accnodesData)
1550                              and accounting_converterUnitsIn(indicator,accnodesData,converter_techs,vintage,pc_accounting_converterUnits)), 1)
1551      = sum(accnodesData$(map_accnodesToCalc(accnodes,nodesModel) and sameas(accnodes,accnodesData)),
1552              accounting_converterUnitsIn(indicator,accnodesData,converter_techs,vintage,pc_accounting_converterUnits));
1553  );
1554   
1555  accounting_converterUnits(indicator,nodesModel,converter_techs,vintage,pc_accounting_converterUnits)
1556      $accounting_converterUnitsAgg(indicator,nodesModel,converter_techs,vintage,pc_accounting_converterUnits)
1557      = accounting_converterUnitsAgg(indicator,nodesModel,converter_techs,vintage,pc_accounting_converterUnits);
1558   
1559  * option kill %paramName%Nonzero %paramName%Chk %paramName%Agg
BATINCLUDE C:\Local\REMix\framework\remix\framework\model\source\battools\aggregateAccountingMean.gms
1561  * SPDX-FileCopyrightText: Copyright (c) 2023 German Aerospace Center (DLR)
1562  * SPDX-License-Identifier: BSD-3-Clause
1563   
1565   
1567   
1568  set accounting_converterActivityNonzero(indicator,accnodesData,converter_techs,vintage,activity);
1569  accounting_converterActivityNonzero(indicator,accnodesData,converter_techs,vintage,activity)
1570      $sum(pc_accounting_converterActivity$accounting_converterActivityIn(indicator,accnodesData,converter_techs,vintage,activity,pc_accounting_converterActivity), 1)
1571      = yes;
1572   
1574   
1575  parameter accounting_converterActivityAgg(indicator,nodesModel,converter_techs,vintage,activity,pc_accounting_converterActivity);
1576  accounting_converterActivityAgg(indicator,nodesModel,converter_techs,vintage,activity,pc_accounting_converterActivity)
1577      $sum((nodesData,accnodesData)
1578              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1579                  and accounting_converterActivityNonzero(indicator,accnodesData,converter_techs,vintage,activity)), 1)
1580      = sum((nodesData,accnodesData)
1581              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1582                  and accounting_converterActivityNonzero(indicator,accnodesData,converter_techs,vintage,activity)),
1583          accounting_converterActivityIn(indicator,accnodesData,converter_techs,vintage,activity,pc_accounting_converterActivity))
1584      / sum((nodesData,accnodesData)
1585              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1586                  and accounting_converterActivityNonzero(indicator,accnodesData,converter_techs,vintage,activity)),
1587          1);
1588   
1589  parameter accounting_converterActivity(indicator,nodesModel,converter_techs,vintage,activity,pc_accounting_converterActivity);
1590  loop(accnodes,
1591  accounting_converterActivity(indicator,nodesModel,converter_techs,vintage,activity,pc_accounting_converterActivity)
1592      $sum(accnodesData$(map_accnodesToCalc(accnodes,nodesModel) and sameas(accnodes,accnodesData)
1593                              and accounting_converterActivityIn(indicator,accnodesData,converter_techs,vintage,activity,pc_accounting_converterActivity)), 1)
1594      = sum(accnodesData$(map_accnodesToCalc(accnodes,nodesModel) and sameas(accnodes,accnodesData)),
1595              accounting_converterActivityIn(indicator,accnodesData,converter_techs,vintage,activity,pc_accounting_converterActivity));
1596  );
1597   
1598  accounting_converterActivity(indicator,nodesModel,converter_techs,vintage,activity,pc_accounting_converterActivity)
1599      $accounting_converterActivityAgg(indicator,nodesModel,converter_techs,vintage,activity,pc_accounting_converterActivity)
1600      = accounting_converterActivityAgg(indicator,nodesModel,converter_techs,vintage,activity,pc_accounting_converterActivity);
1601   
1602  * option kill %paramName%Nonzero %paramName%Chk %paramName%Agg
BATINCLUDE C:\Local\REMix\framework\remix\framework\model\source\battools\aggregateAccountingMean.gms
1604  * SPDX-FileCopyrightText: Copyright (c) 2023 German Aerospace Center (DLR)
1605  * SPDX-License-Identifier: BSD-3-Clause
1606   
1608   
1610   
1611  set accounting_converterStartupNonzero(indicator,accnodesData,converter_techs,vintage);
1612  accounting_converterStartupNonzero(indicator,accnodesData,converter_techs,vintage)
1613      $sum(pc_accounting_converterStartup$accounting_converterStartupIn(indicator,accnodesData,converter_techs,vintage,pc_accounting_converterStartup), 1)
1614      = yes;
1615   
1617   
1618  parameter accounting_converterStartupAgg(indicator,nodesModel,converter_techs,vintage,pc_accounting_converterStartup);
1619  accounting_converterStartupAgg(indicator,nodesModel,converter_techs,vintage,pc_accounting_converterStartup)
1620      $sum((nodesData,accnodesData)
1621              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1622                  and accounting_converterStartupNonzero(indicator,accnodesData,converter_techs,vintage)), 1)
1623      = sum((nodesData,accnodesData)
1624              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1625                  and accounting_converterStartupNonzero(indicator,accnodesData,converter_techs,vintage)),
1626          accounting_converterStartupIn(indicator,accnodesData,converter_techs,vintage,pc_accounting_converterStartup))
1627      / sum((nodesData,accnodesData)
1628              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1629                  and accounting_converterStartupNonzero(indicator,accnodesData,converter_techs,vintage)),
1630          1);
1631   
1632  parameter accounting_converterStartup(indicator,nodesModel,converter_techs,vintage,pc_accounting_converterStartup);
1633  loop(accnodes,
1634  accounting_converterStartup(indicator,nodesModel,converter_techs,vintage,pc_accounting_converterStartup)
1635      $sum(accnodesData$(map_accnodesToCalc(accnodes,nodesModel) and sameas(accnodes,accnodesData)
1636                              and accounting_converterStartupIn(indicator,accnodesData,converter_techs,vintage,pc_accounting_converterStartup)), 1)
1637      = sum(accnodesData$(map_accnodesToCalc(accnodes,nodesModel) and sameas(accnodes,accnodesData)),
1638              accounting_converterStartupIn(indicator,accnodesData,converter_techs,vintage,pc_accounting_converterStartup));
1639  );
1640   
1641  accounting_converterStartup(indicator,nodesModel,converter_techs,vintage,pc_accounting_converterStartup)
1642      $accounting_converterStartupAgg(indicator,nodesModel,converter_techs,vintage,pc_accounting_converterStartup)
1643      = accounting_converterStartupAgg(indicator,nodesModel,converter_techs,vintage,pc_accounting_converterStartup);
1644   
1645  * option kill %paramName%Nonzero %paramName%Chk %paramName%Agg
BATINCLUDE C:\Local\REMix\framework\remix\framework\model\source\battools\aggregateAccountingMean.gms
1647  * SPDX-FileCopyrightText: Copyright (c) 2023 German Aerospace Center (DLR)
1648  * SPDX-License-Identifier: BSD-3-Clause
1649   
1651   
1653   
1654  set accounting_storageUnitsNonzero(indicator,accnodesData,storage_techs,vintage);
1655  accounting_storageUnitsNonzero(indicator,accnodesData,storage_techs,vintage)
1656      $sum(pc_accounting_storageUnits$accounting_storageUnitsIn(indicator,accnodesData,storage_techs,vintage,pc_accounting_storageUnits), 1)
1657      = yes;
1658   
1660  set accounting_storageUnitsChk(indicator,nodesModel,storage_techs,vintage,pc_accounting_storageUnits);
1661  accounting_storageUnitsChk(indicator,nodesModel,storage_techs,vintage,"useAnnuity")
1662      $sum((nodesData,accnodesData)
1663              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1664                  and accounting_storageUnitsNonzero(indicator,accnodesData,storage_techs,vintage)), 1)
1665      = smax((nodesData,accnodesData)
1666              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1667                  and accounting_storageUnitsNonzero(indicator,accnodesData,storage_techs,vintage)),
1668          accounting_storageUnitsIn(indicator,accnodesData,storage_techs,vintage,"useAnnuity"))
1669      - smin((nodesData,accnodesData)
1670              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1671                  and accounting_storageUnitsNonzero(indicator,accnodesData,storage_techs,vintage)),
1672          accounting_storageUnitsIn(indicator,accnodesData,storage_techs,vintage,"useAnnuity"));
1673   
1674  abort$sum(accounting_storageUnitsChk(indicator,nodesModel,storage_techs,vintage,pc_accounting_storageUnits), 1) "Cannot aggregate technologies with different useAnnuity values."
1676   
1677  parameter accounting_storageUnitsAgg(indicator,nodesModel,storage_techs,vintage,pc_accounting_storageUnits);
1678  accounting_storageUnitsAgg(indicator,nodesModel,storage_techs,vintage,pc_accounting_storageUnits)
1679      $sum((nodesData,accnodesData)
1680              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1681                  and accounting_storageUnitsNonzero(indicator,accnodesData,storage_techs,vintage)), 1)
1682      = sum((nodesData,accnodesData)
1683              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1684                  and accounting_storageUnitsNonzero(indicator,accnodesData,storage_techs,vintage)),
1685          accounting_storageUnitsIn(indicator,accnodesData,storage_techs,vintage,pc_accounting_storageUnits))
1686      / sum((nodesData,accnodesData)
1687              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1688                  and accounting_storageUnitsNonzero(indicator,accnodesData,storage_techs,vintage)),
1689          1);
1690   
1691  parameter accounting_storageUnits(indicator,nodesModel,storage_techs,vintage,pc_accounting_storageUnits);
1692  loop(accnodes,
1693  accounting_storageUnits(indicator,nodesModel,storage_techs,vintage,pc_accounting_storageUnits)
1694      $sum(accnodesData$(map_accnodesToCalc(accnodes,nodesModel) and sameas(accnodes,accnodesData)
1695                              and accounting_storageUnitsIn(indicator,accnodesData,storage_techs,vintage,pc_accounting_storageUnits)), 1)
1696      = sum(accnodesData$(map_accnodesToCalc(accnodes,nodesModel) and sameas(accnodes,accnodesData)),
1697              accounting_storageUnitsIn(indicator,accnodesData,storage_techs,vintage,pc_accounting_storageUnits));
1698  );
1699   
1700  accounting_storageUnits(indicator,nodesModel,storage_techs,vintage,pc_accounting_storageUnits)
1701      $accounting_storageUnitsAgg(indicator,nodesModel,storage_techs,vintage,pc_accounting_storageUnits)
1702      = accounting_storageUnitsAgg(indicator,nodesModel,storage_techs,vintage,pc_accounting_storageUnits);
1703   
1704  * option kill %paramName%Nonzero %paramName%Chk %paramName%Agg
BATINCLUDE C:\Local\REMix\framework\remix\framework\model\source\battools\aggregateAccountingMean.gms
1706  * SPDX-FileCopyrightText: Copyright (c) 2023 German Aerospace Center (DLR)
1707  * SPDX-License-Identifier: BSD-3-Clause
1708   
1710   
1712   
1713  set accounting_transferLinksNonzero(indicator,acclinksData,transfer_techs,vintage);
1714  accounting_transferLinksNonzero(indicator,acclinksData,transfer_techs,vintage)
1715      $sum(pc_accounting_transferLinks$accounting_transferLinksIn(indicator,acclinksData,transfer_techs,vintage,pc_accounting_transferLinks), 1)
1716      = yes;
1717   
1719  set accounting_transferLinksChk(indicator,linksModel,transfer_techs,vintage,pc_accounting_transferLinks);
1720  accounting_transferLinksChk(indicator,linksModel,transfer_techs,vintage,"useAnnuity")
1721      $sum((linksData,acclinksData)
1722              $(aggregatelinksModel(linksData,linksModel) and sameas(linksData,acclinksData)
1723                  and accounting_transferLinksNonzero(indicator,acclinksData,transfer_techs,vintage)), 1)
1724      = smax((linksData,acclinksData)
1725              $(aggregatelinksModel(linksData,linksModel) and sameas(linksData,acclinksData)
1726                  and accounting_transferLinksNonzero(indicator,acclinksData,transfer_techs,vintage)),
1727          accounting_transferLinksIn(indicator,acclinksData,transfer_techs,vintage,"useAnnuity"))
1728      - smin((linksData,acclinksData)
1729              $(aggregatelinksModel(linksData,linksModel) and sameas(linksData,acclinksData)
1730                  and accounting_transferLinksNonzero(indicator,acclinksData,transfer_techs,vintage)),
1731          accounting_transferLinksIn(indicator,acclinksData,transfer_techs,vintage,"useAnnuity"));
1732   
1733  abort$sum(accounting_transferLinksChk(indicator,linksModel,transfer_techs,vintage,pc_accounting_transferLinks), 1) "Cannot aggregate technologies with different useAnnuity values."
1735   
1736  parameter accounting_transferLinksAgg(indicator,linksModel,transfer_techs,vintage,pc_accounting_transferLinks);
1737  accounting_transferLinksAgg(indicator,linksModel,transfer_techs,vintage,pc_accounting_transferLinks)
1738      $sum((linksData,acclinksData)
1739              $(aggregatelinksModel(linksData,linksModel) and sameas(linksData,acclinksData)
1740                  and accounting_transferLinksNonzero(indicator,acclinksData,transfer_techs,vintage)), 1)
1741      = sum((linksData,acclinksData)
1742              $(aggregatelinksModel(linksData,linksModel) and sameas(linksData,acclinksData)
1743                  and accounting_transferLinksNonzero(indicator,acclinksData,transfer_techs,vintage)),
1744          accounting_transferLinksIn(indicator,acclinksData,transfer_techs,vintage,pc_accounting_transferLinks))
1745      / sum((linksData,acclinksData)
1746              $(aggregatelinksModel(linksData,linksModel) and sameas(linksData,acclinksData)
1747                  and accounting_transferLinksNonzero(indicator,acclinksData,transfer_techs,vintage)),
1748          1);
1749   
1750  parameter accounting_transferLinks(indicator,linksModel,transfer_techs,vintage,pc_accounting_transferLinks);
1751  loop(acclinks,
1752  accounting_transferLinks(indicator,linksModel,transfer_techs,vintage,pc_accounting_transferLinks)
1753      $sum(acclinksData$(map_acclinksToCalc(acclinks,linksModel) and sameas(acclinks,acclinksData)
1754                              and accounting_transferLinksIn(indicator,acclinksData,transfer_techs,vintage,pc_accounting_transferLinks)), 1)
1755      = sum(acclinksData$(map_acclinksToCalc(acclinks,linksModel) and sameas(acclinks,acclinksData)),
1756              accounting_transferLinksIn(indicator,acclinksData,transfer_techs,vintage,pc_accounting_transferLinks));
1757  );
1758   
1759  accounting_transferLinks(indicator,linksModel,transfer_techs,vintage,pc_accounting_transferLinks)
1760      $accounting_transferLinksAgg(indicator,linksModel,transfer_techs,vintage,pc_accounting_transferLinks)
1761      = accounting_transferLinksAgg(indicator,linksModel,transfer_techs,vintage,pc_accounting_transferLinks);
1762   
1763  * option kill %paramName%Nonzero %paramName%Chk %paramName%Agg
BATINCLUDE C:\Local\REMix\framework\remix\framework\model\source\battools\aggregateAccountingMean.gms
1765  * SPDX-FileCopyrightText: Copyright (c) 2023 German Aerospace Center (DLR)
1766  * SPDX-License-Identifier: BSD-3-Clause
1767   
1769   
1771   
1772  set accounting_transferPerLengthNonzero(indicator,acclinksData,transfer_techs,vintage,link_types);
1773  accounting_transferPerLengthNonzero(indicator,acclinksData,transfer_techs,vintage,link_types)
1774      $sum(pc_accounting_transferPerLength$accounting_transferPerLengthIn(indicator,acclinksData,transfer_techs,vintage,link_types,pc_accounting_transferPerLength), 1)
1775      = yes;
1776   
1778  set accounting_transferPerLengthChk(indicator,linksModel,transfer_techs,vintage,link_types,pc_accounting_transferPerLength);
1779  accounting_transferPerLengthChk(indicator,linksModel,transfer_techs,vintage,link_types,"useAnnuity")
1780      $sum((linksData,acclinksData)
1781              $(aggregatelinksModel(linksData,linksModel) and sameas(linksData,acclinksData)
1782                  and accounting_transferPerLengthNonzero(indicator,acclinksData,transfer_techs,vintage,link_types)), 1)
1783      = smax((linksData,acclinksData)
1784              $(aggregatelinksModel(linksData,linksModel) and sameas(linksData,acclinksData)
1785                  and accounting_transferPerLengthNonzero(indicator,acclinksData,transfer_techs,vintage,link_types)),
1786          accounting_transferPerLengthIn(indicator,acclinksData,transfer_techs,vintage,link_types,"useAnnuity"))
1787      - smin((linksData,acclinksData)
1788              $(aggregatelinksModel(linksData,linksModel) and sameas(linksData,acclinksData)
1789                  and accounting_transferPerLengthNonzero(indicator,acclinksData,transfer_techs,vintage,link_types)),
1790          accounting_transferPerLengthIn(indicator,acclinksData,transfer_techs,vintage,link_types,"useAnnuity"));
1791   
1792  abort$sum(accounting_transferPerLengthChk(indicator,linksModel,transfer_techs,vintage,link_types,pc_accounting_transferPerLength), 1) "Cannot aggregate technologies with different useAnnuity values."
1794   
1795  parameter accounting_transferPerLengthAgg(indicator,linksModel,transfer_techs,vintage,link_types,pc_accounting_transferPerLength);
1796  accounting_transferPerLengthAgg(indicator,linksModel,transfer_techs,vintage,link_types,pc_accounting_transferPerLength)
1797      $sum((linksData,acclinksData)
1798              $(aggregatelinksModel(linksData,linksModel) and sameas(linksData,acclinksData)
1799                  and accounting_transferPerLengthNonzero(indicator,acclinksData,transfer_techs,vintage,link_types)), 1)
1800      = sum((linksData,acclinksData)
1801              $(aggregatelinksModel(linksData,linksModel) and sameas(linksData,acclinksData)
1802                  and accounting_transferPerLengthNonzero(indicator,acclinksData,transfer_techs,vintage,link_types)),
1803          accounting_transferPerLengthIn(indicator,acclinksData,transfer_techs,vintage,link_types,pc_accounting_transferPerLength))
1804      / sum((linksData,acclinksData)
1805              $(aggregatelinksModel(linksData,linksModel) and sameas(linksData,acclinksData)
1806                  and accounting_transferPerLengthNonzero(indicator,acclinksData,transfer_techs,vintage,link_types)),
1807          1);
1808   
1809  parameter accounting_transferPerLength(indicator,linksModel,transfer_techs,vintage,link_types,pc_accounting_transferPerLength);
1810  loop(acclinks,
1811  accounting_transferPerLength(indicator,linksModel,transfer_techs,vintage,link_types,pc_accounting_transferPerLength)
1812      $sum(acclinksData$(map_acclinksToCalc(acclinks,linksModel) and sameas(acclinks,acclinksData)
1813                              and accounting_transferPerLengthIn(indicator,acclinksData,transfer_techs,vintage,link_types,pc_accounting_transferPerLength)), 1)
1814      = sum(acclinksData$(map_acclinksToCalc(acclinks,linksModel) and sameas(acclinks,acclinksData)),
1815              accounting_transferPerLengthIn(indicator,acclinksData,transfer_techs,vintage,link_types,pc_accounting_transferPerLength));
1816  );
1817   
1818  accounting_transferPerLength(indicator,linksModel,transfer_techs,vintage,link_types,pc_accounting_transferPerLength)
1819      $accounting_transferPerLengthAgg(indicator,linksModel,transfer_techs,vintage,link_types,pc_accounting_transferPerLength)
1820      = accounting_transferPerLengthAgg(indicator,linksModel,transfer_techs,vintage,link_types,pc_accounting_transferPerLength);
1821   
1822  * option kill %paramName%Nonzero %paramName%Chk %paramName%Agg
BATINCLUDE C:\Local\REMix\framework\remix\framework\model\source\battools\aggregateAccountingMean.gms
1824  * SPDX-FileCopyrightText: Copyright (c) 2023 German Aerospace Center (DLR)
1825  * SPDX-License-Identifier: BSD-3-Clause
1826   
1828   
1830   
1831  set accounting_sourcesinkFlowNonzero(indicator,accnodesData,years,sourcesink_techs,commodity);
1832  accounting_sourcesinkFlowNonzero(indicator,accnodesData,years,sourcesink_techs,commodity)
1833      $sum(pc_accounting_sourcesinkFlow$accounting_sourcesinkFlowIn(indicator,accnodesData,years,sourcesink_techs,commodity,pc_accounting_sourcesinkFlow), 1)
1834      = yes;
1835   
1837   
1838  parameter accounting_sourcesinkFlowAgg(indicator,nodesModel,years,sourcesink_techs,commodity,pc_accounting_sourcesinkFlow);
1839  accounting_sourcesinkFlowAgg(indicator,nodesModel,years,sourcesink_techs,commodity,pc_accounting_sourcesinkFlow)
1840      $sum((nodesData,accnodesData)
1841              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1842                  and accounting_sourcesinkFlowNonzero(indicator,accnodesData,years,sourcesink_techs,commodity)), 1)
1843      = sum((nodesData,accnodesData)
1844              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1845                  and accounting_sourcesinkFlowNonzero(indicator,accnodesData,years,sourcesink_techs,commodity)),
1846          accounting_sourcesinkFlowIn(indicator,accnodesData,years,sourcesink_techs,commodity,pc_accounting_sourcesinkFlow))
1847      / sum((nodesData,accnodesData)
1848              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1849                  and accounting_sourcesinkFlowNonzero(indicator,accnodesData,years,sourcesink_techs,commodity)),
1850          1);
1851   
1852  parameter accounting_sourcesinkFlow(indicator,nodesModel,years,sourcesink_techs,commodity,pc_accounting_sourcesinkFlow);
1853  loop(accnodes,
1854  accounting_sourcesinkFlow(indicator,nodesModel,years,sourcesink_techs,commodity,pc_accounting_sourcesinkFlow)
1855      $sum(accnodesData$(map_accnodesToCalc(accnodes,nodesModel) and sameas(accnodes,accnodesData)
1856                              and accounting_sourcesinkFlowIn(indicator,accnodesData,years,sourcesink_techs,commodity,pc_accounting_sourcesinkFlow)), 1)
1857      = sum(accnodesData$(map_accnodesToCalc(accnodes,nodesModel) and sameas(accnodes,accnodesData)),
1858              accounting_sourcesinkFlowIn(indicator,accnodesData,years,sourcesink_techs,commodity,pc_accounting_sourcesinkFlow));
1859  );
1860   
1861  accounting_sourcesinkFlow(indicator,nodesModel,years,sourcesink_techs,commodity,pc_accounting_sourcesinkFlow)
1862      $accounting_sourcesinkFlowAgg(indicator,nodesModel,years,sourcesink_techs,commodity,pc_accounting_sourcesinkFlow)
1863      = accounting_sourcesinkFlowAgg(indicator,nodesModel,years,sourcesink_techs,commodity,pc_accounting_sourcesinkFlow);
1864   
1865  * option kill %paramName%Nonzero %paramName%Chk %paramName%Agg
1866   
1867  parameter accounting_indicatorBounds_links(linksModel,years,indicator,pc_accounting_indicatorBounds_links);
1868  accounting_indicatorBounds_links(linksModelToCalc,yearsToCalc,indicator,pc_accounting_indicatorBounds_links)
1869      = sum((linksData)$sameas(linksModelToCalc,linksData),
1870              accounting_indicatorBounds_linksIn(linksData,yearsToCalc,indicator,pc_accounting_indicatorBounds_links));
1871   
1872  accounting_indicatorBounds_links(linksModelToCalc,yearsToCalc,indicator,pc_accounting_indicatorBounds_links)
1873      = sum((linksData)$links_aggregate(linksModelToCalc,linksData),
1874              accounting_indicatorBounds_linksIn(linksData,yearsToCalc,indicator,pc_accounting_indicatorBounds_links));
1875   
1876  parameter accounting_indicatorBounds(accNodesModel,accYears,indicator,pc_accounting_indicatorBounds);
1877  accounting_indicatorBounds(accNodesModel,accYears,indicator,pc_accounting_indicatorBounds)
1878      = sum (accNodesData$sameas(accNodesModel,accNodesData),
1879          accounting_indicatorBoundsIn(accNodesData,accYears,indicator,pc_accounting_indicatorBounds));
1880   
1881  accounting_indicatorBounds(accNodesModel,accYears,indicator,pc_accounting_indicatorBounds)
1882      $(sum (nodesModel$sameas(accNodesModel,nodesModel), 1) > 0)
1883      = sum ((accNodesData,nodesData,nodesModel)
1884              $(aggregateNodesModel(nodesData,nodesModel) and sameas(accNodesModel,nodesModel) and sameas(accNodesData,nodesData)),
1885          accounting_indicatorBoundsIn(accNodesData,accYears,indicator,pc_accounting_indicatorBounds));
1886   
1887  set accounting_perIndicatorNonzero(indicator,indicator_a,accNodesData,accYears);
1888  accounting_perIndicatorNonzero(indicator,indicator_a,accNodesData,accYears)
1889      $sum(pc_accounting_perIndicator$accounting_perIndicatorIn(indicator,indicator_a,accNodesData,accYears,pc_accounting_perIndicator), 1)
1890      = yes;
1891   
1892  parameter accounting_perIndicatorAgg(indicator,indicator_a,nodesModel,accYears,pc_accounting_perIndicator);
1893  accounting_perIndicatorAgg(indicator,indicator_a,nodesModel,accYears,pc_accounting_perIndicator)
1894      $sum((nodesData,accnodesData)
1895              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1896                  and accounting_perIndicatorNonzero(indicator,indicator_a,accnodesData,accYears)), 1)
1897      = sum((nodesData,accnodesData)
1898              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1899                  and accounting_perIndicatorNonzero(indicator,indicator_a,accnodesData,accYears)),
1900          accounting_perIndicatorIn(indicator,indicator_a,accnodesData,accYears,pc_accounting_perIndicator))
1901      / sum((nodesData,accnodesData)
1902              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1903                  and accounting_perIndicatorNonzero(indicator,indicator_a,accnodesData,accYears)),
1904          1);
1905   
1906  parameter accounting_perIndicator(indicator,indicator_a,accNodesModel,accYears,pc_accounting_perIndicator);
1907   
1908  loop(accNodes,
1909  accounting_perIndicator(indicator,indicator_a,accNodesModel,accYears,pc_accounting_perIndicator)
1910      $(sum(accNodesData$(sameas(accNodes,accNodesData)
1911              and accounting_perIndicatorIn(indicator,indicator_a,accNodesData,"horizon",pc_accounting_perIndicator)), 1)
1912          and map_accNodes(accNodesModel,accNodes)
1913              )
1914      = sum(accNodesData$(sameas(accNodes,accNodesData)),
1915              accounting_perIndicatorIn(indicator,indicator_a,accNodesData,"horizon",pc_accounting_perIndicator));
1916   
1917  accounting_perIndicator(indicator,indicator_a,accNodesModel,accYears,pc_accounting_perIndicator)
1918      $(sum(accNodesData$(sameas(accNodes,accNodesData)
1919              and accounting_perIndicatorIn(indicator,indicator_a,accNodesData,accYears,pc_accounting_perIndicator)), 1)
1920          and map_accNodes(accNodesModel,accNodes)
1921          and not sameas(accYears, "horizon"))
1922      = sum(accNodesData$(sameas(accNodes,accNodesData)),
1923              accounting_perIndicatorIn(indicator,indicator_a,accNodesData,accYears,pc_accounting_perIndicator));
1924  );
1925   
1926  accounting_perIndicator(indicator,indicator_a,accNodesModel,accYears,pc_accounting_perIndicator)
1927      $sum(nodesModel$(accounting_perIndicatorAgg(indicator,indicator_a,nodesModel,"horizon",pc_accounting_perIndicator)
1928          and sameas(accNodesModel,nodesModel)), 1)
1929      = sum(nodesModel$sameas(accNodesModel,nodesModel),
1930          accounting_perIndicatorAgg(indicator,indicator_a,nodesModel,"horizon",pc_accounting_perIndicator));
1931   
1932  accounting_perIndicator(indicator,indicator_a,accNodesModel,accYears,pc_accounting_perIndicator)
1933      $sum(nodesModel$(accounting_perIndicatorAgg(indicator,indicator_a,nodesModel,accYears,pc_accounting_perIndicator)
1934          and sameas(accNodesModel,nodesModel) and not sameas(accYears, "horizon")), 1)
1935      = sum(nodesModel$sameas(accNodesModel,nodesModel),
1936          accounting_perIndicatorAgg(indicator,indicator_a,nodesModel,accYears,pc_accounting_perIndicator));
1937   
1938   
1939  * Make sure all required indicators end up in the model
1940  set activeIndicators(accNodesModel,accYears,indicator);
1941  activeIndicators(accNodesModel,accYears,indicator)
1942     $((accounting_indicatorBounds(accNodesModel,accYears,indicator,"obj") <> 0
1945        or accounting_indicatorBounds(accNodesModel,accYears,indicator,"useFixed") <> 0
1946        or accounting_indicatorBounds(accNodesModel,accYears,indicator,"useLower") <> 0
1947        or accounting_indicatorBounds(accNodesModel,accYears,indicator,"useUpper") <> 0 )
1948          and not accounting_indicatorBounds(accNodesModel,accYears,indicator,"isVariable"))
1949     = yes;
1950   
1951  set activeIndicators_links(linksModel,years,indicator);
1952  activeIndicators_links(linksModelToCalc,yearsToCalc,indicator)
1953     $(accounting_indicatorBounds_links(linksModelToCalc,yearsToCalc,indicator,"useFixed") <> 0
1954        or accounting_indicatorBounds_links(linksModelToCalc,yearsToCalc,indicator,"useLower") <> 0
1955        or accounting_indicatorBounds_links(linksModelToCalc,yearsToCalc,indicator,"useUpper") <> 0 )
1956     = yes;
1957   
1958  set variableIndicators(accNodesModel,accYears,indicator);
1959  variableIndicators(accNodesModel,accYears,indicator)
1960     $(accounting_indicatorBounds(accNodesModel,accYears,indicator,"obj") = 0
1961        and accounting_indicatorBounds(accNodesModel,accYears,indicator,"isVariable"))
1962     = yes;
1963   
1964  * Calculate length of years and discount rates per indicator
1965  parameter yearFactor(accNodesModel,accYears,indicator,accYears);
1966  yearFactor(accNodesModel,accYears,indicator,accYears_a)
1967      $(map_accYears(accYears_a,accYears)
1968          and sum(yearsToCalc$(sameas(yearsToCalc,accYears_a)), 1))
1969      = 1;
1970   
1971  yearFactor(accNodesModel,accYears,indicator,accYears_a)
1972      $(map_accYears(accYears_a,accYears)
1973          and sum(yearsToCalc$(sameas(yearsToCalc,accYears_a)), 1)
1974          and accounting_indicatorBounds(accNodesModel,accYears,indicator,"integral"))
1975      = sum(yearsToCalc$sameas(accYears_a,yearsToCalc), yearsLen(yearsToCalc));
1976   
1977  yearFactor(accNodesModel,accYears,indicator,accYears_a)
1978      $(map_accYears(accYears_a,accYears)
1979          and sum(yearsToCalc$(sameas(yearsToCalc,accYears_a)), 1)
1980          and accounting_indicatorBounds(accNodesModel,accYears,indicator,"integral")
1981          and accounting_indicatorBounds(accNodesModel,accYears,indicator,"endyear")
1982          and yearFactor(accNodesModel,accYears,indicator,accYears_a) = inf)
1983      = accounting_indicatorBounds(accNodesModel,accYears,indicator,"endyear");
1984   
1985  yearFactor(accNodesModel,accYears,indicator,accYears_a)
1986      $(map_accYears(accYears_a,accYears)
1987          and sum(yearsToCalc$(sameas(yearsToCalc,accYears_a)), 1)
1988          and accounting_indicatorBounds(accNodesModel,accYears,indicator,"integral")
1989          and accounting_indicatorBounds(accNodesModel,accYears,indicator,"discount"))
1990      = yearFactor(accNodesModel,accYears,indicator,accYears_a)
1991          * (1 - accounting_indicatorBounds(accNodesModel,accYears,indicator,"discount"))
1992                  ** (accYears_a.val - smin(yearsToCalc, yearsToCalc.val));
1993   
1994   
1995  * ==== calculate compound indicators for the optimization ====
1996  scalar compIndicators_pre;
1997  scalar compIndicators_post;
1998   
1999  parameter compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a);
2000  compoundIndicators(accNodesModel,accYears,indicator,accNodesModel,accYears,indicator)
2001      $activeIndicators(accNodesModel,accYears,indicator) = 1;
2002   
2003  set compoundIndicators_act(accNodesModel,accYears,indicator);
2004  option compoundIndicators_act < compoundIndicators;
2005   
2006  parameter compoundIndicatorsExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa);
2007  parameter compoundIndicatorsExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a);
2008  compoundIndicatorsExt(accNodesModel,accYears,indicator,accNodesModel,accYears,indicator,accNodesModel,accYears,indicator)
2009      $compoundIndicators_act(accNodesModel,accYears,indicator) = 1;
2010   
2011  compIndicators_pre = 0;
2012  compIndicators_post = 1;
2013   
2014  option sparseval = 1;
2015  while(compIndicators_pre < compIndicators_post,
2016      compIndicators_pre = sum((accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa)
2017          $compoundIndicatorsExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa), 1);
2018   
2019      compoundIndicatorsExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa)
2020          $(compoundIndicators_act(accNodesModel,accYears,indicator)
2021              and compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
2022              and not accounting_indicatorBounds(accNodesModel_a,accYears_a,indicator_a,"isVariable")
2023              and map_accNodes(accNodesModel_aa,accNodesModel_a)
2024              and map_accYears(accYears_aa,accYears_a))
2025          = compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
2026              * accounting_perIndicator(indicator_a,indicator_aa,accNodesModel_aa,accYears_aa,"perIndicator");
2027   
2028      option compoundIndicatorsExt_r < compoundIndicatorsExt;
2029   
2030      compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa)
2031          $(compoundIndicators_act(accNodesModel,accYears,indicator)
2032              and sum((accNodesModel_a,accYears_a,indicator_a)
2033                      $compoundIndicatorsExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a), 1) = 1)
2034          = sum((accNodesModel_a,accYears_a,indicator_a)
2035                  $(compoundIndicatorsExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a)),
2036              compoundIndicatorsExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a));
2037   
2038      compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa)
2039          $(compoundIndicators_act(accNodesModel,accYears,indicator)
2040              and sum((accNodesModel_a,accYears_a,indicator_a)
2041                      $compoundIndicatorsExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a), 1) > 1)
2042          = sum((accNodesModel_a,accYears_a,indicator_a)
2043                  $(compoundIndicatorsExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a)
2044                      and not (sameas(accNodesModel, accNodesModel_a) and sameas(accYears, accYears_a) and sameas(indicator, indicator_a))),
2045              compoundIndicatorsExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a))
2046          / sum((accNodesModel_a,accYears_a,indicator_a)
2047                  $(compoundIndicatorsExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a)
2048                      and not (sameas(accNodesModel, accNodesModel_a) and sameas(accYears, accYears_a) and sameas(indicator, indicator_a))), 1);
2049   
2050      option compoundIndicators_act < compoundIndicators;
2051      compIndicators_post = sum((accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa)
2052          $compoundIndicatorsExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa), 1);
2053  );
2054  option sparseval = 0;
2055   
2056  * map to sub-years and sub-nodes
2057  compoundIndicatorsExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_a)
2058      $(compoundIndicators_act(accNodesModel,accYears,indicator)
2059          and compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
2060          and map_accYears(accYears_aa,accYears_a)
2061          and map_accNodes(accNodesModel_aa,accNodesModel_a))
2062      = compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
2063          * yearFactor(accNodesModel,accYears,indicator,accYears_aa);
2064   
2065  * Remove all accounting regions and accounting years
2066  compoundIndicatorsExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa)
2067      $(compoundIndicatorsExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa)
2068          and not accounting_indicatorBounds(accNodesModel_aa,accYears_aa,indicator_aa,"isVariable")
2069          and sum(accNodes$(sameas(accNodes,accNodesModel_aa)), 1)
2070              or sameas("horizon",accYears_aa))
2071      = 0;
2072   
2073  * Map from extended parameter to final parameter
2074  option compoundIndicatorsExt_r < compoundIndicatorsExt;
2075  compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa)
2076      $(compoundIndicators_act(accNodesModel,accYears,indicator)
2077          and sum((accNodesModel_a,accYears_a,indicator_a)
2078                  $compoundIndicatorsExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a), 1) = 1)
2079      = sum((accNodesModel_a,accYears_a,indicator_a)
2080              $(compoundIndicatorsExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a)),
2081          compoundIndicatorsExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a));
2082   
2083  compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa)
2084      $(compoundIndicators_act(accNodesModel,accYears,indicator)
2085          and sum((accNodesModel_a,accYears_a,indicator_a)
2086                  $compoundIndicatorsExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a), 1) > 1)
2087      = sum((accNodesModel_a,accYears_a,indicator_a)
2088              $(compoundIndicatorsExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a)
2089                  and not (sameas(accNodesModel, accNodesModel_a) and sameas(accYears, accYears_a) and sameas(indicator, indicator_a))),
2090          compoundIndicatorsExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a))
2091      / sum((accNodesModel_a,accYears_a,indicator_a)
2092              $(compoundIndicatorsExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a)
2093                  and not (sameas(accNodesModel, accNodesModel_a) and sameas(accYears, accYears_a) and sameas(indicator, indicator_a))), 1);
2094   
2095  * Remove all accounting regions and accounting years
2096  compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
2097      $(compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
2098          and not accounting_indicatorBounds(accNodesModel_a,accYears_a,indicator_a,"isVariable")
2099          and (sum(accNodes$(sameas(accNodes,accNodesModel_a)), 1)
2100              or sameas("horizon",accYears_a)))
2101      = 0;
2102   
2103  * Remove all slack indicators except the ones declared in indicatorBounds
2104  compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
2105      $(compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
2106          and sum((accNodesModel_aa,accYears_aa)$accounting_indicatorBounds(accNodesModel_aa,accYears_aa,indicator_a,"isVariable"), 1)
2107          and not accounting_indicatorBounds(accNodesModel_a,accYears_a,indicator_a,"isVariable"))
2108      = 0;
2109   
2110  * ==== compound indicators for the post calculation ====
2111  parameter compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a);
2112  compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel,accYears,indicator)
2113      $(sum(nodesModelToCalc$map_accNodesToCalc(accNodesModel,nodesModelToCalc), 1)
2114          and sum(yearsToCalc$map_accYearsToCalc(accYears,yearsToCalc), 1)) = 1;
2115   
2116  set compoundIndicatorsFull_act(accNodesModel,accYears,indicator);
2117  option compoundIndicatorsFull_act < compoundIndicatorsFull;
2118   
2119  parameter compoundIndicatorsFullExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa);
2120  parameter compoundIndicatorsFullExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a);
2121  compoundIndicatorsFullExt(accNodesModel,accYears,indicator,accNodesModel,accYears,indicator,accNodesModel,accYears,indicator) = 1;
2122   
2123  compIndicators_pre = 0;
2124  compIndicators_post = 1;
2125   
2126  option sparseval = 1;
2127  while(compIndicators_pre < compIndicators_post,
2128      compIndicators_pre = sum((accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa)
2129          $compoundIndicatorsFullExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa), 1);
2130   
2131      compoundIndicatorsFullExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa)
2132          $(compoundIndicatorsFull_act(accNodesModel,accYears,indicator)
2133              and compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
2134              and not accounting_indicatorBounds(accNodesModel_a,accYears_a,indicator_a,"isVariable")
2135              and map_accNodes(accNodesModel_aa,accNodesModel_a)
2136              and map_accYears(accYears_aa,accYears_a))
2137          = compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
2138              * accounting_perIndicator(indicator_a,indicator_aa,accNodesModel_aa,accYears_aa,"perIndicator");
2139   
2140      option compoundIndicatorsFullExt_r < compoundIndicatorsFullExt;
2141   
2142      compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa)
2143          $(compoundIndicatorsFull_act(accNodesModel,accYears,indicator)
2144              and sum((accNodesModel_a,accYears_a,indicator_a)
2145                      $compoundIndicatorsFullExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a), 1) = 1)
2146          = sum((accNodesModel_a,accYears_a,indicator_a)
2147                  $(compoundIndicatorsFullExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a)),
2148              compoundIndicatorsFullExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a));
2149   
2150      compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa)
2151          $(compoundIndicatorsFull_act(accNodesModel,accYears,indicator)
2152              and sum((accNodesModel_a,accYears_a,indicator_a)
2153                      $compoundIndicatorsFullExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a), 1) > 1)
2154          = sum((accNodesModel_a,accYears_a,indicator_a)
2155                  $(compoundIndicatorsFullExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a)
2156                      and not (sameas(accNodesModel, accNodesModel_a) and sameas(accYears, accYears_a) and sameas(indicator, indicator_a))),
2157              compoundIndicatorsFullExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a))
2158          / sum((accNodesModel_a,accYears_a,indicator_a)
2159                  $(compoundIndicatorsFullExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a)
2160                      and not (sameas(accNodesModel, accNodesModel_a) and sameas(accYears, accYears_a) and sameas(indicator, indicator_a))), 1);
2161   
2162      option compoundIndicatorsFull_act < compoundIndicatorsFull;
2163      compIndicators_post = sum((accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa)
2164          $compoundIndicatorsFullExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa), 1);
2165  );
2166  option sparseval = 0;
2167   
2168  * map to sub-years and sub-nodes
2169  compoundIndicatorsFullExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_a)
2170      $(compoundIndicatorsFull_act(accNodesModel,accYears,indicator)
2171          and compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
2172          and map_accYears(accYears_aa,accYears_a)
2173          and map_accNodes(accNodesModel_aa,accNodesModel_a))
2174      = compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
2175          * yearFactor(accNodesModel,accYears,indicator,accYears_aa);
2176   
2177  * Remove all accounting regions and accounting years
2178  compoundIndicatorsFullExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa)
2179      $(compoundIndicatorsFullExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa)
2180          and not accounting_indicatorBounds(accNodesModel_aa,accYears_aa,indicator_aa,"isVariable")
2181          and sum(accNodes$(sameas(accNodes,accNodesModel_aa)), 1)
2182              or sameas("horizon",accYears_aa))
2183      = 0;
2184   
2185  * Map from extended parameter to final parameter
2186  option compoundIndicatorsFullExt_r < compoundIndicatorsFullExt;
2187  compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa)
2188      $(compoundIndicatorsFull_act(accNodesModel,accYears,indicator)
2189          and sum((accNodesModel_a,accYears_a,indicator_a)
2190                  $compoundIndicatorsFullExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a), 1) = 1)
2191      = sum((accNodesModel_a,accYears_a,indicator_a)
2192              $(compoundIndicatorsFullExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a)),
2193          compoundIndicatorsFullExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a));
2194   
2195  compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa)
2196      $(compoundIndicatorsFull_act(accNodesModel,accYears,indicator)
2197          and sum((accNodesModel_a,accYears_a,indicator_a)
2198                  $compoundIndicatorsFullExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a), 1) > 1)
2199      = sum((accNodesModel_a,accYears_a,indicator_a)
2200              $(compoundIndicatorsFullExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a)
2201                  and not (sameas(accNodesModel, accNodesModel_a) and sameas(accYears, accYears_a) and sameas(indicator, indicator_a))),
2202          compoundIndicatorsFullExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a))
2203      / sum((accNodesModel_a,accYears_a,indicator_a)
2204              $(compoundIndicatorsFullExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a)
2205                  and not (sameas(accNodesModel, accNodesModel_a) and sameas(accYears, accYears_a) and sameas(indicator, indicator_a))), 1);
2206   
2207  * Remove all accounting regions and accounting years
2208  compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
2209      $(compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
2210          and not accounting_indicatorBounds(accNodesModel_a,accYears_a,indicator_a,"isVariable")
2211          and (sum(accNodes$(sameas(accNodes,accNodesModel_a)), 1)
2212              or sameas("horizon",accYears_a)))
2213      = 0;
2214   
2215  * Remove all slack indicators except the ones declared in indicatorBounds
2216  compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
2217      $(compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
2218          and sum((accNodesModel_aa,accYears_aa)$accounting_indicatorBounds(accNodesModel_aa,accYears_aa,indicator_a,"isVariable"), 1)
2219          and not accounting_indicatorBounds(accNodesModel_a,accYears_a,indicator_a,"isVariable"))
2220      = 0;
2221   
2222  * Check if the objective value and optimization sense is set correctly
2223  scalar opti_values, opti_sense;
2224  opti_values = sum((accNodesModel,accYears,indicator)$(accounting_indicatorBounds(accNodesModel,accYears,indicator,"obj") <> 0), 1);
2225  opti_sense = sum((accNodesModel,accYears,indicator), accounting_indicatorBounds(accNodesModel,accYears,indicator,"obj"));
2226  abort$(opti_values < 1)
2227      "Accounting: No indicator specified as objective value"
2228  abort$(opti_values > 1)
2229      "Accounting: Too many indicators specified as objective value"
2230  abort$(opti_sense <> -1 and opti_sense <> 1)
2231      "Accounting: Optimization sense has to be either -1 or 1"
INCLUDE    C:\Local\REMix\framework\remix\framework\model\source\accounting\annuities.gms
2233  * SPDX-FileCopyrightText: Copyright (c) 2023 German Aerospace Center (DLR)
2234  * SPDX-License-Identifier: BSD-3-Clause
2235   
2236  * Calculation of annuities
2237   
2238  abort$(sum((indicator,nodesModelToCalc,converter_techs,vintage)
2239          $(accounting_converterUnits(indicator,nodesModelToCalc,converter_techs,vintage,"useAnnuity") = 1
2240          and accounting_converterUnits(indicator,nodesModelToCalc,converter_techs,vintage,"amorTime") < 1), 1) > 0 )
2241      "Accounting: Some converter technologies use annuities but have no amortization time"
2242   
2243  parameter accounting_annuityFactor_converter(indicator,nodesModel,converter_techs,vintage);
2244  accounting_annuityFactor_converter(indicator,nodesModelToCalc,converter_techs,vintage)
2245      $accounting_converterUnits(indicator,nodesModelToCalc,converter_techs,vintage,"useAnnuity")
2246      =
2247      accounting_converterUnits(indicator,nodesModelToCalc,converter_techs,vintage,"interest")
2248          * (1 + accounting_converterUnits(indicator,nodesModelToCalc,converter_techs,vintage,"interest"))
2249          ** accounting_converterUnits(indicator,nodesModelToCalc,converter_techs,vintage,"amorTime")
2250      / ((1 + accounting_converterUnits(indicator,nodesModelToCalc,converter_techs,vintage,"interest"))
2251          ** accounting_converterUnits(indicator,nodesModelToCalc,converter_techs,vintage,"amorTime") - 1);
2252   
2253   
2254  abort$(sum((indicator,nodesModelToCalc,storage_techs,vintage)
2255          $(accounting_storageUnits(indicator,nodesModelToCalc,storage_techs,vintage,"useAnnuity") = 1
2256          and accounting_storageUnits(indicator,nodesModelToCalc,storage_techs,vintage,"amorTime") < 1), 1) > 0 )
2257      "Accounting: Some storage technologies use annuities but have no amortization time"
2258   
2259  parameter accounting_annuityFactor_storage(indicator,nodesModel,storage_techs,vintage);
2260  accounting_annuityFactor_storage(indicator,nodesModelToCalc,storage_techs,vintage)
2261      $accounting_storageUnits(indicator,nodesModelToCalc,storage_techs,vintage,"useAnnuity")
2262      =
2263      accounting_storageUnits(indicator,nodesModelToCalc,storage_techs,vintage,"interest")
2264          * (1 + accounting_storageUnits(indicator,nodesModelToCalc,storage_techs,vintage,"interest"))
2265          ** accounting_storageUnits(indicator,nodesModelToCalc,storage_techs,vintage,"amorTime")
2266      / ((1 + accounting_storageUnits(indicator,nodesModelToCalc,storage_techs,vintage,"interest"))
2267          ** accounting_storageUnits(indicator,nodesModelToCalc,storage_techs,vintage,"amorTime") - 1);
2268   
2269   
2270  abort$(sum((indicator,linksModelToCalc,transfer_techs,vintage)
2271          $(accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"useAnnuity") = 1
2272          and accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"amorTime") < 1), 1) > 0 )
2273      "Accounting: Some transfer technologies use annuities but have no amortization time"
2274   
2275  parameter accounting_annuityFactor_transferLink(indicator,linksModel,transfer_techs,vintage);
2276  accounting_annuityFactor_transferLink(indicator,linksModelToCalc,transfer_techs,vintage)
2277      $accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"useAnnuity")
2278      =
2279      accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"interest")
2280          * (1 + accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"interest"))
2281          ** accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"amorTime")
2282      / ((1 + accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"interest"))
2283          ** accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"amorTime") - 1);
2284   
2285   
2286   
2287  abort$(sum((indicator,linksModelToCalc,transfer_techs,vintage,link_types)
2288          $(accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"useAnnuity") = 1
2289          and accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"amorTime") < 1), 1) > 0 )
2290      "Accounting: Some transfer-per-length technologies use annuities but have no amortization time"
2291   
2292  parameter accounting_annuityFactor_transferDistance(indicator,linksModel,transfer_techs,vintage,link_types);
2293  accounting_annuityFactor_transferDistance(indicator,linksModelToCalc,transfer_techs,vintage,link_types) = 1;
2294   
2295  accounting_annuityFactor_transferDistance(indicator,linksModelToCalc,transfer_techs,vintage,link_types)
2296      $accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"useAnnuity")
2297      =
2298      accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"interest")
2299          * (1 + accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"interest"))
2300          ** accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"amorTime")
2301      / ((1 + accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"interest"))
2302          ** accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"amorTime") - 1);
2303   
INCLUDE    C:\Local\REMix\framework\remix\framework\model\source\methods\mga_pre.gms
2305  * SPDX-FileCopyrightText: Copyright (c) 2023 German Aerospace Center (DLR)
2306  * SPDX-License-Identifier: BSD-3-Clause
2307   
INCLUDE    C:\Local\REMix\framework\remix\framework\model\source\methods\pareto_pre.gms
2311  * SPDX-FileCopyrightText: Copyright (c) 2023 German Aerospace Center (DLR)
2312  * SPDX-License-Identifier: BSD-3-Clause
2313   
INCLUDE    C:\Local\REMix\framework\remix\framework\model\source\postcalc\declaration.gms
2317  * SPDX-FileCopyrightText: Copyright (c) 2023 German Aerospace Center (DLR)
2318  * SPDX-License-Identifier: BSD-3-Clause
2319  * // # Output data
2320  * // This is the reference data model of the REMix output.
2321  * //
2322  * // ## Standard output
2325   
2332   
2334   
2335  set capType / "build", "decom", "total", "lowerLimit", "upperLimit", "total_degraded" /;
2336  set balanceType / "netto", "brutto", "positive", "negative", "flh" /;
2337  set profileType / "upper", "fixed", "lower" /;
2338  set r2a_has_converter_cost(indicator,nodesModel,years,techs,vintage,commodity);
2339   
2340  ** // OUTPUT: indicator_accounting | OEO_00000350:quantity value
2341  * // ### indicator_accounting
2342  * // Title: Accounting indicators Post-calculation
2343  parameter indicator_accounting(accNodesModel,accYears,indicator) "Post-calculation aggregated indicator accounting" ;
2344  * //
2345  ** // OUTPUT: indicator_accounting_ref | OEO_00000350:quantity value
2346  * // ### indicator_accounting_ref
2347  * // Title: Accounting indicators reference
2348  parameter indicator_accounting_ref(accNodesModel,accYears,indicator) "Indicator accounting optimization levels" ;
2349  * //
2350  ** // OUTPUT: indicator_accounting_comp | OEO_00000350:quantity value
2351  * // ### indicator_accounting_comp
2352  * // Title: Accounting indicators composition
2353  parameter indicator_accounting_comp(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a) "Indicator accounting with other indicator composition" ;
2354  * //
2355  ** // OUTPUT: indicator_accounting_detailed | OEO_00000350:quantity value
2356  * // ### indicator_accounting_detailed
2357  * // Title: Accounting indicators detail
2358  parameter indicator_accounting_detailed(indicator,nodesModel,years,techs) "Indicator accounting with technological composition" ;
2359  * //
2360  ** // OUTPUT: indicator_accounting_links | OEO_00000350:quantity value
2361  * // ### indicator_accounting_links
2362  * // Title: Accounting indicators per transfer link
2363  parameter indicator_accounting_links(indicator,nodesModel,nodesModel_a,linksModel,years,techs) "Indicator accounting of transfer technologies" ;
2364  * //
2365  parameter converter_ratedInput(techs,vintage,commodity);
2366  parameter converter_ratedOutput(techs,vintage,commodity);
2367  parameter converter_ratedOutput_min(nodesModel,years,techs,commodity);
2368  parameter converter_ratedOutput_max(nodesModel,years,techs,commodity);
2369   
2370  ** // OUTPUT: converter_caps | OEO_00010257:power capacity
2371  * // ### converter_caps
2372  * // Title: Coverter capacities post-calculation
2373  parameter converter_caps(accNodesModel,accYears,techs,commodity,capType) "Converter capacities, aggregated total" ;
2374  * //
2375  parameter converter_caps_ext(accNodesModel,nodesModel,accYears,years,techs,vintage,commodity,capType);
2376   
2377  ** // OUTPUT: converter_units | OEO_00000350:quantity value
2378  * // ### converter_units
2379  * // Title: Coverter units post-calculation
2380  parameter converter_units(accNodesModel,accYears,techs,vintage,capType) "Converter units" ;
2381  * //
2382  parameter converter_units_ext(accNodesModel,nodesModel,accYears,years,techs,vintage,capType);
2383   
2384  parameter max_transfer_coefficient(techs,commodity);
2385  parameter min_transfer_coefficient(techs,commodity);
2386  ** // OUTPUT: transfer_links | OEO_00000350:quantity value
2387  * // ### transfer_links
2388  * // Title: Transfer post-calculation
2389  parameter transfer_links(linksModel,years,techs,vintage,capType) "Transfer links" ;
2390  * //
2391  ** // OUTPUT: transfer_caps | OEO_00010257:power capacity
2392  * // ### transfer_caps
2393  * // Title: Transfer capacities post-calculation
2394  parameter transfer_caps(nodesModel_start,nodesModel_end,linksModel,years,techs,commodity,capType) "Transfer capacities, aggregated total" ;
2395  * //
2396  ** // OUTPUT: transfer_flows | OEO_00050019:energy amount value
2397  * // ### transfer_flows
2398  * // Title: Transfer hourly flows
2399  parameter transfer_flows(timeModel,nodesModel_start,nodesModel_end,linksModel,years,techs,commodity) "Hourly link flows" ;
2400  * //
2401  ** // OUTPUT: transfer_flows_annual | OEO_00050019:energy amount value
2402  * // ### transfer_flows_annual
2403  * // Title: Transfer annual flows
2404  parameter transfer_flows_annual(nodesModel_start,nodesModel_end,linksModel,years,techs,commodity,balanceType) "Annual link flows" ;
2405  * //
2406  ** // OUTPUT: transfer_losses | OEO_00050019:energy amount value
2407  * // ### transfer_losses
2408  * // Title: Transfer hourly losses
2409  parameter transfer_losses(timeModel,nodesModel_start,nodesModel_end,linksModel,years,techs,commodity) "Hourly link losses" ;
2410  * //
2411  ** // OUTPUT: transfer_losses_annual | OEO_00050019:energy amount value
2412  * // ### transfer_losses_annual
2413  * // Title: Transfer annual losses
2414  parameter transfer_losses_annual(nodesModel_start,nodesModel_end,linksModel,years,techs,commodity,balanceType) "Annual link losses" ;
2415  * //
2416  parameter storage_size_max(nodesModel,years,techs,commodity);
2417  parameter storage_size_min(nodesModel,years,techs,commodity);
2418  ** // OUTPUT: storage_units |  OEO_00000350:quantity value
2419  * // ### storage_units
2420  * // Title: Storage units post-calculation
2421  parameter storage_units(accNodesModel,accYears,techs,vintage,capType) "Storage units" ;
2422  * //
2423  parameter storage_units_ext(accNodesModel,nodesModel,accYears,years,techs,vintage,capType);
2424  ** // OUTPUT: storage_caps | OEO_00230000:energy storage capacity
2425  * // ### storage_caps
2426  * // Title: Storage capacities post-calculation
2427  parameter storage_caps(accNodesModel,accYears,techs,commodity,capType) "Storage capacities, aggregated total" ;
2428  * //
2429  parameter storage_caps_ext(accNodesModel,nodesModel,accYears,years,techs,vintage,commodity,capType);
2430  ** // OUTPUT: storage_level_out | OEO_00330012:energy storage content
2431  * // ### storage_level_out
2432  * // Title: Storage level
2433  parameter storage_level_out(timeModel,accNodesModel,accYears,techs,commodity) "Storage level per time step" ;
2434  * //
2435  parameter storage_level_out_ext(timeModel,accNodesModel,nodesModel,accYears,years,techs,vintage,commodity);
2436  ** // OUTPUT: storage_flows | OEO_00050019:energy amount value
2437  * // ### storage_flows
2438  * // Title: Storage hourly flows
2439  parameter storage_flows(timeModel,accNodesModel,accYears,techs,commodity) "Storage flows per time step" ;
2440  * //
2441  parameter storage_flows_ext(timeModel,accNodesModel,nodesModel,accYears,years,techs,vintage,commodity);
2442  ** // OUTPUT: storage_flows_annual | OEO_00050019:energy amount value
2443  * // ### storage_flows_annual
2444  * // Title: Storage annual flows
2445  parameter storage_flows_annual(accNodesModel,accYears,techs,commodity,balanceType) "Aggregated storage flows" ;
2446  * //
2447  ** // OUTPUT: storage_losses_out | OEO_00050019:energy amount value
2448  * // ### storage_losses_out
2449  * // Title: Storage hourly losses
2450  parameter storage_losses_out(timeModel,accNodesModel,accYears,techs,commodity) "Storage losses per time step" ;
2451  * //
2452  ** // OUTPUT: storage_losses_annual | OEO_00050019:energy amount value
2453  * // ### storage_losses_annual
2454  * // Title: Storage annual losses
2455  parameter storage_losses_annual(accNodesModel,accYears,techs,commodity,balanceType) "Aggregated storage losses" ;
2456  * //
2457  ** // OUTPUT: commodity_balance | OEO_00000350:quantity value
2458  * // ### commodity_balance
2459  * // Title: Hourly commodity balance
2460  parameter commodity_balance(timeModel,accNodesModel,accYears,techs,commodity) "Commodity balances per model hour" ;
2461  parameter commodity_balance_ext(timeModel,accNodesModel,nodesModel,accYears,years,techs,vintage,commodity);
2462  * //
2463  ** // OUTPUT: commodity_balance_annual | OEO_00000350:quantity value
2464  * // ### commodity_balance_annual
2465  * // Title: Annual commodity balance
2466  parameter commodity_balance_annual(accNodesModel,accYears,techs,commodity,balanceType) "Aggregated commodity balances" ;
2467  * //
2468  ** // OUTPUT: marginals_sourcesink_profile | OEO_00040008:marginal cost
2469  * // ### marginals_sourcesink_profile
2470  * // Title: Source-sink marginals
2471  parameter marginals_sourcesink_profile(timeModel,nodesModel,years,techs,commodity) "Source and sink flow marginal values" ;
2472  * //
2473  ** // OUTPUT: marginals_balance | OEO_00040008:marginal cost
2474  * // ### marginals_balance
2475  * // Title: Nodel balance marginals
2476  parameter marginals_balance(timeModel,nodesModel,years,commodity) "Nodal balance marginal values" ;
2477  * //
2478  ** // OUTPUT: marginals_sourcesink_sum | OEO_00040008:marginal cost
2479  * // ### marginals_sourcesink_sum
2480  * // Title: Source-sink annual marginals
2481  parameter marginals_sourcesink_sum(nodesModel,years,techs,commodity) "Annual source and sink flow marginal values" ;
2482  * //
2483  ** // OUTPUT: marginals_indicator_bounds | OEO_00040008:marginal cost
2484  * // ### marginals_indicator_bounds
2485  * // Title: Indicator bounds marginals
2486  parameter marginals_indicator_bounds(accNodesModel,accYears,indicator) "Accounting indicator marginals" ;
2487  * //
2488  * // ## REMix-AMIRIS interface output
2489  * //
2490  ** // OUTPUT: r2a_annuity_cost_converter | OEO_00040009:cost
2491  * // ### r2a_annuity_cost_converter
2492  * // Title: Converter annuity cost
2493  parameter r2a_annuity_cost_converter(indicator,accNodesModel,accYears,techs,vintage,commodity) "Annuity cost of converters" ;
2494  * //
2495  ** // OUTPUT: r2a_spec_cost_converter | OEO_00040009:cost
2496  * // ### r2a_spec_cost_converter
2497  * // Title: Converter specific cost
2498  parameter r2a_spec_cost_converter(indicator,accNodesModel,accYears,techs,vintage,commodity) "Specific cost of converters" ;
2499  * //
2500  ** // OUTPUT: r2a_spec_cost_fuel | OEO_00040009:cost
2501  * // ### r2a_spec_cost_fuel
2502  * // Title: Commodity specific cost
2503  parameter r2a_spec_cost_fuel(indicator,accNodesModel,accYears,techs,commodity) "Specific cost of commodities, used particularly for fuels" ;
2504  * //
2505  ** // OUTPUT: r2a_spec_cost_indicator | OEO_00040009:cost
2506  * // ### r2a_spec_cost_indicator
2507  * // Title: Indicator specific cost
2508  parameter r2a_spec_cost_indicator(indicator,indicator_a,accNodesModel,accYears) "Specific indicator cost" ;
2509  * //
2510  ** // OUTPUT: r2a_converter_efficiencies | OEO_00140050:efficiency value
2511  * // ### r2a_converter_efficiencies
2512  * // Title: Indicator specific cost
2513  parameter r2a_converter_efficiencies(techs,vintage,activity,commodity,commodity_a) "Converter-specific efficiency" ;
2514  * //
2515  ** // OUTPUT: r2a_converter_avail_factor | OEO_00000350:quantity value
2516  * // ### r2a_converter_avail_factor
2517  * // Title: Converter availability factor
2518  parameter r2a_converter_avail_factor(accNodesModel,accYears,techs,vintage) "Availability factor of converter technologies" ;
2519  parameter r2a_converter_avail_profile(timeModel,accNodesModel,accYears,techs,commodity,profileType) "Availability of converter technologies" ;
2520  parameter r2a_converter_avail_profile_ext(timeModel,accNodesModel,nodesModel,accYears,years,techs,vintage,commodity,profileType);
2521  * //
2522  ** // OUTPUT: r2a_storage_e2p | OEO_00000350:quantity value
2523  * // ### r2a_storage_e2p
2524  * // Title: E2P Storage
2525  parameter r2a_storage_e2p(accNodesModel,accYears,techs,vintage,commodity,capType) "Energy-to-power ratio" ;
2526  * //
2527  ** // OUTPUT: r2a_storage_selfdischarge | OEO_00000350:quantity value
2528  * // ### r2a_storage_selfdischarge
2529  * // Title: Storage self discharge rates
2530  parameter r2a_storage_selfdischarge(accNodesModel,accYears,techs,vintage,commodity);
2531   
INCLUDE    C:\Local\REMix\framework\remix\framework\model\source\loadgdx.gms
2535  * SPDX-FileCopyrightText: Copyright (c) 2023 German Aerospace Center (DLR)
2536  * SPDX-License-Identifier: BSD-3-Clause
2537   
2538  * ==== global settings ====
2540   
2542   
INCLUDE    C:\Local\REMix\framework\remix\framework\model\source\core\converter.gms
2544  * SPDX-FileCopyrightText: Copyright (c) 2023 German Aerospace Center (DLR)
2545  * SPDX-License-Identifier: BSD-3-Clause
2546   
2547  * // # core_converter
2548  * // The equations in this file describe the converters in the model.
2549   
2550  * // ## Advanced features
2551  * //
2552  * // You can find a more detailed explanation of the %curly_open%ref%curly_close%`MIP features <explanations_mip_label>`.
2553  ** // There is also a more detailed explanation on the modeling of outages at the %curly_open%ref%curly_close%`resilience section <explanations_resilience_label>`.
2554  * //
2555  * // In the following table you can see which modifications you have to make to your data to use the different features.
2556  * //
2557  * // | Feature | Modification |
2558  * // | ------ | ------ |
2559  * // | MIP expansion | The converter_tech_Parameter "mipUnits" has to be set to 1 in converter_techParam.dat for the technologies and years where descrete expansion is wanted |
2560  * // | Minimum up/downtime | The converter_tech_Parameters "minUptime" and/or "minDowntime" need to be set to the according amount of minimum time steps.Furthermore, the converter_tech_Parameter "mipDispatch" has to be set to 1 in converter_techParam.dat
2561  * // for the technologies and years where a minimum up- or downtime should be applied so that the units can be shut down. "mipUnits" will automatically be set to 1 |
2562  * // | Partial load | The converter_tech_Parameter "mipDispatch" has to be set to 1 in converter_techParam.dat for the technologies and years where you want to make use of the partial load feature. You also have to set a value to
2563  * // the converter_coefficient_parameters "minLoad" and/or "maxLoad" for the according technologies, vintages, activities and commodities. You can then for example set different "coefficient" values for each activity in converter_coefficient.dat |
2564  ** // | Outages | You have to include the converter_outageProfile.dat-file and while executing the model you have to set --method=resilience |
2565   
2566  * // ## %curly_open%ref%curly_close%`sets <remix_model_sets_label>`
2567  * //
2568  * // ### set_converter_techs.dat
2569  * // In this file all converter technologies are listed that can be used within your model.
2570  * //
2571  * // ### set_activities.dat
2572  * // All modes with which the converter technologies can be operated need to be added here.
2573  * // Examples: Charge (for the charging mode of a storage), Powergen (for the mode in which a converter produces electricity), Curtailment (for the mode in which a renewable power plant is shut down), …
2574  * // If you would like to use the partial load feature, all activity modes that should be available for this feature need to be defined here as well.
2575  * //
2576  * // ### set_commodities.dat
2577  * // In this file all commodities are listed that can be used and converted by the converter technologies.
2578  * // Examples: Electricity, Coal, Biomass, Hydrogen, …
2579   
2580  * // ## Variables
2581  * // {special_table_converter_variables}
8524   
8525  * ==== loading units from gdx file ====
8526   
8527  * Load units from gdx file
8529   
8530  * ==== calculation of mappings ====
8531   
8532  * Technologies with a lifeTime > 0 are available
8533  set converter_availTech(nodesModel,years,converter_techs,vintage);
8534  converter_availTech(nodesModel,years,converter_techs,vintage)
8535      $(vintage.val = smax(vintage_a$(vintage_a.val <= years.val
8536          and converter_techParam(converter_techs,vintage_a,"lifeTime") > 0), vintage_a.val)) = yes;
8537   
8538  * Technologies to optimize become unavailable if they have an unitsUpperLimit of 0
8539  converter_availTech(nodesModel,years,converter_techs,vintage)
8540      $(yearsToCalc(years) and converter_capacityParam(nodesModel,years,converter_techs,"unitsUpperLimit") = 0 ) = no;
8541   
8542  * Technologies already built become unavailable if they have an unitsBuild of 0
8543  converter_availTech(nodesModel,years,converter_techs,vintage)
8544      $( ( not yearsToCalc(years)) and converter_capacityParam(nodesModel,years,converter_techs,"unitsBuild") = 0 ) = no;
8545   
8546  * Used technologies are available technologies over their technical lifeTime
8547  set converter_usedTech(nodesModel,years,converter_techs,vintage);
8548  converter_usedTech(nodesModel,years,converter_techs,vintage)
8549      $(vintage.val <= years.val
8550          and years.val < smax(years_a$converter_availTech(nodesModel,years_a,converter_techs,vintage),
8551                                  years_a.val + converter_techParam(converter_techs,vintage,"lifeTime"))
8552          ) = yes;
8553   
8554  * Technologies have to be decomissioned in the interval of first avail + lifetime to last avail + lifetime
8555  set converter_decomTech(nodesModel,years,converter_techs,vintage);
8556  converter_decomTech(nodesModel,years,converter_techs,vintage)
8557    $(sum(years_a$converter_usedTech(nodesModel,years_a,converter_techs,vintage), 1)
8558      and sum(yearsToCalc
8559        $(sameas(years, yearsToCalc)
8560          and yearsToCalc.val >= smin(years_a$converter_availTech(nodesModel,years_a,converter_techs,vintage), years_a.val) + converter_techParam(converter_techs,vintage,"lifeTime")
8561          and yearsToCalc.val <= smax(years_a$converter_availTech(nodesModel,years_a,converter_techs,vintage), years_a.val) + converter_techParam(converter_techs,vintage,"lifeTime")), 1))
8562    = yes;
8563   
8564  * Extend the decom frame to the year after the last year of usedTech
8565  converter_decomTech(nodesModel,yearsToCalc,converter_techs,vintage)
8566    $(converter_usedTech(nodesModel,yearsToCalc-1,converter_techs,vintage)
8567      and converter_decomTech(nodesModel,yearsToCalc-1,converter_techs,vintage))
8568    = yes;
8569   
8570  * Mapping for used activities and commodities
8571  set converter_usedActCom(converter_techs,vintage,activity,commodity);
8572  option converter_usedActCom < converter_coefficient;
8573   
8574  set converter_usedAct(converter_techs,vintage,activity);
8575  option converter_usedAct < converter_usedActCom;
8576   
8577  set converter_usedCom(converter_techs,vintage,commodity);
8578  option converter_usedCom < converter_usedActCom;
8579   
8580  set converter_usedTechAct(nodesModel,years,converter_techs,vintage,activity);
8581  converter_usedTechAct(nodesModel,years,converter_techs,vintage,activity)
8582      $(converter_usedTech(nodesModel,years,converter_techs,vintage)
8583          and converter_usedAct(converter_techs,vintage,activity))
8584      = yes;
8585   
8586  set converter_useRampPos(nodesModel,years,converter_techs,vintage);
8587  converter_useRampPos(nodesModelToCalc,yearsToCalc,converter_techs,vintage)
8588    $(sum(indicator$accounting_converterStartup(indicator,nodesModelToCalc,converter_techs,vintage,"perRamp"), 1)
8589      or sum(indicator$accounting_converterStartup(indicator,nodesModelToCalc,converter_techs,vintage,"perRampPos"), 1))
8590    = 1;
8591   
8592  set converter_useRampNeg(nodesModel,years,converter_techs,vintage);
8593  converter_useRampNeg(nodesModelToCalc,yearsToCalc,converter_techs,vintage)
8594    $(sum(indicator$accounting_converterStartup(indicator,nodesModelToCalc,converter_techs,vintage,"perRamp"), 1)
8595      or sum(indicator$accounting_converterStartup(indicator,nodesModelToCalc,converter_techs,vintage,"perRampNeg"), 1))
8596    = 1;
8597   
8598   
8599  * ==== aggregation of profiles ====
8600   
8601  * derive upper and lower profiles then aggregate
8602  set converter_activity_hasProfileIn(nodesData,years,converter_techs,pc_converter_activityProfile);
8603  option converter_activity_hasProfileIn < converter_activityProfileIn;
8604   
8605  set converter_activity_hasProfile(nodesModel,years,converter_techs,pc_converter_activityProfile);
8606  converter_activity_hasProfile(nodesModelToCalc,yearsToCalc,converter_techs,pc_converter_activityProfile)
8607      = sum(nodesData$aggregateNodesModel(nodesData,nodesModelToCalc),
8608              converter_activity_hasProfileIn(nodesData,yearsToCalc,converter_techs,pc_converter_activityProfile));
8609   
8610  set converter_coefficient_hasProfileIn(nodesData,years,converter_techs,vintage,activity,commodity);
8611  option converter_coefficient_hasProfileIn < converter_coefficientProfileIn;
8612   
8613  set converter_coefficient_hasProfile(nodesModel,years,converter_techs,vintage,activity,commodity);
8614  converter_coefficient_hasProfile(nodesModelToCalc,yearsToCalc,converter_techs,vintage,activity,commodity)
8615      = sum(nodesData$aggregateNodesModel(nodesData,nodesModelToCalc),
8616              converter_coefficient_hasProfileIn(nodesData,yearsToCalc,converter_techs,vintage,activity,commodity));
8617   
8618  * aagregate time dimension
8619  parameter converter_activityProfileIn_aggTime(timeModel,nodesData,yearsToCalc,converter_techs,pc_converter_activityProfile);
8620  converter_activityProfileIn_aggTime(timeModelToCalc,nodesData,yearsToCalc,converter_techs,pc_converter_activityProfile)
8621    $converter_activity_hasProfileIn(nodesData,yearsToCalc,converter_techs,pc_converter_activityProfile)
8622    = sum(timeData$timeMapping(timeData,timeModelToCalc),
8623            converter_activityProfileIn(timeData,nodesData,yearsToCalc,converter_techs,pc_converter_activityProfile)
8624            / timeLength(timeModelToCalc));
8625  option clear = converter_activityProfileIn;
8626   
8627  * weighted average for a real sum of units upper limits, plain average if one region has an upper limit of inf
8628  parameter converter_activityProfile(timeModel,nodesModel,years,converter_techs,vintage,pc_converter_activityProfile);
8629  converter_activityProfile(timeModelToCalc,converter_usedTech(nodesModelToCalc,yearsToCalc,converter_techs,vintage),"upper")
8630      = converter_techParam(converter_techs,vintage,"activityUpperLimit");
8631  converter_activityProfile(timeModelToCalc,converter_usedTech(nodesModelToCalc,yearsToCalc,converter_techs,vintage),"lower")
8632      = converter_techParam(converter_techs,vintage,"activityLowerLimit");
8633   
8634   
8635  set converter_finiteUnitLimit(nodesModelToCalc,yearsToCalc,converter_techs);
8636  converter_finiteUnitLimit(nodesModelToCalc,yearsToCalc,converter_techs)
8637      = sum(nodesData$aggregateNodesModel(nodesData,nodesModelToCalc), converter_capacityParamIn(nodesData,yearsToCalc,converter_techs,"unitsUpperLimit")) > 0
8638          and sum(nodesData$aggregateNodesModel(nodesData,nodesModelToCalc), converter_capacityParamIn(nodesData,yearsToCalc,converter_techs,"unitsUpperLimit")) < inf;
8639   
8640  set converter_infiniteUnitLimit(nodesModelToCalc,yearsToCalc,converter_techs);
8641  converter_infiniteUnitLimit(nodesModelToCalc,yearsToCalc,converter_techs)
8642      = sum(nodesData$aggregateNodesModel(nodesData,nodesModelToCalc), converter_capacityParamIn(nodesData,yearsToCalc,converter_techs,"unitsUpperLimit")) = inf;
8643   
8644  converter_activityProfile(timeModelToCalc,converter_usedTech(nodesModelToCalc,yearsToCalc,converter_techs,vintage),pc_converter_activityProfile)
8645      $(converter_activity_hasProfile(nodesModelToCalc,yearsToCalc,converter_techs,pc_converter_activityProfile)
8646          and converter_finiteUnitLimit(nodesModelToCalc,yearsToCalc,converter_techs))
8647      = sum(nodesData$(aggregateNodesModel(nodesData,nodesModelToCalc)
8648                  and converter_capacityParamIn(nodesData,yearsToCalc,converter_techs,"unitsUpperLimit") < inf ),
8649                converter_activityProfileIn_aggTime(timeModelToCalc,nodesData,yearsToCalc,converter_techs,pc_converter_activityProfile)
8650                * converter_capacityParamIn(nodesData,yearsToCalc,converter_techs,"unitsUpperLimit"))
8651      / sum(nodesData$aggregateNodesModel(nodesData,nodesModelToCalc),
8652              converter_capacityParamIn(nodesData,yearsToCalc,converter_techs,"unitsUpperLimit"));
8653   
8654  converter_activityProfile(timeModelToCalc,converter_usedTech(nodesModelToCalc,yearsToCalc,converter_techs,vintage),pc_converter_activityProfile)
8655      $(converter_activity_hasProfile(nodesModelToCalc,yearsToCalc,converter_techs,pc_converter_activityProfile)
8656          and converter_infiniteUnitLimit(nodesModelToCalc,yearsToCalc,converter_techs))
8657      = sum(nodesData$(aggregateNodesModel(nodesData,nodesModelToCalc)
8658                  and converter_capacityParamIn(nodesData,yearsToCalc,converter_techs,"unitsUpperLimit") = inf),
8659                converter_activityProfileIn_aggTime(timeModelToCalc,nodesData,yearsToCalc,converter_techs,pc_converter_activityProfile)
8660                * converter_capacityParamIn(nodesData,yearsToCalc,converter_techs,"unitsUpperLimit"))
8661      / sum(nodesData$(aggregateNodesModel(nodesData,nodesModelToCalc)
8662                      and converter_capacityParamIn(nodesData,yearsToCalc,converter_techs,"unitsUpperLimit") = inf ),
8663              1);
8664  option clear = converter_activityProfileIn_aggTime;
8665   
8666  * for fixed profiles overwrite upper and lower profile
8667  converter_activityProfile(timeModelToCalc,nodesModelToCalc,yearsToCalc,converter_techs,vintage,"lower")
8668      $converter_activity_hasProfile(nodesModelToCalc,yearsToCalc,converter_techs,"fixed")
8669      = converter_activityProfile(timeModelToCalc,nodesModelToCalc,yearsToCalc,converter_techs,vintage,"fixed");
8670   
8671  converter_activityProfile(timeModelToCalc,nodesModelToCalc,yearsToCalc,converter_techs,vintage,"upper")
8672      $converter_activity_hasProfile(nodesModelToCalc,yearsToCalc,converter_techs,"fixed")
8673      = converter_activityProfile(timeModelToCalc,nodesModelToCalc,yearsToCalc,converter_techs,vintage,"fixed");
8674   
8675   
8676  * weighted average for a real sum of units upper limits, plain average if one region has an upper limit of inf
8677  parameter converter_coefficientProfile(timeModel,nodesModel,years,converter_techs,vintage,activity,commodity);
8678  converter_coefficientProfile(timeModelToCalc,converter_usedTechAct(nodesModelToCalc,yearsToCalc,converter_techs,vintage,activity),commodity)
8679      = converter_coefficient(converter_techs,vintage,activity,commodity,"coefficient");
8680   
8681  converter_coefficientProfile(timeModelToCalc,converter_usedTechAct(nodesModelToCalc,yearsToCalc,converter_techs,vintage,activity),commodity)
8682      $( converter_coefficient_hasProfile(nodesModelToCalc,yearsToCalc,converter_techs,vintage,activity,commodity)
8683          and converter_finiteUnitLimit(nodesModelToCalc,yearsToCalc,converter_techs) )
8684      = sum(nodesData$aggregateNodesModel(nodesData,nodesModelToCalc),
8685            sum(timeData$timeMapping(timeData,timeModelToCalc),
8686                    converter_coefficientProfileIn(timeData,nodesData,yearsToCalc,converter_techs,vintage,activity,commodity))
8687                / timeLength(timeModelToCalc)
8688              * converter_capacityParamIn(nodesData,yearsToCalc,converter_techs,"unitsUpperLimit") )
8689      / sum(nodesData$aggregateNodesModel(nodesData,nodesModelToCalc),
8690              converter_capacityParamIn(nodesData,yearsToCalc,converter_techs,"unitsUpperLimit"));
8691   
8692  converter_coefficientProfile(timeModelToCalc,converter_usedTechAct(nodesModelToCalc,yearsToCalc,converter_techs,vintage,activity),commodity)
8693      $( converter_coefficient_hasProfile(nodesModelToCalc,yearsToCalc,converter_techs,vintage,activity,commodity)
8694          and converter_infiniteUnitLimit(nodesModelToCalc,yearsToCalc,converter_techs))
8695      = sum(nodesData$(aggregateNodesModel(nodesData,nodesModelToCalc)
8696                      and converter_capacityParamIn(nodesData,yearsToCalc,converter_techs,"unitsUpperLimit") = inf ),
8697            sum(timeData$timeMapping(timeData,timeModelToCalc),
8698                    converter_coefficientProfileIn(timeData,nodesData,yearsToCalc,converter_techs,vintage,activity,commodity))
8699                / timeLength(timeModelToCalc))
8700      / sum(nodesData$(aggregateNodesModel(nodesData,nodesModelToCalc)
8701                      and converter_capacityParamIn(nodesData,yearsToCalc,converter_techs,"unitsUpperLimit") = inf ), 1);
8702   
8703  * ==== prepare partial load behavior parameters ====
8704   
8705  * set disabled max load requirements to 1 to avoid excessive logical expressions later on
8706  alias(commodity, com);
8707  converter_coefficient(converter_techs,vintage,activity,commodity,"maxLoad")
8708      $((converter_coefficient(converter_techs,vintage,activity,commodity,"maxLoad") = 0)
8709        and converter_usedAct(converter_techs,vintage,activity))
8710      = 1;
8711   
8712  * indicate that at least one activity of a technology makes use of partial load behavior
8713  set converter_hasMaxLoad(converter_techs,vintage);
8714  converter_hasMaxLoad(converter_techs,vintage)
8715    = smin((activity,commodity)$converter_usedAct(converter_techs,vintage,activity),
8716              converter_coefficient(converter_techs,vintage,activity,commodity,"maxLoad")) < 1;
8717   
8718  set converter_hasMinLoad(converter_techs,vintage);
8719  converter_hasMinLoad(converter_techs,vintage)
8720    = smax((activity,commodity)$converter_usedAct(converter_techs,vintage,activity),
8721              converter_coefficient(converter_techs,vintage,activity,commodity,"minLoad")) > 0;
8722   
8723  set converter_hasConstantFluxInActivity(converter_techs,vintage);
8724  converter_hasConstantFluxInActivity(converter_techs,vintage)
8725    = sum((activity,commodity)$converter_usedAct(converter_techs,vintage,activity),
8726                          abs(converter_coefficient(converter_techs,vintage,activity,commodity,"constant"))) > 0;
8727   
8728  * setting up a requirements parameter to avoid having to cycle through commodities in equations
8729  set pc_converter_activityRequirements
8730      /
8731      minLoad             "Lower profile for converter activity"
8732      maxLoad             "Upper profile for converter activity"
8733      /;
8734  parameter converter_activityRequirements(converter_techs,vintage,activity,pc_converter_activityRequirements);
8735  converter_activityRequirements(converter_techs,vintage,activity,"minLoad")
8736    = smax(commodity, converter_coefficient(converter_techs,vintage,activity,commodity,"minLoad"));
8737  converter_activityRequirements(converter_techs,vintage,activity,"maxLoad")
8738    = smin(commodity, converter_coefficient(converter_techs,vintage,activity,commodity,"maxLoad"));
8739   
8740  * ==== activate MIP units for MIP dispatch or partial load technologies ====
8741   
8742  set converter_hasMinUptime(converter_techs,vintage);
8743  converter_hasMinUptime(converter_techs,vintage)
8744    $(converter_techParam(converter_techs,vintage,"minUptime")
8745      and converter_techParam(converter_techs,vintage,"mipDispatch"))
8746    = yes;
8747   
8748  set converter_hasMinDowntime(converter_techs,vintage);
8749  converter_hasMinDowntime(converter_techs,vintage)
8750    $(converter_techParam(converter_techs,vintage,"minDowntime")
8751      and converter_techParam(converter_techs,vintage,"mipDispatch"))
8752    = yes;
8753   
8754  * require integer unit counts if online state is to be tracked
8755  converter_techParam(converter_techs,vintage,"mipUnits")
8756      $(converter_techParam(converter_techs,vintage,"mipDispatch")
8757        or converter_hasMinLoad(converter_techs, vintage)
8758        or converter_hasMaxLoad(converter_techs, vintage)
8759        or converter_hasConstantFluxInActivity(converter_techs,vintage))
8760      = 1;
8761   
8762  * ==== floor mip converter units to integer values ====
8763  converter_capacityParam(nodesModelToCalc,yearsToCalc,converter_techs,"unitsLowerLimit")
8764      $sum(vintage, converter_techParam(converter_techs,vintage,"mipUnits"))
8765      = floor(converter_capacityParam(nodesModelToCalc,yearsToCalc,converter_techs,"unitsLowerLimit"));
8766  converter_capacityParam(nodesModelToCalc,yearsToCalc,converter_techs,"unitsUpperLimit")
8767      $sum(vintage, converter_techParam(converter_techs,vintage,"mipUnits"))
8768      = ceil(converter_capacityParam(nodesModelToCalc,yearsToCalc,converter_techs,"unitsUpperLimit"));
8769   
8770  * ==== scalars and sets for minUptime and minDowntime ====
8771   
8772  scalar converter_maxUptimeReq;
8773  converter_maxUptimeReq = smax((converter_techs,vintage), converter_techParam(converter_techs,vintage,"minUptime"));
8774  set uptimeSearchRange(timeModelToCalc);
8775  uptimeSearchRange(timeModelToCalc) = ord(timeModelToCalc) <= converter_maxUptimeReq;
8776   
8777  scalar converter_maxDowntimeReq;
8778  converter_maxDowntimeReq = smax((converter_techs,vintage), converter_techParam(converter_techs,vintage,"minDowntime"));
8779  set downtimeSearchRange(timeModelToCalc);
8780  downtimeSearchRange(timeModelToCalc) = ord(timeModelToCalc) <= converter_maxDowntimeReq;
8781   
8782  * ==== definition of variables ====
8783   
8784  * Initialise variables for unitsBuild
8785  converter_unitsBuild.l(nodesModel,years,converter_techs,vintage)
8786      $converter_availTech(nodesModel,years,converter_techs,vintage)
8787      = converter_capacityParam(nodesModel,years,converter_techs,"unitsBuild");
8788  converter_unitsBuild.lo(nodesModel,yearsToCalc,converter_techs,vintage)
8789      $converter_availTech(nodesModel,yearsToCalc,converter_techs,vintage)
8790      = converter_unitsBuild.l(nodesModel,yearsToCalc,converter_techs,vintage);
8791  converter_unitsBuild.fx(nodesModel,years,converter_techs,vintage)
8792      $converter_capacityParam(nodesModel,years,converter_techs,"noExpansion")
8793      = converter_unitsBuild.l(nodesModel,years,converter_techs,vintage);
8794   
8795  * Initialise variables for unitsDecom
8796  converter_unitsDecom.l(nodesModel,years,converter_techs,vintage)
8797    $(converter_decomTech(nodesModel,years,converter_techs,vintage)
8798      and years.val < sum(yearsToCalc$(ord(yearsToCalc) = 1), yearsToCalc.val))
8799    = sum((years_a,years_aa)$(sameas(years-1, years_aa)
8800                        and years_a.val > years_aa.val - converter_techParam(converter_techs,vintage,'lifeTime')
8801                        and years_a.val <= years.val - converter_techParam(converter_techs,vintage,'lifeTime')
8802                        and converter_availTech(nodesModel,years_a,converter_techs,vintage)),
8803          converter_unitsBuild.l(nodesModel,years_a,converter_techs,vintage));
8804   
8805  converter_unitsDecom.l(nodesModel,yearsToCalc,converter_techs,vintage)
8806    $converter_decomTech(nodesModel,yearsToCalc,converter_techs,vintage)
8807    = sum(years$
8808          (years.val < sum(yearsToCalc_a$(ord(yearsToCalc_a) = 1), yearsToCalc_a.val)
8809            and converter_availTech(nodesModel,years,converter_techs,vintage)
8810            and years.val > sum(years_a$sameas(years_a, yearsToCalc-1), years_a.val) - converter_techParam(converter_techs,vintage,'lifeTime')
8811            and years.val <= yearsToCalc.val - converter_techParam(converter_techs,vintage,'lifeTime')),
8812        converter_unitsBuild.l(nodesModel,years,converter_techs,vintage))
8813      + sum(yearsToCalc_a$
8814          (yearsToCalc_a.val < sum(yearsToCalc_aa$(ord(yearsToCalc_aa) > 1), yearsToCalc_a.val)
8815            and converter_availTech(nodesModel,yearsToCalc_a,converter_techs,vintage)
8816            and yearsToCalc_a.val > sum(years_a$sameas(years_a, yearsToCalc-1), years_a.val) - converter_techParam(converter_techs,vintage,'lifeTime')
8817            and yearsToCalc_a.val <= yearsToCalc.val - converter_techParam(converter_techs,vintage,'lifeTime')),
8818        converter_unitsBuild.l(nodesModel,yearsToCalc_a,converter_techs,vintage));
8819        ;
8820   
8821  converter_unitsDecom.lo(nodesModel,yearsToCalc,converter_techs,vintage)
8822      $(converter_usedTech(nodesModel,yearsToCalc,converter_techs,vintage)
8823          and not converter_techParam(converter_techs,vintage,"freeDecom"))
8824      = converter_unitsDecom.l(nodesModel,yearsToCalc,converter_techs,vintage)
8825   
8826  * Calculate planned unit expansion
8827  parameter converter_unitsPlanned(nodesModel,years,converter_techs,vintage);
8828  converter_unitsPlanned(nodesModel,years,converter_techs,vintage) = 0;
8829  loop(years,
8830    converter_unitsPlanned(nodesModel,years,converter_techs,vintage)
8831      =
8832      converter_unitsPlanned(nodesModel,years-1,converter_techs,vintage)
8833          $converter_usedTech(nodesModel,years-1,converter_techs,vintage)
8834      + converter_unitsBuild.l(nodesModel,years,converter_techs,vintage)
8835          $converter_availTech(nodesModel,years,converter_techs,vintage)
8836      - converter_unitsDecom.l(nodesModel,years,converter_techs,vintage)
8837          $converter_usedTech(nodesModel,years,converter_techs,vintage);
8838  );
8839   
8840  * Set initial state for planned units
8841  converter_unitsTotal.l(nodesModel,years,converter_techs,vintage)
8842    = converter_unitsPlanned(nodesModel,years,converter_techs,vintage)
8843   
8844  * Calculate if planned unit expansion is bounded by upper and lower limits
8845  set converter_unitBoundsFixed(nodesModel,years,converter_techs);
8846  converter_unitBoundsFixed(nodesModel,years,converter_techs)
8847    $(sum(vintage$converter_usedTech(nodesModel,years,converter_techs,vintage),
8848          converter_unitsPlanned(nodesModel,years,converter_techs,vintage))
8849      = converter_capacityParam(nodesModel,years,converter_techs,"unitsUpperLimit")
8850    and sum(vintage$converter_usedTech(nodesModel,years,converter_techs,vintage),
8851          converter_unitsPlanned(nodesModel,years,converter_techs,vintage))
8852      = converter_capacityParam(nodesModel,years,converter_techs,"unitsLowerLimit"))
8853    = yes;
8854   
8855  * Fix unitsBuild, unitsDecom, unitsTotal if levels are predetermined by upper and lower limits
8856  converter_unitsBuild.fx(nodesModel,years,converter_techs,vintage)
8857    $(converter_availTech(nodesModel,years,converter_techs,vintage)
8858      and converter_unitBoundsFixed(nodesModel,years,converter_techs))
8859    = converter_unitsBuild.l(nodesModel,years,converter_techs,vintage);
8860  converter_unitsDecom.fx(nodesModel,years,converter_techs,vintage)
8861    $(converter_usedTech(nodesModel,years,converter_techs,vintage)
8862      and converter_unitBoundsFixed(nodesModel,years,converter_techs))
8863    = converter_unitsDecom.l(nodesModel,years,converter_techs,vintage);
8864  converter_unitsTotal.fx(nodesModel,years,converter_techs,vintage)
8865    $(converter_usedTech(nodesModel,years,converter_techs,vintage)
8866      and converter_unitBoundsFixed(nodesModel,years,converter_techs))
8867    = converter_unitsTotal.l(nodesModel,years,converter_techs,vintage);
8868   
8869  converter_unitsOnline_MIP.up(timeModelToCalc,nodesModel,years,converter_techs,vintage)
8870      $(converter_usedTech(nodesModel,years,converter_techs,vintage)
8871        and converter_techParam(converter_techs,vintage,"mipDispatch") = 1)
8872      = converter_capacityParam(nodesModel,years,converter_techs,"unitsUpperLimit");
8873   
8874  converter_unitsTotal_MIP.up(nodesModel,years,converter_techs,vintage)
8875      $(converter_usedTech(nodesModel,years,converter_techs,vintage)
8876        and converter_techParam(converter_techs,vintage,"mipUnits") = 1)
8877      = converter_capacityParam(nodesModel,years,converter_techs,"unitsUpperLimit");
8878   
8879  converter_unitsUsingActivity_MIP.up(timeModelToCalc,nodesModel,years,converter_techs,vintage,activity)
8880      $(converter_usedTech(nodesModel,years,converter_techs,vintage)
8881        and (converter_hasMinLoad(converter_techs, vintage)
8882              or converter_hasMaxLoad(converter_techs, vintage)))
8883      = converter_capacityParam(nodesModel,years,converter_techs,"unitsUpperLimit");
8884   
8885  * Add parameter for fixing capacities during myopic runs
8886  parameter converter_unitsDelta(nodesModel,years,converter_techs);
8887   
8888  * ==== declaration of equations ====
8889   
8890  equations
8891    Eq_converter_unitsBalance(nodesModel,years,converter_techs,vintage
8892      ) "Ensures the units balance over the planning period."
8893    Eq_converter_unitsFixedDecom(nodesModel,years,converter_techs,vintage
8894      ) "Restricts the fixed decommissioning of units over the planning period."
8895    Eq_converter_unitsFreeDecom(nodesModel,years,converter_techs,vintage
8896      ) "Restricts the free decommissioning of units over the planning period."
8897    Eq_converter_unitsUpperLimit(nodesModel,years,converter_techs
8898      ) "Upper bound for the total number of units."
8899    Eq_converter_unitsLowerLimit(nodesModel,years,converter_techs
8900      ) "Lower bound for the total number of units."
8901    Eq_converter_unitsFixedLimit(nodesModel,years,converter_techs
8902      ) "Fixed bound for the total number of units."
8903    Eq_converter_unitsTotalMIP(nodesModel,years,converter_techs,vintage
8904      ) "Fixes the total number of units to the corresponding integer variable."
8905    Eq_converter_unitsOnlineMIP(timeModel,nodesModel,years,converter_techs,vintage
8906      ) "Fixes the number of online units to the corresponding integer variable."
8907   
8908    Eq_converter_activityLowerLimit(timeModel,nodesModel,years,converter_techs,vintage
8909      ) "Lower limit on the activity."
8910    Eq_converter_activityUpperLimit(timeModel,nodesModel,years,converter_techs,vintage
8911      ) "Upper limit on the activity."
8912   
8913    Eq_converter_activityFixedLimit(timeModel,nodesModel,years,converter_techs,vintage
8914      ) "Fixed limit on the activity."
8915    Eq_converter_rampPos(timeModel,nodesModel,years,converter_techs,vintage
8916      ) "Positive ramping of unit activity."
8917    Eq_converter_rampNeg(timeModel,nodesModel,years,converter_techs,vintage
8918      ) "Negative ramping of unit activity."
8919    Eq_converter_rampLimit(timeModel,nodesModel,years,converter_techs,vintage
8920      ) "Restrict ramping up of unit activity."
8921   
8922    Eq_converter_unitsOnline(timeModel,nodesModel,years,converter_techs,vintage
8923      ) "Set online units to total number of operational units."
8924    Eq_converter_unitsOnlineUC(timeModel,nodesModel,years,converter_techs,vintage
8925      ) "Allow shutting down units."
8926    Eq_converter_activityStartups(timeModel,nodesModel,years,converter_techs,vintage
8927      ) "Variable counting the number of unit startups."
8928    Eq_converter_activityShutdowns(timeModel,nodesModel,years,converter_techs,vintage
8929      ) "Variable tracking the number of unit shutdowns."
8930    Eq_converter_limitStartups(nodesModel,years,converter_techs,vintage
8931      ) "Limit the number of startup cycles a unit can perform."
8932    Eq_converter_minUptime(timeModel,nodesModel,years,converter_techs,vintage
8933      ) "Require recently started units to remain online for their respective minimum uptime."
8934    Eq_converter_minDowntime(timeModel,nodesModel,years,converter_techs,vintage
8935      ) "Require recently shut down units to remain offline for their respective minimum downtime."
8936    Eq_converter_activityUpperLimitDetailedPartLoadMinReq(timeModel,nodesModel,years,converter_techs,vintage,activity
8937      ) "Limit activity coefficients of activities with a given load requirement or stricter to the number of units in such modes."
8938    Eq_converter_activityUpperLimitDetailedPartLoadMaxReq(timeModel,nodesModel,years,converter_techs,vintage,activity
8939      ) "Limit activity coefficients of activities with a given load requirement or stricter to the number of units in such modes."
8940    Eq_converter_activityLowerLimitDetailedPartLoadMinReq(timeModel,nodesModel,years,converter_techs,vintage,activity
8941      ) "Enforce sufficient activity coefficients of activities to justify all active modes."
8942    Eq_converter_noOnlineIdle(timeModel,nodesModel,years,converter_techs,vintage
8943      ) "Prevent the circumvention of requirements by keeping units online without using any modes."
8944    Eq_converter_noOnlineIdleDetailedPartLoad(timeModel,nodesModel,years,converter_techs,vintage
8945      ) "Prevent the circumvention of requirements by keeping units online without using any modes. Allow more than one mode activation per unit."
8946    Eq_converter_activityUpperLimitPartLoad(timeModel,nodesModel,years,converter_techs,vintage,activity
8947      ) "Limit usage of an activity to corresponding units."
8948    Eq_converter_activityLowerLimitPartLoad(timeModel,nodesModel,years,converter_techs,vintage,activity
8949      ) "Limit usage of an activity to corresponding units."
8950    Eq_converter_activityModeLimit(timeModel,nodesModel,years,converter_techs,vintage,activity
8951      ) "Limit the number of units in one particular mode to the number of operational units."
8952    ;
8953   
8954  * ==== equation definition ====
8955  * // ## Equations
8956  * // ### Converter Units Balance
8957  * // Ensures that the total units are consistent with the built and decommissioned units.
8958  * // {Eq_converter_unitsBalance}
8959  Eq_converter_unitsBalance(nodesModelSel,yearsSel,converter_techs,vintage)
8960      $((converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
8961            or sum(years$sameas(years,yearsSel), converter_usedTech(nodesModelSel,years-1,converter_techs,vintage)))
8962          and not converter_unitBoundsFixed(nodesModelSel,yearsSel,converter_techs))
8963      ..
8964      converter_unitsTotal(nodesModelSel,yearsSel,converter_techs,vintage)
8965      =e=
8966      sum(yearsToCalc$(ord(yearsToCalc) = 1 and sameas(yearsToCalc, yearsSel)),
8967        sum(years$sameas(years, yearsToCalc),
8968          converter_unitsTotal(nodesModelSel,years-1,converter_techs,vintage)
8969            $converter_usedTech(nodesModelSel,years-1,converter_techs,vintage)))
8970      + sum((yearsToCalc)$(ord(yearsToCalc) > 1 and sameas(yearsToCalc, yearsSel)),
8971        converter_unitsTotal(nodesModelSel,yearsToCalc-1,converter_techs,vintage)
8972          $converter_usedTech(nodesModelSel,yearsToCalc-1,converter_techs,vintage))
8973      + converter_unitsBuild(nodesModelSel,yearsSel,converter_techs,vintage)
8974          $converter_availTech(nodesModelSel,yearsSel,converter_techs,vintage)
8975      - converter_unitsDecom(nodesModelSel,yearsSel,converter_techs,vintage)
8976          $converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage);
8977   
8978  * // ### Converter Units Fixed Decommission
8979  * // Restricts the fixed decommissioning of units over the planning period.
8980  * // {Eq_converter_unitsFixedDecom}
8981  Eq_converter_unitsFixedDecom(nodesModelSel,yearsSel,converter_techs,vintage)
8982      $(converter_decomTech(nodesModelSel,yearsSel,converter_techs,vintage)
8983          and not converter_techParam(converter_techs,vintage,"freeDecom") = 1
8984          and not converter_unitBoundsFixed(nodesModelSel,yearsSel,converter_techs))
8985      ..
8986      converter_unitsDecom(nodesModelSel,yearsSel,converter_techs,vintage)
8987      =e=
8988      sum(years$
8989          (converter_availTech(nodesModelSel,years,converter_techs,vintage)
8990            and years.val > sum(yearsToCalc$sameas(yearsToCalc+1, yearsSel), yearsToCalc.val) - converter_techParam(converter_techs,vintage,'lifeTime')
8991            and years.val <= yearsSel.val - converter_techParam(converter_techs,vintage,'lifeTime')),
8992        converter_unitsBuild(nodesModelSel,years,converter_techs,vintage));
8993   
8994  * // ### Converter Units Free Decommission
8995  * // Restricts the free decommissioning of units over the planning period.
8996  * // {Eq_converter_unitsFreeDecom}
8997  Eq_converter_unitsFreeDecom(nodesModelSel,yearsSel,converter_techs,vintage)
8998      $((converter_decomTech(nodesModelSel,yearsSel,converter_techs,vintage)
8999          or converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage))
9000          and converter_techParam(converter_techs,vintage,"freeDecom") = 1)
9001      ..
9002      sum(years$
9003            ((converter_decomTech(nodesModelSel,years,converter_techs,vintage)
9004              or converter_usedTech(nodesModelSel,years,converter_techs,vintage))
9005              and years.val < sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)),
9006          converter_unitsDecom(nodesModelSel,years,converter_techs,vintage))
9007      + sum(yearsToCalc$
9008            ((converter_decomTech(nodesModelSel,yearsToCalc,converter_techs,vintage)
9009              or converter_usedTech(nodesModelSel,yearsToCalc,converter_techs,vintage))
9010              and yearsToCalc.val >= sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
9011              and yearsToCalc.val <= yearsSel.val),
9012          converter_unitsDecom(nodesModelSel,yearsToCalc,converter_techs,vintage))
9013      =g=
9014      sum(years$
9015            (converter_availTech(nodesModelSel,years,converter_techs,vintage)
9016              and years.val < sum(yearsToCalc$(ord(yearsToCalc)=1), yearsToCalc.val) - converter_techParam(converter_techs,vintage,'lifeTime')),
9017          converter_unitsBuild(nodesModelSel,years,converter_techs,vintage))
9018      + sum(yearsToCalc$
9019            (converter_availTech(nodesModelSel,yearsToCalc,converter_techs,vintage)
9020              and yearsToCalc.val >= sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
9021              and yearsToCalc.val <= yearsSel.val - converter_techParam(converter_techs,vintage,'lifeTime')),
9022          converter_unitsBuild(nodesModelSel,yearsToCalc,converter_techs,vintage));
9023   
9024  * // ### Converter Units Upper Limit
9025  * // Upper bound for the total number of units.
9026  * // {Eq_converter_unitsUpperLimit}
9027  Eq_converter_unitsUpperLimit(nodesModelSel,yearsSel,converter_techs)
9028      $(converter_capacityParam(nodesModelSel,yearsSel,converter_techs,'unitsUpperLimit') >= 0
9029          and converter_capacityParam(nodesModelSel,yearsSel,converter_techs,'unitsUpperLimit') < +inf
9030          and converter_capacityParam(nodesModelSel,yearsSel,converter_techs,'unitsUpperLimit')
9031              <> converter_capacityParam(nodesModelSel,yearsSel,converter_techs,'unitsLowerLimit'))
9032      ..
9033      sum(vintage$converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage),
9034          converter_unitsTotal(nodesModelSel,yearsSel,converter_techs,vintage))
9035      =l=
9036      converter_capacityParam(nodesModelSel,yearsSel,converter_techs,"unitsUpperLimit");
9037   
9038  * // ### Converter Units Lower Limit
9039  * // Lower bound for the total number of units.
9040  * // {Eq_converter_unitsLowerLimit}
9041  Eq_converter_unitsLowerLimit(nodesModelSel,yearsSel,converter_techs)
9042      $(converter_capacityParam(nodesModelSel,yearsSel,converter_techs,'unitsLowerLimit') > 0
9043          and converter_capacityParam(nodesModelSel,yearsSel,converter_techs,'unitsLowerLimit')
9044              <> converter_capacityParam(nodesModelSel,yearsSel,converter_techs,'unitsUpperLimit'))
9045      ..
9046      sum(vintage$converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage),
9047          converter_unitsTotal(nodesModelSel,yearsSel,converter_techs,vintage))
9048      =g=
9049      converter_capacityParam(nodesModelSel,yearsSel,converter_techs,"unitsLowerLimit");
9050   
9051  Eq_converter_unitsFixedLimit(nodesModelSel,yearsSel,converter_techs)
9052      $(converter_capacityParam(nodesModelSel,yearsSel,converter_techs,'unitsLowerLimit')
9053          = converter_capacityParam(nodesModelSel,yearsSel,converter_techs,'unitsUpperLimit'))
9054      ..
9055      sum(vintage$converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage),
9056          converter_unitsTotal(nodesModelSel,yearsSel,converter_techs,vintage))
9057      =e=
9058      converter_capacityParam(nodesModelSel,yearsSel,converter_techs,"unitsUpperLimit");
9059   
9060  * // ### Converter Units Total MIP
9061  * // Fixes the total number of units to the corresponding integer variable.
9062  * // {Eq_converter_unitsTotalMIP}
9063  Eq_converter_unitsTotalMIP(nodesModelSel,yearsSel,converter_techs,vintage)
9064      $( converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
9065          and converter_techParam(converter_techs,vintage,"mipUnits") = 1 )
9066      ..
9067      converter_unitsTotal(nodesModelSel,yearsSel,converter_techs,vintage)
9068      =e=
9069      converter_unitsTotal_MIP(nodesModelSel,yearsSel,converter_techs,vintage);
9070   
9071  * // ### Converter Units Online MIP
9072  * // Fixes the number of online units to the corresponding integer variable.
9073  * // {Eq_converter_unitsOnlineMIP}
9074  Eq_converter_unitsOnlineMIP(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
9075      $( converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
9076          and converter_techParam(converter_techs,vintage,"mipDispatch") = 1 )
9077      ..
9078      converter_unitsOnline(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
9079      =e=
9080      converter_unitsOnline_MIP(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage);
9081   
9082  * // ### Converter Activity Lower Limit
9083  * // Lower limit on the activity.
9084  * // {Eq_converter_activityLowerLimit}
9085  Eq_converter_activityLowerLimit(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
9086      $(converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
9087          and converter_activityProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,"lower") > 0
9088          and converter_activityProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,"lower")
9089               <> converter_activityProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,"upper")
9090          and not converter_hasMinLoad(converter_techs, vintage))
9091      ..
9092      sum(activity$converter_usedAct(converter_techs,vintage,activity),
9093          converter_activity(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity)
9094      )
9095      =g=
9096      converter_activityProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,"lower")
9098      * converter_unitsOnline(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage);
9100   
9101  * // ### Converter Activity Upper Limit
9102  * // Upper limit on the activity.
9103  * // {Eq_converter_activityUpperLimit}
9104  Eq_converter_activityUpperLimit(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
9105      $(converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
9106          and converter_activityProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,"upper") >= 0
9107          and converter_activityProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,"upper")
9108               <> converter_activityProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,"lower"))
9109      ..
9110      sum(activity$converter_usedAct(converter_techs,vintage,activity),
9111          converter_activity(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity)
9112      )
9113      =l=
9114      converter_activityProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,"upper")
9116      * converter_unitsOnline(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage);
9118   
9119  Eq_converter_activityFixedLimit(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
9120      $(converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
9121          and converter_activityProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,"lower")
9122               = converter_activityProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,"upper"))
9123      ..
9124      sum(activity$converter_usedAct(converter_techs,vintage,activity),
9125          converter_activity(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity)
9126      )
9127      =e=
9128      converter_activityProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,"upper")
9130      * converter_unitsOnline(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage);
9132   
9133  * // ### Converter Positive Ramping
9134  * // Positive ramping of unit activity.
9135  * // {Eq_converter_rampPos}
9136  Eq_converter_rampPos(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,converter_techs,vintage)
9137    $( converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
9138        and converter_useRampPos(nodesModelSel,yearsSel,converter_techs,vintage))
9139      ..
9140      converter_rampPos(timeModelToCalc,nodesModelSel,yearsSel,converter_techs,vintage)
9141      =g=
9142      sum(activity$converter_usedAct(converter_techs,vintage,activity),
9143              converter_activity(timeModelToCalc,nodesModelSel,yearsSel,converter_techs,vintage,activity)
9144              - converter_activity(timeModelToCalc--1,nodesModelSel,yearsSel,converter_techs,vintage,activity));
9145   
9146  * // ### Converter Negative Ramping
9147  * // Negative ramping of unit activity.
9148  * // {Eq_converter_rampNeg}
9149  Eq_converter_rampNeg(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,converter_techs,vintage)
9150    $( converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
9151        and converter_useRampNeg(nodesModelSel,yearsSel,converter_techs,vintage))
9152      ..
9153      converter_rampNeg(timeModelToCalc,nodesModelSel,yearsSel,converter_techs,vintage)
9154      =g=
9155      - sum(activity$converter_usedAct(converter_techs,vintage,activity),
9156              converter_activity(timeModelToCalc,nodesModelSel,yearsSel,converter_techs,vintage,activity)
9157              - converter_activity(timeModelToCalc--1,nodesModelSel,yearsSel,converter_techs,vintage,activity));
9158   
9159  * // ### Converter Ramping Limit
9160  * // Restrict ramping up of unit activity.
9161  * // {Eq_converter_rampLimit}
9162  Eq_converter_rampLimit(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,converter_techs,vintage)
9163    $( converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
9164          and converter_techParam(converter_techs,vintage,"activityRampLimit") > 0)
9165      ..
9166      sum(activity$converter_usedAct(converter_techs,vintage,activity),
9167              converter_activity(timeModelToCalc,nodesModelSel,yearsSel,converter_techs,vintage,activity)
9168              - converter_activity(timeModelToCalc--1,nodesModelSel,yearsSel,converter_techs,vintage,activity))
9169    =l=
9170    converter_techParam(converter_techs,vintage,"activityRampLimit")
9172      * converter_unitsOnline(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage);
9174   
9175   
9177   
9178  * // ### Converter MIP Units Online
9179  * // Restrict ramping up of unit activity.
9180  * // {Eq_converter_unitsOnline}
9181  Eq_converter_unitsOnline(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
9182      $( converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
9183          and converter_techParam(converter_techs,vintage,"mipDispatch") = 0 )
9184    ..
9185    converter_unitsOnline(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
9186    =e=
9187    converter_unitsTotal(nodesModelSel,yearsSel,converter_techs,vintage)
9188      ;
9189   
9190  * // ### Converter MIP Units Shutting Down
9191  * // Allow shutting down units.
9192  * // {Eq_converter_unitsOnlineUC}
9193  Eq_converter_unitsOnlineUC(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
9194      $( converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
9195          and converter_techParam(converter_techs,vintage,"mipDispatch") = 1 )
9196    ..
9197    converter_unitsOnline(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
9198    =l=
9199    converter_unitsTotal(nodesModelSel,yearsSel,converter_techs,vintage)
9200      ;
9202   
9203  * // ### Converter Activity Startups
9204  * // Variable counting the number of unit startups.
9205  * // {Eq_converter_activityStartups}
9206  Eq_converter_activityStartups(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,converter_techs,vintage)
9207    $( converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
9208          and converter_techParam(converter_techs,vintage,"mipDispatch") = 1 )
9209      ..
9210      converter_unitStartups(timeModelToCalc,nodesModelSel,yearsSel,converter_techs,vintage)
9211      =g=
9212          converter_unitsOnline(timeModelToCalc,nodesModelSel,yearsSel,converter_techs,vintage)
9213      - converter_unitsOnline(timeModelToCalc--1,nodesModelSel,yearsSel,converter_techs,vintage);
9214   
9215  * // ### Converter Activity Shutdowns
9216  * // Variable tracking the number of unit shutdowns.
9217  * // {Eq_converter_activityShutdowns}
9218  Eq_converter_activityShutdowns(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,converter_techs,vintage)
9219    $( converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
9220          and converter_techParam(converter_techs,vintage,"mipDispatch") = 1
9221          and converter_techParam(converter_techs,vintage,"minDowntime") > 0)
9222      ..
9223      converter_unitShutdowns(timeModelToCalc,nodesModelSel,yearsSel,converter_techs,vintage)
9224      =g=
9225          converter_unitsOnline(timeModelToCalc--1,nodesModelSel,yearsSel,converter_techs,vintage)
9226      - converter_unitsOnline(timeModelToCalc,nodesModelSel,yearsSel,converter_techs,vintage);
9227   
9228  * // ### Converter Activity Startup Limit
9229  * // Limit the number of startup cycles a unit can perform.
9230  * // {Eq_converter_limitStartups}
9231  Eq_converter_limitStartups(nodesModelSel,yearsSel,converter_techs,vintage)
9232    $( converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
9233          and converter_techParam(converter_techs,vintage,"mipDispatch") = 1
9234      and converter_techParam(converter_techs,vintage,"startupLimit") > 0)
9235      ..
9236      sum(timeModelToCalc, converter_unitStartups(timeModelToCalc,nodesModelSel,yearsSel,converter_techs,vintage))
9237    =l=
9238    converter_techParam(converter_techs,vintage,"startupLimit")
9239    * converter_unitsTotal(nodesModelSel,yearsSel,converter_techs,vintage);
9240   
9241  alias(timeModelToCalc,ttc);
9242   
9243  * // ### Converter Units Minimum Uptime
9244  * // Require recently started units to remain online for their respective minimum uptime.
9245  * // {Eq_converter_minUptime}
9246  Eq_converter_minUptime(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,converter_techs,vintage)
9247    $( converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
9248          and converter_techParam(converter_techs,vintage,"mipDispatch") = 1
9249      and converter_techParam(converter_techs,vintage,"minUptime") > 0)
9250      ..
9251      sum(ttc$[uptimeSearchRange(ttc) and ord(ttc)<=converter_techParam(converter_techs,vintage,"minUptime")],
9252          converter_unitStartups(ttc+[ord(timeModelToCalc)-converter_techParam(converter_techs,vintage,"minUptime")],
9253              nodesModelSel,yearsSel,converter_techs,vintage))
9254          =l=
9255          converter_unitsOnline(timeModelToCalc,nodesModelSel,yearsSel,converter_techs,vintage);
9256   
9257  * // ### Converter Units Minimum Downtime
9258  * // Require recently shut down units to remain offline for their respective minimum downtime.
9259  * // {Eq_converter_minDowntime}
9260  Eq_converter_minDowntime(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,converter_techs,vintage)
9261    $( converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
9262          and converter_techParam(converter_techs,vintage,"mipDispatch") = 1
9263      and converter_techParam(converter_techs,vintage,"minDowntime") > 0)
9264      ..
9265      sum(ttc$[downtimeSearchRange(ttc) and ord(ttc)<=converter_techParam(converter_techs,vintage,"minDowntime")],
9266          converter_unitShutdowns(ttc+[ord(timeModelToCalc)-converter_techParam(converter_techs,vintage,"minDowntime")],
9267              nodesModelSel,yearsSel,converter_techs,vintage))
9268          =l=
9269          converter_unitsTotal(nodesModelSel,yearsSel,converter_techs,vintage)
9270      - converter_unitsOnline(timeModelToCalc,nodesModelSel,yearsSel,converter_techs,vintage);
9271   
9272  * This equation is meant to cause the units to activate particular mode counters to gain access to the corresponding activities.
9273  * Activities are allowed to be used on units with stricter activity requirements but not the other way around.
9274  alias(activity, act);
9275   
9276  * // ### Converter MIP Units Activity Upper Limit Minimum Required Load
9277  * // Limit activity coefficients of activities with a given load requirement or stricter to the number of units in such modes.
9278  * // {Eq_converter_activityUpperLimitDetailedPartLoadMinReq}
9279  Eq_converter_activityUpperLimitDetailedPartLoadMinReq(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity)
9280    $( converter_usedTechAct(nodesModelSel,yearsSel,converter_techs,vintage,activity)
9281          and converter_hasMinLoad(converter_techs, vintage)
9282          and converter_techParam(converter_techs,vintage,"mipDetailedPartialLoad"))
9283      ..
9284      sum(act$(converter_activityRequirements(converter_techs,vintage,act,"minLoad")
9285                  >= converter_activityRequirements(converter_techs,vintage,activity,"minLoad")
9286               and converter_usedAct(converter_techs,vintage,act)),
9287      converter_activity(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,act))
9288    =l=
9289    converter_activityProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,"upper")
9290      * sum(act$(converter_activityRequirements(converter_techs,vintage,act,"minLoad")
9291                  >= converter_activityRequirements(converter_techs,vintage,activity,"minLoad")
9292                 and converter_usedAct(converter_techs,vintage,act)),
9293      converter_unitsUsingActivity_MIP(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,act));
9294   
9295  * // ### Converter MIP Units Activity Upper Limit Maximum Required Load
9296  * // Limit activity coefficients of activities with a given load requirement or stricter to the number of units in such modes.
9297  * // {Eq_converter_activityUpperLimitDetailedPartLoadMaxReq}
9298  Eq_converter_activityUpperLimitDetailedPartLoadMaxReq(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity)
9299    $( converter_usedTechAct(nodesModelSel,yearsSel,converter_techs,vintage,activity)
9300          and converter_hasMaxLoad(converter_techs,vintage)
9301          and converter_techParam(converter_techs,vintage,"mipDetailedPartialLoad"))
9302      ..
9303      sum(act$(converter_activityRequirements(converter_techs,vintage,act,"maxLoad")
9304                  <= converter_activityRequirements(converter_techs,vintage,activity,"maxLoad")
9305               and converter_usedAct(converter_techs,vintage,act)),
9306      converter_activity(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,act))
9307    =l=
9308      sum(act$(converter_activityRequirements(converter_techs,vintage,act,"maxLoad")
9309                  <= converter_activityRequirements(converter_techs,vintage,activity,"maxLoad")
9310               and converter_usedAct(converter_techs,vintage,act)),
9311      min(converter_activityRequirements(converter_techs,vintage,act,"maxLoad"),
9312            converter_activityProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,"upper"))
9313            * converter_unitsUsingActivity_MIP(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,act));
9314   
9315  * This equation is meant to enforce the lower limit requirements of activities in use.
9316  * Loads produced by activities with less strict requirements can contribute to the minimum load requirement of strict activities but not the other way around,
9317  * because these activities can only run on units in the respectively strict activation state.
9318   
9319  * // ### Converter MIP Units Activity Lower Limit Minimum Required Load
9320  * // Enforce sufficient activity coefficients of activities to justify all active modes.
9321  * // {Eq_converter_activityLowerLimitDetailedPartLoadMinReq}
9322  Eq_converter_activityLowerLimitDetailedPartLoadMinReq(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity)
9323    $( converter_usedTechAct(nodesModelSel,yearsSel,converter_techs,vintage,activity)
9324          and converter_hasMinLoad(converter_techs, vintage)
9325          and converter_techParam(converter_techs,vintage,"mipDetailedPartialLoad"))
9326      ..
9327      sum(act$(converter_activityRequirements(converter_techs,vintage,act,"minLoad")
9328                  <= converter_activityRequirements(converter_techs,vintage,activity,"minLoad")
9329               and converter_usedAct(converter_techs,vintage,act)),
9330      converter_activity(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,act))
9331    =g=
9332      sum(act$(converter_activityRequirements(converter_techs,vintage,act,"minLoad")
9333                  <= converter_activityRequirements(converter_techs,vintage,activity,"minLoad")
9334               and converter_usedAct(converter_techs,vintage,act)),
9335      max(converter_activityRequirements(converter_techs,vintage,act,"minLoad"),
9336            converter_activityProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,"lower"))
9337            * converter_unitsUsingActivity_MIP(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,act));
9338   
9339   
9340  * Simple one-activity-per-unit partial load equations
9341  * // ### Converter MIP Units Activity Upper Limit Partial Load Balance
9342  * // Enforce MIP units partial load upper limit.
9343  * // {Eq_converter_activityUpperLimitPartLoad}
9344  Eq_converter_activityUpperLimitPartLoad(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity)
9345    $( converter_usedTechAct(nodesModelSel,yearsSel,converter_techs,vintage,activity)
9346          and (converter_hasMinLoad(converter_techs, vintage)
9347                or converter_hasMaxLoad(converter_techs, vintage)
9348                or converter_hasConstantFluxInActivity(converter_techs, vintage))
9349          and not converter_techParam(converter_techs,vintage,"mipDetailedPartialLoad"))
9350      ..
9351      converter_activity(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity)
9352    =l=
9353    min(converter_activityRequirements(converter_techs,vintage,activity,"maxLoad"),
9354          converter_activityProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,"upper"))
9355          * converter_unitsUsingActivity_MIP(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity);
9356   
9357  * // ### Converter MIP Units Activity Lower Limit Partial Load Balance
9358  * // Enforce MIP units partial load lower limit.
9359  * // {Eq_converter_activityLowerLimitPartLoad}
9360  Eq_converter_activityLowerLimitPartLoad(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity)
9361    $( converter_usedTechAct(nodesModelSel,yearsSel,converter_techs,vintage,activity)
9362          and (converter_hasMinLoad(converter_techs, vintage)
9363                or converter_hasMaxLoad(converter_techs, vintage))
9364          and not converter_techParam(converter_techs,vintage,"mipDetailedPartialLoad"))
9365      ..
9366      converter_activity(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity)
9367    =g=
9368    max(converter_activityRequirements(converter_techs,vintage,activity,"minLoad"),
9369          converter_activityProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,"lower"))
9370          * converter_unitsUsingActivity_MIP(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity);
9371   
9372  * // ### Converter MIP Units Idle Online Units
9373  * // Counts idle online units at every time step
9374  * // {Eq_converter_noOnlineIdle}
9375  Eq_converter_noOnlineIdle(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
9376    $( converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
9377          and (converter_hasMinLoad(converter_techs, vintage)
9378              or converter_hasMaxLoad(converter_techs, vintage)
9379              or converter_hasConstantFluxInActivity(converter_techs,vintage))
9380          and not converter_techParam(converter_techs,vintage,"mipDetailedPartialLoad"))
9381      ..
9382      converter_unitsOnline(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
9383      =e=
9384      sum(activity$converter_usedAct(converter_techs,vintage,activity),
9385            converter_unitsUsingActivity_MIP(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity));
9386   
9387  * // ### Converter MIP Units Idle Online Units Partial load
9388  * // Counts idle online units at every time step
9389  * // {Eq_converter_noOnlineIdleDetailedPartLoad}
9390  Eq_converter_noOnlineIdleDetailedPartLoad(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
9391    $( converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
9392          and (converter_hasMinLoad(converter_techs, vintage)
9393                  or converter_hasMaxLoad(converter_techs, vintage))
9394          and converter_techParam(converter_techs,vintage,"mipDetailedPartialLoad"))
9395      ..
9396      converter_unitsOnline(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
9397      =l=
9398      sum(activity$converter_usedAct(converter_techs,vintage,activity),
9399            converter_unitsUsingActivity_MIP(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity));
9400   
9401  * // ### Converter MIP activity model limit
9402  * // Converter activity model limit
9403  * // {Eq_converter_activityModeLimit}
9404  Eq_converter_activityModeLimit(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity)
9405    $( converter_usedTechAct(nodesModelSel,yearsSel,converter_techs,vintage,activity)
9406          and (converter_hasMinLoad(converter_techs, vintage)
9407                or converter_hasMaxLoad(converter_techs, vintage))
9408          and converter_techParam(converter_techs,vintage,"mipDetailedPartialLoad"))
9409      ..
9410      converter_unitsOnline(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
9411      =g=
9412      converter_unitsUsingActivity_MIP(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity);
9413   
9414  * ==== model definition ====
9415   
9416  Model M_converter
9417  /
9418    Eq_converter_unitsBalance
9419    Eq_converter_unitsFixedDecom
9420    Eq_converter_unitsFreeDecom
9421    Eq_converter_unitsUpperLimit
9422    Eq_converter_unitsLowerLimit
9423    Eq_converter_unitsFixedLimit
9424    Eq_converter_unitsTotalMIP
9425    Eq_converter_unitsOnlineMIP
9426    Eq_converter_activityUpperLimit
9427    Eq_converter_activityLowerLimit
9428    Eq_converter_activityFixedLimit
9429    Eq_converter_rampPos
9430    Eq_converter_rampNeg
9431    Eq_converter_rampLimit
9433    Eq_converter_unitsOnline
9434    Eq_converter_unitsOnlineUC
9436    Eq_converter_activityStartups
9437    Eq_converter_activityShutdowns
9438    Eq_converter_limitStartups
9439    Eq_converter_minUptime
9440    Eq_converter_minDowntime
9441    Eq_converter_activityUpperLimitDetailedPartLoadMinReq
9442    Eq_converter_activityUpperLimitDetailedPartLoadMaxReq
9443    Eq_converter_activityLowerLimitDetailedPartLoadMinReq
9444    Eq_converter_activityUpperLimitPartLoad
9445    Eq_converter_activityLowerLimitPartLoad
9446    Eq_converter_noOnlineIdle
9447    Eq_converter_noOnlineIdleDetailedPartLoad
9448    Eq_converter_activityModeLimit
9449  /;
INCLUDE    C:\Local\REMix\framework\remix\framework\model\source\core\storage.gms
9451  * SPDX-FileCopyrightText: Copyright (c) 2023 German Aerospace Center (DLR)
9452  * SPDX-License-Identifier: BSD-3-Clause
9453   
9454  * // # core_storage
9455  * // The equations in this file describe the storages in the model.
9456   
9457  * // ## Variables
9458  * // {special_table_storage_variables}
9853   
9854   
9855  * === SoC mappings ===
9856  set storage_usedTechSoCState(storage_techs,vintage,soc_statesIn);
9857  storage_usedTechSoCState(storage_techs,vintage,soc_states(soc_statesIn))
9858      $(storage_SoCParam(storage_techs,vintage,soc_states,"eRate") > 0
9859        and storage_SoCParam(storage_techs,vintage,soc_states,"cRate") > 0)
9860      = yes;
9861   
9862  set storage_validSoCRange(storage_techs,vintage);
9863  storage_validSoCRange(storage_techs,vintage)
9864      = smax(soc_states$storage_usedTechSoCState(storage_techs,vintage,soc_states), storage_SoCParam(storage_techs,vintage,soc_states,"SoC")) = 1
9865        and smin(soc_states$storage_usedTechSoCState(storage_techs,vintage,soc_states), storage_SoCParam(storage_techs,vintage,soc_states,"SoC")) = 0;
9866   
9867  * === Translate SoC parameters to ordered SoC-set ===
9868  * set ordered_socs / soc1*soc20 /;
9869  * alias(soc_states, soc_states_c);
9870  * parameter storage_SoCParam_ordered(storage_techs,vintage,ordered_socs,pc_storage_SoCParam);
9871  * storage_SoCParam_ordered(storage_techs,vintage,ordered_socs,pc_storage_SoCParam)
9872  *     $storage_validSoCRange(storage_techs,vintage)
9873  *     = sum(soc_states$(ord(ordered_socs) = sum(soc_states_c$(storage_SoCParam(storage_techs,vintage,soc_states_c,"SoC") <= storage_SoCParam(storage_techs,vintage,soc_states,"SoC")
9874  *                                                            and storage_usedTechSoCState(storage_techs,vintage,soc_states_c)), 1)
9875  *                       and storage_usedTechSoCState(storage_techs,vintage,soc_states)),
9876  *           storage_SoCParam(storage_techs,vintage,soc_states,pc_storage_SoCParam));
9877  *
9878  * set storage_usedTechSoCStateOrdered(storage_techs,vintage,ordered_socs);
9879  * storage_usedTechSoCStateOrdered(storage_techs,vintage,ordered_socs)
9880  *     $(storage_SoCParam_ordered(storage_techs,vintage,ordered_socs,"eRate") > 0
9881  *       and storage_SoCParam_ordered(storage_techs,vintage,ordered_socs,"cRate") > 0)
9882  *     = yes;
9883   
9884  parameter storage_bigM(storage_techs,vintage);
9885  storage_bigM(storage_techs,vintage) = smax((nodesModel,years), storage_reservoirParam(nodesModel,years,storage_techs,"unitsUpperLimit"));
9886  storage_bigM(storage_techs,vintage)$(storage_bigM(storage_techs,vintage) = INF) = 10000;
9887  storage_bigM(storage_techs,vintage)$(storage_bigM(storage_techs,vintage) = 0) = 10000;
9888   
9889  * === calculate the number of years represented by single year to calc ===
9890  alias(yearsToCalc, yearsToCalc_a)
9891  parameter representedYears(years);
9892  representedYears(years) = 0.5 *(smin(yearsToCalc$(yearsToCalc.val > years.val or yearsToCalc.val = smax(yearsToCalc_a, yearsToCalc_a.val)), yearsToCalc.val)
9893                                  - smax(yearsToCalc$(yearsToCalc.val < years.val or yearsToCalc.val = smin(yearsToCalc_a, yearsToCalc_a.val)), yearsToCalc.val));
9894   
9895  * ==== calculation of mappings ====
9896   
9897  * Technologies with a lifeTime > 0 are available
9898  set storage_availTech(nodesModel,years,storage_techs,vintage);
9899  storage_availTech(nodesModel,years,storage_techs,vintage)
9900      $(vintage.val = smax(vintage_a$(vintage_a.val <= years.val
9901          and storage_techParam(storage_techs,vintage_a,"lifeTime") > 0), vintage_a.val)) = yes;
9902   
9903  * Technologies to optimize become unavailable if they have an unitsUpperLimit of 0
9904  storage_availTech(nodesModel,years,storage_techs,vintage)
9905      $(yearsToCalc(years) and storage_reservoirParam(nodesModel,years,storage_techs,"unitsUpperLimit") = 0 ) = no;
9906   
9907  * Technologies already built become unavailable if they have an unitsBuild of 0
9908  storage_availTech(nodesModel,years,storage_techs,vintage)
9909      $( ( not yearsToCalc(years)) and storage_reservoirParam(nodesModel,years,storage_techs,"unitsBuild") = 0 ) = no;
9910   
9911  * Used technologies are available technologies over their technical lifeTime
9912  set storage_usedTech(nodesModel,years,storage_techs,vintage);
9913  storage_usedTech(nodesModel,years,storage_techs,vintage)
9914      $(vintage.val <= years.val
9915          and years.val < smax(years_a$storage_availTech(nodesModel,years_a,storage_techs,vintage),
9916                                              years_a.val + storage_techParam(storage_techs,vintage,"lifeTime"))
9917          ) = yes;
9918   
9919  * Technologies have to be decomissioned in the interval of first avail + lifetime to last avail + lifetime
9920  set storage_decomTech(nodesModel,years,storage_techs,vintage);
9921  storage_decomTech(nodesModel,years,storage_techs,vintage)
9922    $(sum(years_a$storage_usedTech(nodesModel,years_a,storage_techs,vintage), 1)
9923      and sum(yearsToCalc
9924        $(sameas(years, yearsToCalc)
9925          and yearsToCalc.val >= smin(years_a$storage_availTech(nodesModel,years_a,storage_techs,vintage), years_a.val) + storage_techParam(storage_techs,vintage,"lifeTime")
9926          and yearsToCalc.val <= smax(years_a$storage_availTech(nodesModel,years_a,storage_techs,vintage), years_a.val) + storage_techParam(storage_techs,vintage,"lifeTime")), 1))
9927    = yes;
9928   
9929  * Extend the decom frame to the year after the last year of usedTech
9930  storage_decomTech(nodesModel,yearsToCalc,storage_techs,vintage)
9931    $(storage_usedTech(nodesModel,yearsToCalc-1,storage_techs,vintage)
9932      and storage_decomTech(nodesModel,yearsToCalc-1,storage_techs,vintage))
9933    = yes;
9934   
9935  * Mapping for used commodities
9936  set storage_usedCom(storage_techs,vintage,commodity);
9937  option storage_usedCom < storage_sizeParam;
9938   
9939  set storage_usedTechCom(nodesModel,years,storage_techs,vintage,commodity);
9940  storage_usedTechCom(nodesModel,years,storage_techs,vintage,commodity)
9941      $(storage_usedTech(nodesModel,years,storage_techs,vintage)
9942          and storage_usedCom(storage_techs,vintage,commodity))
9943      = yes;
9944   
9945   
9946  * // ## Load units from gdx file
9948   
9949  * ==== aggregation of profiles ====
9950  * derive upper and lower profiles then aggregate
9951  set storage_level_hasProfileIn(nodesData,years,storage_techs,pc_storage_levelProfile);
9952  option storage_level_hasProfileIn < storage_levelProfileIn;
9953   
9954  set storage_level_hasProfile(nodesModel,years,storage_techs,pc_storage_levelProfile);
9955  storage_level_hasProfile(nodesModelToCalc,yearsToCalc,storage_techs,pc_storage_levelProfile)
9956      = sum(nodesData$aggregateNodesModel(nodesData,nodesModelToCalc),
9957              storage_level_hasProfileIn(nodesData,yearsToCalc,storage_techs,pc_storage_levelProfile));
9958   
9959  * weighted average for a real sum of units upper limits, plain average if one region has an upper limit of inf
9960  parameter storage_levelProfile(timeModel,nodesModel,years,storage_techs,vintage,pc_storage_levelProfile);
9961  storage_levelProfile(timeModelToCalc,storage_usedTech(nodesModelToCalc,yearsToCalc,storage_techs,vintage),"upper")
9962      = storage_techParam(storage_techs,vintage,"levelUpperLimit");
9963  storage_levelProfile(timeModelToCalc,storage_usedTech(nodesModelToCalc,yearsToCalc,storage_techs,vintage),"lower")
9964      = storage_techParam(storage_techs,vintage,"levelLowerLimit");
9965   
9966  set storage_finiteUnitLimit(nodesModelToCalc,yearsToCalc,storage_techs);
9967  storage_finiteUnitLimit(nodesModelToCalc,yearsToCalc,storage_techs) = sum(nodesData$aggregateNodesModel(nodesData,nodesModelToCalc), storage_reservoirParamIn(nodesData,yearsToCalc,storage_techs,"unitsUpperLimit")) > 0
9968                                                   and sum(nodesData$aggregateNodesModel(nodesData,nodesModelToCalc), storage_reservoirParamIn(nodesData,yearsToCalc,storage_techs,"unitsUpperLimit")) < inf;
9969   
9970  storage_levelProfile(timeModelToCalc,storage_usedTech(nodesModelToCalc,yearsToCalc,storage_techs,vintage),pc_storage_levelProfile)
9971      $( storage_level_hasProfile(nodesModelToCalc,yearsToCalc,storage_techs,pc_storage_levelProfile)
9972          and storage_finiteUnitLimit(nodesModelToCalc,yearsToCalc,storage_techs))
9973      = sum(nodesData$aggregateNodesModel(nodesData,nodesModelToCalc),
9974              sum(timeData$timeMapping(timeData,timeModelToCalc),
9975                    storage_levelProfileIn(timeData,nodesData,yearsToCalc,storage_techs,pc_storage_levelProfile))
9976                / timeLength(timeModelToCalc)
9977              * storage_reservoirParamIn(nodesData,yearsToCalc,storage_techs,"unitsUpperLimit"))
9978      / sum(nodesData$aggregateNodesModel(nodesData,nodesModelToCalc),
9979              storage_reservoirParamIn(nodesData,yearsToCalc,storage_techs,"unitsUpperLimit"));
9980   
9981  storage_levelProfile(timeModelToCalc,storage_usedTech(nodesModelToCalc,yearsToCalc,storage_techs,vintage),pc_storage_levelProfile)
9982      $( storage_level_hasProfile(nodesModelToCalc,yearsToCalc,storage_techs,pc_storage_levelProfile)
9983          and sum(nodesData$aggregateNodesModel(nodesData,nodesModelToCalc),
9984                      storage_reservoirParamIn(nodesData,yearsToCalc,storage_techs,"unitsUpperLimit")) = inf )
9985      = sum(nodesData$(aggregateNodesModel(nodesData,nodesModelToCalc)
9986                      and storage_reservoirParamIn(nodesData,yearsToCalc,storage_techs,"unitsUpperLimit") = inf ),
9987              sum(timeData$timeMapping(timeData,timeModelToCalc),
9988                    storage_levelProfileIn(timeData,nodesData,yearsToCalc,storage_techs,pc_storage_levelProfile))
9989                / timeLength(timeModelToCalc))
9990      / sum(nodesData$(aggregateNodesModel(nodesData,nodesModelToCalc)
9991                      and storage_reservoirParamIn(nodesData,yearsToCalc,storage_techs,"unitsUpperLimit") = inf ), 1);
9992   
9993  * for fixed profiles overwrite upper and lower profile
9994  storage_levelProfile(timeModelToCalc,nodesModelToCalc,yearsToCalc,storage_techs,vintage,"lower")
9995      $storage_level_hasProfile(nodesModelToCalc,yearsToCalc,storage_techs,"fixed")
9996      = storage_levelProfile(timeModelToCalc,nodesModelToCalc,yearsToCalc,storage_techs,vintage,"fixed");
9997   
9998  storage_levelProfile(timeModelToCalc,nodesModelToCalc,yearsToCalc,storage_techs,vintage,"upper")
9999      $storage_level_hasProfile(nodesModelToCalc,yearsToCalc,storage_techs,"fixed")
10000      = storage_levelProfile(timeModelToCalc,nodesModelToCalc,yearsToCalc,storage_techs,vintage,"fixed");
10001   
10002   
10003  * ==== parameter modifications ====
10004  storage_reservoirParam(nodesModel,years,storage_techs,"unitsLowerLimit")
10005          $sum(vintage, storage_techParam(storage_techs,vintage,"mipUnits"))
10006      = floor(storage_reservoirParam(nodesModel,years,storage_techs,"unitsLowerLimit"));
10007  storage_reservoirParam(nodesModel,years,storage_techs,"unitsUpperLimit")
10008          $sum(vintage, storage_techParam(storage_techs,vintage,"mipUnits"))
10009      = ceil(storage_reservoirParam(nodesModel,years,storage_techs,"unitsUpperLimit"));
10010   
10011   
10012  * ==== definition of variables ====
10013   
10014  * Initialise variables for unitsBuild
10015  storage_unitsBuild.l(nodesModel,years,storage_techs,vintage)
10016      $storage_availTech(nodesModel,years,storage_techs,vintage)
10017      = storage_reservoirParam(nodesModel,years,storage_techs,"unitsBuild");
10018  storage_unitsBuild.lo(nodesModel,yearsToCalc,storage_techs,vintage)
10019      $storage_availTech(nodesModel,yearsToCalc,storage_techs,vintage)
10020      = storage_unitsBuild.l(nodesModel,yearsToCalc,storage_techs,vintage);
10021  storage_unitsBuild.fx(nodesModel,years,storage_techs,vintage)
10022      $storage_reservoirParam(nodesModel,years,storage_techs,"noExpansion")
10023      = storage_unitsBuild.l(nodesModel,years,storage_techs,vintage);
10024   
10025  * Initialise variables for unitsDecom
10026  storage_unitsDecom.l(nodesModel,years,storage_techs,vintage)
10027      $(storage_decomTech(nodesModel,years,storage_techs,vintage)
10028        and years.val < sum(yearsToCalc$(ord(yearsToCalc) = 1), yearsToCalc.val))
10029      = sum((years_a,years_aa)$(sameas(years-1, years_aa)
10030                        and years_a.val > years_aa.val - storage_techParam(storage_techs,vintage,'lifeTime')
10031                        and years_a.val <= years.val - storage_techParam(storage_techs,vintage,'lifeTime')
10032                        and storage_availTech(nodesModel,years_a,storage_techs,vintage)),
10033          storage_unitsBuild.l(nodesModel,years_a,storage_techs,vintage));
10034   
10035  storage_unitsDecom.l(nodesModel,yearsToCalc,storage_techs,vintage)
10036    $storage_decomTech(nodesModel,yearsToCalc,storage_techs,vintage)
10037    = sum(years$
10038          (years.val < sum(yearsToCalc_a$(ord(yearsToCalc_a) = 1), yearsToCalc_a.val)
10039            and storage_availTech(nodesModel,years,storage_techs,vintage)
10040            and years.val > sum(years_a$sameas(years_a, yearsToCalc-1), years_a.val) - storage_techParam(storage_techs,vintage,'lifeTime')
10041            and years.val <= yearsToCalc.val - storage_techParam(storage_techs,vintage,'lifeTime')),
10042        storage_unitsBuild.l(nodesModel,years,storage_techs,vintage))
10043      + sum(yearsToCalc_a$
10044          (yearsToCalc_a.val < sum(yearsToCalc_aa$(ord(yearsToCalc_aa) > 1), yearsToCalc_a.val)
10045            and storage_availTech(nodesModel,yearsToCalc_a,storage_techs,vintage)
10046            and yearsToCalc_a.val > sum(years_a$sameas(years_a, yearsToCalc-1), years_a.val) - storage_techParam(storage_techs,vintage,'lifeTime')
10047            and yearsToCalc_a.val <= yearsToCalc.val - storage_techParam(storage_techs,vintage,'lifeTime')),
10048        storage_unitsBuild.l(nodesModel,yearsToCalc_a,storage_techs,vintage));
10049        ;
10050   
10051  storage_unitsDecom.lo(nodesModel,yearsToCalc,storage_techs,vintage)
10052      $(storage_usedTech(nodesModel,yearsToCalc,storage_techs,vintage)
10053        and not storage_techParam(storage_techs,vintage,"freeDecom"))
10054      = storage_unitsDecom.l(nodesModel,yearsToCalc,storage_techs,vintage)
10055   
10056  * Calculate planned unit expansion
10057  parameter storage_unitsPlanned(nodesModel,years,storage_techs,vintage);
10058  storage_unitsPlanned(nodesModel,years,storage_techs,vintage) = 0;
10059  loop(years,
10060    storage_unitsPlanned(nodesModel,years,storage_techs,vintage)
10061      =
10062      storage_unitsPlanned(nodesModel,years-1,storage_techs,vintage)
10063          $storage_usedTech(nodesModel,years-1,storage_techs,vintage)
10064      + storage_unitsBuild.l(nodesModel,years,storage_techs,vintage)
10065          $storage_availTech(nodesModel,years,storage_techs,vintage)
10066      - storage_unitsDecom.l(nodesModel,years,storage_techs,vintage)
10067          $storage_usedTech(nodesModel,years,storage_techs,vintage);
10068  );
10069   
10070  * Set initial state for planned units
10071  storage_unitsTotal.l(nodesModel,years,storage_techs,vintage)
10072    = storage_unitsPlanned(nodesModel,years,storage_techs,vintage)
10073   
10074  * Calculate if planned unit expansion is bounded by upper and lower limits
10075  set storage_unitBoundsFixed(nodesModel,years,storage_techs);
10076  storage_unitBoundsFixed(nodesModel,years,storage_techs)
10077    $(sum(vintage$storage_usedTech(nodesModel,years,storage_techs,vintage),
10078          storage_unitsPlanned(nodesModel,years,storage_techs,vintage))
10079      = storage_reservoirParam(nodesModel,years,storage_techs,"unitsUpperLimit")
10080    and sum(vintage$storage_usedTech(nodesModel,years,storage_techs,vintage),
10081          storage_unitsPlanned(nodesModel,years,storage_techs,vintage))
10082      = storage_reservoirParam(nodesModel,years,storage_techs,"unitsLowerLimit"))
10083    = yes;
10084   
10085  * Fix unitsBuild, unitsDecom, unitsTotal if levels are predetermined by upper and lower limits
10086  storage_unitsBuild.fx(nodesModel,years,storage_techs,vintage)
10087    $(storage_availTech(nodesModel,years,storage_techs,vintage)
10088      and storage_unitBoundsFixed(nodesModel,years,storage_techs))
10089    = storage_unitsBuild.l(nodesModel,years,storage_techs,vintage);
10090  storage_unitsDecom.fx(nodesModel,years,storage_techs,vintage)
10091    $(storage_usedTech(nodesModel,years,storage_techs,vintage)
10092      and storage_unitBoundsFixed(nodesModel,years,storage_techs))
10093    = storage_unitsDecom.l(nodesModel,years,storage_techs,vintage);
10094  storage_unitsTotal.fx(nodesModel,years,storage_techs,vintage)
10095    $(storage_usedTech(nodesModel,years,storage_techs,vintage)
10096      and storage_unitBoundsFixed(nodesModel,years,storage_techs))
10097    = storage_unitsTotal.l(nodesModel,years,storage_techs,vintage);
10098   
10099  storage_unitsTotal_MIP.up(nodesModel,years,storage_techs,vintage)
10100      $(storage_usedTech(nodesModel,years,storage_techs,vintage)
10101        and storage_techParam(storage_techs,vintage,"mipUnits") = 1)
10102      = storage_reservoirParam(nodesModel,years,storage_techs,"unitsUpperLimit");
10103   
10104  * Add parameter for fixing capacities during myopic runs
10105  parameter storage_unitsDelta(nodesModel,years,storage_techs);
10106   
10107   
10108  * ==== declaration of equations ====
10109   
10110  equations
10111    Eq_storage_unitsBalance(nodesModel,years,storage_techs,vintage
10112      ) "Ensures the units balance over the planning period."
10113    Eq_storage_unitsFixedDecom(nodesModel,years,storage_techs,vintage
10114      ) "Restricts the fixed decommissioning of units over the planning period."
10115    Eq_storage_unitsFreeDecom(nodesModel,years,storage_techs,vintage
10116      ) "Restricts the free decommissioning of units over the planning period."
10117    Eq_storage_unitsUpperLimit(nodesModel,years,storage_techs
10118      ) "Upper bound for the total number of units."
10119    Eq_storage_unitsLowerLimit(nodesModel,years,storage_techs
10120      ) "Lower bound for the total number of units."
10121    Eq_storage_unitsTotalMIP(nodesModel,years,storage_techs,vintage
10122      ) "Fixes the total number of units to the corresponding integer variable."
10123   
10124    Eq_storage_levelUpperLimit(timeModel,nodesModel,years,storage_techs,vintage,commodity
10125      ) "Upper bound for the total number of units."
10126    Eq_storage_levelUpperLimit_degradation(timeModel,nodesModel,years,storage_techs,vintage,commodity
10127      ) "Upper bound for the total number of units if the storage technology accounts for degradation."
10128    Eq_storage_levelLowerLimit(timeModel,nodesModel,years,storage_techs,vintage,commodity
10129      ) "Lower bound for the total number of units."
10130    Eq_storage_losses(timeModel,nodesModel,years,storage_techs,vintage,commodity
10131      ) "Stored commodities lost due to self discharge."
10132    Eq_storage_unitsBalanceStates(nodesModel,years,storage_techs,vintage
10133      ) "Currently available units must have been built at some point in time and have some state of degradation."
10134    Eq_storage_unitsUpperLimitPerState(nodesModel,years,yearsCom,storage_techs,vintage
10135      ) "There cannot be more units from a certain year than the amount built in that year."
10136    Eq_storage_unitsStatesNoRecovery(nodesModel,years,yearsCom,storage_techs,vintage,degradation_states
10137      ) "There is no recovery."
10138    Eq_storage_cRateLimit(timeModel,nodesModel,years,storage_techs,vintage,commodity
10139      ) "Limit charging rate based on unit capacity."
10140    Eq_storage_eRateLimit(timeModel,nodesModel,years,storage_techs,vintage,commodity
10141      ) "Limit discharging rate based on unit capacity."
10142    Eq_storage_charge(timeModel,nodesModel,years,storage_techs,vintage,commodity
10143      ) "Positive change in state of charge is influx."
10144    Eq_storage_discharge(timeModel,nodesModel,years,storage_techs,vintage,commodity
10145      ) "Negative change in state of charge is outflux."
10146   
10147    Eq_storage_levelStateSum(timeModel,nodesModel,years,storage_techs,vintage,commodity
10148      ) "Sum of degradation class storage levels is the global level."
10149    Eq_storage_levelUpperLimitPerAge(timeModel,nodesModel,years,yearsCom,storage_techs,vintage,commodity
10150      ) "Upper bound for units of a certain state."
10151    Eq_storage_chargingPerAge(timeModel,nodesModel,years,yearsCom,storage_techs,vintage,commodity
10152      ) "Positive change in state of charge is influx for each degradation class."
10153    Eq_storage_chargeBasedDegradationDistribution(nodesModel,years,yearsCom,storage_techs,vintage,commodity
10154      ) "Determine degradation states of storage units."
10155    Eq_storage_unitsDecomStateSum(nodesModel,years,storage_techs,vintage
10156      ) "All decomminsioned units must have a degradation state."
10157    Eq_storage_unitsDegradation(nodesModel,years,yearsCom,storage_techs,vintage,degradation_states
10158      ) "Only allow one range of degradation states per year and age group."
10159    Eq_storage_unitsDegradation_onlyOneRange(nodesModel,years,yearsCom,storage_techs,vintage
10160      ) "Limit usable degradation states to one range, i.e., two neighboring states."
10161   
10162    Eq_storage_unitsSoC_sum(timeModel,nodesModel,years,storage_techs,vintage
10163      ) "Every unit has a state of charge."
10164    Eq_storage_levelSoC(timeModel,nodesModel,years,storage_techs,vintage,commodity
10165      ) "Every unit has a state of charge."
10166    Eq_storage_unitsSoC(timeModel,nodesModel,years,storage_techs,vintage,soc_statesIn
10167      ) "Number of units in particular SoC."
10168    Eq_storage_unitsSoC_onlyOneRange(timeModel,nodesModel,years,storage_techs,vintage
10169      ) "Limit usable SoC states to one range, i.e., two neighboring states."
10170   
10171    Eq_storage_cRateLimit_SoC(timeModel,nodesModel,years,storage_techs,vintage,commodity
10172      ) "Limit charging rate based on unit capacity."
10173    Eq_storage_eRateLimit_SoC(timeModel,nodesModel,years,storage_techs,vintage,commodity
10174      ) "Limit discharging rate based on unit capacity."
10175    ;
10176   
10177  * ==== equation definition ====
10178  * // ## Equations
10179  * // ### Storage Units Balance
10180  * // Ensures that the total units are consistent with the built and decommissioned units.
10181  * // {Eq_storage_unitsBalance}
10182  Eq_storage_unitsBalance(nodesModelSel,yearsSel,storage_techs,vintage)
10183      $((storage_usedTech(nodesModelSel,yearsSel,storage_techs,vintage)
10184            or sum(years$sameas(years,yearsSel), storage_usedTech(nodesModelSel,years-1,storage_techs,vintage)))
10185          and not storage_unitBoundsFixed(nodesModelSel,yearsSel,storage_techs))
10186      ..
10187      storage_unitsTotal(nodesModelSel,yearsSel,storage_techs,vintage)
10188      =e=
10189          sum(yearsToCalc$(ord(yearsToCalc) = 1 and sameas(yearsToCalc, yearsSel)),
10190        sum(years$sameas(years, yearsToCalc),
10191          storage_unitsTotal(nodesModelSel,years-1,storage_techs,vintage)
10192            $storage_usedTech(nodesModelSel,years-1,storage_techs,vintage)))
10193      + sum((yearsToCalc)$(ord(yearsToCalc) > 1 and sameas(yearsToCalc, yearsSel)),
10194        storage_unitsTotal(nodesModelSel,yearsToCalc-1,storage_techs,vintage)
10195          $storage_usedTech(nodesModelSel,yearsToCalc-1,storage_techs,vintage))
10196      + storage_unitsBuild(nodesModelSel,yearsSel,storage_techs,vintage)
10197          $storage_availTech(nodesModelSel,yearsSel,storage_techs,vintage)
10198      - storage_unitsDecom(nodesModelSel,yearsSel,storage_techs,vintage)
10199          $storage_usedTech(nodesModelSel,yearsSel,storage_techs,vintage);
10200   
10201  * // ### Storage Units Fixed Decommission
10202  * // Restricts the fixed decommissioning of storage units over the planning period.
10203  * // {Eq_storage_unitsFixedDecom}
10204  Eq_storage_unitsFixedDecom(nodesModelSel,yearsSel,storage_techs,vintage)
10205      $(storage_decomTech(nodesModelSel,yearsSel,storage_techs,vintage)
10206          and not storage_techParam(storage_techs,vintage,"freeDecom") = 1
10207          and not storage_unitBoundsFixed(nodesModelSel,yearsSel,storage_techs))
10208      ..
10209      storage_unitsDecom(nodesModelSel,yearsSel,storage_techs,vintage)
10210      =e=
10211      sum(years$
10212          (storage_availTech(nodesModelSel,years,storage_techs,vintage)
10213            and years.val > sum(yearsToCalc$sameas(yearsToCalc+1, yearsSel), yearsToCalc.val) - storage_techParam(storage_techs,vintage,'lifeTime')
10214            and years.val <= yearsSel.val - storage_techParam(storage_techs,vintage,'lifeTime')),
10215        storage_unitsBuild(nodesModelSel,years,storage_techs,vintage));
10216   
10217  * // ### Storage Units Free Decomission
10218  * // Restricts the free decommissioning of storage units over the planning period.
10219  * // {Eq_storage_unitsFreeDecom}
10220  Eq_storage_unitsFreeDecom(nodesModelSel,yearsSel,storage_techs,vintage)
10221      $((storage_decomTech(nodesModelSel,yearsSel,storage_techs,vintage)
10222          or storage_usedTech(nodesModelSel,yearsSel,storage_techs,vintage))
10223          and storage_techParam(storage_techs,vintage,"freeDecom") = 1)
10224      ..
10225      sum(years$
10226            ((storage_decomTech(nodesModelSel,years,storage_techs,vintage)
10227              or storage_usedTech(nodesModelSel,years,storage_techs,vintage))
10228              and years.val < sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)),
10229          storage_unitsDecom(nodesModelSel,years,storage_techs,vintage))
10230      + sum(yearsToCalc$
10231            ((storage_decomTech(nodesModelSel,yearsToCalc,storage_techs,vintage)
10232              or storage_usedTech(nodesModelSel,yearsToCalc,storage_techs,vintage))
10233              and yearsToCalc.val >= sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
10234              and yearsToCalc.val <= yearsSel.val),
10235          storage_unitsDecom(nodesModelSel,yearsToCalc,storage_techs,vintage))
10236      =g=
10237      sum(years$
10238            (storage_availTech(nodesModelSel,years,storage_techs,vintage)
10239              and years.val < sum(yearsToCalc$(ord(yearsToCalc)=1), yearsToCalc.val) - storage_techParam(storage_techs,vintage,'lifeTime')),
10240          storage_unitsBuild(nodesModelSel,years,storage_techs,vintage))
10241      + sum(yearsToCalc$
10242            (storage_availTech(nodesModelSel,yearsToCalc,storage_techs,vintage)
10243              and yearsToCalc.val >= sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
10244              and yearsToCalc.val <= yearsSel.val - storage_techParam(storage_techs,vintage,'lifeTime')),
10245          storage_unitsBuild(nodesModelSel,yearsToCalc,storage_techs,vintage));
10246   
10247  * // ### Storage Units Lower Limit
10248  * // Lower bound for the total number of storage units.
10249  * // {Eq_storage_unitsLowerLimit}
10250  Eq_storage_unitsLowerLimit(nodesModelSel,yearsSel,storage_techs)
10251      $(storage_reservoirParam(nodesModelSel,yearsSel,storage_techs,'unitsLowerLimit') > 0 )
10252      ..
10253      sum(vintage$storage_usedTech(nodesModelSel,yearsSel,storage_techs,vintage),
10254          storage_unitsTotal(nodesModelSel,yearsSel,storage_techs,vintage))
10255      =g=
10256      storage_reservoirParam(nodesModelSel,yearsSel,storage_techs,"unitsLowerLimit");
10257   
10258  * // ### Storage Units Upper Limit
10259  * // Upper bound for the total number of storage units.
10260  * // {Eq_storage_unitsUpperLimit}
10261  Eq_storage_unitsUpperLimit(nodesModelSel,yearsSel,storage_techs)
10262      $(storage_reservoirParam(nodesModelSel,yearsSel,storage_techs,'unitsUpperLimit') >= 0
10263          and storage_reservoirParam(nodesModelSel,yearsSel,storage_techs,'unitsUpperLimit') < +inf )
10264      ..
10265      sum(vintage$storage_usedTech(nodesModelSel,yearsSel,storage_techs,vintage),
10266          storage_unitsTotal(nodesModelSel,yearsSel,storage_techs,vintage))
10267      =l=
10268      storage_reservoirParam(nodesModelSel,yearsSel,storage_techs,"unitsUpperLimit");
10269   
10270  * // ### Storage Units Total MIP
10271  * // Fixes the total number of storage units to the corresponding integer variable.
10272  * // {Eq_storage_unitsTotalMIP}
10273  Eq_storage_unitsTotalMIP(nodesModelSel,yearsSel,storage_techs,vintage)
10274      $( storage_usedTech(nodesModelSel,yearsSel,storage_techs,vintage)
10275          and storage_techParam(storage_techs,vintage,"mipUnits") = 1 )
10276      ..
10277      storage_unitsTotal(nodesModelSel,yearsSel,storage_techs,vintage)
10278      =e=
10279      storage_unitsTotal_MIP(nodesModelSel,yearsSel,storage_techs,vintage);
10280   
10281  * // ### Storage Level Lower Limit
10282  * // Lower limit on the storage level.
10283  * // {Eq_storage_levelLowerLimit}
10284  Eq_storage_levelLowerLimit(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
10285      $(storage_usedTechCom(nodesModelSel,yearsSel,storage_techs,vintage,commodity)
10286          and storage_levelProfile(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,"lower") > 0)
10287      ..
10288      storage_level(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
10289      =g=
10290      storage_levelProfile(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,"lower")
10291      * storage_sizeParam(storage_techs,vintage,commodity,"size")
10292      * storage_unitsTotal(nodesModelSel,yearsSel,storage_techs,vintage);
10293   
10294  * // ### Storage Level Upper Limit
10295  * // Upper limit on the storage level.
10296  * // {Eq_storage_levelUpperLimit}
10297  Eq_storage_levelUpperLimit(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
10298      $(storage_usedTechCom(nodesModelSel,yearsSel,storage_techs,vintage,commodity)
10299          and not storage_hasDegradation(storage_techs,vintage)
10300          and storage_levelProfile(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,"upper") >= 0)
10301      ..
10302      storage_level(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
10303      =l=
10304      storage_levelProfile(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,"upper")
10305      * storage_sizeParam(storage_techs,vintage,commodity,"size")
10306      * storage_unitsTotal(nodesModelSel,yearsSel,storage_techs,vintage);
10307   
10308  * // ### Storage Level Upper Limit (degradation)
10309  * // Upper limit on the storage level if the storage technology accounts for degradation.
10310  * // {Eq_storage_levelUpperLimit_degradation}
10311  Eq_storage_levelUpperLimit_degradation(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
10312      $(storage_usedTechCom(nodesModelSel,yearsSel,storage_techs,vintage,commodity)
10313          and storage_hasDegradation(storage_techs,vintage)
10314          and storage_levelProfile(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,"upper") >= 0)
10315      ..
10316      storage_level(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
10317      =l=
10318      storage_levelProfile(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,"upper")
10319      * storage_sizeParam(storage_techs,vintage,commodity,"size")
10320      * sum((degradation_states,yearsCom)$storage_usedDegradation(storage_techs,vintage,degradation_states),
10321              (storage_degradationParam(storage_techs,vintage,degradation_states,"remainingCapacity")
10322                - (yearsSel.val - yearsCom.val) * storage_techParam(storage_techs,vintage,"annualDegradation"))
10323                * storage_unitsStateTracker(nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,degradation_states));
10324   
10325  * // ### Storage Unit States Sum (degradation)
10326  * // The number of units in all degradation state must match the total unit number.
10327  * // {Eq_storage_unitsBalanceStates}
10328  Eq_storage_unitsBalanceStates(nodesModelSel,yearsSel,storage_techs,vintage)
10329      $(storage_usedTech(nodesModelSel,yearsSel,storage_techs,vintage)
10330        and storage_hasDegradation(storage_techs,vintage))
10331      ..
10332      storage_unitsTotal(nodesModelSel,yearsSel,storage_techs,vintage)
10333      =e=
10334      sum((yearsCom,degradation_states)$storage_usedDegradation(storage_techs,vintage,degradation_states),
10335            storage_unitsStateTracker(nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,degradation_states));
10336   
10337  * // ### Storage Unit States Upper Limit(degradation)
10338  * // The states of all commissioned units in one year (unitsBuilt) must either still be tracked or have been decommissioned.
10339  * // {Eq_storage_unitsUpperLimitPerState}
10340  Eq_storage_unitsUpperLimitPerState(nodesModelSel,yearsSel,yearsCom,storage_techs,vintage)
10341      $(storage_usedTech(nodesModelSel,yearsSel,storage_techs,vintage)
10342          and storage_hasDegradation(storage_techs,vintage))
10343      ..
10344      sum(degradation_states$storage_usedDegradation(storage_techs,vintage,degradation_states),
10345            storage_unitsStateTracker(nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,degradation_states)
10346            + sum(years$(years.val <= yearsSel.val),
10347                  storage_unitsStateTrackerDecom(nodesModelSel,years,yearsCom,storage_techs,vintage,degradation_states)))
10348      =e=
10349      storage_unitsBuild(nodesModelSel,yearsCom,storage_techs,vintage)$(yearsCom.val <= yearsSel.val);
10350   
10351  * // ### Storage Unit States Progression (degradation)
10352  * // Unit recovery by reassigning the storage cycles to other units is disabled. Therefore, the number of units in a particular degradation state can only increase if the number in a less degraded state is decreased by at least the same amount.
10353  * // {Eq_storage_unitsStatesNoRecovery}
10354  alias(degradation_states, dc_states);
10355  Eq_storage_unitsStatesNoRecovery(nodesModelSel,yearsSel(yearsToCalc),yearsCom,storage_techs,vintage,degradation_states)
10356      $(storage_usedTech(nodesModelSel,yearsSel,storage_techs,vintage)
10357        and yearsToCalc.val > yearsCom.val
10358        and storage_usedDegradation(storage_techs,vintage,degradation_states))
10359      ..
10360      sum(dc_states$(storage_usedDegradation(storage_techs,vintage,dc_states)
10361                and storage_degradationParam(storage_techs,vintage,dc_states,"maxFullCycles") <= storage_degradationParam(storage_techs,vintage,degradation_states,"maxFullCycles")),
10362              storage_unitsStateTracker(nodesModelSel,yearsToCalc,yearsCom,storage_techs,vintage,dc_states)
10363              + sum(years$(years.val <= yearsToCalc.val), storage_unitsStateTrackerDecom(nodesModelSel,years,yearsCom,storage_techs,vintage,dc_states)))
10364      =l=
10365      sum(dc_states$(storage_usedDegradation(storage_techs,vintage,dc_states)
10366                      and storage_degradationParam(storage_techs,vintage,dc_states,"maxFullCycles") <= storage_degradationParam(storage_techs,vintage,degradation_states,"maxFullCycles")),
10367              storage_unitsStateTracker(nodesModelSel,yearsToCalc-1,yearsCom,storage_techs,vintage,dc_states)
10368              + sum(years$(years.val < yearsToCalc.val), storage_unitsStateTrackerDecom(nodesModelSel,years,yearsCom,storage_techs,vintage,dc_states)));
10369   
10370  * // ### Storage Losses
10371  * // Accumulation of storage losses.
10372  * // {Eq_storage_losses}
10373  Eq_storage_losses(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,storage_techs,vintage,commodity)
10374      $storage_usedTechCom(nodesModelSel,yearsSel,storage_techs,vintage,commodity)
10375      ..
10376      storage_losses(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
10377      =e=
10378      - storage_level(timeModelToCalc--1,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
10379        * storage_sizeParam(storage_techs,vintage,commodity,"selfdischarge")
10380      + storage_sizeParam(storage_techs,vintage,commodity,"selfdischargeAbs")
10381      + (storage_techParam(storage_techs,vintage,"chargingLoss")
10382          /(1 - storage_techParam(storage_techs,vintage,"chargingLoss")))
10383        * storage_charge(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
10384          $(storage_techParam(storage_techs,vintage,"chargingLoss") > 0)
10385      + storage_techParam(storage_techs,vintage,"dischargingLoss")
10386        * storage_discharge(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
10387          $(storage_techParam(storage_techs,vintage,"dischargingLoss") > 0)
10388      - storage_sizeParam(storage_techs,vintage,commodity,"size")
10389        * sum(soc_states$(storage_usedTechSoCState(storage_techs,vintage,soc_states)
10390                          and storage_validSoCRange(storage_techs,vintage)),
10391              storage_unitsSoC(timeModelToCalc--1,nodesModelSel,yearsSel,storage_techs,vintage,soc_states)
10392              * storage_SoCParam(storage_techs,vintage,soc_states,"SoC")
10393              * storage_SoCParam(storage_techs,vintage,soc_states,"selfdischarge"));
10394   
10395  * // ### C-Rate Limit
10396  * // The increase in storage level per time step, i.e., the charging rate, is limited relative to the storage capacity.
10397  * // {Eq_storage_cRateLimit}
10398  Eq_storage_cRateLimit(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,storage_techs,vintage,commodity)
10399      $(storage_usedTechCom(nodesModelSel,yearsSel,storage_techs,vintage,commodity)
10400        and storage_techParam(storage_techs,vintage,"maxCRate") > 0)
10401      ..
10402      storage_level(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
10403      - storage_level(timeModelToCalc--1,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
10404      =l=
10405      storage_techParam(storage_techs,vintage,"maxCRate")
10406      * storage_sizeParam(storage_techs,vintage,commodity,"size")
10407      * storage_unitsTotal(nodesModelSel,yearsSel,storage_techs,vintage);
10408   
10409  * // ### E-Rate Limit
10410  * // The decrease in storage level per time step, i.e., the discharging rate, is limited relative to the storage capacity.
10411  * // {Eq_storage_eRateLimit}
10412  Eq_storage_eRateLimit(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,storage_techs,vintage,commodity)
10413      $(storage_usedTechCom(nodesModelSel,yearsSel,storage_techs,vintage,commodity)
10414        and storage_techParam(storage_techs,vintage,"maxERate") > 0)
10415      ..
10416      storage_level(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
10417      - storage_level(timeModelToCalc--1,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
10418      =g=
10419      - storage_techParam(storage_techs,vintage,"maxERate")
10420      * storage_sizeParam(storage_techs,vintage,commodity,"size")
10421      * storage_unitsTotal(nodesModelSel,yearsSel,storage_techs,vintage);
10422   
10423  * // ### Storage Charging
10424  * // Increases in storage levels are accounted as charging amounts.
10425  * // {Eq_storage_charge}
10426  Eq_storage_charge(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,storage_techs,vintage,commodity)
10427      $(storage_usedTechCom(nodesModelSel,yearsSel,storage_techs,vintage,commodity)
10428        and storage_techParam(storage_techs,vintage,"chargingLoss") > 0)
10429      ..
10430      storage_charge(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
10431      =g=
10432      storage_level(timeModelToCalc,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
10433      - storage_level(timeModelToCalc--1,nodesModelSel,yearsSel,storage_techs,vintage,commodity);
10434   
10435  * // ### Storage Discharging
10436  * // Decreases in storage levels are accounted as discharging amounts.
10437  * // {Eq_storage_discharge}
10438  Eq_storage_discharge(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,storage_techs,vintage,commodity)
10439      $(storage_usedTechCom(nodesModelSel,yearsSel,storage_techs,vintage,commodity)
10440        and storage_techParam(storage_techs,vintage,"dischargingLoss") > 0)
10441      ..
10442      storage_discharge(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
10443      =g=
10444      storage_level(timeModelToCalc--1,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
10445      - storage_level(timeModelToCalc,nodesModelSel,yearsSel,storage_techs,vintage,commodity);
10446   
10447  * // ### Storage Level Sum (degradation)
10448  * // The storage level is accounted individually by commissioning year in the case of degradation in order to prohibit the model to assign pre-existing storage cycles to newly built storage reservoirs and thereby avoiding degradation. All those storage levels represent the total storage level.
10449  * // {Eq_storage_levelStateSum}
10450  Eq_storage_levelStateSum(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
10451      $(storage_usedTechCom(nodesModelSel,yearsSel,storage_techs,vintage,commodity)
10452        and storage_techParam(storage_techs,vintage,"usageDegradation"))
10453      ..
10454      storage_level(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
10455      =e=
10456      sum(yearsCom, storage_levelPerAge(timeModelSel,nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,commodity));
10457   
10458  * // ### Storage Level Upper Limit per Age Group (degradation)
10459  * // Upper limit on the storage level per commissioning year if the storage technology accounts for degradation.
10460  * // {Eq_storage_levelUpperLimitPerAge}
10461  Eq_storage_levelUpperLimitPerAge(timeModelSel,nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,commodity)
10462      $(storage_usedTechCom(nodesModelSel,yearsSel,storage_techs,vintage,commodity)
10463        and storage_techParam(storage_techs,vintage,"usageDegradation"))
10464      ..
10465      storage_levelPerAge(timeModelSel,nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,commodity)
10466      =l=
10467      storage_techParam(storage_techs,vintage,"levelUpperLimit")
10468      * storage_sizeParam(storage_techs,vintage,commodity,"size")
10469      * sum(degradation_states,
10470              (storage_degradationParam(storage_techs,vintage,degradation_states,"remainingCapacity")
10471                - (yearsSel.val - yearsCom.val) * storage_techParam(storage_techs,vintage,"annualDegradation"))
10472                * storage_unitsStateTracker(nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,degradation_states));
10473   
10474  * // ### Storage Cycle Distribution to Degradation States per Commissioning Year (degradation)
10475  * // The charging amounts are converted to equivalent full cycles which then must be represented by an adequate distribution of degradation states.
10476  * // {Eq_storage_chargeBasedDegradationDistribution}
10477  alias(years, prev_years);
10478  Eq_storage_chargeBasedDegradationDistribution(nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,commodity)
10479      $(storage_usedTechCom(nodesModelSel,yearsSel,storage_techs,vintage,commodity)
10480        and storage_techParam(storage_techs,vintage,"usageDegradation"))
10481      ..
10482      sum(prev_years$(prev_years.val <= yearsSel.val), representedYears(prev_years)
10483          * sum(timeModel, storage_chargePerAge(timeModel,nodesModelSel,prev_years,yearsCom,storage_techs,vintage,commodity)))
10484      =l=
10485      storage_sizeParam(storage_techs,vintage,commodity,"size")
10486      * sum(dc_states$storage_usedDegradation(storage_techs,vintage,dc_states),
10487          storage_degradationParam(storage_techs,vintage,dc_states,"maxFullCycles")
10488          * (storage_unitsStateTracker(nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,dc_states)
10489             + sum(prev_years$(prev_years.val <= yearsSel.val), storage_unitsStateTrackerDecom(nodesModelSel,prev_years,yearsCom,storage_techs,vintage,dc_states))));
10490   
10491  * // ### Storage Charging per Commissioning Year (degradation)
10492  * // Increases in storage levels are accounted as charging amounts.
10493  * // {Eq_storage_chargingPerAge}
10494  Eq_storage_chargingPerAge(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,commodity)
10495      $(storage_usedTechCom(nodesModelSel,yearsSel,storage_techs,vintage,commodity)
10496        and storage_techParam(storage_techs,vintage,"usageDegradation"))
10497      ..
10498      storage_chargePerAge(timeModelSel,nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,commodity)
10499      =g=
10500      storage_levelPerAge(timeModelToCalc,nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,commodity)
10501      - storage_levelPerAge(timeModelToCalc--1,nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,commodity);
10502   
10503  * // ### Storage Unit Decommissioning States Sum (degradation)
10504  * // The number of decommissioned units in all degradation state must match the total decommissioning unit number.
10505  * // {Eq_storage_unitsDecomStateSum}
10506  Eq_storage_unitsDecomStateSum(nodesModelSel,yearsSel,storage_techs,vintage)
10507      $(storage_techParam(storage_techs,vintage,"usageDegradation"))
10508      ..
10509      storage_unitsDecom(nodesModelSel,yearsSel,storage_techs,vintage)
10510      =e=
10511      sum((yearsCom,degradation_states)$storage_usedDegradation(storage_techs,vintage,degradation_states),
10512          storage_unitsStateTrackerDecom(nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,degradation_states));
10513   
10514  * // ### Storage Unit Sequential Degradation (degradation)
10515  * // Only active degradation ranges, i.e., two neighboring degradation states, can be used.
10516  * // {Eq_storage_unitsDegradation}
10517  alias(degradation_states, degradation_states_a, degradation_states_b);
10518  Eq_storage_unitsDegradation(nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,degradation_states)
10519      $(storage_techParam(storage_techs,vintage,"usageDegradation")
10520        and storage_techParam(storage_techs,vintage,"sequentialDegradationStates"))
10521      ..
10522      sum(degradation_states_a$((storage_degradationParam(storage_techs,vintage,degradation_states_a,"maxFullCycles") = storage_degradationParam(storage_techs,vintage,degradation_states,"maxFullCycles")
10523                        or storage_degradationParam(storage_techs,vintage,degradation_states_a,"maxFullCycles")
10524                                         = smax(degradation_states_b$(storage_degradationParam(storage_techs,vintage,degradation_states_b,"maxFullCycles") < storage_degradationParam(storage_techs,vintage,degradation_states,"maxFullCycles")
10525                                                              and storage_usedDegradation(storage_techs,vintage,degradation_states_b)),
10526                                                              storage_degradationParam(storage_techs,vintage,degradation_states_b,"maxFullCycles")))
10527                        and storage_usedDegradation(storage_techs,vintage,degradation_states_a)),
10528          storage_unitsStateTracker_activeRange(nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,degradation_states_a))
10529      * storage_bigM(storage_techs,vintage)
10530      =g=
10531      storage_unitsStateTracker(nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,degradation_states);
10532   
10533  * // ### Storage Unit Sequential Degradation Range (degradation)
10534  * // Only one degradation range can be active.
10535  * // {Eq_storage_unitsDegradation_onlyOneRange}
10536  Eq_storage_unitsDegradation_onlyOneRange(nodesModelSel,yearsSel,yearsCom,storage_techs,vintage)
10537      $(storage_techParam(storage_techs,vintage,"usageDegradation") and storage_techParam(storage_techs,vintage,"sequentialDegradationStates"))
10538      ..
10539      sum(degradation_states$storage_usedDegradation(storage_techs,vintage,degradation_states),
10540            storage_unitsStateTracker_activeRange(nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,degradation_states))
10541      =e= 1;
10542   
10543  * // ### Storage Unit Sequential State of Charge (SoC)
10544  * // Only active state of charge ranges, i.e., two neighboring states of charge, can be used.
10545  * // {Eq_storage_unitsSoC}
10546  alias(soc_states, soc_states_a, soc_states_b);
10547  Eq_storage_unitsSoC(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,storage_techs,vintage,soc_states)
10548      $(storage_validSoCRange(storage_techs,vintage) and storage_techParam(storage_techs,vintage,"sequentialSoC"))
10549      ..
10550      sum(soc_states_a$((storage_SoCParam(storage_techs,vintage,soc_states_a,"SoC") = storage_SoCParam(storage_techs,vintage,soc_states,"SoC")
10551                        or storage_SoCParam(storage_techs,vintage,soc_states_a,"SoC")
10552                                         = smax(soc_states_b$(storage_SoCParam(storage_techs,vintage,soc_states_b,"SoC") < storage_SoCParam(storage_techs,vintage,soc_states,"SoC")
10553                                                              and storage_usedTechSoCState(storage_techs,vintage,soc_states_b)),
10554                                                              storage_SoCParam(storage_techs,vintage,soc_states_b,"SoC")))
10555                        and storage_usedTechSoCState(storage_techs,vintage,soc_states_a)),
10556          storage_unitsSoC_activeRange(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,soc_states_a))
10557      * storage_bigM(storage_techs,vintage)
10558      =g=
10559      storage_unitsSoC(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,soc_states);
10560   
10561  * // ### Storage Unit Sequential State of Charge Range (SoC)
10562  * // Only one state of charge range can be active.
10563  * // {Eq_storage_unitsSoC_onlyOneRange}
10564  Eq_storage_unitsSoC_onlyOneRange(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,storage_techs,vintage)
10565      $(storage_validSoCRange(storage_techs,vintage) and storage_techParam(storage_techs,vintage,"sequentialSoC"))
10566      ..
10567      sum(soc_states$storage_usedTechSoCState(storage_techs,vintage,soc_states),
10568            storage_unitsSoC_activeRange(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,soc_states)) =e= 1;
10569   
10570  * // ### Storage Unit State of Charge Sum (SoC)
10571  * // Each storage unit must have one state of charge.
10572  * // {Eq_storage_unitsSoC_sum}
10573  Eq_storage_unitsSoC_sum(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,storage_techs,vintage)
10574      $storage_validSoCRange(storage_techs,vintage)
10575      ..
10576      storage_unitsTotal(nodesModelSel,yearsSel,storage_techs,vintage)
10577      =e=
10578      sum(soc_states$storage_usedTechSoCState(storage_techs,vintage,soc_states),
10579            storage_unitsSoC(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,soc_states));
10580   
10581  * // ### Storage Level State of Charge Sum (SoC)
10582  * // The total storage level must be represented by units in their specific states of charge.
10583  * // {Eq_storage_levelSoC}
10584  Eq_storage_levelSoC(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,storage_techs,vintage,commodity)
10585      $(storage_validSoCRange(storage_techs,vintage) and storage_usedTechCom(nodesModelSel,yearsSel,storage_techs,vintage,commodity))
10586      ..
10587      storage_level(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
10588      =e=
10589      storage_sizeParam(storage_techs,vintage,commodity,"size")
10590      * sum(soc_states$storage_usedTechSoCState(storage_techs,vintage,soc_states),
10591              storage_unitsSoC(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,soc_states)
10592              * storage_SoCParam(storage_techs,vintage,soc_states,"SoC"));
10593   
10594  * // ### C-Rate Limit (SoC)
10595  * // The increase in storage level per time step, i.e., the charging rate, is limited relative to the storage capacity. The coefficients can vary between states of charge.
10596  * // {Eq_storage_cRateLimit_SoC}
10597  Eq_storage_cRateLimit_SoC(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,storage_techs,vintage,commodity)
10598      $(storage_usedTechCom(nodesModelSel,yearsSel,storage_techs,vintage,commodity)
10599        and storage_validSoCRange(storage_techs,vintage)
10600        and sum(soc_states, storage_SoCParam(storage_techs,vintage,soc_states,"cRate")) < inf)
10601      ..
10602      storage_level(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
10603      - storage_level(timeModelToCalc--1,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
10604      =l=
10605      storage_sizeParam(storage_techs,vintage,commodity,"size")
10606      * sum(soc_states$storage_usedTechSoCState(storage_techs,vintage,soc_states),
10607                      storage_SoCParam(storage_techs,vintage,soc_states,"cRate")
10608                      * storage_unitsSoC(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,soc_states));
10609   
10610  * // ### E-Rate Limit (SoC)
10611  * // The decrease in storage level per time step, i.e., the discharging rate, is limited relative to the storage capacity. The coefficients can vary between states of charge.
10612  * // {Eq_storage_cRateLimit_SoC}
10613  Eq_storage_eRateLimit_SoC(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,storage_techs,vintage,commodity)
10614      $(storage_usedTechCom(nodesModelSel,yearsSel,storage_techs,vintage,commodity)
10615        and storage_validSoCRange(storage_techs,vintage)
10616        and sum(soc_states, storage_SoCParam(storage_techs,vintage,soc_states,"eRate")) < inf)
10617      ..
10618      storage_level(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
10619      - storage_level(timeModelToCalc--1,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
10620      =g=
10621      - storage_sizeParam(storage_techs,vintage,commodity,"size")
10622      * sum(soc_states$storage_usedTechSoCState(storage_techs,vintage,soc_states),
10623                      storage_SoCParam(storage_techs,vintage,soc_states,"eRate")
10624                      * storage_unitsSoC(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,soc_states));
10625   
10626   
10627  * ==== model definition ====
10628   
10629  Model M_storage
10630  /
10631    Eq_storage_unitsBalance
10632    Eq_storage_unitsFixedDecom
10633    Eq_storage_unitsFreeDecom
10634    Eq_storage_unitsLowerLimit
10635    Eq_storage_unitsUpperLimit
10636    Eq_storage_levelUpperLimit_degradation
10637    Eq_storage_unitsTotalMIP
10638    Eq_storage_levelLowerLimit
10639    Eq_storage_levelUpperLimit
10641    Eq_storage_losses
10643    Eq_storage_unitsBalanceStates
10644    Eq_storage_unitsUpperLimitPerState
10645    Eq_storage_unitsStatesNoRecovery
10646    Eq_storage_cRateLimit
10647    Eq_storage_eRateLimit
10648    Eq_storage_charge
10649    Eq_storage_discharge
10650    Eq_storage_levelStateSum
10651    Eq_storage_levelUpperLimitPerAge
10652    Eq_storage_chargeBasedDegradationDistribution
10653    Eq_storage_chargingPerAge
10654    Eq_storage_unitsDecomStateSum
10655    Eq_storage_unitsDegradation
10656    Eq_storage_unitsDegradation_onlyOneRange
10657   
10658    Eq_storage_unitsSoC
10659    Eq_storage_unitsSoC_sum
10660    Eq_storage_unitsSoC_onlyOneRange
10661    Eq_storage_levelSoC
10662    Eq_storage_cRateLimit_SoC
10663    Eq_storage_eRateLimit_SoC
10664  /;
INCLUDE    C:\Local\REMix\framework\remix\framework\model\source\core\transfer.gms
10666  * SPDX-FileCopyrightText: Copyright (c) 2023 German Aerospace Center (DLR)
10667  * SPDX-License-Identifier: BSD-3-Clause
10668   
10669  * // # core_transfer
10670  * // The equations in this file describe the commodity transfer in the model.
10671   
10672  * // ## Variables
10673  * // {special_table_transfer_variables}
10676   
10681   
10941   
10942  parameter transfer_linksParam(linksModel,years,transfer_techs,pc_transfer_linksParam);
10943  transfer_linksParam(linksModelToCalc,years,transfer_techs,pc_transfer_linksParam)
10944      = sum(linksData$links_aggregate(linksModelToCalc,linksData), transfer_linksParamIn(linksData,years,transfer_techs,pc_transfer_linksParam));
10945   
10946  * // ## Load links from gdx file
10948   
10949   
10950  set transfer_hasflowProfileIn(linksData,years,transfer_techs,pc_transfer_flowProfile);
10951  option transfer_hasflowProfileIn < transfer_flowProfileIn;
10952   
10953  * === modify transfer_flowProfileIn vector to fill with default values, in case profile is not specified ===
10954  transfer_linksParamIn(linksData,years,transfer_techs,"flowAlongLimit")
10955      $(not transfer_linksParamIn(linksData,years,transfer_techs,"limitFlows"))
10956      = 1;
10957   
10958  transfer_linksParamIn(linksData,years,transfer_techs,"flowAgainstLimit")
10959      $(not transfer_linksParamIn(linksData,years,transfer_techs,"limitFlows"))
10960      = 1;
10961   
10962  transfer_flowProfileIn(timeData,linksData,years,transfer_techs,"along")
10963      $(not transfer_hasflowProfileIn(linksData,years,transfer_techs,"along"))
10964      = transfer_linksParamIn(linksData,years,transfer_techs,"flowAlongLimit");
10965   
10966  transfer_flowProfileIn(timeData,linksData,years,transfer_techs,"against")
10967      $(not transfer_hasflowProfileIn(linksData,years,transfer_techs,"against"))
10968      = transfer_linksParamIn(linksData,years,transfer_techs,"flowAgainstLimit");
10969   
10970  * aggregate time dimension
10971  parameter transfer_flowProfileIn_aggTime(timeModel,linksData,yearsToCalc,transfer_techs,pc_transfer_flowProfile);
10972  transfer_flowProfileIn_aggTime(timeModelToCalc,linksData,yearsToCalc,transfer_techs,pc_transfer_flowProfile)
10973    = sum(timeData$timeMapping(timeData,timeModelToCalc),
10974            transfer_flowProfileIn(timeData,linksData,yearsToCalc,transfer_techs,pc_transfer_flowProfile)
10975            / timeLength(timeModelToCalc));
10976  option clear = transfer_flowProfileIn;
10977   
10978   
10979  set transfer_finiteLinkLimit(linksModel,years,transfer_techs);
10980  transfer_finiteLinkLimit(linksModelToCalc,yearsToCalc,transfer_techs)
10981      = sum(linksData$links_aggregate(linksModelToCalc,linksData), transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"linksUpperLimit")) > 0
10982          and sum(linksData$links_aggregate(linksModelToCalc,linksData), transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"linksUpperLimit")) < inf;
10983   
10984  set transfer_infiniteLinkLimit(linksModel,years,transfer_techs);
10985  transfer_infiniteLinkLimit(linksModelToCalc,yearsToCalc,transfer_techs)
10986      = sum(linksData$links_aggregate(linksModelToCalc,linksData), transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"linksUpperLimit")) = inf;
10988   
10989  parameter transfer_lengthParam(linksModel,link_types,pc_transfer_lengthParam);
10990  transfer_lengthParam(linksModelToCalc,link_types,pc_transfer_lengthParam)
10991      = sum(linksData$links_aggregate(linksModelToCalc,linksData), transfer_lengthParamIn(linksData,link_types,pc_transfer_lengthParam))
10992          / sum(linksData$links_aggregate(linksModelToCalc,linksData), 1);
10993   
10994  parameter transfer_gridSegments(linksModel,transfer_techs,gridSegments,pc_transfer_gridSegments);
10995  transfer_gridSegments(linksModelToCalc,transfer_techs,gridSegments,pc_transfer_gridSegments)
10996      = smax(linksData$links_aggregate(linksModelToCalc,linksData), transfer_gridSegmentsIn(linksData,transfer_techs,gridSegments,pc_transfer_gridSegments));
10997   
10998  parameter transfer_dcopf_Xtech(linksModel,years,transfer_techs,vintage,gridSegments);
10999  transfer_dcopf_Xtech(linksModelToCalc,yearsToCalc,transfer_techs,vintage,gridSegments)
11000      $(transfer_gridSegments(linksModelToCalc,transfer_techs,gridSegments,"useDCopf")
11001          and transfer_linksParam(linksModelToCalc,yearsToCalc,transfer_techs,"circuits") > 0
11002          and sum(link_types, transfer_reactPerLength(transfer_techs,vintage,link_types,"reactPerLength")) > 0 )
11003      = (1 / sum(linksData
11004                  $links_aggregate(linksModelToCalc,linksData),
11005              1 / ( sum(link_types,
11006                          transfer_lengthParamIn(linksData,link_types,"length")
11007                          * transfer_reactPerLength(transfer_techs,vintage,link_types,"reactPerLength"))
11008                      / transfer_linksParam(linksModelToCalc,yearsToCalc,transfer_techs,"circuits"))));
11009   
11010  set transfer_hasflowProfile(linksModel,years,transfer_techs,pc_transfer_flowProfile);
11011  transfer_hasflowProfile(linksModelToCalc,yearsToCalc,transfer_techs,pc_transfer_flowProfile)
11012      = sum(linksData$links_aggregate(linksModelToCalc,linksData),
11013              transfer_hasflowProfileIn(linksData,yearsToCalc,transfer_techs,pc_transfer_flowProfile));
11014   
11015  * ==== parameter modifications ====
11016  transfer_linksParam(linksModelToCalc,yearsToCalc,transfer_techs,"linksLowerLimit")
11017      $sum(vintage, transfer_techParam(transfer_techs,vintage,"mipLinks"))
11018      = floor(transfer_linksParam(linksModelToCalc,yearsToCalc,transfer_techs,"linksLowerLimit"));
11019  transfer_linksParam(linksModelToCalc,yearsToCalc,transfer_techs,"linksUpperLimit")
11020      $sum(vintage, transfer_techParam(transfer_techs,vintage,"mipLinks"))
11021      = ceil(transfer_linksParam(linksModelToCalc,yearsToCalc,transfer_techs,"linksUpperLimit"));
11022   
11023   
11024  * ==== calculation of mappings ====
11025   
11026  * Technologies with a lifeTime > 0 are available
11027  set transfer_availTech(linksModel,years,transfer_techs,vintage);
11028  transfer_availTech(linksModel,years,transfer_techs,vintage)
11029      $(vintage.val = smax(vintage_a$(vintage_a.val <= years.val
11030          and transfer_techParam(transfer_techs,vintage_a,"lifeTime") > 0), vintage_a.val)) = yes;
11031   
11032  * Technologies to optimize become unavailable if they have an linksUpperLimit of 0
11033  transfer_availTech(linksModelToCalc,years,transfer_techs,vintage)
11034      $(yearsToCalc(years) and transfer_linksParam(linksModelToCalc,years,transfer_techs,"linksUpperLimit") = 0 ) = no;
11035   
11036  * Technologies already built become unavailable if they have an linksBuild of 0
11037  transfer_availTech(linksModelToCalc,years,transfer_techs,vintage)
11038      $( ( not yearsToCalc(years)) and transfer_linksParam(linksModelToCalc,years,transfer_techs,"linksBuild") = 0 ) = no;
11039   
11040  * Used technologies are available technologies over their technical lifeTime
11041  set transfer_usedTech(linksModel,years,transfer_techs,vintage);
11042  transfer_usedTech(linksModelToCalc,years,transfer_techs,vintage)
11043      $(vintage.val <= years.val
11044          and years.val < smax(years_a$transfer_availTech(linksModelToCalc,years_a,transfer_techs,vintage),
11045                                  years_a.val + transfer_techParam(transfer_techs,vintage,"lifeTime"))
11046          ) = yes;
11047   
11048  * Technologies have to be decomissioned in the interval of first avail + lifetime to last avail + lifetime
11049  set transfer_decomTech(linksModel,years,transfer_techs,vintage);
11050  transfer_decomTech(linksModel,years,transfer_techs,vintage)
11051    $(sum(years_a$transfer_usedTech(linksModel,years_a,transfer_techs,vintage), 1)
11052      and sum(yearsToCalc
11053        $(sameas(years, yearsToCalc)
11054          and yearsToCalc.val >= smin(years_a$transfer_availTech(linksModel,years_a,transfer_techs,vintage), years_a.val) + transfer_techParam(transfer_techs,vintage,"lifeTime")
11055          and yearsToCalc.val <= smax(years_a$transfer_availTech(linksModel,years_a,transfer_techs,vintage), years_a.val) + transfer_techParam(transfer_techs,vintage,"lifeTime")), 1))
11056    = yes;
11057   
11058  * Extend the decom frame to the year after the last year of usedTech
11059  transfer_decomTech(linksModel,yearsToCalc,transfer_techs,vintage)
11060    $(transfer_usedTech(linksModel,yearsToCalc-1,transfer_techs,vintage)
11061      and transfer_decomTech(linksModel,yearsToCalc-1,transfer_techs,vintage))
11062    = yes;
11063   
11064  parameter transfer_flowProfile(timeModel,linksModel,years,transfer_techs,vintage,pc_transfer_flowProfile);
11065   
11066  transfer_flowProfile(timeModelToCalc,linksModelToCalc,yearsToCalc,transfer_techs,vintage,"along")
11067      $transfer_finiteLinkLimit(linksModelToCalc,yearsToCalc,transfer_techs)
11068      = (sum(linksData$(links_aggregate(linksModelToCalc,linksData)
11069                       and transfer_incidenceData_flip(linksData) = 1),
11070              transfer_flowProfileIn_aggTime(timeModelToCalc,linksData,yearsToCalc,transfer_techs,"along")
11071              * transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"linksUpperLimit"))
11072          + sum(linksData$(links_aggregate(linksModelToCalc,linksData)
11073                          and transfer_incidenceData_flip(linksData) = -1),
11074              transfer_flowProfileIn_aggTime(timeModelToCalc,linksData,yearsToCalc,transfer_techs,"against")
11075              * transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"linksUpperLimit")))
11076      / sum(linksData$links_aggregate(linksModelToCalc,linksData),
11077              transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"linksUpperLimit"));
11078   
11079  transfer_flowProfile(timeModelToCalc,linksModelToCalc,yearsToCalc,transfer_techs,vintage,"against")
11080      $transfer_finiteLinkLimit(linksModelToCalc,yearsToCalc,transfer_techs)
11081      = (sum(linksData$(links_aggregate(linksModelToCalc,linksData)
11082                       and transfer_incidenceData_flip(linksData) = 1),
11083              transfer_flowProfileIn_aggTime(timeModelToCalc,linksData,yearsToCalc,transfer_techs,"against")
11084              * transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"linksUpperLimit"))
11085          + sum(linksData$(links_aggregate(linksModelToCalc,linksData)
11086                          and transfer_incidenceData_flip(linksData) = -1),
11087              transfer_flowProfileIn_aggTime(timeModelToCalc,linksData,yearsToCalc,transfer_techs,"along")
11088              * transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"linksUpperLimit")))
11089      / sum(linksData$links_aggregate(linksModelToCalc,linksData),
11090              transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"linksUpperLimit"));
11091   
11092  transfer_flowProfile(timeModelToCalc,linksModelToCalc,yearsToCalc,transfer_techs,vintage,"along")
11093      $transfer_infiniteLinkLimit(linksModelToCalc,yearsToCalc,transfer_techs)
11094      = (sum(linksData$(links_aggregate(linksModelToCalc,linksData)
11095                       and transfer_incidenceData_flip(linksData) = 1
11096                       and transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"linksUpperLimit") = inf ),
11097              transfer_flowProfileIn_aggTime(timeModelToCalc,linksData,yearsToCalc,transfer_techs,"along"))
11098          + sum(linksData$(links_aggregate(linksModelToCalc,linksData)
11099                          and transfer_incidenceData_flip(linksData) = -1
11100                          and transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"linksUpperLimit") = inf ),
11101              transfer_flowProfileIn_aggTime(timeModelToCalc,linksData,yearsToCalc,transfer_techs,"against")))
11102      / sum(linksData$(links_aggregate(linksModelToCalc,linksData)
11103                      and transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"linksUpperLimit") = inf ),
11104              1);
11105   
11106  transfer_flowProfile(timeModelToCalc,linksModelToCalc,yearsToCalc,transfer_techs,vintage,"against")
11107      $transfer_infiniteLinkLimit(linksModelToCalc,yearsToCalc,transfer_techs)
11108      = (sum(linksData$(links_aggregate(linksModelToCalc,linksData)
11109                       and transfer_incidenceData_flip(linksData) = 1
11110                       and transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"linksUpperLimit") = inf ),
11111              transfer_flowProfileIn_aggTime(timeModelToCalc,linksData,yearsToCalc,transfer_techs,"against"))
11112          + sum(linksData$(links_aggregate(linksModelToCalc,linksData)
11113                          and transfer_incidenceData_flip(linksData) = -1
11114                          and transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"linksUpperLimit") = inf ),
11115              transfer_flowProfileIn_aggTime(timeModelToCalc,linksData,yearsToCalc,transfer_techs,"along")))
11116      / sum(linksData$(links_aggregate(linksModelToCalc,linksData)
11117                      and transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"linksUpperLimit") = inf ),
11118              1);
11119  option clear = transfer_flowProfileIn_aggTime;
11120   
11121  * Orientation of links affects the flowAlongLimit/flowAgainstLimit
11122   
11123  transfer_linksParam(linksModelToCalc,years,transfer_techs,"flowAlongLimit")
11124      $transfer_finiteLinkLimit(linksModelToCalc,years,transfer_techs)
11125      = (sum(linksData$(links_aggregate(linksModelToCalc,linksData)
11126                       and transfer_incidenceData_flip(linksData) = 1),
11127              transfer_linksParamIn(linksData,years,transfer_techs,"flowAlongLimit")
11128              * transfer_linksParamIn(linksData,years,transfer_techs,"linksUpperLimit"))
11129          + sum(linksData$(links_aggregate(linksModelToCalc,linksData)
11130                          and transfer_incidenceData_flip(linksData) = -1),
11131              transfer_linksParamIn(linksData,years,transfer_techs,"flowAgainstLimit")
11132              * transfer_linksParamIn(linksData,years,transfer_techs,"linksUpperLimit")))
11133      / sum(linksData$links_aggregate(linksModelToCalc,linksData),
11134              transfer_linksParamIn(linksData,years,transfer_techs,"linksUpperLimit"));
11135   
11136  transfer_linksParam(linksModelToCalc,years,transfer_techs,"flowAgainstLimit")
11137      $transfer_finiteLinkLimit(linksModelToCalc,years,transfer_techs)
11138      = (sum(linksData$(links_aggregate(linksModelToCalc,linksData)
11139                       and transfer_incidenceData_flip(linksData) = -1),
11140              transfer_linksParamIn(linksData,years,transfer_techs,"flowAlongLimit")
11141              * transfer_linksParamIn(linksData,years,transfer_techs,"linksUpperLimit"))
11142          + sum(linksData$(links_aggregate(linksModelToCalc,linksData)
11143                          and transfer_incidenceData_flip(linksData) = 1),
11144              transfer_linksParamIn(linksData,years,transfer_techs,"flowAgainstLimit")
11145              * transfer_linksParamIn(linksData,years,transfer_techs,"linksUpperLimit")))
11146      / sum(linksData$links_aggregate(linksModelToCalc,linksData),
11147              transfer_linksParamIn(linksData,years,transfer_techs,"linksUpperLimit"));
11148   
11149  transfer_linksParam(linksModelToCalc,years,transfer_techs,"flowAlongLimit")
11150      $transfer_infiniteLinkLimit(linksModelToCalc,years,transfer_techs)
11151      = (sum(linksData$(links_aggregate(linksModelToCalc,linksData)
11152                       and transfer_incidenceData_flip(linksData) = 1
11153                       and transfer_linksParamIn(linksData,years,transfer_techs,"linksUpperLimit") = inf),
11154              transfer_linksParamIn(linksData,years,transfer_techs,"flowAlongLimit"))
11155          + sum(linksData$(links_aggregate(linksModelToCalc,linksData)
11156                          and transfer_incidenceData_flip(linksData) = -1
11157                          and transfer_linksParamIn(linksData,years,transfer_techs,"linksUpperLimit") = inf),
11158              transfer_linksParamIn(linksData,years,transfer_techs,"flowAgainstLimit")))
11159      / sum(linksData$(links_aggregate(linksModelToCalc,linksData)
11160                      and transfer_linksParamIn(linksData,years,transfer_techs,"linksUpperLimit") = inf ),
11161              1);
11162   
11163  transfer_linksParam(linksModelToCalc,years,transfer_techs,"flowAgainstLimit")
11164      $transfer_infiniteLinkLimit(linksModelToCalc,years,transfer_techs)
11165      = (sum(linksData$(links_aggregate(linksModelToCalc,linksData)
11166                       and transfer_incidenceData_flip(linksData) = -1
11167                       and transfer_linksParamIn(linksData,years,transfer_techs,"linksUpperLimit") = inf),
11168              transfer_linksParamIn(linksData,years,transfer_techs,"flowAlongLimit"))
11169          + sum(linksData$(links_aggregate(linksModelToCalc,linksData)
11170                          and transfer_incidenceData_flip(linksData) = 1
11171                          and transfer_linksParamIn(linksData,years,transfer_techs,"linksUpperLimit") = inf),
11172              transfer_linksParamIn(linksData,years,transfer_techs,"flowAgainstLimit")))
11173      / sum(linksData$(links_aggregate(linksModelToCalc,linksData)
11174                      and transfer_linksParamIn(linksData,years,transfer_techs,"linksUpperLimit") = inf ),
11175              1);
11176   
11177  * Mapping for grid segments using DC optimal power flow
11178  set gridSegments_dcopf(linksModel,transfer_techs,gridSegments);
11179  gridSegments_dcopf(linksModelToCalc,transfer_techs,gridSegments)
11180      $transfer_gridSegments(linksModelToCalc,transfer_techs,gridSegments,"useDCopf")
11182      = yes;
11184   
11185  * Ensure each grid segment uses exactly one commodity
11186  parameter checkGridSegmentCommodities(gridSegments);
11187  checkGridSegmentCommodities(gridSegments)
11188      = sum (commodity$(sum((linksModelToCalc,transfer_techs,vintage)
11189                              $( transfer_coefficient(transfer_techs,vintage,commodity,"coefficient") > 0
11190                                  and gridSegments_dcopf(linksModelToCalc,transfer_techs,gridSegments)) , 1) > 0), 1);
11191   
11192  parameter transfer_incidenceSegments(nodesModel,linksModel,years,gridSegments);
11193  transfer_incidenceSegments(nodesModelToCalc,linksModelToCalc,yearsToCalc,gridSegments)
11194      $(sum((transfer_techs,vintage)$(transfer_usedTech(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
11195                                          and gridSegments_dcopf(linksModelToCalc,transfer_techs,gridSegments)
11196                                          and transfer_incidenceModel(nodesModelToCalc,linksModelToCalc) <> 0), 1) > 0)
11197      = transfer_incidenceModel(nodesModelToCalc,linksModelToCalc);
11198   
11199   
11203   
11204  scalar transfer_enableMIP;
11205  transfer_enableMIP = sum(transfer_usedTech(linksModelToCalc,yearsToCalc,transfer_techs,vintage)$transfer_techParam(transfer_techs,vintage,"mipLinks"), 1 );
11206   
11207   
11208  * ==== definition of variables ====
11209   
11210  * Initialise variables for linksBuild
11211  transfer_linksBuild.l(linksModel,years,transfer_techs,vintage)
11212      $transfer_availTech(linksModel,years,transfer_techs,vintage)
11213      = transfer_linksParam(linksModel,years,transfer_techs,"linksBuild");
11214  transfer_linksBuild.lo(linksModel,yearsToCalc,transfer_techs,vintage)
11215      $transfer_availTech(linksModel,yearsToCalc,transfer_techs,vintage)
11216      = transfer_linksBuild.l(linksModel,yearsToCalc,transfer_techs,vintage);
11217  transfer_linksBuild.fx(linksModel,years,transfer_techs,vintage)
11218      $transfer_linksParam(linksModel,years,transfer_techs,"noExpansion")
11219      = transfer_linksBuild.l(linksModel,years,transfer_techs,vintage);
11220   
11221  * Initialise variables for linksDecom
11222  transfer_linksDecom.l(linksModel,years,transfer_techs,vintage)
11223      $(transfer_decomTech(linksModel,years,transfer_techs,vintage)
11224        and years.val < sum(yearsToCalc$(ord(yearsToCalc) = 1), yearsToCalc.val))
11225      = sum((years_a,years_aa)$(sameas(years-1, years_aa)
11226                        and years_a.val > years_aa.val - transfer_techParam(transfer_techs,vintage,'lifeTime')
11227                        and years_a.val <= years.val - transfer_techParam(transfer_techs,vintage,'lifeTime')
11228                        and transfer_availTech(linksModel,years_a,transfer_techs,vintage)),
11229          transfer_linksBuild.l(linksModel,years_a,transfer_techs,vintage));
11230   
11231  transfer_linksDecom.l(linksModel,yearsToCalc,transfer_techs,vintage)
11232    $transfer_decomTech(linksModel,yearsToCalc,transfer_techs,vintage)
11233    = sum(years$
11234          (years.val < sum(yearsToCalc_a$(ord(yearsToCalc_a) = 1), yearsToCalc_a.val)
11235            and transfer_availTech(linksModel,years,transfer_techs,vintage)
11236            and years.val > sum(years_a$sameas(years_a, yearsToCalc-1), years_a.val) - transfer_techParam(transfer_techs,vintage,'lifeTime')
11237            and years.val <= yearsToCalc.val - transfer_techParam(transfer_techs,vintage,'lifeTime')),
11238        transfer_linksBuild.l(linksModel,years,transfer_techs,vintage))
11239      + sum(yearsToCalc_a$
11240          (yearsToCalc_a.val < sum(yearsToCalc_aa$(ord(yearsToCalc_aa) > 1), yearsToCalc_a.val)
11241            and transfer_availTech(linksModel,yearsToCalc_a,transfer_techs,vintage)
11242            and yearsToCalc_a.val > sum(years_a$sameas(years_a, yearsToCalc-1), years_a.val) - transfer_techParam(transfer_techs,vintage,'lifeTime')
11243            and yearsToCalc_a.val <= yearsToCalc.val - transfer_techParam(transfer_techs,vintage,'lifeTime')),
11244        transfer_linksBuild.l(linksModel,yearsToCalc_a,transfer_techs,vintage));
11245        ;
11246   
11247  transfer_linksDecom.lo(linksModel,yearsToCalc,transfer_techs,vintage)
11248      $(transfer_usedTech(linksModel,yearsToCalc,transfer_techs,vintage)
11249          and not transfer_techParam(transfer_techs,vintage,"freeDecom"))
11250      = transfer_linksDecom.l(linksModel,yearsToCalc,transfer_techs,vintage)
11251   
11252  * Calculate planned transfer links expansion
11253  parameter transfer_linksPlanned(linksModel,years,transfer_techs,vintage);
11254  transfer_linksPlanned(linksModel,years,transfer_techs,vintage) = 0;
11255  loop(years,
11256    transfer_linksPlanned(linksModel,years,transfer_techs,vintage)
11257      =
11258      transfer_linksPlanned(linksModel,years-1,transfer_techs,vintage)
11259          $transfer_usedTech(linksModel,years-1,transfer_techs,vintage)
11260      + transfer_linksBuild.l(linksModel,years,transfer_techs,vintage)
11261          $transfer_availTech(linksModel,years,transfer_techs,vintage)
11262      - transfer_linksDecom.l(linksModel,years,transfer_techs,vintage)
11263          $transfer_usedTech(linksModel,years,transfer_techs,vintage);
11264  );
11265   
11266  * Set initial state for planned units
11267  transfer_linksTotal.l(linksModel,years,transfer_techs,vintage)
11268    = transfer_linksPlanned(linksModel,years,transfer_techs,vintage)
11269   
11270  * Calculate if planned links expansion is bound by upper and lower limits
11271  set transfer_linkBoundsFixed(linksModel,years,transfer_techs);
11272  transfer_linkBoundsFixed(linksModel,years,transfer_techs)
11273    $(sum(vintage$transfer_usedTech(linksModel,years,transfer_techs,vintage),
11274          transfer_linksPlanned(linksModel,years,transfer_techs,vintage))
11275      = transfer_linksParam(linksModel,years,transfer_techs,"linksUpperLimit")
11276    and sum(vintage$transfer_usedTech(linksModel,years,transfer_techs,vintage),
11277          transfer_linksPlanned(linksModel,years,transfer_techs,vintage))
11278      = transfer_linksParam(linksModel,years,transfer_techs,"linksLowerLimit"))
11279    = yes;
11280   
11281  * Fix linksBuild, linksDecom, linksTotal if levels are predetermined by upper and lower limits
11282  transfer_linksBuild.fx(linksModel,years,transfer_techs,vintage)
11283    $(transfer_availTech(linksModel,years,transfer_techs,vintage)
11284      and transfer_linkBoundsFixed(linksModel,years,transfer_techs))
11285    = transfer_linksBuild.l(linksModel,years,transfer_techs,vintage);
11286  transfer_linksDecom.fx(linksModel,years,transfer_techs,vintage)
11287    $(transfer_usedTech(linksModel,years,transfer_techs,vintage)
11288      and transfer_linkBoundsFixed(linksModel,years,transfer_techs))
11289    = transfer_linksDecom.l(linksModel,years,transfer_techs,vintage);
11290  transfer_linksTotal.fx(linksModel,years,transfer_techs,vintage)
11291    $(transfer_usedTech(linksModel,years,transfer_techs,vintage)
11292      and transfer_linkBoundsFixed(linksModel,years,transfer_techs))
11293    = transfer_linksTotal.l(linksModel,years,transfer_techs,vintage);
11294   
11295  transfer_linksTotal_MIP.up(linksModel,years,transfer_techs,vintage)
11296      $(transfer_usedTech(linksModel,years,transfer_techs,vintage)
11297        and transfer_techParam(transfer_techs,vintage,"miplinks") = 1)
11298      = transfer_linksParam(linksModel,years,transfer_techs,"linksUpperLimit");
11299   
11300  * Add parameter for fixing capacities during myopic runs
11301  parameter transfer_linksDelta(linksModel,years,transfer_techs);
11302   
11303   
11304  * ==== declaration of equations ====
11305   
11306  equations
11307    Eq_transfer_linksBalance(linksModel,years,transfer_techs,vintage
11308      ) "Ensures the links balance over the planning period."
11309    Eq_transfer_linksFixedDecom(linksModel,years,transfer_techs,vintage
11310      ) "Restricts the fixed decommissioning of links over the planning period."
11311    Eq_transfer_linksFreeDecom(linksModel,years,transfer_techs,vintage
11312      ) "Restricts the free decommissioning of links over the planning period."
11313    Eq_transfer_linksUpperLimit(linksModel,years,transfer_techs
11314      ) "Upper bound for the total number of links."
11315    Eq_transfer_linksLowerLimit(linksModel,years,transfer_techs
11316      ) "Lower bound for the total number of links."
11317    Eq_transfer_linksTotalMIP(linksModel,years,transfer_techs,vintage
11318      ) "Fixes the total number of links to the corresponding integer variable."
11319   
11320    Eq_transfer_flowAlongUpperLimit(timeModel,linksModel,years,transfer_techs,vintage
11321      ) "Upper bound for the flow along the transfer links."
11322    Eq_transfer_flowAgainstUpperLimit(timeModel,linksModel,years,transfer_techs,vintage
11323      ) "Upper bound for the flow against the transfer links."
11324    Eq_transfer_dcopf_angleFlows(timeModel,linksModel,years,gridSegments
11325      )
11326    Eq_transfer_dcopf_cycleFlows(timeModel,years,cycles,gridSegments
11327      )
11328    ;
11329   
11330   
11331  * ==== equation definition ====
11332  * // ## Equations
11333  * // ### Transfer Links Balance
11334  * // Ensures that the transfer between nodes is balanced.
11335  * // {Eq_transfer_linksBalance}
11336  Eq_transfer_linksBalance(linksModelToCalc,yearsSel,transfer_techs,vintage)
11337      $((transfer_usedTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
11338            or sum(years$sameas(years,yearsSel), transfer_usedTech(linksModelToCalc,years-1,transfer_techs,vintage)))
11339          and not transfer_linkBoundsFixed(linksModelToCalc,yearsSel,transfer_techs))
11340      ..
11341      transfer_linksTotal(linksModelToCalc,yearsSel,transfer_techs,vintage)
11342      =e=
11343      sum(yearsToCalc$(ord(yearsToCalc) = 1 and sameas(yearsToCalc, yearsSel)),
11344        sum(years$sameas(years, yearsToCalc),
11345          transfer_linksTotal(linksModelToCalc,years-1,transfer_techs,vintage)
11346            $transfer_usedTech(linksModelToCalc,years-1,transfer_techs,vintage)))
11347      + sum((yearsToCalc)$(ord(yearsToCalc) > 1 and sameas(yearsToCalc, yearsSel)),
11348        transfer_linksTotal(linksModelToCalc,yearsToCalc-1,transfer_techs,vintage)
11349          $transfer_usedTech(linksModelToCalc,yearsToCalc-1,transfer_techs,vintage))
11350      + transfer_linksBuild(linksModelToCalc,yearsSel,transfer_techs,vintage)
11351          $transfer_availTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
11352      - transfer_linksDecom(linksModelToCalc,yearsSel,transfer_techs,vintage)
11353          $transfer_usedTech(linksModelToCalc,yearsSel,transfer_techs,vintage);
11354   
11355  * // ### Transfer Links Fixed Decommissioning
11356  * // Balances fixed link decommissioning.
11357  * // {Eq_transfer_linksFixedDecom}
11358  Eq_transfer_linksFixedDecom(linksModelToCalc,yearsSel,transfer_techs,vintage)
11359      $(transfer_decomTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
11360          and not transfer_techParam(transfer_techs,vintage,"freeDecom") = 1
11361          and not transfer_linkBoundsFixed(linksModelToCalc,yearsSel,transfer_techs))
11362      ..
11363      transfer_linksDecom(linksModelToCalc,yearsSel,transfer_techs,vintage)
11364      =e=
11365      sum(years$
11366          (transfer_availTech(linksModelToCalc,years,transfer_techs,vintage)
11367              and years.val > sum(yearsToCalc$sameas(yearsToCalc+1, yearsSel), yearsToCalc.val) - transfer_techParam(transfer_techs,vintage,'lifeTime')
11368              and years.val <= yearsSel.val - transfer_techParam(transfer_techs,vintage,'lifeTime')),
11369          transfer_linksBuild(linksModelToCalc,years,transfer_techs,vintage));
11370   
11371  * // ### Transfer Links Free Decommissioning
11372  * // Balances free link decommissioning.
11373  * // {Eq_transfer_linksFreeDecom}
11374  Eq_transfer_linksFreeDecom(linksModelToCalc,yearsSel,transfer_techs,vintage)
11375      $((transfer_decomTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
11376          or transfer_usedTech(linksModelToCalc,yearsSel,transfer_techs,vintage))
11377          and transfer_techParam(transfer_techs,vintage,"freeDecom") = 1)
11378      ..
11379      sum(years$
11380            ((transfer_decomTech(linksModelToCalc,years,transfer_techs,vintage)
11381              or transfer_usedTech(linksModelToCalc,years,transfer_techs,vintage))
11382              and years.val < sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)),
11383          transfer_linksDecom(linksModelToCalc,years,transfer_techs,vintage))
11384      + sum(yearsToCalc$
11385            ((transfer_decomTech(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
11386              or transfer_usedTech(linksModelToCalc,yearsToCalc,transfer_techs,vintage))
11387              and yearsToCalc.val >= sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
11388              and yearsToCalc.val <= yearsSel.val),
11389          transfer_linksDecom(linksModelToCalc,yearsToCalc,transfer_techs,vintage))
11390      =g=
11391      sum(years$
11392            (transfer_availTech(linksModelToCalc,years,transfer_techs,vintage)
11393              and years.val < sum(yearsToCalc$(ord(yearsToCalc)=1), yearsToCalc.val) - transfer_techParam(transfer_techs,vintage,'lifeTime')),
11394          transfer_linksBuild(linksModelToCalc,years,transfer_techs,vintage))
11395      + sum(yearsToCalc$
11396            (transfer_availTech(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
11397              and yearsToCalc.val >= sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
11398              and yearsToCalc.val <= yearsSel.val - transfer_techParam(transfer_techs,vintage,'lifeTime')),
11399          transfer_linksBuild(linksModelToCalc,yearsToCalc,transfer_techs,vintage));
11400   
11401  * // ### Transfer Links Lower Limit
11402  * // Ensures link capacity lower limits.
11403  * // {Eq_transfer_linksLowerLimit}
11404  Eq_transfer_linksLowerLimit(linksModelToCalc,yearsSel,transfer_techs)
11405      $(transfer_linksParam(linksModelToCalc,yearsSel,transfer_techs,'linksLowerLimit') > 0 )
11406      ..
11407      sum(vintage$transfer_usedTech(linksModelToCalc,yearsSel,transfer_techs,vintage),
11408          transfer_linksTotal(linksModelToCalc,yearsSel,transfer_techs,vintage))
11409      =g=
11410      transfer_linksParam(linksModelToCalc,yearsSel,transfer_techs,"linksLowerLimit");
11411   
11412  * // ### Transfer Links Upper Limit
11413  * // Ensures link capacity upper limits.
11414  * // {Eq_transfer_linksUpperLimit}
11415  Eq_transfer_linksUpperLimit(linksModelToCalc,yearsSel,transfer_techs)
11416      $(transfer_linksParam(linksModelToCalc,yearsSel,transfer_techs,'linksUpperLimit') >= 0
11417          and transfer_linksParam(linksModelToCalc,yearsSel,transfer_techs,'linksUpperLimit') < +inf )
11418      ..
11419      sum(vintage$transfer_usedTech(linksModelToCalc,yearsSel,transfer_techs,vintage),
11420          transfer_linksTotal(linksModelToCalc,yearsSel,transfer_techs,vintage))
11421      =l=
11422      transfer_linksParam(linksModelToCalc,yearsSel,transfer_techs,"linksUpperLimit");
11423   
11424  * // ### Transfer Links Total MIP
11425  * // Ensures number of MIP links.
11426  * // {Eq_transfer_linksTotalMIP}
11427  Eq_transfer_linksTotalMIP(linksModelToCalc,yearsSel,transfer_techs,vintage)
11428      $(transfer_usedTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
11429          and transfer_techParam(transfer_techs,vintage,"mipLinks"))
11430      ..
11431      transfer_linksTotal(linksModelToCalc,yearsSel,transfer_techs,vintage)
11432      =e=
11433      transfer_linksTotal_MIP(linksModelToCalc,yearsSel,transfer_techs,vintage);
11434   
11435  * // ### Transfer Links Flow Along Upper Limit
11436  * // Ensures links flow along upper limit.
11437  * // {Eq_transfer_flowAlongUpperLimit}
11438  Eq_transfer_flowAlongUpperLimit(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
11439      $transfer_usedTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
11440      ..
11441      transfer_flowAlong(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
11442      =l=
11443      transfer_flowProfile(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage,"along")
11444      * transfer_linksTotal(linksModelToCalc,yearsSel,transfer_techs,vintage)
11445      * transfer_techParam(transfer_techs,vintage,"flowUpperLimit")
11446      ;
11447   
11448  * // ### Transfer Links Flow Against Upper Limit
11449  * // Ensures links flow against upper limit.
11450  * // {Eq_transfer_flowAgainstUpperLimit}
11451  Eq_transfer_flowAgainstUpperLimit(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
11452      $transfer_usedTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
11453      ..
11454      transfer_flowAgainst(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
11455      =l=
11456      transfer_flowProfile(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage,"against")
11457      * transfer_linksTotal(linksModelToCalc,yearsSel,transfer_techs,vintage)
11458      * transfer_techParam(transfer_techs,vintage,"flowUpperLimit")
11459      ;
11460   
11461  set transfer_usedOpf(linksModel,years,gridSegments,transfer_techs,vintage);
11462  transfer_usedOpf(linksModel,yearsToCalc,gridSegments,transfer_techs,vintage)
11463      $(transfer_usedTech(linksModel,yearsToCalc,transfer_techs,vintage)
11464          and gridSegments_dcopf(linksModel,transfer_techs,gridSegments))
11465      = yes;
11466   
11467  set transfer_usedOpfLinks(linksModel,years,gridSegments);
11468  option transfer_usedOpfLinks < transfer_usedOpf;
11469   
11470  set transfer_usedOpfSegments(years,gridSegments);
11471  option transfer_usedOpfSegments < transfer_usedOpf;
11472   
11476  * // ### Transfer DC optimal flow angle flows
11477  * // Angle flows.
11478  * // {Eq_transfer_dcopf_cycleFlows}
11479  Eq_transfer_dcopf_angleFlows(timeModelSel,linksModelToCalc,yearsSel,gridSegments)
11480      $transfer_usedOpfLinks(linksModelToCalc,yearsSel,gridSegments)
11481      ..
11482      sum ((transfer_techs,vintage)
11483              $transfer_usedOpf(linksModelToCalc,yearsSel,gridSegments,transfer_techs,vintage),
11484          ( transfer_flowAlong(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
11485              - transfer_flowAgainst(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage) )
11486          * transfer_dcopf_Xtech(linksModelToCalc,yearsSel,transfer_techs,vintage,gridSegments) )
11487      =e=
11488      sum ( nodesModelSel,
11489          - transfer_incidenceModel(nodesModelSel,linksModelToCalc)
11490          * transfer_dcopf_voltageAngle(timeModelSel,nodesModelSel,yearsSel,gridSegments));
11494   
11495   
11496  * ==== model definition ====
11497   
11498  Model M_transfer
11499  /
11500    Eq_transfer_linksBalance
11501    Eq_transfer_linksFixedDecom
11502    Eq_transfer_linksFreeDecom
11503    Eq_transfer_linksLowerLimit
11504    Eq_transfer_linksUpperLimit
11505    Eq_transfer_linksTotalMIP
11506    Eq_transfer_flowAlongUpperLimit
11507    Eq_transfer_flowAgainstUpperLimit
11511    Eq_transfer_dcopf_angleFlows
11515  /;
INCLUDE    C:\Local\REMix\framework\remix\framework\model\source\core\sourcesink.gms
11517  * SPDX-FileCopyrightText: Copyright (c) 2023 German Aerospace Center (DLR)
11518  * SPDX-License-Identifier: BSD-3-Clause
11519   
11520  * // # core_sourcesink
11521  * // The equations in this file describe the sources and sinks in the model.
11522   
11523  * // ## Variables
11524  * // {special_table_sourcesink_variables}
12000   
12001  * // ## Aggregation of profiles
12002  * // Profiles are rescaled based on the annual sum.
12003   
12004  set sourcesink_usesProfileScaling(nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile);
12005  sourcesink_usesProfileScaling(nodesData,years,sourcesink_techs,commodity,"fixed")
12006      $sourcesink_configIn(nodesData,years,sourcesink_techs,commodity,"scaleFixProfileWithFixSum") = yes;
12007  sourcesink_usesProfileScaling(nodesData,years,sourcesink_techs,commodity,"lower")
12008      $sourcesink_configIn(nodesData,years,sourcesink_techs,commodity,"scaleLowProfileWithLowSum") = yes;
12009  sourcesink_usesProfileScaling(nodesData,years,sourcesink_techs,commodity,"upper")
12010      $sourcesink_configIn(nodesData,years,sourcesink_techs,commodity,"scaleUpProfileWithUpSum") = yes;
12011   
12012  parameter sourcesink_ProfileSum(nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile);
12013  sourcesink_ProfileSum(nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile)
12014      $sourcesink_usesProfileScaling(nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile)
12015      = sum(timeData, sourcesink_profileIn(timeData,nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile));
12016   
12017  parameter sourcesink_ProfileAbsSum(nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile);
12018  sourcesink_ProfileAbsSum(nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile)
12019      $sourcesink_usesProfileScaling(nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile)
12020      = sum(timeData, abs(sourcesink_profileIn(timeData,nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile)));
12021   
12022  set sourcesink_ProfileScaleError(nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile);
12023  sourcesink_ProfileScaleError(nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile)
12024      $(sourcesink_usesProfileScaling(nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile)
12025          and sourcesink_ProfileSum(nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile) = 0
12026          and sourcesink_ProfileAbsSum(nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile) > 0)
12027      = yes;
12028   
12029  abort$sum((nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile),
12030              sourcesink_ProfileScaleError(nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile)) "One or more profiles cannot be rescaled as their annual sum equals zero!"
12031   
12032  * calculate scaling factor for each type
12033  parameter sourcesink_scalingFactor(nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile);
12034  sourcesink_scalingFactor(nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile)
12035      $(sourcesink_ProfileSum(nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile)
12036          and sourcesink_usesProfileScaling(nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile))
12037      = sum(pc_sourcesink_annualSum$sameas(pc_sourcesink_profile,pc_sourcesink_annualSum),
12038          sourcesink_annualSumIn(nodesData,years,sourcesink_techs,commodity,pc_sourcesink_annualSum)
12039              / sourcesink_ProfileSum(nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile));
12040   
12041  * rescale profiles
12042  sourcesink_profileIn(timeData,nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile)
12043      $sourcesink_usesProfileScaling(nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile)
12044      = sourcesink_profileIn(timeData,nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile)
12045          * sourcesink_scalingFactor(nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile)
12046   
12047  * // ## Aggregation of profiles
12048  * // Profiles are aggregated based on the mapping from data nodes to model nodes.
12049   
12050  * ==== aggregation of profiles ====
12051  set sourcesink_usesProfileIn(nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile);
12052  option sourcesink_usesProfileIn < sourcesink_profileIn
12053   
12054  set sourcesink_usesProfile(nodesModel,years,sourcesink_techs,commodity,pc_sourcesink_profile);
12055  sourcesink_usesProfile(nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity,pc_sourcesink_profile)
12056      $sum(nodesData$(aggregateNodesModel(nodesData,nodesModelToCalc)
12057          and sourcesink_usesProfileIn(nodesData,yearsToCalc,sourcesink_techs,commodity,pc_sourcesink_profile)), 1)
12058      = yes;
12059   
12060  * aagregate time dimension
12061  parameter sourcesink_profileIn_aggTime(timeModel,nodesData,yearsToCalc,sourcesink_techs,commodity,pc_sourcesink_profile);
12062  sourcesink_profileIn_aggTime(timeModelToCalc,nodesData,yearsToCalc,sourcesink_techs,commodity,pc_sourcesink_profile)
12063    $sourcesink_usesProfileIn(nodesData,yearsToCalc,sourcesink_techs,commodity,pc_sourcesink_profile)
12064    = sum(timeData$timeMapping(timeData,timeModelToCalc),
12065            sourcesink_profileIn(timeData,nodesData,yearsToCalc,sourcesink_techs,commodity,pc_sourcesink_profile)
12066            / timeLength(timeModelToCalc));
12067  option clear = sourcesink_profileIn;
12068   
12069  * sum up absolute profiles
12070  parameter sourcesink_profile(timeModel,nodesModel,years,sourcesink_techs,commodity,pc_sourcesink_profile);
12071  sourcesink_profile(timeModelToCalc,nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity,pc_sourcesink_profile)
12072      $sourcesink_usesProfile(nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity,pc_sourcesink_profile)
12073      = sum(nodesData$aggregateNodesModel(nodesData,nodesModelToCalc),
12074              sourcesink_profileIn_aggTime(timeModelToCalc,nodesData,yearsToCalc,sourcesink_techs,commodity,pc_sourcesink_profile));
12075  option clear = sourcesink_profileIn_aggTime;
12076   
12077  set sourcesink_enabled(nodesModel,years,sourcesink_techs,commodity);
12078  option sourcesink_enabled < sourcesink_config;
12079   
12080   
12081  * ==== declaration of variables ====
12082  * // ## Bounding of variables
12083  * // Source-sink variables with either a lower, fixed, or upper profile are bounded to their respective profiles given by the input parameters.
12084   
12085  sourcesink_flow.lo(timeModelToCalc,nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity)
12086      $( sourcesink_enabled(nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity)
12087          and sourcesink_config(nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity,"usesLowerProfile") = 1
12088          and sourcesink_profile(timeModelToCalc,nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity,"lower") > -inf )
12089      = sourcesink_profile(timeModelToCalc,nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity,"lower");
12090   
12091  sourcesink_flow.up(timeModelToCalc,nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity)
12092      $( sourcesink_enabled(nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity)
12093          and sourcesink_config(nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity,"usesUpperProfile") = 1
12094          and sourcesink_profile(timeModelToCalc,nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity,"upper") < inf )
12095      = sourcesink_profile(timeModelToCalc,nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity,"upper");
12096   
12097  sourcesink_flow.fx(timeModelToCalc,nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity)
12098      $( sourcesink_enabled(nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity)
12099          and sourcesink_config(nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity,"usesFixedProfile") = 1 )
12100      = sourcesink_profile(timeModelToCalc,nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity,"fixed");
12101   
12102  option clear = sourcesink_profile;
12103   
12104   
12105  * ==== equation definition ====
12106  * // ## Equations
12107  equations
12108  Eq_sourcesink_useFixedSum(nodesModel,years,sourcesink_techs,commodity
12109      ) "Fixes the annual sum from sources / to sinks"
12110  Eq_sourcesink_useLowerSum(nodesModel,years,sourcesink_techs,commodity
12111      ) "Limits the lower sum from sources / to sinks"
12112  Eq_sourcesink_useUpperSum(nodesModel,years,sourcesink_techs,commodity
12113      ) "Limits the upper sum from sources / to sinks"
12114    ;
12115   
12116  * // ### Fixed annual sums for sources and sinks
12117  * // Ensures that the sources and sinks with annual sums given as fixed limits are balanced.
12118  * // {Eq_sourcesink_useFixedSum}
12119  Eq_sourcesink_useFixedSum(nodesModelSel,yearsSel,sourcesink_techs,commodity)
12120      $( sourcesink_enabled(nodesModelSel,yearsSel,sourcesink_techs,commodity)
12121          and sourcesink_config(nodesModelSel,yearsSel,sourcesink_techs,commodity,"usesFixedSum") = 1 )
12122      ..
12123      sum(timeModelSel,
12124          sourcesink_flow(timeModelSel,nodesModelSel,yearsSel,sourcesink_techs,commodity))
12125      =e=
12126      sourcesink_annualSum(nodesModelSel,yearsSel,sourcesink_techs,commodity,"fixed")
12127      ;
12128   
12129  * // ### Lower annual sums for sources and sinks
12130  * // Ensures that the sources and sinks with annual sums given as lower limits are balanced.
12131  * // {Eq_sourcesink_useLowerSum}
12132  Eq_sourcesink_useLowerSum(nodesModelSel,yearsSel,sourcesink_techs,commodity)
12133      $( sourcesink_enabled(nodesModelSel,yearsSel,sourcesink_techs,commodity)
12134          and sourcesink_config(nodesModelSel,yearsSel,sourcesink_techs,commodity,"usesLowerSum") = 1
12135          and sourcesink_annualSum(nodesModelSel,yearsSel,sourcesink_techs,commodity,"lower") > -inf )
12136      ..
12137      sum(timeModelSel,
12138          sourcesink_flow(timeModelSel,nodesModelSel,yearsSel,sourcesink_techs,commodity))
12139      =g=
12140      sourcesink_annualSum(nodesModelSel,yearsSel,sourcesink_techs,commodity,"lower")
12141      ;
12142   
12143  * // ### Upper annual sums for sources and sinks
12144  * // Ensures that the sources and sinks with annual sums given as upper limits are balanced.
12145  * // {Eq_sourcesink_useUpperSum}
12146  Eq_sourcesink_useUpperSum(nodesModelSel,yearsSel,sourcesink_techs,commodity)
12147      $( sourcesink_enabled(nodesModelSel,yearsSel,sourcesink_techs,commodity)
12148          and sourcesink_config(nodesModelSel,yearsSel,sourcesink_techs,commodity,"usesUpperSum") = 1
12149          and sourcesink_annualSum(nodesModelSel,yearsSel,sourcesink_techs,commodity,"upper") < inf )
12150      ..
12151      sum(timeModelSel,
12152          sourcesink_flow(timeModelSel,nodesModelSel,yearsSel,sourcesink_techs,commodity))
12153      =l=
12154      sourcesink_annualSum(nodesModelSel,yearsSel,sourcesink_techs,commodity,"upper")
12155      ;
12156   
12157   
12158  * ==== model definition ====
12159   
12160  Model M_sourcesink
12161  /
12162    Eq_sourcesink_useFixedSum
12163    Eq_sourcesink_useLowerSum
12164    Eq_sourcesink_useUpperSum
12165  /;
INCLUDE    C:\Local\REMix\framework\remix\framework\model\source\core\balance.gms
12167  * SPDX-FileCopyrightText: Copyright (c) 2023 German Aerospace Center (DLR)
12168  * SPDX-License-Identifier: BSD-3-Clause
12169   
12170  * // # balance
12171  * // The equations in this file describe the commodity balancing in the model.
12172   
12173  Equations
12174    Eq_balance_commodities(timeModel,nodesModel,years,commodity
12175      ) "Balance for each commodity used in each time step, region, and year";
12176   
12177   
12178  * ==== calculation of mappings ====
12179   
12180  set balance_techComm(techs,commodity);
12181  balance_techComm(converter_techs(techs),commodity)
12182      $sum((vintage,activity)$converter_coefficient(converter_techs,vintage,activity,commodity,"coefficient"), 1) = yes;
12183  balance_techComm(storage_techs(techs),commodity)
12184      $sum((vintage)$storage_sizeParam(storage_techs,vintage,commodity,"size"), 1) = yes;
12185  balance_techComm(transfer_techs(techs),commodity)
12186      $sum((vintage)$transfer_coefficient(transfer_techs,vintage,commodity,"coefficient"), 1) = yes;
12187  balance_techComm(sourcesink_techs(techs),commodity)
12188      $sum((nodesModelToCalc,yearsToCalc)$sourcesink_enabled(nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity), 1) = yes;
12189   
12190  set balance_usedConverter(nodesModel,years,commodity);
12191  set balance_usedStorage(nodesModel,years,commodity);
12192  set balance_usedTransfer(nodesModel,years,commodity);
12193  set balance_usedSourceSink(nodesModel,years,commodity);
12194  set balance_usedBalance(nodesModel,years,commodity);
12195   
12196  balance_usedConverter(nodesModel,years,commodity)
12197      = sum ((converter_techs,vintage,activity)
12198              $( converter_coefficient(converter_techs,vintage,activity,commodity,"coefficient") <> 0
12199                  and converter_usedTech(nodesModel,years,converter_techs,vintage) ), 1);
12200   
12201  balance_usedStorage(nodesModel,years,commodity)
12202      = sum ((storage_techs,vintage,activity)
12203              $(storage_sizeParam(storage_techs,vintage,commodity,"size") <> 0
12204                  and storage_usedTech(nodesModel,years,storage_techs,vintage) ), 1);
12205   
12206  balance_usedTransfer(nodesModel,years,commodity)
12207      = sum ((linksModel,transfer_techs,vintage)
12208              $(transfer_coefficient(transfer_techs,vintage,commodity,"coefficient") <> 0
12209                  and transfer_incidenceModel(nodesModel,linksModel) <> 0), 1);
12210   
12211  option balance_usedSourceSink < sourcesink_enabled;
12212   
12213  balance_usedBalance(nodesModel,years,commodity)
12214      $(balance_usedConverter(nodesModel,years,commodity)
12215          or balance_usedStorage(nodesModel,years,commodity)
12216          or balance_usedTransfer(nodesModel,years,commodity)
12217          or balance_usedSourceSink(nodesModel,years,commodity) )
12218      = yes;
12219   
12220   
12221  * ==== equation definition ====
12222   
12223  * // ### Balance commodities
12224  * // Balancing of commodities for all model regions, time steps, and years
12225  * // {Eq_balance_commodities}
12226  Eq_balance_commodities(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,commodity)
12227      $balance_usedBalance(nodesModelSel,yearsSel,commodity)
12228      ..
12229  * converter
12230      sum((converter_techs,vintage,activity)
12231              $( converter_coefficientProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity,commodity) <> 0
12232                  AND converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage) ),
12233          converter_activity(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity)
12234              * converter_coefficientProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity,commodity)
12235              * timeLength(timeModelSel)
12236          + converter_unitsUsingActivity_MIP(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity)
12237              * converter_coefficient(converter_techs,vintage,activity,commodity,"constant")
12238              * timeLength(timeModelSel))
12239   
12240  * storages
12241      + sum((storage_techs,vintage)
12242              $( storage_sizeParam(storage_techs,vintage,commodity,"size") <> 0
12243                  and storage_usedTech(nodesModelSel,yearsSel,storage_techs,vintage) ),
12244          storage_level(timeModelToCalc--1,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
12245          - storage_level(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
12247          - storage_losses(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
12248          * timeLength(timeModelSel)
12250          )
12251   
12252  * transfer
12253      + sum((linksModel,transfer_techs,vintage)
12254              $(transfer_usedTech(linksModel,yearsSel,transfer_techs,vintage)
12255                  and linksModelToCalc(linksModel)),
12256          (   transfer_flowAlong(timeModelSel,linksModel,yearsSel,transfer_techs,vintage)
12257                  $(transfer_incidenceModel(nodesModelSel,linksModel) > 0)
12258            + transfer_flowAgainst(timeModelSel,linksModel,yearsSel,transfer_techs,vintage)
12259                  $(transfer_incidenceModel(nodesModelSel,linksModel) < 0) )
12260          * transfer_coefficient(transfer_techs,vintage,commodity,"coefficient")
12261          * timeLength(timeModelSel))
12262   
12263      - sum((linksModel,transfer_techs,vintage)
12264              $(transfer_usedTech(linksModel,yearsSel,transfer_techs,vintage)
12265                  and linksModelToCalc(linksModel)),
12266          (   transfer_flowAlong(timeModelSel,linksModel,yearsSel,transfer_techs,vintage)
12267                  $(transfer_incidenceModel(nodesModelSel,linksModel) < 0)
12268            + transfer_flowAgainst(timeModelSel,linksModel,yearsSel,transfer_techs,vintage)
12269                  $(transfer_incidenceModel(nodesModelSel,linksModel) > 0) )
12270          * transfer_coefficient(transfer_techs,vintage,commodity,"coefficient")
12271          * timeLength(timeModelSel))
12272   
12273      + 0.5 * sum((linksModel,transfer_techs,vintage)
12274              $(transfer_usedTech(linksModel,yearsSel,transfer_techs,vintage)
12275                  AND linksModelToCalc(linksModel)),
12276          (   transfer_flowAlong(timeModelSel,linksModel,yearsSel,transfer_techs,vintage)
12277                  $(transfer_incidenceModel(nodesModelSel,linksModel) <> 0)
12278            + transfer_flowAgainst(timeModelSel,linksModel,yearsSel,transfer_techs,vintage)
12279                  $(transfer_incidenceModel(nodesModelSel,linksModel) <> 0) )
12280          * timeLength(timeModelSel)
12281          * ( transfer_coefPerFlow(transfer_techs,vintage,commodity,"coefPerFlow")
12282              + sum(link_types,
12283                  transfer_coefPerLength(transfer_techs,vintage,commodity,link_types,"coefPerLength")
12284                  * transfer_lengthParam(linksModel,link_types,"length"))))
12285   
12286  * sourcesink
12287      + sum((sourcesink_techs)
12288              $sourcesink_enabled(nodesModelSel,yearsSel,sourcesink_techs,commodity),
12289          sourcesink_flow(timeModelSel,nodesModelSel,yearsSel,sourcesink_techs,commodity)
12290          * timeLength(timeModelSel))
12291      =e=
12292      0;
12293   
12294   
12295  * ==== model definition ====
12296   
12297  Model M_balance
12298  /
12299    Eq_balance_commodities
12300  /;
12301   
INCLUDE    C:\Local\REMix\framework\remix\framework\model\source\accounting\equations.gms
12303  * SPDX-FileCopyrightText: Copyright (c) 2023 German Aerospace Center (DLR)
12304  * SPDX-License-Identifier: BSD-3-Clause
12305   
12306  * // # accounting_equations
12307   
12308  * ==== declaration of variables ====
12309   
12310  variables
12311  accounting_indicator(accNodesModel,accYears,indicator)
12312  accounting_indicator_links(linksModel,years,indicator)
12313  accounting_objective
12314    ;
12315   
12316   
12317  * ==== definition of variables ====
12318   
12319  * set the variable levels to be fixed for years before the optimization years
12320  accounting_indicator.l(accNodesModel,accYears,indicator)
12321      $activeIndicators(accNodesModel,accYears,indicator)
12322      = 0;
12323   
12324  accounting_indicator.lo(accNodesModel,accYears,indicator)
12325      $(accounting_indicatorBounds(accNodesModel,accYears,indicator,"useLower") <> 0 )
12326      = accounting_indicatorBounds(accNodesModel,accYears,indicator,"lowerValue");
12327   
12328  accounting_indicator.up(accNodesModel,accYears,indicator)
12329      $(accounting_indicatorBounds(accNodesModel,accYears,indicator,"useUpper") <> 0 )
12330      = accounting_indicatorBounds(accNodesModel,accYears,indicator,"upperValue");
12331   
12332  accounting_indicator.fx(accNodesModel,accYears,indicator)
12333      $(accounting_indicatorBounds(accNodesModel,accYears,indicator,"useFixed") <> 0 )
12334      = accounting_indicatorBounds(accNodesModel,accYears,indicator,"fixedValue");
12335   
12336   
12337  accounting_indicator_links.lo(linksModelToCalc,yearsToCalc,indicator)
12338      $(accounting_indicatorBounds_links(linksModelToCalc,yearsToCalc,indicator,"useLower") <> 0 )
12339      = accounting_indicatorBounds_links(linksModelToCalc,yearsToCalc,indicator,"lowerValue");
12340   
12341  accounting_indicator_links.up(linksModelToCalc,yearsToCalc,indicator)
12342      $(accounting_indicatorBounds_links(linksModelToCalc,yearsToCalc,indicator,"useUpper") <> 0 )
12343      = accounting_indicatorBounds_links(linksModelToCalc,yearsToCalc,indicator,"upperValue");
12344   
12345  accounting_indicator_links.fx(linksModelToCalc,yearsToCalc,indicator)
12346      $(accounting_indicatorBounds_links(linksModelToCalc,yearsToCalc,indicator,"useFixed") <> 0 )
12347      = accounting_indicatorBounds_links(linksModelToCalc,yearsToCalc,indicator,"fixedValue");
12348   
12349   
12350  * ==== declaration of equations ====
12351   
12352  equations
12353  Eq_accounting_indicatorCalc(accNodesModel,accYears,indicator
12354      ) "Calculates the level of an indicator per accounting region"
12355  Eq_accounting_indicatorCalc_links(linksModel,years,indicator
12356      ) "Calculates the level of an indicator per model link"
12357  Eq_accounting_objective "Calculates the objective value based on the specified indicator"
12358    ;
12359   
12360   
12361  * ==== equations definition ====
12362  * // ## Equations
12363  * // ### Accounting Indicator Calculation
12364  * // Calculates the indicators for each model node for converters, sources and sinks, transfer, storage and variable indicators.
12365  * // {Eq_accounting_indicatorCalc}
12366  Eq_accounting_indicatorCalc(accNodesModel,accYearsSel(accYears),indicator)
12367      $activeIndicators(accNodesModel,accYears,indicator)
12368      ..
12369      accounting_indicator(accNodesModel,accYears,indicator)
12370      =e=
12371   
12372  * == variable indicators ==
12373      sum((accNodesModel_a,accYears_a,indicator_a)
12374          $(compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
12375              and variableIndicators(accNodesModel_a,accYears_a,indicator_a)),
12376          compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
12377          * accounting_indicator(accNodesModel_a,accYears_a,indicator_a))
12378   
12379  * == converters ==
12380      + sum ((accNodesModel_a,nodesModelSel,accYears_a,yearsSel,indicator_a)
12381              $( compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
12382                  and sameas(nodesModelSel,accNodesModel_a) and sameas(yearsSel,accYears_a)),
12383          compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
12384          *
12385          ( sum ((converter_techs,vintage)
12386                      $(converter_availTech(nodesModelSel,yearsSel,converter_techs,vintage)
12387                          and accounting_converterUnits(indicator_a,nodesModelSel,converter_techs,vintage,"useAnnuity") = 0),
12388              converter_unitsBuild(nodesModelSel,yearsSel,converter_techs,vintage)
12389              * accounting_converterUnits(indicator_a,nodesModelSel,converter_techs,vintage,"perUnitBuild"))
12390   
12391          + sum ((years_a,converter_techs,vintage)
12392                      $(converter_availTech(nodesModelSel,years_a,converter_techs,vintage)
12393                          and years_a.val < sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
12394                          and accounting_converterUnits(indicator_a,nodesModelSel,converter_techs,vintage,"useAnnuity") = 1
12395                          and years_a.val + accounting_converterUnits(indicator_a,nodesModelSel,converter_techs,vintage,"amorTime") > yearsSel.val
12396                          and years_a.val <= yearsSel.val ),
12397              converter_unitsBuild(nodesModelSel,years_a,converter_techs,vintage)
12398              * accounting_converterUnits(indicator_a,nodesModelSel,converter_techs,vintage,"perUnitBuild")
12399              * accounting_annuityFactor_converter(indicator_a,nodesModelSel,converter_techs,vintage) )
12400   
12401          + sum ((yearsToCalc,converter_techs,vintage)
12402                      $(converter_availTech(nodesModelSel,yearsToCalc,converter_techs,vintage)
12403                          and yearsToCalc.val >= sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
12404                          and accounting_converterUnits(indicator_a,nodesModelSel,converter_techs,vintage,"useAnnuity") = 1
12405                          and yearsToCalc.val + accounting_converterUnits(indicator_a,nodesModelSel,converter_techs,vintage,"amorTime") > yearsSel.val
12406                          and yearsToCalc.val <= yearsSel.val ),
12407              converter_unitsBuild(nodesModelSel,yearsToCalc,converter_techs,vintage)
12408              * accounting_converterUnits(indicator_a,nodesModelSel,converter_techs,vintage,"perUnitBuild")
12409              * accounting_annuityFactor_converter(indicator_a,nodesModelSel,converter_techs,vintage) )
12410   
12411          + sum ((converter_techs,vintage)
12412                      $converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage),
12413              converter_unitsDecom(nodesModelSel,yearsSel,converter_techs,vintage)
12414              * accounting_converterUnits(indicator_a,nodesModelSel,converter_techs,vintage,"perUnitDecom")
12415   
12416              + converter_unitsTotal(nodesModelSel,yearsSel,converter_techs,vintage)
12417              * accounting_converterUnits(indicator_a,nodesModelSel,converter_techs,vintage,"perUnitTotal") )
12418   
12419          + sum ((timeModelSel,converter_techs,vintage,activity)
12420                      $converter_usedTechAct(nodesModelSel,yearsSel,converter_techs,vintage,activity),
12421              converter_activity(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity)
12422              * timeLength(timeModelSel)
12423              * accounting_converterActivity(indicator_a,nodesModelSel,converter_techs,vintage,activity,"perActivity") )
12424   
12425          + sum ((timeModelSel,converter_techs,vintage)
12426                      $converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage),
12427              converter_unitStartups(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
12428              * accounting_converterStartup(indicator_a,nodesModelSel,converter_techs,vintage,"perStartup") )
12429   
12430          + sum ((timeModelSel,converter_techs,vintage)
12431                      $converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage),
12432              converter_rampPos(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
12433              * (accounting_converterStartup(indicator_a,nodesModelSel,converter_techs,vintage,"perRamp")
12434                 + accounting_converterStartup(indicator_a,nodesModelSel,converter_techs,vintage,"perRampPos"))
12435   
12436              + converter_rampNeg(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
12437              * (accounting_converterStartup(indicator_a,nodesModelSel,converter_techs,vintage,"perRamp")
12438                 + accounting_converterStartup(indicator_a,nodesModelSel,converter_techs,vintage,"perRampNeg")))
12439          )
12440      )
12441   
12442  * == storage ==
12443      + sum ((accNodesModel_a,nodesModelSel,accYears_a,yearsSel,indicator_a)
12444              $( compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
12445                  and sameas(nodesModelSel,accNodesModel_a) and sameas(yearsSel,accYears_a)),
12446          compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
12447          *
12448          ( sum ((storage_techs,vintage)
12449                      $(storage_availTech(nodesModelSel,yearsSel,storage_techs,vintage)
12450                          and accounting_storageUnits(indicator_a,nodesModelSel,storage_techs,vintage,"useAnnuity") = 0),
12451              storage_unitsBuild(nodesModelSel,yearsSel,storage_techs,vintage)
12452              * accounting_storageUnits(indicator_a,nodesModelSel,storage_techs,vintage,"perUnitBuild") )
12453   
12454          + sum ((years_a,storage_techs,vintage)
12455                      $(storage_availTech(nodesModelSel,years_a,storage_techs,vintage)
12456                          and years_a.val < sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
12457                          and accounting_storageUnits(indicator_a,nodesModelSel,storage_techs,vintage,"useAnnuity") = 1
12458                          and years_a.val + accounting_storageUnits(indicator_a,nodesModelSel,storage_techs,vintage,"amorTime") > yearsSel.val
12459                          and years_a.val <= yearsSel.val ),
12460              storage_unitsBuild(nodesModelSel,years_a,storage_techs,vintage)
12461              * accounting_storageUnits(indicator_a,nodesModelSel,storage_techs,vintage,"perUnitBuild")
12462              * accounting_annuityFactor_storage(indicator_a,nodesModelSel,storage_techs,vintage) )
12463   
12464          + sum ((yearsToCalc,storage_techs,vintage)
12465                      $(storage_availTech(nodesModelSel,yearsToCalc,storage_techs,vintage)
12466                          and yearsToCalc.val >= sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
12467                          and accounting_storageUnits(indicator_a,nodesModelSel,storage_techs,vintage,"useAnnuity") = 1
12468                          and yearsToCalc.val + accounting_storageUnits(indicator_a,nodesModelSel,storage_techs,vintage,"amorTime") > yearsSel.val
12469                          and yearsToCalc.val <= yearsSel.val ),
12470              storage_unitsBuild(nodesModelSel,yearsToCalc,storage_techs,vintage)
12471              * accounting_storageUnits(indicator_a,nodesModelSel,storage_techs,vintage,"perUnitBuild")
12472              * accounting_annuityFactor_storage(indicator_a,nodesModelSel,storage_techs,vintage) )
12473   
12474          + sum ((storage_techs,vintage)
12475                      $storage_usedTech(nodesModelSel,yearsSel,storage_techs,vintage),
12476              storage_unitsDecom(nodesModelSel,yearsSel,storage_techs,vintage)
12477              * accounting_storageUnits(indicator_a,nodesModelSel,storage_techs,vintage,"perUnitDecom")
12478   
12479              + storage_unitsTotal(nodesModelSel,yearsSel,storage_techs,vintage)
12480              * accounting_storageUnits(indicator_a,nodesModelSel,storage_techs,vintage,"perUnitTotal") )
12481          )
12482      )
12483   
12484   
12485  * == transfer ==
12486      + sum ((accNodesModel_a,nodesModelSel,accYears_a,yearsSel,indicator_a)
12487              $( compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
12488                  and sameas(nodesModelSel,accNodesModel_a) and sameas(yearsSel,accYears_a)),
12489          compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
12490          *
12491          ( sum ((linksModelToCalc,transfer_techs,vintage)
12492                      $(transfer_availTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
12493                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0
12494                          and accounting_transferLinks(indicator_a,linksModelToCalc,transfer_techs,vintage,"useAnnuity") = 0),
12495              0.5
12496              * transfer_linksBuild(linksModelToCalc,yearsSel,transfer_techs,vintage)
12497              * accounting_transferLinks(indicator_a,linksModelToCalc,transfer_techs,vintage,"perLinkBuild") )
12498   
12499          + sum ((linksModelToCalc,years_a,transfer_techs,vintage)
12500                      $(transfer_availTech(linksModelToCalc,years_a,transfer_techs,vintage)
12501                          and years_a.val < sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
12502                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0
12503                          and accounting_transferLinks(indicator_a,linksModelToCalc,transfer_techs,vintage,"useAnnuity") = 1
12504                          and years_a.val + accounting_transferLinks(indicator_a,linksModelToCalc,transfer_techs,vintage,"amorTime") > yearsSel.val
12505                          and years_a.val <= yearsSel.val ),
12506              0.5
12507              * transfer_linksBuild(linksModelToCalc,years_a,transfer_techs,vintage)
12508              * accounting_transferLinks(indicator_a,linksModelToCalc,transfer_techs,vintage,"perLinkBuild")
12509              * accounting_annuityFactor_transferLink(indicator_a,linksModelToCalc,transfer_techs,vintage) )
12510   
12511          + sum ((linksModelToCalc,yearsToCalc,transfer_techs,vintage)
12512                      $(transfer_availTech(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
12513                          and yearsToCalc.val >= sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
12514                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0
12515                          and accounting_transferLinks(indicator_a,linksModelToCalc,transfer_techs,vintage,"useAnnuity") = 1
12516                          and yearsToCalc.val + accounting_transferLinks(indicator_a,linksModelToCalc,transfer_techs,vintage,"amorTime") > yearsSel.val
12517                          and yearsToCalc.val <= yearsSel.val ),
12518              0.5
12519              * transfer_linksBuild(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
12520              * accounting_transferLinks(indicator_a,linksModelToCalc,transfer_techs,vintage,"perLinkBuild")
12521              * accounting_annuityFactor_transferLink(indicator_a,linksModelToCalc,transfer_techs,vintage) )
12522   
12523          + sum ((linksModelToCalc,transfer_techs,vintage,link_types)
12524                      $(transfer_availTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
12525                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0
12526                          and accounting_transferPerLength(indicator_a,linksModelToCalc,transfer_techs,vintage,link_types,"useAnnuity") = 0 ),
12527              0.5
12528              * transfer_linksBuild(linksModelToCalc,yearsSel,transfer_techs,vintage)
12529              * transfer_lengthParam(linksModelToCalc,link_types,"length")
12530              * accounting_transferPerLength(indicator_a,linksModelToCalc,transfer_techs,vintage,link_types,"perLengthBuild") )
12531   
12532          + sum ((linksModelToCalc,years_a,transfer_techs,vintage,link_types)
12533                      $(transfer_availTech(linksModelToCalc,years_a,transfer_techs,vintage)
12534                          and years_a.val < sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
12535                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0
12536                          and accounting_transferPerLength(indicator_a,linksModelToCalc,transfer_techs,vintage,link_types,"useAnnuity") = 1
12537                          and years_a.val + accounting_transferPerLength(indicator_a,linksModelToCalc,transfer_techs,vintage,link_types,"amorTime") > yearsSel.val
12538                          and years_a.val <= yearsSel.val ),
12539              0.5
12540              * transfer_linksBuild(linksModelToCalc,years_a,transfer_techs,vintage)
12541              * transfer_lengthParam(linksModelToCalc,link_types,"length")
12542              * accounting_transferPerLength(indicator_a,linksModelToCalc,transfer_techs,vintage,link_types,"perLengthBuild")
12543              * accounting_annuityFactor_transferDistance(indicator_a,linksModelToCalc,transfer_techs,vintage,link_types) )
12544   
12545          + sum ((linksModelToCalc,yearsToCalc,transfer_techs,vintage,link_types)
12546                      $(transfer_availTech(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
12547                          and yearsToCalc.val >= sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
12548                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0
12549                          and accounting_transferPerLength(indicator_a,linksModelToCalc,transfer_techs,vintage,link_types,"useAnnuity") = 1
12550                          and yearsToCalc.val + accounting_transferPerLength(indicator_a,linksModelToCalc,transfer_techs,vintage,link_types,"amorTime") > yearsSel.val
12551                          and yearsToCalc.val <= yearsSel.val ),
12552              0.5
12553              * transfer_linksBuild(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
12554              * transfer_lengthParam(linksModelToCalc,link_types,"length")
12555              * accounting_transferPerLength(indicator_a,linksModelToCalc,transfer_techs,vintage,link_types,"perLengthBuild")
12556              * accounting_annuityFactor_transferDistance(indicator_a,linksModelToCalc,transfer_techs,vintage,link_types) )
12557   
12558          + sum ((linksModelToCalc,transfer_techs,vintage)
12559                      $(transfer_usedTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
12560                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0 ),
12561              0.5
12562              * transfer_linksDecom(linksModelToCalc,yearsSel,transfer_techs,vintage)
12563              * accounting_transferLinks(indicator_a,linksModelToCalc,transfer_techs,vintage,"perLinkDecom")
12564   
12565              + 0.5
12566              * transfer_linksTotal(linksModelToCalc,yearsSel,transfer_techs,vintage)
12567              * accounting_transferLinks(indicator_a,linksModelToCalc,transfer_techs,vintage,"perLinkTotal")
12568   
12569              + 0.5
12570              * sum (link_types,
12571                  transfer_linksDecom(linksModelToCalc,yearsSel,transfer_techs,vintage)
12572                  * transfer_lengthParam(linksModelToCalc,link_types,"length")
12573                  * accounting_transferPerLength(indicator_a,linksModelToCalc,transfer_techs,vintage,link_types,"perLengthDecom")
12574   
12575                  + transfer_linksTotal(linksModelToCalc,yearsSel,transfer_techs,vintage)
12576                  * transfer_lengthParam(linksModelToCalc,link_types,"length")
12577                  * accounting_transferPerLength(indicator_a,linksModelToCalc,transfer_techs,vintage,link_types,"perLengthTotal"))
12578   
12579              + 0.5
12580              * sum (timeModelSel,
12581                  transfer_flowAlong(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
12582                  * timeLength(timeModelSel)
12583                  * ( accounting_transferLinks(indicator_a,linksModelToCalc,transfer_techs,vintage,"perFlow")
12584                      + accounting_transferLinks(indicator_a,linksModelToCalc,transfer_techs,vintage,"perFlowAlong"))
12585   
12586                  + transfer_flowAgainst(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
12587                  * timeLength(timeModelSel)
12588                  * ( accounting_transferLinks(indicator_a,linksModelToCalc,transfer_techs,vintage,"perFlow")
12589                      + accounting_transferLinks(indicator_a,linksModelToCalc,transfer_techs,vintage,"perFlowAgainst")))
12590   
12591              + 0.5
12592              * sum ((timeModelSel, link_types),
12593                  transfer_flowAlong(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
12594                  * timeLength(timeModelSel)
12595                  * transfer_lengthParam(linksModelToCalc,link_types,"length")
12596                  * (accounting_transferPerLength(indicator_a,linksModelToCalc,transfer_techs,vintage,link_types,"perFlow")
12597                      + accounting_transferPerLength(indicator_a,linksModelToCalc,transfer_techs,vintage,link_types,"perFlowAlong"))
12598   
12599                  + transfer_flowAgainst(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
12600                  * timeLength(timeModelSel)
12601                  * transfer_lengthParam(linksModelToCalc,link_types,"length")
12602                  * (accounting_transferPerLength(indicator_a,linksModelToCalc,transfer_techs,vintage,link_types,"perFlow")
12603                      + accounting_transferPerLength(indicator_a,linksModelToCalc,transfer_techs,vintage,link_types,"perFlowAgainst")))
12604              )
12605          )
12606      )
12607   
12608   
12609  * == sources / sinks ==
12610      + sum ((accNodesModel_a,nodesModelSel,accYears_a,yearsSel,indicator_a)
12611              $( compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
12612                  and sameas(nodesModelSel,accNodesModel_a) and sameas(yearsSel,accYears_a)),
12613          compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
12614          *
12615          sum ((timeModelSel,sourcesink_techs,commodity)
12616                  $sourcesink_enabled(nodesModelSel,yearsSel,sourcesink_techs,commodity),
12617              sourcesink_flow(timeModelSel,nodesModelSel,yearsSel,sourcesink_techs,commodity)
12618              * timeLength(timeModelSel)
12619              * accounting_sourcesinkFlow(indicator_a,nodesModelSel,yearsSel,sourcesink_techs,commodity,"perFlow") )
12620      );
12621   
12622  * // ### Accounting Indicator Calculation Links
12623  * // Calculates the indicators for each transfer for converters, sources and sinks, transfer, storage and variable indicators.
12624  * // {Eq_accounting_indicatorCalc_links}
12625  Eq_accounting_indicatorCalc_links(linksModelToCalc,yearsSel,indicator)
12626      $activeIndicators_links(linksModelToCalc,yearsSel,indicator)
12627      ..
12628      accounting_indicator_links(linksModelToCalc,yearsSel,indicator)
12629      =e=
12630      sum ((transfer_techs,vintage)
12631                  $(transfer_availTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
12632                      and accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"useAnnuity") = 0),
12633          transfer_linksBuild(linksModelToCalc,yearsSel,transfer_techs,vintage)
12634          * accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"perLinkBuild") )
12635   
12636      + sum ((years_a,transfer_techs,vintage)
12637                  $(transfer_availTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
12638                      and accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"useAnnuity") = 1
12639                      and years_a.val + accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"amorTime") > yearsSel.val
12640                      and years_a.val <= yearsSel.val ),
12641          transfer_linksBuild(linksModelToCalc,years_a,transfer_techs,vintage)
12642          * accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"perLinkBuild")
12643          * accounting_annuityFactor_transferLink(indicator,linksModelToCalc,transfer_techs,vintage) )
12644   
12645      + sum ((transfer_techs,vintage,link_types)
12646                  $(transfer_availTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
12647                      and accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"useAnnuity") = 0 ),
12648          transfer_linksBuild(linksModelToCalc,yearsSel,transfer_techs,vintage)
12649          * transfer_lengthParam(linksModelToCalc,link_types,"length")
12650          * accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"perLengthBuild") )
12651   
12652      + sum ((years_a,transfer_techs,vintage,link_types)
12653                  $(transfer_availTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
12654                      and accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"useAnnuity") = 1
12655                      and years_a.val + accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"amorTime") > yearsSel.val
12656                      and years_a.val <= yearsSel.val ),
12657          transfer_linksBuild(linksModelToCalc,years_a,transfer_techs,vintage)
12658          * transfer_lengthParam(linksModelToCalc,link_types,"length")
12659          * accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"perLengthBuild")
12660          * accounting_annuityFactor_transferDistance(indicator,linksModelToCalc,transfer_techs,vintage,link_types) )
12661   
12662      + sum ((transfer_techs,vintage)
12663                  $(transfer_usedTech(linksModelToCalc,yearsSel,transfer_techs,vintage)),
12664          transfer_linksDecom(linksModelToCalc,yearsSel,transfer_techs,vintage)
12665          * accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"perLinkDecom")
12666   
12667          + transfer_linksTotal(linksModelToCalc,yearsSel,transfer_techs,vintage)
12668          * accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"perLinkTotal")
12669   
12670          + sum (link_types,
12671              transfer_linksDecom(linksModelToCalc,yearsSel,transfer_techs,vintage)
12672              * transfer_lengthParam(linksModelToCalc,link_types,"length")
12673              * accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"perLengthDecom")
12674   
12675              + transfer_linksTotal(linksModelToCalc,yearsSel,transfer_techs,vintage)
12676              * transfer_lengthParam(linksModelToCalc,link_types,"length")
12677              * accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"perLengthTotal"))
12678   
12679          + sum (timeModelSel,
12680              transfer_flowAlong(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
12681              * timeLength(timeModelSel)
12682              * ( accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"perFlow")
12683                  + accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"perFlowAlong"))
12684   
12685              + transfer_flowAgainst(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
12686              * timeLength(timeModelSel)
12687              * ( accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"perFlow")
12688                  + accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"perFlowAgainst")))
12689   
12690          + sum ((timeModelSel, link_types),
12691              transfer_flowAlong(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
12692              * timeLength(timeModelSel)
12693              * transfer_lengthParam(linksModelToCalc,link_types,"length")
12694              * (accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"perFlow")
12695                  + accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"perFlowAlong"))
12696   
12697              + transfer_flowAgainst(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
12698              * timeLength(timeModelSel)
12699              * transfer_lengthParam(linksModelToCalc,link_types,"length")
12700              * (accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"perFlow")
12701                  + accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"perFlowAgainst")))
12702          );
12703   
12704  * // ### Accounting Objective
12705  * // Calculates the indicators for the objective.
12706  * // {Eq_accounting_objective}
12707  Eq_accounting_objective
12708      ..
12709      accounting_objective
12710      =e=
12711      sum ((accNodesModel,accYears,indicator)
12712              $(accounting_indicatorBounds(accNodesModel,accYears,indicator,"obj") <> 0 ),
12713          accounting_indicator(accNodesModel,accYears,indicator) )
12714   
12715   
12716  * ==== model definition ====
12717   
12718  Model M_accounting
12719  /
12720  Eq_accounting_indicatorCalc_links
12721  Eq_accounting_indicatorCalc
12722  Eq_accounting_objective
12723  /;
INCLUDE    C:\Local\REMix\framework\remix\framework\model\source\optiframe.gms
12725  * SPDX-FileCopyrightText: Copyright (c) 2023 German Aerospace Center (DLR)
12726  * SPDX-License-Identifier: BSD-3-Clause
12727   
12728  * ==== optimization frames ====
12730   
12731  * mapping from optimization frame to years
12733  set optiframe / of1 * of2 /;
12734  set optiframeToCalc(optiframe);
12735   
12737  set map_optiframe(optiframe,years) / of1 . #yearsToCalc /;
12739   
12741   
12742  option optiframeToCalc < map_optiframe;
12743   
12744  Model remix /
12745    M_converter
12746    M_storage
12747    M_transfer
12748    M_sourcesink
12749    M_balance
12750    M_accounting
12751  /;
12752   
12753   
12754  * ==== include methods  ====
12755   
12756  * check if the method is valid
12762   
12763   
12764  * if method is pips write the checkanno tool
INCLUDE    C:\Local\REMix\framework\remix\framework\model\source\methods\checkanno.gms
12766  * SPDX-FileCopyrightText: Copyright (c) 2023 German Aerospace Center (DLR)
12767  * SPDX-License-Identifier: BSD-3-Clause
12768   
12771   
12774   
12775  * if method is pips generate the annotated gdx file
INCLUDE    C:\Local\REMix\framework\remix\framework\model\source\methods\pips.gms
12777  * SPDX-FileCopyrightText: Copyright (c) 2023 German Aerospace Center (DLR)
12778  * SPDX-License-Identifier: BSD-3-Clause
12779   
12783   
12784  * if method is solve run the model with commercial solvers
INCLUDE    C:\Local\REMix\framework\remix\framework\model\source\methods\solve.gms
12786  * SPDX-FileCopyrightText: Copyright (c) 2023 German Aerospace Center (DLR)
12787  * SPDX-License-Identifier: BSD-3-Clause
12788   
12791   
12793   
12794  * ==== global options ====
12801   
12802  * ==== general solver options ====
12812   
12813  * ==== cplex options ====
12822   
12823  * ==== copt options ====
12827   
12828  * ==== debug options ====
12831   
12832   
12833  * ==== setup optimization ====
12834  if ((sum(nodesModelToCalc, 1)>40 or sum(timeModelToCalc, 1)>50) and not 0,
12835     option limRow=0, limCol=0, solPrint=off;
12836  else
12837     option limRow=100000, limCol=100000, solPrint=on;
12838  );
12839   
12841   
12842  option mip = cplex;
12843  option reslim = 604800;
12844  option optcr = 1e-3;
12845  remix.threads=4;
12846  remix.optFile = 1;
12847  remix.solveLink = 0;
12848  remix.holdFixed = 1;
12849   
12850   
12851  * ==== configure optionfiles ====
12852   
12854  file opt / "cplex.opt" /;
12855  put opt;
12857  put "rerun no" /;
12858  put "iis 1" /;
12859  put "lpmethod 4" /;
12861  put "barorder 0" /;
12862  put "preind 1" /;
12863  put "scaind 0" /;
12864  put "predual -1" /;
12865  put "baralg 0" /;
12866  put "barstartalg 1" /;
12867  put "barepcomp 1e-6" /;
12868  put "solutiontype 2" /;
12869  put "startalg 4" /;
12870  put "epgap 1e-3" /;
12871  put "quality 1" /;
12872  put "barcolnz 0" /;
12873  put "threads 4" /;
12874  put "parallelmode 1" /;
12877  putclose;
12878   
12880   
12881   
12882  * ==== solve the problem ====
12883   
12884  loop ( optiframeToCalc,
12885      yearsSel(years) = no;
12886      yearsSel(years)$map_optiframe(optiframeToCalc,years) = yes;
12887      yearsToFix(years) = no;
12888      yearsToFix(years)$(years.val < smin(years_a$yearsSel(years_a), years_a.val)) = yes;
12889      accYearsSel(accYears) = no;
12890      accYearsSel("horizon") = yes;
12891      accYearsSel(accYears)$(sum(yearsSel$sameas(accYears,yearsSel), 1)) = yes;
12892      accYearsToFix(accYears) = no;
12893      accYearsToFix(accYears)$(sum(years$(sameas(years,accYears) and years.val < smin(years_a$yearsSel(years_a), years_a.val)), 1) > 0) = yes;
12894      timeModelSel(timeModel) = no;
12895      timeModelSel(timeModel)$timeModelToCalc(timeModel) = yes;
12896      nodesModelSel(nodesModel) = no;
12897      nodesModelSel(nodesModel)$nodesModelToCalc(nodesModel) = yes;
12898   
12899  * Fix decision for years previously optimized in case of myopic or foresight
12900      converter_unitsDelta(nodesModelToCalc,yearsToFix,converter_techs)
12901          $(sum(yearsToCalc$sameas(yearsToFix, yearsToCalc), 1))
12902          = sum(vintage, converter_unitsTotal.l(nodesModelToCalc,yearsToFix,converter_techs,vintage))
12903              - converter_capacityParam(nodesModelToCalc,yearsToFix,converter_techs,"unitsUpperLimit");
12904      converter_unitsDelta(nodesModelToCalc,yearsToFix,converter_techs)
12905          $(converter_unitsDelta(nodesModelToCalc,yearsToFix,converter_techs) < 0) = 0;
12906   
12907      converter_unitsBuild.l(nodesModelToCalc,yearsToFix,converter_techs,vintage)
12908          $converter_availTech(nodesModelToCalc,yearsToFix,converter_techs,vintage)
12909          = converter_unitsBuild.l(nodesModelToCalc,yearsToFix,converter_techs,vintage)
12910              - converter_unitsDelta(nodesModelToCalc,yearsToFix,converter_techs);
12911   
12912      converter_unitsBuild.l(nodesModelToCalc,yearsToFix,converter_techs,vintage)
12913          $(converter_unitsBuild.l(nodesModelToCalc,yearsToFix,converter_techs,vintage) < 0) = 0;
12914      converter_unitsBuild.fx(nodesModelToCalc,yearsToFix,converter_techs,vintage)
12915          = converter_unitsBuild.l(nodesModelToCalc,yearsToFix,converter_techs,vintage);
12916      converter_unitsDecom.l(nodesModelToCalc,yearsToFix,converter_techs,vintage)
12917          $(converter_unitsDecom.l(nodesModelToCalc,yearsToFix,converter_techs,vintage) < 0) = 0;
12918      converter_unitsDecom.fx(nodesModelToCalc,yearsToFix,converter_techs,vintage)
12919          = converter_unitsDecom.l(nodesModelToCalc,yearsToFix,converter_techs,vintage);
12920      converter_unitsTotal.fx(nodesModelToCalc,yearsToFix,converter_techs,vintage)
12921          = converter_unitsTotal.l(nodesModelToCalc,yearsToFix,converter_techs,vintage);
12922   
12923   
12924      storage_unitsDelta(nodesModelToCalc,yearsToFix,storage_techs)
12925          $(sum(yearsToCalc$sameas(yearsToFix, yearsToCalc), 1))
12926          = sum(vintage, storage_unitsTotal.l(nodesModelToCalc,yearsToFix,storage_techs,vintage))
12927              - storage_reservoirParam(nodesModelToCalc,yearsToFix,storage_techs,"unitsUpperLimit");
12928      storage_unitsDelta(nodesModelToCalc,yearsToFix,storage_techs)
12929          $(storage_unitsDelta(nodesModelToCalc,yearsToFix,storage_techs) < 0) = 0;
12930   
12931      storage_unitsBuild.l(nodesModelToCalc,yearsToFix,storage_techs,vintage)
12932          $storage_availTech(nodesModelToCalc,yearsToFix,storage_techs,vintage)
12933          = storage_unitsBuild.l(nodesModelToCalc,yearsToFix,storage_techs,vintage)
12934              - storage_unitsDelta(nodesModelToCalc,yearsToFix,storage_techs);
12935   
12936      storage_unitsBuild.l(nodesModelToCalc,yearsToFix,storage_techs,vintage)
12937          $(storage_unitsBuild.l(nodesModelToCalc,yearsToFix,storage_techs,vintage) < 0) = 0;
12938      storage_unitsBuild.fx(nodesModelToCalc,yearsToFix,storage_techs,vintage)
12939          = storage_unitsBuild.l(nodesModelToCalc,yearsToFix,storage_techs,vintage);
12940      storage_unitsDecom.l(nodesModelToCalc,yearsToFix,storage_techs,vintage)
12941          $(storage_unitsDecom.l(nodesModelToCalc,yearsToFix,storage_techs,vintage) < 0) = 0;
12942      storage_unitsDecom.fx(nodesModelToCalc,yearsToFix,storage_techs,vintage)
12943          = storage_unitsDecom.l(nodesModelToCalc,yearsToFix,storage_techs,vintage);
12944      storage_unitsTotal.fx(nodesModelToCalc,yearsToFix,storage_techs,vintage)
12945          = storage_unitsTotal.l(nodesModelToCalc,yearsToFix,storage_techs,vintage);
12946   
12947   
12948      transfer_linksDelta(linksModelToCalc,yearsToFix,transfer_techs)
12949          $(sum(yearsToCalc$sameas(yearsToFix, yearsToCalc), 1))
12950          = sum(vintage, transfer_linksTotal.l(linksModelToCalc,yearsToFix,transfer_techs,vintage))
12951              - transfer_linksParam(linksModelToCalc,yearsToFix,transfer_techs,"linksUpperLimit");
12952      transfer_linksDelta(linksModelToCalc,yearsToFix,transfer_techs)
12953          $(transfer_linksDelta(linksModelToCalc,yearsToFix,transfer_techs) < 0) = 0;
12954   
12955      transfer_linksBuild.l(linksModelToCalc,yearsToFix,transfer_techs,vintage)
12956          $transfer_availTech(linksModelToCalc,yearsToFix,transfer_techs,vintage)
12957          = transfer_linksBuild.l(linksModelToCalc,yearsToFix,transfer_techs,vintage)
12958              - transfer_linksDelta(linksModelToCalc,yearsToFix,transfer_techs);
12959   
12960      transfer_linksBuild.l(linksModelToCalc,yearsToFix,transfer_techs,vintage)
12961          $(transfer_linksBuild.l(linksModelToCalc,yearsToFix,transfer_techs,vintage) < 0) = 0;
12962      transfer_linksBuild.fx(linksModelToCalc,yearsToFix,transfer_techs,vintage)
12963          = transfer_linksBuild.l(linksModelToCalc,yearsToFix,transfer_techs,vintage);
12964      transfer_linksDecom.l(linksModelToCalc,yearsToFix,transfer_techs,vintage)
12965          $(transfer_linksDecom.l(linksModelToCalc,yearsToFix,transfer_techs,vintage) < 0) = 0;
12966      transfer_linksDecom.fx(linksModelToCalc,yearsToFix,transfer_techs,vintage)
12967          = transfer_linksDecom.l(linksModelToCalc,yearsToFix,transfer_techs,vintage);
12968      transfer_linksTotal.fx(linksModelToCalc,yearsToFix,transfer_techs,vintage)
12969          = transfer_linksTotal.l(linksModelToCalc,yearsToFix,transfer_techs,vintage);
12970   
12971      accounting_indicator.fx(accNodesModel,accYearsToFix,indicator)
12972          = accounting_indicator.l(accNodesModel,accYearsToFix,indicator);
12973   
12974  * Optimize and log values
12975      if (opti_sense < 0,
12976      solve remix minimizing accounting_objective using mip;
12977      else
12978      solve remix maximizing accounting_objective using mip;
12979      );
12980   
12981      put_utility 'log' / 'Model status ' remix.modelstat:0:0;
12982      put_utility 'log' / 'Objective value ' accounting_objective.l:0:3;
12983   
12984  );
12985   
12989   
12990  * if method is pareto solve the model once and afterwards run multiple points along the pareto front
INCLUDE    C:\Local\REMix\framework\remix\framework\model\source\methods\pareto.gms
12992  * SPDX-FileCopyrightText: Copyright (c) 2023 German Aerospace Center (DLR)
12993  * SPDX-License-Identifier: BSD-3-Clause
12994   
12998   
12999  * if method is mga solve the model once and afterwards maximize the length metric of indicators
INCLUDE    C:\Local\REMix\framework\remix\framework\model\source\methods\mga.gms
13001  * SPDX-FileCopyrightText: Copyright (c) 2023 German Aerospace Center (DLR)
13002  * SPDX-License-Identifier: BSD-3-Clause
13003   
13007   
13008  * if method is iternodes run the model by iterating through all nodesToCalc
INCLUDE    C:\Local\REMix\framework\remix\framework\model\source\methods\iternodes.gms
13010  * SPDX-FileCopyrightText: Copyright (c) 2023 German Aerospace Center (DLR)
13011  * SPDX-License-Identifier: BSD-3-Clause
13012   
13016   
13017  * if postcalc is one write the results gdx
INCLUDE    C:\Local\REMix\framework\remix\framework\model\source\postcalc\definition.gms
13019  * SPDX-FileCopyrightText: Copyright (c) 2023 German Aerospace Center (DLR)
13020  * SPDX-License-Identifier: BSD-3-Clause
13021   
13023   
13024  * ==== indicator accounting ====
13025   
13026  indicator_accounting_detailed(indicator,nodesModelToCalc,yearsToCalc,techs)
13027      =
13028  * == converters ==
13029      sum ((converter_techs(techs),vintage)
13030                  $(converter_availTech(nodesModelToCalc,yearsToCalc,converter_techs,vintage)
13031                      and accounting_converterUnits(indicator,nodesModelToCalc,converter_techs,vintage,"useAnnuity") = 0),
13032          converter_unitsBuild.l(nodesModelToCalc,yearsToCalc,converter_techs,vintage)
13033          * accounting_converterUnits(indicator,nodesModelToCalc,converter_techs,vintage,"perUnitBuild"))
13034   
13035      + sum ((years_a,converter_techs(techs),vintage)
13036                  $(converter_availTech(nodesModelToCalc,years_a,converter_techs,vintage)
13037                      and accounting_converterUnits(indicator,nodesModelToCalc,converter_techs,vintage,"useAnnuity") = 1
13038                      and years_a.val + accounting_converterUnits(indicator,nodesModelToCalc,converter_techs,vintage,"amorTime") > yearsToCalc.val
13039                      and years_a.val <= yearsToCalc.val ),
13040          converter_unitsBuild.l(nodesModelToCalc,years_a,converter_techs,vintage)
13041          * accounting_converterUnits(indicator,nodesModelToCalc,converter_techs,vintage,"perUnitBuild")
13042          * accounting_annuityFactor_converter(indicator,nodesModelToCalc,converter_techs,vintage) )
13043   
13044      + sum ((converter_techs(techs),vintage)
13045                  $converter_usedTech(nodesModelToCalc,yearsToCalc,converter_techs,vintage),
13046          converter_unitsDecom.l(nodesModelToCalc,yearsToCalc,converter_techs,vintage)
13047          * accounting_converterUnits(indicator,nodesModelToCalc,converter_techs,vintage,"perUnitDecom")
13048   
13049          + converter_unitsTotal.l(nodesModelToCalc,yearsToCalc,converter_techs,vintage)
13050          * accounting_converterUnits(indicator,nodesModelToCalc,converter_techs,vintage,"perUnitTotal") )
13051   
13052      + sum ((timeModelToCalc,converter_techs(techs),vintage,activity)
13053                  $converter_usedTechAct(nodesModelToCalc,yearsToCalc,converter_techs,vintage,activity),
13054          converter_activity.l(timeModelToCalc,nodesModelToCalc,yearsToCalc,converter_techs,vintage,activity)
13055          * timeLength(timeModelToCalc)
13056          * accounting_converterActivity(indicator,nodesModelToCalc,converter_techs,vintage,activity,"perActivity") )
13057   
13058      + sum ((timeModelToCalc,converter_techs(techs),vintage)
13059                  $converter_usedTech(nodesModelToCalc,yearsToCalc,converter_techs,vintage),
13060          converter_unitStartups.l(timeModelToCalc,nodesModelToCalc,yearsToCalc,converter_techs,vintage)
13061          * accounting_converterStartup(indicator,nodesModelToCalc,converter_techs,vintage,"perStartup") )
13062   
13063      + sum ((timeModelToCalc,converter_techs(techs),vintage)
13064                  $converter_usedTech(nodesModelToCalc,yearsToCalc,converter_techs,vintage),
13065          converter_rampPos.l(timeModelToCalc,nodesModelToCalc,yearsToCalc,converter_techs,vintage)
13066          * (accounting_converterStartup(indicator,nodesModelToCalc,converter_techs,vintage,"perRamp")
13067              + accounting_converterStartup(indicator,nodesModelToCalc,converter_techs,vintage,"perRampPos"))
13068   
13069          + converter_rampNeg.l(timeModelToCalc,nodesModelToCalc,yearsToCalc,converter_techs,vintage)
13070          * (accounting_converterStartup(indicator,nodesModelToCalc,converter_techs,vintage,"perRamp")
13071              + accounting_converterStartup(indicator,nodesModelToCalc,converter_techs,vintage,"perRampNeg")))
13072   
13073  * == storage ==
13074      + sum ((storage_techs(techs),vintage)
13075                  $(storage_availTech(nodesModelToCalc,yearsToCalc,storage_techs,vintage)
13076                      and accounting_storageUnits(indicator,nodesModelToCalc,storage_techs,vintage,"useAnnuity") = 0),
13077          storage_unitsBuild.l(nodesModelToCalc,yearsToCalc,storage_techs,vintage)
13078          * accounting_storageUnits(indicator,nodesModelToCalc,storage_techs,vintage,"perUnitBuild") )
13079   
13080      + sum ((years_a,storage_techs(techs),vintage)
13081                  $(storage_availTech(nodesModelToCalc,yearsToCalc,storage_techs,vintage)
13082                      and accounting_storageUnits(indicator,nodesModelToCalc,storage_techs,vintage,"useAnnuity") = 1
13083                      and years_a.val + accounting_storageUnits(indicator,nodesModelToCalc,storage_techs,vintage,"amorTime") > yearsToCalc.val
13084                      and years_a.val <= yearsToCalc.val ),
13085          storage_unitsBuild.l(nodesModelToCalc,years_a,storage_techs,vintage)
13086          * accounting_storageUnits(indicator,nodesModelToCalc,storage_techs,vintage,"perUnitBuild")
13087          * accounting_annuityFactor_storage(indicator,nodesModelToCalc,storage_techs,vintage) )
13088   
13089      + sum ((storage_techs(techs),vintage)
13090                  $storage_usedTech(nodesModelToCalc,yearsToCalc,storage_techs,vintage),
13091          storage_unitsDecom.l(nodesModelToCalc,yearsToCalc,storage_techs,vintage)
13092          * accounting_storageUnits(indicator,nodesModelToCalc,storage_techs,vintage,"perUnitDecom")
13093   
13094          + storage_unitsTotal.l(nodesModelToCalc,yearsToCalc,storage_techs,vintage)
13095          * accounting_storageUnits(indicator,nodesModelToCalc,storage_techs,vintage,"perUnitTotal") )
13096   
13097  * == transfer ==
13098      + sum ((linksModel,transfer_techs(techs),vintage)
13099                  $(transfer_availTech(linksModel,yearsToCalc,transfer_techs,vintage)
13100                      and linksModelToCalc(linksModel)
13101                      and transfer_incidenceModel(nodesModelToCalc,linksModel) <> 0
13102                      and accounting_transferLinks(indicator,linksModel,transfer_techs,vintage,"useAnnuity") = 0),
13103          0.5
13104          * transfer_linksBuild.l(linksModel,yearsToCalc,transfer_techs,vintage)
13105          * accounting_transferLinks(indicator,linksModel,transfer_techs,vintage,"perLinkBuild") )
13106   
13107      + sum ((linksModel,years_a,transfer_techs(techs),vintage)
13108                  $(transfer_availTech(linksModel,yearsToCalc,transfer_techs,vintage)
13109                      and linksModelToCalc(linksModel)
13110                      and transfer_incidenceModel(nodesModelToCalc,linksModel) <> 0
13111                      and accounting_transferLinks(indicator,linksModel,transfer_techs,vintage,"useAnnuity") = 1
13112                      and years_a.val + accounting_transferLinks(indicator,linksModel,transfer_techs,vintage,"amorTime") > yearsToCalc.val
13113                      and years_a.val <= yearsToCalc.val ),
13114          0.5
13115          * transfer_linksBuild.l(linksModel,years_a,transfer_techs,vintage)
13116          * accounting_transferLinks(indicator,linksModel,transfer_techs,vintage,"perLinkBuild")
13117          * accounting_annuityFactor_transferLink(indicator,linksModel,transfer_techs,vintage) )
13118   
13119      + sum ((linksModel,transfer_techs(techs),vintage,link_types)
13120                  $(transfer_availTech(linksModel,yearsToCalc,transfer_techs,vintage)
13121                      and linksModelToCalc(linksModel)
13122                      and transfer_incidenceModel(nodesModelToCalc,linksModel) <> 0
13123                      and accounting_transferPerLength(indicator,linksModel,transfer_techs,vintage,link_types,"useAnnuity") = 0 ),
13124          0.5
13125          * transfer_linksBuild.l(linksModel,yearsToCalc,transfer_techs,vintage)
13126          * transfer_lengthParam(linksModel,link_types,"length")
13127          * accounting_transferPerLength(indicator,linksModel,transfer_techs,vintage,link_types,"perLengthBuild") )
13128   
13129      + sum ((linksModel,years_a,transfer_techs(techs),vintage,link_types)
13130                  $(transfer_availTech(linksModel,yearsToCalc,transfer_techs,vintage)
13131                      and linksModelToCalc(linksModel)
13132                      and transfer_incidenceModel(nodesModelToCalc,linksModel) <> 0
13133                      and accounting_transferPerLength(indicator,linksModel,transfer_techs,vintage,link_types,"useAnnuity") = 1
13134                      and years_a.val + accounting_transferPerLength(indicator,linksModel,transfer_techs,vintage,link_types,"amorTime") > yearsToCalc.val
13135                      and years_a.val <= yearsToCalc.val ),
13136          0.5
13137          * transfer_linksBuild.l(linksModel,years_a,transfer_techs,vintage)
13138          * transfer_lengthParam(linksModel,link_types,"length")
13139          * accounting_transferPerLength(indicator,linksModel,transfer_techs,vintage,link_types,"perLengthBuild")
13140          * accounting_annuityFactor_transferDistance(indicator,linksModel,transfer_techs,vintage,link_types) )
13141   
13142      + sum ((linksModel,transfer_techs(techs),vintage)
13143                  $(transfer_usedTech(linksModel,yearsToCalc,transfer_techs,vintage)
13144                      and linksModelToCalc(linksModel)
13145                      and transfer_incidenceModel(nodesModelToCalc,linksModel) <> 0 ),
13146          0.5
13147          * transfer_linksDecom.l(linksModel,yearsToCalc,transfer_techs,vintage)
13148          * accounting_transferLinks(indicator,linksModel,transfer_techs,vintage,"perLinkDecom")
13149   
13150          + 0.5
13151          * transfer_linksTotal.l(linksModel,yearsToCalc,transfer_techs,vintage)
13152          * accounting_transferLinks(indicator,linksModel,transfer_techs,vintage,"perLinkTotal")
13153   
13154          + 0.5
13155          * sum (link_types,
13156              transfer_linksDecom.l(linksModel,yearsToCalc,transfer_techs,vintage)
13157              * transfer_lengthParam(linksModel,link_types,"length")
13158              * accounting_transferPerLength(indicator,linksModel,transfer_techs,vintage,link_types,"perLengthDecom")
13159   
13160              + transfer_linksTotal.l(linksModel,yearsToCalc,transfer_techs,vintage)
13161              * transfer_lengthParam(linksModel,link_types,"length")
13162              * accounting_transferPerLength(indicator,linksModel,transfer_techs,vintage,link_types,"perLengthTotal"))
13163   
13164          + 0.5
13165          * sum (timeModelToCalc,
13166              transfer_flowAlong.l(timeModelToCalc,linksModel,yearsToCalc,transfer_techs,vintage)
13167              * timeLength(timeModelToCalc)
13168              * ( accounting_transferLinks(indicator,linksModel,transfer_techs,vintage,"perFlow")
13169                  + accounting_transferLinks(indicator,linksModel,transfer_techs,vintage,"perFlowAlong"))
13170   
13171              + transfer_flowAgainst.l(timeModelToCalc,linksModel,yearsToCalc,transfer_techs,vintage)
13172              * timeLength(timeModelToCalc)
13173              * ( accounting_transferLinks(indicator,linksModel,transfer_techs,vintage,"perFlow")
13174                  + accounting_transferLinks(indicator,linksModel,transfer_techs,vintage,"perFlowAgainst")))
13175   
13176          + 0.5
13177          * sum ((timeModelToCalc, link_types),
13178              transfer_flowAlong.l(timeModelToCalc,linksModel,yearsToCalc,transfer_techs,vintage)
13179              * timeLength(timeModelToCalc)
13180              * transfer_lengthParam(linksModel,link_types,"length")
13181              * (accounting_transferPerLength(indicator,linksModel,transfer_techs,vintage,link_types,"perFlow")
13182                  + accounting_transferPerLength(indicator,linksModel,transfer_techs,vintage,link_types,"perFlowAlong"))
13183   
13184              + transfer_flowAgainst.l(timeModelToCalc,linksModel,yearsToCalc,transfer_techs,vintage)
13185              * timeLength(timeModelToCalc)
13186              * transfer_lengthParam(linksModel,link_types,"length")
13187              * (accounting_transferPerLength(indicator,linksModel,transfer_techs,vintage,link_types,"perFlow")
13188                  + accounting_transferPerLength(indicator,linksModel,transfer_techs,vintage,link_types,"perFlowAgainst"))))
13189   
13190   
13191  * == sources / sinks ==
13192      + sum ((timeModelToCalc,sourcesink_techs(techs),commodity)
13193              $sourcesink_enabled(nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity),
13194          sourcesink_flow.l(timeModelToCalc,nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity)
13195          * timeLength(timeModelToCalc)
13196          * accounting_sourcesinkFlow(indicator,nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity,"perFlow"))
13197      ;
13198   
13199   
13200  * ==== full set of main indicators ====
13201   
13202  indicator_accounting(accNodesModel,accYears,indicator)
13203      $sum((accNodesModel_a,accYears_a,indicator_a)
13204              $compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a), 1)
13205      =
13206      + sum((accNodesModel_a,accYears_a,indicator_a)
13207              $(compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
13208                  and variableIndicators(accNodesModel_a,accYears_a,indicator_a)),
13209          compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
13210          * accounting_indicator.l(accNodesModel_a,accYears_a,indicator_a))
13211   
13212      + sum((accNodesModel_a,accYears_a,indicator_a)
13213              $(compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)),
13214          compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
13215          * (sum((nodesModelToCalc,yearsToCalc,techs)
13216                  $(sameas(accNodesModel_a, nodesModelToCalc)
13217                      and sameas(accYears_a, yearsToCalc)),
13218                  indicator_accounting_detailed(indicator_a,nodesModelToCalc,yearsToCalc,techs))))
13219      ;
13220   
13221  indicator_accounting_comp(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
13222      $compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
13223      =
13224          compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
13225          * accounting_indicator.l(accNodesModel_a,accYears_a,indicator_a)
13226              $variableIndicators(accNodesModel_a,accYears_a,indicator_a)
13227   
13228          + compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
13229          * (sum((nodesModelToCalc,yearsToCalc,techs)
13230                  $(sameas(accNodesModel_a, nodesModelToCalc)
13231                      and sameas(accYears_a, yearsToCalc)),
13232                  indicator_accounting_detailed(indicator_a,nodesModelToCalc,yearsToCalc,techs)))
13233      ;
13234   
13235  indicator_accounting_ref(accNodesModel,accYears,indicator)
13236      $accounting_indicator.l(accNodesModel,accYears,indicator)
13237      = accounting_indicator.l(accNodesModel,accYears,indicator);
13238   
13239  * ==== link-specific indicator accounting ====
13240   
13241  indicator_accounting_links(indicator,nodesModelToCalc,nodesModelToCalc_a,linksModelToCalc,yearsToCalc,techs)
13242      $(transfer_incidenceModel(nodesModelToCalc,linksModelToCalc) < 0
13243          and transfer_incidenceModel(nodesModelToCalc_a,linksModelToCalc) > 0)
13244      =
13245      sum ((transfer_techs(techs),vintage)
13246                  $(transfer_availTech(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
13247                      and accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"useAnnuity") = 0),
13248          transfer_linksBuild.l(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
13249          * accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"perLinkBuild") )
13250   
13251      + sum ((years_a,transfer_techs(techs),vintage)
13252                  $(transfer_availTech(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
13253                      and accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"useAnnuity") = 1
13254                      and years_a.val + accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"amorTime") > yearsToCalc.val
13255                      and years_a.val <= yearsToCalc.val ),
13256          transfer_linksBuild.l(linksModelToCalc,years_a,transfer_techs,vintage)
13257          * accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"perLinkBuild")
13258          * accounting_annuityFactor_transferLink(indicator,linksModelToCalc,transfer_techs,vintage) )
13259   
13260      + sum ((transfer_techs(techs),vintage,link_types)
13261                  $(transfer_availTech(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
13262                      and accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"useAnnuity") = 0 ),
13263          transfer_linksBuild.l(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
13264          * transfer_lengthParam(linksModelToCalc,link_types,"length")
13265          * accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"perLengthBuild") )
13266   
13267      + sum ((years_a,transfer_techs(techs),vintage,link_types)
13268                  $(transfer_availTech(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
13269                      and accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"useAnnuity") = 1
13270                      and years_a.val + accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"amorTime") > yearsToCalc.val
13271                      and years_a.val <= yearsToCalc.val ),
13272          transfer_linksBuild.l(linksModelToCalc,years_a,transfer_techs,vintage)
13273          * transfer_lengthParam(linksModelToCalc,link_types,"length")
13274          * accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"perLengthBuild")
13275          * accounting_annuityFactor_transferDistance(indicator,linksModelToCalc,transfer_techs,vintage,link_types) )
13276   
13277      + sum ((transfer_techs(techs),vintage)
13278                  $(transfer_usedTech(linksModelToCalc,yearsToCalc,transfer_techs,vintage)),
13279          transfer_linksDecom.l(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
13280          * accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"perLinkDecom")
13281   
13282          + transfer_linksTotal.l(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
13283          * accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"perLinkTotal")
13284   
13285          + sum (link_types,
13286              transfer_linksDecom.l(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
13287              * transfer_lengthParam(linksModelToCalc,link_types,"length")
13288              * accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"perLengthDecom")
13289   
13290              + transfer_linksTotal.l(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
13291              * transfer_lengthParam(linksModelToCalc,link_types,"length")
13292              * accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"perLengthTotal"))
13293   
13294          + sum (timeModelToCalc,
13295              transfer_flowAlong.l(timeModelToCalc,linksModelToCalc,yearsToCalc,transfer_techs,vintage)
13296              * timeLength(timeModelToCalc)
13297              * ( accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"perFlow")
13298                  + accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"perFlowAlong"))
13299   
13300              + transfer_flowAgainst.l(timeModelToCalc,linksModelToCalc,yearsToCalc,transfer_techs,vintage)
13301              * timeLength(timeModelToCalc)
13302              * ( accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"perFlow")
13303                  + accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"perFlowAgainst")))
13304   
13305          + sum ((timeModelToCalc, link_types),
13306              transfer_flowAlong.l(timeModelToCalc,linksModelToCalc,yearsToCalc,transfer_techs,vintage)
13307              * timeLength(timeModelToCalc)
13308              * transfer_lengthParam(linksModelToCalc,link_types,"length")
13309              * (accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"perFlow")
13310                  + accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"perFlowAlong"))
13311   
13312              + transfer_flowAgainst.l(timeModelToCalc,linksModelToCalc,yearsToCalc,transfer_techs,vintage)
13313              * timeLength(timeModelToCalc)
13314              * transfer_lengthParam(linksModelToCalc,link_types,"length")
13315              * (accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"perFlow")
13316                  + accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"perFlowAgainst")))
13317      );
13318   
13319   
13320  * == converter capacities ==
13321   
13322  converter_ratedInput(converter_techs,vintage,commodity)
13323      $(converter_techParam(converter_techs,vintage,"lifeTime") > 0)
13324      = smin(activity$converter_usedAct(converter_techs,vintage,activity),
13325              converter_coefficient(converter_techs,vintage,activity,commodity,"coefficient"));
13326  converter_ratedInput(converter_techs,vintage,commodity)
13327      $(converter_ratedInput(converter_techs,vintage,commodity) > 0)
13328      = 0;
13329   
13330  converter_ratedOutput(converter_techs,vintage,commodity)
13331      $(converter_techParam(converter_techs,vintage,"lifeTime") > 0)
13332      = smax(activity$converter_usedAct(converter_techs,vintage,activity),
13333              converter_coefficient(converter_techs,vintage,activity,commodity,"coefficient"));
13334  converter_ratedOutput(converter_techs,vintage,commodity)
13335      $(converter_ratedOutput(converter_techs,vintage,commodity) < 0)
13336      = 0;
13337   
13338  converter_ratedOutput_min(nodesModelToCalc,years,converter_techs(techs),commodity)
13339      $sum(vintage$(converter_usedTech(nodesModelToCalc,years,converter_techs,vintage)
13340          and converter_ratedOutput(converter_techs,vintage,commodity)), 1)
13341      = smin(vintage$(converter_usedTech(nodesModelToCalc,years,converter_techs,vintage)
13342              and converter_ratedOutput(converter_techs,vintage,commodity)),
13343          converter_ratedOutput(converter_techs,vintage,commodity));
13344   
13345  converter_ratedOutput_max(nodesModelToCalc,years,converter_techs(techs),commodity)
13346      $sum(vintage$(converter_usedTech(nodesModelToCalc,years,converter_techs,vintage)
13347          and converter_ratedOutput(converter_techs,vintage,commodity)), 1)
13348      = smax(vintage$(converter_usedTech(nodesModelToCalc,years,converter_techs,vintage)
13349              and converter_ratedOutput(converter_techs,vintage,commodity)),
13350          converter_ratedOutput(converter_techs,vintage,commodity));
13351   
13352  converter_units_ext(map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,years),converter_techs(techs),vintage,"build")
13353      = converter_unitsBuild.l(nodesModelToCalc,years,converter_techs,vintage);
13354   
13355  converter_units_ext(map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,years),converter_techs(techs),vintage,"decom")
13356      = converter_unitsDecom.l(nodesModelToCalc,years,converter_techs,vintage);
13357   
13358  converter_units_ext(map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,years),converter_techs(techs),vintage,"total")
13359      = converter_unitsTotal.l(nodesModelToCalc,years,converter_techs,vintage);
13360   
13361  converter_caps_ext(map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,years),converter_techs(techs),vintage,commodity,capType)
13362      $(converter_ratedOutput(converter_techs,vintage,commodity))
13363      = converter_units_ext(accNodesModel,nodesModelToCalc,accYears,years,techs,vintage,capType)
13364          * converter_ratedOutput(converter_techs,vintage,commodity);
13365   
13366  converter_caps_ext(map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,years),converter_techs(techs),vintage,commodity,"lowerLimit")
13367      $(converter_usedTech(nodesModelToCalc,years,converter_techs,vintage)
13368          and converter_capacityParam(nodesModelToCalc,years,converter_techs,"unitsLowerLimit") > 0
13369          and converter_ratedOutput_min(nodesModelToCalc,years,converter_techs,commodity))
13370      = converter_capacityParam(nodesModelToCalc,years,converter_techs,"unitsLowerLimit")
13371          * converter_ratedOutput_min(nodesModelToCalc,years,converter_techs,commodity);
13372   
13373  converter_caps_ext(map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,years),converter_techs(techs),vintage,commodity,"upperLimit")
13374      $(converter_usedTech(nodesModelToCalc,years,converter_techs,vintage)
13375          and converter_capacityParam(nodesModelToCalc,years,converter_techs,"unitsUpperLimit") < inf
13376          and converter_ratedOutput_min(nodesModelToCalc,years,converter_techs,commodity))
13377      = converter_capacityParam(nodesModelToCalc,years,converter_techs,"unitsUpperLimit")
13378          * converter_ratedOutput_max(nodesModelToCalc,years,converter_techs,commodity);
13379   
13380  converter_caps(accNodesModel,accYears,converter_techs(techs),commodity,capType)
13381      = sum((nodesModelToCalc,years,vintage)
13382              $(map_accNodesPostCalc(accNodesModel,nodesModelToCalc)
13383                  and map_accYearsPostCalc(accYears,years)),
13384          converter_caps_ext(accNodesModel,nodesModelToCalc,accYears,years,converter_techs,vintage,commodity,capType));
13385  option clear = converter_caps_ext;
13386   
13387  converter_units(accNodesModel,accYears,converter_techs(techs),vintage,capType)
13388      = sum((nodesModelToCalc,years)
13389              $(map_accNodesPostCalc(accNodesModel,nodesModelToCalc)
13390                  and map_accYearsPostCalc(accYears,years)),
13391          converter_units_ext(accNodesModel,nodesModelToCalc,accYears,years,converter_techs,vintage,capType));
13392  option clear = converter_units_ext;
13393   
13394   
13395  * ==== transfer capacities ====
13396   
13397  max_transfer_coefficient(transfer_techs(techs),commodity)
13398          $(smax(vintage, transfer_coefficient(transfer_techs,vintage,commodity,"coefficient")) > 0)
13399          = smax(vintage, transfer_coefficient(transfer_techs,vintage,commodity,"coefficient"));
13400   
13401  min_transfer_coefficient(transfer_techs(techs),commodity)
13402          $(smin(vintage, transfer_coefficient(transfer_techs,vintage,commodity,"coefficient")) > 0)
13403          = smin(vintage, transfer_coefficient(transfer_techs,vintage,commodity,"coefficient"));
13404   
13405   
13406  transfer_links(linksModel,years,transfer_techs,vintage,"build")
13407      = transfer_linksBuild.l(linksModel,years,transfer_techs,vintage);
13408   
13409  transfer_links(linksModel,years,transfer_techs,vintage,"decom")
13410      = transfer_linksDecom.l(linksModel,years,transfer_techs,vintage);
13411   
13412  transfer_links(linksModel,years,transfer_techs,vintage,"total")
13413      = transfer_linksTotal.l(linksModel,years,transfer_techs,vintage);
13414   
13415  transfer_caps(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,years,transfer_techs(techs),commodity,capType)
13416      $(transfer_incidenceModel(nodesModelToCalc_start,linksModel) < 0
13417          and transfer_incidenceModel(nodesModelToCalc_end,linksModel) > 0)
13418      = sum(vintage,
13419          transfer_links(linksModel,years,transfer_techs,vintage,capType)
13420          * transfer_coefficient(transfer_techs,vintage,commodity,"coefficient"));
13421   
13422  transfer_caps(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,years,transfer_techs(techs),commodity,"lowerLimit")
13423      $(transfer_linksParam(linksModel,years,transfer_techs,'linksLowerLimit') > 0
13424          and transfer_incidenceModel(nodesModelToCalc_start,linksModel) < 0
13425          and transfer_incidenceModel(nodesModelToCalc_end,linksModel) > 0
13426          and sum(vintage$(transfer_usedTech(linksModel,years,transfer_techs,vintage)
13427                              and transfer_coefficient(transfer_techs,vintage,commodity,"coefficient")), 1))
13428      = transfer_linksParam(linksModel,years,transfer_techs,'linksLowerLimit')
13429          * min_transfer_coefficient(transfer_techs,commodity);
13430   
13431  transfer_caps(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,years,transfer_techs(techs),commodity,"upperLimit")
13432      $(transfer_linksParam(linksModel,years,transfer_techs,'linksUpperLimit') < inf
13433          and transfer_incidenceModel(nodesModelToCalc_start,linksModel) < 0
13434          and transfer_incidenceModel(nodesModelToCalc_end,linksModel) > 0
13435          and sum(vintage$(transfer_usedTech(linksModel,years,transfer_techs,vintage)
13436                              and transfer_coefficient(transfer_techs,vintage,commodity,"coefficient")), 1))
13437      = transfer_linksParam(linksModel,years,transfer_techs,'linksUpperLimit')
13438          * max_transfer_coefficient(transfer_techs,commodity);
13439   
13440   
13441  * ==== transfer flows ====
13442   
13443  transfer_flows(timeModelToCalc,nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs(techs),commodity)
13444      $(transfer_incidenceModel(nodesModelToCalc_start,linksModel) < 0
13445          and transfer_incidenceModel(nodesModelToCalc_end,linksModel) > 0)
13446      = sum(vintage,
13447          ( transfer_flowAlong.l(timeModelToCalc,linksModel,yearsToCalc,transfer_techs,vintage)
13448              - transfer_flowAgainst.l(timeModelToCalc,linksModel,yearsToCalc,transfer_techs,vintage) )
13449          * timeLength(timeModelToCalc)
13450          * transfer_coefficient(transfer_techs,vintage,commodity,"coefficient"));
13451   
13452  transfer_flows_annual(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs(techs),commodity,"netto")
13453      = sum(timeModelToCalc,
13454          transfer_flows(timeModelToCalc,nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs,commodity));
13455   
13456  transfer_flows_annual(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs(techs),commodity,"positive")
13457      = sum(timeModelToCalc
13458              $(transfer_flows(timeModelToCalc,nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs,commodity) > 0),
13459          transfer_flows(timeModelToCalc,nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs,commodity));
13460   
13461  transfer_flows_annual(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs(techs),commodity,"negative")
13462      = sum(timeModelToCalc
13463              $(transfer_flows(timeModelToCalc,nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs,commodity) < 0),
13464          transfer_flows(timeModelToCalc,nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs,commodity));
13465   
13466  transfer_flows_annual(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs(techs),commodity,"brutto")
13467      = transfer_flows_annual(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs,commodity,"positive")
13468          - transfer_flows_annual(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs,commodity,"negative");
13469   
13470  transfer_flows_annual(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs(techs),commodity,"flh")
13471      $(transfer_flows_annual(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs,commodity,"brutto") > 0
13472          and transfer_caps(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs,commodity,"total") > 0)
13473      = transfer_flows_annual(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs,commodity,"brutto")
13474          / transfer_caps(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs,commodity,"total");
13475   
13476  transfer_losses(timeModelToCalc,nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs(techs),commodity)
13477      $(transfer_incidenceModel(nodesModelToCalc_start,linksModel) < 0
13478          and transfer_incidenceModel(nodesModelToCalc_end,linksModel) > 0)
13479      = -1 * abs(sum(vintage,
13480          ( transfer_flowAlong.l(timeModelToCalc,linksModel,yearsToCalc,transfer_techs,vintage)
13481              - transfer_flowAgainst.l(timeModelToCalc,linksModel,yearsToCalc,transfer_techs,vintage) )
13482          * ( transfer_coefPerFlow(transfer_techs,vintage,commodity,"coefPerFlow")
13483              + sum(link_types,
13484                  transfer_coefPerLength(transfer_techs,vintage,commodity,link_types,"coefPerLength")
13485                  * transfer_lengthParam(linksModel,link_types,"length")))))
13486          * timeLength(timeModelToCalc);
13487   
13488  transfer_losses_annual(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs(techs),commodity,"netto")
13489      = sum(timeModelToCalc,
13490          transfer_losses(timeModelToCalc,nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs,commodity));
13491   
13492   
13493  * ==== storage capacities ====
13494   
13495  storage_size_max(nodesModelToCalc,years,storage_techs(techs),commodity)
13496      $sum(vintage$(storage_usedTech(nodesModelToCalc,years,storage_techs,vintage)
13497              and storage_usedCom(storage_techs,vintage,commodity)
13498              and storage_sizeParam(storage_techs,vintage,commodity,"size")), 1)
13499      = smax(vintage$(storage_usedTech(nodesModelToCalc,years,storage_techs,vintage)
13500              and storage_usedCom(storage_techs,vintage,commodity)
13501              and storage_sizeParam(storage_techs,vintage,commodity,"size")),
13502          storage_sizeParam(storage_techs,vintage,commodity,"size"));
13503   
13504  storage_size_min(nodesModelToCalc,years,storage_techs(techs),commodity)
13505      $sum(vintage$(storage_usedTech(nodesModelToCalc,years,storage_techs,vintage)
13506              and storage_usedCom(storage_techs,vintage,commodity)
13507              and storage_sizeParam(storage_techs,vintage,commodity,"size")), 1)
13508      = smin(vintage$(storage_usedTech(nodesModelToCalc,years,storage_techs,vintage)
13509              and storage_usedCom(storage_techs,vintage,commodity)
13510              and storage_sizeParam(storage_techs,vintage,commodity,"size")),
13511          storage_sizeParam(storage_techs,vintage,commodity,"size"));
13512   
13513  storage_units_ext(map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,years),storage_techs(techs),vintage,"build")
13514      $storage_usedTech(nodesModelToCalc,years,storage_techs,vintage)
13515      = storage_unitsBuild.l(nodesModelToCalc,years,storage_techs,vintage);
13516   
13517  storage_units_ext(map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,years),storage_techs(techs),vintage,"decom")
13518      $storage_usedTech(nodesModelToCalc,years,storage_techs,vintage)
13519      = storage_unitsDecom.l(nodesModelToCalc,years,storage_techs,vintage);
13520   
13521  storage_units_ext(map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,years),storage_techs(techs),vintage,"total")
13522      $storage_usedTech(nodesModelToCalc,years,storage_techs,vintage)
13523      = storage_unitsTotal.l(nodesModelToCalc,years,storage_techs,vintage);
13524   
13525  storage_caps_ext(map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,years),storage_techs(techs),vintage,commodity,capType)
13526      $storage_sizeParam(storage_techs,vintage,commodity,"size")
13527      = storage_units_ext(accNodesModel,nodesModelToCalc,accYears,years,storage_techs,vintage,capType)
13528          * storage_sizeParam(storage_techs,vintage,commodity,"size");
13529   
13530  storage_caps_ext(map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,years),storage_techs(techs),vintage,commodity,"lowerLimit")
13531      $(storage_usedTech(nodesModelToCalc,years,storage_techs,vintage)
13532          and storage_reservoirParam(nodesModelToCalc,years,storage_techs,"unitsLowerLimit") > 0
13533          and storage_size_min(nodesModelToCalc,years,storage_techs,commodity))
13534      = storage_reservoirParam(nodesModelToCalc,years,storage_techs,"unitsLowerLimit")
13535          * storage_size_min(nodesModelToCalc,years,storage_techs,commodity);
13536   
13537  storage_caps_ext(map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,years),storage_techs(techs),vintage,commodity,"upperLimit")
13538      $(storage_usedTech(nodesModelToCalc,years,storage_techs,vintage)
13539          and storage_reservoirParam(nodesModelToCalc,years,storage_techs,"unitsUpperLimit") < inf
13540          and storage_size_max(nodesModelToCalc,years,storage_techs,commodity))
13541      = storage_reservoirParam(nodesModelToCalc,years,storage_techs,"unitsUpperLimit")
13542          * storage_size_max(nodesModelToCalc,years,storage_techs,commodity);
13543   
13544  storage_caps_ext(map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,years),storage_techs(techs),vintage,commodity,"total_degraded")
13545      $(storage_usedCom(storage_techs,vintage,commodity)
13546          and (storage_techParam(storage_techs,vintage,"annualDegradation") > 0
13547               or storage_techParam(storage_techs,vintage,"usageDegradation")))
13548      = sum((degradation_states,yearsCom), (storage_degradationParam(storage_techs,vintage,degradation_states,"remainingCapacity")
13549                                      - (years.val - yearsCom.val) * storage_techParam(storage_techs,vintage,"annualDegradation"))
13550                                      * storage_unitsStateTracker.l(nodesModelToCalc,years,yearsCom,storage_techs,vintage,degradation_states)
13551                                      * storage_sizeParam(storage_techs,vintage,commodity,"size"));
13552   
13553  storage_caps(accNodesModel,accYears,storage_techs(techs),commodity,capType)
13554      = sum((nodesModelToCalc,years,vintage)
13555              $(map_accNodesPostCalc(accNodesModel,nodesModelToCalc)
13556                  and map_accYearsPostCalc(accYears,years)),
13557          storage_caps_ext(accNodesModel,nodesModelToCalc,accYears,years,storage_techs,vintage,commodity,capType));
13558  option clear = storage_caps_ext;
13559   
13560  storage_units(accNodesModel,accYears,storage_techs(techs),vintage,capType)
13561      = sum((nodesModelToCalc,years)
13562              $(map_accNodesPostCalc(accNodesModel,nodesModelToCalc)
13563                  and map_accYearsPostCalc(accYears,years)),
13564          storage_units_ext(accNodesModel,nodesModelToCalc,accYears,years,storage_techs,vintage,capType));
13565  option clear = storage_units_ext;
13566   
13567   
13568  * ==== storage levels and flows ====
13569   
13570  storage_flows_ext(timeModelToCalc,map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,yearsToCalc),storage_techs(techs),vintage,commodity)
13571      $(storage_usedTech(nodesModelToCalc,yearsToCalc,storage_techs,vintage) and balance_techComm(storage_techs,commodity))
13572      = storage_level.l(timeModelToCalc,nodesModelToCalc,yearsToCalc,storage_techs,vintage,commodity)
13573          - storage_level.l(timeModelToCalc--1,nodesModelToCalc,yearsToCalc,storage_techs,vintage,commodity)
13575      + storage_losses.l(timeModelToCalc,nodesModelToCalc,yearsToCalc,storage_techs,vintage,commodity)
13576          * timeLength(timeModelToCalc)
13578      ;
13579   
13580  storage_flows(timeModelToCalc,accNodesModel,accYears,storage_techs(techs),commodity)
13581      = sum((nodesModelToCalc,yearsToCalc,vintage)
13582              $(storage_usedTech(nodesModelToCalc,yearsToCalc,storage_techs,vintage) and balance_techComm(storage_techs,commodity)),
13583          storage_flows_ext(timeModelToCalc,accNodesModel,nodesModelToCalc,accYears,yearsToCalc,storage_techs,vintage,commodity));
13584  option clear = storage_flows_ext;
13585   
13586  storage_level_out_ext(timeModelToCalc,map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,yearsToCalc),storage_techs(techs),vintage,commodity)
13587      $(storage_usedTech(nodesModelToCalc,yearsToCalc,storage_techs,vintage) and balance_techComm(storage_techs,commodity))
13588      = storage_level.l(timeModelToCalc,nodesModelToCalc,yearsToCalc,storage_techs,vintage,commodity);
13589   
13590  storage_level_out(timeModelToCalc,accNodesModel,accYears,storage_techs(techs),commodity)
13591      = sum((nodesModelToCalc,yearsToCalc,vintage)
13592              $(storage_usedTech(nodesModelToCalc,yearsToCalc,storage_techs,vintage) and balance_techComm(storage_techs,commodity)),
13593          storage_level_out_ext(timeModelToCalc,accNodesModel,nodesModelToCalc,accYears,yearsToCalc,storage_techs,vintage,commodity));
13594  option clear = storage_level_out_ext;
13595   
13596  storage_flows_annual(accNodesModel,accYears,storage_techs(techs),commodity,"netto")
13597      = sum(timeModelToCalc,
13598          storage_flows(timeModelToCalc,accNodesModel,accYears,storage_techs,commodity));
13599   
13600  storage_flows_annual(accNodesModel,accYears,storage_techs(techs),commodity,"positive")
13601      = sum(timeModelToCalc
13602              $(storage_flows(timeModelToCalc,accNodesModel,accYears,storage_techs,commodity) > 0),
13603          storage_flows(timeModelToCalc,accNodesModel,accYears,storage_techs,commodity));
13604   
13605  storage_flows_annual(accNodesModel,accYears,storage_techs(techs),commodity,"negative")
13606      = sum(timeModelToCalc
13607              $(storage_flows(timeModelToCalc,accNodesModel,accYears,storage_techs,commodity) < 0),
13608          storage_flows(timeModelToCalc,accNodesModel,accYears,storage_techs,commodity));
13609   
13610  storage_flows_annual(accNodesModel,accYears,storage_techs(techs),commodity,"brutto")
13611      = storage_flows_annual(accNodesModel,accYears,storage_techs,commodity,"positive")
13612          + storage_flows_annual(accNodesModel,accYears,storage_techs,commodity,"negative");
13613   
13614  storage_flows_annual(accNodesModel,accYears,storage_techs(techs),commodity,"flh")
13615      $(storage_flows_annual(accNodesModel,accYears,storage_techs,commodity,"brutto") > 0
13616          and storage_caps(accNodesModel,accYears,storage_techs,commodity,"total") > 0)
13617      = storage_flows_annual(accNodesModel,accYears,storage_techs,commodity,"brutto")
13618          / storage_caps(accNodesModel,accYears,storage_techs,commodity,"total");
13619   
13620  storage_losses_out(timeModelToCalc,accNodesModel,accYears,storage_techs(techs),commodity)
13621      = sum((nodesModelToCalc,yearsToCalc,vintage)
13622              $(storage_losses.l(timeModelToCalc,nodesModelToCalc,yearsToCalc,storage_techs,vintage,commodity)
13623                  and map_accNodesPostCalc(accNodesModel,nodesModelToCalc)
13624                  and map_accYearsPostCalc(accYears,yearsToCalc)),
13625          storage_losses.l(timeModelToCalc,nodesModelToCalc,yearsToCalc,storage_techs,vintage,commodity)
13626          * timeLength(timeModelToCalc));
13627   
13628  storage_losses_annual(accNodesModel,accYears,storage_techs(techs),commodity,"netto")
13629      = sum(timeModelToCalc,
13630          storage_losses_out(timeModelToCalc,accNodesModel,accYears,storage_techs,commodity));
13631   
13632   
13633  * == commodity balance ==
13634   
13635  commodity_balance_ext(timeModelToCalc,map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,yearsToCalc),converter_techs(techs),vintage,commodity)
13636      $(converter_usedTech(nodesModelToCalc,yearsToCalc,converter_techs,vintage)
13637          and balance_usedConverter(nodesModelToCalc,yearsToCalc,commodity))
13638      = sum((activity)
13639              $(converter_coefficientProfile(timeModelToCalc,nodesModelToCalc,yearsToCalc,converter_techs,vintage,activity,commodity)),
13640          converter_activity.l(timeModelToCalc,nodesModelToCalc,yearsToCalc,converter_techs,vintage,activity)
13641              * timeLength(timeModelToCalc)
13642              * converter_coefficientProfile(timeModelToCalc,nodesModelToCalc,yearsToCalc,converter_techs,vintage,activity,commodity)
13643          + converter_unitsUsingActivity_MIP.l(timeModelToCalc,nodesModelToCalc,yearsToCalc,converter_techs,vintage,activity)
13644              * timeLength(timeModelToCalc)
13645              * converter_coefficient(converter_techs,vintage,activity,commodity,"constant"));
13646   
13647  commodity_balance_ext(timeModelToCalc,map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,yearsToCalc),storage_techs(techs),vintage,commodity)
13648      $(storage_usedTech(nodesModelToCalc,yearsToCalc,storage_techs,vintage)
13649          and storage_sizeParam(storage_techs,vintage,commodity,"size"))
13650      = commodity_balance_ext(timeModelToCalc,accNodesModel,nodesModelToCalc,accYears,yearsToCalc,storage_techs,vintage,commodity)
13651      + storage_level.l(timeModelToCalc--1,nodesModelToCalc,yearsToCalc,storage_techs,vintage,commodity)
13652          - storage_level.l(timeModelToCalc,nodesModelToCalc,yearsToCalc,storage_techs,vintage,commodity)
13653      - storage_losses.l(timeModelToCalc,nodesModelToCalc,yearsToCalc,storage_techs,vintage,commodity)
13654      * timeLength(timeModelToCalc);
13655   
13656  commodity_balance_ext(timeModelToCalc,map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,yearsToCalc),sourcesink_techs(techs),vintage,commodity)
13657      $(sourcesink_enabled(nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity)
13658          and sameas(yearsToCalc,vintage))
13659      = commodity_balance_ext(timeModelToCalc,accNodesModel,nodesModelToCalc,accYears,yearsToCalc,sourcesink_techs,vintage,commodity)
13660      + sourcesink_flow.l(timeModelToCalc,nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity)
13661      * timeLength(timeModelToCalc);
13662   
13663  commodity_balance_ext(timeModelToCalc,map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,yearsToCalc),transfer_techs(techs),vintage,commodity)
13664      $sum((linksModel)
13665          $(transfer_incidenceModel(nodesModelToCalc,linksModel)
13666                  and transfer_usedTech(linksModel,yearsToCalc,transfer_techs,vintage)
13667                  and transfer_coefficient(transfer_techs,vintage,commodity,"coefficient")), 1)
13668      = commodity_balance_ext(timeModelToCalc,accNodesModel,nodesModelToCalc,accYears,yearsToCalc,transfer_techs,vintage,commodity)
13669      + sum((linksModel)
13670              $(transfer_incidenceModel(nodesModelToCalc,linksModel)
13671                  and transfer_usedTech(linksModel,yearsToCalc,transfer_techs,vintage)
13672                  and transfer_coefficient(transfer_techs,vintage,commodity,"coefficient")),
13673   
13674              (transfer_flowAlong.l(timeModelToCalc,linksModel,yearsToCalc,transfer_techs,vintage)
13675                      $(transfer_incidenceModel(nodesModelToCalc,linksModel) > 0)
13676                + transfer_flowAgainst.l(timeModelToCalc,linksModel,yearsToCalc,transfer_techs,vintage)
13677                      $(transfer_incidenceModel(nodesModelToCalc,linksModel) < 0))
13678              * timeLength(timeModelToCalc)
13679              * transfer_coefficient(transfer_techs,vintage,commodity,"coefficient")
13680   
13681              - (transfer_flowAlong.l(timeModelToCalc,linksModel,yearsToCalc,transfer_techs,vintage)
13682                      $(transfer_incidenceModel(nodesModelToCalc,linksModel) < 0)
13683                + transfer_flowAgainst.l(timeModelToCalc,linksModel,yearsToCalc,transfer_techs,vintage)
13684                      $(transfer_incidenceModel(nodesModelToCalc,linksModel) > 0))
13685              * timeLength(timeModelToCalc)
13686              * transfer_coefficient(transfer_techs,vintage,commodity,"coefficient")
13687   
13688              + 0.5 * ((transfer_flowAlong.l(timeModelToCalc,linksModel,yearsToCalc,transfer_techs,vintage)
13689                          $(transfer_incidenceModel(nodesModelToCalc,linksModel) <> 0)
13690                      + transfer_flowAgainst.l(timeModelToCalc,linksModel,yearsToCalc,transfer_techs,vintage)
13691                          $(transfer_incidenceModel(nodesModelToCalc,linksModel) <> 0))
13692                      * timeLength(timeModelToCalc)
13693                      * ( transfer_coefPerFlow(transfer_techs,vintage,commodity,"coefPerFlow")
13694                          + sum(link_types,
13695                              transfer_coefPerLength(transfer_techs,vintage,commodity,link_types,"coefPerLength")
13696                              * transfer_lengthParam(linksModel,link_types,"length")))))
13697      ;
13698   
13699  commodity_balance(timeModelToCalc,accNodesModel,accYears,balance_techComm(techs,commodity))
13700      = sum((nodesModelToCalc,yearsToCalc,vintage)
13701              $(commodity_balance_ext(timeModelToCalc,accNodesModel,nodesModelToCalc,accYears,yearsToCalc,techs,vintage,commodity)
13702                  and map_accNodesPostCalc(accNodesModel,nodesModelToCalc)
13703                  and map_accYearsPostCalc(accYears,yearsToCalc)),
13704          commodity_balance_ext(timeModelToCalc,accNodesModel,nodesModelToCalc,accYears,yearsToCalc,techs,vintage,commodity));
13705  option clear = commodity_balance_ext;
13706   
13707   
13708  * ==== annual commodity sums ====
13709   
13710  commodity_balance_annual(accNodesModel,accYears,techs,commodity,"netto")
13711      = sum(timeModelToCalc,
13712          commodity_balance(timeModelToCalc,accNodesModel,accYears,techs,commodity));
13713   
13714  commodity_balance_annual(accNodesModel,accYears,techs,commodity,"positive")
13715      = sum(timeModelToCalc
13716              $(commodity_balance(timeModelToCalc,accNodesModel,accYears,techs,commodity) > 0),
13717          commodity_balance(timeModelToCalc,accNodesModel,accYears,techs,commodity));
13718   
13719  commodity_balance_annual(accNodesModel,accYears,techs,commodity,"negative")
13720      = sum(timeModelToCalc
13721              $(commodity_balance(timeModelToCalc,accNodesModel,accYears,techs,commodity) < 0),
13722          commodity_balance(timeModelToCalc,accNodesModel,accYears,techs,commodity));
13723   
13724  commodity_balance_annual(accNodesModel,accYears,techs,commodity,"brutto")
13725      = commodity_balance_annual(accNodesModel,accYears,techs,commodity,"positive")
13726          - commodity_balance_annual(accNodesModel,accYears,techs,commodity,"negative");
13727   
13728  commodity_balance_annual(accNodesModel,accYears,techs,commodity,"flh")
13729      $(commodity_balance_annual(accNodesModel,accYears,techs,commodity,"brutto") > 0
13730          and converter_caps(accNodesModel,accYears,techs,commodity,"total") > 0 )
13731      = commodity_balance_annual(accNodesModel,accYears,techs,commodity,"brutto")
13732          / converter_caps(accNodesModel,accYears,techs,commodity,"total");
13733   
13734   
13735  * ==== marginal information ====
13736   
13737  marginals_balance(timeModelToCalc,nodesModelToCalc,yearsToCalc,commodity)
13738    $balance_usedBalance(nodesModelToCalc,yearsToCalc,commodity)
13739    =
13740    Eq_balance_commodities.m(timeModelToCalc,nodesModelToCalc,yearsToCalc,commodity);
13741   
13742  marginals_sourcesink_profile(timeModelToCalc,nodesModelToCalc,yearsToCalc,sourcesink_techs(techs),commodity)
13743      $( sourcesink_flow.m(timeModelToCalc,nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity) <> 0 )
13744      =
13745      sourcesink_flow.m(timeModelToCalc,nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity);
13746   
13747  marginals_sourcesink_sum(nodesModelToCalc,yearsToCalc,sourcesink_techs(techs),commodity)
13748      $( ( Eq_sourcesink_useLowerSum.m(nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity)
13749          + Eq_sourcesink_useUpperSum.m(nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity)
13750          + Eq_sourcesink_useFixedSum.m(nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity) ) <> eps )
13751      =
13752      ( Eq_sourcesink_useLowerSum.m(nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity)
13753      + Eq_sourcesink_useUpperSum.m(nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity)
13754      + Eq_sourcesink_useFixedSum.m(nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity) );
13755   
13756  marginals_indicator_bounds(accNodesModel,accYears,indicator)
13757      $( accounting_indicator.m(accNodesModel,accYears,indicator) <> 0 )
13758      =
13759      accounting_indicator.m(accNodesModel,accYears,indicator);
13760   
13761   
13762  * ==== R2A postcalc information ====
13763   
13765   
13766   
13767  * ==== round profiles to reduce size of gdx ====
13768   
13770  commodity_balance(timeModelToCalc,accNodesModel,accYears,techs,commodity)
13771      $commodity_balance(timeModelToCalc,accNodesModel,accYears,techs,commodity)
13772      = round(commodity_balance(timeModelToCalc,accNodesModel,accYears,techs,commodity), 6);
13773   
13774  transfer_flows(timeModelToCalc,nodesModelToCalc,nodesModelToCalc_a,linksModel,yearsToCalc,transfer_techs,commodity)
13775      $transfer_flows(timeModelToCalc,nodesModelToCalc,nodesModelToCalc_a,linksModel,yearsToCalc,transfer_techs,commodity)
13776      = round(transfer_flows(timeModelToCalc,nodesModelToCalc,nodesModelToCalc_a,linksModel,yearsToCalc,transfer_techs,commodity), 6);
13777   
13778  transfer_losses(timeModelToCalc,nodesModelToCalc,nodesModelToCalc_a,linksModel,yearsToCalc,transfer_techs,commodity)
13779      $transfer_losses(timeModelToCalc,nodesModelToCalc,nodesModelToCalc_a,linksModel,yearsToCalc,transfer_techs,commodity)
13780      = round(transfer_losses(timeModelToCalc,nodesModelToCalc,nodesModelToCalc_a,linksModel,yearsToCalc,transfer_techs,commodity), 6);
13781   
13782  storage_flows(timeModelToCalc,accNodesModel,accYears,storage_techs,commodity)
13783      $storage_flows(timeModelToCalc,accNodesModel,accYears,storage_techs,commodity)
13784      = round(storage_flows(timeModelToCalc,accNodesModel,accYears,storage_techs,commodity), 6);
13785   
13786  storage_level_out(timeModelToCalc,accNodesModel,accYears,storage_techs,commodity)
13787      $storage_level_out(timeModelToCalc,accNodesModel,accYears,storage_techs,commodity)
13788      = round(storage_level_out(timeModelToCalc,accNodesModel,accYears,storage_techs,commodity), 6);
13789   
13790  marginals_balance(timeModelToCalc,nodesModelToCalc,yearsToCalc,commodity)
13791      $marginals_balance(timeModelToCalc,nodesModelToCalc,yearsToCalc,commodity)
13792      = round(marginals_balance(timeModelToCalc,nodesModelToCalc,yearsToCalc,commodity), 6);
13793   
13794  marginals_sourcesink_profile(timeModelToCalc,nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity)
13795      $marginals_sourcesink_profile(timeModelToCalc,nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity)
13796      = round(marginals_sourcesink_profile(timeModelToCalc,nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity), 6);
13798   
INCLUDE    C:\Local\REMix\framework\remix\framework\model\source\postcalc\writegdx.gms
13801  * SPDX-FileCopyrightText: Copyright (c) 2023 German Aerospace Center (DLR)
13802  * SPDX-License-Identifier: BSD-3-Clause
13803   
13806   
13807  execute_unload "C:\Local\REMix\remix_nz\output\nz-h2_2020-2050\result\nz-h2_2020-2050.gdx"
13808      metadata
13809      timeModel
13810      timeModelToCalc
13811      nodesModel
13812      linksModel
13813      indicator
13814      commodity
13815      techs
13816      accNodesModel
13817      accYears
13818   
13819      map_nodesModel
13820      map_linksModel
13821      map_nodesAccounting
13822   
13823      indicator_accounting
13824      indicator_accounting_ref
13825      indicator_accounting_comp
13826      indicator_accounting_detailed
13827      indicator_accounting_links
13828   
13829      converter_caps
13830      converter_units
13832   
13833      transfer_caps
13834      transfer_links
13835      transfer_flows
13836      transfer_flows_annual
13837      transfer_losses
13838      transfer_losses_annual
13839   
13840      storage_caps
13841      storage_units
13842      storage_flows
13843      storage_level_out
13844      storage_flows_annual
13845      storage_losses_out
13846      storage_losses_annual
13848   
13849      commodity_balance
13850      commodity_balance_annual
13851   
13852      marginals_balance
13853      marginals_sourcesink_profile
13854      marginals_sourcesink_sum
13855      marginals_indicator_bounds
13856   
13858      ;
GAMS 40.4.0  d540b52e Oct 3, 2022           WEX-WEI x86 64bit/MS Windows - 01/30/24 10:50:31 Page 2
G e n e r a l   A l g e b r a i c   M o d e l i n g   S y s t e m
Include File Summary


   SEQ   GLOBAL TYPE      PARENT   LOCAL  FILENAME

     1        1 INPUT          0       0  C:\Local\REMix\framework\remix\framework\model\run_remix.gms
     2       12 IF DEXIST      1      12  C:\Local\REMix\remix_nz\output\nz-h2_2020-2050\data\
     3       15 INCLUDE        1      15  .C:\Local\REMix\framework\remix\framework\model\source\metadata.gms
     4       23 CALL           3       8  .printf "remix_version \"0.9.2\"\n" > c:\Local\REMix\remix_nz\process\225b\\metadata
     5       24 CALL           3       9  .printf "gams_version \"40.4.0\"\n" >> c:\Local\REMix\remix_nz\process\225b\\metadata
     6       25 CALL           3      10  .printf "timestamp \"01/30/24 10:50:31\"\n" >> c:\Local\REMix\remix_nz\process\225b\\metadata
     7       27 CALL           3      12  .printf "framework_path " >> c:\Local\REMix\remix_nz\process\225b\\metadata
     8       29 CALL           3      14  .cd C:\Local\REMix\framework\remix\framework\model\source && cd| sed "s/^/\"/;s/$/\"/" >> c:\Local\REMix\remix_nz\process\225b\\metadata
     9       31 CALL           3      18  .printf "\n" >> c:\Local\REMix\remix_nz\process\225b\\metadata
    10       32 CALL           3      19  .printf "framework_hash " >> c:\Local\REMix\remix_nz\process\225b\\metadata
    11       34 CALL           3      21  .cd C:\Local\REMix\framework\remix\framework\model\source && git rev-parse HEAD >nul 2>&1 && git rev-parse HEAD >> c:\Local\REMix\remix_nz\process\225b\\metadata
    12       36 CALL           3      25  .printf "\n" >> c:\Local\REMix\remix_nz\process\225b\\metadata
    13       37 CALL           3      26  .printf "framework_branch " >> c:\Local\REMix\remix_nz\process\225b\\metadata
    14       39 CALL           3      28  .cd C:\Local\REMix\framework\remix\framework\model\source && git rev-parse --abbrev-ref HEAD >nul 2>&1 && git rev-parse --abbrev-ref HEAD | sed "s/^/\"/;s/$/\"/" >> c:\Local\REMix\remix_nz\process\225b\\metadata
    15       41 CALL           3      32  .printf "\n" >> c:\Local\REMix\remix_nz\process\225b\\metadata
    16       43 CALL           3      34  .printf "project_path " >> c:\Local\REMix\remix_nz\process\225b\\metadata
    17       45 CALL           3      36  .cd C:\Local\REMix\remix_nz\output\nz-h2_2020-2050\data\./ && cd| sed "s/^/\"/;s/$/\"/" >> c:\Local\REMix\remix_nz\process\225b\\metadata
    18       47 CALL           3      40  .printf "\n" >> c:\Local\REMix\remix_nz\process\225b\\metadata
    19       48 CALL           3      41  .printf "project_hash " >> c:\Local\REMix\remix_nz\process\225b\\metadata
    20       50 CALL           3      43  .cd C:\Local\REMix\remix_nz\output\nz-h2_2020-2050\data\./ && git rev-parse HEAD >nul 2>&1 && git rev-parse HEAD | sed "s/^/\"/;s/$/\"/" >> c:\Local\REMix\remix_nz\process\225b\\metadata
    21       52 CALL           3      47  .printf "\n" >> c:\Local\REMix\remix_nz\process\225b\\metadata
    22       53 CALL           3      48  .printf "project_branch " >> c:\Local\REMix\remix_nz\process\225b\\metadata
    23       55 CALL           3      50  .cd C:\Local\REMix\remix_nz\output\nz-h2_2020-2050\data\./ && git rev-parse --abbrev-ref HEAD >nul 2>&1 && git rev-parse --abbrev-ref HEAD | sed "s/^/\"/;s/$/\"/" >> c:\Local\REMix\remix_nz\process\225b\\metadata
    24       57 CALL           3      54  .printf "\n" >> c:\Local\REMix\remix_nz\process\225b\\metadata
    25       60 INCLUDE        3      57  ..c:\Local\REMix\remix_nz\process\225b\metadata
    26       77 INCLUDE        1      16  .C:\Local\REMix\framework\remix\framework\model\source\data_inheritance.gms
    27      119 INCLUDE        1      25  .C:\Local\REMix\framework\remix\framework\model\source\remix.gms
    28      140 INCLUDE       27      21  ..C:\Local\REMix\framework\remix\framework\model\source\sets.gms
    29      160 IF EXIST      28      20  ..c:\Local\REMix\remix_nz\process\225b\map_aggregatetimemodel.csv
    30      211 IF EXIST      28      97  ..c:\Local\REMix\remix_nz\process\225b\set_nodesmodel.csv
    31      211 INCLUDE       28      97  ...c:\Local\REMix\remix_nz\process\225b\set_nodesmodel.csv
    32      224 IF EXIST      28      99  ..c:\Local\REMix\remix_nz\process\225b\set_nodesmodel.csv
    33      231 IF EXIST      28     106  ..c:\Local\REMix\remix_nz\process\225b\set_nodesdata.csv
    34      231 INCLUDE       28     106  ...c:\Local\REMix\remix_nz\process\225b\set_nodesdata.csv
    35      244 IF EXIST      28     108  ..c:\Local\REMix\remix_nz\process\225b\set_nodesdata.csv
    36      250 IF EXIST      28     114  ..c:\Local\REMix\remix_nz\process\225b\set_nodesmodelsel.csv
    37      250 INCLUDE       28     114  ...c:\Local\REMix\remix_nz\process\225b\set_nodesmodelsel.csv
    38      263 IF EXIST      28     116  ..c:\Local\REMix\remix_nz\process\225b\set_nodesmodelsel.csv
    39      265 IF EXIST      28     118  ..c:\Local\REMix\remix_nz\process\225b\set_nodesmodelsel.csv
    40      278 IF EXIST      28     131  ..c:\Local\REMix\remix_nz\process\225b\map_aggregatenodesmodel.csv
    41      278 INCLUDE       28     131  ...c:\Local\REMix\remix_nz\process\225b\map_aggregatenodesmodel.csv
    42      291 IF EXIST      28     133  ..c:\Local\REMix\remix_nz\process\225b\map_aggregatenodesmodel.csv
    43      294 IF EXIST      28     136  ..c:\Local\REMix\remix_nz\process\225b\map_aggregatenodesmodel.csv
    44      317 IF EXIST      28     159  ..c:\Local\REMix\remix_nz\process\225b\set_years.csv
    45      317 INCLUDE       28     159  ...c:\Local\REMix\remix_nz\process\225b\set_years.csv
    46      439 IF EXIST      28     161  ..c:\Local\REMix\remix_nz\process\225b\set_years.csv
    47      448 IF EXIST      28     170  ..c:\Local\REMix\remix_nz\process\225b\set_years.csv
    48      448 INCLUDE       28     170  ...c:\Local\REMix\remix_nz\process\225b\set_years.csv
    49      570 IF EXIST      28     172  ..c:\Local\REMix\remix_nz\process\225b\set_years.csv
    50      576 IF EXIST      28     178  ..c:\Local\REMix\remix_nz\process\225b\set_yearssel.csv
    51      576 INCLUDE       28     178  ...c:\Local\REMix\remix_nz\process\225b\set_yearssel.csv
    52      580 IF EXIST      28     180  ..c:\Local\REMix\remix_nz\process\225b\set_yearssel.csv
    53      598 IF EXIST      28     198  ..c:\Local\REMix\remix_nz\process\225b\set_activities.csv
    54      598 INCLUDE       28     198  ...c:\Local\REMix\remix_nz\process\225b\set_activities.csv
    55      607 IF EXIST      28     200  ..c:\Local\REMix\remix_nz\process\225b\set_activities.csv
    56      615 IF EXIST      28     208  ..c:\Local\REMix\remix_nz\process\225b\set_gridsegments.csv
    57      617 IF EXIST      28     210  ..c:\Local\REMix\remix_nz\process\225b\set_gridsegments.csv
    58      625 IF EXIST      28     218  ..c:\Local\REMix\remix_nz\process\225b\set_linksdata.csv
    59      625 INCLUDE       28     218  ...c:\Local\REMix\remix_nz\process\225b\set_linksdata.csv
    60      639 IF EXIST      28     220  ..c:\Local\REMix\remix_nz\process\225b\set_linksdata.csv
    61      657 IF EXIST      28     238  ..c:\Local\REMix\remix_nz\process\225b\set_link_types.csv
    62      657 INCLUDE       28     238  ...c:\Local\REMix\remix_nz\process\225b\set_link_types.csv
    63      661 IF EXIST      28     240  ..c:\Local\REMix\remix_nz\process\225b\set_link_types.csv
    64      670 IF EXIST      28     249  ..c:\Local\REMix\remix_nz\process\225b\set_commodities.csv
    65      670 INCLUDE       28     249  ...c:\Local\REMix\remix_nz\process\225b\set_commodities.csv
    66      678 IF EXIST      28     251  ..c:\Local\REMix\remix_nz\process\225b\set_commodities.csv
    67      687 IF EXIST      28     260  ..c:\Local\REMix\remix_nz\process\225b\set_indicators.csv
    68      687 INCLUDE       28     260  ...c:\Local\REMix\remix_nz\process\225b\set_indicators.csv
    69      696 IF EXIST      28     262  ..c:\Local\REMix\remix_nz\process\225b\set_indicators.csv
    70      705 IF EXIST      28     271  ..c:\Local\REMix\remix_nz\process\225b\set_converter_techs.csv
    71      705 INCLUDE       28     271  ...c:\Local\REMix\remix_nz\process\225b\set_converter_techs.csv
    72      725 IF EXIST      28     274  ..c:\Local\REMix\remix_nz\process\225b\set_storage_techs.csv
    73      725 INCLUDE       28     274  ...c:\Local\REMix\remix_nz\process\225b\set_storage_techs.csv
    74      730 IF EXIST      28     277  ..c:\Local\REMix\remix_nz\process\225b\set_transfer_techs.csv
    75      730 INCLUDE       28     277  ...c:\Local\REMix\remix_nz\process\225b\set_transfer_techs.csv
    76      734 IF EXIST      28     280  ..c:\Local\REMix\remix_nz\process\225b\set_sourcesink_techs.csv
    77      734 INCLUDE       28     280  ...c:\Local\REMix\remix_nz\process\225b\set_sourcesink_techs.csv
    78      744 IF EXIST      28     285  ..c:\Local\REMix\remix_nz\process\225b\set_converter_techs.csv
    79      744 INCLUDE       28     285  ...c:\Local\REMix\remix_nz\process\225b\set_converter_techs.csv
    80      762 IF EXIST      28     286  ..c:\Local\REMix\remix_nz\process\225b\set_converter_techs.csv
    81      766 IF EXIST      28     290  ..c:\Local\REMix\remix_nz\process\225b\set_storage_techs.csv
    82      766 INCLUDE       28     290  ...c:\Local\REMix\remix_nz\process\225b\set_storage_techs.csv
    83      769 IF EXIST      28     291  ..c:\Local\REMix\remix_nz\process\225b\set_storage_techs.csv
    84      774 IF EXIST      28     296  ..c:\Local\REMix\remix_nz\process\225b\set_transfer_techs.csv
    85      774 INCLUDE       28     296  ...c:\Local\REMix\remix_nz\process\225b\set_transfer_techs.csv
    86      776 IF EXIST      28     297  ..c:\Local\REMix\remix_nz\process\225b\set_transfer_techs.csv
    87      780 IF EXIST      28     301  ..c:\Local\REMix\remix_nz\process\225b\set_sourcesink_techs.csv
    88      780 INCLUDE       28     301  ...c:\Local\REMix\remix_nz\process\225b\set_sourcesink_techs.csv
    89      786 IF EXIST      28     302  ..c:\Local\REMix\remix_nz\process\225b\set_sourcesink_techs.csv
    90      796 IF EXIST      28     312  ..c:\Local\REMix\remix_nz\process\225b\set_degradation_states.csv
    91      798 IF EXIST      28     314  ..c:\Local\REMix\remix_nz\process\225b\set_degradation_states.csv
    92      807 IF EXIST      28     323  ..c:\Local\REMix\remix_nz\process\225b\set_soc.csv
    93      809 IF EXIST      28     325  ..c:\Local\REMix\remix_nz\process\225b\set_soc.csv
    94      825 IF EXIST      28     341  ..c:\Local\REMix\remix_nz\process\225b\transfer_linkstartend.csv
    95      825 INCLUDE       28     341  ...c:\Local\REMix\remix_nz\process\225b\transfer_linkstartend.csv
    96      852 IF EXIST      28     343  ..c:\Local\REMix\remix_nz\process\225b\transfer_linkstartend.csv
    97      866 BATINCLUDE    28     357  ...C:\Local\REMix\framework\remix\framework\model\source\battools\aggregateNodes.gms
    98      975 IF EXIST      28     464  ..c:\Local\REMix\remix_nz\process\225b\set_accnodes.csv
    99      977 IF EXIST      28     466  ..c:\Local\REMix\remix_nz\process\225b\set_accnodes.csv
   100     1042 IF EXIST      28     531  ..c:\Local\REMix\remix_nz\process\225b\map_accnodes.csv
   101     1044 IF EXIST      28     533  ..c:\Local\REMix\remix_nz\process\225b\map_accnodes.csv
   102     1098 INCLUDE       27      22  ..C:\Local\REMix\framework\remix\framework\model\source\accounting\input.gms
   103     1130 IF EXIST     102      32  ..c:\Local\REMix\remix_nz\process\225b\accounting_converterunits.csv
   104     1130 INCLUDE      102      32  ...c:\Local\REMix\remix_nz\process\225b\accounting_converterunits.csv
   105     1235 IF EXIST     102      34  ..c:\Local\REMix\remix_nz\process\225b\accounting_converterunits.csv
   106     1249 IF EXIST     102      48  ..c:\Local\REMix\remix_nz\process\225b\accounting_converteractivity.csv
   107     1249 INCLUDE      102      48  ...c:\Local\REMix\remix_nz\process\225b\accounting_converteractivity.csv
   108     1276 IF EXIST     102      50  ..c:\Local\REMix\remix_nz\process\225b\accounting_converteractivity.csv
   109     1293 IF EXIST     102      67  ..c:\Local\REMix\remix_nz\process\225b\accounting_converterstartup.csv
   110     1295 IF EXIST     102      69  ..c:\Local\REMix\remix_nz\process\225b\accounting_converterstartup.csv
   111     1314 IF EXIST     102      88  ..c:\Local\REMix\remix_nz\process\225b\accounting_storageunits.csv
   112     1314 INCLUDE      102      88  ...c:\Local\REMix\remix_nz\process\225b\accounting_storageunits.csv
   113     1335 IF EXIST     102      90  ..c:\Local\REMix\remix_nz\process\225b\accounting_storageunits.csv
   114     1357 IF EXIST     102     112  ..c:\Local\REMix\remix_nz\process\225b\accounting_transferlinks.csv
   115     1357 INCLUDE      102     112  ...c:\Local\REMix\remix_nz\process\225b\accounting_transferlinks.csv
   116     1364 IF EXIST     102     114  ..c:\Local\REMix\remix_nz\process\225b\accounting_transferlinks.csv
   117     1386 IF EXIST     102     136  ..c:\Local\REMix\remix_nz\process\225b\accounting_transferperlength.csv
   118     1386 INCLUDE      102     136  ...c:\Local\REMix\remix_nz\process\225b\accounting_transferperlength.csv
   119     1397 IF EXIST     102     138  ..c:\Local\REMix\remix_nz\process\225b\accounting_transferperlength.csv
   120     1412 IF EXIST     102     153  ..c:\Local\REMix\remix_nz\process\225b\accounting_sourcesinkflow.csv
   121     1412 INCLUDE      102     153  ...c:\Local\REMix\remix_nz\process\225b\accounting_sourcesinkflow.csv
   122     1422 IF EXIST     102     155  ..c:\Local\REMix\remix_nz\process\225b\accounting_sourcesinkflow.csv
   123     1436 IF EXIST     102     169  ..c:\Local\REMix\remix_nz\process\225b\accounting_perindicator.csv
   124     1436 INCLUDE      102     169  ...c:\Local\REMix\remix_nz\process\225b\accounting_perindicator.csv
   125     1444 IF EXIST     102     171  ..c:\Local\REMix\remix_nz\process\225b\accounting_perindicator.csv
   126     1470 IF EXIST     102     197  ..c:\Local\REMix\remix_nz\process\225b\accounting_indicatorbounds.csv
   127     1470 INCLUDE      102     197  ...c:\Local\REMix\remix_nz\process\225b\accounting_indicatorbounds.csv
   128     1474 IF EXIST     102     199  ..c:\Local\REMix\remix_nz\process\225b\accounting_indicatorbounds.csv
   129     1493 IF EXIST     102     218  ..c:\Local\REMix\remix_nz\process\225b\accounting_indicatorbounds_links.csv
   130     1495 IF EXIST     102     220  ..c:\Local\REMix\remix_nz\process\225b\accounting_indicatorbounds_links.csv
   131     1501 BATINCLUDE   102     226  ...C:\Local\REMix\framework\remix\framework\model\source\battools\aggregateAccountingMean.gms
   132     1560 BATINCLUDE   102     227  ...C:\Local\REMix\framework\remix\framework\model\source\battools\aggregateAccountingMean.gms
   133     1603 BATINCLUDE   102     228  ...C:\Local\REMix\framework\remix\framework\model\source\battools\aggregateAccountingMean.gms
   134     1646 BATINCLUDE   102     229  ...C:\Local\REMix\framework\remix\framework\model\source\battools\aggregateAccountingMean.gms
   135     1705 BATINCLUDE   102     230  ...C:\Local\REMix\framework\remix\framework\model\source\battools\aggregateAccountingMean.gms
   136     1764 BATINCLUDE   102     231  ...C:\Local\REMix\framework\remix\framework\model\source\battools\aggregateAccountingMean.gms
   137     1823 BATINCLUDE   102     232  ...C:\Local\REMix\framework\remix\framework\model\source\battools\aggregateAccountingMean.gms
   138     2232 INCLUDE       27      23  ..C:\Local\REMix\framework\remix\framework\model\source\accounting\annuities.gms
   139     2304 INCLUDE       27      25  ..C:\Local\REMix\framework\remix\framework\model\source\methods\mga_pre.gms
   140     2310 INCLUDE       27      26  ..C:\Local\REMix\framework\remix\framework\model\source\methods\pareto_pre.gms
   141     2316 INCLUDE       27      27  ..C:\Local\REMix\framework\remix\framework\model\source\postcalc\declaration.gms
   142     2333 IF DEXIST    141      17  ..C:\Local\REMix\remix_nz\output\nz-h2_2020-2050\result\
   143     2534 INCLUDE       27      28  ..C:\Local\REMix\framework\remix\framework\model\source\loadgdx.gms
   144     2543 INCLUDE       27      30  ..C:\Local\REMix\framework\remix\framework\model\source\core\converter.gms
   145     2646 IF EXIST     144     103  ..c:\Local\REMix\remix_nz\process\225b\converter_capacityparam.csv
   146     2646 INCLUDE      144     103  ...c:\Local\REMix\remix_nz\process\225b\converter_capacityparam.csv
   147     7905 IF EXIST     144     105  ..c:\Local\REMix\remix_nz\process\225b\converter_capacityparam.csv
   148     7913 BATINCLUDE   144     113  ...C:\Local\REMix\framework\remix\framework\model\source\battools\aggregateNodes.gms
   149     7924 BATINCLUDE   144     114  ...C:\Local\REMix\framework\remix\framework\model\source\battools\aggregateNodes.gms
   150     7957 IF EXIST     144     137  ..c:\Local\REMix\remix_nz\process\225b\converter_techparam.csv
   151     7957 INCLUDE      144     137  ...c:\Local\REMix\remix_nz\process\225b\converter_techparam.csv
   152     8011 IF EXIST     144     139  ..c:\Local\REMix\remix_nz\process\225b\converter_techparam.csv
   153     8033 IF EXIST     144     161  ..c:\Local\REMix\remix_nz\process\225b\converter_activityprofile.csv
   154     8033 INCLUDE      144     161  ...c:\Local\REMix\remix_nz\process\225b\converter_activityprofile.csv
   155     8311 IF EXIST     144     162  ..c:\Local\REMix\remix_nz\process\225b\converter_activityprofile.csv
   156     8313 IF EXIST     144     164  ..c:\Local\REMix\remix_nz\process\225b\converter_activityprofile.csv
   157     8333 IF EXIST     144     184  ..c:\Local\REMix\remix_nz\process\225b\converter_coefficient.csv
   158     8333 INCLUDE      144     184  ...c:\Local\REMix\remix_nz\process\225b\converter_coefficient.csv
   159     8499 IF EXIST     144     185  ..c:\Local\REMix\remix_nz\process\225b\converter_coefficient.csv
   160     8500 IF EXIST     144     186  ..c:\Local\REMix\remix_nz\process\225b\converter_coefficient.csv
   161     8502 IF EXIST     144     188  ..c:\Local\REMix\remix_nz\process\225b\converter_coefficient.csv
   162     8514 IF EXIST     144     200  ..c:\Local\REMix\remix_nz\process\225b\converter_coefficientprofile.csv
   163     8515 IF EXIST     144     201  ..c:\Local\REMix\remix_nz\process\225b\converter_coefficientprofile.csv
   164     8517 IF EXIST     144     203  ..c:\Local\REMix\remix_nz\process\225b\converter_coefficientprofile.csv
   165     9450 INCLUDE       27      31  ..C:\Local\REMix\framework\remix\framework\model\source\core\storage.gms
   166     9541 IF EXIST     165      91  ..c:\Local\REMix\remix_nz\process\225b\storage_reservoirparam.csv
   167     9541 INCLUDE      165      91  ...c:\Local\REMix\remix_nz\process\225b\storage_reservoirparam.csv
   168     9677 IF EXIST     165      93  ..c:\Local\REMix\remix_nz\process\225b\storage_reservoirparam.csv
   169     9681 BATINCLUDE   165      97  ...C:\Local\REMix\framework\remix\framework\model\source\battools\aggregateNodes.gms
   170     9692 BATINCLUDE   165      98  ...C:\Local\REMix\framework\remix\framework\model\source\battools\aggregateNodes.gms
   171     9728 IF EXIST     165     124  ..c:\Local\REMix\remix_nz\process\225b\storage_techparam.csv
   172     9728 INCLUDE      165     124  ...c:\Local\REMix\remix_nz\process\225b\storage_techparam.csv
   173     9740 IF EXIST     165     126  ..c:\Local\REMix\remix_nz\process\225b\storage_techparam.csv
   174     9761 IF EXIST     165     147  ..c:\Local\REMix\remix_nz\process\225b\storage_sizeparam.csv
   175     9761 INCLUDE      165     147  ...c:\Local\REMix\remix_nz\process\225b\storage_sizeparam.csv
   176     9773 IF EXIST     165     149  ..c:\Local\REMix\remix_nz\process\225b\storage_sizeparam.csv
   177     9790 IF EXIST     165     166  ..c:\Local\REMix\remix_nz\process\225b\storage_socparam.csv
   178     9792 IF EXIST     165     168  ..c:\Local\REMix\remix_nz\process\225b\storage_socparam.csv
   179     9811 IF EXIST     165     187  ..c:\Local\REMix\remix_nz\process\225b\storage_degradationparam.csv
   180     9813 IF EXIST     165     189  ..c:\Local\REMix\remix_nz\process\225b\storage_degradationparam.csv
   181     9842 IF EXIST     165     218  ..c:\Local\REMix\remix_nz\process\225b\storage_levelprofile.csv
   182     9843 IF EXIST     165     219  ..c:\Local\REMix\remix_nz\process\225b\storage_levelprofile.csv
   183     9845 IF EXIST     165     221  ..c:\Local\REMix\remix_nz\process\225b\storage_levelprofile.csv
   184    10665 INCLUDE       27      32  ..C:\Local\REMix\framework\remix\framework\model\source\core\transfer.gms
   185    10732 IF EXIST     184      73  ..c:\Local\REMix\remix_nz\process\225b\transfer_linksparam.csv
   186    10732 INCLUDE      184      73  ...c:\Local\REMix\remix_nz\process\225b\transfer_linksparam.csv
   187    10759 IF EXIST     184      75  ..c:\Local\REMix\remix_nz\process\225b\transfer_linksparam.csv
   188    10775 IF EXIST     184      91  ..c:\Local\REMix\remix_nz\process\225b\transfer_flowprofile.csv
   189    10777 IF EXIST     184      93  ..c:\Local\REMix\remix_nz\process\225b\transfer_flowprofile.csv
   190    10797 IF EXIST     184     113  ..c:\Local\REMix\remix_nz\process\225b\transfer_techparam.csv
   191    10797 INCLUDE      184     113  ...c:\Local\REMix\remix_nz\process\225b\transfer_techparam.csv
   192    10802 IF EXIST     184     115  ..c:\Local\REMix\remix_nz\process\225b\transfer_techparam.csv
   193    10816 IF EXIST     184     129  ..c:\Local\REMix\remix_nz\process\225b\transfer_coefficient.csv
   194    10816 INCLUDE      184     129  ...c:\Local\REMix\remix_nz\process\225b\transfer_coefficient.csv
   195    10821 IF EXIST     184     131  ..c:\Local\REMix\remix_nz\process\225b\transfer_coefficient.csv
   196    10835 IF EXIST     184     145  ..c:\Local\REMix\remix_nz\process\225b\transfer_coefperflow.csv
   197    10835 INCLUDE      184     145  ...c:\Local\REMix\remix_nz\process\225b\transfer_coefperflow.csv
   198    10840 IF EXIST     184     147  ..c:\Local\REMix\remix_nz\process\225b\transfer_coefperflow.csv
   199    10854 IF EXIST     184     161  ..c:\Local\REMix\remix_nz\process\225b\transfer_coefperlength.csv
   200    10854 INCLUDE      184     161  ...c:\Local\REMix\remix_nz\process\225b\transfer_coefperlength.csv
   201    10861 IF EXIST     184     163  ..c:\Local\REMix\remix_nz\process\225b\transfer_coefperlength.csv
   202    10875 IF EXIST     184     177  ..c:\Local\REMix\remix_nz\process\225b\transfer_reactperlength.csv
   203    10877 IF EXIST     184     179  ..c:\Local\REMix\remix_nz\process\225b\transfer_reactperlength.csv
   204    10891 IF EXIST     184     193  ..c:\Local\REMix\remix_nz\process\225b\transfer_lengthparam.csv
   205    10891 INCLUDE      184     193  ...c:\Local\REMix\remix_nz\process\225b\transfer_lengthparam.csv
   206    10918 IF EXIST     184     195  ..c:\Local\REMix\remix_nz\process\225b\transfer_lengthparam.csv
   207    10932 IF EXIST     184     209  ..c:\Local\REMix\remix_nz\process\225b\transfer_gridsegments.csv
   208    10934 IF EXIST     184     211  ..c:\Local\REMix\remix_nz\process\225b\transfer_gridsegments.csv
   209    11516 INCLUDE       27      33  ..C:\Local\REMix\framework\remix\framework\model\source\core\sourcesink.gms
   210    11554 IF EXIST     209      38  ..c:\Local\REMix\remix_nz\process\225b\sourcesink_config.csv
   211    11554 INCLUDE      209      38  ...c:\Local\REMix\remix_nz\process\225b\sourcesink_config.csv
   212    11751 IF EXIST     209      40  ..c:\Local\REMix\remix_nz\process\225b\sourcesink_config.csv
   213    11755 BATINCLUDE   209      44  ...C:\Local\REMix\framework\remix\framework\model\source\battools\aggregateNodes.gms
   214    11783 IF EXIST     209      62  ..c:\Local\REMix\remix_nz\process\225b\sourcesink_profile.csv
   215    11783 INCLUDE      209      62  ...c:\Local\REMix\remix_nz\process\225b\sourcesink_profile.csv
   216    11836 IF EXIST     209      63  ..c:\Local\REMix\remix_nz\process\225b\sourcesink_profile.csv
   217    11837 IF EXIST     209      64  ..c:\Local\REMix\remix_nz\process\225b\sourcesink_profile.csv
   218    11839 IF EXIST     209      66  ..c:\Local\REMix\remix_nz\process\225b\sourcesink_profile.csv
   219    11859 IF EXIST     209      86  ..c:\Local\REMix\remix_nz\process\225b\sourcesink_annualsum.csv
   220    11859 INCLUDE      209      86  ...c:\Local\REMix\remix_nz\process\225b\sourcesink_annualsum.csv
   221    11983 IF EXIST     209      88  ..c:\Local\REMix\remix_nz\process\225b\sourcesink_annualsum.csv
   222    11986 BATINCLUDE   209      91  ...C:\Local\REMix\framework\remix\framework\model\source\battools\aggregateNodes.gms
   223    12166 INCLUDE       27      34  ..C:\Local\REMix\framework\remix\framework\model\source\core\balance.gms
   224    12302 INCLUDE       27      36  ..C:\Local\REMix\framework\remix\framework\model\source\accounting\equations.gms
   225    12724 INCLUDE       27      37  ..C:\Local\REMix\framework\remix\framework\model\source\optiframe.gms
   226    12765 INCLUDE       27      71  ..C:\Local\REMix\framework\remix\framework\model\source\methods\checkanno.gms
   227    12776 INCLUDE       27      74  ..C:\Local\REMix\framework\remix\framework\model\source\methods\pips.gms
   228    12785 INCLUDE       27      77  ..C:\Local\REMix\framework\remix\framework\model\source\methods\solve.gms
   229    12991 INCLUDE       27      80  ..C:\Local\REMix\framework\remix\framework\model\source\methods\pareto.gms
   230    13000 INCLUDE       27      83  ..C:\Local\REMix\framework\remix\framework\model\source\methods\mga.gms
   231    13009 INCLUDE       27      86  ..C:\Local\REMix\framework\remix\framework\model\source\methods\iternodes.gms
   232    13018 INCLUDE       27      89  ..C:\Local\REMix\framework\remix\framework\model\source\postcalc\definition.gms
   233    13800 INCLUDE       27      90  ..C:\Local\REMix\framework\remix\framework\model\source\postcalc\writegdx.gms


COMPILATION TIME     =       13.812 SECONDS     78 MB  40.4.0 d540b52e WEX-WEI
GAMS 40.4.0  d540b52e Oct 3, 2022           WEX-WEI x86 64bit/MS Windows - 01/30/24 10:50:31 Page 3
G e n e r a l   A l g e b r a i c   M o d e l i n g   S y s t e m
Range Statistics    SOLVE remix Using MIP From line 12976


RANGE STATISTICS (ABSOLUTE NON-ZERO FINITE VALUES)

RHS       [min, max] : [ 2.000E-06, 7.079E+04] - Zero values observed as well
Bound     [min, max] : [ 1.000E-01, 1.000E-01] - Zero values observed as well
Matrix    [min, max] : [ 1.000E-02, 3.611E+02]

GAMS 40.4.0  d540b52e Oct 3, 2022           WEX-WEI x86 64bit/MS Windows - 01/30/24 10:50:31 Page 4
G e n e r a l   A l g e b r a i c   M o d e l i n g   S y s t e m
Model Statistics    SOLVE remix Using MIP From line 12976


LOOPS                           optiframeToCalc   of1


MODEL STATISTICS

BLOCKS OF EQUATIONS          75     SINGLE EQUATIONS    5,904,808
BLOCKS OF VARIABLES          38     SINGLE VARIABLES    6,089,029
NON ZERO ELEMENTS    17,544,089


GENERATION TIME      =      135.593 SECONDS  6,066 MB  40.4.0 d540b52e WEX-WEI


EXECUTION TIME       =      201.609 SECONDS  6,066 MB  40.4.0 d540b52e WEX-WEI
               L O O P S         optiframeToCalc of1

GAMS 40.4.0  d540b52e Oct 3, 2022           WEX-WEI x86 64bit/MS Windows - 01/30/24 10:50:31 Page 5
G e n e r a l   A l g e b r a i c   M o d e l i n g   S y s t e m
Solution Report     SOLVE remix Using MIP From line 12976


               S O L V E      S U M M A R Y

     MODEL   remix               OBJECTIVE  accounting_objective
     TYPE    MIP                 DIRECTION  MINIMIZE
     SOLVER  CPLEX               FROM LINE  12976

**** SOLVER STATUS     1 Normal Completion
**** MODEL STATUS      1 Optimal
**** OBJECTIVE VALUE             6011.4815

 RESOURCE USAGE, LIMIT        562.313    604800.000
 ITERATION COUNT, LIMIT       233    2147483647
--- GAMS/Cplex Link licensed for continuous and discrete problems.

Reading parameter(s) from "c:\Local\REMix\remix_nz\process\cplex.opt"
>>  rerun no
>>  iis 1
>>  lpmethod 4
>>  barorder 0
>>  preind 1
>>  scaind 0
>>  predual -1
>>  baralg 0
>>  barstartalg 1
>>  barepcomp 1e-6
>>  solutiontype 2
>>  startalg 4
>>  epgap 1e-3
>>  quality 1
>>  barcolnz 0
>>  threads 4
>>  parallelmode 1
Finished reading from "c:\Local\REMix\remix_nz\process\cplex.opt"

--- GMO setup time: 0.00s
--- Space for names approximately 745.28 Mb
--- Use option 'names no' to turn use of names off
--- GMO memory 2176.79 Mb (peak 2223.24 Mb)
--- Dictionary memory 0.00 Mb
--- Cplex 22.1.0.0 link memory 183.71 Mb (peak 1251.54 Mb)
--- Starting Cplex


--- LP status (1): optimal.
--- Cplex Time: 552.27sec (det. 465402.43 ticks)


Optimal solution found
Objective:         6011.481488

Solution Quality Statistics:
                                   unscaled                scaled
                               max         sum         max         sum
primal infeasibility        1.252e-03   1.154e-01   1.252e-03   1.154e-01
dual infeasibility          0.000e+00   0.000e+00   0.000e+00   0.000e+00
primal residual             1.510e-10   2.539e-10   1.510e-10   2.539e-10
dual residual               1.200e-05   1.160e-04   1.200e-05   1.160e-04
primal solution vector      6.011e+03   2.640e+06   6.011e+03   2.640e+06
dual solution vector        2.243e+03   2.091e+05   2.243e+03   2.091e+05
slacks                      7.079e+04   1.591e+06   7.079e+04   1.591e+06
reduced costs               3.611e+02   5.202e+06   3.611e+02   5.202e+06
comp. slackness viol.       4.887e-05   2.493e-02




**** REPORT SUMMARY :        0     NONOPT
                             0 INFEASIBLE
                             0  UNBOUNDED
GAMS 40.4.0  d540b52e Oct 3, 2022           WEX-WEI x86 64bit/MS Windows - 01/30/24 10:50:31 Page 6
G e n e r a l   A l g e b r a i c   M o d e l i n g   S y s t e m
E x e c u t i o n


**** REPORT FILE SUMMARY

opt c:\Local\REMix\remix_nz\process\cplex.opt


EXECUTION TIME       =       73.031 SECONDS  5,677 MB  40.4.0 d540b52e WEX-WEI


USER: Medium MUD - 10 User License                   S220920|0002AO-GEN
      University of Canterbury, Civil Engineering Department    DC16319
      License for teaching and research at degree granting institutions


**** FILE SUMMARY

Input      C:\Local\REMix\framework\remix\framework\model\run_remix.gms
Output     c:\Local\REMix\remix_nz\process\run_remix.lst
