GAMS 40.4.0  d540b52e Oct 3, 2022           WEX-WEI x86 64bit/MS Windows - 10/04/23 17:20:14 Page 1
G e n e r a l   A l g e b r a i c   M o d e l i n g   S y s t e m
C o m p i l a t i o n


   1  * SPDX-FileCopyrightText: Copyright (c) 2023 German Aerospace Center (DLR)
   2  * SPDX-License-Identifier: BSD-3-Clause
   3   
   4  * ==== REMix version number ====
   6   
   7  * ==== global settings ====
  11   
  13   
  14  * ==== write metadata and inherit dataset ====
INCLUDE    C:\Local\REMix\framework\remix\framework\model\source\metadata.gms
  22   
  26   
  42   
  58   
  59  set metadata(*) /
INCLUDE    c:\Local\REMix\remix_nz\process\225b\metadata
  61  remix_version "0.9.2"
  62  gams_version "40.4.0"
  63  timestamp "10/04/23 17:20:14"
  64  framework_path "C:\Local\REMix\framework\remix\framework\model\source"
  65   
  66  framework_hash 96c2159997fb47c52b8300c49677756ddfb1ee40
  67   
  68  framework_branch "dev"
  69   
  70  project_path "C:\Local\REMix\remix_nz\output\med_pop_out_base_2030\data"
  71   
  72  project_hash "956b746c42e6e01e662f2591b03a0745ac7e15d7"
  73   
  74  project_branch "main"
  75   
  76  /;
INCLUDE    C:\Local\REMix\framework\remix\framework\model\source\data_inheritance.gms
  78  * SPDX-FileCopyrightText: Copyright (c) 2023 German Aerospace Center (DLR)
  79  * SPDX-License-Identifier: BSD-3-Clause
  80   
  83   
  88   
  89  * pandas based data inheritance reading in the dat files, merging them and writing csv files in the scrdir
 109  ;
 110   
 114   
 115  * ==== run remix ====
INCLUDE    C:\Local\REMix\framework\remix\framework\model\source\remix.gms
 120  * SPDX-FileCopyrightText: Copyright (c) 2023 German Aerospace Center (DLR)
 121  * SPDX-License-Identifier: BSD-3-Clause
 122   
 123  * ==== global settings ====
 130   
 133   
 135   
 138   
 139  * ==== include modules ====
INCLUDE    C:\Local\REMix\framework\remix\framework\model\source\sets.gms
 141  * SPDX-FileCopyrightText: Copyright (c) 2023 German Aerospace Center (DLR)
 142  * SPDX-License-Identifier: BSD-3-Clause
 143   
 144  * // # sets
 145  * // Sets are the indices of variables and parameters.
 146   
 147  * // ## Reference
 148  * // {special_table_sets}
 149   
 150  * // ## Input Files
 151  * // {special_table_set_input_files}
 813   
 814  map_accNodes(accNodesModel,accNodesModel_aggregation)
 815      $sum((nodesData, nodesModelToCalc)
 816              $( sameas(nodesModelToCalc,accNodesModel)
 817                  and map_accNodesLoad(nodesData,accNodesModel_aggregation)
 818                  and aggregateNodesModel(nodesData,nodesModelToCalc)), 1) = yes;
 819   
 820  map_accNodes(accNodesModel,"global")$sum(nodesModelToCalc$sameas(accNodesModel,nodesModelToCalc), 1) = yes;
 821  map_accNodes(accNodesModel,"global")$sum(accNodes$sameas(accNodesModel,accNodes), 1) = yes;
 822  map_accNodes(accNodesModel,accNodesModel) = yes;
 823  map_accLinks(accLinksModel,"global")$sum(linksModelToCalc$sameas(accLinksModel,linksModelToCalc), 1) = yes;
 824  map_accLinks(accLinksModel,accLinksModel) = yes;
 825  map_accYears(accYears,"horizon")$sum(yearsToCalc$sameas(accYears,yearsToCalc), 1)  = yes;
 826  map_accYears(accYears,accYears) = yes;
 827   
 828  map_accNodesToCalc(accNodesModel,nodesModelToCalc)
 829      $sum((nodesData)
 830              $( map_accNodesLoad(nodesData,accNodesModel)
 831                  and aggregateNodesModel(nodesData,nodesModelToCalc)), 1) = yes;
 832   
 833  map_accNodesToCalc("global",nodesModelToCalc) = yes;
 834  map_accNodesToCalc(accNodesModel,nodesModelToCalc)$sameas(accNodesModel,nodesModelToCalc) = yes;
 835  map_accLinksToCalc("global",linksModelToCalc) = yes;
 836  map_accLinksToCalc(accLinksModel,linksModelToCalc)$sameas(accLinksModel,linksModelToCalc) = yes;
 837  map_accYearsToCalc("horizon",yearsToCalc) = yes;
 838  map_accYearsToCalc(accYears,yearsToCalc)$sameas(accYears,yearsToCalc) = yes;
 839   
 840  * Duplicate sets for postcalc reporting without horizon and accYears
 841  map_accNodesPostCalc(accNodesModel,nodesModelToCalc) = map_accNodesToCalc(accNodesModel,nodesModelToCalc);
 842  map_accLinksPostCalc(accLinksModel,linksModelToCalc) = map_accLinksToCalc(accLinksModel,linksModelToCalc);
 843  map_accYearsPostCalc(accYears,yearsToCalc)$sameas(accYears,yearsToCalc) = yes;
 844  map_accYearsPostCalc(accYears,years)$(sameas(accYears,years) and years.val < sum(yearsToCalc$(ord(yearsToCalc) = 1), yearsToCalc.val)) = yes;
 845   
 846  set map_nodesAccounting(accNodesModel_aggregation,accNodesModel) "Map accounting nodes describes the mapping between model accounting nodes and data nodes." ;
 847  option map_nodesAccounting < map_accNodes;
 848   
 849  * ==== Generic sets  ====
 850  * These set names are repeated across different profile parameters.
 851  * they are not strictly related to each other and are not input data but
 852  * are needed for validation.
 853  ** // PROFILE: profileTypes | Profile Types | OEO_00140056:flow potential | set_profiletypes.csv
 854   
 855  ** // SET: scenario | Scenario | OEO_00000364:scenario | set_scenarios.csv
 856  * "Scenario indexes help to differentiate scenarios." /
 857   
 858  ** // SET: capType | Capacity Types | OEO_00030019:balance process attribute | set_captypes.csv
 859  * "Capacity types differentiate investment decisions." /
 860   
 861  ** // SET: balanceType | Balance Types | OEO_00030019:balance process attribute | set_balancetypes.csv
 862  * "Balance types differentiate types of balances." /
INCLUDE    C:\Local\REMix\framework\remix\framework\model\source\accounting\input.gms
 864  * SPDX-FileCopyrightText: Copyright (c) 2023 German Aerospace Center (DLR)
 865  * SPDX-License-Identifier: BSD-3-Clause
 866   
 867  * // # accounting_input
 868  * // The parameters in this file describe the accounting of indicators in the model.
 869   
 870  * // ## Variables
 871  * // {special_table_input_variables}
1220   
1221  * Aggregate accounting parameters
BATINCLUDE C:\Local\REMix\framework\remix\framework\model\source\battools\aggregateAccountingMean.gms
1223  * SPDX-FileCopyrightText: Copyright (c) 2023 German Aerospace Center (DLR)
1224  * SPDX-License-Identifier: BSD-3-Clause
1225   
1227   
1229   
1230  set accounting_converterUnitsNonzero(indicator,accnodesData,converter_techs,vintage);
1231  accounting_converterUnitsNonzero(indicator,accnodesData,converter_techs,vintage)
1232      $sum(pc_accounting_converterUnits$accounting_converterUnitsIn(indicator,accnodesData,converter_techs,vintage,pc_accounting_converterUnits), 1)
1233      = yes;
1234   
1236  set accounting_converterUnitsChk(indicator,nodesModel,converter_techs,vintage,pc_accounting_converterUnits);
1237  accounting_converterUnitsChk(indicator,nodesModel,converter_techs,vintage,"useAnnuity")
1238      $sum((nodesData,accnodesData)
1239              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1240                  and accounting_converterUnitsNonzero(indicator,accnodesData,converter_techs,vintage)), 1)
1241      = smax((nodesData,accnodesData)
1242              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1243                  and accounting_converterUnitsNonzero(indicator,accnodesData,converter_techs,vintage)),
1244          accounting_converterUnitsIn(indicator,accnodesData,converter_techs,vintage,"useAnnuity"))
1245      - smin((nodesData,accnodesData)
1246              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1247                  and accounting_converterUnitsNonzero(indicator,accnodesData,converter_techs,vintage)),
1248          accounting_converterUnitsIn(indicator,accnodesData,converter_techs,vintage,"useAnnuity"));
1249   
1250  abort$sum(accounting_converterUnitsChk(indicator,nodesModel,converter_techs,vintage,pc_accounting_converterUnits), 1) "Cannot aggregate technologies with different useAnnuity values."
1252   
1253  parameter accounting_converterUnitsAgg(indicator,nodesModel,converter_techs,vintage,pc_accounting_converterUnits);
1254  accounting_converterUnitsAgg(indicator,nodesModel,converter_techs,vintage,pc_accounting_converterUnits)
1255      $sum((nodesData,accnodesData)
1256              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1257                  and accounting_converterUnitsNonzero(indicator,accnodesData,converter_techs,vintage)), 1)
1258      = sum((nodesData,accnodesData)
1259              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1260                  and accounting_converterUnitsNonzero(indicator,accnodesData,converter_techs,vintage)),
1261          accounting_converterUnitsIn(indicator,accnodesData,converter_techs,vintage,pc_accounting_converterUnits))
1262      / sum((nodesData,accnodesData)
1263              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1264                  and accounting_converterUnitsNonzero(indicator,accnodesData,converter_techs,vintage)),
1265          1);
1266   
1267  parameter accounting_converterUnits(indicator,nodesModel,converter_techs,vintage,pc_accounting_converterUnits);
1268  loop(accnodes,
1269  accounting_converterUnits(indicator,nodesModel,converter_techs,vintage,pc_accounting_converterUnits)
1270      $sum(accnodesData$(map_accnodesToCalc(accnodes,nodesModel) and sameas(accnodes,accnodesData)
1271                              and accounting_converterUnitsIn(indicator,accnodesData,converter_techs,vintage,pc_accounting_converterUnits)), 1)
1272      = sum(accnodesData$(map_accnodesToCalc(accnodes,nodesModel) and sameas(accnodes,accnodesData)),
1273              accounting_converterUnitsIn(indicator,accnodesData,converter_techs,vintage,pc_accounting_converterUnits));
1274  );
1275   
1276  accounting_converterUnits(indicator,nodesModel,converter_techs,vintage,pc_accounting_converterUnits)
1277      $accounting_converterUnitsAgg(indicator,nodesModel,converter_techs,vintage,pc_accounting_converterUnits)
1278      = accounting_converterUnitsAgg(indicator,nodesModel,converter_techs,vintage,pc_accounting_converterUnits);
1279   
1280  * option kill %paramName%Nonzero %paramName%Chk %paramName%Agg
BATINCLUDE C:\Local\REMix\framework\remix\framework\model\source\battools\aggregateAccountingMean.gms
1282  * SPDX-FileCopyrightText: Copyright (c) 2023 German Aerospace Center (DLR)
1283  * SPDX-License-Identifier: BSD-3-Clause
1284   
1286   
1288   
1289  set accounting_converterActivityNonzero(indicator,accnodesData,converter_techs,vintage,activity);
1290  accounting_converterActivityNonzero(indicator,accnodesData,converter_techs,vintage,activity)
1291      $sum(pc_accounting_converterActivity$accounting_converterActivityIn(indicator,accnodesData,converter_techs,vintage,activity,pc_accounting_converterActivity), 1)
1292      = yes;
1293   
1295   
1296  parameter accounting_converterActivityAgg(indicator,nodesModel,converter_techs,vintage,activity,pc_accounting_converterActivity);
1297  accounting_converterActivityAgg(indicator,nodesModel,converter_techs,vintage,activity,pc_accounting_converterActivity)
1298      $sum((nodesData,accnodesData)
1299              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1300                  and accounting_converterActivityNonzero(indicator,accnodesData,converter_techs,vintage,activity)), 1)
1301      = sum((nodesData,accnodesData)
1302              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1303                  and accounting_converterActivityNonzero(indicator,accnodesData,converter_techs,vintage,activity)),
1304          accounting_converterActivityIn(indicator,accnodesData,converter_techs,vintage,activity,pc_accounting_converterActivity))
1305      / sum((nodesData,accnodesData)
1306              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1307                  and accounting_converterActivityNonzero(indicator,accnodesData,converter_techs,vintage,activity)),
1308          1);
1309   
1310  parameter accounting_converterActivity(indicator,nodesModel,converter_techs,vintage,activity,pc_accounting_converterActivity);
1311  loop(accnodes,
1312  accounting_converterActivity(indicator,nodesModel,converter_techs,vintage,activity,pc_accounting_converterActivity)
1313      $sum(accnodesData$(map_accnodesToCalc(accnodes,nodesModel) and sameas(accnodes,accnodesData)
1314                              and accounting_converterActivityIn(indicator,accnodesData,converter_techs,vintage,activity,pc_accounting_converterActivity)), 1)
1315      = sum(accnodesData$(map_accnodesToCalc(accnodes,nodesModel) and sameas(accnodes,accnodesData)),
1316              accounting_converterActivityIn(indicator,accnodesData,converter_techs,vintage,activity,pc_accounting_converterActivity));
1317  );
1318   
1319  accounting_converterActivity(indicator,nodesModel,converter_techs,vintage,activity,pc_accounting_converterActivity)
1320      $accounting_converterActivityAgg(indicator,nodesModel,converter_techs,vintage,activity,pc_accounting_converterActivity)
1321      = accounting_converterActivityAgg(indicator,nodesModel,converter_techs,vintage,activity,pc_accounting_converterActivity);
1322   
1323  * option kill %paramName%Nonzero %paramName%Chk %paramName%Agg
BATINCLUDE C:\Local\REMix\framework\remix\framework\model\source\battools\aggregateAccountingMean.gms
1325  * SPDX-FileCopyrightText: Copyright (c) 2023 German Aerospace Center (DLR)
1326  * SPDX-License-Identifier: BSD-3-Clause
1327   
1329   
1331   
1332  set accounting_converterStartupNonzero(indicator,accnodesData,converter_techs,vintage);
1333  accounting_converterStartupNonzero(indicator,accnodesData,converter_techs,vintage)
1334      $sum(pc_accounting_converterStartup$accounting_converterStartupIn(indicator,accnodesData,converter_techs,vintage,pc_accounting_converterStartup), 1)
1335      = yes;
1336   
1338   
1339  parameter accounting_converterStartupAgg(indicator,nodesModel,converter_techs,vintage,pc_accounting_converterStartup);
1340  accounting_converterStartupAgg(indicator,nodesModel,converter_techs,vintage,pc_accounting_converterStartup)
1341      $sum((nodesData,accnodesData)
1342              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1343                  and accounting_converterStartupNonzero(indicator,accnodesData,converter_techs,vintage)), 1)
1344      = sum((nodesData,accnodesData)
1345              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1346                  and accounting_converterStartupNonzero(indicator,accnodesData,converter_techs,vintage)),
1347          accounting_converterStartupIn(indicator,accnodesData,converter_techs,vintage,pc_accounting_converterStartup))
1348      / sum((nodesData,accnodesData)
1349              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1350                  and accounting_converterStartupNonzero(indicator,accnodesData,converter_techs,vintage)),
1351          1);
1352   
1353  parameter accounting_converterStartup(indicator,nodesModel,converter_techs,vintage,pc_accounting_converterStartup);
1354  loop(accnodes,
1355  accounting_converterStartup(indicator,nodesModel,converter_techs,vintage,pc_accounting_converterStartup)
1356      $sum(accnodesData$(map_accnodesToCalc(accnodes,nodesModel) and sameas(accnodes,accnodesData)
1357                              and accounting_converterStartupIn(indicator,accnodesData,converter_techs,vintage,pc_accounting_converterStartup)), 1)
1358      = sum(accnodesData$(map_accnodesToCalc(accnodes,nodesModel) and sameas(accnodes,accnodesData)),
1359              accounting_converterStartupIn(indicator,accnodesData,converter_techs,vintage,pc_accounting_converterStartup));
1360  );
1361   
1362  accounting_converterStartup(indicator,nodesModel,converter_techs,vintage,pc_accounting_converterStartup)
1363      $accounting_converterStartupAgg(indicator,nodesModel,converter_techs,vintage,pc_accounting_converterStartup)
1364      = accounting_converterStartupAgg(indicator,nodesModel,converter_techs,vintage,pc_accounting_converterStartup);
1365   
1366  * option kill %paramName%Nonzero %paramName%Chk %paramName%Agg
BATINCLUDE C:\Local\REMix\framework\remix\framework\model\source\battools\aggregateAccountingMean.gms
1368  * SPDX-FileCopyrightText: Copyright (c) 2023 German Aerospace Center (DLR)
1369  * SPDX-License-Identifier: BSD-3-Clause
1370   
1372   
1374   
1375  set accounting_storageUnitsNonzero(indicator,accnodesData,storage_techs,vintage);
1376  accounting_storageUnitsNonzero(indicator,accnodesData,storage_techs,vintage)
1377      $sum(pc_accounting_storageUnits$accounting_storageUnitsIn(indicator,accnodesData,storage_techs,vintage,pc_accounting_storageUnits), 1)
1378      = yes;
1379   
1381  set accounting_storageUnitsChk(indicator,nodesModel,storage_techs,vintage,pc_accounting_storageUnits);
1382  accounting_storageUnitsChk(indicator,nodesModel,storage_techs,vintage,"useAnnuity")
1383      $sum((nodesData,accnodesData)
1384              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1385                  and accounting_storageUnitsNonzero(indicator,accnodesData,storage_techs,vintage)), 1)
1386      = smax((nodesData,accnodesData)
1387              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1388                  and accounting_storageUnitsNonzero(indicator,accnodesData,storage_techs,vintage)),
1389          accounting_storageUnitsIn(indicator,accnodesData,storage_techs,vintage,"useAnnuity"))
1390      - smin((nodesData,accnodesData)
1391              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1392                  and accounting_storageUnitsNonzero(indicator,accnodesData,storage_techs,vintage)),
1393          accounting_storageUnitsIn(indicator,accnodesData,storage_techs,vintage,"useAnnuity"));
1394   
1395  abort$sum(accounting_storageUnitsChk(indicator,nodesModel,storage_techs,vintage,pc_accounting_storageUnits), 1) "Cannot aggregate technologies with different useAnnuity values."
1397   
1398  parameter accounting_storageUnitsAgg(indicator,nodesModel,storage_techs,vintage,pc_accounting_storageUnits);
1399  accounting_storageUnitsAgg(indicator,nodesModel,storage_techs,vintage,pc_accounting_storageUnits)
1400      $sum((nodesData,accnodesData)
1401              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1402                  and accounting_storageUnitsNonzero(indicator,accnodesData,storage_techs,vintage)), 1)
1403      = sum((nodesData,accnodesData)
1404              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1405                  and accounting_storageUnitsNonzero(indicator,accnodesData,storage_techs,vintage)),
1406          accounting_storageUnitsIn(indicator,accnodesData,storage_techs,vintage,pc_accounting_storageUnits))
1407      / sum((nodesData,accnodesData)
1408              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1409                  and accounting_storageUnitsNonzero(indicator,accnodesData,storage_techs,vintage)),
1410          1);
1411   
1412  parameter accounting_storageUnits(indicator,nodesModel,storage_techs,vintage,pc_accounting_storageUnits);
1413  loop(accnodes,
1414  accounting_storageUnits(indicator,nodesModel,storage_techs,vintage,pc_accounting_storageUnits)
1415      $sum(accnodesData$(map_accnodesToCalc(accnodes,nodesModel) and sameas(accnodes,accnodesData)
1416                              and accounting_storageUnitsIn(indicator,accnodesData,storage_techs,vintage,pc_accounting_storageUnits)), 1)
1417      = sum(accnodesData$(map_accnodesToCalc(accnodes,nodesModel) and sameas(accnodes,accnodesData)),
1418              accounting_storageUnitsIn(indicator,accnodesData,storage_techs,vintage,pc_accounting_storageUnits));
1419  );
1420   
1421  accounting_storageUnits(indicator,nodesModel,storage_techs,vintage,pc_accounting_storageUnits)
1422      $accounting_storageUnitsAgg(indicator,nodesModel,storage_techs,vintage,pc_accounting_storageUnits)
1423      = accounting_storageUnitsAgg(indicator,nodesModel,storage_techs,vintage,pc_accounting_storageUnits);
1424   
1425  * option kill %paramName%Nonzero %paramName%Chk %paramName%Agg
BATINCLUDE C:\Local\REMix\framework\remix\framework\model\source\battools\aggregateAccountingMean.gms
1427  * SPDX-FileCopyrightText: Copyright (c) 2023 German Aerospace Center (DLR)
1428  * SPDX-License-Identifier: BSD-3-Clause
1429   
1431   
1433   
1434  set accounting_transferLinksNonzero(indicator,acclinksData,transfer_techs,vintage);
1435  accounting_transferLinksNonzero(indicator,acclinksData,transfer_techs,vintage)
1436      $sum(pc_accounting_transferLinks$accounting_transferLinksIn(indicator,acclinksData,transfer_techs,vintage,pc_accounting_transferLinks), 1)
1437      = yes;
1438   
1440  set accounting_transferLinksChk(indicator,linksModel,transfer_techs,vintage,pc_accounting_transferLinks);
1441  accounting_transferLinksChk(indicator,linksModel,transfer_techs,vintage,"useAnnuity")
1442      $sum((linksData,acclinksData)
1443              $(aggregatelinksModel(linksData,linksModel) and sameas(linksData,acclinksData)
1444                  and accounting_transferLinksNonzero(indicator,acclinksData,transfer_techs,vintage)), 1)
1445      = smax((linksData,acclinksData)
1446              $(aggregatelinksModel(linksData,linksModel) and sameas(linksData,acclinksData)
1447                  and accounting_transferLinksNonzero(indicator,acclinksData,transfer_techs,vintage)),
1448          accounting_transferLinksIn(indicator,acclinksData,transfer_techs,vintage,"useAnnuity"))
1449      - smin((linksData,acclinksData)
1450              $(aggregatelinksModel(linksData,linksModel) and sameas(linksData,acclinksData)
1451                  and accounting_transferLinksNonzero(indicator,acclinksData,transfer_techs,vintage)),
1452          accounting_transferLinksIn(indicator,acclinksData,transfer_techs,vintage,"useAnnuity"));
1453   
1454  abort$sum(accounting_transferLinksChk(indicator,linksModel,transfer_techs,vintage,pc_accounting_transferLinks), 1) "Cannot aggregate technologies with different useAnnuity values."
1456   
1457  parameter accounting_transferLinksAgg(indicator,linksModel,transfer_techs,vintage,pc_accounting_transferLinks);
1458  accounting_transferLinksAgg(indicator,linksModel,transfer_techs,vintage,pc_accounting_transferLinks)
1459      $sum((linksData,acclinksData)
1460              $(aggregatelinksModel(linksData,linksModel) and sameas(linksData,acclinksData)
1461                  and accounting_transferLinksNonzero(indicator,acclinksData,transfer_techs,vintage)), 1)
1462      = sum((linksData,acclinksData)
1463              $(aggregatelinksModel(linksData,linksModel) and sameas(linksData,acclinksData)
1464                  and accounting_transferLinksNonzero(indicator,acclinksData,transfer_techs,vintage)),
1465          accounting_transferLinksIn(indicator,acclinksData,transfer_techs,vintage,pc_accounting_transferLinks))
1466      / sum((linksData,acclinksData)
1467              $(aggregatelinksModel(linksData,linksModel) and sameas(linksData,acclinksData)
1468                  and accounting_transferLinksNonzero(indicator,acclinksData,transfer_techs,vintage)),
1469          1);
1470   
1471  parameter accounting_transferLinks(indicator,linksModel,transfer_techs,vintage,pc_accounting_transferLinks);
1472  loop(acclinks,
1473  accounting_transferLinks(indicator,linksModel,transfer_techs,vintage,pc_accounting_transferLinks)
1474      $sum(acclinksData$(map_acclinksToCalc(acclinks,linksModel) and sameas(acclinks,acclinksData)
1475                              and accounting_transferLinksIn(indicator,acclinksData,transfer_techs,vintage,pc_accounting_transferLinks)), 1)
1476      = sum(acclinksData$(map_acclinksToCalc(acclinks,linksModel) and sameas(acclinks,acclinksData)),
1477              accounting_transferLinksIn(indicator,acclinksData,transfer_techs,vintage,pc_accounting_transferLinks));
1478  );
1479   
1480  accounting_transferLinks(indicator,linksModel,transfer_techs,vintage,pc_accounting_transferLinks)
1481      $accounting_transferLinksAgg(indicator,linksModel,transfer_techs,vintage,pc_accounting_transferLinks)
1482      = accounting_transferLinksAgg(indicator,linksModel,transfer_techs,vintage,pc_accounting_transferLinks);
1483   
1484  * option kill %paramName%Nonzero %paramName%Chk %paramName%Agg
BATINCLUDE C:\Local\REMix\framework\remix\framework\model\source\battools\aggregateAccountingMean.gms
1486  * SPDX-FileCopyrightText: Copyright (c) 2023 German Aerospace Center (DLR)
1487  * SPDX-License-Identifier: BSD-3-Clause
1488   
1490   
1492   
1493  set accounting_transferPerLengthNonzero(indicator,acclinksData,transfer_techs,vintage,link_types);
1494  accounting_transferPerLengthNonzero(indicator,acclinksData,transfer_techs,vintage,link_types)
1495      $sum(pc_accounting_transferPerLength$accounting_transferPerLengthIn(indicator,acclinksData,transfer_techs,vintage,link_types,pc_accounting_transferPerLength), 1)
1496      = yes;
1497   
1499  set accounting_transferPerLengthChk(indicator,linksModel,transfer_techs,vintage,link_types,pc_accounting_transferPerLength);
1500  accounting_transferPerLengthChk(indicator,linksModel,transfer_techs,vintage,link_types,"useAnnuity")
1501      $sum((linksData,acclinksData)
1502              $(aggregatelinksModel(linksData,linksModel) and sameas(linksData,acclinksData)
1503                  and accounting_transferPerLengthNonzero(indicator,acclinksData,transfer_techs,vintage,link_types)), 1)
1504      = smax((linksData,acclinksData)
1505              $(aggregatelinksModel(linksData,linksModel) and sameas(linksData,acclinksData)
1506                  and accounting_transferPerLengthNonzero(indicator,acclinksData,transfer_techs,vintage,link_types)),
1507          accounting_transferPerLengthIn(indicator,acclinksData,transfer_techs,vintage,link_types,"useAnnuity"))
1508      - smin((linksData,acclinksData)
1509              $(aggregatelinksModel(linksData,linksModel) and sameas(linksData,acclinksData)
1510                  and accounting_transferPerLengthNonzero(indicator,acclinksData,transfer_techs,vintage,link_types)),
1511          accounting_transferPerLengthIn(indicator,acclinksData,transfer_techs,vintage,link_types,"useAnnuity"));
1512   
1513  abort$sum(accounting_transferPerLengthChk(indicator,linksModel,transfer_techs,vintage,link_types,pc_accounting_transferPerLength), 1) "Cannot aggregate technologies with different useAnnuity values."
1515   
1516  parameter accounting_transferPerLengthAgg(indicator,linksModel,transfer_techs,vintage,link_types,pc_accounting_transferPerLength);
1517  accounting_transferPerLengthAgg(indicator,linksModel,transfer_techs,vintage,link_types,pc_accounting_transferPerLength)
1518      $sum((linksData,acclinksData)
1519              $(aggregatelinksModel(linksData,linksModel) and sameas(linksData,acclinksData)
1520                  and accounting_transferPerLengthNonzero(indicator,acclinksData,transfer_techs,vintage,link_types)), 1)
1521      = sum((linksData,acclinksData)
1522              $(aggregatelinksModel(linksData,linksModel) and sameas(linksData,acclinksData)
1523                  and accounting_transferPerLengthNonzero(indicator,acclinksData,transfer_techs,vintage,link_types)),
1524          accounting_transferPerLengthIn(indicator,acclinksData,transfer_techs,vintage,link_types,pc_accounting_transferPerLength))
1525      / sum((linksData,acclinksData)
1526              $(aggregatelinksModel(linksData,linksModel) and sameas(linksData,acclinksData)
1527                  and accounting_transferPerLengthNonzero(indicator,acclinksData,transfer_techs,vintage,link_types)),
1528          1);
1529   
1530  parameter accounting_transferPerLength(indicator,linksModel,transfer_techs,vintage,link_types,pc_accounting_transferPerLength);
1531  loop(acclinks,
1532  accounting_transferPerLength(indicator,linksModel,transfer_techs,vintage,link_types,pc_accounting_transferPerLength)
1533      $sum(acclinksData$(map_acclinksToCalc(acclinks,linksModel) and sameas(acclinks,acclinksData)
1534                              and accounting_transferPerLengthIn(indicator,acclinksData,transfer_techs,vintage,link_types,pc_accounting_transferPerLength)), 1)
1535      = sum(acclinksData$(map_acclinksToCalc(acclinks,linksModel) and sameas(acclinks,acclinksData)),
1536              accounting_transferPerLengthIn(indicator,acclinksData,transfer_techs,vintage,link_types,pc_accounting_transferPerLength));
1537  );
1538   
1539  accounting_transferPerLength(indicator,linksModel,transfer_techs,vintage,link_types,pc_accounting_transferPerLength)
1540      $accounting_transferPerLengthAgg(indicator,linksModel,transfer_techs,vintage,link_types,pc_accounting_transferPerLength)
1541      = accounting_transferPerLengthAgg(indicator,linksModel,transfer_techs,vintage,link_types,pc_accounting_transferPerLength);
1542   
1543  * option kill %paramName%Nonzero %paramName%Chk %paramName%Agg
BATINCLUDE C:\Local\REMix\framework\remix\framework\model\source\battools\aggregateAccountingMean.gms
1545  * SPDX-FileCopyrightText: Copyright (c) 2023 German Aerospace Center (DLR)
1546  * SPDX-License-Identifier: BSD-3-Clause
1547   
1549   
1551   
1552  set accounting_sourcesinkFlowNonzero(indicator,accnodesData,years,sourcesink_techs,commodity);
1553  accounting_sourcesinkFlowNonzero(indicator,accnodesData,years,sourcesink_techs,commodity)
1554      $sum(pc_accounting_sourcesinkFlow$accounting_sourcesinkFlowIn(indicator,accnodesData,years,sourcesink_techs,commodity,pc_accounting_sourcesinkFlow), 1)
1555      = yes;
1556   
1558   
1559  parameter accounting_sourcesinkFlowAgg(indicator,nodesModel,years,sourcesink_techs,commodity,pc_accounting_sourcesinkFlow);
1560  accounting_sourcesinkFlowAgg(indicator,nodesModel,years,sourcesink_techs,commodity,pc_accounting_sourcesinkFlow)
1561      $sum((nodesData,accnodesData)
1562              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1563                  and accounting_sourcesinkFlowNonzero(indicator,accnodesData,years,sourcesink_techs,commodity)), 1)
1564      = sum((nodesData,accnodesData)
1565              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1566                  and accounting_sourcesinkFlowNonzero(indicator,accnodesData,years,sourcesink_techs,commodity)),
1567          accounting_sourcesinkFlowIn(indicator,accnodesData,years,sourcesink_techs,commodity,pc_accounting_sourcesinkFlow))
1568      / sum((nodesData,accnodesData)
1569              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1570                  and accounting_sourcesinkFlowNonzero(indicator,accnodesData,years,sourcesink_techs,commodity)),
1571          1);
1572   
1573  parameter accounting_sourcesinkFlow(indicator,nodesModel,years,sourcesink_techs,commodity,pc_accounting_sourcesinkFlow);
1574  loop(accnodes,
1575  accounting_sourcesinkFlow(indicator,nodesModel,years,sourcesink_techs,commodity,pc_accounting_sourcesinkFlow)
1576      $sum(accnodesData$(map_accnodesToCalc(accnodes,nodesModel) and sameas(accnodes,accnodesData)
1577                              and accounting_sourcesinkFlowIn(indicator,accnodesData,years,sourcesink_techs,commodity,pc_accounting_sourcesinkFlow)), 1)
1578      = sum(accnodesData$(map_accnodesToCalc(accnodes,nodesModel) and sameas(accnodes,accnodesData)),
1579              accounting_sourcesinkFlowIn(indicator,accnodesData,years,sourcesink_techs,commodity,pc_accounting_sourcesinkFlow));
1580  );
1581   
1582  accounting_sourcesinkFlow(indicator,nodesModel,years,sourcesink_techs,commodity,pc_accounting_sourcesinkFlow)
1583      $accounting_sourcesinkFlowAgg(indicator,nodesModel,years,sourcesink_techs,commodity,pc_accounting_sourcesinkFlow)
1584      = accounting_sourcesinkFlowAgg(indicator,nodesModel,years,sourcesink_techs,commodity,pc_accounting_sourcesinkFlow);
1585   
1586  * option kill %paramName%Nonzero %paramName%Chk %paramName%Agg
1587   
1588  parameter accounting_indicatorBounds_links(linksModel,years,indicator,pc_accounting_indicatorBounds_links);
1589  accounting_indicatorBounds_links(linksModelToCalc,yearsToCalc,indicator,pc_accounting_indicatorBounds_links)
1590      = sum((linksData)$sameas(linksModelToCalc,linksData),
1591              accounting_indicatorBounds_linksIn(linksData,yearsToCalc,indicator,pc_accounting_indicatorBounds_links));
1592   
1593  accounting_indicatorBounds_links(linksModelToCalc,yearsToCalc,indicator,pc_accounting_indicatorBounds_links)
1594      = sum((linksData)$links_aggregate(linksModelToCalc,linksData),
1595              accounting_indicatorBounds_linksIn(linksData,yearsToCalc,indicator,pc_accounting_indicatorBounds_links));
1596   
1597  parameter accounting_indicatorBounds(accNodesModel,accYears,indicator,pc_accounting_indicatorBounds);
1598  accounting_indicatorBounds(accNodesModel,accYears,indicator,pc_accounting_indicatorBounds)
1599      = sum (accNodesData$sameas(accNodesModel,accNodesData),
1600          accounting_indicatorBoundsIn(accNodesData,accYears,indicator,pc_accounting_indicatorBounds));
1601   
1602  accounting_indicatorBounds(accNodesModel,accYears,indicator,pc_accounting_indicatorBounds)
1603      $(sum (nodesModel$sameas(accNodesModel,nodesModel), 1) > 0)
1604      = sum ((accNodesData,nodesData,nodesModel)
1605              $(aggregateNodesModel(nodesData,nodesModel) and sameas(accNodesModel,nodesModel) and sameas(accNodesData,nodesData)),
1606          accounting_indicatorBoundsIn(accNodesData,accYears,indicator,pc_accounting_indicatorBounds));
1607   
1608  set accounting_perIndicatorNonzero(indicator,indicator_a,accNodesData,accYears);
1609  accounting_perIndicatorNonzero(indicator,indicator_a,accNodesData,accYears)
1610      $sum(pc_accounting_perIndicator$accounting_perIndicatorIn(indicator,indicator_a,accNodesData,accYears,pc_accounting_perIndicator), 1)
1611      = yes;
1612   
1613  parameter accounting_perIndicatorAgg(indicator,indicator_a,nodesModel,accYears,pc_accounting_perIndicator);
1614  accounting_perIndicatorAgg(indicator,indicator_a,nodesModel,accYears,pc_accounting_perIndicator)
1615      $sum((nodesData,accnodesData)
1616              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1617                  and accounting_perIndicatorNonzero(indicator,indicator_a,accnodesData,accYears)), 1)
1618      = sum((nodesData,accnodesData)
1619              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1620                  and accounting_perIndicatorNonzero(indicator,indicator_a,accnodesData,accYears)),
1621          accounting_perIndicatorIn(indicator,indicator_a,accnodesData,accYears,pc_accounting_perIndicator))
1622      / sum((nodesData,accnodesData)
1623              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1624                  and accounting_perIndicatorNonzero(indicator,indicator_a,accnodesData,accYears)),
1625          1);
1626   
1627  parameter accounting_perIndicator(indicator,indicator_a,accNodesModel,accYears,pc_accounting_perIndicator);
1628   
1629  loop(accNodes,
1630  accounting_perIndicator(indicator,indicator_a,accNodesModel,accYears,pc_accounting_perIndicator)
1631      $(sum(accNodesData$(sameas(accNodes,accNodesData)
1632              and accounting_perIndicatorIn(indicator,indicator_a,accNodesData,"horizon",pc_accounting_perIndicator)), 1)
1633          and map_accNodes(accNodesModel,accNodes)
1634              )
1635      = sum(accNodesData$(sameas(accNodes,accNodesData)),
1636              accounting_perIndicatorIn(indicator,indicator_a,accNodesData,"horizon",pc_accounting_perIndicator));
1637   
1638  accounting_perIndicator(indicator,indicator_a,accNodesModel,accYears,pc_accounting_perIndicator)
1639      $(sum(accNodesData$(sameas(accNodes,accNodesData)
1640              and accounting_perIndicatorIn(indicator,indicator_a,accNodesData,accYears,pc_accounting_perIndicator)), 1)
1641          and map_accNodes(accNodesModel,accNodes)
1642          and not sameas(accYears, "horizon"))
1643      = sum(accNodesData$(sameas(accNodes,accNodesData)),
1644              accounting_perIndicatorIn(indicator,indicator_a,accNodesData,accYears,pc_accounting_perIndicator));
1645  );
1646   
1647  accounting_perIndicator(indicator,indicator_a,accNodesModel,accYears,pc_accounting_perIndicator)
1648      $sum(nodesModel$(accounting_perIndicatorAgg(indicator,indicator_a,nodesModel,"horizon",pc_accounting_perIndicator)
1649          and sameas(accNodesModel,nodesModel)), 1)
1650      = sum(nodesModel$sameas(accNodesModel,nodesModel),
1651          accounting_perIndicatorAgg(indicator,indicator_a,nodesModel,"horizon",pc_accounting_perIndicator));
1652   
1653  accounting_perIndicator(indicator,indicator_a,accNodesModel,accYears,pc_accounting_perIndicator)
1654      $sum(nodesModel$(accounting_perIndicatorAgg(indicator,indicator_a,nodesModel,accYears,pc_accounting_perIndicator)
1655          and sameas(accNodesModel,nodesModel) and not sameas(accYears, "horizon")), 1)
1656      = sum(nodesModel$sameas(accNodesModel,nodesModel),
1657          accounting_perIndicatorAgg(indicator,indicator_a,nodesModel,accYears,pc_accounting_perIndicator));
1658   
1659   
1660  * Make sure all required indicators end up in the model
1661  set activeIndicators(accNodesModel,accYears,indicator);
1662  activeIndicators(accNodesModel,accYears,indicator)
1663     $((accounting_indicatorBounds(accNodesModel,accYears,indicator,"obj") <> 0
1666        or accounting_indicatorBounds(accNodesModel,accYears,indicator,"useFixed") <> 0
1667        or accounting_indicatorBounds(accNodesModel,accYears,indicator,"useLower") <> 0
1668        or accounting_indicatorBounds(accNodesModel,accYears,indicator,"useUpper") <> 0 )
1669          and not accounting_indicatorBounds(accNodesModel,accYears,indicator,"isVariable"))
1670     = yes;
1671   
1672  set activeIndicators_links(linksModel,years,indicator);
1673  activeIndicators_links(linksModelToCalc,yearsToCalc,indicator)
1674     $(accounting_indicatorBounds_links(linksModelToCalc,yearsToCalc,indicator,"useFixed") <> 0
1675        or accounting_indicatorBounds_links(linksModelToCalc,yearsToCalc,indicator,"useLower") <> 0
1676        or accounting_indicatorBounds_links(linksModelToCalc,yearsToCalc,indicator,"useUpper") <> 0 )
1677     = yes;
1678   
1679  set variableIndicators(accNodesModel,accYears,indicator);
1680  variableIndicators(accNodesModel,accYears,indicator)
1681     $(accounting_indicatorBounds(accNodesModel,accYears,indicator,"obj") = 0
1682        and accounting_indicatorBounds(accNodesModel,accYears,indicator,"isVariable"))
1683     = yes;
1684   
1685  * Calculate length of years and discount rates per indicator
1686  parameter yearFactor(accNodesModel,accYears,indicator,accYears);
1687  yearFactor(accNodesModel,accYears,indicator,accYears_a)
1688      $(map_accYears(accYears_a,accYears)
1689          and sum(yearsToCalc$(sameas(yearsToCalc,accYears_a)), 1))
1690      = 1;
1691   
1692  yearFactor(accNodesModel,accYears,indicator,accYears_a)
1693      $(map_accYears(accYears_a,accYears)
1694          and sum(yearsToCalc$(sameas(yearsToCalc,accYears_a)), 1)
1695          and accounting_indicatorBounds(accNodesModel,accYears,indicator,"integral"))
1696      = sum(yearsToCalc$sameas(accYears_a,yearsToCalc), yearsLen(yearsToCalc));
1697   
1698  yearFactor(accNodesModel,accYears,indicator,accYears_a)
1699      $(map_accYears(accYears_a,accYears)
1700          and sum(yearsToCalc$(sameas(yearsToCalc,accYears_a)), 1)
1701          and accounting_indicatorBounds(accNodesModel,accYears,indicator,"integral")
1702          and accounting_indicatorBounds(accNodesModel,accYears,indicator,"endyear")
1703          and yearFactor(accNodesModel,accYears,indicator,accYears_a) = inf)
1704      = accounting_indicatorBounds(accNodesModel,accYears,indicator,"endyear");
1705   
1706  yearFactor(accNodesModel,accYears,indicator,accYears_a)
1707      $(map_accYears(accYears_a,accYears)
1708          and sum(yearsToCalc$(sameas(yearsToCalc,accYears_a)), 1)
1709          and accounting_indicatorBounds(accNodesModel,accYears,indicator,"integral")
1710          and accounting_indicatorBounds(accNodesModel,accYears,indicator,"discount"))
1711      = yearFactor(accNodesModel,accYears,indicator,accYears_a)
1712          * (1 - accounting_indicatorBounds(accNodesModel,accYears,indicator,"discount"))
1713                  ** (accYears_a.val - smin(yearsToCalc, yearsToCalc.val));
1714   
1715   
1716  * ==== calculate compound indicators for the optimization ====
1717  scalar compIndicators_pre;
1718  scalar compIndicators_post;
1719   
1720  parameter compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a);
1721  compoundIndicators(accNodesModel,accYears,indicator,accNodesModel,accYears,indicator)
1722      $activeIndicators(accNodesModel,accYears,indicator) = 1;
1723   
1724  set compoundIndicators_act(accNodesModel,accYears,indicator);
1725  option compoundIndicators_act < compoundIndicators;
1726   
1727  parameter compoundIndicatorsExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa);
1728  parameter compoundIndicatorsExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a);
1729  compoundIndicatorsExt(accNodesModel,accYears,indicator,accNodesModel,accYears,indicator,accNodesModel,accYears,indicator)
1730      $compoundIndicators_act(accNodesModel,accYears,indicator) = 1;
1731   
1732  compIndicators_pre = 0;
1733  compIndicators_post = 1;
1734   
1735  option sparseval = 1;
1736  while(compIndicators_pre < compIndicators_post,
1737      compIndicators_pre = sum((accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa)
1738          $compoundIndicatorsExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa), 1);
1739   
1740      compoundIndicatorsExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa)
1741          $(compoundIndicators_act(accNodesModel,accYears,indicator)
1742              and compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
1743              and not accounting_indicatorBounds(accNodesModel_a,accYears_a,indicator_a,"isVariable")
1744              and map_accNodes(accNodesModel_aa,accNodesModel_a)
1745              and map_accYears(accYears_aa,accYears_a))
1746          = compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
1747              * accounting_perIndicator(indicator_a,indicator_aa,accNodesModel_aa,accYears_aa,"perIndicator");
1748   
1749      option compoundIndicatorsExt_r < compoundIndicatorsExt;
1750   
1751      compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa)
1752          $(compoundIndicators_act(accNodesModel,accYears,indicator)
1753              and sum((accNodesModel_a,accYears_a,indicator_a)
1754                      $compoundIndicatorsExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a), 1) = 1)
1755          = sum((accNodesModel_a,accYears_a,indicator_a)
1756                  $(compoundIndicatorsExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a)),
1757              compoundIndicatorsExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a));
1758   
1759      compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa)
1760          $(compoundIndicators_act(accNodesModel,accYears,indicator)
1761              and sum((accNodesModel_a,accYears_a,indicator_a)
1762                      $compoundIndicatorsExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a), 1) > 1)
1763          = sum((accNodesModel_a,accYears_a,indicator_a)
1764                  $(compoundIndicatorsExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a)
1765                      and not (sameas(accNodesModel, accNodesModel_a) and sameas(accYears, accYears_a) and sameas(indicator, indicator_a))),
1766              compoundIndicatorsExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a))
1767          / sum((accNodesModel_a,accYears_a,indicator_a)
1768                  $(compoundIndicatorsExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a)
1769                      and not (sameas(accNodesModel, accNodesModel_a) and sameas(accYears, accYears_a) and sameas(indicator, indicator_a))), 1);
1770   
1771      option compoundIndicators_act < compoundIndicators;
1772      compIndicators_post = sum((accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa)
1773          $compoundIndicatorsExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa), 1);
1774  );
1775  option sparseval = 0;
1776   
1777  * map to sub-years and sub-nodes
1778  compoundIndicatorsExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_a)
1779      $(compoundIndicators_act(accNodesModel,accYears,indicator)
1780          and compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
1781          and map_accYears(accYears_aa,accYears_a)
1782          and map_accNodes(accNodesModel_aa,accNodesModel_a))
1783      = compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
1784          * yearFactor(accNodesModel,accYears,indicator,accYears_aa);
1785   
1786  * Remove all accounting regions and accounting years
1787  compoundIndicatorsExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa)
1788      $(compoundIndicatorsExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa)
1789          and not accounting_indicatorBounds(accNodesModel_aa,accYears_aa,indicator_aa,"isVariable")
1790          and sum(accNodes$(sameas(accNodes,accNodesModel_aa)), 1)
1791              or sameas("horizon",accYears_aa))
1792      = 0;
1793   
1794  * Map from extended parameter to final parameter
1795  option compoundIndicatorsExt_r < compoundIndicatorsExt;
1796  compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa)
1797      $(compoundIndicators_act(accNodesModel,accYears,indicator)
1798          and sum((accNodesModel_a,accYears_a,indicator_a)
1799                  $compoundIndicatorsExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a), 1) = 1)
1800      = sum((accNodesModel_a,accYears_a,indicator_a)
1801              $(compoundIndicatorsExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a)),
1802          compoundIndicatorsExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a));
1803   
1804  compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa)
1805      $(compoundIndicators_act(accNodesModel,accYears,indicator)
1806          and sum((accNodesModel_a,accYears_a,indicator_a)
1807                  $compoundIndicatorsExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a), 1) > 1)
1808      = sum((accNodesModel_a,accYears_a,indicator_a)
1809              $(compoundIndicatorsExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a)
1810                  and not (sameas(accNodesModel, accNodesModel_a) and sameas(accYears, accYears_a) and sameas(indicator, indicator_a))),
1811          compoundIndicatorsExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a))
1812      / sum((accNodesModel_a,accYears_a,indicator_a)
1813              $(compoundIndicatorsExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a)
1814                  and not (sameas(accNodesModel, accNodesModel_a) and sameas(accYears, accYears_a) and sameas(indicator, indicator_a))), 1);
1815   
1816  * Remove all accounting regions and accounting years
1817  compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
1818      $(compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
1819          and not accounting_indicatorBounds(accNodesModel_a,accYears_a,indicator_a,"isVariable")
1820          and (sum(accNodes$(sameas(accNodes,accNodesModel_a)), 1)
1821              or sameas("horizon",accYears_a)))
1822      = 0;
1823   
1824  * Remove all slack indicators except the ones declared in indicatorBounds
1825  compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
1826      $(compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
1827          and sum((accNodesModel_aa,accYears_aa)$accounting_indicatorBounds(accNodesModel_aa,accYears_aa,indicator_a,"isVariable"), 1)
1828          and not accounting_indicatorBounds(accNodesModel_a,accYears_a,indicator_a,"isVariable"))
1829      = 0;
1830   
1831  * ==== compound indicators for the post calculation ====
1832  parameter compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a);
1833  compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel,accYears,indicator)
1834      $(sum(nodesModelToCalc$map_accNodesToCalc(accNodesModel,nodesModelToCalc), 1)
1835          and sum(yearsToCalc$map_accYearsToCalc(accYears,yearsToCalc), 1)) = 1;
1836   
1837  set compoundIndicatorsFull_act(accNodesModel,accYears,indicator);
1838  option compoundIndicatorsFull_act < compoundIndicatorsFull;
1839   
1840  parameter compoundIndicatorsFullExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa);
1841  parameter compoundIndicatorsFullExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a);
1842  compoundIndicatorsFullExt(accNodesModel,accYears,indicator,accNodesModel,accYears,indicator,accNodesModel,accYears,indicator) = 1;
1843   
1844  compIndicators_pre = 0;
1845  compIndicators_post = 1;
1846   
1847  option sparseval = 1;
1848  while(compIndicators_pre < compIndicators_post,
1849      compIndicators_pre = sum((accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa)
1850          $compoundIndicatorsFullExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa), 1);
1851   
1852      compoundIndicatorsFullExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa)
1853          $(compoundIndicatorsFull_act(accNodesModel,accYears,indicator)
1854              and compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
1855              and not accounting_indicatorBounds(accNodesModel_a,accYears_a,indicator_a,"isVariable")
1856              and map_accNodes(accNodesModel_aa,accNodesModel_a)
1857              and map_accYears(accYears_aa,accYears_a))
1858          = compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
1859              * accounting_perIndicator(indicator_a,indicator_aa,accNodesModel_aa,accYears_aa,"perIndicator");
1860   
1861      option compoundIndicatorsFullExt_r < compoundIndicatorsFullExt;
1862   
1863      compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa)
1864          $(compoundIndicatorsFull_act(accNodesModel,accYears,indicator)
1865              and sum((accNodesModel_a,accYears_a,indicator_a)
1866                      $compoundIndicatorsFullExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a), 1) = 1)
1867          = sum((accNodesModel_a,accYears_a,indicator_a)
1868                  $(compoundIndicatorsFullExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a)),
1869              compoundIndicatorsFullExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a));
1870   
1871      compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa)
1872          $(compoundIndicatorsFull_act(accNodesModel,accYears,indicator)
1873              and sum((accNodesModel_a,accYears_a,indicator_a)
1874                      $compoundIndicatorsFullExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a), 1) > 1)
1875          = sum((accNodesModel_a,accYears_a,indicator_a)
1876                  $(compoundIndicatorsFullExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a)
1877                      and not (sameas(accNodesModel, accNodesModel_a) and sameas(accYears, accYears_a) and sameas(indicator, indicator_a))),
1878              compoundIndicatorsFullExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a))
1879          / sum((accNodesModel_a,accYears_a,indicator_a)
1880                  $(compoundIndicatorsFullExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a)
1881                      and not (sameas(accNodesModel, accNodesModel_a) and sameas(accYears, accYears_a) and sameas(indicator, indicator_a))), 1);
1882   
1883      option compoundIndicatorsFull_act < compoundIndicatorsFull;
1884      compIndicators_post = sum((accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa)
1885          $compoundIndicatorsFullExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa), 1);
1886  );
1887  option sparseval = 0;
1888   
1889  * map to sub-years and sub-nodes
1890  compoundIndicatorsFullExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_a)
1891      $(compoundIndicatorsFull_act(accNodesModel,accYears,indicator)
1892          and compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
1893          and map_accYears(accYears_aa,accYears_a)
1894          and map_accNodes(accNodesModel_aa,accNodesModel_a))
1895      = compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
1896          * yearFactor(accNodesModel,accYears,indicator,accYears_aa);
1897   
1898  * Remove all accounting regions and accounting years
1899  compoundIndicatorsFullExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa)
1900      $(compoundIndicatorsFullExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa)
1901          and not accounting_indicatorBounds(accNodesModel_aa,accYears_aa,indicator_aa,"isVariable")
1902          and sum(accNodes$(sameas(accNodes,accNodesModel_aa)), 1)
1903              or sameas("horizon",accYears_aa))
1904      = 0;
1905   
1906  * Map from extended parameter to final parameter
1907  option compoundIndicatorsFullExt_r < compoundIndicatorsFullExt;
1908  compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa)
1909      $(compoundIndicatorsFull_act(accNodesModel,accYears,indicator)
1910          and sum((accNodesModel_a,accYears_a,indicator_a)
1911                  $compoundIndicatorsFullExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a), 1) = 1)
1912      = sum((accNodesModel_a,accYears_a,indicator_a)
1913              $(compoundIndicatorsFullExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a)),
1914          compoundIndicatorsFullExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a));
1915   
1916  compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa)
1917      $(compoundIndicatorsFull_act(accNodesModel,accYears,indicator)
1918          and sum((accNodesModel_a,accYears_a,indicator_a)
1919                  $compoundIndicatorsFullExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a), 1) > 1)
1920      = sum((accNodesModel_a,accYears_a,indicator_a)
1921              $(compoundIndicatorsFullExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a)
1922                  and not (sameas(accNodesModel, accNodesModel_a) and sameas(accYears, accYears_a) and sameas(indicator, indicator_a))),
1923          compoundIndicatorsFullExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a))
1924      / sum((accNodesModel_a,accYears_a,indicator_a)
1925              $(compoundIndicatorsFullExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a)
1926                  and not (sameas(accNodesModel, accNodesModel_a) and sameas(accYears, accYears_a) and sameas(indicator, indicator_a))), 1);
1927   
1928  * Remove all accounting regions and accounting years
1929  compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
1930      $(compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
1931          and not accounting_indicatorBounds(accNodesModel_a,accYears_a,indicator_a,"isVariable")
1932          and (sum(accNodes$(sameas(accNodes,accNodesModel_a)), 1)
1933              or sameas("horizon",accYears_a)))
1934      = 0;
1935   
1936  * Remove all slack indicators except the ones declared in indicatorBounds
1937  compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
1938      $(compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
1939          and sum((accNodesModel_aa,accYears_aa)$accounting_indicatorBounds(accNodesModel_aa,accYears_aa,indicator_a,"isVariable"), 1)
1940          and not accounting_indicatorBounds(accNodesModel_a,accYears_a,indicator_a,"isVariable"))
1941      = 0;
1942   
1943  * Check if the objective value and optimization sense is set correctly
1944  scalar opti_values, opti_sense;
1945  opti_values = sum((accNodesModel,accYears,indicator)$(accounting_indicatorBounds(accNodesModel,accYears,indicator,"obj") <> 0), 1);
1946  opti_sense = sum((accNodesModel,accYears,indicator), accounting_indicatorBounds(accNodesModel,accYears,indicator,"obj"));
1947  abort$(opti_values < 1)
1948      "Accounting: No indicator specified as objective value"
1949  abort$(opti_values > 1)
1950      "Accounting: Too many indicators specified as objective value"
1951  abort$(opti_sense <> -1 and opti_sense <> 1)
1952      "Accounting: Optimization sense has to be either -1 or 1"
INCLUDE    C:\Local\REMix\framework\remix\framework\model\source\accounting\annuities.gms
1954  * SPDX-FileCopyrightText: Copyright (c) 2023 German Aerospace Center (DLR)
1955  * SPDX-License-Identifier: BSD-3-Clause
1956   
1957  * Calculation of annuities
1958   
1959  abort$(sum((indicator,nodesModelToCalc,converter_techs,vintage)
1960          $(accounting_converterUnits(indicator,nodesModelToCalc,converter_techs,vintage,"useAnnuity") = 1
1961          and accounting_converterUnits(indicator,nodesModelToCalc,converter_techs,vintage,"amorTime") < 1), 1) > 0 )
1962      "Accounting: Some converter technologies use annuities but have no amortization time"
1963   
1964  parameter accounting_annuityFactor_converter(indicator,nodesModel,converter_techs,vintage);
1965  accounting_annuityFactor_converter(indicator,nodesModelToCalc,converter_techs,vintage)
1966      $accounting_converterUnits(indicator,nodesModelToCalc,converter_techs,vintage,"useAnnuity")
1967      =
1968      accounting_converterUnits(indicator,nodesModelToCalc,converter_techs,vintage,"interest")
1969          * (1 + accounting_converterUnits(indicator,nodesModelToCalc,converter_techs,vintage,"interest"))
1970          ** accounting_converterUnits(indicator,nodesModelToCalc,converter_techs,vintage,"amorTime")
1971      / ((1 + accounting_converterUnits(indicator,nodesModelToCalc,converter_techs,vintage,"interest"))
1972          ** accounting_converterUnits(indicator,nodesModelToCalc,converter_techs,vintage,"amorTime") - 1);
1973   
1974   
1975  abort$(sum((indicator,nodesModelToCalc,storage_techs,vintage)
1976          $(accounting_storageUnits(indicator,nodesModelToCalc,storage_techs,vintage,"useAnnuity") = 1
1977          and accounting_storageUnits(indicator,nodesModelToCalc,storage_techs,vintage,"amorTime") < 1), 1) > 0 )
1978      "Accounting: Some storage technologies use annuities but have no amortization time"
1979   
1980  parameter accounting_annuityFactor_storage(indicator,nodesModel,storage_techs,vintage);
1981  accounting_annuityFactor_storage(indicator,nodesModelToCalc,storage_techs,vintage)
1982      $accounting_storageUnits(indicator,nodesModelToCalc,storage_techs,vintage,"useAnnuity")
1983      =
1984      accounting_storageUnits(indicator,nodesModelToCalc,storage_techs,vintage,"interest")
1985          * (1 + accounting_storageUnits(indicator,nodesModelToCalc,storage_techs,vintage,"interest"))
1986          ** accounting_storageUnits(indicator,nodesModelToCalc,storage_techs,vintage,"amorTime")
1987      / ((1 + accounting_storageUnits(indicator,nodesModelToCalc,storage_techs,vintage,"interest"))
1988          ** accounting_storageUnits(indicator,nodesModelToCalc,storage_techs,vintage,"amorTime") - 1);
1989   
1990   
1991  abort$(sum((indicator,linksModelToCalc,transfer_techs,vintage)
1992          $(accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"useAnnuity") = 1
1993          and accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"amorTime") < 1), 1) > 0 )
1994      "Accounting: Some transfer technologies use annuities but have no amortization time"
1995   
1996  parameter accounting_annuityFactor_transferLink(indicator,linksModel,transfer_techs,vintage);
1997  accounting_annuityFactor_transferLink(indicator,linksModelToCalc,transfer_techs,vintage)
1998      $accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"useAnnuity")
1999      =
2000      accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"interest")
2001          * (1 + accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"interest"))
2002          ** accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"amorTime")
2003      / ((1 + accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"interest"))
2004          ** accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"amorTime") - 1);
2005   
2006   
2007   
2008  abort$(sum((indicator,linksModelToCalc,transfer_techs,vintage,link_types)
2009          $(accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"useAnnuity") = 1
2010          and accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"amorTime") < 1), 1) > 0 )
2011      "Accounting: Some transfer-per-length technologies use annuities but have no amortization time"
2012   
2013  parameter accounting_annuityFactor_transferDistance(indicator,linksModel,transfer_techs,vintage,link_types);
2014  accounting_annuityFactor_transferDistance(indicator,linksModelToCalc,transfer_techs,vintage,link_types) = 1;
2015   
2016  accounting_annuityFactor_transferDistance(indicator,linksModelToCalc,transfer_techs,vintage,link_types)
2017      $accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"useAnnuity")
2018      =
2019      accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"interest")
2020          * (1 + accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"interest"))
2021          ** accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"amorTime")
2022      / ((1 + accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"interest"))
2023          ** accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"amorTime") - 1);
2024   
INCLUDE    C:\Local\REMix\framework\remix\framework\model\source\methods\mga_pre.gms
2026  * SPDX-FileCopyrightText: Copyright (c) 2023 German Aerospace Center (DLR)
2027  * SPDX-License-Identifier: BSD-3-Clause
2028   
INCLUDE    C:\Local\REMix\framework\remix\framework\model\source\methods\pareto_pre.gms
2032  * SPDX-FileCopyrightText: Copyright (c) 2023 German Aerospace Center (DLR)
2033  * SPDX-License-Identifier: BSD-3-Clause
2034   
INCLUDE    C:\Local\REMix\framework\remix\framework\model\source\postcalc\declaration.gms
2038  * SPDX-FileCopyrightText: Copyright (c) 2023 German Aerospace Center (DLR)
2039  * SPDX-License-Identifier: BSD-3-Clause
2040  * // # Output data
2041  * // This is the reference data model of the REMix output.
2042  * //
2043  * // ## Standard output
2046   
2053   
2055   
2056  set capType / "build", "decom", "total", "lowerLimit", "upperLimit", "total_degraded" /;
2057  set balanceType / "netto", "brutto", "positive", "negative", "flh" /;
2058  set profileType / "upper", "fixed", "lower" /;
2059  set r2a_has_converter_cost(indicator,nodesModel,years,techs,vintage,commodity);
2060   
2061  ** // OUTPUT: indicator_accounting | OEO_00000350:quantity value
2062  * // ### indicator_accounting
2063  * // Title: Accounting indicators Post-calculation
2064  parameter indicator_accounting(accNodesModel,accYears,indicator) "Post-calculation aggregated indicator accounting" ;
2065  * //
2066  ** // OUTPUT: indicator_accounting_ref | OEO_00000350:quantity value
2067  * // ### indicator_accounting_ref
2068  * // Title: Accounting indicators reference
2069  parameter indicator_accounting_ref(accNodesModel,accYears,indicator) "Indicator accounting optimization levels" ;
2070  * //
2071  ** // OUTPUT: indicator_accounting_comp | OEO_00000350:quantity value
2072  * // ### indicator_accounting_comp
2073  * // Title: Accounting indicators composition
2074  parameter indicator_accounting_comp(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a) "Indicator accounting with other indicator composition" ;
2075  * //
2076  ** // OUTPUT: indicator_accounting_detailed | OEO_00000350:quantity value
2077  * // ### indicator_accounting_detailed
2078  * // Title: Accounting indicators detail
2079  parameter indicator_accounting_detailed(indicator,nodesModel,years,techs) "Indicator accounting with technological composition" ;
2080  * //
2081  ** // OUTPUT: indicator_accounting_links | OEO_00000350:quantity value
2082  * // ### indicator_accounting_links
2083  * // Title: Accounting indicators per transfer link
2084  parameter indicator_accounting_links(indicator,nodesModel,nodesModel_a,linksModel,years,techs) "Indicator accounting of transfer technologies" ;
2085  * //
2086  parameter converter_ratedInput(techs,vintage,commodity);
2087  parameter converter_ratedOutput(techs,vintage,commodity);
2088  parameter converter_ratedOutput_min(nodesModel,years,techs,commodity);
2089  parameter converter_ratedOutput_max(nodesModel,years,techs,commodity);
2090   
2091  ** // OUTPUT: converter_caps | OEO_00010257:power capacity
2092  * // ### converter_caps
2093  * // Title: Coverter capacities post-calculation
2094  parameter converter_caps(accNodesModel,accYears,techs,commodity,capType) "Converter capacities, aggregated total" ;
2095  * //
2096  parameter converter_caps_ext(accNodesModel,nodesModel,accYears,years,techs,vintage,commodity,capType);
2097   
2098  ** // OUTPUT: converter_units | OEO_00000350:quantity value
2099  * // ### converter_units
2100  * // Title: Coverter units post-calculation
2101  parameter converter_units(accNodesModel,accYears,techs,vintage,capType) "Converter units" ;
2102  * //
2103  parameter converter_units_ext(accNodesModel,nodesModel,accYears,years,techs,vintage,capType);
2104   
2105  parameter max_transfer_coefficient(techs,commodity);
2106  parameter min_transfer_coefficient(techs,commodity);
2107  ** // OUTPUT: transfer_links | OEO_00000350:quantity value
2108  * // ### transfer_links
2109  * // Title: Transfer post-calculation
2110  parameter transfer_links(linksModel,years,techs,vintage,capType) "Transfer links" ;
2111  * //
2112  ** // OUTPUT: transfer_caps | OEO_00010257:power capacity
2113  * // ### transfer_caps
2114  * // Title: Transfer capacities post-calculation
2115  parameter transfer_caps(nodesModel_start,nodesModel_end,linksModel,years,techs,commodity,capType) "Transfer capacities, aggregated total" ;
2116  * //
2117  ** // OUTPUT: transfer_flows | OEO_00050019:energy amount value
2118  * // ### transfer_flows
2119  * // Title: Transfer hourly flows
2120  parameter transfer_flows(timeModel,nodesModel_start,nodesModel_end,linksModel,years,techs,commodity) "Hourly link flows" ;
2121  * //
2122  ** // OUTPUT: transfer_flows_annual | OEO_00050019:energy amount value
2123  * // ### transfer_flows_annual
2124  * // Title: Transfer annual flows
2125  parameter transfer_flows_annual(nodesModel_start,nodesModel_end,linksModel,years,techs,commodity,balanceType) "Annual link flows" ;
2126  * //
2127  ** // OUTPUT: transfer_losses | OEO_00050019:energy amount value
2128  * // ### transfer_losses
2129  * // Title: Transfer hourly losses
2130  parameter transfer_losses(timeModel,nodesModel_start,nodesModel_end,linksModel,years,techs,commodity) "Hourly link losses" ;
2131  * //
2132  ** // OUTPUT: transfer_losses_annual | OEO_00050019:energy amount value
2133  * // ### transfer_losses_annual
2134  * // Title: Transfer annual losses
2135  parameter transfer_losses_annual(nodesModel_start,nodesModel_end,linksModel,years,techs,commodity,balanceType) "Annual link losses" ;
2136  * //
2137  parameter storage_size_max(nodesModel,years,techs,commodity);
2138  parameter storage_size_min(nodesModel,years,techs,commodity);
2139  ** // OUTPUT: storage_units |  OEO_00000350:quantity value
2140  * // ### storage_units
2141  * // Title: Storage units post-calculation
2142  parameter storage_units(accNodesModel,accYears,techs,vintage,capType) "Storage units" ;
2143  * //
2144  parameter storage_units_ext(accNodesModel,nodesModel,accYears,years,techs,vintage,capType);
2145  ** // OUTPUT: storage_caps | OEO_00230000:energy storage capacity
2146  * // ### storage_caps
2147  * // Title: Storage capacities post-calculation
2148  parameter storage_caps(accNodesModel,accYears,techs,commodity,capType) "Storage capacities, aggregated total" ;
2149  * //
2150  parameter storage_caps_ext(accNodesModel,nodesModel,accYears,years,techs,vintage,commodity,capType);
2151  ** // OUTPUT: storage_level_out | OEO_00330012:energy storage content
2152  * // ### storage_level_out
2153  * // Title: Storage level
2154  parameter storage_level_out(timeModel,accNodesModel,accYears,techs,commodity) "Storage level per time step" ;
2155  * //
2156  parameter storage_level_out_ext(timeModel,accNodesModel,nodesModel,accYears,years,techs,vintage,commodity);
2157  ** // OUTPUT: storage_flows | OEO_00050019:energy amount value
2158  * // ### storage_flows
2159  * // Title: Storage hourly flows
2160  parameter storage_flows(timeModel,accNodesModel,accYears,techs,commodity) "Storage flows per time step" ;
2161  * //
2162  parameter storage_flows_ext(timeModel,accNodesModel,nodesModel,accYears,years,techs,vintage,commodity);
2163  ** // OUTPUT: storage_flows_annual | OEO_00050019:energy amount value
2164  * // ### storage_flows_annual
2165  * // Title: Storage annual flows
2166  parameter storage_flows_annual(accNodesModel,accYears,techs,commodity,balanceType) "Aggregated storage flows" ;
2167  * //
2168  ** // OUTPUT: storage_losses_out | OEO_00050019:energy amount value
2169  * // ### storage_losses_out
2170  * // Title: Storage hourly losses
2171  parameter storage_losses_out(timeModel,accNodesModel,accYears,techs,commodity) "Storage losses per time step" ;
2172  * //
2173  ** // OUTPUT: storage_losses_annual | OEO_00050019:energy amount value
2174  * // ### storage_losses_annual
2175  * // Title: Storage annual losses
2176  parameter storage_losses_annual(accNodesModel,accYears,techs,commodity,balanceType) "Aggregated storage losses" ;
2177  * //
2178  ** // OUTPUT: commodity_balance | OEO_00000350:quantity value
2179  * // ### commodity_balance
2180  * // Title: Hourly commodity balance
2181  parameter commodity_balance(timeModel,accNodesModel,accYears,techs,commodity) "Commodity balances per model hour" ;
2182  parameter commodity_balance_ext(timeModel,accNodesModel,nodesModel,accYears,years,techs,vintage,commodity);
2183  * //
2184  ** // OUTPUT: commodity_balance_annual | OEO_00000350:quantity value
2185  * // ### commodity_balance_annual
2186  * // Title: Annual commodity balance
2187  parameter commodity_balance_annual(accNodesModel,accYears,techs,commodity,balanceType) "Aggregated commodity balances" ;
2188  * //
2189  ** // OUTPUT: marginals_sourcesink_profile | OEO_00040008:marginal cost
2190  * // ### marginals_sourcesink_profile
2191  * // Title: Source-sink marginals
2192  parameter marginals_sourcesink_profile(timeModel,nodesModel,years,techs,commodity) "Source and sink flow marginal values" ;
2193  * //
2194  ** // OUTPUT: marginals_balance | OEO_00040008:marginal cost
2195  * // ### marginals_balance
2196  * // Title: Nodel balance marginals
2197  parameter marginals_balance(timeModel,nodesModel,years,commodity) "Nodal balance marginal values" ;
2198  * //
2199  ** // OUTPUT: marginals_sourcesink_sum | OEO_00040008:marginal cost
2200  * // ### marginals_sourcesink_sum
2201  * // Title: Source-sink annual marginals
2202  parameter marginals_sourcesink_sum(nodesModel,years,techs,commodity) "Annual source and sink flow marginal values" ;
2203  * //
2204  ** // OUTPUT: marginals_indicator_bounds | OEO_00040008:marginal cost
2205  * // ### marginals_indicator_bounds
2206  * // Title: Indicator bounds marginals
2207  parameter marginals_indicator_bounds(accNodesModel,accYears,indicator) "Accounting indicator marginals" ;
2208  * //
2209  * // ## REMix-AMIRIS interface output
2210  * //
2211  ** // OUTPUT: r2a_annuity_cost_converter | OEO_00040009:cost
2212  * // ### r2a_annuity_cost_converter
2213  * // Title: Converter annuity cost
2214  parameter r2a_annuity_cost_converter(indicator,accNodesModel,accYears,techs,vintage,commodity) "Annuity cost of converters" ;
2215  * //
2216  ** // OUTPUT: r2a_spec_cost_converter | OEO_00040009:cost
2217  * // ### r2a_spec_cost_converter
2218  * // Title: Converter specific cost
2219  parameter r2a_spec_cost_converter(indicator,accNodesModel,accYears,techs,vintage,commodity) "Specific cost of converters" ;
2220  * //
2221  ** // OUTPUT: r2a_spec_cost_fuel | OEO_00040009:cost
2222  * // ### r2a_spec_cost_fuel
2223  * // Title: Commodity specific cost
2224  parameter r2a_spec_cost_fuel(indicator,accNodesModel,accYears,techs,commodity) "Specific cost of commodities, used particularly for fuels" ;
2225  * //
2226  ** // OUTPUT: r2a_spec_cost_indicator | OEO_00040009:cost
2227  * // ### r2a_spec_cost_indicator
2228  * // Title: Indicator specific cost
2229  parameter r2a_spec_cost_indicator(indicator,indicator_a,accNodesModel,accYears) "Specific indicator cost" ;
2230  * //
2231  ** // OUTPUT: r2a_converter_efficiencies | OEO_00140050:efficiency value
2232  * // ### r2a_converter_efficiencies
2233  * // Title: Indicator specific cost
2234  parameter r2a_converter_efficiencies(techs,vintage,activity,commodity,commodity_a) "Converter-specific efficiency" ;
2235  * //
2236  ** // OUTPUT: r2a_converter_avail_factor | OEO_00000350:quantity value
2237  * // ### r2a_converter_avail_factor
2238  * // Title: Converter availability factor
2239  parameter r2a_converter_avail_factor(accNodesModel,accYears,techs,vintage) "Availability factor of converter technologies" ;
2240  parameter r2a_converter_avail_profile(timeModel,accNodesModel,accYears,techs,commodity,profileType) "Availability of converter technologies" ;
2241  parameter r2a_converter_avail_profile_ext(timeModel,accNodesModel,nodesModel,accYears,years,techs,vintage,commodity,profileType);
2242  * //
2243  ** // OUTPUT: r2a_storage_e2p | OEO_00000350:quantity value
2244  * // ### r2a_storage_e2p
2245  * // Title: E2P Storage
2246  parameter r2a_storage_e2p(accNodesModel,accYears,techs,vintage,commodity,capType) "Energy-to-power ratio" ;
2247  * //
2248  ** // OUTPUT: r2a_storage_selfdischarge | OEO_00000350:quantity value
2249  * // ### r2a_storage_selfdischarge
2250  * // Title: Storage self discharge rates
2251  parameter r2a_storage_selfdischarge(accNodesModel,accYears,techs,vintage,commodity);
2252   
INCLUDE    C:\Local\REMix\framework\remix\framework\model\source\loadgdx.gms
2256  * SPDX-FileCopyrightText: Copyright (c) 2023 German Aerospace Center (DLR)
2257  * SPDX-License-Identifier: BSD-3-Clause
2258   
2259  * ==== global settings ====
2261   
2263   
INCLUDE    C:\Local\REMix\framework\remix\framework\model\source\core\converter.gms
2265  * SPDX-FileCopyrightText: Copyright (c) 2023 German Aerospace Center (DLR)
2266  * SPDX-License-Identifier: BSD-3-Clause
2267   
2268  * // # core_converter
2269  * // The equations in this file describe the converters in the model.
2270   
2271  * // ## Advanced features
2272  * //
2273  * // You can find a more detailed explanation of the %curly_open%ref%curly_close%`MIP features <explanations_mip_label>`.
2274  ** // There is also a more detailed explanation on the modeling of outages at the %curly_open%ref%curly_close%`resilience section <explanations_resilience_label>`.
2275  * //
2276  * // In the following table you can see which modifications you have to make to your data to use the different features.
2277  * //
2278  * // | Feature | Modification |
2279  * // | ------ | ------ |
2280  * // | MIP expansion | The converter_tech_Parameter "mipUnits" has to be set to 1 in converter_techParam.dat for the technologies and years where descrete expansion is wanted |
2281  * // | Minimum up/downtime | The converter_tech_Parameters "minUptime" and/or "minDowntime" need to be set to the according amount of minimum time steps.Furthermore, the converter_tech_Parameter "mipDispatch" has to be set to 1 in converter_techParam.dat
2282  * // for the technologies and years where a minimum up- or downtime should be applied so that the units can be shut down. "mipUnits" will automatically be set to 1 |
2283  * // | Partial load | The converter_tech_Parameter "mipDispatch" has to be set to 1 in converter_techParam.dat for the technologies and years where you want to make use of the partial load feature. You also have to set a value to
2284  * // the converter_coefficient_parameters "minLoad" and/or "maxLoad" for the according technologies, vintages, activities and commodities. You can then for example set different "coefficient" values for each activity in converter_coefficient.dat |
2285  ** // | Outages | You have to include the converter_outageProfile.dat-file and while executing the model you have to set --method=resilience |
2286   
2287  * // ## %curly_open%ref%curly_close%`sets <remix_model_sets_label>`
2288  * //
2289  * // ### set_converter_techs.dat
2290  * // In this file all converter technologies are listed that can be used within your model.
2291  * //
2292  * // ### set_activities.dat
2293  * // All modes with which the converter technologies can be operated need to be added here.
2294  * // Examples: Charge (for the charging mode of a storage), Powergen (for the mode in which a converter produces electricity), Curtailment (for the mode in which a renewable power plant is shut down), …
2295  * // If you would like to use the partial load feature, all activity modes that should be available for this feature need to be defined here as well.
2296  * //
2297  * // ### set_commodities.dat
2298  * // In this file all commodities are listed that can be used and converted by the converter technologies.
2299  * // Examples: Electricity, Coal, Biomass, Hydrogen, …
2300   
2301  * // ## Variables
2302  * // {special_table_converter_variables}
3938   
3939  * ==== loading units from gdx file ====
3940   
3941  * Load units from gdx file
3943   
3944  * ==== calculation of mappings ====
3945   
3946  * Technologies with a lifeTime > 0 are available
3947  set converter_availTech(nodesModel,years,converter_techs,vintage);
3948  converter_availTech(nodesModel,years,converter_techs,vintage)
3949      $(vintage.val = smax(vintage_a$(vintage_a.val <= years.val
3950          and converter_techParam(converter_techs,vintage_a,"lifeTime") > 0), vintage_a.val)) = yes;
3951   
3952  * Technologies to optimize become unavailable if they have an unitsUpperLimit of 0
3953  converter_availTech(nodesModel,years,converter_techs,vintage)
3954      $(yearsToCalc(years) and converter_capacityParam(nodesModel,years,converter_techs,"unitsUpperLimit") = 0 ) = no;
3955   
3956  * Technologies already built become unavailable if they have an unitsBuild of 0
3957  converter_availTech(nodesModel,years,converter_techs,vintage)
3958      $( ( not yearsToCalc(years)) and converter_capacityParam(nodesModel,years,converter_techs,"unitsBuild") = 0 ) = no;
3959   
3960  * Used technologies are available technologies over their technical lifeTime
3961  set converter_usedTech(nodesModel,years,converter_techs,vintage);
3962  converter_usedTech(nodesModel,years,converter_techs,vintage)
3963      $(vintage.val <= years.val
3964          and years.val < smax(years_a$converter_availTech(nodesModel,years_a,converter_techs,vintage),
3965                                  years_a.val + converter_techParam(converter_techs,vintage,"lifeTime"))
3966          ) = yes;
3967   
3968  * Technologies have to be decomissioned in the interval of first avail + lifetime to last avail + lifetime
3969  set converter_decomTech(nodesModel,years,converter_techs,vintage);
3970  converter_decomTech(nodesModel,years,converter_techs,vintage)
3971    $(sum(years_a$converter_usedTech(nodesModel,years_a,converter_techs,vintage), 1)
3972      and sum(yearsToCalc
3973        $(sameas(years, yearsToCalc)
3974          and yearsToCalc.val >= smin(years_a$converter_availTech(nodesModel,years_a,converter_techs,vintage), years_a.val) + converter_techParam(converter_techs,vintage,"lifeTime")
3975          and yearsToCalc.val <= smax(years_a$converter_availTech(nodesModel,years_a,converter_techs,vintage), years_a.val) + converter_techParam(converter_techs,vintage,"lifeTime")), 1))
3976    = yes;
3977   
3978  * Extend the decom frame to the year after the last year of usedTech
3979  converter_decomTech(nodesModel,yearsToCalc,converter_techs,vintage)
3980    $(converter_usedTech(nodesModel,yearsToCalc-1,converter_techs,vintage)
3981      and converter_decomTech(nodesModel,yearsToCalc-1,converter_techs,vintage))
3982    = yes;
3983   
3984  * Mapping for used activities and commodities
3985  set converter_usedActCom(converter_techs,vintage,activity,commodity);
3986  option converter_usedActCom < converter_coefficient;
3987   
3988  set converter_usedAct(converter_techs,vintage,activity);
3989  option converter_usedAct < converter_usedActCom;
3990   
3991  set converter_usedCom(converter_techs,vintage,commodity);
3992  option converter_usedCom < converter_usedActCom;
3993   
3994  set converter_usedTechAct(nodesModel,years,converter_techs,vintage,activity);
3995  converter_usedTechAct(nodesModel,years,converter_techs,vintage,activity)
3996      $(converter_usedTech(nodesModel,years,converter_techs,vintage)
3997          and converter_usedAct(converter_techs,vintage,activity))
3998      = yes;
3999   
4000  set converter_useRampPos(nodesModel,years,converter_techs,vintage);
4001  converter_useRampPos(nodesModelToCalc,yearsToCalc,converter_techs,vintage)
4002    $(sum(indicator$accounting_converterStartup(indicator,nodesModelToCalc,converter_techs,vintage,"perRamp"), 1)
4003      or sum(indicator$accounting_converterStartup(indicator,nodesModelToCalc,converter_techs,vintage,"perRampPos"), 1))
4004    = 1;
4005   
4006  set converter_useRampNeg(nodesModel,years,converter_techs,vintage);
4007  converter_useRampNeg(nodesModelToCalc,yearsToCalc,converter_techs,vintage)
4008    $(sum(indicator$accounting_converterStartup(indicator,nodesModelToCalc,converter_techs,vintage,"perRamp"), 1)
4009      or sum(indicator$accounting_converterStartup(indicator,nodesModelToCalc,converter_techs,vintage,"perRampNeg"), 1))
4010    = 1;
4011   
4012   
4013  * ==== aggregation of profiles ====
4014   
4015  * derive upper and lower profiles then aggregate
4016  set converter_activity_hasProfileIn(nodesData,years,converter_techs,pc_converter_activityProfile);
4017  option converter_activity_hasProfileIn < converter_activityProfileIn;
4018   
4019  set converter_activity_hasProfile(nodesModel,years,converter_techs,pc_converter_activityProfile);
4020  converter_activity_hasProfile(nodesModelToCalc,yearsToCalc,converter_techs,pc_converter_activityProfile)
4021      = sum(nodesData$aggregateNodesModel(nodesData,nodesModelToCalc),
4022              converter_activity_hasProfileIn(nodesData,yearsToCalc,converter_techs,pc_converter_activityProfile));
4023   
4024  set converter_coefficient_hasProfileIn(nodesData,years,converter_techs,vintage,activity,commodity);
4025  option converter_coefficient_hasProfileIn < converter_coefficientProfileIn;
4026   
4027  set converter_coefficient_hasProfile(nodesModel,years,converter_techs,vintage,activity,commodity);
4028  converter_coefficient_hasProfile(nodesModelToCalc,yearsToCalc,converter_techs,vintage,activity,commodity)
4029      = sum(nodesData$aggregateNodesModel(nodesData,nodesModelToCalc),
4030              converter_coefficient_hasProfileIn(nodesData,yearsToCalc,converter_techs,vintage,activity,commodity));
4031   
4032  * aagregate time dimension
4033  parameter converter_activityProfileIn_aggTime(timeModel,nodesData,yearsToCalc,converter_techs,pc_converter_activityProfile);
4034  converter_activityProfileIn_aggTime(timeModelToCalc,nodesData,yearsToCalc,converter_techs,pc_converter_activityProfile)
4035    $converter_activity_hasProfileIn(nodesData,yearsToCalc,converter_techs,pc_converter_activityProfile)
4036    = sum(timeData$timeMapping(timeData,timeModelToCalc),
4037            converter_activityProfileIn(timeData,nodesData,yearsToCalc,converter_techs,pc_converter_activityProfile)
4038            / timeLength(timeModelToCalc));
4039  option clear = converter_activityProfileIn;
4040   
4041  * weighted average for a real sum of units upper limits, plain average if one region has an upper limit of inf
4042  parameter converter_activityProfile(timeModel,nodesModel,years,converter_techs,vintage,pc_converter_activityProfile);
4043  converter_activityProfile(timeModelToCalc,converter_usedTech(nodesModelToCalc,yearsToCalc,converter_techs,vintage),"upper")
4044      = converter_techParam(converter_techs,vintage,"activityUpperLimit");
4045  converter_activityProfile(timeModelToCalc,converter_usedTech(nodesModelToCalc,yearsToCalc,converter_techs,vintage),"lower")
4046      = converter_techParam(converter_techs,vintage,"activityLowerLimit");
4047   
4048   
4049  set converter_finiteUnitLimit(nodesModelToCalc,yearsToCalc,converter_techs);
4050  converter_finiteUnitLimit(nodesModelToCalc,yearsToCalc,converter_techs)
4051      = sum(nodesData$aggregateNodesModel(nodesData,nodesModelToCalc), converter_capacityParamIn(nodesData,yearsToCalc,converter_techs,"unitsUpperLimit")) > 0
4052          and sum(nodesData$aggregateNodesModel(nodesData,nodesModelToCalc), converter_capacityParamIn(nodesData,yearsToCalc,converter_techs,"unitsUpperLimit")) < inf;
4053   
4054  set converter_infiniteUnitLimit(nodesModelToCalc,yearsToCalc,converter_techs);
4055  converter_infiniteUnitLimit(nodesModelToCalc,yearsToCalc,converter_techs)
4056      = sum(nodesData$aggregateNodesModel(nodesData,nodesModelToCalc), converter_capacityParamIn(nodesData,yearsToCalc,converter_techs,"unitsUpperLimit")) = inf;
4057   
4058  converter_activityProfile(timeModelToCalc,converter_usedTech(nodesModelToCalc,yearsToCalc,converter_techs,vintage),pc_converter_activityProfile)
4059      $(converter_activity_hasProfile(nodesModelToCalc,yearsToCalc,converter_techs,pc_converter_activityProfile)
4060          and converter_finiteUnitLimit(nodesModelToCalc,yearsToCalc,converter_techs))
4061      = sum(nodesData$(aggregateNodesModel(nodesData,nodesModelToCalc)
4062                  and converter_capacityParamIn(nodesData,yearsToCalc,converter_techs,"unitsUpperLimit") < inf ),
4063                converter_activityProfileIn_aggTime(timeModelToCalc,nodesData,yearsToCalc,converter_techs,pc_converter_activityProfile)
4064                * converter_capacityParamIn(nodesData,yearsToCalc,converter_techs,"unitsUpperLimit"))
4065      / sum(nodesData$aggregateNodesModel(nodesData,nodesModelToCalc),
4066              converter_capacityParamIn(nodesData,yearsToCalc,converter_techs,"unitsUpperLimit"));
4067   
4068  converter_activityProfile(timeModelToCalc,converter_usedTech(nodesModelToCalc,yearsToCalc,converter_techs,vintage),pc_converter_activityProfile)
4069      $(converter_activity_hasProfile(nodesModelToCalc,yearsToCalc,converter_techs,pc_converter_activityProfile)
4070          and converter_infiniteUnitLimit(nodesModelToCalc,yearsToCalc,converter_techs))
4071      = sum(nodesData$(aggregateNodesModel(nodesData,nodesModelToCalc)
4072                  and converter_capacityParamIn(nodesData,yearsToCalc,converter_techs,"unitsUpperLimit") = inf),
4073                converter_activityProfileIn_aggTime(timeModelToCalc,nodesData,yearsToCalc,converter_techs,pc_converter_activityProfile)
4074                * converter_capacityParamIn(nodesData,yearsToCalc,converter_techs,"unitsUpperLimit"))
4075      / sum(nodesData$(aggregateNodesModel(nodesData,nodesModelToCalc)
4076                      and converter_capacityParamIn(nodesData,yearsToCalc,converter_techs,"unitsUpperLimit") = inf ),
4077              1);
4078  option clear = converter_activityProfileIn_aggTime;
4079   
4080  * for fixed profiles overwrite upper and lower profile
4081  converter_activityProfile(timeModelToCalc,nodesModelToCalc,yearsToCalc,converter_techs,vintage,"lower")
4082      $converter_activity_hasProfile(nodesModelToCalc,yearsToCalc,converter_techs,"fixed")
4083      = converter_activityProfile(timeModelToCalc,nodesModelToCalc,yearsToCalc,converter_techs,vintage,"fixed");
4084   
4085  converter_activityProfile(timeModelToCalc,nodesModelToCalc,yearsToCalc,converter_techs,vintage,"upper")
4086      $converter_activity_hasProfile(nodesModelToCalc,yearsToCalc,converter_techs,"fixed")
4087      = converter_activityProfile(timeModelToCalc,nodesModelToCalc,yearsToCalc,converter_techs,vintage,"fixed");
4088   
4089   
4090  * weighted average for a real sum of units upper limits, plain average if one region has an upper limit of inf
4091  parameter converter_coefficientProfile(timeModel,nodesModel,years,converter_techs,vintage,activity,commodity);
4092  converter_coefficientProfile(timeModelToCalc,converter_usedTechAct(nodesModelToCalc,yearsToCalc,converter_techs,vintage,activity),commodity)
4093      = converter_coefficient(converter_techs,vintage,activity,commodity,"coefficient");
4094   
4095  converter_coefficientProfile(timeModelToCalc,converter_usedTechAct(nodesModelToCalc,yearsToCalc,converter_techs,vintage,activity),commodity)
4096      $( converter_coefficient_hasProfile(nodesModelToCalc,yearsToCalc,converter_techs,vintage,activity,commodity)
4097          and converter_finiteUnitLimit(nodesModelToCalc,yearsToCalc,converter_techs) )
4098      = sum(nodesData$aggregateNodesModel(nodesData,nodesModelToCalc),
4099            sum(timeData$timeMapping(timeData,timeModelToCalc),
4100                    converter_coefficientProfileIn(timeData,nodesData,yearsToCalc,converter_techs,vintage,activity,commodity))
4101                / timeLength(timeModelToCalc)
4102              * converter_capacityParamIn(nodesData,yearsToCalc,converter_techs,"unitsUpperLimit") )
4103      / sum(nodesData$aggregateNodesModel(nodesData,nodesModelToCalc),
4104              converter_capacityParamIn(nodesData,yearsToCalc,converter_techs,"unitsUpperLimit"));
4105   
4106  converter_coefficientProfile(timeModelToCalc,converter_usedTechAct(nodesModelToCalc,yearsToCalc,converter_techs,vintage,activity),commodity)
4107      $( converter_coefficient_hasProfile(nodesModelToCalc,yearsToCalc,converter_techs,vintage,activity,commodity)
4108          and converter_infiniteUnitLimit(nodesModelToCalc,yearsToCalc,converter_techs))
4109      = sum(nodesData$(aggregateNodesModel(nodesData,nodesModelToCalc)
4110                      and converter_capacityParamIn(nodesData,yearsToCalc,converter_techs,"unitsUpperLimit") = inf ),
4111            sum(timeData$timeMapping(timeData,timeModelToCalc),
4112                    converter_coefficientProfileIn(timeData,nodesData,yearsToCalc,converter_techs,vintage,activity,commodity))
4113                / timeLength(timeModelToCalc))
4114      / sum(nodesData$(aggregateNodesModel(nodesData,nodesModelToCalc)
4115                      and converter_capacityParamIn(nodesData,yearsToCalc,converter_techs,"unitsUpperLimit") = inf ), 1);
4116   
4117  * ==== prepare partial load behavior parameters ====
4118   
4119  * set disabled max load requirements to 1 to avoid excessive logical expressions later on
4120  alias(commodity, com);
4121  converter_coefficient(converter_techs,vintage,activity,commodity,"maxLoad")
4122      $((converter_coefficient(converter_techs,vintage,activity,commodity,"maxLoad") = 0)
4123        and converter_usedAct(converter_techs,vintage,activity))
4124      = 1;
4125   
4126  * indicate that at least one activity of a technology makes use of partial load behavior
4127  set converter_hasMaxLoad(converter_techs,vintage);
4128  converter_hasMaxLoad(converter_techs,vintage)
4129    = smin((activity,commodity)$converter_usedAct(converter_techs,vintage,activity),
4130              converter_coefficient(converter_techs,vintage,activity,commodity,"maxLoad")) < 1;
4131   
4132  set converter_hasMinLoad(converter_techs,vintage);
4133  converter_hasMinLoad(converter_techs,vintage)
4134    = smax((activity,commodity)$converter_usedAct(converter_techs,vintage,activity),
4135              converter_coefficient(converter_techs,vintage,activity,commodity,"minLoad")) > 0;
4136   
4137  set converter_hasConstantFluxInActivity(converter_techs,vintage);
4138  converter_hasConstantFluxInActivity(converter_techs,vintage)
4139    = sum((activity,commodity)$converter_usedAct(converter_techs,vintage,activity),
4140                          abs(converter_coefficient(converter_techs,vintage,activity,commodity,"constant"))) > 0;
4141   
4142  * setting up a requirements parameter to avoid having to cycle through commodities in equations
4143  set pc_converter_activityRequirements
4144      /
4145      minLoad             "Lower profile for converter activity"
4146      maxLoad             "Upper profile for converter activity"
4147      /;
4148  parameter converter_activityRequirements(converter_techs,vintage,activity,pc_converter_activityRequirements);
4149  converter_activityRequirements(converter_techs,vintage,activity,"minLoad")
4150    = smax(commodity, converter_coefficient(converter_techs,vintage,activity,commodity,"minLoad"));
4151  converter_activityRequirements(converter_techs,vintage,activity,"maxLoad")
4152    = smin(commodity, converter_coefficient(converter_techs,vintage,activity,commodity,"maxLoad"));
4153   
4154  * ==== activate MIP units for MIP dispatch or partial load technologies ====
4155   
4156  set converter_hasMinUptime(converter_techs,vintage);
4157  converter_hasMinUptime(converter_techs,vintage)
4158    $(converter_techParam(converter_techs,vintage,"minUptime")
4159      and converter_techParam(converter_techs,vintage,"mipDispatch"))
4160    = yes;
4161   
4162  set converter_hasMinDowntime(converter_techs,vintage);
4163  converter_hasMinDowntime(converter_techs,vintage)
4164    $(converter_techParam(converter_techs,vintage,"minDowntime")
4165      and converter_techParam(converter_techs,vintage,"mipDispatch"))
4166    = yes;
4167   
4168  * require integer unit counts if online state is to be tracked
4169  converter_techParam(converter_techs,vintage,"mipUnits")
4170      $(converter_techParam(converter_techs,vintage,"mipDispatch")
4171        or converter_hasMinLoad(converter_techs, vintage)
4172        or converter_hasMaxLoad(converter_techs, vintage)
4173        or converter_hasConstantFluxInActivity(converter_techs,vintage))
4174      = 1;
4175   
4176  * ==== floor mip converter units to integer values ====
4177  converter_capacityParam(nodesModelToCalc,yearsToCalc,converter_techs,"unitsLowerLimit")
4178      $sum(vintage, converter_techParam(converter_techs,vintage,"mipUnits"))
4179      = floor(converter_capacityParam(nodesModelToCalc,yearsToCalc,converter_techs,"unitsLowerLimit"));
4180  converter_capacityParam(nodesModelToCalc,yearsToCalc,converter_techs,"unitsUpperLimit")
4181      $sum(vintage, converter_techParam(converter_techs,vintage,"mipUnits"))
4182      = ceil(converter_capacityParam(nodesModelToCalc,yearsToCalc,converter_techs,"unitsUpperLimit"));
4183   
4184  * ==== scalars and sets for minUptime and minDowntime ====
4185   
4186  scalar converter_maxUptimeReq;
4187  converter_maxUptimeReq = smax((converter_techs,vintage), converter_techParam(converter_techs,vintage,"minUptime"));
4188  set uptimeSearchRange(timeModelToCalc);
4189  uptimeSearchRange(timeModelToCalc) = ord(timeModelToCalc) <= converter_maxUptimeReq;
4190   
4191  scalar converter_maxDowntimeReq;
4192  converter_maxDowntimeReq = smax((converter_techs,vintage), converter_techParam(converter_techs,vintage,"minDowntime"));
4193  set downtimeSearchRange(timeModelToCalc);
4194  downtimeSearchRange(timeModelToCalc) = ord(timeModelToCalc) <= converter_maxDowntimeReq;
4195   
4196  * ==== definition of variables ====
4197   
4198  * Initialise variables for unitsBuild
4199  converter_unitsBuild.l(nodesModel,years,converter_techs,vintage)
4200      $converter_availTech(nodesModel,years,converter_techs,vintage)
4201      = converter_capacityParam(nodesModel,years,converter_techs,"unitsBuild");
4202  converter_unitsBuild.lo(nodesModel,yearsToCalc,converter_techs,vintage)
4203      $converter_availTech(nodesModel,yearsToCalc,converter_techs,vintage)
4204      = converter_unitsBuild.l(nodesModel,yearsToCalc,converter_techs,vintage);
4205  converter_unitsBuild.fx(nodesModel,years,converter_techs,vintage)
4206      $converter_capacityParam(nodesModel,years,converter_techs,"noExpansion")
4207      = converter_unitsBuild.l(nodesModel,years,converter_techs,vintage);
4208   
4209  * Initialise variables for unitsDecom
4210  converter_unitsDecom.l(nodesModel,years,converter_techs,vintage)
4211    $(converter_decomTech(nodesModel,years,converter_techs,vintage)
4212      and years.val < sum(yearsToCalc$(ord(yearsToCalc) = 1), yearsToCalc.val))
4213    = sum((years_a,years_aa)$(sameas(years-1, years_aa)
4214                        and years_a.val > years_aa.val - converter_techParam(converter_techs,vintage,'lifeTime')
4215                        and years_a.val <= years.val - converter_techParam(converter_techs,vintage,'lifeTime')
4216                        and converter_availTech(nodesModel,years_a,converter_techs,vintage)),
4217          converter_unitsBuild.l(nodesModel,years_a,converter_techs,vintage));
4218   
4219  converter_unitsDecom.l(nodesModel,yearsToCalc,converter_techs,vintage)
4220    $converter_decomTech(nodesModel,yearsToCalc,converter_techs,vintage)
4221    = sum(years$
4222          (years.val < sum(yearsToCalc_a$(ord(yearsToCalc_a) = 1), yearsToCalc_a.val)
4223            and converter_availTech(nodesModel,years,converter_techs,vintage)
4224            and years.val > sum(years_a$sameas(years_a, yearsToCalc-1), years_a.val) - converter_techParam(converter_techs,vintage,'lifeTime')
4225            and years.val <= yearsToCalc.val - converter_techParam(converter_techs,vintage,'lifeTime')),
4226        converter_unitsBuild.l(nodesModel,years,converter_techs,vintage))
4227      + sum(yearsToCalc_a$
4228          (yearsToCalc_a.val < sum(yearsToCalc_aa$(ord(yearsToCalc_aa) > 1), yearsToCalc_a.val)
4229            and converter_availTech(nodesModel,yearsToCalc_a,converter_techs,vintage)
4230            and yearsToCalc_a.val > sum(years_a$sameas(years_a, yearsToCalc-1), years_a.val) - converter_techParam(converter_techs,vintage,'lifeTime')
4231            and yearsToCalc_a.val <= yearsToCalc.val - converter_techParam(converter_techs,vintage,'lifeTime')),
4232        converter_unitsBuild.l(nodesModel,yearsToCalc_a,converter_techs,vintage));
4233        ;
4234   
4235  converter_unitsDecom.lo(nodesModel,yearsToCalc,converter_techs,vintage)
4236      $(converter_usedTech(nodesModel,yearsToCalc,converter_techs,vintage)
4237          and not converter_techParam(converter_techs,vintage,"freeDecom"))
4238      = converter_unitsDecom.l(nodesModel,yearsToCalc,converter_techs,vintage)
4239   
4240  * Calculate planned unit expansion
4241  parameter converter_unitsPlanned(nodesModel,years,converter_techs,vintage);
4242  converter_unitsPlanned(nodesModel,years,converter_techs,vintage) = 0;
4243  loop(years,
4244    converter_unitsPlanned(nodesModel,years,converter_techs,vintage)
4245      =
4246      converter_unitsPlanned(nodesModel,years-1,converter_techs,vintage)
4247          $converter_usedTech(nodesModel,years-1,converter_techs,vintage)
4248      + converter_unitsBuild.l(nodesModel,years,converter_techs,vintage)
4249          $converter_availTech(nodesModel,years,converter_techs,vintage)
4250      - converter_unitsDecom.l(nodesModel,years,converter_techs,vintage)
4251          $converter_usedTech(nodesModel,years,converter_techs,vintage);
4252  );
4253   
4254  * Set initial state for planned units
4255  converter_unitsTotal.l(nodesModel,years,converter_techs,vintage)
4256    = converter_unitsPlanned(nodesModel,years,converter_techs,vintage)
4257   
4258  * Calculate if planned unit expansion is bounded by upper and lower limits
4259  set converter_unitBoundsFixed(nodesModel,years,converter_techs);
4260  converter_unitBoundsFixed(nodesModel,years,converter_techs)
4261    $(sum(vintage$converter_usedTech(nodesModel,years,converter_techs,vintage),
4262          converter_unitsPlanned(nodesModel,years,converter_techs,vintage))
4263      = converter_capacityParam(nodesModel,years,converter_techs,"unitsUpperLimit")
4264    and sum(vintage$converter_usedTech(nodesModel,years,converter_techs,vintage),
4265          converter_unitsPlanned(nodesModel,years,converter_techs,vintage))
4266      = converter_capacityParam(nodesModel,years,converter_techs,"unitsLowerLimit"))
4267    = yes;
4268   
4269  * Fix unitsBuild, unitsDecom, unitsTotal if levels are predetermined by upper and lower limits
4270  converter_unitsBuild.fx(nodesModel,years,converter_techs,vintage)
4271    $(converter_availTech(nodesModel,years,converter_techs,vintage)
4272      and converter_unitBoundsFixed(nodesModel,years,converter_techs))
4273    = converter_unitsBuild.l(nodesModel,years,converter_techs,vintage);
4274  converter_unitsDecom.fx(nodesModel,years,converter_techs,vintage)
4275    $(converter_usedTech(nodesModel,years,converter_techs,vintage)
4276      and converter_unitBoundsFixed(nodesModel,years,converter_techs))
4277    = converter_unitsDecom.l(nodesModel,years,converter_techs,vintage);
4278  converter_unitsTotal.fx(nodesModel,years,converter_techs,vintage)
4279    $(converter_usedTech(nodesModel,years,converter_techs,vintage)
4280      and converter_unitBoundsFixed(nodesModel,years,converter_techs))
4281    = converter_unitsTotal.l(nodesModel,years,converter_techs,vintage);
4282   
4283  converter_unitsOnline_MIP.up(timeModelToCalc,nodesModel,years,converter_techs,vintage)
4284      $(converter_usedTech(nodesModel,years,converter_techs,vintage)
4285        and converter_techParam(converter_techs,vintage,"mipDispatch") = 1)
4286      = converter_capacityParam(nodesModel,years,converter_techs,"unitsUpperLimit");
4287   
4288  converter_unitsTotal_MIP.up(nodesModel,years,converter_techs,vintage)
4289      $(converter_usedTech(nodesModel,years,converter_techs,vintage)
4290        and converter_techParam(converter_techs,vintage,"mipUnits") = 1)
4291      = converter_capacityParam(nodesModel,years,converter_techs,"unitsUpperLimit");
4292   
4293  converter_unitsUsingActivity_MIP.up(timeModelToCalc,nodesModel,years,converter_techs,vintage,activity)
4294      $(converter_usedTech(nodesModel,years,converter_techs,vintage)
4295        and (converter_hasMinLoad(converter_techs, vintage)
4296              or converter_hasMaxLoad(converter_techs, vintage)))
4297      = converter_capacityParam(nodesModel,years,converter_techs,"unitsUpperLimit");
4298   
4299  * Add parameter for fixing capacities during myopic runs
4300  parameter converter_unitsDelta(nodesModel,years,converter_techs);
4301   
4302  * ==== declaration of equations ====
4303   
4304  equations
4305    Eq_converter_unitsBalance(nodesModel,years,converter_techs,vintage
4306      ) "Ensures the units balance over the planning period."
4307    Eq_converter_unitsFixedDecom(nodesModel,years,converter_techs,vintage
4308      ) "Restricts the fixed decommissioning of units over the planning period."
4309    Eq_converter_unitsFreeDecom(nodesModel,years,converter_techs,vintage
4310      ) "Restricts the free decommissioning of units over the planning period."
4311    Eq_converter_unitsUpperLimit(nodesModel,years,converter_techs
4312      ) "Upper bound for the total number of units."
4313    Eq_converter_unitsLowerLimit(nodesModel,years,converter_techs
4314      ) "Lower bound for the total number of units."
4315    Eq_converter_unitsFixedLimit(nodesModel,years,converter_techs
4316      ) "Fixed bound for the total number of units."
4317    Eq_converter_unitsTotalMIP(nodesModel,years,converter_techs,vintage
4318      ) "Fixes the total number of units to the corresponding integer variable."
4319    Eq_converter_unitsOnlineMIP(timeModel,nodesModel,years,converter_techs,vintage
4320      ) "Fixes the number of online units to the corresponding integer variable."
4321   
4322    Eq_converter_activityLowerLimit(timeModel,nodesModel,years,converter_techs,vintage
4323      ) "Lower limit on the activity."
4324    Eq_converter_activityUpperLimit(timeModel,nodesModel,years,converter_techs,vintage
4325      ) "Upper limit on the activity."
4326   
4327    Eq_converter_activityFixedLimit(timeModel,nodesModel,years,converter_techs,vintage
4328      ) "Fixed limit on the activity."
4329    Eq_converter_rampPos(timeModel,nodesModel,years,converter_techs,vintage
4330      ) "Positive ramping of unit activity."
4331    Eq_converter_rampNeg(timeModel,nodesModel,years,converter_techs,vintage
4332      ) "Negative ramping of unit activity."
4333    Eq_converter_rampLimit(timeModel,nodesModel,years,converter_techs,vintage
4334      ) "Restrict ramping up of unit activity."
4335   
4336    Eq_converter_unitsOnline(timeModel,nodesModel,years,converter_techs,vintage
4337      ) "Set online units to total number of operational units."
4338    Eq_converter_unitsOnlineUC(timeModel,nodesModel,years,converter_techs,vintage
4339      ) "Allow shutting down units."
4340    Eq_converter_activityStartups(timeModel,nodesModel,years,converter_techs,vintage
4341      ) "Variable counting the number of unit startups."
4342    Eq_converter_activityShutdowns(timeModel,nodesModel,years,converter_techs,vintage
4343      ) "Variable tracking the number of unit shutdowns."
4344    Eq_converter_limitStartups(nodesModel,years,converter_techs,vintage
4345      ) "Limit the number of startup cycles a unit can perform."
4346    Eq_converter_minUptime(timeModel,nodesModel,years,converter_techs,vintage
4347      ) "Require recently started units to remain online for their respective minimum uptime."
4348    Eq_converter_minDowntime(timeModel,nodesModel,years,converter_techs,vintage
4349      ) "Require recently shut down units to remain offline for their respective minimum downtime."
4350    Eq_converter_activityUpperLimitDetailedPartLoadMinReq(timeModel,nodesModel,years,converter_techs,vintage,activity
4351      ) "Limit activity coefficients of activities with a given load requirement or stricter to the number of units in such modes."
4352    Eq_converter_activityUpperLimitDetailedPartLoadMaxReq(timeModel,nodesModel,years,converter_techs,vintage,activity
4353      ) "Limit activity coefficients of activities with a given load requirement or stricter to the number of units in such modes."
4354    Eq_converter_activityLowerLimitDetailedPartLoadMinReq(timeModel,nodesModel,years,converter_techs,vintage,activity
4355      ) "Enforce sufficient activity coefficients of activities to justify all active modes."
4356    Eq_converter_noOnlineIdle(timeModel,nodesModel,years,converter_techs,vintage
4357      ) "Prevent the circumvention of requirements by keeping units online without using any modes."
4358    Eq_converter_noOnlineIdleDetailedPartLoad(timeModel,nodesModel,years,converter_techs,vintage
4359      ) "Prevent the circumvention of requirements by keeping units online without using any modes. Allow more than one mode activation per unit."
4360    Eq_converter_activityUpperLimitPartLoad(timeModel,nodesModel,years,converter_techs,vintage,activity
4361      ) "Limit usage of an activity to corresponding units."
4362    Eq_converter_activityLowerLimitPartLoad(timeModel,nodesModel,years,converter_techs,vintage,activity
4363      ) "Limit usage of an activity to corresponding units."
4364    Eq_converter_activityModeLimit(timeModel,nodesModel,years,converter_techs,vintage,activity
4365      ) "Limit the number of units in one particular mode to the number of operational units."
4366    ;
4367   
4368  * ==== equation definition ====
4369  * // ## Equations
4370  * // ### Converter Units Balance
4371  * // Ensures that the total units are consistent with the built and decommissioned units.
4372  * // {Eq_converter_unitsBalance}
4373  Eq_converter_unitsBalance(nodesModelSel,yearsSel,converter_techs,vintage)
4374      $((converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
4375            or sum(years$sameas(years,yearsSel), converter_usedTech(nodesModelSel,years-1,converter_techs,vintage)))
4376          and not converter_unitBoundsFixed(nodesModelSel,yearsSel,converter_techs))
4377      ..
4378      converter_unitsTotal(nodesModelSel,yearsSel,converter_techs,vintage)
4379      =e=
4380      sum(yearsToCalc$(ord(yearsToCalc) = 1 and sameas(yearsToCalc, yearsSel)),
4381        sum(years$sameas(years, yearsToCalc),
4382          converter_unitsTotal(nodesModelSel,years-1,converter_techs,vintage)
4383            $converter_usedTech(nodesModelSel,years-1,converter_techs,vintage)))
4384      + sum((yearsToCalc)$(ord(yearsToCalc) > 1 and sameas(yearsToCalc, yearsSel)),
4385        converter_unitsTotal(nodesModelSel,yearsToCalc-1,converter_techs,vintage)
4386          $converter_usedTech(nodesModelSel,yearsToCalc-1,converter_techs,vintage))
4387      + converter_unitsBuild(nodesModelSel,yearsSel,converter_techs,vintage)
4388          $converter_availTech(nodesModelSel,yearsSel,converter_techs,vintage)
4389      - converter_unitsDecom(nodesModelSel,yearsSel,converter_techs,vintage)
4390          $converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage);
4391   
4392  * // ### Converter Units Fixed Decommission
4393  * // Restricts the fixed decommissioning of units over the planning period.
4394  * // {Eq_converter_unitsFixedDecom}
4395  Eq_converter_unitsFixedDecom(nodesModelSel,yearsSel,converter_techs,vintage)
4396      $(converter_decomTech(nodesModelSel,yearsSel,converter_techs,vintage)
4397          and not converter_techParam(converter_techs,vintage,"freeDecom") = 1
4398          and not converter_unitBoundsFixed(nodesModelSel,yearsSel,converter_techs))
4399      ..
4400      converter_unitsDecom(nodesModelSel,yearsSel,converter_techs,vintage)
4401      =e=
4402      sum(years$
4403          (converter_availTech(nodesModelSel,years,converter_techs,vintage)
4404            and years.val > sum(yearsToCalc$sameas(yearsToCalc+1, yearsSel), yearsToCalc.val) - converter_techParam(converter_techs,vintage,'lifeTime')
4405            and years.val <= yearsSel.val - converter_techParam(converter_techs,vintage,'lifeTime')),
4406        converter_unitsBuild(nodesModelSel,years,converter_techs,vintage));
4407   
4408  * // ### Converter Units Free Decommission
4409  * // Restricts the free decommissioning of units over the planning period.
4410  * // {Eq_converter_unitsFreeDecom}
4411  Eq_converter_unitsFreeDecom(nodesModelSel,yearsSel,converter_techs,vintage)
4412      $((converter_decomTech(nodesModelSel,yearsSel,converter_techs,vintage)
4413          or converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage))
4414          and converter_techParam(converter_techs,vintage,"freeDecom") = 1)
4415      ..
4416      sum(years$
4417            ((converter_decomTech(nodesModelSel,years,converter_techs,vintage)
4418              or converter_usedTech(nodesModelSel,years,converter_techs,vintage))
4419              and years.val < sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)),
4420          converter_unitsDecom(nodesModelSel,years,converter_techs,vintage))
4421      + sum(yearsToCalc$
4422            ((converter_decomTech(nodesModelSel,yearsToCalc,converter_techs,vintage)
4423              or converter_usedTech(nodesModelSel,yearsToCalc,converter_techs,vintage))
4424              and yearsToCalc.val >= sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
4425              and yearsToCalc.val <= yearsSel.val),
4426          converter_unitsDecom(nodesModelSel,yearsToCalc,converter_techs,vintage))
4427      =g=
4428      sum(years$
4429            (converter_availTech(nodesModelSel,years,converter_techs,vintage)
4430              and years.val < sum(yearsToCalc$(ord(yearsToCalc)=1), yearsToCalc.val) - converter_techParam(converter_techs,vintage,'lifeTime')),
4431          converter_unitsBuild(nodesModelSel,years,converter_techs,vintage))
4432      + sum(yearsToCalc$
4433            (converter_availTech(nodesModelSel,yearsToCalc,converter_techs,vintage)
4434              and yearsToCalc.val >= sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
4435              and yearsToCalc.val <= yearsSel.val - converter_techParam(converter_techs,vintage,'lifeTime')),
4436          converter_unitsBuild(nodesModelSel,yearsToCalc,converter_techs,vintage));
4437   
4438  * // ### Converter Units Upper Limit
4439  * // Upper bound for the total number of units.
4440  * // {Eq_converter_unitsUpperLimit}
4441  Eq_converter_unitsUpperLimit(nodesModelSel,yearsSel,converter_techs)
4442      $(converter_capacityParam(nodesModelSel,yearsSel,converter_techs,'unitsUpperLimit') >= 0
4443          and converter_capacityParam(nodesModelSel,yearsSel,converter_techs,'unitsUpperLimit') < +inf
4444          and converter_capacityParam(nodesModelSel,yearsSel,converter_techs,'unitsUpperLimit')
4445              <> converter_capacityParam(nodesModelSel,yearsSel,converter_techs,'unitsLowerLimit'))
4446      ..
4447      sum(vintage$converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage),
4448          converter_unitsTotal(nodesModelSel,yearsSel,converter_techs,vintage))
4449      =l=
4450      converter_capacityParam(nodesModelSel,yearsSel,converter_techs,"unitsUpperLimit");
4451   
4452  * // ### Converter Units Lower Limit
4453  * // Lower bound for the total number of units.
4454  * // {Eq_converter_unitsLowerLimit}
4455  Eq_converter_unitsLowerLimit(nodesModelSel,yearsSel,converter_techs)
4456      $(converter_capacityParam(nodesModelSel,yearsSel,converter_techs,'unitsLowerLimit') > 0
4457          and converter_capacityParam(nodesModelSel,yearsSel,converter_techs,'unitsLowerLimit')
4458              <> converter_capacityParam(nodesModelSel,yearsSel,converter_techs,'unitsUpperLimit'))
4459      ..
4460      sum(vintage$converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage),
4461          converter_unitsTotal(nodesModelSel,yearsSel,converter_techs,vintage))
4462      =g=
4463      converter_capacityParam(nodesModelSel,yearsSel,converter_techs,"unitsLowerLimit");
4464   
4465  Eq_converter_unitsFixedLimit(nodesModelSel,yearsSel,converter_techs)
4466      $(converter_capacityParam(nodesModelSel,yearsSel,converter_techs,'unitsLowerLimit')
4467          = converter_capacityParam(nodesModelSel,yearsSel,converter_techs,'unitsUpperLimit'))
4468      ..
4469      sum(vintage$converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage),
4470          converter_unitsTotal(nodesModelSel,yearsSel,converter_techs,vintage))
4471      =e=
4472      converter_capacityParam(nodesModelSel,yearsSel,converter_techs,"unitsUpperLimit");
4473   
4474  * // ### Converter Units Total MIP
4475  * // Fixes the total number of units to the corresponding integer variable.
4476  * // {Eq_converter_unitsTotalMIP}
4477  Eq_converter_unitsTotalMIP(nodesModelSel,yearsSel,converter_techs,vintage)
4478      $( converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
4479          and converter_techParam(converter_techs,vintage,"mipUnits") = 1 )
4480      ..
4481      converter_unitsTotal(nodesModelSel,yearsSel,converter_techs,vintage)
4482      =e=
4483      converter_unitsTotal_MIP(nodesModelSel,yearsSel,converter_techs,vintage);
4484   
4485  * // ### Converter Units Online MIP
4486  * // Fixes the number of online units to the corresponding integer variable.
4487  * // {Eq_converter_unitsOnlineMIP}
4488  Eq_converter_unitsOnlineMIP(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
4489      $( converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
4490          and converter_techParam(converter_techs,vintage,"mipDispatch") = 1 )
4491      ..
4492      converter_unitsOnline(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
4493      =e=
4494      converter_unitsOnline_MIP(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage);
4495   
4496  * // ### Converter Activity Lower Limit
4497  * // Lower limit on the activity.
4498  * // {Eq_converter_activityLowerLimit}
4499  Eq_converter_activityLowerLimit(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
4500      $(converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
4501          and converter_activityProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,"lower") > 0
4502          and converter_activityProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,"lower")
4503               <> converter_activityProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,"upper")
4504          and not converter_hasMinLoad(converter_techs, vintage))
4505      ..
4506      sum(activity$converter_usedAct(converter_techs,vintage,activity),
4507          converter_activity(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity)
4508      )
4509      =g=
4510      converter_activityProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,"lower")
4512      * converter_unitsOnline(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage);
4514   
4515  * // ### Converter Activity Upper Limit
4516  * // Upper limit on the activity.
4517  * // {Eq_converter_activityUpperLimit}
4518  Eq_converter_activityUpperLimit(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
4519      $(converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
4520          and converter_activityProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,"upper") >= 0
4521          and converter_activityProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,"upper")
4522               <> converter_activityProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,"lower"))
4523      ..
4524      sum(activity$converter_usedAct(converter_techs,vintage,activity),
4525          converter_activity(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity)
4526      )
4527      =l=
4528      converter_activityProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,"upper")
4530      * converter_unitsOnline(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage);
4532   
4533  Eq_converter_activityFixedLimit(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
4534      $(converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
4535          and converter_activityProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,"lower")
4536               = converter_activityProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,"upper"))
4537      ..
4538      sum(activity$converter_usedAct(converter_techs,vintage,activity),
4539          converter_activity(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity)
4540      )
4541      =e=
4542      converter_activityProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,"upper")
4544      * converter_unitsOnline(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage);
4546   
4547  * // ### Converter Positive Ramping
4548  * // Positive ramping of unit activity.
4549  * // {Eq_converter_rampPos}
4550  Eq_converter_rampPos(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,converter_techs,vintage)
4551    $( converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
4552        and converter_useRampPos(nodesModelSel,yearsSel,converter_techs,vintage))
4553      ..
4554      converter_rampPos(timeModelToCalc,nodesModelSel,yearsSel,converter_techs,vintage)
4555      =g=
4556      sum(activity$converter_usedAct(converter_techs,vintage,activity),
4557              converter_activity(timeModelToCalc,nodesModelSel,yearsSel,converter_techs,vintage,activity)
4558              - converter_activity(timeModelToCalc--1,nodesModelSel,yearsSel,converter_techs,vintage,activity));
4559   
4560  * // ### Converter Negative Ramping
4561  * // Negative ramping of unit activity.
4562  * // {Eq_converter_rampNeg}
4563  Eq_converter_rampNeg(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,converter_techs,vintage)
4564    $( converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
4565        and converter_useRampNeg(nodesModelSel,yearsSel,converter_techs,vintage))
4566      ..
4567      converter_rampNeg(timeModelToCalc,nodesModelSel,yearsSel,converter_techs,vintage)
4568      =g=
4569      - sum(activity$converter_usedAct(converter_techs,vintage,activity),
4570              converter_activity(timeModelToCalc,nodesModelSel,yearsSel,converter_techs,vintage,activity)
4571              - converter_activity(timeModelToCalc--1,nodesModelSel,yearsSel,converter_techs,vintage,activity));
4572   
4573  * // ### Converter Ramping Limit
4574  * // Restrict ramping up of unit activity.
4575  * // {Eq_converter_rampLimit}
4576  Eq_converter_rampLimit(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,converter_techs,vintage)
4577    $( converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
4578          and converter_techParam(converter_techs,vintage,"activityRampLimit") > 0)
4579      ..
4580      sum(activity$converter_usedAct(converter_techs,vintage,activity),
4581              converter_activity(timeModelToCalc,nodesModelSel,yearsSel,converter_techs,vintage,activity)
4582              - converter_activity(timeModelToCalc--1,nodesModelSel,yearsSel,converter_techs,vintage,activity))
4583    =l=
4584    converter_techParam(converter_techs,vintage,"activityRampLimit")
4586      * converter_unitsOnline(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage);
4588   
4589   
4591   
4592  * // ### Converter MIP Units Online
4593  * // Restrict ramping up of unit activity.
4594  * // {Eq_converter_unitsOnline}
4595  Eq_converter_unitsOnline(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
4596      $( converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
4597          and converter_techParam(converter_techs,vintage,"mipDispatch") = 0 )
4598    ..
4599    converter_unitsOnline(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
4600    =e=
4601    converter_unitsTotal(nodesModelSel,yearsSel,converter_techs,vintage)
4602      ;
4603   
4604  * // ### Converter MIP Units Shutting Down
4605  * // Allow shutting down units.
4606  * // {Eq_converter_unitsOnlineUC}
4607  Eq_converter_unitsOnlineUC(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
4608      $( converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
4609          and converter_techParam(converter_techs,vintage,"mipDispatch") = 1 )
4610    ..
4611    converter_unitsOnline(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
4612    =l=
4613    converter_unitsTotal(nodesModelSel,yearsSel,converter_techs,vintage)
4614      ;
4616   
4617  * // ### Converter Activity Startups
4618  * // Variable counting the number of unit startups.
4619  * // {Eq_converter_activityStartups}
4620  Eq_converter_activityStartups(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,converter_techs,vintage)
4621    $( converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
4622          and converter_techParam(converter_techs,vintage,"mipDispatch") = 1 )
4623      ..
4624      converter_unitStartups(timeModelToCalc,nodesModelSel,yearsSel,converter_techs,vintage)
4625      =g=
4626          converter_unitsOnline(timeModelToCalc,nodesModelSel,yearsSel,converter_techs,vintage)
4627      - converter_unitsOnline(timeModelToCalc--1,nodesModelSel,yearsSel,converter_techs,vintage);
4628   
4629  * // ### Converter Activity Shutdowns
4630  * // Variable tracking the number of unit shutdowns.
4631  * // {Eq_converter_activityShutdowns}
4632  Eq_converter_activityShutdowns(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,converter_techs,vintage)
4633    $( converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
4634          and converter_techParam(converter_techs,vintage,"mipDispatch") = 1
4635          and converter_techParam(converter_techs,vintage,"minDowntime") > 0)
4636      ..
4637      converter_unitShutdowns(timeModelToCalc,nodesModelSel,yearsSel,converter_techs,vintage)
4638      =g=
4639          converter_unitsOnline(timeModelToCalc--1,nodesModelSel,yearsSel,converter_techs,vintage)
4640      - converter_unitsOnline(timeModelToCalc,nodesModelSel,yearsSel,converter_techs,vintage);
4641   
4642  * // ### Converter Activity Startup Limit
4643  * // Limit the number of startup cycles a unit can perform.
4644  * // {Eq_converter_limitStartups}
4645  Eq_converter_limitStartups(nodesModelSel,yearsSel,converter_techs,vintage)
4646    $( converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
4647          and converter_techParam(converter_techs,vintage,"mipDispatch") = 1
4648      and converter_techParam(converter_techs,vintage,"startupLimit") > 0)
4649      ..
4650      sum(timeModelToCalc, converter_unitStartups(timeModelToCalc,nodesModelSel,yearsSel,converter_techs,vintage))
4651    =l=
4652    converter_techParam(converter_techs,vintage,"startupLimit")
4653    * converter_unitsTotal(nodesModelSel,yearsSel,converter_techs,vintage);
4654   
4655  alias(timeModelToCalc,ttc);
4656   
4657  * // ### Converter Units Minimum Uptime
4658  * // Require recently started units to remain online for their respective minimum uptime.
4659  * // {Eq_converter_minUptime}
4660  Eq_converter_minUptime(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,converter_techs,vintage)
4661    $( converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
4662          and converter_techParam(converter_techs,vintage,"mipDispatch") = 1
4663      and converter_techParam(converter_techs,vintage,"minUptime") > 0)
4664      ..
4665      sum(ttc$[uptimeSearchRange(ttc) and ord(ttc)<=converter_techParam(converter_techs,vintage,"minUptime")],
4666          converter_unitStartups(ttc+[ord(timeModelToCalc)-converter_techParam(converter_techs,vintage,"minUptime")],
4667              nodesModelSel,yearsSel,converter_techs,vintage))
4668          =l=
4669          converter_unitsOnline(timeModelToCalc,nodesModelSel,yearsSel,converter_techs,vintage);
4670   
4671  * // ### Converter Units Minimum Downtime
4672  * // Require recently shut down units to remain offline for their respective minimum downtime.
4673  * // {Eq_converter_minDowntime}
4674  Eq_converter_minDowntime(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,converter_techs,vintage)
4675    $( converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
4676          and converter_techParam(converter_techs,vintage,"mipDispatch") = 1
4677      and converter_techParam(converter_techs,vintage,"minDowntime") > 0)
4678      ..
4679      sum(ttc$[downtimeSearchRange(ttc) and ord(ttc)<=converter_techParam(converter_techs,vintage,"minDowntime")],
4680          converter_unitShutdowns(ttc+[ord(timeModelToCalc)-converter_techParam(converter_techs,vintage,"minDowntime")],
4681              nodesModelSel,yearsSel,converter_techs,vintage))
4682          =l=
4683          converter_unitsTotal(nodesModelSel,yearsSel,converter_techs,vintage)
4684      - converter_unitsOnline(timeModelToCalc,nodesModelSel,yearsSel,converter_techs,vintage);
4685   
4686  * This equation is meant to cause the units to activate particular mode counters to gain access to the corresponding activities.
4687  * Activities are allowed to be used on units with stricter activity requirements but not the other way around.
4688  alias(activity, act);
4689   
4690  * // ### Converter MIP Units Activity Upper Limit Minimum Required Load
4691  * // Limit activity coefficients of activities with a given load requirement or stricter to the number of units in such modes.
4692  * // {Eq_converter_activityUpperLimitDetailedPartLoadMinReq}
4693  Eq_converter_activityUpperLimitDetailedPartLoadMinReq(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity)
4694    $( converter_usedTechAct(nodesModelSel,yearsSel,converter_techs,vintage,activity)
4695          and converter_hasMinLoad(converter_techs, vintage)
4696          and converter_techParam(converter_techs,vintage,"mipDetailedPartialLoad"))
4697      ..
4698      sum(act$(converter_activityRequirements(converter_techs,vintage,act,"minLoad")
4699                  >= converter_activityRequirements(converter_techs,vintage,activity,"minLoad")
4700               and converter_usedAct(converter_techs,vintage,act)),
4701      converter_activity(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,act))
4702    =l=
4703    converter_activityProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,"upper")
4704      * sum(act$(converter_activityRequirements(converter_techs,vintage,act,"minLoad")
4705                  >= converter_activityRequirements(converter_techs,vintage,activity,"minLoad")
4706                 and converter_usedAct(converter_techs,vintage,act)),
4707      converter_unitsUsingActivity_MIP(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,act));
4708   
4709  * // ### Converter MIP Units Activity Upper Limit Maximum Required Load
4710  * // Limit activity coefficients of activities with a given load requirement or stricter to the number of units in such modes.
4711  * // {Eq_converter_activityUpperLimitDetailedPartLoadMaxReq}
4712  Eq_converter_activityUpperLimitDetailedPartLoadMaxReq(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity)
4713    $( converter_usedTechAct(nodesModelSel,yearsSel,converter_techs,vintage,activity)
4714          and converter_hasMaxLoad(converter_techs,vintage)
4715          and converter_techParam(converter_techs,vintage,"mipDetailedPartialLoad"))
4716      ..
4717      sum(act$(converter_activityRequirements(converter_techs,vintage,act,"maxLoad")
4718                  <= converter_activityRequirements(converter_techs,vintage,activity,"maxLoad")
4719               and converter_usedAct(converter_techs,vintage,act)),
4720      converter_activity(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,act))
4721    =l=
4722      sum(act$(converter_activityRequirements(converter_techs,vintage,act,"maxLoad")
4723                  <= converter_activityRequirements(converter_techs,vintage,activity,"maxLoad")
4724               and converter_usedAct(converter_techs,vintage,act)),
4725      min(converter_activityRequirements(converter_techs,vintage,act,"maxLoad"),
4726            converter_activityProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,"upper"))
4727            * converter_unitsUsingActivity_MIP(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,act));
4728   
4729  * This equation is meant to enforce the lower limit requirements of activities in use.
4730  * Loads produced by activities with less strict requirements can contribute to the minimum load requirement of strict activities but not the other way around,
4731  * because these activities can only run on units in the respectively strict activation state.
4732   
4733  * // ### Converter MIP Units Activity Lower Limit Minimum Required Load
4734  * // Enforce sufficient activity coefficients of activities to justify all active modes.
4735  * // {Eq_converter_activityLowerLimitDetailedPartLoadMinReq}
4736  Eq_converter_activityLowerLimitDetailedPartLoadMinReq(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity)
4737    $( converter_usedTechAct(nodesModelSel,yearsSel,converter_techs,vintage,activity)
4738          and converter_hasMinLoad(converter_techs, vintage)
4739          and converter_techParam(converter_techs,vintage,"mipDetailedPartialLoad"))
4740      ..
4741      sum(act$(converter_activityRequirements(converter_techs,vintage,act,"minLoad")
4742                  <= converter_activityRequirements(converter_techs,vintage,activity,"minLoad")
4743               and converter_usedAct(converter_techs,vintage,act)),
4744      converter_activity(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,act))
4745    =g=
4746      sum(act$(converter_activityRequirements(converter_techs,vintage,act,"minLoad")
4747                  <= converter_activityRequirements(converter_techs,vintage,activity,"minLoad")
4748               and converter_usedAct(converter_techs,vintage,act)),
4749      max(converter_activityRequirements(converter_techs,vintage,act,"minLoad"),
4750            converter_activityProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,"lower"))
4751            * converter_unitsUsingActivity_MIP(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,act));
4752   
4753   
4754  * Simple one-activity-per-unit partial load equations
4755  * // ### Converter MIP Units Activity Upper Limit Partial Load Balance
4756  * // Enforce MIP units partial load upper limit.
4757  * // {Eq_converter_activityUpperLimitPartLoad}
4758  Eq_converter_activityUpperLimitPartLoad(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity)
4759    $( converter_usedTechAct(nodesModelSel,yearsSel,converter_techs,vintage,activity)
4760          and (converter_hasMinLoad(converter_techs, vintage)
4761                or converter_hasMaxLoad(converter_techs, vintage)
4762                or converter_hasConstantFluxInActivity(converter_techs, vintage))
4763          and not converter_techParam(converter_techs,vintage,"mipDetailedPartialLoad"))
4764      ..
4765      converter_activity(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity)
4766    =l=
4767    min(converter_activityRequirements(converter_techs,vintage,activity,"maxLoad"),
4768          converter_activityProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,"upper"))
4769          * converter_unitsUsingActivity_MIP(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity);
4770   
4771  * // ### Converter MIP Units Activity Lower Limit Partial Load Balance
4772  * // Enforce MIP units partial load lower limit.
4773  * // {Eq_converter_activityLowerLimitPartLoad}
4774  Eq_converter_activityLowerLimitPartLoad(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity)
4775    $( converter_usedTechAct(nodesModelSel,yearsSel,converter_techs,vintage,activity)
4776          and (converter_hasMinLoad(converter_techs, vintage)
4777                or converter_hasMaxLoad(converter_techs, vintage))
4778          and not converter_techParam(converter_techs,vintage,"mipDetailedPartialLoad"))
4779      ..
4780      converter_activity(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity)
4781    =g=
4782    max(converter_activityRequirements(converter_techs,vintage,activity,"minLoad"),
4783          converter_activityProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,"lower"))
4784          * converter_unitsUsingActivity_MIP(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity);
4785   
4786  * // ### Converter MIP Units Idle Online Units
4787  * // Counts idle online units at every time step
4788  * // {Eq_converter_noOnlineIdle}
4789  Eq_converter_noOnlineIdle(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
4790    $( converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
4791          and (converter_hasMinLoad(converter_techs, vintage)
4792              or converter_hasMaxLoad(converter_techs, vintage)
4793              or converter_hasConstantFluxInActivity(converter_techs,vintage))
4794          and not converter_techParam(converter_techs,vintage,"mipDetailedPartialLoad"))
4795      ..
4796      converter_unitsOnline(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
4797      =e=
4798      sum(activity$converter_usedAct(converter_techs,vintage,activity),
4799            converter_unitsUsingActivity_MIP(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity));
4800   
4801  * // ### Converter MIP Units Idle Online Units Partial load
4802  * // Counts idle online units at every time step
4803  * // {Eq_converter_noOnlineIdleDetailedPartLoad}
4804  Eq_converter_noOnlineIdleDetailedPartLoad(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
4805    $( converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
4806          and (converter_hasMinLoad(converter_techs, vintage)
4807                  or converter_hasMaxLoad(converter_techs, vintage))
4808          and converter_techParam(converter_techs,vintage,"mipDetailedPartialLoad"))
4809      ..
4810      converter_unitsOnline(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
4811      =l=
4812      sum(activity$converter_usedAct(converter_techs,vintage,activity),
4813            converter_unitsUsingActivity_MIP(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity));
4814   
4815  * // ### Converter MIP activity model limit
4816  * // Converter activity model limit
4817  * // {Eq_converter_activityModeLimit}
4818  Eq_converter_activityModeLimit(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity)
4819    $( converter_usedTechAct(nodesModelSel,yearsSel,converter_techs,vintage,activity)
4820          and (converter_hasMinLoad(converter_techs, vintage)
4821                or converter_hasMaxLoad(converter_techs, vintage))
4822          and converter_techParam(converter_techs,vintage,"mipDetailedPartialLoad"))
4823      ..
4824      converter_unitsOnline(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
4825      =g=
4826      converter_unitsUsingActivity_MIP(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity);
4827   
4828  * ==== model definition ====
4829   
4830  Model M_converter
4831  /
4832    Eq_converter_unitsBalance
4833    Eq_converter_unitsFixedDecom
4834    Eq_converter_unitsFreeDecom
4835    Eq_converter_unitsUpperLimit
4836    Eq_converter_unitsLowerLimit
4837    Eq_converter_unitsFixedLimit
4838    Eq_converter_unitsTotalMIP
4839    Eq_converter_unitsOnlineMIP
4840    Eq_converter_activityUpperLimit
4841    Eq_converter_activityLowerLimit
4842    Eq_converter_activityFixedLimit
4843    Eq_converter_rampPos
4844    Eq_converter_rampNeg
4845    Eq_converter_rampLimit
4847    Eq_converter_unitsOnline
4848    Eq_converter_unitsOnlineUC
4850    Eq_converter_activityStartups
4851    Eq_converter_activityShutdowns
4852    Eq_converter_limitStartups
4853    Eq_converter_minUptime
4854    Eq_converter_minDowntime
4855    Eq_converter_activityUpperLimitDetailedPartLoadMinReq
4856    Eq_converter_activityUpperLimitDetailedPartLoadMaxReq
4857    Eq_converter_activityLowerLimitDetailedPartLoadMinReq
4858    Eq_converter_activityUpperLimitPartLoad
4859    Eq_converter_activityLowerLimitPartLoad
4860    Eq_converter_noOnlineIdle
4861    Eq_converter_noOnlineIdleDetailedPartLoad
4862    Eq_converter_activityModeLimit
4863  /;
INCLUDE    C:\Local\REMix\framework\remix\framework\model\source\core\storage.gms
4865  * SPDX-FileCopyrightText: Copyright (c) 2023 German Aerospace Center (DLR)
4866  * SPDX-License-Identifier: BSD-3-Clause
4867   
4868  * // # core_storage
4869  * // The equations in this file describe the storages in the model.
4870   
4871  * // ## Variables
4872  * // {special_table_storage_variables}
5201   
5202   
5203  * === SoC mappings ===
5204  set storage_usedTechSoCState(storage_techs,vintage,soc_statesIn);
5205  storage_usedTechSoCState(storage_techs,vintage,soc_states(soc_statesIn))
5206      $(storage_SoCParam(storage_techs,vintage,soc_states,"eRate") > 0
5207        and storage_SoCParam(storage_techs,vintage,soc_states,"cRate") > 0)
5208      = yes;
5209   
5210  set storage_validSoCRange(storage_techs,vintage);
5211  storage_validSoCRange(storage_techs,vintage)
5212      = smax(soc_states$storage_usedTechSoCState(storage_techs,vintage,soc_states), storage_SoCParam(storage_techs,vintage,soc_states,"SoC")) = 1
5213        and smin(soc_states$storage_usedTechSoCState(storage_techs,vintage,soc_states), storage_SoCParam(storage_techs,vintage,soc_states,"SoC")) = 0;
5214   
5215  * === Translate SoC parameters to ordered SoC-set ===
5216  * set ordered_socs / soc1*soc20 /;
5217  * alias(soc_states, soc_states_c);
5218  * parameter storage_SoCParam_ordered(storage_techs,vintage,ordered_socs,pc_storage_SoCParam);
5219  * storage_SoCParam_ordered(storage_techs,vintage,ordered_socs,pc_storage_SoCParam)
5220  *     $storage_validSoCRange(storage_techs,vintage)
5221  *     = sum(soc_states$(ord(ordered_socs) = sum(soc_states_c$(storage_SoCParam(storage_techs,vintage,soc_states_c,"SoC") <= storage_SoCParam(storage_techs,vintage,soc_states,"SoC")
5222  *                                                            and storage_usedTechSoCState(storage_techs,vintage,soc_states_c)), 1)
5223  *                       and storage_usedTechSoCState(storage_techs,vintage,soc_states)),
5224  *           storage_SoCParam(storage_techs,vintage,soc_states,pc_storage_SoCParam));
5225  *
5226  * set storage_usedTechSoCStateOrdered(storage_techs,vintage,ordered_socs);
5227  * storage_usedTechSoCStateOrdered(storage_techs,vintage,ordered_socs)
5228  *     $(storage_SoCParam_ordered(storage_techs,vintage,ordered_socs,"eRate") > 0
5229  *       and storage_SoCParam_ordered(storage_techs,vintage,ordered_socs,"cRate") > 0)
5230  *     = yes;
5231   
5232  parameter storage_bigM(storage_techs,vintage);
5233  storage_bigM(storage_techs,vintage) = smax((nodesModel,years), storage_reservoirParam(nodesModel,years,storage_techs,"unitsUpperLimit"));
5234  storage_bigM(storage_techs,vintage)$(storage_bigM(storage_techs,vintage) = INF) = 10000;
5235  storage_bigM(storage_techs,vintage)$(storage_bigM(storage_techs,vintage) = 0) = 10000;
5236   
5237  * === calculate the number of years represented by single year to calc ===
5238  alias(yearsToCalc, yearsToCalc_a)
5239  parameter representedYears(years);
5240  representedYears(years) = 0.5 *(smin(yearsToCalc$(yearsToCalc.val > years.val or yearsToCalc.val = smax(yearsToCalc_a, yearsToCalc_a.val)), yearsToCalc.val)
5241                                  - smax(yearsToCalc$(yearsToCalc.val < years.val or yearsToCalc.val = smin(yearsToCalc_a, yearsToCalc_a.val)), yearsToCalc.val));
5242   
5243  * ==== calculation of mappings ====
5244   
5245  * Technologies with a lifeTime > 0 are available
5246  set storage_availTech(nodesModel,years,storage_techs,vintage);
5247  storage_availTech(nodesModel,years,storage_techs,vintage)
5248      $(vintage.val = smax(vintage_a$(vintage_a.val <= years.val
5249          and storage_techParam(storage_techs,vintage_a,"lifeTime") > 0), vintage_a.val)) = yes;
5250   
5251  * Technologies to optimize become unavailable if they have an unitsUpperLimit of 0
5252  storage_availTech(nodesModel,years,storage_techs,vintage)
5253      $(yearsToCalc(years) and storage_reservoirParam(nodesModel,years,storage_techs,"unitsUpperLimit") = 0 ) = no;
5254   
5255  * Technologies already built become unavailable if they have an unitsBuild of 0
5256  storage_availTech(nodesModel,years,storage_techs,vintage)
5257      $( ( not yearsToCalc(years)) and storage_reservoirParam(nodesModel,years,storage_techs,"unitsBuild") = 0 ) = no;
5258   
5259  * Used technologies are available technologies over their technical lifeTime
5260  set storage_usedTech(nodesModel,years,storage_techs,vintage);
5261  storage_usedTech(nodesModel,years,storage_techs,vintage)
5262      $(vintage.val <= years.val
5263          and years.val < smax(years_a$storage_availTech(nodesModel,years_a,storage_techs,vintage),
5264                                              years_a.val + storage_techParam(storage_techs,vintage,"lifeTime"))
5265          ) = yes;
5266   
5267  * Technologies have to be decomissioned in the interval of first avail + lifetime to last avail + lifetime
5268  set storage_decomTech(nodesModel,years,storage_techs,vintage);
5269  storage_decomTech(nodesModel,years,storage_techs,vintage)
5270    $(sum(years_a$storage_usedTech(nodesModel,years_a,storage_techs,vintage), 1)
5271      and sum(yearsToCalc
5272        $(sameas(years, yearsToCalc)
5273          and yearsToCalc.val >= smin(years_a$storage_availTech(nodesModel,years_a,storage_techs,vintage), years_a.val) + storage_techParam(storage_techs,vintage,"lifeTime")
5274          and yearsToCalc.val <= smax(years_a$storage_availTech(nodesModel,years_a,storage_techs,vintage), years_a.val) + storage_techParam(storage_techs,vintage,"lifeTime")), 1))
5275    = yes;
5276   
5277  * Extend the decom frame to the year after the last year of usedTech
5278  storage_decomTech(nodesModel,yearsToCalc,storage_techs,vintage)
5279    $(storage_usedTech(nodesModel,yearsToCalc-1,storage_techs,vintage)
5280      and storage_decomTech(nodesModel,yearsToCalc-1,storage_techs,vintage))
5281    = yes;
5282   
5283  * Mapping for used commodities
5284  set storage_usedCom(storage_techs,vintage,commodity);
5285  option storage_usedCom < storage_sizeParam;
5286   
5287  set storage_usedTechCom(nodesModel,years,storage_techs,vintage,commodity);
5288  storage_usedTechCom(nodesModel,years,storage_techs,vintage,commodity)
5289      $(storage_usedTech(nodesModel,years,storage_techs,vintage)
5290          and storage_usedCom(storage_techs,vintage,commodity))
5291      = yes;
5292   
5293   
5294  * // ## Load units from gdx file
5296   
5297  * ==== aggregation of profiles ====
5298  * derive upper and lower profiles then aggregate
5299  set storage_level_hasProfileIn(nodesData,years,storage_techs,pc_storage_levelProfile);
5300  option storage_level_hasProfileIn < storage_levelProfileIn;
5301   
5302  set storage_level_hasProfile(nodesModel,years,storage_techs,pc_storage_levelProfile);
5303  storage_level_hasProfile(nodesModelToCalc,yearsToCalc,storage_techs,pc_storage_levelProfile)
5304      = sum(nodesData$aggregateNodesModel(nodesData,nodesModelToCalc),
5305              storage_level_hasProfileIn(nodesData,yearsToCalc,storage_techs,pc_storage_levelProfile));
5306   
5307  * weighted average for a real sum of units upper limits, plain average if one region has an upper limit of inf
5308  parameter storage_levelProfile(timeModel,nodesModel,years,storage_techs,vintage,pc_storage_levelProfile);
5309  storage_levelProfile(timeModelToCalc,storage_usedTech(nodesModelToCalc,yearsToCalc,storage_techs,vintage),"upper")
5310      = storage_techParam(storage_techs,vintage,"levelUpperLimit");
5311  storage_levelProfile(timeModelToCalc,storage_usedTech(nodesModelToCalc,yearsToCalc,storage_techs,vintage),"lower")
5312      = storage_techParam(storage_techs,vintage,"levelLowerLimit");
5313   
5314  set storage_finiteUnitLimit(nodesModelToCalc,yearsToCalc,storage_techs);
5315  storage_finiteUnitLimit(nodesModelToCalc,yearsToCalc,storage_techs) = sum(nodesData$aggregateNodesModel(nodesData,nodesModelToCalc), storage_reservoirParamIn(nodesData,yearsToCalc,storage_techs,"unitsUpperLimit")) > 0
5316                                                   and sum(nodesData$aggregateNodesModel(nodesData,nodesModelToCalc), storage_reservoirParamIn(nodesData,yearsToCalc,storage_techs,"unitsUpperLimit")) < inf;
5317   
5318  storage_levelProfile(timeModelToCalc,storage_usedTech(nodesModelToCalc,yearsToCalc,storage_techs,vintage),pc_storage_levelProfile)
5319      $( storage_level_hasProfile(nodesModelToCalc,yearsToCalc,storage_techs,pc_storage_levelProfile)
5320          and storage_finiteUnitLimit(nodesModelToCalc,yearsToCalc,storage_techs))
5321      = sum(nodesData$aggregateNodesModel(nodesData,nodesModelToCalc),
5322              sum(timeData$timeMapping(timeData,timeModelToCalc),
5323                    storage_levelProfileIn(timeData,nodesData,yearsToCalc,storage_techs,pc_storage_levelProfile))
5324                / timeLength(timeModelToCalc)
5325              * storage_reservoirParamIn(nodesData,yearsToCalc,storage_techs,"unitsUpperLimit"))
5326      / sum(nodesData$aggregateNodesModel(nodesData,nodesModelToCalc),
5327              storage_reservoirParamIn(nodesData,yearsToCalc,storage_techs,"unitsUpperLimit"));
5328   
5329  storage_levelProfile(timeModelToCalc,storage_usedTech(nodesModelToCalc,yearsToCalc,storage_techs,vintage),pc_storage_levelProfile)
5330      $( storage_level_hasProfile(nodesModelToCalc,yearsToCalc,storage_techs,pc_storage_levelProfile)
5331          and sum(nodesData$aggregateNodesModel(nodesData,nodesModelToCalc),
5332                      storage_reservoirParamIn(nodesData,yearsToCalc,storage_techs,"unitsUpperLimit")) = inf )
5333      = sum(nodesData$(aggregateNodesModel(nodesData,nodesModelToCalc)
5334                      and storage_reservoirParamIn(nodesData,yearsToCalc,storage_techs,"unitsUpperLimit") = inf ),
5335              sum(timeData$timeMapping(timeData,timeModelToCalc),
5336                    storage_levelProfileIn(timeData,nodesData,yearsToCalc,storage_techs,pc_storage_levelProfile))
5337                / timeLength(timeModelToCalc))
5338      / sum(nodesData$(aggregateNodesModel(nodesData,nodesModelToCalc)
5339                      and storage_reservoirParamIn(nodesData,yearsToCalc,storage_techs,"unitsUpperLimit") = inf ), 1);
5340   
5341  * for fixed profiles overwrite upper and lower profile
5342  storage_levelProfile(timeModelToCalc,nodesModelToCalc,yearsToCalc,storage_techs,vintage,"lower")
5343      $storage_level_hasProfile(nodesModelToCalc,yearsToCalc,storage_techs,"fixed")
5344      = storage_levelProfile(timeModelToCalc,nodesModelToCalc,yearsToCalc,storage_techs,vintage,"fixed");
5345   
5346  storage_levelProfile(timeModelToCalc,nodesModelToCalc,yearsToCalc,storage_techs,vintage,"upper")
5347      $storage_level_hasProfile(nodesModelToCalc,yearsToCalc,storage_techs,"fixed")
5348      = storage_levelProfile(timeModelToCalc,nodesModelToCalc,yearsToCalc,storage_techs,vintage,"fixed");
5349   
5350   
5351  * ==== parameter modifications ====
5352  storage_reservoirParam(nodesModel,years,storage_techs,"unitsLowerLimit")
5353          $sum(vintage, storage_techParam(storage_techs,vintage,"mipUnits"))
5354      = floor(storage_reservoirParam(nodesModel,years,storage_techs,"unitsLowerLimit"));
5355  storage_reservoirParam(nodesModel,years,storage_techs,"unitsUpperLimit")
5356          $sum(vintage, storage_techParam(storage_techs,vintage,"mipUnits"))
5357      = ceil(storage_reservoirParam(nodesModel,years,storage_techs,"unitsUpperLimit"));
5358   
5359   
5360  * ==== definition of variables ====
5361   
5362  * Initialise variables for unitsBuild
5363  storage_unitsBuild.l(nodesModel,years,storage_techs,vintage)
5364      $storage_availTech(nodesModel,years,storage_techs,vintage)
5365      = storage_reservoirParam(nodesModel,years,storage_techs,"unitsBuild");
5366  storage_unitsBuild.lo(nodesModel,yearsToCalc,storage_techs,vintage)
5367      $storage_availTech(nodesModel,yearsToCalc,storage_techs,vintage)
5368      = storage_unitsBuild.l(nodesModel,yearsToCalc,storage_techs,vintage);
5369  storage_unitsBuild.fx(nodesModel,years,storage_techs,vintage)
5370      $storage_reservoirParam(nodesModel,years,storage_techs,"noExpansion")
5371      = storage_unitsBuild.l(nodesModel,years,storage_techs,vintage);
5372   
5373  * Initialise variables for unitsDecom
5374  storage_unitsDecom.l(nodesModel,years,storage_techs,vintage)
5375      $(storage_decomTech(nodesModel,years,storage_techs,vintage)
5376        and years.val < sum(yearsToCalc$(ord(yearsToCalc) = 1), yearsToCalc.val))
5377      = sum((years_a,years_aa)$(sameas(years-1, years_aa)
5378                        and years_a.val > years_aa.val - storage_techParam(storage_techs,vintage,'lifeTime')
5379                        and years_a.val <= years.val - storage_techParam(storage_techs,vintage,'lifeTime')
5380                        and storage_availTech(nodesModel,years_a,storage_techs,vintage)),
5381          storage_unitsBuild.l(nodesModel,years_a,storage_techs,vintage));
5382   
5383  storage_unitsDecom.l(nodesModel,yearsToCalc,storage_techs,vintage)
5384    $storage_decomTech(nodesModel,yearsToCalc,storage_techs,vintage)
5385    = sum(years$
5386          (years.val < sum(yearsToCalc_a$(ord(yearsToCalc_a) = 1), yearsToCalc_a.val)
5387            and storage_availTech(nodesModel,years,storage_techs,vintage)
5388            and years.val > sum(years_a$sameas(years_a, yearsToCalc-1), years_a.val) - storage_techParam(storage_techs,vintage,'lifeTime')
5389            and years.val <= yearsToCalc.val - storage_techParam(storage_techs,vintage,'lifeTime')),
5390        storage_unitsBuild.l(nodesModel,years,storage_techs,vintage))
5391      + sum(yearsToCalc_a$
5392          (yearsToCalc_a.val < sum(yearsToCalc_aa$(ord(yearsToCalc_aa) > 1), yearsToCalc_a.val)
5393            and storage_availTech(nodesModel,yearsToCalc_a,storage_techs,vintage)
5394            and yearsToCalc_a.val > sum(years_a$sameas(years_a, yearsToCalc-1), years_a.val) - storage_techParam(storage_techs,vintage,'lifeTime')
5395            and yearsToCalc_a.val <= yearsToCalc.val - storage_techParam(storage_techs,vintage,'lifeTime')),
5396        storage_unitsBuild.l(nodesModel,yearsToCalc_a,storage_techs,vintage));
5397        ;
5398   
5399  storage_unitsDecom.lo(nodesModel,yearsToCalc,storage_techs,vintage)
5400      $(storage_usedTech(nodesModel,yearsToCalc,storage_techs,vintage)
5401        and not storage_techParam(storage_techs,vintage,"freeDecom"))
5402      = storage_unitsDecom.l(nodesModel,yearsToCalc,storage_techs,vintage)
5403   
5404  * Calculate planned unit expansion
5405  parameter storage_unitsPlanned(nodesModel,years,storage_techs,vintage);
5406  storage_unitsPlanned(nodesModel,years,storage_techs,vintage) = 0;
5407  loop(years,
5408    storage_unitsPlanned(nodesModel,years,storage_techs,vintage)
5409      =
5410      storage_unitsPlanned(nodesModel,years-1,storage_techs,vintage)
5411          $storage_usedTech(nodesModel,years-1,storage_techs,vintage)
5412      + storage_unitsBuild.l(nodesModel,years,storage_techs,vintage)
5413          $storage_availTech(nodesModel,years,storage_techs,vintage)
5414      - storage_unitsDecom.l(nodesModel,years,storage_techs,vintage)
5415          $storage_usedTech(nodesModel,years,storage_techs,vintage);
5416  );
5417   
5418  * Set initial state for planned units
5419  storage_unitsTotal.l(nodesModel,years,storage_techs,vintage)
5420    = storage_unitsPlanned(nodesModel,years,storage_techs,vintage)
5421   
5422  * Calculate if planned unit expansion is bounded by upper and lower limits
5423  set storage_unitBoundsFixed(nodesModel,years,storage_techs);
5424  storage_unitBoundsFixed(nodesModel,years,storage_techs)
5425    $(sum(vintage$storage_usedTech(nodesModel,years,storage_techs,vintage),
5426          storage_unitsPlanned(nodesModel,years,storage_techs,vintage))
5427      = storage_reservoirParam(nodesModel,years,storage_techs,"unitsUpperLimit")
5428    and sum(vintage$storage_usedTech(nodesModel,years,storage_techs,vintage),
5429          storage_unitsPlanned(nodesModel,years,storage_techs,vintage))
5430      = storage_reservoirParam(nodesModel,years,storage_techs,"unitsLowerLimit"))
5431    = yes;
5432   
5433  * Fix unitsBuild, unitsDecom, unitsTotal if levels are predetermined by upper and lower limits
5434  storage_unitsBuild.fx(nodesModel,years,storage_techs,vintage)
5435    $(storage_availTech(nodesModel,years,storage_techs,vintage)
5436      and storage_unitBoundsFixed(nodesModel,years,storage_techs))
5437    = storage_unitsBuild.l(nodesModel,years,storage_techs,vintage);
5438  storage_unitsDecom.fx(nodesModel,years,storage_techs,vintage)
5439    $(storage_usedTech(nodesModel,years,storage_techs,vintage)
5440      and storage_unitBoundsFixed(nodesModel,years,storage_techs))
5441    = storage_unitsDecom.l(nodesModel,years,storage_techs,vintage);
5442  storage_unitsTotal.fx(nodesModel,years,storage_techs,vintage)
5443    $(storage_usedTech(nodesModel,years,storage_techs,vintage)
5444      and storage_unitBoundsFixed(nodesModel,years,storage_techs))
5445    = storage_unitsTotal.l(nodesModel,years,storage_techs,vintage);
5446   
5447  storage_unitsTotal_MIP.up(nodesModel,years,storage_techs,vintage)
5448      $(storage_usedTech(nodesModel,years,storage_techs,vintage)
5449        and storage_techParam(storage_techs,vintage,"mipUnits") = 1)
5450      = storage_reservoirParam(nodesModel,years,storage_techs,"unitsUpperLimit");
5451   
5452  * Add parameter for fixing capacities during myopic runs
5453  parameter storage_unitsDelta(nodesModel,years,storage_techs);
5454   
5455   
5456  * ==== declaration of equations ====
5457   
5458  equations
5459    Eq_storage_unitsBalance(nodesModel,years,storage_techs,vintage
5460      ) "Ensures the units balance over the planning period."
5461    Eq_storage_unitsFixedDecom(nodesModel,years,storage_techs,vintage
5462      ) "Restricts the fixed decommissioning of units over the planning period."
5463    Eq_storage_unitsFreeDecom(nodesModel,years,storage_techs,vintage
5464      ) "Restricts the free decommissioning of units over the planning period."
5465    Eq_storage_unitsUpperLimit(nodesModel,years,storage_techs
5466      ) "Upper bound for the total number of units."
5467    Eq_storage_unitsLowerLimit(nodesModel,years,storage_techs
5468      ) "Lower bound for the total number of units."
5469    Eq_storage_unitsTotalMIP(nodesModel,years,storage_techs,vintage
5470      ) "Fixes the total number of units to the corresponding integer variable."
5471   
5472    Eq_storage_levelUpperLimit(timeModel,nodesModel,years,storage_techs,vintage,commodity
5473      ) "Upper bound for the total number of units."
5474    Eq_storage_levelUpperLimit_degradation(timeModel,nodesModel,years,storage_techs,vintage,commodity
5475      ) "Upper bound for the total number of units if the storage technology accounts for degradation."
5476    Eq_storage_levelLowerLimit(timeModel,nodesModel,years,storage_techs,vintage,commodity
5477      ) "Lower bound for the total number of units."
5478    Eq_storage_losses(timeModel,nodesModel,years,storage_techs,vintage,commodity
5479      ) "Stored commodities lost due to self discharge."
5480    Eq_storage_unitsBalanceStates(nodesModel,years,storage_techs,vintage
5481      ) "Currently available units must have been built at some point in time and have some state of degradation."
5482    Eq_storage_unitsUpperLimitPerState(nodesModel,years,yearsCom,storage_techs,vintage
5483      ) "There cannot be more units from a certain year than the amount built in that year."
5484    Eq_storage_unitsStatesNoRecovery(nodesModel,years,yearsCom,storage_techs,vintage,degradation_states
5485      ) "There is no recovery."
5486    Eq_storage_cRateLimit(timeModel,nodesModel,years,storage_techs,vintage,commodity
5487      ) "Limit charging rate based on unit capacity."
5488    Eq_storage_eRateLimit(timeModel,nodesModel,years,storage_techs,vintage,commodity
5489      ) "Limit discharging rate based on unit capacity."
5490    Eq_storage_charge(timeModel,nodesModel,years,storage_techs,vintage,commodity
5491      ) "Positive change in state of charge is influx."
5492    Eq_storage_discharge(timeModel,nodesModel,years,storage_techs,vintage,commodity
5493      ) "Negative change in state of charge is outflux."
5494   
5495    Eq_storage_levelStateSum(timeModel,nodesModel,years,storage_techs,vintage,commodity
5496      ) "Sum of degradation class storage levels is the global level."
5497    Eq_storage_levelUpperLimitPerAge(timeModel,nodesModel,years,yearsCom,storage_techs,vintage,commodity
5498      ) "Upper bound for units of a certain state."
5499    Eq_storage_chargingPerAge(timeModel,nodesModel,years,yearsCom,storage_techs,vintage,commodity
5500      ) "Positive change in state of charge is influx for each degradation class."
5501    Eq_storage_chargeBasedDegradationDistribution(nodesModel,years,yearsCom,storage_techs,vintage,commodity
5502      ) "Determine degradation states of storage units."
5503    Eq_storage_unitsDecomStateSum(nodesModel,years,storage_techs,vintage
5504      ) "All decomminsioned units must have a degradation state."
5505    Eq_storage_unitsDegradation(nodesModel,years,yearsCom,storage_techs,vintage,degradation_states
5506      ) "Only allow one range of degradation states per year and age group."
5507    Eq_storage_unitsDegradation_onlyOneRange(nodesModel,years,yearsCom,storage_techs,vintage
5508      ) "Limit usable degradation states to one range, i.e., two neighboring states."
5509   
5510    Eq_storage_unitsSoC_sum(timeModel,nodesModel,years,storage_techs,vintage
5511      ) "Every unit has a state of charge."
5512    Eq_storage_levelSoC(timeModel,nodesModel,years,storage_techs,vintage,commodity
5513      ) "Every unit has a state of charge."
5514    Eq_storage_unitsSoC(timeModel,nodesModel,years,storage_techs,vintage,soc_statesIn
5515      ) "Number of units in particular SoC."
5516    Eq_storage_unitsSoC_onlyOneRange(timeModel,nodesModel,years,storage_techs,vintage
5517      ) "Limit usable SoC states to one range, i.e., two neighboring states."
5518   
5519    Eq_storage_cRateLimit_SoC(timeModel,nodesModel,years,storage_techs,vintage,commodity
5520      ) "Limit charging rate based on unit capacity."
5521    Eq_storage_eRateLimit_SoC(timeModel,nodesModel,years,storage_techs,vintage,commodity
5522      ) "Limit discharging rate based on unit capacity."
5523    ;
5524   
5525  * ==== equation definition ====
5526  * // ## Equations
5527  * // ### Storage Units Balance
5528  * // Ensures that the total units are consistent with the built and decommissioned units.
5529  * // {Eq_storage_unitsBalance}
5530  Eq_storage_unitsBalance(nodesModelSel,yearsSel,storage_techs,vintage)
5531      $((storage_usedTech(nodesModelSel,yearsSel,storage_techs,vintage)
5532            or sum(years$sameas(years,yearsSel), storage_usedTech(nodesModelSel,years-1,storage_techs,vintage)))
5533          and not storage_unitBoundsFixed(nodesModelSel,yearsSel,storage_techs))
5534      ..
5535      storage_unitsTotal(nodesModelSel,yearsSel,storage_techs,vintage)
5536      =e=
5537          sum(yearsToCalc$(ord(yearsToCalc) = 1 and sameas(yearsToCalc, yearsSel)),
5538        sum(years$sameas(years, yearsToCalc),
5539          storage_unitsTotal(nodesModelSel,years-1,storage_techs,vintage)
5540            $storage_usedTech(nodesModelSel,years-1,storage_techs,vintage)))
5541      + sum((yearsToCalc)$(ord(yearsToCalc) > 1 and sameas(yearsToCalc, yearsSel)),
5542        storage_unitsTotal(nodesModelSel,yearsToCalc-1,storage_techs,vintage)
5543          $storage_usedTech(nodesModelSel,yearsToCalc-1,storage_techs,vintage))
5544      + storage_unitsBuild(nodesModelSel,yearsSel,storage_techs,vintage)
5545          $storage_availTech(nodesModelSel,yearsSel,storage_techs,vintage)
5546      - storage_unitsDecom(nodesModelSel,yearsSel,storage_techs,vintage)
5547          $storage_usedTech(nodesModelSel,yearsSel,storage_techs,vintage);
5548   
5549  * // ### Storage Units Fixed Decommission
5550  * // Restricts the fixed decommissioning of storage units over the planning period.
5551  * // {Eq_storage_unitsFixedDecom}
5552  Eq_storage_unitsFixedDecom(nodesModelSel,yearsSel,storage_techs,vintage)
5553      $(storage_decomTech(nodesModelSel,yearsSel,storage_techs,vintage)
5554          and not storage_techParam(storage_techs,vintage,"freeDecom") = 1
5555          and not storage_unitBoundsFixed(nodesModelSel,yearsSel,storage_techs))
5556      ..
5557      storage_unitsDecom(nodesModelSel,yearsSel,storage_techs,vintage)
5558      =e=
5559      sum(years$
5560          (storage_availTech(nodesModelSel,years,storage_techs,vintage)
5561            and years.val > sum(yearsToCalc$sameas(yearsToCalc+1, yearsSel), yearsToCalc.val) - storage_techParam(storage_techs,vintage,'lifeTime')
5562            and years.val <= yearsSel.val - storage_techParam(storage_techs,vintage,'lifeTime')),
5563        storage_unitsBuild(nodesModelSel,years,storage_techs,vintage));
5564   
5565  * // ### Storage Units Free Decomission
5566  * // Restricts the free decommissioning of storage units over the planning period.
5567  * // {Eq_storage_unitsFreeDecom}
5568  Eq_storage_unitsFreeDecom(nodesModelSel,yearsSel,storage_techs,vintage)
5569      $((storage_decomTech(nodesModelSel,yearsSel,storage_techs,vintage)
5570          or storage_usedTech(nodesModelSel,yearsSel,storage_techs,vintage))
5571          and storage_techParam(storage_techs,vintage,"freeDecom") = 1)
5572      ..
5573      sum(years$
5574            ((storage_decomTech(nodesModelSel,years,storage_techs,vintage)
5575              or storage_usedTech(nodesModelSel,years,storage_techs,vintage))
5576              and years.val < sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)),
5577          storage_unitsDecom(nodesModelSel,years,storage_techs,vintage))
5578      + sum(yearsToCalc$
5579            ((storage_decomTech(nodesModelSel,yearsToCalc,storage_techs,vintage)
5580              or storage_usedTech(nodesModelSel,yearsToCalc,storage_techs,vintage))
5581              and yearsToCalc.val >= sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
5582              and yearsToCalc.val <= yearsSel.val),
5583          storage_unitsDecom(nodesModelSel,yearsToCalc,storage_techs,vintage))
5584      =g=
5585      sum(years$
5586            (storage_availTech(nodesModelSel,years,storage_techs,vintage)
5587              and years.val < sum(yearsToCalc$(ord(yearsToCalc)=1), yearsToCalc.val) - storage_techParam(storage_techs,vintage,'lifeTime')),
5588          storage_unitsBuild(nodesModelSel,years,storage_techs,vintage))
5589      + sum(yearsToCalc$
5590            (storage_availTech(nodesModelSel,yearsToCalc,storage_techs,vintage)
5591              and yearsToCalc.val >= sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
5592              and yearsToCalc.val <= yearsSel.val - storage_techParam(storage_techs,vintage,'lifeTime')),
5593          storage_unitsBuild(nodesModelSel,yearsToCalc,storage_techs,vintage));
5594   
5595  * // ### Storage Units Lower Limit
5596  * // Lower bound for the total number of storage units.
5597  * // {Eq_storage_unitsLowerLimit}
5598  Eq_storage_unitsLowerLimit(nodesModelSel,yearsSel,storage_techs)
5599      $(storage_reservoirParam(nodesModelSel,yearsSel,storage_techs,'unitsLowerLimit') > 0 )
5600      ..
5601      sum(vintage$storage_usedTech(nodesModelSel,yearsSel,storage_techs,vintage),
5602          storage_unitsTotal(nodesModelSel,yearsSel,storage_techs,vintage))
5603      =g=
5604      storage_reservoirParam(nodesModelSel,yearsSel,storage_techs,"unitsLowerLimit");
5605   
5606  * // ### Storage Units Upper Limit
5607  * // Upper bound for the total number of storage units.
5608  * // {Eq_storage_unitsUpperLimit}
5609  Eq_storage_unitsUpperLimit(nodesModelSel,yearsSel,storage_techs)
5610      $(storage_reservoirParam(nodesModelSel,yearsSel,storage_techs,'unitsUpperLimit') >= 0
5611          and storage_reservoirParam(nodesModelSel,yearsSel,storage_techs,'unitsUpperLimit') < +inf )
5612      ..
5613      sum(vintage$storage_usedTech(nodesModelSel,yearsSel,storage_techs,vintage),
5614          storage_unitsTotal(nodesModelSel,yearsSel,storage_techs,vintage))
5615      =l=
5616      storage_reservoirParam(nodesModelSel,yearsSel,storage_techs,"unitsUpperLimit");
5617   
5618  * // ### Storage Units Total MIP
5619  * // Fixes the total number of storage units to the corresponding integer variable.
5620  * // {Eq_storage_unitsTotalMIP}
5621  Eq_storage_unitsTotalMIP(nodesModelSel,yearsSel,storage_techs,vintage)
5622      $( storage_usedTech(nodesModelSel,yearsSel,storage_techs,vintage)
5623          and storage_techParam(storage_techs,vintage,"mipUnits") = 1 )
5624      ..
5625      storage_unitsTotal(nodesModelSel,yearsSel,storage_techs,vintage)
5626      =e=
5627      storage_unitsTotal_MIP(nodesModelSel,yearsSel,storage_techs,vintage);
5628   
5629  * // ### Storage Level Lower Limit
5630  * // Lower limit on the storage level.
5631  * // {Eq_storage_levelLowerLimit}
5632  Eq_storage_levelLowerLimit(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
5633      $(storage_usedTechCom(nodesModelSel,yearsSel,storage_techs,vintage,commodity)
5634          and storage_levelProfile(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,"lower") > 0)
5635      ..
5636      storage_level(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
5637      =g=
5638      storage_levelProfile(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,"lower")
5639      * storage_sizeParam(storage_techs,vintage,commodity,"size")
5640      * storage_unitsTotal(nodesModelSel,yearsSel,storage_techs,vintage);
5641   
5642  * // ### Storage Level Upper Limit
5643  * // Upper limit on the storage level.
5644  * // {Eq_storage_levelUpperLimit}
5645  Eq_storage_levelUpperLimit(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
5646      $(storage_usedTechCom(nodesModelSel,yearsSel,storage_techs,vintage,commodity)
5647          and not storage_hasDegradation(storage_techs,vintage)
5648          and storage_levelProfile(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,"upper") >= 0)
5649      ..
5650      storage_level(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
5651      =l=
5652      storage_levelProfile(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,"upper")
5653      * storage_sizeParam(storage_techs,vintage,commodity,"size")
5654      * storage_unitsTotal(nodesModelSel,yearsSel,storage_techs,vintage);
5655   
5656  * // ### Storage Level Upper Limit (degradation)
5657  * // Upper limit on the storage level if the storage technology accounts for degradation.
5658  * // {Eq_storage_levelUpperLimit_degradation}
5659  Eq_storage_levelUpperLimit_degradation(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
5660      $(storage_usedTechCom(nodesModelSel,yearsSel,storage_techs,vintage,commodity)
5661          and storage_hasDegradation(storage_techs,vintage)
5662          and storage_levelProfile(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,"upper") >= 0)
5663      ..
5664      storage_level(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
5665      =l=
5666      storage_levelProfile(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,"upper")
5667      * storage_sizeParam(storage_techs,vintage,commodity,"size")
5668      * sum((degradation_states,yearsCom)$storage_usedDegradation(storage_techs,vintage,degradation_states),
5669              (storage_degradationParam(storage_techs,vintage,degradation_states,"remainingCapacity")
5670                - (yearsSel.val - yearsCom.val) * storage_techParam(storage_techs,vintage,"annualDegradation"))
5671                * storage_unitsStateTracker(nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,degradation_states));
5672   
5673  * // ### Storage Unit States Sum (degradation)
5674  * // The number of units in all degradation state must match the total unit number.
5675  * // {Eq_storage_unitsBalanceStates}
5676  Eq_storage_unitsBalanceStates(nodesModelSel,yearsSel,storage_techs,vintage)
5677      $(storage_usedTech(nodesModelSel,yearsSel,storage_techs,vintage)
5678        and storage_hasDegradation(storage_techs,vintage))
5679      ..
5680      storage_unitsTotal(nodesModelSel,yearsSel,storage_techs,vintage)
5681      =e=
5682      sum((yearsCom,degradation_states)$storage_usedDegradation(storage_techs,vintage,degradation_states),
5683            storage_unitsStateTracker(nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,degradation_states));
5684   
5685  * // ### Storage Unit States Upper Limit(degradation)
5686  * // The states of all commissioned units in one year (unitsBuilt) must either still be tracked or have been decommissioned.
5687  * // {Eq_storage_unitsUpperLimitPerState}
5688  Eq_storage_unitsUpperLimitPerState(nodesModelSel,yearsSel,yearsCom,storage_techs,vintage)
5689      $(storage_usedTech(nodesModelSel,yearsSel,storage_techs,vintage)
5690          and storage_hasDegradation(storage_techs,vintage))
5691      ..
5692      sum(degradation_states$storage_usedDegradation(storage_techs,vintage,degradation_states),
5693            storage_unitsStateTracker(nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,degradation_states)
5694            + sum(years$(years.val <= yearsSel.val),
5695                  storage_unitsStateTrackerDecom(nodesModelSel,years,yearsCom,storage_techs,vintage,degradation_states)))
5696      =e=
5697      storage_unitsBuild(nodesModelSel,yearsCom,storage_techs,vintage)$(yearsCom.val <= yearsSel.val);
5698   
5699  * // ### Storage Unit States Progression (degradation)
5700  * // Unit recovery by reassigning the storage cycles to other units is disabled. Therefore, the number of units in a particular degradation state can only increase if the number in a less degraded state is decreased by at least the same amount.
5701  * // {Eq_storage_unitsStatesNoRecovery}
5702  alias(degradation_states, dc_states);
5703  Eq_storage_unitsStatesNoRecovery(nodesModelSel,yearsSel(yearsToCalc),yearsCom,storage_techs,vintage,degradation_states)
5704      $(storage_usedTech(nodesModelSel,yearsSel,storage_techs,vintage)
5705        and yearsToCalc.val > yearsCom.val
5706        and storage_usedDegradation(storage_techs,vintage,degradation_states))
5707      ..
5708      sum(dc_states$(storage_usedDegradation(storage_techs,vintage,dc_states)
5709                and storage_degradationParam(storage_techs,vintage,dc_states,"maxFullCycles") <= storage_degradationParam(storage_techs,vintage,degradation_states,"maxFullCycles")),
5710              storage_unitsStateTracker(nodesModelSel,yearsToCalc,yearsCom,storage_techs,vintage,dc_states)
5711              + sum(years$(years.val <= yearsToCalc.val), storage_unitsStateTrackerDecom(nodesModelSel,years,yearsCom,storage_techs,vintage,dc_states)))
5712      =l=
5713      sum(dc_states$(storage_usedDegradation(storage_techs,vintage,dc_states)
5714                      and storage_degradationParam(storage_techs,vintage,dc_states,"maxFullCycles") <= storage_degradationParam(storage_techs,vintage,degradation_states,"maxFullCycles")),
5715              storage_unitsStateTracker(nodesModelSel,yearsToCalc-1,yearsCom,storage_techs,vintage,dc_states)
5716              + sum(years$(years.val < yearsToCalc.val), storage_unitsStateTrackerDecom(nodesModelSel,years,yearsCom,storage_techs,vintage,dc_states)));
5717   
5718  * // ### Storage Losses
5719  * // Accumulation of storage losses.
5720  * // {Eq_storage_losses}
5721  Eq_storage_losses(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,storage_techs,vintage,commodity)
5722      $storage_usedTechCom(nodesModelSel,yearsSel,storage_techs,vintage,commodity)
5723      ..
5724      storage_losses(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
5725      =e=
5726      - storage_level(timeModelToCalc--1,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
5727        * storage_sizeParam(storage_techs,vintage,commodity,"selfdischarge")
5728      + storage_sizeParam(storage_techs,vintage,commodity,"selfdischargeAbs")
5729      + (storage_techParam(storage_techs,vintage,"chargingLoss")
5730          /(1 - storage_techParam(storage_techs,vintage,"chargingLoss")))
5731        * storage_charge(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
5732          $(storage_techParam(storage_techs,vintage,"chargingLoss") > 0)
5733      + storage_techParam(storage_techs,vintage,"dischargingLoss")
5734        * storage_discharge(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
5735          $(storage_techParam(storage_techs,vintage,"dischargingLoss") > 0)
5736      - storage_sizeParam(storage_techs,vintage,commodity,"size")
5737        * sum(soc_states$(storage_usedTechSoCState(storage_techs,vintage,soc_states)
5738                          and storage_validSoCRange(storage_techs,vintage)),
5739              storage_unitsSoC(timeModelToCalc--1,nodesModelSel,yearsSel,storage_techs,vintage,soc_states)
5740              * storage_SoCParam(storage_techs,vintage,soc_states,"SoC")
5741              * storage_SoCParam(storage_techs,vintage,soc_states,"selfdischarge"));
5742   
5743  * // ### C-Rate Limit
5744  * // The increase in storage level per time step, i.e., the charging rate, is limited relative to the storage capacity.
5745  * // {Eq_storage_cRateLimit}
5746  Eq_storage_cRateLimit(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,storage_techs,vintage,commodity)
5747      $(storage_usedTechCom(nodesModelSel,yearsSel,storage_techs,vintage,commodity)
5748        and storage_techParam(storage_techs,vintage,"maxCRate") > 0)
5749      ..
5750      storage_level(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
5751      - storage_level(timeModelToCalc--1,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
5752      =l=
5753      storage_techParam(storage_techs,vintage,"maxCRate")
5754      * storage_sizeParam(storage_techs,vintage,commodity,"size")
5755      * storage_unitsTotal(nodesModelSel,yearsSel,storage_techs,vintage);
5756   
5757  * // ### E-Rate Limit
5758  * // The decrease in storage level per time step, i.e., the discharging rate, is limited relative to the storage capacity.
5759  * // {Eq_storage_eRateLimit}
5760  Eq_storage_eRateLimit(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,storage_techs,vintage,commodity)
5761      $(storage_usedTechCom(nodesModelSel,yearsSel,storage_techs,vintage,commodity)
5762        and storage_techParam(storage_techs,vintage,"maxERate") > 0)
5763      ..
5764      storage_level(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
5765      - storage_level(timeModelToCalc--1,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
5766      =g=
5767      - storage_techParam(storage_techs,vintage,"maxERate")
5768      * storage_sizeParam(storage_techs,vintage,commodity,"size")
5769      * storage_unitsTotal(nodesModelSel,yearsSel,storage_techs,vintage);
5770   
5771  * // ### Storage Charging
5772  * // Increases in storage levels are accounted as charging amounts.
5773  * // {Eq_storage_charge}
5774  Eq_storage_charge(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,storage_techs,vintage,commodity)
5775      $(storage_usedTechCom(nodesModelSel,yearsSel,storage_techs,vintage,commodity)
5776        and storage_techParam(storage_techs,vintage,"chargingLoss") > 0)
5777      ..
5778      storage_charge(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
5779      =g=
5780      storage_level(timeModelToCalc,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
5781      - storage_level(timeModelToCalc--1,nodesModelSel,yearsSel,storage_techs,vintage,commodity);
5782   
5783  * // ### Storage Discharging
5784  * // Decreases in storage levels are accounted as discharging amounts.
5785  * // {Eq_storage_discharge}
5786  Eq_storage_discharge(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,storage_techs,vintage,commodity)
5787      $(storage_usedTechCom(nodesModelSel,yearsSel,storage_techs,vintage,commodity)
5788        and storage_techParam(storage_techs,vintage,"dischargingLoss") > 0)
5789      ..
5790      storage_discharge(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
5791      =g=
5792      storage_level(timeModelToCalc--1,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
5793      - storage_level(timeModelToCalc,nodesModelSel,yearsSel,storage_techs,vintage,commodity);
5794   
5795  * // ### Storage Level Sum (degradation)
5796  * // The storage level is accounted individually by commissioning year in the case of degradation in order to prohibit the model to assign pre-existing storage cycles to newly built storage reservoirs and thereby avoiding degradation. All those storage levels represent the total storage level.
5797  * // {Eq_storage_levelStateSum}
5798  Eq_storage_levelStateSum(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
5799      $(storage_usedTechCom(nodesModelSel,yearsSel,storage_techs,vintage,commodity)
5800        and storage_techParam(storage_techs,vintage,"usageDegradation"))
5801      ..
5802      storage_level(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
5803      =e=
5804      sum(yearsCom, storage_levelPerAge(timeModelSel,nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,commodity));
5805   
5806  * // ### Storage Level Upper Limit per Age Group (degradation)
5807  * // Upper limit on the storage level per commissioning year if the storage technology accounts for degradation.
5808  * // {Eq_storage_levelUpperLimitPerAge}
5809  Eq_storage_levelUpperLimitPerAge(timeModelSel,nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,commodity)
5810      $(storage_usedTechCom(nodesModelSel,yearsSel,storage_techs,vintage,commodity)
5811        and storage_techParam(storage_techs,vintage,"usageDegradation"))
5812      ..
5813      storage_levelPerAge(timeModelSel,nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,commodity)
5814      =l=
5815      storage_techParam(storage_techs,vintage,"levelUpperLimit")
5816      * storage_sizeParam(storage_techs,vintage,commodity,"size")
5817      * sum(degradation_states,
5818              (storage_degradationParam(storage_techs,vintage,degradation_states,"remainingCapacity")
5819                - (yearsSel.val - yearsCom.val) * storage_techParam(storage_techs,vintage,"annualDegradation"))
5820                * storage_unitsStateTracker(nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,degradation_states));
5821   
5822  * // ### Storage Cycle Distribution to Degradation States per Commissioning Year (degradation)
5823  * // The charging amounts are converted to equivalent full cycles which then must be represented by an adequate distribution of degradation states.
5824  * // {Eq_storage_chargeBasedDegradationDistribution}
5825  alias(years, prev_years);
5826  Eq_storage_chargeBasedDegradationDistribution(nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,commodity)
5827      $(storage_usedTechCom(nodesModelSel,yearsSel,storage_techs,vintage,commodity)
5828        and storage_techParam(storage_techs,vintage,"usageDegradation"))
5829      ..
5830      sum(prev_years$(prev_years.val <= yearsSel.val), representedYears(prev_years)
5831          * sum(timeModel, storage_chargePerAge(timeModel,nodesModelSel,prev_years,yearsCom,storage_techs,vintage,commodity)))
5832      =l=
5833      storage_sizeParam(storage_techs,vintage,commodity,"size")
5834      * sum(dc_states$storage_usedDegradation(storage_techs,vintage,dc_states),
5835          storage_degradationParam(storage_techs,vintage,dc_states,"maxFullCycles")
5836          * (storage_unitsStateTracker(nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,dc_states)
5837             + sum(prev_years$(prev_years.val <= yearsSel.val), storage_unitsStateTrackerDecom(nodesModelSel,prev_years,yearsCom,storage_techs,vintage,dc_states))));
5838   
5839  * // ### Storage Charging per Commissioning Year (degradation)
5840  * // Increases in storage levels are accounted as charging amounts.
5841  * // {Eq_storage_chargingPerAge}
5842  Eq_storage_chargingPerAge(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,commodity)
5843      $(storage_usedTechCom(nodesModelSel,yearsSel,storage_techs,vintage,commodity)
5844        and storage_techParam(storage_techs,vintage,"usageDegradation"))
5845      ..
5846      storage_chargePerAge(timeModelSel,nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,commodity)
5847      =g=
5848      storage_levelPerAge(timeModelToCalc,nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,commodity)
5849      - storage_levelPerAge(timeModelToCalc--1,nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,commodity);
5850   
5851  * // ### Storage Unit Decommissioning States Sum (degradation)
5852  * // The number of decommissioned units in all degradation state must match the total decommissioning unit number.
5853  * // {Eq_storage_unitsDecomStateSum}
5854  Eq_storage_unitsDecomStateSum(nodesModelSel,yearsSel,storage_techs,vintage)
5855      $(storage_techParam(storage_techs,vintage,"usageDegradation"))
5856      ..
5857      storage_unitsDecom(nodesModelSel,yearsSel,storage_techs,vintage)
5858      =e=
5859      sum((yearsCom,degradation_states)$storage_usedDegradation(storage_techs,vintage,degradation_states),
5860          storage_unitsStateTrackerDecom(nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,degradation_states));
5861   
5862  * // ### Storage Unit Sequential Degradation (degradation)
5863  * // Only active degradation ranges, i.e., two neighboring degradation states, can be used.
5864  * // {Eq_storage_unitsDegradation}
5865  alias(degradation_states, degradation_states_a, degradation_states_b);
5866  Eq_storage_unitsDegradation(nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,degradation_states)
5867      $(storage_techParam(storage_techs,vintage,"usageDegradation")
5868        and storage_techParam(storage_techs,vintage,"sequentialDegradationStates"))
5869      ..
5870      sum(degradation_states_a$((storage_degradationParam(storage_techs,vintage,degradation_states_a,"maxFullCycles") = storage_degradationParam(storage_techs,vintage,degradation_states,"maxFullCycles")
5871                        or storage_degradationParam(storage_techs,vintage,degradation_states_a,"maxFullCycles")
5872                                         = smax(degradation_states_b$(storage_degradationParam(storage_techs,vintage,degradation_states_b,"maxFullCycles") < storage_degradationParam(storage_techs,vintage,degradation_states,"maxFullCycles")
5873                                                              and storage_usedDegradation(storage_techs,vintage,degradation_states_b)),
5874                                                              storage_degradationParam(storage_techs,vintage,degradation_states_b,"maxFullCycles")))
5875                        and storage_usedDegradation(storage_techs,vintage,degradation_states_a)),
5876          storage_unitsStateTracker_activeRange(nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,degradation_states_a))
5877      * storage_bigM(storage_techs,vintage)
5878      =g=
5879      storage_unitsStateTracker(nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,degradation_states);
5880   
5881  * // ### Storage Unit Sequential Degradation Range (degradation)
5882  * // Only one degradation range can be active.
5883  * // {Eq_storage_unitsDegradation_onlyOneRange}
5884  Eq_storage_unitsDegradation_onlyOneRange(nodesModelSel,yearsSel,yearsCom,storage_techs,vintage)
5885      $(storage_techParam(storage_techs,vintage,"usageDegradation") and storage_techParam(storage_techs,vintage,"sequentialDegradationStates"))
5886      ..
5887      sum(degradation_states$storage_usedDegradation(storage_techs,vintage,degradation_states),
5888            storage_unitsStateTracker_activeRange(nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,degradation_states))
5889      =e= 1;
5890   
5891  * // ### Storage Unit Sequential State of Charge (SoC)
5892  * // Only active state of charge ranges, i.e., two neighboring states of charge, can be used.
5893  * // {Eq_storage_unitsSoC}
5894  alias(soc_states, soc_states_a, soc_states_b);
5895  Eq_storage_unitsSoC(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,storage_techs,vintage,soc_states)
5896      $(storage_validSoCRange(storage_techs,vintage) and storage_techParam(storage_techs,vintage,"sequentialSoC"))
5897      ..
5898      sum(soc_states_a$((storage_SoCParam(storage_techs,vintage,soc_states_a,"SoC") = storage_SoCParam(storage_techs,vintage,soc_states,"SoC")
5899                        or storage_SoCParam(storage_techs,vintage,soc_states_a,"SoC")
5900                                         = smax(soc_states_b$(storage_SoCParam(storage_techs,vintage,soc_states_b,"SoC") < storage_SoCParam(storage_techs,vintage,soc_states,"SoC")
5901                                                              and storage_usedTechSoCState(storage_techs,vintage,soc_states_b)),
5902                                                              storage_SoCParam(storage_techs,vintage,soc_states_b,"SoC")))
5903                        and storage_usedTechSoCState(storage_techs,vintage,soc_states_a)),
5904          storage_unitsSoC_activeRange(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,soc_states_a))
5905      * storage_bigM(storage_techs,vintage)
5906      =g=
5907      storage_unitsSoC(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,soc_states);
5908   
5909  * // ### Storage Unit Sequential State of Charge Range (SoC)
5910  * // Only one state of charge range can be active.
5911  * // {Eq_storage_unitsSoC_onlyOneRange}
5912  Eq_storage_unitsSoC_onlyOneRange(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,storage_techs,vintage)
5913      $(storage_validSoCRange(storage_techs,vintage) and storage_techParam(storage_techs,vintage,"sequentialSoC"))
5914      ..
5915      sum(soc_states$storage_usedTechSoCState(storage_techs,vintage,soc_states),
5916            storage_unitsSoC_activeRange(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,soc_states)) =e= 1;
5917   
5918  * // ### Storage Unit State of Charge Sum (SoC)
5919  * // Each storage unit must have one state of charge.
5920  * // {Eq_storage_unitsSoC_sum}
5921  Eq_storage_unitsSoC_sum(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,storage_techs,vintage)
5922      $storage_validSoCRange(storage_techs,vintage)
5923      ..
5924      storage_unitsTotal(nodesModelSel,yearsSel,storage_techs,vintage)
5925      =e=
5926      sum(soc_states$storage_usedTechSoCState(storage_techs,vintage,soc_states),
5927            storage_unitsSoC(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,soc_states));
5928   
5929  * // ### Storage Level State of Charge Sum (SoC)
5930  * // The total storage level must be represented by units in their specific states of charge.
5931  * // {Eq_storage_levelSoC}
5932  Eq_storage_levelSoC(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,storage_techs,vintage,commodity)
5933      $(storage_validSoCRange(storage_techs,vintage) and storage_usedTechCom(nodesModelSel,yearsSel,storage_techs,vintage,commodity))
5934      ..
5935      storage_level(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
5936      =e=
5937      storage_sizeParam(storage_techs,vintage,commodity,"size")
5938      * sum(soc_states$storage_usedTechSoCState(storage_techs,vintage,soc_states),
5939              storage_unitsSoC(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,soc_states)
5940              * storage_SoCParam(storage_techs,vintage,soc_states,"SoC"));
5941   
5942  * // ### C-Rate Limit (SoC)
5943  * // The increase in storage level per time step, i.e., the charging rate, is limited relative to the storage capacity. The coefficients can vary between states of charge.
5944  * // {Eq_storage_cRateLimit_SoC}
5945  Eq_storage_cRateLimit_SoC(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,storage_techs,vintage,commodity)
5946      $(storage_usedTechCom(nodesModelSel,yearsSel,storage_techs,vintage,commodity)
5947        and storage_validSoCRange(storage_techs,vintage)
5948        and sum(soc_states, storage_SoCParam(storage_techs,vintage,soc_states,"cRate")) < inf)
5949      ..
5950      storage_level(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
5951      - storage_level(timeModelToCalc--1,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
5952      =l=
5953      storage_sizeParam(storage_techs,vintage,commodity,"size")
5954      * sum(soc_states$storage_usedTechSoCState(storage_techs,vintage,soc_states),
5955                      storage_SoCParam(storage_techs,vintage,soc_states,"cRate")
5956                      * storage_unitsSoC(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,soc_states));
5957   
5958  * // ### E-Rate Limit (SoC)
5959  * // The decrease in storage level per time step, i.e., the discharging rate, is limited relative to the storage capacity. The coefficients can vary between states of charge.
5960  * // {Eq_storage_cRateLimit_SoC}
5961  Eq_storage_eRateLimit_SoC(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,storage_techs,vintage,commodity)
5962      $(storage_usedTechCom(nodesModelSel,yearsSel,storage_techs,vintage,commodity)
5963        and storage_validSoCRange(storage_techs,vintage)
5964        and sum(soc_states, storage_SoCParam(storage_techs,vintage,soc_states,"eRate")) < inf)
5965      ..
5966      storage_level(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
5967      - storage_level(timeModelToCalc--1,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
5968      =g=
5969      - storage_sizeParam(storage_techs,vintage,commodity,"size")
5970      * sum(soc_states$storage_usedTechSoCState(storage_techs,vintage,soc_states),
5971                      storage_SoCParam(storage_techs,vintage,soc_states,"eRate")
5972                      * storage_unitsSoC(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,soc_states));
5973   
5974   
5975  * ==== model definition ====
5976   
5977  Model M_storage
5978  /
5979    Eq_storage_unitsBalance
5980    Eq_storage_unitsFixedDecom
5981    Eq_storage_unitsFreeDecom
5982    Eq_storage_unitsLowerLimit
5983    Eq_storage_unitsUpperLimit
5984    Eq_storage_levelUpperLimit_degradation
5985    Eq_storage_unitsTotalMIP
5986    Eq_storage_levelLowerLimit
5987    Eq_storage_levelUpperLimit
5989    Eq_storage_losses
5991    Eq_storage_unitsBalanceStates
5992    Eq_storage_unitsUpperLimitPerState
5993    Eq_storage_unitsStatesNoRecovery
5994    Eq_storage_cRateLimit
5995    Eq_storage_eRateLimit
5996    Eq_storage_charge
5997    Eq_storage_discharge
5998    Eq_storage_levelStateSum
5999    Eq_storage_levelUpperLimitPerAge
6000    Eq_storage_chargeBasedDegradationDistribution
6001    Eq_storage_chargingPerAge
6002    Eq_storage_unitsDecomStateSum
6003    Eq_storage_unitsDegradation
6004    Eq_storage_unitsDegradation_onlyOneRange
6005   
6006    Eq_storage_unitsSoC
6007    Eq_storage_unitsSoC_sum
6008    Eq_storage_unitsSoC_onlyOneRange
6009    Eq_storage_levelSoC
6010    Eq_storage_cRateLimit_SoC
6011    Eq_storage_eRateLimit_SoC
6012  /;
INCLUDE    C:\Local\REMix\framework\remix\framework\model\source\core\transfer.gms
6014  * SPDX-FileCopyrightText: Copyright (c) 2023 German Aerospace Center (DLR)
6015  * SPDX-License-Identifier: BSD-3-Clause
6016   
6017  * // # core_transfer
6018  * // The equations in this file describe the commodity transfer in the model.
6019   
6020  * // ## Variables
6021  * // {special_table_transfer_variables}
6024   
6029   
6272   
6273  parameter transfer_linksParam(linksModel,years,transfer_techs,pc_transfer_linksParam);
6274  transfer_linksParam(linksModelToCalc,years,transfer_techs,pc_transfer_linksParam)
6275      = sum(linksData$links_aggregate(linksModelToCalc,linksData), transfer_linksParamIn(linksData,years,transfer_techs,pc_transfer_linksParam));
6276   
6277  * // ## Load links from gdx file
6279   
6280   
6281  set transfer_hasflowProfileIn(linksData,years,transfer_techs,pc_transfer_flowProfile);
6282  option transfer_hasflowProfileIn < transfer_flowProfileIn;
6283   
6284  * === modify transfer_flowProfileIn vector to fill with default values, in case profile is not specified ===
6285  transfer_linksParamIn(linksData,years,transfer_techs,"flowAlongLimit")
6286      $(not transfer_linksParamIn(linksData,years,transfer_techs,"limitFlows"))
6287      = 1;
6288   
6289  transfer_linksParamIn(linksData,years,transfer_techs,"flowAgainstLimit")
6290      $(not transfer_linksParamIn(linksData,years,transfer_techs,"limitFlows"))
6291      = 1;
6292   
6293  transfer_flowProfileIn(timeData,linksData,years,transfer_techs,"along")
6294      $(not transfer_hasflowProfileIn(linksData,years,transfer_techs,"along"))
6295      = transfer_linksParamIn(linksData,years,transfer_techs,"flowAlongLimit");
6296   
6297  transfer_flowProfileIn(timeData,linksData,years,transfer_techs,"against")
6298      $(not transfer_hasflowProfileIn(linksData,years,transfer_techs,"against"))
6299      = transfer_linksParamIn(linksData,years,transfer_techs,"flowAgainstLimit");
6300   
6301  * aggregate time dimension
6302  parameter transfer_flowProfileIn_aggTime(timeModel,linksData,yearsToCalc,transfer_techs,pc_transfer_flowProfile);
6303  transfer_flowProfileIn_aggTime(timeModelToCalc,linksData,yearsToCalc,transfer_techs,pc_transfer_flowProfile)
6304    = sum(timeData$timeMapping(timeData,timeModelToCalc),
6305            transfer_flowProfileIn(timeData,linksData,yearsToCalc,transfer_techs,pc_transfer_flowProfile)
6306            / timeLength(timeModelToCalc));
6307  option clear = transfer_flowProfileIn;
6308   
6309   
6310  set transfer_finiteLinkLimit(linksModel,years,transfer_techs);
6311  transfer_finiteLinkLimit(linksModelToCalc,yearsToCalc,transfer_techs)
6312      = sum(linksData$links_aggregate(linksModelToCalc,linksData), transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"linksUpperLimit")) > 0
6313          and sum(linksData$links_aggregate(linksModelToCalc,linksData), transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"linksUpperLimit")) < inf;
6314   
6315  set transfer_infiniteLinkLimit(linksModel,years,transfer_techs);
6316  transfer_infiniteLinkLimit(linksModelToCalc,yearsToCalc,transfer_techs)
6317      = sum(linksData$links_aggregate(linksModelToCalc,linksData), transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"linksUpperLimit")) = inf;
6319   
6320  parameter transfer_lengthParam(linksModel,link_types,pc_transfer_lengthParam);
6321  transfer_lengthParam(linksModelToCalc,link_types,pc_transfer_lengthParam)
6322      = sum(linksData$links_aggregate(linksModelToCalc,linksData), transfer_lengthParamIn(linksData,link_types,pc_transfer_lengthParam))
6323          / sum(linksData$links_aggregate(linksModelToCalc,linksData), 1);
6324   
6325  parameter transfer_gridSegments(linksModel,transfer_techs,gridSegments,pc_transfer_gridSegments);
6326  transfer_gridSegments(linksModelToCalc,transfer_techs,gridSegments,pc_transfer_gridSegments)
6327      = smax(linksData$links_aggregate(linksModelToCalc,linksData), transfer_gridSegmentsIn(linksData,transfer_techs,gridSegments,pc_transfer_gridSegments));
6328   
6329  parameter transfer_dcopf_Xtech(linksModel,years,transfer_techs,vintage,gridSegments);
6330  transfer_dcopf_Xtech(linksModelToCalc,yearsToCalc,transfer_techs,vintage,gridSegments)
6331      $(transfer_gridSegments(linksModelToCalc,transfer_techs,gridSegments,"useDCopf")
6332          and transfer_linksParam(linksModelToCalc,yearsToCalc,transfer_techs,"circuits") > 0
6333          and sum(link_types, transfer_reactPerLength(transfer_techs,vintage,link_types,"reactPerLength")) > 0 )
6334      = (1 / sum(linksData
6335                  $links_aggregate(linksModelToCalc,linksData),
6336              1 / ( sum(link_types,
6337                          transfer_lengthParamIn(linksData,link_types,"length")
6338                          * transfer_reactPerLength(transfer_techs,vintage,link_types,"reactPerLength"))
6339                      / transfer_linksParam(linksModelToCalc,yearsToCalc,transfer_techs,"circuits"))));
6340   
6341  set transfer_hasflowProfile(linksModel,years,transfer_techs,pc_transfer_flowProfile);
6342  transfer_hasflowProfile(linksModelToCalc,yearsToCalc,transfer_techs,pc_transfer_flowProfile)
6343      = sum(linksData$links_aggregate(linksModelToCalc,linksData),
6344              transfer_hasflowProfileIn(linksData,yearsToCalc,transfer_techs,pc_transfer_flowProfile));
6345   
6346  * ==== parameter modifications ====
6347  transfer_linksParam(linksModelToCalc,yearsToCalc,transfer_techs,"linksLowerLimit")
6348      $sum(vintage, transfer_techParam(transfer_techs,vintage,"mipLinks"))
6349      = floor(transfer_linksParam(linksModelToCalc,yearsToCalc,transfer_techs,"linksLowerLimit"));
6350  transfer_linksParam(linksModelToCalc,yearsToCalc,transfer_techs,"linksUpperLimit")
6351      $sum(vintage, transfer_techParam(transfer_techs,vintage,"mipLinks"))
6352      = ceil(transfer_linksParam(linksModelToCalc,yearsToCalc,transfer_techs,"linksUpperLimit"));
6353   
6354   
6355  * ==== calculation of mappings ====
6356   
6357  * Technologies with a lifeTime > 0 are available
6358  set transfer_availTech(linksModel,years,transfer_techs,vintage);
6359  transfer_availTech(linksModel,years,transfer_techs,vintage)
6360      $(vintage.val = smax(vintage_a$(vintage_a.val <= years.val
6361          and transfer_techParam(transfer_techs,vintage_a,"lifeTime") > 0), vintage_a.val)) = yes;
6362   
6363  * Technologies to optimize become unavailable if they have an linksUpperLimit of 0
6364  transfer_availTech(linksModelToCalc,years,transfer_techs,vintage)
6365      $(yearsToCalc(years) and transfer_linksParam(linksModelToCalc,years,transfer_techs,"linksUpperLimit") = 0 ) = no;
6366   
6367  * Technologies already built become unavailable if they have an linksBuild of 0
6368  transfer_availTech(linksModelToCalc,years,transfer_techs,vintage)
6369      $( ( not yearsToCalc(years)) and transfer_linksParam(linksModelToCalc,years,transfer_techs,"linksBuild") = 0 ) = no;
6370   
6371  * Used technologies are available technologies over their technical lifeTime
6372  set transfer_usedTech(linksModel,years,transfer_techs,vintage);
6373  transfer_usedTech(linksModelToCalc,years,transfer_techs,vintage)
6374      $(vintage.val <= years.val
6375          and years.val < smax(years_a$transfer_availTech(linksModelToCalc,years_a,transfer_techs,vintage),
6376                                  years_a.val + transfer_techParam(transfer_techs,vintage,"lifeTime"))
6377          ) = yes;
6378   
6379  * Technologies have to be decomissioned in the interval of first avail + lifetime to last avail + lifetime
6380  set transfer_decomTech(linksModel,years,transfer_techs,vintage);
6381  transfer_decomTech(linksModel,years,transfer_techs,vintage)
6382    $(sum(years_a$transfer_usedTech(linksModel,years_a,transfer_techs,vintage), 1)
6383      and sum(yearsToCalc
6384        $(sameas(years, yearsToCalc)
6385          and yearsToCalc.val >= smin(years_a$transfer_availTech(linksModel,years_a,transfer_techs,vintage), years_a.val) + transfer_techParam(transfer_techs,vintage,"lifeTime")
6386          and yearsToCalc.val <= smax(years_a$transfer_availTech(linksModel,years_a,transfer_techs,vintage), years_a.val) + transfer_techParam(transfer_techs,vintage,"lifeTime")), 1))
6387    = yes;
6388   
6389  * Extend the decom frame to the year after the last year of usedTech
6390  transfer_decomTech(linksModel,yearsToCalc,transfer_techs,vintage)
6391    $(transfer_usedTech(linksModel,yearsToCalc-1,transfer_techs,vintage)
6392      and transfer_decomTech(linksModel,yearsToCalc-1,transfer_techs,vintage))
6393    = yes;
6394   
6395  parameter transfer_flowProfile(timeModel,linksModel,years,transfer_techs,vintage,pc_transfer_flowProfile);
6396   
6397  transfer_flowProfile(timeModelToCalc,linksModelToCalc,yearsToCalc,transfer_techs,vintage,"along")
6398      $transfer_finiteLinkLimit(linksModelToCalc,yearsToCalc,transfer_techs)
6399      = (sum(linksData$(links_aggregate(linksModelToCalc,linksData)
6400                       and transfer_incidenceData_flip(linksData) = 1),
6401              transfer_flowProfileIn_aggTime(timeModelToCalc,linksData,yearsToCalc,transfer_techs,"along")
6402              * transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"linksUpperLimit"))
6403          + sum(linksData$(links_aggregate(linksModelToCalc,linksData)
6404                          and transfer_incidenceData_flip(linksData) = -1),
6405              transfer_flowProfileIn_aggTime(timeModelToCalc,linksData,yearsToCalc,transfer_techs,"against")
6406              * transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"linksUpperLimit")))
6407      / sum(linksData$links_aggregate(linksModelToCalc,linksData),
6408              transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"linksUpperLimit"));
6409   
6410  transfer_flowProfile(timeModelToCalc,linksModelToCalc,yearsToCalc,transfer_techs,vintage,"against")
6411      $transfer_finiteLinkLimit(linksModelToCalc,yearsToCalc,transfer_techs)
6412      = (sum(linksData$(links_aggregate(linksModelToCalc,linksData)
6413                       and transfer_incidenceData_flip(linksData) = 1),
6414              transfer_flowProfileIn_aggTime(timeModelToCalc,linksData,yearsToCalc,transfer_techs,"against")
6415              * transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"linksUpperLimit"))
6416          + sum(linksData$(links_aggregate(linksModelToCalc,linksData)
6417                          and transfer_incidenceData_flip(linksData) = -1),
6418              transfer_flowProfileIn_aggTime(timeModelToCalc,linksData,yearsToCalc,transfer_techs,"along")
6419              * transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"linksUpperLimit")))
6420      / sum(linksData$links_aggregate(linksModelToCalc,linksData),
6421              transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"linksUpperLimit"));
6422   
6423  transfer_flowProfile(timeModelToCalc,linksModelToCalc,yearsToCalc,transfer_techs,vintage,"along")
6424      $transfer_infiniteLinkLimit(linksModelToCalc,yearsToCalc,transfer_techs)
6425      = (sum(linksData$(links_aggregate(linksModelToCalc,linksData)
6426                       and transfer_incidenceData_flip(linksData) = 1
6427                       and transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"linksUpperLimit") = inf ),
6428              transfer_flowProfileIn_aggTime(timeModelToCalc,linksData,yearsToCalc,transfer_techs,"along"))
6429          + sum(linksData$(links_aggregate(linksModelToCalc,linksData)
6430                          and transfer_incidenceData_flip(linksData) = -1
6431                          and transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"linksUpperLimit") = inf ),
6432              transfer_flowProfileIn_aggTime(timeModelToCalc,linksData,yearsToCalc,transfer_techs,"against")))
6433      / sum(linksData$(links_aggregate(linksModelToCalc,linksData)
6434                      and transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"linksUpperLimit") = inf ),
6435              1);
6436   
6437  transfer_flowProfile(timeModelToCalc,linksModelToCalc,yearsToCalc,transfer_techs,vintage,"against")
6438      $transfer_infiniteLinkLimit(linksModelToCalc,yearsToCalc,transfer_techs)
6439      = (sum(linksData$(links_aggregate(linksModelToCalc,linksData)
6440                       and transfer_incidenceData_flip(linksData) = 1
6441                       and transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"linksUpperLimit") = inf ),
6442              transfer_flowProfileIn_aggTime(timeModelToCalc,linksData,yearsToCalc,transfer_techs,"against"))
6443          + sum(linksData$(links_aggregate(linksModelToCalc,linksData)
6444                          and transfer_incidenceData_flip(linksData) = -1
6445                          and transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"linksUpperLimit") = inf ),
6446              transfer_flowProfileIn_aggTime(timeModelToCalc,linksData,yearsToCalc,transfer_techs,"along")))
6447      / sum(linksData$(links_aggregate(linksModelToCalc,linksData)
6448                      and transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"linksUpperLimit") = inf ),
6449              1);
6450  option clear = transfer_flowProfileIn_aggTime;
6451   
6452  * Orientation of links affects the flowAlongLimit/flowAgainstLimit
6453   
6454  transfer_linksParam(linksModelToCalc,years,transfer_techs,"flowAlongLimit")
6455      $transfer_finiteLinkLimit(linksModelToCalc,years,transfer_techs)
6456      = (sum(linksData$(links_aggregate(linksModelToCalc,linksData)
6457                       and transfer_incidenceData_flip(linksData) = 1),
6458              transfer_linksParamIn(linksData,years,transfer_techs,"flowAlongLimit")
6459              * transfer_linksParamIn(linksData,years,transfer_techs,"linksUpperLimit"))
6460          + sum(linksData$(links_aggregate(linksModelToCalc,linksData)
6461                          and transfer_incidenceData_flip(linksData) = -1),
6462              transfer_linksParamIn(linksData,years,transfer_techs,"flowAgainstLimit")
6463              * transfer_linksParamIn(linksData,years,transfer_techs,"linksUpperLimit")))
6464      / sum(linksData$links_aggregate(linksModelToCalc,linksData),
6465              transfer_linksParamIn(linksData,years,transfer_techs,"linksUpperLimit"));
6466   
6467  transfer_linksParam(linksModelToCalc,years,transfer_techs,"flowAgainstLimit")
6468      $transfer_finiteLinkLimit(linksModelToCalc,years,transfer_techs)
6469      = (sum(linksData$(links_aggregate(linksModelToCalc,linksData)
6470                       and transfer_incidenceData_flip(linksData) = -1),
6471              transfer_linksParamIn(linksData,years,transfer_techs,"flowAlongLimit")
6472              * transfer_linksParamIn(linksData,years,transfer_techs,"linksUpperLimit"))
6473          + sum(linksData$(links_aggregate(linksModelToCalc,linksData)
6474                          and transfer_incidenceData_flip(linksData) = 1),
6475              transfer_linksParamIn(linksData,years,transfer_techs,"flowAgainstLimit")
6476              * transfer_linksParamIn(linksData,years,transfer_techs,"linksUpperLimit")))
6477      / sum(linksData$links_aggregate(linksModelToCalc,linksData),
6478              transfer_linksParamIn(linksData,years,transfer_techs,"linksUpperLimit"));
6479   
6480  transfer_linksParam(linksModelToCalc,years,transfer_techs,"flowAlongLimit")
6481      $transfer_infiniteLinkLimit(linksModelToCalc,years,transfer_techs)
6482      = (sum(linksData$(links_aggregate(linksModelToCalc,linksData)
6483                       and transfer_incidenceData_flip(linksData) = 1
6484                       and transfer_linksParamIn(linksData,years,transfer_techs,"linksUpperLimit") = inf),
6485              transfer_linksParamIn(linksData,years,transfer_techs,"flowAlongLimit"))
6486          + sum(linksData$(links_aggregate(linksModelToCalc,linksData)
6487                          and transfer_incidenceData_flip(linksData) = -1
6488                          and transfer_linksParamIn(linksData,years,transfer_techs,"linksUpperLimit") = inf),
6489              transfer_linksParamIn(linksData,years,transfer_techs,"flowAgainstLimit")))
6490      / sum(linksData$(links_aggregate(linksModelToCalc,linksData)
6491                      and transfer_linksParamIn(linksData,years,transfer_techs,"linksUpperLimit") = inf ),
6492              1);
6493   
6494  transfer_linksParam(linksModelToCalc,years,transfer_techs,"flowAgainstLimit")
6495      $transfer_infiniteLinkLimit(linksModelToCalc,years,transfer_techs)
6496      = (sum(linksData$(links_aggregate(linksModelToCalc,linksData)
6497                       and transfer_incidenceData_flip(linksData) = -1
6498                       and transfer_linksParamIn(linksData,years,transfer_techs,"linksUpperLimit") = inf),
6499              transfer_linksParamIn(linksData,years,transfer_techs,"flowAlongLimit"))
6500          + sum(linksData$(links_aggregate(linksModelToCalc,linksData)
6501                          and transfer_incidenceData_flip(linksData) = 1
6502                          and transfer_linksParamIn(linksData,years,transfer_techs,"linksUpperLimit") = inf),
6503              transfer_linksParamIn(linksData,years,transfer_techs,"flowAgainstLimit")))
6504      / sum(linksData$(links_aggregate(linksModelToCalc,linksData)
6505                      and transfer_linksParamIn(linksData,years,transfer_techs,"linksUpperLimit") = inf ),
6506              1);
6507   
6508  * Mapping for grid segments using DC optimal power flow
6509  set gridSegments_dcopf(linksModel,transfer_techs,gridSegments);
6510  gridSegments_dcopf(linksModelToCalc,transfer_techs,gridSegments)
6511      $transfer_gridSegments(linksModelToCalc,transfer_techs,gridSegments,"useDCopf")
6513      = yes;
6515   
6516  * Ensure each grid segment uses exactly one commodity
6517  parameter checkGridSegmentCommodities(gridSegments);
6518  checkGridSegmentCommodities(gridSegments)
6519      = sum (commodity$(sum((linksModelToCalc,transfer_techs,vintage)
6520                              $( transfer_coefficient(transfer_techs,vintage,commodity,"coefficient") > 0
6521                                  and gridSegments_dcopf(linksModelToCalc,transfer_techs,gridSegments)) , 1) > 0), 1);
6522   
6523  parameter transfer_incidenceSegments(nodesModel,linksModel,years,gridSegments);
6524  transfer_incidenceSegments(nodesModelToCalc,linksModelToCalc,yearsToCalc,gridSegments)
6525      $(sum((transfer_techs,vintage)$(transfer_usedTech(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
6526                                          and gridSegments_dcopf(linksModelToCalc,transfer_techs,gridSegments)
6527                                          and transfer_incidenceModel(nodesModelToCalc,linksModelToCalc) <> 0), 1) > 0)
6528      = transfer_incidenceModel(nodesModelToCalc,linksModelToCalc);
6529   
6530   
6534   
6535  scalar transfer_enableMIP;
6536  transfer_enableMIP = sum(transfer_usedTech(linksModelToCalc,yearsToCalc,transfer_techs,vintage)$transfer_techParam(transfer_techs,vintage,"mipLinks"), 1 );
6537   
6538   
6539  * ==== definition of variables ====
6540   
6541  * Initialise variables for linksBuild
6542  transfer_linksBuild.l(linksModel,years,transfer_techs,vintage)
6543      $transfer_availTech(linksModel,years,transfer_techs,vintage)
6544      = transfer_linksParam(linksModel,years,transfer_techs,"linksBuild");
6545  transfer_linksBuild.lo(linksModel,yearsToCalc,transfer_techs,vintage)
6546      $transfer_availTech(linksModel,yearsToCalc,transfer_techs,vintage)
6547      = transfer_linksBuild.l(linksModel,yearsToCalc,transfer_techs,vintage);
6548  transfer_linksBuild.fx(linksModel,years,transfer_techs,vintage)
6549      $transfer_linksParam(linksModel,years,transfer_techs,"noExpansion")
6550      = transfer_linksBuild.l(linksModel,years,transfer_techs,vintage);
6551   
6552  * Initialise variables for linksDecom
6553  transfer_linksDecom.l(linksModel,years,transfer_techs,vintage)
6554      $(transfer_decomTech(linksModel,years,transfer_techs,vintage)
6555        and years.val < sum(yearsToCalc$(ord(yearsToCalc) = 1), yearsToCalc.val))
6556      = sum((years_a,years_aa)$(sameas(years-1, years_aa)
6557                        and years_a.val > years_aa.val - transfer_techParam(transfer_techs,vintage,'lifeTime')
6558                        and years_a.val <= years.val - transfer_techParam(transfer_techs,vintage,'lifeTime')
6559                        and transfer_availTech(linksModel,years_a,transfer_techs,vintage)),
6560          transfer_linksBuild.l(linksModel,years_a,transfer_techs,vintage));
6561   
6562  transfer_linksDecom.l(linksModel,yearsToCalc,transfer_techs,vintage)
6563    $transfer_decomTech(linksModel,yearsToCalc,transfer_techs,vintage)
6564    = sum(years$
6565          (years.val < sum(yearsToCalc_a$(ord(yearsToCalc_a) = 1), yearsToCalc_a.val)
6566            and transfer_availTech(linksModel,years,transfer_techs,vintage)
6567            and years.val > sum(years_a$sameas(years_a, yearsToCalc-1), years_a.val) - transfer_techParam(transfer_techs,vintage,'lifeTime')
6568            and years.val <= yearsToCalc.val - transfer_techParam(transfer_techs,vintage,'lifeTime')),
6569        transfer_linksBuild.l(linksModel,years,transfer_techs,vintage))
6570      + sum(yearsToCalc_a$
6571          (yearsToCalc_a.val < sum(yearsToCalc_aa$(ord(yearsToCalc_aa) > 1), yearsToCalc_a.val)
6572            and transfer_availTech(linksModel,yearsToCalc_a,transfer_techs,vintage)
6573            and yearsToCalc_a.val > sum(years_a$sameas(years_a, yearsToCalc-1), years_a.val) - transfer_techParam(transfer_techs,vintage,'lifeTime')
6574            and yearsToCalc_a.val <= yearsToCalc.val - transfer_techParam(transfer_techs,vintage,'lifeTime')),
6575        transfer_linksBuild.l(linksModel,yearsToCalc_a,transfer_techs,vintage));
6576        ;
6577   
6578  transfer_linksDecom.lo(linksModel,yearsToCalc,transfer_techs,vintage)
6579      $(transfer_usedTech(linksModel,yearsToCalc,transfer_techs,vintage)
6580          and not transfer_techParam(transfer_techs,vintage,"freeDecom"))
6581      = transfer_linksDecom.l(linksModel,yearsToCalc,transfer_techs,vintage)
6582   
6583  * Calculate planned transfer links expansion
6584  parameter transfer_linksPlanned(linksModel,years,transfer_techs,vintage);
6585  transfer_linksPlanned(linksModel,years,transfer_techs,vintage) = 0;
6586  loop(years,
6587    transfer_linksPlanned(linksModel,years,transfer_techs,vintage)
6588      =
6589      transfer_linksPlanned(linksModel,years-1,transfer_techs,vintage)
6590          $transfer_usedTech(linksModel,years-1,transfer_techs,vintage)
6591      + transfer_linksBuild.l(linksModel,years,transfer_techs,vintage)
6592          $transfer_availTech(linksModel,years,transfer_techs,vintage)
6593      - transfer_linksDecom.l(linksModel,years,transfer_techs,vintage)
6594          $transfer_usedTech(linksModel,years,transfer_techs,vintage);
6595  );
6596   
6597  * Set initial state for planned units
6598  transfer_linksTotal.l(linksModel,years,transfer_techs,vintage)
6599    = transfer_linksPlanned(linksModel,years,transfer_techs,vintage)
6600   
6601  * Calculate if planned links expansion is bound by upper and lower limits
6602  set transfer_linkBoundsFixed(linksModel,years,transfer_techs);
6603  transfer_linkBoundsFixed(linksModel,years,transfer_techs)
6604    $(sum(vintage$transfer_usedTech(linksModel,years,transfer_techs,vintage),
6605          transfer_linksPlanned(linksModel,years,transfer_techs,vintage))
6606      = transfer_linksParam(linksModel,years,transfer_techs,"linksUpperLimit")
6607    and sum(vintage$transfer_usedTech(linksModel,years,transfer_techs,vintage),
6608          transfer_linksPlanned(linksModel,years,transfer_techs,vintage))
6609      = transfer_linksParam(linksModel,years,transfer_techs,"linksLowerLimit"))
6610    = yes;
6611   
6612  * Fix linksBuild, linksDecom, linksTotal if levels are predetermined by upper and lower limits
6613  transfer_linksBuild.fx(linksModel,years,transfer_techs,vintage)
6614    $(transfer_availTech(linksModel,years,transfer_techs,vintage)
6615      and transfer_linkBoundsFixed(linksModel,years,transfer_techs))
6616    = transfer_linksBuild.l(linksModel,years,transfer_techs,vintage);
6617  transfer_linksDecom.fx(linksModel,years,transfer_techs,vintage)
6618    $(transfer_usedTech(linksModel,years,transfer_techs,vintage)
6619      and transfer_linkBoundsFixed(linksModel,years,transfer_techs))
6620    = transfer_linksDecom.l(linksModel,years,transfer_techs,vintage);
6621  transfer_linksTotal.fx(linksModel,years,transfer_techs,vintage)
6622    $(transfer_usedTech(linksModel,years,transfer_techs,vintage)
6623      and transfer_linkBoundsFixed(linksModel,years,transfer_techs))
6624    = transfer_linksTotal.l(linksModel,years,transfer_techs,vintage);
6625   
6626  transfer_linksTotal_MIP.up(linksModel,years,transfer_techs,vintage)
6627      $(transfer_usedTech(linksModel,years,transfer_techs,vintage)
6628        and transfer_techParam(transfer_techs,vintage,"miplinks") = 1)
6629      = transfer_linksParam(linksModel,years,transfer_techs,"linksUpperLimit");
6630   
6631  * Add parameter for fixing capacities during myopic runs
6632  parameter transfer_linksDelta(linksModel,years,transfer_techs);
6633   
6634   
6635  * ==== declaration of equations ====
6636   
6637  equations
6638    Eq_transfer_linksBalance(linksModel,years,transfer_techs,vintage
6639      ) "Ensures the links balance over the planning period."
6640    Eq_transfer_linksFixedDecom(linksModel,years,transfer_techs,vintage
6641      ) "Restricts the fixed decommissioning of links over the planning period."
6642    Eq_transfer_linksFreeDecom(linksModel,years,transfer_techs,vintage
6643      ) "Restricts the free decommissioning of links over the planning period."
6644    Eq_transfer_linksUpperLimit(linksModel,years,transfer_techs
6645      ) "Upper bound for the total number of links."
6646    Eq_transfer_linksLowerLimit(linksModel,years,transfer_techs
6647      ) "Lower bound for the total number of links."
6648    Eq_transfer_linksTotalMIP(linksModel,years,transfer_techs,vintage
6649      ) "Fixes the total number of links to the corresponding integer variable."
6650   
6651    Eq_transfer_flowAlongUpperLimit(timeModel,linksModel,years,transfer_techs,vintage
6652      ) "Upper bound for the flow along the transfer links."
6653    Eq_transfer_flowAgainstUpperLimit(timeModel,linksModel,years,transfer_techs,vintage
6654      ) "Upper bound for the flow against the transfer links."
6655    Eq_transfer_dcopf_angleFlows(timeModel,linksModel,years,gridSegments
6656      )
6657    Eq_transfer_dcopf_cycleFlows(timeModel,years,cycles,gridSegments
6658      )
6659    ;
6660   
6661   
6662  * ==== equation definition ====
6663  * // ## Equations
6664  * // ### Transfer Links Balance
6665  * // Ensures that the transfer between nodes is balanced.
6666  * // {Eq_transfer_linksBalance}
6667  Eq_transfer_linksBalance(linksModelToCalc,yearsSel,transfer_techs,vintage)
6668      $((transfer_usedTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
6669            or sum(years$sameas(years,yearsSel), transfer_usedTech(linksModelToCalc,years-1,transfer_techs,vintage)))
6670          and not transfer_linkBoundsFixed(linksModelToCalc,yearsSel,transfer_techs))
6671      ..
6672      transfer_linksTotal(linksModelToCalc,yearsSel,transfer_techs,vintage)
6673      =e=
6674      sum(yearsToCalc$(ord(yearsToCalc) = 1 and sameas(yearsToCalc, yearsSel)),
6675        sum(years$sameas(years, yearsToCalc),
6676          transfer_linksTotal(linksModelToCalc,years-1,transfer_techs,vintage)
6677            $transfer_usedTech(linksModelToCalc,years-1,transfer_techs,vintage)))
6678      + sum((yearsToCalc)$(ord(yearsToCalc) > 1 and sameas(yearsToCalc, yearsSel)),
6679        transfer_linksTotal(linksModelToCalc,yearsToCalc-1,transfer_techs,vintage)
6680          $transfer_usedTech(linksModelToCalc,yearsToCalc-1,transfer_techs,vintage))
6681      + transfer_linksBuild(linksModelToCalc,yearsSel,transfer_techs,vintage)
6682          $transfer_availTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
6683      - transfer_linksDecom(linksModelToCalc,yearsSel,transfer_techs,vintage)
6684          $transfer_usedTech(linksModelToCalc,yearsSel,transfer_techs,vintage);
6685   
6686  * // ### Transfer Links Fixed Decommissioning
6687  * // Balances fixed link decommissioning.
6688  * // {Eq_transfer_linksFixedDecom}
6689  Eq_transfer_linksFixedDecom(linksModelToCalc,yearsSel,transfer_techs,vintage)
6690      $(transfer_decomTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
6691          and not transfer_techParam(transfer_techs,vintage,"freeDecom") = 1
6692          and not transfer_linkBoundsFixed(linksModelToCalc,yearsSel,transfer_techs))
6693      ..
6694      transfer_linksDecom(linksModelToCalc,yearsSel,transfer_techs,vintage)
6695      =e=
6696      sum(years$
6697          (transfer_availTech(linksModelToCalc,years,transfer_techs,vintage)
6698              and years.val > sum(yearsToCalc$sameas(yearsToCalc+1, yearsSel), yearsToCalc.val) - transfer_techParam(transfer_techs,vintage,'lifeTime')
6699              and years.val <= yearsSel.val - transfer_techParam(transfer_techs,vintage,'lifeTime')),
6700          transfer_linksBuild(linksModelToCalc,years,transfer_techs,vintage));
6701   
6702  * // ### Transfer Links Free Decommissioning
6703  * // Balances free link decommissioning.
6704  * // {Eq_transfer_linksFreeDecom}
6705  Eq_transfer_linksFreeDecom(linksModelToCalc,yearsSel,transfer_techs,vintage)
6706      $((transfer_decomTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
6707          or transfer_usedTech(linksModelToCalc,yearsSel,transfer_techs,vintage))
6708          and transfer_techParam(transfer_techs,vintage,"freeDecom") = 1)
6709      ..
6710      sum(years$
6711            ((transfer_decomTech(linksModelToCalc,years,transfer_techs,vintage)
6712              or transfer_usedTech(linksModelToCalc,years,transfer_techs,vintage))
6713              and years.val < sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)),
6714          transfer_linksDecom(linksModelToCalc,years,transfer_techs,vintage))
6715      + sum(yearsToCalc$
6716            ((transfer_decomTech(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
6717              or transfer_usedTech(linksModelToCalc,yearsToCalc,transfer_techs,vintage))
6718              and yearsToCalc.val >= sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
6719              and yearsToCalc.val <= yearsSel.val),
6720          transfer_linksDecom(linksModelToCalc,yearsToCalc,transfer_techs,vintage))
6721      =g=
6722      sum(years$
6723            (transfer_availTech(linksModelToCalc,years,transfer_techs,vintage)
6724              and years.val < sum(yearsToCalc$(ord(yearsToCalc)=1), yearsToCalc.val) - transfer_techParam(transfer_techs,vintage,'lifeTime')),
6725          transfer_linksBuild(linksModelToCalc,years,transfer_techs,vintage))
6726      + sum(yearsToCalc$
6727            (transfer_availTech(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
6728              and yearsToCalc.val >= sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
6729              and yearsToCalc.val <= yearsSel.val - transfer_techParam(transfer_techs,vintage,'lifeTime')),
6730          transfer_linksBuild(linksModelToCalc,yearsToCalc,transfer_techs,vintage));
6731   
6732  * // ### Transfer Links Lower Limit
6733  * // Ensures link capacity lower limits.
6734  * // {Eq_transfer_linksLowerLimit}
6735  Eq_transfer_linksLowerLimit(linksModelToCalc,yearsSel,transfer_techs)
6736      $(transfer_linksParam(linksModelToCalc,yearsSel,transfer_techs,'linksLowerLimit') > 0 )
6737      ..
6738      sum(vintage$transfer_usedTech(linksModelToCalc,yearsSel,transfer_techs,vintage),
6739          transfer_linksTotal(linksModelToCalc,yearsSel,transfer_techs,vintage))
6740      =g=
6741      transfer_linksParam(linksModelToCalc,yearsSel,transfer_techs,"linksLowerLimit");
6742   
6743  * // ### Transfer Links Upper Limit
6744  * // Ensures link capacity upper limits.
6745  * // {Eq_transfer_linksUpperLimit}
6746  Eq_transfer_linksUpperLimit(linksModelToCalc,yearsSel,transfer_techs)
6747      $(transfer_linksParam(linksModelToCalc,yearsSel,transfer_techs,'linksUpperLimit') >= 0
6748          and transfer_linksParam(linksModelToCalc,yearsSel,transfer_techs,'linksUpperLimit') < +inf )
6749      ..
6750      sum(vintage$transfer_usedTech(linksModelToCalc,yearsSel,transfer_techs,vintage),
6751          transfer_linksTotal(linksModelToCalc,yearsSel,transfer_techs,vintage))
6752      =l=
6753      transfer_linksParam(linksModelToCalc,yearsSel,transfer_techs,"linksUpperLimit");
6754   
6755  * // ### Transfer Links Total MIP
6756  * // Ensures number of MIP links.
6757  * // {Eq_transfer_linksTotalMIP}
6758  Eq_transfer_linksTotalMIP(linksModelToCalc,yearsSel,transfer_techs,vintage)
6759      $(transfer_usedTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
6760          and transfer_techParam(transfer_techs,vintage,"mipLinks"))
6761      ..
6762      transfer_linksTotal(linksModelToCalc,yearsSel,transfer_techs,vintage)
6763      =e=
6764      transfer_linksTotal_MIP(linksModelToCalc,yearsSel,transfer_techs,vintage);
6765   
6766  * // ### Transfer Links Flow Along Upper Limit
6767  * // Ensures links flow along upper limit.
6768  * // {Eq_transfer_flowAlongUpperLimit}
6769  Eq_transfer_flowAlongUpperLimit(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
6770      $transfer_usedTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
6771      ..
6772      transfer_flowAlong(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
6773      =l=
6774      transfer_flowProfile(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage,"along")
6775      * transfer_linksTotal(linksModelToCalc,yearsSel,transfer_techs,vintage)
6776      * transfer_techParam(transfer_techs,vintage,"flowUpperLimit")
6777      ;
6778   
6779  * // ### Transfer Links Flow Against Upper Limit
6780  * // Ensures links flow against upper limit.
6781  * // {Eq_transfer_flowAgainstUpperLimit}
6782  Eq_transfer_flowAgainstUpperLimit(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
6783      $transfer_usedTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
6784      ..
6785      transfer_flowAgainst(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
6786      =l=
6787      transfer_flowProfile(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage,"against")
6788      * transfer_linksTotal(linksModelToCalc,yearsSel,transfer_techs,vintage)
6789      * transfer_techParam(transfer_techs,vintage,"flowUpperLimit")
6790      ;
6791   
6792  set transfer_usedOpf(linksModel,years,gridSegments,transfer_techs,vintage);
6793  transfer_usedOpf(linksModel,yearsToCalc,gridSegments,transfer_techs,vintage)
6794      $(transfer_usedTech(linksModel,yearsToCalc,transfer_techs,vintage)
6795          and gridSegments_dcopf(linksModel,transfer_techs,gridSegments))
6796      = yes;
6797   
6798  set transfer_usedOpfLinks(linksModel,years,gridSegments);
6799  option transfer_usedOpfLinks < transfer_usedOpf;
6800   
6801  set transfer_usedOpfSegments(years,gridSegments);
6802  option transfer_usedOpfSegments < transfer_usedOpf;
6803   
6807  * // ### Transfer DC optimal flow angle flows
6808  * // Angle flows.
6809  * // {Eq_transfer_dcopf_cycleFlows}
6810  Eq_transfer_dcopf_angleFlows(timeModelSel,linksModelToCalc,yearsSel,gridSegments)
6811      $transfer_usedOpfLinks(linksModelToCalc,yearsSel,gridSegments)
6812      ..
6813      sum ((transfer_techs,vintage)
6814              $transfer_usedOpf(linksModelToCalc,yearsSel,gridSegments,transfer_techs,vintage),
6815          ( transfer_flowAlong(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
6816              - transfer_flowAgainst(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage) )
6817          * transfer_dcopf_Xtech(linksModelToCalc,yearsSel,transfer_techs,vintage,gridSegments) )
6818      =e=
6819      sum ( nodesModelSel,
6820          - transfer_incidenceModel(nodesModelSel,linksModelToCalc)
6821          * transfer_dcopf_voltageAngle(timeModelSel,nodesModelSel,yearsSel,gridSegments));
6825   
6826   
6827  * ==== model definition ====
6828   
6829  Model M_transfer
6830  /
6831    Eq_transfer_linksBalance
6832    Eq_transfer_linksFixedDecom
6833    Eq_transfer_linksFreeDecom
6834    Eq_transfer_linksLowerLimit
6835    Eq_transfer_linksUpperLimit
6836    Eq_transfer_linksTotalMIP
6837    Eq_transfer_flowAlongUpperLimit
6838    Eq_transfer_flowAgainstUpperLimit
6842    Eq_transfer_dcopf_angleFlows
6846  /;
INCLUDE    C:\Local\REMix\framework\remix\framework\model\source\core\sourcesink.gms
6848  * SPDX-FileCopyrightText: Copyright (c) 2023 German Aerospace Center (DLR)
6849  * SPDX-License-Identifier: BSD-3-Clause
6850   
6851  * // # core_sourcesink
6852  * // The equations in this file describe the sources and sinks in the model.
6853   
6854  * // ## Variables
6855  * // {special_table_sourcesink_variables}
7141   
7142  * // ## Aggregation of profiles
7143  * // Profiles are rescaled based on the annual sum.
7144   
7145  set sourcesink_usesProfileScaling(nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile);
7146  sourcesink_usesProfileScaling(nodesData,years,sourcesink_techs,commodity,"fixed")
7147      $sourcesink_configIn(nodesData,years,sourcesink_techs,commodity,"scaleFixProfileWithFixSum") = yes;
7148  sourcesink_usesProfileScaling(nodesData,years,sourcesink_techs,commodity,"lower")
7149      $sourcesink_configIn(nodesData,years,sourcesink_techs,commodity,"scaleLowProfileWithLowSum") = yes;
7150  sourcesink_usesProfileScaling(nodesData,years,sourcesink_techs,commodity,"upper")
7151      $sourcesink_configIn(nodesData,years,sourcesink_techs,commodity,"scaleUpProfileWithUpSum") = yes;
7152   
7153  parameter sourcesink_ProfileSum(nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile);
7154  sourcesink_ProfileSum(nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile)
7155      $sourcesink_usesProfileScaling(nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile)
7156      = sum(timeData, sourcesink_profileIn(timeData,nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile));
7157   
7158  parameter sourcesink_ProfileAbsSum(nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile);
7159  sourcesink_ProfileAbsSum(nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile)
7160      $sourcesink_usesProfileScaling(nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile)
7161      = sum(timeData, abs(sourcesink_profileIn(timeData,nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile)));
7162   
7163  set sourcesink_ProfileScaleError(nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile);
7164  sourcesink_ProfileScaleError(nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile)
7165      $(sourcesink_usesProfileScaling(nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile)
7166          and sourcesink_ProfileSum(nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile) = 0
7167          and sourcesink_ProfileAbsSum(nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile) > 0)
7168      = yes;
7169   
7170  abort$sum((nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile),
7171              sourcesink_ProfileScaleError(nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile)) "One or more profiles cannot be rescaled as their annual sum equals zero!"
7172   
7173  * calculate scaling factor for each type
7174  parameter sourcesink_scalingFactor(nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile);
7175  sourcesink_scalingFactor(nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile)
7176      $(sourcesink_ProfileSum(nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile)
7177          and sourcesink_usesProfileScaling(nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile))
7178      = sum(pc_sourcesink_annualSum$sameas(pc_sourcesink_profile,pc_sourcesink_annualSum),
7179          sourcesink_annualSumIn(nodesData,years,sourcesink_techs,commodity,pc_sourcesink_annualSum)
7180              / sourcesink_ProfileSum(nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile));
7181   
7182  * rescale profiles
7183  sourcesink_profileIn(timeData,nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile)
7184      $sourcesink_usesProfileScaling(nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile)
7185      = sourcesink_profileIn(timeData,nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile)
7186          * sourcesink_scalingFactor(nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile)
7187   
7188  * // ## Aggregation of profiles
7189  * // Profiles are aggregated based on the mapping from data nodes to model nodes.
7190   
7191  * ==== aggregation of profiles ====
7192  set sourcesink_usesProfileIn(nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile);
7193  option sourcesink_usesProfileIn < sourcesink_profileIn
7194   
7195  set sourcesink_usesProfile(nodesModel,years,sourcesink_techs,commodity,pc_sourcesink_profile);
7196  sourcesink_usesProfile(nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity,pc_sourcesink_profile)
7197      $sum(nodesData$(aggregateNodesModel(nodesData,nodesModelToCalc)
7198          and sourcesink_usesProfileIn(nodesData,yearsToCalc,sourcesink_techs,commodity,pc_sourcesink_profile)), 1)
7199      = yes;
7200   
7201  * aagregate time dimension
7202  parameter sourcesink_profileIn_aggTime(timeModel,nodesData,yearsToCalc,sourcesink_techs,commodity,pc_sourcesink_profile);
7203  sourcesink_profileIn_aggTime(timeModelToCalc,nodesData,yearsToCalc,sourcesink_techs,commodity,pc_sourcesink_profile)
7204    $sourcesink_usesProfileIn(nodesData,yearsToCalc,sourcesink_techs,commodity,pc_sourcesink_profile)
7205    = sum(timeData$timeMapping(timeData,timeModelToCalc),
7206            sourcesink_profileIn(timeData,nodesData,yearsToCalc,sourcesink_techs,commodity,pc_sourcesink_profile)
7207            / timeLength(timeModelToCalc));
7208  option clear = sourcesink_profileIn;
7209   
7210  * sum up absolute profiles
7211  parameter sourcesink_profile(timeModel,nodesModel,years,sourcesink_techs,commodity,pc_sourcesink_profile);
7212  sourcesink_profile(timeModelToCalc,nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity,pc_sourcesink_profile)
7213      $sourcesink_usesProfile(nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity,pc_sourcesink_profile)
7214      = sum(nodesData$aggregateNodesModel(nodesData,nodesModelToCalc),
7215              sourcesink_profileIn_aggTime(timeModelToCalc,nodesData,yearsToCalc,sourcesink_techs,commodity,pc_sourcesink_profile));
7216  option clear = sourcesink_profileIn_aggTime;
7217   
7218  set sourcesink_enabled(nodesModel,years,sourcesink_techs,commodity);
7219  option sourcesink_enabled < sourcesink_config;
7220   
7221   
7222  * ==== declaration of variables ====
7223  * // ## Bounding of variables
7224  * // Source-sink variables with either a lower, fixed, or upper profile are bounded to their respective profiles given by the input parameters.
7225   
7226  sourcesink_flow.lo(timeModelToCalc,nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity)
7227      $( sourcesink_enabled(nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity)
7228          and sourcesink_config(nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity,"usesLowerProfile") = 1
7229          and sourcesink_profile(timeModelToCalc,nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity,"lower") > -inf )
7230      = sourcesink_profile(timeModelToCalc,nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity,"lower");
7231   
7232  sourcesink_flow.up(timeModelToCalc,nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity)
7233      $( sourcesink_enabled(nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity)
7234          and sourcesink_config(nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity,"usesUpperProfile") = 1
7235          and sourcesink_profile(timeModelToCalc,nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity,"upper") < inf )
7236      = sourcesink_profile(timeModelToCalc,nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity,"upper");
7237   
7238  sourcesink_flow.fx(timeModelToCalc,nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity)
7239      $( sourcesink_enabled(nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity)
7240          and sourcesink_config(nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity,"usesFixedProfile") = 1 )
7241      = sourcesink_profile(timeModelToCalc,nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity,"fixed");
7242   
7243  option clear = sourcesink_profile;
7244   
7245   
7246  * ==== equation definition ====
7247  * // ## Equations
7248  equations
7249  Eq_sourcesink_useFixedSum(nodesModel,years,sourcesink_techs,commodity
7250      ) "Fixes the annual sum from sources / to sinks"
7251  Eq_sourcesink_useLowerSum(nodesModel,years,sourcesink_techs,commodity
7252      ) "Limits the lower sum from sources / to sinks"
7253  Eq_sourcesink_useUpperSum(nodesModel,years,sourcesink_techs,commodity
7254      ) "Limits the upper sum from sources / to sinks"
7255    ;
7256   
7257  * // ### Fixed annual sums for sources and sinks
7258  * // Ensures that the sources and sinks with annual sums given as fixed limits are balanced.
7259  * // {Eq_sourcesink_useFixedSum}
7260  Eq_sourcesink_useFixedSum(nodesModelSel,yearsSel,sourcesink_techs,commodity)
7261      $( sourcesink_enabled(nodesModelSel,yearsSel,sourcesink_techs,commodity)
7262          and sourcesink_config(nodesModelSel,yearsSel,sourcesink_techs,commodity,"usesFixedSum") = 1 )
7263      ..
7264      sum(timeModelSel,
7265          sourcesink_flow(timeModelSel,nodesModelSel,yearsSel,sourcesink_techs,commodity))
7266      =e=
7267      sourcesink_annualSum(nodesModelSel,yearsSel,sourcesink_techs,commodity,"fixed")
7268      ;
7269   
7270  * // ### Lower annual sums for sources and sinks
7271  * // Ensures that the sources and sinks with annual sums given as lower limits are balanced.
7272  * // {Eq_sourcesink_useLowerSum}
7273  Eq_sourcesink_useLowerSum(nodesModelSel,yearsSel,sourcesink_techs,commodity)
7274      $( sourcesink_enabled(nodesModelSel,yearsSel,sourcesink_techs,commodity)
7275          and sourcesink_config(nodesModelSel,yearsSel,sourcesink_techs,commodity,"usesLowerSum") = 1
7276          and sourcesink_annualSum(nodesModelSel,yearsSel,sourcesink_techs,commodity,"lower") > -inf )
7277      ..
7278      sum(timeModelSel,
7279          sourcesink_flow(timeModelSel,nodesModelSel,yearsSel,sourcesink_techs,commodity))
7280      =g=
7281      sourcesink_annualSum(nodesModelSel,yearsSel,sourcesink_techs,commodity,"lower")
7282      ;
7283   
7284  * // ### Upper annual sums for sources and sinks
7285  * // Ensures that the sources and sinks with annual sums given as upper limits are balanced.
7286  * // {Eq_sourcesink_useUpperSum}
7287  Eq_sourcesink_useUpperSum(nodesModelSel,yearsSel,sourcesink_techs,commodity)
7288      $( sourcesink_enabled(nodesModelSel,yearsSel,sourcesink_techs,commodity)
7289          and sourcesink_config(nodesModelSel,yearsSel,sourcesink_techs,commodity,"usesUpperSum") = 1
7290          and sourcesink_annualSum(nodesModelSel,yearsSel,sourcesink_techs,commodity,"upper") < inf )
7291      ..
7292      sum(timeModelSel,
7293          sourcesink_flow(timeModelSel,nodesModelSel,yearsSel,sourcesink_techs,commodity))
7294      =l=
7295      sourcesink_annualSum(nodesModelSel,yearsSel,sourcesink_techs,commodity,"upper")
7296      ;
7297   
7298   
7299  * ==== model definition ====
7300   
7301  Model M_sourcesink
7302  /
7303    Eq_sourcesink_useFixedSum
7304    Eq_sourcesink_useLowerSum
7305    Eq_sourcesink_useUpperSum
7306  /;
INCLUDE    C:\Local\REMix\framework\remix\framework\model\source\core\balance.gms
7308  * SPDX-FileCopyrightText: Copyright (c) 2023 German Aerospace Center (DLR)
7309  * SPDX-License-Identifier: BSD-3-Clause
7310   
7311  * // # balance
7312  * // The equations in this file describe the commodity balancing in the model.
7313   
7314  Equations
7315    Eq_balance_commodities(timeModel,nodesModel,years,commodity
7316      ) "Balance for each commodity used in each time step, region, and year";
7317   
7318   
7319  * ==== calculation of mappings ====
7320   
7321  set balance_techComm(techs,commodity);
7322  balance_techComm(converter_techs(techs),commodity)
7323      $sum((vintage,activity)$converter_coefficient(converter_techs,vintage,activity,commodity,"coefficient"), 1) = yes;
7324  balance_techComm(storage_techs(techs),commodity)
7325      $sum((vintage)$storage_sizeParam(storage_techs,vintage,commodity,"size"), 1) = yes;
7326  balance_techComm(transfer_techs(techs),commodity)
7327      $sum((vintage)$transfer_coefficient(transfer_techs,vintage,commodity,"coefficient"), 1) = yes;
7328  balance_techComm(sourcesink_techs(techs),commodity)
7329      $sum((nodesModelToCalc,yearsToCalc)$sourcesink_enabled(nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity), 1) = yes;
7330   
7331  set balance_usedConverter(nodesModel,years,commodity);
7332  set balance_usedStorage(nodesModel,years,commodity);
7333  set balance_usedTransfer(nodesModel,years,commodity);
7334  set balance_usedSourceSink(nodesModel,years,commodity);
7335  set balance_usedBalance(nodesModel,years,commodity);
7336   
7337  balance_usedConverter(nodesModel,years,commodity)
7338      = sum ((converter_techs,vintage,activity)
7339              $( converter_coefficient(converter_techs,vintage,activity,commodity,"coefficient") <> 0
7340                  and converter_usedTech(nodesModel,years,converter_techs,vintage) ), 1);
7341   
7342  balance_usedStorage(nodesModel,years,commodity)
7343      = sum ((storage_techs,vintage,activity)
7344              $(storage_sizeParam(storage_techs,vintage,commodity,"size") <> 0
7345                  and storage_usedTech(nodesModel,years,storage_techs,vintage) ), 1);
7346   
7347  balance_usedTransfer(nodesModel,years,commodity)
7348      = sum ((linksModel,transfer_techs,vintage)
7349              $(transfer_coefficient(transfer_techs,vintage,commodity,"coefficient") <> 0
7350                  and transfer_incidenceModel(nodesModel,linksModel) <> 0), 1);
7351   
7352  option balance_usedSourceSink < sourcesink_enabled;
7353   
7354  balance_usedBalance(nodesModel,years,commodity)
7355      $(balance_usedConverter(nodesModel,years,commodity)
7356          or balance_usedStorage(nodesModel,years,commodity)
7357          or balance_usedTransfer(nodesModel,years,commodity)
7358          or balance_usedSourceSink(nodesModel,years,commodity) )
7359      = yes;
7360   
7361   
7362  * ==== equation definition ====
7363   
7364  * // ### Balance commodities
7365  * // Balancing of commodities for all model regions, time steps, and years
7366  * // {Eq_balance_commodities}
7367  Eq_balance_commodities(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,commodity)
7368      $balance_usedBalance(nodesModelSel,yearsSel,commodity)
7369      ..
7370  * converter
7371      sum((converter_techs,vintage,activity)
7372              $( converter_coefficientProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity,commodity) <> 0
7373                  AND converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage) ),
7374          converter_activity(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity)
7375              * converter_coefficientProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity,commodity)
7376              * timeLength(timeModelSel)
7377          + converter_unitsUsingActivity_MIP(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity)
7378              * converter_coefficient(converter_techs,vintage,activity,commodity,"constant")
7379              * timeLength(timeModelSel))
7380   
7381  * storages
7382      + sum((storage_techs,vintage)
7383              $( storage_sizeParam(storage_techs,vintage,commodity,"size") <> 0
7384                  and storage_usedTech(nodesModelSel,yearsSel,storage_techs,vintage) ),
7385          storage_level(timeModelToCalc--1,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
7386          - storage_level(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
7388          - storage_losses(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
7389          * timeLength(timeModelSel)
7391          )
7392   
7393  * transfer
7394      + sum((linksModel,transfer_techs,vintage)
7395              $(transfer_usedTech(linksModel,yearsSel,transfer_techs,vintage)
7396                  and linksModelToCalc(linksModel)),
7397          (   transfer_flowAlong(timeModelSel,linksModel,yearsSel,transfer_techs,vintage)
7398                  $(transfer_incidenceModel(nodesModelSel,linksModel) > 0)
7399            + transfer_flowAgainst(timeModelSel,linksModel,yearsSel,transfer_techs,vintage)
7400                  $(transfer_incidenceModel(nodesModelSel,linksModel) < 0) )
7401          * transfer_coefficient(transfer_techs,vintage,commodity,"coefficient")
7402          * timeLength(timeModelSel))
7403   
7404      - sum((linksModel,transfer_techs,vintage)
7405              $(transfer_usedTech(linksModel,yearsSel,transfer_techs,vintage)
7406                  and linksModelToCalc(linksModel)),
7407          (   transfer_flowAlong(timeModelSel,linksModel,yearsSel,transfer_techs,vintage)
7408                  $(transfer_incidenceModel(nodesModelSel,linksModel) < 0)
7409            + transfer_flowAgainst(timeModelSel,linksModel,yearsSel,transfer_techs,vintage)
7410                  $(transfer_incidenceModel(nodesModelSel,linksModel) > 0) )
7411          * transfer_coefficient(transfer_techs,vintage,commodity,"coefficient")
7412          * timeLength(timeModelSel))
7413   
7414      + 0.5 * sum((linksModel,transfer_techs,vintage)
7415              $(transfer_usedTech(linksModel,yearsSel,transfer_techs,vintage)
7416                  AND linksModelToCalc(linksModel)),
7417          (   transfer_flowAlong(timeModelSel,linksModel,yearsSel,transfer_techs,vintage)
7418                  $(transfer_incidenceModel(nodesModelSel,linksModel) <> 0)
7419            + transfer_flowAgainst(timeModelSel,linksModel,yearsSel,transfer_techs,vintage)
7420                  $(transfer_incidenceModel(nodesModelSel,linksModel) <> 0) )
7421          * timeLength(timeModelSel)
7422          * ( transfer_coefPerFlow(transfer_techs,vintage,commodity,"coefPerFlow")
7423              + sum(link_types,
7424                  transfer_coefPerLength(transfer_techs,vintage,commodity,link_types,"coefPerLength")
7425                  * transfer_lengthParam(linksModel,link_types,"length"))))
7426   
7427  * sourcesink
7428      + sum((sourcesink_techs)
7429              $sourcesink_enabled(nodesModelSel,yearsSel,sourcesink_techs,commodity),
7430          sourcesink_flow(timeModelSel,nodesModelSel,yearsSel,sourcesink_techs,commodity)
7431          * timeLength(timeModelSel))
7432      =e=
7433      0;
7434   
7435   
7436  * ==== model definition ====
7437   
7438  Model M_balance
7439  /
7440    Eq_balance_commodities
7441  /;
7442   
INCLUDE    C:\Local\REMix\framework\remix\framework\model\source\accounting\equations.gms
7444  * SPDX-FileCopyrightText: Copyright (c) 2023 German Aerospace Center (DLR)
7445  * SPDX-License-Identifier: BSD-3-Clause
7446   
7447  * // # accounting_equations
7448   
7449  * ==== declaration of variables ====
7450   
7451  variables
7452  accounting_indicator(accNodesModel,accYears,indicator)
7453  accounting_indicator_links(linksModel,years,indicator)
7454  accounting_objective
7455    ;
7456   
7457   
7458  * ==== definition of variables ====
7459   
7460  * set the variable levels to be fixed for years before the optimization years
7461  accounting_indicator.l(accNodesModel,accYears,indicator)
7462      $activeIndicators(accNodesModel,accYears,indicator)
7463      = 0;
7464   
7465  accounting_indicator.lo(accNodesModel,accYears,indicator)
7466      $(accounting_indicatorBounds(accNodesModel,accYears,indicator,"useLower") <> 0 )
7467      = accounting_indicatorBounds(accNodesModel,accYears,indicator,"lowerValue");
7468   
7469  accounting_indicator.up(accNodesModel,accYears,indicator)
7470      $(accounting_indicatorBounds(accNodesModel,accYears,indicator,"useUpper") <> 0 )
7471      = accounting_indicatorBounds(accNodesModel,accYears,indicator,"upperValue");
7472   
7473  accounting_indicator.fx(accNodesModel,accYears,indicator)
7474      $(accounting_indicatorBounds(accNodesModel,accYears,indicator,"useFixed") <> 0 )
7475      = accounting_indicatorBounds(accNodesModel,accYears,indicator,"fixedValue");
7476   
7477   
7478  accounting_indicator_links.lo(linksModelToCalc,yearsToCalc,indicator)
7479      $(accounting_indicatorBounds_links(linksModelToCalc,yearsToCalc,indicator,"useLower") <> 0 )
7480      = accounting_indicatorBounds_links(linksModelToCalc,yearsToCalc,indicator,"lowerValue");
7481   
7482  accounting_indicator_links.up(linksModelToCalc,yearsToCalc,indicator)
7483      $(accounting_indicatorBounds_links(linksModelToCalc,yearsToCalc,indicator,"useUpper") <> 0 )
7484      = accounting_indicatorBounds_links(linksModelToCalc,yearsToCalc,indicator,"upperValue");
7485   
7486  accounting_indicator_links.fx(linksModelToCalc,yearsToCalc,indicator)
7487      $(accounting_indicatorBounds_links(linksModelToCalc,yearsToCalc,indicator,"useFixed") <> 0 )
7488      = accounting_indicatorBounds_links(linksModelToCalc,yearsToCalc,indicator,"fixedValue");
7489   
7490   
7491  * ==== declaration of equations ====
7492   
7493  equations
7494  Eq_accounting_indicatorCalc(accNodesModel,accYears,indicator
7495      ) "Calculates the level of an indicator per accounting region"
7496  Eq_accounting_indicatorCalc_links(linksModel,years,indicator
7497      ) "Calculates the level of an indicator per model link"
7498  Eq_accounting_objective "Calculates the objective value based on the specified indicator"
7499    ;
7500   
7501   
7502  * ==== equations definition ====
7503  * // ## Equations
7504  * // ### Accounting Indicator Calculation
7505  * // Calculates the indicators for each model node for converters, sources and sinks, transfer, storage and variable indicators.
7506  * // {Eq_accounting_indicatorCalc}
7507  Eq_accounting_indicatorCalc(accNodesModel,accYearsSel(accYears),indicator)
7508      $activeIndicators(accNodesModel,accYears,indicator)
7509      ..
7510      accounting_indicator(accNodesModel,accYears,indicator)
7511      =e=
7512   
7513  * == variable indicators ==
7514      sum((accNodesModel_a,accYears_a,indicator_a)
7515          $(compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
7516              and variableIndicators(accNodesModel_a,accYears_a,indicator_a)),
7517          compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
7518          * accounting_indicator(accNodesModel_a,accYears_a,indicator_a))
7519   
7520  * == converters ==
7521      + sum ((accNodesModel_a,nodesModelSel,accYears_a,yearsSel,indicator_a)
7522              $( compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
7523                  and sameas(nodesModelSel,accNodesModel_a) and sameas(yearsSel,accYears_a)),
7524          compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
7525          *
7526          ( sum ((converter_techs,vintage)
7527                      $(converter_availTech(nodesModelSel,yearsSel,converter_techs,vintage)
7528                          and accounting_converterUnits(indicator_a,nodesModelSel,converter_techs,vintage,"useAnnuity") = 0),
7529              converter_unitsBuild(nodesModelSel,yearsSel,converter_techs,vintage)
7530              * accounting_converterUnits(indicator_a,nodesModelSel,converter_techs,vintage,"perUnitBuild"))
7531   
7532          + sum ((years_a,converter_techs,vintage)
7533                      $(converter_availTech(nodesModelSel,years_a,converter_techs,vintage)
7534                          and years_a.val < sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
7535                          and accounting_converterUnits(indicator_a,nodesModelSel,converter_techs,vintage,"useAnnuity") = 1
7536                          and years_a.val + accounting_converterUnits(indicator_a,nodesModelSel,converter_techs,vintage,"amorTime") > yearsSel.val
7537                          and years_a.val <= yearsSel.val ),
7538              converter_unitsBuild(nodesModelSel,years_a,converter_techs,vintage)
7539              * accounting_converterUnits(indicator_a,nodesModelSel,converter_techs,vintage,"perUnitBuild")
7540              * accounting_annuityFactor_converter(indicator_a,nodesModelSel,converter_techs,vintage) )
7541   
7542          + sum ((yearsToCalc,converter_techs,vintage)
7543                      $(converter_availTech(nodesModelSel,yearsToCalc,converter_techs,vintage)
7544                          and yearsToCalc.val >= sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
7545                          and accounting_converterUnits(indicator_a,nodesModelSel,converter_techs,vintage,"useAnnuity") = 1
7546                          and yearsToCalc.val + accounting_converterUnits(indicator_a,nodesModelSel,converter_techs,vintage,"amorTime") > yearsSel.val
7547                          and yearsToCalc.val <= yearsSel.val ),
7548              converter_unitsBuild(nodesModelSel,yearsToCalc,converter_techs,vintage)
7549              * accounting_converterUnits(indicator_a,nodesModelSel,converter_techs,vintage,"perUnitBuild")
7550              * accounting_annuityFactor_converter(indicator_a,nodesModelSel,converter_techs,vintage) )
7551   
7552          + sum ((converter_techs,vintage)
7553                      $converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage),
7554              converter_unitsDecom(nodesModelSel,yearsSel,converter_techs,vintage)
7555              * accounting_converterUnits(indicator_a,nodesModelSel,converter_techs,vintage,"perUnitDecom")
7556   
7557              + converter_unitsTotal(nodesModelSel,yearsSel,converter_techs,vintage)
7558              * accounting_converterUnits(indicator_a,nodesModelSel,converter_techs,vintage,"perUnitTotal") )
7559   
7560          + sum ((timeModelSel,converter_techs,vintage,activity)
7561                      $converter_usedTechAct(nodesModelSel,yearsSel,converter_techs,vintage,activity),
7562              converter_activity(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity)
7563              * timeLength(timeModelSel)
7564              * accounting_converterActivity(indicator_a,nodesModelSel,converter_techs,vintage,activity,"perActivity") )
7565   
7566          + sum ((timeModelSel,converter_techs,vintage)
7567                      $converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage),
7568              converter_unitStartups(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
7569              * accounting_converterStartup(indicator_a,nodesModelSel,converter_techs,vintage,"perStartup") )
7570   
7571          + sum ((timeModelSel,converter_techs,vintage)
7572                      $converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage),
7573              converter_rampPos(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
7574              * (accounting_converterStartup(indicator_a,nodesModelSel,converter_techs,vintage,"perRamp")
7575                 + accounting_converterStartup(indicator_a,nodesModelSel,converter_techs,vintage,"perRampPos"))
7576   
7577              + converter_rampNeg(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
7578              * (accounting_converterStartup(indicator_a,nodesModelSel,converter_techs,vintage,"perRamp")
7579                 + accounting_converterStartup(indicator_a,nodesModelSel,converter_techs,vintage,"perRampNeg")))
7580          )
7581      )
7582   
7583  * == storage ==
7584      + sum ((accNodesModel_a,nodesModelSel,accYears_a,yearsSel,indicator_a)
7585              $( compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
7586                  and sameas(nodesModelSel,accNodesModel_a) and sameas(yearsSel,accYears_a)),
7587          compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
7588          *
7589          ( sum ((storage_techs,vintage)
7590                      $(storage_availTech(nodesModelSel,yearsSel,storage_techs,vintage)
7591                          and accounting_storageUnits(indicator_a,nodesModelSel,storage_techs,vintage,"useAnnuity") = 0),
7592              storage_unitsBuild(nodesModelSel,yearsSel,storage_techs,vintage)
7593              * accounting_storageUnits(indicator_a,nodesModelSel,storage_techs,vintage,"perUnitBuild") )
7594   
7595          + sum ((years_a,storage_techs,vintage)
7596                      $(storage_availTech(nodesModelSel,years_a,storage_techs,vintage)
7597                          and years_a.val < sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
7598                          and accounting_storageUnits(indicator_a,nodesModelSel,storage_techs,vintage,"useAnnuity") = 1
7599                          and years_a.val + accounting_storageUnits(indicator_a,nodesModelSel,storage_techs,vintage,"amorTime") > yearsSel.val
7600                          and years_a.val <= yearsSel.val ),
7601              storage_unitsBuild(nodesModelSel,years_a,storage_techs,vintage)
7602              * accounting_storageUnits(indicator_a,nodesModelSel,storage_techs,vintage,"perUnitBuild")
7603              * accounting_annuityFactor_storage(indicator_a,nodesModelSel,storage_techs,vintage) )
7604   
7605          + sum ((yearsToCalc,storage_techs,vintage)
7606                      $(storage_availTech(nodesModelSel,yearsToCalc,storage_techs,vintage)
7607                          and yearsToCalc.val >= sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
7608                          and accounting_storageUnits(indicator_a,nodesModelSel,storage_techs,vintage,"useAnnuity") = 1
7609                          and yearsToCalc.val + accounting_storageUnits(indicator_a,nodesModelSel,storage_techs,vintage,"amorTime") > yearsSel.val
7610                          and yearsToCalc.val <= yearsSel.val ),
7611              storage_unitsBuild(nodesModelSel,yearsToCalc,storage_techs,vintage)
7612              * accounting_storageUnits(indicator_a,nodesModelSel,storage_techs,vintage,"perUnitBuild")
7613              * accounting_annuityFactor_storage(indicator_a,nodesModelSel,storage_techs,vintage) )
7614   
7615          + sum ((storage_techs,vintage)
7616                      $storage_usedTech(nodesModelSel,yearsSel,storage_techs,vintage),
7617              storage_unitsDecom(nodesModelSel,yearsSel,storage_techs,vintage)
7618              * accounting_storageUnits(indicator_a,nodesModelSel,storage_techs,vintage,"perUnitDecom")
7619   
7620              + storage_unitsTotal(nodesModelSel,yearsSel,storage_techs,vintage)
7621              * accounting_storageUnits(indicator_a,nodesModelSel,storage_techs,vintage,"perUnitTotal") )
7622          )
7623      )
7624   
7625   
7626  * == transfer ==
7627      + sum ((accNodesModel_a,nodesModelSel,accYears_a,yearsSel,indicator_a)
7628              $( compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
7629                  and sameas(nodesModelSel,accNodesModel_a) and sameas(yearsSel,accYears_a)),
7630          compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
7631          *
7632          ( sum ((linksModelToCalc,transfer_techs,vintage)
7633                      $(transfer_availTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
7634                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0
7635                          and accounting_transferLinks(indicator_a,linksModelToCalc,transfer_techs,vintage,"useAnnuity") = 0),
7636              0.5
7637              * transfer_linksBuild(linksModelToCalc,yearsSel,transfer_techs,vintage)
7638              * accounting_transferLinks(indicator_a,linksModelToCalc,transfer_techs,vintage,"perLinkBuild") )
7639   
7640          + sum ((linksModelToCalc,years_a,transfer_techs,vintage)
7641                      $(transfer_availTech(linksModelToCalc,years_a,transfer_techs,vintage)
7642                          and years_a.val < sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
7643                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0
7644                          and accounting_transferLinks(indicator_a,linksModelToCalc,transfer_techs,vintage,"useAnnuity") = 1
7645                          and years_a.val + accounting_transferLinks(indicator_a,linksModelToCalc,transfer_techs,vintage,"amorTime") > yearsSel.val
7646                          and years_a.val <= yearsSel.val ),
7647              0.5
7648              * transfer_linksBuild(linksModelToCalc,years_a,transfer_techs,vintage)
7649              * accounting_transferLinks(indicator_a,linksModelToCalc,transfer_techs,vintage,"perLinkBuild")
7650              * accounting_annuityFactor_transferLink(indicator_a,linksModelToCalc,transfer_techs,vintage) )
7651   
7652          + sum ((linksModelToCalc,yearsToCalc,transfer_techs,vintage)
7653                      $(transfer_availTech(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
7654                          and yearsToCalc.val >= sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
7655                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0
7656                          and accounting_transferLinks(indicator_a,linksModelToCalc,transfer_techs,vintage,"useAnnuity") = 1
7657                          and yearsToCalc.val + accounting_transferLinks(indicator_a,linksModelToCalc,transfer_techs,vintage,"amorTime") > yearsSel.val
7658                          and yearsToCalc.val <= yearsSel.val ),
7659              0.5
7660              * transfer_linksBuild(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
7661              * accounting_transferLinks(indicator_a,linksModelToCalc,transfer_techs,vintage,"perLinkBuild")
7662              * accounting_annuityFactor_transferLink(indicator_a,linksModelToCalc,transfer_techs,vintage) )
7663   
7664          + sum ((linksModelToCalc,transfer_techs,vintage,link_types)
7665                      $(transfer_availTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
7666                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0
7667                          and accounting_transferPerLength(indicator_a,linksModelToCalc,transfer_techs,vintage,link_types,"useAnnuity") = 0 ),
7668              0.5
7669              * transfer_linksBuild(linksModelToCalc,yearsSel,transfer_techs,vintage)
7670              * transfer_lengthParam(linksModelToCalc,link_types,"length")
7671              * accounting_transferPerLength(indicator_a,linksModelToCalc,transfer_techs,vintage,link_types,"perLengthBuild") )
7672   
7673          + sum ((linksModelToCalc,years_a,transfer_techs,vintage,link_types)
7674                      $(transfer_availTech(linksModelToCalc,years_a,transfer_techs,vintage)
7675                          and years_a.val < sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
7676                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0
7677                          and accounting_transferPerLength(indicator_a,linksModelToCalc,transfer_techs,vintage,link_types,"useAnnuity") = 1
7678                          and years_a.val + accounting_transferPerLength(indicator_a,linksModelToCalc,transfer_techs,vintage,link_types,"amorTime") > yearsSel.val
7679                          and years_a.val <= yearsSel.val ),
7680              0.5
7681              * transfer_linksBuild(linksModelToCalc,years_a,transfer_techs,vintage)
7682              * transfer_lengthParam(linksModelToCalc,link_types,"length")
7683              * accounting_transferPerLength(indicator_a,linksModelToCalc,transfer_techs,vintage,link_types,"perLengthBuild")
7684              * accounting_annuityFactor_transferDistance(indicator_a,linksModelToCalc,transfer_techs,vintage,link_types) )
7685   
7686          + sum ((linksModelToCalc,yearsToCalc,transfer_techs,vintage,link_types)
7687                      $(transfer_availTech(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
7688                          and yearsToCalc.val >= sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
7689                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0
7690                          and accounting_transferPerLength(indicator_a,linksModelToCalc,transfer_techs,vintage,link_types,"useAnnuity") = 1
7691                          and yearsToCalc.val + accounting_transferPerLength(indicator_a,linksModelToCalc,transfer_techs,vintage,link_types,"amorTime") > yearsSel.val
7692                          and yearsToCalc.val <= yearsSel.val ),
7693              0.5
7694              * transfer_linksBuild(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
7695              * transfer_lengthParam(linksModelToCalc,link_types,"length")
7696              * accounting_transferPerLength(indicator_a,linksModelToCalc,transfer_techs,vintage,link_types,"perLengthBuild")
7697              * accounting_annuityFactor_transferDistance(indicator_a,linksModelToCalc,transfer_techs,vintage,link_types) )
7698   
7699          + sum ((linksModelToCalc,transfer_techs,vintage)
7700                      $(transfer_usedTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
7701                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0 ),
7702              0.5
7703              * transfer_linksDecom(linksModelToCalc,yearsSel,transfer_techs,vintage)
7704              * accounting_transferLinks(indicator_a,linksModelToCalc,transfer_techs,vintage,"perLinkDecom")
7705   
7706              + 0.5
7707              * transfer_linksTotal(linksModelToCalc,yearsSel,transfer_techs,vintage)
7708              * accounting_transferLinks(indicator_a,linksModelToCalc,transfer_techs,vintage,"perLinkTotal")
7709   
7710              + 0.5
7711              * sum (link_types,
7712                  transfer_linksDecom(linksModelToCalc,yearsSel,transfer_techs,vintage)
7713                  * transfer_lengthParam(linksModelToCalc,link_types,"length")
7714                  * accounting_transferPerLength(indicator_a,linksModelToCalc,transfer_techs,vintage,link_types,"perLengthDecom")
7715   
7716                  + transfer_linksTotal(linksModelToCalc,yearsSel,transfer_techs,vintage)
7717                  * transfer_lengthParam(linksModelToCalc,link_types,"length")
7718                  * accounting_transferPerLength(indicator_a,linksModelToCalc,transfer_techs,vintage,link_types,"perLengthTotal"))
7719   
7720              + 0.5
7721              * sum (timeModelSel,
7722                  transfer_flowAlong(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
7723                  * timeLength(timeModelSel)
7724                  * ( accounting_transferLinks(indicator_a,linksModelToCalc,transfer_techs,vintage,"perFlow")
7725                      + accounting_transferLinks(indicator_a,linksModelToCalc,transfer_techs,vintage,"perFlowAlong"))
7726   
7727                  + transfer_flowAgainst(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
7728                  * timeLength(timeModelSel)
7729                  * ( accounting_transferLinks(indicator_a,linksModelToCalc,transfer_techs,vintage,"perFlow")
7730                      + accounting_transferLinks(indicator_a,linksModelToCalc,transfer_techs,vintage,"perFlowAgainst")))
7731   
7732              + 0.5
7733              * sum ((timeModelSel, link_types),
7734                  transfer_flowAlong(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
7735                  * timeLength(timeModelSel)
7736                  * transfer_lengthParam(linksModelToCalc,link_types,"length")
7737                  * (accounting_transferPerLength(indicator_a,linksModelToCalc,transfer_techs,vintage,link_types,"perFlow")
7738                      + accounting_transferPerLength(indicator_a,linksModelToCalc,transfer_techs,vintage,link_types,"perFlowAlong"))
7739   
7740                  + transfer_flowAgainst(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
7741                  * timeLength(timeModelSel)
7742                  * transfer_lengthParam(linksModelToCalc,link_types,"length")
7743                  * (accounting_transferPerLength(indicator_a,linksModelToCalc,transfer_techs,vintage,link_types,"perFlow")
7744                      + accounting_transferPerLength(indicator_a,linksModelToCalc,transfer_techs,vintage,link_types,"perFlowAgainst")))
7745              )
7746          )
7747      )
7748   
7749   
7750  * == sources / sinks ==
7751      + sum ((accNodesModel_a,nodesModelSel,accYears_a,yearsSel,indicator_a)
7752              $( compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
7753                  and sameas(nodesModelSel,accNodesModel_a) and sameas(yearsSel,accYears_a)),
7754          compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
7755          *
7756          sum ((timeModelSel,sourcesink_techs,commodity)
7757                  $sourcesink_enabled(nodesModelSel,yearsSel,sourcesink_techs,commodity),
7758              sourcesink_flow(timeModelSel,nodesModelSel,yearsSel,sourcesink_techs,commodity)
7759              * timeLength(timeModelSel)
7760              * accounting_sourcesinkFlow(indicator_a,nodesModelSel,yearsSel,sourcesink_techs,commodity,"perFlow") )
7761      );
7762   
7763  * // ### Accounting Indicator Calculation Links
7764  * // Calculates the indicators for each transfer for converters, sources and sinks, transfer, storage and variable indicators.
7765  * // {Eq_accounting_indicatorCalc_links}
7766  Eq_accounting_indicatorCalc_links(linksModelToCalc,yearsSel,indicator)
7767      $activeIndicators_links(linksModelToCalc,yearsSel,indicator)
7768      ..
7769      accounting_indicator_links(linksModelToCalc,yearsSel,indicator)
7770      =e=
7771      sum ((transfer_techs,vintage)
7772                  $(transfer_availTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
7773                      and accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"useAnnuity") = 0),
7774          transfer_linksBuild(linksModelToCalc,yearsSel,transfer_techs,vintage)
7775          * accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"perLinkBuild") )
7776   
7777      + sum ((years_a,transfer_techs,vintage)
7778                  $(transfer_availTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
7779                      and accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"useAnnuity") = 1
7780                      and years_a.val + accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"amorTime") > yearsSel.val
7781                      and years_a.val <= yearsSel.val ),
7782          transfer_linksBuild(linksModelToCalc,years_a,transfer_techs,vintage)
7783          * accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"perLinkBuild")
7784          * accounting_annuityFactor_transferLink(indicator,linksModelToCalc,transfer_techs,vintage) )
7785   
7786      + sum ((transfer_techs,vintage,link_types)
7787                  $(transfer_availTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
7788                      and accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"useAnnuity") = 0 ),
7789          transfer_linksBuild(linksModelToCalc,yearsSel,transfer_techs,vintage)
7790          * transfer_lengthParam(linksModelToCalc,link_types,"length")
7791          * accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"perLengthBuild") )
7792   
7793      + sum ((years_a,transfer_techs,vintage,link_types)
7794                  $(transfer_availTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
7795                      and accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"useAnnuity") = 1
7796                      and years_a.val + accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"amorTime") > yearsSel.val
7797                      and years_a.val <= yearsSel.val ),
7798          transfer_linksBuild(linksModelToCalc,years_a,transfer_techs,vintage)
7799          * transfer_lengthParam(linksModelToCalc,link_types,"length")
7800          * accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"perLengthBuild")
7801          * accounting_annuityFactor_transferDistance(indicator,linksModelToCalc,transfer_techs,vintage,link_types) )
7802   
7803      + sum ((transfer_techs,vintage)
7804                  $(transfer_usedTech(linksModelToCalc,yearsSel,transfer_techs,vintage)),
7805          transfer_linksDecom(linksModelToCalc,yearsSel,transfer_techs,vintage)
7806          * accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"perLinkDecom")
7807   
7808          + transfer_linksTotal(linksModelToCalc,yearsSel,transfer_techs,vintage)
7809          * accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"perLinkTotal")
7810   
7811          + sum (link_types,
7812              transfer_linksDecom(linksModelToCalc,yearsSel,transfer_techs,vintage)
7813              * transfer_lengthParam(linksModelToCalc,link_types,"length")
7814              * accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"perLengthDecom")
7815   
7816              + transfer_linksTotal(linksModelToCalc,yearsSel,transfer_techs,vintage)
7817              * transfer_lengthParam(linksModelToCalc,link_types,"length")
7818              * accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"perLengthTotal"))
7819   
7820          + sum (timeModelSel,
7821              transfer_flowAlong(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
7822              * timeLength(timeModelSel)
7823              * ( accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"perFlow")
7824                  + accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"perFlowAlong"))
7825   
7826              + transfer_flowAgainst(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
7827              * timeLength(timeModelSel)
7828              * ( accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"perFlow")
7829                  + accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"perFlowAgainst")))
7830   
7831          + sum ((timeModelSel, link_types),
7832              transfer_flowAlong(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
7833              * timeLength(timeModelSel)
7834              * transfer_lengthParam(linksModelToCalc,link_types,"length")
7835              * (accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"perFlow")
7836                  + accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"perFlowAlong"))
7837   
7838              + transfer_flowAgainst(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
7839              * timeLength(timeModelSel)
7840              * transfer_lengthParam(linksModelToCalc,link_types,"length")
7841              * (accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"perFlow")
7842                  + accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"perFlowAgainst")))
7843          );
7844   
7845  * // ### Accounting Objective
7846  * // Calculates the indicators for the objective.
7847  * // {Eq_accounting_objective}
7848  Eq_accounting_objective
7849      ..
7850      accounting_objective
7851      =e=
7852      sum ((accNodesModel,accYears,indicator)
7853              $(accounting_indicatorBounds(accNodesModel,accYears,indicator,"obj") <> 0 ),
7854          accounting_indicator(accNodesModel,accYears,indicator) )
7855   
7856   
7857  * ==== model definition ====
7858   
7859  Model M_accounting
7860  /
7861  Eq_accounting_indicatorCalc_links
7862  Eq_accounting_indicatorCalc
7863  Eq_accounting_objective
7864  /;
INCLUDE    C:\Local\REMix\framework\remix\framework\model\source\optiframe.gms
7866  * SPDX-FileCopyrightText: Copyright (c) 2023 German Aerospace Center (DLR)
7867  * SPDX-License-Identifier: BSD-3-Clause
7868   
7869  * ==== optimization frames ====
7871   
7872  * mapping from optimization frame to years
7874  set optiframe / of1 * of1 /;
7875  set optiframeToCalc(optiframe);
7876   
7878  set map_optiframe(optiframe,years) / of1 . #yearsToCalc /;
7880   
7882   
7883  option optiframeToCalc < map_optiframe;
7884   
7885  Model remix /
7886    M_converter
7887    M_storage
7888    M_transfer
7889    M_sourcesink
7890    M_balance
7891    M_accounting
7892  /;
7893   
7894   
7895  * ==== include methods  ====
7896   
7897  * check if the method is valid
7903   
7904   
7905  * if method is pips write the checkanno tool
INCLUDE    C:\Local\REMix\framework\remix\framework\model\source\methods\checkanno.gms
7907  * SPDX-FileCopyrightText: Copyright (c) 2023 German Aerospace Center (DLR)
7908  * SPDX-License-Identifier: BSD-3-Clause
7909   
7912   
7915   
7916  * if method is pips generate the annotated gdx file
INCLUDE    C:\Local\REMix\framework\remix\framework\model\source\methods\pips.gms
7918  * SPDX-FileCopyrightText: Copyright (c) 2023 German Aerospace Center (DLR)
7919  * SPDX-License-Identifier: BSD-3-Clause
7920   
7924   
7925  * if method is solve run the model with commercial solvers
INCLUDE    C:\Local\REMix\framework\remix\framework\model\source\methods\solve.gms
7927  * SPDX-FileCopyrightText: Copyright (c) 2023 German Aerospace Center (DLR)
7928  * SPDX-License-Identifier: BSD-3-Clause
7929   
7932   
7934   
7935  * ==== global options ====
7942   
7943  * ==== general solver options ====
7953   
7954  * ==== cplex options ====
7963   
7964  * ==== copt options ====
7968   
7969  * ==== debug options ====
7972   
7973   
7974  * ==== setup optimization ====
7975  if ((sum(nodesModelToCalc, 1)>40 or sum(timeModelToCalc, 1)>50) and not 0,
7976     option limRow=0, limCol=0, solPrint=off;
7977  else
7978     option limRow=100000, limCol=100000, solPrint=on;
7979  );
7980   
7982   
7983  option mip = cplex;
7984  option reslim = 604800;
7985  option optcr = 1e-3;
7986  remix.threads=4;
7987  remix.optFile = 1;
7988  remix.solveLink = 0;
7989  remix.holdFixed = 1;
7990   
7991   
7992  * ==== configure optionfiles ====
7993   
7995  file opt / "cplex.opt" /;
7996  put opt;
7998  put "rerun no" /;
8000  put "lpmethod 4" /;
8002  put "barorder 0" /;
8003  put "preind 1" /;
8004  put "scaind 0" /;
8005  put "predual -1" /;
8006  put "baralg 0" /;
8007  put "barstartalg 1" /;
8008  put "barepcomp 1e-6" /;
8009  put "solutiontype 2" /;
8010  put "startalg 4" /;
8011  put "epgap 1e-3" /;
8012  put "quality 1" /;
8013  put "barcolnz 0" /;
8014  put "threads 4" /;
8015  put "parallelmode 1" /;
8018  putclose;
8019   
8021   
8022   
8023  * ==== solve the problem ====
8024   
8025  loop ( optiframeToCalc,
8026      yearsSel(years) = no;
8027      yearsSel(years)$map_optiframe(optiframeToCalc,years) = yes;
8028      yearsToFix(years) = no;
8029      yearsToFix(years)$(years.val < smin(years_a$yearsSel(years_a), years_a.val)) = yes;
8030      accYearsSel(accYears) = no;
8031      accYearsSel("horizon") = yes;
8032      accYearsSel(accYears)$(sum(yearsSel$sameas(accYears,yearsSel), 1)) = yes;
8033      accYearsToFix(accYears) = no;
8034      accYearsToFix(accYears)$(sum(years$(sameas(years,accYears) and years.val < smin(years_a$yearsSel(years_a), years_a.val)), 1) > 0) = yes;
8035      timeModelSel(timeModel) = no;
8036      timeModelSel(timeModel)$timeModelToCalc(timeModel) = yes;
8037      nodesModelSel(nodesModel) = no;
8038      nodesModelSel(nodesModel)$nodesModelToCalc(nodesModel) = yes;
8039   
8040  * Fix decision for years previously optimized in case of myopic or foresight
8041      converter_unitsDelta(nodesModelToCalc,yearsToFix,converter_techs)
8042          $(sum(yearsToCalc$sameas(yearsToFix, yearsToCalc), 1))
8043          = sum(vintage, converter_unitsTotal.l(nodesModelToCalc,yearsToFix,converter_techs,vintage))
8044              - converter_capacityParam(nodesModelToCalc,yearsToFix,converter_techs,"unitsUpperLimit");
8045      converter_unitsDelta(nodesModelToCalc,yearsToFix,converter_techs)
8046          $(converter_unitsDelta(nodesModelToCalc,yearsToFix,converter_techs) < 0) = 0;
8047   
8048      converter_unitsBuild.l(nodesModelToCalc,yearsToFix,converter_techs,vintage)
8049          $converter_availTech(nodesModelToCalc,yearsToFix,converter_techs,vintage)
8050          = converter_unitsBuild.l(nodesModelToCalc,yearsToFix,converter_techs,vintage)
8051              - converter_unitsDelta(nodesModelToCalc,yearsToFix,converter_techs);
8052   
8053      converter_unitsBuild.l(nodesModelToCalc,yearsToFix,converter_techs,vintage)
8054          $(converter_unitsBuild.l(nodesModelToCalc,yearsToFix,converter_techs,vintage) < 0) = 0;
8055      converter_unitsBuild.fx(nodesModelToCalc,yearsToFix,converter_techs,vintage)
8056          = converter_unitsBuild.l(nodesModelToCalc,yearsToFix,converter_techs,vintage);
8057      converter_unitsDecom.l(nodesModelToCalc,yearsToFix,converter_techs,vintage)
8058          $(converter_unitsDecom.l(nodesModelToCalc,yearsToFix,converter_techs,vintage) < 0) = 0;
8059      converter_unitsDecom.fx(nodesModelToCalc,yearsToFix,converter_techs,vintage)
8060          = converter_unitsDecom.l(nodesModelToCalc,yearsToFix,converter_techs,vintage);
8061      converter_unitsTotal.fx(nodesModelToCalc,yearsToFix,converter_techs,vintage)
8062          = converter_unitsTotal.l(nodesModelToCalc,yearsToFix,converter_techs,vintage);
8063   
8064   
8065      storage_unitsDelta(nodesModelToCalc,yearsToFix,storage_techs)
8066          $(sum(yearsToCalc$sameas(yearsToFix, yearsToCalc), 1))
8067          = sum(vintage, storage_unitsTotal.l(nodesModelToCalc,yearsToFix,storage_techs,vintage))
8068              - storage_reservoirParam(nodesModelToCalc,yearsToFix,storage_techs,"unitsUpperLimit");
8069      storage_unitsDelta(nodesModelToCalc,yearsToFix,storage_techs)
8070          $(storage_unitsDelta(nodesModelToCalc,yearsToFix,storage_techs) < 0) = 0;
8071   
8072      storage_unitsBuild.l(nodesModelToCalc,yearsToFix,storage_techs,vintage)
8073          $storage_availTech(nodesModelToCalc,yearsToFix,storage_techs,vintage)
8074          = storage_unitsBuild.l(nodesModelToCalc,yearsToFix,storage_techs,vintage)
8075              - storage_unitsDelta(nodesModelToCalc,yearsToFix,storage_techs);
8076   
8077      storage_unitsBuild.l(nodesModelToCalc,yearsToFix,storage_techs,vintage)
8078          $(storage_unitsBuild.l(nodesModelToCalc,yearsToFix,storage_techs,vintage) < 0) = 0;
8079      storage_unitsBuild.fx(nodesModelToCalc,yearsToFix,storage_techs,vintage)
8080          = storage_unitsBuild.l(nodesModelToCalc,yearsToFix,storage_techs,vintage);
8081      storage_unitsDecom.l(nodesModelToCalc,yearsToFix,storage_techs,vintage)
8082          $(storage_unitsDecom.l(nodesModelToCalc,yearsToFix,storage_techs,vintage) < 0) = 0;
8083      storage_unitsDecom.fx(nodesModelToCalc,yearsToFix,storage_techs,vintage)
8084          = storage_unitsDecom.l(nodesModelToCalc,yearsToFix,storage_techs,vintage);
8085      storage_unitsTotal.fx(nodesModelToCalc,yearsToFix,storage_techs,vintage)
8086          = storage_unitsTotal.l(nodesModelToCalc,yearsToFix,storage_techs,vintage);
8087   
8088   
8089      transfer_linksDelta(linksModelToCalc,yearsToFix,transfer_techs)
8090          $(sum(yearsToCalc$sameas(yearsToFix, yearsToCalc), 1))
8091          = sum(vintage, transfer_linksTotal.l(linksModelToCalc,yearsToFix,transfer_techs,vintage))
8092              - transfer_linksParam(linksModelToCalc,yearsToFix,transfer_techs,"linksUpperLimit");
8093      transfer_linksDelta(linksModelToCalc,yearsToFix,transfer_techs)
8094          $(transfer_linksDelta(linksModelToCalc,yearsToFix,transfer_techs) < 0) = 0;
8095   
8096      transfer_linksBuild.l(linksModelToCalc,yearsToFix,transfer_techs,vintage)
8097          $transfer_availTech(linksModelToCalc,yearsToFix,transfer_techs,vintage)
8098          = transfer_linksBuild.l(linksModelToCalc,yearsToFix,transfer_techs,vintage)
8099              - transfer_linksDelta(linksModelToCalc,yearsToFix,transfer_techs);
8100   
8101      transfer_linksBuild.l(linksModelToCalc,yearsToFix,transfer_techs,vintage)
8102          $(transfer_linksBuild.l(linksModelToCalc,yearsToFix,transfer_techs,vintage) < 0) = 0;
8103      transfer_linksBuild.fx(linksModelToCalc,yearsToFix,transfer_techs,vintage)
8104          = transfer_linksBuild.l(linksModelToCalc,yearsToFix,transfer_techs,vintage);
8105      transfer_linksDecom.l(linksModelToCalc,yearsToFix,transfer_techs,vintage)
8106          $(transfer_linksDecom.l(linksModelToCalc,yearsToFix,transfer_techs,vintage) < 0) = 0;
8107      transfer_linksDecom.fx(linksModelToCalc,yearsToFix,transfer_techs,vintage)
8108          = transfer_linksDecom.l(linksModelToCalc,yearsToFix,transfer_techs,vintage);
8109      transfer_linksTotal.fx(linksModelToCalc,yearsToFix,transfer_techs,vintage)
8110          = transfer_linksTotal.l(linksModelToCalc,yearsToFix,transfer_techs,vintage);
8111   
8112      accounting_indicator.fx(accNodesModel,accYearsToFix,indicator)
8113          = accounting_indicator.l(accNodesModel,accYearsToFix,indicator);
8114   
8115  * Optimize and log values
8116      if (opti_sense < 0,
8117      solve remix minimizing accounting_objective using mip;
8118      else
8119      solve remix maximizing accounting_objective using mip;
8120      );
8121   
8122      put_utility 'log' / 'Model status ' remix.modelstat:0:0;
8123      put_utility 'log' / 'Objective value ' accounting_objective.l:0:3;
8124   
8125  );
8126   
8130   
8131  * if method is pareto solve the model once and afterwards run multiple points along the pareto front
INCLUDE    C:\Local\REMix\framework\remix\framework\model\source\methods\pareto.gms
8133  * SPDX-FileCopyrightText: Copyright (c) 2023 German Aerospace Center (DLR)
8134  * SPDX-License-Identifier: BSD-3-Clause
8135   
8139   
8140  * if method is mga solve the model once and afterwards maximize the length metric of indicators
INCLUDE    C:\Local\REMix\framework\remix\framework\model\source\methods\mga.gms
8142  * SPDX-FileCopyrightText: Copyright (c) 2023 German Aerospace Center (DLR)
8143  * SPDX-License-Identifier: BSD-3-Clause
8144   
8148   
8149  * if method is iternodes run the model by iterating through all nodesToCalc
INCLUDE    C:\Local\REMix\framework\remix\framework\model\source\methods\iternodes.gms
8151  * SPDX-FileCopyrightText: Copyright (c) 2023 German Aerospace Center (DLR)
8152  * SPDX-License-Identifier: BSD-3-Clause
8153   
8157   
8158  * if postcalc is one write the results gdx
INCLUDE    C:\Local\REMix\framework\remix\framework\model\source\postcalc\definition.gms
8160  * SPDX-FileCopyrightText: Copyright (c) 2023 German Aerospace Center (DLR)
8161  * SPDX-License-Identifier: BSD-3-Clause
8162   
8164   
8165  * ==== indicator accounting ====
8166   
8167  indicator_accounting_detailed(indicator,nodesModelToCalc,yearsToCalc,techs)
8168      =
8169  * == converters ==
8170      sum ((converter_techs(techs),vintage)
8171                  $(converter_availTech(nodesModelToCalc,yearsToCalc,converter_techs,vintage)
8172                      and accounting_converterUnits(indicator,nodesModelToCalc,converter_techs,vintage,"useAnnuity") = 0),
8173          converter_unitsBuild.l(nodesModelToCalc,yearsToCalc,converter_techs,vintage)
8174          * accounting_converterUnits(indicator,nodesModelToCalc,converter_techs,vintage,"perUnitBuild"))
8175   
8176      + sum ((years_a,converter_techs(techs),vintage)
8177                  $(converter_availTech(nodesModelToCalc,years_a,converter_techs,vintage)
8178                      and accounting_converterUnits(indicator,nodesModelToCalc,converter_techs,vintage,"useAnnuity") = 1
8179                      and years_a.val + accounting_converterUnits(indicator,nodesModelToCalc,converter_techs,vintage,"amorTime") > yearsToCalc.val
8180                      and years_a.val <= yearsToCalc.val ),
8181          converter_unitsBuild.l(nodesModelToCalc,years_a,converter_techs,vintage)
8182          * accounting_converterUnits(indicator,nodesModelToCalc,converter_techs,vintage,"perUnitBuild")
8183          * accounting_annuityFactor_converter(indicator,nodesModelToCalc,converter_techs,vintage) )
8184   
8185      + sum ((converter_techs(techs),vintage)
8186                  $converter_usedTech(nodesModelToCalc,yearsToCalc,converter_techs,vintage),
8187          converter_unitsDecom.l(nodesModelToCalc,yearsToCalc,converter_techs,vintage)
8188          * accounting_converterUnits(indicator,nodesModelToCalc,converter_techs,vintage,"perUnitDecom")
8189   
8190          + converter_unitsTotal.l(nodesModelToCalc,yearsToCalc,converter_techs,vintage)
8191          * accounting_converterUnits(indicator,nodesModelToCalc,converter_techs,vintage,"perUnitTotal") )
8192   
8193      + sum ((timeModelToCalc,converter_techs(techs),vintage,activity)
8194                  $converter_usedTechAct(nodesModelToCalc,yearsToCalc,converter_techs,vintage,activity),
8195          converter_activity.l(timeModelToCalc,nodesModelToCalc,yearsToCalc,converter_techs,vintage,activity)
8196          * timeLength(timeModelToCalc)
8197          * accounting_converterActivity(indicator,nodesModelToCalc,converter_techs,vintage,activity,"perActivity") )
8198   
8199      + sum ((timeModelToCalc,converter_techs(techs),vintage)
8200                  $converter_usedTech(nodesModelToCalc,yearsToCalc,converter_techs,vintage),
8201          converter_unitStartups.l(timeModelToCalc,nodesModelToCalc,yearsToCalc,converter_techs,vintage)
8202          * accounting_converterStartup(indicator,nodesModelToCalc,converter_techs,vintage,"perStartup") )
8203   
8204      + sum ((timeModelToCalc,converter_techs(techs),vintage)
8205                  $converter_usedTech(nodesModelToCalc,yearsToCalc,converter_techs,vintage),
8206          converter_rampPos.l(timeModelToCalc,nodesModelToCalc,yearsToCalc,converter_techs,vintage)
8207          * (accounting_converterStartup(indicator,nodesModelToCalc,converter_techs,vintage,"perRamp")
8208              + accounting_converterStartup(indicator,nodesModelToCalc,converter_techs,vintage,"perRampPos"))
8209   
8210          + converter_rampNeg.l(timeModelToCalc,nodesModelToCalc,yearsToCalc,converter_techs,vintage)
8211          * (accounting_converterStartup(indicator,nodesModelToCalc,converter_techs,vintage,"perRamp")
8212              + accounting_converterStartup(indicator,nodesModelToCalc,converter_techs,vintage,"perRampNeg")))
8213   
8214  * == storage ==
8215      + sum ((storage_techs(techs),vintage)
8216                  $(storage_availTech(nodesModelToCalc,yearsToCalc,storage_techs,vintage)
8217                      and accounting_storageUnits(indicator,nodesModelToCalc,storage_techs,vintage,"useAnnuity") = 0),
8218          storage_unitsBuild.l(nodesModelToCalc,yearsToCalc,storage_techs,vintage)
8219          * accounting_storageUnits(indicator,nodesModelToCalc,storage_techs,vintage,"perUnitBuild") )
8220   
8221      + sum ((years_a,storage_techs(techs),vintage)
8222                  $(storage_availTech(nodesModelToCalc,yearsToCalc,storage_techs,vintage)
8223                      and accounting_storageUnits(indicator,nodesModelToCalc,storage_techs,vintage,"useAnnuity") = 1
8224                      and years_a.val + accounting_storageUnits(indicator,nodesModelToCalc,storage_techs,vintage,"amorTime") > yearsToCalc.val
8225                      and years_a.val <= yearsToCalc.val ),
8226          storage_unitsBuild.l(nodesModelToCalc,years_a,storage_techs,vintage)
8227          * accounting_storageUnits(indicator,nodesModelToCalc,storage_techs,vintage,"perUnitBuild")
8228          * accounting_annuityFactor_storage(indicator,nodesModelToCalc,storage_techs,vintage) )
8229   
8230      + sum ((storage_techs(techs),vintage)
8231                  $storage_usedTech(nodesModelToCalc,yearsToCalc,storage_techs,vintage),
8232          storage_unitsDecom.l(nodesModelToCalc,yearsToCalc,storage_techs,vintage)
8233          * accounting_storageUnits(indicator,nodesModelToCalc,storage_techs,vintage,"perUnitDecom")
8234   
8235          + storage_unitsTotal.l(nodesModelToCalc,yearsToCalc,storage_techs,vintage)
8236          * accounting_storageUnits(indicator,nodesModelToCalc,storage_techs,vintage,"perUnitTotal") )
8237   
8238  * == transfer ==
8239      + sum ((linksModel,transfer_techs(techs),vintage)
8240                  $(transfer_availTech(linksModel,yearsToCalc,transfer_techs,vintage)
8241                      and linksModelToCalc(linksModel)
8242                      and transfer_incidenceModel(nodesModelToCalc,linksModel) <> 0
8243                      and accounting_transferLinks(indicator,linksModel,transfer_techs,vintage,"useAnnuity") = 0),
8244          0.5
8245          * transfer_linksBuild.l(linksModel,yearsToCalc,transfer_techs,vintage)
8246          * accounting_transferLinks(indicator,linksModel,transfer_techs,vintage,"perLinkBuild") )
8247   
8248      + sum ((linksModel,years_a,transfer_techs(techs),vintage)
8249                  $(transfer_availTech(linksModel,yearsToCalc,transfer_techs,vintage)
8250                      and linksModelToCalc(linksModel)
8251                      and transfer_incidenceModel(nodesModelToCalc,linksModel) <> 0
8252                      and accounting_transferLinks(indicator,linksModel,transfer_techs,vintage,"useAnnuity") = 1
8253                      and years_a.val + accounting_transferLinks(indicator,linksModel,transfer_techs,vintage,"amorTime") > yearsToCalc.val
8254                      and years_a.val <= yearsToCalc.val ),
8255          0.5
8256          * transfer_linksBuild.l(linksModel,years_a,transfer_techs,vintage)
8257          * accounting_transferLinks(indicator,linksModel,transfer_techs,vintage,"perLinkBuild")
8258          * accounting_annuityFactor_transferLink(indicator,linksModel,transfer_techs,vintage) )
8259   
8260      + sum ((linksModel,transfer_techs(techs),vintage,link_types)
8261                  $(transfer_availTech(linksModel,yearsToCalc,transfer_techs,vintage)
8262                      and linksModelToCalc(linksModel)
8263                      and transfer_incidenceModel(nodesModelToCalc,linksModel) <> 0
8264                      and accounting_transferPerLength(indicator,linksModel,transfer_techs,vintage,link_types,"useAnnuity") = 0 ),
8265          0.5
8266          * transfer_linksBuild.l(linksModel,yearsToCalc,transfer_techs,vintage)
8267          * transfer_lengthParam(linksModel,link_types,"length")
8268          * accounting_transferPerLength(indicator,linksModel,transfer_techs,vintage,link_types,"perLengthBuild") )
8269   
8270      + sum ((linksModel,years_a,transfer_techs(techs),vintage,link_types)
8271                  $(transfer_availTech(linksModel,yearsToCalc,transfer_techs,vintage)
8272                      and linksModelToCalc(linksModel)
8273                      and transfer_incidenceModel(nodesModelToCalc,linksModel) <> 0
8274                      and accounting_transferPerLength(indicator,linksModel,transfer_techs,vintage,link_types,"useAnnuity") = 1
8275                      and years_a.val + accounting_transferPerLength(indicator,linksModel,transfer_techs,vintage,link_types,"amorTime") > yearsToCalc.val
8276                      and years_a.val <= yearsToCalc.val ),
8277          0.5
8278          * transfer_linksBuild.l(linksModel,years_a,transfer_techs,vintage)
8279          * transfer_lengthParam(linksModel,link_types,"length")
8280          * accounting_transferPerLength(indicator,linksModel,transfer_techs,vintage,link_types,"perLengthBuild")
8281          * accounting_annuityFactor_transferDistance(indicator,linksModel,transfer_techs,vintage,link_types) )
8282   
8283      + sum ((linksModel,transfer_techs(techs),vintage)
8284                  $(transfer_usedTech(linksModel,yearsToCalc,transfer_techs,vintage)
8285                      and linksModelToCalc(linksModel)
8286                      and transfer_incidenceModel(nodesModelToCalc,linksModel) <> 0 ),
8287          0.5
8288          * transfer_linksDecom.l(linksModel,yearsToCalc,transfer_techs,vintage)
8289          * accounting_transferLinks(indicator,linksModel,transfer_techs,vintage,"perLinkDecom")
8290   
8291          + 0.5
8292          * transfer_linksTotal.l(linksModel,yearsToCalc,transfer_techs,vintage)
8293          * accounting_transferLinks(indicator,linksModel,transfer_techs,vintage,"perLinkTotal")
8294   
8295          + 0.5
8296          * sum (link_types,
8297              transfer_linksDecom.l(linksModel,yearsToCalc,transfer_techs,vintage)
8298              * transfer_lengthParam(linksModel,link_types,"length")
8299              * accounting_transferPerLength(indicator,linksModel,transfer_techs,vintage,link_types,"perLengthDecom")
8300   
8301              + transfer_linksTotal.l(linksModel,yearsToCalc,transfer_techs,vintage)
8302              * transfer_lengthParam(linksModel,link_types,"length")
8303              * accounting_transferPerLength(indicator,linksModel,transfer_techs,vintage,link_types,"perLengthTotal"))
8304   
8305          + 0.5
8306          * sum (timeModelToCalc,
8307              transfer_flowAlong.l(timeModelToCalc,linksModel,yearsToCalc,transfer_techs,vintage)
8308              * timeLength(timeModelToCalc)
8309              * ( accounting_transferLinks(indicator,linksModel,transfer_techs,vintage,"perFlow")
8310                  + accounting_transferLinks(indicator,linksModel,transfer_techs,vintage,"perFlowAlong"))
8311   
8312              + transfer_flowAgainst.l(timeModelToCalc,linksModel,yearsToCalc,transfer_techs,vintage)
8313              * timeLength(timeModelToCalc)
8314              * ( accounting_transferLinks(indicator,linksModel,transfer_techs,vintage,"perFlow")
8315                  + accounting_transferLinks(indicator,linksModel,transfer_techs,vintage,"perFlowAgainst")))
8316   
8317          + 0.5
8318          * sum ((timeModelToCalc, link_types),
8319              transfer_flowAlong.l(timeModelToCalc,linksModel,yearsToCalc,transfer_techs,vintage)
8320              * timeLength(timeModelToCalc)
8321              * transfer_lengthParam(linksModel,link_types,"length")
8322              * (accounting_transferPerLength(indicator,linksModel,transfer_techs,vintage,link_types,"perFlow")
8323                  + accounting_transferPerLength(indicator,linksModel,transfer_techs,vintage,link_types,"perFlowAlong"))
8324   
8325              + transfer_flowAgainst.l(timeModelToCalc,linksModel,yearsToCalc,transfer_techs,vintage)
8326              * timeLength(timeModelToCalc)
8327              * transfer_lengthParam(linksModel,link_types,"length")
8328              * (accounting_transferPerLength(indicator,linksModel,transfer_techs,vintage,link_types,"perFlow")
8329                  + accounting_transferPerLength(indicator,linksModel,transfer_techs,vintage,link_types,"perFlowAgainst"))))
8330   
8331   
8332  * == sources / sinks ==
8333      + sum ((timeModelToCalc,sourcesink_techs(techs),commodity)
8334              $sourcesink_enabled(nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity),
8335          sourcesink_flow.l(timeModelToCalc,nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity)
8336          * timeLength(timeModelToCalc)
8337          * accounting_sourcesinkFlow(indicator,nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity,"perFlow"))
8338      ;
8339   
8340   
8341  * ==== full set of main indicators ====
8342   
8343  indicator_accounting(accNodesModel,accYears,indicator)
8344      $sum((accNodesModel_a,accYears_a,indicator_a)
8345              $compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a), 1)
8346      =
8347      + sum((accNodesModel_a,accYears_a,indicator_a)
8348              $(compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
8349                  and variableIndicators(accNodesModel_a,accYears_a,indicator_a)),
8350          compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
8351          * accounting_indicator.l(accNodesModel_a,accYears_a,indicator_a))
8352   
8353      + sum((accNodesModel_a,accYears_a,indicator_a)
8354              $(compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)),
8355          compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
8356          * (sum((nodesModelToCalc,yearsToCalc,techs)
8357                  $(sameas(accNodesModel_a, nodesModelToCalc)
8358                      and sameas(accYears_a, yearsToCalc)),
8359                  indicator_accounting_detailed(indicator_a,nodesModelToCalc,yearsToCalc,techs))))
8360      ;
8361   
8362  indicator_accounting_comp(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
8363      $compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
8364      =
8365          compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
8366          * accounting_indicator.l(accNodesModel_a,accYears_a,indicator_a)
8367              $variableIndicators(accNodesModel_a,accYears_a,indicator_a)
8368   
8369          + compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
8370          * (sum((nodesModelToCalc,yearsToCalc,techs)
8371                  $(sameas(accNodesModel_a, nodesModelToCalc)
8372                      and sameas(accYears_a, yearsToCalc)),
8373                  indicator_accounting_detailed(indicator_a,nodesModelToCalc,yearsToCalc,techs)))
8374      ;
8375   
8376  indicator_accounting_ref(accNodesModel,accYears,indicator)
8377      $accounting_indicator.l(accNodesModel,accYears,indicator)
8378      = accounting_indicator.l(accNodesModel,accYears,indicator);
8379   
8380  * ==== link-specific indicator accounting ====
8381   
8382  indicator_accounting_links(indicator,nodesModelToCalc,nodesModelToCalc_a,linksModelToCalc,yearsToCalc,techs)
8383      $(transfer_incidenceModel(nodesModelToCalc,linksModelToCalc) < 0
8384          and transfer_incidenceModel(nodesModelToCalc_a,linksModelToCalc) > 0)
8385      =
8386      sum ((transfer_techs(techs),vintage)
8387                  $(transfer_availTech(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
8388                      and accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"useAnnuity") = 0),
8389          transfer_linksBuild.l(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
8390          * accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"perLinkBuild") )
8391   
8392      + sum ((years_a,transfer_techs(techs),vintage)
8393                  $(transfer_availTech(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
8394                      and accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"useAnnuity") = 1
8395                      and years_a.val + accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"amorTime") > yearsToCalc.val
8396                      and years_a.val <= yearsToCalc.val ),
8397          transfer_linksBuild.l(linksModelToCalc,years_a,transfer_techs,vintage)
8398          * accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"perLinkBuild")
8399          * accounting_annuityFactor_transferLink(indicator,linksModelToCalc,transfer_techs,vintage) )
8400   
8401      + sum ((transfer_techs(techs),vintage,link_types)
8402                  $(transfer_availTech(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
8403                      and accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"useAnnuity") = 0 ),
8404          transfer_linksBuild.l(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
8405          * transfer_lengthParam(linksModelToCalc,link_types,"length")
8406          * accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"perLengthBuild") )
8407   
8408      + sum ((years_a,transfer_techs(techs),vintage,link_types)
8409                  $(transfer_availTech(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
8410                      and accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"useAnnuity") = 1
8411                      and years_a.val + accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"amorTime") > yearsToCalc.val
8412                      and years_a.val <= yearsToCalc.val ),
8413          transfer_linksBuild.l(linksModelToCalc,years_a,transfer_techs,vintage)
8414          * transfer_lengthParam(linksModelToCalc,link_types,"length")
8415          * accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"perLengthBuild")
8416          * accounting_annuityFactor_transferDistance(indicator,linksModelToCalc,transfer_techs,vintage,link_types) )
8417   
8418      + sum ((transfer_techs(techs),vintage)
8419                  $(transfer_usedTech(linksModelToCalc,yearsToCalc,transfer_techs,vintage)),
8420          transfer_linksDecom.l(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
8421          * accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"perLinkDecom")
8422   
8423          + transfer_linksTotal.l(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
8424          * accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"perLinkTotal")
8425   
8426          + sum (link_types,
8427              transfer_linksDecom.l(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
8428              * transfer_lengthParam(linksModelToCalc,link_types,"length")
8429              * accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"perLengthDecom")
8430   
8431              + transfer_linksTotal.l(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
8432              * transfer_lengthParam(linksModelToCalc,link_types,"length")
8433              * accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"perLengthTotal"))
8434   
8435          + sum (timeModelToCalc,
8436              transfer_flowAlong.l(timeModelToCalc,linksModelToCalc,yearsToCalc,transfer_techs,vintage)
8437              * timeLength(timeModelToCalc)
8438              * ( accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"perFlow")
8439                  + accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"perFlowAlong"))
8440   
8441              + transfer_flowAgainst.l(timeModelToCalc,linksModelToCalc,yearsToCalc,transfer_techs,vintage)
8442              * timeLength(timeModelToCalc)
8443              * ( accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"perFlow")
8444                  + accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"perFlowAgainst")))
8445   
8446          + sum ((timeModelToCalc, link_types),
8447              transfer_flowAlong.l(timeModelToCalc,linksModelToCalc,yearsToCalc,transfer_techs,vintage)
8448              * timeLength(timeModelToCalc)
8449              * transfer_lengthParam(linksModelToCalc,link_types,"length")
8450              * (accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"perFlow")
8451                  + accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"perFlowAlong"))
8452   
8453              + transfer_flowAgainst.l(timeModelToCalc,linksModelToCalc,yearsToCalc,transfer_techs,vintage)
8454              * timeLength(timeModelToCalc)
8455              * transfer_lengthParam(linksModelToCalc,link_types,"length")
8456              * (accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"perFlow")
8457                  + accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"perFlowAgainst")))
8458      );
8459   
8460   
8461  * == converter capacities ==
8462   
8463  converter_ratedInput(converter_techs,vintage,commodity)
8464      $(converter_techParam(converter_techs,vintage,"lifeTime") > 0)
8465      = smin(activity$converter_usedAct(converter_techs,vintage,activity),
8466              converter_coefficient(converter_techs,vintage,activity,commodity,"coefficient"));
8467  converter_ratedInput(converter_techs,vintage,commodity)
8468      $(converter_ratedInput(converter_techs,vintage,commodity) > 0)
8469      = 0;
8470   
8471  converter_ratedOutput(converter_techs,vintage,commodity)
8472      $(converter_techParam(converter_techs,vintage,"lifeTime") > 0)
8473      = smax(activity$converter_usedAct(converter_techs,vintage,activity),
8474              converter_coefficient(converter_techs,vintage,activity,commodity,"coefficient"));
8475  converter_ratedOutput(converter_techs,vintage,commodity)
8476      $(converter_ratedOutput(converter_techs,vintage,commodity) < 0)
8477      = 0;
8478   
8479  converter_ratedOutput_min(nodesModelToCalc,years,converter_techs(techs),commodity)
8480      $sum(vintage$(converter_usedTech(nodesModelToCalc,years,converter_techs,vintage)
8481          and converter_ratedOutput(converter_techs,vintage,commodity)), 1)
8482      = smin(vintage$(converter_usedTech(nodesModelToCalc,years,converter_techs,vintage)
8483              and converter_ratedOutput(converter_techs,vintage,commodity)),
8484          converter_ratedOutput(converter_techs,vintage,commodity));
8485   
8486  converter_ratedOutput_max(nodesModelToCalc,years,converter_techs(techs),commodity)
8487      $sum(vintage$(converter_usedTech(nodesModelToCalc,years,converter_techs,vintage)
8488          and converter_ratedOutput(converter_techs,vintage,commodity)), 1)
8489      = smax(vintage$(converter_usedTech(nodesModelToCalc,years,converter_techs,vintage)
8490              and converter_ratedOutput(converter_techs,vintage,commodity)),
8491          converter_ratedOutput(converter_techs,vintage,commodity));
8492   
8493  converter_units_ext(map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,years),converter_techs(techs),vintage,"build")
8494      = converter_unitsBuild.l(nodesModelToCalc,years,converter_techs,vintage);
8495   
8496  converter_units_ext(map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,years),converter_techs(techs),vintage,"decom")
8497      = converter_unitsDecom.l(nodesModelToCalc,years,converter_techs,vintage);
8498   
8499  converter_units_ext(map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,years),converter_techs(techs),vintage,"total")
8500      = converter_unitsTotal.l(nodesModelToCalc,years,converter_techs,vintage);
8501   
8502  converter_caps_ext(map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,years),converter_techs(techs),vintage,commodity,capType)
8503      $(converter_ratedOutput(converter_techs,vintage,commodity))
8504      = converter_units_ext(accNodesModel,nodesModelToCalc,accYears,years,techs,vintage,capType)
8505          * converter_ratedOutput(converter_techs,vintage,commodity);
8506   
8507  converter_caps_ext(map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,years),converter_techs(techs),vintage,commodity,"lowerLimit")
8508      $(converter_usedTech(nodesModelToCalc,years,converter_techs,vintage)
8509          and converter_capacityParam(nodesModelToCalc,years,converter_techs,"unitsLowerLimit") > 0
8510          and converter_ratedOutput_min(nodesModelToCalc,years,converter_techs,commodity))
8511      = converter_capacityParam(nodesModelToCalc,years,converter_techs,"unitsLowerLimit")
8512          * converter_ratedOutput_min(nodesModelToCalc,years,converter_techs,commodity);
8513   
8514  converter_caps_ext(map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,years),converter_techs(techs),vintage,commodity,"upperLimit")
8515      $(converter_usedTech(nodesModelToCalc,years,converter_techs,vintage)
8516          and converter_capacityParam(nodesModelToCalc,years,converter_techs,"unitsUpperLimit") < inf
8517          and converter_ratedOutput_min(nodesModelToCalc,years,converter_techs,commodity))
8518      = converter_capacityParam(nodesModelToCalc,years,converter_techs,"unitsUpperLimit")
8519          * converter_ratedOutput_max(nodesModelToCalc,years,converter_techs,commodity);
8520   
8521  converter_caps(accNodesModel,accYears,converter_techs(techs),commodity,capType)
8522      = sum((nodesModelToCalc,years,vintage)
8523              $(map_accNodesPostCalc(accNodesModel,nodesModelToCalc)
8524                  and map_accYearsPostCalc(accYears,years)),
8525          converter_caps_ext(accNodesModel,nodesModelToCalc,accYears,years,converter_techs,vintage,commodity,capType));
8526  option clear = converter_caps_ext;
8527   
8528  converter_units(accNodesModel,accYears,converter_techs(techs),vintage,capType)
8529      = sum((nodesModelToCalc,years)
8530              $(map_accNodesPostCalc(accNodesModel,nodesModelToCalc)
8531                  and map_accYearsPostCalc(accYears,years)),
8532          converter_units_ext(accNodesModel,nodesModelToCalc,accYears,years,converter_techs,vintage,capType));
8533  option clear = converter_units_ext;
8534   
8535   
8536  * ==== transfer capacities ====
8537   
8538  max_transfer_coefficient(transfer_techs(techs),commodity)
8539          $(smax(vintage, transfer_coefficient(transfer_techs,vintage,commodity,"coefficient")) > 0)
8540          = smax(vintage, transfer_coefficient(transfer_techs,vintage,commodity,"coefficient"));
8541   
8542  min_transfer_coefficient(transfer_techs(techs),commodity)
8543          $(smin(vintage, transfer_coefficient(transfer_techs,vintage,commodity,"coefficient")) > 0)
8544          = smin(vintage, transfer_coefficient(transfer_techs,vintage,commodity,"coefficient"));
8545   
8546   
8547  transfer_links(linksModel,years,transfer_techs,vintage,"build")
8548      = transfer_linksBuild.l(linksModel,years,transfer_techs,vintage);
8549   
8550  transfer_links(linksModel,years,transfer_techs,vintage,"decom")
8551      = transfer_linksDecom.l(linksModel,years,transfer_techs,vintage);
8552   
8553  transfer_links(linksModel,years,transfer_techs,vintage,"total")
8554      = transfer_linksTotal.l(linksModel,years,transfer_techs,vintage);
8555   
8556  transfer_caps(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,years,transfer_techs(techs),commodity,capType)
8557      $(transfer_incidenceModel(nodesModelToCalc_start,linksModel) < 0
8558          and transfer_incidenceModel(nodesModelToCalc_end,linksModel) > 0)
8559      = sum(vintage,
8560          transfer_links(linksModel,years,transfer_techs,vintage,capType)
8561          * transfer_coefficient(transfer_techs,vintage,commodity,"coefficient"));
8562   
8563  transfer_caps(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,years,transfer_techs(techs),commodity,"lowerLimit")
8564      $(transfer_linksParam(linksModel,years,transfer_techs,'linksLowerLimit') > 0
8565          and transfer_incidenceModel(nodesModelToCalc_start,linksModel) < 0
8566          and transfer_incidenceModel(nodesModelToCalc_end,linksModel) > 0
8567          and sum(vintage$(transfer_usedTech(linksModel,years,transfer_techs,vintage)
8568                              and transfer_coefficient(transfer_techs,vintage,commodity,"coefficient")), 1))
8569      = transfer_linksParam(linksModel,years,transfer_techs,'linksLowerLimit')
8570          * min_transfer_coefficient(transfer_techs,commodity);
8571   
8572  transfer_caps(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,years,transfer_techs(techs),commodity,"upperLimit")
8573      $(transfer_linksParam(linksModel,years,transfer_techs,'linksUpperLimit') < inf
8574          and transfer_incidenceModel(nodesModelToCalc_start,linksModel) < 0
8575          and transfer_incidenceModel(nodesModelToCalc_end,linksModel) > 0
8576          and sum(vintage$(transfer_usedTech(linksModel,years,transfer_techs,vintage)
8577                              and transfer_coefficient(transfer_techs,vintage,commodity,"coefficient")), 1))
8578      = transfer_linksParam(linksModel,years,transfer_techs,'linksUpperLimit')
8579          * max_transfer_coefficient(transfer_techs,commodity);
8580   
8581   
8582  * ==== transfer flows ====
8583   
8584  transfer_flows(timeModelToCalc,nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs(techs),commodity)
8585      $(transfer_incidenceModel(nodesModelToCalc_start,linksModel) < 0
8586          and transfer_incidenceModel(nodesModelToCalc_end,linksModel) > 0)
8587      = sum(vintage,
8588          ( transfer_flowAlong.l(timeModelToCalc,linksModel,yearsToCalc,transfer_techs,vintage)
8589              - transfer_flowAgainst.l(timeModelToCalc,linksModel,yearsToCalc,transfer_techs,vintage) )
8590          * timeLength(timeModelToCalc)
8591          * transfer_coefficient(transfer_techs,vintage,commodity,"coefficient"));
8592   
8593  transfer_flows_annual(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs(techs),commodity,"netto")
8594      = sum(timeModelToCalc,
8595          transfer_flows(timeModelToCalc,nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs,commodity));
8596   
8597  transfer_flows_annual(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs(techs),commodity,"positive")
8598      = sum(timeModelToCalc
8599              $(transfer_flows(timeModelToCalc,nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs,commodity) > 0),
8600          transfer_flows(timeModelToCalc,nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs,commodity));
8601   
8602  transfer_flows_annual(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs(techs),commodity,"negative")
8603      = sum(timeModelToCalc
8604              $(transfer_flows(timeModelToCalc,nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs,commodity) < 0),
8605          transfer_flows(timeModelToCalc,nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs,commodity));
8606   
8607  transfer_flows_annual(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs(techs),commodity,"brutto")
8608      = transfer_flows_annual(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs,commodity,"positive")
8609          - transfer_flows_annual(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs,commodity,"negative");
8610   
8611  transfer_flows_annual(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs(techs),commodity,"flh")
8612      $(transfer_flows_annual(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs,commodity,"brutto") > 0
8613          and transfer_caps(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs,commodity,"total") > 0)
8614      = transfer_flows_annual(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs,commodity,"brutto")
8615          / transfer_caps(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs,commodity,"total");
8616   
8617  transfer_losses(timeModelToCalc,nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs(techs),commodity)
8618      $(transfer_incidenceModel(nodesModelToCalc_start,linksModel) < 0
8619          and transfer_incidenceModel(nodesModelToCalc_end,linksModel) > 0)
8620      = -1 * abs(sum(vintage,
8621          ( transfer_flowAlong.l(timeModelToCalc,linksModel,yearsToCalc,transfer_techs,vintage)
8622              - transfer_flowAgainst.l(timeModelToCalc,linksModel,yearsToCalc,transfer_techs,vintage) )
8623          * ( transfer_coefPerFlow(transfer_techs,vintage,commodity,"coefPerFlow")
8624              + sum(link_types,
8625                  transfer_coefPerLength(transfer_techs,vintage,commodity,link_types,"coefPerLength")
8626                  * transfer_lengthParam(linksModel,link_types,"length")))))
8627          * timeLength(timeModelToCalc);
8628   
8629  transfer_losses_annual(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs(techs),commodity,"netto")
8630      = sum(timeModelToCalc,
8631          transfer_losses(timeModelToCalc,nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs,commodity));
8632   
8633   
8634  * ==== storage capacities ====
8635   
8636  storage_size_max(nodesModelToCalc,years,storage_techs(techs),commodity)
8637      $sum(vintage$(storage_usedTech(nodesModelToCalc,years,storage_techs,vintage)
8638              and storage_usedCom(storage_techs,vintage,commodity)
8639              and storage_sizeParam(storage_techs,vintage,commodity,"size")), 1)
8640      = smax(vintage$(storage_usedTech(nodesModelToCalc,years,storage_techs,vintage)
8641              and storage_usedCom(storage_techs,vintage,commodity)
8642              and storage_sizeParam(storage_techs,vintage,commodity,"size")),
8643          storage_sizeParam(storage_techs,vintage,commodity,"size"));
8644   
8645  storage_size_min(nodesModelToCalc,years,storage_techs(techs),commodity)
8646      $sum(vintage$(storage_usedTech(nodesModelToCalc,years,storage_techs,vintage)
8647              and storage_usedCom(storage_techs,vintage,commodity)
8648              and storage_sizeParam(storage_techs,vintage,commodity,"size")), 1)
8649      = smin(vintage$(storage_usedTech(nodesModelToCalc,years,storage_techs,vintage)
8650              and storage_usedCom(storage_techs,vintage,commodity)
8651              and storage_sizeParam(storage_techs,vintage,commodity,"size")),
8652          storage_sizeParam(storage_techs,vintage,commodity,"size"));
8653   
8654  storage_units_ext(map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,years),storage_techs(techs),vintage,"build")
8655      $storage_usedTech(nodesModelToCalc,years,storage_techs,vintage)
8656      = storage_unitsBuild.l(nodesModelToCalc,years,storage_techs,vintage);
8657   
8658  storage_units_ext(map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,years),storage_techs(techs),vintage,"decom")
8659      $storage_usedTech(nodesModelToCalc,years,storage_techs,vintage)
8660      = storage_unitsDecom.l(nodesModelToCalc,years,storage_techs,vintage);
8661   
8662  storage_units_ext(map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,years),storage_techs(techs),vintage,"total")
8663      $storage_usedTech(nodesModelToCalc,years,storage_techs,vintage)
8664      = storage_unitsTotal.l(nodesModelToCalc,years,storage_techs,vintage);
8665   
8666  storage_caps_ext(map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,years),storage_techs(techs),vintage,commodity,capType)
8667      $storage_sizeParam(storage_techs,vintage,commodity,"size")
8668      = storage_units_ext(accNodesModel,nodesModelToCalc,accYears,years,storage_techs,vintage,capType)
8669          * storage_sizeParam(storage_techs,vintage,commodity,"size");
8670   
8671  storage_caps_ext(map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,years),storage_techs(techs),vintage,commodity,"lowerLimit")
8672      $(storage_usedTech(nodesModelToCalc,years,storage_techs,vintage)
8673          and storage_reservoirParam(nodesModelToCalc,years,storage_techs,"unitsLowerLimit") > 0
8674          and storage_size_min(nodesModelToCalc,years,storage_techs,commodity))
8675      = storage_reservoirParam(nodesModelToCalc,years,storage_techs,"unitsLowerLimit")
8676          * storage_size_min(nodesModelToCalc,years,storage_techs,commodity);
8677   
8678  storage_caps_ext(map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,years),storage_techs(techs),vintage,commodity,"upperLimit")
8679      $(storage_usedTech(nodesModelToCalc,years,storage_techs,vintage)
8680          and storage_reservoirParam(nodesModelToCalc,years,storage_techs,"unitsUpperLimit") < inf
8681          and storage_size_max(nodesModelToCalc,years,storage_techs,commodity))
8682      = storage_reservoirParam(nodesModelToCalc,years,storage_techs,"unitsUpperLimit")
8683          * storage_size_max(nodesModelToCalc,years,storage_techs,commodity);
8684   
8685  storage_caps_ext(map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,years),storage_techs(techs),vintage,commodity,"total_degraded")
8686      $(storage_usedCom(storage_techs,vintage,commodity)
8687          and (storage_techParam(storage_techs,vintage,"annualDegradation") > 0
8688               or storage_techParam(storage_techs,vintage,"usageDegradation")))
8689      = sum((degradation_states,yearsCom), (storage_degradationParam(storage_techs,vintage,degradation_states,"remainingCapacity")
8690                                      - (years.val - yearsCom.val) * storage_techParam(storage_techs,vintage,"annualDegradation"))
8691                                      * storage_unitsStateTracker.l(nodesModelToCalc,years,yearsCom,storage_techs,vintage,degradation_states)
8692                                      * storage_sizeParam(storage_techs,vintage,commodity,"size"));
8693   
8694  storage_caps(accNodesModel,accYears,storage_techs(techs),commodity,capType)
8695      = sum((nodesModelToCalc,years,vintage)
8696              $(map_accNodesPostCalc(accNodesModel,nodesModelToCalc)
8697                  and map_accYearsPostCalc(accYears,years)),
8698          storage_caps_ext(accNodesModel,nodesModelToCalc,accYears,years,storage_techs,vintage,commodity,capType));
8699  option clear = storage_caps_ext;
8700   
8701  storage_units(accNodesModel,accYears,storage_techs(techs),vintage,capType)
8702      = sum((nodesModelToCalc,years)
8703              $(map_accNodesPostCalc(accNodesModel,nodesModelToCalc)
8704                  and map_accYearsPostCalc(accYears,years)),
8705          storage_units_ext(accNodesModel,nodesModelToCalc,accYears,years,storage_techs,vintage,capType));
8706  option clear = storage_units_ext;
8707   
8708   
8709  * ==== storage levels and flows ====
8710   
8711  storage_flows_ext(timeModelToCalc,map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,yearsToCalc),storage_techs(techs),vintage,commodity)
8712      $(storage_usedTech(nodesModelToCalc,yearsToCalc,storage_techs,vintage) and balance_techComm(storage_techs,commodity))
8713      = storage_level.l(timeModelToCalc,nodesModelToCalc,yearsToCalc,storage_techs,vintage,commodity)
8714          - storage_level.l(timeModelToCalc--1,nodesModelToCalc,yearsToCalc,storage_techs,vintage,commodity)
8716      + storage_losses.l(timeModelToCalc,nodesModelToCalc,yearsToCalc,storage_techs,vintage,commodity)
8717          * timeLength(timeModelToCalc)
8719      ;
8720   
8721  storage_flows(timeModelToCalc,accNodesModel,accYears,storage_techs(techs),commodity)
8722      = sum((nodesModelToCalc,yearsToCalc,vintage)
8723              $(storage_usedTech(nodesModelToCalc,yearsToCalc,storage_techs,vintage) and balance_techComm(storage_techs,commodity)),
8724          storage_flows_ext(timeModelToCalc,accNodesModel,nodesModelToCalc,accYears,yearsToCalc,storage_techs,vintage,commodity));
8725  option clear = storage_flows_ext;
8726   
8727  storage_level_out_ext(timeModelToCalc,map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,yearsToCalc),storage_techs(techs),vintage,commodity)
8728      $(storage_usedTech(nodesModelToCalc,yearsToCalc,storage_techs,vintage) and balance_techComm(storage_techs,commodity))
8729      = storage_level.l(timeModelToCalc,nodesModelToCalc,yearsToCalc,storage_techs,vintage,commodity);
8730   
8731  storage_level_out(timeModelToCalc,accNodesModel,accYears,storage_techs(techs),commodity)
8732      = sum((nodesModelToCalc,yearsToCalc,vintage)
8733              $(storage_usedTech(nodesModelToCalc,yearsToCalc,storage_techs,vintage) and balance_techComm(storage_techs,commodity)),
8734          storage_level_out_ext(timeModelToCalc,accNodesModel,nodesModelToCalc,accYears,yearsToCalc,storage_techs,vintage,commodity));
8735  option clear = storage_level_out_ext;
8736   
8737  storage_flows_annual(accNodesModel,accYears,storage_techs(techs),commodity,"netto")
8738      = sum(timeModelToCalc,
8739          storage_flows(timeModelToCalc,accNodesModel,accYears,storage_techs,commodity));
8740   
8741  storage_flows_annual(accNodesModel,accYears,storage_techs(techs),commodity,"positive")
8742      = sum(timeModelToCalc
8743              $(storage_flows(timeModelToCalc,accNodesModel,accYears,storage_techs,commodity) > 0),
8744          storage_flows(timeModelToCalc,accNodesModel,accYears,storage_techs,commodity));
8745   
8746  storage_flows_annual(accNodesModel,accYears,storage_techs(techs),commodity,"negative")
8747      = sum(timeModelToCalc
8748              $(storage_flows(timeModelToCalc,accNodesModel,accYears,storage_techs,commodity) < 0),
8749          storage_flows(timeModelToCalc,accNodesModel,accYears,storage_techs,commodity));
8750   
8751  storage_flows_annual(accNodesModel,accYears,storage_techs(techs),commodity,"brutto")
8752      = storage_flows_annual(accNodesModel,accYears,storage_techs,commodity,"positive")
8753          + storage_flows_annual(accNodesModel,accYears,storage_techs,commodity,"negative");
8754   
8755  storage_flows_annual(accNodesModel,accYears,storage_techs(techs),commodity,"flh")
8756      $(storage_flows_annual(accNodesModel,accYears,storage_techs,commodity,"brutto") > 0
8757          and storage_caps(accNodesModel,accYears,storage_techs,commodity,"total") > 0)
8758      = storage_flows_annual(accNodesModel,accYears,storage_techs,commodity,"brutto")
8759          / storage_caps(accNodesModel,accYears,storage_techs,commodity,"total");
8760   
8761  storage_losses_out(timeModelToCalc,accNodesModel,accYears,storage_techs(techs),commodity)
8762      = sum((nodesModelToCalc,yearsToCalc,vintage)
8763              $(storage_losses.l(timeModelToCalc,nodesModelToCalc,yearsToCalc,storage_techs,vintage,commodity)
8764                  and map_accNodesPostCalc(accNodesModel,nodesModelToCalc)
8765                  and map_accYearsPostCalc(accYears,yearsToCalc)),
8766          storage_losses.l(timeModelToCalc,nodesModelToCalc,yearsToCalc,storage_techs,vintage,commodity)
8767          * timeLength(timeModelToCalc));
8768   
8769  storage_losses_annual(accNodesModel,accYears,storage_techs(techs),commodity,"netto")
8770      = sum(timeModelToCalc,
8771          storage_losses_out(timeModelToCalc,accNodesModel,accYears,storage_techs,commodity));
8772   
8773   
8774  * == commodity balance ==
8775   
8776  commodity_balance_ext(timeModelToCalc,map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,yearsToCalc),converter_techs(techs),vintage,commodity)
8777      $(converter_usedTech(nodesModelToCalc,yearsToCalc,converter_techs,vintage)
8778          and balance_usedConverter(nodesModelToCalc,yearsToCalc,commodity))
8779      = sum((activity)
8780              $(converter_coefficientProfile(timeModelToCalc,nodesModelToCalc,yearsToCalc,converter_techs,vintage,activity,commodity)),
8781          converter_activity.l(timeModelToCalc,nodesModelToCalc,yearsToCalc,converter_techs,vintage,activity)
8782              * timeLength(timeModelToCalc)
8783              * converter_coefficientProfile(timeModelToCalc,nodesModelToCalc,yearsToCalc,converter_techs,vintage,activity,commodity)
8784          + converter_unitsUsingActivity_MIP.l(timeModelToCalc,nodesModelToCalc,yearsToCalc,converter_techs,vintage,activity)
8785              * timeLength(timeModelToCalc)
8786              * converter_coefficient(converter_techs,vintage,activity,commodity,"constant"));
8787   
8788  commodity_balance_ext(timeModelToCalc,map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,yearsToCalc),storage_techs(techs),vintage,commodity)
8789      $(storage_usedTech(nodesModelToCalc,yearsToCalc,storage_techs,vintage)
8790          and storage_sizeParam(storage_techs,vintage,commodity,"size"))
8791      = commodity_balance_ext(timeModelToCalc,accNodesModel,nodesModelToCalc,accYears,yearsToCalc,storage_techs,vintage,commodity)
8792      + storage_level.l(timeModelToCalc--1,nodesModelToCalc,yearsToCalc,storage_techs,vintage,commodity)
8793          - storage_level.l(timeModelToCalc,nodesModelToCalc,yearsToCalc,storage_techs,vintage,commodity)
8794      - storage_losses.l(timeModelToCalc,nodesModelToCalc,yearsToCalc,storage_techs,vintage,commodity)
8795      * timeLength(timeModelToCalc);
8796   
8797  commodity_balance_ext(timeModelToCalc,map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,yearsToCalc),sourcesink_techs(techs),vintage,commodity)
8798      $(sourcesink_enabled(nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity)
8799          and sameas(yearsToCalc,vintage))
8800      = commodity_balance_ext(timeModelToCalc,accNodesModel,nodesModelToCalc,accYears,yearsToCalc,sourcesink_techs,vintage,commodity)
8801      + sourcesink_flow.l(timeModelToCalc,nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity)
8802      * timeLength(timeModelToCalc);
8803   
8804  commodity_balance_ext(timeModelToCalc,map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,yearsToCalc),transfer_techs(techs),vintage,commodity)
8805      $sum((linksModel)
8806          $(transfer_incidenceModel(nodesModelToCalc,linksModel)
8807                  and transfer_usedTech(linksModel,yearsToCalc,transfer_techs,vintage)
8808                  and transfer_coefficient(transfer_techs,vintage,commodity,"coefficient")), 1)
8809      = commodity_balance_ext(timeModelToCalc,accNodesModel,nodesModelToCalc,accYears,yearsToCalc,transfer_techs,vintage,commodity)
8810      + sum((linksModel)
8811              $(transfer_incidenceModel(nodesModelToCalc,linksModel)
8812                  and transfer_usedTech(linksModel,yearsToCalc,transfer_techs,vintage)
8813                  and transfer_coefficient(transfer_techs,vintage,commodity,"coefficient")),
8814   
8815              (transfer_flowAlong.l(timeModelToCalc,linksModel,yearsToCalc,transfer_techs,vintage)
8816                      $(transfer_incidenceModel(nodesModelToCalc,linksModel) > 0)
8817                + transfer_flowAgainst.l(timeModelToCalc,linksModel,yearsToCalc,transfer_techs,vintage)
8818                      $(transfer_incidenceModel(nodesModelToCalc,linksModel) < 0))
8819              * timeLength(timeModelToCalc)
8820              * transfer_coefficient(transfer_techs,vintage,commodity,"coefficient")
8821   
8822              - (transfer_flowAlong.l(timeModelToCalc,linksModel,yearsToCalc,transfer_techs,vintage)
8823                      $(transfer_incidenceModel(nodesModelToCalc,linksModel) < 0)
8824                + transfer_flowAgainst.l(timeModelToCalc,linksModel,yearsToCalc,transfer_techs,vintage)
8825                      $(transfer_incidenceModel(nodesModelToCalc,linksModel) > 0))
8826              * timeLength(timeModelToCalc)
8827              * transfer_coefficient(transfer_techs,vintage,commodity,"coefficient")
8828   
8829              + 0.5 * ((transfer_flowAlong.l(timeModelToCalc,linksModel,yearsToCalc,transfer_techs,vintage)
8830                          $(transfer_incidenceModel(nodesModelToCalc,linksModel) <> 0)
8831                      + transfer_flowAgainst.l(timeModelToCalc,linksModel,yearsToCalc,transfer_techs,vintage)
8832                          $(transfer_incidenceModel(nodesModelToCalc,linksModel) <> 0))
8833                      * timeLength(timeModelToCalc)
8834                      * ( transfer_coefPerFlow(transfer_techs,vintage,commodity,"coefPerFlow")
8835                          + sum(link_types,
8836                              transfer_coefPerLength(transfer_techs,vintage,commodity,link_types,"coefPerLength")
8837                              * transfer_lengthParam(linksModel,link_types,"length")))))
8838      ;
8839   
8840  commodity_balance(timeModelToCalc,accNodesModel,accYears,balance_techComm(techs,commodity))
8841      = sum((nodesModelToCalc,yearsToCalc,vintage)
8842              $(commodity_balance_ext(timeModelToCalc,accNodesModel,nodesModelToCalc,accYears,yearsToCalc,techs,vintage,commodity)
8843                  and map_accNodesPostCalc(accNodesModel,nodesModelToCalc)
8844                  and map_accYearsPostCalc(accYears,yearsToCalc)),
8845          commodity_balance_ext(timeModelToCalc,accNodesModel,nodesModelToCalc,accYears,yearsToCalc,techs,vintage,commodity));
8846  option clear = commodity_balance_ext;
8847   
8848   
8849  * ==== annual commodity sums ====
8850   
8851  commodity_balance_annual(accNodesModel,accYears,techs,commodity,"netto")
8852      = sum(timeModelToCalc,
8853          commodity_balance(timeModelToCalc,accNodesModel,accYears,techs,commodity));
8854   
8855  commodity_balance_annual(accNodesModel,accYears,techs,commodity,"positive")
8856      = sum(timeModelToCalc
8857              $(commodity_balance(timeModelToCalc,accNodesModel,accYears,techs,commodity) > 0),
8858          commodity_balance(timeModelToCalc,accNodesModel,accYears,techs,commodity));
8859   
8860  commodity_balance_annual(accNodesModel,accYears,techs,commodity,"negative")
8861      = sum(timeModelToCalc
8862              $(commodity_balance(timeModelToCalc,accNodesModel,accYears,techs,commodity) < 0),
8863          commodity_balance(timeModelToCalc,accNodesModel,accYears,techs,commodity));
8864   
8865  commodity_balance_annual(accNodesModel,accYears,techs,commodity,"brutto")
8866      = commodity_balance_annual(accNodesModel,accYears,techs,commodity,"positive")
8867          - commodity_balance_annual(accNodesModel,accYears,techs,commodity,"negative");
8868   
8869  commodity_balance_annual(accNodesModel,accYears,techs,commodity,"flh")
8870      $(commodity_balance_annual(accNodesModel,accYears,techs,commodity,"brutto") > 0
8871          and converter_caps(accNodesModel,accYears,techs,commodity,"total") > 0 )
8872      = commodity_balance_annual(accNodesModel,accYears,techs,commodity,"brutto")
8873          / converter_caps(accNodesModel,accYears,techs,commodity,"total");
8874   
8875   
8876  * ==== marginal information ====
8877   
8878  marginals_balance(timeModelToCalc,nodesModelToCalc,yearsToCalc,commodity)
8879    $balance_usedBalance(nodesModelToCalc,yearsToCalc,commodity)
8880    =
8881    Eq_balance_commodities.m(timeModelToCalc,nodesModelToCalc,yearsToCalc,commodity);
8882   
8883  marginals_sourcesink_profile(timeModelToCalc,nodesModelToCalc,yearsToCalc,sourcesink_techs(techs),commodity)
8884      $( sourcesink_flow.m(timeModelToCalc,nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity) <> 0 )
8885      =
8886      sourcesink_flow.m(timeModelToCalc,nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity);
8887   
8888  marginals_sourcesink_sum(nodesModelToCalc,yearsToCalc,sourcesink_techs(techs),commodity)
8889      $( ( Eq_sourcesink_useLowerSum.m(nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity)
8890          + Eq_sourcesink_useUpperSum.m(nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity)
8891          + Eq_sourcesink_useFixedSum.m(nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity) ) <> eps )
8892      =
8893      ( Eq_sourcesink_useLowerSum.m(nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity)
8894      + Eq_sourcesink_useUpperSum.m(nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity)
8895      + Eq_sourcesink_useFixedSum.m(nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity) );
8896   
8897  marginals_indicator_bounds(accNodesModel,accYears,indicator)
8898      $( accounting_indicator.m(accNodesModel,accYears,indicator) <> 0 )
8899      =
8900      accounting_indicator.m(accNodesModel,accYears,indicator);
8901   
8902   
8903  * ==== R2A postcalc information ====
8904   
8906   
8907   
8908  * ==== round profiles to reduce size of gdx ====
8909   
8911  commodity_balance(timeModelToCalc,accNodesModel,accYears,techs,commodity)
8912      $commodity_balance(timeModelToCalc,accNodesModel,accYears,techs,commodity)
8913      = round(commodity_balance(timeModelToCalc,accNodesModel,accYears,techs,commodity), 6);
8914   
8915  transfer_flows(timeModelToCalc,nodesModelToCalc,nodesModelToCalc_a,linksModel,yearsToCalc,transfer_techs,commodity)
8916      $transfer_flows(timeModelToCalc,nodesModelToCalc,nodesModelToCalc_a,linksModel,yearsToCalc,transfer_techs,commodity)
8917      = round(transfer_flows(timeModelToCalc,nodesModelToCalc,nodesModelToCalc_a,linksModel,yearsToCalc,transfer_techs,commodity), 6);
8918   
8919  transfer_losses(timeModelToCalc,nodesModelToCalc,nodesModelToCalc_a,linksModel,yearsToCalc,transfer_techs,commodity)
8920      $transfer_losses(timeModelToCalc,nodesModelToCalc,nodesModelToCalc_a,linksModel,yearsToCalc,transfer_techs,commodity)
8921      = round(transfer_losses(timeModelToCalc,nodesModelToCalc,nodesModelToCalc_a,linksModel,yearsToCalc,transfer_techs,commodity), 6);
8922   
8923  storage_flows(timeModelToCalc,accNodesModel,accYears,storage_techs,commodity)
8924      $storage_flows(timeModelToCalc,accNodesModel,accYears,storage_techs,commodity)
8925      = round(storage_flows(timeModelToCalc,accNodesModel,accYears,storage_techs,commodity), 6);
8926   
8927  storage_level_out(timeModelToCalc,accNodesModel,accYears,storage_techs,commodity)
8928      $storage_level_out(timeModelToCalc,accNodesModel,accYears,storage_techs,commodity)
8929      = round(storage_level_out(timeModelToCalc,accNodesModel,accYears,storage_techs,commodity), 6);
8930   
8931  marginals_balance(timeModelToCalc,nodesModelToCalc,yearsToCalc,commodity)
8932      $marginals_balance(timeModelToCalc,nodesModelToCalc,yearsToCalc,commodity)
8933      = round(marginals_balance(timeModelToCalc,nodesModelToCalc,yearsToCalc,commodity), 6);
8934   
8935  marginals_sourcesink_profile(timeModelToCalc,nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity)
8936      $marginals_sourcesink_profile(timeModelToCalc,nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity)
8937      = round(marginals_sourcesink_profile(timeModelToCalc,nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity), 6);
8939   
INCLUDE    C:\Local\REMix\framework\remix\framework\model\source\postcalc\writegdx.gms
8942  * SPDX-FileCopyrightText: Copyright (c) 2023 German Aerospace Center (DLR)
8943  * SPDX-License-Identifier: BSD-3-Clause
8944   
8947   
8948  execute_unload "C:\Local\REMix\remix_nz\output\med_pop_out_base_2030\result\med_pop_out_base_2030.gdx"
8949      metadata
8950      timeModel
8951      timeModelToCalc
8952      nodesModel
8953      linksModel
8954      indicator
8955      commodity
8956      techs
8957      accNodesModel
8958      accYears
8959   
8960      map_nodesModel
8961      map_linksModel
8962      map_nodesAccounting
8963   
8964      indicator_accounting
8965      indicator_accounting_ref
8966      indicator_accounting_comp
8967      indicator_accounting_detailed
8968      indicator_accounting_links
8969   
8970      converter_caps
8971      converter_units
8973   
8974      transfer_caps
8975      transfer_links
8976      transfer_flows
8977      transfer_flows_annual
8978      transfer_losses
8979      transfer_losses_annual
8980   
8981      storage_caps
8982      storage_units
8983      storage_flows
8984      storage_level_out
8985      storage_flows_annual
8986      storage_losses_out
8987      storage_losses_annual
8989   
8990      commodity_balance
8991      commodity_balance_annual
8992   
8993      marginals_balance
8994      marginals_sourcesink_profile
8995      marginals_sourcesink_sum
8996      marginals_indicator_bounds
8997   
8999      ;
GAMS 40.4.0  d540b52e Oct 3, 2022           WEX-WEI x86 64bit/MS Windows - 10/04/23 17:20:14 Page 2
G e n e r a l   A l g e b r a i c   M o d e l i n g   S y s t e m
Include File Summary


   SEQ   GLOBAL TYPE      PARENT   LOCAL  FILENAME

     1        1 INPUT          0       0  C:\Local\REMix\framework\remix\framework\model\run_remix.gms
     2       12 IF DEXIST      1      12  C:\Local\REMix\remix_nz\output\med_pop_out_base_2030\data\
     3       15 INCLUDE        1      15  .C:\Local\REMix\framework\remix\framework\model\source\metadata.gms
     4       23 CALL           3       8  .printf "remix_version \"0.9.2\"\n" > c:\Local\REMix\remix_nz\process\225b\\metadata
     5       24 CALL           3       9  .printf "gams_version \"40.4.0\"\n" >> c:\Local\REMix\remix_nz\process\225b\\metadata
     6       25 CALL           3      10  .printf "timestamp \"10/04/23 17:20:14\"\n" >> c:\Local\REMix\remix_nz\process\225b\\metadata
     7       27 CALL           3      12  .printf "framework_path " >> c:\Local\REMix\remix_nz\process\225b\\metadata
     8       29 CALL           3      14  .cd C:\Local\REMix\framework\remix\framework\model\source && cd| sed "s/^/\"/;s/$/\"/" >> c:\Local\REMix\remix_nz\process\225b\\metadata
     9       31 CALL           3      18  .printf "\n" >> c:\Local\REMix\remix_nz\process\225b\\metadata
    10       32 CALL           3      19  .printf "framework_hash " >> c:\Local\REMix\remix_nz\process\225b\\metadata
    11       34 CALL           3      21  .cd C:\Local\REMix\framework\remix\framework\model\source && git rev-parse HEAD >nul 2>&1 && git rev-parse HEAD >> c:\Local\REMix\remix_nz\process\225b\\metadata
    12       36 CALL           3      25  .printf "\n" >> c:\Local\REMix\remix_nz\process\225b\\metadata
    13       37 CALL           3      26  .printf "framework_branch " >> c:\Local\REMix\remix_nz\process\225b\\metadata
    14       39 CALL           3      28  .cd C:\Local\REMix\framework\remix\framework\model\source && git rev-parse --abbrev-ref HEAD >nul 2>&1 && git rev-parse --abbrev-ref HEAD | sed "s/^/\"/;s/$/\"/" >> c:\Local\REMix\remix_nz\process\225b\\metadata
    15       41 CALL           3      32  .printf "\n" >> c:\Local\REMix\remix_nz\process\225b\\metadata
    16       43 CALL           3      34  .printf "project_path " >> c:\Local\REMix\remix_nz\process\225b\\metadata
    17       45 CALL           3      36  .cd C:\Local\REMix\remix_nz\output\med_pop_out_base_2030\data\./ && cd| sed "s/^/\"/;s/$/\"/" >> c:\Local\REMix\remix_nz\process\225b\\metadata
    18       47 CALL           3      40  .printf "\n" >> c:\Local\REMix\remix_nz\process\225b\\metadata
    19       48 CALL           3      41  .printf "project_hash " >> c:\Local\REMix\remix_nz\process\225b\\metadata
    20       50 CALL           3      43  .cd C:\Local\REMix\remix_nz\output\med_pop_out_base_2030\data\./ && git rev-parse HEAD >nul 2>&1 && git rev-parse HEAD | sed "s/^/\"/;s/$/\"/" >> c:\Local\REMix\remix_nz\process\225b\\metadata
    21       52 CALL           3      47  .printf "\n" >> c:\Local\REMix\remix_nz\process\225b\\metadata
    22       53 CALL           3      48  .printf "project_branch " >> c:\Local\REMix\remix_nz\process\225b\\metadata
    23       55 CALL           3      50  .cd C:\Local\REMix\remix_nz\output\med_pop_out_base_2030\data\./ && git rev-parse --abbrev-ref HEAD >nul 2>&1 && git rev-parse --abbrev-ref HEAD | sed "s/^/\"/;s/$/\"/" >> c:\Local\REMix\remix_nz\process\225b\\metadata
    24       57 CALL           3      54  .printf "\n" >> c:\Local\REMix\remix_nz\process\225b\\metadata
    25       60 INCLUDE        3      57  ..c:\Local\REMix\remix_nz\process\225b\metadata
    26       77 INCLUDE        1      16  .C:\Local\REMix\framework\remix\framework\model\source\data_inheritance.gms
    27      119 INCLUDE        1      25  .C:\Local\REMix\framework\remix\framework\model\source\remix.gms
    28      140 INCLUDE       27      21  ..C:\Local\REMix\framework\remix\framework\model\source\sets.gms
    29      160 IF EXIST      28      20  ..c:\Local\REMix\remix_nz\process\225b\map_aggregatetimemodel.csv
    30      211 IF EXIST      28      97  ..c:\Local\REMix\remix_nz\process\225b\set_nodesmodel.csv
    31      211 INCLUDE       28      97  ...c:\Local\REMix\remix_nz\process\225b\set_nodesmodel.csv
    32      224 IF EXIST      28      99  ..c:\Local\REMix\remix_nz\process\225b\set_nodesmodel.csv
    33      231 IF EXIST      28     106  ..c:\Local\REMix\remix_nz\process\225b\set_nodesdata.csv
    34      231 INCLUDE       28     106  ...c:\Local\REMix\remix_nz\process\225b\set_nodesdata.csv
    35      244 IF EXIST      28     108  ..c:\Local\REMix\remix_nz\process\225b\set_nodesdata.csv
    36      250 IF EXIST      28     114  ..c:\Local\REMix\remix_nz\process\225b\set_nodesmodelsel.csv
    37      250 INCLUDE       28     114  ...c:\Local\REMix\remix_nz\process\225b\set_nodesmodelsel.csv
    38      263 IF EXIST      28     116  ..c:\Local\REMix\remix_nz\process\225b\set_nodesmodelsel.csv
    39      265 IF EXIST      28     118  ..c:\Local\REMix\remix_nz\process\225b\set_nodesmodelsel.csv
    40      278 IF EXIST      28     131  ..c:\Local\REMix\remix_nz\process\225b\map_aggregatenodesmodel.csv
    41      278 INCLUDE       28     131  ...c:\Local\REMix\remix_nz\process\225b\map_aggregatenodesmodel.csv
    42      291 IF EXIST      28     133  ..c:\Local\REMix\remix_nz\process\225b\map_aggregatenodesmodel.csv
    43      294 IF EXIST      28     136  ..c:\Local\REMix\remix_nz\process\225b\map_aggregatenodesmodel.csv
    44      317 IF EXIST      28     159  ..c:\Local\REMix\remix_nz\process\225b\set_years.csv
    45      317 INCLUDE       28     159  ...c:\Local\REMix\remix_nz\process\225b\set_years.csv
    46      327 IF EXIST      28     161  ..c:\Local\REMix\remix_nz\process\225b\set_years.csv
    47      336 IF EXIST      28     170  ..c:\Local\REMix\remix_nz\process\225b\set_years.csv
    48      336 INCLUDE       28     170  ...c:\Local\REMix\remix_nz\process\225b\set_years.csv
    49      346 IF EXIST      28     172  ..c:\Local\REMix\remix_nz\process\225b\set_years.csv
    50      352 IF EXIST      28     178  ..c:\Local\REMix\remix_nz\process\225b\set_yearssel.csv
    51      352 INCLUDE       28     178  ...c:\Local\REMix\remix_nz\process\225b\set_yearssel.csv
    52      355 IF EXIST      28     180  ..c:\Local\REMix\remix_nz\process\225b\set_yearssel.csv
    53      373 IF EXIST      28     198  ..c:\Local\REMix\remix_nz\process\225b\set_activities.csv
    54      373 INCLUDE       28     198  ...c:\Local\REMix\remix_nz\process\225b\set_activities.csv
    55      382 IF EXIST      28     200  ..c:\Local\REMix\remix_nz\process\225b\set_activities.csv
    56      390 IF EXIST      28     208  ..c:\Local\REMix\remix_nz\process\225b\set_gridsegments.csv
    57      392 IF EXIST      28     210  ..c:\Local\REMix\remix_nz\process\225b\set_gridsegments.csv
    58      400 IF EXIST      28     218  ..c:\Local\REMix\remix_nz\process\225b\set_linksdata.csv
    59      400 INCLUDE       28     218  ...c:\Local\REMix\remix_nz\process\225b\set_linksdata.csv
    60      414 IF EXIST      28     220  ..c:\Local\REMix\remix_nz\process\225b\set_linksdata.csv
    61      432 IF EXIST      28     238  ..c:\Local\REMix\remix_nz\process\225b\set_link_types.csv
    62      432 INCLUDE       28     238  ...c:\Local\REMix\remix_nz\process\225b\set_link_types.csv
    63      436 IF EXIST      28     240  ..c:\Local\REMix\remix_nz\process\225b\set_link_types.csv
    64      445 IF EXIST      28     249  ..c:\Local\REMix\remix_nz\process\225b\set_commodities.csv
    65      445 INCLUDE       28     249  ...c:\Local\REMix\remix_nz\process\225b\set_commodities.csv
    66      455 IF EXIST      28     251  ..c:\Local\REMix\remix_nz\process\225b\set_commodities.csv
    67      464 IF EXIST      28     260  ..c:\Local\REMix\remix_nz\process\225b\set_indicators.csv
    68      464 INCLUDE       28     260  ...c:\Local\REMix\remix_nz\process\225b\set_indicators.csv
    69      473 IF EXIST      28     262  ..c:\Local\REMix\remix_nz\process\225b\set_indicators.csv
    70      482 IF EXIST      28     271  ..c:\Local\REMix\remix_nz\process\225b\set_converter_techs.csv
    71      482 INCLUDE       28     271  ...c:\Local\REMix\remix_nz\process\225b\set_converter_techs.csv
    72      500 IF EXIST      28     274  ..c:\Local\REMix\remix_nz\process\225b\set_storage_techs.csv
    73      500 INCLUDE       28     274  ...c:\Local\REMix\remix_nz\process\225b\set_storage_techs.csv
    74      504 IF EXIST      28     277  ..c:\Local\REMix\remix_nz\process\225b\set_transfer_techs.csv
    75      504 INCLUDE       28     277  ...c:\Local\REMix\remix_nz\process\225b\set_transfer_techs.csv
    76      508 IF EXIST      28     280  ..c:\Local\REMix\remix_nz\process\225b\set_sourcesink_techs.csv
    77      508 INCLUDE       28     280  ...c:\Local\REMix\remix_nz\process\225b\set_sourcesink_techs.csv
    78      515 IF EXIST      28     285  ..c:\Local\REMix\remix_nz\process\225b\set_converter_techs.csv
    79      515 INCLUDE       28     285  ...c:\Local\REMix\remix_nz\process\225b\set_converter_techs.csv
    80      531 IF EXIST      28     286  ..c:\Local\REMix\remix_nz\process\225b\set_converter_techs.csv
    81      535 IF EXIST      28     290  ..c:\Local\REMix\remix_nz\process\225b\set_storage_techs.csv
    82      535 INCLUDE       28     290  ...c:\Local\REMix\remix_nz\process\225b\set_storage_techs.csv
    83      537 IF EXIST      28     291  ..c:\Local\REMix\remix_nz\process\225b\set_storage_techs.csv
    84      542 IF EXIST      28     296  ..c:\Local\REMix\remix_nz\process\225b\set_transfer_techs.csv
    85      542 INCLUDE       28     296  ...c:\Local\REMix\remix_nz\process\225b\set_transfer_techs.csv
    86      544 IF EXIST      28     297  ..c:\Local\REMix\remix_nz\process\225b\set_transfer_techs.csv
    87      548 IF EXIST      28     301  ..c:\Local\REMix\remix_nz\process\225b\set_sourcesink_techs.csv
    88      548 INCLUDE       28     301  ...c:\Local\REMix\remix_nz\process\225b\set_sourcesink_techs.csv
    89      551 IF EXIST      28     302  ..c:\Local\REMix\remix_nz\process\225b\set_sourcesink_techs.csv
    90      561 IF EXIST      28     312  ..c:\Local\REMix\remix_nz\process\225b\set_degradation_states.csv
    91      563 IF EXIST      28     314  ..c:\Local\REMix\remix_nz\process\225b\set_degradation_states.csv
    92      572 IF EXIST      28     323  ..c:\Local\REMix\remix_nz\process\225b\set_soc.csv
    93      574 IF EXIST      28     325  ..c:\Local\REMix\remix_nz\process\225b\set_soc.csv
    94      590 IF EXIST      28     341  ..c:\Local\REMix\remix_nz\process\225b\transfer_linkstartend.csv
    95      590 INCLUDE       28     341  ...c:\Local\REMix\remix_nz\process\225b\transfer_linkstartend.csv
    96      617 IF EXIST      28     343  ..c:\Local\REMix\remix_nz\process\225b\transfer_linkstartend.csv
    97      631 BATINCLUDE    28     357  ...C:\Local\REMix\framework\remix\framework\model\source\battools\aggregateNodes.gms
    98      740 IF EXIST      28     464  ..c:\Local\REMix\remix_nz\process\225b\set_accnodes.csv
    99      742 IF EXIST      28     466  ..c:\Local\REMix\remix_nz\process\225b\set_accnodes.csv
   100      807 IF EXIST      28     531  ..c:\Local\REMix\remix_nz\process\225b\map_accnodes.csv
   101      809 IF EXIST      28     533  ..c:\Local\REMix\remix_nz\process\225b\map_accnodes.csv
   102      863 INCLUDE       27      22  ..C:\Local\REMix\framework\remix\framework\model\source\accounting\input.gms
   103      895 IF EXIST     102      32  ..c:\Local\REMix\remix_nz\process\225b\accounting_converterunits.csv
   104      895 INCLUDE      102      32  ...c:\Local\REMix\remix_nz\process\225b\accounting_converterunits.csv
   105      992 IF EXIST     102      34  ..c:\Local\REMix\remix_nz\process\225b\accounting_converterunits.csv
   106     1006 IF EXIST     102      48  ..c:\Local\REMix\remix_nz\process\225b\accounting_converteractivity.csv
   107     1006 INCLUDE      102      48  ...c:\Local\REMix\remix_nz\process\225b\accounting_converteractivity.csv
   108     1013 IF EXIST     102      50  ..c:\Local\REMix\remix_nz\process\225b\accounting_converteractivity.csv
   109     1030 IF EXIST     102      67  ..c:\Local\REMix\remix_nz\process\225b\accounting_converterstartup.csv
   110     1032 IF EXIST     102      69  ..c:\Local\REMix\remix_nz\process\225b\accounting_converterstartup.csv
   111     1051 IF EXIST     102      88  ..c:\Local\REMix\remix_nz\process\225b\accounting_storageunits.csv
   112     1051 INCLUDE      102      88  ...c:\Local\REMix\remix_nz\process\225b\accounting_storageunits.csv
   113     1062 IF EXIST     102      90  ..c:\Local\REMix\remix_nz\process\225b\accounting_storageunits.csv
   114     1084 IF EXIST     102     112  ..c:\Local\REMix\remix_nz\process\225b\accounting_transferlinks.csv
   115     1084 INCLUDE      102     112  ...c:\Local\REMix\remix_nz\process\225b\accounting_transferlinks.csv
   116     1089 IF EXIST     102     114  ..c:\Local\REMix\remix_nz\process\225b\accounting_transferlinks.csv
   117     1111 IF EXIST     102     136  ..c:\Local\REMix\remix_nz\process\225b\accounting_transferperlength.csv
   118     1111 INCLUDE      102     136  ...c:\Local\REMix\remix_nz\process\225b\accounting_transferperlength.csv
   119     1118 IF EXIST     102     138  ..c:\Local\REMix\remix_nz\process\225b\accounting_transferperlength.csv
   120     1133 IF EXIST     102     153  ..c:\Local\REMix\remix_nz\process\225b\accounting_sourcesinkflow.csv
   121     1133 INCLUDE      102     153  ...c:\Local\REMix\remix_nz\process\225b\accounting_sourcesinkflow.csv
   122     1143 IF EXIST     102     155  ..c:\Local\REMix\remix_nz\process\225b\accounting_sourcesinkflow.csv
   123     1157 IF EXIST     102     169  ..c:\Local\REMix\remix_nz\process\225b\accounting_perindicator.csv
   124     1157 INCLUDE      102     169  ...c:\Local\REMix\remix_nz\process\225b\accounting_perindicator.csv
   125     1165 IF EXIST     102     171  ..c:\Local\REMix\remix_nz\process\225b\accounting_perindicator.csv
   126     1191 IF EXIST     102     197  ..c:\Local\REMix\remix_nz\process\225b\accounting_indicatorbounds.csv
   127     1191 INCLUDE      102     197  ...c:\Local\REMix\remix_nz\process\225b\accounting_indicatorbounds.csv
   128     1195 IF EXIST     102     199  ..c:\Local\REMix\remix_nz\process\225b\accounting_indicatorbounds.csv
   129     1214 IF EXIST     102     218  ..c:\Local\REMix\remix_nz\process\225b\accounting_indicatorbounds_links.csv
   130     1216 IF EXIST     102     220  ..c:\Local\REMix\remix_nz\process\225b\accounting_indicatorbounds_links.csv
   131     1222 BATINCLUDE   102     226  ...C:\Local\REMix\framework\remix\framework\model\source\battools\aggregateAccountingMean.gms
   132     1281 BATINCLUDE   102     227  ...C:\Local\REMix\framework\remix\framework\model\source\battools\aggregateAccountingMean.gms
   133     1324 BATINCLUDE   102     228  ...C:\Local\REMix\framework\remix\framework\model\source\battools\aggregateAccountingMean.gms
   134     1367 BATINCLUDE   102     229  ...C:\Local\REMix\framework\remix\framework\model\source\battools\aggregateAccountingMean.gms
   135     1426 BATINCLUDE   102     230  ...C:\Local\REMix\framework\remix\framework\model\source\battools\aggregateAccountingMean.gms
   136     1485 BATINCLUDE   102     231  ...C:\Local\REMix\framework\remix\framework\model\source\battools\aggregateAccountingMean.gms
   137     1544 BATINCLUDE   102     232  ...C:\Local\REMix\framework\remix\framework\model\source\battools\aggregateAccountingMean.gms
   138     1953 INCLUDE       27      23  ..C:\Local\REMix\framework\remix\framework\model\source\accounting\annuities.gms
   139     2025 INCLUDE       27      25  ..C:\Local\REMix\framework\remix\framework\model\source\methods\mga_pre.gms
   140     2031 INCLUDE       27      26  ..C:\Local\REMix\framework\remix\framework\model\source\methods\pareto_pre.gms
   141     2037 INCLUDE       27      27  ..C:\Local\REMix\framework\remix\framework\model\source\postcalc\declaration.gms
   142     2054 IF DEXIST    141      17  ..C:\Local\REMix\remix_nz\output\med_pop_out_base_2030\result\
   143     2255 INCLUDE       27      28  ..C:\Local\REMix\framework\remix\framework\model\source\loadgdx.gms
   144     2264 INCLUDE       27      30  ..C:\Local\REMix\framework\remix\framework\model\source\core\converter.gms
   145     2367 IF EXIST     144     103  ..c:\Local\REMix\remix_nz\process\225b\converter_capacityparam.csv
   146     2367 INCLUDE      144     103  ...c:\Local\REMix\remix_nz\process\225b\converter_capacityparam.csv
   147     3525 IF EXIST     144     105  ..c:\Local\REMix\remix_nz\process\225b\converter_capacityparam.csv
   148     3533 BATINCLUDE   144     113  ...C:\Local\REMix\framework\remix\framework\model\source\battools\aggregateNodes.gms
   149     3544 BATINCLUDE   144     114  ...C:\Local\REMix\framework\remix\framework\model\source\battools\aggregateNodes.gms
   150     3577 IF EXIST     144     137  ..c:\Local\REMix\remix_nz\process\225b\converter_techparam.csv
   151     3577 INCLUDE      144     137  ...c:\Local\REMix\remix_nz\process\225b\converter_techparam.csv
   152     3627 IF EXIST     144     139  ..c:\Local\REMix\remix_nz\process\225b\converter_techparam.csv
   153     3649 IF EXIST     144     161  ..c:\Local\REMix\remix_nz\process\225b\converter_activityprofile.csv
   154     3649 INCLUDE      144     161  ...c:\Local\REMix\remix_nz\process\225b\converter_activityprofile.csv
   155     3717 IF EXIST     144     162  ..c:\Local\REMix\remix_nz\process\225b\converter_activityprofile.csv
   156     3719 IF EXIST     144     164  ..c:\Local\REMix\remix_nz\process\225b\converter_activityprofile.csv
   157     3739 IF EXIST     144     184  ..c:\Local\REMix\remix_nz\process\225b\converter_coefficient.csv
   158     3739 INCLUDE      144     184  ...c:\Local\REMix\remix_nz\process\225b\converter_coefficient.csv
   159     3913 IF EXIST     144     185  ..c:\Local\REMix\remix_nz\process\225b\converter_coefficient.csv
   160     3914 IF EXIST     144     186  ..c:\Local\REMix\remix_nz\process\225b\converter_coefficient.csv
   161     3916 IF EXIST     144     188  ..c:\Local\REMix\remix_nz\process\225b\converter_coefficient.csv
   162     3928 IF EXIST     144     200  ..c:\Local\REMix\remix_nz\process\225b\converter_coefficientprofile.csv
   163     3929 IF EXIST     144     201  ..c:\Local\REMix\remix_nz\process\225b\converter_coefficientprofile.csv
   164     3931 IF EXIST     144     203  ..c:\Local\REMix\remix_nz\process\225b\converter_coefficientprofile.csv
   165     4864 INCLUDE       27      31  ..C:\Local\REMix\framework\remix\framework\model\source\core\storage.gms
   166     4955 IF EXIST     165      91  ..c:\Local\REMix\remix_nz\process\225b\storage_reservoirparam.csv
   167     4955 INCLUDE      165      91  ...c:\Local\REMix\remix_nz\process\225b\storage_reservoirparam.csv
   168     5035 IF EXIST     165      93  ..c:\Local\REMix\remix_nz\process\225b\storage_reservoirparam.csv
   169     5039 BATINCLUDE   165      97  ...C:\Local\REMix\framework\remix\framework\model\source\battools\aggregateNodes.gms
   170     5050 BATINCLUDE   165      98  ...C:\Local\REMix\framework\remix\framework\model\source\battools\aggregateNodes.gms
   171     5086 IF EXIST     165     124  ..c:\Local\REMix\remix_nz\process\225b\storage_techparam.csv
   172     5086 INCLUDE      165     124  ...c:\Local\REMix\remix_nz\process\225b\storage_techparam.csv
   173     5093 IF EXIST     165     126  ..c:\Local\REMix\remix_nz\process\225b\storage_techparam.csv
   174     5114 IF EXIST     165     147  ..c:\Local\REMix\remix_nz\process\225b\storage_sizeparam.csv
   175     5114 INCLUDE      165     147  ...c:\Local\REMix\remix_nz\process\225b\storage_sizeparam.csv
   176     5121 IF EXIST     165     149  ..c:\Local\REMix\remix_nz\process\225b\storage_sizeparam.csv
   177     5138 IF EXIST     165     166  ..c:\Local\REMix\remix_nz\process\225b\storage_socparam.csv
   178     5140 IF EXIST     165     168  ..c:\Local\REMix\remix_nz\process\225b\storage_socparam.csv
   179     5159 IF EXIST     165     187  ..c:\Local\REMix\remix_nz\process\225b\storage_degradationparam.csv
   180     5161 IF EXIST     165     189  ..c:\Local\REMix\remix_nz\process\225b\storage_degradationparam.csv
   181     5190 IF EXIST     165     218  ..c:\Local\REMix\remix_nz\process\225b\storage_levelprofile.csv
   182     5191 IF EXIST     165     219  ..c:\Local\REMix\remix_nz\process\225b\storage_levelprofile.csv
   183     5193 IF EXIST     165     221  ..c:\Local\REMix\remix_nz\process\225b\storage_levelprofile.csv
   184     6013 INCLUDE       27      32  ..C:\Local\REMix\framework\remix\framework\model\source\core\transfer.gms
   185     6080 IF EXIST     184      73  ..c:\Local\REMix\remix_nz\process\225b\transfer_linksparam.csv
   186     6080 INCLUDE      184      73  ...c:\Local\REMix\remix_nz\process\225b\transfer_linksparam.csv
   187     6095 IF EXIST     184      75  ..c:\Local\REMix\remix_nz\process\225b\transfer_linksparam.csv
   188     6111 IF EXIST     184      91  ..c:\Local\REMix\remix_nz\process\225b\transfer_flowprofile.csv
   189     6113 IF EXIST     184      93  ..c:\Local\REMix\remix_nz\process\225b\transfer_flowprofile.csv
   190     6133 IF EXIST     184     113  ..c:\Local\REMix\remix_nz\process\225b\transfer_techparam.csv
   191     6133 INCLUDE      184     113  ...c:\Local\REMix\remix_nz\process\225b\transfer_techparam.csv
   192     6137 IF EXIST     184     115  ..c:\Local\REMix\remix_nz\process\225b\transfer_techparam.csv
   193     6151 IF EXIST     184     129  ..c:\Local\REMix\remix_nz\process\225b\transfer_coefficient.csv
   194     6151 INCLUDE      184     129  ...c:\Local\REMix\remix_nz\process\225b\transfer_coefficient.csv
   195     6155 IF EXIST     184     131  ..c:\Local\REMix\remix_nz\process\225b\transfer_coefficient.csv
   196     6169 IF EXIST     184     145  ..c:\Local\REMix\remix_nz\process\225b\transfer_coefperflow.csv
   197     6169 INCLUDE      184     145  ...c:\Local\REMix\remix_nz\process\225b\transfer_coefperflow.csv
   198     6173 IF EXIST     184     147  ..c:\Local\REMix\remix_nz\process\225b\transfer_coefperflow.csv
   199     6187 IF EXIST     184     161  ..c:\Local\REMix\remix_nz\process\225b\transfer_coefperlength.csv
   200     6187 INCLUDE      184     161  ...c:\Local\REMix\remix_nz\process\225b\transfer_coefperlength.csv
   201     6192 IF EXIST     184     163  ..c:\Local\REMix\remix_nz\process\225b\transfer_coefperlength.csv
   202     6206 IF EXIST     184     177  ..c:\Local\REMix\remix_nz\process\225b\transfer_reactperlength.csv
   203     6208 IF EXIST     184     179  ..c:\Local\REMix\remix_nz\process\225b\transfer_reactperlength.csv
   204     6222 IF EXIST     184     193  ..c:\Local\REMix\remix_nz\process\225b\transfer_lengthparam.csv
   205     6222 INCLUDE      184     193  ...c:\Local\REMix\remix_nz\process\225b\transfer_lengthparam.csv
   206     6249 IF EXIST     184     195  ..c:\Local\REMix\remix_nz\process\225b\transfer_lengthparam.csv
   207     6263 IF EXIST     184     209  ..c:\Local\REMix\remix_nz\process\225b\transfer_gridsegments.csv
   208     6265 IF EXIST     184     211  ..c:\Local\REMix\remix_nz\process\225b\transfer_gridsegments.csv
   209     6847 INCLUDE       27      33  ..C:\Local\REMix\framework\remix\framework\model\source\core\sourcesink.gms
   210     6885 IF EXIST     209      38  ..c:\Local\REMix\remix_nz\process\225b\sourcesink_config.csv
   211     6885 INCLUDE      209      38  ...c:\Local\REMix\remix_nz\process\225b\sourcesink_config.csv
   212     6976 IF EXIST     209      40  ..c:\Local\REMix\remix_nz\process\225b\sourcesink_config.csv
   213     6980 BATINCLUDE   209      44  ...C:\Local\REMix\framework\remix\framework\model\source\battools\aggregateNodes.gms
   214     7008 IF EXIST     209      62  ..c:\Local\REMix\remix_nz\process\225b\sourcesink_profile.csv
   215     7008 INCLUDE      209      62  ...c:\Local\REMix\remix_nz\process\225b\sourcesink_profile.csv
   216     7054 IF EXIST     209      63  ..c:\Local\REMix\remix_nz\process\225b\sourcesink_profile.csv
   217     7055 IF EXIST     209      64  ..c:\Local\REMix\remix_nz\process\225b\sourcesink_profile.csv
   218     7057 IF EXIST     209      66  ..c:\Local\REMix\remix_nz\process\225b\sourcesink_profile.csv
   219     7077 IF EXIST     209      86  ..c:\Local\REMix\remix_nz\process\225b\sourcesink_annualsum.csv
   220     7077 INCLUDE      209      86  ...c:\Local\REMix\remix_nz\process\225b\sourcesink_annualsum.csv
   221     7124 IF EXIST     209      88  ..c:\Local\REMix\remix_nz\process\225b\sourcesink_annualsum.csv
   222     7127 BATINCLUDE   209      91  ...C:\Local\REMix\framework\remix\framework\model\source\battools\aggregateNodes.gms
   223     7307 INCLUDE       27      34  ..C:\Local\REMix\framework\remix\framework\model\source\core\balance.gms
   224     7443 INCLUDE       27      36  ..C:\Local\REMix\framework\remix\framework\model\source\accounting\equations.gms
   225     7865 INCLUDE       27      37  ..C:\Local\REMix\framework\remix\framework\model\source\optiframe.gms
   226     7906 INCLUDE       27      71  ..C:\Local\REMix\framework\remix\framework\model\source\methods\checkanno.gms
   227     7917 INCLUDE       27      74  ..C:\Local\REMix\framework\remix\framework\model\source\methods\pips.gms
   228     7926 INCLUDE       27      77  ..C:\Local\REMix\framework\remix\framework\model\source\methods\solve.gms
   229     8132 INCLUDE       27      80  ..C:\Local\REMix\framework\remix\framework\model\source\methods\pareto.gms
   230     8141 INCLUDE       27      83  ..C:\Local\REMix\framework\remix\framework\model\source\methods\mga.gms
   231     8150 INCLUDE       27      86  ..C:\Local\REMix\framework\remix\framework\model\source\methods\iternodes.gms
   232     8159 INCLUDE       27      89  ..C:\Local\REMix\framework\remix\framework\model\source\postcalc\definition.gms
   233     8941 INCLUDE       27      90  ..C:\Local\REMix\framework\remix\framework\model\source\postcalc\writegdx.gms


COMPILATION TIME     =        7.844 SECONDS     33 MB  40.4.0 d540b52e WEX-WEI
GAMS 40.4.0  d540b52e Oct 3, 2022           WEX-WEI x86 64bit/MS Windows - 10/04/23 17:20:14 Page 3
G e n e r a l   A l g e b r a i c   M o d e l i n g   S y s t e m
Range Statistics    SOLVE remix Using MIP From line 8117


RANGE STATISTICS (ABSOLUTE NON-ZERO FINITE VALUES)

RHS       [min, max] : [ 6.600E-02, 1.165E+03] - Zero values observed as well
Bound     [min, max] : [        NA,        NA] - Zero values observed as well
Matrix    [min, max] : [ 6.000E-03, 1.994E+02]

GAMS 40.4.0  d540b52e Oct 3, 2022           WEX-WEI x86 64bit/MS Windows - 10/04/23 17:20:14 Page 4
G e n e r a l   A l g e b r a i c   M o d e l i n g   S y s t e m
Model Statistics    SOLVE remix Using MIP From line 8117


LOOPS                           optiframeToCalc   of1


MODEL STATISTICS

BLOCKS OF EQUATIONS          75     SINGLE EQUATIONS    3,968,658
BLOCKS OF VARIABLES          38     SINGLE VARIABLES    3,487,046
NON ZERO ELEMENTS    10,574,275


GENERATION TIME      =       25.422 SECONDS  2,399 MB  40.4.0 d540b52e WEX-WEI


EXECUTION TIME       =       31.140 SECONDS  2,399 MB  40.4.0 d540b52e WEX-WEI
               L O O P S         optiframeToCalc of1

GAMS 40.4.0  d540b52e Oct 3, 2022           WEX-WEI x86 64bit/MS Windows - 10/04/23 17:20:14 Page 5
G e n e r a l   A l g e b r a i c   M o d e l i n g   S y s t e m
Solution Report     SOLVE remix Using MIP From line 8117


               S O L V E      S U M M A R Y

     MODEL   remix               OBJECTIVE  accounting_objective
     TYPE    MIP                 DIRECTION  MINIMIZE
     SOLVER  CPLEX               FROM LINE  8117

**** SOLVER STATUS     1 Normal Completion
**** MODEL STATUS      1 Optimal
**** OBJECTIVE VALUE              172.9230

 RESOURCE USAGE, LIMIT        124.671    604800.000
 ITERATION COUNT, LIMIT       103    2147483647
--- GAMS/Cplex Link licensed for continuous and discrete problems.

Reading parameter(s) from "c:\Local\REMix\remix_nz\process\cplex.opt"
>>  rerun no
>>  lpmethod 4
>>  barorder 0
>>  preind 1
>>  scaind 0
>>  predual -1
>>  baralg 0
>>  barstartalg 1
>>  barepcomp 1e-6
>>  solutiontype 2
>>  startalg 4
>>  epgap 1e-3
>>  quality 1
>>  barcolnz 0
>>  threads 4
>>  parallelmode 1
Finished reading from "c:\Local\REMix\remix_nz\process\cplex.opt"

--- GMO setup time: 0.00s
--- Space for names approximately 480.36 Mb
--- Use option 'names no' to turn use of names off
--- GMO memory 1335.90 Mb (peak 1362.50 Mb)
--- Dictionary memory 0.00 Mb
--- Cplex 22.1.0.0 link memory 111.93 Mb (peak 783.60 Mb)
--- Starting Cplex


--- LP status (1): optimal.
--- Cplex Time: 118.45sec (det. 106553.88 ticks)


Optimal solution found
Objective:          172.922979

Solution Quality Statistics:
                                   unscaled                scaled
                               max         sum         max         sum
primal infeasibility        3.409e-05   5.274e-04   3.409e-05   5.274e-04
dual infeasibility          2.220e-16   2.776e-16   2.220e-16   2.776e-16
primal residual             9.737e-14   6.945e-12   9.737e-14   6.945e-12
dual residual               1.611e-10   3.820e-05   1.611e-10   3.820e-05
primal solution vector      1.729e+02   1.014e+05   1.729e+02   1.014e+05
dual solution vector        1.994e+02   2.806e+04   1.994e+02   2.806e+04
slacks                      1.164e+03   4.011e+04   1.164e+03   4.011e+04
reduced costs               1.994e+02   3.167e+05   1.994e+02   3.167e+05
comp. slackness viol.       4.239e-07   3.045e-04




**** REPORT SUMMARY :        0     NONOPT
                             0 INFEASIBLE
                             0  UNBOUNDED
GAMS 40.4.0  d540b52e Oct 3, 2022           WEX-WEI x86 64bit/MS Windows - 10/04/23 17:20:14 Page 6
G e n e r a l   A l g e b r a i c   M o d e l i n g   S y s t e m
E x e c u t i o n


**** REPORT FILE SUMMARY

opt c:\Local\REMix\remix_nz\process\cplex.opt


EXECUTION TIME       =       23.078 SECONDS  1,820 MB  40.4.0 d540b52e WEX-WEI


USER: Medium MUD - 10 User License                   S220920|0002AO-GEN
      University of Canterbury, Civil Engineering Department    DC16319
      License for teaching and research at degree granting institutions


**** FILE SUMMARY

Input      C:\Local\REMix\framework\remix\framework\model\run_remix.gms
Output     c:\Local\REMix\remix_nz\process\run_remix.lst
