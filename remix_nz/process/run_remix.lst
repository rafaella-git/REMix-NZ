GAMS 40.4.0  d540b52e Oct 3, 2022           WEX-WEI x86 64bit/MS Windows - 03/13/24 17:58:39 Page 1
G e n e r a l   A l g e b r a i c   M o d e l i n g   S y s t e m
C o m p i l a t i o n


   1  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
   2  * SPDX-License-Identifier: BSD-3-Clause
   3   
   4  * ==== REMix version number ====
   6   
   7  * ==== global settings ====
  12   
  14   
  15  * ==== write metadata and inherit dataset ====
INCLUDE    C:\Local\REMix\framework\remix\framework\model\source\metadata.gms
  24   
  28   
  44   
  60   
  61  set metadata(*) /
INCLUDE    c:\Local\REMix\remix_nz\process\225b\metadata
  63  remix_version "0.9.7"
  64  gams_version "40.4.0"
  65  timestamp "03/13/24 17:58:39"
  66  framework_path "C:\Local\REMix\framework\remix\framework\model\source"
  67   
  68  framework_hash 593697af38e014a75f2262c9ae82d00183c07d9d
  69   
  70  framework_branch "main"
  71   
  72  project_path "C:\Local\REMix\remix_nz\output\will\02-battery-overnight_2020-2035-2050\data"
  73   
  74  project_hash "593697af38e014a75f2262c9ae82d00183c07d9d"
  75   
  76  project_branch "main"
  77   
  78  /;
INCLUDE    C:\Local\REMix\framework\remix\framework\model\source\data_inheritance.gms
  80  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
  81  * SPDX-License-Identifier: BSD-3-Clause
  82   
  85   
  90   
  91  * pandas based data inheritance reading in the dat files, merging them and writing csv files in the scrdir
 113  ;
 114   
 118   
 119  * ==== run remix ====
INCLUDE    C:\Local\REMix\framework\remix\framework\model\source\remix.gms
 124  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
 125  * SPDX-License-Identifier: BSD-3-Clause
 126   
 127  * ==== global settings ====
 135   
 138   
 140   
 143   
 144  * ==== include modules ====
INCLUDE    C:\Local\REMix\framework\remix\framework\model\source\sets.gms
 146  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
 147  * SPDX-License-Identifier: BSD-3-Clause
 148   
 149  * // # sets
 150  * // Sets are the indices of variables and parameters.
 151   
 152  * // ## Reference
 153  * // {special_table_sets}
 154   
 155  * // ## Input Files
 156  * // {special_table_set_input_files}
 955   
 956  map_accNodes(accNodesModel,accNodesModel_aggregation)
 957      $sum((nodesData, nodesModelToCalc)
 958              $( sameas(nodesModelToCalc,accNodesModel)
 959                  and map_accNodesLoad(nodesData,accNodesModel_aggregation)
 960                  and aggregateNodesModel(nodesData,nodesModelToCalc)), 1) = yes;
 961   
 962  map_accNodes(accNodesModel,"global")$sum(nodesModelToCalc$sameas(accNodesModel,nodesModelToCalc), 1) = yes;
 963  map_accNodes(accNodesModel,"global")$sum(accNodes$sameas(accNodesModel,accNodes), 1) = yes;
 964  map_accNodes(accNodesModel,accNodesModel) = yes;
 965  map_accLinks(accLinksModel,"global")$sum(linksModelToCalc$sameas(accLinksModel,linksModelToCalc), 1) = yes;
 966  map_accLinks(accLinksModel,accLinksModel) = yes;
 967  map_accYears(accYears,"horizon")$sum(yearsToCalc$sameas(accYears,yearsToCalc), 1)  = yes;
 968  map_accYears(accYears,accYears) = yes;
 969   
 970  map_accNodesToCalc(accNodesModel,nodesModelToCalc)
 971      $sum((nodesData)
 972              $( map_accNodesLoad(nodesData,accNodesModel)
 973                  and aggregateNodesModel(nodesData,nodesModelToCalc)), 1) = yes;
 974   
 975  map_accNodesToCalc("global",nodesModelToCalc) = yes;
 976  map_accNodesToCalc(accNodesModel,nodesModelToCalc)$sameas(accNodesModel,nodesModelToCalc) = yes;
 977  map_accLinksToCalc("global",linksModelToCalc) = yes;
 978  map_accLinksToCalc(accLinksModel,linksModelToCalc)$sameas(accLinksModel,linksModelToCalc) = yes;
 979  map_accYearsToCalc("horizon",yearsToCalc) = yes;
 980  map_accYearsToCalc(accYears,yearsToCalc)$sameas(accYears,yearsToCalc) = yes;
 981   
 982  * Duplicate sets for postcalc reporting without horizon and accYears
 983  map_accNodesPostCalc(accNodesModel,nodesModelToCalc) = map_accNodesToCalc(accNodesModel,nodesModelToCalc);
 984  map_accLinksPostCalc(accLinksModel,linksModelToCalc) = map_accLinksToCalc(accLinksModel,linksModelToCalc);
 985  map_accYearsPostCalc(accYears,yearsToCalc)$sameas(accYears,yearsToCalc) = yes;
 986  map_accYearsPostCalc(accYears,years)$(sameas(accYears,years) and years.val < sum(yearsToCalc$(ord(yearsToCalc) = 1), yearsToCalc.val)) = yes;
 987   
 988  set map_nodesAccounting(accNodesModel_aggregation,accNodesModel) "Map accounting nodes describes the mapping between model accounting nodes and data nodes." ;
 989  option map_nodesAccounting < map_accNodes;
 990   
 991  * ==== Generic sets  ====
 992  * These set names are repeated across different profile parameters.
 993  * they are not strictly related to each other and are not input data but
 994  * are needed for validation.
 995  ** // PROFILE: profileTypes | Profile Types | OEO_00140056:flow potential | set_profiletypes.csv
 996   
 997  ** // SET: scenario | Scenario | OEO_00000364:scenario | set_scenarios.csv
 998  * "Scenario indexes help to differentiate scenarios." /
 999   
1000  ** // SET: capType | Capacity Types | OEO_00030019:balance process attribute | set_captypes.csv
1001  * "Capacity types differentiate investment decisions." /
1002   
1003  ** // SET: balanceType | Balance Types | OEO_00030019:balance process attribute | set_balancetypes.csv
1004  * "Balance types differentiate types of balances." /
INCLUDE    C:\Local\REMix\framework\remix\framework\model\source\accounting\input.gms
1006  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
1007  * SPDX-License-Identifier: BSD-3-Clause
1008   
1009  * // # accounting_input
1010  * // The parameters in this file describe the accounting of indicators in the model.
1011   
1012  * // ## Variables
1013  * // {special_table_input_variables}
1400   
1401  * Aggregate accounting parameters
BATINCLUDE C:\Local\REMix\framework\remix\framework\model\source\battools\aggregateAccountingMean.gms
1403  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
1404  * SPDX-License-Identifier: BSD-3-Clause
1405   
1407   
1409   
1410  set accounting_converterUnitsNonzero(indicator,accnodesData,converter_techs,vintage);
1411  accounting_converterUnitsNonzero(indicator,accnodesData,converter_techs,vintage)
1412      $sum(pc_accounting_converterUnits$accounting_converterUnitsIn(indicator,accnodesData,converter_techs,vintage,pc_accounting_converterUnits), 1)
1413      = yes;
1414   
1416  set accounting_converterUnitsChk(indicator,nodesModel,converter_techs,vintage,pc_accounting_converterUnits);
1417  accounting_converterUnitsChk(indicator,nodesModel,converter_techs,vintage,"useAnnuity")
1418      $sum((nodesData,accnodesData)
1419              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1420                  and accounting_converterUnitsNonzero(indicator,accnodesData,converter_techs,vintage)), 1)
1421      = smax((nodesData,accnodesData)
1422              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1423                  and accounting_converterUnitsNonzero(indicator,accnodesData,converter_techs,vintage)),
1424          accounting_converterUnitsIn(indicator,accnodesData,converter_techs,vintage,"useAnnuity"))
1425      - smin((nodesData,accnodesData)
1426              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1427                  and accounting_converterUnitsNonzero(indicator,accnodesData,converter_techs,vintage)),
1428          accounting_converterUnitsIn(indicator,accnodesData,converter_techs,vintage,"useAnnuity"));
1429   
1430  abort$sum(accounting_converterUnitsChk(indicator,nodesModel,converter_techs,vintage,pc_accounting_converterUnits), 1) "Cannot aggregate technologies with different useAnnuity values."
1432   
1433  parameter accounting_converterUnitsAgg(indicator,nodesModel,converter_techs,vintage,pc_accounting_converterUnits);
1434  accounting_converterUnitsAgg(indicator,nodesModel,converter_techs,vintage,pc_accounting_converterUnits)
1435      $sum((nodesData,accnodesData)
1436              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1437                  and accounting_converterUnitsNonzero(indicator,accnodesData,converter_techs,vintage)), 1)
1438      = sum((nodesData,accnodesData)
1439              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1440                  and accounting_converterUnitsNonzero(indicator,accnodesData,converter_techs,vintage)),
1441          accounting_converterUnitsIn(indicator,accnodesData,converter_techs,vintage,pc_accounting_converterUnits))
1442      / sum((nodesData,accnodesData)
1443              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1444                  and accounting_converterUnitsNonzero(indicator,accnodesData,converter_techs,vintage)),
1445          1);
1446   
1447  parameter accounting_converterUnits(indicator,nodesModel,converter_techs,vintage,pc_accounting_converterUnits);
1448  loop(accnodes,
1449  accounting_converterUnits(indicator,nodesModel,converter_techs,vintage,pc_accounting_converterUnits)
1450      $sum(accnodesData$(map_accnodesToCalc(accnodes,nodesModel) and sameas(accnodes,accnodesData)
1451                              and accounting_converterUnitsIn(indicator,accnodesData,converter_techs,vintage,pc_accounting_converterUnits)), 1)
1452      = sum(accnodesData$(map_accnodesToCalc(accnodes,nodesModel) and sameas(accnodes,accnodesData)),
1453              accounting_converterUnitsIn(indicator,accnodesData,converter_techs,vintage,pc_accounting_converterUnits));
1454  );
1455   
1456  accounting_converterUnits(indicator,nodesModel,converter_techs,vintage,pc_accounting_converterUnits)
1457      $accounting_converterUnitsAgg(indicator,nodesModel,converter_techs,vintage,pc_accounting_converterUnits)
1458      = accounting_converterUnitsAgg(indicator,nodesModel,converter_techs,vintage,pc_accounting_converterUnits);
1459   
1460  * option kill %paramName%Nonzero %paramName%Chk %paramName%Agg
BATINCLUDE C:\Local\REMix\framework\remix\framework\model\source\battools\aggregateAccountingMean.gms
1462  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
1463  * SPDX-License-Identifier: BSD-3-Clause
1464   
1466   
1468   
1469  set accounting_converterActivityNonzero(indicator,accnodesData,converter_techs,vintage,activity);
1470  accounting_converterActivityNonzero(indicator,accnodesData,converter_techs,vintage,activity)
1471      $sum(pc_accounting_converterActivity$accounting_converterActivityIn(indicator,accnodesData,converter_techs,vintage,activity,pc_accounting_converterActivity), 1)
1472      = yes;
1473   
1475   
1476  parameter accounting_converterActivityAgg(indicator,nodesModel,converter_techs,vintage,activity,pc_accounting_converterActivity);
1477  accounting_converterActivityAgg(indicator,nodesModel,converter_techs,vintage,activity,pc_accounting_converterActivity)
1478      $sum((nodesData,accnodesData)
1479              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1480                  and accounting_converterActivityNonzero(indicator,accnodesData,converter_techs,vintage,activity)), 1)
1481      = sum((nodesData,accnodesData)
1482              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1483                  and accounting_converterActivityNonzero(indicator,accnodesData,converter_techs,vintage,activity)),
1484          accounting_converterActivityIn(indicator,accnodesData,converter_techs,vintage,activity,pc_accounting_converterActivity))
1485      / sum((nodesData,accnodesData)
1486              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1487                  and accounting_converterActivityNonzero(indicator,accnodesData,converter_techs,vintage,activity)),
1488          1);
1489   
1490  parameter accounting_converterActivity(indicator,nodesModel,converter_techs,vintage,activity,pc_accounting_converterActivity);
1491  loop(accnodes,
1492  accounting_converterActivity(indicator,nodesModel,converter_techs,vintage,activity,pc_accounting_converterActivity)
1493      $sum(accnodesData$(map_accnodesToCalc(accnodes,nodesModel) and sameas(accnodes,accnodesData)
1494                              and accounting_converterActivityIn(indicator,accnodesData,converter_techs,vintage,activity,pc_accounting_converterActivity)), 1)
1495      = sum(accnodesData$(map_accnodesToCalc(accnodes,nodesModel) and sameas(accnodes,accnodesData)),
1496              accounting_converterActivityIn(indicator,accnodesData,converter_techs,vintage,activity,pc_accounting_converterActivity));
1497  );
1498   
1499  accounting_converterActivity(indicator,nodesModel,converter_techs,vintage,activity,pc_accounting_converterActivity)
1500      $accounting_converterActivityAgg(indicator,nodesModel,converter_techs,vintage,activity,pc_accounting_converterActivity)
1501      = accounting_converterActivityAgg(indicator,nodesModel,converter_techs,vintage,activity,pc_accounting_converterActivity);
1502   
1503  * option kill %paramName%Nonzero %paramName%Chk %paramName%Agg
BATINCLUDE C:\Local\REMix\framework\remix\framework\model\source\battools\aggregateAccountingMean.gms
1505  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
1506  * SPDX-License-Identifier: BSD-3-Clause
1507   
1509   
1511   
1512  set accounting_converterStartupNonzero(indicator,accnodesData,converter_techs,vintage);
1513  accounting_converterStartupNonzero(indicator,accnodesData,converter_techs,vintage)
1514      $sum(pc_accounting_converterStartup$accounting_converterStartupIn(indicator,accnodesData,converter_techs,vintage,pc_accounting_converterStartup), 1)
1515      = yes;
1516   
1518   
1519  parameter accounting_converterStartupAgg(indicator,nodesModel,converter_techs,vintage,pc_accounting_converterStartup);
1520  accounting_converterStartupAgg(indicator,nodesModel,converter_techs,vintage,pc_accounting_converterStartup)
1521      $sum((nodesData,accnodesData)
1522              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1523                  and accounting_converterStartupNonzero(indicator,accnodesData,converter_techs,vintage)), 1)
1524      = sum((nodesData,accnodesData)
1525              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1526                  and accounting_converterStartupNonzero(indicator,accnodesData,converter_techs,vintage)),
1527          accounting_converterStartupIn(indicator,accnodesData,converter_techs,vintage,pc_accounting_converterStartup))
1528      / sum((nodesData,accnodesData)
1529              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1530                  and accounting_converterStartupNonzero(indicator,accnodesData,converter_techs,vintage)),
1531          1);
1532   
1533  parameter accounting_converterStartup(indicator,nodesModel,converter_techs,vintage,pc_accounting_converterStartup);
1534  loop(accnodes,
1535  accounting_converterStartup(indicator,nodesModel,converter_techs,vintage,pc_accounting_converterStartup)
1536      $sum(accnodesData$(map_accnodesToCalc(accnodes,nodesModel) and sameas(accnodes,accnodesData)
1537                              and accounting_converterStartupIn(indicator,accnodesData,converter_techs,vintage,pc_accounting_converterStartup)), 1)
1538      = sum(accnodesData$(map_accnodesToCalc(accnodes,nodesModel) and sameas(accnodes,accnodesData)),
1539              accounting_converterStartupIn(indicator,accnodesData,converter_techs,vintage,pc_accounting_converterStartup));
1540  );
1541   
1542  accounting_converterStartup(indicator,nodesModel,converter_techs,vintage,pc_accounting_converterStartup)
1543      $accounting_converterStartupAgg(indicator,nodesModel,converter_techs,vintage,pc_accounting_converterStartup)
1544      = accounting_converterStartupAgg(indicator,nodesModel,converter_techs,vintage,pc_accounting_converterStartup);
1545   
1546  * option kill %paramName%Nonzero %paramName%Chk %paramName%Agg
BATINCLUDE C:\Local\REMix\framework\remix\framework\model\source\battools\aggregateAccountingMean.gms
1548  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
1549  * SPDX-License-Identifier: BSD-3-Clause
1550   
1552   
1554   
1555  set accounting_storageUnitsNonzero(indicator,accnodesData,storage_techs,vintage);
1556  accounting_storageUnitsNonzero(indicator,accnodesData,storage_techs,vintage)
1557      $sum(pc_accounting_storageUnits$accounting_storageUnitsIn(indicator,accnodesData,storage_techs,vintage,pc_accounting_storageUnits), 1)
1558      = yes;
1559   
1561  set accounting_storageUnitsChk(indicator,nodesModel,storage_techs,vintage,pc_accounting_storageUnits);
1562  accounting_storageUnitsChk(indicator,nodesModel,storage_techs,vintage,"useAnnuity")
1563      $sum((nodesData,accnodesData)
1564              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1565                  and accounting_storageUnitsNonzero(indicator,accnodesData,storage_techs,vintage)), 1)
1566      = smax((nodesData,accnodesData)
1567              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1568                  and accounting_storageUnitsNonzero(indicator,accnodesData,storage_techs,vintage)),
1569          accounting_storageUnitsIn(indicator,accnodesData,storage_techs,vintage,"useAnnuity"))
1570      - smin((nodesData,accnodesData)
1571              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1572                  and accounting_storageUnitsNonzero(indicator,accnodesData,storage_techs,vintage)),
1573          accounting_storageUnitsIn(indicator,accnodesData,storage_techs,vintage,"useAnnuity"));
1574   
1575  abort$sum(accounting_storageUnitsChk(indicator,nodesModel,storage_techs,vintage,pc_accounting_storageUnits), 1) "Cannot aggregate technologies with different useAnnuity values."
1577   
1578  parameter accounting_storageUnitsAgg(indicator,nodesModel,storage_techs,vintage,pc_accounting_storageUnits);
1579  accounting_storageUnitsAgg(indicator,nodesModel,storage_techs,vintage,pc_accounting_storageUnits)
1580      $sum((nodesData,accnodesData)
1581              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1582                  and accounting_storageUnitsNonzero(indicator,accnodesData,storage_techs,vintage)), 1)
1583      = sum((nodesData,accnodesData)
1584              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1585                  and accounting_storageUnitsNonzero(indicator,accnodesData,storage_techs,vintage)),
1586          accounting_storageUnitsIn(indicator,accnodesData,storage_techs,vintage,pc_accounting_storageUnits))
1587      / sum((nodesData,accnodesData)
1588              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1589                  and accounting_storageUnitsNonzero(indicator,accnodesData,storage_techs,vintage)),
1590          1);
1591   
1592  parameter accounting_storageUnits(indicator,nodesModel,storage_techs,vintage,pc_accounting_storageUnits);
1593  loop(accnodes,
1594  accounting_storageUnits(indicator,nodesModel,storage_techs,vintage,pc_accounting_storageUnits)
1595      $sum(accnodesData$(map_accnodesToCalc(accnodes,nodesModel) and sameas(accnodes,accnodesData)
1596                              and accounting_storageUnitsIn(indicator,accnodesData,storage_techs,vintage,pc_accounting_storageUnits)), 1)
1597      = sum(accnodesData$(map_accnodesToCalc(accnodes,nodesModel) and sameas(accnodes,accnodesData)),
1598              accounting_storageUnitsIn(indicator,accnodesData,storage_techs,vintage,pc_accounting_storageUnits));
1599  );
1600   
1601  accounting_storageUnits(indicator,nodesModel,storage_techs,vintage,pc_accounting_storageUnits)
1602      $accounting_storageUnitsAgg(indicator,nodesModel,storage_techs,vintage,pc_accounting_storageUnits)
1603      = accounting_storageUnitsAgg(indicator,nodesModel,storage_techs,vintage,pc_accounting_storageUnits);
1604   
1605  * option kill %paramName%Nonzero %paramName%Chk %paramName%Agg
BATINCLUDE C:\Local\REMix\framework\remix\framework\model\source\battools\aggregateAccountingMean.gms
1607  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
1608  * SPDX-License-Identifier: BSD-3-Clause
1609   
1611   
1613   
1614  set accounting_transferLinksNonzero(indicator,acclinksData,transfer_techs,vintage);
1615  accounting_transferLinksNonzero(indicator,acclinksData,transfer_techs,vintage)
1616      $sum(pc_accounting_transferLinks$accounting_transferLinksIn(indicator,acclinksData,transfer_techs,vintage,pc_accounting_transferLinks), 1)
1617      = yes;
1618   
1620  set accounting_transferLinksChk(indicator,linksModel,transfer_techs,vintage,pc_accounting_transferLinks);
1621  accounting_transferLinksChk(indicator,linksModel,transfer_techs,vintage,"useAnnuity")
1622      $sum((linksData,acclinksData)
1623              $(aggregatelinksModel(linksData,linksModel) and sameas(linksData,acclinksData)
1624                  and accounting_transferLinksNonzero(indicator,acclinksData,transfer_techs,vintage)), 1)
1625      = smax((linksData,acclinksData)
1626              $(aggregatelinksModel(linksData,linksModel) and sameas(linksData,acclinksData)
1627                  and accounting_transferLinksNonzero(indicator,acclinksData,transfer_techs,vintage)),
1628          accounting_transferLinksIn(indicator,acclinksData,transfer_techs,vintage,"useAnnuity"))
1629      - smin((linksData,acclinksData)
1630              $(aggregatelinksModel(linksData,linksModel) and sameas(linksData,acclinksData)
1631                  and accounting_transferLinksNonzero(indicator,acclinksData,transfer_techs,vintage)),
1632          accounting_transferLinksIn(indicator,acclinksData,transfer_techs,vintage,"useAnnuity"));
1633   
1634  abort$sum(accounting_transferLinksChk(indicator,linksModel,transfer_techs,vintage,pc_accounting_transferLinks), 1) "Cannot aggregate technologies with different useAnnuity values."
1636   
1637  parameter accounting_transferLinksAgg(indicator,linksModel,transfer_techs,vintage,pc_accounting_transferLinks);
1638  accounting_transferLinksAgg(indicator,linksModel,transfer_techs,vintage,pc_accounting_transferLinks)
1639      $sum((linksData,acclinksData)
1640              $(aggregatelinksModel(linksData,linksModel) and sameas(linksData,acclinksData)
1641                  and accounting_transferLinksNonzero(indicator,acclinksData,transfer_techs,vintage)), 1)
1642      = sum((linksData,acclinksData)
1643              $(aggregatelinksModel(linksData,linksModel) and sameas(linksData,acclinksData)
1644                  and accounting_transferLinksNonzero(indicator,acclinksData,transfer_techs,vintage)),
1645          accounting_transferLinksIn(indicator,acclinksData,transfer_techs,vintage,pc_accounting_transferLinks))
1646      / sum((linksData,acclinksData)
1647              $(aggregatelinksModel(linksData,linksModel) and sameas(linksData,acclinksData)
1648                  and accounting_transferLinksNonzero(indicator,acclinksData,transfer_techs,vintage)),
1649          1);
1650   
1651  parameter accounting_transferLinks(indicator,linksModel,transfer_techs,vintage,pc_accounting_transferLinks);
1652  loop(acclinks,
1653  accounting_transferLinks(indicator,linksModel,transfer_techs,vintage,pc_accounting_transferLinks)
1654      $sum(acclinksData$(map_acclinksToCalc(acclinks,linksModel) and sameas(acclinks,acclinksData)
1655                              and accounting_transferLinksIn(indicator,acclinksData,transfer_techs,vintage,pc_accounting_transferLinks)), 1)
1656      = sum(acclinksData$(map_acclinksToCalc(acclinks,linksModel) and sameas(acclinks,acclinksData)),
1657              accounting_transferLinksIn(indicator,acclinksData,transfer_techs,vintage,pc_accounting_transferLinks));
1658  );
1659   
1660  accounting_transferLinks(indicator,linksModel,transfer_techs,vintage,pc_accounting_transferLinks)
1661      $accounting_transferLinksAgg(indicator,linksModel,transfer_techs,vintage,pc_accounting_transferLinks)
1662      = accounting_transferLinksAgg(indicator,linksModel,transfer_techs,vintage,pc_accounting_transferLinks);
1663   
1664  * option kill %paramName%Nonzero %paramName%Chk %paramName%Agg
BATINCLUDE C:\Local\REMix\framework\remix\framework\model\source\battools\aggregateAccountingMean.gms
1666  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
1667  * SPDX-License-Identifier: BSD-3-Clause
1668   
1670   
1672   
1673  set accounting_transferPerLengthNonzero(indicator,acclinksData,transfer_techs,vintage,link_types);
1674  accounting_transferPerLengthNonzero(indicator,acclinksData,transfer_techs,vintage,link_types)
1675      $sum(pc_accounting_transferPerLength$accounting_transferPerLengthIn(indicator,acclinksData,transfer_techs,vintage,link_types,pc_accounting_transferPerLength), 1)
1676      = yes;
1677   
1679  set accounting_transferPerLengthChk(indicator,linksModel,transfer_techs,vintage,link_types,pc_accounting_transferPerLength);
1680  accounting_transferPerLengthChk(indicator,linksModel,transfer_techs,vintage,link_types,"useAnnuity")
1681      $sum((linksData,acclinksData)
1682              $(aggregatelinksModel(linksData,linksModel) and sameas(linksData,acclinksData)
1683                  and accounting_transferPerLengthNonzero(indicator,acclinksData,transfer_techs,vintage,link_types)), 1)
1684      = smax((linksData,acclinksData)
1685              $(aggregatelinksModel(linksData,linksModel) and sameas(linksData,acclinksData)
1686                  and accounting_transferPerLengthNonzero(indicator,acclinksData,transfer_techs,vintage,link_types)),
1687          accounting_transferPerLengthIn(indicator,acclinksData,transfer_techs,vintage,link_types,"useAnnuity"))
1688      - smin((linksData,acclinksData)
1689              $(aggregatelinksModel(linksData,linksModel) and sameas(linksData,acclinksData)
1690                  and accounting_transferPerLengthNonzero(indicator,acclinksData,transfer_techs,vintage,link_types)),
1691          accounting_transferPerLengthIn(indicator,acclinksData,transfer_techs,vintage,link_types,"useAnnuity"));
1692   
1693  abort$sum(accounting_transferPerLengthChk(indicator,linksModel,transfer_techs,vintage,link_types,pc_accounting_transferPerLength), 1) "Cannot aggregate technologies with different useAnnuity values."
1695   
1696  parameter accounting_transferPerLengthAgg(indicator,linksModel,transfer_techs,vintage,link_types,pc_accounting_transferPerLength);
1697  accounting_transferPerLengthAgg(indicator,linksModel,transfer_techs,vintage,link_types,pc_accounting_transferPerLength)
1698      $sum((linksData,acclinksData)
1699              $(aggregatelinksModel(linksData,linksModel) and sameas(linksData,acclinksData)
1700                  and accounting_transferPerLengthNonzero(indicator,acclinksData,transfer_techs,vintage,link_types)), 1)
1701      = sum((linksData,acclinksData)
1702              $(aggregatelinksModel(linksData,linksModel) and sameas(linksData,acclinksData)
1703                  and accounting_transferPerLengthNonzero(indicator,acclinksData,transfer_techs,vintage,link_types)),
1704          accounting_transferPerLengthIn(indicator,acclinksData,transfer_techs,vintage,link_types,pc_accounting_transferPerLength))
1705      / sum((linksData,acclinksData)
1706              $(aggregatelinksModel(linksData,linksModel) and sameas(linksData,acclinksData)
1707                  and accounting_transferPerLengthNonzero(indicator,acclinksData,transfer_techs,vintage,link_types)),
1708          1);
1709   
1710  parameter accounting_transferPerLength(indicator,linksModel,transfer_techs,vintage,link_types,pc_accounting_transferPerLength);
1711  loop(acclinks,
1712  accounting_transferPerLength(indicator,linksModel,transfer_techs,vintage,link_types,pc_accounting_transferPerLength)
1713      $sum(acclinksData$(map_acclinksToCalc(acclinks,linksModel) and sameas(acclinks,acclinksData)
1714                              and accounting_transferPerLengthIn(indicator,acclinksData,transfer_techs,vintage,link_types,pc_accounting_transferPerLength)), 1)
1715      = sum(acclinksData$(map_acclinksToCalc(acclinks,linksModel) and sameas(acclinks,acclinksData)),
1716              accounting_transferPerLengthIn(indicator,acclinksData,transfer_techs,vintage,link_types,pc_accounting_transferPerLength));
1717  );
1718   
1719  accounting_transferPerLength(indicator,linksModel,transfer_techs,vintage,link_types,pc_accounting_transferPerLength)
1720      $accounting_transferPerLengthAgg(indicator,linksModel,transfer_techs,vintage,link_types,pc_accounting_transferPerLength)
1721      = accounting_transferPerLengthAgg(indicator,linksModel,transfer_techs,vintage,link_types,pc_accounting_transferPerLength);
1722   
1723  * option kill %paramName%Nonzero %paramName%Chk %paramName%Agg
BATINCLUDE C:\Local\REMix\framework\remix\framework\model\source\battools\aggregateAccountingMean.gms
1725  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
1726  * SPDX-License-Identifier: BSD-3-Clause
1727   
1729   
1731   
1732  set accounting_sourcesinkFlowNonzero(indicator,accnodesData,years,sourcesink_techs,commodity);
1733  accounting_sourcesinkFlowNonzero(indicator,accnodesData,years,sourcesink_techs,commodity)
1734      $sum(pc_accounting_sourcesinkFlow$accounting_sourcesinkFlowIn(indicator,accnodesData,years,sourcesink_techs,commodity,pc_accounting_sourcesinkFlow), 1)
1735      = yes;
1736   
1738   
1739  parameter accounting_sourcesinkFlowAgg(indicator,nodesModel,years,sourcesink_techs,commodity,pc_accounting_sourcesinkFlow);
1740  accounting_sourcesinkFlowAgg(indicator,nodesModel,years,sourcesink_techs,commodity,pc_accounting_sourcesinkFlow)
1741      $sum((nodesData,accnodesData)
1742              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1743                  and accounting_sourcesinkFlowNonzero(indicator,accnodesData,years,sourcesink_techs,commodity)), 1)
1744      = sum((nodesData,accnodesData)
1745              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1746                  and accounting_sourcesinkFlowNonzero(indicator,accnodesData,years,sourcesink_techs,commodity)),
1747          accounting_sourcesinkFlowIn(indicator,accnodesData,years,sourcesink_techs,commodity,pc_accounting_sourcesinkFlow))
1748      / sum((nodesData,accnodesData)
1749              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1750                  and accounting_sourcesinkFlowNonzero(indicator,accnodesData,years,sourcesink_techs,commodity)),
1751          1);
1752   
1753  parameter accounting_sourcesinkFlow(indicator,nodesModel,years,sourcesink_techs,commodity,pc_accounting_sourcesinkFlow);
1754  loop(accnodes,
1755  accounting_sourcesinkFlow(indicator,nodesModel,years,sourcesink_techs,commodity,pc_accounting_sourcesinkFlow)
1756      $sum(accnodesData$(map_accnodesToCalc(accnodes,nodesModel) and sameas(accnodes,accnodesData)
1757                              and accounting_sourcesinkFlowIn(indicator,accnodesData,years,sourcesink_techs,commodity,pc_accounting_sourcesinkFlow)), 1)
1758      = sum(accnodesData$(map_accnodesToCalc(accnodes,nodesModel) and sameas(accnodes,accnodesData)),
1759              accounting_sourcesinkFlowIn(indicator,accnodesData,years,sourcesink_techs,commodity,pc_accounting_sourcesinkFlow));
1760  );
1761   
1762  accounting_sourcesinkFlow(indicator,nodesModel,years,sourcesink_techs,commodity,pc_accounting_sourcesinkFlow)
1763      $accounting_sourcesinkFlowAgg(indicator,nodesModel,years,sourcesink_techs,commodity,pc_accounting_sourcesinkFlow)
1764      = accounting_sourcesinkFlowAgg(indicator,nodesModel,years,sourcesink_techs,commodity,pc_accounting_sourcesinkFlow);
1765   
1766  * option kill %paramName%Nonzero %paramName%Chk %paramName%Agg
1767   
1768  parameter accounting_indicatorBounds_links(linksModel,years,indicator,pc_accounting_indicatorBounds_links);
1769  accounting_indicatorBounds_links(linksModelToCalc,yearsToCalc,indicator,pc_accounting_indicatorBounds_links)
1770      = sum((linksData)$sameas(linksModelToCalc,linksData),
1771              accounting_indicatorBounds_linksIn(linksData,yearsToCalc,indicator,pc_accounting_indicatorBounds_links));
1772   
1773  accounting_indicatorBounds_links(linksModelToCalc,yearsToCalc,indicator,pc_accounting_indicatorBounds_links)
1774      = sum((linksData)$links_aggregate(linksModelToCalc,linksData),
1775              accounting_indicatorBounds_linksIn(linksData,yearsToCalc,indicator,pc_accounting_indicatorBounds_links));
1776   
1777  parameter accounting_indicatorBounds(accNodesModel,accYears,indicator,pc_accounting_indicatorBounds);
1778  accounting_indicatorBounds(accNodesModel,accYears,indicator,pc_accounting_indicatorBounds)
1779      = sum (accNodesData$sameas(accNodesModel,accNodesData),
1780          accounting_indicatorBoundsIn(accNodesData,accYears,indicator,pc_accounting_indicatorBounds));
1781   
1782  accounting_indicatorBounds(accNodesModel,accYears,indicator,pc_accounting_indicatorBounds)
1783      $(sum (nodesModel$sameas(accNodesModel,nodesModel), 1) > 0)
1784      = sum ((accNodesData,nodesData,nodesModel)
1785              $(aggregateNodesModel(nodesData,nodesModel) and sameas(accNodesModel,nodesModel) and sameas(accNodesData,nodesData)),
1786          accounting_indicatorBoundsIn(accNodesData,accYears,indicator,pc_accounting_indicatorBounds));
1787   
1788  set accounting_perIndicatorNonzero(indicator,indicator_a,accNodesData,accYears);
1789  accounting_perIndicatorNonzero(indicator,indicator_a,accNodesData,accYears)
1790      $sum(pc_accounting_perIndicator$accounting_perIndicatorIn(indicator,indicator_a,accNodesData,accYears,pc_accounting_perIndicator), 1)
1791      = yes;
1792   
1793  parameter accounting_perIndicatorAgg(indicator,indicator_a,nodesModel,accYears,pc_accounting_perIndicator);
1794  accounting_perIndicatorAgg(indicator,indicator_a,nodesModel,accYears,pc_accounting_perIndicator)
1795      $sum((nodesData,accnodesData)
1796              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1797                  and accounting_perIndicatorNonzero(indicator,indicator_a,accnodesData,accYears)), 1)
1798      = sum((nodesData,accnodesData)
1799              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1800                  and accounting_perIndicatorNonzero(indicator,indicator_a,accnodesData,accYears)),
1801          accounting_perIndicatorIn(indicator,indicator_a,accnodesData,accYears,pc_accounting_perIndicator))
1802      / sum((nodesData,accnodesData)
1803              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1804                  and accounting_perIndicatorNonzero(indicator,indicator_a,accnodesData,accYears)),
1805          1);
1806   
1807  parameter accounting_perIndicator(indicator,indicator_a,accNodesModel,accYears,pc_accounting_perIndicator);
1808   
1809  loop(accNodes,
1810  accounting_perIndicator(indicator,indicator_a,accNodesModel,accYears,pc_accounting_perIndicator)
1811      $(sum(accNodesData$(sameas(accNodes,accNodesData)
1812              and accounting_perIndicatorIn(indicator,indicator_a,accNodesData,"horizon",pc_accounting_perIndicator)), 1)
1813          and map_accNodes(accNodesModel,accNodes)
1814              )
1815      = sum(accNodesData$(sameas(accNodes,accNodesData)),
1816              accounting_perIndicatorIn(indicator,indicator_a,accNodesData,"horizon",pc_accounting_perIndicator));
1817   
1818  accounting_perIndicator(indicator,indicator_a,accNodesModel,accYears,pc_accounting_perIndicator)
1819      $(sum(accNodesData$(sameas(accNodes,accNodesData)
1820              and accounting_perIndicatorIn(indicator,indicator_a,accNodesData,accYears,pc_accounting_perIndicator)), 1)
1821          and map_accNodes(accNodesModel,accNodes)
1822          and not sameas(accYears, "horizon"))
1823      = sum(accNodesData$(sameas(accNodes,accNodesData)),
1824              accounting_perIndicatorIn(indicator,indicator_a,accNodesData,accYears,pc_accounting_perIndicator));
1825  );
1826   
1827  accounting_perIndicator(indicator,indicator_a,accNodesModel,accYears,pc_accounting_perIndicator)
1828      $sum(nodesModel$(accounting_perIndicatorAgg(indicator,indicator_a,nodesModel,"horizon",pc_accounting_perIndicator)
1829          and sameas(accNodesModel,nodesModel)), 1)
1830      = sum(nodesModel$sameas(accNodesModel,nodesModel),
1831          accounting_perIndicatorAgg(indicator,indicator_a,nodesModel,"horizon",pc_accounting_perIndicator));
1832   
1833  accounting_perIndicator(indicator,indicator_a,accNodesModel,accYears,pc_accounting_perIndicator)
1834      $sum(nodesModel$(accounting_perIndicatorAgg(indicator,indicator_a,nodesModel,accYears,pc_accounting_perIndicator)
1835          and sameas(accNodesModel,nodesModel) and not sameas(accYears, "horizon")), 1)
1836      = sum(nodesModel$sameas(accNodesModel,nodesModel),
1837          accounting_perIndicatorAgg(indicator,indicator_a,nodesModel,accYears,pc_accounting_perIndicator));
1838   
1839   
1840  * Make sure all required indicators end up in the model
1841  set activeIndicators(accNodesModel,accYears,indicator);
1842  activeIndicators(accNodesModel,accYears,indicator)
1843     $((accounting_indicatorBounds(accNodesModel,accYears,indicator,"obj") <> 0
1846        or accounting_indicatorBounds(accNodesModel,accYears,indicator,"useFixed") <> 0
1847        or accounting_indicatorBounds(accNodesModel,accYears,indicator,"useLower") <> 0
1848        or accounting_indicatorBounds(accNodesModel,accYears,indicator,"useUpper") <> 0 )
1849          and not accounting_indicatorBounds(accNodesModel,accYears,indicator,"isVariable"))
1850     = yes;
1851   
1852  set activeIndicators_links(linksModel,years,indicator);
1853  activeIndicators_links(linksModelToCalc,yearsToCalc,indicator)
1854     $(accounting_indicatorBounds_links(linksModelToCalc,yearsToCalc,indicator,"useFixed") <> 0
1855        or accounting_indicatorBounds_links(linksModelToCalc,yearsToCalc,indicator,"useLower") <> 0
1856        or accounting_indicatorBounds_links(linksModelToCalc,yearsToCalc,indicator,"useUpper") <> 0 )
1857     = yes;
1858   
1859  set variableIndicators(accNodesModel,accYears,indicator);
1860  variableIndicators(accNodesModel,accYears,indicator)
1861     $(accounting_indicatorBounds(accNodesModel,accYears,indicator,"obj") = 0
1862        and accounting_indicatorBounds(accNodesModel,accYears,indicator,"isVariable"))
1863     = yes;
1864   
1865  * Calculate length of years and discount rates per indicator
1866  parameter yearFactor(accNodesModel,accYears,indicator,accYears);
1867  yearFactor(accNodesModel,accYears,indicator,accYears_a)
1868      $(map_accYears(accYears_a,accYears)
1869          and sum(yearsToCalc$(sameas(yearsToCalc,accYears_a)), 1))
1870      = 1;
1871   
1872  yearFactor(accNodesModel,accYears,indicator,accYears_a)
1873      $(map_accYears(accYears_a,accYears)
1874          and sum(yearsToCalc$(sameas(yearsToCalc,accYears_a)), 1)
1875          and accounting_indicatorBounds(accNodesModel,accYears,indicator,"integral"))
1876      = sum(yearsToCalc$sameas(accYears_a,yearsToCalc), yearsLen(yearsToCalc));
1877   
1878  yearFactor(accNodesModel,accYears,indicator,accYears_a)
1879      $(map_accYears(accYears_a,accYears)
1880          and sum(yearsToCalc$(sameas(yearsToCalc,accYears_a)), 1)
1881          and accounting_indicatorBounds(accNodesModel,accYears,indicator,"integral")
1882          and accounting_indicatorBounds(accNodesModel,accYears,indicator,"endyear")
1883          and yearFactor(accNodesModel,accYears,indicator,accYears_a) = inf)
1884      = accounting_indicatorBounds(accNodesModel,accYears,indicator,"endyear");
1885   
1886  yearFactor(accNodesModel,accYears,indicator,accYears_a)
1887      $(map_accYears(accYears_a,accYears)
1888          and sum(yearsToCalc$(sameas(yearsToCalc,accYears_a)), 1)
1889          and accounting_indicatorBounds(accNodesModel,accYears,indicator,"integral")
1890          and accounting_indicatorBounds(accNodesModel,accYears,indicator,"discount"))
1891      = yearFactor(accNodesModel,accYears,indicator,accYears_a)
1892          * (1 - accounting_indicatorBounds(accNodesModel,accYears,indicator,"discount"))
1893                  ** (accYears_a.val - smin(yearsToCalc, yearsToCalc.val));
1894   
1895   
1896  * ==== calculate compound indicators for the optimization ====
1897  scalar compIndicators_pre;
1898  scalar compIndicators_post;
1899   
1900  parameter compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a);
1901  compoundIndicators(accNodesModel,accYears,indicator,accNodesModel,accYears,indicator)
1902      $activeIndicators(accNodesModel,accYears,indicator) = 1;
1903   
1904  set compoundIndicators_act(accNodesModel,accYears,indicator);
1905  option compoundIndicators_act < compoundIndicators;
1906   
1907  parameter compoundIndicatorsExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa);
1908  parameter compoundIndicatorsExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a);
1909  compoundIndicatorsExt(accNodesModel,accYears,indicator,accNodesModel,accYears,indicator,accNodesModel,accYears,indicator)
1910      $compoundIndicators_act(accNodesModel,accYears,indicator) = 1;
1911   
1912  compIndicators_pre = 0;
1913  compIndicators_post = 1;
1914   
1915  option sparseval = 1;
1916  while(compIndicators_pre < compIndicators_post,
1917      compIndicators_pre = sum((accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa)
1918          $compoundIndicatorsExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa), 1);
1919   
1920      compoundIndicatorsExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa)
1921          $(compoundIndicators_act(accNodesModel,accYears,indicator)
1922              and compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
1923              and not accounting_indicatorBounds(accNodesModel_a,accYears_a,indicator_a,"isVariable")
1924              and map_accNodes(accNodesModel_aa,accNodesModel_a)
1925              and map_accYears(accYears_aa,accYears_a))
1926          = compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
1927              * accounting_perIndicator(indicator_a,indicator_aa,accNodesModel_aa,accYears_aa,"perIndicator");
1928   
1929      option compoundIndicatorsExt_r < compoundIndicatorsExt;
1930   
1931      compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa)
1932          $(compoundIndicators_act(accNodesModel,accYears,indicator)
1933              and sum((accNodesModel_a,accYears_a,indicator_a)
1934                      $compoundIndicatorsExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a), 1) = 1)
1935          = sum((accNodesModel_a,accYears_a,indicator_a)
1936                  $(compoundIndicatorsExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a)),
1937              compoundIndicatorsExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a));
1938   
1939      compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa)
1940          $(compoundIndicators_act(accNodesModel,accYears,indicator)
1941              and sum((accNodesModel_a,accYears_a,indicator_a)
1942                      $compoundIndicatorsExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a), 1) > 1)
1943          = sum((accNodesModel_a,accYears_a,indicator_a)
1944                  $(compoundIndicatorsExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a)
1945                      and not (sameas(accNodesModel, accNodesModel_a) and sameas(accYears, accYears_a) and sameas(indicator, indicator_a))),
1946              compoundIndicatorsExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a))
1947          / sum((accNodesModel_a,accYears_a,indicator_a)
1948                  $(compoundIndicatorsExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a)
1949                      and not (sameas(accNodesModel, accNodesModel_a) and sameas(accYears, accYears_a) and sameas(indicator, indicator_a))), 1);
1950   
1951      option compoundIndicators_act < compoundIndicators;
1952      compIndicators_post = sum((accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa)
1953          $compoundIndicatorsExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa), 1);
1954  );
1955  option sparseval = 0;
1956   
1957  * map to sub-years and sub-nodes
1958  compoundIndicatorsExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_a)
1959      $(compoundIndicators_act(accNodesModel,accYears,indicator)
1960          and compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
1961          and map_accYears(accYears_aa,accYears_a)
1962          and map_accNodes(accNodesModel_aa,accNodesModel_a))
1963      = compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
1964          * yearFactor(accNodesModel,accYears,indicator,accYears_aa);
1965   
1966  * Remove all accounting regions and accounting years
1967  compoundIndicatorsExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa)
1968      $(compoundIndicatorsExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa)
1969          and not accounting_indicatorBounds(accNodesModel_aa,accYears_aa,indicator_aa,"isVariable")
1970          and sum(accNodes$(sameas(accNodes,accNodesModel_aa)), 1)
1971              or sameas("horizon",accYears_aa))
1972      = 0;
1973   
1974  * Map from extended parameter to final parameter
1975  option compoundIndicatorsExt_r < compoundIndicatorsExt;
1976  compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa)
1977      $(compoundIndicators_act(accNodesModel,accYears,indicator)
1978          and sum((accNodesModel_a,accYears_a,indicator_a)
1979                  $compoundIndicatorsExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a), 1) = 1)
1980      = sum((accNodesModel_a,accYears_a,indicator_a)
1981              $(compoundIndicatorsExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a)),
1982          compoundIndicatorsExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a));
1983   
1984  compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa)
1985      $(compoundIndicators_act(accNodesModel,accYears,indicator)
1986          and sum((accNodesModel_a,accYears_a,indicator_a)
1987                  $compoundIndicatorsExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a), 1) > 1)
1988      = sum((accNodesModel_a,accYears_a,indicator_a)
1989              $(compoundIndicatorsExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a)
1990                  and not (sameas(accNodesModel, accNodesModel_a) and sameas(accYears, accYears_a) and sameas(indicator, indicator_a))),
1991          compoundIndicatorsExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a))
1992      / sum((accNodesModel_a,accYears_a,indicator_a)
1993              $(compoundIndicatorsExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a)
1994                  and not (sameas(accNodesModel, accNodesModel_a) and sameas(accYears, accYears_a) and sameas(indicator, indicator_a))), 1);
1995   
1996  * Remove all accounting regions and accounting years
1997  compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
1998      $(compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
1999          and not accounting_indicatorBounds(accNodesModel_a,accYears_a,indicator_a,"isVariable")
2000          and (sum(accNodes$(sameas(accNodes,accNodesModel_a)), 1)
2001              or sameas("horizon",accYears_a)))
2002      = 0;
2003   
2004  * Remove all slack indicators except the ones declared in indicatorBounds
2005  compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
2006      $(compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
2007          and sum((accNodesModel_aa,accYears_aa)$accounting_indicatorBounds(accNodesModel_aa,accYears_aa,indicator_a,"isVariable"), 1)
2008          and not accounting_indicatorBounds(accNodesModel_a,accYears_a,indicator_a,"isVariable"))
2009      = 0;
2010   
2011  * ==== compound indicators for the post calculation ====
2012  parameter compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a);
2013  compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel,accYears,indicator)
2014      $(sum(nodesModelToCalc$map_accNodesToCalc(accNodesModel,nodesModelToCalc), 1)
2015          and sum(yearsToCalc$map_accYearsToCalc(accYears,yearsToCalc), 1)) = 1;
2016   
2017  set compoundIndicatorsFull_act(accNodesModel,accYears,indicator);
2018  option compoundIndicatorsFull_act < compoundIndicatorsFull;
2019   
2020  parameter compoundIndicatorsFullExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa);
2021  parameter compoundIndicatorsFullExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a);
2022  compoundIndicatorsFullExt(accNodesModel,accYears,indicator,accNodesModel,accYears,indicator,accNodesModel,accYears,indicator) = 1;
2023   
2024  compIndicators_pre = 0;
2025  compIndicators_post = 1;
2026   
2027  option sparseval = 1;
2028  while(compIndicators_pre < compIndicators_post,
2029      compIndicators_pre = sum((accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa)
2030          $compoundIndicatorsFullExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa), 1);
2031   
2032      compoundIndicatorsFullExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa)
2033          $(compoundIndicatorsFull_act(accNodesModel,accYears,indicator)
2034              and compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
2035              and not accounting_indicatorBounds(accNodesModel_a,accYears_a,indicator_a,"isVariable")
2036              and map_accNodes(accNodesModel_aa,accNodesModel_a)
2037              and map_accYears(accYears_aa,accYears_a))
2038          = compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
2039              * accounting_perIndicator(indicator_a,indicator_aa,accNodesModel_aa,accYears_aa,"perIndicator");
2040   
2041      option compoundIndicatorsFullExt_r < compoundIndicatorsFullExt;
2042   
2043      compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa)
2044          $(compoundIndicatorsFull_act(accNodesModel,accYears,indicator)
2045              and sum((accNodesModel_a,accYears_a,indicator_a)
2046                      $compoundIndicatorsFullExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a), 1) = 1)
2047          = sum((accNodesModel_a,accYears_a,indicator_a)
2048                  $(compoundIndicatorsFullExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a)),
2049              compoundIndicatorsFullExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a));
2050   
2051      compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa)
2052          $(compoundIndicatorsFull_act(accNodesModel,accYears,indicator)
2053              and sum((accNodesModel_a,accYears_a,indicator_a)
2054                      $compoundIndicatorsFullExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a), 1) > 1)
2055          = sum((accNodesModel_a,accYears_a,indicator_a)
2056                  $(compoundIndicatorsFullExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a)
2057                      and not (sameas(accNodesModel, accNodesModel_a) and sameas(accYears, accYears_a) and sameas(indicator, indicator_a))),
2058              compoundIndicatorsFullExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a))
2059          / sum((accNodesModel_a,accYears_a,indicator_a)
2060                  $(compoundIndicatorsFullExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a)
2061                      and not (sameas(accNodesModel, accNodesModel_a) and sameas(accYears, accYears_a) and sameas(indicator, indicator_a))), 1);
2062   
2063      option compoundIndicatorsFull_act < compoundIndicatorsFull;
2064      compIndicators_post = sum((accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa)
2065          $compoundIndicatorsFullExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa), 1);
2066  );
2067  option sparseval = 0;
2068   
2069  * map to sub-years and sub-nodes
2070  compoundIndicatorsFullExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_a)
2071      $(compoundIndicatorsFull_act(accNodesModel,accYears,indicator)
2072          and compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
2073          and map_accYears(accYears_aa,accYears_a)
2074          and map_accNodes(accNodesModel_aa,accNodesModel_a))
2075      = compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
2076          * yearFactor(accNodesModel,accYears,indicator,accYears_aa);
2077   
2078  * Remove all accounting regions and accounting years
2079  compoundIndicatorsFullExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa)
2080      $(compoundIndicatorsFullExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa)
2081          and not accounting_indicatorBounds(accNodesModel_aa,accYears_aa,indicator_aa,"isVariable")
2082          and sum(accNodes$(sameas(accNodes,accNodesModel_aa)), 1)
2083              or sameas("horizon",accYears_aa))
2084      = 0;
2085   
2086  * Map from extended parameter to final parameter
2087  option compoundIndicatorsFullExt_r < compoundIndicatorsFullExt;
2088  compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa)
2089      $(compoundIndicatorsFull_act(accNodesModel,accYears,indicator)
2090          and sum((accNodesModel_a,accYears_a,indicator_a)
2091                  $compoundIndicatorsFullExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a), 1) = 1)
2092      = sum((accNodesModel_a,accYears_a,indicator_a)
2093              $(compoundIndicatorsFullExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a)),
2094          compoundIndicatorsFullExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a));
2095   
2096  compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa)
2097      $(compoundIndicatorsFull_act(accNodesModel,accYears,indicator)
2098          and sum((accNodesModel_a,accYears_a,indicator_a)
2099                  $compoundIndicatorsFullExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a), 1) > 1)
2100      = sum((accNodesModel_a,accYears_a,indicator_a)
2101              $(compoundIndicatorsFullExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a)
2102                  and not (sameas(accNodesModel, accNodesModel_a) and sameas(accYears, accYears_a) and sameas(indicator, indicator_a))),
2103          compoundIndicatorsFullExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a))
2104      / sum((accNodesModel_a,accYears_a,indicator_a)
2105              $(compoundIndicatorsFullExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a)
2106                  and not (sameas(accNodesModel, accNodesModel_a) and sameas(accYears, accYears_a) and sameas(indicator, indicator_a))), 1);
2107   
2108  * Remove all accounting regions and accounting years
2109  compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
2110      $(compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
2111          and not accounting_indicatorBounds(accNodesModel_a,accYears_a,indicator_a,"isVariable")
2112          and (sum(accNodes$(sameas(accNodes,accNodesModel_a)), 1)
2113              or sameas("horizon",accYears_a)))
2114      = 0;
2115   
2116  * Remove all slack indicators except the ones declared in indicatorBounds
2117  compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
2118      $(compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
2119          and sum((accNodesModel_aa,accYears_aa)$accounting_indicatorBounds(accNodesModel_aa,accYears_aa,indicator_a,"isVariable"), 1)
2120          and not accounting_indicatorBounds(accNodesModel_a,accYears_a,indicator_a,"isVariable"))
2121      = 0;
2122   
2123  * Check if the objective value and optimization sense is set correctly
2124  scalar opti_values, opti_sense;
2125  opti_values = sum((accNodesModel,accYears,indicator)$(accounting_indicatorBounds(accNodesModel,accYears,indicator,"obj") <> 0), 1);
2126  opti_sense = sum((accNodesModel,accYears,indicator), accounting_indicatorBounds(accNodesModel,accYears,indicator,"obj"));
2127  abort$(opti_values < 1)
2128      "Accounting: No indicator specified as objective value"
2129  abort$(opti_values > 1)
2130      "Accounting: Too many indicators specified as objective value"
2131  abort$(opti_sense <> -1 and opti_sense <> 1)
2132      "Accounting: Optimization sense has to be either -1 or 1"
INCLUDE    C:\Local\REMix\framework\remix\framework\model\source\accounting\annuities.gms
2134  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
2135  * SPDX-License-Identifier: BSD-3-Clause
2136   
2137  * Calculation of annuities
2138   
2139  abort$(sum((indicator,nodesModelToCalc,converter_techs,vintage)
2140          $(accounting_converterUnits(indicator,nodesModelToCalc,converter_techs,vintage,"useAnnuity") = 1
2141          and accounting_converterUnits(indicator,nodesModelToCalc,converter_techs,vintage,"amorTime") < 1), 1) > 0 )
2142      "Accounting: Some converter technologies use annuities but have no amortization time"
2143   
2144  parameter accounting_annuityFactor_converter(indicator,nodesModel,converter_techs,vintage);
2145  accounting_annuityFactor_converter(indicator,nodesModelToCalc,converter_techs,vintage)
2146      $accounting_converterUnits(indicator,nodesModelToCalc,converter_techs,vintage,"useAnnuity")
2147      =
2148      accounting_converterUnits(indicator,nodesModelToCalc,converter_techs,vintage,"interest")
2149          * (1 + accounting_converterUnits(indicator,nodesModelToCalc,converter_techs,vintage,"interest"))
2150          ** accounting_converterUnits(indicator,nodesModelToCalc,converter_techs,vintage,"amorTime")
2151      / ((1 + accounting_converterUnits(indicator,nodesModelToCalc,converter_techs,vintage,"interest"))
2152          ** accounting_converterUnits(indicator,nodesModelToCalc,converter_techs,vintage,"amorTime") - 1);
2153   
2154   
2155  abort$(sum((indicator,nodesModelToCalc,storage_techs,vintage)
2156          $(accounting_storageUnits(indicator,nodesModelToCalc,storage_techs,vintage,"useAnnuity") = 1
2157          and accounting_storageUnits(indicator,nodesModelToCalc,storage_techs,vintage,"amorTime") < 1), 1) > 0 )
2158      "Accounting: Some storage technologies use annuities but have no amortization time"
2159   
2160  parameter accounting_annuityFactor_storage(indicator,nodesModel,storage_techs,vintage);
2161  accounting_annuityFactor_storage(indicator,nodesModelToCalc,storage_techs,vintage)
2162      $accounting_storageUnits(indicator,nodesModelToCalc,storage_techs,vintage,"useAnnuity")
2163      =
2164      accounting_storageUnits(indicator,nodesModelToCalc,storage_techs,vintage,"interest")
2165          * (1 + accounting_storageUnits(indicator,nodesModelToCalc,storage_techs,vintage,"interest"))
2166          ** accounting_storageUnits(indicator,nodesModelToCalc,storage_techs,vintage,"amorTime")
2167      / ((1 + accounting_storageUnits(indicator,nodesModelToCalc,storage_techs,vintage,"interest"))
2168          ** accounting_storageUnits(indicator,nodesModelToCalc,storage_techs,vintage,"amorTime") - 1);
2169   
2170   
2171  abort$(sum((indicator,linksModelToCalc,transfer_techs,vintage)
2172          $(accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"useAnnuity") = 1
2173          and accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"amorTime") < 1), 1) > 0 )
2174      "Accounting: Some transfer technologies use annuities but have no amortization time"
2175   
2176  parameter accounting_annuityFactor_transferLink(indicator,linksModel,transfer_techs,vintage);
2177  accounting_annuityFactor_transferLink(indicator,linksModelToCalc,transfer_techs,vintage)
2178      $accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"useAnnuity")
2179      =
2180      accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"interest")
2181          * (1 + accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"interest"))
2182          ** accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"amorTime")
2183      / ((1 + accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"interest"))
2184          ** accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"amorTime") - 1);
2185   
2186   
2187   
2188  abort$(sum((indicator,linksModelToCalc,transfer_techs,vintage,link_types)
2189          $(accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"useAnnuity") = 1
2190          and accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"amorTime") < 1), 1) > 0 )
2191      "Accounting: Some transfer-per-length technologies use annuities but have no amortization time"
2192   
2193  parameter accounting_annuityFactor_transferPerLength(indicator,linksModel,transfer_techs,vintage,link_types);
2194  accounting_annuityFactor_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types) = 1;
2195   
2196  accounting_annuityFactor_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types)
2197      $accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"useAnnuity")
2198      =
2199      accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"interest")
2200          * (1 + accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"interest"))
2201          ** accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"amorTime")
2202      / ((1 + accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"interest"))
2203          ** accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"amorTime") - 1);
2204   
2206   
INCLUDE    C:\Local\REMix\framework\remix\framework\model\source\methods\mga_pre.gms
2208  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
2209  * SPDX-License-Identifier: BSD-3-Clause
2210   
INCLUDE    C:\Local\REMix\framework\remix\framework\model\source\methods\pareto_pre.gms
2214  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
2215  * SPDX-License-Identifier: BSD-3-Clause
2216   
INCLUDE    C:\Local\REMix\framework\remix\framework\model\source\postcalc\declaration.gms
2220  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
2221  * SPDX-License-Identifier: BSD-3-Clause
2222  * // # Output data
2223  * // This is the reference data model of the REMix output.
2224  * //
2225  * // ## Standard output
2228   
2235   
2237   
2238  set capType / "build", "decom", "total", "lowerLimit", "upperLimit", "total_degraded" /;
2239  set balanceType / "netto", "brutto", "positive", "negative", "flh" /;
2240  set profileType / "upper", "fixed", "lower" /;
2241  set r2a_has_converter_cost(indicator,nodesModel,years,techs,vintage,commodity);
2242   
2243  ** // OUTPUT: indicator_accounting | OEO_00000350:quantity value
2244  * // ### indicator_accounting
2245  * // Title: Accounting indicators Post-calculation
2246  parameter indicator_accounting(accNodesModel,accYears,indicator) "Post-calculation aggregated indicator accounting" ;
2247  * //
2248  ** // OUTPUT: indicator_accounting_ref | OEO_00000350:quantity value
2249  * // ### indicator_accounting_ref
2250  * // Title: Accounting indicators reference
2251  parameter indicator_accounting_ref(accNodesModel,accYears,indicator) "Indicator accounting optimization levels" ;
2252  * //
2253  ** // OUTPUT: indicator_accounting_comp | OEO_00000350:quantity value
2254  * // ### indicator_accounting_comp
2255  * // Title: Accounting indicators composition
2256  parameter indicator_accounting_comp(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a) "Indicator accounting with other indicator composition" ;
2257  * //
2258  ** // OUTPUT: indicator_accounting_detailed | OEO_00000350:quantity value
2259  * // ### indicator_accounting_detailed
2260  * // Title: Accounting indicators detail
2261  parameter indicator_accounting_detailed(indicator,nodesModel,years,techs) "Indicator accounting with technological composition" ;
2262  * //
2263  ** // OUTPUT: indicator_accounting_links | OEO_00000350:quantity value
2264  * // ### indicator_accounting_links
2265  * // Title: Accounting indicators per transfer link
2266  parameter indicator_accounting_links(indicator,nodesModel,nodesModel_a,linksModel,years,techs) "Indicator accounting of transfer technologies" ;
2267  * //
2268  parameter converter_ratedInput(techs,vintage,commodity);
2269  parameter converter_ratedOutput(techs,vintage,commodity);
2270  parameter converter_ratedOutput_min(nodesModel,years,techs,commodity);
2271  parameter converter_ratedOutput_max(nodesModel,years,techs,commodity);
2272   
2273  ** // OUTPUT: converter_caps | OEO_00010257:power capacity
2274  * // ### converter_caps
2275  * // Title: Coverter capacities post-calculation
2276  parameter converter_caps(accNodesModel,accYears,techs,commodity,capType) "Converter capacities, aggregated total" ;
2277  * //
2278  parameter converter_caps_ext(accNodesModel,nodesModel,accYears,years,techs,vintage,commodity,capType);
2279   
2280  ** // OUTPUT: converter_units | OEO_00000350:quantity value
2281  * // ### converter_units
2282  * // Title: Coverter units post-calculation
2283  parameter converter_units(accNodesModel,accYears,techs,vintage,capType) "Converter units" ;
2284  * //
2285  parameter converter_units_ext(accNodesModel,nodesModel,accYears,years,techs,vintage,capType);
2286   
2287  set transfer_usedStartEnd(nodesModel,nodesModel,linksModel,years,techs);
2288  parameter max_transfer_coefficient(techs,commodity);
2289  parameter min_transfer_coefficient(techs,commodity);
2290  ** // OUTPUT: transfer_links | OEO_00000350:quantity value
2291  * // ### transfer_links
2292  * // Title: Transfer post-calculation
2293  parameter transfer_links(linksModel,years,techs,vintage,capType) "Transfer links" ;
2294  * //
2295  ** // OUTPUT: transfer_caps | OEO_00010257:power capacity
2296  * // ### transfer_caps
2297  * // Title: Transfer capacities post-calculation
2298  parameter transfer_caps(nodesModel_start,nodesModel_end,linksModel,years,techs,commodity,capType) "Transfer capacities, aggregated total" ;
2299  * //
2300  ** // OUTPUT: transfer_flows | OEO_00050019:energy amount value
2301  * // ### transfer_flows
2302  * // Title: Transfer hourly flows
2303  parameter transfer_flows(timeModel,nodesModel_start,nodesModel_end,linksModel,years,techs,commodity) "Hourly link flows" ;
2304  * //
2305  ** // OUTPUT: transfer_flows_annual | OEO_00050019:energy amount value
2306  * // ### transfer_flows_annual
2307  * // Title: Transfer annual flows
2308  parameter transfer_flows_annual(nodesModel_start,nodesModel_end,linksModel,years,techs,commodity,balanceType) "Annual link flows" ;
2309  * //
2310  ** // OUTPUT: transfer_losses | OEO_00050019:energy amount value
2311  * // ### transfer_losses
2312  * // Title: Transfer hourly losses
2313  parameter transfer_losses(timeModel,nodesModel_start,nodesModel_end,linksModel,years,techs,commodity) "Hourly link losses" ;
2314  * //
2315  ** // OUTPUT: transfer_losses_annual | OEO_00050019:energy amount value
2316  * // ### transfer_losses_annual
2317  * // Title: Transfer annual losses
2318  parameter transfer_losses_annual(nodesModel_start,nodesModel_end,linksModel,years,techs,commodity,balanceType) "Annual link losses" ;
2319  * //
2320  parameter storage_size_max(nodesModel,years,techs,commodity);
2321  parameter storage_size_min(nodesModel,years,techs,commodity);
2322  ** // OUTPUT: storage_units |  OEO_00000350:quantity value
2323  * // ### storage_units
2324  * // Title: Storage units post-calculation
2325  parameter storage_units(accNodesModel,accYears,techs,vintage,capType) "Storage units" ;
2326  * //
2327  parameter storage_units_ext(accNodesModel,nodesModel,accYears,years,techs,vintage,capType);
2328  ** // OUTPUT: storage_caps | OEO_00230000:energy storage capacity
2329  * // ### storage_caps
2330  * // Title: Storage capacities post-calculation
2331  parameter storage_caps(accNodesModel,accYears,techs,commodity,capType) "Storage capacities, aggregated total" ;
2332  * //
2333  parameter storage_caps_ext(accNodesModel,nodesModel,accYears,years,techs,vintage,commodity,capType);
2334  ** // OUTPUT: storage_level_out | OEO_00330012:energy storage content
2335  * // ### storage_level_out
2336  * // Title: Storage level
2337  parameter storage_level_out(timeModel,accNodesModel,accYears,techs,commodity) "Storage level per time step" ;
2338  * //
2339  parameter storage_level_out_ext(timeModel,accNodesModel,nodesModel,accYears,years,techs,vintage,commodity);
2340  ** // OUTPUT: storage_flows | OEO_00050019:energy amount value
2341  * // ### storage_flows
2342  * // Title: Storage hourly flows
2343  parameter storage_flows(timeModel,accNodesModel,accYears,techs,commodity) "Storage flows per time step" ;
2344  * //
2345  parameter storage_flows_ext(timeModel,accNodesModel,nodesModel,accYears,years,techs,vintage,commodity);
2346  ** // OUTPUT: storage_flows_annual | OEO_00050019:energy amount value
2347  * // ### storage_flows_annual
2348  * // Title: Storage annual flows
2349  parameter storage_flows_annual(accNodesModel,accYears,techs,commodity,balanceType) "Aggregated storage flows" ;
2350  * //
2351  ** // OUTPUT: storage_losses_out | OEO_00050019:energy amount value
2352  * // ### storage_losses_out
2353  * // Title: Storage hourly losses
2354  parameter storage_losses_out(timeModel,accNodesModel,accYears,techs,commodity) "Storage losses per time step" ;
2355  * //
2356  ** // OUTPUT: storage_losses_annual | OEO_00050019:energy amount value
2357  * // ### storage_losses_annual
2358  * // Title: Storage annual losses
2359  parameter storage_losses_annual(accNodesModel,accYears,techs,commodity,balanceType) "Aggregated storage losses" ;
2360  * //
2361  ** // OUTPUT: commodity_balance | OEO_00000350:quantity value
2362  * // ### commodity_balance
2363  * // Title: Hourly commodity balance
2364  parameter commodity_balance(timeModel,accNodesModel,accYears,techs,commodity) "Commodity balances per model hour" ;
2365  parameter commodity_balance_ext(timeModel,accNodesModel,nodesModel,accYears,years,techs,vintage,commodity);
2366  * //
2367  ** // OUTPUT: commodity_balance_annual | OEO_00000350:quantity value
2368  * // ### commodity_balance_annual
2369  * // Title: Annual commodity balance
2370  parameter commodity_balance_annual(accNodesModel,accYears,techs,commodity,balanceType) "Aggregated commodity balances" ;
2371  * //
2372  ** // OUTPUT: marginals_sourcesink_profile | OEO_00040008:marginal cost
2373  * // ### marginals_sourcesink_profile
2374  * // Title: Source-sink marginals
2375  parameter marginals_sourcesink_profile(timeModel,nodesModel,years,techs,commodity) "Source and sink flow marginal values" ;
2376  * //
2377  ** // OUTPUT: marginals_balance | OEO_00040008:marginal cost
2378  * // ### marginals_balance
2379  * // Title: Nodel balance marginals
2380  parameter marginals_balance(timeModel,nodesModel,years,commodity) "Nodal balance marginal values" ;
2381  * //
2382  ** // OUTPUT: marginals_sourcesink_sum | OEO_00040008:marginal cost
2383  * // ### marginals_sourcesink_sum
2384  * // Title: Source-sink annual marginals
2385  parameter marginals_sourcesink_sum(nodesModel,years,techs,commodity) "Annual source and sink flow marginal values" ;
2386  * //
2387  ** // OUTPUT: marginals_indicator_bounds | OEO_00040008:marginal cost
2388  * // ### marginals_indicator_bounds
2389  * // Title: Indicator bounds marginals
2390  parameter marginals_indicator_bounds(accNodesModel,accYears,indicator) "Accounting indicator marginals" ;
2391  * //
2392  * // ## REMix-AMIRIS interface output
2393  * //
2394  ** // OUTPUT: r2a_annuity_cost_converter | OEO_00040009:cost
2395  * // ### r2a_annuity_cost_converter
2396  * // Title: Converter annuity cost
2397  parameter r2a_annuity_cost_converter(indicator,accNodesModel,accYears,techs,vintage,commodity) "Annuity cost of converters" ;
2398  * //
2399  ** // OUTPUT: r2a_spec_cost_converter | OEO_00040009:cost
2400  * // ### r2a_spec_cost_converter
2401  * // Title: Converter specific cost
2402  parameter r2a_spec_cost_converter(indicator,accNodesModel,accYears,techs,vintage,commodity) "Specific cost of converters" ;
2403  * //
2404  ** // OUTPUT: r2a_spec_cost_fuel | OEO_00040009:cost
2405  * // ### r2a_spec_cost_fuel
2406  * // Title: Commodity specific cost
2407  parameter r2a_spec_cost_fuel(indicator,accNodesModel,accYears,techs,commodity) "Specific cost of commodities, used particularly for fuels" ;
2408  * //
2409  ** // OUTPUT: r2a_spec_cost_indicator | OEO_00040009:cost
2410  * // ### r2a_spec_cost_indicator
2411  * // Title: Indicator specific cost
2412  parameter r2a_spec_cost_indicator(indicator,indicator_a,accNodesModel,accYears) "Specific indicator cost" ;
2413  * //
2414  ** // OUTPUT: r2a_converter_efficiencies | OEO_00140050:efficiency value
2415  * // ### r2a_converter_efficiencies
2416  * // Title: Indicator specific cost
2417  parameter r2a_converter_efficiencies(techs,vintage,activity,commodity,commodity_a) "Converter-specific efficiency" ;
2418  * //
2419  ** // OUTPUT: r2a_converter_avail_factor | OEO_00000350:quantity value
2420  * // ### r2a_converter_avail_factor
2421  * // Title: Converter availability factor
2422  parameter r2a_converter_avail_factor(accNodesModel,accYears,techs,vintage) "Availability factor of converter technologies" ;
2423  parameter r2a_converter_avail_profile(timeModel,accNodesModel,accYears,techs,commodity,profileType) "Availability of converter technologies" ;
2424  parameter r2a_converter_avail_profile_ext(timeModel,accNodesModel,nodesModel,accYears,years,techs,vintage,commodity,profileType);
2425  * //
2426  ** // OUTPUT: r2a_storage_e2p | OEO_00000350:quantity value
2427  * // ### r2a_storage_e2p
2428  * // Title: E2P Storage
2429  parameter r2a_storage_e2p(accNodesModel,accYears,techs,vintage,commodity,capType) "Energy-to-power ratio" ;
2430  * //
2431  ** // OUTPUT: r2a_storage_selfdischarge | OEO_00000350:quantity value
2432  * // ### r2a_storage_selfdischarge
2433  * // Title: Storage self discharge rates
2434  parameter r2a_storage_selfdischarge(accNodesModel,accYears,techs,vintage,commodity);
2435   
INCLUDE    C:\Local\REMix\framework\remix\framework\model\source\loadgdx.gms
2439  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
2440  * SPDX-License-Identifier: BSD-3-Clause
2441   
2442  * ==== global settings ====
2444   
2446   
INCLUDE    C:\Local\REMix\framework\remix\framework\model\source\core\converter.gms
2448  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
2449  * SPDX-License-Identifier: BSD-3-Clause
2450   
2451  * // # core_converter
2452  * // The equations in this file describe the converters in the model.
2453   
2454  * // ## Advanced features
2455  * //
2456  * // You can find a more detailed explanation of the %curly_open%ref%curly_close%`MIP features <explanations_mip_label>`.
2457  ** // There is also a more detailed explanation on the modeling of outages at the %curly_open%ref%curly_close%`resilience section <explanations_resilience_label>`.
2458  * //
2459  * // In the following table you can see which modifications you have to make to your data to use the different features.
2460  * //
2461  * // | Feature | Modification |
2462  * // | ------ | ------ |
2463  * // | MIP expansion | The converter_tech_Parameter "mipUnits" has to be set to 1 in converter_techParam.dat for the technologies and years where descrete expansion is wanted |
2464  * // | Minimum up/downtime | The converter_tech_Parameters "minUptime" and/or "minDowntime" need to be set to the according amount of minimum time steps.Furthermore, the converter_tech_Parameter "mipDispatch" has to be set to 1 in converter_techParam.dat
2465  * // for the technologies and years where a minimum up- or downtime should be applied so that the units can be shut down. "mipUnits" will automatically be set to 1 |
2466  * // | Partial load | The converter_tech_Parameter "mipDispatch" has to be set to 1 in converter_techParam.dat for the technologies and years where you want to make use of the partial load feature. You also have to set a value to
2467  * // the converter_coefficient_parameters "minLoad" and/or "maxLoad" for the according technologies, vintages, activities and commodities. You can then for example set different "coefficient" values for each activity in converter_coefficient.dat |
2468  ** // | Outages | You have to include the converter_outageProfile.dat-file and while executing the model you have to set --method=resilience |
2469   
2470  * // ## %curly_open%ref%curly_close%`sets <remix_model_sets_label>`
2471  * //
2472  * // ### set_converter_techs.dat
2473  * // In this file all converter technologies are listed that can be used within your model.
2474  * //
2475  * // ### set_activities.dat
2476  * // All modes with which the converter technologies can be operated need to be added here.
2477  * // Examples: Charge (for the charging mode of a storage), Powergen (for the mode in which a converter produces electricity), Curtailment (for the mode in which a renewable power plant is shut down), …
2478  * // If you would like to use the partial load feature, all activity modes that should be available for this feature need to be defined here as well.
2479  * //
2480  * // ### set_commodities.dat
2481  * // In this file all commodities are listed that can be used and converted by the converter technologies.
2482  * // Examples: Electricity, Coal, Biomass, Hydrogen, …
2483   
2484  * // ## Variables
2485  * // {special_table_converter_variables}
7919   
7920  * ==== loading units from gdx file ====
7921   
7922  * Load units from gdx file
7924   
7925  * ==== calculation of mappings ====
7926   
7927  * Technologies with a lifeTime > 0 are available
7928  set converter_availTech(nodesModel,years,converter_techs,vintage);
7929  converter_availTech(nodesModel,years,converter_techs,vintage)
7930      $(vintage.val = smax(vintage_a$(vintage_a.val <= years.val
7931          and converter_techParam(converter_techs,vintage_a,"lifeTime") > 0), vintage_a.val)) = yes;
7932   
7933  * Technologies to optimize become unavailable if they have an unitsUpperLimit of 0
7934  converter_availTech(nodesModel,years,converter_techs,vintage)
7935      $(yearsToCalc(years) and converter_capacityParam(nodesModel,years,converter_techs,"unitsUpperLimit") = 0 ) = no;
7936   
7937  * Technologies already built become unavailable if they have an unitsBuild of 0
7938  converter_availTech(nodesModel,years,converter_techs,vintage)
7939      $( ( not yearsToCalc(years)) and converter_capacityParam(nodesModel,years,converter_techs,"unitsBuild") = 0 ) = no;
7940   
7941  * Used technologies are available technologies over their technical lifeTime
7942  set converter_usedTech(nodesModel,years,converter_techs,vintage);
7943  converter_usedTech(nodesModel,years,converter_techs,vintage)
7944      $(vintage.val <= years.val
7945          and years.val < smax(years_a$converter_availTech(nodesModel,years_a,converter_techs,vintage),
7946                                  years_a.val + converter_techParam(converter_techs,vintage,"lifeTime"))
7947          ) = yes;
7948   
7949  * Technologies have to be decomissioned in the interval of first avail + lifetime to last avail + lifetime
7950  set converter_decomTech(nodesModel,years,converter_techs,vintage);
7951  converter_decomTech(nodesModel,years,converter_techs,vintage)
7952    $(sum(years_a$converter_usedTech(nodesModel,years_a,converter_techs,vintage), 1)
7953      and sum(yearsToCalc
7954        $(sameas(years, yearsToCalc)
7955          and yearsToCalc.val >= smin(years_a$converter_availTech(nodesModel,years_a,converter_techs,vintage), years_a.val) + converter_techParam(converter_techs,vintage,"lifeTime")
7956          and yearsToCalc.val <= smax(years_a$converter_availTech(nodesModel,years_a,converter_techs,vintage), years_a.val) + converter_techParam(converter_techs,vintage,"lifeTime")), 1))
7957    = yes;
7958   
7959  * Extend the decom frame to the year after the last year of usedTech
7960  converter_decomTech(nodesModel,yearsToCalc,converter_techs,vintage)
7961    $(converter_usedTech(nodesModel,yearsToCalc-1,converter_techs,vintage)
7962      and converter_decomTech(nodesModel,yearsToCalc-1,converter_techs,vintage))
7963    = yes;
7964   
7965  * Mapping for used activities and commodities
7966  set converter_usedActCom(converter_techs,vintage,activity,commodity);
7967  option converter_usedActCom < converter_coefficient;
7968   
7969  set converter_usedAct(converter_techs,vintage,activity);
7970  option converter_usedAct < converter_usedActCom;
7971   
7972  set converter_usedCom(converter_techs,vintage,commodity);
7973  option converter_usedCom < converter_usedActCom;
7974   
7975  set converter_usedTechAct(nodesModel,years,converter_techs,vintage,activity);
7976  converter_usedTechAct(nodesModel,years,converter_techs,vintage,activity)
7977      $(converter_usedTech(nodesModel,years,converter_techs,vintage)
7978          and converter_usedAct(converter_techs,vintage,activity))
7979      = yes;
7980   
7981  set converter_useRampPos(nodesModel,years,converter_techs,vintage);
7982  converter_useRampPos(nodesModelToCalc,yearsToCalc,converter_techs,vintage)
7983    $(sum(indicator$accounting_converterStartup(indicator,nodesModelToCalc,converter_techs,vintage,"perRamp"), 1)
7984      or sum(indicator$accounting_converterStartup(indicator,nodesModelToCalc,converter_techs,vintage,"perRampPos"), 1))
7985    = 1;
7986   
7987  set converter_useRampNeg(nodesModel,years,converter_techs,vintage);
7988  converter_useRampNeg(nodesModelToCalc,yearsToCalc,converter_techs,vintage)
7989    $(sum(indicator$accounting_converterStartup(indicator,nodesModelToCalc,converter_techs,vintage,"perRamp"), 1)
7990      or sum(indicator$accounting_converterStartup(indicator,nodesModelToCalc,converter_techs,vintage,"perRampNeg"), 1))
7991    = 1;
7992   
7993   
7994  * ==== aggregation of profiles ====
7995   
7996  * derive upper and lower profiles then aggregate
7997  set converter_activity_hasProfileIn(nodesData,years,converter_techs,pc_converter_activityProfile);
7998  option converter_activity_hasProfileIn < converter_activityProfileIn;
7999   
8000  set converter_activity_hasProfile(nodesModel,years,converter_techs,pc_converter_activityProfile);
8001  converter_activity_hasProfile(nodesModelToCalc,yearsToCalc,converter_techs,pc_converter_activityProfile)
8002      = sum(nodesData$aggregateNodesModel(nodesData,nodesModelToCalc),
8003              converter_activity_hasProfileIn(nodesData,yearsToCalc,converter_techs,pc_converter_activityProfile));
8004   
8005  set converter_coefficient_hasProfileIn(nodesData,years,converter_techs,vintage,activity,commodity);
8006  option converter_coefficient_hasProfileIn < converter_coefficientProfileIn;
8007   
8008  set converter_coefficient_hasProfile(nodesModel,years,converter_techs,vintage,activity,commodity);
8009  converter_coefficient_hasProfile(nodesModelToCalc,yearsToCalc,converter_techs,vintage,activity,commodity)
8010      = sum(nodesData$aggregateNodesModel(nodesData,nodesModelToCalc),
8011              converter_coefficient_hasProfileIn(nodesData,yearsToCalc,converter_techs,vintage,activity,commodity));
8012   
8013  * aagregate time dimension
8014  parameter converter_activityProfileIn_aggTime(timeModel,nodesData,yearsToCalc,converter_techs,pc_converter_activityProfile);
8015  converter_activityProfileIn_aggTime(timeModelToCalc,nodesData,yearsToCalc,converter_techs,pc_converter_activityProfile)
8016    $converter_activity_hasProfileIn(nodesData,yearsToCalc,converter_techs,pc_converter_activityProfile)
8017    = sum(timeData$timeMapping(timeData,timeModelToCalc),
8018            converter_activityProfileIn(timeData,nodesData,yearsToCalc,converter_techs,pc_converter_activityProfile)
8019            / timeLength(timeModelToCalc));
8020  option clear = converter_activityProfileIn;
8021   
8022  * weighted average for a real sum of units upper limits, plain average if one region has an upper limit of inf
8023  parameter converter_activityProfile(timeModel,nodesModel,years,converter_techs,vintage,pc_converter_activityProfile);
8024  converter_activityProfile(timeModelToCalc,converter_usedTech(nodesModelToCalc,yearsToCalc,converter_techs,vintage),"upper")
8025      = converter_techParam(converter_techs,vintage,"activityUpperLimit");
8026  converter_activityProfile(timeModelToCalc,converter_usedTech(nodesModelToCalc,yearsToCalc,converter_techs,vintage),"lower")
8027      = converter_techParam(converter_techs,vintage,"activityLowerLimit");
8028   
8029   
8030  set converter_finiteUnitLimit(nodesModelToCalc,yearsToCalc,converter_techs);
8031  converter_finiteUnitLimit(nodesModelToCalc,yearsToCalc,converter_techs)
8032      = sum(nodesData$aggregateNodesModel(nodesData,nodesModelToCalc), converter_capacityParamIn(nodesData,yearsToCalc,converter_techs,"unitsUpperLimit")) > 0
8033          and sum(nodesData$aggregateNodesModel(nodesData,nodesModelToCalc), converter_capacityParamIn(nodesData,yearsToCalc,converter_techs,"unitsUpperLimit")) < inf;
8034   
8035  set converter_infiniteUnitLimit(nodesModelToCalc,yearsToCalc,converter_techs);
8036  converter_infiniteUnitLimit(nodesModelToCalc,yearsToCalc,converter_techs)
8037      = sum(nodesData$aggregateNodesModel(nodesData,nodesModelToCalc), converter_capacityParamIn(nodesData,yearsToCalc,converter_techs,"unitsUpperLimit")) = inf;
8038   
8039  converter_activityProfile(timeModelToCalc,converter_usedTech(nodesModelToCalc,yearsToCalc,converter_techs,vintage),pc_converter_activityProfile)
8040      $(converter_activity_hasProfile(nodesModelToCalc,yearsToCalc,converter_techs,pc_converter_activityProfile)
8041          and converter_finiteUnitLimit(nodesModelToCalc,yearsToCalc,converter_techs))
8042      = sum(nodesData$(aggregateNodesModel(nodesData,nodesModelToCalc)
8043                  and converter_capacityParamIn(nodesData,yearsToCalc,converter_techs,"unitsUpperLimit") < inf ),
8044                converter_activityProfileIn_aggTime(timeModelToCalc,nodesData,yearsToCalc,converter_techs,pc_converter_activityProfile)
8045                * converter_capacityParamIn(nodesData,yearsToCalc,converter_techs,"unitsUpperLimit"))
8046      / sum(nodesData$aggregateNodesModel(nodesData,nodesModelToCalc),
8047              converter_capacityParamIn(nodesData,yearsToCalc,converter_techs,"unitsUpperLimit"));
8048   
8049  converter_activityProfile(timeModelToCalc,converter_usedTech(nodesModelToCalc,yearsToCalc,converter_techs,vintage),pc_converter_activityProfile)
8050      $(converter_activity_hasProfile(nodesModelToCalc,yearsToCalc,converter_techs,pc_converter_activityProfile)
8051          and converter_infiniteUnitLimit(nodesModelToCalc,yearsToCalc,converter_techs))
8052      = sum(nodesData$(aggregateNodesModel(nodesData,nodesModelToCalc)
8053                  and converter_capacityParamIn(nodesData,yearsToCalc,converter_techs,"unitsUpperLimit") = inf),
8054                converter_activityProfileIn_aggTime(timeModelToCalc,nodesData,yearsToCalc,converter_techs,pc_converter_activityProfile)
8055                * converter_capacityParamIn(nodesData,yearsToCalc,converter_techs,"unitsUpperLimit"))
8056      / sum(nodesData$(aggregateNodesModel(nodesData,nodesModelToCalc)
8057                      and converter_capacityParamIn(nodesData,yearsToCalc,converter_techs,"unitsUpperLimit") = inf ),
8058              1);
8059  option clear = converter_activityProfileIn_aggTime;
8060   
8061  * for fixed profiles overwrite upper and lower profile
8062  converter_activityProfile(timeModelToCalc,nodesModelToCalc,yearsToCalc,converter_techs,vintage,"lower")
8063      $converter_activity_hasProfile(nodesModelToCalc,yearsToCalc,converter_techs,"fixed")
8064      = converter_activityProfile(timeModelToCalc,nodesModelToCalc,yearsToCalc,converter_techs,vintage,"fixed");
8065   
8066  converter_activityProfile(timeModelToCalc,nodesModelToCalc,yearsToCalc,converter_techs,vintage,"upper")
8067      $converter_activity_hasProfile(nodesModelToCalc,yearsToCalc,converter_techs,"fixed")
8068      = converter_activityProfile(timeModelToCalc,nodesModelToCalc,yearsToCalc,converter_techs,vintage,"fixed");
8069   
8071   
8072  * weighted average for a real sum of units upper limits, plain average if one region has an upper limit of inf
8073  parameter converter_coefficientProfile(timeModel,nodesModel,years,converter_techs,vintage,activity,commodity);
8074  converter_coefficientProfile(timeModelToCalc,converter_usedTechAct(nodesModelToCalc,yearsToCalc,converter_techs,vintage,activity),commodity)
8075      = converter_coefficient(converter_techs,vintage,activity,commodity,"coefficient");
8076   
8077  converter_coefficientProfile(timeModelToCalc,converter_usedTechAct(nodesModelToCalc,yearsToCalc,converter_techs,vintage,activity),commodity)
8078      $( converter_coefficient_hasProfile(nodesModelToCalc,yearsToCalc,converter_techs,vintage,activity,commodity)
8079          and converter_finiteUnitLimit(nodesModelToCalc,yearsToCalc,converter_techs) )
8080      = sum(nodesData$aggregateNodesModel(nodesData,nodesModelToCalc),
8081            sum(timeData$timeMapping(timeData,timeModelToCalc),
8082                    converter_coefficientProfileIn(timeData,nodesData,yearsToCalc,converter_techs,vintage,activity,commodity))
8083                / timeLength(timeModelToCalc)
8084              * converter_capacityParamIn(nodesData,yearsToCalc,converter_techs,"unitsUpperLimit") )
8085      / sum(nodesData$aggregateNodesModel(nodesData,nodesModelToCalc),
8086              converter_capacityParamIn(nodesData,yearsToCalc,converter_techs,"unitsUpperLimit"));
8087   
8088  converter_coefficientProfile(timeModelToCalc,converter_usedTechAct(nodesModelToCalc,yearsToCalc,converter_techs,vintage,activity),commodity)
8089      $( converter_coefficient_hasProfile(nodesModelToCalc,yearsToCalc,converter_techs,vintage,activity,commodity)
8090          and converter_infiniteUnitLimit(nodesModelToCalc,yearsToCalc,converter_techs))
8091      = sum(nodesData$(aggregateNodesModel(nodesData,nodesModelToCalc)
8092                      and converter_capacityParamIn(nodesData,yearsToCalc,converter_techs,"unitsUpperLimit") = inf ),
8093            sum(timeData$timeMapping(timeData,timeModelToCalc),
8094                    converter_coefficientProfileIn(timeData,nodesData,yearsToCalc,converter_techs,vintage,activity,commodity))
8095                / timeLength(timeModelToCalc))
8096      / sum(nodesData$(aggregateNodesModel(nodesData,nodesModelToCalc)
8097                      and converter_capacityParamIn(nodesData,yearsToCalc,converter_techs,"unitsUpperLimit") = inf ), 1);
8098   
8100   
8101  * ==== prepare partial load behavior parameters ====
8102   
8103  * set disabled max load requirements to 1 to avoid excessive logical expressions later on
8104  alias(commodity, com);
8105  converter_coefficient(converter_techs,vintage,activity,commodity,"maxLoad")
8106      $((converter_coefficient(converter_techs,vintage,activity,commodity,"maxLoad") = 0)
8107        and converter_usedAct(converter_techs,vintage,activity))
8108      = 1;
8109   
8110  * indicate that at least one activity of a technology makes use of partial load behavior
8111  set converter_hasMaxLoad(converter_techs,vintage);
8112  converter_hasMaxLoad(converter_techs,vintage)
8113    = smin((activity,commodity)$converter_usedAct(converter_techs,vintage,activity),
8114              converter_coefficient(converter_techs,vintage,activity,commodity,"maxLoad")) < 1;
8115   
8116  set converter_hasMinLoad(converter_techs,vintage);
8117  converter_hasMinLoad(converter_techs,vintage)
8118    = smax((activity,commodity)$converter_usedAct(converter_techs,vintage,activity),
8119              converter_coefficient(converter_techs,vintage,activity,commodity,"minLoad")) > 0;
8120   
8121  set converter_hasConstantFluxInActivity(converter_techs,vintage);
8122  converter_hasConstantFluxInActivity(converter_techs,vintage)
8123    = sum((activity,commodity)$converter_usedAct(converter_techs,vintage,activity),
8124                          abs(converter_coefficient(converter_techs,vintage,activity,commodity,"constant"))) > 0;
8125   
8126  * setting up a requirements parameter to avoid having to cycle through commodities in equations
8127  set pc_converter_activityRequirements
8128      /
8129      minLoad             "Lower profile for converter activity"
8130      maxLoad             "Upper profile for converter activity"
8131      /;
8132  parameter converter_activityRequirements(converter_techs,vintage,activity,pc_converter_activityRequirements);
8133  converter_activityRequirements(converter_techs,vintage,activity,"minLoad")
8134    = smax(commodity, converter_coefficient(converter_techs,vintage,activity,commodity,"minLoad"));
8135  converter_activityRequirements(converter_techs,vintage,activity,"maxLoad")
8136    = smin(commodity, converter_coefficient(converter_techs,vintage,activity,commodity,"maxLoad"));
8137   
8138  * ==== activate MIP units for MIP dispatch or partial load technologies ====
8139   
8140  set converter_hasMinUptime(converter_techs,vintage);
8141  converter_hasMinUptime(converter_techs,vintage)
8142    $(converter_techParam(converter_techs,vintage,"minUptime")
8143      and converter_techParam(converter_techs,vintage,"mipDispatch"))
8144    = yes;
8145   
8146  set converter_hasMinDowntime(converter_techs,vintage);
8147  converter_hasMinDowntime(converter_techs,vintage)
8148    $(converter_techParam(converter_techs,vintage,"minDowntime")
8149      and converter_techParam(converter_techs,vintage,"mipDispatch"))
8150    = yes;
8151   
8152  * require integer unit counts if online state is to be tracked
8153  converter_techParam(converter_techs,vintage,"mipUnits")
8154      $(converter_techParam(converter_techs,vintage,"mipDispatch")
8155        or converter_hasMinLoad(converter_techs, vintage)
8156        or converter_hasMaxLoad(converter_techs, vintage)
8157        or converter_hasConstantFluxInActivity(converter_techs,vintage))
8158      = 1;
8159   
8160  * ==== floor mip converter units to integer values ====
8161  converter_capacityParam(nodesModelToCalc,yearsToCalc,converter_techs,"unitsLowerLimit")
8162      $sum(vintage, converter_techParam(converter_techs,vintage,"mipUnits"))
8163      = floor(converter_capacityParam(nodesModelToCalc,yearsToCalc,converter_techs,"unitsLowerLimit"));
8164  converter_capacityParam(nodesModelToCalc,yearsToCalc,converter_techs,"unitsUpperLimit")
8165      $sum(vintage, converter_techParam(converter_techs,vintage,"mipUnits"))
8166      = ceil(converter_capacityParam(nodesModelToCalc,yearsToCalc,converter_techs,"unitsUpperLimit"));
8167   
8168  * ==== scalars and sets for minUptime and minDowntime ====
8169   
8170  scalar converter_maxUptimeReq;
8171  converter_maxUptimeReq = smax((converter_techs,vintage), converter_techParam(converter_techs,vintage,"minUptime"));
8172  set uptimeSearchRange(timeModelToCalc);
8173  uptimeSearchRange(timeModelToCalc) = ord(timeModelToCalc) <= converter_maxUptimeReq;
8174   
8175  scalar converter_maxDowntimeReq;
8176  converter_maxDowntimeReq = smax((converter_techs,vintage), converter_techParam(converter_techs,vintage,"minDowntime"));
8177  set downtimeSearchRange(timeModelToCalc);
8178  downtimeSearchRange(timeModelToCalc) = ord(timeModelToCalc) <= converter_maxDowntimeReq;
8179   
8180  * ==== definition of variables ====
8181   
8182  * Initialise variables for unitsBuild
8183  converter_unitsBuild.l(nodesModel,years,converter_techs,vintage)
8184      $converter_availTech(nodesModel,years,converter_techs,vintage)
8185      = converter_capacityParam(nodesModel,years,converter_techs,"unitsBuild");
8186  converter_unitsBuild.lo(nodesModel,yearsToCalc,converter_techs,vintage)
8187      $converter_availTech(nodesModel,yearsToCalc,converter_techs,vintage)
8188      = converter_unitsBuild.l(nodesModel,yearsToCalc,converter_techs,vintage);
8189  converter_unitsBuild.fx(nodesModel,years,converter_techs,vintage)
8190      $converter_capacityParam(nodesModel,years,converter_techs,"noExpansion")
8191      = converter_unitsBuild.l(nodesModel,years,converter_techs,vintage);
8192   
8193  * Initialise variables for unitsDecom
8194  converter_unitsDecom.l(nodesModel,years,converter_techs,vintage)
8195    $(converter_decomTech(nodesModel,years,converter_techs,vintage)
8196      and years.val < sum(yearsToCalc$(ord(yearsToCalc) = 1), yearsToCalc.val))
8197    = sum((years_a,years_aa)$(sameas(years-1, years_aa)
8198                        and years_a.val > years_aa.val - converter_techParam(converter_techs,vintage,'lifeTime')
8199                        and years_a.val <= years.val - converter_techParam(converter_techs,vintage,'lifeTime')
8200                        and converter_availTech(nodesModel,years_a,converter_techs,vintage)),
8201          converter_unitsBuild.l(nodesModel,years_a,converter_techs,vintage));
8202   
8203  converter_unitsDecom.l(nodesModel,yearsToCalc,converter_techs,vintage)
8204    $converter_decomTech(nodesModel,yearsToCalc,converter_techs,vintage)
8205    = sum(years$
8206          (years.val < sum(yearsToCalc_a$(ord(yearsToCalc_a) = 1), yearsToCalc_a.val)
8207            and converter_availTech(nodesModel,years,converter_techs,vintage)
8208            and years.val > sum(years_a$sameas(years_a, yearsToCalc-1), years_a.val) - converter_techParam(converter_techs,vintage,'lifeTime')
8209            and years.val <= yearsToCalc.val - converter_techParam(converter_techs,vintage,'lifeTime')),
8210        converter_unitsBuild.l(nodesModel,years,converter_techs,vintage))
8211      + sum(yearsToCalc_a$
8212          (yearsToCalc_a.val < sum(yearsToCalc_aa$(ord(yearsToCalc_aa) > 1), yearsToCalc_a.val)
8213            and converter_availTech(nodesModel,yearsToCalc_a,converter_techs,vintage)
8214            and yearsToCalc_a.val > sum(years_a$sameas(years_a, yearsToCalc-1), years_a.val) - converter_techParam(converter_techs,vintage,'lifeTime')
8215            and yearsToCalc_a.val <= yearsToCalc.val - converter_techParam(converter_techs,vintage,'lifeTime')),
8216        converter_unitsBuild.l(nodesModel,yearsToCalc_a,converter_techs,vintage));
8217        ;
8218   
8219  converter_unitsDecom.lo(nodesModel,yearsToCalc,converter_techs,vintage)
8220      $(converter_usedTech(nodesModel,yearsToCalc,converter_techs,vintage)
8221          and not converter_techParam(converter_techs,vintage,"freeDecom"))
8222      = converter_unitsDecom.l(nodesModel,yearsToCalc,converter_techs,vintage)
8223   
8224  * Calculate planned unit expansion
8225  parameter converter_unitsPlanned(nodesModel,years,converter_techs,vintage);
8226  converter_unitsPlanned(nodesModel,years,converter_techs,vintage) = 0;
8227  loop(years,
8228    converter_unitsPlanned(nodesModel,years,converter_techs,vintage)
8229      =
8230      converter_unitsPlanned(nodesModel,years-1,converter_techs,vintage)
8231          $converter_usedTech(nodesModel,years-1,converter_techs,vintage)
8232      + converter_unitsBuild.l(nodesModel,years,converter_techs,vintage)
8233          $converter_availTech(nodesModel,years,converter_techs,vintage)
8234      - converter_unitsDecom.l(nodesModel,years,converter_techs,vintage)
8235          $converter_usedTech(nodesModel,years,converter_techs,vintage);
8236  );
8237   
8238  * Set initial state for planned units
8239  converter_unitsTotal.l(nodesModel,years,converter_techs,vintage)
8240    = converter_unitsPlanned(nodesModel,years,converter_techs,vintage)
8241   
8242  * Calculate if planned unit expansion is bounded by upper and lower limits
8243  set converter_unitBoundsFixed(nodesModel,years,converter_techs);
8244  converter_unitBoundsFixed(nodesModel,years,converter_techs)
8245    $(sum(vintage$converter_usedTech(nodesModel,years,converter_techs,vintage),
8246          converter_unitsPlanned(nodesModel,years,converter_techs,vintage))
8247      = converter_capacityParam(nodesModel,years,converter_techs,"unitsUpperLimit")
8248    and sum(vintage$converter_usedTech(nodesModel,years,converter_techs,vintage),
8249          converter_unitsPlanned(nodesModel,years,converter_techs,vintage))
8250      = converter_capacityParam(nodesModel,years,converter_techs,"unitsLowerLimit"))
8251    = yes;
8252   
8253  * Fix unitsBuild, unitsDecom, unitsTotal if levels are predetermined by upper and lower limits
8254  converter_unitsBuild.fx(nodesModel,years,converter_techs,vintage)
8255    $(converter_availTech(nodesModel,years,converter_techs,vintage)
8256      and converter_unitBoundsFixed(nodesModel,years,converter_techs))
8257    = converter_unitsBuild.l(nodesModel,years,converter_techs,vintage);
8258  converter_unitsDecom.fx(nodesModel,years,converter_techs,vintage)
8259    $(converter_usedTech(nodesModel,years,converter_techs,vintage)
8260      and converter_unitBoundsFixed(nodesModel,years,converter_techs))
8261    = converter_unitsDecom.l(nodesModel,years,converter_techs,vintage);
8262  converter_unitsTotal.fx(nodesModel,years,converter_techs,vintage)
8263    $(converter_usedTech(nodesModel,years,converter_techs,vintage)
8264      and converter_unitBoundsFixed(nodesModel,years,converter_techs))
8265    = converter_unitsTotal.l(nodesModel,years,converter_techs,vintage);
8266   
8267  converter_unitsOnline_MIP.up(timeModelToCalc,nodesModel,years,converter_techs,vintage)
8268      $(converter_usedTech(nodesModel,years,converter_techs,vintage)
8269        and converter_techParam(converter_techs,vintage,"mipDispatch") = 1)
8270      = converter_capacityParam(nodesModel,years,converter_techs,"unitsUpperLimit");
8271   
8272  converter_unitsTotal_MIP.up(nodesModel,years,converter_techs,vintage)
8273      $(converter_usedTech(nodesModel,years,converter_techs,vintage)
8274        and converter_techParam(converter_techs,vintage,"mipUnits") = 1)
8275      = converter_capacityParam(nodesModel,years,converter_techs,"unitsUpperLimit");
8276   
8277  converter_unitsUsingActivity_MIP.up(timeModelToCalc,nodesModel,years,converter_techs,vintage,activity)
8278      $(converter_usedTech(nodesModel,years,converter_techs,vintage)
8279        and (converter_hasMinLoad(converter_techs, vintage)
8280              or converter_hasMaxLoad(converter_techs, vintage)))
8281      = converter_capacityParam(nodesModel,years,converter_techs,"unitsUpperLimit");
8282   
8283  * Add parameter for fixing capacities during myopic runs
8284  parameter converter_unitsDelta(nodesModel,years,converter_techs);
8285   
8286  * ==== declaration of equations ====
8287   
8288  equations
8289    Eq_converter_unitsBalance(nodesModel,years,converter_techs,vintage
8290      ) "Ensures the units balance over the planning period."
8291    Eq_converter_unitsFixedDecom(nodesModel,years,converter_techs,vintage
8292      ) "Restricts the fixed decommissioning of units over the planning period."
8293    Eq_converter_unitsFreeDecom(nodesModel,years,converter_techs,vintage
8294      ) "Restricts the free decommissioning of units over the planning period."
8295    Eq_converter_unitsUpperLimit(nodesModel,years,converter_techs
8296      ) "Upper bound for the total number of units."
8297    Eq_converter_unitsLowerLimit(nodesModel,years,converter_techs
8298      ) "Lower bound for the total number of units."
8299    Eq_converter_unitsFixedLimit(nodesModel,years,converter_techs
8300      ) "Fixed bound for the total number of units."
8301    Eq_converter_unitsTotalMIP(nodesModel,years,converter_techs,vintage
8302      ) "Fixes the total number of units to the corresponding integer variable."
8303    Eq_converter_unitsOnlineMIP(timeModel,nodesModel,years,converter_techs,vintage
8304      ) "Fixes the number of online units to the corresponding integer variable."
8305   
8306    Eq_converter_activityLowerLimit(timeModel,nodesModel,years,converter_techs,vintage
8307      ) "Lower limit on the activity."
8308    Eq_converter_activityUpperLimit(timeModel,nodesModel,years,converter_techs,vintage
8309      ) "Upper limit on the activity."
8310   
8311    Eq_converter_activityFixedLimit(timeModel,nodesModel,years,converter_techs,vintage
8312      ) "Fixed limit on the activity."
8313    Eq_converter_rampPos(timeModel,nodesModel,years,converter_techs,vintage
8314      ) "Positive ramping of unit activity."
8315    Eq_converter_rampNeg(timeModel,nodesModel,years,converter_techs,vintage
8316      ) "Negative ramping of unit activity."
8317    Eq_converter_rampLimit(timeModel,nodesModel,years,converter_techs,vintage
8318      ) "Restrict ramping up of unit activity."
8319   
8320    Eq_converter_unitsOnline(timeModel,nodesModel,years,converter_techs,vintage
8321      ) "Set online units to total number of operational units."
8322    Eq_converter_unitsOnlineUC(timeModel,nodesModel,years,converter_techs,vintage
8323      ) "Allow shutting down units."
8324    Eq_converter_activityStartups(timeModel,nodesModel,years,converter_techs,vintage
8325      ) "Variable counting the number of unit startups."
8326    Eq_converter_activityShutdowns(timeModel,nodesModel,years,converter_techs,vintage
8327      ) "Variable tracking the number of unit shutdowns."
8328    Eq_converter_limitStartups(nodesModel,years,converter_techs,vintage
8329      ) "Limit the number of startup cycles a unit can perform."
8330    Eq_converter_minUptime(timeModel,nodesModel,years,converter_techs,vintage
8331      ) "Require recently started units to remain online for their respective minimum uptime."
8332    Eq_converter_minDowntime(timeModel,nodesModel,years,converter_techs,vintage
8333      ) "Require recently shut down units to remain offline for their respective minimum downtime."
8334    Eq_converter_activityUpperLimitDetailedPartLoadMinReq(timeModel,nodesModel,years,converter_techs,vintage,activity
8335      ) "Limit activity coefficients of activities with a given load requirement or stricter to the number of units in such modes."
8336    Eq_converter_activityUpperLimitDetailedPartLoadMaxReq(timeModel,nodesModel,years,converter_techs,vintage,activity
8337      ) "Limit activity coefficients of activities with a given load requirement or stricter to the number of units in such modes."
8338    Eq_converter_activityLowerLimitDetailedPartLoadMinReq(timeModel,nodesModel,years,converter_techs,vintage,activity
8339      ) "Enforce sufficient activity coefficients of activities to justify all active modes."
8340    Eq_converter_noOnlineIdle(timeModel,nodesModel,years,converter_techs,vintage
8341      ) "Prevent the circumvention of requirements by keeping units online without using any modes."
8342    Eq_converter_noOnlineIdleDetailedPartLoad(timeModel,nodesModel,years,converter_techs,vintage
8343      ) "Prevent the circumvention of requirements by keeping units online without using any modes. Allow more than one mode activation per unit."
8344    Eq_converter_activityUpperLimitPartLoad(timeModel,nodesModel,years,converter_techs,vintage,activity
8345      ) "Limit usage of an activity to corresponding units."
8346    Eq_converter_activityLowerLimitPartLoad(timeModel,nodesModel,years,converter_techs,vintage,activity
8347      ) "Limit usage of an activity to corresponding units."
8348    Eq_converter_activityModeLimit(timeModel,nodesModel,years,converter_techs,vintage,activity
8349      ) "Limit the number of units in one particular mode to the number of operational units."
8350    ;
8351   
8352  * ==== equation definition ====
8353  * // ## Equations
8354  * // ### Converter Units Balance
8355  * // Ensures that the total units are consistent with the built and decommissioned units.
8356  * // {Eq_converter_unitsBalance}
8357  Eq_converter_unitsBalance(nodesModelSel,yearsSel,converter_techs,vintage)
8358      $((converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
8359            or sum(years$sameas(years,yearsSel), converter_usedTech(nodesModelSel,years-1,converter_techs,vintage)))
8360          and not converter_unitBoundsFixed(nodesModelSel,yearsSel,converter_techs))
8361      ..
8362      converter_unitsTotal(nodesModelSel,yearsSel,converter_techs,vintage)
8363      =e=
8364      sum(yearsToCalc$(ord(yearsToCalc) = 1 and sameas(yearsToCalc, yearsSel)),
8365        sum(years$sameas(years, yearsToCalc),
8366          converter_unitsTotal(nodesModelSel,years-1,converter_techs,vintage)
8367            $converter_usedTech(nodesModelSel,years-1,converter_techs,vintage)))
8368      + sum((yearsToCalc)$(ord(yearsToCalc) > 1 and sameas(yearsToCalc, yearsSel)),
8369        converter_unitsTotal(nodesModelSel,yearsToCalc-1,converter_techs,vintage)
8370          $converter_usedTech(nodesModelSel,yearsToCalc-1,converter_techs,vintage))
8371      + converter_unitsBuild(nodesModelSel,yearsSel,converter_techs,vintage)
8372          $converter_availTech(nodesModelSel,yearsSel,converter_techs,vintage)
8373      - converter_unitsDecom(nodesModelSel,yearsSel,converter_techs,vintage)
8374          $converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage);
8375   
8376  * // ### Converter Units Fixed Decommission
8377  * // Restricts the fixed decommissioning of units over the planning period.
8378  * // {Eq_converter_unitsFixedDecom}
8379  Eq_converter_unitsFixedDecom(nodesModelSel,yearsSel,converter_techs,vintage)
8380      $(converter_decomTech(nodesModelSel,yearsSel,converter_techs,vintage)
8381          and not converter_techParam(converter_techs,vintage,"freeDecom") = 1
8382          and not converter_unitBoundsFixed(nodesModelSel,yearsSel,converter_techs))
8383      ..
8384      converter_unitsDecom(nodesModelSel,yearsSel,converter_techs,vintage)
8385      =e=
8386      sum(years$
8387          (converter_availTech(nodesModelSel,years,converter_techs,vintage)
8388            and years.val > sum(yearsToCalc$sameas(yearsToCalc+1, yearsSel), yearsToCalc.val) - converter_techParam(converter_techs,vintage,'lifeTime')
8389            and years.val <= yearsSel.val - converter_techParam(converter_techs,vintage,'lifeTime')),
8390        converter_unitsBuild(nodesModelSel,years,converter_techs,vintage));
8391   
8392  * // ### Converter Units Free Decommission
8393  * // Restricts the free decommissioning of units over the planning period.
8394  * // {Eq_converter_unitsFreeDecom}
8395  Eq_converter_unitsFreeDecom(nodesModelSel,yearsSel,converter_techs,vintage)
8396      $((converter_decomTech(nodesModelSel,yearsSel,converter_techs,vintage)
8397          or converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage))
8398          and converter_techParam(converter_techs,vintage,"freeDecom") = 1)
8399      ..
8400      sum(years$
8401            ((converter_decomTech(nodesModelSel,years,converter_techs,vintage)
8402              or converter_usedTech(nodesModelSel,years,converter_techs,vintage))
8403              and years.val < sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)),
8404          converter_unitsDecom(nodesModelSel,years,converter_techs,vintage))
8405      + sum(yearsToCalc$
8406            ((converter_decomTech(nodesModelSel,yearsToCalc,converter_techs,vintage)
8407              or converter_usedTech(nodesModelSel,yearsToCalc,converter_techs,vintage))
8408              and yearsToCalc.val >= sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
8409              and yearsToCalc.val <= yearsSel.val),
8410          converter_unitsDecom(nodesModelSel,yearsToCalc,converter_techs,vintage))
8411      =g=
8412      sum(years$
8413            (converter_availTech(nodesModelSel,years,converter_techs,vintage)
8414              and years.val < sum(yearsToCalc$(ord(yearsToCalc)=1), yearsToCalc.val) - converter_techParam(converter_techs,vintage,'lifeTime')),
8415          converter_unitsBuild(nodesModelSel,years,converter_techs,vintage))
8416      + sum(yearsToCalc$
8417            (converter_availTech(nodesModelSel,yearsToCalc,converter_techs,vintage)
8418              and yearsToCalc.val >= sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
8419              and yearsToCalc.val <= yearsSel.val - converter_techParam(converter_techs,vintage,'lifeTime')),
8420          converter_unitsBuild(nodesModelSel,yearsToCalc,converter_techs,vintage));
8421   
8422  * // ### Converter Units Upper Limit
8423  * // Upper bound for the total number of units.
8424  * // {Eq_converter_unitsUpperLimit}
8425  Eq_converter_unitsUpperLimit(nodesModelSel,yearsSel,converter_techs)
8426      $(converter_capacityParam(nodesModelSel,yearsSel,converter_techs,'unitsUpperLimit') >= 0
8427          and converter_capacityParam(nodesModelSel,yearsSel,converter_techs,'unitsUpperLimit') < +inf
8428          and converter_capacityParam(nodesModelSel,yearsSel,converter_techs,'unitsUpperLimit')
8429              <> converter_capacityParam(nodesModelSel,yearsSel,converter_techs,'unitsLowerLimit'))
8430      ..
8431      sum(vintage$converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage),
8432          converter_unitsTotal(nodesModelSel,yearsSel,converter_techs,vintage))
8433      =l=
8434      converter_capacityParam(nodesModelSel,yearsSel,converter_techs,"unitsUpperLimit");
8435   
8436  * // ### Converter Units Lower Limit
8437  * // Lower bound for the total number of units.
8438  * // {Eq_converter_unitsLowerLimit}
8439  Eq_converter_unitsLowerLimit(nodesModelSel,yearsSel,converter_techs)
8440      $(converter_capacityParam(nodesModelSel,yearsSel,converter_techs,'unitsLowerLimit') > 0
8441          and converter_capacityParam(nodesModelSel,yearsSel,converter_techs,'unitsLowerLimit')
8442              <> converter_capacityParam(nodesModelSel,yearsSel,converter_techs,'unitsUpperLimit'))
8443      ..
8444      sum(vintage$converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage),
8445          converter_unitsTotal(nodesModelSel,yearsSel,converter_techs,vintage))
8446      =g=
8447      converter_capacityParam(nodesModelSel,yearsSel,converter_techs,"unitsLowerLimit");
8448   
8449  Eq_converter_unitsFixedLimit(nodesModelSel,yearsSel,converter_techs)
8450      $(converter_capacityParam(nodesModelSel,yearsSel,converter_techs,'unitsLowerLimit')
8451          = converter_capacityParam(nodesModelSel,yearsSel,converter_techs,'unitsUpperLimit'))
8452      ..
8453      sum(vintage$converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage),
8454          converter_unitsTotal(nodesModelSel,yearsSel,converter_techs,vintage))
8455      =e=
8456      converter_capacityParam(nodesModelSel,yearsSel,converter_techs,"unitsUpperLimit");
8457   
8458  * // ### Converter Units Total MIP
8459  * // Fixes the total number of units to the corresponding integer variable.
8460  * // {Eq_converter_unitsTotalMIP}
8461  Eq_converter_unitsTotalMIP(nodesModelSel,yearsSel,converter_techs,vintage)
8462      $( converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
8463          and converter_techParam(converter_techs,vintage,"mipUnits") = 1 )
8464      ..
8465      converter_unitsTotal(nodesModelSel,yearsSel,converter_techs,vintage)
8466      =e=
8467      converter_unitsTotal_MIP(nodesModelSel,yearsSel,converter_techs,vintage);
8468   
8469  * // ### Converter Units Online MIP
8470  * // Fixes the number of online units to the corresponding integer variable.
8471  * // {Eq_converter_unitsOnlineMIP}
8472  Eq_converter_unitsOnlineMIP(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
8473      $( converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
8474          and converter_techParam(converter_techs,vintage,"mipDispatch") = 1 )
8475      ..
8476      converter_unitsOnline(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
8477      =e=
8478      converter_unitsOnline_MIP(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage);
8479   
8480  * // ### Converter Activity Lower Limit
8481  * // Lower limit on the activity.
8482  * // {Eq_converter_activityLowerLimit}
8483  Eq_converter_activityLowerLimit(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
8484      $(converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
8485          and converter_activityProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,"lower") > 0
8486          and converter_activityProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,"lower")
8487               <> converter_activityProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,"upper")
8488          and not converter_hasMinLoad(converter_techs, vintage))
8489      ..
8490      sum(activity$converter_usedAct(converter_techs,vintage,activity),
8491          converter_activity(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity)
8492      )
8493      =g=
8494      converter_activityProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,"lower")
8496      * converter_unitsOnline(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage);
8498   
8499  * // ### Converter Activity Upper Limit
8500  * // Upper limit on the activity.
8501  * // {Eq_converter_activityUpperLimit}
8502  Eq_converter_activityUpperLimit(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
8503      $(converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
8504          and converter_activityProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,"upper") >= 0
8505          and converter_activityProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,"upper")
8506               <> converter_activityProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,"lower"))
8507      ..
8508      sum(activity$converter_usedAct(converter_techs,vintage,activity),
8509          converter_activity(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity)
8510      )
8511      =l=
8512      converter_activityProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,"upper")
8514      * converter_unitsOnline(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage);
8516   
8517  Eq_converter_activityFixedLimit(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
8518      $(converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
8519          and converter_activityProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,"lower")
8520               = converter_activityProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,"upper"))
8521      ..
8522      sum(activity$converter_usedAct(converter_techs,vintage,activity),
8523          converter_activity(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity)
8524      )
8525      =e=
8526      converter_activityProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,"upper")
8528      * converter_unitsOnline(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage);
8530   
8531  * // ### Converter Positive Ramping
8532  * // Positive ramping of unit activity.
8533  * // {Eq_converter_rampPos}
8534  Eq_converter_rampPos(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,converter_techs,vintage)
8535    $( converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
8536        and converter_useRampPos(nodesModelSel,yearsSel,converter_techs,vintage))
8537      ..
8538      converter_rampPos(timeModelToCalc,nodesModelSel,yearsSel,converter_techs,vintage)
8539      =g=
8540      sum(activity$converter_usedAct(converter_techs,vintage,activity),
8541              converter_activity(timeModelToCalc,nodesModelSel,yearsSel,converter_techs,vintage,activity)
8542              - converter_activity(timeModelToCalc--1,nodesModelSel,yearsSel,converter_techs,vintage,activity));
8543   
8544  * // ### Converter Negative Ramping
8545  * // Negative ramping of unit activity.
8546  * // {Eq_converter_rampNeg}
8547  Eq_converter_rampNeg(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,converter_techs,vintage)
8548    $( converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
8549        and converter_useRampNeg(nodesModelSel,yearsSel,converter_techs,vintage))
8550      ..
8551      converter_rampNeg(timeModelToCalc,nodesModelSel,yearsSel,converter_techs,vintage)
8552      =g=
8553      - sum(activity$converter_usedAct(converter_techs,vintage,activity),
8554              converter_activity(timeModelToCalc,nodesModelSel,yearsSel,converter_techs,vintage,activity)
8555              - converter_activity(timeModelToCalc--1,nodesModelSel,yearsSel,converter_techs,vintage,activity));
8556   
8557  * // ### Converter Ramping Limit
8558  * // Restrict ramping up of unit activity.
8559  * // {Eq_converter_rampLimit}
8560  Eq_converter_rampLimit(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,converter_techs,vintage)
8561    $( converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
8562          and converter_techParam(converter_techs,vintage,"activityRampLimit") > 0)
8563      ..
8564      sum(activity$converter_usedAct(converter_techs,vintage,activity),
8565              converter_activity(timeModelToCalc,nodesModelSel,yearsSel,converter_techs,vintage,activity)
8566              - converter_activity(timeModelToCalc--1,nodesModelSel,yearsSel,converter_techs,vintage,activity))
8567    =l=
8568    converter_techParam(converter_techs,vintage,"activityRampLimit")
8570      * converter_unitsOnline(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage);
8572   
8573   
8575   
8576  * // ### Converter MIP Units Online
8577  * // Restrict ramping up of unit activity.
8578  * // {Eq_converter_unitsOnline}
8579  Eq_converter_unitsOnline(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
8580      $( converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
8581          and converter_techParam(converter_techs,vintage,"mipDispatch") = 0 )
8582    ..
8583    converter_unitsOnline(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
8584    =e=
8585    converter_unitsTotal(nodesModelSel,yearsSel,converter_techs,vintage)
8586      ;
8587   
8588  * // ### Converter MIP Units Shutting Down
8589  * // Allow shutting down units.
8590  * // {Eq_converter_unitsOnlineUC}
8591  Eq_converter_unitsOnlineUC(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
8592      $( converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
8593          and converter_techParam(converter_techs,vintage,"mipDispatch") = 1 )
8594    ..
8595    converter_unitsOnline(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
8596    =l=
8597    converter_unitsTotal(nodesModelSel,yearsSel,converter_techs,vintage)
8598      ;
8600   
8601  * // ### Converter Activity Startups
8602  * // Variable counting the number of unit startups.
8603  * // {Eq_converter_activityStartups}
8604  Eq_converter_activityStartups(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,converter_techs,vintage)
8605    $( converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
8606          and converter_techParam(converter_techs,vintage,"mipDispatch") = 1 )
8607      ..
8608      converter_unitStartups(timeModelToCalc,nodesModelSel,yearsSel,converter_techs,vintage)
8609      =g=
8610          converter_unitsOnline(timeModelToCalc,nodesModelSel,yearsSel,converter_techs,vintage)
8611      - converter_unitsOnline(timeModelToCalc--1,nodesModelSel,yearsSel,converter_techs,vintage);
8612   
8613  * // ### Converter Activity Shutdowns
8614  * // Variable tracking the number of unit shutdowns.
8615  * // {Eq_converter_activityShutdowns}
8616  Eq_converter_activityShutdowns(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,converter_techs,vintage)
8617    $( converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
8618          and converter_techParam(converter_techs,vintage,"mipDispatch") = 1
8619          and converter_techParam(converter_techs,vintage,"minDowntime") > 0)
8620      ..
8621      converter_unitShutdowns(timeModelToCalc,nodesModelSel,yearsSel,converter_techs,vintage)
8622      =g=
8623          converter_unitsOnline(timeModelToCalc--1,nodesModelSel,yearsSel,converter_techs,vintage)
8624      - converter_unitsOnline(timeModelToCalc,nodesModelSel,yearsSel,converter_techs,vintage);
8625   
8626  * // ### Converter Activity Startup Limit
8627  * // Limit the number of startup cycles a unit can perform.
8628  * // {Eq_converter_limitStartups}
8629  Eq_converter_limitStartups(nodesModelSel,yearsSel,converter_techs,vintage)
8630    $( converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
8631          and converter_techParam(converter_techs,vintage,"mipDispatch") = 1
8632      and converter_techParam(converter_techs,vintage,"startupLimit") > 0)
8633      ..
8634      sum(timeModelToCalc, converter_unitStartups(timeModelToCalc,nodesModelSel,yearsSel,converter_techs,vintage))
8635    =l=
8636    converter_techParam(converter_techs,vintage,"startupLimit")
8637    * converter_unitsTotal(nodesModelSel,yearsSel,converter_techs,vintage);
8638   
8639  alias(timeModelToCalc,ttc);
8640   
8641  * // ### Converter Units Minimum Uptime
8642  * // Require recently started units to remain online for their respective minimum uptime.
8643  * // {Eq_converter_minUptime}
8644  Eq_converter_minUptime(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,converter_techs,vintage)
8645    $( converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
8646          and converter_techParam(converter_techs,vintage,"mipDispatch") = 1
8647      and converter_techParam(converter_techs,vintage,"minUptime") > 0)
8648      ..
8649      sum(ttc$[uptimeSearchRange(ttc) and ord(ttc)<=converter_techParam(converter_techs,vintage,"minUptime")],
8650          converter_unitStartups(ttc+[ord(timeModelToCalc)-converter_techParam(converter_techs,vintage,"minUptime")],
8651              nodesModelSel,yearsSel,converter_techs,vintage))
8652          =l=
8653          converter_unitsOnline(timeModelToCalc,nodesModelSel,yearsSel,converter_techs,vintage);
8654   
8655  * // ### Converter Units Minimum Downtime
8656  * // Require recently shut down units to remain offline for their respective minimum downtime.
8657  * // {Eq_converter_minDowntime}
8658  Eq_converter_minDowntime(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,converter_techs,vintage)
8659    $( converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
8660          and converter_techParam(converter_techs,vintage,"mipDispatch") = 1
8661      and converter_techParam(converter_techs,vintage,"minDowntime") > 0)
8662      ..
8663      sum(ttc$[downtimeSearchRange(ttc) and ord(ttc)<=converter_techParam(converter_techs,vintage,"minDowntime")],
8664          converter_unitShutdowns(ttc+[ord(timeModelToCalc)-converter_techParam(converter_techs,vintage,"minDowntime")],
8665              nodesModelSel,yearsSel,converter_techs,vintage))
8666          =l=
8667          converter_unitsTotal(nodesModelSel,yearsSel,converter_techs,vintage)
8668      - converter_unitsOnline(timeModelToCalc,nodesModelSel,yearsSel,converter_techs,vintage);
8669   
8670  * This equation is meant to cause the units to activate particular mode counters to gain access to the corresponding activities.
8671  * Activities are allowed to be used on units with stricter activity requirements but not the other way around.
8672  alias(activity, act);
8673   
8674  * // ### Converter MIP Units Activity Upper Limit Minimum Required Load
8675  * // Limit activity coefficients of activities with a given load requirement or stricter to the number of units in such modes.
8676  * // {Eq_converter_activityUpperLimitDetailedPartLoadMinReq}
8677  Eq_converter_activityUpperLimitDetailedPartLoadMinReq(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity)
8678    $( converter_usedTechAct(nodesModelSel,yearsSel,converter_techs,vintage,activity)
8679          and converter_hasMinLoad(converter_techs, vintage)
8680          and converter_techParam(converter_techs,vintage,"mipDetailedPartialLoad"))
8681      ..
8682      sum(act$(converter_activityRequirements(converter_techs,vintage,act,"minLoad")
8683                  >= converter_activityRequirements(converter_techs,vintage,activity,"minLoad")
8684               and converter_usedAct(converter_techs,vintage,act)),
8685      converter_activity(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,act))
8686    =l=
8687    converter_activityProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,"upper")
8688      * sum(act$(converter_activityRequirements(converter_techs,vintage,act,"minLoad")
8689                  >= converter_activityRequirements(converter_techs,vintage,activity,"minLoad")
8690                 and converter_usedAct(converter_techs,vintage,act)),
8691      converter_unitsUsingActivity_MIP(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,act));
8692   
8693  * // ### Converter MIP Units Activity Upper Limit Maximum Required Load
8694  * // Limit activity coefficients of activities with a given load requirement or stricter to the number of units in such modes.
8695  * // {Eq_converter_activityUpperLimitDetailedPartLoadMaxReq}
8696  Eq_converter_activityUpperLimitDetailedPartLoadMaxReq(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity)
8697    $( converter_usedTechAct(nodesModelSel,yearsSel,converter_techs,vintage,activity)
8698          and converter_hasMaxLoad(converter_techs,vintage)
8699          and converter_techParam(converter_techs,vintage,"mipDetailedPartialLoad"))
8700      ..
8701      sum(act$(converter_activityRequirements(converter_techs,vintage,act,"maxLoad")
8702                  <= converter_activityRequirements(converter_techs,vintage,activity,"maxLoad")
8703               and converter_usedAct(converter_techs,vintage,act)),
8704      converter_activity(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,act))
8705    =l=
8706      sum(act$(converter_activityRequirements(converter_techs,vintage,act,"maxLoad")
8707                  <= converter_activityRequirements(converter_techs,vintage,activity,"maxLoad")
8708               and converter_usedAct(converter_techs,vintage,act)),
8709      min(converter_activityRequirements(converter_techs,vintage,act,"maxLoad"),
8710            converter_activityProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,"upper"))
8711            * converter_unitsUsingActivity_MIP(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,act));
8712   
8713  * This equation is meant to enforce the lower limit requirements of activities in use.
8714  * Loads produced by activities with less strict requirements can contribute to the minimum load requirement of strict activities but not the other way around,
8715  * because these activities can only run on units in the respectively strict activation state.
8716   
8717  * // ### Converter MIP Units Activity Lower Limit Minimum Required Load
8718  * // Enforce sufficient activity coefficients of activities to justify all active modes.
8719  * // {Eq_converter_activityLowerLimitDetailedPartLoadMinReq}
8720  Eq_converter_activityLowerLimitDetailedPartLoadMinReq(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity)
8721    $( converter_usedTechAct(nodesModelSel,yearsSel,converter_techs,vintage,activity)
8722          and converter_hasMinLoad(converter_techs, vintage)
8723          and converter_techParam(converter_techs,vintage,"mipDetailedPartialLoad"))
8724      ..
8725      sum(act$(converter_activityRequirements(converter_techs,vintage,act,"minLoad")
8726                  <= converter_activityRequirements(converter_techs,vintage,activity,"minLoad")
8727               and converter_usedAct(converter_techs,vintage,act)),
8728      converter_activity(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,act))
8729    =g=
8730      sum(act$(converter_activityRequirements(converter_techs,vintage,act,"minLoad")
8731                  <= converter_activityRequirements(converter_techs,vintage,activity,"minLoad")
8732               and converter_usedAct(converter_techs,vintage,act)),
8733      max(converter_activityRequirements(converter_techs,vintage,act,"minLoad"),
8734            converter_activityProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,"lower"))
8735            * converter_unitsUsingActivity_MIP(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,act));
8736   
8737   
8738  * Simple one-activity-per-unit partial load equations
8739  * // ### Converter MIP Units Activity Upper Limit Partial Load Balance
8740  * // Enforce MIP units partial load upper limit.
8741  * // {Eq_converter_activityUpperLimitPartLoad}
8742  Eq_converter_activityUpperLimitPartLoad(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity)
8743    $( converter_usedTechAct(nodesModelSel,yearsSel,converter_techs,vintage,activity)
8744          and (converter_hasMinLoad(converter_techs, vintage)
8745                or converter_hasMaxLoad(converter_techs, vintage)
8746                or converter_hasConstantFluxInActivity(converter_techs, vintage))
8747          and not converter_techParam(converter_techs,vintage,"mipDetailedPartialLoad"))
8748      ..
8749      converter_activity(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity)
8750    =l=
8751    min(converter_activityRequirements(converter_techs,vintage,activity,"maxLoad"),
8752          converter_activityProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,"upper"))
8753          * converter_unitsUsingActivity_MIP(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity);
8754   
8755  * // ### Converter MIP Units Activity Lower Limit Partial Load Balance
8756  * // Enforce MIP units partial load lower limit.
8757  * // {Eq_converter_activityLowerLimitPartLoad}
8758  Eq_converter_activityLowerLimitPartLoad(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity)
8759    $( converter_usedTechAct(nodesModelSel,yearsSel,converter_techs,vintage,activity)
8760          and (converter_hasMinLoad(converter_techs, vintage)
8761                or converter_hasMaxLoad(converter_techs, vintage))
8762          and not converter_techParam(converter_techs,vintage,"mipDetailedPartialLoad"))
8763      ..
8764      converter_activity(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity)
8765    =g=
8766    max(converter_activityRequirements(converter_techs,vintage,activity,"minLoad"),
8767          converter_activityProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,"lower"))
8768          * converter_unitsUsingActivity_MIP(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity);
8769   
8770  * // ### Converter MIP Units Idle Online Units
8771  * // Counts idle online units at every time step
8772  * // {Eq_converter_noOnlineIdle}
8773  Eq_converter_noOnlineIdle(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
8774    $( converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
8775          and (converter_hasMinLoad(converter_techs, vintage)
8776              or converter_hasMaxLoad(converter_techs, vintage)
8777              or converter_hasConstantFluxInActivity(converter_techs,vintage))
8778          and not converter_techParam(converter_techs,vintage,"mipDetailedPartialLoad"))
8779      ..
8780      converter_unitsOnline(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
8781      =e=
8782      sum(activity$converter_usedAct(converter_techs,vintage,activity),
8783            converter_unitsUsingActivity_MIP(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity));
8784   
8785  * // ### Converter MIP Units Idle Online Units Partial load
8786  * // Counts idle online units at every time step
8787  * // {Eq_converter_noOnlineIdleDetailedPartLoad}
8788  Eq_converter_noOnlineIdleDetailedPartLoad(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
8789    $( converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
8790          and (converter_hasMinLoad(converter_techs, vintage)
8791                  or converter_hasMaxLoad(converter_techs, vintage))
8792          and converter_techParam(converter_techs,vintage,"mipDetailedPartialLoad"))
8793      ..
8794      converter_unitsOnline(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
8795      =l=
8796      sum(activity$converter_usedAct(converter_techs,vintage,activity),
8797            converter_unitsUsingActivity_MIP(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity));
8798   
8799  * // ### Converter MIP activity model limit
8800  * // Converter activity model limit
8801  * // {Eq_converter_activityModeLimit}
8802  Eq_converter_activityModeLimit(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity)
8803    $( converter_usedTechAct(nodesModelSel,yearsSel,converter_techs,vintage,activity)
8804          and (converter_hasMinLoad(converter_techs, vintage)
8805                or converter_hasMaxLoad(converter_techs, vintage))
8806          and converter_techParam(converter_techs,vintage,"mipDetailedPartialLoad"))
8807      ..
8808      converter_unitsOnline(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
8809      =g=
8810      converter_unitsUsingActivity_MIP(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity);
8811   
8812  * ==== model definition ====
8813   
8814  Model M_converter
8815  /
8816    Eq_converter_unitsBalance
8817    Eq_converter_unitsFixedDecom
8818    Eq_converter_unitsFreeDecom
8819    Eq_converter_unitsUpperLimit
8820    Eq_converter_unitsLowerLimit
8821    Eq_converter_unitsFixedLimit
8822    Eq_converter_unitsTotalMIP
8823    Eq_converter_unitsOnlineMIP
8824    Eq_converter_activityUpperLimit
8825    Eq_converter_activityLowerLimit
8826    Eq_converter_activityFixedLimit
8827    Eq_converter_rampPos
8828    Eq_converter_rampNeg
8829    Eq_converter_rampLimit
8831    Eq_converter_unitsOnline
8832    Eq_converter_unitsOnlineUC
8834    Eq_converter_activityStartups
8835    Eq_converter_activityShutdowns
8836    Eq_converter_limitStartups
8837    Eq_converter_minUptime
8838    Eq_converter_minDowntime
8839    Eq_converter_activityUpperLimitDetailedPartLoadMinReq
8840    Eq_converter_activityUpperLimitDetailedPartLoadMaxReq
8841    Eq_converter_activityLowerLimitDetailedPartLoadMinReq
8842    Eq_converter_activityUpperLimitPartLoad
8843    Eq_converter_activityLowerLimitPartLoad
8844    Eq_converter_noOnlineIdle
8845    Eq_converter_noOnlineIdleDetailedPartLoad
8846    Eq_converter_activityModeLimit
8847  /;
INCLUDE    C:\Local\REMix\framework\remix\framework\model\source\core\storage.gms
8849  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
8850  * SPDX-License-Identifier: BSD-3-Clause
8851   
8852  * // # core_storage
8853  * // The equations in this file describe the storages in the model.
8854   
8855  * // ## Variables
8856  * // {special_table_storage_variables}
9251   
9252   
9253  * === SoC mappings ===
9254  set storage_usedTechSoCState(storage_techs,vintage,soc_statesIn);
9255  storage_usedTechSoCState(storage_techs,vintage,soc_states(soc_statesIn))
9256      $(storage_SoCParam(storage_techs,vintage,soc_states,"eRate") > 0
9257        and storage_SoCParam(storage_techs,vintage,soc_states,"cRate") > 0)
9258      = yes;
9259   
9260  set storage_validSoCRange(storage_techs,vintage);
9261  storage_validSoCRange(storage_techs,vintage)
9262      = smax(soc_states$storage_usedTechSoCState(storage_techs,vintage,soc_states), storage_SoCParam(storage_techs,vintage,soc_states,"SoC")) = 1
9263        and smin(soc_states$storage_usedTechSoCState(storage_techs,vintage,soc_states), storage_SoCParam(storage_techs,vintage,soc_states,"SoC")) = 0;
9264   
9265  * === Translate SoC parameters to ordered SoC-set ===
9266  * set ordered_socs / soc1*soc20 /;
9267  * alias(soc_states, soc_states_c);
9268  * parameter storage_SoCParam_ordered(storage_techs,vintage,ordered_socs,pc_storage_SoCParam);
9269  * storage_SoCParam_ordered(storage_techs,vintage,ordered_socs,pc_storage_SoCParam)
9270  *     $storage_validSoCRange(storage_techs,vintage)
9271  *     = sum(soc_states$(ord(ordered_socs) = sum(soc_states_c$(storage_SoCParam(storage_techs,vintage,soc_states_c,"SoC") <= storage_SoCParam(storage_techs,vintage,soc_states,"SoC")
9272  *                                                            and storage_usedTechSoCState(storage_techs,vintage,soc_states_c)), 1)
9273  *                       and storage_usedTechSoCState(storage_techs,vintage,soc_states)),
9274  *           storage_SoCParam(storage_techs,vintage,soc_states,pc_storage_SoCParam));
9275  *
9276  * set storage_usedTechSoCStateOrdered(storage_techs,vintage,ordered_socs);
9277  * storage_usedTechSoCStateOrdered(storage_techs,vintage,ordered_socs)
9278  *     $(storage_SoCParam_ordered(storage_techs,vintage,ordered_socs,"eRate") > 0
9279  *       and storage_SoCParam_ordered(storage_techs,vintage,ordered_socs,"cRate") > 0)
9280  *     = yes;
9281   
9282  parameter storage_bigM(storage_techs,vintage);
9283  storage_bigM(storage_techs,vintage) = smax((nodesModel,years), storage_reservoirParam(nodesModel,years,storage_techs,"unitsUpperLimit"));
9284  storage_bigM(storage_techs,vintage)$(storage_bigM(storage_techs,vintage) = INF) = 10000;
9285  storage_bigM(storage_techs,vintage)$(storage_bigM(storage_techs,vintage) = 0) = 10000;
9286   
9287  * === calculate the number of years represented by single year to calc ===
9288  alias(yearsToCalc, yearsToCalc_a)
9289  parameter representedYears(years);
9290  representedYears(years) = 0.5 *(smin(yearsToCalc$(yearsToCalc.val > years.val or yearsToCalc.val = smax(yearsToCalc_a, yearsToCalc_a.val)), yearsToCalc.val)
9291                                  - smax(yearsToCalc$(yearsToCalc.val < years.val or yearsToCalc.val = smin(yearsToCalc_a, yearsToCalc_a.val)), yearsToCalc.val));
9292   
9293  * ==== calculation of mappings ====
9294   
9295  * Technologies with a lifeTime > 0 are available
9296  set storage_availTech(nodesModel,years,storage_techs,vintage);
9297  storage_availTech(nodesModel,years,storage_techs,vintage)
9298      $(vintage.val = smax(vintage_a$(vintage_a.val <= years.val
9299          and storage_techParam(storage_techs,vintage_a,"lifeTime") > 0), vintage_a.val)) = yes;
9300   
9301  * Technologies to optimize become unavailable if they have an unitsUpperLimit of 0
9302  storage_availTech(nodesModel,years,storage_techs,vintage)
9303      $(yearsToCalc(years) and storage_reservoirParam(nodesModel,years,storage_techs,"unitsUpperLimit") = 0 ) = no;
9304   
9305  * Technologies already built become unavailable if they have an unitsBuild of 0
9306  storage_availTech(nodesModel,years,storage_techs,vintage)
9307      $( ( not yearsToCalc(years)) and storage_reservoirParam(nodesModel,years,storage_techs,"unitsBuild") = 0 ) = no;
9308   
9309  * Used technologies are available technologies over their technical lifeTime
9310  set storage_usedTech(nodesModel,years,storage_techs,vintage);
9311  storage_usedTech(nodesModel,years,storage_techs,vintage)
9312      $(vintage.val <= years.val
9313          and years.val < smax(years_a$storage_availTech(nodesModel,years_a,storage_techs,vintage),
9314                                              years_a.val + storage_techParam(storage_techs,vintage,"lifeTime"))
9315          ) = yes;
9316   
9317  * Technologies have to be decomissioned in the interval of first avail + lifetime to last avail + lifetime
9318  set storage_decomTech(nodesModel,years,storage_techs,vintage);
9319  storage_decomTech(nodesModel,years,storage_techs,vintage)
9320    $(sum(years_a$storage_usedTech(nodesModel,years_a,storage_techs,vintage), 1)
9321      and sum(yearsToCalc
9322        $(sameas(years, yearsToCalc)
9323          and yearsToCalc.val >= smin(years_a$storage_availTech(nodesModel,years_a,storage_techs,vintage), years_a.val) + storage_techParam(storage_techs,vintage,"lifeTime")
9324          and yearsToCalc.val <= smax(years_a$storage_availTech(nodesModel,years_a,storage_techs,vintage), years_a.val) + storage_techParam(storage_techs,vintage,"lifeTime")), 1))
9325    = yes;
9326   
9327  * Extend the decom frame to the year after the last year of usedTech
9328  storage_decomTech(nodesModel,yearsToCalc,storage_techs,vintage)
9329    $(storage_usedTech(nodesModel,yearsToCalc-1,storage_techs,vintage)
9330      and storage_decomTech(nodesModel,yearsToCalc-1,storage_techs,vintage))
9331    = yes;
9332   
9333  * Mapping for used commodities
9334  set storage_usedCom(storage_techs,vintage,commodity);
9335  option storage_usedCom < storage_sizeParam;
9336   
9337  set storage_usedTechCom(nodesModel,years,storage_techs,vintage,commodity);
9338  storage_usedTechCom(nodesModel,years,storage_techs,vintage,commodity)
9339      $(storage_usedTech(nodesModel,years,storage_techs,vintage)
9340          and storage_usedCom(storage_techs,vintage,commodity))
9341      = yes;
9342   
9343   
9344  * // ## Load units from gdx file
9346   
9347  * ==== aggregation of profiles ====
9348  * derive upper and lower profiles then aggregate
9349  set storage_level_hasProfileIn(nodesData,years,storage_techs,pc_storage_levelProfile);
9350  option storage_level_hasProfileIn < storage_levelProfileIn;
9351   
9352  set storage_level_hasProfile(nodesModel,years,storage_techs,pc_storage_levelProfile);
9353  storage_level_hasProfile(nodesModelToCalc,yearsToCalc,storage_techs,pc_storage_levelProfile)
9354      = sum(nodesData$aggregateNodesModel(nodesData,nodesModelToCalc),
9355              storage_level_hasProfileIn(nodesData,yearsToCalc,storage_techs,pc_storage_levelProfile));
9356   
9357  * weighted average for a real sum of units upper limits, plain average if one region has an upper limit of inf
9358  parameter storage_levelProfile(timeModel,nodesModel,years,storage_techs,vintage,pc_storage_levelProfile);
9359  storage_levelProfile(timeModelToCalc,storage_usedTech(nodesModelToCalc,yearsToCalc,storage_techs,vintage),"upper")
9360      = storage_techParam(storage_techs,vintage,"levelUpperLimit");
9361  storage_levelProfile(timeModelToCalc,storage_usedTech(nodesModelToCalc,yearsToCalc,storage_techs,vintage),"lower")
9362      = storage_techParam(storage_techs,vintage,"levelLowerLimit");
9363   
9364  set storage_finiteUnitLimit(nodesModelToCalc,yearsToCalc,storage_techs);
9365  storage_finiteUnitLimit(nodesModelToCalc,yearsToCalc,storage_techs) = sum(nodesData$aggregateNodesModel(nodesData,nodesModelToCalc), storage_reservoirParamIn(nodesData,yearsToCalc,storage_techs,"unitsUpperLimit")) > 0
9366                                                   and sum(nodesData$aggregateNodesModel(nodesData,nodesModelToCalc), storage_reservoirParamIn(nodesData,yearsToCalc,storage_techs,"unitsUpperLimit")) < inf;
9367   
9368  storage_levelProfile(timeModelToCalc,storage_usedTech(nodesModelToCalc,yearsToCalc,storage_techs,vintage),pc_storage_levelProfile)
9369      $( storage_level_hasProfile(nodesModelToCalc,yearsToCalc,storage_techs,pc_storage_levelProfile)
9370          and storage_finiteUnitLimit(nodesModelToCalc,yearsToCalc,storage_techs))
9371      = sum(nodesData$aggregateNodesModel(nodesData,nodesModelToCalc),
9372              sum(timeData$timeMapping(timeData,timeModelToCalc),
9373                    storage_levelProfileIn(timeData,nodesData,yearsToCalc,storage_techs,pc_storage_levelProfile))
9374                / timeLength(timeModelToCalc)
9375              * storage_reservoirParamIn(nodesData,yearsToCalc,storage_techs,"unitsUpperLimit"))
9376      / sum(nodesData$aggregateNodesModel(nodesData,nodesModelToCalc),
9377              storage_reservoirParamIn(nodesData,yearsToCalc,storage_techs,"unitsUpperLimit"));
9378   
9379  storage_levelProfile(timeModelToCalc,storage_usedTech(nodesModelToCalc,yearsToCalc,storage_techs,vintage),pc_storage_levelProfile)
9380      $( storage_level_hasProfile(nodesModelToCalc,yearsToCalc,storage_techs,pc_storage_levelProfile)
9381          and sum(nodesData$aggregateNodesModel(nodesData,nodesModelToCalc),
9382                      storage_reservoirParamIn(nodesData,yearsToCalc,storage_techs,"unitsUpperLimit")) = inf )
9383      = sum(nodesData$(aggregateNodesModel(nodesData,nodesModelToCalc)
9384                      and storage_reservoirParamIn(nodesData,yearsToCalc,storage_techs,"unitsUpperLimit") = inf ),
9385              sum(timeData$timeMapping(timeData,timeModelToCalc),
9386                    storage_levelProfileIn(timeData,nodesData,yearsToCalc,storage_techs,pc_storage_levelProfile))
9387                / timeLength(timeModelToCalc))
9388      / sum(nodesData$(aggregateNodesModel(nodesData,nodesModelToCalc)
9389                      and storage_reservoirParamIn(nodesData,yearsToCalc,storage_techs,"unitsUpperLimit") = inf ), 1);
9390   
9391  * for fixed profiles overwrite upper and lower profile
9392  storage_levelProfile(timeModelToCalc,nodesModelToCalc,yearsToCalc,storage_techs,vintage,"lower")
9393      $storage_level_hasProfile(nodesModelToCalc,yearsToCalc,storage_techs,"fixed")
9394      = storage_levelProfile(timeModelToCalc,nodesModelToCalc,yearsToCalc,storage_techs,vintage,"fixed");
9395   
9396  storage_levelProfile(timeModelToCalc,nodesModelToCalc,yearsToCalc,storage_techs,vintage,"upper")
9397      $storage_level_hasProfile(nodesModelToCalc,yearsToCalc,storage_techs,"fixed")
9398      = storage_levelProfile(timeModelToCalc,nodesModelToCalc,yearsToCalc,storage_techs,vintage,"fixed");
9399   
9400   
9401  * ==== parameter modifications ====
9402  storage_reservoirParam(nodesModel,years,storage_techs,"unitsLowerLimit")
9403          $sum(vintage, storage_techParam(storage_techs,vintage,"mipUnits"))
9404      = floor(storage_reservoirParam(nodesModel,years,storage_techs,"unitsLowerLimit"));
9405  storage_reservoirParam(nodesModel,years,storage_techs,"unitsUpperLimit")
9406          $sum(vintage, storage_techParam(storage_techs,vintage,"mipUnits"))
9407      = ceil(storage_reservoirParam(nodesModel,years,storage_techs,"unitsUpperLimit"));
9408   
9409   
9410  * ==== definition of variables ====
9411   
9412  * Initialise variables for unitsBuild
9413  storage_unitsBuild.l(nodesModel,years,storage_techs,vintage)
9414      $storage_availTech(nodesModel,years,storage_techs,vintage)
9415      = storage_reservoirParam(nodesModel,years,storage_techs,"unitsBuild");
9416  storage_unitsBuild.lo(nodesModel,yearsToCalc,storage_techs,vintage)
9417      $storage_availTech(nodesModel,yearsToCalc,storage_techs,vintage)
9418      = storage_unitsBuild.l(nodesModel,yearsToCalc,storage_techs,vintage);
9419  storage_unitsBuild.fx(nodesModel,years,storage_techs,vintage)
9420      $storage_reservoirParam(nodesModel,years,storage_techs,"noExpansion")
9421      = storage_unitsBuild.l(nodesModel,years,storage_techs,vintage);
9422   
9423  * Initialise variables for unitsDecom
9424  storage_unitsDecom.l(nodesModel,years,storage_techs,vintage)
9425      $(storage_decomTech(nodesModel,years,storage_techs,vintage)
9426        and years.val < sum(yearsToCalc$(ord(yearsToCalc) = 1), yearsToCalc.val))
9427      = sum((years_a,years_aa)$(sameas(years-1, years_aa)
9428                        and years_a.val > years_aa.val - storage_techParam(storage_techs,vintage,'lifeTime')
9429                        and years_a.val <= years.val - storage_techParam(storage_techs,vintage,'lifeTime')
9430                        and storage_availTech(nodesModel,years_a,storage_techs,vintage)),
9431          storage_unitsBuild.l(nodesModel,years_a,storage_techs,vintage));
9432   
9433  storage_unitsDecom.l(nodesModel,yearsToCalc,storage_techs,vintage)
9434    $storage_decomTech(nodesModel,yearsToCalc,storage_techs,vintage)
9435    = sum(years$
9436          (years.val < sum(yearsToCalc_a$(ord(yearsToCalc_a) = 1), yearsToCalc_a.val)
9437            and storage_availTech(nodesModel,years,storage_techs,vintage)
9438            and years.val > sum(years_a$sameas(years_a, yearsToCalc-1), years_a.val) - storage_techParam(storage_techs,vintage,'lifeTime')
9439            and years.val <= yearsToCalc.val - storage_techParam(storage_techs,vintage,'lifeTime')),
9440        storage_unitsBuild.l(nodesModel,years,storage_techs,vintage))
9441      + sum(yearsToCalc_a$
9442          (yearsToCalc_a.val < sum(yearsToCalc_aa$(ord(yearsToCalc_aa) > 1), yearsToCalc_a.val)
9443            and storage_availTech(nodesModel,yearsToCalc_a,storage_techs,vintage)
9444            and yearsToCalc_a.val > sum(years_a$sameas(years_a, yearsToCalc-1), years_a.val) - storage_techParam(storage_techs,vintage,'lifeTime')
9445            and yearsToCalc_a.val <= yearsToCalc.val - storage_techParam(storage_techs,vintage,'lifeTime')),
9446        storage_unitsBuild.l(nodesModel,yearsToCalc_a,storage_techs,vintage));
9447        ;
9448   
9449  storage_unitsDecom.lo(nodesModel,yearsToCalc,storage_techs,vintage)
9450      $(storage_usedTech(nodesModel,yearsToCalc,storage_techs,vintage)
9451        and not storage_techParam(storage_techs,vintage,"freeDecom"))
9452      = storage_unitsDecom.l(nodesModel,yearsToCalc,storage_techs,vintage)
9453   
9454  * Calculate planned unit expansion
9455  parameter storage_unitsPlanned(nodesModel,years,storage_techs,vintage);
9456  storage_unitsPlanned(nodesModel,years,storage_techs,vintage) = 0;
9457  loop(years,
9458    storage_unitsPlanned(nodesModel,years,storage_techs,vintage)
9459      =
9460      storage_unitsPlanned(nodesModel,years-1,storage_techs,vintage)
9461          $storage_usedTech(nodesModel,years-1,storage_techs,vintage)
9462      + storage_unitsBuild.l(nodesModel,years,storage_techs,vintage)
9463          $storage_availTech(nodesModel,years,storage_techs,vintage)
9464      - storage_unitsDecom.l(nodesModel,years,storage_techs,vintage)
9465          $storage_usedTech(nodesModel,years,storage_techs,vintage);
9466  );
9467   
9468  * Set initial state for planned units
9469  storage_unitsTotal.l(nodesModel,years,storage_techs,vintage)
9470    = storage_unitsPlanned(nodesModel,years,storage_techs,vintage)
9471   
9472  * Calculate if planned unit expansion is bounded by upper and lower limits
9473  set storage_unitBoundsFixed(nodesModel,years,storage_techs);
9474  storage_unitBoundsFixed(nodesModel,years,storage_techs)
9475    $(sum(vintage$storage_usedTech(nodesModel,years,storage_techs,vintage),
9476          storage_unitsPlanned(nodesModel,years,storage_techs,vintage))
9477      = storage_reservoirParam(nodesModel,years,storage_techs,"unitsUpperLimit")
9478    and sum(vintage$storage_usedTech(nodesModel,years,storage_techs,vintage),
9479          storage_unitsPlanned(nodesModel,years,storage_techs,vintage))
9480      = storage_reservoirParam(nodesModel,years,storage_techs,"unitsLowerLimit"))
9481    = yes;
9482   
9483  * Fix unitsBuild, unitsDecom, unitsTotal if levels are predetermined by upper and lower limits
9484  storage_unitsBuild.fx(nodesModel,years,storage_techs,vintage)
9485    $(storage_availTech(nodesModel,years,storage_techs,vintage)
9486      and storage_unitBoundsFixed(nodesModel,years,storage_techs))
9487    = storage_unitsBuild.l(nodesModel,years,storage_techs,vintage);
9488  storage_unitsDecom.fx(nodesModel,years,storage_techs,vintage)
9489    $(storage_usedTech(nodesModel,years,storage_techs,vintage)
9490      and storage_unitBoundsFixed(nodesModel,years,storage_techs))
9491    = storage_unitsDecom.l(nodesModel,years,storage_techs,vintage);
9492  storage_unitsTotal.fx(nodesModel,years,storage_techs,vintage)
9493    $(storage_usedTech(nodesModel,years,storage_techs,vintage)
9494      and storage_unitBoundsFixed(nodesModel,years,storage_techs))
9495    = storage_unitsTotal.l(nodesModel,years,storage_techs,vintage);
9496   
9497  storage_unitsTotal_MIP.up(nodesModel,years,storage_techs,vintage)
9498      $(storage_usedTech(nodesModel,years,storage_techs,vintage)
9499        and storage_techParam(storage_techs,vintage,"mipUnits") = 1)
9500      = storage_reservoirParam(nodesModel,years,storage_techs,"unitsUpperLimit");
9501   
9502  * Add parameter for fixing capacities during myopic runs
9503  parameter storage_unitsDelta(nodesModel,years,storage_techs);
9504   
9505   
9506  * ==== declaration of equations ====
9507   
9508  equations
9509    Eq_storage_unitsBalance(nodesModel,years,storage_techs,vintage
9510      ) "Ensures the units balance over the planning period."
9511    Eq_storage_unitsFixedDecom(nodesModel,years,storage_techs,vintage
9512      ) "Restricts the fixed decommissioning of units over the planning period."
9513    Eq_storage_unitsFreeDecom(nodesModel,years,storage_techs,vintage
9514      ) "Restricts the free decommissioning of units over the planning period."
9515    Eq_storage_unitsUpperLimit(nodesModel,years,storage_techs
9516      ) "Upper bound for the total number of units."
9517    Eq_storage_unitsLowerLimit(nodesModel,years,storage_techs
9518      ) "Lower bound for the total number of units."
9519    Eq_storage_unitsTotalMIP(nodesModel,years,storage_techs,vintage
9520      ) "Fixes the total number of units to the corresponding integer variable."
9521   
9522    Eq_storage_levelUpperLimit(timeModel,nodesModel,years,storage_techs,vintage,commodity
9523      ) "Upper bound for the total number of units."
9524    Eq_storage_levelUpperLimit_degradation(timeModel,nodesModel,years,storage_techs,vintage,commodity
9525      ) "Upper bound for the total number of units if the storage technology accounts for degradation."
9526    Eq_storage_levelLowerLimit(timeModel,nodesModel,years,storage_techs,vintage,commodity
9527      ) "Lower bound for the total number of units."
9528    Eq_storage_losses(timeModel,nodesModel,years,storage_techs,vintage,commodity
9529      ) "Stored commodities lost due to self discharge."
9530    Eq_storage_unitsBalanceStates(nodesModel,years,storage_techs,vintage
9531      ) "Currently available units must have been built at some point in time and have some state of degradation."
9532    Eq_storage_unitsUpperLimitPerState(nodesModel,years,yearsCom,storage_techs,vintage
9533      ) "There cannot be more units from a certain year than the amount built in that year."
9534    Eq_storage_unitsStatesNoRecovery(nodesModel,years,yearsCom,storage_techs,vintage,degradation_states
9535      ) "There is no recovery."
9536    Eq_storage_cRateLimit(timeModel,nodesModel,years,storage_techs,vintage,commodity
9537      ) "Limit charging rate based on unit capacity."
9538    Eq_storage_eRateLimit(timeModel,nodesModel,years,storage_techs,vintage,commodity
9539      ) "Limit discharging rate based on unit capacity."
9540    Eq_storage_charge(timeModel,nodesModel,years,storage_techs,vintage,commodity
9541      ) "Positive change in state of charge is influx."
9542    Eq_storage_discharge(timeModel,nodesModel,years,storage_techs,vintage,commodity
9543      ) "Negative change in state of charge is outflux."
9544   
9545    Eq_storage_levelStateSum(timeModel,nodesModel,years,storage_techs,vintage,commodity
9546      ) "Sum of degradation class storage levels is the global level."
9547    Eq_storage_levelUpperLimitPerAge(timeModel,nodesModel,years,yearsCom,storage_techs,vintage,commodity
9548      ) "Upper bound for units of a certain state."
9549    Eq_storage_chargingPerAge(timeModel,nodesModel,years,yearsCom,storage_techs,vintage,commodity
9550      ) "Positive change in state of charge is influx for each degradation class."
9551    Eq_storage_chargeBasedDegradationDistribution(nodesModel,years,yearsCom,storage_techs,vintage,commodity
9552      ) "Determine degradation states of storage units."
9553    Eq_storage_unitsDecomStateSum(nodesModel,years,storage_techs,vintage
9554      ) "All decomminsioned units must have a degradation state."
9555    Eq_storage_unitsDegradation(nodesModel,years,yearsCom,storage_techs,vintage,degradation_states
9556      ) "Only allow one range of degradation states per year and age group."
9557    Eq_storage_unitsDegradation_onlyOneRange(nodesModel,years,yearsCom,storage_techs,vintage
9558      ) "Limit usable degradation states to one range, i.e., two neighboring states."
9559   
9560    Eq_storage_unitsSoC_sum(timeModel,nodesModel,years,storage_techs,vintage
9561      ) "Every unit has a state of charge."
9562    Eq_storage_levelSoC(timeModel,nodesModel,years,storage_techs,vintage,commodity
9563      ) "Every unit has a state of charge."
9564    Eq_storage_unitsSoC(timeModel,nodesModel,years,storage_techs,vintage,soc_statesIn
9565      ) "Number of units in particular SoC."
9566    Eq_storage_unitsSoC_onlyOneRange(timeModel,nodesModel,years,storage_techs,vintage
9567      ) "Limit usable SoC states to one range, i.e., two neighboring states."
9568   
9569    Eq_storage_cRateLimit_SoC(timeModel,nodesModel,years,storage_techs,vintage,commodity
9570      ) "Limit charging rate based on unit capacity."
9571    Eq_storage_eRateLimit_SoC(timeModel,nodesModel,years,storage_techs,vintage,commodity
9572      ) "Limit discharging rate based on unit capacity."
9573    ;
9574   
9575  * ==== equation definition ====
9576  * // ## Equations
9577  * // ### Storage Units Balance
9578  * // Ensures that the total units are consistent with the built and decommissioned units.
9579  * // {Eq_storage_unitsBalance}
9580  Eq_storage_unitsBalance(nodesModelSel,yearsSel,storage_techs,vintage)
9581      $((storage_usedTech(nodesModelSel,yearsSel,storage_techs,vintage)
9582            or sum(years$sameas(years,yearsSel), storage_usedTech(nodesModelSel,years-1,storage_techs,vintage)))
9583          and not storage_unitBoundsFixed(nodesModelSel,yearsSel,storage_techs))
9584      ..
9585      storage_unitsTotal(nodesModelSel,yearsSel,storage_techs,vintage)
9586      =e=
9587          sum(yearsToCalc$(ord(yearsToCalc) = 1 and sameas(yearsToCalc, yearsSel)),
9588        sum(years$sameas(years, yearsToCalc),
9589          storage_unitsTotal(nodesModelSel,years-1,storage_techs,vintage)
9590            $storage_usedTech(nodesModelSel,years-1,storage_techs,vintage)))
9591      + sum((yearsToCalc)$(ord(yearsToCalc) > 1 and sameas(yearsToCalc, yearsSel)),
9592        storage_unitsTotal(nodesModelSel,yearsToCalc-1,storage_techs,vintage)
9593          $storage_usedTech(nodesModelSel,yearsToCalc-1,storage_techs,vintage))
9594      + storage_unitsBuild(nodesModelSel,yearsSel,storage_techs,vintage)
9595          $storage_availTech(nodesModelSel,yearsSel,storage_techs,vintage)
9596      - storage_unitsDecom(nodesModelSel,yearsSel,storage_techs,vintage)
9597          $storage_usedTech(nodesModelSel,yearsSel,storage_techs,vintage);
9598   
9599  * // ### Storage Units Fixed Decommission
9600  * // Restricts the fixed decommissioning of storage units over the planning period.
9601  * // {Eq_storage_unitsFixedDecom}
9602  Eq_storage_unitsFixedDecom(nodesModelSel,yearsSel,storage_techs,vintage)
9603      $(storage_decomTech(nodesModelSel,yearsSel,storage_techs,vintage)
9604          and not storage_techParam(storage_techs,vintage,"freeDecom") = 1
9605          and not storage_unitBoundsFixed(nodesModelSel,yearsSel,storage_techs))
9606      ..
9607      storage_unitsDecom(nodesModelSel,yearsSel,storage_techs,vintage)
9608      =e=
9609      sum(years$
9610          (storage_availTech(nodesModelSel,years,storage_techs,vintage)
9611            and years.val > sum(yearsToCalc$sameas(yearsToCalc+1, yearsSel), yearsToCalc.val) - storage_techParam(storage_techs,vintage,'lifeTime')
9612            and years.val <= yearsSel.val - storage_techParam(storage_techs,vintage,'lifeTime')),
9613        storage_unitsBuild(nodesModelSel,years,storage_techs,vintage));
9614   
9615  * // ### Storage Units Free Decomission
9616  * // Restricts the free decommissioning of storage units over the planning period.
9617  * // {Eq_storage_unitsFreeDecom}
9618  Eq_storage_unitsFreeDecom(nodesModelSel,yearsSel,storage_techs,vintage)
9619      $((storage_decomTech(nodesModelSel,yearsSel,storage_techs,vintage)
9620          or storage_usedTech(nodesModelSel,yearsSel,storage_techs,vintage))
9621          and storage_techParam(storage_techs,vintage,"freeDecom") = 1)
9622      ..
9623      sum(years$
9624            ((storage_decomTech(nodesModelSel,years,storage_techs,vintage)
9625              or storage_usedTech(nodesModelSel,years,storage_techs,vintage))
9626              and years.val < sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)),
9627          storage_unitsDecom(nodesModelSel,years,storage_techs,vintage))
9628      + sum(yearsToCalc$
9629            ((storage_decomTech(nodesModelSel,yearsToCalc,storage_techs,vintage)
9630              or storage_usedTech(nodesModelSel,yearsToCalc,storage_techs,vintage))
9631              and yearsToCalc.val >= sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
9632              and yearsToCalc.val <= yearsSel.val),
9633          storage_unitsDecom(nodesModelSel,yearsToCalc,storage_techs,vintage))
9634      =g=
9635      sum(years$
9636            (storage_availTech(nodesModelSel,years,storage_techs,vintage)
9637              and years.val < sum(yearsToCalc$(ord(yearsToCalc)=1), yearsToCalc.val) - storage_techParam(storage_techs,vintage,'lifeTime')),
9638          storage_unitsBuild(nodesModelSel,years,storage_techs,vintage))
9639      + sum(yearsToCalc$
9640            (storage_availTech(nodesModelSel,yearsToCalc,storage_techs,vintage)
9641              and yearsToCalc.val >= sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
9642              and yearsToCalc.val <= yearsSel.val - storage_techParam(storage_techs,vintage,'lifeTime')),
9643          storage_unitsBuild(nodesModelSel,yearsToCalc,storage_techs,vintage));
9644   
9645  * // ### Storage Units Lower Limit
9646  * // Lower bound for the total number of storage units.
9647  * // {Eq_storage_unitsLowerLimit}
9648  Eq_storage_unitsLowerLimit(nodesModelSel,yearsSel,storage_techs)
9649      $(storage_reservoirParam(nodesModelSel,yearsSel,storage_techs,'unitsLowerLimit') > 0 )
9650      ..
9651      sum(vintage$storage_usedTech(nodesModelSel,yearsSel,storage_techs,vintage),
9652          storage_unitsTotal(nodesModelSel,yearsSel,storage_techs,vintage))
9653      =g=
9654      storage_reservoirParam(nodesModelSel,yearsSel,storage_techs,"unitsLowerLimit");
9655   
9656  * // ### Storage Units Upper Limit
9657  * // Upper bound for the total number of storage units.
9658  * // {Eq_storage_unitsUpperLimit}
9659  Eq_storage_unitsUpperLimit(nodesModelSel,yearsSel,storage_techs)
9660      $(storage_reservoirParam(nodesModelSel,yearsSel,storage_techs,'unitsUpperLimit') >= 0
9661          and storage_reservoirParam(nodesModelSel,yearsSel,storage_techs,'unitsUpperLimit') < +inf )
9662      ..
9663      sum(vintage$storage_usedTech(nodesModelSel,yearsSel,storage_techs,vintage),
9664          storage_unitsTotal(nodesModelSel,yearsSel,storage_techs,vintage))
9665      =l=
9666      storage_reservoirParam(nodesModelSel,yearsSel,storage_techs,"unitsUpperLimit");
9667   
9668  * // ### Storage Units Total MIP
9669  * // Fixes the total number of storage units to the corresponding integer variable.
9670  * // {Eq_storage_unitsTotalMIP}
9671  Eq_storage_unitsTotalMIP(nodesModelSel,yearsSel,storage_techs,vintage)
9672      $( storage_usedTech(nodesModelSel,yearsSel,storage_techs,vintage)
9673          and storage_techParam(storage_techs,vintage,"mipUnits") = 1 )
9674      ..
9675      storage_unitsTotal(nodesModelSel,yearsSel,storage_techs,vintage)
9676      =e=
9677      storage_unitsTotal_MIP(nodesModelSel,yearsSel,storage_techs,vintage);
9678   
9679  * // ### Storage Level Lower Limit
9680  * // Lower limit on the storage level.
9681  * // {Eq_storage_levelLowerLimit}
9682  Eq_storage_levelLowerLimit(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
9683      $(storage_usedTechCom(nodesModelSel,yearsSel,storage_techs,vintage,commodity)
9684          and storage_levelProfile(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,"lower") > 0)
9685      ..
9686      storage_level(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
9687      =g=
9688      storage_levelProfile(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,"lower")
9689      * storage_sizeParam(storage_techs,vintage,commodity,"size")
9690      * storage_unitsTotal(nodesModelSel,yearsSel,storage_techs,vintage);
9691   
9692  * // ### Storage Level Upper Limit
9693  * // Upper limit on the storage level.
9694  * // {Eq_storage_levelUpperLimit}
9695  Eq_storage_levelUpperLimit(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
9696      $(storage_usedTechCom(nodesModelSel,yearsSel,storage_techs,vintage,commodity)
9697          and not storage_hasDegradation(storage_techs,vintage)
9698          and storage_levelProfile(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,"upper") >= 0)
9699      ..
9700      storage_level(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
9701      =l=
9702      storage_levelProfile(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,"upper")
9703      * storage_sizeParam(storage_techs,vintage,commodity,"size")
9704      * storage_unitsTotal(nodesModelSel,yearsSel,storage_techs,vintage);
9705   
9706  * // ### Storage Level Upper Limit (degradation)
9707  * // Upper limit on the storage level if the storage technology accounts for degradation.
9708  * // {Eq_storage_levelUpperLimit_degradation}
9709  Eq_storage_levelUpperLimit_degradation(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
9710      $(storage_usedTechCom(nodesModelSel,yearsSel,storage_techs,vintage,commodity)
9711          and storage_hasDegradation(storage_techs,vintage)
9712          and storage_levelProfile(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,"upper") >= 0)
9713      ..
9714      storage_level(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
9715      =l=
9716      storage_levelProfile(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,"upper")
9717      * storage_sizeParam(storage_techs,vintage,commodity,"size")
9718      * sum((degradation_states,yearsCom)$storage_usedDegradation(storage_techs,vintage,degradation_states),
9719              (storage_degradationParam(storage_techs,vintage,degradation_states,"remainingCapacity")
9720                - (yearsSel.val - yearsCom.val) * storage_techParam(storage_techs,vintage,"annualDegradation"))
9721                * storage_unitsStateTracker(nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,degradation_states));
9722   
9723  * // ### Storage Unit States Sum (degradation)
9724  * // The number of units in all degradation state must match the total unit number.
9725  * // {Eq_storage_unitsBalanceStates}
9726  Eq_storage_unitsBalanceStates(nodesModelSel,yearsSel,storage_techs,vintage)
9727      $(storage_usedTech(nodesModelSel,yearsSel,storage_techs,vintage)
9728        and storage_hasDegradation(storage_techs,vintage))
9729      ..
9730      storage_unitsTotal(nodesModelSel,yearsSel,storage_techs,vintage)
9731      =e=
9732      sum((yearsCom,degradation_states)$storage_usedDegradation(storage_techs,vintage,degradation_states),
9733            storage_unitsStateTracker(nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,degradation_states));
9734   
9735  * // ### Storage Unit States Upper Limit(degradation)
9736  * // The states of all commissioned units in one year (unitsBuilt) must either still be tracked or have been decommissioned.
9737  * // {Eq_storage_unitsUpperLimitPerState}
9738  Eq_storage_unitsUpperLimitPerState(nodesModelSel,yearsSel,yearsCom,storage_techs,vintage)
9739      $(storage_usedTech(nodesModelSel,yearsSel,storage_techs,vintage)
9740          and storage_hasDegradation(storage_techs,vintage))
9741      ..
9742      sum(degradation_states$storage_usedDegradation(storage_techs,vintage,degradation_states),
9743            storage_unitsStateTracker(nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,degradation_states)
9744            + sum(years$(years.val <= yearsSel.val),
9745                  storage_unitsStateTrackerDecom(nodesModelSel,years,yearsCom,storage_techs,vintage,degradation_states)))
9746      =e=
9747      storage_unitsBuild(nodesModelSel,yearsCom,storage_techs,vintage)$(yearsCom.val <= yearsSel.val);
9748   
9749  * // ### Storage Unit States Progression (degradation)
9750  * // Unit recovery by reassigning the storage cycles to other units is disabled. Therefore, the number of units in a particular degradation state can only increase if the number in a less degraded state is decreased by at least the same amount.
9751  * // {Eq_storage_unitsStatesNoRecovery}
9752  alias(degradation_states, dc_states);
9753  Eq_storage_unitsStatesNoRecovery(nodesModelSel,yearsSel(yearsToCalc),yearsCom,storage_techs,vintage,degradation_states)
9754      $(storage_usedTech(nodesModelSel,yearsSel,storage_techs,vintage)
9755        and yearsToCalc.val > yearsCom.val
9756        and storage_usedDegradation(storage_techs,vintage,degradation_states))
9757      ..
9758      sum(dc_states$(storage_usedDegradation(storage_techs,vintage,dc_states)
9759                and storage_degradationParam(storage_techs,vintage,dc_states,"maxFullCycles") <= storage_degradationParam(storage_techs,vintage,degradation_states,"maxFullCycles")),
9760              storage_unitsStateTracker(nodesModelSel,yearsToCalc,yearsCom,storage_techs,vintage,dc_states)
9761              + sum(years$(years.val <= yearsToCalc.val), storage_unitsStateTrackerDecom(nodesModelSel,years,yearsCom,storage_techs,vintage,dc_states)))
9762      =l=
9763      sum(dc_states$(storage_usedDegradation(storage_techs,vintage,dc_states)
9764                      and storage_degradationParam(storage_techs,vintage,dc_states,"maxFullCycles") <= storage_degradationParam(storage_techs,vintage,degradation_states,"maxFullCycles")),
9765              storage_unitsStateTracker(nodesModelSel,yearsToCalc-1,yearsCom,storage_techs,vintage,dc_states)
9766              + sum(years$(years.val < yearsToCalc.val), storage_unitsStateTrackerDecom(nodesModelSel,years,yearsCom,storage_techs,vintage,dc_states)));
9767   
9768  * // ### Storage Losses
9769  * // Accumulation of storage losses.
9770  * // {Eq_storage_losses}
9771  Eq_storage_losses(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,storage_techs,vintage,commodity)
9772      $storage_usedTechCom(nodesModelSel,yearsSel,storage_techs,vintage,commodity)
9773      ..
9774      storage_losses(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
9775      =e=
9776      - storage_level(timeModelToCalc--1,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
9777        * storage_sizeParam(storage_techs,vintage,commodity,"selfdischarge")
9778      + storage_sizeParam(storage_techs,vintage,commodity,"selfdischargeAbs")
9779      + (storage_techParam(storage_techs,vintage,"chargingLoss")
9780          /(1 - storage_techParam(storage_techs,vintage,"chargingLoss")))
9781        * storage_charge(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
9782          $(storage_techParam(storage_techs,vintage,"chargingLoss") > 0)
9783      + storage_techParam(storage_techs,vintage,"dischargingLoss")
9784        * storage_discharge(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
9785          $(storage_techParam(storage_techs,vintage,"dischargingLoss") > 0)
9786      - storage_sizeParam(storage_techs,vintage,commodity,"size")
9787        * sum(soc_states$(storage_usedTechSoCState(storage_techs,vintage,soc_states)
9788                          and storage_validSoCRange(storage_techs,vintage)),
9789              storage_unitsSoC(timeModelToCalc--1,nodesModelSel,yearsSel,storage_techs,vintage,soc_states)
9790              * storage_SoCParam(storage_techs,vintage,soc_states,"SoC")
9791              * storage_SoCParam(storage_techs,vintage,soc_states,"selfdischarge"));
9792   
9793  * // ### C-Rate Limit
9794  * // The increase in storage level per time step, i.e., the charging rate, is limited relative to the storage capacity.
9795  * // {Eq_storage_cRateLimit}
9796  Eq_storage_cRateLimit(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,storage_techs,vintage,commodity)
9797      $(storage_usedTechCom(nodesModelSel,yearsSel,storage_techs,vintage,commodity)
9798        and storage_techParam(storage_techs,vintage,"maxCRate") > 0)
9799      ..
9800      storage_level(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
9801      - storage_level(timeModelToCalc--1,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
9802      =l=
9803      storage_techParam(storage_techs,vintage,"maxCRate")
9804      * storage_sizeParam(storage_techs,vintage,commodity,"size")
9805      * storage_unitsTotal(nodesModelSel,yearsSel,storage_techs,vintage);
9806   
9807  * // ### E-Rate Limit
9808  * // The decrease in storage level per time step, i.e., the discharging rate, is limited relative to the storage capacity.
9809  * // {Eq_storage_eRateLimit}
9810  Eq_storage_eRateLimit(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,storage_techs,vintage,commodity)
9811      $(storage_usedTechCom(nodesModelSel,yearsSel,storage_techs,vintage,commodity)
9812        and storage_techParam(storage_techs,vintage,"maxERate") > 0)
9813      ..
9814      storage_level(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
9815      - storage_level(timeModelToCalc--1,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
9816      =g=
9817      - storage_techParam(storage_techs,vintage,"maxERate")
9818      * storage_sizeParam(storage_techs,vintage,commodity,"size")
9819      * storage_unitsTotal(nodesModelSel,yearsSel,storage_techs,vintage);
9820   
9821  * // ### Storage Charging
9822  * // Increases in storage levels are accounted as charging amounts.
9823  * // {Eq_storage_charge}
9824  Eq_storage_charge(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,storage_techs,vintage,commodity)
9825      $(storage_usedTechCom(nodesModelSel,yearsSel,storage_techs,vintage,commodity)
9826        and storage_techParam(storage_techs,vintage,"chargingLoss") > 0)
9827      ..
9828      storage_charge(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
9829      =g=
9830      storage_level(timeModelToCalc,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
9831      - storage_level(timeModelToCalc--1,nodesModelSel,yearsSel,storage_techs,vintage,commodity);
9832   
9833  * // ### Storage Discharging
9834  * // Decreases in storage levels are accounted as discharging amounts.
9835  * // {Eq_storage_discharge}
9836  Eq_storage_discharge(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,storage_techs,vintage,commodity)
9837      $(storage_usedTechCom(nodesModelSel,yearsSel,storage_techs,vintage,commodity)
9838        and storage_techParam(storage_techs,vintage,"dischargingLoss") > 0)
9839      ..
9840      storage_discharge(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
9841      =g=
9842      storage_level(timeModelToCalc--1,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
9843      - storage_level(timeModelToCalc,nodesModelSel,yearsSel,storage_techs,vintage,commodity);
9844   
9845  * // ### Storage Level Sum (degradation)
9846  * // The storage level is accounted individually by commissioning year in the case of degradation in order to prohibit the model to assign pre-existing storage cycles to newly built storage reservoirs and thereby avoiding degradation. All those storage levels represent the total storage level.
9847  * // {Eq_storage_levelStateSum}
9848  Eq_storage_levelStateSum(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
9849      $(storage_usedTechCom(nodesModelSel,yearsSel,storage_techs,vintage,commodity)
9850        and storage_techParam(storage_techs,vintage,"usageDegradation"))
9851      ..
9852      storage_level(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
9853      =e=
9854      sum(yearsCom, storage_levelPerAge(timeModelSel,nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,commodity));
9855   
9856  * // ### Storage Level Upper Limit per Age Group (degradation)
9857  * // Upper limit on the storage level per commissioning year if the storage technology accounts for degradation.
9858  * // {Eq_storage_levelUpperLimitPerAge}
9859  Eq_storage_levelUpperLimitPerAge(timeModelSel,nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,commodity)
9860      $(storage_usedTechCom(nodesModelSel,yearsSel,storage_techs,vintage,commodity)
9861        and storage_techParam(storage_techs,vintage,"usageDegradation"))
9862      ..
9863      storage_levelPerAge(timeModelSel,nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,commodity)
9864      =l=
9865      storage_techParam(storage_techs,vintage,"levelUpperLimit")
9866      * storage_sizeParam(storage_techs,vintage,commodity,"size")
9867      * sum(degradation_states,
9868              (storage_degradationParam(storage_techs,vintage,degradation_states,"remainingCapacity")
9869                - (yearsSel.val - yearsCom.val) * storage_techParam(storage_techs,vintage,"annualDegradation"))
9870                * storage_unitsStateTracker(nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,degradation_states));
9871   
9872  * // ### Storage Cycle Distribution to Degradation States per Commissioning Year (degradation)
9873  * // The charging amounts are converted to equivalent full cycles which then must be represented by an adequate distribution of degradation states.
9874  * // {Eq_storage_chargeBasedDegradationDistribution}
9875  alias(years, prev_years);
9876  Eq_storage_chargeBasedDegradationDistribution(nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,commodity)
9877      $(storage_usedTechCom(nodesModelSel,yearsSel,storage_techs,vintage,commodity)
9878        and storage_techParam(storage_techs,vintage,"usageDegradation"))
9879      ..
9880      sum(prev_years$(prev_years.val <= yearsSel.val), representedYears(prev_years)
9881          * sum(timeModel, storage_chargePerAge(timeModel,nodesModelSel,prev_years,yearsCom,storage_techs,vintage,commodity)))
9882      =l=
9883      storage_sizeParam(storage_techs,vintage,commodity,"size")
9884      * sum(dc_states$storage_usedDegradation(storage_techs,vintage,dc_states),
9885          storage_degradationParam(storage_techs,vintage,dc_states,"maxFullCycles")
9886          * (storage_unitsStateTracker(nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,dc_states)
9887             + sum(prev_years$(prev_years.val <= yearsSel.val), storage_unitsStateTrackerDecom(nodesModelSel,prev_years,yearsCom,storage_techs,vintage,dc_states))));
9888   
9889  * // ### Storage Charging per Commissioning Year (degradation)
9890  * // Increases in storage levels are accounted as charging amounts.
9891  * // {Eq_storage_chargingPerAge}
9892  Eq_storage_chargingPerAge(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,commodity)
9893      $(storage_usedTechCom(nodesModelSel,yearsSel,storage_techs,vintage,commodity)
9894        and storage_techParam(storage_techs,vintage,"usageDegradation"))
9895      ..
9896      storage_chargePerAge(timeModelSel,nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,commodity)
9897      =g=
9898      storage_levelPerAge(timeModelToCalc,nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,commodity)
9899      - storage_levelPerAge(timeModelToCalc--1,nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,commodity);
9900   
9901  * // ### Storage Unit Decommissioning States Sum (degradation)
9902  * // The number of decommissioned units in all degradation state must match the total decommissioning unit number.
9903  * // {Eq_storage_unitsDecomStateSum}
9904  Eq_storage_unitsDecomStateSum(nodesModelSel,yearsSel,storage_techs,vintage)
9905      $(storage_techParam(storage_techs,vintage,"usageDegradation"))
9906      ..
9907      storage_unitsDecom(nodesModelSel,yearsSel,storage_techs,vintage)
9908      =e=
9909      sum((yearsCom,degradation_states)$storage_usedDegradation(storage_techs,vintage,degradation_states),
9910          storage_unitsStateTrackerDecom(nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,degradation_states));
9911   
9912  * // ### Storage Unit Sequential Degradation (degradation)
9913  * // Only active degradation ranges, i.e., two neighboring degradation states, can be used.
9914  * // {Eq_storage_unitsDegradation}
9915  alias(degradation_states, degradation_states_a, degradation_states_b);
9916  Eq_storage_unitsDegradation(nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,degradation_states)
9917      $(storage_techParam(storage_techs,vintage,"usageDegradation")
9918        and storage_techParam(storage_techs,vintage,"sequentialDegradationStates"))
9919      ..
9920      sum(degradation_states_a$((storage_degradationParam(storage_techs,vintage,degradation_states_a,"maxFullCycles") = storage_degradationParam(storage_techs,vintage,degradation_states,"maxFullCycles")
9921                        or storage_degradationParam(storage_techs,vintage,degradation_states_a,"maxFullCycles")
9922                                         = smax(degradation_states_b$(storage_degradationParam(storage_techs,vintage,degradation_states_b,"maxFullCycles") < storage_degradationParam(storage_techs,vintage,degradation_states,"maxFullCycles")
9923                                                              and storage_usedDegradation(storage_techs,vintage,degradation_states_b)),
9924                                                              storage_degradationParam(storage_techs,vintage,degradation_states_b,"maxFullCycles")))
9925                        and storage_usedDegradation(storage_techs,vintage,degradation_states_a)),
9926          storage_unitsStateTracker_activeRange(nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,degradation_states_a))
9927      * storage_bigM(storage_techs,vintage)
9928      =g=
9929      storage_unitsStateTracker(nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,degradation_states);
9930   
9931  * // ### Storage Unit Sequential Degradation Range (degradation)
9932  * // Only one degradation range can be active.
9933  * // {Eq_storage_unitsDegradation_onlyOneRange}
9934  Eq_storage_unitsDegradation_onlyOneRange(nodesModelSel,yearsSel,yearsCom,storage_techs,vintage)
9935      $(storage_techParam(storage_techs,vintage,"usageDegradation") and storage_techParam(storage_techs,vintage,"sequentialDegradationStates"))
9936      ..
9937      sum(degradation_states$storage_usedDegradation(storage_techs,vintage,degradation_states),
9938            storage_unitsStateTracker_activeRange(nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,degradation_states))
9939      =e= 1;
9940   
9941  * // ### Storage Unit Sequential State of Charge (SoC)
9942  * // Only active state of charge ranges, i.e., two neighboring states of charge, can be used.
9943  * // {Eq_storage_unitsSoC}
9944  alias(soc_states, soc_states_a, soc_states_b);
9945  Eq_storage_unitsSoC(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,storage_techs,vintage,soc_states)
9946      $(storage_validSoCRange(storage_techs,vintage) and storage_techParam(storage_techs,vintage,"sequentialSoC"))
9947      ..
9948      sum(soc_states_a$((storage_SoCParam(storage_techs,vintage,soc_states_a,"SoC") = storage_SoCParam(storage_techs,vintage,soc_states,"SoC")
9949                        or storage_SoCParam(storage_techs,vintage,soc_states_a,"SoC")
9950                                         = smax(soc_states_b$(storage_SoCParam(storage_techs,vintage,soc_states_b,"SoC") < storage_SoCParam(storage_techs,vintage,soc_states,"SoC")
9951                                                              and storage_usedTechSoCState(storage_techs,vintage,soc_states_b)),
9952                                                              storage_SoCParam(storage_techs,vintage,soc_states_b,"SoC")))
9953                        and storage_usedTechSoCState(storage_techs,vintage,soc_states_a)),
9954          storage_unitsSoC_activeRange(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,soc_states_a))
9955      * storage_bigM(storage_techs,vintage)
9956      =g=
9957      storage_unitsSoC(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,soc_states);
9958   
9959  * // ### Storage Unit Sequential State of Charge Range (SoC)
9960  * // Only one state of charge range can be active.
9961  * // {Eq_storage_unitsSoC_onlyOneRange}
9962  Eq_storage_unitsSoC_onlyOneRange(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,storage_techs,vintage)
9963      $(storage_validSoCRange(storage_techs,vintage) and storage_techParam(storage_techs,vintage,"sequentialSoC"))
9964      ..
9965      sum(soc_states$storage_usedTechSoCState(storage_techs,vintage,soc_states),
9966            storage_unitsSoC_activeRange(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,soc_states)) =e= 1;
9967   
9968  * // ### Storage Unit State of Charge Sum (SoC)
9969  * // Each storage unit must have one state of charge.
9970  * // {Eq_storage_unitsSoC_sum}
9971  Eq_storage_unitsSoC_sum(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,storage_techs,vintage)
9972      $storage_validSoCRange(storage_techs,vintage)
9973      ..
9974      storage_unitsTotal(nodesModelSel,yearsSel,storage_techs,vintage)
9975      =e=
9976      sum(soc_states$storage_usedTechSoCState(storage_techs,vintage,soc_states),
9977            storage_unitsSoC(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,soc_states));
9978   
9979  * // ### Storage Level State of Charge Sum (SoC)
9980  * // The total storage level must be represented by units in their specific states of charge.
9981  * // {Eq_storage_levelSoC}
9982  Eq_storage_levelSoC(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,storage_techs,vintage,commodity)
9983      $(storage_validSoCRange(storage_techs,vintage) and storage_usedTechCom(nodesModelSel,yearsSel,storage_techs,vintage,commodity))
9984      ..
9985      storage_level(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
9986      =e=
9987      storage_sizeParam(storage_techs,vintage,commodity,"size")
9988      * sum(soc_states$storage_usedTechSoCState(storage_techs,vintage,soc_states),
9989              storage_unitsSoC(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,soc_states)
9990              * storage_SoCParam(storage_techs,vintage,soc_states,"SoC"));
9991   
9992  * // ### C-Rate Limit (SoC)
9993  * // The increase in storage level per time step, i.e., the charging rate, is limited relative to the storage capacity. The coefficients can vary between states of charge.
9994  * // {Eq_storage_cRateLimit_SoC}
9995  Eq_storage_cRateLimit_SoC(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,storage_techs,vintage,commodity)
9996      $(storage_usedTechCom(nodesModelSel,yearsSel,storage_techs,vintage,commodity)
9997        and storage_validSoCRange(storage_techs,vintage)
9998        and sum(soc_states, storage_SoCParam(storage_techs,vintage,soc_states,"cRate")) < inf)
9999      ..
10000      storage_level(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
10001      - storage_level(timeModelToCalc--1,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
10002      =l=
10003      storage_sizeParam(storage_techs,vintage,commodity,"size")
10004      * sum(soc_states$storage_usedTechSoCState(storage_techs,vintage,soc_states),
10005                      storage_SoCParam(storage_techs,vintage,soc_states,"cRate")
10006                      * storage_unitsSoC(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,soc_states));
10007   
10008  * // ### E-Rate Limit (SoC)
10009  * // The decrease in storage level per time step, i.e., the discharging rate, is limited relative to the storage capacity. The coefficients can vary between states of charge.
10010  * // {Eq_storage_cRateLimit_SoC}
10011  Eq_storage_eRateLimit_SoC(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,storage_techs,vintage,commodity)
10012      $(storage_usedTechCom(nodesModelSel,yearsSel,storage_techs,vintage,commodity)
10013        and storage_validSoCRange(storage_techs,vintage)
10014        and sum(soc_states, storage_SoCParam(storage_techs,vintage,soc_states,"eRate")) < inf)
10015      ..
10016      storage_level(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
10017      - storage_level(timeModelToCalc--1,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
10018      =g=
10019      - storage_sizeParam(storage_techs,vintage,commodity,"size")
10020      * sum(soc_states$storage_usedTechSoCState(storage_techs,vintage,soc_states),
10021                      storage_SoCParam(storage_techs,vintage,soc_states,"eRate")
10022                      * storage_unitsSoC(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,soc_states));
10023   
10024   
10025  * ==== model definition ====
10026   
10027  Model M_storage
10028  /
10029    Eq_storage_unitsBalance
10030    Eq_storage_unitsFixedDecom
10031    Eq_storage_unitsFreeDecom
10032    Eq_storage_unitsLowerLimit
10033    Eq_storage_unitsUpperLimit
10034    Eq_storage_levelUpperLimit_degradation
10035    Eq_storage_unitsTotalMIP
10036    Eq_storage_levelLowerLimit
10037    Eq_storage_levelUpperLimit
10039    Eq_storage_losses
10041    Eq_storage_unitsBalanceStates
10042    Eq_storage_unitsUpperLimitPerState
10043    Eq_storage_unitsStatesNoRecovery
10044    Eq_storage_cRateLimit
10045    Eq_storage_eRateLimit
10046    Eq_storage_charge
10047    Eq_storage_discharge
10048    Eq_storage_levelStateSum
10049    Eq_storage_levelUpperLimitPerAge
10050    Eq_storage_chargeBasedDegradationDistribution
10051    Eq_storage_chargingPerAge
10052    Eq_storage_unitsDecomStateSum
10053    Eq_storage_unitsDegradation
10054    Eq_storage_unitsDegradation_onlyOneRange
10055   
10056    Eq_storage_unitsSoC
10057    Eq_storage_unitsSoC_sum
10058    Eq_storage_unitsSoC_onlyOneRange
10059    Eq_storage_levelSoC
10060    Eq_storage_cRateLimit_SoC
10061    Eq_storage_eRateLimit_SoC
10062  /;
INCLUDE    C:\Local\REMix\framework\remix\framework\model\source\core\transfer.gms
10064  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
10065  * SPDX-License-Identifier: BSD-3-Clause
10066   
10067  * // # core_transfer
10068  * // The equations in this file describe the commodity transfer in the model.
10069   
10070  * // ## Variables
10071  * // {special_table_transfer_variables}
10074   
10079   
10356   
10357  parameter transfer_linksParam(linksModel,years,transfer_techs,pc_transfer_linksParam);
10358  transfer_linksParam(linksModelToCalc,years,transfer_techs,pc_transfer_linksParam)
10359      = sum(linksData$links_aggregate(linksModelToCalc,linksData), transfer_linksParamIn(linksData,years,transfer_techs,pc_transfer_linksParam));
10360   
10361  * // ## Load links from gdx file
10363   
10364   
10365  set transfer_hasflowProfileIn(linksData,years,transfer_techs,pc_transfer_flowProfile);
10366  option transfer_hasflowProfileIn < transfer_flowProfileIn;
10367   
10368  * === modify transfer_flowProfileIn vector to fill with default values, in case profile is not specified ===
10369  transfer_linksParamIn(linksData,years,transfer_techs,"flowAlongLimit")
10370      $(not transfer_linksParamIn(linksData,years,transfer_techs,"limitFlows"))
10371      = 1;
10372   
10373  transfer_linksParamIn(linksData,years,transfer_techs,"flowAgainstLimit")
10374      $(not transfer_linksParamIn(linksData,years,transfer_techs,"limitFlows"))
10375      = 1;
10376   
10377  transfer_flowProfileIn(timeData,linksData,years,transfer_techs,"along")
10378      $(not transfer_hasflowProfileIn(linksData,years,transfer_techs,"along"))
10379      = transfer_linksParamIn(linksData,years,transfer_techs,"flowAlongLimit");
10380   
10381  transfer_flowProfileIn(timeData,linksData,years,transfer_techs,"against")
10382      $(not transfer_hasflowProfileIn(linksData,years,transfer_techs,"against"))
10383      = transfer_linksParamIn(linksData,years,transfer_techs,"flowAgainstLimit");
10384   
10385  * aggregate time dimension
10386  parameter transfer_flowProfileIn_aggTime(timeModel,linksData,yearsToCalc,transfer_techs,pc_transfer_flowProfile);
10387  transfer_flowProfileIn_aggTime(timeModelToCalc,linksData,yearsToCalc,transfer_techs,pc_transfer_flowProfile)
10388      $transfer_hasflowProfileIn(linksData,yearsToCalc,transfer_techs,pc_transfer_flowProfile)
10389      = sum(timeData$timeMapping(timeData,timeModelToCalc),
10390            transfer_flowProfileIn(timeData,linksData,yearsToCalc,transfer_techs,pc_transfer_flowProfile)
10391            / timeLength(timeModelToCalc));
10392  option clear = transfer_flowProfileIn;
10393   
10394  transfer_flowProfileIn_aggTime(timeModelToCalc,linksData,yearsToCalc,transfer_techs,pc_transfer_flowProfile)
10395      $(not transfer_hasflowProfileIn(linksData,yearsToCalc,transfer_techs,pc_transfer_flowProfile) and
10396        not transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"limitFlows"))
10397      = 1;
10398   
10399  transfer_flowProfileIn_aggTime(timeModelToCalc,linksData,yearsToCalc,transfer_techs,"along")
10400      $(not transfer_hasflowProfileIn(linksData,yearsToCalc,transfer_techs,"along") and
10401        transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"limitFlows"))
10402      = transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"flowAlongLimit");
10403   
10404  transfer_flowProfileIn_aggTime(timeModelToCalc,linksData,yearsToCalc,transfer_techs,"against")
10405      $(not transfer_hasflowProfileIn(linksData,yearsToCalc,transfer_techs,"against") and
10406        transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"limitFlows"))
10407      = transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"flowAgainstLimit");
10408   
10409  set transfer_finiteLinkLimit(linksModel,years,transfer_techs);
10410  transfer_finiteLinkLimit(linksModelToCalc,yearsToCalc,transfer_techs)
10411      = sum(linksData$links_aggregate(linksModelToCalc,linksData), transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"linksUpperLimit")) > 0
10412          and sum(linksData$links_aggregate(linksModelToCalc,linksData), transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"linksUpperLimit")) < inf;
10413   
10414  set transfer_infiniteLinkLimit(linksModel,years,transfer_techs);
10415  transfer_infiniteLinkLimit(linksModelToCalc,yearsToCalc,transfer_techs)
10416      = sum(linksData$links_aggregate(linksModelToCalc,linksData), transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"linksUpperLimit")) = inf;
10418   
10419  parameter transfer_lengthParam(linksModel,link_types,pc_transfer_lengthParam);
10420  transfer_lengthParam(linksModelToCalc,link_types,pc_transfer_lengthParam)
10421      = sum(linksData$links_aggregate(linksModelToCalc,linksData), transfer_lengthParamIn(linksData,link_types,pc_transfer_lengthParam))
10422          / sum(linksData$links_aggregate(linksModelToCalc,linksData), 1);
10423   
10424  parameter transfer_gridSegments(linksModel,transfer_techs,gridSegments,pc_transfer_gridSegments);
10425  transfer_gridSegments(linksModelToCalc,transfer_techs,gridSegments,pc_transfer_gridSegments)
10426      = smax(linksData$links_aggregate(linksModelToCalc,linksData), transfer_gridSegmentsIn(linksData,transfer_techs,gridSegments,pc_transfer_gridSegments));
10427   
10428  parameter transfer_dcopf_Xtech(linksModel,years,transfer_techs,vintage,gridSegments);
10429  transfer_dcopf_Xtech(linksModelToCalc,yearsToCalc,transfer_techs,vintage,gridSegments)
10430      $(transfer_gridSegments(linksModelToCalc,transfer_techs,gridSegments,"useDCopf")
10431          and transfer_linksParam(linksModelToCalc,yearsToCalc,transfer_techs,"circuits") > 0
10432          and sum(link_types, transfer_reactPerLength(transfer_techs,vintage,link_types,"reactPerLength")) > 0 )
10433      = (1 / sum(linksData
10434                  $links_aggregate(linksModelToCalc,linksData),
10435              1 / ( sum(link_types,
10436                          transfer_lengthParamIn(linksData,link_types,"length")
10437                          * transfer_reactPerLength(transfer_techs,vintage,link_types,"reactPerLength"))
10438                      / transfer_linksParam(linksModelToCalc,yearsToCalc,transfer_techs,"circuits"))));
10439   
10440  set transfer_hasflowProfile(linksModel,years,transfer_techs,pc_transfer_flowProfile);
10441  transfer_hasflowProfile(linksModelToCalc,yearsToCalc,transfer_techs,pc_transfer_flowProfile)
10442      = sum(linksData$links_aggregate(linksModelToCalc,linksData),
10443              transfer_hasflowProfileIn(linksData,yearsToCalc,transfer_techs,pc_transfer_flowProfile));
10444   
10445  * ==== parameter modifications ====
10446  transfer_linksParam(linksModelToCalc,yearsToCalc,transfer_techs,"linksLowerLimit")
10447      $sum(vintage, transfer_techParam(transfer_techs,vintage,"mipLinks"))
10448      = floor(transfer_linksParam(linksModelToCalc,yearsToCalc,transfer_techs,"linksLowerLimit"));
10449  transfer_linksParam(linksModelToCalc,yearsToCalc,transfer_techs,"linksUpperLimit")
10450      $sum(vintage, transfer_techParam(transfer_techs,vintage,"mipLinks"))
10451      = ceil(transfer_linksParam(linksModelToCalc,yearsToCalc,transfer_techs,"linksUpperLimit"));
10452   
10453   
10454  * ==== calculation of mappings ====
10455   
10456  * Technologies with a lifeTime > 0 are available
10457  set transfer_availTech(linksModel,years,transfer_techs,vintage);
10458  transfer_availTech(linksModel,years,transfer_techs,vintage)
10459      $(vintage.val = smax(vintage_a$(vintage_a.val <= years.val
10460          and transfer_techParam(transfer_techs,vintage_a,"lifeTime") > 0), vintage_a.val)) = yes;
10461   
10462  * Technologies to optimize become unavailable if they have an linksUpperLimit of 0
10463  transfer_availTech(linksModelToCalc,years,transfer_techs,vintage)
10464      $(yearsToCalc(years) and transfer_linksParam(linksModelToCalc,years,transfer_techs,"linksUpperLimit") = 0 ) = no;
10465   
10466  * Technologies already built become unavailable if they have an linksBuild of 0
10467  transfer_availTech(linksModelToCalc,years,transfer_techs,vintage)
10468      $( ( not yearsToCalc(years)) and transfer_linksParam(linksModelToCalc,years,transfer_techs,"linksBuild") = 0 ) = no;
10469   
10470  * Used technologies are available technologies over their technical lifeTime
10471  set transfer_usedTech(linksModel,years,transfer_techs,vintage);
10472  transfer_usedTech(linksModelToCalc,years,transfer_techs,vintage)
10473      $(vintage.val <= years.val
10474          and years.val < smax(years_a$transfer_availTech(linksModelToCalc,years_a,transfer_techs,vintage),
10475                                  years_a.val + transfer_techParam(transfer_techs,vintage,"lifeTime"))
10476          ) = yes;
10477   
10478  * Technologies have to be decomissioned in the interval of first avail + lifetime to last avail + lifetime
10479  set transfer_decomTech(linksModel,years,transfer_techs,vintage);
10480  transfer_decomTech(linksModel,years,transfer_techs,vintage)
10481    $(sum(years_a$transfer_usedTech(linksModel,years_a,transfer_techs,vintage), 1)
10482      and sum(yearsToCalc
10483        $(sameas(years, yearsToCalc)
10484          and yearsToCalc.val >= smin(years_a$transfer_availTech(linksModel,years_a,transfer_techs,vintage), years_a.val) + transfer_techParam(transfer_techs,vintage,"lifeTime")
10485          and yearsToCalc.val <= smax(years_a$transfer_availTech(linksModel,years_a,transfer_techs,vintage), years_a.val) + transfer_techParam(transfer_techs,vintage,"lifeTime")), 1))
10486    = yes;
10487   
10488  * Extend the decom frame to the year after the last year of usedTech
10489  transfer_decomTech(linksModel,yearsToCalc,transfer_techs,vintage)
10490    $(transfer_usedTech(linksModel,yearsToCalc-1,transfer_techs,vintage)
10491      and transfer_decomTech(linksModel,yearsToCalc-1,transfer_techs,vintage))
10492    = yes;
10493   
10494  parameter transfer_flowProfile(timeModel,linksModel,years,transfer_techs,vintage,pc_transfer_flowProfile);
10495   
10496  transfer_flowProfile(timeModelToCalc,linksModelToCalc,yearsToCalc,transfer_techs,vintage,"along")
10497      $transfer_finiteLinkLimit(linksModelToCalc,yearsToCalc,transfer_techs)
10498      = (sum(linksData$(links_aggregate(linksModelToCalc,linksData)
10499                       and transfer_incidenceData_flip(linksData) = 1),
10500              transfer_flowProfileIn_aggTime(timeModelToCalc,linksData,yearsToCalc,transfer_techs,"along")
10501              * transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"linksUpperLimit"))
10502          + sum(linksData$(links_aggregate(linksModelToCalc,linksData)
10503                          and transfer_incidenceData_flip(linksData) = -1),
10504              transfer_flowProfileIn_aggTime(timeModelToCalc,linksData,yearsToCalc,transfer_techs,"against")
10505              * transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"linksUpperLimit")))
10506      / sum(linksData$links_aggregate(linksModelToCalc,linksData),
10507              transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"linksUpperLimit"));
10508   
10509  transfer_flowProfile(timeModelToCalc,linksModelToCalc,yearsToCalc,transfer_techs,vintage,"against")
10510      $transfer_finiteLinkLimit(linksModelToCalc,yearsToCalc,transfer_techs)
10511      = (sum(linksData$(links_aggregate(linksModelToCalc,linksData)
10512                       and transfer_incidenceData_flip(linksData) = 1),
10513              transfer_flowProfileIn_aggTime(timeModelToCalc,linksData,yearsToCalc,transfer_techs,"against")
10514              * transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"linksUpperLimit"))
10515          + sum(linksData$(links_aggregate(linksModelToCalc,linksData)
10516                          and transfer_incidenceData_flip(linksData) = -1),
10517              transfer_flowProfileIn_aggTime(timeModelToCalc,linksData,yearsToCalc,transfer_techs,"along")
10518              * transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"linksUpperLimit")))
10519      / sum(linksData$links_aggregate(linksModelToCalc,linksData),
10520              transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"linksUpperLimit"));
10521   
10522  transfer_flowProfile(timeModelToCalc,linksModelToCalc,yearsToCalc,transfer_techs,vintage,"along")
10523      $transfer_infiniteLinkLimit(linksModelToCalc,yearsToCalc,transfer_techs)
10524      = (sum(linksData$(links_aggregate(linksModelToCalc,linksData)
10525                       and transfer_incidenceData_flip(linksData) = 1
10526                       and transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"linksUpperLimit") = inf ),
10527              transfer_flowProfileIn_aggTime(timeModelToCalc,linksData,yearsToCalc,transfer_techs,"along"))
10528          + sum(linksData$(links_aggregate(linksModelToCalc,linksData)
10529                          and transfer_incidenceData_flip(linksData) = -1
10530                          and transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"linksUpperLimit") = inf ),
10531              transfer_flowProfileIn_aggTime(timeModelToCalc,linksData,yearsToCalc,transfer_techs,"against")))
10532      / sum(linksData$(links_aggregate(linksModelToCalc,linksData)
10533                      and transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"linksUpperLimit") = inf ),
10534              1);
10535   
10536  transfer_flowProfile(timeModelToCalc,linksModelToCalc,yearsToCalc,transfer_techs,vintage,"against")
10537      $transfer_infiniteLinkLimit(linksModelToCalc,yearsToCalc,transfer_techs)
10538      = (sum(linksData$(links_aggregate(linksModelToCalc,linksData)
10539                       and transfer_incidenceData_flip(linksData) = 1
10540                       and transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"linksUpperLimit") = inf ),
10541              transfer_flowProfileIn_aggTime(timeModelToCalc,linksData,yearsToCalc,transfer_techs,"against"))
10542          + sum(linksData$(links_aggregate(linksModelToCalc,linksData)
10543                          and transfer_incidenceData_flip(linksData) = -1
10544                          and transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"linksUpperLimit") = inf ),
10545              transfer_flowProfileIn_aggTime(timeModelToCalc,linksData,yearsToCalc,transfer_techs,"along")))
10546      / sum(linksData$(links_aggregate(linksModelToCalc,linksData)
10547                      and transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"linksUpperLimit") = inf ),
10548              1);
10549  option clear = transfer_flowProfileIn_aggTime;
10550   
10551  * Orientation of links affects the flowAlongLimit/flowAgainstLimit
10552   
10553  transfer_linksParam(linksModelToCalc,years,transfer_techs,"flowAlongLimit")
10554      $transfer_finiteLinkLimit(linksModelToCalc,years,transfer_techs)
10555      = (sum(linksData$(links_aggregate(linksModelToCalc,linksData)
10556                       and transfer_incidenceData_flip(linksData) = 1),
10557              transfer_linksParamIn(linksData,years,transfer_techs,"flowAlongLimit")
10558              * transfer_linksParamIn(linksData,years,transfer_techs,"linksUpperLimit"))
10559          + sum(linksData$(links_aggregate(linksModelToCalc,linksData)
10560                          and transfer_incidenceData_flip(linksData) = -1),
10561              transfer_linksParamIn(linksData,years,transfer_techs,"flowAgainstLimit")
10562              * transfer_linksParamIn(linksData,years,transfer_techs,"linksUpperLimit")))
10563      / sum(linksData$links_aggregate(linksModelToCalc,linksData),
10564              transfer_linksParamIn(linksData,years,transfer_techs,"linksUpperLimit"));
10565   
10566  transfer_linksParam(linksModelToCalc,years,transfer_techs,"flowAgainstLimit")
10567      $transfer_finiteLinkLimit(linksModelToCalc,years,transfer_techs)
10568      = (sum(linksData$(links_aggregate(linksModelToCalc,linksData)
10569                       and transfer_incidenceData_flip(linksData) = -1),
10570              transfer_linksParamIn(linksData,years,transfer_techs,"flowAlongLimit")
10571              * transfer_linksParamIn(linksData,years,transfer_techs,"linksUpperLimit"))
10572          + sum(linksData$(links_aggregate(linksModelToCalc,linksData)
10573                          and transfer_incidenceData_flip(linksData) = 1),
10574              transfer_linksParamIn(linksData,years,transfer_techs,"flowAgainstLimit")
10575              * transfer_linksParamIn(linksData,years,transfer_techs,"linksUpperLimit")))
10576      / sum(linksData$links_aggregate(linksModelToCalc,linksData),
10577              transfer_linksParamIn(linksData,years,transfer_techs,"linksUpperLimit"));
10578   
10579  transfer_linksParam(linksModelToCalc,years,transfer_techs,"flowAlongLimit")
10580      $transfer_infiniteLinkLimit(linksModelToCalc,years,transfer_techs)
10581      = (sum(linksData$(links_aggregate(linksModelToCalc,linksData)
10582                       and transfer_incidenceData_flip(linksData) = 1
10583                       and transfer_linksParamIn(linksData,years,transfer_techs,"linksUpperLimit") = inf),
10584              transfer_linksParamIn(linksData,years,transfer_techs,"flowAlongLimit"))
10585          + sum(linksData$(links_aggregate(linksModelToCalc,linksData)
10586                          and transfer_incidenceData_flip(linksData) = -1
10587                          and transfer_linksParamIn(linksData,years,transfer_techs,"linksUpperLimit") = inf),
10588              transfer_linksParamIn(linksData,years,transfer_techs,"flowAgainstLimit")))
10589      / sum(linksData$(links_aggregate(linksModelToCalc,linksData)
10590                      and transfer_linksParamIn(linksData,years,transfer_techs,"linksUpperLimit") = inf ),
10591              1);
10592   
10593  transfer_linksParam(linksModelToCalc,years,transfer_techs,"flowAgainstLimit")
10594      $transfer_infiniteLinkLimit(linksModelToCalc,years,transfer_techs)
10595      = (sum(linksData$(links_aggregate(linksModelToCalc,linksData)
10596                       and transfer_incidenceData_flip(linksData) = -1
10597                       and transfer_linksParamIn(linksData,years,transfer_techs,"linksUpperLimit") = inf),
10598              transfer_linksParamIn(linksData,years,transfer_techs,"flowAlongLimit"))
10599          + sum(linksData$(links_aggregate(linksModelToCalc,linksData)
10600                          and transfer_incidenceData_flip(linksData) = 1
10601                          and transfer_linksParamIn(linksData,years,transfer_techs,"linksUpperLimit") = inf),
10602              transfer_linksParamIn(linksData,years,transfer_techs,"flowAgainstLimit")))
10603      / sum(linksData$(links_aggregate(linksModelToCalc,linksData)
10604                      and transfer_linksParamIn(linksData,years,transfer_techs,"linksUpperLimit") = inf ),
10605              1);
10606   
10607  * Mapping for grid segments using DC optimal power flow
10608  set gridSegments_dcopf(linksModel,transfer_techs,gridSegments);
10609  gridSegments_dcopf(linksModelToCalc,transfer_techs,gridSegments)
10610      $transfer_gridSegments(linksModelToCalc,transfer_techs,gridSegments,"useDCopf")
10612      = yes;
10614   
10615  * Ensure each grid segment uses exactly one commodity
10616  parameter checkGridSegmentCommodities(gridSegments);
10617  checkGridSegmentCommodities(gridSegments)
10618      = sum (commodity$(sum((linksModelToCalc,transfer_techs,vintage)
10619                              $( transfer_coefficient(transfer_techs,vintage,commodity,"coefficient") > 0
10620                                  and gridSegments_dcopf(linksModelToCalc,transfer_techs,gridSegments)) , 1) > 0), 1);
10621   
10622  parameter transfer_incidenceSegments(nodesModel,linksModel,years,gridSegments);
10623  transfer_incidenceSegments(nodesModelToCalc,linksModelToCalc,yearsToCalc,gridSegments)
10624      $(sum((transfer_techs,vintage)$(transfer_usedTech(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
10625                                          and gridSegments_dcopf(linksModelToCalc,transfer_techs,gridSegments)
10626                                          and transfer_incidenceModel(nodesModelToCalc,linksModelToCalc) <> 0), 1) > 0)
10627      = transfer_incidenceModel(nodesModelToCalc,linksModelToCalc);
10628   
10629   
10633   
10634  scalar transfer_enableMIP;
10635  transfer_enableMIP = sum(transfer_usedTech(linksModelToCalc,yearsToCalc,transfer_techs,vintage)$transfer_techParam(transfer_techs,vintage,"mipLinks"), 1 );
10636   
10637   
10638  * ==== definition of variables ====
10639   
10640  * Initialise variables for linksBuild
10641  transfer_linksBuild.l(linksModel,years,transfer_techs,vintage)
10642      $transfer_availTech(linksModel,years,transfer_techs,vintage)
10643      = transfer_linksParam(linksModel,years,transfer_techs,"linksBuild");
10644  transfer_linksBuild.lo(linksModel,yearsToCalc,transfer_techs,vintage)
10645      $transfer_availTech(linksModel,yearsToCalc,transfer_techs,vintage)
10646      = transfer_linksBuild.l(linksModel,yearsToCalc,transfer_techs,vintage);
10647  transfer_linksBuild.fx(linksModel,years,transfer_techs,vintage)
10648      $transfer_linksParam(linksModel,years,transfer_techs,"noExpansion")
10649      = transfer_linksBuild.l(linksModel,years,transfer_techs,vintage);
10650   
10651  * Initialise variables for linksDecom
10652  transfer_linksDecom.l(linksModel,years,transfer_techs,vintage)
10653      $(transfer_decomTech(linksModel,years,transfer_techs,vintage)
10654        and years.val < sum(yearsToCalc$(ord(yearsToCalc) = 1), yearsToCalc.val))
10655      = sum((years_a,years_aa)$(sameas(years-1, years_aa)
10656                        and years_a.val > years_aa.val - transfer_techParam(transfer_techs,vintage,'lifeTime')
10657                        and years_a.val <= years.val - transfer_techParam(transfer_techs,vintage,'lifeTime')
10658                        and transfer_availTech(linksModel,years_a,transfer_techs,vintage)),
10659          transfer_linksBuild.l(linksModel,years_a,transfer_techs,vintage));
10660   
10661  transfer_linksDecom.l(linksModel,yearsToCalc,transfer_techs,vintage)
10662    $transfer_decomTech(linksModel,yearsToCalc,transfer_techs,vintage)
10663    = sum(years$
10664          (years.val < sum(yearsToCalc_a$(ord(yearsToCalc_a) = 1), yearsToCalc_a.val)
10665            and transfer_availTech(linksModel,years,transfer_techs,vintage)
10666            and years.val > sum(years_a$sameas(years_a, yearsToCalc-1), years_a.val) - transfer_techParam(transfer_techs,vintage,'lifeTime')
10667            and years.val <= yearsToCalc.val - transfer_techParam(transfer_techs,vintage,'lifeTime')),
10668        transfer_linksBuild.l(linksModel,years,transfer_techs,vintage))
10669      + sum(yearsToCalc_a$
10670          (yearsToCalc_a.val < sum(yearsToCalc_aa$(ord(yearsToCalc_aa) > 1), yearsToCalc_a.val)
10671            and transfer_availTech(linksModel,yearsToCalc_a,transfer_techs,vintage)
10672            and yearsToCalc_a.val > sum(years_a$sameas(years_a, yearsToCalc-1), years_a.val) - transfer_techParam(transfer_techs,vintage,'lifeTime')
10673            and yearsToCalc_a.val <= yearsToCalc.val - transfer_techParam(transfer_techs,vintage,'lifeTime')),
10674        transfer_linksBuild.l(linksModel,yearsToCalc_a,transfer_techs,vintage));
10675        ;
10676   
10677  transfer_linksDecom.lo(linksModel,yearsToCalc,transfer_techs,vintage)
10678      $(transfer_usedTech(linksModel,yearsToCalc,transfer_techs,vintage)
10679          and not transfer_techParam(transfer_techs,vintage,"freeDecom"))
10680      = transfer_linksDecom.l(linksModel,yearsToCalc,transfer_techs,vintage)
10681   
10682  * Calculate planned transfer links expansion
10683  parameter transfer_linksPlanned(linksModel,years,transfer_techs,vintage);
10684  transfer_linksPlanned(linksModel,years,transfer_techs,vintage) = 0;
10685  loop(years,
10686    transfer_linksPlanned(linksModel,years,transfer_techs,vintage)
10687      =
10688      transfer_linksPlanned(linksModel,years-1,transfer_techs,vintage)
10689          $transfer_usedTech(linksModel,years-1,transfer_techs,vintage)
10690      + transfer_linksBuild.l(linksModel,years,transfer_techs,vintage)
10691          $transfer_availTech(linksModel,years,transfer_techs,vintage)
10692      - transfer_linksDecom.l(linksModel,years,transfer_techs,vintage)
10693          $transfer_usedTech(linksModel,years,transfer_techs,vintage);
10694  );
10695   
10696  * Set initial state for planned units
10697  transfer_linksTotal.l(linksModel,years,transfer_techs,vintage)
10698    = transfer_linksPlanned(linksModel,years,transfer_techs,vintage)
10699   
10700  * Calculate if planned links expansion is bound by upper and lower limits
10701  set transfer_linkBoundsFixed(linksModel,years,transfer_techs);
10702  transfer_linkBoundsFixed(linksModel,years,transfer_techs)
10703    $(sum(vintage$transfer_usedTech(linksModel,years,transfer_techs,vintage),
10704          transfer_linksPlanned(linksModel,years,transfer_techs,vintage))
10705      = transfer_linksParam(linksModel,years,transfer_techs,"linksUpperLimit")
10706    and sum(vintage$transfer_usedTech(linksModel,years,transfer_techs,vintage),
10707          transfer_linksPlanned(linksModel,years,transfer_techs,vintage))
10708      = transfer_linksParam(linksModel,years,transfer_techs,"linksLowerLimit"))
10709    = yes;
10710   
10711  * Fix linksBuild, linksDecom, linksTotal if levels are predetermined by upper and lower limits
10712  transfer_linksBuild.fx(linksModel,years,transfer_techs,vintage)
10713    $(transfer_availTech(linksModel,years,transfer_techs,vintage)
10714      and transfer_linkBoundsFixed(linksModel,years,transfer_techs))
10715    = transfer_linksBuild.l(linksModel,years,transfer_techs,vintage);
10716  transfer_linksDecom.fx(linksModel,years,transfer_techs,vintage)
10717    $(transfer_usedTech(linksModel,years,transfer_techs,vintage)
10718      and transfer_linkBoundsFixed(linksModel,years,transfer_techs))
10719    = transfer_linksDecom.l(linksModel,years,transfer_techs,vintage);
10720  transfer_linksTotal.fx(linksModel,years,transfer_techs,vintage)
10721    $(transfer_usedTech(linksModel,years,transfer_techs,vintage)
10722      and transfer_linkBoundsFixed(linksModel,years,transfer_techs))
10723    = transfer_linksTotal.l(linksModel,years,transfer_techs,vintage);
10724   
10725  transfer_linksTotal_MIP.up(linksModel,years,transfer_techs,vintage)
10726      $(transfer_usedTech(linksModel,years,transfer_techs,vintage)
10727        and transfer_techParam(transfer_techs,vintage,"miplinks") = 1)
10728      = transfer_linksParam(linksModel,years,transfer_techs,"linksUpperLimit");
10729   
10730  * Add parameter for fixing capacities during myopic runs
10731  parameter transfer_linksDelta(linksModel,years,transfer_techs);
10732   
10733   
10734  * ==== declaration of equations ====
10735   
10736  equations
10737    Eq_transfer_linksBalance(linksModel,years,transfer_techs,vintage
10738      ) "Ensures the links balance over the planning period."
10739    Eq_transfer_linksFixedDecom(linksModel,years,transfer_techs,vintage
10740      ) "Restricts the fixed decommissioning of links over the planning period."
10741    Eq_transfer_linksFreeDecom(linksModel,years,transfer_techs,vintage
10742      ) "Restricts the free decommissioning of links over the planning period."
10743    Eq_transfer_linksUpperLimit(linksModel,years,transfer_techs
10744      ) "Upper bound for the total number of links."
10745    Eq_transfer_linksLowerLimit(linksModel,years,transfer_techs
10746      ) "Lower bound for the total number of links."
10747    Eq_transfer_linksTotalMIP(linksModel,years,transfer_techs,vintage
10748      ) "Fixes the total number of links to the corresponding integer variable."
10749   
10750    Eq_transfer_flowAlongUpperLimit(timeModel,linksModel,years,transfer_techs,vintage
10751      ) "Upper bound for the flow along the transfer links."
10752    Eq_transfer_flowAgainstUpperLimit(timeModel,linksModel,years,transfer_techs,vintage
10753      ) "Upper bound for the flow against the transfer links."
10754    Eq_transfer_dcopf_angleFlows(timeModel,linksModel,years,gridSegments
10755      )
10756    Eq_transfer_dcopf_cycleFlows(timeModel,years,cycles,gridSegments
10757      )
10758    ;
10759   
10760   
10761  * ==== equation definition ====
10762  * // ## Equations
10763  * // ### Transfer Links Balance
10764  * // Ensures that the transfer between nodes is balanced.
10765  * // {Eq_transfer_linksBalance}
10766  Eq_transfer_linksBalance(linksModelToCalc,yearsSel,transfer_techs,vintage)
10767      $((transfer_usedTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
10768            or sum(years$sameas(years,yearsSel), transfer_usedTech(linksModelToCalc,years-1,transfer_techs,vintage)))
10769          and not transfer_linkBoundsFixed(linksModelToCalc,yearsSel,transfer_techs))
10770      ..
10771      transfer_linksTotal(linksModelToCalc,yearsSel,transfer_techs,vintage)
10772      =e=
10773      sum(yearsToCalc$(ord(yearsToCalc) = 1 and sameas(yearsToCalc, yearsSel)),
10774        sum(years$sameas(years, yearsToCalc),
10775          transfer_linksTotal(linksModelToCalc,years-1,transfer_techs,vintage)
10776            $transfer_usedTech(linksModelToCalc,years-1,transfer_techs,vintage)))
10777      + sum((yearsToCalc)$(ord(yearsToCalc) > 1 and sameas(yearsToCalc, yearsSel)),
10778        transfer_linksTotal(linksModelToCalc,yearsToCalc-1,transfer_techs,vintage)
10779          $transfer_usedTech(linksModelToCalc,yearsToCalc-1,transfer_techs,vintage))
10780      + transfer_linksBuild(linksModelToCalc,yearsSel,transfer_techs,vintage)
10781          $transfer_availTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
10782      - transfer_linksDecom(linksModelToCalc,yearsSel,transfer_techs,vintage)
10783          $transfer_usedTech(linksModelToCalc,yearsSel,transfer_techs,vintage);
10784   
10785  * // ### Transfer Links Fixed Decommissioning
10786  * // Balances fixed link decommissioning.
10787  * // {Eq_transfer_linksFixedDecom}
10788  Eq_transfer_linksFixedDecom(linksModelToCalc,yearsSel,transfer_techs,vintage)
10789      $(transfer_decomTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
10790          and not transfer_techParam(transfer_techs,vintage,"freeDecom") = 1
10791          and not transfer_linkBoundsFixed(linksModelToCalc,yearsSel,transfer_techs))
10792      ..
10793      transfer_linksDecom(linksModelToCalc,yearsSel,transfer_techs,vintage)
10794      =e=
10795      sum(years$
10796          (transfer_availTech(linksModelToCalc,years,transfer_techs,vintage)
10797              and years.val > sum(yearsToCalc$sameas(yearsToCalc+1, yearsSel), yearsToCalc.val) - transfer_techParam(transfer_techs,vintage,'lifeTime')
10798              and years.val <= yearsSel.val - transfer_techParam(transfer_techs,vintage,'lifeTime')),
10799          transfer_linksBuild(linksModelToCalc,years,transfer_techs,vintage));
10800   
10801  * // ### Transfer Links Free Decommissioning
10802  * // Balances free link decommissioning.
10803  * // {Eq_transfer_linksFreeDecom}
10804  Eq_transfer_linksFreeDecom(linksModelToCalc,yearsSel,transfer_techs,vintage)
10805      $((transfer_decomTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
10806          or transfer_usedTech(linksModelToCalc,yearsSel,transfer_techs,vintage))
10807          and transfer_techParam(transfer_techs,vintage,"freeDecom") = 1)
10808      ..
10809      sum(years$
10810            ((transfer_decomTech(linksModelToCalc,years,transfer_techs,vintage)
10811              or transfer_usedTech(linksModelToCalc,years,transfer_techs,vintage))
10812              and years.val < sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)),
10813          transfer_linksDecom(linksModelToCalc,years,transfer_techs,vintage))
10814      + sum(yearsToCalc$
10815            ((transfer_decomTech(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
10816              or transfer_usedTech(linksModelToCalc,yearsToCalc,transfer_techs,vintage))
10817              and yearsToCalc.val >= sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
10818              and yearsToCalc.val <= yearsSel.val),
10819          transfer_linksDecom(linksModelToCalc,yearsToCalc,transfer_techs,vintage))
10820      =g=
10821      sum(years$
10822            (transfer_availTech(linksModelToCalc,years,transfer_techs,vintage)
10823              and years.val < sum(yearsToCalc$(ord(yearsToCalc)=1), yearsToCalc.val) - transfer_techParam(transfer_techs,vintage,'lifeTime')),
10824          transfer_linksBuild(linksModelToCalc,years,transfer_techs,vintage))
10825      + sum(yearsToCalc$
10826            (transfer_availTech(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
10827              and yearsToCalc.val >= sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
10828              and yearsToCalc.val <= yearsSel.val - transfer_techParam(transfer_techs,vintage,'lifeTime')),
10829          transfer_linksBuild(linksModelToCalc,yearsToCalc,transfer_techs,vintage));
10830   
10831  * // ### Transfer Links Lower Limit
10832  * // Ensures link capacity lower limits.
10833  * // {Eq_transfer_linksLowerLimit}
10834  Eq_transfer_linksLowerLimit(linksModelToCalc,yearsSel,transfer_techs)
10835      $(transfer_linksParam(linksModelToCalc,yearsSel,transfer_techs,'linksLowerLimit') > 0 )
10836      ..
10837      sum(vintage$transfer_usedTech(linksModelToCalc,yearsSel,transfer_techs,vintage),
10838          transfer_linksTotal(linksModelToCalc,yearsSel,transfer_techs,vintage))
10839      =g=
10840      transfer_linksParam(linksModelToCalc,yearsSel,transfer_techs,"linksLowerLimit");
10841   
10842  * // ### Transfer Links Upper Limit
10843  * // Ensures link capacity upper limits.
10844  * // {Eq_transfer_linksUpperLimit}
10845  Eq_transfer_linksUpperLimit(linksModelToCalc,yearsSel,transfer_techs)
10846      $(transfer_linksParam(linksModelToCalc,yearsSel,transfer_techs,'linksUpperLimit') >= 0
10847          and transfer_linksParam(linksModelToCalc,yearsSel,transfer_techs,'linksUpperLimit') < +inf )
10848      ..
10849      sum(vintage$transfer_usedTech(linksModelToCalc,yearsSel,transfer_techs,vintage),
10850          transfer_linksTotal(linksModelToCalc,yearsSel,transfer_techs,vintage))
10851      =l=
10852      transfer_linksParam(linksModelToCalc,yearsSel,transfer_techs,"linksUpperLimit");
10853   
10854  * // ### Transfer Links Total MIP
10855  * // Ensures number of MIP links.
10856  * // {Eq_transfer_linksTotalMIP}
10857  Eq_transfer_linksTotalMIP(linksModelToCalc,yearsSel,transfer_techs,vintage)
10858      $(transfer_usedTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
10859          and transfer_techParam(transfer_techs,vintage,"mipLinks"))
10860      ..
10861      transfer_linksTotal(linksModelToCalc,yearsSel,transfer_techs,vintage)
10862      =e=
10863      transfer_linksTotal_MIP(linksModelToCalc,yearsSel,transfer_techs,vintage);
10864   
10865  * // ### Transfer Links Flow Along Upper Limit
10866  * // Ensures links flow along upper limit.
10867  * // {Eq_transfer_flowAlongUpperLimit}
10868  Eq_transfer_flowAlongUpperLimit(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
10869      $transfer_usedTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
10870      ..
10871      transfer_flowAlong(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
10872      =l=
10873      transfer_flowProfile(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage,"along")
10874      * transfer_linksTotal(linksModelToCalc,yearsSel,transfer_techs,vintage)
10875      * transfer_techParam(transfer_techs,vintage,"flowUpperLimit")
10876      ;
10877   
10878  * // ### Transfer Links Flow Against Upper Limit
10879  * // Ensures links flow against upper limit.
10880  * // {Eq_transfer_flowAgainstUpperLimit}
10881  Eq_transfer_flowAgainstUpperLimit(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
10882      $transfer_usedTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
10883      ..
10884      transfer_flowAgainst(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
10885      =l=
10886      transfer_flowProfile(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage,"against")
10887      * transfer_linksTotal(linksModelToCalc,yearsSel,transfer_techs,vintage)
10888      * transfer_techParam(transfer_techs,vintage,"flowUpperLimit")
10889      ;
10890   
10891  set transfer_usedOpf(linksModel,years,gridSegments,transfer_techs,vintage);
10892  transfer_usedOpf(linksModel,yearsToCalc,gridSegments,transfer_techs,vintage)
10893      $(transfer_usedTech(linksModel,yearsToCalc,transfer_techs,vintage)
10894          and gridSegments_dcopf(linksModel,transfer_techs,gridSegments))
10895      = yes;
10896   
10897  set transfer_usedOpfLinks(linksModel,years,gridSegments);
10898  option transfer_usedOpfLinks < transfer_usedOpf;
10899   
10900  set transfer_usedOpfSegments(years,gridSegments);
10901  option transfer_usedOpfSegments < transfer_usedOpf;
10902   
10906  * // ### Transfer DC optimal flow angle flows
10907  * // Angle flows.
10908  * // {Eq_transfer_dcopf_cycleFlows}
10909  Eq_transfer_dcopf_angleFlows(timeModelSel,linksModelToCalc,yearsSel,gridSegments)
10910      $transfer_usedOpfLinks(linksModelToCalc,yearsSel,gridSegments)
10911      ..
10912      sum ((transfer_techs,vintage)
10913              $transfer_usedOpf(linksModelToCalc,yearsSel,gridSegments,transfer_techs,vintage),
10914          ( transfer_flowAlong(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
10915              - transfer_flowAgainst(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage) )
10916          * transfer_dcopf_Xtech(linksModelToCalc,yearsSel,transfer_techs,vintage,gridSegments) )
10917      =e=
10918      sum ( nodesModelSel,
10919          - transfer_incidenceModel(nodesModelSel,linksModelToCalc)
10920          * transfer_dcopf_voltageAngle(timeModelSel,nodesModelSel,yearsSel,gridSegments));
10924   
10925   
10926  * ==== model definition ====
10927   
10928  Model M_transfer
10929  /
10930    Eq_transfer_linksBalance
10931    Eq_transfer_linksFixedDecom
10932    Eq_transfer_linksFreeDecom
10933    Eq_transfer_linksLowerLimit
10934    Eq_transfer_linksUpperLimit
10935    Eq_transfer_linksTotalMIP
10936    Eq_transfer_flowAlongUpperLimit
10937    Eq_transfer_flowAgainstUpperLimit
10941    Eq_transfer_dcopf_angleFlows
10945  /;
INCLUDE    C:\Local\REMix\framework\remix\framework\model\source\core\sourcesink.gms
10947  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
10948  * SPDX-License-Identifier: BSD-3-Clause
10949   
10950  * // # core_sourcesink
10951  * // The equations in this file describe the sources and sinks in the model.
10952   
10953  * // ## Variables
10954  * // {special_table_sourcesink_variables}
11381   
11382  * // ## Aggregation of profiles
11383  * // Profiles are rescaled based on the annual sum.
11384   
11385  set sourcesink_usesProfileScaling(nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile);
11386  sourcesink_usesProfileScaling(nodesData,years,sourcesink_techs,commodity,"fixed")
11387      $sourcesink_configIn(nodesData,years,sourcesink_techs,commodity,"scaleFixProfileWithFixSum") = yes;
11388  sourcesink_usesProfileScaling(nodesData,years,sourcesink_techs,commodity,"lower")
11389      $sourcesink_configIn(nodesData,years,sourcesink_techs,commodity,"scaleLowProfileWithLowSum") = yes;
11390  sourcesink_usesProfileScaling(nodesData,years,sourcesink_techs,commodity,"upper")
11391      $sourcesink_configIn(nodesData,years,sourcesink_techs,commodity,"scaleUpProfileWithUpSum") = yes;
11392   
11393  parameter sourcesink_ProfileSum(nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile);
11394  sourcesink_ProfileSum(nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile)
11395      $sourcesink_usesProfileScaling(nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile)
11396      = sum(timeData, sourcesink_profileIn(timeData,nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile));
11397   
11398  parameter sourcesink_ProfileAbsSum(nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile);
11399  sourcesink_ProfileAbsSum(nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile)
11400      $sourcesink_usesProfileScaling(nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile)
11401      = sum(timeData, abs(sourcesink_profileIn(timeData,nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile)));
11402   
11403  set sourcesink_ProfileScaleError(nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile);
11404  sourcesink_ProfileScaleError(nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile)
11405      $(sourcesink_usesProfileScaling(nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile)
11406          and sourcesink_ProfileSum(nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile) = 0
11407          and sourcesink_ProfileAbsSum(nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile) > 0)
11408      = yes;
11409   
11410  abort$sum((nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile),
11411              sourcesink_ProfileScaleError(nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile)) "One or more profiles cannot be rescaled as their annual sum equals zero!"
11412   
11413  * calculate scaling factor for each type
11414  parameter sourcesink_scalingFactor(nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile);
11415  sourcesink_scalingFactor(nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile)
11416      $(sourcesink_ProfileSum(nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile)
11417          and sourcesink_usesProfileScaling(nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile))
11418      = sum(pc_sourcesink_annualSum$sameas(pc_sourcesink_profile,pc_sourcesink_annualSum),
11419          sourcesink_annualSumIn(nodesData,years,sourcesink_techs,commodity,pc_sourcesink_annualSum)
11420              / sourcesink_ProfileSum(nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile));
11421   
11422  * rescale profiles
11423  sourcesink_profileIn(timeData,nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile)
11424      $sourcesink_usesProfileScaling(nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile)
11425      = sourcesink_profileIn(timeData,nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile)
11426          * sourcesink_scalingFactor(nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile)
11427   
11428  * // ## Aggregation of profiles
11429  * // Profiles are aggregated based on the mapping from data nodes to model nodes.
11430   
11431  * ==== aggregation of profiles ====
11432  set sourcesink_usesProfileIn(nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile);
11433  option sourcesink_usesProfileIn < sourcesink_profileIn
11434   
11435  set sourcesink_usesProfile(nodesModel,years,sourcesink_techs,commodity,pc_sourcesink_profile);
11436  sourcesink_usesProfile(nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity,pc_sourcesink_profile)
11437      $sum(nodesData$(aggregateNodesModel(nodesData,nodesModelToCalc)
11438          and sourcesink_usesProfileIn(nodesData,yearsToCalc,sourcesink_techs,commodity,pc_sourcesink_profile)), 1)
11439      = yes;
11440   
11441  * aagregate time dimension
11442  parameter sourcesink_profileIn_aggTime(timeModel,nodesData,yearsToCalc,sourcesink_techs,commodity,pc_sourcesink_profile);
11443  sourcesink_profileIn_aggTime(timeModelToCalc,nodesData,yearsToCalc,sourcesink_techs,commodity,pc_sourcesink_profile)
11444    $sourcesink_usesProfileIn(nodesData,yearsToCalc,sourcesink_techs,commodity,pc_sourcesink_profile)
11445    = sum(timeData$timeMapping(timeData,timeModelToCalc),
11446            sourcesink_profileIn(timeData,nodesData,yearsToCalc,sourcesink_techs,commodity,pc_sourcesink_profile)
11447            / timeLength(timeModelToCalc));
11448  option clear = sourcesink_profileIn;
11449   
11450  * sum up absolute profiles
11451  parameter sourcesink_profile(timeModel,nodesModel,years,sourcesink_techs,commodity,pc_sourcesink_profile);
11452  sourcesink_profile(timeModelToCalc,nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity,pc_sourcesink_profile)
11453      $sourcesink_usesProfile(nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity,pc_sourcesink_profile)
11454      = sum(nodesData$aggregateNodesModel(nodesData,nodesModelToCalc),
11455              sourcesink_profileIn_aggTime(timeModelToCalc,nodesData,yearsToCalc,sourcesink_techs,commodity,pc_sourcesink_profile));
11456  option clear = sourcesink_profileIn_aggTime;
11457   
11458  set sourcesink_enabled(nodesModel,years,sourcesink_techs,commodity);
11459  option sourcesink_enabled < sourcesink_config;
11460   
11462   
11463  * ==== declaration of variables ====
11464  * // ## Bounding of variables
11465  * // Source-sink variables with either a lower, fixed, or upper profile are bounded to their respective profiles given by the input parameters.
11466   
11467  sourcesink_flow.lo(timeModelToCalc,nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity)
11468      $( sourcesink_enabled(nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity)
11469          and sourcesink_config(nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity,"usesLowerProfile") = 1
11470          and sourcesink_profile(timeModelToCalc,nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity,"lower") > -inf )
11471      = sourcesink_profile(timeModelToCalc,nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity,"lower");
11472   
11473  sourcesink_flow.up(timeModelToCalc,nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity)
11474      $( sourcesink_enabled(nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity)
11475          and sourcesink_config(nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity,"usesUpperProfile") = 1
11476          and sourcesink_profile(timeModelToCalc,nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity,"upper") < inf )
11477      = sourcesink_profile(timeModelToCalc,nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity,"upper");
11478   
11479  sourcesink_flow.fx(timeModelToCalc,nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity)
11480      $( sourcesink_enabled(nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity)
11481          and sourcesink_config(nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity,"usesFixedProfile") = 1 )
11482      = sourcesink_profile(timeModelToCalc,nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity,"fixed");
11483   
11484  option clear = sourcesink_profile;
11485   
11486   
11487  * ==== equation definition ====
11488  * // ## Equations
11489  equations
11490  Eq_sourcesink_useFixedSum(nodesModel,years,sourcesink_techs,commodity
11491      ) "Fixes the annual sum from sources / to sinks"
11492  Eq_sourcesink_useLowerSum(nodesModel,years,sourcesink_techs,commodity
11493      ) "Limits the lower sum from sources / to sinks"
11494  Eq_sourcesink_useUpperSum(nodesModel,years,sourcesink_techs,commodity
11495      ) "Limits the upper sum from sources / to sinks"
11496    ;
11497   
11498  * // ### Fixed annual sums for sources and sinks
11499  * // Ensures that the sources and sinks with annual sums given as fixed limits are balanced.
11500  * // {Eq_sourcesink_useFixedSum}
11501  Eq_sourcesink_useFixedSum(nodesModelSel,yearsSel,sourcesink_techs,commodity)
11502      $( sourcesink_enabled(nodesModelSel,yearsSel,sourcesink_techs,commodity)
11503          and sourcesink_config(nodesModelSel,yearsSel,sourcesink_techs,commodity,"usesFixedSum") = 1 )
11504      ..
11505      sum(timeModelSel,
11506          sourcesink_flow(timeModelSel,nodesModelSel,yearsSel,sourcesink_techs,commodity))
11507      =e=
11508      sourcesink_annualSum(nodesModelSel,yearsSel,sourcesink_techs,commodity,"fixed")
11509      ;
11510   
11511  * // ### Lower annual sums for sources and sinks
11512  * // Ensures that the sources and sinks with annual sums given as lower limits are balanced.
11513  * // {Eq_sourcesink_useLowerSum}
11514  Eq_sourcesink_useLowerSum(nodesModelSel,yearsSel,sourcesink_techs,commodity)
11515      $( sourcesink_enabled(nodesModelSel,yearsSel,sourcesink_techs,commodity)
11516          and sourcesink_config(nodesModelSel,yearsSel,sourcesink_techs,commodity,"usesLowerSum") = 1
11517          and sourcesink_annualSum(nodesModelSel,yearsSel,sourcesink_techs,commodity,"lower") > -inf )
11518      ..
11519      sum(timeModelSel,
11520          sourcesink_flow(timeModelSel,nodesModelSel,yearsSel,sourcesink_techs,commodity))
11521      =g=
11522      sourcesink_annualSum(nodesModelSel,yearsSel,sourcesink_techs,commodity,"lower")
11523      ;
11524   
11525  * // ### Upper annual sums for sources and sinks
11526  * // Ensures that the sources and sinks with annual sums given as upper limits are balanced.
11527  * // {Eq_sourcesink_useUpperSum}
11528  Eq_sourcesink_useUpperSum(nodesModelSel,yearsSel,sourcesink_techs,commodity)
11529      $( sourcesink_enabled(nodesModelSel,yearsSel,sourcesink_techs,commodity)
11530          and sourcesink_config(nodesModelSel,yearsSel,sourcesink_techs,commodity,"usesUpperSum") = 1
11531          and sourcesink_annualSum(nodesModelSel,yearsSel,sourcesink_techs,commodity,"upper") < inf )
11532      ..
11533      sum(timeModelSel,
11534          sourcesink_flow(timeModelSel,nodesModelSel,yearsSel,sourcesink_techs,commodity))
11535      =l=
11536      sourcesink_annualSum(nodesModelSel,yearsSel,sourcesink_techs,commodity,"upper")
11537      ;
11538   
11539   
11540  * ==== model definition ====
11541   
11542  Model M_sourcesink
11543  /
11544    Eq_sourcesink_useFixedSum
11545    Eq_sourcesink_useLowerSum
11546    Eq_sourcesink_useUpperSum
11547  /;
INCLUDE    C:\Local\REMix\framework\remix\framework\model\source\core\balance.gms
11549  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
11550  * SPDX-License-Identifier: BSD-3-Clause
11551   
11552  * // # balance
11553  * // The equations in this file describe the commodity balancing in the model.
11554   
11555  Equations
11556    Eq_balance_commodities(timeModel,nodesModel,years,commodity
11557      ) "Balance for each commodity used in each time step, region, and year";
11558   
11559   
11560  * ==== calculation of mappings ====
11561   
11562  set balance_techComm(techs,commodity);
11563  balance_techComm(converter_techs(techs),commodity)
11564      $sum((vintage,activity)$converter_coefficient(converter_techs,vintage,activity,commodity,"coefficient"), 1) = yes;
11565  balance_techComm(storage_techs(techs),commodity)
11566      $sum((vintage)$storage_sizeParam(storage_techs,vintage,commodity,"size"), 1) = yes;
11567  balance_techComm(transfer_techs(techs),commodity)
11568      $sum((vintage)$transfer_coefficient(transfer_techs,vintage,commodity,"coefficient"), 1) = yes;
11569  balance_techComm(sourcesink_techs(techs),commodity)
11570      $sum((nodesModelToCalc,yearsToCalc)$sourcesink_enabled(nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity), 1) = yes;
11571   
11572  set balance_usedConverter(nodesModel,years,commodity);
11573  set balance_usedStorage(nodesModel,years,commodity);
11574  set balance_usedTransfer(nodesModel,years,commodity);
11575  set balance_usedSourceSink(nodesModel,years,commodity);
11576  set balance_usedBalance(nodesModel,years,commodity);
11577   
11578  balance_usedConverter(nodesModel,years,commodity)
11579      = sum ((converter_techs,vintage,activity)
11580              $( converter_coefficient(converter_techs,vintage,activity,commodity,"coefficient") <> 0
11581                  and converter_usedTech(nodesModel,years,converter_techs,vintage) ), 1);
11582   
11583  balance_usedStorage(nodesModel,years,commodity)
11584      = sum ((storage_techs,vintage,activity)
11585              $(storage_sizeParam(storage_techs,vintage,commodity,"size") <> 0
11586                  and storage_usedTech(nodesModel,years,storage_techs,vintage) ), 1);
11587   
11588  balance_usedTransfer(nodesModel,years,commodity)
11589      = sum ((linksModel,transfer_techs,vintage)
11590              $(transfer_coefficient(transfer_techs,vintage,commodity,"coefficient") <> 0
11591                  and transfer_incidenceModel(nodesModel,linksModel) <> 0), 1);
11592   
11593  option balance_usedSourceSink < sourcesink_enabled;
11594   
11595  balance_usedBalance(nodesModel,years,commodity)
11596      $(balance_usedConverter(nodesModel,years,commodity)
11597          or balance_usedStorage(nodesModel,years,commodity)
11598          or balance_usedTransfer(nodesModel,years,commodity)
11599          or balance_usedSourceSink(nodesModel,years,commodity) )
11600      = yes;
11601   
11602   
11603  * ==== equation definition ====
11604   
11605  * // ### Balance commodities
11606  * // Balancing of commodities for all model regions, time steps, and years
11607  * // {Eq_balance_commodities}
11608  Eq_balance_commodities(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,commodity)
11609      $balance_usedBalance(nodesModelSel,yearsSel,commodity)
11610      ..
11611  * converter
11612      sum((converter_techs,vintage,activity)
11613              $( converter_coefficientProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity,commodity) <> 0
11614                  AND converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage) ),
11615          converter_activity(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity)
11616              * converter_coefficientProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity,commodity)
11617              * timeLength(timeModelSel)
11618          + converter_unitsUsingActivity_MIP(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity)
11619              * converter_coefficient(converter_techs,vintage,activity,commodity,"constant")
11620              * timeLength(timeModelSel))
11621   
11622  * storages
11623      + sum((storage_techs,vintage)
11624              $( storage_sizeParam(storage_techs,vintage,commodity,"size") <> 0
11625                  and storage_usedTech(nodesModelSel,yearsSel,storage_techs,vintage) ),
11626          storage_level(timeModelToCalc--1,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
11627          - storage_level(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
11629          - storage_losses(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
11630          * timeLength(timeModelSel)
11632          )
11633   
11634  * transfer
11635      + sum((linksModel,transfer_techs,vintage)
11636              $(transfer_usedTech(linksModel,yearsSel,transfer_techs,vintage)
11637                  and linksModelToCalc(linksModel)),
11638          (   transfer_flowAlong(timeModelSel,linksModel,yearsSel,transfer_techs,vintage)
11639                  $(transfer_incidenceModel(nodesModelSel,linksModel) > 0)
11640            + transfer_flowAgainst(timeModelSel,linksModel,yearsSel,transfer_techs,vintage)
11641                  $(transfer_incidenceModel(nodesModelSel,linksModel) < 0) )
11642          * transfer_coefficient(transfer_techs,vintage,commodity,"coefficient")
11643          * timeLength(timeModelSel))
11644   
11645      - sum((linksModel,transfer_techs,vintage)
11646              $(transfer_usedTech(linksModel,yearsSel,transfer_techs,vintage)
11647                  and linksModelToCalc(linksModel)),
11648          (   transfer_flowAlong(timeModelSel,linksModel,yearsSel,transfer_techs,vintage)
11649                  $(transfer_incidenceModel(nodesModelSel,linksModel) < 0)
11650            + transfer_flowAgainst(timeModelSel,linksModel,yearsSel,transfer_techs,vintage)
11651                  $(transfer_incidenceModel(nodesModelSel,linksModel) > 0) )
11652          * transfer_coefficient(transfer_techs,vintage,commodity,"coefficient")
11653          * timeLength(timeModelSel))
11654   
11655      + 0.5 * sum((linksModel,transfer_techs,vintage)
11656              $(transfer_usedTech(linksModel,yearsSel,transfer_techs,vintage)
11657                  AND linksModelToCalc(linksModel)),
11658          (   transfer_flowAlong(timeModelSel,linksModel,yearsSel,transfer_techs,vintage)
11659                  $(transfer_incidenceModel(nodesModelSel,linksModel) <> 0)
11660            + transfer_flowAgainst(timeModelSel,linksModel,yearsSel,transfer_techs,vintage)
11661                  $(transfer_incidenceModel(nodesModelSel,linksModel) <> 0) )
11662          * timeLength(timeModelSel)
11663          * ( transfer_coefPerFlow(transfer_techs,vintage,commodity,"coefPerFlow")
11664              + sum(link_types,
11665                  transfer_coefPerLength(transfer_techs,vintage,commodity,link_types,"coefPerLength")
11666                  * transfer_lengthParam(linksModel,link_types,"length"))))
11667   
11668  * sourcesink
11669      + sum((sourcesink_techs)
11670              $sourcesink_enabled(nodesModelSel,yearsSel,sourcesink_techs,commodity),
11671          sourcesink_flow(timeModelSel,nodesModelSel,yearsSel,sourcesink_techs,commodity)
11672          * timeLength(timeModelSel))
11673      =e=
11674      0;
11675   
11676   
11677  * ==== model definition ====
11678   
11679  Model M_balance
11680  /
11681    Eq_balance_commodities
11682  /;
11683   
INCLUDE    C:\Local\REMix\framework\remix\framework\model\source\accounting\equations.gms
11685  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
11686  * SPDX-License-Identifier: BSD-3-Clause
11687   
11688  * // # accounting_equations
11689   
11690  * ==== declaration of variables ====
11691   
11692  variables
11693  accounting_indicator(accNodesModel,accYears,indicator)
11694  accounting_indicator_links(linksModel,years,indicator)
11695  accounting_objective
11696    ;
11697   
11698   
11699  * ==== definition of variables ====
11700   
11701  * set the variable levels to be fixed for years before the optimization years
11702  accounting_indicator.l(accNodesModel,accYears,indicator)
11703      $activeIndicators(accNodesModel,accYears,indicator)
11704      = 0;
11705   
11706  accounting_indicator.lo(accNodesModel,accYears,indicator)
11707      $(accounting_indicatorBounds(accNodesModel,accYears,indicator,"useLower") <> 0 )
11708      = accounting_indicatorBounds(accNodesModel,accYears,indicator,"lowerValue");
11709   
11710  accounting_indicator.up(accNodesModel,accYears,indicator)
11711      $(accounting_indicatorBounds(accNodesModel,accYears,indicator,"useUpper") <> 0 )
11712      = accounting_indicatorBounds(accNodesModel,accYears,indicator,"upperValue");
11713   
11714  accounting_indicator.fx(accNodesModel,accYears,indicator)
11715      $(accounting_indicatorBounds(accNodesModel,accYears,indicator,"useFixed") <> 0 )
11716      = accounting_indicatorBounds(accNodesModel,accYears,indicator,"fixedValue");
11717   
11718   
11719  accounting_indicator_links.lo(linksModelToCalc,yearsToCalc,indicator)
11720      $(accounting_indicatorBounds_links(linksModelToCalc,yearsToCalc,indicator,"useLower") <> 0 )
11721      = accounting_indicatorBounds_links(linksModelToCalc,yearsToCalc,indicator,"lowerValue");
11722   
11723  accounting_indicator_links.up(linksModelToCalc,yearsToCalc,indicator)
11724      $(accounting_indicatorBounds_links(linksModelToCalc,yearsToCalc,indicator,"useUpper") <> 0 )
11725      = accounting_indicatorBounds_links(linksModelToCalc,yearsToCalc,indicator,"upperValue");
11726   
11727  accounting_indicator_links.fx(linksModelToCalc,yearsToCalc,indicator)
11728      $(accounting_indicatorBounds_links(linksModelToCalc,yearsToCalc,indicator,"useFixed") <> 0 )
11729      = accounting_indicatorBounds_links(linksModelToCalc,yearsToCalc,indicator,"fixedValue");
11730   
11731   
11732  * ==== declaration of equations ====
11733   
11734  equations
11735  Eq_accounting_indicatorCalc(accNodesModel,accYears,indicator
11736      ) "Calculates the level of an indicator per accounting region"
11737  Eq_accounting_indicatorCalc_links(linksModel,years,indicator
11738      ) "Calculates the level of an indicator per model link"
11739  Eq_accounting_objective "Calculates the objective value based on the specified indicator"
11740    ;
11741   
11742   
11743  * ==== equations definition ====
11744  * // ## Equations
11745  * // ### Accounting Indicator Calculation
11746  * // Calculates the indicators for each model node for converters, sources and sinks, transfer, storage and variable indicators.
11747  * // {Eq_accounting_indicatorCalc}
11748  Eq_accounting_indicatorCalc(accNodesModel,accYearsSel(accYears),indicator)
11749      $activeIndicators(accNodesModel,accYears,indicator)
11750      ..
11751      accounting_indicator(accNodesModel,accYears,indicator)
11752      =e=
11753   
11754  * == variable indicators ==
11755      sum((accNodesModel_a,accYears_a,indicator_a)
11756          $(compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
11757              and variableIndicators(accNodesModel_a,accYears_a,indicator_a)),
11758          compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
11759          * accounting_indicator(accNodesModel_a,accYears_a,indicator_a))
11760   
11761  * == converters ==
11762      + sum ((accNodesModel_a,nodesModelSel,accYears_a,yearsSel,indicator_a)
11763              $( compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
11764                  and sameas(nodesModelSel,accNodesModel_a) and sameas(yearsSel,accYears_a)),
11765          compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
11766          *
11767          ( sum ((converter_techs,vintage)
11768                      $(converter_availTech(nodesModelSel,yearsSel,converter_techs,vintage)
11769                          and accounting_converterUnits(indicator_a,nodesModelSel,converter_techs,vintage,"useAnnuity") = 0),
11770              converter_unitsBuild(nodesModelSel,yearsSel,converter_techs,vintage)
11771              * accounting_converterUnits(indicator_a,nodesModelSel,converter_techs,vintage,"perUnitBuild"))
11772   
11773          + sum ((years_a,converter_techs,vintage)
11774                      $(converter_availTech(nodesModelSel,years_a,converter_techs,vintage)
11775                          and years_a.val < sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
11776                          and accounting_converterUnits(indicator_a,nodesModelSel,converter_techs,vintage,"useAnnuity") = 1
11777                          and years_a.val + accounting_converterUnits(indicator_a,nodesModelSel,converter_techs,vintage,"amorTime") > yearsSel.val
11778                          and years_a.val <= yearsSel.val ),
11779              converter_unitsBuild(nodesModelSel,years_a,converter_techs,vintage)
11780              * accounting_converterUnits(indicator_a,nodesModelSel,converter_techs,vintage,"perUnitBuild")
11781              * accounting_annuityFactor_converter(indicator_a,nodesModelSel,converter_techs,vintage) )
11782   
11783          + sum ((yearsToCalc,converter_techs,vintage)
11784                      $(converter_availTech(nodesModelSel,yearsToCalc,converter_techs,vintage)
11785                          and yearsToCalc.val >= sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
11786                          and accounting_converterUnits(indicator_a,nodesModelSel,converter_techs,vintage,"useAnnuity") = 1
11787                          and yearsToCalc.val + accounting_converterUnits(indicator_a,nodesModelSel,converter_techs,vintage,"amorTime") > yearsSel.val
11788                          and yearsToCalc.val <= yearsSel.val ),
11789              converter_unitsBuild(nodesModelSel,yearsToCalc,converter_techs,vintage)
11790              * accounting_converterUnits(indicator_a,nodesModelSel,converter_techs,vintage,"perUnitBuild")
11791              * accounting_annuityFactor_converter(indicator_a,nodesModelSel,converter_techs,vintage) )
11792   
11793          + sum ((converter_techs,vintage)
11794                      $converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage),
11795              converter_unitsDecom(nodesModelSel,yearsSel,converter_techs,vintage)
11796              * accounting_converterUnits(indicator_a,nodesModelSel,converter_techs,vintage,"perUnitDecom")
11797   
11798              + converter_unitsTotal(nodesModelSel,yearsSel,converter_techs,vintage)
11799              * accounting_converterUnits(indicator_a,nodesModelSel,converter_techs,vintage,"perUnitTotal") )
11800   
11801          + sum ((timeModelSel,converter_techs,vintage,activity)
11802                      $converter_usedTechAct(nodesModelSel,yearsSel,converter_techs,vintage,activity),
11803              converter_activity(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity)
11804              * timeLength(timeModelSel)
11805              * accounting_converterActivity(indicator_a,nodesModelSel,converter_techs,vintage,activity,"perActivity") )
11806   
11807          + sum ((timeModelSel,converter_techs,vintage)
11808                      $converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage),
11809              converter_unitStartups(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
11810              * accounting_converterStartup(indicator_a,nodesModelSel,converter_techs,vintage,"perStartup") )
11811   
11812          + sum ((timeModelSel,converter_techs,vintage)
11813                      $converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage),
11814              converter_rampPos(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
11815              * (accounting_converterStartup(indicator_a,nodesModelSel,converter_techs,vintage,"perRamp")
11816                 + accounting_converterStartup(indicator_a,nodesModelSel,converter_techs,vintage,"perRampPos"))
11817   
11818              + converter_rampNeg(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
11819              * (accounting_converterStartup(indicator_a,nodesModelSel,converter_techs,vintage,"perRamp")
11820                 + accounting_converterStartup(indicator_a,nodesModelSel,converter_techs,vintage,"perRampNeg")))
11821          )
11822      )
11823   
11824  * == storage ==
11825      + sum ((accNodesModel_a,nodesModelSel,accYears_a,yearsSel,indicator_a)
11826              $( compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
11827                  and sameas(nodesModelSel,accNodesModel_a) and sameas(yearsSel,accYears_a)),
11828          compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
11829          *
11830          ( sum ((storage_techs,vintage)
11831                      $(storage_availTech(nodesModelSel,yearsSel,storage_techs,vintage)
11832                          and accounting_storageUnits(indicator_a,nodesModelSel,storage_techs,vintage,"useAnnuity") = 0),
11833              storage_unitsBuild(nodesModelSel,yearsSel,storage_techs,vintage)
11834              * accounting_storageUnits(indicator_a,nodesModelSel,storage_techs,vintage,"perUnitBuild") )
11835   
11836          + sum ((years_a,storage_techs,vintage)
11837                      $(storage_availTech(nodesModelSel,years_a,storage_techs,vintage)
11838                          and years_a.val < sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
11839                          and accounting_storageUnits(indicator_a,nodesModelSel,storage_techs,vintage,"useAnnuity") = 1
11840                          and years_a.val + accounting_storageUnits(indicator_a,nodesModelSel,storage_techs,vintage,"amorTime") > yearsSel.val
11841                          and years_a.val <= yearsSel.val ),
11842              storage_unitsBuild(nodesModelSel,years_a,storage_techs,vintage)
11843              * accounting_storageUnits(indicator_a,nodesModelSel,storage_techs,vintage,"perUnitBuild")
11844              * accounting_annuityFactor_storage(indicator_a,nodesModelSel,storage_techs,vintage) )
11845   
11846          + sum ((yearsToCalc,storage_techs,vintage)
11847                      $(storage_availTech(nodesModelSel,yearsToCalc,storage_techs,vintage)
11848                          and yearsToCalc.val >= sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
11849                          and accounting_storageUnits(indicator_a,nodesModelSel,storage_techs,vintage,"useAnnuity") = 1
11850                          and yearsToCalc.val + accounting_storageUnits(indicator_a,nodesModelSel,storage_techs,vintage,"amorTime") > yearsSel.val
11851                          and yearsToCalc.val <= yearsSel.val ),
11852              storage_unitsBuild(nodesModelSel,yearsToCalc,storage_techs,vintage)
11853              * accounting_storageUnits(indicator_a,nodesModelSel,storage_techs,vintage,"perUnitBuild")
11854              * accounting_annuityFactor_storage(indicator_a,nodesModelSel,storage_techs,vintage) )
11855   
11856          + sum ((storage_techs,vintage)
11857                      $storage_usedTech(nodesModelSel,yearsSel,storage_techs,vintage),
11858              storage_unitsDecom(nodesModelSel,yearsSel,storage_techs,vintage)
11859              * accounting_storageUnits(indicator_a,nodesModelSel,storage_techs,vintage,"perUnitDecom")
11860   
11861              + storage_unitsTotal(nodesModelSel,yearsSel,storage_techs,vintage)
11862              * accounting_storageUnits(indicator_a,nodesModelSel,storage_techs,vintage,"perUnitTotal") )
11863          )
11864      )
11865   
11866   
11867  * == transfer ==
11868      + sum ((accNodesModel_a,nodesModelSel,accYears_a,yearsSel,indicator_a)
11869              $( compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
11870                  and sameas(nodesModelSel,accNodesModel_a) and sameas(yearsSel,accYears_a)),
11871          compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
11872          *
11873          ( sum ((linksModelToCalc,transfer_techs,vintage)
11874                      $(transfer_availTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
11875                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0
11876                          and accounting_transferLinks(indicator_a,linksModelToCalc,transfer_techs,vintage,"useAnnuity") = 0),
11877              0.5
11878              * transfer_linksBuild(linksModelToCalc,yearsSel,transfer_techs,vintage)
11879              * accounting_transferLinks(indicator_a,linksModelToCalc,transfer_techs,vintage,"perLinkBuild") )
11880   
11881          + sum ((linksModelToCalc,years_a,transfer_techs,vintage)
11882                      $(transfer_availTech(linksModelToCalc,years_a,transfer_techs,vintage)
11883                          and years_a.val < sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
11884                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0
11885                          and accounting_transferLinks(indicator_a,linksModelToCalc,transfer_techs,vintage,"useAnnuity") = 1
11886                          and years_a.val + accounting_transferLinks(indicator_a,linksModelToCalc,transfer_techs,vintage,"amorTime") > yearsSel.val
11887                          and years_a.val <= yearsSel.val ),
11888              0.5
11889              * transfer_linksBuild(linksModelToCalc,years_a,transfer_techs,vintage)
11890              * accounting_transferLinks(indicator_a,linksModelToCalc,transfer_techs,vintage,"perLinkBuild")
11891              * accounting_annuityFactor_transferLink(indicator_a,linksModelToCalc,transfer_techs,vintage) )
11892   
11893          + sum ((linksModelToCalc,yearsToCalc,transfer_techs,vintage)
11894                      $(transfer_availTech(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
11895                          and yearsToCalc.val >= sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
11896                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0
11897                          and accounting_transferLinks(indicator_a,linksModelToCalc,transfer_techs,vintage,"useAnnuity") = 1
11898                          and yearsToCalc.val + accounting_transferLinks(indicator_a,linksModelToCalc,transfer_techs,vintage,"amorTime") > yearsSel.val
11899                          and yearsToCalc.val <= yearsSel.val ),
11900              0.5
11901              * transfer_linksBuild(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
11902              * accounting_transferLinks(indicator_a,linksModelToCalc,transfer_techs,vintage,"perLinkBuild")
11903              * accounting_annuityFactor_transferLink(indicator_a,linksModelToCalc,transfer_techs,vintage) )
11904   
11905          + sum ((linksModelToCalc,transfer_techs,vintage,link_types)
11906                      $(transfer_availTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
11907                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0
11908                          and accounting_transferPerLength(indicator_a,linksModelToCalc,transfer_techs,vintage,link_types,"useAnnuity") = 0 ),
11909              0.5
11910              * transfer_linksBuild(linksModelToCalc,yearsSel,transfer_techs,vintage)
11911              * transfer_lengthParam(linksModelToCalc,link_types,"length")
11912              * accounting_transferPerLength(indicator_a,linksModelToCalc,transfer_techs,vintage,link_types,"perLengthBuild") )
11913   
11914          + sum ((linksModelToCalc,years_a,transfer_techs,vintage,link_types)
11915                      $(transfer_availTech(linksModelToCalc,years_a,transfer_techs,vintage)
11916                          and years_a.val < sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
11917                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0
11918                          and accounting_transferPerLength(indicator_a,linksModelToCalc,transfer_techs,vintage,link_types,"useAnnuity") = 1
11919                          and years_a.val + accounting_transferPerLength(indicator_a,linksModelToCalc,transfer_techs,vintage,link_types,"amorTime") > yearsSel.val
11920                          and years_a.val <= yearsSel.val ),
11921              0.5
11922              * transfer_linksBuild(linksModelToCalc,years_a,transfer_techs,vintage)
11923              * transfer_lengthParam(linksModelToCalc,link_types,"length")
11924              * accounting_transferPerLength(indicator_a,linksModelToCalc,transfer_techs,vintage,link_types,"perLengthBuild")
11925              * accounting_annuityFactor_transferPerLength(indicator_a,linksModelToCalc,transfer_techs,vintage,link_types) )
11926   
11927          + sum ((linksModelToCalc,yearsToCalc,transfer_techs,vintage,link_types)
11928                      $(transfer_availTech(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
11929                          and yearsToCalc.val >= sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
11930                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0
11931                          and accounting_transferPerLength(indicator_a,linksModelToCalc,transfer_techs,vintage,link_types,"useAnnuity") = 1
11932                          and yearsToCalc.val + accounting_transferPerLength(indicator_a,linksModelToCalc,transfer_techs,vintage,link_types,"amorTime") > yearsSel.val
11933                          and yearsToCalc.val <= yearsSel.val ),
11934              0.5
11935              * transfer_linksBuild(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
11936              * transfer_lengthParam(linksModelToCalc,link_types,"length")
11937              * accounting_transferPerLength(indicator_a,linksModelToCalc,transfer_techs,vintage,link_types,"perLengthBuild")
11938              * accounting_annuityFactor_transferPerLength(indicator_a,linksModelToCalc,transfer_techs,vintage,link_types) )
11939   
11940          + sum ((linksModelToCalc,transfer_techs,vintage)
11941                      $(transfer_usedTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
11942                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0 ),
11943              0.5
11944              * transfer_linksDecom(linksModelToCalc,yearsSel,transfer_techs,vintage)
11945              * accounting_transferLinks(indicator_a,linksModelToCalc,transfer_techs,vintage,"perLinkDecom")
11946   
11947              + 0.5
11948              * transfer_linksTotal(linksModelToCalc,yearsSel,transfer_techs,vintage)
11949              * accounting_transferLinks(indicator_a,linksModelToCalc,transfer_techs,vintage,"perLinkTotal")
11950   
11951              + 0.5
11952              * sum (link_types,
11953                  transfer_linksDecom(linksModelToCalc,yearsSel,transfer_techs,vintage)
11954                  * transfer_lengthParam(linksModelToCalc,link_types,"length")
11955                  * accounting_transferPerLength(indicator_a,linksModelToCalc,transfer_techs,vintage,link_types,"perLengthDecom")
11956   
11957                  + transfer_linksTotal(linksModelToCalc,yearsSel,transfer_techs,vintage)
11958                  * transfer_lengthParam(linksModelToCalc,link_types,"length")
11959                  * accounting_transferPerLength(indicator_a,linksModelToCalc,transfer_techs,vintage,link_types,"perLengthTotal"))
11960   
11961              + 0.5
11962              * sum (timeModelSel,
11963                  transfer_flowAlong(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
11964                  * timeLength(timeModelSel)
11965                  * ( accounting_transferLinks(indicator_a,linksModelToCalc,transfer_techs,vintage,"perFlow")
11966                      + accounting_transferLinks(indicator_a,linksModelToCalc,transfer_techs,vintage,"perFlowAlong"))
11967   
11968                  + transfer_flowAgainst(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
11969                  * timeLength(timeModelSel)
11970                  * ( accounting_transferLinks(indicator_a,linksModelToCalc,transfer_techs,vintage,"perFlow")
11971                      + accounting_transferLinks(indicator_a,linksModelToCalc,transfer_techs,vintage,"perFlowAgainst")))
11972   
11973              + 0.5
11974              * sum ((timeModelSel, link_types),
11975                  transfer_flowAlong(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
11976                  * timeLength(timeModelSel)
11977                  * transfer_lengthParam(linksModelToCalc,link_types,"length")
11978                  * (accounting_transferPerLength(indicator_a,linksModelToCalc,transfer_techs,vintage,link_types,"perFlow")
11979                      + accounting_transferPerLength(indicator_a,linksModelToCalc,transfer_techs,vintage,link_types,"perFlowAlong"))
11980   
11981                  + transfer_flowAgainst(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
11982                  * timeLength(timeModelSel)
11983                  * transfer_lengthParam(linksModelToCalc,link_types,"length")
11984                  * (accounting_transferPerLength(indicator_a,linksModelToCalc,transfer_techs,vintage,link_types,"perFlow")
11985                      + accounting_transferPerLength(indicator_a,linksModelToCalc,transfer_techs,vintage,link_types,"perFlowAgainst")))
11986              )
11987          )
11988      )
11989   
11990   
11991  * == sources / sinks ==
11992      + sum ((accNodesModel_a,nodesModelSel,accYears_a,yearsSel,indicator_a)
11993              $( compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
11994                  and sameas(nodesModelSel,accNodesModel_a) and sameas(yearsSel,accYears_a)),
11995          compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
11996          *
11997          sum ((timeModelSel,sourcesink_techs,commodity)
11998                  $sourcesink_enabled(nodesModelSel,yearsSel,sourcesink_techs,commodity),
11999              sourcesink_flow(timeModelSel,nodesModelSel,yearsSel,sourcesink_techs,commodity)
12000              * timeLength(timeModelSel)
12001              * accounting_sourcesinkFlow(indicator_a,nodesModelSel,yearsSel,sourcesink_techs,commodity,"perFlow") )
12002      );
12003   
12004  * // ### Accounting Indicator Calculation Links
12005  * // Calculates the indicators for each transfer for converters, sources and sinks, transfer, storage and variable indicators.
12006  * // {Eq_accounting_indicatorCalc_links}
12007  Eq_accounting_indicatorCalc_links(linksModelToCalc,yearsSel,indicator)
12008      $activeIndicators_links(linksModelToCalc,yearsSel,indicator)
12009      ..
12010      accounting_indicator_links(linksModelToCalc,yearsSel,indicator)
12011      =e=
12012      sum ((transfer_techs,vintage)
12013                  $(transfer_availTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
12014                      and accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"useAnnuity") = 0),
12015          transfer_linksBuild(linksModelToCalc,yearsSel,transfer_techs,vintage)
12016          * accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"perLinkBuild") )
12017   
12018      + sum ((years_a,transfer_techs,vintage)
12019                  $(transfer_availTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
12020                      and accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"useAnnuity") = 1
12021                      and years_a.val + accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"amorTime") > yearsSel.val
12022                      and years_a.val <= yearsSel.val ),
12023          transfer_linksBuild(linksModelToCalc,years_a,transfer_techs,vintage)
12024          * accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"perLinkBuild")
12025          * accounting_annuityFactor_transferLink(indicator,linksModelToCalc,transfer_techs,vintage) )
12026   
12027      + sum ((transfer_techs,vintage,link_types)
12028                  $(transfer_availTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
12029                      and accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"useAnnuity") = 0 ),
12030          transfer_linksBuild(linksModelToCalc,yearsSel,transfer_techs,vintage)
12031          * transfer_lengthParam(linksModelToCalc,link_types,"length")
12032          * accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"perLengthBuild") )
12033   
12034      + sum ((years_a,transfer_techs,vintage,link_types)
12035                  $(transfer_availTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
12036                      and accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"useAnnuity") = 1
12037                      and years_a.val + accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"amorTime") > yearsSel.val
12038                      and years_a.val <= yearsSel.val ),
12039          transfer_linksBuild(linksModelToCalc,years_a,transfer_techs,vintage)
12040          * transfer_lengthParam(linksModelToCalc,link_types,"length")
12041          * accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"perLengthBuild")
12042          * accounting_annuityFactor_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types) )
12043   
12044      + sum ((transfer_techs,vintage)
12045                  $(transfer_usedTech(linksModelToCalc,yearsSel,transfer_techs,vintage)),
12046          transfer_linksDecom(linksModelToCalc,yearsSel,transfer_techs,vintage)
12047          * accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"perLinkDecom")
12048   
12049          + transfer_linksTotal(linksModelToCalc,yearsSel,transfer_techs,vintage)
12050          * accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"perLinkTotal")
12051   
12052          + sum (link_types,
12053              transfer_linksDecom(linksModelToCalc,yearsSel,transfer_techs,vintage)
12054              * transfer_lengthParam(linksModelToCalc,link_types,"length")
12055              * accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"perLengthDecom")
12056   
12057              + transfer_linksTotal(linksModelToCalc,yearsSel,transfer_techs,vintage)
12058              * transfer_lengthParam(linksModelToCalc,link_types,"length")
12059              * accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"perLengthTotal"))
12060   
12061          + sum (timeModelSel,
12062              transfer_flowAlong(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
12063              * timeLength(timeModelSel)
12064              * ( accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"perFlow")
12065                  + accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"perFlowAlong"))
12066   
12067              + transfer_flowAgainst(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
12068              * timeLength(timeModelSel)
12069              * ( accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"perFlow")
12070                  + accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"perFlowAgainst")))
12071   
12072          + sum ((timeModelSel, link_types),
12073              transfer_flowAlong(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
12074              * timeLength(timeModelSel)
12075              * transfer_lengthParam(linksModelToCalc,link_types,"length")
12076              * (accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"perFlow")
12077                  + accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"perFlowAlong"))
12078   
12079              + transfer_flowAgainst(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
12080              * timeLength(timeModelSel)
12081              * transfer_lengthParam(linksModelToCalc,link_types,"length")
12082              * (accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"perFlow")
12083                  + accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"perFlowAgainst")))
12084          );
12085   
12086  * // ### Accounting Objective
12087  * // Calculates the indicators for the objective.
12088  * // {Eq_accounting_objective}
12089  Eq_accounting_objective
12090      ..
12091      accounting_objective
12092      =e=
12093      sum ((accNodesModel,accYears,indicator)
12094              $(accounting_indicatorBounds(accNodesModel,accYears,indicator,"obj") <> 0 ),
12095          accounting_indicator(accNodesModel,accYears,indicator) )
12096   
12097   
12098  * ==== model definition ====
12099   
12100  Model M_accounting
12101  /
12102  Eq_accounting_indicatorCalc_links
12103  Eq_accounting_indicatorCalc
12104  Eq_accounting_objective
12105  /;
INCLUDE    C:\Local\REMix\framework\remix\framework\model\source\optiframe.gms
12107  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
12108  * SPDX-License-Identifier: BSD-3-Clause
12109   
12110  * ==== optimization frames ====
12112   
12113  * mapping from optimization frame to years
12115  set optiframe / of1 * of3 /;
12116  set optiframeToCalc(optiframe);
12117   
12119  set map_optiframe(optiframe,years) / of1 . #yearsToCalc /;
12121   
12123   
12124  option optiframeToCalc < map_optiframe;
12125   
12126  Model remix /
12127    M_converter
12128    M_storage
12129    M_transfer
12130    M_sourcesink
12131    M_balance
12132    M_accounting
12133  /;
12134   
12135   
12136  * ==== include methods  ====
12137   
12138  * check if the method is valid
12144   
12145   
12146  * if method is pips write the checkanno tool
INCLUDE    C:\Local\REMix\framework\remix\framework\model\source\methods\checkanno.gms
12148  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
12149  * SPDX-License-Identifier: BSD-3-Clause
12150   
12153   
12156   
12157  * if method is pips generate the annotated gdx file
INCLUDE    C:\Local\REMix\framework\remix\framework\model\source\methods\pips.gms
12159  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
12160  * SPDX-License-Identifier: BSD-3-Clause
12161   
12165   
12166  * if method is solve run the model with commercial solvers
INCLUDE    C:\Local\REMix\framework\remix\framework\model\source\methods\solve.gms
12168  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
12169  * SPDX-License-Identifier: BSD-3-Clause
12170   
12173   
12175   
12176  * ==== global options ====
12183   
12184  * ==== general solver options ====
12194   
12195  * ==== cplex options ====
12204   
12205  * ==== gurobi options ====
12206   
12207   
12208  * ==== copt options ====
12212   
12213  * ==== debug options ====
12216   
12217   
12218  * ==== setup optimization ====
12219  if ((sum(nodesModelToCalc, 1)>40 or sum(timeModelToCalc, 1)>50) and not 0,
12220     option limRow=0, limCol=0, solPrint=off;
12221  else
12222     option limRow=100000, limCol=100000, solPrint=on;
12223  );
12224   
12226   
12227  option mip = cplex;
12228  option reslim = 1209600;
12229  option optcr = 1e-3;
12230  remix.threads = 4;
12231  remix.optFile = 1;
12232  remix.solveLink = 0;
12233  remix.holdFixed = 1;
12234   
12235   
12236  * ==== configure option files ====
12237   
12240   
12241  file opt / "cplex.opt" /;
12242  put opt;
12244  put "rerun no" /;
12245  put "iis 1" /;
12246  put "lpmethod 4" /;
12248  put "barorder 3 /;" /;
12249  put "preind 1" /;
12250  put "scaind 0" /;
12251  put "predual -1" /;
12252  put "baralg 0" /;
12253  put "barstartalg 1" /;
12254  put "barepcomp 1e-6" /;
12255  put "solutiontype 2" /;
12257  put "startalg 4" /;
12258  put "epgap 1e-3" /;
12259  put "quality 1" /;
12260  put "barcolnz 0" /;
12261  put "threads 4" /;
12262  put "parallelmode 1" /;
12265  putclose;
12266   
12268   
12269   
12270  * ==== solve the problem ====
12271   
12272  loop ( optiframeToCalc,
12273      yearsSel(years) = no;
12274      yearsSel(years)$map_optiframe(optiframeToCalc,years) = yes;
12275      yearsToFix(years) = no;
12276      yearsToFix(years)$(years.val < smin(years_a$yearsSel(years_a), years_a.val)) = yes;
12277      accYearsSel(accYears) = no;
12278      accYearsSel("horizon") = yes;
12279      accYearsSel(accYears)$(sum(yearsSel$sameas(accYears,yearsSel), 1)) = yes;
12280      accYearsToFix(accYears) = no;
12281      accYearsToFix(accYears)$(sum(years$(sameas(years,accYears) and years.val < smin(years_a$yearsSel(years_a), years_a.val)), 1) > 0) = yes;
12282      timeModelSel(timeModel) = no;
12283      timeModelSel(timeModel)$timeModelToCalc(timeModel) = yes;
12284      nodesModelSel(nodesModel) = no;
12285      nodesModelSel(nodesModel)$nodesModelToCalc(nodesModel) = yes;
12286   
12287  * Fix decision for years previously optimized in case of myopic or foresight
12288      converter_unitsDelta(nodesModelToCalc,yearsToFix,converter_techs)
12289          $(sum(yearsToCalc$sameas(yearsToFix, yearsToCalc), 1))
12290          = sum(vintage, converter_unitsTotal.l(nodesModelToCalc,yearsToFix,converter_techs,vintage))
12291              - converter_capacityParam(nodesModelToCalc,yearsToFix,converter_techs,"unitsUpperLimit");
12292      converter_unitsDelta(nodesModelToCalc,yearsToFix,converter_techs)
12293          $(converter_unitsDelta(nodesModelToCalc,yearsToFix,converter_techs) < 0) = 0;
12294   
12295      converter_unitsBuild.l(nodesModelToCalc,yearsToFix,converter_techs,vintage)
12296          $converter_availTech(nodesModelToCalc,yearsToFix,converter_techs,vintage)
12297          = converter_unitsBuild.l(nodesModelToCalc,yearsToFix,converter_techs,vintage)
12298              - converter_unitsDelta(nodesModelToCalc,yearsToFix,converter_techs);
12299   
12300      converter_unitsBuild.l(nodesModelToCalc,yearsToFix,converter_techs,vintage)
12301          $(converter_unitsBuild.l(nodesModelToCalc,yearsToFix,converter_techs,vintage) < 0) = 0;
12302      converter_unitsBuild.fx(nodesModelToCalc,yearsToFix,converter_techs,vintage)
12303          = converter_unitsBuild.l(nodesModelToCalc,yearsToFix,converter_techs,vintage);
12304      converter_unitsDecom.l(nodesModelToCalc,yearsToFix,converter_techs,vintage)
12305          $(converter_unitsDecom.l(nodesModelToCalc,yearsToFix,converter_techs,vintage) < 0) = 0;
12306      converter_unitsDecom.fx(nodesModelToCalc,yearsToFix,converter_techs,vintage)
12307          = converter_unitsDecom.l(nodesModelToCalc,yearsToFix,converter_techs,vintage);
12308      converter_unitsTotal.fx(nodesModelToCalc,yearsToFix,converter_techs,vintage)
12309          = converter_unitsTotal.l(nodesModelToCalc,yearsToFix,converter_techs,vintage);
12310   
12311   
12312      storage_unitsDelta(nodesModelToCalc,yearsToFix,storage_techs)
12313          $(sum(yearsToCalc$sameas(yearsToFix, yearsToCalc), 1))
12314          = sum(vintage, storage_unitsTotal.l(nodesModelToCalc,yearsToFix,storage_techs,vintage))
12315              - storage_reservoirParam(nodesModelToCalc,yearsToFix,storage_techs,"unitsUpperLimit");
12316      storage_unitsDelta(nodesModelToCalc,yearsToFix,storage_techs)
12317          $(storage_unitsDelta(nodesModelToCalc,yearsToFix,storage_techs) < 0) = 0;
12318   
12319      storage_unitsBuild.l(nodesModelToCalc,yearsToFix,storage_techs,vintage)
12320          $storage_availTech(nodesModelToCalc,yearsToFix,storage_techs,vintage)
12321          = storage_unitsBuild.l(nodesModelToCalc,yearsToFix,storage_techs,vintage)
12322              - storage_unitsDelta(nodesModelToCalc,yearsToFix,storage_techs);
12323   
12324      storage_unitsBuild.l(nodesModelToCalc,yearsToFix,storage_techs,vintage)
12325          $(storage_unitsBuild.l(nodesModelToCalc,yearsToFix,storage_techs,vintage) < 0) = 0;
12326      storage_unitsBuild.fx(nodesModelToCalc,yearsToFix,storage_techs,vintage)
12327          = storage_unitsBuild.l(nodesModelToCalc,yearsToFix,storage_techs,vintage);
12328      storage_unitsDecom.l(nodesModelToCalc,yearsToFix,storage_techs,vintage)
12329          $(storage_unitsDecom.l(nodesModelToCalc,yearsToFix,storage_techs,vintage) < 0) = 0;
12330      storage_unitsDecom.fx(nodesModelToCalc,yearsToFix,storage_techs,vintage)
12331          = storage_unitsDecom.l(nodesModelToCalc,yearsToFix,storage_techs,vintage);
12332      storage_unitsTotal.fx(nodesModelToCalc,yearsToFix,storage_techs,vintage)
12333          = storage_unitsTotal.l(nodesModelToCalc,yearsToFix,storage_techs,vintage);
12334   
12335   
12336      transfer_linksDelta(linksModelToCalc,yearsToFix,transfer_techs)
12337          $(sum(yearsToCalc$sameas(yearsToFix, yearsToCalc), 1))
12338          = sum(vintage, transfer_linksTotal.l(linksModelToCalc,yearsToFix,transfer_techs,vintage))
12339              - transfer_linksParam(linksModelToCalc,yearsToFix,transfer_techs,"linksUpperLimit");
12340      transfer_linksDelta(linksModelToCalc,yearsToFix,transfer_techs)
12341          $(transfer_linksDelta(linksModelToCalc,yearsToFix,transfer_techs) < 0) = 0;
12342   
12343      transfer_linksBuild.l(linksModelToCalc,yearsToFix,transfer_techs,vintage)
12344          $transfer_availTech(linksModelToCalc,yearsToFix,transfer_techs,vintage)
12345          = transfer_linksBuild.l(linksModelToCalc,yearsToFix,transfer_techs,vintage)
12346              - transfer_linksDelta(linksModelToCalc,yearsToFix,transfer_techs);
12347   
12348      transfer_linksBuild.l(linksModelToCalc,yearsToFix,transfer_techs,vintage)
12349          $(transfer_linksBuild.l(linksModelToCalc,yearsToFix,transfer_techs,vintage) < 0) = 0;
12350      transfer_linksBuild.fx(linksModelToCalc,yearsToFix,transfer_techs,vintage)
12351          = transfer_linksBuild.l(linksModelToCalc,yearsToFix,transfer_techs,vintage);
12352      transfer_linksDecom.l(linksModelToCalc,yearsToFix,transfer_techs,vintage)
12353          $(transfer_linksDecom.l(linksModelToCalc,yearsToFix,transfer_techs,vintage) < 0) = 0;
12354      transfer_linksDecom.fx(linksModelToCalc,yearsToFix,transfer_techs,vintage)
12355          = transfer_linksDecom.l(linksModelToCalc,yearsToFix,transfer_techs,vintage);
12356      transfer_linksTotal.fx(linksModelToCalc,yearsToFix,transfer_techs,vintage)
12357          = transfer_linksTotal.l(linksModelToCalc,yearsToFix,transfer_techs,vintage);
12358   
12359      accounting_indicator.fx(accNodesModel,accYearsToFix,indicator)
12360          = accounting_indicator.l(accNodesModel,accYearsToFix,indicator);
12361   
12362  * Optimize and log values
12363      if (opti_sense < 0,
12364      solve remix minimizing accounting_objective using mip;
12365      else
12366      solve remix maximizing accounting_objective using mip;
12367      );
12368   
12369      put_utility 'log' / 'Model status ' remix.modelstat:0:0;
12370      put_utility 'log' / 'Objective value ' accounting_objective.l:0:3;
12371   
12372  );
12373   
12377   
12378  * if method is pareto solve the model once and afterwards run multiple points along the pareto front
INCLUDE    C:\Local\REMix\framework\remix\framework\model\source\methods\pareto.gms
12380  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
12381  * SPDX-License-Identifier: BSD-3-Clause
12382   
12386   
12387  * if method is mga solve the model once and afterwards maximize the length metric of indicators
INCLUDE    C:\Local\REMix\framework\remix\framework\model\source\methods\mga.gms
12389  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
12390  * SPDX-License-Identifier: BSD-3-Clause
12391   
12395   
12396  * if method is iternodes run the model by iterating through all nodesToCalc
INCLUDE    C:\Local\REMix\framework\remix\framework\model\source\methods\iternodes.gms
12398  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
12399  * SPDX-License-Identifier: BSD-3-Clause
12400   
12404   
12405  * if postcalc is one write the results gdx
INCLUDE    C:\Local\REMix\framework\remix\framework\model\source\postcalc\definition.gms
12407  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
12408  * SPDX-License-Identifier: BSD-3-Clause
12409   
12411   
12412  * ==== indicator accounting ====
12413   
12414  indicator_accounting_detailed(indicator,nodesModelToCalc,yearsToCalc,techs)
12415      =
12416  * == converters ==
12417      sum ((converter_techs(techs),vintage)
12418                  $(converter_availTech(nodesModelToCalc,yearsToCalc,converter_techs,vintage)
12419                      and accounting_converterUnits(indicator,nodesModelToCalc,converter_techs,vintage,"useAnnuity") = 0),
12420          converter_unitsBuild.l(nodesModelToCalc,yearsToCalc,converter_techs,vintage)
12421          * accounting_converterUnits(indicator,nodesModelToCalc,converter_techs,vintage,"perUnitBuild"))
12422   
12423      + sum ((years_a,converter_techs(techs),vintage)
12424                  $(converter_availTech(nodesModelToCalc,years_a,converter_techs,vintage)
12425                      and accounting_converterUnits(indicator,nodesModelToCalc,converter_techs,vintage,"useAnnuity") = 1
12426                      and years_a.val + accounting_converterUnits(indicator,nodesModelToCalc,converter_techs,vintage,"amorTime") > yearsToCalc.val
12427                      and years_a.val <= yearsToCalc.val ),
12428          converter_unitsBuild.l(nodesModelToCalc,years_a,converter_techs,vintage)
12429          * accounting_converterUnits(indicator,nodesModelToCalc,converter_techs,vintage,"perUnitBuild")
12430          * accounting_annuityFactor_converter(indicator,nodesModelToCalc,converter_techs,vintage) )
12431   
12432      + sum ((converter_techs(techs),vintage)
12433                  $converter_usedTech(nodesModelToCalc,yearsToCalc,converter_techs,vintage),
12434          converter_unitsDecom.l(nodesModelToCalc,yearsToCalc,converter_techs,vintage)
12435          * accounting_converterUnits(indicator,nodesModelToCalc,converter_techs,vintage,"perUnitDecom")
12436   
12437          + converter_unitsTotal.l(nodesModelToCalc,yearsToCalc,converter_techs,vintage)
12438          * accounting_converterUnits(indicator,nodesModelToCalc,converter_techs,vintage,"perUnitTotal") )
12439   
12440      + sum ((timeModelToCalc,converter_techs(techs),vintage,activity)
12441                  $converter_usedTechAct(nodesModelToCalc,yearsToCalc,converter_techs,vintage,activity),
12442          converter_activity.l(timeModelToCalc,nodesModelToCalc,yearsToCalc,converter_techs,vintage,activity)
12443          * timeLength(timeModelToCalc)
12444          * accounting_converterActivity(indicator,nodesModelToCalc,converter_techs,vintage,activity,"perActivity") )
12445   
12446      + sum ((timeModelToCalc,converter_techs(techs),vintage)
12447                  $converter_usedTech(nodesModelToCalc,yearsToCalc,converter_techs,vintage),
12448          converter_unitStartups.l(timeModelToCalc,nodesModelToCalc,yearsToCalc,converter_techs,vintage)
12449          * accounting_converterStartup(indicator,nodesModelToCalc,converter_techs,vintage,"perStartup") )
12450   
12451      + sum ((timeModelToCalc,converter_techs(techs),vintage)
12452                  $converter_usedTech(nodesModelToCalc,yearsToCalc,converter_techs,vintage),
12453          converter_rampPos.l(timeModelToCalc,nodesModelToCalc,yearsToCalc,converter_techs,vintage)
12454          * (accounting_converterStartup(indicator,nodesModelToCalc,converter_techs,vintage,"perRamp")
12455              + accounting_converterStartup(indicator,nodesModelToCalc,converter_techs,vintage,"perRampPos"))
12456   
12457          + converter_rampNeg.l(timeModelToCalc,nodesModelToCalc,yearsToCalc,converter_techs,vintage)
12458          * (accounting_converterStartup(indicator,nodesModelToCalc,converter_techs,vintage,"perRamp")
12459              + accounting_converterStartup(indicator,nodesModelToCalc,converter_techs,vintage,"perRampNeg")))
12460   
12461  * == storage ==
12462      + sum ((storage_techs(techs),vintage)
12463                  $(storage_availTech(nodesModelToCalc,yearsToCalc,storage_techs,vintage)
12464                      and accounting_storageUnits(indicator,nodesModelToCalc,storage_techs,vintage,"useAnnuity") = 0),
12465          storage_unitsBuild.l(nodesModelToCalc,yearsToCalc,storage_techs,vintage)
12466          * accounting_storageUnits(indicator,nodesModelToCalc,storage_techs,vintage,"perUnitBuild") )
12467   
12468      + sum ((years_a,storage_techs(techs),vintage)
12469                  $(storage_availTech(nodesModelToCalc,yearsToCalc,storage_techs,vintage)
12470                      and accounting_storageUnits(indicator,nodesModelToCalc,storage_techs,vintage,"useAnnuity") = 1
12471                      and years_a.val + accounting_storageUnits(indicator,nodesModelToCalc,storage_techs,vintage,"amorTime") > yearsToCalc.val
12472                      and years_a.val <= yearsToCalc.val ),
12473          storage_unitsBuild.l(nodesModelToCalc,years_a,storage_techs,vintage)
12474          * accounting_storageUnits(indicator,nodesModelToCalc,storage_techs,vintage,"perUnitBuild")
12475          * accounting_annuityFactor_storage(indicator,nodesModelToCalc,storage_techs,vintage) )
12476   
12477      + sum ((storage_techs(techs),vintage)
12478                  $storage_usedTech(nodesModelToCalc,yearsToCalc,storage_techs,vintage),
12479          storage_unitsDecom.l(nodesModelToCalc,yearsToCalc,storage_techs,vintage)
12480          * accounting_storageUnits(indicator,nodesModelToCalc,storage_techs,vintage,"perUnitDecom")
12481   
12482          + storage_unitsTotal.l(nodesModelToCalc,yearsToCalc,storage_techs,vintage)
12483          * accounting_storageUnits(indicator,nodesModelToCalc,storage_techs,vintage,"perUnitTotal") )
12484   
12485  * == transfer ==
12486      + sum ((linksModel,transfer_techs(techs),vintage)
12487                  $(transfer_availTech(linksModel,yearsToCalc,transfer_techs,vintage)
12488                      and linksModelToCalc(linksModel)
12489                      and transfer_incidenceModel(nodesModelToCalc,linksModel) <> 0
12490                      and accounting_transferLinks(indicator,linksModel,transfer_techs,vintage,"useAnnuity") = 0),
12491          0.5
12492          * transfer_linksBuild.l(linksModel,yearsToCalc,transfer_techs,vintage)
12493          * accounting_transferLinks(indicator,linksModel,transfer_techs,vintage,"perLinkBuild") )
12494   
12495      + sum ((linksModel,years_a,transfer_techs(techs),vintage)
12496                  $(transfer_availTech(linksModel,yearsToCalc,transfer_techs,vintage)
12497                      and linksModelToCalc(linksModel)
12498                      and transfer_incidenceModel(nodesModelToCalc,linksModel) <> 0
12499                      and accounting_transferLinks(indicator,linksModel,transfer_techs,vintage,"useAnnuity") = 1
12500                      and years_a.val + accounting_transferLinks(indicator,linksModel,transfer_techs,vintage,"amorTime") > yearsToCalc.val
12501                      and years_a.val <= yearsToCalc.val ),
12502          0.5
12503          * transfer_linksBuild.l(linksModel,years_a,transfer_techs,vintage)
12504          * accounting_transferLinks(indicator,linksModel,transfer_techs,vintage,"perLinkBuild")
12505          * accounting_annuityFactor_transferLink(indicator,linksModel,transfer_techs,vintage) )
12506   
12507      + sum ((linksModel,transfer_techs(techs),vintage,link_types)
12508                  $(transfer_availTech(linksModel,yearsToCalc,transfer_techs,vintage)
12509                      and linksModelToCalc(linksModel)
12510                      and transfer_incidenceModel(nodesModelToCalc,linksModel) <> 0
12511                      and accounting_transferPerLength(indicator,linksModel,transfer_techs,vintage,link_types,"useAnnuity") = 0 ),
12512          0.5
12513          * transfer_linksBuild.l(linksModel,yearsToCalc,transfer_techs,vintage)
12514          * transfer_lengthParam(linksModel,link_types,"length")
12515          * accounting_transferPerLength(indicator,linksModel,transfer_techs,vintage,link_types,"perLengthBuild") )
12516   
12517      + sum ((linksModel,years_a,transfer_techs(techs),vintage,link_types)
12518                  $(transfer_availTech(linksModel,yearsToCalc,transfer_techs,vintage)
12519                      and linksModelToCalc(linksModel)
12520                      and transfer_incidenceModel(nodesModelToCalc,linksModel) <> 0
12521                      and accounting_transferPerLength(indicator,linksModel,transfer_techs,vintage,link_types,"useAnnuity") = 1
12522                      and years_a.val + accounting_transferPerLength(indicator,linksModel,transfer_techs,vintage,link_types,"amorTime") > yearsToCalc.val
12523                      and years_a.val <= yearsToCalc.val ),
12524          0.5
12525          * transfer_linksBuild.l(linksModel,years_a,transfer_techs,vintage)
12526          * transfer_lengthParam(linksModel,link_types,"length")
12527          * accounting_transferPerLength(indicator,linksModel,transfer_techs,vintage,link_types,"perLengthBuild")
12528          * accounting_annuityFactor_transferPerLength(indicator,linksModel,transfer_techs,vintage,link_types) )
12529   
12530      + sum ((linksModel,transfer_techs(techs),vintage)
12531                  $(transfer_usedTech(linksModel,yearsToCalc,transfer_techs,vintage)
12532                      and linksModelToCalc(linksModel)
12533                      and transfer_incidenceModel(nodesModelToCalc,linksModel) <> 0 ),
12534          0.5
12535          * transfer_linksDecom.l(linksModel,yearsToCalc,transfer_techs,vintage)
12536          * accounting_transferLinks(indicator,linksModel,transfer_techs,vintage,"perLinkDecom")
12537   
12538          + 0.5
12539          * transfer_linksTotal.l(linksModel,yearsToCalc,transfer_techs,vintage)
12540          * accounting_transferLinks(indicator,linksModel,transfer_techs,vintage,"perLinkTotal")
12541   
12542          + 0.5
12543          * sum (link_types,
12544              transfer_linksDecom.l(linksModel,yearsToCalc,transfer_techs,vintage)
12545              * transfer_lengthParam(linksModel,link_types,"length")
12546              * accounting_transferPerLength(indicator,linksModel,transfer_techs,vintage,link_types,"perLengthDecom")
12547   
12548              + transfer_linksTotal.l(linksModel,yearsToCalc,transfer_techs,vintage)
12549              * transfer_lengthParam(linksModel,link_types,"length")
12550              * accounting_transferPerLength(indicator,linksModel,transfer_techs,vintage,link_types,"perLengthTotal"))
12551   
12552          + 0.5
12553          * sum (timeModelToCalc,
12554              transfer_flowAlong.l(timeModelToCalc,linksModel,yearsToCalc,transfer_techs,vintage)
12555              * timeLength(timeModelToCalc)
12556              * ( accounting_transferLinks(indicator,linksModel,transfer_techs,vintage,"perFlow")
12557                  + accounting_transferLinks(indicator,linksModel,transfer_techs,vintage,"perFlowAlong"))
12558   
12559              + transfer_flowAgainst.l(timeModelToCalc,linksModel,yearsToCalc,transfer_techs,vintage)
12560              * timeLength(timeModelToCalc)
12561              * ( accounting_transferLinks(indicator,linksModel,transfer_techs,vintage,"perFlow")
12562                  + accounting_transferLinks(indicator,linksModel,transfer_techs,vintage,"perFlowAgainst")))
12563   
12564          + 0.5
12565          * sum ((timeModelToCalc, link_types),
12566              transfer_flowAlong.l(timeModelToCalc,linksModel,yearsToCalc,transfer_techs,vintage)
12567              * timeLength(timeModelToCalc)
12568              * transfer_lengthParam(linksModel,link_types,"length")
12569              * (accounting_transferPerLength(indicator,linksModel,transfer_techs,vintage,link_types,"perFlow")
12570                  + accounting_transferPerLength(indicator,linksModel,transfer_techs,vintage,link_types,"perFlowAlong"))
12571   
12572              + transfer_flowAgainst.l(timeModelToCalc,linksModel,yearsToCalc,transfer_techs,vintage)
12573              * timeLength(timeModelToCalc)
12574              * transfer_lengthParam(linksModel,link_types,"length")
12575              * (accounting_transferPerLength(indicator,linksModel,transfer_techs,vintage,link_types,"perFlow")
12576                  + accounting_transferPerLength(indicator,linksModel,transfer_techs,vintage,link_types,"perFlowAgainst"))))
12577   
12578   
12579  * == sources / sinks ==
12580      + sum ((timeModelToCalc,sourcesink_techs(techs),commodity)
12581              $sourcesink_enabled(nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity),
12582          sourcesink_flow.l(timeModelToCalc,nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity)
12583          * timeLength(timeModelToCalc)
12584          * accounting_sourcesinkFlow(indicator,nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity,"perFlow"))
12585      ;
12586   
12587   
12588  * ==== full set of main indicators ====
12589   
12590  indicator_accounting(accNodesModel,accYears,indicator)
12591      $sum((accNodesModel_a,accYears_a,indicator_a)
12592              $compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a), 1)
12593      =
12594      + sum((accNodesModel_a,accYears_a,indicator_a)
12595              $(compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
12596                  and variableIndicators(accNodesModel_a,accYears_a,indicator_a)),
12597          compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
12598          * accounting_indicator.l(accNodesModel_a,accYears_a,indicator_a))
12599   
12600      + sum((accNodesModel_a,accYears_a,indicator_a)
12601              $(compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)),
12602          compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
12603          * (sum((nodesModelToCalc,yearsToCalc,techs)
12604                  $(sameas(accNodesModel_a, nodesModelToCalc)
12605                      and sameas(accYears_a, yearsToCalc)),
12606                  indicator_accounting_detailed(indicator_a,nodesModelToCalc,yearsToCalc,techs))))
12607      ;
12608   
12609  indicator_accounting_comp(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
12610      $compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
12611      =
12612          compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
12613          * accounting_indicator.l(accNodesModel_a,accYears_a,indicator_a)
12614              $variableIndicators(accNodesModel_a,accYears_a,indicator_a)
12615   
12616          + compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
12617          * (sum((nodesModelToCalc,yearsToCalc,techs)
12618                  $(sameas(accNodesModel_a, nodesModelToCalc)
12619                      and sameas(accYears_a, yearsToCalc)),
12620                  indicator_accounting_detailed(indicator_a,nodesModelToCalc,yearsToCalc,techs)))
12621      ;
12622   
12623  indicator_accounting_ref(accNodesModel,accYears,indicator)
12624      $accounting_indicator.l(accNodesModel,accYears,indicator)
12625      = accounting_indicator.l(accNodesModel,accYears,indicator);
12626   
12627  * ==== link-specific indicator accounting ====
12628   
12629  indicator_accounting_links(indicator,nodesModelToCalc,nodesModelToCalc_a,linksModelToCalc,yearsToCalc,techs)
12630      $(transfer_incidenceModel(nodesModelToCalc,linksModelToCalc) < 0
12631          and transfer_incidenceModel(nodesModelToCalc_a,linksModelToCalc) > 0)
12632      =
12633      sum ((transfer_techs(techs),vintage)
12634                  $(transfer_availTech(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
12635                      and accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"useAnnuity") = 0),
12636          transfer_linksBuild.l(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
12637          * accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"perLinkBuild") )
12638   
12639      + sum ((years_a,transfer_techs(techs),vintage)
12640                  $(transfer_availTech(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
12641                      and accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"useAnnuity") = 1
12642                      and years_a.val + accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"amorTime") > yearsToCalc.val
12643                      and years_a.val <= yearsToCalc.val ),
12644          transfer_linksBuild.l(linksModelToCalc,years_a,transfer_techs,vintage)
12645          * accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"perLinkBuild")
12646          * accounting_annuityFactor_transferLink(indicator,linksModelToCalc,transfer_techs,vintage) )
12647   
12648      + sum ((transfer_techs(techs),vintage,link_types)
12649                  $(transfer_availTech(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
12650                      and accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"useAnnuity") = 0 ),
12651          transfer_linksBuild.l(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
12652          * transfer_lengthParam(linksModelToCalc,link_types,"length")
12653          * accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"perLengthBuild") )
12654   
12655      + sum ((years_a,transfer_techs(techs),vintage,link_types)
12656                  $(transfer_availTech(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
12657                      and accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"useAnnuity") = 1
12658                      and years_a.val + accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"amorTime") > yearsToCalc.val
12659                      and years_a.val <= yearsToCalc.val ),
12660          transfer_linksBuild.l(linksModelToCalc,years_a,transfer_techs,vintage)
12661          * transfer_lengthParam(linksModelToCalc,link_types,"length")
12662          * accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"perLengthBuild")
12663          * accounting_annuityFactor_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types) )
12664   
12665      + sum ((transfer_techs(techs),vintage)
12666                  $(transfer_usedTech(linksModelToCalc,yearsToCalc,transfer_techs,vintage)),
12667          transfer_linksDecom.l(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
12668          * accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"perLinkDecom")
12669   
12670          + transfer_linksTotal.l(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
12671          * accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"perLinkTotal")
12672   
12673          + sum (link_types,
12674              transfer_linksDecom.l(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
12675              * transfer_lengthParam(linksModelToCalc,link_types,"length")
12676              * accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"perLengthDecom")
12677   
12678              + transfer_linksTotal.l(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
12679              * transfer_lengthParam(linksModelToCalc,link_types,"length")
12680              * accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"perLengthTotal"))
12681   
12682          + sum (timeModelToCalc,
12683              transfer_flowAlong.l(timeModelToCalc,linksModelToCalc,yearsToCalc,transfer_techs,vintage)
12684              * timeLength(timeModelToCalc)
12685              * ( accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"perFlow")
12686                  + accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"perFlowAlong"))
12687   
12688              + transfer_flowAgainst.l(timeModelToCalc,linksModelToCalc,yearsToCalc,transfer_techs,vintage)
12689              * timeLength(timeModelToCalc)
12690              * ( accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"perFlow")
12691                  + accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"perFlowAgainst")))
12692   
12693          + sum ((timeModelToCalc, link_types),
12694              transfer_flowAlong.l(timeModelToCalc,linksModelToCalc,yearsToCalc,transfer_techs,vintage)
12695              * timeLength(timeModelToCalc)
12696              * transfer_lengthParam(linksModelToCalc,link_types,"length")
12697              * (accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"perFlow")
12698                  + accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"perFlowAlong"))
12699   
12700              + transfer_flowAgainst.l(timeModelToCalc,linksModelToCalc,yearsToCalc,transfer_techs,vintage)
12701              * timeLength(timeModelToCalc)
12702              * transfer_lengthParam(linksModelToCalc,link_types,"length")
12703              * (accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"perFlow")
12704                  + accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"perFlowAgainst")))
12705      );
12706   
12707   
12708  * == converter capacities ==
12709   
12710  converter_ratedInput(converter_techs,vintage,commodity)
12711      $(converter_techParam(converter_techs,vintage,"lifeTime") > 0)
12712      = smin(activity$converter_usedAct(converter_techs,vintage,activity),
12713              converter_coefficient(converter_techs,vintage,activity,commodity,"coefficient"));
12714  converter_ratedInput(converter_techs,vintage,commodity)
12715      $(converter_ratedInput(converter_techs,vintage,commodity) > 0)
12716      = 0;
12717   
12718  converter_ratedOutput(converter_techs,vintage,commodity)
12719      $(converter_techParam(converter_techs,vintage,"lifeTime") > 0)
12720      = smax(activity$converter_usedAct(converter_techs,vintage,activity),
12721              converter_coefficient(converter_techs,vintage,activity,commodity,"coefficient"));
12722  converter_ratedOutput(converter_techs,vintage,commodity)
12723      $(converter_ratedOutput(converter_techs,vintage,commodity) < 0)
12724      = 0;
12725   
12726  converter_ratedOutput_min(nodesModelToCalc,years,converter_techs(techs),commodity)
12727      $sum(vintage$(converter_usedTech(nodesModelToCalc,years,converter_techs,vintage)
12728          and converter_ratedOutput(converter_techs,vintage,commodity)), 1)
12729      = smin(vintage$(converter_usedTech(nodesModelToCalc,years,converter_techs,vintage)
12730              and converter_ratedOutput(converter_techs,vintage,commodity)),
12731          converter_ratedOutput(converter_techs,vintage,commodity));
12732   
12733  converter_ratedOutput_max(nodesModelToCalc,years,converter_techs(techs),commodity)
12734      $sum(vintage$(converter_usedTech(nodesModelToCalc,years,converter_techs,vintage)
12735          and converter_ratedOutput(converter_techs,vintage,commodity)), 1)
12736      = smax(vintage$(converter_usedTech(nodesModelToCalc,years,converter_techs,vintage)
12737              and converter_ratedOutput(converter_techs,vintage,commodity)),
12738          converter_ratedOutput(converter_techs,vintage,commodity));
12739   
12740  converter_units_ext(map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,years),converter_techs(techs),vintage,"build")
12741      = converter_unitsBuild.l(nodesModelToCalc,years,converter_techs,vintage);
12742   
12743  converter_units_ext(map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,years),converter_techs(techs),vintage,"decom")
12744      = converter_unitsDecom.l(nodesModelToCalc,years,converter_techs,vintage);
12745   
12746  converter_units_ext(map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,years),converter_techs(techs),vintage,"total")
12747      = converter_unitsTotal.l(nodesModelToCalc,years,converter_techs,vintage);
12748   
12749  converter_caps_ext(map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,years),converter_techs(techs),vintage,commodity,capType)
12750      $(converter_ratedOutput(converter_techs,vintage,commodity))
12751      = converter_units_ext(accNodesModel,nodesModelToCalc,accYears,years,techs,vintage,capType)
12752          * converter_ratedOutput(converter_techs,vintage,commodity);
12753   
12754  converter_caps_ext(map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,years),converter_techs(techs),vintage,commodity,"lowerLimit")
12755      $(converter_usedTech(nodesModelToCalc,years,converter_techs,vintage)
12756          and converter_capacityParam(nodesModelToCalc,years,converter_techs,"unitsLowerLimit") > 0
12757          and converter_ratedOutput_min(nodesModelToCalc,years,converter_techs,commodity))
12758      = converter_capacityParam(nodesModelToCalc,years,converter_techs,"unitsLowerLimit")
12759          * converter_ratedOutput_min(nodesModelToCalc,years,converter_techs,commodity);
12760   
12761  converter_caps_ext(map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,years),converter_techs(techs),vintage,commodity,"upperLimit")
12762      $(converter_usedTech(nodesModelToCalc,years,converter_techs,vintage)
12763          and converter_capacityParam(nodesModelToCalc,years,converter_techs,"unitsUpperLimit") < inf
12764          and converter_ratedOutput_min(nodesModelToCalc,years,converter_techs,commodity))
12765      = converter_capacityParam(nodesModelToCalc,years,converter_techs,"unitsUpperLimit")
12766          * converter_ratedOutput_max(nodesModelToCalc,years,converter_techs,commodity);
12767   
12768  converter_caps(accNodesModel,accYears,converter_techs(techs),commodity,capType)
12769      = sum((nodesModelToCalc,years,vintage)
12770              $(map_accNodesPostCalc(accNodesModel,nodesModelToCalc)
12771                  and map_accYearsPostCalc(accYears,years)),
12772          converter_caps_ext(accNodesModel,nodesModelToCalc,accYears,years,converter_techs,vintage,commodity,capType));
12773  option clear = converter_caps_ext;
12774   
12775  converter_units(accNodesModel,accYears,converter_techs(techs),vintage,capType)
12776      = sum((nodesModelToCalc,years)
12777              $(map_accNodesPostCalc(accNodesModel,nodesModelToCalc)
12778                  and map_accYearsPostCalc(accYears,years)),
12779          converter_units_ext(accNodesModel,nodesModelToCalc,accYears,years,converter_techs,vintage,capType));
12780  option clear = converter_units_ext;
12781   
12782   
12783  * ==== transfer capacities ====
12784   
12785  max_transfer_coefficient(transfer_techs(techs),commodity)
12786          $(smax(vintage, transfer_coefficient(transfer_techs,vintage,commodity,"coefficient")) > 0)
12787          = smax(vintage, transfer_coefficient(transfer_techs,vintage,commodity,"coefficient"));
12788   
12789  min_transfer_coefficient(transfer_techs(techs),commodity)
12790          $(smin(vintage, transfer_coefficient(transfer_techs,vintage,commodity,"coefficient")) > 0)
12791          = smin(vintage, transfer_coefficient(transfer_techs,vintage,commodity,"coefficient"));
12792   
12793  transfer_usedStartEnd(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,years,transfer_techs)
12794      $(transfer_incidenceModel(nodesModelToCalc_start,linksModel) < 0
12795          and transfer_incidenceModel(nodesModelToCalc_end,linksModel) > 0
12796          and sum(vintage$transfer_usedTech(linksModel,years,transfer_techs,vintage), 1))
12797      = yes;
12798   
12799  transfer_links(linksModel,years,transfer_techs,vintage,"build")
12800      = transfer_linksBuild.l(linksModel,years,transfer_techs,vintage);
12801   
12802  transfer_links(linksModel,years,transfer_techs,vintage,"decom")
12803      = transfer_linksDecom.l(linksModel,years,transfer_techs,vintage);
12804   
12805  transfer_links(linksModel,years,transfer_techs,vintage,"total")
12806      = transfer_linksTotal.l(linksModel,years,transfer_techs,vintage);
12807   
12808  transfer_caps(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,years,transfer_techs(techs),commodity,capType)
12809      $(transfer_usedStartEnd(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,years,transfer_techs)
12810          and sum(vintage$(transfer_usedTech(linksModel,years,transfer_techs,vintage)
12811                              and transfer_coefficient(transfer_techs,vintage,commodity,"coefficient")), 1))
12812      = sum(vintage,
12813          transfer_links(linksModel,years,transfer_techs,vintage,capType)
12814          * transfer_coefficient(transfer_techs,vintage,commodity,"coefficient"));
12815   
12816  transfer_caps(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,years,transfer_techs(techs),commodity,"lowerLimit")
12817      $(transfer_usedStartEnd(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,years,transfer_techs)
12818          and sum(vintage$(transfer_usedTech(linksModel,years,transfer_techs,vintage)
12819                              and transfer_coefficient(transfer_techs,vintage,commodity,"coefficient")), 1))
12820      = transfer_linksParam(linksModel,years,transfer_techs,'linksLowerLimit')
12821          * min_transfer_coefficient(transfer_techs,commodity);
12822   
12823  transfer_caps(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,years,transfer_techs(techs),commodity,"upperLimit")
12824      $(transfer_usedStartEnd(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,years,transfer_techs)
12825          and sum(vintage$(transfer_usedTech(linksModel,years,transfer_techs,vintage)
12826                              and transfer_coefficient(transfer_techs,vintage,commodity,"coefficient")), 1))
12827      = transfer_linksParam(linksModel,years,transfer_techs,'linksUpperLimit')
12828          * max_transfer_coefficient(transfer_techs,commodity);
12829   
12830   
12831  * ==== transfer flows ====
12832   
12833  transfer_flows(timeModelToCalc,nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs(techs),commodity)
12834      $transfer_usedStartEnd(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs)
12835      = sum(vintage,
12836          ( transfer_flowAlong.l(timeModelToCalc,linksModel,yearsToCalc,transfer_techs,vintage)
12837              - transfer_flowAgainst.l(timeModelToCalc,linksModel,yearsToCalc,transfer_techs,vintage) )
12838          * timeLength(timeModelToCalc)
12839          * transfer_coefficient(transfer_techs,vintage,commodity,"coefficient"));
12840   
12841  transfer_flows_annual(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs(techs),commodity,"netto")
12842      $transfer_usedStartEnd(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs)
12843      = sum(timeModelToCalc,
12844          transfer_flows(timeModelToCalc,nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs,commodity));
12845   
12846  transfer_flows_annual(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs(techs),commodity,"positive")
12847      $transfer_usedStartEnd(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs)
12848      = sum(timeModelToCalc
12849              $(transfer_flows(timeModelToCalc,nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs,commodity) > 0),
12850          transfer_flows(timeModelToCalc,nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs,commodity));
12851   
12852  transfer_flows_annual(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs(techs),commodity,"negative")
12853      $transfer_usedStartEnd(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs)
12854      = sum(timeModelToCalc
12855              $(transfer_flows(timeModelToCalc,nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs,commodity) < 0),
12856          transfer_flows(timeModelToCalc,nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs,commodity));
12857   
12858  transfer_flows_annual(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs(techs),commodity,"brutto")
12859      $transfer_usedStartEnd(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs)
12860      = transfer_flows_annual(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs,commodity,"positive")
12861          - transfer_flows_annual(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs,commodity,"negative");
12862   
12863  transfer_flows_annual(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs(techs),commodity,"flh")
12864      $(transfer_usedStartEnd(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs)
12865          and transfer_flows_annual(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs,commodity,"brutto") > 0
12866          and transfer_caps(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs,commodity,"total") > 0)
12867      = transfer_flows_annual(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs,commodity,"brutto")
12868          / transfer_caps(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs,commodity,"total");
12869   
12870  transfer_losses(timeModelToCalc,nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs(techs),commodity)
12871      $(transfer_usedStartEnd(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs)
12872          and (sum(vintage$transfer_coefPerFlow(transfer_techs,vintage,commodity,"coefPerFlow"), 1)
12873              or sum((vintage, link_types)$transfer_coefPerLength(transfer_techs,vintage,commodity,link_types,"coefPerLength"), 1)))
12874      = -1 * abs(sum(vintage,
12875          ( transfer_flowAlong.l(timeModelToCalc,linksModel,yearsToCalc,transfer_techs,vintage)
12876              - transfer_flowAgainst.l(timeModelToCalc,linksModel,yearsToCalc,transfer_techs,vintage) )
12877          * ( transfer_coefPerFlow(transfer_techs,vintage,commodity,"coefPerFlow")
12878              + sum(link_types,
12879                  transfer_coefPerLength(transfer_techs,vintage,commodity,link_types,"coefPerLength")
12880                  * transfer_lengthParam(linksModel,link_types,"length")))))
12881          * timeLength(timeModelToCalc);
12882   
12883  transfer_losses_annual(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs(techs),commodity,"netto")
12884      $(transfer_usedStartEnd(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs)
12885          and (sum(vintage$transfer_coefPerFlow(transfer_techs,vintage,commodity,"coefPerFlow"), 1)
12886              or sum((vintage, link_types)$transfer_coefPerLength(transfer_techs,vintage,commodity,link_types,"coefPerLength"), 1)))
12887      = sum(timeModelToCalc,
12888          transfer_losses(timeModelToCalc,nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs,commodity));
12889   
12890   
12891  * ==== storage capacities ====
12892   
12893  storage_size_max(nodesModelToCalc,years,storage_techs(techs),commodity)
12894      $sum(vintage$(storage_usedTech(nodesModelToCalc,years,storage_techs,vintage)
12895              and storage_usedCom(storage_techs,vintage,commodity)
12896              and storage_sizeParam(storage_techs,vintage,commodity,"size")), 1)
12897      = smax(vintage$(storage_usedTech(nodesModelToCalc,years,storage_techs,vintage)
12898              and storage_usedCom(storage_techs,vintage,commodity)
12899              and storage_sizeParam(storage_techs,vintage,commodity,"size")),
12900          storage_sizeParam(storage_techs,vintage,commodity,"size"));
12901   
12902  storage_size_min(nodesModelToCalc,years,storage_techs(techs),commodity)
12903      $sum(vintage$(storage_usedTech(nodesModelToCalc,years,storage_techs,vintage)
12904              and storage_usedCom(storage_techs,vintage,commodity)
12905              and storage_sizeParam(storage_techs,vintage,commodity,"size")), 1)
12906      = smin(vintage$(storage_usedTech(nodesModelToCalc,years,storage_techs,vintage)
12907              and storage_usedCom(storage_techs,vintage,commodity)
12908              and storage_sizeParam(storage_techs,vintage,commodity,"size")),
12909          storage_sizeParam(storage_techs,vintage,commodity,"size"));
12910   
12911  storage_units_ext(map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,years),storage_techs(techs),vintage,"build")
12912      $storage_usedTech(nodesModelToCalc,years,storage_techs,vintage)
12913      = storage_unitsBuild.l(nodesModelToCalc,years,storage_techs,vintage);
12914   
12915  storage_units_ext(map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,years),storage_techs(techs),vintage,"decom")
12916      $storage_usedTech(nodesModelToCalc,years,storage_techs,vintage)
12917      = storage_unitsDecom.l(nodesModelToCalc,years,storage_techs,vintage);
12918   
12919  storage_units_ext(map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,years),storage_techs(techs),vintage,"total")
12920      $storage_usedTech(nodesModelToCalc,years,storage_techs,vintage)
12921      = storage_unitsTotal.l(nodesModelToCalc,years,storage_techs,vintage);
12922   
12923  storage_caps_ext(map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,years),storage_techs(techs),vintage,commodity,capType)
12924      $storage_sizeParam(storage_techs,vintage,commodity,"size")
12925      = storage_units_ext(accNodesModel,nodesModelToCalc,accYears,years,storage_techs,vintage,capType)
12926          * storage_sizeParam(storage_techs,vintage,commodity,"size");
12927   
12928  storage_caps_ext(map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,years),storage_techs(techs),vintage,commodity,"lowerLimit")
12929      $(storage_usedTech(nodesModelToCalc,years,storage_techs,vintage)
12930          and storage_reservoirParam(nodesModelToCalc,years,storage_techs,"unitsLowerLimit") > 0
12931          and storage_size_min(nodesModelToCalc,years,storage_techs,commodity))
12932      = storage_reservoirParam(nodesModelToCalc,years,storage_techs,"unitsLowerLimit")
12933          * storage_size_min(nodesModelToCalc,years,storage_techs,commodity);
12934   
12935  storage_caps_ext(map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,years),storage_techs(techs),vintage,commodity,"upperLimit")
12936      $(storage_usedTech(nodesModelToCalc,years,storage_techs,vintage)
12937          and storage_reservoirParam(nodesModelToCalc,years,storage_techs,"unitsUpperLimit") < inf
12938          and storage_size_max(nodesModelToCalc,years,storage_techs,commodity))
12939      = storage_reservoirParam(nodesModelToCalc,years,storage_techs,"unitsUpperLimit")
12940          * storage_size_max(nodesModelToCalc,years,storage_techs,commodity);
12941   
12942  storage_caps_ext(map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,years),storage_techs(techs),vintage,commodity,"total_degraded")
12943      $(storage_usedCom(storage_techs,vintage,commodity)
12944          and (storage_techParam(storage_techs,vintage,"annualDegradation") > 0
12945               or storage_techParam(storage_techs,vintage,"usageDegradation")))
12946      = sum((degradation_states,yearsCom), (storage_degradationParam(storage_techs,vintage,degradation_states,"remainingCapacity")
12947                                      - (years.val - yearsCom.val) * storage_techParam(storage_techs,vintage,"annualDegradation"))
12948                                      * storage_unitsStateTracker.l(nodesModelToCalc,years,yearsCom,storage_techs,vintage,degradation_states)
12949                                      * storage_sizeParam(storage_techs,vintage,commodity,"size"));
12950   
12951  storage_caps(accNodesModel,accYears,storage_techs(techs),commodity,capType)
12952      = sum((nodesModelToCalc,years,vintage)
12953              $(map_accNodesPostCalc(accNodesModel,nodesModelToCalc)
12954                  and map_accYearsPostCalc(accYears,years)),
12955          storage_caps_ext(accNodesModel,nodesModelToCalc,accYears,years,storage_techs,vintage,commodity,capType));
12956  option clear = storage_caps_ext;
12957   
12958  storage_units(accNodesModel,accYears,storage_techs(techs),vintage,capType)
12959      = sum((nodesModelToCalc,years)
12960              $(map_accNodesPostCalc(accNodesModel,nodesModelToCalc)
12961                  and map_accYearsPostCalc(accYears,years)),
12962          storage_units_ext(accNodesModel,nodesModelToCalc,accYears,years,storage_techs,vintage,capType));
12963  option clear = storage_units_ext;
12964   
12965   
12966  * ==== storage levels and flows ====
12967   
12968  storage_flows_ext(timeModelToCalc,map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,yearsToCalc),storage_techs(techs),vintage,commodity)
12969      $(storage_usedTech(nodesModelToCalc,yearsToCalc,storage_techs,vintage) and balance_techComm(storage_techs,commodity))
12970      = storage_level.l(timeModelToCalc,nodesModelToCalc,yearsToCalc,storage_techs,vintage,commodity)
12971          - storage_level.l(timeModelToCalc--1,nodesModelToCalc,yearsToCalc,storage_techs,vintage,commodity)
12973      + storage_losses.l(timeModelToCalc,nodesModelToCalc,yearsToCalc,storage_techs,vintage,commodity)
12974          * timeLength(timeModelToCalc)
12976      ;
12977   
12978  storage_flows(timeModelToCalc,accNodesModel,accYears,storage_techs(techs),commodity)
12979      = sum((nodesModelToCalc,yearsToCalc,vintage)
12980              $(storage_usedTech(nodesModelToCalc,yearsToCalc,storage_techs,vintage) and balance_techComm(storage_techs,commodity)),
12981          storage_flows_ext(timeModelToCalc,accNodesModel,nodesModelToCalc,accYears,yearsToCalc,storage_techs,vintage,commodity));
12982  option clear = storage_flows_ext;
12983   
12984  storage_level_out_ext(timeModelToCalc,map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,yearsToCalc),storage_techs(techs),vintage,commodity)
12985      $(storage_usedTech(nodesModelToCalc,yearsToCalc,storage_techs,vintage) and balance_techComm(storage_techs,commodity))
12986      = storage_level.l(timeModelToCalc,nodesModelToCalc,yearsToCalc,storage_techs,vintage,commodity);
12987   
12988  storage_level_out(timeModelToCalc,accNodesModel,accYears,storage_techs(techs),commodity)
12989      = sum((nodesModelToCalc,yearsToCalc,vintage)
12990              $(storage_usedTech(nodesModelToCalc,yearsToCalc,storage_techs,vintage) and balance_techComm(storage_techs,commodity)),
12991          storage_level_out_ext(timeModelToCalc,accNodesModel,nodesModelToCalc,accYears,yearsToCalc,storage_techs,vintage,commodity));
12992  option clear = storage_level_out_ext;
12993   
12994  storage_flows_annual(accNodesModel,accYears,storage_techs(techs),commodity,"netto")
12995      = sum(timeModelToCalc,
12996          storage_flows(timeModelToCalc,accNodesModel,accYears,storage_techs,commodity));
12997   
12998  storage_flows_annual(accNodesModel,accYears,storage_techs(techs),commodity,"positive")
12999      = sum(timeModelToCalc
13000              $(storage_flows(timeModelToCalc,accNodesModel,accYears,storage_techs,commodity) > 0),
13001          storage_flows(timeModelToCalc,accNodesModel,accYears,storage_techs,commodity));
13002   
13003  storage_flows_annual(accNodesModel,accYears,storage_techs(techs),commodity,"negative")
13004      = sum(timeModelToCalc
13005              $(storage_flows(timeModelToCalc,accNodesModel,accYears,storage_techs,commodity) < 0),
13006          storage_flows(timeModelToCalc,accNodesModel,accYears,storage_techs,commodity));
13007   
13008  storage_flows_annual(accNodesModel,accYears,storage_techs(techs),commodity,"brutto")
13009      = storage_flows_annual(accNodesModel,accYears,storage_techs,commodity,"positive")
13010          + storage_flows_annual(accNodesModel,accYears,storage_techs,commodity,"negative");
13011   
13012  storage_flows_annual(accNodesModel,accYears,storage_techs(techs),commodity,"flh")
13013      $(storage_flows_annual(accNodesModel,accYears,storage_techs,commodity,"brutto") > 0
13014          and storage_caps(accNodesModel,accYears,storage_techs,commodity,"total") > 0)
13015      = storage_flows_annual(accNodesModel,accYears,storage_techs,commodity,"brutto")
13016          / storage_caps(accNodesModel,accYears,storage_techs,commodity,"total");
13017   
13018  storage_losses_out(timeModelToCalc,accNodesModel,accYears,storage_techs(techs),commodity)
13019      = sum((nodesModelToCalc,yearsToCalc,vintage)
13020              $(storage_losses.l(timeModelToCalc,nodesModelToCalc,yearsToCalc,storage_techs,vintage,commodity)
13021                  and map_accNodesPostCalc(accNodesModel,nodesModelToCalc)
13022                  and map_accYearsPostCalc(accYears,yearsToCalc)),
13023          storage_losses.l(timeModelToCalc,nodesModelToCalc,yearsToCalc,storage_techs,vintage,commodity)
13024          * timeLength(timeModelToCalc));
13025   
13026  storage_losses_annual(accNodesModel,accYears,storage_techs(techs),commodity,"netto")
13027      = sum(timeModelToCalc,
13028          storage_losses_out(timeModelToCalc,accNodesModel,accYears,storage_techs,commodity));
13029   
13030   
13031  * == commodity balance ==
13032   
13033  commodity_balance_ext(timeModelToCalc,map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,yearsToCalc),converter_techs(techs),vintage,commodity)
13034      $(converter_usedTech(nodesModelToCalc,yearsToCalc,converter_techs,vintage)
13035          and balance_usedConverter(nodesModelToCalc,yearsToCalc,commodity))
13036      = sum((activity)
13037              $(converter_coefficientProfile(timeModelToCalc,nodesModelToCalc,yearsToCalc,converter_techs,vintage,activity,commodity)),
13038          converter_activity.l(timeModelToCalc,nodesModelToCalc,yearsToCalc,converter_techs,vintage,activity)
13039              * timeLength(timeModelToCalc)
13040              * converter_coefficientProfile(timeModelToCalc,nodesModelToCalc,yearsToCalc,converter_techs,vintage,activity,commodity)
13041          + converter_unitsUsingActivity_MIP.l(timeModelToCalc,nodesModelToCalc,yearsToCalc,converter_techs,vintage,activity)
13042              * timeLength(timeModelToCalc)
13043              * converter_coefficient(converter_techs,vintage,activity,commodity,"constant"));
13044   
13045  commodity_balance_ext(timeModelToCalc,map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,yearsToCalc),storage_techs(techs),vintage,commodity)
13046      $(storage_usedTech(nodesModelToCalc,yearsToCalc,storage_techs,vintage)
13047          and storage_sizeParam(storage_techs,vintage,commodity,"size"))
13048      = commodity_balance_ext(timeModelToCalc,accNodesModel,nodesModelToCalc,accYears,yearsToCalc,storage_techs,vintage,commodity)
13049      + storage_level.l(timeModelToCalc--1,nodesModelToCalc,yearsToCalc,storage_techs,vintage,commodity)
13050          - storage_level.l(timeModelToCalc,nodesModelToCalc,yearsToCalc,storage_techs,vintage,commodity)
13051      - storage_losses.l(timeModelToCalc,nodesModelToCalc,yearsToCalc,storage_techs,vintage,commodity)
13052      * timeLength(timeModelToCalc);
13053   
13054  commodity_balance_ext(timeModelToCalc,map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,yearsToCalc),sourcesink_techs(techs),vintage,commodity)
13055      $(sourcesink_enabled(nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity)
13056          and sameas(yearsToCalc,vintage))
13057      = commodity_balance_ext(timeModelToCalc,accNodesModel,nodesModelToCalc,accYears,yearsToCalc,sourcesink_techs,vintage,commodity)
13058      + sourcesink_flow.l(timeModelToCalc,nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity)
13059      * timeLength(timeModelToCalc);
13060   
13061  commodity_balance_ext(timeModelToCalc,map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,yearsToCalc),transfer_techs(techs),vintage,commodity)
13062      $sum((linksModel)
13063          $(transfer_incidenceModel(nodesModelToCalc,linksModel)
13064                  and transfer_usedTech(linksModel,yearsToCalc,transfer_techs,vintage)
13065                  and transfer_coefficient(transfer_techs,vintage,commodity,"coefficient")), 1)
13066      = commodity_balance_ext(timeModelToCalc,accNodesModel,nodesModelToCalc,accYears,yearsToCalc,transfer_techs,vintage,commodity)
13067      + sum((linksModel)
13068              $(transfer_incidenceModel(nodesModelToCalc,linksModel)
13069                  and transfer_usedTech(linksModel,yearsToCalc,transfer_techs,vintage)
13070                  and transfer_coefficient(transfer_techs,vintage,commodity,"coefficient")),
13071   
13072              (transfer_flowAlong.l(timeModelToCalc,linksModel,yearsToCalc,transfer_techs,vintage)
13073                      $(transfer_incidenceModel(nodesModelToCalc,linksModel) > 0)
13074                + transfer_flowAgainst.l(timeModelToCalc,linksModel,yearsToCalc,transfer_techs,vintage)
13075                      $(transfer_incidenceModel(nodesModelToCalc,linksModel) < 0))
13076              * timeLength(timeModelToCalc)
13077              * transfer_coefficient(transfer_techs,vintage,commodity,"coefficient")
13078   
13079              - (transfer_flowAlong.l(timeModelToCalc,linksModel,yearsToCalc,transfer_techs,vintage)
13080                      $(transfer_incidenceModel(nodesModelToCalc,linksModel) < 0)
13081                + transfer_flowAgainst.l(timeModelToCalc,linksModel,yearsToCalc,transfer_techs,vintage)
13082                      $(transfer_incidenceModel(nodesModelToCalc,linksModel) > 0))
13083              * timeLength(timeModelToCalc)
13084              * transfer_coefficient(transfer_techs,vintage,commodity,"coefficient")
13085   
13086              + 0.5 * ((transfer_flowAlong.l(timeModelToCalc,linksModel,yearsToCalc,transfer_techs,vintage)
13087                          $(transfer_incidenceModel(nodesModelToCalc,linksModel) <> 0)
13088                      + transfer_flowAgainst.l(timeModelToCalc,linksModel,yearsToCalc,transfer_techs,vintage)
13089                          $(transfer_incidenceModel(nodesModelToCalc,linksModel) <> 0))
13090                      * timeLength(timeModelToCalc)
13091                      * ( transfer_coefPerFlow(transfer_techs,vintage,commodity,"coefPerFlow")
13092                          + sum(link_types,
13093                              transfer_coefPerLength(transfer_techs,vintage,commodity,link_types,"coefPerLength")
13094                              * transfer_lengthParam(linksModel,link_types,"length")))))
13095      ;
13096   
13097  commodity_balance(timeModelToCalc,accNodesModel,accYears,balance_techComm(techs,commodity))
13098      = sum((nodesModelToCalc,yearsToCalc,vintage)
13099              $(commodity_balance_ext(timeModelToCalc,accNodesModel,nodesModelToCalc,accYears,yearsToCalc,techs,vintage,commodity)
13100                  and map_accNodesPostCalc(accNodesModel,nodesModelToCalc)
13101                  and map_accYearsPostCalc(accYears,yearsToCalc)),
13102          commodity_balance_ext(timeModelToCalc,accNodesModel,nodesModelToCalc,accYears,yearsToCalc,techs,vintage,commodity));
13103  option clear = commodity_balance_ext;
13104   
13105   
13106  * ==== annual commodity sums ====
13107   
13108  commodity_balance_annual(accNodesModel,accYears,techs,commodity,"netto")
13109      = sum(timeModelToCalc,
13110          commodity_balance(timeModelToCalc,accNodesModel,accYears,techs,commodity));
13111   
13112  commodity_balance_annual(accNodesModel,accYears,techs,commodity,"positive")
13113      = sum(timeModelToCalc
13114              $(commodity_balance(timeModelToCalc,accNodesModel,accYears,techs,commodity) > 0),
13115          commodity_balance(timeModelToCalc,accNodesModel,accYears,techs,commodity));
13116   
13117  commodity_balance_annual(accNodesModel,accYears,techs,commodity,"negative")
13118      = sum(timeModelToCalc
13119              $(commodity_balance(timeModelToCalc,accNodesModel,accYears,techs,commodity) < 0),
13120          commodity_balance(timeModelToCalc,accNodesModel,accYears,techs,commodity));
13121   
13122  commodity_balance_annual(accNodesModel,accYears,techs,commodity,"brutto")
13123      = commodity_balance_annual(accNodesModel,accYears,techs,commodity,"positive")
13124          - commodity_balance_annual(accNodesModel,accYears,techs,commodity,"negative");
13125   
13126  commodity_balance_annual(accNodesModel,accYears,techs,commodity,"flh")
13127      $(commodity_balance_annual(accNodesModel,accYears,techs,commodity,"brutto") > 0
13128          and converter_caps(accNodesModel,accYears,techs,commodity,"total") > 0 )
13129      = commodity_balance_annual(accNodesModel,accYears,techs,commodity,"brutto")
13130          / converter_caps(accNodesModel,accYears,techs,commodity,"total");
13131   
13132   
13133  * ==== marginal information ====
13134   
13135  marginals_balance(timeModelToCalc,nodesModelToCalc,yearsToCalc,commodity)
13136    $balance_usedBalance(nodesModelToCalc,yearsToCalc,commodity)
13137    =
13138    Eq_balance_commodities.m(timeModelToCalc,nodesModelToCalc,yearsToCalc,commodity);
13139   
13140  marginals_sourcesink_profile(timeModelToCalc,nodesModelToCalc,yearsToCalc,sourcesink_techs(techs),commodity)
13141      $( sourcesink_flow.m(timeModelToCalc,nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity) <> 0 )
13142      =
13143      sourcesink_flow.m(timeModelToCalc,nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity);
13144   
13145  marginals_sourcesink_sum(nodesModelToCalc,yearsToCalc,sourcesink_techs(techs),commodity)
13146      $( ( Eq_sourcesink_useLowerSum.m(nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity)
13147          + Eq_sourcesink_useUpperSum.m(nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity)
13148          + Eq_sourcesink_useFixedSum.m(nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity) ) <> eps )
13149      =
13150      ( Eq_sourcesink_useLowerSum.m(nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity)
13151      + Eq_sourcesink_useUpperSum.m(nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity)
13152      + Eq_sourcesink_useFixedSum.m(nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity) );
13153   
13154  marginals_indicator_bounds(accNodesModel,accYears,indicator)
13155      $( accounting_indicator.m(accNodesModel,accYears,indicator) <> 0 )
13156      =
13157      accounting_indicator.m(accNodesModel,accYears,indicator);
13158   
13159   
13160  * ==== R2A postcalc information ====
13161   
13163   
13164   
13165  * ==== round profiles to reduce size of gdx ====
13166   
13168  commodity_balance(timeModelToCalc,accNodesModel,accYears,techs,commodity)
13169      $commodity_balance(timeModelToCalc,accNodesModel,accYears,techs,commodity)
13170      = round(commodity_balance(timeModelToCalc,accNodesModel,accYears,techs,commodity), 6);
13171   
13172  transfer_flows(timeModelToCalc,nodesModelToCalc,nodesModelToCalc_a,linksModel,yearsToCalc,transfer_techs,commodity)
13173      $transfer_flows(timeModelToCalc,nodesModelToCalc,nodesModelToCalc_a,linksModel,yearsToCalc,transfer_techs,commodity)
13174      = round(transfer_flows(timeModelToCalc,nodesModelToCalc,nodesModelToCalc_a,linksModel,yearsToCalc,transfer_techs,commodity), 6);
13175   
13176  transfer_losses(timeModelToCalc,nodesModelToCalc,nodesModelToCalc_a,linksModel,yearsToCalc,transfer_techs,commodity)
13177      $transfer_losses(timeModelToCalc,nodesModelToCalc,nodesModelToCalc_a,linksModel,yearsToCalc,transfer_techs,commodity)
13178      = round(transfer_losses(timeModelToCalc,nodesModelToCalc,nodesModelToCalc_a,linksModel,yearsToCalc,transfer_techs,commodity), 6);
13179   
13180  storage_flows(timeModelToCalc,accNodesModel,accYears,storage_techs,commodity)
13181      $storage_flows(timeModelToCalc,accNodesModel,accYears,storage_techs,commodity)
13182      = round(storage_flows(timeModelToCalc,accNodesModel,accYears,storage_techs,commodity), 6);
13183   
13184  storage_level_out(timeModelToCalc,accNodesModel,accYears,storage_techs,commodity)
13185      $storage_level_out(timeModelToCalc,accNodesModel,accYears,storage_techs,commodity)
13186      = round(storage_level_out(timeModelToCalc,accNodesModel,accYears,storage_techs,commodity), 6);
13187   
13188  marginals_balance(timeModelToCalc,nodesModelToCalc,yearsToCalc,commodity)
13189      $marginals_balance(timeModelToCalc,nodesModelToCalc,yearsToCalc,commodity)
13190      = round(marginals_balance(timeModelToCalc,nodesModelToCalc,yearsToCalc,commodity), 6);
13191   
13192  marginals_sourcesink_profile(timeModelToCalc,nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity)
13193      $marginals_sourcesink_profile(timeModelToCalc,nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity)
13194      = round(marginals_sourcesink_profile(timeModelToCalc,nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity), 6);
13196   
INCLUDE    C:\Local\REMix\framework\remix\framework\model\source\postcalc\writegdx.gms
13199  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
13200  * SPDX-License-Identifier: BSD-3-Clause
13201   
13204   
13205  execute_unload "C:\Local\REMix\remix_nz\output\will\02-battery-overnight_2020-2035-2050\result\02-battery-overnight_2020-2035-2050.gdx"
13206      metadata
13207      timeModel
13208      timeModelToCalc
13209      nodesModel
13210      linksModel
13211      indicator
13212      commodity
13213      techs
13214      accNodesModel
13215      accYears
13216   
13217      map_nodesModel
13218      map_linksModel
13219      map_nodesAccounting
13220   
13221      indicator_accounting
13222      indicator_accounting_ref
13223      indicator_accounting_comp
13224      indicator_accounting_detailed
13225      indicator_accounting_links
13226   
13227      converter_caps
13228      converter_units
13230   
13231      transfer_caps
13232      transfer_links
13233      transfer_flows
13234      transfer_flows_annual
13235      transfer_losses
13236      transfer_losses_annual
13237   
13238      storage_caps
13239      storage_units
13240      storage_flows
13241      storage_level_out
13242      storage_flows_annual
13243      storage_losses_out
13244      storage_losses_annual
13246   
13247      commodity_balance
13248      commodity_balance_annual
13249   
13250      marginals_balance
13251      marginals_sourcesink_profile
13252      marginals_sourcesink_sum
13253      marginals_indicator_bounds
13254   
13256      ;
GAMS 40.4.0  d540b52e Oct 3, 2022           WEX-WEI x86 64bit/MS Windows - 03/13/24 17:58:39 Page 2
G e n e r a l   A l g e b r a i c   M o d e l i n g   S y s t e m
Include File Summary


   SEQ   GLOBAL TYPE      PARENT   LOCAL  FILENAME

     1        1 INPUT          0       0  C:\Local\REMix\framework\remix\framework\model\run_remix.gms
     2       13 IF DEXIST      1      13  C:\Local\REMix\remix_nz\output\will\02-battery-overnight_2020-2035-2050\data\
     3       16 INCLUDE        1      16  .C:\Local\REMix\framework\remix\framework\model\source\metadata.gms
     4       25 CALL           3       9  .printf "remix_version \"0.9.7\"\n" > c:\Local\REMix\remix_nz\process\225b\\metadata
     5       26 CALL           3      10  .printf "gams_version \"40.4.0\"\n" >> c:\Local\REMix\remix_nz\process\225b\\metadata
     6       27 CALL           3      11  .printf "timestamp \"03/13/24 17:58:39\"\n" >> c:\Local\REMix\remix_nz\process\225b\\metadata
     7       29 CALL           3      13  .printf "framework_path " >> c:\Local\REMix\remix_nz\process\225b\\metadata
     8       31 CALL           3      15  .cd C:\Local\REMix\framework\remix\framework\model\source && cd| sed "s/^/\"/;s/$/\"/" >> c:\Local\REMix\remix_nz\process\225b\\metadata
     9       33 CALL           3      19  .printf "\n" >> c:\Local\REMix\remix_nz\process\225b\\metadata
    10       34 CALL           3      20  .printf "framework_hash " >> c:\Local\REMix\remix_nz\process\225b\\metadata
    11       36 CALL           3      22  .cd C:\Local\REMix\framework\remix\framework\model\source && git rev-parse HEAD >nul 2>&1 && git rev-parse HEAD >> c:\Local\REMix\remix_nz\process\225b\\metadata
    12       38 CALL           3      26  .printf "\n" >> c:\Local\REMix\remix_nz\process\225b\\metadata
    13       39 CALL           3      27  .printf "framework_branch " >> c:\Local\REMix\remix_nz\process\225b\\metadata
    14       41 CALL           3      29  .cd C:\Local\REMix\framework\remix\framework\model\source && git rev-parse --abbrev-ref HEAD >nul 2>&1 && git rev-parse --abbrev-ref HEAD | sed "s/^/\"/;s/$/\"/" >> c:\Local\REMix\remix_nz\process\225b\\metadata
    15       43 CALL           3      33  .printf "\n" >> c:\Local\REMix\remix_nz\process\225b\\metadata
    16       45 CALL           3      35  .printf "project_path " >> c:\Local\REMix\remix_nz\process\225b\\metadata
    17       47 CALL           3      37  .cd C:\Local\REMix\remix_nz\output\will\02-battery-overnight_2020-2035-2050\data\./ && cd| sed "s/^/\"/;s/$/\"/" >> c:\Local\REMix\remix_nz\process\225b\\metadata
    18       49 CALL           3      41  .printf "\n" >> c:\Local\REMix\remix_nz\process\225b\\metadata
    19       50 CALL           3      42  .printf "project_hash " >> c:\Local\REMix\remix_nz\process\225b\\metadata
    20       52 CALL           3      44  .cd C:\Local\REMix\remix_nz\output\will\02-battery-overnight_2020-2035-2050\data\./ && git rev-parse HEAD >nul 2>&1 && git rev-parse HEAD | sed "s/^/\"/;s/$/\"/" >> c:\Local\REMix\remix_nz\process\225b\\metadata
    21       54 CALL           3      48  .printf "\n" >> c:\Local\REMix\remix_nz\process\225b\\metadata
    22       55 CALL           3      49  .printf "project_branch " >> c:\Local\REMix\remix_nz\process\225b\\metadata
    23       57 CALL           3      51  .cd C:\Local\REMix\remix_nz\output\will\02-battery-overnight_2020-2035-2050\data\./ && git rev-parse --abbrev-ref HEAD >nul 2>&1 && git rev-parse --abbrev-ref HEAD | sed "s/^/\"/;s/$/\"/" >> c:\Local\REMix\remix_nz\process\225b\\metadata
    24       59 CALL           3      55  .printf "\n" >> c:\Local\REMix\remix_nz\process\225b\\metadata
    25       62 INCLUDE        3      58  ..c:\Local\REMix\remix_nz\process\225b\metadata
    26       79 INCLUDE        1      17  .C:\Local\REMix\framework\remix\framework\model\source\data_inheritance.gms
    27      123 INCLUDE        1      26  .C:\Local\REMix\framework\remix\framework\model\source\remix.gms
    28      145 INCLUDE       27      22  ..C:\Local\REMix\framework\remix\framework\model\source\sets.gms
    29      165 IF EXIST      28      20  ..c:\Local\REMix\remix_nz\process\225b\map_aggregatetimemodel.csv
    30      216 IF EXIST      28      97  ..c:\Local\REMix\remix_nz\process\225b\set_nodesmodel.csv
    31      216 INCLUDE       28      97  ...c:\Local\REMix\remix_nz\process\225b\set_nodesmodel.csv
    32      229 IF EXIST      28      99  ..c:\Local\REMix\remix_nz\process\225b\set_nodesmodel.csv
    33      236 IF EXIST      28     106  ..c:\Local\REMix\remix_nz\process\225b\set_nodesdata.csv
    34      236 INCLUDE       28     106  ...c:\Local\REMix\remix_nz\process\225b\set_nodesdata.csv
    35      249 IF EXIST      28     108  ..c:\Local\REMix\remix_nz\process\225b\set_nodesdata.csv
    36      255 IF EXIST      28     114  ..c:\Local\REMix\remix_nz\process\225b\set_nodesmodelsel.csv
    37      255 INCLUDE       28     114  ...c:\Local\REMix\remix_nz\process\225b\set_nodesmodelsel.csv
    38      268 IF EXIST      28     116  ..c:\Local\REMix\remix_nz\process\225b\set_nodesmodelsel.csv
    39      270 IF EXIST      28     118  ..c:\Local\REMix\remix_nz\process\225b\set_nodesmodelsel.csv
    40      283 IF EXIST      28     131  ..c:\Local\REMix\remix_nz\process\225b\map_aggregatenodesmodel.csv
    41      283 INCLUDE       28     131  ...c:\Local\REMix\remix_nz\process\225b\map_aggregatenodesmodel.csv
    42      296 IF EXIST      28     133  ..c:\Local\REMix\remix_nz\process\225b\map_aggregatenodesmodel.csv
    43      299 IF EXIST      28     136  ..c:\Local\REMix\remix_nz\process\225b\map_aggregatenodesmodel.csv
    44      322 IF EXIST      28     159  ..c:\Local\REMix\remix_nz\process\225b\set_years.csv
    45      322 INCLUDE       28     159  ...c:\Local\REMix\remix_nz\process\225b\set_years.csv
    46      394 IF EXIST      28     161  ..c:\Local\REMix\remix_nz\process\225b\set_years.csv
    47      403 IF EXIST      28     170  ..c:\Local\REMix\remix_nz\process\225b\set_years.csv
    48      403 INCLUDE       28     170  ...c:\Local\REMix\remix_nz\process\225b\set_years.csv
    49      475 IF EXIST      28     172  ..c:\Local\REMix\remix_nz\process\225b\set_years.csv
    50      481 IF EXIST      28     178  ..c:\Local\REMix\remix_nz\process\225b\set_yearssel.csv
    51      481 INCLUDE       28     178  ...c:\Local\REMix\remix_nz\process\225b\set_yearssel.csv
    52      486 IF EXIST      28     180  ..c:\Local\REMix\remix_nz\process\225b\set_yearssel.csv
    53      504 IF EXIST      28     198  ..c:\Local\REMix\remix_nz\process\225b\set_activities.csv
    54      504 INCLUDE       28     198  ...c:\Local\REMix\remix_nz\process\225b\set_activities.csv
    55      512 IF EXIST      28     200  ..c:\Local\REMix\remix_nz\process\225b\set_activities.csv
    56      520 IF EXIST      28     208  ..c:\Local\REMix\remix_nz\process\225b\set_gridsegments.csv
    57      522 IF EXIST      28     210  ..c:\Local\REMix\remix_nz\process\225b\set_gridsegments.csv
    58      530 IF EXIST      28     218  ..c:\Local\REMix\remix_nz\process\225b\set_linksdata.csv
    59      530 INCLUDE       28     218  ...c:\Local\REMix\remix_nz\process\225b\set_linksdata.csv
    60      544 IF EXIST      28     220  ..c:\Local\REMix\remix_nz\process\225b\set_linksdata.csv
    61      562 IF EXIST      28     238  ..c:\Local\REMix\remix_nz\process\225b\set_link_types.csv
    62      562 INCLUDE       28     238  ...c:\Local\REMix\remix_nz\process\225b\set_link_types.csv
    63      566 IF EXIST      28     240  ..c:\Local\REMix\remix_nz\process\225b\set_link_types.csv
    64      575 IF EXIST      28     249  ..c:\Local\REMix\remix_nz\process\225b\set_commodities.csv
    65      575 INCLUDE       28     249  ...c:\Local\REMix\remix_nz\process\225b\set_commodities.csv
    66      583 IF EXIST      28     251  ..c:\Local\REMix\remix_nz\process\225b\set_commodities.csv
    67      592 IF EXIST      28     260  ..c:\Local\REMix\remix_nz\process\225b\set_indicators.csv
    68      592 INCLUDE       28     260  ...c:\Local\REMix\remix_nz\process\225b\set_indicators.csv
    69      601 IF EXIST      28     262  ..c:\Local\REMix\remix_nz\process\225b\set_indicators.csv
    70      610 IF EXIST      28     271  ..c:\Local\REMix\remix_nz\process\225b\set_converter_techs.csv
    71      610 INCLUDE       28     271  ...c:\Local\REMix\remix_nz\process\225b\set_converter_techs.csv
    72      629 IF EXIST      28     274  ..c:\Local\REMix\remix_nz\process\225b\set_storage_techs.csv
    73      629 INCLUDE       28     274  ...c:\Local\REMix\remix_nz\process\225b\set_storage_techs.csv
    74      634 IF EXIST      28     277  ..c:\Local\REMix\remix_nz\process\225b\set_transfer_techs.csv
    75      634 INCLUDE       28     277  ...c:\Local\REMix\remix_nz\process\225b\set_transfer_techs.csv
    76      638 IF EXIST      28     280  ..c:\Local\REMix\remix_nz\process\225b\set_sourcesink_techs.csv
    77      638 INCLUDE       28     280  ...c:\Local\REMix\remix_nz\process\225b\set_sourcesink_techs.csv
    78      649 IF EXIST      28     285  ..c:\Local\REMix\remix_nz\process\225b\set_converter_techs.csv
    79      649 INCLUDE       28     285  ...c:\Local\REMix\remix_nz\process\225b\set_converter_techs.csv
    80      666 IF EXIST      28     286  ..c:\Local\REMix\remix_nz\process\225b\set_converter_techs.csv
    81      670 IF EXIST      28     290  ..c:\Local\REMix\remix_nz\process\225b\set_storage_techs.csv
    82      670 INCLUDE       28     290  ...c:\Local\REMix\remix_nz\process\225b\set_storage_techs.csv
    83      673 IF EXIST      28     291  ..c:\Local\REMix\remix_nz\process\225b\set_storage_techs.csv
    84      678 IF EXIST      28     296  ..c:\Local\REMix\remix_nz\process\225b\set_transfer_techs.csv
    85      678 INCLUDE       28     296  ...c:\Local\REMix\remix_nz\process\225b\set_transfer_techs.csv
    86      680 IF EXIST      28     297  ..c:\Local\REMix\remix_nz\process\225b\set_transfer_techs.csv
    87      684 IF EXIST      28     301  ..c:\Local\REMix\remix_nz\process\225b\set_sourcesink_techs.csv
    88      684 INCLUDE       28     301  ...c:\Local\REMix\remix_nz\process\225b\set_sourcesink_techs.csv
    89      691 IF EXIST      28     302  ..c:\Local\REMix\remix_nz\process\225b\set_sourcesink_techs.csv
    90      701 IF EXIST      28     312  ..c:\Local\REMix\remix_nz\process\225b\set_degradation_states.csv
    91      703 IF EXIST      28     314  ..c:\Local\REMix\remix_nz\process\225b\set_degradation_states.csv
    92      712 IF EXIST      28     323  ..c:\Local\REMix\remix_nz\process\225b\set_soc.csv
    93      714 IF EXIST      28     325  ..c:\Local\REMix\remix_nz\process\225b\set_soc.csv
    94      730 IF EXIST      28     341  ..c:\Local\REMix\remix_nz\process\225b\transfer_linkstartend.csv
    95      730 INCLUDE       28     341  ...c:\Local\REMix\remix_nz\process\225b\transfer_linkstartend.csv
    96      757 IF EXIST      28     343  ..c:\Local\REMix\remix_nz\process\225b\transfer_linkstartend.csv
    97      771 BATINCLUDE    28     357  ...C:\Local\REMix\framework\remix\framework\model\source\battools\aggregateNodes.gms
    98      882 IF EXIST      28     466  ..c:\Local\REMix\remix_nz\process\225b\set_accnodes.csv
    99      884 IF EXIST      28     468  ..c:\Local\REMix\remix_nz\process\225b\set_accnodes.csv
   100      949 IF EXIST      28     533  ..c:\Local\REMix\remix_nz\process\225b\map_accnodes.csv
   101      951 IF EXIST      28     535  ..c:\Local\REMix\remix_nz\process\225b\map_accnodes.csv
   102     1005 INCLUDE       27      23  ..C:\Local\REMix\framework\remix\framework\model\source\accounting\input.gms
   103     1037 IF EXIST     102      32  ..c:\Local\REMix\remix_nz\process\225b\accounting_converterunits.csv
   104     1037 INCLUDE      102      32  ...c:\Local\REMix\remix_nz\process\225b\accounting_converterunits.csv
   105     1134 IF EXIST     102      34  ..c:\Local\REMix\remix_nz\process\225b\accounting_converterunits.csv
   106     1148 IF EXIST     102      48  ..c:\Local\REMix\remix_nz\process\225b\accounting_converteractivity.csv
   107     1148 INCLUDE      102      48  ...c:\Local\REMix\remix_nz\process\225b\accounting_converteractivity.csv
   108     1175 IF EXIST     102      50  ..c:\Local\REMix\remix_nz\process\225b\accounting_converteractivity.csv
   109     1192 IF EXIST     102      67  ..c:\Local\REMix\remix_nz\process\225b\accounting_converterstartup.csv
   110     1194 IF EXIST     102      69  ..c:\Local\REMix\remix_nz\process\225b\accounting_converterstartup.csv
   111     1213 IF EXIST     102      88  ..c:\Local\REMix\remix_nz\process\225b\accounting_storageunits.csv
   112     1213 INCLUDE      102      88  ...c:\Local\REMix\remix_nz\process\225b\accounting_storageunits.csv
   113     1234 IF EXIST     102      90  ..c:\Local\REMix\remix_nz\process\225b\accounting_storageunits.csv
   114     1256 IF EXIST     102     112  ..c:\Local\REMix\remix_nz\process\225b\accounting_transferlinks.csv
   115     1256 INCLUDE      102     112  ...c:\Local\REMix\remix_nz\process\225b\accounting_transferlinks.csv
   116     1265 IF EXIST     102     114  ..c:\Local\REMix\remix_nz\process\225b\accounting_transferlinks.csv
   117     1287 IF EXIST     102     136  ..c:\Local\REMix\remix_nz\process\225b\accounting_transferperlength.csv
   118     1287 INCLUDE      102     136  ...c:\Local\REMix\remix_nz\process\225b\accounting_transferperlength.csv
   119     1302 IF EXIST     102     138  ..c:\Local\REMix\remix_nz\process\225b\accounting_transferperlength.csv
   120     1317 IF EXIST     102     153  ..c:\Local\REMix\remix_nz\process\225b\accounting_sourcesinkflow.csv
   121     1317 INCLUDE      102     153  ...c:\Local\REMix\remix_nz\process\225b\accounting_sourcesinkflow.csv
   122     1323 IF EXIST     102     155  ..c:\Local\REMix\remix_nz\process\225b\accounting_sourcesinkflow.csv
   123     1337 IF EXIST     102     169  ..c:\Local\REMix\remix_nz\process\225b\accounting_perindicator.csv
   124     1337 INCLUDE      102     169  ...c:\Local\REMix\remix_nz\process\225b\accounting_perindicator.csv
   125     1345 IF EXIST     102     171  ..c:\Local\REMix\remix_nz\process\225b\accounting_perindicator.csv
   126     1371 IF EXIST     102     197  ..c:\Local\REMix\remix_nz\process\225b\accounting_indicatorbounds.csv
   127     1371 INCLUDE      102     197  ...c:\Local\REMix\remix_nz\process\225b\accounting_indicatorbounds.csv
   128     1375 IF EXIST     102     199  ..c:\Local\REMix\remix_nz\process\225b\accounting_indicatorbounds.csv
   129     1394 IF EXIST     102     218  ..c:\Local\REMix\remix_nz\process\225b\accounting_indicatorbounds_links.csv
   130     1396 IF EXIST     102     220  ..c:\Local\REMix\remix_nz\process\225b\accounting_indicatorbounds_links.csv
   131     1402 BATINCLUDE   102     226  ...C:\Local\REMix\framework\remix\framework\model\source\battools\aggregateAccountingMean.gms
   132     1461 BATINCLUDE   102     227  ...C:\Local\REMix\framework\remix\framework\model\source\battools\aggregateAccountingMean.gms
   133     1504 BATINCLUDE   102     228  ...C:\Local\REMix\framework\remix\framework\model\source\battools\aggregateAccountingMean.gms
   134     1547 BATINCLUDE   102     229  ...C:\Local\REMix\framework\remix\framework\model\source\battools\aggregateAccountingMean.gms
   135     1606 BATINCLUDE   102     230  ...C:\Local\REMix\framework\remix\framework\model\source\battools\aggregateAccountingMean.gms
   136     1665 BATINCLUDE   102     231  ...C:\Local\REMix\framework\remix\framework\model\source\battools\aggregateAccountingMean.gms
   137     1724 BATINCLUDE   102     232  ...C:\Local\REMix\framework\remix\framework\model\source\battools\aggregateAccountingMean.gms
   138     2133 INCLUDE       27      24  ..C:\Local\REMix\framework\remix\framework\model\source\accounting\annuities.gms
   139     2207 INCLUDE       27      26  ..C:\Local\REMix\framework\remix\framework\model\source\methods\mga_pre.gms
   140     2213 INCLUDE       27      27  ..C:\Local\REMix\framework\remix\framework\model\source\methods\pareto_pre.gms
   141     2219 INCLUDE       27      28  ..C:\Local\REMix\framework\remix\framework\model\source\postcalc\declaration.gms
   142     2236 IF DEXIST    141      17  ..C:\Local\REMix\remix_nz\output\will\02-battery-overnight_2020-2035-2050\result\
   143     2438 INCLUDE       27      29  ..C:\Local\REMix\framework\remix\framework\model\source\loadgdx.gms
   144     2447 INCLUDE       27      31  ..C:\Local\REMix\framework\remix\framework\model\source\core\converter.gms
   145     2550 IF EXIST     144     103  ..c:\Local\REMix\remix_nz\process\225b\converter_capacityparam.csv
   146     2550 INCLUDE      144     103  ...c:\Local\REMix\remix_nz\process\225b\converter_capacityparam.csv
   147     7378 IF EXIST     144     105  ..c:\Local\REMix\remix_nz\process\225b\converter_capacityparam.csv
   148     7386 BATINCLUDE   144     113  ...C:\Local\REMix\framework\remix\framework\model\source\battools\aggregateNodes.gms
   149     7397 BATINCLUDE   144     114  ...C:\Local\REMix\framework\remix\framework\model\source\battools\aggregateNodes.gms
   150     7430 IF EXIST     144     137  ..c:\Local\REMix\remix_nz\process\225b\converter_techparam.csv
   151     7430 INCLUDE      144     137  ...c:\Local\REMix\remix_nz\process\225b\converter_techparam.csv
   152     7480 IF EXIST     144     139  ..c:\Local\REMix\remix_nz\process\225b\converter_techparam.csv
   153     7502 IF EXIST     144     161  ..c:\Local\REMix\remix_nz\process\225b\converter_activityprofile.csv
   154     7502 INCLUDE      144     161  ...c:\Local\REMix\remix_nz\process\225b\converter_activityprofile.csv
   155     7714 IF EXIST     144     162  ..c:\Local\REMix\remix_nz\process\225b\converter_activityprofile.csv
   156     7716 IF EXIST     144     164  ..c:\Local\REMix\remix_nz\process\225b\converter_activityprofile.csv
   157     7736 IF EXIST     144     184  ..c:\Local\REMix\remix_nz\process\225b\converter_coefficient.csv
   158     7736 INCLUDE      144     184  ...c:\Local\REMix\remix_nz\process\225b\converter_coefficient.csv
   159     7894 IF EXIST     144     185  ..c:\Local\REMix\remix_nz\process\225b\converter_coefficient.csv
   160     7895 IF EXIST     144     186  ..c:\Local\REMix\remix_nz\process\225b\converter_coefficient.csv
   161     7897 IF EXIST     144     188  ..c:\Local\REMix\remix_nz\process\225b\converter_coefficient.csv
   162     7909 IF EXIST     144     200  ..c:\Local\REMix\remix_nz\process\225b\converter_coefficientprofile.csv
   163     7910 IF EXIST     144     201  ..c:\Local\REMix\remix_nz\process\225b\converter_coefficientprofile.csv
   164     7912 IF EXIST     144     203  ..c:\Local\REMix\remix_nz\process\225b\converter_coefficientprofile.csv
   165     8848 INCLUDE       27      32  ..C:\Local\REMix\framework\remix\framework\model\source\core\storage.gms
   166     8939 IF EXIST     165      91  ..c:\Local\REMix\remix_nz\process\225b\storage_reservoirparam.csv
   167     8939 INCLUDE      165      91  ...c:\Local\REMix\remix_nz\process\225b\storage_reservoirparam.csv
   168     9075 IF EXIST     165      93  ..c:\Local\REMix\remix_nz\process\225b\storage_reservoirparam.csv
   169     9079 BATINCLUDE   165      97  ...C:\Local\REMix\framework\remix\framework\model\source\battools\aggregateNodes.gms
   170     9090 BATINCLUDE   165      98  ...C:\Local\REMix\framework\remix\framework\model\source\battools\aggregateNodes.gms
   171     9126 IF EXIST     165     124  ..c:\Local\REMix\remix_nz\process\225b\storage_techparam.csv
   172     9126 INCLUDE      165     124  ...c:\Local\REMix\remix_nz\process\225b\storage_techparam.csv
   173     9138 IF EXIST     165     126  ..c:\Local\REMix\remix_nz\process\225b\storage_techparam.csv
   174     9159 IF EXIST     165     147  ..c:\Local\REMix\remix_nz\process\225b\storage_sizeparam.csv
   175     9159 INCLUDE      165     147  ...c:\Local\REMix\remix_nz\process\225b\storage_sizeparam.csv
   176     9171 IF EXIST     165     149  ..c:\Local\REMix\remix_nz\process\225b\storage_sizeparam.csv
   177     9188 IF EXIST     165     166  ..c:\Local\REMix\remix_nz\process\225b\storage_socparam.csv
   178     9190 IF EXIST     165     168  ..c:\Local\REMix\remix_nz\process\225b\storage_socparam.csv
   179     9209 IF EXIST     165     187  ..c:\Local\REMix\remix_nz\process\225b\storage_degradationparam.csv
   180     9211 IF EXIST     165     189  ..c:\Local\REMix\remix_nz\process\225b\storage_degradationparam.csv
   181     9240 IF EXIST     165     218  ..c:\Local\REMix\remix_nz\process\225b\storage_levelprofile.csv
   182     9241 IF EXIST     165     219  ..c:\Local\REMix\remix_nz\process\225b\storage_levelprofile.csv
   183     9243 IF EXIST     165     221  ..c:\Local\REMix\remix_nz\process\225b\storage_levelprofile.csv
   184    10063 INCLUDE       27      33  ..C:\Local\REMix\framework\remix\framework\model\source\core\transfer.gms
   185    10130 IF EXIST     184      73  ..c:\Local\REMix\remix_nz\process\225b\transfer_linksparam.csv
   186    10130 INCLUDE      184      73  ...c:\Local\REMix\remix_nz\process\225b\transfer_linksparam.csv
   187    10169 IF EXIST     184      75  ..c:\Local\REMix\remix_nz\process\225b\transfer_linksparam.csv
   188    10185 IF EXIST     184      91  ..c:\Local\REMix\remix_nz\process\225b\transfer_flowprofile.csv
   189    10187 IF EXIST     184      93  ..c:\Local\REMix\remix_nz\process\225b\transfer_flowprofile.csv
   190    10207 IF EXIST     184     113  ..c:\Local\REMix\remix_nz\process\225b\transfer_techparam.csv
   191    10207 INCLUDE      184     113  ...c:\Local\REMix\remix_nz\process\225b\transfer_techparam.csv
   192    10213 IF EXIST     184     115  ..c:\Local\REMix\remix_nz\process\225b\transfer_techparam.csv
   193    10227 IF EXIST     184     129  ..c:\Local\REMix\remix_nz\process\225b\transfer_coefficient.csv
   194    10227 INCLUDE      184     129  ...c:\Local\REMix\remix_nz\process\225b\transfer_coefficient.csv
   195    10233 IF EXIST     184     131  ..c:\Local\REMix\remix_nz\process\225b\transfer_coefficient.csv
   196    10247 IF EXIST     184     145  ..c:\Local\REMix\remix_nz\process\225b\transfer_coefperflow.csv
   197    10247 INCLUDE      184     145  ...c:\Local\REMix\remix_nz\process\225b\transfer_coefperflow.csv
   198    10253 IF EXIST     184     147  ..c:\Local\REMix\remix_nz\process\225b\transfer_coefperflow.csv
   199    10267 IF EXIST     184     161  ..c:\Local\REMix\remix_nz\process\225b\transfer_coefperlength.csv
   200    10267 INCLUDE      184     161  ...c:\Local\REMix\remix_nz\process\225b\transfer_coefperlength.csv
   201    10276 IF EXIST     184     163  ..c:\Local\REMix\remix_nz\process\225b\transfer_coefperlength.csv
   202    10290 IF EXIST     184     177  ..c:\Local\REMix\remix_nz\process\225b\transfer_reactperlength.csv
   203    10292 IF EXIST     184     179  ..c:\Local\REMix\remix_nz\process\225b\transfer_reactperlength.csv
   204    10306 IF EXIST     184     193  ..c:\Local\REMix\remix_nz\process\225b\transfer_lengthparam.csv
   205    10306 INCLUDE      184     193  ...c:\Local\REMix\remix_nz\process\225b\transfer_lengthparam.csv
   206    10333 IF EXIST     184     195  ..c:\Local\REMix\remix_nz\process\225b\transfer_lengthparam.csv
   207    10347 IF EXIST     184     209  ..c:\Local\REMix\remix_nz\process\225b\transfer_gridsegments.csv
   208    10349 IF EXIST     184     211  ..c:\Local\REMix\remix_nz\process\225b\transfer_gridsegments.csv
   209    10946 INCLUDE       27      34  ..C:\Local\REMix\framework\remix\framework\model\source\core\sourcesink.gms
   210    10984 IF EXIST     209      38  ..c:\Local\REMix\remix_nz\process\225b\sourcesink_config.csv
   211    10984 INCLUDE      209      38  ...c:\Local\REMix\remix_nz\process\225b\sourcesink_config.csv
   212    11162 IF EXIST     209      40  ..c:\Local\REMix\remix_nz\process\225b\sourcesink_config.csv
   213    11166 BATINCLUDE   209      44  ...C:\Local\REMix\framework\remix\framework\model\source\battools\aggregateNodes.gms
   214    11194 IF EXIST     209      62  ..c:\Local\REMix\remix_nz\process\225b\sourcesink_profile.csv
   215    11194 INCLUDE      209      62  ...c:\Local\REMix\remix_nz\process\225b\sourcesink_profile.csv
   216    11272 IF EXIST     209      63  ..c:\Local\REMix\remix_nz\process\225b\sourcesink_profile.csv
   217    11273 IF EXIST     209      64  ..c:\Local\REMix\remix_nz\process\225b\sourcesink_profile.csv
   218    11275 IF EXIST     209      66  ..c:\Local\REMix\remix_nz\process\225b\sourcesink_profile.csv
   219    11295 IF EXIST     209      86  ..c:\Local\REMix\remix_nz\process\225b\sourcesink_annualsum.csv
   220    11295 INCLUDE      209      86  ...c:\Local\REMix\remix_nz\process\225b\sourcesink_annualsum.csv
   221    11364 IF EXIST     209      88  ..c:\Local\REMix\remix_nz\process\225b\sourcesink_annualsum.csv
   222    11367 BATINCLUDE   209      91  ...C:\Local\REMix\framework\remix\framework\model\source\battools\aggregateNodes.gms
   223    11548 INCLUDE       27      35  ..C:\Local\REMix\framework\remix\framework\model\source\core\balance.gms
   224    11684 INCLUDE       27      37  ..C:\Local\REMix\framework\remix\framework\model\source\accounting\equations.gms
   225    12106 INCLUDE       27      38  ..C:\Local\REMix\framework\remix\framework\model\source\optiframe.gms
   226    12147 INCLUDE       27      72  ..C:\Local\REMix\framework\remix\framework\model\source\methods\checkanno.gms
   227    12158 INCLUDE       27      75  ..C:\Local\REMix\framework\remix\framework\model\source\methods\pips.gms
   228    12167 INCLUDE       27      78  ..C:\Local\REMix\framework\remix\framework\model\source\methods\solve.gms
   229    12379 INCLUDE       27      81  ..C:\Local\REMix\framework\remix\framework\model\source\methods\pareto.gms
   230    12388 INCLUDE       27      84  ..C:\Local\REMix\framework\remix\framework\model\source\methods\mga.gms
   231    12397 INCLUDE       27      87  ..C:\Local\REMix\framework\remix\framework\model\source\methods\iternodes.gms
   232    12406 INCLUDE       27      90  ..C:\Local\REMix\framework\remix\framework\model\source\postcalc\definition.gms
   233    13198 INCLUDE       27      91  ..C:\Local\REMix\framework\remix\framework\model\source\postcalc\writegdx.gms


COMPILATION TIME     =       14.734 SECONDS     72 MB  40.4.0 d540b52e WEX-WEI
GAMS 40.4.0  d540b52e Oct 3, 2022           WEX-WEI x86 64bit/MS Windows - 03/13/24 17:58:39 Page 3
G e n e r a l   A l g e b r a i c   M o d e l i n g   S y s t e m
Range Statistics    SOLVE remix Using MIP From line 12364


RANGE STATISTICS (ABSOLUTE NON-ZERO FINITE VALUES)

RHS       [min, max] : [ 6.000E-04, 3.000E+03] - Zero values observed as well
Bound     [min, max] : [ 9.000E-04, 1.550E-01] - Zero values observed as well
Matrix    [min, max] : [ 1.000E-02, 3.988E+02]

GAMS 40.4.0  d540b52e Oct 3, 2022           WEX-WEI x86 64bit/MS Windows - 03/13/24 17:58:39 Page 4
G e n e r a l   A l g e b r a i c   M o d e l i n g   S y s t e m
Model Statistics    SOLVE remix Using MIP From line 12364


LOOPS                           optiframeToCalc   of1


MODEL STATISTICS

BLOCKS OF EQUATIONS          75     SINGLE EQUATIONS   15,129,752
BLOCKS OF VARIABLES          38     SINGLE VARIABLES   15,691,058
NON ZERO ELEMENTS    44,971,260


GENERATION TIME      =      306.578 SECONDS 10,025 MB  40.4.0 d540b52e WEX-WEI


EXECUTION TIME       =      418.062 SECONDS 10,025 MB  40.4.0 d540b52e WEX-WEI
               L O O P S         optiframeToCalc of1

GAMS 40.4.0  d540b52e Oct 3, 2022           WEX-WEI x86 64bit/MS Windows - 03/13/24 17:58:39 Page 5
G e n e r a l   A l g e b r a i c   M o d e l i n g   S y s t e m
Solution Report     SOLVE remix Using MIP From line 12364


               S O L V E      S U M M A R Y

     MODEL   remix               OBJECTIVE  accounting_objective
     TYPE    MIP                 DIRECTION  MINIMIZE
     SOLVER  CPLEX               FROM LINE  12364

**** SOLVER STATUS     1 Normal Completion
**** MODEL STATUS      1 Optimal
**** OBJECTIVE VALUE            42375.5348

 RESOURCE USAGE, LIMIT       4785.422   1209600.000
 ITERATION COUNT, LIMIT       103    2147483647
--- GAMS/Cplex Link licensed for continuous and discrete problems.

Reading parameter(s) from "c:\Local\REMix\remix_nz\process\cplex.opt"
>>  rerun no
>>  iis 1
>>  lpmethod 4
>>  barorder 3 /;
*** Value Error line 4: Integer expected, for option "barorder" saw "3 /;"
*** Value Error line 4:    Option ignored
>>  preind 1
>>  scaind 0
>>  predual -1
>>  baralg 0
>>  barstartalg 1
>>  barepcomp 1e-6
>>  solutiontype 2
>>  startalg 4
>>  epgap 1e-3
>>  quality 1
>>  barcolnz 0
>>  threads 4
>>  parallelmode 1
Finished reading from "c:\Local\REMix\remix_nz\process\cplex.opt"

--- GMO setup time: 0.00s
--- Space for names approximately 1934.66 Mb
--- Use option 'names no' to turn use of names off
--- GMO memory 5588.30 Mb (peak 5708.02 Mb)
--- Dictionary memory 0.00 Mb
--- Cplex 22.1.0.0 link memory 472.43 Mb (peak 3235.46 Mb)
--- Starting Cplex


--- LP status (1): optimal.
--- Cplex Time: 4738.47sec (det. 10512127.57 ticks)


Optimal solution found
Objective:        42375.534828

Solution Quality Statistics:
                                   unscaled                scaled
                               max         sum         max         sum
primal infeasibility        2.571e-05   4.846e-01   2.571e-05   4.846e-01
dual infeasibility          0.000e+00   0.000e+00   0.000e+00   0.000e+00
primal residual             8.731e-11   1.338e-09   8.731e-11   1.338e-09
dual residual               3.134e-03   4.795e-03   3.134e-03   4.795e-03
primal solution vector      4.238e+04   5.875e+07   4.238e+04   5.875e+07
dual solution vector        2.628e+04   5.971e+06   2.628e+04   5.971e+06
slacks                      3.000e+03   4.960e+07   3.000e+03   4.960e+07
reduced costs               2.329e+04   3.940e+07   2.329e+04   3.940e+07
comp. slackness viol.       4.052e-04   3.639e-01




**** REPORT SUMMARY :        0     NONOPT
                             0 INFEASIBLE
                             0  UNBOUNDED
GAMS 40.4.0  d540b52e Oct 3, 2022           WEX-WEI x86 64bit/MS Windows - 03/13/24 17:58:39 Page 6
G e n e r a l   A l g e b r a i c   M o d e l i n g   S y s t e m
E x e c u t i o n


**** REPORT FILE SUMMARY

opt c:\Local\REMix\remix_nz\process\cplex.opt


EXECUTION TIME       =      183.141 SECONDS  8,067 MB  40.4.0 d540b52e WEX-WEI


USER: Medium MUD - 10 User License                   S220920|0002AO-GEN
      University of Canterbury, Civil Engineering Department    DC16319
      License for teaching and research at degree granting institutions


**** FILE SUMMARY

Input      C:\Local\REMix\framework\remix\framework\model\run_remix.gms
Output     c:\Local\REMix\remix_nz\process\run_remix.lst
