GAMS 40.4.0  d540b52e Oct 3, 2022           WEX-WEI x86 64bit/MS Windows - 10/02/23 08:18:23 Page 1
G e n e r a l   A l g e b r a i c   M o d e l i n g   S y s t e m
C o m p i l a t i o n


   1  * SPDX-FileCopyrightText: Copyright (c) 2023 German Aerospace Center (DLR)
   2  * SPDX-License-Identifier: BSD-3-Clause
   3   
   4  * ==== REMix version number ====
   6   
   7  * ==== global settings ====
  11   
  13   
  14  * ==== write metadata and inherit dataset ====
INCLUDE    C:\Local\REMix\framework\remix\framework\model\source\metadata.gms
  22   
  26   
  42   
  58   
  59  set metadata(*) /
INCLUDE    c:\Local\REMix\remix_nz\process\225a\metadata
  61  remix_version "0.9.2"
  62  gams_version "40.4.0"
  63  timestamp "10/02/23 08:18:23"
  64  framework_path "C:\Local\REMix\framework\remix\framework\model\source"
  65   
  66  framework_hash 96c2159997fb47c52b8300c49677756ddfb1ee40
  67   
  68  framework_branch "dev"
  69   
  70  project_path "C:\Local\REMix\remix_nz\output\med_pop_out_base_2020-2030-2040-2050\data"
  71   
  72  project_hash "6c5bf36dbe5b6f4476d4513f7f27a4bd60bf5a65"
  73   
  74  project_branch "main"
  75   
  76  /;
INCLUDE    C:\Local\REMix\framework\remix\framework\model\source\data_inheritance.gms
  78  * SPDX-FileCopyrightText: Copyright (c) 2023 German Aerospace Center (DLR)
  79  * SPDX-License-Identifier: BSD-3-Clause
  80   
  83   
  88   
  89  * pandas based data inheritance reading in the dat files, merging them and writing csv files in the scrdir
 109  ;
 110   
 114   
 115  * ==== run remix ====
INCLUDE    C:\Local\REMix\framework\remix\framework\model\source\remix.gms
 120  * SPDX-FileCopyrightText: Copyright (c) 2023 German Aerospace Center (DLR)
 121  * SPDX-License-Identifier: BSD-3-Clause
 122   
 123  * ==== global settings ====
 130   
 133   
 135   
 138   
 139  * ==== include modules ====
INCLUDE    C:\Local\REMix\framework\remix\framework\model\source\sets.gms
 141  * SPDX-FileCopyrightText: Copyright (c) 2023 German Aerospace Center (DLR)
 142  * SPDX-License-Identifier: BSD-3-Clause
 143   
 144  * // # sets
 145  * // Sets are the indices of variables and parameters.
 146   
 147  * // ## Reference
 148  * // {special_table_sets}
 149   
 150  * // ## Input Files
 151  * // {special_table_set_input_files}
 817   
 818  map_accNodes(accNodesModel,accNodesModel_aggregation)
 819      $sum((nodesData, nodesModelToCalc)
 820              $( sameas(nodesModelToCalc,accNodesModel)
 821                  and map_accNodesLoad(nodesData,accNodesModel_aggregation)
 822                  and aggregateNodesModel(nodesData,nodesModelToCalc)), 1) = yes;
 823   
 824  map_accNodes(accNodesModel,"global")$sum(nodesModelToCalc$sameas(accNodesModel,nodesModelToCalc), 1) = yes;
 825  map_accNodes(accNodesModel,"global")$sum(accNodes$sameas(accNodesModel,accNodes), 1) = yes;
 826  map_accNodes(accNodesModel,accNodesModel) = yes;
 827  map_accLinks(accLinksModel,"global")$sum(linksModelToCalc$sameas(accLinksModel,linksModelToCalc), 1) = yes;
 828  map_accLinks(accLinksModel,accLinksModel) = yes;
 829  map_accYears(accYears,"horizon")$sum(yearsToCalc$sameas(accYears,yearsToCalc), 1)  = yes;
 830  map_accYears(accYears,accYears) = yes;
 831   
 832  map_accNodesToCalc(accNodesModel,nodesModelToCalc)
 833      $sum((nodesData)
 834              $( map_accNodesLoad(nodesData,accNodesModel)
 835                  and aggregateNodesModel(nodesData,nodesModelToCalc)), 1) = yes;
 836   
 837  map_accNodesToCalc("global",nodesModelToCalc) = yes;
 838  map_accNodesToCalc(accNodesModel,nodesModelToCalc)$sameas(accNodesModel,nodesModelToCalc) = yes;
 839  map_accLinksToCalc("global",linksModelToCalc) = yes;
 840  map_accLinksToCalc(accLinksModel,linksModelToCalc)$sameas(accLinksModel,linksModelToCalc) = yes;
 841  map_accYearsToCalc("horizon",yearsToCalc) = yes;
 842  map_accYearsToCalc(accYears,yearsToCalc)$sameas(accYears,yearsToCalc) = yes;
 843   
 844  * Duplicate sets for postcalc reporting without horizon and accYears
 845  map_accNodesPostCalc(accNodesModel,nodesModelToCalc) = map_accNodesToCalc(accNodesModel,nodesModelToCalc);
 846  map_accLinksPostCalc(accLinksModel,linksModelToCalc) = map_accLinksToCalc(accLinksModel,linksModelToCalc);
 847  map_accYearsPostCalc(accYears,yearsToCalc)$sameas(accYears,yearsToCalc) = yes;
 848  map_accYearsPostCalc(accYears,years)$(sameas(accYears,years) and years.val < sum(yearsToCalc$(ord(yearsToCalc) = 1), yearsToCalc.val)) = yes;
 849   
 850  set map_nodesAccounting(accNodesModel_aggregation,accNodesModel) "Map accounting nodes describes the mapping between model accounting nodes and data nodes." ;
 851  option map_nodesAccounting < map_accNodes;
 852   
 853  * ==== Generic sets  ====
 854  * These set names are repeated across different profile parameters.
 855  * they are not strictly related to each other and are not input data but
 856  * are needed for validation.
 857  ** // PROFILE: profileTypes | Profile Types | OEO_00140056:flow potential | set_profiletypes.csv
 858   
 859  ** // SET: scenario | Scenario | OEO_00000364:scenario | set_scenarios.csv
 860  * "Scenario indexes help to differentiate scenarios." /
 861   
 862  ** // SET: capType | Capacity Types | OEO_00030019:balance process attribute | set_captypes.csv
 863  * "Capacity types differentiate investment decisions." /
 864   
 865  ** // SET: balanceType | Balance Types | OEO_00030019:balance process attribute | set_balancetypes.csv
 866  * "Balance types differentiate types of balances." /
INCLUDE    C:\Local\REMix\framework\remix\framework\model\source\accounting\input.gms
 868  * SPDX-FileCopyrightText: Copyright (c) 2023 German Aerospace Center (DLR)
 869  * SPDX-License-Identifier: BSD-3-Clause
 870   
 871  * // # accounting_input
 872  * // The parameters in this file describe the accounting of indicators in the model.
 873   
 874  * // ## Variables
 875  * // {special_table_input_variables}
1248   
1249  * Aggregate accounting parameters
BATINCLUDE C:\Local\REMix\framework\remix\framework\model\source\battools\aggregateAccountingMean.gms
1251  * SPDX-FileCopyrightText: Copyright (c) 2023 German Aerospace Center (DLR)
1252  * SPDX-License-Identifier: BSD-3-Clause
1253   
1255   
1257   
1258  set accounting_converterUnitsNonzero(indicator,accnodesData,converter_techs,vintage);
1259  accounting_converterUnitsNonzero(indicator,accnodesData,converter_techs,vintage)
1260      $sum(pc_accounting_converterUnits$accounting_converterUnitsIn(indicator,accnodesData,converter_techs,vintage,pc_accounting_converterUnits), 1)
1261      = yes;
1262   
1264  set accounting_converterUnitsChk(indicator,nodesModel,converter_techs,vintage,pc_accounting_converterUnits);
1265  accounting_converterUnitsChk(indicator,nodesModel,converter_techs,vintage,"useAnnuity")
1266      $sum((nodesData,accnodesData)
1267              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1268                  and accounting_converterUnitsNonzero(indicator,accnodesData,converter_techs,vintage)), 1)
1269      = smax((nodesData,accnodesData)
1270              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1271                  and accounting_converterUnitsNonzero(indicator,accnodesData,converter_techs,vintage)),
1272          accounting_converterUnitsIn(indicator,accnodesData,converter_techs,vintage,"useAnnuity"))
1273      - smin((nodesData,accnodesData)
1274              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1275                  and accounting_converterUnitsNonzero(indicator,accnodesData,converter_techs,vintage)),
1276          accounting_converterUnitsIn(indicator,accnodesData,converter_techs,vintage,"useAnnuity"));
1277   
1278  abort$sum(accounting_converterUnitsChk(indicator,nodesModel,converter_techs,vintage,pc_accounting_converterUnits), 1) "Cannot aggregate technologies with different useAnnuity values."
1280   
1281  parameter accounting_converterUnitsAgg(indicator,nodesModel,converter_techs,vintage,pc_accounting_converterUnits);
1282  accounting_converterUnitsAgg(indicator,nodesModel,converter_techs,vintage,pc_accounting_converterUnits)
1283      $sum((nodesData,accnodesData)
1284              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1285                  and accounting_converterUnitsNonzero(indicator,accnodesData,converter_techs,vintage)), 1)
1286      = sum((nodesData,accnodesData)
1287              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1288                  and accounting_converterUnitsNonzero(indicator,accnodesData,converter_techs,vintage)),
1289          accounting_converterUnitsIn(indicator,accnodesData,converter_techs,vintage,pc_accounting_converterUnits))
1290      / sum((nodesData,accnodesData)
1291              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1292                  and accounting_converterUnitsNonzero(indicator,accnodesData,converter_techs,vintage)),
1293          1);
1294   
1295  parameter accounting_converterUnits(indicator,nodesModel,converter_techs,vintage,pc_accounting_converterUnits);
1296  loop(accnodes,
1297  accounting_converterUnits(indicator,nodesModel,converter_techs,vintage,pc_accounting_converterUnits)
1298      $sum(accnodesData$(map_accnodesToCalc(accnodes,nodesModel) and sameas(accnodes,accnodesData)
1299                              and accounting_converterUnitsIn(indicator,accnodesData,converter_techs,vintage,pc_accounting_converterUnits)), 1)
1300      = sum(accnodesData$(map_accnodesToCalc(accnodes,nodesModel) and sameas(accnodes,accnodesData)),
1301              accounting_converterUnitsIn(indicator,accnodesData,converter_techs,vintage,pc_accounting_converterUnits));
1302  );
1303   
1304  accounting_converterUnits(indicator,nodesModel,converter_techs,vintage,pc_accounting_converterUnits)
1305      $accounting_converterUnitsAgg(indicator,nodesModel,converter_techs,vintage,pc_accounting_converterUnits)
1306      = accounting_converterUnitsAgg(indicator,nodesModel,converter_techs,vintage,pc_accounting_converterUnits);
1307   
1308  * option kill %paramName%Nonzero %paramName%Chk %paramName%Agg
BATINCLUDE C:\Local\REMix\framework\remix\framework\model\source\battools\aggregateAccountingMean.gms
1310  * SPDX-FileCopyrightText: Copyright (c) 2023 German Aerospace Center (DLR)
1311  * SPDX-License-Identifier: BSD-3-Clause
1312   
1314   
1316   
1317  set accounting_converterActivityNonzero(indicator,accnodesData,converter_techs,vintage,activity);
1318  accounting_converterActivityNonzero(indicator,accnodesData,converter_techs,vintage,activity)
1319      $sum(pc_accounting_converterActivity$accounting_converterActivityIn(indicator,accnodesData,converter_techs,vintage,activity,pc_accounting_converterActivity), 1)
1320      = yes;
1321   
1323   
1324  parameter accounting_converterActivityAgg(indicator,nodesModel,converter_techs,vintage,activity,pc_accounting_converterActivity);
1325  accounting_converterActivityAgg(indicator,nodesModel,converter_techs,vintage,activity,pc_accounting_converterActivity)
1326      $sum((nodesData,accnodesData)
1327              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1328                  and accounting_converterActivityNonzero(indicator,accnodesData,converter_techs,vintage,activity)), 1)
1329      = sum((nodesData,accnodesData)
1330              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1331                  and accounting_converterActivityNonzero(indicator,accnodesData,converter_techs,vintage,activity)),
1332          accounting_converterActivityIn(indicator,accnodesData,converter_techs,vintage,activity,pc_accounting_converterActivity))
1333      / sum((nodesData,accnodesData)
1334              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1335                  and accounting_converterActivityNonzero(indicator,accnodesData,converter_techs,vintage,activity)),
1336          1);
1337   
1338  parameter accounting_converterActivity(indicator,nodesModel,converter_techs,vintage,activity,pc_accounting_converterActivity);
1339  loop(accnodes,
1340  accounting_converterActivity(indicator,nodesModel,converter_techs,vintage,activity,pc_accounting_converterActivity)
1341      $sum(accnodesData$(map_accnodesToCalc(accnodes,nodesModel) and sameas(accnodes,accnodesData)
1342                              and accounting_converterActivityIn(indicator,accnodesData,converter_techs,vintage,activity,pc_accounting_converterActivity)), 1)
1343      = sum(accnodesData$(map_accnodesToCalc(accnodes,nodesModel) and sameas(accnodes,accnodesData)),
1344              accounting_converterActivityIn(indicator,accnodesData,converter_techs,vintage,activity,pc_accounting_converterActivity));
1345  );
1346   
1347  accounting_converterActivity(indicator,nodesModel,converter_techs,vintage,activity,pc_accounting_converterActivity)
1348      $accounting_converterActivityAgg(indicator,nodesModel,converter_techs,vintage,activity,pc_accounting_converterActivity)
1349      = accounting_converterActivityAgg(indicator,nodesModel,converter_techs,vintage,activity,pc_accounting_converterActivity);
1350   
1351  * option kill %paramName%Nonzero %paramName%Chk %paramName%Agg
BATINCLUDE C:\Local\REMix\framework\remix\framework\model\source\battools\aggregateAccountingMean.gms
1353  * SPDX-FileCopyrightText: Copyright (c) 2023 German Aerospace Center (DLR)
1354  * SPDX-License-Identifier: BSD-3-Clause
1355   
1357   
1359   
1360  set accounting_converterStartupNonzero(indicator,accnodesData,converter_techs,vintage);
1361  accounting_converterStartupNonzero(indicator,accnodesData,converter_techs,vintage)
1362      $sum(pc_accounting_converterStartup$accounting_converterStartupIn(indicator,accnodesData,converter_techs,vintage,pc_accounting_converterStartup), 1)
1363      = yes;
1364   
1366   
1367  parameter accounting_converterStartupAgg(indicator,nodesModel,converter_techs,vintage,pc_accounting_converterStartup);
1368  accounting_converterStartupAgg(indicator,nodesModel,converter_techs,vintage,pc_accounting_converterStartup)
1369      $sum((nodesData,accnodesData)
1370              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1371                  and accounting_converterStartupNonzero(indicator,accnodesData,converter_techs,vintage)), 1)
1372      = sum((nodesData,accnodesData)
1373              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1374                  and accounting_converterStartupNonzero(indicator,accnodesData,converter_techs,vintage)),
1375          accounting_converterStartupIn(indicator,accnodesData,converter_techs,vintage,pc_accounting_converterStartup))
1376      / sum((nodesData,accnodesData)
1377              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1378                  and accounting_converterStartupNonzero(indicator,accnodesData,converter_techs,vintage)),
1379          1);
1380   
1381  parameter accounting_converterStartup(indicator,nodesModel,converter_techs,vintage,pc_accounting_converterStartup);
1382  loop(accnodes,
1383  accounting_converterStartup(indicator,nodesModel,converter_techs,vintage,pc_accounting_converterStartup)
1384      $sum(accnodesData$(map_accnodesToCalc(accnodes,nodesModel) and sameas(accnodes,accnodesData)
1385                              and accounting_converterStartupIn(indicator,accnodesData,converter_techs,vintage,pc_accounting_converterStartup)), 1)
1386      = sum(accnodesData$(map_accnodesToCalc(accnodes,nodesModel) and sameas(accnodes,accnodesData)),
1387              accounting_converterStartupIn(indicator,accnodesData,converter_techs,vintage,pc_accounting_converterStartup));
1388  );
1389   
1390  accounting_converterStartup(indicator,nodesModel,converter_techs,vintage,pc_accounting_converterStartup)
1391      $accounting_converterStartupAgg(indicator,nodesModel,converter_techs,vintage,pc_accounting_converterStartup)
1392      = accounting_converterStartupAgg(indicator,nodesModel,converter_techs,vintage,pc_accounting_converterStartup);
1393   
1394  * option kill %paramName%Nonzero %paramName%Chk %paramName%Agg
BATINCLUDE C:\Local\REMix\framework\remix\framework\model\source\battools\aggregateAccountingMean.gms
1396  * SPDX-FileCopyrightText: Copyright (c) 2023 German Aerospace Center (DLR)
1397  * SPDX-License-Identifier: BSD-3-Clause
1398   
1400   
1402   
1403  set accounting_storageUnitsNonzero(indicator,accnodesData,storage_techs,vintage);
1404  accounting_storageUnitsNonzero(indicator,accnodesData,storage_techs,vintage)
1405      $sum(pc_accounting_storageUnits$accounting_storageUnitsIn(indicator,accnodesData,storage_techs,vintage,pc_accounting_storageUnits), 1)
1406      = yes;
1407   
1409  set accounting_storageUnitsChk(indicator,nodesModel,storage_techs,vintage,pc_accounting_storageUnits);
1410  accounting_storageUnitsChk(indicator,nodesModel,storage_techs,vintage,"useAnnuity")
1411      $sum((nodesData,accnodesData)
1412              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1413                  and accounting_storageUnitsNonzero(indicator,accnodesData,storage_techs,vintage)), 1)
1414      = smax((nodesData,accnodesData)
1415              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1416                  and accounting_storageUnitsNonzero(indicator,accnodesData,storage_techs,vintage)),
1417          accounting_storageUnitsIn(indicator,accnodesData,storage_techs,vintage,"useAnnuity"))
1418      - smin((nodesData,accnodesData)
1419              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1420                  and accounting_storageUnitsNonzero(indicator,accnodesData,storage_techs,vintage)),
1421          accounting_storageUnitsIn(indicator,accnodesData,storage_techs,vintage,"useAnnuity"));
1422   
1423  abort$sum(accounting_storageUnitsChk(indicator,nodesModel,storage_techs,vintage,pc_accounting_storageUnits), 1) "Cannot aggregate technologies with different useAnnuity values."
1425   
1426  parameter accounting_storageUnitsAgg(indicator,nodesModel,storage_techs,vintage,pc_accounting_storageUnits);
1427  accounting_storageUnitsAgg(indicator,nodesModel,storage_techs,vintage,pc_accounting_storageUnits)
1428      $sum((nodesData,accnodesData)
1429              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1430                  and accounting_storageUnitsNonzero(indicator,accnodesData,storage_techs,vintage)), 1)
1431      = sum((nodesData,accnodesData)
1432              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1433                  and accounting_storageUnitsNonzero(indicator,accnodesData,storage_techs,vintage)),
1434          accounting_storageUnitsIn(indicator,accnodesData,storage_techs,vintage,pc_accounting_storageUnits))
1435      / sum((nodesData,accnodesData)
1436              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1437                  and accounting_storageUnitsNonzero(indicator,accnodesData,storage_techs,vintage)),
1438          1);
1439   
1440  parameter accounting_storageUnits(indicator,nodesModel,storage_techs,vintage,pc_accounting_storageUnits);
1441  loop(accnodes,
1442  accounting_storageUnits(indicator,nodesModel,storage_techs,vintage,pc_accounting_storageUnits)
1443      $sum(accnodesData$(map_accnodesToCalc(accnodes,nodesModel) and sameas(accnodes,accnodesData)
1444                              and accounting_storageUnitsIn(indicator,accnodesData,storage_techs,vintage,pc_accounting_storageUnits)), 1)
1445      = sum(accnodesData$(map_accnodesToCalc(accnodes,nodesModel) and sameas(accnodes,accnodesData)),
1446              accounting_storageUnitsIn(indicator,accnodesData,storage_techs,vintage,pc_accounting_storageUnits));
1447  );
1448   
1449  accounting_storageUnits(indicator,nodesModel,storage_techs,vintage,pc_accounting_storageUnits)
1450      $accounting_storageUnitsAgg(indicator,nodesModel,storage_techs,vintage,pc_accounting_storageUnits)
1451      = accounting_storageUnitsAgg(indicator,nodesModel,storage_techs,vintage,pc_accounting_storageUnits);
1452   
1453  * option kill %paramName%Nonzero %paramName%Chk %paramName%Agg
BATINCLUDE C:\Local\REMix\framework\remix\framework\model\source\battools\aggregateAccountingMean.gms
1455  * SPDX-FileCopyrightText: Copyright (c) 2023 German Aerospace Center (DLR)
1456  * SPDX-License-Identifier: BSD-3-Clause
1457   
1459   
1461   
1462  set accounting_transferLinksNonzero(indicator,acclinksData,transfer_techs,vintage);
1463  accounting_transferLinksNonzero(indicator,acclinksData,transfer_techs,vintage)
1464      $sum(pc_accounting_transferLinks$accounting_transferLinksIn(indicator,acclinksData,transfer_techs,vintage,pc_accounting_transferLinks), 1)
1465      = yes;
1466   
1468  set accounting_transferLinksChk(indicator,linksModel,transfer_techs,vintage,pc_accounting_transferLinks);
1469  accounting_transferLinksChk(indicator,linksModel,transfer_techs,vintage,"useAnnuity")
1470      $sum((linksData,acclinksData)
1471              $(aggregatelinksModel(linksData,linksModel) and sameas(linksData,acclinksData)
1472                  and accounting_transferLinksNonzero(indicator,acclinksData,transfer_techs,vintage)), 1)
1473      = smax((linksData,acclinksData)
1474              $(aggregatelinksModel(linksData,linksModel) and sameas(linksData,acclinksData)
1475                  and accounting_transferLinksNonzero(indicator,acclinksData,transfer_techs,vintage)),
1476          accounting_transferLinksIn(indicator,acclinksData,transfer_techs,vintage,"useAnnuity"))
1477      - smin((linksData,acclinksData)
1478              $(aggregatelinksModel(linksData,linksModel) and sameas(linksData,acclinksData)
1479                  and accounting_transferLinksNonzero(indicator,acclinksData,transfer_techs,vintage)),
1480          accounting_transferLinksIn(indicator,acclinksData,transfer_techs,vintage,"useAnnuity"));
1481   
1482  abort$sum(accounting_transferLinksChk(indicator,linksModel,transfer_techs,vintage,pc_accounting_transferLinks), 1) "Cannot aggregate technologies with different useAnnuity values."
1484   
1485  parameter accounting_transferLinksAgg(indicator,linksModel,transfer_techs,vintage,pc_accounting_transferLinks);
1486  accounting_transferLinksAgg(indicator,linksModel,transfer_techs,vintage,pc_accounting_transferLinks)
1487      $sum((linksData,acclinksData)
1488              $(aggregatelinksModel(linksData,linksModel) and sameas(linksData,acclinksData)
1489                  and accounting_transferLinksNonzero(indicator,acclinksData,transfer_techs,vintage)), 1)
1490      = sum((linksData,acclinksData)
1491              $(aggregatelinksModel(linksData,linksModel) and sameas(linksData,acclinksData)
1492                  and accounting_transferLinksNonzero(indicator,acclinksData,transfer_techs,vintage)),
1493          accounting_transferLinksIn(indicator,acclinksData,transfer_techs,vintage,pc_accounting_transferLinks))
1494      / sum((linksData,acclinksData)
1495              $(aggregatelinksModel(linksData,linksModel) and sameas(linksData,acclinksData)
1496                  and accounting_transferLinksNonzero(indicator,acclinksData,transfer_techs,vintage)),
1497          1);
1498   
1499  parameter accounting_transferLinks(indicator,linksModel,transfer_techs,vintage,pc_accounting_transferLinks);
1500  loop(acclinks,
1501  accounting_transferLinks(indicator,linksModel,transfer_techs,vintage,pc_accounting_transferLinks)
1502      $sum(acclinksData$(map_acclinksToCalc(acclinks,linksModel) and sameas(acclinks,acclinksData)
1503                              and accounting_transferLinksIn(indicator,acclinksData,transfer_techs,vintage,pc_accounting_transferLinks)), 1)
1504      = sum(acclinksData$(map_acclinksToCalc(acclinks,linksModel) and sameas(acclinks,acclinksData)),
1505              accounting_transferLinksIn(indicator,acclinksData,transfer_techs,vintage,pc_accounting_transferLinks));
1506  );
1507   
1508  accounting_transferLinks(indicator,linksModel,transfer_techs,vintage,pc_accounting_transferLinks)
1509      $accounting_transferLinksAgg(indicator,linksModel,transfer_techs,vintage,pc_accounting_transferLinks)
1510      = accounting_transferLinksAgg(indicator,linksModel,transfer_techs,vintage,pc_accounting_transferLinks);
1511   
1512  * option kill %paramName%Nonzero %paramName%Chk %paramName%Agg
BATINCLUDE C:\Local\REMix\framework\remix\framework\model\source\battools\aggregateAccountingMean.gms
1514  * SPDX-FileCopyrightText: Copyright (c) 2023 German Aerospace Center (DLR)
1515  * SPDX-License-Identifier: BSD-3-Clause
1516   
1518   
1520   
1521  set accounting_transferPerLengthNonzero(indicator,acclinksData,transfer_techs,vintage,link_types);
1522  accounting_transferPerLengthNonzero(indicator,acclinksData,transfer_techs,vintage,link_types)
1523      $sum(pc_accounting_transferPerLength$accounting_transferPerLengthIn(indicator,acclinksData,transfer_techs,vintage,link_types,pc_accounting_transferPerLength), 1)
1524      = yes;
1525   
1527  set accounting_transferPerLengthChk(indicator,linksModel,transfer_techs,vintage,link_types,pc_accounting_transferPerLength);
1528  accounting_transferPerLengthChk(indicator,linksModel,transfer_techs,vintage,link_types,"useAnnuity")
1529      $sum((linksData,acclinksData)
1530              $(aggregatelinksModel(linksData,linksModel) and sameas(linksData,acclinksData)
1531                  and accounting_transferPerLengthNonzero(indicator,acclinksData,transfer_techs,vintage,link_types)), 1)
1532      = smax((linksData,acclinksData)
1533              $(aggregatelinksModel(linksData,linksModel) and sameas(linksData,acclinksData)
1534                  and accounting_transferPerLengthNonzero(indicator,acclinksData,transfer_techs,vintage,link_types)),
1535          accounting_transferPerLengthIn(indicator,acclinksData,transfer_techs,vintage,link_types,"useAnnuity"))
1536      - smin((linksData,acclinksData)
1537              $(aggregatelinksModel(linksData,linksModel) and sameas(linksData,acclinksData)
1538                  and accounting_transferPerLengthNonzero(indicator,acclinksData,transfer_techs,vintage,link_types)),
1539          accounting_transferPerLengthIn(indicator,acclinksData,transfer_techs,vintage,link_types,"useAnnuity"));
1540   
1541  abort$sum(accounting_transferPerLengthChk(indicator,linksModel,transfer_techs,vintage,link_types,pc_accounting_transferPerLength), 1) "Cannot aggregate technologies with different useAnnuity values."
1543   
1544  parameter accounting_transferPerLengthAgg(indicator,linksModel,transfer_techs,vintage,link_types,pc_accounting_transferPerLength);
1545  accounting_transferPerLengthAgg(indicator,linksModel,transfer_techs,vintage,link_types,pc_accounting_transferPerLength)
1546      $sum((linksData,acclinksData)
1547              $(aggregatelinksModel(linksData,linksModel) and sameas(linksData,acclinksData)
1548                  and accounting_transferPerLengthNonzero(indicator,acclinksData,transfer_techs,vintage,link_types)), 1)
1549      = sum((linksData,acclinksData)
1550              $(aggregatelinksModel(linksData,linksModel) and sameas(linksData,acclinksData)
1551                  and accounting_transferPerLengthNonzero(indicator,acclinksData,transfer_techs,vintage,link_types)),
1552          accounting_transferPerLengthIn(indicator,acclinksData,transfer_techs,vintage,link_types,pc_accounting_transferPerLength))
1553      / sum((linksData,acclinksData)
1554              $(aggregatelinksModel(linksData,linksModel) and sameas(linksData,acclinksData)
1555                  and accounting_transferPerLengthNonzero(indicator,acclinksData,transfer_techs,vintage,link_types)),
1556          1);
1557   
1558  parameter accounting_transferPerLength(indicator,linksModel,transfer_techs,vintage,link_types,pc_accounting_transferPerLength);
1559  loop(acclinks,
1560  accounting_transferPerLength(indicator,linksModel,transfer_techs,vintage,link_types,pc_accounting_transferPerLength)
1561      $sum(acclinksData$(map_acclinksToCalc(acclinks,linksModel) and sameas(acclinks,acclinksData)
1562                              and accounting_transferPerLengthIn(indicator,acclinksData,transfer_techs,vintage,link_types,pc_accounting_transferPerLength)), 1)
1563      = sum(acclinksData$(map_acclinksToCalc(acclinks,linksModel) and sameas(acclinks,acclinksData)),
1564              accounting_transferPerLengthIn(indicator,acclinksData,transfer_techs,vintage,link_types,pc_accounting_transferPerLength));
1565  );
1566   
1567  accounting_transferPerLength(indicator,linksModel,transfer_techs,vintage,link_types,pc_accounting_transferPerLength)
1568      $accounting_transferPerLengthAgg(indicator,linksModel,transfer_techs,vintage,link_types,pc_accounting_transferPerLength)
1569      = accounting_transferPerLengthAgg(indicator,linksModel,transfer_techs,vintage,link_types,pc_accounting_transferPerLength);
1570   
1571  * option kill %paramName%Nonzero %paramName%Chk %paramName%Agg
BATINCLUDE C:\Local\REMix\framework\remix\framework\model\source\battools\aggregateAccountingMean.gms
1573  * SPDX-FileCopyrightText: Copyright (c) 2023 German Aerospace Center (DLR)
1574  * SPDX-License-Identifier: BSD-3-Clause
1575   
1577   
1579   
1580  set accounting_sourcesinkFlowNonzero(indicator,accnodesData,years,sourcesink_techs,commodity);
1581  accounting_sourcesinkFlowNonzero(indicator,accnodesData,years,sourcesink_techs,commodity)
1582      $sum(pc_accounting_sourcesinkFlow$accounting_sourcesinkFlowIn(indicator,accnodesData,years,sourcesink_techs,commodity,pc_accounting_sourcesinkFlow), 1)
1583      = yes;
1584   
1586   
1587  parameter accounting_sourcesinkFlowAgg(indicator,nodesModel,years,sourcesink_techs,commodity,pc_accounting_sourcesinkFlow);
1588  accounting_sourcesinkFlowAgg(indicator,nodesModel,years,sourcesink_techs,commodity,pc_accounting_sourcesinkFlow)
1589      $sum((nodesData,accnodesData)
1590              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1591                  and accounting_sourcesinkFlowNonzero(indicator,accnodesData,years,sourcesink_techs,commodity)), 1)
1592      = sum((nodesData,accnodesData)
1593              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1594                  and accounting_sourcesinkFlowNonzero(indicator,accnodesData,years,sourcesink_techs,commodity)),
1595          accounting_sourcesinkFlowIn(indicator,accnodesData,years,sourcesink_techs,commodity,pc_accounting_sourcesinkFlow))
1596      / sum((nodesData,accnodesData)
1597              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1598                  and accounting_sourcesinkFlowNonzero(indicator,accnodesData,years,sourcesink_techs,commodity)),
1599          1);
1600   
1601  parameter accounting_sourcesinkFlow(indicator,nodesModel,years,sourcesink_techs,commodity,pc_accounting_sourcesinkFlow);
1602  loop(accnodes,
1603  accounting_sourcesinkFlow(indicator,nodesModel,years,sourcesink_techs,commodity,pc_accounting_sourcesinkFlow)
1604      $sum(accnodesData$(map_accnodesToCalc(accnodes,nodesModel) and sameas(accnodes,accnodesData)
1605                              and accounting_sourcesinkFlowIn(indicator,accnodesData,years,sourcesink_techs,commodity,pc_accounting_sourcesinkFlow)), 1)
1606      = sum(accnodesData$(map_accnodesToCalc(accnodes,nodesModel) and sameas(accnodes,accnodesData)),
1607              accounting_sourcesinkFlowIn(indicator,accnodesData,years,sourcesink_techs,commodity,pc_accounting_sourcesinkFlow));
1608  );
1609   
1610  accounting_sourcesinkFlow(indicator,nodesModel,years,sourcesink_techs,commodity,pc_accounting_sourcesinkFlow)
1611      $accounting_sourcesinkFlowAgg(indicator,nodesModel,years,sourcesink_techs,commodity,pc_accounting_sourcesinkFlow)
1612      = accounting_sourcesinkFlowAgg(indicator,nodesModel,years,sourcesink_techs,commodity,pc_accounting_sourcesinkFlow);
1613   
1614  * option kill %paramName%Nonzero %paramName%Chk %paramName%Agg
1615   
1616  parameter accounting_indicatorBounds_links(linksModel,years,indicator,pc_accounting_indicatorBounds_links);
1617  accounting_indicatorBounds_links(linksModelToCalc,yearsToCalc,indicator,pc_accounting_indicatorBounds_links)
1618      = sum((linksData)$sameas(linksModelToCalc,linksData),
1619              accounting_indicatorBounds_linksIn(linksData,yearsToCalc,indicator,pc_accounting_indicatorBounds_links));
1620   
1621  accounting_indicatorBounds_links(linksModelToCalc,yearsToCalc,indicator,pc_accounting_indicatorBounds_links)
1622      = sum((linksData)$links_aggregate(linksModelToCalc,linksData),
1623              accounting_indicatorBounds_linksIn(linksData,yearsToCalc,indicator,pc_accounting_indicatorBounds_links));
1624   
1625  parameter accounting_indicatorBounds(accNodesModel,accYears,indicator,pc_accounting_indicatorBounds);
1626  accounting_indicatorBounds(accNodesModel,accYears,indicator,pc_accounting_indicatorBounds)
1627      = sum (accNodesData$sameas(accNodesModel,accNodesData),
1628          accounting_indicatorBoundsIn(accNodesData,accYears,indicator,pc_accounting_indicatorBounds));
1629   
1630  accounting_indicatorBounds(accNodesModel,accYears,indicator,pc_accounting_indicatorBounds)
1631      $(sum (nodesModel$sameas(accNodesModel,nodesModel), 1) > 0)
1632      = sum ((accNodesData,nodesData,nodesModel)
1633              $(aggregateNodesModel(nodesData,nodesModel) and sameas(accNodesModel,nodesModel) and sameas(accNodesData,nodesData)),
1634          accounting_indicatorBoundsIn(accNodesData,accYears,indicator,pc_accounting_indicatorBounds));
1635   
1636  set accounting_perIndicatorNonzero(indicator,indicator_a,accNodesData,accYears);
1637  accounting_perIndicatorNonzero(indicator,indicator_a,accNodesData,accYears)
1638      $sum(pc_accounting_perIndicator$accounting_perIndicatorIn(indicator,indicator_a,accNodesData,accYears,pc_accounting_perIndicator), 1)
1639      = yes;
1640   
1641  parameter accounting_perIndicatorAgg(indicator,indicator_a,nodesModel,accYears,pc_accounting_perIndicator);
1642  accounting_perIndicatorAgg(indicator,indicator_a,nodesModel,accYears,pc_accounting_perIndicator)
1643      $sum((nodesData,accnodesData)
1644              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1645                  and accounting_perIndicatorNonzero(indicator,indicator_a,accnodesData,accYears)), 1)
1646      = sum((nodesData,accnodesData)
1647              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1648                  and accounting_perIndicatorNonzero(indicator,indicator_a,accnodesData,accYears)),
1649          accounting_perIndicatorIn(indicator,indicator_a,accnodesData,accYears,pc_accounting_perIndicator))
1650      / sum((nodesData,accnodesData)
1651              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1652                  and accounting_perIndicatorNonzero(indicator,indicator_a,accnodesData,accYears)),
1653          1);
1654   
1655  parameter accounting_perIndicator(indicator,indicator_a,accNodesModel,accYears,pc_accounting_perIndicator);
1656   
1657  loop(accNodes,
1658  accounting_perIndicator(indicator,indicator_a,accNodesModel,accYears,pc_accounting_perIndicator)
1659      $(sum(accNodesData$(sameas(accNodes,accNodesData)
1660              and accounting_perIndicatorIn(indicator,indicator_a,accNodesData,"horizon",pc_accounting_perIndicator)), 1)
1661          and map_accNodes(accNodesModel,accNodes)
1662              )
1663      = sum(accNodesData$(sameas(accNodes,accNodesData)),
1664              accounting_perIndicatorIn(indicator,indicator_a,accNodesData,"horizon",pc_accounting_perIndicator));
1665   
1666  accounting_perIndicator(indicator,indicator_a,accNodesModel,accYears,pc_accounting_perIndicator)
1667      $(sum(accNodesData$(sameas(accNodes,accNodesData)
1668              and accounting_perIndicatorIn(indicator,indicator_a,accNodesData,accYears,pc_accounting_perIndicator)), 1)
1669          and map_accNodes(accNodesModel,accNodes)
1670          and not sameas(accYears, "horizon"))
1671      = sum(accNodesData$(sameas(accNodes,accNodesData)),
1672              accounting_perIndicatorIn(indicator,indicator_a,accNodesData,accYears,pc_accounting_perIndicator));
1673  );
1674   
1675  accounting_perIndicator(indicator,indicator_a,accNodesModel,accYears,pc_accounting_perIndicator)
1676      $sum(nodesModel$(accounting_perIndicatorAgg(indicator,indicator_a,nodesModel,"horizon",pc_accounting_perIndicator)
1677          and sameas(accNodesModel,nodesModel)), 1)
1678      = sum(nodesModel$sameas(accNodesModel,nodesModel),
1679          accounting_perIndicatorAgg(indicator,indicator_a,nodesModel,"horizon",pc_accounting_perIndicator));
1680   
1681  accounting_perIndicator(indicator,indicator_a,accNodesModel,accYears,pc_accounting_perIndicator)
1682      $sum(nodesModel$(accounting_perIndicatorAgg(indicator,indicator_a,nodesModel,accYears,pc_accounting_perIndicator)
1683          and sameas(accNodesModel,nodesModel) and not sameas(accYears, "horizon")), 1)
1684      = sum(nodesModel$sameas(accNodesModel,nodesModel),
1685          accounting_perIndicatorAgg(indicator,indicator_a,nodesModel,accYears,pc_accounting_perIndicator));
1686   
1687   
1688  * Make sure all required indicators end up in the model
1689  set activeIndicators(accNodesModel,accYears,indicator);
1690  activeIndicators(accNodesModel,accYears,indicator)
1691     $((accounting_indicatorBounds(accNodesModel,accYears,indicator,"obj") <> 0
1694        or accounting_indicatorBounds(accNodesModel,accYears,indicator,"useFixed") <> 0
1695        or accounting_indicatorBounds(accNodesModel,accYears,indicator,"useLower") <> 0
1696        or accounting_indicatorBounds(accNodesModel,accYears,indicator,"useUpper") <> 0 )
1697          and not accounting_indicatorBounds(accNodesModel,accYears,indicator,"isVariable"))
1698     = yes;
1699   
1700  set activeIndicators_links(linksModel,years,indicator);
1701  activeIndicators_links(linksModelToCalc,yearsToCalc,indicator)
1702     $(accounting_indicatorBounds_links(linksModelToCalc,yearsToCalc,indicator,"useFixed") <> 0
1703        or accounting_indicatorBounds_links(linksModelToCalc,yearsToCalc,indicator,"useLower") <> 0
1704        or accounting_indicatorBounds_links(linksModelToCalc,yearsToCalc,indicator,"useUpper") <> 0 )
1705     = yes;
1706   
1707  set variableIndicators(accNodesModel,accYears,indicator);
1708  variableIndicators(accNodesModel,accYears,indicator)
1709     $(accounting_indicatorBounds(accNodesModel,accYears,indicator,"obj") = 0
1710        and accounting_indicatorBounds(accNodesModel,accYears,indicator,"isVariable"))
1711     = yes;
1712   
1713  * Calculate length of years and discount rates per indicator
1714  parameter yearFactor(accNodesModel,accYears,indicator,accYears);
1715  yearFactor(accNodesModel,accYears,indicator,accYears_a)
1716      $(map_accYears(accYears_a,accYears)
1717          and sum(yearsToCalc$(sameas(yearsToCalc,accYears_a)), 1))
1718      = 1;
1719   
1720  yearFactor(accNodesModel,accYears,indicator,accYears_a)
1721      $(map_accYears(accYears_a,accYears)
1722          and sum(yearsToCalc$(sameas(yearsToCalc,accYears_a)), 1)
1723          and accounting_indicatorBounds(accNodesModel,accYears,indicator,"integral"))
1724      = sum(yearsToCalc$sameas(accYears_a,yearsToCalc), yearsLen(yearsToCalc));
1725   
1726  yearFactor(accNodesModel,accYears,indicator,accYears_a)
1727      $(map_accYears(accYears_a,accYears)
1728          and sum(yearsToCalc$(sameas(yearsToCalc,accYears_a)), 1)
1729          and accounting_indicatorBounds(accNodesModel,accYears,indicator,"integral")
1730          and accounting_indicatorBounds(accNodesModel,accYears,indicator,"endyear")
1731          and yearFactor(accNodesModel,accYears,indicator,accYears_a) = inf)
1732      = accounting_indicatorBounds(accNodesModel,accYears,indicator,"endyear");
1733   
1734  yearFactor(accNodesModel,accYears,indicator,accYears_a)
1735      $(map_accYears(accYears_a,accYears)
1736          and sum(yearsToCalc$(sameas(yearsToCalc,accYears_a)), 1)
1737          and accounting_indicatorBounds(accNodesModel,accYears,indicator,"integral")
1738          and accounting_indicatorBounds(accNodesModel,accYears,indicator,"discount"))
1739      = yearFactor(accNodesModel,accYears,indicator,accYears_a)
1740          * (1 - accounting_indicatorBounds(accNodesModel,accYears,indicator,"discount"))
1741                  ** (accYears_a.val - smin(yearsToCalc, yearsToCalc.val));
1742   
1743   
1744  * ==== calculate compound indicators for the optimization ====
1745  scalar compIndicators_pre;
1746  scalar compIndicators_post;
1747   
1748  parameter compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a);
1749  compoundIndicators(accNodesModel,accYears,indicator,accNodesModel,accYears,indicator)
1750      $activeIndicators(accNodesModel,accYears,indicator) = 1;
1751   
1752  set compoundIndicators_act(accNodesModel,accYears,indicator);
1753  option compoundIndicators_act < compoundIndicators;
1754   
1755  parameter compoundIndicatorsExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa);
1756  parameter compoundIndicatorsExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a);
1757  compoundIndicatorsExt(accNodesModel,accYears,indicator,accNodesModel,accYears,indicator,accNodesModel,accYears,indicator)
1758      $compoundIndicators_act(accNodesModel,accYears,indicator) = 1;
1759   
1760  compIndicators_pre = 0;
1761  compIndicators_post = 1;
1762   
1763  option sparseval = 1;
1764  while(compIndicators_pre < compIndicators_post,
1765      compIndicators_pre = sum((accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa)
1766          $compoundIndicatorsExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa), 1);
1767   
1768      compoundIndicatorsExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa)
1769          $(compoundIndicators_act(accNodesModel,accYears,indicator)
1770              and compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
1771              and not accounting_indicatorBounds(accNodesModel_a,accYears_a,indicator_a,"isVariable")
1772              and map_accNodes(accNodesModel_aa,accNodesModel_a)
1773              and map_accYears(accYears_aa,accYears_a))
1774          = compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
1775              * accounting_perIndicator(indicator_a,indicator_aa,accNodesModel_aa,accYears_aa,"perIndicator");
1776   
1777      option compoundIndicatorsExt_r < compoundIndicatorsExt;
1778   
1779      compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa)
1780          $(compoundIndicators_act(accNodesModel,accYears,indicator)
1781              and sum((accNodesModel_a,accYears_a,indicator_a)
1782                      $compoundIndicatorsExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a), 1) = 1)
1783          = sum((accNodesModel_a,accYears_a,indicator_a)
1784                  $(compoundIndicatorsExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a)),
1785              compoundIndicatorsExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a));
1786   
1787      compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa)
1788          $(compoundIndicators_act(accNodesModel,accYears,indicator)
1789              and sum((accNodesModel_a,accYears_a,indicator_a)
1790                      $compoundIndicatorsExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a), 1) > 1)
1791          = sum((accNodesModel_a,accYears_a,indicator_a)
1792                  $(compoundIndicatorsExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a)
1793                      and not (sameas(accNodesModel, accNodesModel_a) and sameas(accYears, accYears_a) and sameas(indicator, indicator_a))),
1794              compoundIndicatorsExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a))
1795          / sum((accNodesModel_a,accYears_a,indicator_a)
1796                  $(compoundIndicatorsExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a)
1797                      and not (sameas(accNodesModel, accNodesModel_a) and sameas(accYears, accYears_a) and sameas(indicator, indicator_a))), 1);
1798   
1799      option compoundIndicators_act < compoundIndicators;
1800      compIndicators_post = sum((accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa)
1801          $compoundIndicatorsExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa), 1);
1802  );
1803  option sparseval = 0;
1804   
1805  * map to sub-years and sub-nodes
1806  compoundIndicatorsExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_a)
1807      $(compoundIndicators_act(accNodesModel,accYears,indicator)
1808          and compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
1809          and map_accYears(accYears_aa,accYears_a)
1810          and map_accNodes(accNodesModel_aa,accNodesModel_a))
1811      = compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
1812          * yearFactor(accNodesModel,accYears,indicator,accYears_aa);
1813   
1814  * Remove all accounting regions and accounting years
1815  compoundIndicatorsExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa)
1816      $(compoundIndicatorsExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa)
1817          and not accounting_indicatorBounds(accNodesModel_aa,accYears_aa,indicator_aa,"isVariable")
1818          and sum(accNodes$(sameas(accNodes,accNodesModel_aa)), 1)
1819              or sameas("horizon",accYears_aa))
1820      = 0;
1821   
1822  * Map from extended parameter to final parameter
1823  option compoundIndicatorsExt_r < compoundIndicatorsExt;
1824  compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa)
1825      $(compoundIndicators_act(accNodesModel,accYears,indicator)
1826          and sum((accNodesModel_a,accYears_a,indicator_a)
1827                  $compoundIndicatorsExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a), 1) = 1)
1828      = sum((accNodesModel_a,accYears_a,indicator_a)
1829              $(compoundIndicatorsExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a)),
1830          compoundIndicatorsExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a));
1831   
1832  compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa)
1833      $(compoundIndicators_act(accNodesModel,accYears,indicator)
1834          and sum((accNodesModel_a,accYears_a,indicator_a)
1835                  $compoundIndicatorsExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a), 1) > 1)
1836      = sum((accNodesModel_a,accYears_a,indicator_a)
1837              $(compoundIndicatorsExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a)
1838                  and not (sameas(accNodesModel, accNodesModel_a) and sameas(accYears, accYears_a) and sameas(indicator, indicator_a))),
1839          compoundIndicatorsExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a))
1840      / sum((accNodesModel_a,accYears_a,indicator_a)
1841              $(compoundIndicatorsExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a)
1842                  and not (sameas(accNodesModel, accNodesModel_a) and sameas(accYears, accYears_a) and sameas(indicator, indicator_a))), 1);
1843   
1844  * Remove all accounting regions and accounting years
1845  compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
1846      $(compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
1847          and not accounting_indicatorBounds(accNodesModel_a,accYears_a,indicator_a,"isVariable")
1848          and (sum(accNodes$(sameas(accNodes,accNodesModel_a)), 1)
1849              or sameas("horizon",accYears_a)))
1850      = 0;
1851   
1852  * Remove all slack indicators except the ones declared in indicatorBounds
1853  compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
1854      $(compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
1855          and sum((accNodesModel_aa,accYears_aa)$accounting_indicatorBounds(accNodesModel_aa,accYears_aa,indicator_a,"isVariable"), 1)
1856          and not accounting_indicatorBounds(accNodesModel_a,accYears_a,indicator_a,"isVariable"))
1857      = 0;
1858   
1859  * ==== compound indicators for the post calculation ====
1860  parameter compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a);
1861  compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel,accYears,indicator)
1862      $(sum(nodesModelToCalc$map_accNodesToCalc(accNodesModel,nodesModelToCalc), 1)
1863          and sum(yearsToCalc$map_accYearsToCalc(accYears,yearsToCalc), 1)) = 1;
1864   
1865  set compoundIndicatorsFull_act(accNodesModel,accYears,indicator);
1866  option compoundIndicatorsFull_act < compoundIndicatorsFull;
1867   
1868  parameter compoundIndicatorsFullExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa);
1869  parameter compoundIndicatorsFullExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a);
1870  compoundIndicatorsFullExt(accNodesModel,accYears,indicator,accNodesModel,accYears,indicator,accNodesModel,accYears,indicator) = 1;
1871   
1872  compIndicators_pre = 0;
1873  compIndicators_post = 1;
1874   
1875  option sparseval = 1;
1876  while(compIndicators_pre < compIndicators_post,
1877      compIndicators_pre = sum((accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa)
1878          $compoundIndicatorsFullExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa), 1);
1879   
1880      compoundIndicatorsFullExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa)
1881          $(compoundIndicatorsFull_act(accNodesModel,accYears,indicator)
1882              and compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
1883              and not accounting_indicatorBounds(accNodesModel_a,accYears_a,indicator_a,"isVariable")
1884              and map_accNodes(accNodesModel_aa,accNodesModel_a)
1885              and map_accYears(accYears_aa,accYears_a))
1886          = compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
1887              * accounting_perIndicator(indicator_a,indicator_aa,accNodesModel_aa,accYears_aa,"perIndicator");
1888   
1889      option compoundIndicatorsFullExt_r < compoundIndicatorsFullExt;
1890   
1891      compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa)
1892          $(compoundIndicatorsFull_act(accNodesModel,accYears,indicator)
1893              and sum((accNodesModel_a,accYears_a,indicator_a)
1894                      $compoundIndicatorsFullExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a), 1) = 1)
1895          = sum((accNodesModel_a,accYears_a,indicator_a)
1896                  $(compoundIndicatorsFullExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a)),
1897              compoundIndicatorsFullExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a));
1898   
1899      compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa)
1900          $(compoundIndicatorsFull_act(accNodesModel,accYears,indicator)
1901              and sum((accNodesModel_a,accYears_a,indicator_a)
1902                      $compoundIndicatorsFullExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a), 1) > 1)
1903          = sum((accNodesModel_a,accYears_a,indicator_a)
1904                  $(compoundIndicatorsFullExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a)
1905                      and not (sameas(accNodesModel, accNodesModel_a) and sameas(accYears, accYears_a) and sameas(indicator, indicator_a))),
1906              compoundIndicatorsFullExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a))
1907          / sum((accNodesModel_a,accYears_a,indicator_a)
1908                  $(compoundIndicatorsFullExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a)
1909                      and not (sameas(accNodesModel, accNodesModel_a) and sameas(accYears, accYears_a) and sameas(indicator, indicator_a))), 1);
1910   
1911      option compoundIndicatorsFull_act < compoundIndicatorsFull;
1912      compIndicators_post = sum((accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa)
1913          $compoundIndicatorsFullExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa), 1);
1914  );
1915  option sparseval = 0;
1916   
1917  * map to sub-years and sub-nodes
1918  compoundIndicatorsFullExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_a)
1919      $(compoundIndicatorsFull_act(accNodesModel,accYears,indicator)
1920          and compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
1921          and map_accYears(accYears_aa,accYears_a)
1922          and map_accNodes(accNodesModel_aa,accNodesModel_a))
1923      = compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
1924          * yearFactor(accNodesModel,accYears,indicator,accYears_aa);
1925   
1926  * Remove all accounting regions and accounting years
1927  compoundIndicatorsFullExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa)
1928      $(compoundIndicatorsFullExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa)
1929          and not accounting_indicatorBounds(accNodesModel_aa,accYears_aa,indicator_aa,"isVariable")
1930          and sum(accNodes$(sameas(accNodes,accNodesModel_aa)), 1)
1931              or sameas("horizon",accYears_aa))
1932      = 0;
1933   
1934  * Map from extended parameter to final parameter
1935  option compoundIndicatorsFullExt_r < compoundIndicatorsFullExt;
1936  compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa)
1937      $(compoundIndicatorsFull_act(accNodesModel,accYears,indicator)
1938          and sum((accNodesModel_a,accYears_a,indicator_a)
1939                  $compoundIndicatorsFullExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a), 1) = 1)
1940      = sum((accNodesModel_a,accYears_a,indicator_a)
1941              $(compoundIndicatorsFullExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a)),
1942          compoundIndicatorsFullExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a));
1943   
1944  compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa)
1945      $(compoundIndicatorsFull_act(accNodesModel,accYears,indicator)
1946          and sum((accNodesModel_a,accYears_a,indicator_a)
1947                  $compoundIndicatorsFullExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a), 1) > 1)
1948      = sum((accNodesModel_a,accYears_a,indicator_a)
1949              $(compoundIndicatorsFullExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a)
1950                  and not (sameas(accNodesModel, accNodesModel_a) and sameas(accYears, accYears_a) and sameas(indicator, indicator_a))),
1951          compoundIndicatorsFullExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a))
1952      / sum((accNodesModel_a,accYears_a,indicator_a)
1953              $(compoundIndicatorsFullExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a)
1954                  and not (sameas(accNodesModel, accNodesModel_a) and sameas(accYears, accYears_a) and sameas(indicator, indicator_a))), 1);
1955   
1956  * Remove all accounting regions and accounting years
1957  compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
1958      $(compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
1959          and not accounting_indicatorBounds(accNodesModel_a,accYears_a,indicator_a,"isVariable")
1960          and (sum(accNodes$(sameas(accNodes,accNodesModel_a)), 1)
1961              or sameas("horizon",accYears_a)))
1962      = 0;
1963   
1964  * Remove all slack indicators except the ones declared in indicatorBounds
1965  compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
1966      $(compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
1967          and sum((accNodesModel_aa,accYears_aa)$accounting_indicatorBounds(accNodesModel_aa,accYears_aa,indicator_a,"isVariable"), 1)
1968          and not accounting_indicatorBounds(accNodesModel_a,accYears_a,indicator_a,"isVariable"))
1969      = 0;
1970   
1971  * Check if the objective value and optimization sense is set correctly
1972  scalar opti_values, opti_sense;
1973  opti_values = sum((accNodesModel,accYears,indicator)$(accounting_indicatorBounds(accNodesModel,accYears,indicator,"obj") <> 0), 1);
1974  opti_sense = sum((accNodesModel,accYears,indicator), accounting_indicatorBounds(accNodesModel,accYears,indicator,"obj"));
1975  abort$(opti_values < 1)
1976      "Accounting: No indicator specified as objective value"
1977  abort$(opti_values > 1)
1978      "Accounting: Too many indicators specified as objective value"
1979  abort$(opti_sense <> -1 and opti_sense <> 1)
1980      "Accounting: Optimization sense has to be either -1 or 1"
INCLUDE    C:\Local\REMix\framework\remix\framework\model\source\accounting\annuities.gms
1982  * SPDX-FileCopyrightText: Copyright (c) 2023 German Aerospace Center (DLR)
1983  * SPDX-License-Identifier: BSD-3-Clause
1984   
1985  * Calculation of annuities
1986   
1987  abort$(sum((indicator,nodesModelToCalc,converter_techs,vintage)
1988          $(accounting_converterUnits(indicator,nodesModelToCalc,converter_techs,vintage,"useAnnuity") = 1
1989          and accounting_converterUnits(indicator,nodesModelToCalc,converter_techs,vintage,"amorTime") < 1), 1) > 0 )
1990      "Accounting: Some converter technologies use annuities but have no amortization time"
1991   
1992  parameter accounting_annuityFactor_converter(indicator,nodesModel,converter_techs,vintage);
1993  accounting_annuityFactor_converter(indicator,nodesModelToCalc,converter_techs,vintage)
1994      $accounting_converterUnits(indicator,nodesModelToCalc,converter_techs,vintage,"useAnnuity")
1995      =
1996      accounting_converterUnits(indicator,nodesModelToCalc,converter_techs,vintage,"interest")
1997          * (1 + accounting_converterUnits(indicator,nodesModelToCalc,converter_techs,vintage,"interest"))
1998          ** accounting_converterUnits(indicator,nodesModelToCalc,converter_techs,vintage,"amorTime")
1999      / ((1 + accounting_converterUnits(indicator,nodesModelToCalc,converter_techs,vintage,"interest"))
2000          ** accounting_converterUnits(indicator,nodesModelToCalc,converter_techs,vintage,"amorTime") - 1);
2001   
2002   
2003  abort$(sum((indicator,nodesModelToCalc,storage_techs,vintage)
2004          $(accounting_storageUnits(indicator,nodesModelToCalc,storage_techs,vintage,"useAnnuity") = 1
2005          and accounting_storageUnits(indicator,nodesModelToCalc,storage_techs,vintage,"amorTime") < 1), 1) > 0 )
2006      "Accounting: Some storage technologies use annuities but have no amortization time"
2007   
2008  parameter accounting_annuityFactor_storage(indicator,nodesModel,storage_techs,vintage);
2009  accounting_annuityFactor_storage(indicator,nodesModelToCalc,storage_techs,vintage)
2010      $accounting_storageUnits(indicator,nodesModelToCalc,storage_techs,vintage,"useAnnuity")
2011      =
2012      accounting_storageUnits(indicator,nodesModelToCalc,storage_techs,vintage,"interest")
2013          * (1 + accounting_storageUnits(indicator,nodesModelToCalc,storage_techs,vintage,"interest"))
2014          ** accounting_storageUnits(indicator,nodesModelToCalc,storage_techs,vintage,"amorTime")
2015      / ((1 + accounting_storageUnits(indicator,nodesModelToCalc,storage_techs,vintage,"interest"))
2016          ** accounting_storageUnits(indicator,nodesModelToCalc,storage_techs,vintage,"amorTime") - 1);
2017   
2018   
2019  abort$(sum((indicator,linksModelToCalc,transfer_techs,vintage)
2020          $(accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"useAnnuity") = 1
2021          and accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"amorTime") < 1), 1) > 0 )
2022      "Accounting: Some transfer technologies use annuities but have no amortization time"
2023   
2024  parameter accounting_annuityFactor_transferLink(indicator,linksModel,transfer_techs,vintage);
2025  accounting_annuityFactor_transferLink(indicator,linksModelToCalc,transfer_techs,vintage)
2026      $accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"useAnnuity")
2027      =
2028      accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"interest")
2029          * (1 + accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"interest"))
2030          ** accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"amorTime")
2031      / ((1 + accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"interest"))
2032          ** accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"amorTime") - 1);
2033   
2034   
2035   
2036  abort$(sum((indicator,linksModelToCalc,transfer_techs,vintage,link_types)
2037          $(accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"useAnnuity") = 1
2038          and accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"amorTime") < 1), 1) > 0 )
2039      "Accounting: Some transfer-per-length technologies use annuities but have no amortization time"
2040   
2041  parameter accounting_annuityFactor_transferDistance(indicator,linksModel,transfer_techs,vintage,link_types);
2042  accounting_annuityFactor_transferDistance(indicator,linksModelToCalc,transfer_techs,vintage,link_types) = 1;
2043   
2044  accounting_annuityFactor_transferDistance(indicator,linksModelToCalc,transfer_techs,vintage,link_types)
2045      $accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"useAnnuity")
2046      =
2047      accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"interest")
2048          * (1 + accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"interest"))
2049          ** accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"amorTime")
2050      / ((1 + accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"interest"))
2051          ** accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"amorTime") - 1);
2052   
INCLUDE    C:\Local\REMix\framework\remix\framework\model\source\methods\mga_pre.gms
2054  * SPDX-FileCopyrightText: Copyright (c) 2023 German Aerospace Center (DLR)
2055  * SPDX-License-Identifier: BSD-3-Clause
2056   
INCLUDE    C:\Local\REMix\framework\remix\framework\model\source\methods\pareto_pre.gms
2060  * SPDX-FileCopyrightText: Copyright (c) 2023 German Aerospace Center (DLR)
2061  * SPDX-License-Identifier: BSD-3-Clause
2062   
INCLUDE    C:\Local\REMix\framework\remix\framework\model\source\postcalc\declaration.gms
2066  * SPDX-FileCopyrightText: Copyright (c) 2023 German Aerospace Center (DLR)
2067  * SPDX-License-Identifier: BSD-3-Clause
2068  * // # Output data
2069  * // This is the reference data model of the REMix output.
2070  * //
2071  * // ## Standard output
2074   
2081   
2083   
2084  set capType / "build", "decom", "total", "lowerLimit", "upperLimit", "total_degraded" /;
2085  set balanceType / "netto", "brutto", "positive", "negative", "flh" /;
2086  set profileType / "upper", "fixed", "lower" /;
2087  set r2a_has_converter_cost(indicator,nodesModel,years,techs,vintage,commodity);
2088   
2089  ** // OUTPUT: indicator_accounting | OEO_00000350:quantity value
2090  * // ### indicator_accounting
2091  * // Title: Accounting indicators Post-calculation
2092  parameter indicator_accounting(accNodesModel,accYears,indicator) "Post-calculation aggregated indicator accounting" ;
2093  * //
2094  ** // OUTPUT: indicator_accounting_ref | OEO_00000350:quantity value
2095  * // ### indicator_accounting_ref
2096  * // Title: Accounting indicators reference
2097  parameter indicator_accounting_ref(accNodesModel,accYears,indicator) "Indicator accounting optimization levels" ;
2098  * //
2099  ** // OUTPUT: indicator_accounting_comp | OEO_00000350:quantity value
2100  * // ### indicator_accounting_comp
2101  * // Title: Accounting indicators composition
2102  parameter indicator_accounting_comp(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a) "Indicator accounting with other indicator composition" ;
2103  * //
2104  ** // OUTPUT: indicator_accounting_detailed | OEO_00000350:quantity value
2105  * // ### indicator_accounting_detailed
2106  * // Title: Accounting indicators detail
2107  parameter indicator_accounting_detailed(indicator,nodesModel,years,techs) "Indicator accounting with technological composition" ;
2108  * //
2109  ** // OUTPUT: indicator_accounting_links | OEO_00000350:quantity value
2110  * // ### indicator_accounting_links
2111  * // Title: Accounting indicators per transfer link
2112  parameter indicator_accounting_links(indicator,nodesModel,nodesModel_a,linksModel,years,techs) "Indicator accounting of transfer technologies" ;
2113  * //
2114  parameter converter_ratedInput(techs,vintage,commodity);
2115  parameter converter_ratedOutput(techs,vintage,commodity);
2116  parameter converter_ratedOutput_min(nodesModel,years,techs,commodity);
2117  parameter converter_ratedOutput_max(nodesModel,years,techs,commodity);
2118   
2119  ** // OUTPUT: converter_caps | OEO_00010257:power capacity
2120  * // ### converter_caps
2121  * // Title: Coverter capacities post-calculation
2122  parameter converter_caps(accNodesModel,accYears,techs,commodity,capType) "Converter capacities, aggregated total" ;
2123  * //
2124  parameter converter_caps_ext(accNodesModel,nodesModel,accYears,years,techs,vintage,commodity,capType);
2125   
2126  ** // OUTPUT: converter_units | OEO_00000350:quantity value
2127  * // ### converter_units
2128  * // Title: Coverter units post-calculation
2129  parameter converter_units(accNodesModel,accYears,techs,vintage,capType) "Converter units" ;
2130  * //
2131  parameter converter_units_ext(accNodesModel,nodesModel,accYears,years,techs,vintage,capType);
2132   
2133  parameter max_transfer_coefficient(techs,commodity);
2134  parameter min_transfer_coefficient(techs,commodity);
2135  ** // OUTPUT: transfer_links | OEO_00000350:quantity value
2136  * // ### transfer_links
2137  * // Title: Transfer post-calculation
2138  parameter transfer_links(linksModel,years,techs,vintage,capType) "Transfer links" ;
2139  * //
2140  ** // OUTPUT: transfer_caps | OEO_00010257:power capacity
2141  * // ### transfer_caps
2142  * // Title: Transfer capacities post-calculation
2143  parameter transfer_caps(nodesModel_start,nodesModel_end,linksModel,years,techs,commodity,capType) "Transfer capacities, aggregated total" ;
2144  * //
2145  ** // OUTPUT: transfer_flows | OEO_00050019:energy amount value
2146  * // ### transfer_flows
2147  * // Title: Transfer hourly flows
2148  parameter transfer_flows(timeModel,nodesModel_start,nodesModel_end,linksModel,years,techs,commodity) "Hourly link flows" ;
2149  * //
2150  ** // OUTPUT: transfer_flows_annual | OEO_00050019:energy amount value
2151  * // ### transfer_flows_annual
2152  * // Title: Transfer annual flows
2153  parameter transfer_flows_annual(nodesModel_start,nodesModel_end,linksModel,years,techs,commodity,balanceType) "Annual link flows" ;
2154  * //
2155  ** // OUTPUT: transfer_losses | OEO_00050019:energy amount value
2156  * // ### transfer_losses
2157  * // Title: Transfer hourly losses
2158  parameter transfer_losses(timeModel,nodesModel_start,nodesModel_end,linksModel,years,techs,commodity) "Hourly link losses" ;
2159  * //
2160  ** // OUTPUT: transfer_losses_annual | OEO_00050019:energy amount value
2161  * // ### transfer_losses_annual
2162  * // Title: Transfer annual losses
2163  parameter transfer_losses_annual(nodesModel_start,nodesModel_end,linksModel,years,techs,commodity,balanceType) "Annual link losses" ;
2164  * //
2165  parameter storage_size_max(nodesModel,years,techs,commodity);
2166  parameter storage_size_min(nodesModel,years,techs,commodity);
2167  ** // OUTPUT: storage_units |  OEO_00000350:quantity value
2168  * // ### storage_units
2169  * // Title: Storage units post-calculation
2170  parameter storage_units(accNodesModel,accYears,techs,vintage,capType) "Storage units" ;
2171  * //
2172  parameter storage_units_ext(accNodesModel,nodesModel,accYears,years,techs,vintage,capType);
2173  ** // OUTPUT: storage_caps | OEO_00230000:energy storage capacity
2174  * // ### storage_caps
2175  * // Title: Storage capacities post-calculation
2176  parameter storage_caps(accNodesModel,accYears,techs,commodity,capType) "Storage capacities, aggregated total" ;
2177  * //
2178  parameter storage_caps_ext(accNodesModel,nodesModel,accYears,years,techs,vintage,commodity,capType);
2179  ** // OUTPUT: storage_level_out | OEO_00330012:energy storage content
2180  * // ### storage_level_out
2181  * // Title: Storage level
2182  parameter storage_level_out(timeModel,accNodesModel,accYears,techs,commodity) "Storage level per time step" ;
2183  * //
2184  parameter storage_level_out_ext(timeModel,accNodesModel,nodesModel,accYears,years,techs,vintage,commodity);
2185  ** // OUTPUT: storage_flows | OEO_00050019:energy amount value
2186  * // ### storage_flows
2187  * // Title: Storage hourly flows
2188  parameter storage_flows(timeModel,accNodesModel,accYears,techs,commodity) "Storage flows per time step" ;
2189  * //
2190  parameter storage_flows_ext(timeModel,accNodesModel,nodesModel,accYears,years,techs,vintage,commodity);
2191  ** // OUTPUT: storage_flows_annual | OEO_00050019:energy amount value
2192  * // ### storage_flows_annual
2193  * // Title: Storage annual flows
2194  parameter storage_flows_annual(accNodesModel,accYears,techs,commodity,balanceType) "Aggregated storage flows" ;
2195  * //
2196  ** // OUTPUT: storage_losses_out | OEO_00050019:energy amount value
2197  * // ### storage_losses_out
2198  * // Title: Storage hourly losses
2199  parameter storage_losses_out(timeModel,accNodesModel,accYears,techs,commodity) "Storage losses per time step" ;
2200  * //
2201  ** // OUTPUT: storage_losses_annual | OEO_00050019:energy amount value
2202  * // ### storage_losses_annual
2203  * // Title: Storage annual losses
2204  parameter storage_losses_annual(accNodesModel,accYears,techs,commodity,balanceType) "Aggregated storage losses" ;
2205  * //
2206  ** // OUTPUT: commodity_balance | OEO_00000350:quantity value
2207  * // ### commodity_balance
2208  * // Title: Hourly commodity balance
2209  parameter commodity_balance(timeModel,accNodesModel,accYears,techs,commodity) "Commodity balances per model hour" ;
2210  parameter commodity_balance_ext(timeModel,accNodesModel,nodesModel,accYears,years,techs,vintage,commodity);
2211  * //
2212  ** // OUTPUT: commodity_balance_annual | OEO_00000350:quantity value
2213  * // ### commodity_balance_annual
2214  * // Title: Annual commodity balance
2215  parameter commodity_balance_annual(accNodesModel,accYears,techs,commodity,balanceType) "Aggregated commodity balances" ;
2216  * //
2217  ** // OUTPUT: marginals_sourcesink_profile | OEO_00040008:marginal cost
2218  * // ### marginals_sourcesink_profile
2219  * // Title: Source-sink marginals
2220  parameter marginals_sourcesink_profile(timeModel,nodesModel,years,techs,commodity) "Source and sink flow marginal values" ;
2221  * //
2222  ** // OUTPUT: marginals_balance | OEO_00040008:marginal cost
2223  * // ### marginals_balance
2224  * // Title: Nodel balance marginals
2225  parameter marginals_balance(timeModel,nodesModel,years,commodity) "Nodal balance marginal values" ;
2226  * //
2227  ** // OUTPUT: marginals_sourcesink_sum | OEO_00040008:marginal cost
2228  * // ### marginals_sourcesink_sum
2229  * // Title: Source-sink annual marginals
2230  parameter marginals_sourcesink_sum(nodesModel,years,techs,commodity) "Annual source and sink flow marginal values" ;
2231  * //
2232  ** // OUTPUT: marginals_indicator_bounds | OEO_00040008:marginal cost
2233  * // ### marginals_indicator_bounds
2234  * // Title: Indicator bounds marginals
2235  parameter marginals_indicator_bounds(accNodesModel,accYears,indicator) "Accounting indicator marginals" ;
2236  * //
2237  * // ## REMix-AMIRIS interface output
2238  * //
2239  ** // OUTPUT: r2a_annuity_cost_converter | OEO_00040009:cost
2240  * // ### r2a_annuity_cost_converter
2241  * // Title: Converter annuity cost
2242  parameter r2a_annuity_cost_converter(indicator,accNodesModel,accYears,techs,vintage,commodity) "Annuity cost of converters" ;
2243  * //
2244  ** // OUTPUT: r2a_spec_cost_converter | OEO_00040009:cost
2245  * // ### r2a_spec_cost_converter
2246  * // Title: Converter specific cost
2247  parameter r2a_spec_cost_converter(indicator,accNodesModel,accYears,techs,vintage,commodity) "Specific cost of converters" ;
2248  * //
2249  ** // OUTPUT: r2a_spec_cost_fuel | OEO_00040009:cost
2250  * // ### r2a_spec_cost_fuel
2251  * // Title: Commodity specific cost
2252  parameter r2a_spec_cost_fuel(indicator,accNodesModel,accYears,techs,commodity) "Specific cost of commodities, used particularly for fuels" ;
2253  * //
2254  ** // OUTPUT: r2a_spec_cost_indicator | OEO_00040009:cost
2255  * // ### r2a_spec_cost_indicator
2256  * // Title: Indicator specific cost
2257  parameter r2a_spec_cost_indicator(indicator,indicator_a,accNodesModel,accYears) "Specific indicator cost" ;
2258  * //
2259  ** // OUTPUT: r2a_converter_efficiencies | OEO_00140050:efficiency value
2260  * // ### r2a_converter_efficiencies
2261  * // Title: Indicator specific cost
2262  parameter r2a_converter_efficiencies(techs,vintage,activity,commodity,commodity_a) "Converter-specific efficiency" ;
2263  * //
2264  ** // OUTPUT: r2a_converter_avail_factor | OEO_00000350:quantity value
2265  * // ### r2a_converter_avail_factor
2266  * // Title: Converter availability factor
2267  parameter r2a_converter_avail_factor(accNodesModel,accYears,techs,vintage) "Availability factor of converter technologies" ;
2268  parameter r2a_converter_avail_profile(timeModel,accNodesModel,accYears,techs,commodity,profileType) "Availability of converter technologies" ;
2269  parameter r2a_converter_avail_profile_ext(timeModel,accNodesModel,nodesModel,accYears,years,techs,vintage,commodity,profileType);
2270  * //
2271  ** // OUTPUT: r2a_storage_e2p | OEO_00000350:quantity value
2272  * // ### r2a_storage_e2p
2273  * // Title: E2P Storage
2274  parameter r2a_storage_e2p(accNodesModel,accYears,techs,vintage,commodity,capType) "Energy-to-power ratio" ;
2275  * //
2276  ** // OUTPUT: r2a_storage_selfdischarge | OEO_00000350:quantity value
2277  * // ### r2a_storage_selfdischarge
2278  * // Title: Storage self discharge rates
2279  parameter r2a_storage_selfdischarge(accNodesModel,accYears,techs,vintage,commodity);
2280   
INCLUDE    C:\Local\REMix\framework\remix\framework\model\source\loadgdx.gms
2284  * SPDX-FileCopyrightText: Copyright (c) 2023 German Aerospace Center (DLR)
2285  * SPDX-License-Identifier: BSD-3-Clause
2286   
2287  * ==== global settings ====
2289   
2291   
INCLUDE    C:\Local\REMix\framework\remix\framework\model\source\core\converter.gms
2293  * SPDX-FileCopyrightText: Copyright (c) 2023 German Aerospace Center (DLR)
2294  * SPDX-License-Identifier: BSD-3-Clause
2295   
2296  * // # core_converter
2297  * // The equations in this file describe the converters in the model.
2298   
2299  * // ## Advanced features
2300  * //
2301  * // You can find a more detailed explanation of the %curly_open%ref%curly_close%`MIP features <explanations_mip_label>`.
2302  ** // There is also a more detailed explanation on the modeling of outages at the %curly_open%ref%curly_close%`resilience section <explanations_resilience_label>`.
2303  * //
2304  * // In the following table you can see which modifications you have to make to your data to use the different features.
2305  * //
2306  * // | Feature | Modification |
2307  * // | ------ | ------ |
2308  * // | MIP expansion | The converter_tech_Parameter "mipUnits" has to be set to 1 in converter_techParam.dat for the technologies and years where descrete expansion is wanted |
2309  * // | Minimum up/downtime | The converter_tech_Parameters "minUptime" and/or "minDowntime" need to be set to the according amount of minimum time steps.Furthermore, the converter_tech_Parameter "mipDispatch" has to be set to 1 in converter_techParam.dat
2310  * // for the technologies and years where a minimum up- or downtime should be applied so that the units can be shut down. "mipUnits" will automatically be set to 1 |
2311  * // | Partial load | The converter_tech_Parameter "mipDispatch" has to be set to 1 in converter_techParam.dat for the technologies and years where you want to make use of the partial load feature. You also have to set a value to
2312  * // the converter_coefficient_parameters "minLoad" and/or "maxLoad" for the according technologies, vintages, activities and commodities. You can then for example set different "coefficient" values for each activity in converter_coefficient.dat |
2313  ** // | Outages | You have to include the converter_outageProfile.dat-file and while executing the model you have to set --method=resilience |
2314   
2315  * // ## %curly_open%ref%curly_close%`sets <remix_model_sets_label>`
2316  * //
2317  * // ### set_converter_techs.dat
2318  * // In this file all converter technologies are listed that can be used within your model.
2319  * //
2320  * // ### set_activities.dat
2321  * // All modes with which the converter technologies can be operated need to be added here.
2322  * // Examples: Charge (for the charging mode of a storage), Powergen (for the mode in which a converter produces electricity), Curtailment (for the mode in which a renewable power plant is shut down), …
2323  * // If you would like to use the partial load feature, all activity modes that should be available for this feature need to be defined here as well.
2324  * //
2325  * // ### set_commodities.dat
2326  * // In this file all commodities are listed that can be used and converted by the converter technologies.
2327  * // Examples: Electricity, Coal, Biomass, Hydrogen, …
2328   
2329  * // ## Variables
2330  * // {special_table_converter_variables}
3966   
3967  * ==== loading units from gdx file ====
3968   
3969  * Load units from gdx file
3971   
3972  * ==== calculation of mappings ====
3973   
3974  * Technologies with a lifeTime > 0 are available
3975  set converter_availTech(nodesModel,years,converter_techs,vintage);
3976  converter_availTech(nodesModel,years,converter_techs,vintage)
3977      $(vintage.val = smax(vintage_a$(vintage_a.val <= years.val
3978          and converter_techParam(converter_techs,vintage_a,"lifeTime") > 0), vintage_a.val)) = yes;
3979   
3980  * Technologies to optimize become unavailable if they have an unitsUpperLimit of 0
3981  converter_availTech(nodesModel,years,converter_techs,vintage)
3982      $(yearsToCalc(years) and converter_capacityParam(nodesModel,years,converter_techs,"unitsUpperLimit") = 0 ) = no;
3983   
3984  * Technologies already built become unavailable if they have an unitsBuild of 0
3985  converter_availTech(nodesModel,years,converter_techs,vintage)
3986      $( ( not yearsToCalc(years)) and converter_capacityParam(nodesModel,years,converter_techs,"unitsBuild") = 0 ) = no;
3987   
3988  * Used technologies are available technologies over their technical lifeTime
3989  set converter_usedTech(nodesModel,years,converter_techs,vintage);
3990  converter_usedTech(nodesModel,years,converter_techs,vintage)
3991      $(vintage.val <= years.val
3992          and years.val < smax(years_a$converter_availTech(nodesModel,years_a,converter_techs,vintage),
3993                                  years_a.val + converter_techParam(converter_techs,vintage,"lifeTime"))
3994          ) = yes;
3995   
3996  * Technologies have to be decomissioned in the interval of first avail + lifetime to last avail + lifetime
3997  set converter_decomTech(nodesModel,years,converter_techs,vintage);
3998  converter_decomTech(nodesModel,years,converter_techs,vintage)
3999    $(sum(years_a$converter_usedTech(nodesModel,years_a,converter_techs,vintage), 1)
4000      and sum(yearsToCalc
4001        $(sameas(years, yearsToCalc)
4002          and yearsToCalc.val >= smin(years_a$converter_availTech(nodesModel,years_a,converter_techs,vintage), years_a.val) + converter_techParam(converter_techs,vintage,"lifeTime")
4003          and yearsToCalc.val <= smax(years_a$converter_availTech(nodesModel,years_a,converter_techs,vintage), years_a.val) + converter_techParam(converter_techs,vintage,"lifeTime")), 1))
4004    = yes;
4005   
4006  * Extend the decom frame to the year after the last year of usedTech
4007  converter_decomTech(nodesModel,yearsToCalc,converter_techs,vintage)
4008    $(converter_usedTech(nodesModel,yearsToCalc-1,converter_techs,vintage)
4009      and converter_decomTech(nodesModel,yearsToCalc-1,converter_techs,vintage))
4010    = yes;
4011   
4012  * Mapping for used activities and commodities
4013  set converter_usedActCom(converter_techs,vintage,activity,commodity);
4014  option converter_usedActCom < converter_coefficient;
4015   
4016  set converter_usedAct(converter_techs,vintage,activity);
4017  option converter_usedAct < converter_usedActCom;
4018   
4019  set converter_usedCom(converter_techs,vintage,commodity);
4020  option converter_usedCom < converter_usedActCom;
4021   
4022  set converter_usedTechAct(nodesModel,years,converter_techs,vintage,activity);
4023  converter_usedTechAct(nodesModel,years,converter_techs,vintage,activity)
4024      $(converter_usedTech(nodesModel,years,converter_techs,vintage)
4025          and converter_usedAct(converter_techs,vintage,activity))
4026      = yes;
4027   
4028  set converter_useRampPos(nodesModel,years,converter_techs,vintage);
4029  converter_useRampPos(nodesModelToCalc,yearsToCalc,converter_techs,vintage)
4030    $(sum(indicator$accounting_converterStartup(indicator,nodesModelToCalc,converter_techs,vintage,"perRamp"), 1)
4031      or sum(indicator$accounting_converterStartup(indicator,nodesModelToCalc,converter_techs,vintage,"perRampPos"), 1))
4032    = 1;
4033   
4034  set converter_useRampNeg(nodesModel,years,converter_techs,vintage);
4035  converter_useRampNeg(nodesModelToCalc,yearsToCalc,converter_techs,vintage)
4036    $(sum(indicator$accounting_converterStartup(indicator,nodesModelToCalc,converter_techs,vintage,"perRamp"), 1)
4037      or sum(indicator$accounting_converterStartup(indicator,nodesModelToCalc,converter_techs,vintage,"perRampNeg"), 1))
4038    = 1;
4039   
4040   
4041  * ==== aggregation of profiles ====
4042   
4043  * derive upper and lower profiles then aggregate
4044  set converter_activity_hasProfileIn(nodesData,years,converter_techs,pc_converter_activityProfile);
4045  option converter_activity_hasProfileIn < converter_activityProfileIn;
4046   
4047  set converter_activity_hasProfile(nodesModel,years,converter_techs,pc_converter_activityProfile);
4048  converter_activity_hasProfile(nodesModelToCalc,yearsToCalc,converter_techs,pc_converter_activityProfile)
4049      = sum(nodesData$aggregateNodesModel(nodesData,nodesModelToCalc),
4050              converter_activity_hasProfileIn(nodesData,yearsToCalc,converter_techs,pc_converter_activityProfile));
4051   
4052  set converter_coefficient_hasProfileIn(nodesData,years,converter_techs,vintage,activity,commodity);
4053  option converter_coefficient_hasProfileIn < converter_coefficientProfileIn;
4054   
4055  set converter_coefficient_hasProfile(nodesModel,years,converter_techs,vintage,activity,commodity);
4056  converter_coefficient_hasProfile(nodesModelToCalc,yearsToCalc,converter_techs,vintage,activity,commodity)
4057      = sum(nodesData$aggregateNodesModel(nodesData,nodesModelToCalc),
4058              converter_coefficient_hasProfileIn(nodesData,yearsToCalc,converter_techs,vintage,activity,commodity));
4059   
4060  * aagregate time dimension
4061  parameter converter_activityProfileIn_aggTime(timeModel,nodesData,yearsToCalc,converter_techs,pc_converter_activityProfile);
4062  converter_activityProfileIn_aggTime(timeModelToCalc,nodesData,yearsToCalc,converter_techs,pc_converter_activityProfile)
4063    $converter_activity_hasProfileIn(nodesData,yearsToCalc,converter_techs,pc_converter_activityProfile)
4064    = sum(timeData$timeMapping(timeData,timeModelToCalc),
4065            converter_activityProfileIn(timeData,nodesData,yearsToCalc,converter_techs,pc_converter_activityProfile)
4066            / timeLength(timeModelToCalc));
4067  option clear = converter_activityProfileIn;
4068   
4069  * weighted average for a real sum of units upper limits, plain average if one region has an upper limit of inf
4070  parameter converter_activityProfile(timeModel,nodesModel,years,converter_techs,vintage,pc_converter_activityProfile);
4071  converter_activityProfile(timeModelToCalc,converter_usedTech(nodesModelToCalc,yearsToCalc,converter_techs,vintage),"upper")
4072      = converter_techParam(converter_techs,vintage,"activityUpperLimit");
4073  converter_activityProfile(timeModelToCalc,converter_usedTech(nodesModelToCalc,yearsToCalc,converter_techs,vintage),"lower")
4074      = converter_techParam(converter_techs,vintage,"activityLowerLimit");
4075   
4076   
4077  set converter_finiteUnitLimit(nodesModelToCalc,yearsToCalc,converter_techs);
4078  converter_finiteUnitLimit(nodesModelToCalc,yearsToCalc,converter_techs)
4079      = sum(nodesData$aggregateNodesModel(nodesData,nodesModelToCalc), converter_capacityParamIn(nodesData,yearsToCalc,converter_techs,"unitsUpperLimit")) > 0
4080          and sum(nodesData$aggregateNodesModel(nodesData,nodesModelToCalc), converter_capacityParamIn(nodesData,yearsToCalc,converter_techs,"unitsUpperLimit")) < inf;
4081   
4082  set converter_infiniteUnitLimit(nodesModelToCalc,yearsToCalc,converter_techs);
4083  converter_infiniteUnitLimit(nodesModelToCalc,yearsToCalc,converter_techs)
4084      = sum(nodesData$aggregateNodesModel(nodesData,nodesModelToCalc), converter_capacityParamIn(nodesData,yearsToCalc,converter_techs,"unitsUpperLimit")) = inf;
4085   
4086  converter_activityProfile(timeModelToCalc,converter_usedTech(nodesModelToCalc,yearsToCalc,converter_techs,vintage),pc_converter_activityProfile)
4087      $(converter_activity_hasProfile(nodesModelToCalc,yearsToCalc,converter_techs,pc_converter_activityProfile)
4088          and converter_finiteUnitLimit(nodesModelToCalc,yearsToCalc,converter_techs))
4089      = sum(nodesData$(aggregateNodesModel(nodesData,nodesModelToCalc)
4090                  and converter_capacityParamIn(nodesData,yearsToCalc,converter_techs,"unitsUpperLimit") < inf ),
4091                converter_activityProfileIn_aggTime(timeModelToCalc,nodesData,yearsToCalc,converter_techs,pc_converter_activityProfile)
4092                * converter_capacityParamIn(nodesData,yearsToCalc,converter_techs,"unitsUpperLimit"))
4093      / sum(nodesData$aggregateNodesModel(nodesData,nodesModelToCalc),
4094              converter_capacityParamIn(nodesData,yearsToCalc,converter_techs,"unitsUpperLimit"));
4095   
4096  converter_activityProfile(timeModelToCalc,converter_usedTech(nodesModelToCalc,yearsToCalc,converter_techs,vintage),pc_converter_activityProfile)
4097      $(converter_activity_hasProfile(nodesModelToCalc,yearsToCalc,converter_techs,pc_converter_activityProfile)
4098          and converter_infiniteUnitLimit(nodesModelToCalc,yearsToCalc,converter_techs))
4099      = sum(nodesData$(aggregateNodesModel(nodesData,nodesModelToCalc)
4100                  and converter_capacityParamIn(nodesData,yearsToCalc,converter_techs,"unitsUpperLimit") = inf),
4101                converter_activityProfileIn_aggTime(timeModelToCalc,nodesData,yearsToCalc,converter_techs,pc_converter_activityProfile)
4102                * converter_capacityParamIn(nodesData,yearsToCalc,converter_techs,"unitsUpperLimit"))
4103      / sum(nodesData$(aggregateNodesModel(nodesData,nodesModelToCalc)
4104                      and converter_capacityParamIn(nodesData,yearsToCalc,converter_techs,"unitsUpperLimit") = inf ),
4105              1);
4106  option clear = converter_activityProfileIn_aggTime;
4107   
4108  * for fixed profiles overwrite upper and lower profile
4109  converter_activityProfile(timeModelToCalc,nodesModelToCalc,yearsToCalc,converter_techs,vintage,"lower")
4110      $converter_activity_hasProfile(nodesModelToCalc,yearsToCalc,converter_techs,"fixed")
4111      = converter_activityProfile(timeModelToCalc,nodesModelToCalc,yearsToCalc,converter_techs,vintage,"fixed");
4112   
4113  converter_activityProfile(timeModelToCalc,nodesModelToCalc,yearsToCalc,converter_techs,vintage,"upper")
4114      $converter_activity_hasProfile(nodesModelToCalc,yearsToCalc,converter_techs,"fixed")
4115      = converter_activityProfile(timeModelToCalc,nodesModelToCalc,yearsToCalc,converter_techs,vintage,"fixed");
4116   
4117   
4118  * weighted average for a real sum of units upper limits, plain average if one region has an upper limit of inf
4119  parameter converter_coefficientProfile(timeModel,nodesModel,years,converter_techs,vintage,activity,commodity);
4120  converter_coefficientProfile(timeModelToCalc,converter_usedTechAct(nodesModelToCalc,yearsToCalc,converter_techs,vintage,activity),commodity)
4121      = converter_coefficient(converter_techs,vintage,activity,commodity,"coefficient");
4122   
4123  converter_coefficientProfile(timeModelToCalc,converter_usedTechAct(nodesModelToCalc,yearsToCalc,converter_techs,vintage,activity),commodity)
4124      $( converter_coefficient_hasProfile(nodesModelToCalc,yearsToCalc,converter_techs,vintage,activity,commodity)
4125          and converter_finiteUnitLimit(nodesModelToCalc,yearsToCalc,converter_techs) )
4126      = sum(nodesData$aggregateNodesModel(nodesData,nodesModelToCalc),
4127            sum(timeData$timeMapping(timeData,timeModelToCalc),
4128                    converter_coefficientProfileIn(timeData,nodesData,yearsToCalc,converter_techs,vintage,activity,commodity))
4129                / timeLength(timeModelToCalc)
4130              * converter_capacityParamIn(nodesData,yearsToCalc,converter_techs,"unitsUpperLimit") )
4131      / sum(nodesData$aggregateNodesModel(nodesData,nodesModelToCalc),
4132              converter_capacityParamIn(nodesData,yearsToCalc,converter_techs,"unitsUpperLimit"));
4133   
4134  converter_coefficientProfile(timeModelToCalc,converter_usedTechAct(nodesModelToCalc,yearsToCalc,converter_techs,vintage,activity),commodity)
4135      $( converter_coefficient_hasProfile(nodesModelToCalc,yearsToCalc,converter_techs,vintage,activity,commodity)
4136          and converter_infiniteUnitLimit(nodesModelToCalc,yearsToCalc,converter_techs))
4137      = sum(nodesData$(aggregateNodesModel(nodesData,nodesModelToCalc)
4138                      and converter_capacityParamIn(nodesData,yearsToCalc,converter_techs,"unitsUpperLimit") = inf ),
4139            sum(timeData$timeMapping(timeData,timeModelToCalc),
4140                    converter_coefficientProfileIn(timeData,nodesData,yearsToCalc,converter_techs,vintage,activity,commodity))
4141                / timeLength(timeModelToCalc))
4142      / sum(nodesData$(aggregateNodesModel(nodesData,nodesModelToCalc)
4143                      and converter_capacityParamIn(nodesData,yearsToCalc,converter_techs,"unitsUpperLimit") = inf ), 1);
4144   
4145  * ==== prepare partial load behavior parameters ====
4146   
4147  * set disabled max load requirements to 1 to avoid excessive logical expressions later on
4148  alias(commodity, com);
4149  converter_coefficient(converter_techs,vintage,activity,commodity,"maxLoad")
4150      $((converter_coefficient(converter_techs,vintage,activity,commodity,"maxLoad") = 0)
4151        and converter_usedAct(converter_techs,vintage,activity))
4152      = 1;
4153   
4154  * indicate that at least one activity of a technology makes use of partial load behavior
4155  set converter_hasMaxLoad(converter_techs,vintage);
4156  converter_hasMaxLoad(converter_techs,vintage)
4157    = smin((activity,commodity)$converter_usedAct(converter_techs,vintage,activity),
4158              converter_coefficient(converter_techs,vintage,activity,commodity,"maxLoad")) < 1;
4159   
4160  set converter_hasMinLoad(converter_techs,vintage);
4161  converter_hasMinLoad(converter_techs,vintage)
4162    = smax((activity,commodity)$converter_usedAct(converter_techs,vintage,activity),
4163              converter_coefficient(converter_techs,vintage,activity,commodity,"minLoad")) > 0;
4164   
4165  set converter_hasConstantFluxInActivity(converter_techs,vintage);
4166  converter_hasConstantFluxInActivity(converter_techs,vintage)
4167    = sum((activity,commodity)$converter_usedAct(converter_techs,vintage,activity),
4168                          abs(converter_coefficient(converter_techs,vintage,activity,commodity,"constant"))) > 0;
4169   
4170  * setting up a requirements parameter to avoid having to cycle through commodities in equations
4171  set pc_converter_activityRequirements
4172      /
4173      minLoad             "Lower profile for converter activity"
4174      maxLoad             "Upper profile for converter activity"
4175      /;
4176  parameter converter_activityRequirements(converter_techs,vintage,activity,pc_converter_activityRequirements);
4177  converter_activityRequirements(converter_techs,vintage,activity,"minLoad")
4178    = smax(commodity, converter_coefficient(converter_techs,vintage,activity,commodity,"minLoad"));
4179  converter_activityRequirements(converter_techs,vintage,activity,"maxLoad")
4180    = smin(commodity, converter_coefficient(converter_techs,vintage,activity,commodity,"maxLoad"));
4181   
4182  * ==== activate MIP units for MIP dispatch or partial load technologies ====
4183   
4184  set converter_hasMinUptime(converter_techs,vintage);
4185  converter_hasMinUptime(converter_techs,vintage)
4186    $(converter_techParam(converter_techs,vintage,"minUptime")
4187      and converter_techParam(converter_techs,vintage,"mipDispatch"))
4188    = yes;
4189   
4190  set converter_hasMinDowntime(converter_techs,vintage);
4191  converter_hasMinDowntime(converter_techs,vintage)
4192    $(converter_techParam(converter_techs,vintage,"minDowntime")
4193      and converter_techParam(converter_techs,vintage,"mipDispatch"))
4194    = yes;
4195   
4196  * require integer unit counts if online state is to be tracked
4197  converter_techParam(converter_techs,vintage,"mipUnits")
4198      $(converter_techParam(converter_techs,vintage,"mipDispatch")
4199        or converter_hasMinLoad(converter_techs, vintage)
4200        or converter_hasMaxLoad(converter_techs, vintage)
4201        or converter_hasConstantFluxInActivity(converter_techs,vintage))
4202      = 1;
4203   
4204  * ==== floor mip converter units to integer values ====
4205  converter_capacityParam(nodesModelToCalc,yearsToCalc,converter_techs,"unitsLowerLimit")
4206      $sum(vintage, converter_techParam(converter_techs,vintage,"mipUnits"))
4207      = floor(converter_capacityParam(nodesModelToCalc,yearsToCalc,converter_techs,"unitsLowerLimit"));
4208  converter_capacityParam(nodesModelToCalc,yearsToCalc,converter_techs,"unitsUpperLimit")
4209      $sum(vintage, converter_techParam(converter_techs,vintage,"mipUnits"))
4210      = ceil(converter_capacityParam(nodesModelToCalc,yearsToCalc,converter_techs,"unitsUpperLimit"));
4211   
4212  * ==== scalars and sets for minUptime and minDowntime ====
4213   
4214  scalar converter_maxUptimeReq;
4215  converter_maxUptimeReq = smax((converter_techs,vintage), converter_techParam(converter_techs,vintage,"minUptime"));
4216  set uptimeSearchRange(timeModelToCalc);
4217  uptimeSearchRange(timeModelToCalc) = ord(timeModelToCalc) <= converter_maxUptimeReq;
4218   
4219  scalar converter_maxDowntimeReq;
4220  converter_maxDowntimeReq = smax((converter_techs,vintage), converter_techParam(converter_techs,vintage,"minDowntime"));
4221  set downtimeSearchRange(timeModelToCalc);
4222  downtimeSearchRange(timeModelToCalc) = ord(timeModelToCalc) <= converter_maxDowntimeReq;
4223   
4224  * ==== definition of variables ====
4225   
4226  * Initialise variables for unitsBuild
4227  converter_unitsBuild.l(nodesModel,years,converter_techs,vintage)
4228      $converter_availTech(nodesModel,years,converter_techs,vintage)
4229      = converter_capacityParam(nodesModel,years,converter_techs,"unitsBuild");
4230  converter_unitsBuild.lo(nodesModel,yearsToCalc,converter_techs,vintage)
4231      $converter_availTech(nodesModel,yearsToCalc,converter_techs,vintage)
4232      = converter_unitsBuild.l(nodesModel,yearsToCalc,converter_techs,vintage);
4233  converter_unitsBuild.fx(nodesModel,years,converter_techs,vintage)
4234      $converter_capacityParam(nodesModel,years,converter_techs,"noExpansion")
4235      = converter_unitsBuild.l(nodesModel,years,converter_techs,vintage);
4236   
4237  * Initialise variables for unitsDecom
4238  converter_unitsDecom.l(nodesModel,years,converter_techs,vintage)
4239    $(converter_decomTech(nodesModel,years,converter_techs,vintage)
4240      and years.val < sum(yearsToCalc$(ord(yearsToCalc) = 1), yearsToCalc.val))
4241    = sum((years_a,years_aa)$(sameas(years-1, years_aa)
4242                        and years_a.val > years_aa.val - converter_techParam(converter_techs,vintage,'lifeTime')
4243                        and years_a.val <= years.val - converter_techParam(converter_techs,vintage,'lifeTime')
4244                        and converter_availTech(nodesModel,years_a,converter_techs,vintage)),
4245          converter_unitsBuild.l(nodesModel,years_a,converter_techs,vintage));
4246   
4247  converter_unitsDecom.l(nodesModel,yearsToCalc,converter_techs,vintage)
4248    $converter_decomTech(nodesModel,yearsToCalc,converter_techs,vintage)
4249    = sum(years$
4250          (years.val < sum(yearsToCalc_a$(ord(yearsToCalc_a) = 1), yearsToCalc_a.val)
4251            and converter_availTech(nodesModel,years,converter_techs,vintage)
4252            and years.val > sum(years_a$sameas(years_a, yearsToCalc-1), years_a.val) - converter_techParam(converter_techs,vintage,'lifeTime')
4253            and years.val <= yearsToCalc.val - converter_techParam(converter_techs,vintage,'lifeTime')),
4254        converter_unitsBuild.l(nodesModel,years,converter_techs,vintage))
4255      + sum(yearsToCalc_a$
4256          (yearsToCalc_a.val < sum(yearsToCalc_aa$(ord(yearsToCalc_aa) > 1), yearsToCalc_a.val)
4257            and converter_availTech(nodesModel,yearsToCalc_a,converter_techs,vintage)
4258            and yearsToCalc_a.val > sum(years_a$sameas(years_a, yearsToCalc-1), years_a.val) - converter_techParam(converter_techs,vintage,'lifeTime')
4259            and yearsToCalc_a.val <= yearsToCalc.val - converter_techParam(converter_techs,vintage,'lifeTime')),
4260        converter_unitsBuild.l(nodesModel,yearsToCalc_a,converter_techs,vintage));
4261        ;
4262   
4263  converter_unitsDecom.lo(nodesModel,yearsToCalc,converter_techs,vintage)
4264      $(converter_usedTech(nodesModel,yearsToCalc,converter_techs,vintage)
4265          and not converter_techParam(converter_techs,vintage,"freeDecom"))
4266      = converter_unitsDecom.l(nodesModel,yearsToCalc,converter_techs,vintage)
4267   
4268  * Calculate planned unit expansion
4269  parameter converter_unitsPlanned(nodesModel,years,converter_techs,vintage);
4270  converter_unitsPlanned(nodesModel,years,converter_techs,vintage) = 0;
4271  loop(years,
4272    converter_unitsPlanned(nodesModel,years,converter_techs,vintage)
4273      =
4274      converter_unitsPlanned(nodesModel,years-1,converter_techs,vintage)
4275          $converter_usedTech(nodesModel,years-1,converter_techs,vintage)
4276      + converter_unitsBuild.l(nodesModel,years,converter_techs,vintage)
4277          $converter_availTech(nodesModel,years,converter_techs,vintage)
4278      - converter_unitsDecom.l(nodesModel,years,converter_techs,vintage)
4279          $converter_usedTech(nodesModel,years,converter_techs,vintage);
4280  );
4281   
4282  * Set initial state for planned units
4283  converter_unitsTotal.l(nodesModel,years,converter_techs,vintage)
4284    = converter_unitsPlanned(nodesModel,years,converter_techs,vintage)
4285   
4286  * Calculate if planned unit expansion is bounded by upper and lower limits
4287  set converter_unitBoundsFixed(nodesModel,years,converter_techs);
4288  converter_unitBoundsFixed(nodesModel,years,converter_techs)
4289    $(sum(vintage$converter_usedTech(nodesModel,years,converter_techs,vintage),
4290          converter_unitsPlanned(nodesModel,years,converter_techs,vintage))
4291      = converter_capacityParam(nodesModel,years,converter_techs,"unitsUpperLimit")
4292    and sum(vintage$converter_usedTech(nodesModel,years,converter_techs,vintage),
4293          converter_unitsPlanned(nodesModel,years,converter_techs,vintage))
4294      = converter_capacityParam(nodesModel,years,converter_techs,"unitsLowerLimit"))
4295    = yes;
4296   
4297  * Fix unitsBuild, unitsDecom, unitsTotal if levels are predetermined by upper and lower limits
4298  converter_unitsBuild.fx(nodesModel,years,converter_techs,vintage)
4299    $(converter_availTech(nodesModel,years,converter_techs,vintage)
4300      and converter_unitBoundsFixed(nodesModel,years,converter_techs))
4301    = converter_unitsBuild.l(nodesModel,years,converter_techs,vintage);
4302  converter_unitsDecom.fx(nodesModel,years,converter_techs,vintage)
4303    $(converter_usedTech(nodesModel,years,converter_techs,vintage)
4304      and converter_unitBoundsFixed(nodesModel,years,converter_techs))
4305    = converter_unitsDecom.l(nodesModel,years,converter_techs,vintage);
4306  converter_unitsTotal.fx(nodesModel,years,converter_techs,vintage)
4307    $(converter_usedTech(nodesModel,years,converter_techs,vintage)
4308      and converter_unitBoundsFixed(nodesModel,years,converter_techs))
4309    = converter_unitsTotal.l(nodesModel,years,converter_techs,vintage);
4310   
4311  converter_unitsOnline_MIP.up(timeModelToCalc,nodesModel,years,converter_techs,vintage)
4312      $(converter_usedTech(nodesModel,years,converter_techs,vintage)
4313        and converter_techParam(converter_techs,vintage,"mipDispatch") = 1)
4314      = converter_capacityParam(nodesModel,years,converter_techs,"unitsUpperLimit");
4315   
4316  converter_unitsTotal_MIP.up(nodesModel,years,converter_techs,vintage)
4317      $(converter_usedTech(nodesModel,years,converter_techs,vintage)
4318        and converter_techParam(converter_techs,vintage,"mipUnits") = 1)
4319      = converter_capacityParam(nodesModel,years,converter_techs,"unitsUpperLimit");
4320   
4321  converter_unitsUsingActivity_MIP.up(timeModelToCalc,nodesModel,years,converter_techs,vintage,activity)
4322      $(converter_usedTech(nodesModel,years,converter_techs,vintage)
4323        and (converter_hasMinLoad(converter_techs, vintage)
4324              or converter_hasMaxLoad(converter_techs, vintage)))
4325      = converter_capacityParam(nodesModel,years,converter_techs,"unitsUpperLimit");
4326   
4327  * Add parameter for fixing capacities during myopic runs
4328  parameter converter_unitsDelta(nodesModel,years,converter_techs);
4329   
4330  * ==== declaration of equations ====
4331   
4332  equations
4333    Eq_converter_unitsBalance(nodesModel,years,converter_techs,vintage
4334      ) "Ensures the units balance over the planning period."
4335    Eq_converter_unitsFixedDecom(nodesModel,years,converter_techs,vintage
4336      ) "Restricts the fixed decommissioning of units over the planning period."
4337    Eq_converter_unitsFreeDecom(nodesModel,years,converter_techs,vintage
4338      ) "Restricts the free decommissioning of units over the planning period."
4339    Eq_converter_unitsUpperLimit(nodesModel,years,converter_techs
4340      ) "Upper bound for the total number of units."
4341    Eq_converter_unitsLowerLimit(nodesModel,years,converter_techs
4342      ) "Lower bound for the total number of units."
4343    Eq_converter_unitsFixedLimit(nodesModel,years,converter_techs
4344      ) "Fixed bound for the total number of units."
4345    Eq_converter_unitsTotalMIP(nodesModel,years,converter_techs,vintage
4346      ) "Fixes the total number of units to the corresponding integer variable."
4347    Eq_converter_unitsOnlineMIP(timeModel,nodesModel,years,converter_techs,vintage
4348      ) "Fixes the number of online units to the corresponding integer variable."
4349   
4350    Eq_converter_activityLowerLimit(timeModel,nodesModel,years,converter_techs,vintage
4351      ) "Lower limit on the activity."
4352    Eq_converter_activityUpperLimit(timeModel,nodesModel,years,converter_techs,vintage
4353      ) "Upper limit on the activity."
4354   
4355    Eq_converter_activityFixedLimit(timeModel,nodesModel,years,converter_techs,vintage
4356      ) "Fixed limit on the activity."
4357    Eq_converter_rampPos(timeModel,nodesModel,years,converter_techs,vintage
4358      ) "Positive ramping of unit activity."
4359    Eq_converter_rampNeg(timeModel,nodesModel,years,converter_techs,vintage
4360      ) "Negative ramping of unit activity."
4361    Eq_converter_rampLimit(timeModel,nodesModel,years,converter_techs,vintage
4362      ) "Restrict ramping up of unit activity."
4363   
4364    Eq_converter_unitsOnline(timeModel,nodesModel,years,converter_techs,vintage
4365      ) "Set online units to total number of operational units."
4366    Eq_converter_unitsOnlineUC(timeModel,nodesModel,years,converter_techs,vintage
4367      ) "Allow shutting down units."
4368    Eq_converter_activityStartups(timeModel,nodesModel,years,converter_techs,vintage
4369      ) "Variable counting the number of unit startups."
4370    Eq_converter_activityShutdowns(timeModel,nodesModel,years,converter_techs,vintage
4371      ) "Variable tracking the number of unit shutdowns."
4372    Eq_converter_limitStartups(nodesModel,years,converter_techs,vintage
4373      ) "Limit the number of startup cycles a unit can perform."
4374    Eq_converter_minUptime(timeModel,nodesModel,years,converter_techs,vintage
4375      ) "Require recently started units to remain online for their respective minimum uptime."
4376    Eq_converter_minDowntime(timeModel,nodesModel,years,converter_techs,vintage
4377      ) "Require recently shut down units to remain offline for their respective minimum downtime."
4378    Eq_converter_activityUpperLimitDetailedPartLoadMinReq(timeModel,nodesModel,years,converter_techs,vintage,activity
4379      ) "Limit activity coefficients of activities with a given load requirement or stricter to the number of units in such modes."
4380    Eq_converter_activityUpperLimitDetailedPartLoadMaxReq(timeModel,nodesModel,years,converter_techs,vintage,activity
4381      ) "Limit activity coefficients of activities with a given load requirement or stricter to the number of units in such modes."
4382    Eq_converter_activityLowerLimitDetailedPartLoadMinReq(timeModel,nodesModel,years,converter_techs,vintage,activity
4383      ) "Enforce sufficient activity coefficients of activities to justify all active modes."
4384    Eq_converter_noOnlineIdle(timeModel,nodesModel,years,converter_techs,vintage
4385      ) "Prevent the circumvention of requirements by keeping units online without using any modes."
4386    Eq_converter_noOnlineIdleDetailedPartLoad(timeModel,nodesModel,years,converter_techs,vintage
4387      ) "Prevent the circumvention of requirements by keeping units online without using any modes. Allow more than one mode activation per unit."
4388    Eq_converter_activityUpperLimitPartLoad(timeModel,nodesModel,years,converter_techs,vintage,activity
4389      ) "Limit usage of an activity to corresponding units."
4390    Eq_converter_activityLowerLimitPartLoad(timeModel,nodesModel,years,converter_techs,vintage,activity
4391      ) "Limit usage of an activity to corresponding units."
4392    Eq_converter_activityModeLimit(timeModel,nodesModel,years,converter_techs,vintage,activity
4393      ) "Limit the number of units in one particular mode to the number of operational units."
4394    ;
4395   
4396  * ==== equation definition ====
4397  * // ## Equations
4398  * // ### Converter Units Balance
4399  * // Ensures that the total units are consistent with the built and decommissioned units.
4400  * // {Eq_converter_unitsBalance}
4401  Eq_converter_unitsBalance(nodesModelSel,yearsSel,converter_techs,vintage)
4402      $((converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
4403            or sum(years$sameas(years,yearsSel), converter_usedTech(nodesModelSel,years-1,converter_techs,vintage)))
4404          and not converter_unitBoundsFixed(nodesModelSel,yearsSel,converter_techs))
4405      ..
4406      converter_unitsTotal(nodesModelSel,yearsSel,converter_techs,vintage)
4407      =e=
4408      sum(yearsToCalc$(ord(yearsToCalc) = 1 and sameas(yearsToCalc, yearsSel)),
4409        sum(years$sameas(years, yearsToCalc),
4410          converter_unitsTotal(nodesModelSel,years-1,converter_techs,vintage)
4411            $converter_usedTech(nodesModelSel,years-1,converter_techs,vintage)))
4412      + sum((yearsToCalc)$(ord(yearsToCalc) > 1 and sameas(yearsToCalc, yearsSel)),
4413        converter_unitsTotal(nodesModelSel,yearsToCalc-1,converter_techs,vintage)
4414          $converter_usedTech(nodesModelSel,yearsToCalc-1,converter_techs,vintage))
4415      + converter_unitsBuild(nodesModelSel,yearsSel,converter_techs,vintage)
4416          $converter_availTech(nodesModelSel,yearsSel,converter_techs,vintage)
4417      - converter_unitsDecom(nodesModelSel,yearsSel,converter_techs,vintage)
4418          $converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage);
4419   
4420  * // ### Converter Units Fixed Decommission
4421  * // Restricts the fixed decommissioning of units over the planning period.
4422  * // {Eq_converter_unitsFixedDecom}
4423  Eq_converter_unitsFixedDecom(nodesModelSel,yearsSel,converter_techs,vintage)
4424      $(converter_decomTech(nodesModelSel,yearsSel,converter_techs,vintage)
4425          and not converter_techParam(converter_techs,vintage,"freeDecom") = 1
4426          and not converter_unitBoundsFixed(nodesModelSel,yearsSel,converter_techs))
4427      ..
4428      converter_unitsDecom(nodesModelSel,yearsSel,converter_techs,vintage)
4429      =e=
4430      sum(years$
4431          (converter_availTech(nodesModelSel,years,converter_techs,vintage)
4432            and years.val > sum(yearsToCalc$sameas(yearsToCalc+1, yearsSel), yearsToCalc.val) - converter_techParam(converter_techs,vintage,'lifeTime')
4433            and years.val <= yearsSel.val - converter_techParam(converter_techs,vintage,'lifeTime')),
4434        converter_unitsBuild(nodesModelSel,years,converter_techs,vintage));
4435   
4436  * // ### Converter Units Free Decommission
4437  * // Restricts the free decommissioning of units over the planning period.
4438  * // {Eq_converter_unitsFreeDecom}
4439  Eq_converter_unitsFreeDecom(nodesModelSel,yearsSel,converter_techs,vintage)
4440      $((converter_decomTech(nodesModelSel,yearsSel,converter_techs,vintage)
4441          or converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage))
4442          and converter_techParam(converter_techs,vintage,"freeDecom") = 1)
4443      ..
4444      sum(years$
4445            ((converter_decomTech(nodesModelSel,years,converter_techs,vintage)
4446              or converter_usedTech(nodesModelSel,years,converter_techs,vintage))
4447              and years.val < sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)),
4448          converter_unitsDecom(nodesModelSel,years,converter_techs,vintage))
4449      + sum(yearsToCalc$
4450            ((converter_decomTech(nodesModelSel,yearsToCalc,converter_techs,vintage)
4451              or converter_usedTech(nodesModelSel,yearsToCalc,converter_techs,vintage))
4452              and yearsToCalc.val >= sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
4453              and yearsToCalc.val <= yearsSel.val),
4454          converter_unitsDecom(nodesModelSel,yearsToCalc,converter_techs,vintage))
4455      =g=
4456      sum(years$
4457            (converter_availTech(nodesModelSel,years,converter_techs,vintage)
4458              and years.val < sum(yearsToCalc$(ord(yearsToCalc)=1), yearsToCalc.val) - converter_techParam(converter_techs,vintage,'lifeTime')),
4459          converter_unitsBuild(nodesModelSel,years,converter_techs,vintage))
4460      + sum(yearsToCalc$
4461            (converter_availTech(nodesModelSel,yearsToCalc,converter_techs,vintage)
4462              and yearsToCalc.val >= sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
4463              and yearsToCalc.val <= yearsSel.val - converter_techParam(converter_techs,vintage,'lifeTime')),
4464          converter_unitsBuild(nodesModelSel,yearsToCalc,converter_techs,vintage));
4465   
4466  * // ### Converter Units Upper Limit
4467  * // Upper bound for the total number of units.
4468  * // {Eq_converter_unitsUpperLimit}
4469  Eq_converter_unitsUpperLimit(nodesModelSel,yearsSel,converter_techs)
4470      $(converter_capacityParam(nodesModelSel,yearsSel,converter_techs,'unitsUpperLimit') >= 0
4471          and converter_capacityParam(nodesModelSel,yearsSel,converter_techs,'unitsUpperLimit') < +inf
4472          and converter_capacityParam(nodesModelSel,yearsSel,converter_techs,'unitsUpperLimit')
4473              <> converter_capacityParam(nodesModelSel,yearsSel,converter_techs,'unitsLowerLimit'))
4474      ..
4475      sum(vintage$converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage),
4476          converter_unitsTotal(nodesModelSel,yearsSel,converter_techs,vintage))
4477      =l=
4478      converter_capacityParam(nodesModelSel,yearsSel,converter_techs,"unitsUpperLimit");
4479   
4480  * // ### Converter Units Lower Limit
4481  * // Lower bound for the total number of units.
4482  * // {Eq_converter_unitsLowerLimit}
4483  Eq_converter_unitsLowerLimit(nodesModelSel,yearsSel,converter_techs)
4484      $(converter_capacityParam(nodesModelSel,yearsSel,converter_techs,'unitsLowerLimit') > 0
4485          and converter_capacityParam(nodesModelSel,yearsSel,converter_techs,'unitsLowerLimit')
4486              <> converter_capacityParam(nodesModelSel,yearsSel,converter_techs,'unitsUpperLimit'))
4487      ..
4488      sum(vintage$converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage),
4489          converter_unitsTotal(nodesModelSel,yearsSel,converter_techs,vintage))
4490      =g=
4491      converter_capacityParam(nodesModelSel,yearsSel,converter_techs,"unitsLowerLimit");
4492   
4493  Eq_converter_unitsFixedLimit(nodesModelSel,yearsSel,converter_techs)
4494      $(converter_capacityParam(nodesModelSel,yearsSel,converter_techs,'unitsLowerLimit')
4495          = converter_capacityParam(nodesModelSel,yearsSel,converter_techs,'unitsUpperLimit'))
4496      ..
4497      sum(vintage$converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage),
4498          converter_unitsTotal(nodesModelSel,yearsSel,converter_techs,vintage))
4499      =e=
4500      converter_capacityParam(nodesModelSel,yearsSel,converter_techs,"unitsUpperLimit");
4501   
4502  * // ### Converter Units Total MIP
4503  * // Fixes the total number of units to the corresponding integer variable.
4504  * // {Eq_converter_unitsTotalMIP}
4505  Eq_converter_unitsTotalMIP(nodesModelSel,yearsSel,converter_techs,vintage)
4506      $( converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
4507          and converter_techParam(converter_techs,vintage,"mipUnits") = 1 )
4508      ..
4509      converter_unitsTotal(nodesModelSel,yearsSel,converter_techs,vintage)
4510      =e=
4511      converter_unitsTotal_MIP(nodesModelSel,yearsSel,converter_techs,vintage);
4512   
4513  * // ### Converter Units Online MIP
4514  * // Fixes the number of online units to the corresponding integer variable.
4515  * // {Eq_converter_unitsOnlineMIP}
4516  Eq_converter_unitsOnlineMIP(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
4517      $( converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
4518          and converter_techParam(converter_techs,vintage,"mipDispatch") = 1 )
4519      ..
4520      converter_unitsOnline(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
4521      =e=
4522      converter_unitsOnline_MIP(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage);
4523   
4524  * // ### Converter Activity Lower Limit
4525  * // Lower limit on the activity.
4526  * // {Eq_converter_activityLowerLimit}
4527  Eq_converter_activityLowerLimit(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
4528      $(converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
4529          and converter_activityProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,"lower") > 0
4530          and converter_activityProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,"lower")
4531               <> converter_activityProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,"upper")
4532          and not converter_hasMinLoad(converter_techs, vintage))
4533      ..
4534      sum(activity$converter_usedAct(converter_techs,vintage,activity),
4535          converter_activity(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity)
4536      )
4537      =g=
4538      converter_activityProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,"lower")
4540      * converter_unitsOnline(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage);
4542   
4543  * // ### Converter Activity Upper Limit
4544  * // Upper limit on the activity.
4545  * // {Eq_converter_activityUpperLimit}
4546  Eq_converter_activityUpperLimit(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
4547      $(converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
4548          and converter_activityProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,"upper") >= 0
4549          and converter_activityProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,"upper")
4550               <> converter_activityProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,"lower"))
4551      ..
4552      sum(activity$converter_usedAct(converter_techs,vintage,activity),
4553          converter_activity(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity)
4554      )
4555      =l=
4556      converter_activityProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,"upper")
4558      * converter_unitsOnline(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage);
4560   
4561  Eq_converter_activityFixedLimit(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
4562      $(converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
4563          and converter_activityProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,"lower")
4564               = converter_activityProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,"upper"))
4565      ..
4566      sum(activity$converter_usedAct(converter_techs,vintage,activity),
4567          converter_activity(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity)
4568      )
4569      =e=
4570      converter_activityProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,"upper")
4572      * converter_unitsOnline(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage);
4574   
4575  * // ### Converter Positive Ramping
4576  * // Positive ramping of unit activity.
4577  * // {Eq_converter_rampPos}
4578  Eq_converter_rampPos(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,converter_techs,vintage)
4579    $( converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
4580        and converter_useRampPos(nodesModelSel,yearsSel,converter_techs,vintage))
4581      ..
4582      converter_rampPos(timeModelToCalc,nodesModelSel,yearsSel,converter_techs,vintage)
4583      =g=
4584      sum(activity$converter_usedAct(converter_techs,vintage,activity),
4585              converter_activity(timeModelToCalc,nodesModelSel,yearsSel,converter_techs,vintage,activity)
4586              - converter_activity(timeModelToCalc--1,nodesModelSel,yearsSel,converter_techs,vintage,activity));
4587   
4588  * // ### Converter Negative Ramping
4589  * // Negative ramping of unit activity.
4590  * // {Eq_converter_rampNeg}
4591  Eq_converter_rampNeg(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,converter_techs,vintage)
4592    $( converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
4593        and converter_useRampNeg(nodesModelSel,yearsSel,converter_techs,vintage))
4594      ..
4595      converter_rampNeg(timeModelToCalc,nodesModelSel,yearsSel,converter_techs,vintage)
4596      =g=
4597      - sum(activity$converter_usedAct(converter_techs,vintage,activity),
4598              converter_activity(timeModelToCalc,nodesModelSel,yearsSel,converter_techs,vintage,activity)
4599              - converter_activity(timeModelToCalc--1,nodesModelSel,yearsSel,converter_techs,vintage,activity));
4600   
4601  * // ### Converter Ramping Limit
4602  * // Restrict ramping up of unit activity.
4603  * // {Eq_converter_rampLimit}
4604  Eq_converter_rampLimit(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,converter_techs,vintage)
4605    $( converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
4606          and converter_techParam(converter_techs,vintage,"activityRampLimit") > 0)
4607      ..
4608      sum(activity$converter_usedAct(converter_techs,vintage,activity),
4609              converter_activity(timeModelToCalc,nodesModelSel,yearsSel,converter_techs,vintage,activity)
4610              - converter_activity(timeModelToCalc--1,nodesModelSel,yearsSel,converter_techs,vintage,activity))
4611    =l=
4612    converter_techParam(converter_techs,vintage,"activityRampLimit")
4614      * converter_unitsOnline(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage);
4616   
4617   
4619   
4620  * // ### Converter MIP Units Online
4621  * // Restrict ramping up of unit activity.
4622  * // {Eq_converter_unitsOnline}
4623  Eq_converter_unitsOnline(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
4624      $( converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
4625          and converter_techParam(converter_techs,vintage,"mipDispatch") = 0 )
4626    ..
4627    converter_unitsOnline(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
4628    =e=
4629    converter_unitsTotal(nodesModelSel,yearsSel,converter_techs,vintage)
4630      ;
4631   
4632  * // ### Converter MIP Units Shutting Down
4633  * // Allow shutting down units.
4634  * // {Eq_converter_unitsOnlineUC}
4635  Eq_converter_unitsOnlineUC(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
4636      $( converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
4637          and converter_techParam(converter_techs,vintage,"mipDispatch") = 1 )
4638    ..
4639    converter_unitsOnline(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
4640    =l=
4641    converter_unitsTotal(nodesModelSel,yearsSel,converter_techs,vintage)
4642      ;
4644   
4645  * // ### Converter Activity Startups
4646  * // Variable counting the number of unit startups.
4647  * // {Eq_converter_activityStartups}
4648  Eq_converter_activityStartups(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,converter_techs,vintage)
4649    $( converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
4650          and converter_techParam(converter_techs,vintage,"mipDispatch") = 1 )
4651      ..
4652      converter_unitStartups(timeModelToCalc,nodesModelSel,yearsSel,converter_techs,vintage)
4653      =g=
4654          converter_unitsOnline(timeModelToCalc,nodesModelSel,yearsSel,converter_techs,vintage)
4655      - converter_unitsOnline(timeModelToCalc--1,nodesModelSel,yearsSel,converter_techs,vintage);
4656   
4657  * // ### Converter Activity Shutdowns
4658  * // Variable tracking the number of unit shutdowns.
4659  * // {Eq_converter_activityShutdowns}
4660  Eq_converter_activityShutdowns(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,converter_techs,vintage)
4661    $( converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
4662          and converter_techParam(converter_techs,vintage,"mipDispatch") = 1
4663          and converter_techParam(converter_techs,vintage,"minDowntime") > 0)
4664      ..
4665      converter_unitShutdowns(timeModelToCalc,nodesModelSel,yearsSel,converter_techs,vintage)
4666      =g=
4667          converter_unitsOnline(timeModelToCalc--1,nodesModelSel,yearsSel,converter_techs,vintage)
4668      - converter_unitsOnline(timeModelToCalc,nodesModelSel,yearsSel,converter_techs,vintage);
4669   
4670  * // ### Converter Activity Startup Limit
4671  * // Limit the number of startup cycles a unit can perform.
4672  * // {Eq_converter_limitStartups}
4673  Eq_converter_limitStartups(nodesModelSel,yearsSel,converter_techs,vintage)
4674    $( converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
4675          and converter_techParam(converter_techs,vintage,"mipDispatch") = 1
4676      and converter_techParam(converter_techs,vintage,"startupLimit") > 0)
4677      ..
4678      sum(timeModelToCalc, converter_unitStartups(timeModelToCalc,nodesModelSel,yearsSel,converter_techs,vintage))
4679    =l=
4680    converter_techParam(converter_techs,vintage,"startupLimit")
4681    * converter_unitsTotal(nodesModelSel,yearsSel,converter_techs,vintage);
4682   
4683  alias(timeModelToCalc,ttc);
4684   
4685  * // ### Converter Units Minimum Uptime
4686  * // Require recently started units to remain online for their respective minimum uptime.
4687  * // {Eq_converter_minUptime}
4688  Eq_converter_minUptime(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,converter_techs,vintage)
4689    $( converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
4690          and converter_techParam(converter_techs,vintage,"mipDispatch") = 1
4691      and converter_techParam(converter_techs,vintage,"minUptime") > 0)
4692      ..
4693      sum(ttc$[uptimeSearchRange(ttc) and ord(ttc)<=converter_techParam(converter_techs,vintage,"minUptime")],
4694          converter_unitStartups(ttc+[ord(timeModelToCalc)-converter_techParam(converter_techs,vintage,"minUptime")],
4695              nodesModelSel,yearsSel,converter_techs,vintage))
4696          =l=
4697          converter_unitsOnline(timeModelToCalc,nodesModelSel,yearsSel,converter_techs,vintage);
4698   
4699  * // ### Converter Units Minimum Downtime
4700  * // Require recently shut down units to remain offline for their respective minimum downtime.
4701  * // {Eq_converter_minDowntime}
4702  Eq_converter_minDowntime(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,converter_techs,vintage)
4703    $( converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
4704          and converter_techParam(converter_techs,vintage,"mipDispatch") = 1
4705      and converter_techParam(converter_techs,vintage,"minDowntime") > 0)
4706      ..
4707      sum(ttc$[downtimeSearchRange(ttc) and ord(ttc)<=converter_techParam(converter_techs,vintage,"minDowntime")],
4708          converter_unitShutdowns(ttc+[ord(timeModelToCalc)-converter_techParam(converter_techs,vintage,"minDowntime")],
4709              nodesModelSel,yearsSel,converter_techs,vintage))
4710          =l=
4711          converter_unitsTotal(nodesModelSel,yearsSel,converter_techs,vintage)
4712      - converter_unitsOnline(timeModelToCalc,nodesModelSel,yearsSel,converter_techs,vintage);
4713   
4714  * This equation is meant to cause the units to activate particular mode counters to gain access to the corresponding activities.
4715  * Activities are allowed to be used on units with stricter activity requirements but not the other way around.
4716  alias(activity, act);
4717   
4718  * // ### Converter MIP Units Activity Upper Limit Minimum Required Load
4719  * // Limit activity coefficients of activities with a given load requirement or stricter to the number of units in such modes.
4720  * // {Eq_converter_activityUpperLimitDetailedPartLoadMinReq}
4721  Eq_converter_activityUpperLimitDetailedPartLoadMinReq(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity)
4722    $( converter_usedTechAct(nodesModelSel,yearsSel,converter_techs,vintage,activity)
4723          and converter_hasMinLoad(converter_techs, vintage)
4724          and converter_techParam(converter_techs,vintage,"mipDetailedPartialLoad"))
4725      ..
4726      sum(act$(converter_activityRequirements(converter_techs,vintage,act,"minLoad")
4727                  >= converter_activityRequirements(converter_techs,vintage,activity,"minLoad")
4728               and converter_usedAct(converter_techs,vintage,act)),
4729      converter_activity(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,act))
4730    =l=
4731    converter_activityProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,"upper")
4732      * sum(act$(converter_activityRequirements(converter_techs,vintage,act,"minLoad")
4733                  >= converter_activityRequirements(converter_techs,vintage,activity,"minLoad")
4734                 and converter_usedAct(converter_techs,vintage,act)),
4735      converter_unitsUsingActivity_MIP(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,act));
4736   
4737  * // ### Converter MIP Units Activity Upper Limit Maximum Required Load
4738  * // Limit activity coefficients of activities with a given load requirement or stricter to the number of units in such modes.
4739  * // {Eq_converter_activityUpperLimitDetailedPartLoadMaxReq}
4740  Eq_converter_activityUpperLimitDetailedPartLoadMaxReq(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity)
4741    $( converter_usedTechAct(nodesModelSel,yearsSel,converter_techs,vintage,activity)
4742          and converter_hasMaxLoad(converter_techs,vintage)
4743          and converter_techParam(converter_techs,vintage,"mipDetailedPartialLoad"))
4744      ..
4745      sum(act$(converter_activityRequirements(converter_techs,vintage,act,"maxLoad")
4746                  <= converter_activityRequirements(converter_techs,vintage,activity,"maxLoad")
4747               and converter_usedAct(converter_techs,vintage,act)),
4748      converter_activity(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,act))
4749    =l=
4750      sum(act$(converter_activityRequirements(converter_techs,vintage,act,"maxLoad")
4751                  <= converter_activityRequirements(converter_techs,vintage,activity,"maxLoad")
4752               and converter_usedAct(converter_techs,vintage,act)),
4753      min(converter_activityRequirements(converter_techs,vintage,act,"maxLoad"),
4754            converter_activityProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,"upper"))
4755            * converter_unitsUsingActivity_MIP(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,act));
4756   
4757  * This equation is meant to enforce the lower limit requirements of activities in use.
4758  * Loads produced by activities with less strict requirements can contribute to the minimum load requirement of strict activities but not the other way around,
4759  * because these activities can only run on units in the respectively strict activation state.
4760   
4761  * // ### Converter MIP Units Activity Lower Limit Minimum Required Load
4762  * // Enforce sufficient activity coefficients of activities to justify all active modes.
4763  * // {Eq_converter_activityLowerLimitDetailedPartLoadMinReq}
4764  Eq_converter_activityLowerLimitDetailedPartLoadMinReq(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity)
4765    $( converter_usedTechAct(nodesModelSel,yearsSel,converter_techs,vintage,activity)
4766          and converter_hasMinLoad(converter_techs, vintage)
4767          and converter_techParam(converter_techs,vintage,"mipDetailedPartialLoad"))
4768      ..
4769      sum(act$(converter_activityRequirements(converter_techs,vintage,act,"minLoad")
4770                  <= converter_activityRequirements(converter_techs,vintage,activity,"minLoad")
4771               and converter_usedAct(converter_techs,vintage,act)),
4772      converter_activity(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,act))
4773    =g=
4774      sum(act$(converter_activityRequirements(converter_techs,vintage,act,"minLoad")
4775                  <= converter_activityRequirements(converter_techs,vintage,activity,"minLoad")
4776               and converter_usedAct(converter_techs,vintage,act)),
4777      max(converter_activityRequirements(converter_techs,vintage,act,"minLoad"),
4778            converter_activityProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,"lower"))
4779            * converter_unitsUsingActivity_MIP(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,act));
4780   
4781   
4782  * Simple one-activity-per-unit partial load equations
4783  * // ### Converter MIP Units Activity Upper Limit Partial Load Balance
4784  * // Enforce MIP units partial load upper limit.
4785  * // {Eq_converter_activityUpperLimitPartLoad}
4786  Eq_converter_activityUpperLimitPartLoad(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity)
4787    $( converter_usedTechAct(nodesModelSel,yearsSel,converter_techs,vintage,activity)
4788          and (converter_hasMinLoad(converter_techs, vintage)
4789                or converter_hasMaxLoad(converter_techs, vintage)
4790                or converter_hasConstantFluxInActivity(converter_techs, vintage))
4791          and not converter_techParam(converter_techs,vintage,"mipDetailedPartialLoad"))
4792      ..
4793      converter_activity(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity)
4794    =l=
4795    min(converter_activityRequirements(converter_techs,vintage,activity,"maxLoad"),
4796          converter_activityProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,"upper"))
4797          * converter_unitsUsingActivity_MIP(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity);
4798   
4799  * // ### Converter MIP Units Activity Lower Limit Partial Load Balance
4800  * // Enforce MIP units partial load lower limit.
4801  * // {Eq_converter_activityLowerLimitPartLoad}
4802  Eq_converter_activityLowerLimitPartLoad(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity)
4803    $( converter_usedTechAct(nodesModelSel,yearsSel,converter_techs,vintage,activity)
4804          and (converter_hasMinLoad(converter_techs, vintage)
4805                or converter_hasMaxLoad(converter_techs, vintage))
4806          and not converter_techParam(converter_techs,vintage,"mipDetailedPartialLoad"))
4807      ..
4808      converter_activity(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity)
4809    =g=
4810    max(converter_activityRequirements(converter_techs,vintage,activity,"minLoad"),
4811          converter_activityProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,"lower"))
4812          * converter_unitsUsingActivity_MIP(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity);
4813   
4814  * // ### Converter MIP Units Idle Online Units
4815  * // Counts idle online units at every time step
4816  * // {Eq_converter_noOnlineIdle}
4817  Eq_converter_noOnlineIdle(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
4818    $( converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
4819          and (converter_hasMinLoad(converter_techs, vintage)
4820              or converter_hasMaxLoad(converter_techs, vintage)
4821              or converter_hasConstantFluxInActivity(converter_techs,vintage))
4822          and not converter_techParam(converter_techs,vintage,"mipDetailedPartialLoad"))
4823      ..
4824      converter_unitsOnline(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
4825      =e=
4826      sum(activity$converter_usedAct(converter_techs,vintage,activity),
4827            converter_unitsUsingActivity_MIP(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity));
4828   
4829  * // ### Converter MIP Units Idle Online Units Partial load
4830  * // Counts idle online units at every time step
4831  * // {Eq_converter_noOnlineIdleDetailedPartLoad}
4832  Eq_converter_noOnlineIdleDetailedPartLoad(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
4833    $( converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
4834          and (converter_hasMinLoad(converter_techs, vintage)
4835                  or converter_hasMaxLoad(converter_techs, vintage))
4836          and converter_techParam(converter_techs,vintage,"mipDetailedPartialLoad"))
4837      ..
4838      converter_unitsOnline(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
4839      =l=
4840      sum(activity$converter_usedAct(converter_techs,vintage,activity),
4841            converter_unitsUsingActivity_MIP(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity));
4842   
4843  * // ### Converter MIP activity model limit
4844  * // Converter activity model limit
4845  * // {Eq_converter_activityModeLimit}
4846  Eq_converter_activityModeLimit(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity)
4847    $( converter_usedTechAct(nodesModelSel,yearsSel,converter_techs,vintage,activity)
4848          and (converter_hasMinLoad(converter_techs, vintage)
4849                or converter_hasMaxLoad(converter_techs, vintage))
4850          and converter_techParam(converter_techs,vintage,"mipDetailedPartialLoad"))
4851      ..
4852      converter_unitsOnline(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
4853      =g=
4854      converter_unitsUsingActivity_MIP(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity);
4855   
4856  * ==== model definition ====
4857   
4858  Model M_converter
4859  /
4860    Eq_converter_unitsBalance
4861    Eq_converter_unitsFixedDecom
4862    Eq_converter_unitsFreeDecom
4863    Eq_converter_unitsUpperLimit
4864    Eq_converter_unitsLowerLimit
4865    Eq_converter_unitsFixedLimit
4866    Eq_converter_unitsTotalMIP
4867    Eq_converter_unitsOnlineMIP
4868    Eq_converter_activityUpperLimit
4869    Eq_converter_activityLowerLimit
4870    Eq_converter_activityFixedLimit
4871    Eq_converter_rampPos
4872    Eq_converter_rampNeg
4873    Eq_converter_rampLimit
4875    Eq_converter_unitsOnline
4876    Eq_converter_unitsOnlineUC
4878    Eq_converter_activityStartups
4879    Eq_converter_activityShutdowns
4880    Eq_converter_limitStartups
4881    Eq_converter_minUptime
4882    Eq_converter_minDowntime
4883    Eq_converter_activityUpperLimitDetailedPartLoadMinReq
4884    Eq_converter_activityUpperLimitDetailedPartLoadMaxReq
4885    Eq_converter_activityLowerLimitDetailedPartLoadMinReq
4886    Eq_converter_activityUpperLimitPartLoad
4887    Eq_converter_activityLowerLimitPartLoad
4888    Eq_converter_noOnlineIdle
4889    Eq_converter_noOnlineIdleDetailedPartLoad
4890    Eq_converter_activityModeLimit
4891  /;
INCLUDE    C:\Local\REMix\framework\remix\framework\model\source\core\storage.gms
4893  * SPDX-FileCopyrightText: Copyright (c) 2023 German Aerospace Center (DLR)
4894  * SPDX-License-Identifier: BSD-3-Clause
4895   
4896  * // # core_storage
4897  * // The equations in this file describe the storages in the model.
4898   
4899  * // ## Variables
4900  * // {special_table_storage_variables}
5229   
5230   
5231  * === SoC mappings ===
5232  set storage_usedTechSoCState(storage_techs,vintage,soc_statesIn);
5233  storage_usedTechSoCState(storage_techs,vintage,soc_states(soc_statesIn))
5234      $(storage_SoCParam(storage_techs,vintage,soc_states,"eRate") > 0
5235        and storage_SoCParam(storage_techs,vintage,soc_states,"cRate") > 0)
5236      = yes;
5237   
5238  set storage_validSoCRange(storage_techs,vintage);
5239  storage_validSoCRange(storage_techs,vintage)
5240      = smax(soc_states$storage_usedTechSoCState(storage_techs,vintage,soc_states), storage_SoCParam(storage_techs,vintage,soc_states,"SoC")) = 1
5241        and smin(soc_states$storage_usedTechSoCState(storage_techs,vintage,soc_states), storage_SoCParam(storage_techs,vintage,soc_states,"SoC")) = 0;
5242   
5243  * === Translate SoC parameters to ordered SoC-set ===
5244  * set ordered_socs / soc1*soc20 /;
5245  * alias(soc_states, soc_states_c);
5246  * parameter storage_SoCParam_ordered(storage_techs,vintage,ordered_socs,pc_storage_SoCParam);
5247  * storage_SoCParam_ordered(storage_techs,vintage,ordered_socs,pc_storage_SoCParam)
5248  *     $storage_validSoCRange(storage_techs,vintage)
5249  *     = sum(soc_states$(ord(ordered_socs) = sum(soc_states_c$(storage_SoCParam(storage_techs,vintage,soc_states_c,"SoC") <= storage_SoCParam(storage_techs,vintage,soc_states,"SoC")
5250  *                                                            and storage_usedTechSoCState(storage_techs,vintage,soc_states_c)), 1)
5251  *                       and storage_usedTechSoCState(storage_techs,vintage,soc_states)),
5252  *           storage_SoCParam(storage_techs,vintage,soc_states,pc_storage_SoCParam));
5253  *
5254  * set storage_usedTechSoCStateOrdered(storage_techs,vintage,ordered_socs);
5255  * storage_usedTechSoCStateOrdered(storage_techs,vintage,ordered_socs)
5256  *     $(storage_SoCParam_ordered(storage_techs,vintage,ordered_socs,"eRate") > 0
5257  *       and storage_SoCParam_ordered(storage_techs,vintage,ordered_socs,"cRate") > 0)
5258  *     = yes;
5259   
5260  parameter storage_bigM(storage_techs,vintage);
5261  storage_bigM(storage_techs,vintage) = smax((nodesModel,years), storage_reservoirParam(nodesModel,years,storage_techs,"unitsUpperLimit"));
5262  storage_bigM(storage_techs,vintage)$(storage_bigM(storage_techs,vintage) = INF) = 10000;
5263  storage_bigM(storage_techs,vintage)$(storage_bigM(storage_techs,vintage) = 0) = 10000;
5264   
5265  * === calculate the number of years represented by single year to calc ===
5266  alias(yearsToCalc, yearsToCalc_a)
5267  parameter representedYears(years);
5268  representedYears(years) = 0.5 *(smin(yearsToCalc$(yearsToCalc.val > years.val or yearsToCalc.val = smax(yearsToCalc_a, yearsToCalc_a.val)), yearsToCalc.val)
5269                                  - smax(yearsToCalc$(yearsToCalc.val < years.val or yearsToCalc.val = smin(yearsToCalc_a, yearsToCalc_a.val)), yearsToCalc.val));
5270   
5271  * ==== calculation of mappings ====
5272   
5273  * Technologies with a lifeTime > 0 are available
5274  set storage_availTech(nodesModel,years,storage_techs,vintage);
5275  storage_availTech(nodesModel,years,storage_techs,vintage)
5276      $(vintage.val = smax(vintage_a$(vintage_a.val <= years.val
5277          and storage_techParam(storage_techs,vintage_a,"lifeTime") > 0), vintage_a.val)) = yes;
5278   
5279  * Technologies to optimize become unavailable if they have an unitsUpperLimit of 0
5280  storage_availTech(nodesModel,years,storage_techs,vintage)
5281      $(yearsToCalc(years) and storage_reservoirParam(nodesModel,years,storage_techs,"unitsUpperLimit") = 0 ) = no;
5282   
5283  * Technologies already built become unavailable if they have an unitsBuild of 0
5284  storage_availTech(nodesModel,years,storage_techs,vintage)
5285      $( ( not yearsToCalc(years)) and storage_reservoirParam(nodesModel,years,storage_techs,"unitsBuild") = 0 ) = no;
5286   
5287  * Used technologies are available technologies over their technical lifeTime
5288  set storage_usedTech(nodesModel,years,storage_techs,vintage);
5289  storage_usedTech(nodesModel,years,storage_techs,vintage)
5290      $(vintage.val <= years.val
5291          and years.val < smax(years_a$storage_availTech(nodesModel,years_a,storage_techs,vintage),
5292                                              years_a.val + storage_techParam(storage_techs,vintage,"lifeTime"))
5293          ) = yes;
5294   
5295  * Technologies have to be decomissioned in the interval of first avail + lifetime to last avail + lifetime
5296  set storage_decomTech(nodesModel,years,storage_techs,vintage);
5297  storage_decomTech(nodesModel,years,storage_techs,vintage)
5298    $(sum(years_a$storage_usedTech(nodesModel,years_a,storage_techs,vintage), 1)
5299      and sum(yearsToCalc
5300        $(sameas(years, yearsToCalc)
5301          and yearsToCalc.val >= smin(years_a$storage_availTech(nodesModel,years_a,storage_techs,vintage), years_a.val) + storage_techParam(storage_techs,vintage,"lifeTime")
5302          and yearsToCalc.val <= smax(years_a$storage_availTech(nodesModel,years_a,storage_techs,vintage), years_a.val) + storage_techParam(storage_techs,vintage,"lifeTime")), 1))
5303    = yes;
5304   
5305  * Extend the decom frame to the year after the last year of usedTech
5306  storage_decomTech(nodesModel,yearsToCalc,storage_techs,vintage)
5307    $(storage_usedTech(nodesModel,yearsToCalc-1,storage_techs,vintage)
5308      and storage_decomTech(nodesModel,yearsToCalc-1,storage_techs,vintage))
5309    = yes;
5310   
5311  * Mapping for used commodities
5312  set storage_usedCom(storage_techs,vintage,commodity);
5313  option storage_usedCom < storage_sizeParam;
5314   
5315  set storage_usedTechCom(nodesModel,years,storage_techs,vintage,commodity);
5316  storage_usedTechCom(nodesModel,years,storage_techs,vintage,commodity)
5317      $(storage_usedTech(nodesModel,years,storage_techs,vintage)
5318          and storage_usedCom(storage_techs,vintage,commodity))
5319      = yes;
5320   
5321   
5322  * // ## Load units from gdx file
5324   
5325  * ==== aggregation of profiles ====
5326  * derive upper and lower profiles then aggregate
5327  set storage_level_hasProfileIn(nodesData,years,storage_techs,pc_storage_levelProfile);
5328  option storage_level_hasProfileIn < storage_levelProfileIn;
5329   
5330  set storage_level_hasProfile(nodesModel,years,storage_techs,pc_storage_levelProfile);
5331  storage_level_hasProfile(nodesModelToCalc,yearsToCalc,storage_techs,pc_storage_levelProfile)
5332      = sum(nodesData$aggregateNodesModel(nodesData,nodesModelToCalc),
5333              storage_level_hasProfileIn(nodesData,yearsToCalc,storage_techs,pc_storage_levelProfile));
5334   
5335  * weighted average for a real sum of units upper limits, plain average if one region has an upper limit of inf
5336  parameter storage_levelProfile(timeModel,nodesModel,years,storage_techs,vintage,pc_storage_levelProfile);
5337  storage_levelProfile(timeModelToCalc,storage_usedTech(nodesModelToCalc,yearsToCalc,storage_techs,vintage),"upper")
5338      = storage_techParam(storage_techs,vintage,"levelUpperLimit");
5339  storage_levelProfile(timeModelToCalc,storage_usedTech(nodesModelToCalc,yearsToCalc,storage_techs,vintage),"lower")
5340      = storage_techParam(storage_techs,vintage,"levelLowerLimit");
5341   
5342  set storage_finiteUnitLimit(nodesModelToCalc,yearsToCalc,storage_techs);
5343  storage_finiteUnitLimit(nodesModelToCalc,yearsToCalc,storage_techs) = sum(nodesData$aggregateNodesModel(nodesData,nodesModelToCalc), storage_reservoirParamIn(nodesData,yearsToCalc,storage_techs,"unitsUpperLimit")) > 0
5344                                                   and sum(nodesData$aggregateNodesModel(nodesData,nodesModelToCalc), storage_reservoirParamIn(nodesData,yearsToCalc,storage_techs,"unitsUpperLimit")) < inf;
5345   
5346  storage_levelProfile(timeModelToCalc,storage_usedTech(nodesModelToCalc,yearsToCalc,storage_techs,vintage),pc_storage_levelProfile)
5347      $( storage_level_hasProfile(nodesModelToCalc,yearsToCalc,storage_techs,pc_storage_levelProfile)
5348          and storage_finiteUnitLimit(nodesModelToCalc,yearsToCalc,storage_techs))
5349      = sum(nodesData$aggregateNodesModel(nodesData,nodesModelToCalc),
5350              sum(timeData$timeMapping(timeData,timeModelToCalc),
5351                    storage_levelProfileIn(timeData,nodesData,yearsToCalc,storage_techs,pc_storage_levelProfile))
5352                / timeLength(timeModelToCalc)
5353              * storage_reservoirParamIn(nodesData,yearsToCalc,storage_techs,"unitsUpperLimit"))
5354      / sum(nodesData$aggregateNodesModel(nodesData,nodesModelToCalc),
5355              storage_reservoirParamIn(nodesData,yearsToCalc,storage_techs,"unitsUpperLimit"));
5356   
5357  storage_levelProfile(timeModelToCalc,storage_usedTech(nodesModelToCalc,yearsToCalc,storage_techs,vintage),pc_storage_levelProfile)
5358      $( storage_level_hasProfile(nodesModelToCalc,yearsToCalc,storage_techs,pc_storage_levelProfile)
5359          and sum(nodesData$aggregateNodesModel(nodesData,nodesModelToCalc),
5360                      storage_reservoirParamIn(nodesData,yearsToCalc,storage_techs,"unitsUpperLimit")) = inf )
5361      = sum(nodesData$(aggregateNodesModel(nodesData,nodesModelToCalc)
5362                      and storage_reservoirParamIn(nodesData,yearsToCalc,storage_techs,"unitsUpperLimit") = inf ),
5363              sum(timeData$timeMapping(timeData,timeModelToCalc),
5364                    storage_levelProfileIn(timeData,nodesData,yearsToCalc,storage_techs,pc_storage_levelProfile))
5365                / timeLength(timeModelToCalc))
5366      / sum(nodesData$(aggregateNodesModel(nodesData,nodesModelToCalc)
5367                      and storage_reservoirParamIn(nodesData,yearsToCalc,storage_techs,"unitsUpperLimit") = inf ), 1);
5368   
5369  * for fixed profiles overwrite upper and lower profile
5370  storage_levelProfile(timeModelToCalc,nodesModelToCalc,yearsToCalc,storage_techs,vintage,"lower")
5371      $storage_level_hasProfile(nodesModelToCalc,yearsToCalc,storage_techs,"fixed")
5372      = storage_levelProfile(timeModelToCalc,nodesModelToCalc,yearsToCalc,storage_techs,vintage,"fixed");
5373   
5374  storage_levelProfile(timeModelToCalc,nodesModelToCalc,yearsToCalc,storage_techs,vintage,"upper")
5375      $storage_level_hasProfile(nodesModelToCalc,yearsToCalc,storage_techs,"fixed")
5376      = storage_levelProfile(timeModelToCalc,nodesModelToCalc,yearsToCalc,storage_techs,vintage,"fixed");
5377   
5378   
5379  * ==== parameter modifications ====
5380  storage_reservoirParam(nodesModel,years,storage_techs,"unitsLowerLimit")
5381          $sum(vintage, storage_techParam(storage_techs,vintage,"mipUnits"))
5382      = floor(storage_reservoirParam(nodesModel,years,storage_techs,"unitsLowerLimit"));
5383  storage_reservoirParam(nodesModel,years,storage_techs,"unitsUpperLimit")
5384          $sum(vintage, storage_techParam(storage_techs,vintage,"mipUnits"))
5385      = ceil(storage_reservoirParam(nodesModel,years,storage_techs,"unitsUpperLimit"));
5386   
5387   
5388  * ==== definition of variables ====
5389   
5390  * Initialise variables for unitsBuild
5391  storage_unitsBuild.l(nodesModel,years,storage_techs,vintage)
5392      $storage_availTech(nodesModel,years,storage_techs,vintage)
5393      = storage_reservoirParam(nodesModel,years,storage_techs,"unitsBuild");
5394  storage_unitsBuild.lo(nodesModel,yearsToCalc,storage_techs,vintage)
5395      $storage_availTech(nodesModel,yearsToCalc,storage_techs,vintage)
5396      = storage_unitsBuild.l(nodesModel,yearsToCalc,storage_techs,vintage);
5397  storage_unitsBuild.fx(nodesModel,years,storage_techs,vintage)
5398      $storage_reservoirParam(nodesModel,years,storage_techs,"noExpansion")
5399      = storage_unitsBuild.l(nodesModel,years,storage_techs,vintage);
5400   
5401  * Initialise variables for unitsDecom
5402  storage_unitsDecom.l(nodesModel,years,storage_techs,vintage)
5403      $(storage_decomTech(nodesModel,years,storage_techs,vintage)
5404        and years.val < sum(yearsToCalc$(ord(yearsToCalc) = 1), yearsToCalc.val))
5405      = sum((years_a,years_aa)$(sameas(years-1, years_aa)
5406                        and years_a.val > years_aa.val - storage_techParam(storage_techs,vintage,'lifeTime')
5407                        and years_a.val <= years.val - storage_techParam(storage_techs,vintage,'lifeTime')
5408                        and storage_availTech(nodesModel,years_a,storage_techs,vintage)),
5409          storage_unitsBuild.l(nodesModel,years_a,storage_techs,vintage));
5410   
5411  storage_unitsDecom.l(nodesModel,yearsToCalc,storage_techs,vintage)
5412    $storage_decomTech(nodesModel,yearsToCalc,storage_techs,vintage)
5413    = sum(years$
5414          (years.val < sum(yearsToCalc_a$(ord(yearsToCalc_a) = 1), yearsToCalc_a.val)
5415            and storage_availTech(nodesModel,years,storage_techs,vintage)
5416            and years.val > sum(years_a$sameas(years_a, yearsToCalc-1), years_a.val) - storage_techParam(storage_techs,vintage,'lifeTime')
5417            and years.val <= yearsToCalc.val - storage_techParam(storage_techs,vintage,'lifeTime')),
5418        storage_unitsBuild.l(nodesModel,years,storage_techs,vintage))
5419      + sum(yearsToCalc_a$
5420          (yearsToCalc_a.val < sum(yearsToCalc_aa$(ord(yearsToCalc_aa) > 1), yearsToCalc_a.val)
5421            and storage_availTech(nodesModel,yearsToCalc_a,storage_techs,vintage)
5422            and yearsToCalc_a.val > sum(years_a$sameas(years_a, yearsToCalc-1), years_a.val) - storage_techParam(storage_techs,vintage,'lifeTime')
5423            and yearsToCalc_a.val <= yearsToCalc.val - storage_techParam(storage_techs,vintage,'lifeTime')),
5424        storage_unitsBuild.l(nodesModel,yearsToCalc_a,storage_techs,vintage));
5425        ;
5426   
5427  storage_unitsDecom.lo(nodesModel,yearsToCalc,storage_techs,vintage)
5428      $(storage_usedTech(nodesModel,yearsToCalc,storage_techs,vintage)
5429        and not storage_techParam(storage_techs,vintage,"freeDecom"))
5430      = storage_unitsDecom.l(nodesModel,yearsToCalc,storage_techs,vintage)
5431   
5432  * Calculate planned unit expansion
5433  parameter storage_unitsPlanned(nodesModel,years,storage_techs,vintage);
5434  storage_unitsPlanned(nodesModel,years,storage_techs,vintage) = 0;
5435  loop(years,
5436    storage_unitsPlanned(nodesModel,years,storage_techs,vintage)
5437      =
5438      storage_unitsPlanned(nodesModel,years-1,storage_techs,vintage)
5439          $storage_usedTech(nodesModel,years-1,storage_techs,vintage)
5440      + storage_unitsBuild.l(nodesModel,years,storage_techs,vintage)
5441          $storage_availTech(nodesModel,years,storage_techs,vintage)
5442      - storage_unitsDecom.l(nodesModel,years,storage_techs,vintage)
5443          $storage_usedTech(nodesModel,years,storage_techs,vintage);
5444  );
5445   
5446  * Set initial state for planned units
5447  storage_unitsTotal.l(nodesModel,years,storage_techs,vintage)
5448    = storage_unitsPlanned(nodesModel,years,storage_techs,vintage)
5449   
5450  * Calculate if planned unit expansion is bounded by upper and lower limits
5451  set storage_unitBoundsFixed(nodesModel,years,storage_techs);
5452  storage_unitBoundsFixed(nodesModel,years,storage_techs)
5453    $(sum(vintage$storage_usedTech(nodesModel,years,storage_techs,vintage),
5454          storage_unitsPlanned(nodesModel,years,storage_techs,vintage))
5455      = storage_reservoirParam(nodesModel,years,storage_techs,"unitsUpperLimit")
5456    and sum(vintage$storage_usedTech(nodesModel,years,storage_techs,vintage),
5457          storage_unitsPlanned(nodesModel,years,storage_techs,vintage))
5458      = storage_reservoirParam(nodesModel,years,storage_techs,"unitsLowerLimit"))
5459    = yes;
5460   
5461  * Fix unitsBuild, unitsDecom, unitsTotal if levels are predetermined by upper and lower limits
5462  storage_unitsBuild.fx(nodesModel,years,storage_techs,vintage)
5463    $(storage_availTech(nodesModel,years,storage_techs,vintage)
5464      and storage_unitBoundsFixed(nodesModel,years,storage_techs))
5465    = storage_unitsBuild.l(nodesModel,years,storage_techs,vintage);
5466  storage_unitsDecom.fx(nodesModel,years,storage_techs,vintage)
5467    $(storage_usedTech(nodesModel,years,storage_techs,vintage)
5468      and storage_unitBoundsFixed(nodesModel,years,storage_techs))
5469    = storage_unitsDecom.l(nodesModel,years,storage_techs,vintage);
5470  storage_unitsTotal.fx(nodesModel,years,storage_techs,vintage)
5471    $(storage_usedTech(nodesModel,years,storage_techs,vintage)
5472      and storage_unitBoundsFixed(nodesModel,years,storage_techs))
5473    = storage_unitsTotal.l(nodesModel,years,storage_techs,vintage);
5474   
5475  storage_unitsTotal_MIP.up(nodesModel,years,storage_techs,vintage)
5476      $(storage_usedTech(nodesModel,years,storage_techs,vintage)
5477        and storage_techParam(storage_techs,vintage,"mipUnits") = 1)
5478      = storage_reservoirParam(nodesModel,years,storage_techs,"unitsUpperLimit");
5479   
5480  * Add parameter for fixing capacities during myopic runs
5481  parameter storage_unitsDelta(nodesModel,years,storage_techs);
5482   
5483   
5484  * ==== declaration of equations ====
5485   
5486  equations
5487    Eq_storage_unitsBalance(nodesModel,years,storage_techs,vintage
5488      ) "Ensures the units balance over the planning period."
5489    Eq_storage_unitsFixedDecom(nodesModel,years,storage_techs,vintage
5490      ) "Restricts the fixed decommissioning of units over the planning period."
5491    Eq_storage_unitsFreeDecom(nodesModel,years,storage_techs,vintage
5492      ) "Restricts the free decommissioning of units over the planning period."
5493    Eq_storage_unitsUpperLimit(nodesModel,years,storage_techs
5494      ) "Upper bound for the total number of units."
5495    Eq_storage_unitsLowerLimit(nodesModel,years,storage_techs
5496      ) "Lower bound for the total number of units."
5497    Eq_storage_unitsTotalMIP(nodesModel,years,storage_techs,vintage
5498      ) "Fixes the total number of units to the corresponding integer variable."
5499   
5500    Eq_storage_levelUpperLimit(timeModel,nodesModel,years,storage_techs,vintage,commodity
5501      ) "Upper bound for the total number of units."
5502    Eq_storage_levelUpperLimit_degradation(timeModel,nodesModel,years,storage_techs,vintage,commodity
5503      ) "Upper bound for the total number of units if the storage technology accounts for degradation."
5504    Eq_storage_levelLowerLimit(timeModel,nodesModel,years,storage_techs,vintage,commodity
5505      ) "Lower bound for the total number of units."
5506    Eq_storage_losses(timeModel,nodesModel,years,storage_techs,vintage,commodity
5507      ) "Stored commodities lost due to self discharge."
5508    Eq_storage_unitsBalanceStates(nodesModel,years,storage_techs,vintage
5509      ) "Currently available units must have been built at some point in time and have some state of degradation."
5510    Eq_storage_unitsUpperLimitPerState(nodesModel,years,yearsCom,storage_techs,vintage
5511      ) "There cannot be more units from a certain year than the amount built in that year."
5512    Eq_storage_unitsStatesNoRecovery(nodesModel,years,yearsCom,storage_techs,vintage,degradation_states
5513      ) "There is no recovery."
5514    Eq_storage_cRateLimit(timeModel,nodesModel,years,storage_techs,vintage,commodity
5515      ) "Limit charging rate based on unit capacity."
5516    Eq_storage_eRateLimit(timeModel,nodesModel,years,storage_techs,vintage,commodity
5517      ) "Limit discharging rate based on unit capacity."
5518    Eq_storage_charge(timeModel,nodesModel,years,storage_techs,vintage,commodity
5519      ) "Positive change in state of charge is influx."
5520    Eq_storage_discharge(timeModel,nodesModel,years,storage_techs,vintage,commodity
5521      ) "Negative change in state of charge is outflux."
5522   
5523    Eq_storage_levelStateSum(timeModel,nodesModel,years,storage_techs,vintage,commodity
5524      ) "Sum of degradation class storage levels is the global level."
5525    Eq_storage_levelUpperLimitPerAge(timeModel,nodesModel,years,yearsCom,storage_techs,vintage,commodity
5526      ) "Upper bound for units of a certain state."
5527    Eq_storage_chargingPerAge(timeModel,nodesModel,years,yearsCom,storage_techs,vintage,commodity
5528      ) "Positive change in state of charge is influx for each degradation class."
5529    Eq_storage_chargeBasedDegradationDistribution(nodesModel,years,yearsCom,storage_techs,vintage,commodity
5530      ) "Determine degradation states of storage units."
5531    Eq_storage_unitsDecomStateSum(nodesModel,years,storage_techs,vintage
5532      ) "All decomminsioned units must have a degradation state."
5533    Eq_storage_unitsDegradation(nodesModel,years,yearsCom,storage_techs,vintage,degradation_states
5534      ) "Only allow one range of degradation states per year and age group."
5535    Eq_storage_unitsDegradation_onlyOneRange(nodesModel,years,yearsCom,storage_techs,vintage
5536      ) "Limit usable degradation states to one range, i.e., two neighboring states."
5537   
5538    Eq_storage_unitsSoC_sum(timeModel,nodesModel,years,storage_techs,vintage
5539      ) "Every unit has a state of charge."
5540    Eq_storage_levelSoC(timeModel,nodesModel,years,storage_techs,vintage,commodity
5541      ) "Every unit has a state of charge."
5542    Eq_storage_unitsSoC(timeModel,nodesModel,years,storage_techs,vintage,soc_statesIn
5543      ) "Number of units in particular SoC."
5544    Eq_storage_unitsSoC_onlyOneRange(timeModel,nodesModel,years,storage_techs,vintage
5545      ) "Limit usable SoC states to one range, i.e., two neighboring states."
5546   
5547    Eq_storage_cRateLimit_SoC(timeModel,nodesModel,years,storage_techs,vintage,commodity
5548      ) "Limit charging rate based on unit capacity."
5549    Eq_storage_eRateLimit_SoC(timeModel,nodesModel,years,storage_techs,vintage,commodity
5550      ) "Limit discharging rate based on unit capacity."
5551    ;
5552   
5553  * ==== equation definition ====
5554  * // ## Equations
5555  * // ### Storage Units Balance
5556  * // Ensures that the total units are consistent with the built and decommissioned units.
5557  * // {Eq_storage_unitsBalance}
5558  Eq_storage_unitsBalance(nodesModelSel,yearsSel,storage_techs,vintage)
5559      $((storage_usedTech(nodesModelSel,yearsSel,storage_techs,vintage)
5560            or sum(years$sameas(years,yearsSel), storage_usedTech(nodesModelSel,years-1,storage_techs,vintage)))
5561          and not storage_unitBoundsFixed(nodesModelSel,yearsSel,storage_techs))
5562      ..
5563      storage_unitsTotal(nodesModelSel,yearsSel,storage_techs,vintage)
5564      =e=
5565          sum(yearsToCalc$(ord(yearsToCalc) = 1 and sameas(yearsToCalc, yearsSel)),
5566        sum(years$sameas(years, yearsToCalc),
5567          storage_unitsTotal(nodesModelSel,years-1,storage_techs,vintage)
5568            $storage_usedTech(nodesModelSel,years-1,storage_techs,vintage)))
5569      + sum((yearsToCalc)$(ord(yearsToCalc) > 1 and sameas(yearsToCalc, yearsSel)),
5570        storage_unitsTotal(nodesModelSel,yearsToCalc-1,storage_techs,vintage)
5571          $storage_usedTech(nodesModelSel,yearsToCalc-1,storage_techs,vintage))
5572      + storage_unitsBuild(nodesModelSel,yearsSel,storage_techs,vintage)
5573          $storage_availTech(nodesModelSel,yearsSel,storage_techs,vintage)
5574      - storage_unitsDecom(nodesModelSel,yearsSel,storage_techs,vintage)
5575          $storage_usedTech(nodesModelSel,yearsSel,storage_techs,vintage);
5576   
5577  * // ### Storage Units Fixed Decommission
5578  * // Restricts the fixed decommissioning of storage units over the planning period.
5579  * // {Eq_storage_unitsFixedDecom}
5580  Eq_storage_unitsFixedDecom(nodesModelSel,yearsSel,storage_techs,vintage)
5581      $(storage_decomTech(nodesModelSel,yearsSel,storage_techs,vintage)
5582          and not storage_techParam(storage_techs,vintage,"freeDecom") = 1
5583          and not storage_unitBoundsFixed(nodesModelSel,yearsSel,storage_techs))
5584      ..
5585      storage_unitsDecom(nodesModelSel,yearsSel,storage_techs,vintage)
5586      =e=
5587      sum(years$
5588          (storage_availTech(nodesModelSel,years,storage_techs,vintage)
5589            and years.val > sum(yearsToCalc$sameas(yearsToCalc+1, yearsSel), yearsToCalc.val) - storage_techParam(storage_techs,vintage,'lifeTime')
5590            and years.val <= yearsSel.val - storage_techParam(storage_techs,vintage,'lifeTime')),
5591        storage_unitsBuild(nodesModelSel,years,storage_techs,vintage));
5592   
5593  * // ### Storage Units Free Decomission
5594  * // Restricts the free decommissioning of storage units over the planning period.
5595  * // {Eq_storage_unitsFreeDecom}
5596  Eq_storage_unitsFreeDecom(nodesModelSel,yearsSel,storage_techs,vintage)
5597      $((storage_decomTech(nodesModelSel,yearsSel,storage_techs,vintage)
5598          or storage_usedTech(nodesModelSel,yearsSel,storage_techs,vintage))
5599          and storage_techParam(storage_techs,vintage,"freeDecom") = 1)
5600      ..
5601      sum(years$
5602            ((storage_decomTech(nodesModelSel,years,storage_techs,vintage)
5603              or storage_usedTech(nodesModelSel,years,storage_techs,vintage))
5604              and years.val < sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)),
5605          storage_unitsDecom(nodesModelSel,years,storage_techs,vintage))
5606      + sum(yearsToCalc$
5607            ((storage_decomTech(nodesModelSel,yearsToCalc,storage_techs,vintage)
5608              or storage_usedTech(nodesModelSel,yearsToCalc,storage_techs,vintage))
5609              and yearsToCalc.val >= sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
5610              and yearsToCalc.val <= yearsSel.val),
5611          storage_unitsDecom(nodesModelSel,yearsToCalc,storage_techs,vintage))
5612      =g=
5613      sum(years$
5614            (storage_availTech(nodesModelSel,years,storage_techs,vintage)
5615              and years.val < sum(yearsToCalc$(ord(yearsToCalc)=1), yearsToCalc.val) - storage_techParam(storage_techs,vintage,'lifeTime')),
5616          storage_unitsBuild(nodesModelSel,years,storage_techs,vintage))
5617      + sum(yearsToCalc$
5618            (storage_availTech(nodesModelSel,yearsToCalc,storage_techs,vintage)
5619              and yearsToCalc.val >= sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
5620              and yearsToCalc.val <= yearsSel.val - storage_techParam(storage_techs,vintage,'lifeTime')),
5621          storage_unitsBuild(nodesModelSel,yearsToCalc,storage_techs,vintage));
5622   
5623  * // ### Storage Units Lower Limit
5624  * // Lower bound for the total number of storage units.
5625  * // {Eq_storage_unitsLowerLimit}
5626  Eq_storage_unitsLowerLimit(nodesModelSel,yearsSel,storage_techs)
5627      $(storage_reservoirParam(nodesModelSel,yearsSel,storage_techs,'unitsLowerLimit') > 0 )
5628      ..
5629      sum(vintage$storage_usedTech(nodesModelSel,yearsSel,storage_techs,vintage),
5630          storage_unitsTotal(nodesModelSel,yearsSel,storage_techs,vintage))
5631      =g=
5632      storage_reservoirParam(nodesModelSel,yearsSel,storage_techs,"unitsLowerLimit");
5633   
5634  * // ### Storage Units Upper Limit
5635  * // Upper bound for the total number of storage units.
5636  * // {Eq_storage_unitsUpperLimit}
5637  Eq_storage_unitsUpperLimit(nodesModelSel,yearsSel,storage_techs)
5638      $(storage_reservoirParam(nodesModelSel,yearsSel,storage_techs,'unitsUpperLimit') >= 0
5639          and storage_reservoirParam(nodesModelSel,yearsSel,storage_techs,'unitsUpperLimit') < +inf )
5640      ..
5641      sum(vintage$storage_usedTech(nodesModelSel,yearsSel,storage_techs,vintage),
5642          storage_unitsTotal(nodesModelSel,yearsSel,storage_techs,vintage))
5643      =l=
5644      storage_reservoirParam(nodesModelSel,yearsSel,storage_techs,"unitsUpperLimit");
5645   
5646  * // ### Storage Units Total MIP
5647  * // Fixes the total number of storage units to the corresponding integer variable.
5648  * // {Eq_storage_unitsTotalMIP}
5649  Eq_storage_unitsTotalMIP(nodesModelSel,yearsSel,storage_techs,vintage)
5650      $( storage_usedTech(nodesModelSel,yearsSel,storage_techs,vintage)
5651          and storage_techParam(storage_techs,vintage,"mipUnits") = 1 )
5652      ..
5653      storage_unitsTotal(nodesModelSel,yearsSel,storage_techs,vintage)
5654      =e=
5655      storage_unitsTotal_MIP(nodesModelSel,yearsSel,storage_techs,vintage);
5656   
5657  * // ### Storage Level Lower Limit
5658  * // Lower limit on the storage level.
5659  * // {Eq_storage_levelLowerLimit}
5660  Eq_storage_levelLowerLimit(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
5661      $(storage_usedTechCom(nodesModelSel,yearsSel,storage_techs,vintage,commodity)
5662          and storage_levelProfile(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,"lower") > 0)
5663      ..
5664      storage_level(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
5665      =g=
5666      storage_levelProfile(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,"lower")
5667      * storage_sizeParam(storage_techs,vintage,commodity,"size")
5668      * storage_unitsTotal(nodesModelSel,yearsSel,storage_techs,vintage);
5669   
5670  * // ### Storage Level Upper Limit
5671  * // Upper limit on the storage level.
5672  * // {Eq_storage_levelUpperLimit}
5673  Eq_storage_levelUpperLimit(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
5674      $(storage_usedTechCom(nodesModelSel,yearsSel,storage_techs,vintage,commodity)
5675          and not storage_hasDegradation(storage_techs,vintage)
5676          and storage_levelProfile(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,"upper") >= 0)
5677      ..
5678      storage_level(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
5679      =l=
5680      storage_levelProfile(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,"upper")
5681      * storage_sizeParam(storage_techs,vintage,commodity,"size")
5682      * storage_unitsTotal(nodesModelSel,yearsSel,storage_techs,vintage);
5683   
5684  * // ### Storage Level Upper Limit (degradation)
5685  * // Upper limit on the storage level if the storage technology accounts for degradation.
5686  * // {Eq_storage_levelUpperLimit_degradation}
5687  Eq_storage_levelUpperLimit_degradation(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
5688      $(storage_usedTechCom(nodesModelSel,yearsSel,storage_techs,vintage,commodity)
5689          and storage_hasDegradation(storage_techs,vintage)
5690          and storage_levelProfile(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,"upper") >= 0)
5691      ..
5692      storage_level(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
5693      =l=
5694      storage_levelProfile(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,"upper")
5695      * storage_sizeParam(storage_techs,vintage,commodity,"size")
5696      * sum((degradation_states,yearsCom)$storage_usedDegradation(storage_techs,vintage,degradation_states),
5697              (storage_degradationParam(storage_techs,vintage,degradation_states,"remainingCapacity")
5698                - (yearsSel.val - yearsCom.val) * storage_techParam(storage_techs,vintage,"annualDegradation"))
5699                * storage_unitsStateTracker(nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,degradation_states));
5700   
5701  * // ### Storage Unit States Sum (degradation)
5702  * // The number of units in all degradation state must match the total unit number.
5703  * // {Eq_storage_unitsBalanceStates}
5704  Eq_storage_unitsBalanceStates(nodesModelSel,yearsSel,storage_techs,vintage)
5705      $(storage_usedTech(nodesModelSel,yearsSel,storage_techs,vintage)
5706        and storage_hasDegradation(storage_techs,vintage))
5707      ..
5708      storage_unitsTotal(nodesModelSel,yearsSel,storage_techs,vintage)
5709      =e=
5710      sum((yearsCom,degradation_states)$storage_usedDegradation(storage_techs,vintage,degradation_states),
5711            storage_unitsStateTracker(nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,degradation_states));
5712   
5713  * // ### Storage Unit States Upper Limit(degradation)
5714  * // The states of all commissioned units in one year (unitsBuilt) must either still be tracked or have been decommissioned.
5715  * // {Eq_storage_unitsUpperLimitPerState}
5716  Eq_storage_unitsUpperLimitPerState(nodesModelSel,yearsSel,yearsCom,storage_techs,vintage)
5717      $(storage_usedTech(nodesModelSel,yearsSel,storage_techs,vintage)
5718          and storage_hasDegradation(storage_techs,vintage))
5719      ..
5720      sum(degradation_states$storage_usedDegradation(storage_techs,vintage,degradation_states),
5721            storage_unitsStateTracker(nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,degradation_states)
5722            + sum(years$(years.val <= yearsSel.val),
5723                  storage_unitsStateTrackerDecom(nodesModelSel,years,yearsCom,storage_techs,vintage,degradation_states)))
5724      =e=
5725      storage_unitsBuild(nodesModelSel,yearsCom,storage_techs,vintage)$(yearsCom.val <= yearsSel.val);
5726   
5727  * // ### Storage Unit States Progression (degradation)
5728  * // Unit recovery by reassigning the storage cycles to other units is disabled. Therefore, the number of units in a particular degradation state can only increase if the number in a less degraded state is decreased by at least the same amount.
5729  * // {Eq_storage_unitsStatesNoRecovery}
5730  alias(degradation_states, dc_states);
5731  Eq_storage_unitsStatesNoRecovery(nodesModelSel,yearsSel(yearsToCalc),yearsCom,storage_techs,vintage,degradation_states)
5732      $(storage_usedTech(nodesModelSel,yearsSel,storage_techs,vintage)
5733        and yearsToCalc.val > yearsCom.val
5734        and storage_usedDegradation(storage_techs,vintage,degradation_states))
5735      ..
5736      sum(dc_states$(storage_usedDegradation(storage_techs,vintage,dc_states)
5737                and storage_degradationParam(storage_techs,vintage,dc_states,"maxFullCycles") <= storage_degradationParam(storage_techs,vintage,degradation_states,"maxFullCycles")),
5738              storage_unitsStateTracker(nodesModelSel,yearsToCalc,yearsCom,storage_techs,vintage,dc_states)
5739              + sum(years$(years.val <= yearsToCalc.val), storage_unitsStateTrackerDecom(nodesModelSel,years,yearsCom,storage_techs,vintage,dc_states)))
5740      =l=
5741      sum(dc_states$(storage_usedDegradation(storage_techs,vintage,dc_states)
5742                      and storage_degradationParam(storage_techs,vintage,dc_states,"maxFullCycles") <= storage_degradationParam(storage_techs,vintage,degradation_states,"maxFullCycles")),
5743              storage_unitsStateTracker(nodesModelSel,yearsToCalc-1,yearsCom,storage_techs,vintage,dc_states)
5744              + sum(years$(years.val < yearsToCalc.val), storage_unitsStateTrackerDecom(nodesModelSel,years,yearsCom,storage_techs,vintage,dc_states)));
5745   
5746  * // ### Storage Losses
5747  * // Accumulation of storage losses.
5748  * // {Eq_storage_losses}
5749  Eq_storage_losses(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,storage_techs,vintage,commodity)
5750      $storage_usedTechCom(nodesModelSel,yearsSel,storage_techs,vintage,commodity)
5751      ..
5752      storage_losses(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
5753      =e=
5754      - storage_level(timeModelToCalc--1,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
5755        * storage_sizeParam(storage_techs,vintage,commodity,"selfdischarge")
5756      + storage_sizeParam(storage_techs,vintage,commodity,"selfdischargeAbs")
5757      + (storage_techParam(storage_techs,vintage,"chargingLoss")
5758          /(1 - storage_techParam(storage_techs,vintage,"chargingLoss")))
5759        * storage_charge(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
5760          $(storage_techParam(storage_techs,vintage,"chargingLoss") > 0)
5761      + storage_techParam(storage_techs,vintage,"dischargingLoss")
5762        * storage_discharge(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
5763          $(storage_techParam(storage_techs,vintage,"dischargingLoss") > 0)
5764      - storage_sizeParam(storage_techs,vintage,commodity,"size")
5765        * sum(soc_states$(storage_usedTechSoCState(storage_techs,vintage,soc_states)
5766                          and storage_validSoCRange(storage_techs,vintage)),
5767              storage_unitsSoC(timeModelToCalc--1,nodesModelSel,yearsSel,storage_techs,vintage,soc_states)
5768              * storage_SoCParam(storage_techs,vintage,soc_states,"SoC")
5769              * storage_SoCParam(storage_techs,vintage,soc_states,"selfdischarge"));
5770   
5771  * // ### C-Rate Limit
5772  * // The increase in storage level per time step, i.e., the charging rate, is limited relative to the storage capacity.
5773  * // {Eq_storage_cRateLimit}
5774  Eq_storage_cRateLimit(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,storage_techs,vintage,commodity)
5775      $(storage_usedTechCom(nodesModelSel,yearsSel,storage_techs,vintage,commodity)
5776        and storage_techParam(storage_techs,vintage,"maxCRate") > 0)
5777      ..
5778      storage_level(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
5779      - storage_level(timeModelToCalc--1,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
5780      =l=
5781      storage_techParam(storage_techs,vintage,"maxCRate")
5782      * storage_sizeParam(storage_techs,vintage,commodity,"size")
5783      * storage_unitsTotal(nodesModelSel,yearsSel,storage_techs,vintage);
5784   
5785  * // ### E-Rate Limit
5786  * // The decrease in storage level per time step, i.e., the discharging rate, is limited relative to the storage capacity.
5787  * // {Eq_storage_eRateLimit}
5788  Eq_storage_eRateLimit(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,storage_techs,vintage,commodity)
5789      $(storage_usedTechCom(nodesModelSel,yearsSel,storage_techs,vintage,commodity)
5790        and storage_techParam(storage_techs,vintage,"maxERate") > 0)
5791      ..
5792      storage_level(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
5793      - storage_level(timeModelToCalc--1,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
5794      =g=
5795      - storage_techParam(storage_techs,vintage,"maxERate")
5796      * storage_sizeParam(storage_techs,vintage,commodity,"size")
5797      * storage_unitsTotal(nodesModelSel,yearsSel,storage_techs,vintage);
5798   
5799  * // ### Storage Charging
5800  * // Increases in storage levels are accounted as charging amounts.
5801  * // {Eq_storage_charge}
5802  Eq_storage_charge(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,storage_techs,vintage,commodity)
5803      $(storage_usedTechCom(nodesModelSel,yearsSel,storage_techs,vintage,commodity)
5804        and storage_techParam(storage_techs,vintage,"chargingLoss") > 0)
5805      ..
5806      storage_charge(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
5807      =g=
5808      storage_level(timeModelToCalc,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
5809      - storage_level(timeModelToCalc--1,nodesModelSel,yearsSel,storage_techs,vintage,commodity);
5810   
5811  * // ### Storage Discharging
5812  * // Decreases in storage levels are accounted as discharging amounts.
5813  * // {Eq_storage_discharge}
5814  Eq_storage_discharge(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,storage_techs,vintage,commodity)
5815      $(storage_usedTechCom(nodesModelSel,yearsSel,storage_techs,vintage,commodity)
5816        and storage_techParam(storage_techs,vintage,"dischargingLoss") > 0)
5817      ..
5818      storage_discharge(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
5819      =g=
5820      storage_level(timeModelToCalc--1,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
5821      - storage_level(timeModelToCalc,nodesModelSel,yearsSel,storage_techs,vintage,commodity);
5822   
5823  * // ### Storage Level Sum (degradation)
5824  * // The storage level is accounted individually by commissioning year in the case of degradation in order to prohibit the model to assign pre-existing storage cycles to newly built storage reservoirs and thereby avoiding degradation. All those storage levels represent the total storage level.
5825  * // {Eq_storage_levelStateSum}
5826  Eq_storage_levelStateSum(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
5827      $(storage_usedTechCom(nodesModelSel,yearsSel,storage_techs,vintage,commodity)
5828        and storage_techParam(storage_techs,vintage,"usageDegradation"))
5829      ..
5830      storage_level(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
5831      =e=
5832      sum(yearsCom, storage_levelPerAge(timeModelSel,nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,commodity));
5833   
5834  * // ### Storage Level Upper Limit per Age Group (degradation)
5835  * // Upper limit on the storage level per commissioning year if the storage technology accounts for degradation.
5836  * // {Eq_storage_levelUpperLimitPerAge}
5837  Eq_storage_levelUpperLimitPerAge(timeModelSel,nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,commodity)
5838      $(storage_usedTechCom(nodesModelSel,yearsSel,storage_techs,vintage,commodity)
5839        and storage_techParam(storage_techs,vintage,"usageDegradation"))
5840      ..
5841      storage_levelPerAge(timeModelSel,nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,commodity)
5842      =l=
5843      storage_techParam(storage_techs,vintage,"levelUpperLimit")
5844      * storage_sizeParam(storage_techs,vintage,commodity,"size")
5845      * sum(degradation_states,
5846              (storage_degradationParam(storage_techs,vintage,degradation_states,"remainingCapacity")
5847                - (yearsSel.val - yearsCom.val) * storage_techParam(storage_techs,vintage,"annualDegradation"))
5848                * storage_unitsStateTracker(nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,degradation_states));
5849   
5850  * // ### Storage Cycle Distribution to Degradation States per Commissioning Year (degradation)
5851  * // The charging amounts are converted to equivalent full cycles which then must be represented by an adequate distribution of degradation states.
5852  * // {Eq_storage_chargeBasedDegradationDistribution}
5853  alias(years, prev_years);
5854  Eq_storage_chargeBasedDegradationDistribution(nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,commodity)
5855      $(storage_usedTechCom(nodesModelSel,yearsSel,storage_techs,vintage,commodity)
5856        and storage_techParam(storage_techs,vintage,"usageDegradation"))
5857      ..
5858      sum(prev_years$(prev_years.val <= yearsSel.val), representedYears(prev_years)
5859          * sum(timeModel, storage_chargePerAge(timeModel,nodesModelSel,prev_years,yearsCom,storage_techs,vintage,commodity)))
5860      =l=
5861      storage_sizeParam(storage_techs,vintage,commodity,"size")
5862      * sum(dc_states$storage_usedDegradation(storage_techs,vintage,dc_states),
5863          storage_degradationParam(storage_techs,vintage,dc_states,"maxFullCycles")
5864          * (storage_unitsStateTracker(nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,dc_states)
5865             + sum(prev_years$(prev_years.val <= yearsSel.val), storage_unitsStateTrackerDecom(nodesModelSel,prev_years,yearsCom,storage_techs,vintage,dc_states))));
5866   
5867  * // ### Storage Charging per Commissioning Year (degradation)
5868  * // Increases in storage levels are accounted as charging amounts.
5869  * // {Eq_storage_chargingPerAge}
5870  Eq_storage_chargingPerAge(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,commodity)
5871      $(storage_usedTechCom(nodesModelSel,yearsSel,storage_techs,vintage,commodity)
5872        and storage_techParam(storage_techs,vintage,"usageDegradation"))
5873      ..
5874      storage_chargePerAge(timeModelSel,nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,commodity)
5875      =g=
5876      storage_levelPerAge(timeModelToCalc,nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,commodity)
5877      - storage_levelPerAge(timeModelToCalc--1,nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,commodity);
5878   
5879  * // ### Storage Unit Decommissioning States Sum (degradation)
5880  * // The number of decommissioned units in all degradation state must match the total decommissioning unit number.
5881  * // {Eq_storage_unitsDecomStateSum}
5882  Eq_storage_unitsDecomStateSum(nodesModelSel,yearsSel,storage_techs,vintage)
5883      $(storage_techParam(storage_techs,vintage,"usageDegradation"))
5884      ..
5885      storage_unitsDecom(nodesModelSel,yearsSel,storage_techs,vintage)
5886      =e=
5887      sum((yearsCom,degradation_states)$storage_usedDegradation(storage_techs,vintage,degradation_states),
5888          storage_unitsStateTrackerDecom(nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,degradation_states));
5889   
5890  * // ### Storage Unit Sequential Degradation (degradation)
5891  * // Only active degradation ranges, i.e., two neighboring degradation states, can be used.
5892  * // {Eq_storage_unitsDegradation}
5893  alias(degradation_states, degradation_states_a, degradation_states_b);
5894  Eq_storage_unitsDegradation(nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,degradation_states)
5895      $(storage_techParam(storage_techs,vintage,"usageDegradation")
5896        and storage_techParam(storage_techs,vintage,"sequentialDegradationStates"))
5897      ..
5898      sum(degradation_states_a$((storage_degradationParam(storage_techs,vintage,degradation_states_a,"maxFullCycles") = storage_degradationParam(storage_techs,vintage,degradation_states,"maxFullCycles")
5899                        or storage_degradationParam(storage_techs,vintage,degradation_states_a,"maxFullCycles")
5900                                         = smax(degradation_states_b$(storage_degradationParam(storage_techs,vintage,degradation_states_b,"maxFullCycles") < storage_degradationParam(storage_techs,vintage,degradation_states,"maxFullCycles")
5901                                                              and storage_usedDegradation(storage_techs,vintage,degradation_states_b)),
5902                                                              storage_degradationParam(storage_techs,vintage,degradation_states_b,"maxFullCycles")))
5903                        and storage_usedDegradation(storage_techs,vintage,degradation_states_a)),
5904          storage_unitsStateTracker_activeRange(nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,degradation_states_a))
5905      * storage_bigM(storage_techs,vintage)
5906      =g=
5907      storage_unitsStateTracker(nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,degradation_states);
5908   
5909  * // ### Storage Unit Sequential Degradation Range (degradation)
5910  * // Only one degradation range can be active.
5911  * // {Eq_storage_unitsDegradation_onlyOneRange}
5912  Eq_storage_unitsDegradation_onlyOneRange(nodesModelSel,yearsSel,yearsCom,storage_techs,vintage)
5913      $(storage_techParam(storage_techs,vintage,"usageDegradation") and storage_techParam(storage_techs,vintage,"sequentialDegradationStates"))
5914      ..
5915      sum(degradation_states$storage_usedDegradation(storage_techs,vintage,degradation_states),
5916            storage_unitsStateTracker_activeRange(nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,degradation_states))
5917      =e= 1;
5918   
5919  * // ### Storage Unit Sequential State of Charge (SoC)
5920  * // Only active state of charge ranges, i.e., two neighboring states of charge, can be used.
5921  * // {Eq_storage_unitsSoC}
5922  alias(soc_states, soc_states_a, soc_states_b);
5923  Eq_storage_unitsSoC(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,storage_techs,vintage,soc_states)
5924      $(storage_validSoCRange(storage_techs,vintage) and storage_techParam(storage_techs,vintage,"sequentialSoC"))
5925      ..
5926      sum(soc_states_a$((storage_SoCParam(storage_techs,vintage,soc_states_a,"SoC") = storage_SoCParam(storage_techs,vintage,soc_states,"SoC")
5927                        or storage_SoCParam(storage_techs,vintage,soc_states_a,"SoC")
5928                                         = smax(soc_states_b$(storage_SoCParam(storage_techs,vintage,soc_states_b,"SoC") < storage_SoCParam(storage_techs,vintage,soc_states,"SoC")
5929                                                              and storage_usedTechSoCState(storage_techs,vintage,soc_states_b)),
5930                                                              storage_SoCParam(storage_techs,vintage,soc_states_b,"SoC")))
5931                        and storage_usedTechSoCState(storage_techs,vintage,soc_states_a)),
5932          storage_unitsSoC_activeRange(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,soc_states_a))
5933      * storage_bigM(storage_techs,vintage)
5934      =g=
5935      storage_unitsSoC(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,soc_states);
5936   
5937  * // ### Storage Unit Sequential State of Charge Range (SoC)
5938  * // Only one state of charge range can be active.
5939  * // {Eq_storage_unitsSoC_onlyOneRange}
5940  Eq_storage_unitsSoC_onlyOneRange(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,storage_techs,vintage)
5941      $(storage_validSoCRange(storage_techs,vintage) and storage_techParam(storage_techs,vintage,"sequentialSoC"))
5942      ..
5943      sum(soc_states$storage_usedTechSoCState(storage_techs,vintage,soc_states),
5944            storage_unitsSoC_activeRange(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,soc_states)) =e= 1;
5945   
5946  * // ### Storage Unit State of Charge Sum (SoC)
5947  * // Each storage unit must have one state of charge.
5948  * // {Eq_storage_unitsSoC_sum}
5949  Eq_storage_unitsSoC_sum(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,storage_techs,vintage)
5950      $storage_validSoCRange(storage_techs,vintage)
5951      ..
5952      storage_unitsTotal(nodesModelSel,yearsSel,storage_techs,vintage)
5953      =e=
5954      sum(soc_states$storage_usedTechSoCState(storage_techs,vintage,soc_states),
5955            storage_unitsSoC(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,soc_states));
5956   
5957  * // ### Storage Level State of Charge Sum (SoC)
5958  * // The total storage level must be represented by units in their specific states of charge.
5959  * // {Eq_storage_levelSoC}
5960  Eq_storage_levelSoC(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,storage_techs,vintage,commodity)
5961      $(storage_validSoCRange(storage_techs,vintage) and storage_usedTechCom(nodesModelSel,yearsSel,storage_techs,vintage,commodity))
5962      ..
5963      storage_level(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
5964      =e=
5965      storage_sizeParam(storage_techs,vintage,commodity,"size")
5966      * sum(soc_states$storage_usedTechSoCState(storage_techs,vintage,soc_states),
5967              storage_unitsSoC(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,soc_states)
5968              * storage_SoCParam(storage_techs,vintage,soc_states,"SoC"));
5969   
5970  * // ### C-Rate Limit (SoC)
5971  * // The increase in storage level per time step, i.e., the charging rate, is limited relative to the storage capacity. The coefficients can vary between states of charge.
5972  * // {Eq_storage_cRateLimit_SoC}
5973  Eq_storage_cRateLimit_SoC(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,storage_techs,vintage,commodity)
5974      $(storage_usedTechCom(nodesModelSel,yearsSel,storage_techs,vintage,commodity)
5975        and storage_validSoCRange(storage_techs,vintage)
5976        and sum(soc_states, storage_SoCParam(storage_techs,vintage,soc_states,"cRate")) < inf)
5977      ..
5978      storage_level(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
5979      - storage_level(timeModelToCalc--1,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
5980      =l=
5981      storage_sizeParam(storage_techs,vintage,commodity,"size")
5982      * sum(soc_states$storage_usedTechSoCState(storage_techs,vintage,soc_states),
5983                      storage_SoCParam(storage_techs,vintage,soc_states,"cRate")
5984                      * storage_unitsSoC(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,soc_states));
5985   
5986  * // ### E-Rate Limit (SoC)
5987  * // The decrease in storage level per time step, i.e., the discharging rate, is limited relative to the storage capacity. The coefficients can vary between states of charge.
5988  * // {Eq_storage_cRateLimit_SoC}
5989  Eq_storage_eRateLimit_SoC(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,storage_techs,vintage,commodity)
5990      $(storage_usedTechCom(nodesModelSel,yearsSel,storage_techs,vintage,commodity)
5991        and storage_validSoCRange(storage_techs,vintage)
5992        and sum(soc_states, storage_SoCParam(storage_techs,vintage,soc_states,"eRate")) < inf)
5993      ..
5994      storage_level(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
5995      - storage_level(timeModelToCalc--1,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
5996      =g=
5997      - storage_sizeParam(storage_techs,vintage,commodity,"size")
5998      * sum(soc_states$storage_usedTechSoCState(storage_techs,vintage,soc_states),
5999                      storage_SoCParam(storage_techs,vintage,soc_states,"eRate")
6000                      * storage_unitsSoC(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,soc_states));
6001   
6002   
6003  * ==== model definition ====
6004   
6005  Model M_storage
6006  /
6007    Eq_storage_unitsBalance
6008    Eq_storage_unitsFixedDecom
6009    Eq_storage_unitsFreeDecom
6010    Eq_storage_unitsLowerLimit
6011    Eq_storage_unitsUpperLimit
6012    Eq_storage_levelUpperLimit_degradation
6013    Eq_storage_unitsTotalMIP
6014    Eq_storage_levelLowerLimit
6015    Eq_storage_levelUpperLimit
6017    Eq_storage_losses
6019    Eq_storage_unitsBalanceStates
6020    Eq_storage_unitsUpperLimitPerState
6021    Eq_storage_unitsStatesNoRecovery
6022    Eq_storage_cRateLimit
6023    Eq_storage_eRateLimit
6024    Eq_storage_charge
6025    Eq_storage_discharge
6026    Eq_storage_levelStateSum
6027    Eq_storage_levelUpperLimitPerAge
6028    Eq_storage_chargeBasedDegradationDistribution
6029    Eq_storage_chargingPerAge
6030    Eq_storage_unitsDecomStateSum
6031    Eq_storage_unitsDegradation
6032    Eq_storage_unitsDegradation_onlyOneRange
6033   
6034    Eq_storage_unitsSoC
6035    Eq_storage_unitsSoC_sum
6036    Eq_storage_unitsSoC_onlyOneRange
6037    Eq_storage_levelSoC
6038    Eq_storage_cRateLimit_SoC
6039    Eq_storage_eRateLimit_SoC
6040  /;
INCLUDE    C:\Local\REMix\framework\remix\framework\model\source\core\transfer.gms
6042  * SPDX-FileCopyrightText: Copyright (c) 2023 German Aerospace Center (DLR)
6043  * SPDX-License-Identifier: BSD-3-Clause
6044   
6045  * // # core_transfer
6046  * // The equations in this file describe the commodity transfer in the model.
6047   
6048  * // ## Variables
6049  * // {special_table_transfer_variables}
6052   
6057   
6368   
6369  parameter transfer_linksParam(linksModel,years,transfer_techs,pc_transfer_linksParam);
6370  transfer_linksParam(linksModelToCalc,years,transfer_techs,pc_transfer_linksParam)
6371      = sum(linksData$links_aggregate(linksModelToCalc,linksData), transfer_linksParamIn(linksData,years,transfer_techs,pc_transfer_linksParam));
6372   
6373  * // ## Load links from gdx file
6375   
6376   
6377  set transfer_hasflowProfileIn(linksData,years,transfer_techs,pc_transfer_flowProfile);
6378  option transfer_hasflowProfileIn < transfer_flowProfileIn;
6379   
6380  * === modify transfer_flowProfileIn vector to fill with default values, in case profile is not specified ===
6381  transfer_linksParamIn(linksData,years,transfer_techs,"flowAlongLimit")
6382      $(not transfer_linksParamIn(linksData,years,transfer_techs,"limitFlows"))
6383      = 1;
6384   
6385  transfer_linksParamIn(linksData,years,transfer_techs,"flowAgainstLimit")
6386      $(not transfer_linksParamIn(linksData,years,transfer_techs,"limitFlows"))
6387      = 1;
6388   
6389  transfer_flowProfileIn(timeData,linksData,years,transfer_techs,"along")
6390      $(not transfer_hasflowProfileIn(linksData,years,transfer_techs,"along"))
6391      = transfer_linksParamIn(linksData,years,transfer_techs,"flowAlongLimit");
6392   
6393  transfer_flowProfileIn(timeData,linksData,years,transfer_techs,"against")
6394      $(not transfer_hasflowProfileIn(linksData,years,transfer_techs,"against"))
6395      = transfer_linksParamIn(linksData,years,transfer_techs,"flowAgainstLimit");
6396   
6397  * aggregate time dimension
6398  parameter transfer_flowProfileIn_aggTime(timeModel,linksData,yearsToCalc,transfer_techs,pc_transfer_flowProfile);
6399  transfer_flowProfileIn_aggTime(timeModelToCalc,linksData,yearsToCalc,transfer_techs,pc_transfer_flowProfile)
6400    = sum(timeData$timeMapping(timeData,timeModelToCalc),
6401            transfer_flowProfileIn(timeData,linksData,yearsToCalc,transfer_techs,pc_transfer_flowProfile)
6402            / timeLength(timeModelToCalc));
6403  option clear = transfer_flowProfileIn;
6404   
6405   
6406  set transfer_finiteLinkLimit(linksModel,years,transfer_techs);
6407  transfer_finiteLinkLimit(linksModelToCalc,yearsToCalc,transfer_techs)
6408      = sum(linksData$links_aggregate(linksModelToCalc,linksData), transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"linksUpperLimit")) > 0
6409          and sum(linksData$links_aggregate(linksModelToCalc,linksData), transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"linksUpperLimit")) < inf;
6410   
6411  set transfer_infiniteLinkLimit(linksModel,years,transfer_techs);
6412  transfer_infiniteLinkLimit(linksModelToCalc,yearsToCalc,transfer_techs)
6413      = sum(linksData$links_aggregate(linksModelToCalc,linksData), transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"linksUpperLimit")) = inf;
6415   
6416  parameter transfer_lengthParam(linksModel,link_types,pc_transfer_lengthParam);
6417  transfer_lengthParam(linksModelToCalc,link_types,pc_transfer_lengthParam)
6418      = sum(linksData$links_aggregate(linksModelToCalc,linksData), transfer_lengthParamIn(linksData,link_types,pc_transfer_lengthParam))
6419          / sum(linksData$links_aggregate(linksModelToCalc,linksData), 1);
6420   
6421  parameter transfer_gridSegments(linksModel,transfer_techs,gridSegments,pc_transfer_gridSegments);
6422  transfer_gridSegments(linksModelToCalc,transfer_techs,gridSegments,pc_transfer_gridSegments)
6423      = smax(linksData$links_aggregate(linksModelToCalc,linksData), transfer_gridSegmentsIn(linksData,transfer_techs,gridSegments,pc_transfer_gridSegments));
6424   
6425  parameter transfer_dcopf_Xtech(linksModel,years,transfer_techs,vintage,gridSegments);
6426  transfer_dcopf_Xtech(linksModelToCalc,yearsToCalc,transfer_techs,vintage,gridSegments)
6427      $(transfer_gridSegments(linksModelToCalc,transfer_techs,gridSegments,"useDCopf")
6428          and transfer_linksParam(linksModelToCalc,yearsToCalc,transfer_techs,"circuits") > 0
6429          and sum(link_types, transfer_reactPerLength(transfer_techs,vintage,link_types,"reactPerLength")) > 0 )
6430      = (1 / sum(linksData
6431                  $links_aggregate(linksModelToCalc,linksData),
6432              1 / ( sum(link_types,
6433                          transfer_lengthParamIn(linksData,link_types,"length")
6434                          * transfer_reactPerLength(transfer_techs,vintage,link_types,"reactPerLength"))
6435                      / transfer_linksParam(linksModelToCalc,yearsToCalc,transfer_techs,"circuits"))));
6436   
6437  set transfer_hasflowProfile(linksModel,years,transfer_techs,pc_transfer_flowProfile);
6438  transfer_hasflowProfile(linksModelToCalc,yearsToCalc,transfer_techs,pc_transfer_flowProfile)
6439      = sum(linksData$links_aggregate(linksModelToCalc,linksData),
6440              transfer_hasflowProfileIn(linksData,yearsToCalc,transfer_techs,pc_transfer_flowProfile));
6441   
6442  * ==== parameter modifications ====
6443  transfer_linksParam(linksModelToCalc,yearsToCalc,transfer_techs,"linksLowerLimit")
6444      $sum(vintage, transfer_techParam(transfer_techs,vintage,"mipLinks"))
6445      = floor(transfer_linksParam(linksModelToCalc,yearsToCalc,transfer_techs,"linksLowerLimit"));
6446  transfer_linksParam(linksModelToCalc,yearsToCalc,transfer_techs,"linksUpperLimit")
6447      $sum(vintage, transfer_techParam(transfer_techs,vintage,"mipLinks"))
6448      = ceil(transfer_linksParam(linksModelToCalc,yearsToCalc,transfer_techs,"linksUpperLimit"));
6449   
6450   
6451  * ==== calculation of mappings ====
6452   
6453  * Technologies with a lifeTime > 0 are available
6454  set transfer_availTech(linksModel,years,transfer_techs,vintage);
6455  transfer_availTech(linksModel,years,transfer_techs,vintage)
6456      $(vintage.val = smax(vintage_a$(vintage_a.val <= years.val
6457          and transfer_techParam(transfer_techs,vintage_a,"lifeTime") > 0), vintage_a.val)) = yes;
6458   
6459  * Technologies to optimize become unavailable if they have an linksUpperLimit of 0
6460  transfer_availTech(linksModelToCalc,years,transfer_techs,vintage)
6461      $(yearsToCalc(years) and transfer_linksParam(linksModelToCalc,years,transfer_techs,"linksUpperLimit") = 0 ) = no;
6462   
6463  * Technologies already built become unavailable if they have an linksBuild of 0
6464  transfer_availTech(linksModelToCalc,years,transfer_techs,vintage)
6465      $( ( not yearsToCalc(years)) and transfer_linksParam(linksModelToCalc,years,transfer_techs,"linksBuild") = 0 ) = no;
6466   
6467  * Used technologies are available technologies over their technical lifeTime
6468  set transfer_usedTech(linksModel,years,transfer_techs,vintage);
6469  transfer_usedTech(linksModelToCalc,years,transfer_techs,vintage)
6470      $(vintage.val <= years.val
6471          and years.val < smax(years_a$transfer_availTech(linksModelToCalc,years_a,transfer_techs,vintage),
6472                                  years_a.val + transfer_techParam(transfer_techs,vintage,"lifeTime"))
6473          ) = yes;
6474   
6475  * Technologies have to be decomissioned in the interval of first avail + lifetime to last avail + lifetime
6476  set transfer_decomTech(linksModel,years,transfer_techs,vintage);
6477  transfer_decomTech(linksModel,years,transfer_techs,vintage)
6478    $(sum(years_a$transfer_usedTech(linksModel,years_a,transfer_techs,vintage), 1)
6479      and sum(yearsToCalc
6480        $(sameas(years, yearsToCalc)
6481          and yearsToCalc.val >= smin(years_a$transfer_availTech(linksModel,years_a,transfer_techs,vintage), years_a.val) + transfer_techParam(transfer_techs,vintage,"lifeTime")
6482          and yearsToCalc.val <= smax(years_a$transfer_availTech(linksModel,years_a,transfer_techs,vintage), years_a.val) + transfer_techParam(transfer_techs,vintage,"lifeTime")), 1))
6483    = yes;
6484   
6485  * Extend the decom frame to the year after the last year of usedTech
6486  transfer_decomTech(linksModel,yearsToCalc,transfer_techs,vintage)
6487    $(transfer_usedTech(linksModel,yearsToCalc-1,transfer_techs,vintage)
6488      and transfer_decomTech(linksModel,yearsToCalc-1,transfer_techs,vintage))
6489    = yes;
6490   
6491  parameter transfer_flowProfile(timeModel,linksModel,years,transfer_techs,vintage,pc_transfer_flowProfile);
6492   
6493  transfer_flowProfile(timeModelToCalc,linksModelToCalc,yearsToCalc,transfer_techs,vintage,"along")
6494      $transfer_finiteLinkLimit(linksModelToCalc,yearsToCalc,transfer_techs)
6495      = (sum(linksData$(links_aggregate(linksModelToCalc,linksData)
6496                       and transfer_incidenceData_flip(linksData) = 1),
6497              transfer_flowProfileIn_aggTime(timeModelToCalc,linksData,yearsToCalc,transfer_techs,"along")
6498              * transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"linksUpperLimit"))
6499          + sum(linksData$(links_aggregate(linksModelToCalc,linksData)
6500                          and transfer_incidenceData_flip(linksData) = -1),
6501              transfer_flowProfileIn_aggTime(timeModelToCalc,linksData,yearsToCalc,transfer_techs,"against")
6502              * transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"linksUpperLimit")))
6503      / sum(linksData$links_aggregate(linksModelToCalc,linksData),
6504              transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"linksUpperLimit"));
6505   
6506  transfer_flowProfile(timeModelToCalc,linksModelToCalc,yearsToCalc,transfer_techs,vintage,"against")
6507      $transfer_finiteLinkLimit(linksModelToCalc,yearsToCalc,transfer_techs)
6508      = (sum(linksData$(links_aggregate(linksModelToCalc,linksData)
6509                       and transfer_incidenceData_flip(linksData) = 1),
6510              transfer_flowProfileIn_aggTime(timeModelToCalc,linksData,yearsToCalc,transfer_techs,"against")
6511              * transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"linksUpperLimit"))
6512          + sum(linksData$(links_aggregate(linksModelToCalc,linksData)
6513                          and transfer_incidenceData_flip(linksData) = -1),
6514              transfer_flowProfileIn_aggTime(timeModelToCalc,linksData,yearsToCalc,transfer_techs,"along")
6515              * transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"linksUpperLimit")))
6516      / sum(linksData$links_aggregate(linksModelToCalc,linksData),
6517              transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"linksUpperLimit"));
6518   
6519  transfer_flowProfile(timeModelToCalc,linksModelToCalc,yearsToCalc,transfer_techs,vintage,"along")
6520      $transfer_infiniteLinkLimit(linksModelToCalc,yearsToCalc,transfer_techs)
6521      = (sum(linksData$(links_aggregate(linksModelToCalc,linksData)
6522                       and transfer_incidenceData_flip(linksData) = 1
6523                       and transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"linksUpperLimit") = inf ),
6524              transfer_flowProfileIn_aggTime(timeModelToCalc,linksData,yearsToCalc,transfer_techs,"along"))
6525          + sum(linksData$(links_aggregate(linksModelToCalc,linksData)
6526                          and transfer_incidenceData_flip(linksData) = -1
6527                          and transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"linksUpperLimit") = inf ),
6528              transfer_flowProfileIn_aggTime(timeModelToCalc,linksData,yearsToCalc,transfer_techs,"against")))
6529      / sum(linksData$(links_aggregate(linksModelToCalc,linksData)
6530                      and transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"linksUpperLimit") = inf ),
6531              1);
6532   
6533  transfer_flowProfile(timeModelToCalc,linksModelToCalc,yearsToCalc,transfer_techs,vintage,"against")
6534      $transfer_infiniteLinkLimit(linksModelToCalc,yearsToCalc,transfer_techs)
6535      = (sum(linksData$(links_aggregate(linksModelToCalc,linksData)
6536                       and transfer_incidenceData_flip(linksData) = 1
6537                       and transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"linksUpperLimit") = inf ),
6538              transfer_flowProfileIn_aggTime(timeModelToCalc,linksData,yearsToCalc,transfer_techs,"against"))
6539          + sum(linksData$(links_aggregate(linksModelToCalc,linksData)
6540                          and transfer_incidenceData_flip(linksData) = -1
6541                          and transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"linksUpperLimit") = inf ),
6542              transfer_flowProfileIn_aggTime(timeModelToCalc,linksData,yearsToCalc,transfer_techs,"along")))
6543      / sum(linksData$(links_aggregate(linksModelToCalc,linksData)
6544                      and transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"linksUpperLimit") = inf ),
6545              1);
6546  option clear = transfer_flowProfileIn_aggTime;
6547   
6548  * Orientation of links affects the flowAlongLimit/flowAgainstLimit
6549   
6550  transfer_linksParam(linksModelToCalc,years,transfer_techs,"flowAlongLimit")
6551      $transfer_finiteLinkLimit(linksModelToCalc,years,transfer_techs)
6552      = (sum(linksData$(links_aggregate(linksModelToCalc,linksData)
6553                       and transfer_incidenceData_flip(linksData) = 1),
6554              transfer_linksParamIn(linksData,years,transfer_techs,"flowAlongLimit")
6555              * transfer_linksParamIn(linksData,years,transfer_techs,"linksUpperLimit"))
6556          + sum(linksData$(links_aggregate(linksModelToCalc,linksData)
6557                          and transfer_incidenceData_flip(linksData) = -1),
6558              transfer_linksParamIn(linksData,years,transfer_techs,"flowAgainstLimit")
6559              * transfer_linksParamIn(linksData,years,transfer_techs,"linksUpperLimit")))
6560      / sum(linksData$links_aggregate(linksModelToCalc,linksData),
6561              transfer_linksParamIn(linksData,years,transfer_techs,"linksUpperLimit"));
6562   
6563  transfer_linksParam(linksModelToCalc,years,transfer_techs,"flowAgainstLimit")
6564      $transfer_finiteLinkLimit(linksModelToCalc,years,transfer_techs)
6565      = (sum(linksData$(links_aggregate(linksModelToCalc,linksData)
6566                       and transfer_incidenceData_flip(linksData) = -1),
6567              transfer_linksParamIn(linksData,years,transfer_techs,"flowAlongLimit")
6568              * transfer_linksParamIn(linksData,years,transfer_techs,"linksUpperLimit"))
6569          + sum(linksData$(links_aggregate(linksModelToCalc,linksData)
6570                          and transfer_incidenceData_flip(linksData) = 1),
6571              transfer_linksParamIn(linksData,years,transfer_techs,"flowAgainstLimit")
6572              * transfer_linksParamIn(linksData,years,transfer_techs,"linksUpperLimit")))
6573      / sum(linksData$links_aggregate(linksModelToCalc,linksData),
6574              transfer_linksParamIn(linksData,years,transfer_techs,"linksUpperLimit"));
6575   
6576  transfer_linksParam(linksModelToCalc,years,transfer_techs,"flowAlongLimit")
6577      $transfer_infiniteLinkLimit(linksModelToCalc,years,transfer_techs)
6578      = (sum(linksData$(links_aggregate(linksModelToCalc,linksData)
6579                       and transfer_incidenceData_flip(linksData) = 1
6580                       and transfer_linksParamIn(linksData,years,transfer_techs,"linksUpperLimit") = inf),
6581              transfer_linksParamIn(linksData,years,transfer_techs,"flowAlongLimit"))
6582          + sum(linksData$(links_aggregate(linksModelToCalc,linksData)
6583                          and transfer_incidenceData_flip(linksData) = -1
6584                          and transfer_linksParamIn(linksData,years,transfer_techs,"linksUpperLimit") = inf),
6585              transfer_linksParamIn(linksData,years,transfer_techs,"flowAgainstLimit")))
6586      / sum(linksData$(links_aggregate(linksModelToCalc,linksData)
6587                      and transfer_linksParamIn(linksData,years,transfer_techs,"linksUpperLimit") = inf ),
6588              1);
6589   
6590  transfer_linksParam(linksModelToCalc,years,transfer_techs,"flowAgainstLimit")
6591      $transfer_infiniteLinkLimit(linksModelToCalc,years,transfer_techs)
6592      = (sum(linksData$(links_aggregate(linksModelToCalc,linksData)
6593                       and transfer_incidenceData_flip(linksData) = -1
6594                       and transfer_linksParamIn(linksData,years,transfer_techs,"linksUpperLimit") = inf),
6595              transfer_linksParamIn(linksData,years,transfer_techs,"flowAlongLimit"))
6596          + sum(linksData$(links_aggregate(linksModelToCalc,linksData)
6597                          and transfer_incidenceData_flip(linksData) = 1
6598                          and transfer_linksParamIn(linksData,years,transfer_techs,"linksUpperLimit") = inf),
6599              transfer_linksParamIn(linksData,years,transfer_techs,"flowAgainstLimit")))
6600      / sum(linksData$(links_aggregate(linksModelToCalc,linksData)
6601                      and transfer_linksParamIn(linksData,years,transfer_techs,"linksUpperLimit") = inf ),
6602              1);
6603   
6604  * Mapping for grid segments using DC optimal power flow
6605  set gridSegments_dcopf(linksModel,transfer_techs,gridSegments);
6606  gridSegments_dcopf(linksModelToCalc,transfer_techs,gridSegments)
6607      $transfer_gridSegments(linksModelToCalc,transfer_techs,gridSegments,"useDCopf")
6609      = yes;
6611   
6612  * Ensure each grid segment uses exactly one commodity
6613  parameter checkGridSegmentCommodities(gridSegments);
6614  checkGridSegmentCommodities(gridSegments)
6615      = sum (commodity$(sum((linksModelToCalc,transfer_techs,vintage)
6616                              $( transfer_coefficient(transfer_techs,vintage,commodity,"coefficient") > 0
6617                                  and gridSegments_dcopf(linksModelToCalc,transfer_techs,gridSegments)) , 1) > 0), 1);
6618   
6619  parameter transfer_incidenceSegments(nodesModel,linksModel,years,gridSegments);
6620  transfer_incidenceSegments(nodesModelToCalc,linksModelToCalc,yearsToCalc,gridSegments)
6621      $(sum((transfer_techs,vintage)$(transfer_usedTech(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
6622                                          and gridSegments_dcopf(linksModelToCalc,transfer_techs,gridSegments)
6623                                          and transfer_incidenceModel(nodesModelToCalc,linksModelToCalc) <> 0), 1) > 0)
6624      = transfer_incidenceModel(nodesModelToCalc,linksModelToCalc);
6625   
6626   
6630   
6631  scalar transfer_enableMIP;
6632  transfer_enableMIP = sum(transfer_usedTech(linksModelToCalc,yearsToCalc,transfer_techs,vintage)$transfer_techParam(transfer_techs,vintage,"mipLinks"), 1 );
6633   
6634   
6635  * ==== definition of variables ====
6636   
6637  * Initialise variables for linksBuild
6638  transfer_linksBuild.l(linksModel,years,transfer_techs,vintage)
6639      $transfer_availTech(linksModel,years,transfer_techs,vintage)
6640      = transfer_linksParam(linksModel,years,transfer_techs,"linksBuild");
6641  transfer_linksBuild.lo(linksModel,yearsToCalc,transfer_techs,vintage)
6642      $transfer_availTech(linksModel,yearsToCalc,transfer_techs,vintage)
6643      = transfer_linksBuild.l(linksModel,yearsToCalc,transfer_techs,vintage);
6644  transfer_linksBuild.fx(linksModel,years,transfer_techs,vintage)
6645      $transfer_linksParam(linksModel,years,transfer_techs,"noExpansion")
6646      = transfer_linksBuild.l(linksModel,years,transfer_techs,vintage);
6647   
6648  * Initialise variables for linksDecom
6649  transfer_linksDecom.l(linksModel,years,transfer_techs,vintage)
6650      $(transfer_decomTech(linksModel,years,transfer_techs,vintage)
6651        and years.val < sum(yearsToCalc$(ord(yearsToCalc) = 1), yearsToCalc.val))
6652      = sum((years_a,years_aa)$(sameas(years-1, years_aa)
6653                        and years_a.val > years_aa.val - transfer_techParam(transfer_techs,vintage,'lifeTime')
6654                        and years_a.val <= years.val - transfer_techParam(transfer_techs,vintage,'lifeTime')
6655                        and transfer_availTech(linksModel,years_a,transfer_techs,vintage)),
6656          transfer_linksBuild.l(linksModel,years_a,transfer_techs,vintage));
6657   
6658  transfer_linksDecom.l(linksModel,yearsToCalc,transfer_techs,vintage)
6659    $transfer_decomTech(linksModel,yearsToCalc,transfer_techs,vintage)
6660    = sum(years$
6661          (years.val < sum(yearsToCalc_a$(ord(yearsToCalc_a) = 1), yearsToCalc_a.val)
6662            and transfer_availTech(linksModel,years,transfer_techs,vintage)
6663            and years.val > sum(years_a$sameas(years_a, yearsToCalc-1), years_a.val) - transfer_techParam(transfer_techs,vintage,'lifeTime')
6664            and years.val <= yearsToCalc.val - transfer_techParam(transfer_techs,vintage,'lifeTime')),
6665        transfer_linksBuild.l(linksModel,years,transfer_techs,vintage))
6666      + sum(yearsToCalc_a$
6667          (yearsToCalc_a.val < sum(yearsToCalc_aa$(ord(yearsToCalc_aa) > 1), yearsToCalc_a.val)
6668            and transfer_availTech(linksModel,yearsToCalc_a,transfer_techs,vintage)
6669            and yearsToCalc_a.val > sum(years_a$sameas(years_a, yearsToCalc-1), years_a.val) - transfer_techParam(transfer_techs,vintage,'lifeTime')
6670            and yearsToCalc_a.val <= yearsToCalc.val - transfer_techParam(transfer_techs,vintage,'lifeTime')),
6671        transfer_linksBuild.l(linksModel,yearsToCalc_a,transfer_techs,vintage));
6672        ;
6673   
6674  transfer_linksDecom.lo(linksModel,yearsToCalc,transfer_techs,vintage)
6675      $(transfer_usedTech(linksModel,yearsToCalc,transfer_techs,vintage)
6676          and not transfer_techParam(transfer_techs,vintage,"freeDecom"))
6677      = transfer_linksDecom.l(linksModel,yearsToCalc,transfer_techs,vintage)
6678   
6679  * Calculate planned transfer links expansion
6680  parameter transfer_linksPlanned(linksModel,years,transfer_techs,vintage);
6681  transfer_linksPlanned(linksModel,years,transfer_techs,vintage) = 0;
6682  loop(years,
6683    transfer_linksPlanned(linksModel,years,transfer_techs,vintage)
6684      =
6685      transfer_linksPlanned(linksModel,years-1,transfer_techs,vintage)
6686          $transfer_usedTech(linksModel,years-1,transfer_techs,vintage)
6687      + transfer_linksBuild.l(linksModel,years,transfer_techs,vintage)
6688          $transfer_availTech(linksModel,years,transfer_techs,vintage)
6689      - transfer_linksDecom.l(linksModel,years,transfer_techs,vintage)
6690          $transfer_usedTech(linksModel,years,transfer_techs,vintage);
6691  );
6692   
6693  * Set initial state for planned units
6694  transfer_linksTotal.l(linksModel,years,transfer_techs,vintage)
6695    = transfer_linksPlanned(linksModel,years,transfer_techs,vintage)
6696   
6697  * Calculate if planned links expansion is bound by upper and lower limits
6698  set transfer_linkBoundsFixed(linksModel,years,transfer_techs);
6699  transfer_linkBoundsFixed(linksModel,years,transfer_techs)
6700    $(sum(vintage$transfer_usedTech(linksModel,years,transfer_techs,vintage),
6701          transfer_linksPlanned(linksModel,years,transfer_techs,vintage))
6702      = transfer_linksParam(linksModel,years,transfer_techs,"linksUpperLimit")
6703    and sum(vintage$transfer_usedTech(linksModel,years,transfer_techs,vintage),
6704          transfer_linksPlanned(linksModel,years,transfer_techs,vintage))
6705      = transfer_linksParam(linksModel,years,transfer_techs,"linksLowerLimit"))
6706    = yes;
6707   
6708  * Fix linksBuild, linksDecom, linksTotal if levels are predetermined by upper and lower limits
6709  transfer_linksBuild.fx(linksModel,years,transfer_techs,vintage)
6710    $(transfer_availTech(linksModel,years,transfer_techs,vintage)
6711      and transfer_linkBoundsFixed(linksModel,years,transfer_techs))
6712    = transfer_linksBuild.l(linksModel,years,transfer_techs,vintage);
6713  transfer_linksDecom.fx(linksModel,years,transfer_techs,vintage)
6714    $(transfer_usedTech(linksModel,years,transfer_techs,vintage)
6715      and transfer_linkBoundsFixed(linksModel,years,transfer_techs))
6716    = transfer_linksDecom.l(linksModel,years,transfer_techs,vintage);
6717  transfer_linksTotal.fx(linksModel,years,transfer_techs,vintage)
6718    $(transfer_usedTech(linksModel,years,transfer_techs,vintage)
6719      and transfer_linkBoundsFixed(linksModel,years,transfer_techs))
6720    = transfer_linksTotal.l(linksModel,years,transfer_techs,vintage);
6721   
6722  transfer_linksTotal_MIP.up(linksModel,years,transfer_techs,vintage)
6723      $(transfer_usedTech(linksModel,years,transfer_techs,vintage)
6724        and transfer_techParam(transfer_techs,vintage,"miplinks") = 1)
6725      = transfer_linksParam(linksModel,years,transfer_techs,"linksUpperLimit");
6726   
6727  * Add parameter for fixing capacities during myopic runs
6728  parameter transfer_linksDelta(linksModel,years,transfer_techs);
6729   
6730   
6731  * ==== declaration of equations ====
6732   
6733  equations
6734    Eq_transfer_linksBalance(linksModel,years,transfer_techs,vintage
6735      ) "Ensures the links balance over the planning period."
6736    Eq_transfer_linksFixedDecom(linksModel,years,transfer_techs,vintage
6737      ) "Restricts the fixed decommissioning of links over the planning period."
6738    Eq_transfer_linksFreeDecom(linksModel,years,transfer_techs,vintage
6739      ) "Restricts the free decommissioning of links over the planning period."
6740    Eq_transfer_linksUpperLimit(linksModel,years,transfer_techs
6741      ) "Upper bound for the total number of links."
6742    Eq_transfer_linksLowerLimit(linksModel,years,transfer_techs
6743      ) "Lower bound for the total number of links."
6744    Eq_transfer_linksTotalMIP(linksModel,years,transfer_techs,vintage
6745      ) "Fixes the total number of links to the corresponding integer variable."
6746   
6747    Eq_transfer_flowAlongUpperLimit(timeModel,linksModel,years,transfer_techs,vintage
6748      ) "Upper bound for the flow along the transfer links."
6749    Eq_transfer_flowAgainstUpperLimit(timeModel,linksModel,years,transfer_techs,vintage
6750      ) "Upper bound for the flow against the transfer links."
6751    Eq_transfer_dcopf_angleFlows(timeModel,linksModel,years,gridSegments
6752      )
6753    Eq_transfer_dcopf_cycleFlows(timeModel,years,cycles,gridSegments
6754      )
6755    ;
6756   
6757   
6758  * ==== equation definition ====
6759  * // ## Equations
6760  * // ### Transfer Links Balance
6761  * // Ensures that the transfer between nodes is balanced.
6762  * // {Eq_transfer_linksBalance}
6763  Eq_transfer_linksBalance(linksModelToCalc,yearsSel,transfer_techs,vintage)
6764      $((transfer_usedTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
6765            or sum(years$sameas(years,yearsSel), transfer_usedTech(linksModelToCalc,years-1,transfer_techs,vintage)))
6766          and not transfer_linkBoundsFixed(linksModelToCalc,yearsSel,transfer_techs))
6767      ..
6768      transfer_linksTotal(linksModelToCalc,yearsSel,transfer_techs,vintage)
6769      =e=
6770      sum(yearsToCalc$(ord(yearsToCalc) = 1 and sameas(yearsToCalc, yearsSel)),
6771        sum(years$sameas(years, yearsToCalc),
6772          transfer_linksTotal(linksModelToCalc,years-1,transfer_techs,vintage)
6773            $transfer_usedTech(linksModelToCalc,years-1,transfer_techs,vintage)))
6774      + sum((yearsToCalc)$(ord(yearsToCalc) > 1 and sameas(yearsToCalc, yearsSel)),
6775        transfer_linksTotal(linksModelToCalc,yearsToCalc-1,transfer_techs,vintage)
6776          $transfer_usedTech(linksModelToCalc,yearsToCalc-1,transfer_techs,vintage))
6777      + transfer_linksBuild(linksModelToCalc,yearsSel,transfer_techs,vintage)
6778          $transfer_availTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
6779      - transfer_linksDecom(linksModelToCalc,yearsSel,transfer_techs,vintage)
6780          $transfer_usedTech(linksModelToCalc,yearsSel,transfer_techs,vintage);
6781   
6782  * // ### Transfer Links Fixed Decommissioning
6783  * // Balances fixed link decommissioning.
6784  * // {Eq_transfer_linksFixedDecom}
6785  Eq_transfer_linksFixedDecom(linksModelToCalc,yearsSel,transfer_techs,vintage)
6786      $(transfer_decomTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
6787          and not transfer_techParam(transfer_techs,vintage,"freeDecom") = 1
6788          and not transfer_linkBoundsFixed(linksModelToCalc,yearsSel,transfer_techs))
6789      ..
6790      transfer_linksDecom(linksModelToCalc,yearsSel,transfer_techs,vintage)
6791      =e=
6792      sum(years$
6793          (transfer_availTech(linksModelToCalc,years,transfer_techs,vintage)
6794              and years.val > sum(yearsToCalc$sameas(yearsToCalc+1, yearsSel), yearsToCalc.val) - transfer_techParam(transfer_techs,vintage,'lifeTime')
6795              and years.val <= yearsSel.val - transfer_techParam(transfer_techs,vintage,'lifeTime')),
6796          transfer_linksBuild(linksModelToCalc,years,transfer_techs,vintage));
6797   
6798  * // ### Transfer Links Free Decommissioning
6799  * // Balances free link decommissioning.
6800  * // {Eq_transfer_linksFreeDecom}
6801  Eq_transfer_linksFreeDecom(linksModelToCalc,yearsSel,transfer_techs,vintage)
6802      $((transfer_decomTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
6803          or transfer_usedTech(linksModelToCalc,yearsSel,transfer_techs,vintage))
6804          and transfer_techParam(transfer_techs,vintage,"freeDecom") = 1)
6805      ..
6806      sum(years$
6807            ((transfer_decomTech(linksModelToCalc,years,transfer_techs,vintage)
6808              or transfer_usedTech(linksModelToCalc,years,transfer_techs,vintage))
6809              and years.val < sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)),
6810          transfer_linksDecom(linksModelToCalc,years,transfer_techs,vintage))
6811      + sum(yearsToCalc$
6812            ((transfer_decomTech(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
6813              or transfer_usedTech(linksModelToCalc,yearsToCalc,transfer_techs,vintage))
6814              and yearsToCalc.val >= sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
6815              and yearsToCalc.val <= yearsSel.val),
6816          transfer_linksDecom(linksModelToCalc,yearsToCalc,transfer_techs,vintage))
6817      =g=
6818      sum(years$
6819            (transfer_availTech(linksModelToCalc,years,transfer_techs,vintage)
6820              and years.val < sum(yearsToCalc$(ord(yearsToCalc)=1), yearsToCalc.val) - transfer_techParam(transfer_techs,vintage,'lifeTime')),
6821          transfer_linksBuild(linksModelToCalc,years,transfer_techs,vintage))
6822      + sum(yearsToCalc$
6823            (transfer_availTech(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
6824              and yearsToCalc.val >= sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
6825              and yearsToCalc.val <= yearsSel.val - transfer_techParam(transfer_techs,vintage,'lifeTime')),
6826          transfer_linksBuild(linksModelToCalc,yearsToCalc,transfer_techs,vintage));
6827   
6828  * // ### Transfer Links Lower Limit
6829  * // Ensures link capacity lower limits.
6830  * // {Eq_transfer_linksLowerLimit}
6831  Eq_transfer_linksLowerLimit(linksModelToCalc,yearsSel,transfer_techs)
6832      $(transfer_linksParam(linksModelToCalc,yearsSel,transfer_techs,'linksLowerLimit') > 0 )
6833      ..
6834      sum(vintage$transfer_usedTech(linksModelToCalc,yearsSel,transfer_techs,vintage),
6835          transfer_linksTotal(linksModelToCalc,yearsSel,transfer_techs,vintage))
6836      =g=
6837      transfer_linksParam(linksModelToCalc,yearsSel,transfer_techs,"linksLowerLimit");
6838   
6839  * // ### Transfer Links Upper Limit
6840  * // Ensures link capacity upper limits.
6841  * // {Eq_transfer_linksUpperLimit}
6842  Eq_transfer_linksUpperLimit(linksModelToCalc,yearsSel,transfer_techs)
6843      $(transfer_linksParam(linksModelToCalc,yearsSel,transfer_techs,'linksUpperLimit') >= 0
6844          and transfer_linksParam(linksModelToCalc,yearsSel,transfer_techs,'linksUpperLimit') < +inf )
6845      ..
6846      sum(vintage$transfer_usedTech(linksModelToCalc,yearsSel,transfer_techs,vintage),
6847          transfer_linksTotal(linksModelToCalc,yearsSel,transfer_techs,vintage))
6848      =l=
6849      transfer_linksParam(linksModelToCalc,yearsSel,transfer_techs,"linksUpperLimit");
6850   
6851  * // ### Transfer Links Total MIP
6852  * // Ensures number of MIP links.
6853  * // {Eq_transfer_linksTotalMIP}
6854  Eq_transfer_linksTotalMIP(linksModelToCalc,yearsSel,transfer_techs,vintage)
6855      $(transfer_usedTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
6856          and transfer_techParam(transfer_techs,vintage,"mipLinks"))
6857      ..
6858      transfer_linksTotal(linksModelToCalc,yearsSel,transfer_techs,vintage)
6859      =e=
6860      transfer_linksTotal_MIP(linksModelToCalc,yearsSel,transfer_techs,vintage);
6861   
6862  * // ### Transfer Links Flow Along Upper Limit
6863  * // Ensures links flow along upper limit.
6864  * // {Eq_transfer_flowAlongUpperLimit}
6865  Eq_transfer_flowAlongUpperLimit(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
6866      $transfer_usedTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
6867      ..
6868      transfer_flowAlong(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
6869      =l=
6870      transfer_flowProfile(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage,"along")
6871      * transfer_linksTotal(linksModelToCalc,yearsSel,transfer_techs,vintage)
6872      * transfer_techParam(transfer_techs,vintage,"flowUpperLimit")
6873      ;
6874   
6875  * // ### Transfer Links Flow Against Upper Limit
6876  * // Ensures links flow against upper limit.
6877  * // {Eq_transfer_flowAgainstUpperLimit}
6878  Eq_transfer_flowAgainstUpperLimit(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
6879      $transfer_usedTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
6880      ..
6881      transfer_flowAgainst(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
6882      =l=
6883      transfer_flowProfile(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage,"against")
6884      * transfer_linksTotal(linksModelToCalc,yearsSel,transfer_techs,vintage)
6885      * transfer_techParam(transfer_techs,vintage,"flowUpperLimit")
6886      ;
6887   
6888  set transfer_usedOpf(linksModel,years,gridSegments,transfer_techs,vintage);
6889  transfer_usedOpf(linksModel,yearsToCalc,gridSegments,transfer_techs,vintage)
6890      $(transfer_usedTech(linksModel,yearsToCalc,transfer_techs,vintage)
6891          and gridSegments_dcopf(linksModel,transfer_techs,gridSegments))
6892      = yes;
6893   
6894  set transfer_usedOpfLinks(linksModel,years,gridSegments);
6895  option transfer_usedOpfLinks < transfer_usedOpf;
6896   
6897  set transfer_usedOpfSegments(years,gridSegments);
6898  option transfer_usedOpfSegments < transfer_usedOpf;
6899   
6903  * // ### Transfer DC optimal flow angle flows
6904  * // Angle flows.
6905  * // {Eq_transfer_dcopf_cycleFlows}
6906  Eq_transfer_dcopf_angleFlows(timeModelSel,linksModelToCalc,yearsSel,gridSegments)
6907      $transfer_usedOpfLinks(linksModelToCalc,yearsSel,gridSegments)
6908      ..
6909      sum ((transfer_techs,vintage)
6910              $transfer_usedOpf(linksModelToCalc,yearsSel,gridSegments,transfer_techs,vintage),
6911          ( transfer_flowAlong(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
6912              - transfer_flowAgainst(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage) )
6913          * transfer_dcopf_Xtech(linksModelToCalc,yearsSel,transfer_techs,vintage,gridSegments) )
6914      =e=
6915      sum ( nodesModelSel,
6916          - transfer_incidenceModel(nodesModelSel,linksModelToCalc)
6917          * transfer_dcopf_voltageAngle(timeModelSel,nodesModelSel,yearsSel,gridSegments));
6921   
6922   
6923  * ==== model definition ====
6924   
6925  Model M_transfer
6926  /
6927    Eq_transfer_linksBalance
6928    Eq_transfer_linksFixedDecom
6929    Eq_transfer_linksFreeDecom
6930    Eq_transfer_linksLowerLimit
6931    Eq_transfer_linksUpperLimit
6932    Eq_transfer_linksTotalMIP
6933    Eq_transfer_flowAlongUpperLimit
6934    Eq_transfer_flowAgainstUpperLimit
6938    Eq_transfer_dcopf_angleFlows
6942  /;
INCLUDE    C:\Local\REMix\framework\remix\framework\model\source\core\sourcesink.gms
6944  * SPDX-FileCopyrightText: Copyright (c) 2023 German Aerospace Center (DLR)
6945  * SPDX-License-Identifier: BSD-3-Clause
6946   
6947  * // # core_sourcesink
6948  * // The equations in this file describe the sources and sinks in the model.
6949   
6950  * // ## Variables
6951  * // {special_table_sourcesink_variables}
7237   
7238  * // ## Aggregation of profiles
7239  * // Profiles are rescaled based on the annual sum.
7240   
7241  set sourcesink_usesProfileScaling(nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile);
7242  sourcesink_usesProfileScaling(nodesData,years,sourcesink_techs,commodity,"fixed")
7243      $sourcesink_configIn(nodesData,years,sourcesink_techs,commodity,"scaleFixProfileWithFixSum") = yes;
7244  sourcesink_usesProfileScaling(nodesData,years,sourcesink_techs,commodity,"lower")
7245      $sourcesink_configIn(nodesData,years,sourcesink_techs,commodity,"scaleLowProfileWithLowSum") = yes;
7246  sourcesink_usesProfileScaling(nodesData,years,sourcesink_techs,commodity,"upper")
7247      $sourcesink_configIn(nodesData,years,sourcesink_techs,commodity,"scaleUpProfileWithUpSum") = yes;
7248   
7249  parameter sourcesink_ProfileSum(nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile);
7250  sourcesink_ProfileSum(nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile)
7251      $sourcesink_usesProfileScaling(nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile)
7252      = sum(timeData, sourcesink_profileIn(timeData,nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile));
7253   
7254  parameter sourcesink_ProfileAbsSum(nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile);
7255  sourcesink_ProfileAbsSum(nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile)
7256      $sourcesink_usesProfileScaling(nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile)
7257      = sum(timeData, abs(sourcesink_profileIn(timeData,nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile)));
7258   
7259  set sourcesink_ProfileScaleError(nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile);
7260  sourcesink_ProfileScaleError(nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile)
7261      $(sourcesink_usesProfileScaling(nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile)
7262          and sourcesink_ProfileSum(nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile) = 0
7263          and sourcesink_ProfileAbsSum(nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile) > 0)
7264      = yes;
7265   
7266  abort$sum((nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile),
7267              sourcesink_ProfileScaleError(nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile)) "One or more profiles cannot be rescaled as their annual sum equals zero!"
7268   
7269  * calculate scaling factor for each type
7270  parameter sourcesink_scalingFactor(nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile);
7271  sourcesink_scalingFactor(nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile)
7272      $(sourcesink_ProfileSum(nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile)
7273          and sourcesink_usesProfileScaling(nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile))
7274      = sum(pc_sourcesink_annualSum$sameas(pc_sourcesink_profile,pc_sourcesink_annualSum),
7275          sourcesink_annualSumIn(nodesData,years,sourcesink_techs,commodity,pc_sourcesink_annualSum)
7276              / sourcesink_ProfileSum(nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile));
7277   
7278  * rescale profiles
7279  sourcesink_profileIn(timeData,nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile)
7280      $sourcesink_usesProfileScaling(nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile)
7281      = sourcesink_profileIn(timeData,nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile)
7282          * sourcesink_scalingFactor(nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile)
7283   
7284  * // ## Aggregation of profiles
7285  * // Profiles are aggregated based on the mapping from data nodes to model nodes.
7286   
7287  * ==== aggregation of profiles ====
7288  set sourcesink_usesProfileIn(nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile);
7289  option sourcesink_usesProfileIn < sourcesink_profileIn
7290   
7291  set sourcesink_usesProfile(nodesModel,years,sourcesink_techs,commodity,pc_sourcesink_profile);
7292  sourcesink_usesProfile(nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity,pc_sourcesink_profile)
7293      $sum(nodesData$(aggregateNodesModel(nodesData,nodesModelToCalc)
7294          and sourcesink_usesProfileIn(nodesData,yearsToCalc,sourcesink_techs,commodity,pc_sourcesink_profile)), 1)
7295      = yes;
7296   
7297  * aagregate time dimension
7298  parameter sourcesink_profileIn_aggTime(timeModel,nodesData,yearsToCalc,sourcesink_techs,commodity,pc_sourcesink_profile);
7299  sourcesink_profileIn_aggTime(timeModelToCalc,nodesData,yearsToCalc,sourcesink_techs,commodity,pc_sourcesink_profile)
7300    $sourcesink_usesProfileIn(nodesData,yearsToCalc,sourcesink_techs,commodity,pc_sourcesink_profile)
7301    = sum(timeData$timeMapping(timeData,timeModelToCalc),
7302            sourcesink_profileIn(timeData,nodesData,yearsToCalc,sourcesink_techs,commodity,pc_sourcesink_profile)
7303            / timeLength(timeModelToCalc));
7304  option clear = sourcesink_profileIn;
7305   
7306  * sum up absolute profiles
7307  parameter sourcesink_profile(timeModel,nodesModel,years,sourcesink_techs,commodity,pc_sourcesink_profile);
7308  sourcesink_profile(timeModelToCalc,nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity,pc_sourcesink_profile)
7309      $sourcesink_usesProfile(nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity,pc_sourcesink_profile)
7310      = sum(nodesData$aggregateNodesModel(nodesData,nodesModelToCalc),
7311              sourcesink_profileIn_aggTime(timeModelToCalc,nodesData,yearsToCalc,sourcesink_techs,commodity,pc_sourcesink_profile));
7312  option clear = sourcesink_profileIn_aggTime;
7313   
7314  set sourcesink_enabled(nodesModel,years,sourcesink_techs,commodity);
7315  option sourcesink_enabled < sourcesink_config;
7316   
7317   
7318  * ==== declaration of variables ====
7319  * // ## Bounding of variables
7320  * // Source-sink variables with either a lower, fixed, or upper profile are bounded to their respective profiles given by the input parameters.
7321   
7322  sourcesink_flow.lo(timeModelToCalc,nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity)
7323      $( sourcesink_enabled(nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity)
7324          and sourcesink_config(nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity,"usesLowerProfile") = 1
7325          and sourcesink_profile(timeModelToCalc,nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity,"lower") > -inf )
7326      = sourcesink_profile(timeModelToCalc,nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity,"lower");
7327   
7328  sourcesink_flow.up(timeModelToCalc,nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity)
7329      $( sourcesink_enabled(nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity)
7330          and sourcesink_config(nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity,"usesUpperProfile") = 1
7331          and sourcesink_profile(timeModelToCalc,nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity,"upper") < inf )
7332      = sourcesink_profile(timeModelToCalc,nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity,"upper");
7333   
7334  sourcesink_flow.fx(timeModelToCalc,nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity)
7335      $( sourcesink_enabled(nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity)
7336          and sourcesink_config(nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity,"usesFixedProfile") = 1 )
7337      = sourcesink_profile(timeModelToCalc,nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity,"fixed");
7338   
7339  option clear = sourcesink_profile;
7340   
7341   
7342  * ==== equation definition ====
7343  * // ## Equations
7344  equations
7345  Eq_sourcesink_useFixedSum(nodesModel,years,sourcesink_techs,commodity
7346      ) "Fixes the annual sum from sources / to sinks"
7347  Eq_sourcesink_useLowerSum(nodesModel,years,sourcesink_techs,commodity
7348      ) "Limits the lower sum from sources / to sinks"
7349  Eq_sourcesink_useUpperSum(nodesModel,years,sourcesink_techs,commodity
7350      ) "Limits the upper sum from sources / to sinks"
7351    ;
7352   
7353  * // ### Fixed annual sums for sources and sinks
7354  * // Ensures that the sources and sinks with annual sums given as fixed limits are balanced.
7355  * // {Eq_sourcesink_useFixedSum}
7356  Eq_sourcesink_useFixedSum(nodesModelSel,yearsSel,sourcesink_techs,commodity)
7357      $( sourcesink_enabled(nodesModelSel,yearsSel,sourcesink_techs,commodity)
7358          and sourcesink_config(nodesModelSel,yearsSel,sourcesink_techs,commodity,"usesFixedSum") = 1 )
7359      ..
7360      sum(timeModelSel,
7361          sourcesink_flow(timeModelSel,nodesModelSel,yearsSel,sourcesink_techs,commodity))
7362      =e=
7363      sourcesink_annualSum(nodesModelSel,yearsSel,sourcesink_techs,commodity,"fixed")
7364      ;
7365   
7366  * // ### Lower annual sums for sources and sinks
7367  * // Ensures that the sources and sinks with annual sums given as lower limits are balanced.
7368  * // {Eq_sourcesink_useLowerSum}
7369  Eq_sourcesink_useLowerSum(nodesModelSel,yearsSel,sourcesink_techs,commodity)
7370      $( sourcesink_enabled(nodesModelSel,yearsSel,sourcesink_techs,commodity)
7371          and sourcesink_config(nodesModelSel,yearsSel,sourcesink_techs,commodity,"usesLowerSum") = 1
7372          and sourcesink_annualSum(nodesModelSel,yearsSel,sourcesink_techs,commodity,"lower") > -inf )
7373      ..
7374      sum(timeModelSel,
7375          sourcesink_flow(timeModelSel,nodesModelSel,yearsSel,sourcesink_techs,commodity))
7376      =g=
7377      sourcesink_annualSum(nodesModelSel,yearsSel,sourcesink_techs,commodity,"lower")
7378      ;
7379   
7380  * // ### Upper annual sums for sources and sinks
7381  * // Ensures that the sources and sinks with annual sums given as upper limits are balanced.
7382  * // {Eq_sourcesink_useUpperSum}
7383  Eq_sourcesink_useUpperSum(nodesModelSel,yearsSel,sourcesink_techs,commodity)
7384      $( sourcesink_enabled(nodesModelSel,yearsSel,sourcesink_techs,commodity)
7385          and sourcesink_config(nodesModelSel,yearsSel,sourcesink_techs,commodity,"usesUpperSum") = 1
7386          and sourcesink_annualSum(nodesModelSel,yearsSel,sourcesink_techs,commodity,"upper") < inf )
7387      ..
7388      sum(timeModelSel,
7389          sourcesink_flow(timeModelSel,nodesModelSel,yearsSel,sourcesink_techs,commodity))
7390      =l=
7391      sourcesink_annualSum(nodesModelSel,yearsSel,sourcesink_techs,commodity,"upper")
7392      ;
7393   
7394   
7395  * ==== model definition ====
7396   
7397  Model M_sourcesink
7398  /
7399    Eq_sourcesink_useFixedSum
7400    Eq_sourcesink_useLowerSum
7401    Eq_sourcesink_useUpperSum
7402  /;
INCLUDE    C:\Local\REMix\framework\remix\framework\model\source\core\balance.gms
7404  * SPDX-FileCopyrightText: Copyright (c) 2023 German Aerospace Center (DLR)
7405  * SPDX-License-Identifier: BSD-3-Clause
7406   
7407  * // # balance
7408  * // The equations in this file describe the commodity balancing in the model.
7409   
7410  Equations
7411    Eq_balance_commodities(timeModel,nodesModel,years,commodity
7412      ) "Balance for each commodity used in each time step, region, and year";
7413   
7414   
7415  * ==== calculation of mappings ====
7416   
7417  set balance_techComm(techs,commodity);
7418  balance_techComm(converter_techs(techs),commodity)
7419      $sum((vintage,activity)$converter_coefficient(converter_techs,vintage,activity,commodity,"coefficient"), 1) = yes;
7420  balance_techComm(storage_techs(techs),commodity)
7421      $sum((vintage)$storage_sizeParam(storage_techs,vintage,commodity,"size"), 1) = yes;
7422  balance_techComm(transfer_techs(techs),commodity)
7423      $sum((vintage)$transfer_coefficient(transfer_techs,vintage,commodity,"coefficient"), 1) = yes;
7424  balance_techComm(sourcesink_techs(techs),commodity)
7425      $sum((nodesModelToCalc,yearsToCalc)$sourcesink_enabled(nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity), 1) = yes;
7426   
7427  set balance_usedConverter(nodesModel,years,commodity);
7428  set balance_usedStorage(nodesModel,years,commodity);
7429  set balance_usedTransfer(nodesModel,years,commodity);
7430  set balance_usedSourceSink(nodesModel,years,commodity);
7431  set balance_usedBalance(nodesModel,years,commodity);
7432   
7433  balance_usedConverter(nodesModel,years,commodity)
7434      = sum ((converter_techs,vintage,activity)
7435              $( converter_coefficient(converter_techs,vintage,activity,commodity,"coefficient") <> 0
7436                  and converter_usedTech(nodesModel,years,converter_techs,vintage) ), 1);
7437   
7438  balance_usedStorage(nodesModel,years,commodity)
7439      = sum ((storage_techs,vintage,activity)
7440              $(storage_sizeParam(storage_techs,vintage,commodity,"size") <> 0
7441                  and storage_usedTech(nodesModel,years,storage_techs,vintage) ), 1);
7442   
7443  balance_usedTransfer(nodesModel,years,commodity)
7444      = sum ((linksModel,transfer_techs,vintage)
7445              $(transfer_coefficient(transfer_techs,vintage,commodity,"coefficient") <> 0
7446                  and transfer_incidenceModel(nodesModel,linksModel) <> 0), 1);
7447   
7448  option balance_usedSourceSink < sourcesink_enabled;
7449   
7450  balance_usedBalance(nodesModel,years,commodity)
7451      $(balance_usedConverter(nodesModel,years,commodity)
7452          or balance_usedStorage(nodesModel,years,commodity)
7453          or balance_usedTransfer(nodesModel,years,commodity)
7454          or balance_usedSourceSink(nodesModel,years,commodity) )
7455      = yes;
7456   
7457   
7458  * ==== equation definition ====
7459   
7460  * // ### Balance commodities
7461  * // Balancing of commodities for all model regions, time steps, and years
7462  * // {Eq_balance_commodities}
7463  Eq_balance_commodities(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,commodity)
7464      $balance_usedBalance(nodesModelSel,yearsSel,commodity)
7465      ..
7466  * converter
7467      sum((converter_techs,vintage,activity)
7468              $( converter_coefficientProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity,commodity) <> 0
7469                  AND converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage) ),
7470          converter_activity(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity)
7471              * converter_coefficientProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity,commodity)
7472              * timeLength(timeModelSel)
7473          + converter_unitsUsingActivity_MIP(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity)
7474              * converter_coefficient(converter_techs,vintage,activity,commodity,"constant")
7475              * timeLength(timeModelSel))
7476   
7477  * storages
7478      + sum((storage_techs,vintage)
7479              $( storage_sizeParam(storage_techs,vintage,commodity,"size") <> 0
7480                  and storage_usedTech(nodesModelSel,yearsSel,storage_techs,vintage) ),
7481          storage_level(timeModelToCalc--1,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
7482          - storage_level(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
7484          - storage_losses(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
7485          * timeLength(timeModelSel)
7487          )
7488   
7489  * transfer
7490      + sum((linksModel,transfer_techs,vintage)
7491              $(transfer_usedTech(linksModel,yearsSel,transfer_techs,vintage)
7492                  and linksModelToCalc(linksModel)),
7493          (   transfer_flowAlong(timeModelSel,linksModel,yearsSel,transfer_techs,vintage)
7494                  $(transfer_incidenceModel(nodesModelSel,linksModel) > 0)
7495            + transfer_flowAgainst(timeModelSel,linksModel,yearsSel,transfer_techs,vintage)
7496                  $(transfer_incidenceModel(nodesModelSel,linksModel) < 0) )
7497          * transfer_coefficient(transfer_techs,vintage,commodity,"coefficient")
7498          * timeLength(timeModelSel))
7499   
7500      - sum((linksModel,transfer_techs,vintage)
7501              $(transfer_usedTech(linksModel,yearsSel,transfer_techs,vintage)
7502                  and linksModelToCalc(linksModel)),
7503          (   transfer_flowAlong(timeModelSel,linksModel,yearsSel,transfer_techs,vintage)
7504                  $(transfer_incidenceModel(nodesModelSel,linksModel) < 0)
7505            + transfer_flowAgainst(timeModelSel,linksModel,yearsSel,transfer_techs,vintage)
7506                  $(transfer_incidenceModel(nodesModelSel,linksModel) > 0) )
7507          * transfer_coefficient(transfer_techs,vintage,commodity,"coefficient")
7508          * timeLength(timeModelSel))
7509   
7510      + 0.5 * sum((linksModel,transfer_techs,vintage)
7511              $(transfer_usedTech(linksModel,yearsSel,transfer_techs,vintage)
7512                  AND linksModelToCalc(linksModel)),
7513          (   transfer_flowAlong(timeModelSel,linksModel,yearsSel,transfer_techs,vintage)
7514                  $(transfer_incidenceModel(nodesModelSel,linksModel) <> 0)
7515            + transfer_flowAgainst(timeModelSel,linksModel,yearsSel,transfer_techs,vintage)
7516                  $(transfer_incidenceModel(nodesModelSel,linksModel) <> 0) )
7517          * timeLength(timeModelSel)
7518          * ( transfer_coefPerFlow(transfer_techs,vintage,commodity,"coefPerFlow")
7519              + sum(link_types,
7520                  transfer_coefPerLength(transfer_techs,vintage,commodity,link_types,"coefPerLength")
7521                  * transfer_lengthParam(linksModel,link_types,"length"))))
7522   
7523  * sourcesink
7524      + sum((sourcesink_techs)
7525              $sourcesink_enabled(nodesModelSel,yearsSel,sourcesink_techs,commodity),
7526          sourcesink_flow(timeModelSel,nodesModelSel,yearsSel,sourcesink_techs,commodity)
7527          * timeLength(timeModelSel))
7528      =e=
7529      0;
7530   
7531   
7532  * ==== model definition ====
7533   
7534  Model M_balance
7535  /
7536    Eq_balance_commodities
7537  /;
7538   
INCLUDE    C:\Local\REMix\framework\remix\framework\model\source\accounting\equations.gms
7540  * SPDX-FileCopyrightText: Copyright (c) 2023 German Aerospace Center (DLR)
7541  * SPDX-License-Identifier: BSD-3-Clause
7542   
7543  * // # accounting_equations
7544   
7545  * ==== declaration of variables ====
7546   
7547  variables
7548  accounting_indicator(accNodesModel,accYears,indicator)
7549  accounting_indicator_links(linksModel,years,indicator)
7550  accounting_objective
7551    ;
7552   
7553   
7554  * ==== definition of variables ====
7555   
7556  * set the variable levels to be fixed for years before the optimization years
7557  accounting_indicator.l(accNodesModel,accYears,indicator)
7558      $activeIndicators(accNodesModel,accYears,indicator)
7559      = 0;
7560   
7561  accounting_indicator.lo(accNodesModel,accYears,indicator)
7562      $(accounting_indicatorBounds(accNodesModel,accYears,indicator,"useLower") <> 0 )
7563      = accounting_indicatorBounds(accNodesModel,accYears,indicator,"lowerValue");
7564   
7565  accounting_indicator.up(accNodesModel,accYears,indicator)
7566      $(accounting_indicatorBounds(accNodesModel,accYears,indicator,"useUpper") <> 0 )
7567      = accounting_indicatorBounds(accNodesModel,accYears,indicator,"upperValue");
7568   
7569  accounting_indicator.fx(accNodesModel,accYears,indicator)
7570      $(accounting_indicatorBounds(accNodesModel,accYears,indicator,"useFixed") <> 0 )
7571      = accounting_indicatorBounds(accNodesModel,accYears,indicator,"fixedValue");
7572   
7573   
7574  accounting_indicator_links.lo(linksModelToCalc,yearsToCalc,indicator)
7575      $(accounting_indicatorBounds_links(linksModelToCalc,yearsToCalc,indicator,"useLower") <> 0 )
7576      = accounting_indicatorBounds_links(linksModelToCalc,yearsToCalc,indicator,"lowerValue");
7577   
7578  accounting_indicator_links.up(linksModelToCalc,yearsToCalc,indicator)
7579      $(accounting_indicatorBounds_links(linksModelToCalc,yearsToCalc,indicator,"useUpper") <> 0 )
7580      = accounting_indicatorBounds_links(linksModelToCalc,yearsToCalc,indicator,"upperValue");
7581   
7582  accounting_indicator_links.fx(linksModelToCalc,yearsToCalc,indicator)
7583      $(accounting_indicatorBounds_links(linksModelToCalc,yearsToCalc,indicator,"useFixed") <> 0 )
7584      = accounting_indicatorBounds_links(linksModelToCalc,yearsToCalc,indicator,"fixedValue");
7585   
7586   
7587  * ==== declaration of equations ====
7588   
7589  equations
7590  Eq_accounting_indicatorCalc(accNodesModel,accYears,indicator
7591      ) "Calculates the level of an indicator per accounting region"
7592  Eq_accounting_indicatorCalc_links(linksModel,years,indicator
7593      ) "Calculates the level of an indicator per model link"
7594  Eq_accounting_objective "Calculates the objective value based on the specified indicator"
7595    ;
7596   
7597   
7598  * ==== equations definition ====
7599  * // ## Equations
7600  * // ### Accounting Indicator Calculation
7601  * // Calculates the indicators for each model node for converters, sources and sinks, transfer, storage and variable indicators.
7602  * // {Eq_accounting_indicatorCalc}
7603  Eq_accounting_indicatorCalc(accNodesModel,accYearsSel(accYears),indicator)
7604      $activeIndicators(accNodesModel,accYears,indicator)
7605      ..
7606      accounting_indicator(accNodesModel,accYears,indicator)
7607      =e=
7608   
7609  * == variable indicators ==
7610      sum((accNodesModel_a,accYears_a,indicator_a)
7611          $(compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
7612              and variableIndicators(accNodesModel_a,accYears_a,indicator_a)),
7613          compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
7614          * accounting_indicator(accNodesModel_a,accYears_a,indicator_a))
7615   
7616  * == converters ==
7617      + sum ((accNodesModel_a,nodesModelSel,accYears_a,yearsSel,indicator_a)
7618              $( compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
7619                  and sameas(nodesModelSel,accNodesModel_a) and sameas(yearsSel,accYears_a)),
7620          compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
7621          *
7622          ( sum ((converter_techs,vintage)
7623                      $(converter_availTech(nodesModelSel,yearsSel,converter_techs,vintage)
7624                          and accounting_converterUnits(indicator_a,nodesModelSel,converter_techs,vintage,"useAnnuity") = 0),
7625              converter_unitsBuild(nodesModelSel,yearsSel,converter_techs,vintage)
7626              * accounting_converterUnits(indicator_a,nodesModelSel,converter_techs,vintage,"perUnitBuild"))
7627   
7628          + sum ((years_a,converter_techs,vintage)
7629                      $(converter_availTech(nodesModelSel,years_a,converter_techs,vintage)
7630                          and years_a.val < sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
7631                          and accounting_converterUnits(indicator_a,nodesModelSel,converter_techs,vintage,"useAnnuity") = 1
7632                          and years_a.val + accounting_converterUnits(indicator_a,nodesModelSel,converter_techs,vintage,"amorTime") > yearsSel.val
7633                          and years_a.val <= yearsSel.val ),
7634              converter_unitsBuild(nodesModelSel,years_a,converter_techs,vintage)
7635              * accounting_converterUnits(indicator_a,nodesModelSel,converter_techs,vintage,"perUnitBuild")
7636              * accounting_annuityFactor_converter(indicator_a,nodesModelSel,converter_techs,vintage) )
7637   
7638          + sum ((yearsToCalc,converter_techs,vintage)
7639                      $(converter_availTech(nodesModelSel,yearsToCalc,converter_techs,vintage)
7640                          and yearsToCalc.val >= sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
7641                          and accounting_converterUnits(indicator_a,nodesModelSel,converter_techs,vintage,"useAnnuity") = 1
7642                          and yearsToCalc.val + accounting_converterUnits(indicator_a,nodesModelSel,converter_techs,vintage,"amorTime") > yearsSel.val
7643                          and yearsToCalc.val <= yearsSel.val ),
7644              converter_unitsBuild(nodesModelSel,yearsToCalc,converter_techs,vintage)
7645              * accounting_converterUnits(indicator_a,nodesModelSel,converter_techs,vintage,"perUnitBuild")
7646              * accounting_annuityFactor_converter(indicator_a,nodesModelSel,converter_techs,vintage) )
7647   
7648          + sum ((converter_techs,vintage)
7649                      $converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage),
7650              converter_unitsDecom(nodesModelSel,yearsSel,converter_techs,vintage)
7651              * accounting_converterUnits(indicator_a,nodesModelSel,converter_techs,vintage,"perUnitDecom")
7652   
7653              + converter_unitsTotal(nodesModelSel,yearsSel,converter_techs,vintage)
7654              * accounting_converterUnits(indicator_a,nodesModelSel,converter_techs,vintage,"perUnitTotal") )
7655   
7656          + sum ((timeModelSel,converter_techs,vintage,activity)
7657                      $converter_usedTechAct(nodesModelSel,yearsSel,converter_techs,vintage,activity),
7658              converter_activity(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity)
7659              * timeLength(timeModelSel)
7660              * accounting_converterActivity(indicator_a,nodesModelSel,converter_techs,vintage,activity,"perActivity") )
7661   
7662          + sum ((timeModelSel,converter_techs,vintage)
7663                      $converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage),
7664              converter_unitStartups(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
7665              * accounting_converterStartup(indicator_a,nodesModelSel,converter_techs,vintage,"perStartup") )
7666   
7667          + sum ((timeModelSel,converter_techs,vintage)
7668                      $converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage),
7669              converter_rampPos(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
7670              * (accounting_converterStartup(indicator_a,nodesModelSel,converter_techs,vintage,"perRamp")
7671                 + accounting_converterStartup(indicator_a,nodesModelSel,converter_techs,vintage,"perRampPos"))
7672   
7673              + converter_rampNeg(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
7674              * (accounting_converterStartup(indicator_a,nodesModelSel,converter_techs,vintage,"perRamp")
7675                 + accounting_converterStartup(indicator_a,nodesModelSel,converter_techs,vintage,"perRampNeg")))
7676          )
7677      )
7678   
7679  * == storage ==
7680      + sum ((accNodesModel_a,nodesModelSel,accYears_a,yearsSel,indicator_a)
7681              $( compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
7682                  and sameas(nodesModelSel,accNodesModel_a) and sameas(yearsSel,accYears_a)),
7683          compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
7684          *
7685          ( sum ((storage_techs,vintage)
7686                      $(storage_availTech(nodesModelSel,yearsSel,storage_techs,vintage)
7687                          and accounting_storageUnits(indicator_a,nodesModelSel,storage_techs,vintage,"useAnnuity") = 0),
7688              storage_unitsBuild(nodesModelSel,yearsSel,storage_techs,vintage)
7689              * accounting_storageUnits(indicator_a,nodesModelSel,storage_techs,vintage,"perUnitBuild") )
7690   
7691          + sum ((years_a,storage_techs,vintage)
7692                      $(storage_availTech(nodesModelSel,years_a,storage_techs,vintage)
7693                          and years_a.val < sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
7694                          and accounting_storageUnits(indicator_a,nodesModelSel,storage_techs,vintage,"useAnnuity") = 1
7695                          and years_a.val + accounting_storageUnits(indicator_a,nodesModelSel,storage_techs,vintage,"amorTime") > yearsSel.val
7696                          and years_a.val <= yearsSel.val ),
7697              storage_unitsBuild(nodesModelSel,years_a,storage_techs,vintage)
7698              * accounting_storageUnits(indicator_a,nodesModelSel,storage_techs,vintage,"perUnitBuild")
7699              * accounting_annuityFactor_storage(indicator_a,nodesModelSel,storage_techs,vintage) )
7700   
7701          + sum ((yearsToCalc,storage_techs,vintage)
7702                      $(storage_availTech(nodesModelSel,yearsToCalc,storage_techs,vintage)
7703                          and yearsToCalc.val >= sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
7704                          and accounting_storageUnits(indicator_a,nodesModelSel,storage_techs,vintage,"useAnnuity") = 1
7705                          and yearsToCalc.val + accounting_storageUnits(indicator_a,nodesModelSel,storage_techs,vintage,"amorTime") > yearsSel.val
7706                          and yearsToCalc.val <= yearsSel.val ),
7707              storage_unitsBuild(nodesModelSel,yearsToCalc,storage_techs,vintage)
7708              * accounting_storageUnits(indicator_a,nodesModelSel,storage_techs,vintage,"perUnitBuild")
7709              * accounting_annuityFactor_storage(indicator_a,nodesModelSel,storage_techs,vintage) )
7710   
7711          + sum ((storage_techs,vintage)
7712                      $storage_usedTech(nodesModelSel,yearsSel,storage_techs,vintage),
7713              storage_unitsDecom(nodesModelSel,yearsSel,storage_techs,vintage)
7714              * accounting_storageUnits(indicator_a,nodesModelSel,storage_techs,vintage,"perUnitDecom")
7715   
7716              + storage_unitsTotal(nodesModelSel,yearsSel,storage_techs,vintage)
7717              * accounting_storageUnits(indicator_a,nodesModelSel,storage_techs,vintage,"perUnitTotal") )
7718          )
7719      )
7720   
7721   
7722  * == transfer ==
7723      + sum ((accNodesModel_a,nodesModelSel,accYears_a,yearsSel,indicator_a)
7724              $( compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
7725                  and sameas(nodesModelSel,accNodesModel_a) and sameas(yearsSel,accYears_a)),
7726          compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
7727          *
7728          ( sum ((linksModelToCalc,transfer_techs,vintage)
7729                      $(transfer_availTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
7730                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0
7731                          and accounting_transferLinks(indicator_a,linksModelToCalc,transfer_techs,vintage,"useAnnuity") = 0),
7732              0.5
7733              * transfer_linksBuild(linksModelToCalc,yearsSel,transfer_techs,vintage)
7734              * accounting_transferLinks(indicator_a,linksModelToCalc,transfer_techs,vintage,"perLinkBuild") )
7735   
7736          + sum ((linksModelToCalc,years_a,transfer_techs,vintage)
7737                      $(transfer_availTech(linksModelToCalc,years_a,transfer_techs,vintage)
7738                          and years_a.val < sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
7739                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0
7740                          and accounting_transferLinks(indicator_a,linksModelToCalc,transfer_techs,vintage,"useAnnuity") = 1
7741                          and years_a.val + accounting_transferLinks(indicator_a,linksModelToCalc,transfer_techs,vintage,"amorTime") > yearsSel.val
7742                          and years_a.val <= yearsSel.val ),
7743              0.5
7744              * transfer_linksBuild(linksModelToCalc,years_a,transfer_techs,vintage)
7745              * accounting_transferLinks(indicator_a,linksModelToCalc,transfer_techs,vintage,"perLinkBuild")
7746              * accounting_annuityFactor_transferLink(indicator_a,linksModelToCalc,transfer_techs,vintage) )
7747   
7748          + sum ((linksModelToCalc,yearsToCalc,transfer_techs,vintage)
7749                      $(transfer_availTech(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
7750                          and yearsToCalc.val >= sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
7751                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0
7752                          and accounting_transferLinks(indicator_a,linksModelToCalc,transfer_techs,vintage,"useAnnuity") = 1
7753                          and yearsToCalc.val + accounting_transferLinks(indicator_a,linksModelToCalc,transfer_techs,vintage,"amorTime") > yearsSel.val
7754                          and yearsToCalc.val <= yearsSel.val ),
7755              0.5
7756              * transfer_linksBuild(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
7757              * accounting_transferLinks(indicator_a,linksModelToCalc,transfer_techs,vintage,"perLinkBuild")
7758              * accounting_annuityFactor_transferLink(indicator_a,linksModelToCalc,transfer_techs,vintage) )
7759   
7760          + sum ((linksModelToCalc,transfer_techs,vintage,link_types)
7761                      $(transfer_availTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
7762                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0
7763                          and accounting_transferPerLength(indicator_a,linksModelToCalc,transfer_techs,vintage,link_types,"useAnnuity") = 0 ),
7764              0.5
7765              * transfer_linksBuild(linksModelToCalc,yearsSel,transfer_techs,vintage)
7766              * transfer_lengthParam(linksModelToCalc,link_types,"length")
7767              * accounting_transferPerLength(indicator_a,linksModelToCalc,transfer_techs,vintage,link_types,"perLengthBuild") )
7768   
7769          + sum ((linksModelToCalc,years_a,transfer_techs,vintage,link_types)
7770                      $(transfer_availTech(linksModelToCalc,years_a,transfer_techs,vintage)
7771                          and years_a.val < sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
7772                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0
7773                          and accounting_transferPerLength(indicator_a,linksModelToCalc,transfer_techs,vintage,link_types,"useAnnuity") = 1
7774                          and years_a.val + accounting_transferPerLength(indicator_a,linksModelToCalc,transfer_techs,vintage,link_types,"amorTime") > yearsSel.val
7775                          and years_a.val <= yearsSel.val ),
7776              0.5
7777              * transfer_linksBuild(linksModelToCalc,years_a,transfer_techs,vintage)
7778              * transfer_lengthParam(linksModelToCalc,link_types,"length")
7779              * accounting_transferPerLength(indicator_a,linksModelToCalc,transfer_techs,vintage,link_types,"perLengthBuild")
7780              * accounting_annuityFactor_transferDistance(indicator_a,linksModelToCalc,transfer_techs,vintage,link_types) )
7781   
7782          + sum ((linksModelToCalc,yearsToCalc,transfer_techs,vintage,link_types)
7783                      $(transfer_availTech(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
7784                          and yearsToCalc.val >= sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
7785                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0
7786                          and accounting_transferPerLength(indicator_a,linksModelToCalc,transfer_techs,vintage,link_types,"useAnnuity") = 1
7787                          and yearsToCalc.val + accounting_transferPerLength(indicator_a,linksModelToCalc,transfer_techs,vintage,link_types,"amorTime") > yearsSel.val
7788                          and yearsToCalc.val <= yearsSel.val ),
7789              0.5
7790              * transfer_linksBuild(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
7791              * transfer_lengthParam(linksModelToCalc,link_types,"length")
7792              * accounting_transferPerLength(indicator_a,linksModelToCalc,transfer_techs,vintage,link_types,"perLengthBuild")
7793              * accounting_annuityFactor_transferDistance(indicator_a,linksModelToCalc,transfer_techs,vintage,link_types) )
7794   
7795          + sum ((linksModelToCalc,transfer_techs,vintage)
7796                      $(transfer_usedTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
7797                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0 ),
7798              0.5
7799              * transfer_linksDecom(linksModelToCalc,yearsSel,transfer_techs,vintage)
7800              * accounting_transferLinks(indicator_a,linksModelToCalc,transfer_techs,vintage,"perLinkDecom")
7801   
7802              + 0.5
7803              * transfer_linksTotal(linksModelToCalc,yearsSel,transfer_techs,vintage)
7804              * accounting_transferLinks(indicator_a,linksModelToCalc,transfer_techs,vintage,"perLinkTotal")
7805   
7806              + 0.5
7807              * sum (link_types,
7808                  transfer_linksDecom(linksModelToCalc,yearsSel,transfer_techs,vintage)
7809                  * transfer_lengthParam(linksModelToCalc,link_types,"length")
7810                  * accounting_transferPerLength(indicator_a,linksModelToCalc,transfer_techs,vintage,link_types,"perLengthDecom")
7811   
7812                  + transfer_linksTotal(linksModelToCalc,yearsSel,transfer_techs,vintage)
7813                  * transfer_lengthParam(linksModelToCalc,link_types,"length")
7814                  * accounting_transferPerLength(indicator_a,linksModelToCalc,transfer_techs,vintage,link_types,"perLengthTotal"))
7815   
7816              + 0.5
7817              * sum (timeModelSel,
7818                  transfer_flowAlong(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
7819                  * timeLength(timeModelSel)
7820                  * ( accounting_transferLinks(indicator_a,linksModelToCalc,transfer_techs,vintage,"perFlow")
7821                      + accounting_transferLinks(indicator_a,linksModelToCalc,transfer_techs,vintage,"perFlowAlong"))
7822   
7823                  + transfer_flowAgainst(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
7824                  * timeLength(timeModelSel)
7825                  * ( accounting_transferLinks(indicator_a,linksModelToCalc,transfer_techs,vintage,"perFlow")
7826                      + accounting_transferLinks(indicator_a,linksModelToCalc,transfer_techs,vintage,"perFlowAgainst")))
7827   
7828              + 0.5
7829              * sum ((timeModelSel, link_types),
7830                  transfer_flowAlong(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
7831                  * timeLength(timeModelSel)
7832                  * transfer_lengthParam(linksModelToCalc,link_types,"length")
7833                  * (accounting_transferPerLength(indicator_a,linksModelToCalc,transfer_techs,vintage,link_types,"perFlow")
7834                      + accounting_transferPerLength(indicator_a,linksModelToCalc,transfer_techs,vintage,link_types,"perFlowAlong"))
7835   
7836                  + transfer_flowAgainst(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
7837                  * timeLength(timeModelSel)
7838                  * transfer_lengthParam(linksModelToCalc,link_types,"length")
7839                  * (accounting_transferPerLength(indicator_a,linksModelToCalc,transfer_techs,vintage,link_types,"perFlow")
7840                      + accounting_transferPerLength(indicator_a,linksModelToCalc,transfer_techs,vintage,link_types,"perFlowAgainst")))
7841              )
7842          )
7843      )
7844   
7845   
7846  * == sources / sinks ==
7847      + sum ((accNodesModel_a,nodesModelSel,accYears_a,yearsSel,indicator_a)
7848              $( compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
7849                  and sameas(nodesModelSel,accNodesModel_a) and sameas(yearsSel,accYears_a)),
7850          compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
7851          *
7852          sum ((timeModelSel,sourcesink_techs,commodity)
7853                  $sourcesink_enabled(nodesModelSel,yearsSel,sourcesink_techs,commodity),
7854              sourcesink_flow(timeModelSel,nodesModelSel,yearsSel,sourcesink_techs,commodity)
7855              * timeLength(timeModelSel)
7856              * accounting_sourcesinkFlow(indicator_a,nodesModelSel,yearsSel,sourcesink_techs,commodity,"perFlow") )
7857      );
7858   
7859  * // ### Accounting Indicator Calculation Links
7860  * // Calculates the indicators for each transfer for converters, sources and sinks, transfer, storage and variable indicators.
7861  * // {Eq_accounting_indicatorCalc_links}
7862  Eq_accounting_indicatorCalc_links(linksModelToCalc,yearsSel,indicator)
7863      $activeIndicators_links(linksModelToCalc,yearsSel,indicator)
7864      ..
7865      accounting_indicator_links(linksModelToCalc,yearsSel,indicator)
7866      =e=
7867      sum ((transfer_techs,vintage)
7868                  $(transfer_availTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
7869                      and accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"useAnnuity") = 0),
7870          transfer_linksBuild(linksModelToCalc,yearsSel,transfer_techs,vintage)
7871          * accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"perLinkBuild") )
7872   
7873      + sum ((years_a,transfer_techs,vintage)
7874                  $(transfer_availTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
7875                      and accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"useAnnuity") = 1
7876                      and years_a.val + accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"amorTime") > yearsSel.val
7877                      and years_a.val <= yearsSel.val ),
7878          transfer_linksBuild(linksModelToCalc,years_a,transfer_techs,vintage)
7879          * accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"perLinkBuild")
7880          * accounting_annuityFactor_transferLink(indicator,linksModelToCalc,transfer_techs,vintage) )
7881   
7882      + sum ((transfer_techs,vintage,link_types)
7883                  $(transfer_availTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
7884                      and accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"useAnnuity") = 0 ),
7885          transfer_linksBuild(linksModelToCalc,yearsSel,transfer_techs,vintage)
7886          * transfer_lengthParam(linksModelToCalc,link_types,"length")
7887          * accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"perLengthBuild") )
7888   
7889      + sum ((years_a,transfer_techs,vintage,link_types)
7890                  $(transfer_availTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
7891                      and accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"useAnnuity") = 1
7892                      and years_a.val + accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"amorTime") > yearsSel.val
7893                      and years_a.val <= yearsSel.val ),
7894          transfer_linksBuild(linksModelToCalc,years_a,transfer_techs,vintage)
7895          * transfer_lengthParam(linksModelToCalc,link_types,"length")
7896          * accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"perLengthBuild")
7897          * accounting_annuityFactor_transferDistance(indicator,linksModelToCalc,transfer_techs,vintage,link_types) )
7898   
7899      + sum ((transfer_techs,vintage)
7900                  $(transfer_usedTech(linksModelToCalc,yearsSel,transfer_techs,vintage)),
7901          transfer_linksDecom(linksModelToCalc,yearsSel,transfer_techs,vintage)
7902          * accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"perLinkDecom")
7903   
7904          + transfer_linksTotal(linksModelToCalc,yearsSel,transfer_techs,vintage)
7905          * accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"perLinkTotal")
7906   
7907          + sum (link_types,
7908              transfer_linksDecom(linksModelToCalc,yearsSel,transfer_techs,vintage)
7909              * transfer_lengthParam(linksModelToCalc,link_types,"length")
7910              * accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"perLengthDecom")
7911   
7912              + transfer_linksTotal(linksModelToCalc,yearsSel,transfer_techs,vintage)
7913              * transfer_lengthParam(linksModelToCalc,link_types,"length")
7914              * accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"perLengthTotal"))
7915   
7916          + sum (timeModelSel,
7917              transfer_flowAlong(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
7918              * timeLength(timeModelSel)
7919              * ( accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"perFlow")
7920                  + accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"perFlowAlong"))
7921   
7922              + transfer_flowAgainst(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
7923              * timeLength(timeModelSel)
7924              * ( accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"perFlow")
7925                  + accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"perFlowAgainst")))
7926   
7927          + sum ((timeModelSel, link_types),
7928              transfer_flowAlong(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
7929              * timeLength(timeModelSel)
7930              * transfer_lengthParam(linksModelToCalc,link_types,"length")
7931              * (accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"perFlow")
7932                  + accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"perFlowAlong"))
7933   
7934              + transfer_flowAgainst(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
7935              * timeLength(timeModelSel)
7936              * transfer_lengthParam(linksModelToCalc,link_types,"length")
7937              * (accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"perFlow")
7938                  + accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"perFlowAgainst")))
7939          );
7940   
7941  * // ### Accounting Objective
7942  * // Calculates the indicators for the objective.
7943  * // {Eq_accounting_objective}
7944  Eq_accounting_objective
7945      ..
7946      accounting_objective
7947      =e=
7948      sum ((accNodesModel,accYears,indicator)
7949              $(accounting_indicatorBounds(accNodesModel,accYears,indicator,"obj") <> 0 ),
7950          accounting_indicator(accNodesModel,accYears,indicator) )
7951   
7952   
7953  * ==== model definition ====
7954   
7955  Model M_accounting
7956  /
7957  Eq_accounting_indicatorCalc_links
7958  Eq_accounting_indicatorCalc
7959  Eq_accounting_objective
7960  /;
INCLUDE    C:\Local\REMix\framework\remix\framework\model\source\optiframe.gms
7962  * SPDX-FileCopyrightText: Copyright (c) 2023 German Aerospace Center (DLR)
7963  * SPDX-License-Identifier: BSD-3-Clause
7964   
7965  * ==== optimization frames ====
7967   
7968  * mapping from optimization frame to years
7970  set optiframe / of1 * of5 /;
7971  set optiframeToCalc(optiframe);
7972   
7974  set map_optiframe(optiframe,years) / of1 . #yearsToCalc /;
7976   
7978   
7979  option optiframeToCalc < map_optiframe;
7980   
7981  Model remix /
7982    M_converter
7983    M_storage
7984    M_transfer
7985    M_sourcesink
7986    M_balance
7987    M_accounting
7988  /;
7989   
7990   
7991  * ==== include methods  ====
7992   
7993  * check if the method is valid
7999   
8000   
8001  * if method is pips write the checkanno tool
INCLUDE    C:\Local\REMix\framework\remix\framework\model\source\methods\checkanno.gms
8003  * SPDX-FileCopyrightText: Copyright (c) 2023 German Aerospace Center (DLR)
8004  * SPDX-License-Identifier: BSD-3-Clause
8005   
8008   
8011   
8012  * if method is pips generate the annotated gdx file
INCLUDE    C:\Local\REMix\framework\remix\framework\model\source\methods\pips.gms
8014  * SPDX-FileCopyrightText: Copyright (c) 2023 German Aerospace Center (DLR)
8015  * SPDX-License-Identifier: BSD-3-Clause
8016   
8020   
8021  * if method is solve run the model with commercial solvers
INCLUDE    C:\Local\REMix\framework\remix\framework\model\source\methods\solve.gms
8023  * SPDX-FileCopyrightText: Copyright (c) 2023 German Aerospace Center (DLR)
8024  * SPDX-License-Identifier: BSD-3-Clause
8025   
8028   
8030   
8031  * ==== global options ====
8038   
8039  * ==== general solver options ====
8049   
8050  * ==== cplex options ====
8059   
8060  * ==== copt options ====
8064   
8065  * ==== debug options ====
8068   
8069   
8070  * ==== setup optimization ====
8071  if ((sum(nodesModelToCalc, 1)>40 or sum(timeModelToCalc, 1)>50) and not 0,
8072     option limRow=0, limCol=0, solPrint=off;
8073  else
8074     option limRow=100000, limCol=100000, solPrint=on;
8075  );
8076   
8078   
8079  option mip = cplex;
8080  option reslim = 604800;
8081  option optcr = 1e-3;
8082  remix.threads=4;
8083  remix.optFile = 1;
8084  remix.solveLink = 0;
8085  remix.holdFixed = 1;
8086   
8087   
8088  * ==== configure optionfiles ====
8089   
8091  file opt / "cplex.opt" /;
8092  put opt;
8094  put "rerun no" /;
8096  put "lpmethod 4" /;
8098  put "barorder 0" /;
8099  put "preind 1" /;
8100  put "scaind 0" /;
8101  put "predual -1" /;
8102  put "baralg 0" /;
8103  put "barstartalg 1" /;
8104  put "barepcomp 1e-6" /;
8105  put "solutiontype 2" /;
8106  put "startalg 4" /;
8107  put "epgap 1e-3" /;
8108  put "quality 1" /;
8109  put "barcolnz 0" /;
8110  put "threads 4" /;
8111  put "parallelmode 1" /;
8114  putclose;
8115   
8117   
8118   
8119  * ==== solve the problem ====
8120   
8121  loop ( optiframeToCalc,
8122      yearsSel(years) = no;
8123      yearsSel(years)$map_optiframe(optiframeToCalc,years) = yes;
8124      yearsToFix(years) = no;
8125      yearsToFix(years)$(years.val < smin(years_a$yearsSel(years_a), years_a.val)) = yes;
8126      accYearsSel(accYears) = no;
8127      accYearsSel("horizon") = yes;
8128      accYearsSel(accYears)$(sum(yearsSel$sameas(accYears,yearsSel), 1)) = yes;
8129      accYearsToFix(accYears) = no;
8130      accYearsToFix(accYears)$(sum(years$(sameas(years,accYears) and years.val < smin(years_a$yearsSel(years_a), years_a.val)), 1) > 0) = yes;
8131      timeModelSel(timeModel) = no;
8132      timeModelSel(timeModel)$timeModelToCalc(timeModel) = yes;
8133      nodesModelSel(nodesModel) = no;
8134      nodesModelSel(nodesModel)$nodesModelToCalc(nodesModel) = yes;
8135   
8136  * Fix decision for years previously optimized in case of myopic or foresight
8137      converter_unitsDelta(nodesModelToCalc,yearsToFix,converter_techs)
8138          $(sum(yearsToCalc$sameas(yearsToFix, yearsToCalc), 1))
8139          = sum(vintage, converter_unitsTotal.l(nodesModelToCalc,yearsToFix,converter_techs,vintage))
8140              - converter_capacityParam(nodesModelToCalc,yearsToFix,converter_techs,"unitsUpperLimit");
8141      converter_unitsDelta(nodesModelToCalc,yearsToFix,converter_techs)
8142          $(converter_unitsDelta(nodesModelToCalc,yearsToFix,converter_techs) < 0) = 0;
8143   
8144      converter_unitsBuild.l(nodesModelToCalc,yearsToFix,converter_techs,vintage)
8145          $converter_availTech(nodesModelToCalc,yearsToFix,converter_techs,vintage)
8146          = converter_unitsBuild.l(nodesModelToCalc,yearsToFix,converter_techs,vintage)
8147              - converter_unitsDelta(nodesModelToCalc,yearsToFix,converter_techs);
8148   
8149      converter_unitsBuild.l(nodesModelToCalc,yearsToFix,converter_techs,vintage)
8150          $(converter_unitsBuild.l(nodesModelToCalc,yearsToFix,converter_techs,vintage) < 0) = 0;
8151      converter_unitsBuild.fx(nodesModelToCalc,yearsToFix,converter_techs,vintage)
8152          = converter_unitsBuild.l(nodesModelToCalc,yearsToFix,converter_techs,vintage);
8153      converter_unitsDecom.l(nodesModelToCalc,yearsToFix,converter_techs,vintage)
8154          $(converter_unitsDecom.l(nodesModelToCalc,yearsToFix,converter_techs,vintage) < 0) = 0;
8155      converter_unitsDecom.fx(nodesModelToCalc,yearsToFix,converter_techs,vintage)
8156          = converter_unitsDecom.l(nodesModelToCalc,yearsToFix,converter_techs,vintage);
8157      converter_unitsTotal.fx(nodesModelToCalc,yearsToFix,converter_techs,vintage)
8158          = converter_unitsTotal.l(nodesModelToCalc,yearsToFix,converter_techs,vintage);
8159   
8160   
8161      storage_unitsDelta(nodesModelToCalc,yearsToFix,storage_techs)
8162          $(sum(yearsToCalc$sameas(yearsToFix, yearsToCalc), 1))
8163          = sum(vintage, storage_unitsTotal.l(nodesModelToCalc,yearsToFix,storage_techs,vintage))
8164              - storage_reservoirParam(nodesModelToCalc,yearsToFix,storage_techs,"unitsUpperLimit");
8165      storage_unitsDelta(nodesModelToCalc,yearsToFix,storage_techs)
8166          $(storage_unitsDelta(nodesModelToCalc,yearsToFix,storage_techs) < 0) = 0;
8167   
8168      storage_unitsBuild.l(nodesModelToCalc,yearsToFix,storage_techs,vintage)
8169          $storage_availTech(nodesModelToCalc,yearsToFix,storage_techs,vintage)
8170          = storage_unitsBuild.l(nodesModelToCalc,yearsToFix,storage_techs,vintage)
8171              - storage_unitsDelta(nodesModelToCalc,yearsToFix,storage_techs);
8172   
8173      storage_unitsBuild.l(nodesModelToCalc,yearsToFix,storage_techs,vintage)
8174          $(storage_unitsBuild.l(nodesModelToCalc,yearsToFix,storage_techs,vintage) < 0) = 0;
8175      storage_unitsBuild.fx(nodesModelToCalc,yearsToFix,storage_techs,vintage)
8176          = storage_unitsBuild.l(nodesModelToCalc,yearsToFix,storage_techs,vintage);
8177      storage_unitsDecom.l(nodesModelToCalc,yearsToFix,storage_techs,vintage)
8178          $(storage_unitsDecom.l(nodesModelToCalc,yearsToFix,storage_techs,vintage) < 0) = 0;
8179      storage_unitsDecom.fx(nodesModelToCalc,yearsToFix,storage_techs,vintage)
8180          = storage_unitsDecom.l(nodesModelToCalc,yearsToFix,storage_techs,vintage);
8181      storage_unitsTotal.fx(nodesModelToCalc,yearsToFix,storage_techs,vintage)
8182          = storage_unitsTotal.l(nodesModelToCalc,yearsToFix,storage_techs,vintage);
8183   
8184   
8185      transfer_linksDelta(linksModelToCalc,yearsToFix,transfer_techs)
8186          $(sum(yearsToCalc$sameas(yearsToFix, yearsToCalc), 1))
8187          = sum(vintage, transfer_linksTotal.l(linksModelToCalc,yearsToFix,transfer_techs,vintage))
8188              - transfer_linksParam(linksModelToCalc,yearsToFix,transfer_techs,"linksUpperLimit");
8189      transfer_linksDelta(linksModelToCalc,yearsToFix,transfer_techs)
8190          $(transfer_linksDelta(linksModelToCalc,yearsToFix,transfer_techs) < 0) = 0;
8191   
8192      transfer_linksBuild.l(linksModelToCalc,yearsToFix,transfer_techs,vintage)
8193          $transfer_availTech(linksModelToCalc,yearsToFix,transfer_techs,vintage)
8194          = transfer_linksBuild.l(linksModelToCalc,yearsToFix,transfer_techs,vintage)
8195              - transfer_linksDelta(linksModelToCalc,yearsToFix,transfer_techs);
8196   
8197      transfer_linksBuild.l(linksModelToCalc,yearsToFix,transfer_techs,vintage)
8198          $(transfer_linksBuild.l(linksModelToCalc,yearsToFix,transfer_techs,vintage) < 0) = 0;
8199      transfer_linksBuild.fx(linksModelToCalc,yearsToFix,transfer_techs,vintage)
8200          = transfer_linksBuild.l(linksModelToCalc,yearsToFix,transfer_techs,vintage);
8201      transfer_linksDecom.l(linksModelToCalc,yearsToFix,transfer_techs,vintage)
8202          $(transfer_linksDecom.l(linksModelToCalc,yearsToFix,transfer_techs,vintage) < 0) = 0;
8203      transfer_linksDecom.fx(linksModelToCalc,yearsToFix,transfer_techs,vintage)
8204          = transfer_linksDecom.l(linksModelToCalc,yearsToFix,transfer_techs,vintage);
8205      transfer_linksTotal.fx(linksModelToCalc,yearsToFix,transfer_techs,vintage)
8206          = transfer_linksTotal.l(linksModelToCalc,yearsToFix,transfer_techs,vintage);
8207   
8208      accounting_indicator.fx(accNodesModel,accYearsToFix,indicator)
8209          = accounting_indicator.l(accNodesModel,accYearsToFix,indicator);
8210   
8211  * Optimize and log values
8212      if (opti_sense < 0,
8213      solve remix minimizing accounting_objective using mip;
8214      else
8215      solve remix maximizing accounting_objective using mip;
8216      );
8217   
8218      put_utility 'log' / 'Model status ' remix.modelstat:0:0;
8219      put_utility 'log' / 'Objective value ' accounting_objective.l:0:3;
8220   
8221  );
8222   
8226   
8227  * if method is pareto solve the model once and afterwards run multiple points along the pareto front
INCLUDE    C:\Local\REMix\framework\remix\framework\model\source\methods\pareto.gms
8229  * SPDX-FileCopyrightText: Copyright (c) 2023 German Aerospace Center (DLR)
8230  * SPDX-License-Identifier: BSD-3-Clause
8231   
8235   
8236  * if method is mga solve the model once and afterwards maximize the length metric of indicators
INCLUDE    C:\Local\REMix\framework\remix\framework\model\source\methods\mga.gms
8238  * SPDX-FileCopyrightText: Copyright (c) 2023 German Aerospace Center (DLR)
8239  * SPDX-License-Identifier: BSD-3-Clause
8240   
8244   
8245  * if method is iternodes run the model by iterating through all nodesToCalc
INCLUDE    C:\Local\REMix\framework\remix\framework\model\source\methods\iternodes.gms
8247  * SPDX-FileCopyrightText: Copyright (c) 2023 German Aerospace Center (DLR)
8248  * SPDX-License-Identifier: BSD-3-Clause
8249   
8253   
8254  * if postcalc is one write the results gdx
INCLUDE    C:\Local\REMix\framework\remix\framework\model\source\postcalc\definition.gms
8256  * SPDX-FileCopyrightText: Copyright (c) 2023 German Aerospace Center (DLR)
8257  * SPDX-License-Identifier: BSD-3-Clause
8258   
8260   
8261  * ==== indicator accounting ====
8262   
8263  indicator_accounting_detailed(indicator,nodesModelToCalc,yearsToCalc,techs)
8264      =
8265  * == converters ==
8266      sum ((converter_techs(techs),vintage)
8267                  $(converter_availTech(nodesModelToCalc,yearsToCalc,converter_techs,vintage)
8268                      and accounting_converterUnits(indicator,nodesModelToCalc,converter_techs,vintage,"useAnnuity") = 0),
8269          converter_unitsBuild.l(nodesModelToCalc,yearsToCalc,converter_techs,vintage)
8270          * accounting_converterUnits(indicator,nodesModelToCalc,converter_techs,vintage,"perUnitBuild"))
8271   
8272      + sum ((years_a,converter_techs(techs),vintage)
8273                  $(converter_availTech(nodesModelToCalc,years_a,converter_techs,vintage)
8274                      and accounting_converterUnits(indicator,nodesModelToCalc,converter_techs,vintage,"useAnnuity") = 1
8275                      and years_a.val + accounting_converterUnits(indicator,nodesModelToCalc,converter_techs,vintage,"amorTime") > yearsToCalc.val
8276                      and years_a.val <= yearsToCalc.val ),
8277          converter_unitsBuild.l(nodesModelToCalc,years_a,converter_techs,vintage)
8278          * accounting_converterUnits(indicator,nodesModelToCalc,converter_techs,vintage,"perUnitBuild")
8279          * accounting_annuityFactor_converter(indicator,nodesModelToCalc,converter_techs,vintage) )
8280   
8281      + sum ((converter_techs(techs),vintage)
8282                  $converter_usedTech(nodesModelToCalc,yearsToCalc,converter_techs,vintage),
8283          converter_unitsDecom.l(nodesModelToCalc,yearsToCalc,converter_techs,vintage)
8284          * accounting_converterUnits(indicator,nodesModelToCalc,converter_techs,vintage,"perUnitDecom")
8285   
8286          + converter_unitsTotal.l(nodesModelToCalc,yearsToCalc,converter_techs,vintage)
8287          * accounting_converterUnits(indicator,nodesModelToCalc,converter_techs,vintage,"perUnitTotal") )
8288   
8289      + sum ((timeModelToCalc,converter_techs(techs),vintage,activity)
8290                  $converter_usedTechAct(nodesModelToCalc,yearsToCalc,converter_techs,vintage,activity),
8291          converter_activity.l(timeModelToCalc,nodesModelToCalc,yearsToCalc,converter_techs,vintage,activity)
8292          * timeLength(timeModelToCalc)
8293          * accounting_converterActivity(indicator,nodesModelToCalc,converter_techs,vintage,activity,"perActivity") )
8294   
8295      + sum ((timeModelToCalc,converter_techs(techs),vintage)
8296                  $converter_usedTech(nodesModelToCalc,yearsToCalc,converter_techs,vintage),
8297          converter_unitStartups.l(timeModelToCalc,nodesModelToCalc,yearsToCalc,converter_techs,vintage)
8298          * accounting_converterStartup(indicator,nodesModelToCalc,converter_techs,vintage,"perStartup") )
8299   
8300      + sum ((timeModelToCalc,converter_techs(techs),vintage)
8301                  $converter_usedTech(nodesModelToCalc,yearsToCalc,converter_techs,vintage),
8302          converter_rampPos.l(timeModelToCalc,nodesModelToCalc,yearsToCalc,converter_techs,vintage)
8303          * (accounting_converterStartup(indicator,nodesModelToCalc,converter_techs,vintage,"perRamp")
8304              + accounting_converterStartup(indicator,nodesModelToCalc,converter_techs,vintage,"perRampPos"))
8305   
8306          + converter_rampNeg.l(timeModelToCalc,nodesModelToCalc,yearsToCalc,converter_techs,vintage)
8307          * (accounting_converterStartup(indicator,nodesModelToCalc,converter_techs,vintage,"perRamp")
8308              + accounting_converterStartup(indicator,nodesModelToCalc,converter_techs,vintage,"perRampNeg")))
8309   
8310  * == storage ==
8311      + sum ((storage_techs(techs),vintage)
8312                  $(storage_availTech(nodesModelToCalc,yearsToCalc,storage_techs,vintage)
8313                      and accounting_storageUnits(indicator,nodesModelToCalc,storage_techs,vintage,"useAnnuity") = 0),
8314          storage_unitsBuild.l(nodesModelToCalc,yearsToCalc,storage_techs,vintage)
8315          * accounting_storageUnits(indicator,nodesModelToCalc,storage_techs,vintage,"perUnitBuild") )
8316   
8317      + sum ((years_a,storage_techs(techs),vintage)
8318                  $(storage_availTech(nodesModelToCalc,yearsToCalc,storage_techs,vintage)
8319                      and accounting_storageUnits(indicator,nodesModelToCalc,storage_techs,vintage,"useAnnuity") = 1
8320                      and years_a.val + accounting_storageUnits(indicator,nodesModelToCalc,storage_techs,vintage,"amorTime") > yearsToCalc.val
8321                      and years_a.val <= yearsToCalc.val ),
8322          storage_unitsBuild.l(nodesModelToCalc,years_a,storage_techs,vintage)
8323          * accounting_storageUnits(indicator,nodesModelToCalc,storage_techs,vintage,"perUnitBuild")
8324          * accounting_annuityFactor_storage(indicator,nodesModelToCalc,storage_techs,vintage) )
8325   
8326      + sum ((storage_techs(techs),vintage)
8327                  $storage_usedTech(nodesModelToCalc,yearsToCalc,storage_techs,vintage),
8328          storage_unitsDecom.l(nodesModelToCalc,yearsToCalc,storage_techs,vintage)
8329          * accounting_storageUnits(indicator,nodesModelToCalc,storage_techs,vintage,"perUnitDecom")
8330   
8331          + storage_unitsTotal.l(nodesModelToCalc,yearsToCalc,storage_techs,vintage)
8332          * accounting_storageUnits(indicator,nodesModelToCalc,storage_techs,vintage,"perUnitTotal") )
8333   
8334  * == transfer ==
8335      + sum ((linksModel,transfer_techs(techs),vintage)
8336                  $(transfer_availTech(linksModel,yearsToCalc,transfer_techs,vintage)
8337                      and linksModelToCalc(linksModel)
8338                      and transfer_incidenceModel(nodesModelToCalc,linksModel) <> 0
8339                      and accounting_transferLinks(indicator,linksModel,transfer_techs,vintage,"useAnnuity") = 0),
8340          0.5
8341          * transfer_linksBuild.l(linksModel,yearsToCalc,transfer_techs,vintage)
8342          * accounting_transferLinks(indicator,linksModel,transfer_techs,vintage,"perLinkBuild") )
8343   
8344      + sum ((linksModel,years_a,transfer_techs(techs),vintage)
8345                  $(transfer_availTech(linksModel,yearsToCalc,transfer_techs,vintage)
8346                      and linksModelToCalc(linksModel)
8347                      and transfer_incidenceModel(nodesModelToCalc,linksModel) <> 0
8348                      and accounting_transferLinks(indicator,linksModel,transfer_techs,vintage,"useAnnuity") = 1
8349                      and years_a.val + accounting_transferLinks(indicator,linksModel,transfer_techs,vintage,"amorTime") > yearsToCalc.val
8350                      and years_a.val <= yearsToCalc.val ),
8351          0.5
8352          * transfer_linksBuild.l(linksModel,years_a,transfer_techs,vintage)
8353          * accounting_transferLinks(indicator,linksModel,transfer_techs,vintage,"perLinkBuild")
8354          * accounting_annuityFactor_transferLink(indicator,linksModel,transfer_techs,vintage) )
8355   
8356      + sum ((linksModel,transfer_techs(techs),vintage,link_types)
8357                  $(transfer_availTech(linksModel,yearsToCalc,transfer_techs,vintage)
8358                      and linksModelToCalc(linksModel)
8359                      and transfer_incidenceModel(nodesModelToCalc,linksModel) <> 0
8360                      and accounting_transferPerLength(indicator,linksModel,transfer_techs,vintage,link_types,"useAnnuity") = 0 ),
8361          0.5
8362          * transfer_linksBuild.l(linksModel,yearsToCalc,transfer_techs,vintage)
8363          * transfer_lengthParam(linksModel,link_types,"length")
8364          * accounting_transferPerLength(indicator,linksModel,transfer_techs,vintage,link_types,"perLengthBuild") )
8365   
8366      + sum ((linksModel,years_a,transfer_techs(techs),vintage,link_types)
8367                  $(transfer_availTech(linksModel,yearsToCalc,transfer_techs,vintage)
8368                      and linksModelToCalc(linksModel)
8369                      and transfer_incidenceModel(nodesModelToCalc,linksModel) <> 0
8370                      and accounting_transferPerLength(indicator,linksModel,transfer_techs,vintage,link_types,"useAnnuity") = 1
8371                      and years_a.val + accounting_transferPerLength(indicator,linksModel,transfer_techs,vintage,link_types,"amorTime") > yearsToCalc.val
8372                      and years_a.val <= yearsToCalc.val ),
8373          0.5
8374          * transfer_linksBuild.l(linksModel,years_a,transfer_techs,vintage)
8375          * transfer_lengthParam(linksModel,link_types,"length")
8376          * accounting_transferPerLength(indicator,linksModel,transfer_techs,vintage,link_types,"perLengthBuild")
8377          * accounting_annuityFactor_transferDistance(indicator,linksModel,transfer_techs,vintage,link_types) )
8378   
8379      + sum ((linksModel,transfer_techs(techs),vintage)
8380                  $(transfer_usedTech(linksModel,yearsToCalc,transfer_techs,vintage)
8381                      and linksModelToCalc(linksModel)
8382                      and transfer_incidenceModel(nodesModelToCalc,linksModel) <> 0 ),
8383          0.5
8384          * transfer_linksDecom.l(linksModel,yearsToCalc,transfer_techs,vintage)
8385          * accounting_transferLinks(indicator,linksModel,transfer_techs,vintage,"perLinkDecom")
8386   
8387          + 0.5
8388          * transfer_linksTotal.l(linksModel,yearsToCalc,transfer_techs,vintage)
8389          * accounting_transferLinks(indicator,linksModel,transfer_techs,vintage,"perLinkTotal")
8390   
8391          + 0.5
8392          * sum (link_types,
8393              transfer_linksDecom.l(linksModel,yearsToCalc,transfer_techs,vintage)
8394              * transfer_lengthParam(linksModel,link_types,"length")
8395              * accounting_transferPerLength(indicator,linksModel,transfer_techs,vintage,link_types,"perLengthDecom")
8396   
8397              + transfer_linksTotal.l(linksModel,yearsToCalc,transfer_techs,vintage)
8398              * transfer_lengthParam(linksModel,link_types,"length")
8399              * accounting_transferPerLength(indicator,linksModel,transfer_techs,vintage,link_types,"perLengthTotal"))
8400   
8401          + 0.5
8402          * sum (timeModelToCalc,
8403              transfer_flowAlong.l(timeModelToCalc,linksModel,yearsToCalc,transfer_techs,vintage)
8404              * timeLength(timeModelToCalc)
8405              * ( accounting_transferLinks(indicator,linksModel,transfer_techs,vintage,"perFlow")
8406                  + accounting_transferLinks(indicator,linksModel,transfer_techs,vintage,"perFlowAlong"))
8407   
8408              + transfer_flowAgainst.l(timeModelToCalc,linksModel,yearsToCalc,transfer_techs,vintage)
8409              * timeLength(timeModelToCalc)
8410              * ( accounting_transferLinks(indicator,linksModel,transfer_techs,vintage,"perFlow")
8411                  + accounting_transferLinks(indicator,linksModel,transfer_techs,vintage,"perFlowAgainst")))
8412   
8413          + 0.5
8414          * sum ((timeModelToCalc, link_types),
8415              transfer_flowAlong.l(timeModelToCalc,linksModel,yearsToCalc,transfer_techs,vintage)
8416              * timeLength(timeModelToCalc)
8417              * transfer_lengthParam(linksModel,link_types,"length")
8418              * (accounting_transferPerLength(indicator,linksModel,transfer_techs,vintage,link_types,"perFlow")
8419                  + accounting_transferPerLength(indicator,linksModel,transfer_techs,vintage,link_types,"perFlowAlong"))
8420   
8421              + transfer_flowAgainst.l(timeModelToCalc,linksModel,yearsToCalc,transfer_techs,vintage)
8422              * timeLength(timeModelToCalc)
8423              * transfer_lengthParam(linksModel,link_types,"length")
8424              * (accounting_transferPerLength(indicator,linksModel,transfer_techs,vintage,link_types,"perFlow")
8425                  + accounting_transferPerLength(indicator,linksModel,transfer_techs,vintage,link_types,"perFlowAgainst"))))
8426   
8427   
8428  * == sources / sinks ==
8429      + sum ((timeModelToCalc,sourcesink_techs(techs),commodity)
8430              $sourcesink_enabled(nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity),
8431          sourcesink_flow.l(timeModelToCalc,nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity)
8432          * timeLength(timeModelToCalc)
8433          * accounting_sourcesinkFlow(indicator,nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity,"perFlow"))
8434      ;
8435   
8436   
8437  * ==== full set of main indicators ====
8438   
8439  indicator_accounting(accNodesModel,accYears,indicator)
8440      $sum((accNodesModel_a,accYears_a,indicator_a)
8441              $compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a), 1)
8442      =
8443      + sum((accNodesModel_a,accYears_a,indicator_a)
8444              $(compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
8445                  and variableIndicators(accNodesModel_a,accYears_a,indicator_a)),
8446          compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
8447          * accounting_indicator.l(accNodesModel_a,accYears_a,indicator_a))
8448   
8449      + sum((accNodesModel_a,accYears_a,indicator_a)
8450              $(compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)),
8451          compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
8452          * (sum((nodesModelToCalc,yearsToCalc,techs)
8453                  $(sameas(accNodesModel_a, nodesModelToCalc)
8454                      and sameas(accYears_a, yearsToCalc)),
8455                  indicator_accounting_detailed(indicator_a,nodesModelToCalc,yearsToCalc,techs))))
8456      ;
8457   
8458  indicator_accounting_comp(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
8459      $compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
8460      =
8461          compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
8462          * accounting_indicator.l(accNodesModel_a,accYears_a,indicator_a)
8463              $variableIndicators(accNodesModel_a,accYears_a,indicator_a)
8464   
8465          + compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
8466          * (sum((nodesModelToCalc,yearsToCalc,techs)
8467                  $(sameas(accNodesModel_a, nodesModelToCalc)
8468                      and sameas(accYears_a, yearsToCalc)),
8469                  indicator_accounting_detailed(indicator_a,nodesModelToCalc,yearsToCalc,techs)))
8470      ;
8471   
8472  indicator_accounting_ref(accNodesModel,accYears,indicator)
8473      $accounting_indicator.l(accNodesModel,accYears,indicator)
8474      = accounting_indicator.l(accNodesModel,accYears,indicator);
8475   
8476  * ==== link-specific indicator accounting ====
8477   
8478  indicator_accounting_links(indicator,nodesModelToCalc,nodesModelToCalc_a,linksModelToCalc,yearsToCalc,techs)
8479      $(transfer_incidenceModel(nodesModelToCalc,linksModelToCalc) < 0
8480          and transfer_incidenceModel(nodesModelToCalc_a,linksModelToCalc) > 0)
8481      =
8482      sum ((transfer_techs(techs),vintage)
8483                  $(transfer_availTech(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
8484                      and accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"useAnnuity") = 0),
8485          transfer_linksBuild.l(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
8486          * accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"perLinkBuild") )
8487   
8488      + sum ((years_a,transfer_techs(techs),vintage)
8489                  $(transfer_availTech(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
8490                      and accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"useAnnuity") = 1
8491                      and years_a.val + accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"amorTime") > yearsToCalc.val
8492                      and years_a.val <= yearsToCalc.val ),
8493          transfer_linksBuild.l(linksModelToCalc,years_a,transfer_techs,vintage)
8494          * accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"perLinkBuild")
8495          * accounting_annuityFactor_transferLink(indicator,linksModelToCalc,transfer_techs,vintage) )
8496   
8497      + sum ((transfer_techs(techs),vintage,link_types)
8498                  $(transfer_availTech(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
8499                      and accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"useAnnuity") = 0 ),
8500          transfer_linksBuild.l(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
8501          * transfer_lengthParam(linksModelToCalc,link_types,"length")
8502          * accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"perLengthBuild") )
8503   
8504      + sum ((years_a,transfer_techs(techs),vintage,link_types)
8505                  $(transfer_availTech(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
8506                      and accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"useAnnuity") = 1
8507                      and years_a.val + accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"amorTime") > yearsToCalc.val
8508                      and years_a.val <= yearsToCalc.val ),
8509          transfer_linksBuild.l(linksModelToCalc,years_a,transfer_techs,vintage)
8510          * transfer_lengthParam(linksModelToCalc,link_types,"length")
8511          * accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"perLengthBuild")
8512          * accounting_annuityFactor_transferDistance(indicator,linksModelToCalc,transfer_techs,vintage,link_types) )
8513   
8514      + sum ((transfer_techs(techs),vintage)
8515                  $(transfer_usedTech(linksModelToCalc,yearsToCalc,transfer_techs,vintage)),
8516          transfer_linksDecom.l(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
8517          * accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"perLinkDecom")
8518   
8519          + transfer_linksTotal.l(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
8520          * accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"perLinkTotal")
8521   
8522          + sum (link_types,
8523              transfer_linksDecom.l(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
8524              * transfer_lengthParam(linksModelToCalc,link_types,"length")
8525              * accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"perLengthDecom")
8526   
8527              + transfer_linksTotal.l(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
8528              * transfer_lengthParam(linksModelToCalc,link_types,"length")
8529              * accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"perLengthTotal"))
8530   
8531          + sum (timeModelToCalc,
8532              transfer_flowAlong.l(timeModelToCalc,linksModelToCalc,yearsToCalc,transfer_techs,vintage)
8533              * timeLength(timeModelToCalc)
8534              * ( accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"perFlow")
8535                  + accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"perFlowAlong"))
8536   
8537              + transfer_flowAgainst.l(timeModelToCalc,linksModelToCalc,yearsToCalc,transfer_techs,vintage)
8538              * timeLength(timeModelToCalc)
8539              * ( accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"perFlow")
8540                  + accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"perFlowAgainst")))
8541   
8542          + sum ((timeModelToCalc, link_types),
8543              transfer_flowAlong.l(timeModelToCalc,linksModelToCalc,yearsToCalc,transfer_techs,vintage)
8544              * timeLength(timeModelToCalc)
8545              * transfer_lengthParam(linksModelToCalc,link_types,"length")
8546              * (accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"perFlow")
8547                  + accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"perFlowAlong"))
8548   
8549              + transfer_flowAgainst.l(timeModelToCalc,linksModelToCalc,yearsToCalc,transfer_techs,vintage)
8550              * timeLength(timeModelToCalc)
8551              * transfer_lengthParam(linksModelToCalc,link_types,"length")
8552              * (accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"perFlow")
8553                  + accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"perFlowAgainst")))
8554      );
8555   
8556   
8557  * == converter capacities ==
8558   
8559  converter_ratedInput(converter_techs,vintage,commodity)
8560      $(converter_techParam(converter_techs,vintage,"lifeTime") > 0)
8561      = smin(activity$converter_usedAct(converter_techs,vintage,activity),
8562              converter_coefficient(converter_techs,vintage,activity,commodity,"coefficient"));
8563  converter_ratedInput(converter_techs,vintage,commodity)
8564      $(converter_ratedInput(converter_techs,vintage,commodity) > 0)
8565      = 0;
8566   
8567  converter_ratedOutput(converter_techs,vintage,commodity)
8568      $(converter_techParam(converter_techs,vintage,"lifeTime") > 0)
8569      = smax(activity$converter_usedAct(converter_techs,vintage,activity),
8570              converter_coefficient(converter_techs,vintage,activity,commodity,"coefficient"));
8571  converter_ratedOutput(converter_techs,vintage,commodity)
8572      $(converter_ratedOutput(converter_techs,vintage,commodity) < 0)
8573      = 0;
8574   
8575  converter_ratedOutput_min(nodesModelToCalc,years,converter_techs(techs),commodity)
8576      $sum(vintage$(converter_usedTech(nodesModelToCalc,years,converter_techs,vintage)
8577          and converter_ratedOutput(converter_techs,vintage,commodity)), 1)
8578      = smin(vintage$(converter_usedTech(nodesModelToCalc,years,converter_techs,vintage)
8579              and converter_ratedOutput(converter_techs,vintage,commodity)),
8580          converter_ratedOutput(converter_techs,vintage,commodity));
8581   
8582  converter_ratedOutput_max(nodesModelToCalc,years,converter_techs(techs),commodity)
8583      $sum(vintage$(converter_usedTech(nodesModelToCalc,years,converter_techs,vintage)
8584          and converter_ratedOutput(converter_techs,vintage,commodity)), 1)
8585      = smax(vintage$(converter_usedTech(nodesModelToCalc,years,converter_techs,vintage)
8586              and converter_ratedOutput(converter_techs,vintage,commodity)),
8587          converter_ratedOutput(converter_techs,vintage,commodity));
8588   
8589  converter_units_ext(map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,years),converter_techs(techs),vintage,"build")
8590      = converter_unitsBuild.l(nodesModelToCalc,years,converter_techs,vintage);
8591   
8592  converter_units_ext(map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,years),converter_techs(techs),vintage,"decom")
8593      = converter_unitsDecom.l(nodesModelToCalc,years,converter_techs,vintage);
8594   
8595  converter_units_ext(map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,years),converter_techs(techs),vintage,"total")
8596      = converter_unitsTotal.l(nodesModelToCalc,years,converter_techs,vintage);
8597   
8598  converter_caps_ext(map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,years),converter_techs(techs),vintage,commodity,capType)
8599      $(converter_ratedOutput(converter_techs,vintage,commodity))
8600      = converter_units_ext(accNodesModel,nodesModelToCalc,accYears,years,techs,vintage,capType)
8601          * converter_ratedOutput(converter_techs,vintage,commodity);
8602   
8603  converter_caps_ext(map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,years),converter_techs(techs),vintage,commodity,"lowerLimit")
8604      $(converter_usedTech(nodesModelToCalc,years,converter_techs,vintage)
8605          and converter_capacityParam(nodesModelToCalc,years,converter_techs,"unitsLowerLimit") > 0
8606          and converter_ratedOutput_min(nodesModelToCalc,years,converter_techs,commodity))
8607      = converter_capacityParam(nodesModelToCalc,years,converter_techs,"unitsLowerLimit")
8608          * converter_ratedOutput_min(nodesModelToCalc,years,converter_techs,commodity);
8609   
8610  converter_caps_ext(map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,years),converter_techs(techs),vintage,commodity,"upperLimit")
8611      $(converter_usedTech(nodesModelToCalc,years,converter_techs,vintage)
8612          and converter_capacityParam(nodesModelToCalc,years,converter_techs,"unitsUpperLimit") < inf
8613          and converter_ratedOutput_min(nodesModelToCalc,years,converter_techs,commodity))
8614      = converter_capacityParam(nodesModelToCalc,years,converter_techs,"unitsUpperLimit")
8615          * converter_ratedOutput_max(nodesModelToCalc,years,converter_techs,commodity);
8616   
8617  converter_caps(accNodesModel,accYears,converter_techs(techs),commodity,capType)
8618      = sum((nodesModelToCalc,years,vintage)
8619              $(map_accNodesPostCalc(accNodesModel,nodesModelToCalc)
8620                  and map_accYearsPostCalc(accYears,years)),
8621          converter_caps_ext(accNodesModel,nodesModelToCalc,accYears,years,converter_techs,vintage,commodity,capType));
8622  option clear = converter_caps_ext;
8623   
8624  converter_units(accNodesModel,accYears,converter_techs(techs),vintage,capType)
8625      = sum((nodesModelToCalc,years)
8626              $(map_accNodesPostCalc(accNodesModel,nodesModelToCalc)
8627                  and map_accYearsPostCalc(accYears,years)),
8628          converter_units_ext(accNodesModel,nodesModelToCalc,accYears,years,converter_techs,vintage,capType));
8629  option clear = converter_units_ext;
8630   
8631   
8632  * ==== transfer capacities ====
8633   
8634  max_transfer_coefficient(transfer_techs(techs),commodity)
8635          $(smax(vintage, transfer_coefficient(transfer_techs,vintage,commodity,"coefficient")) > 0)
8636          = smax(vintage, transfer_coefficient(transfer_techs,vintage,commodity,"coefficient"));
8637   
8638  min_transfer_coefficient(transfer_techs(techs),commodity)
8639          $(smin(vintage, transfer_coefficient(transfer_techs,vintage,commodity,"coefficient")) > 0)
8640          = smin(vintage, transfer_coefficient(transfer_techs,vintage,commodity,"coefficient"));
8641   
8642   
8643  transfer_links(linksModel,years,transfer_techs,vintage,"build")
8644      = transfer_linksBuild.l(linksModel,years,transfer_techs,vintage);
8645   
8646  transfer_links(linksModel,years,transfer_techs,vintage,"decom")
8647      = transfer_linksDecom.l(linksModel,years,transfer_techs,vintage);
8648   
8649  transfer_links(linksModel,years,transfer_techs,vintage,"total")
8650      = transfer_linksTotal.l(linksModel,years,transfer_techs,vintage);
8651   
8652  transfer_caps(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,years,transfer_techs(techs),commodity,capType)
8653      $(transfer_incidenceModel(nodesModelToCalc_start,linksModel) < 0
8654          and transfer_incidenceModel(nodesModelToCalc_end,linksModel) > 0)
8655      = sum(vintage,
8656          transfer_links(linksModel,years,transfer_techs,vintage,capType)
8657          * transfer_coefficient(transfer_techs,vintage,commodity,"coefficient"));
8658   
8659  transfer_caps(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,years,transfer_techs(techs),commodity,"lowerLimit")
8660      $(transfer_linksParam(linksModel,years,transfer_techs,'linksLowerLimit') > 0
8661          and transfer_incidenceModel(nodesModelToCalc_start,linksModel) < 0
8662          and transfer_incidenceModel(nodesModelToCalc_end,linksModel) > 0
8663          and sum(vintage$(transfer_usedTech(linksModel,years,transfer_techs,vintage)
8664                              and transfer_coefficient(transfer_techs,vintage,commodity,"coefficient")), 1))
8665      = transfer_linksParam(linksModel,years,transfer_techs,'linksLowerLimit')
8666          * min_transfer_coefficient(transfer_techs,commodity);
8667   
8668  transfer_caps(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,years,transfer_techs(techs),commodity,"upperLimit")
8669      $(transfer_linksParam(linksModel,years,transfer_techs,'linksUpperLimit') < inf
8670          and transfer_incidenceModel(nodesModelToCalc_start,linksModel) < 0
8671          and transfer_incidenceModel(nodesModelToCalc_end,linksModel) > 0
8672          and sum(vintage$(transfer_usedTech(linksModel,years,transfer_techs,vintage)
8673                              and transfer_coefficient(transfer_techs,vintage,commodity,"coefficient")), 1))
8674      = transfer_linksParam(linksModel,years,transfer_techs,'linksUpperLimit')
8675          * max_transfer_coefficient(transfer_techs,commodity);
8676   
8677   
8678  * ==== transfer flows ====
8679   
8680  transfer_flows(timeModelToCalc,nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs(techs),commodity)
8681      $(transfer_incidenceModel(nodesModelToCalc_start,linksModel) < 0
8682          and transfer_incidenceModel(nodesModelToCalc_end,linksModel) > 0)
8683      = sum(vintage,
8684          ( transfer_flowAlong.l(timeModelToCalc,linksModel,yearsToCalc,transfer_techs,vintage)
8685              - transfer_flowAgainst.l(timeModelToCalc,linksModel,yearsToCalc,transfer_techs,vintage) )
8686          * timeLength(timeModelToCalc)
8687          * transfer_coefficient(transfer_techs,vintage,commodity,"coefficient"));
8688   
8689  transfer_flows_annual(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs(techs),commodity,"netto")
8690      = sum(timeModelToCalc,
8691          transfer_flows(timeModelToCalc,nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs,commodity));
8692   
8693  transfer_flows_annual(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs(techs),commodity,"positive")
8694      = sum(timeModelToCalc
8695              $(transfer_flows(timeModelToCalc,nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs,commodity) > 0),
8696          transfer_flows(timeModelToCalc,nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs,commodity));
8697   
8698  transfer_flows_annual(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs(techs),commodity,"negative")
8699      = sum(timeModelToCalc
8700              $(transfer_flows(timeModelToCalc,nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs,commodity) < 0),
8701          transfer_flows(timeModelToCalc,nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs,commodity));
8702   
8703  transfer_flows_annual(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs(techs),commodity,"brutto")
8704      = transfer_flows_annual(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs,commodity,"positive")
8705          - transfer_flows_annual(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs,commodity,"negative");
8706   
8707  transfer_flows_annual(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs(techs),commodity,"flh")
8708      $(transfer_flows_annual(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs,commodity,"brutto") > 0
8709          and transfer_caps(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs,commodity,"total") > 0)
8710      = transfer_flows_annual(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs,commodity,"brutto")
8711          / transfer_caps(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs,commodity,"total");
8712   
8713  transfer_losses(timeModelToCalc,nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs(techs),commodity)
8714      $(transfer_incidenceModel(nodesModelToCalc_start,linksModel) < 0
8715          and transfer_incidenceModel(nodesModelToCalc_end,linksModel) > 0)
8716      = -1 * abs(sum(vintage,
8717          ( transfer_flowAlong.l(timeModelToCalc,linksModel,yearsToCalc,transfer_techs,vintage)
8718              - transfer_flowAgainst.l(timeModelToCalc,linksModel,yearsToCalc,transfer_techs,vintage) )
8719          * ( transfer_coefPerFlow(transfer_techs,vintage,commodity,"coefPerFlow")
8720              + sum(link_types,
8721                  transfer_coefPerLength(transfer_techs,vintage,commodity,link_types,"coefPerLength")
8722                  * transfer_lengthParam(linksModel,link_types,"length")))))
8723          * timeLength(timeModelToCalc);
8724   
8725  transfer_losses_annual(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs(techs),commodity,"netto")
8726      = sum(timeModelToCalc,
8727          transfer_losses(timeModelToCalc,nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs,commodity));
8728   
8729   
8730  * ==== storage capacities ====
8731   
8732  storage_size_max(nodesModelToCalc,years,storage_techs(techs),commodity)
8733      $sum(vintage$(storage_usedTech(nodesModelToCalc,years,storage_techs,vintage)
8734              and storage_usedCom(storage_techs,vintage,commodity)
8735              and storage_sizeParam(storage_techs,vintage,commodity,"size")), 1)
8736      = smax(vintage$(storage_usedTech(nodesModelToCalc,years,storage_techs,vintage)
8737              and storage_usedCom(storage_techs,vintage,commodity)
8738              and storage_sizeParam(storage_techs,vintage,commodity,"size")),
8739          storage_sizeParam(storage_techs,vintage,commodity,"size"));
8740   
8741  storage_size_min(nodesModelToCalc,years,storage_techs(techs),commodity)
8742      $sum(vintage$(storage_usedTech(nodesModelToCalc,years,storage_techs,vintage)
8743              and storage_usedCom(storage_techs,vintage,commodity)
8744              and storage_sizeParam(storage_techs,vintage,commodity,"size")), 1)
8745      = smin(vintage$(storage_usedTech(nodesModelToCalc,years,storage_techs,vintage)
8746              and storage_usedCom(storage_techs,vintage,commodity)
8747              and storage_sizeParam(storage_techs,vintage,commodity,"size")),
8748          storage_sizeParam(storage_techs,vintage,commodity,"size"));
8749   
8750  storage_units_ext(map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,years),storage_techs(techs),vintage,"build")
8751      $storage_usedTech(nodesModelToCalc,years,storage_techs,vintage)
8752      = storage_unitsBuild.l(nodesModelToCalc,years,storage_techs,vintage);
8753   
8754  storage_units_ext(map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,years),storage_techs(techs),vintage,"decom")
8755      $storage_usedTech(nodesModelToCalc,years,storage_techs,vintage)
8756      = storage_unitsDecom.l(nodesModelToCalc,years,storage_techs,vintage);
8757   
8758  storage_units_ext(map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,years),storage_techs(techs),vintage,"total")
8759      $storage_usedTech(nodesModelToCalc,years,storage_techs,vintage)
8760      = storage_unitsTotal.l(nodesModelToCalc,years,storage_techs,vintage);
8761   
8762  storage_caps_ext(map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,years),storage_techs(techs),vintage,commodity,capType)
8763      $storage_sizeParam(storage_techs,vintage,commodity,"size")
8764      = storage_units_ext(accNodesModel,nodesModelToCalc,accYears,years,storage_techs,vintage,capType)
8765          * storage_sizeParam(storage_techs,vintage,commodity,"size");
8766   
8767  storage_caps_ext(map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,years),storage_techs(techs),vintage,commodity,"lowerLimit")
8768      $(storage_usedTech(nodesModelToCalc,years,storage_techs,vintage)
8769          and storage_reservoirParam(nodesModelToCalc,years,storage_techs,"unitsLowerLimit") > 0
8770          and storage_size_min(nodesModelToCalc,years,storage_techs,commodity))
8771      = storage_reservoirParam(nodesModelToCalc,years,storage_techs,"unitsLowerLimit")
8772          * storage_size_min(nodesModelToCalc,years,storage_techs,commodity);
8773   
8774  storage_caps_ext(map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,years),storage_techs(techs),vintage,commodity,"upperLimit")
8775      $(storage_usedTech(nodesModelToCalc,years,storage_techs,vintage)
8776          and storage_reservoirParam(nodesModelToCalc,years,storage_techs,"unitsUpperLimit") < inf
8777          and storage_size_max(nodesModelToCalc,years,storage_techs,commodity))
8778      = storage_reservoirParam(nodesModelToCalc,years,storage_techs,"unitsUpperLimit")
8779          * storage_size_max(nodesModelToCalc,years,storage_techs,commodity);
8780   
8781  storage_caps_ext(map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,years),storage_techs(techs),vintage,commodity,"total_degraded")
8782      $(storage_usedCom(storage_techs,vintage,commodity)
8783          and (storage_techParam(storage_techs,vintage,"annualDegradation") > 0
8784               or storage_techParam(storage_techs,vintage,"usageDegradation")))
8785      = sum((degradation_states,yearsCom), (storage_degradationParam(storage_techs,vintage,degradation_states,"remainingCapacity")
8786                                      - (years.val - yearsCom.val) * storage_techParam(storage_techs,vintage,"annualDegradation"))
8787                                      * storage_unitsStateTracker.l(nodesModelToCalc,years,yearsCom,storage_techs,vintage,degradation_states)
8788                                      * storage_sizeParam(storage_techs,vintage,commodity,"size"));
8789   
8790  storage_caps(accNodesModel,accYears,storage_techs(techs),commodity,capType)
8791      = sum((nodesModelToCalc,years,vintage)
8792              $(map_accNodesPostCalc(accNodesModel,nodesModelToCalc)
8793                  and map_accYearsPostCalc(accYears,years)),
8794          storage_caps_ext(accNodesModel,nodesModelToCalc,accYears,years,storage_techs,vintage,commodity,capType));
8795  option clear = storage_caps_ext;
8796   
8797  storage_units(accNodesModel,accYears,storage_techs(techs),vintage,capType)
8798      = sum((nodesModelToCalc,years)
8799              $(map_accNodesPostCalc(accNodesModel,nodesModelToCalc)
8800                  and map_accYearsPostCalc(accYears,years)),
8801          storage_units_ext(accNodesModel,nodesModelToCalc,accYears,years,storage_techs,vintage,capType));
8802  option clear = storage_units_ext;
8803   
8804   
8805  * ==== storage levels and flows ====
8806   
8807  storage_flows_ext(timeModelToCalc,map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,yearsToCalc),storage_techs(techs),vintage,commodity)
8808      $(storage_usedTech(nodesModelToCalc,yearsToCalc,storage_techs,vintage) and balance_techComm(storage_techs,commodity))
8809      = storage_level.l(timeModelToCalc,nodesModelToCalc,yearsToCalc,storage_techs,vintage,commodity)
8810          - storage_level.l(timeModelToCalc--1,nodesModelToCalc,yearsToCalc,storage_techs,vintage,commodity)
8812      + storage_losses.l(timeModelToCalc,nodesModelToCalc,yearsToCalc,storage_techs,vintage,commodity)
8813          * timeLength(timeModelToCalc)
8815      ;
8816   
8817  storage_flows(timeModelToCalc,accNodesModel,accYears,storage_techs(techs),commodity)
8818      = sum((nodesModelToCalc,yearsToCalc,vintage)
8819              $(storage_usedTech(nodesModelToCalc,yearsToCalc,storage_techs,vintage) and balance_techComm(storage_techs,commodity)),
8820          storage_flows_ext(timeModelToCalc,accNodesModel,nodesModelToCalc,accYears,yearsToCalc,storage_techs,vintage,commodity));
8821  option clear = storage_flows_ext;
8822   
8823  storage_level_out_ext(timeModelToCalc,map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,yearsToCalc),storage_techs(techs),vintage,commodity)
8824      $(storage_usedTech(nodesModelToCalc,yearsToCalc,storage_techs,vintage) and balance_techComm(storage_techs,commodity))
8825      = storage_level.l(timeModelToCalc,nodesModelToCalc,yearsToCalc,storage_techs,vintage,commodity);
8826   
8827  storage_level_out(timeModelToCalc,accNodesModel,accYears,storage_techs(techs),commodity)
8828      = sum((nodesModelToCalc,yearsToCalc,vintage)
8829              $(storage_usedTech(nodesModelToCalc,yearsToCalc,storage_techs,vintage) and balance_techComm(storage_techs,commodity)),
8830          storage_level_out_ext(timeModelToCalc,accNodesModel,nodesModelToCalc,accYears,yearsToCalc,storage_techs,vintage,commodity));
8831  option clear = storage_level_out_ext;
8832   
8833  storage_flows_annual(accNodesModel,accYears,storage_techs(techs),commodity,"netto")
8834      = sum(timeModelToCalc,
8835          storage_flows(timeModelToCalc,accNodesModel,accYears,storage_techs,commodity));
8836   
8837  storage_flows_annual(accNodesModel,accYears,storage_techs(techs),commodity,"positive")
8838      = sum(timeModelToCalc
8839              $(storage_flows(timeModelToCalc,accNodesModel,accYears,storage_techs,commodity) > 0),
8840          storage_flows(timeModelToCalc,accNodesModel,accYears,storage_techs,commodity));
8841   
8842  storage_flows_annual(accNodesModel,accYears,storage_techs(techs),commodity,"negative")
8843      = sum(timeModelToCalc
8844              $(storage_flows(timeModelToCalc,accNodesModel,accYears,storage_techs,commodity) < 0),
8845          storage_flows(timeModelToCalc,accNodesModel,accYears,storage_techs,commodity));
8846   
8847  storage_flows_annual(accNodesModel,accYears,storage_techs(techs),commodity,"brutto")
8848      = storage_flows_annual(accNodesModel,accYears,storage_techs,commodity,"positive")
8849          + storage_flows_annual(accNodesModel,accYears,storage_techs,commodity,"negative");
8850   
8851  storage_flows_annual(accNodesModel,accYears,storage_techs(techs),commodity,"flh")
8852      $(storage_flows_annual(accNodesModel,accYears,storage_techs,commodity,"brutto") > 0
8853          and storage_caps(accNodesModel,accYears,storage_techs,commodity,"total") > 0)
8854      = storage_flows_annual(accNodesModel,accYears,storage_techs,commodity,"brutto")
8855          / storage_caps(accNodesModel,accYears,storage_techs,commodity,"total");
8856   
8857  storage_losses_out(timeModelToCalc,accNodesModel,accYears,storage_techs(techs),commodity)
8858      = sum((nodesModelToCalc,yearsToCalc,vintage)
8859              $(storage_losses.l(timeModelToCalc,nodesModelToCalc,yearsToCalc,storage_techs,vintage,commodity)
8860                  and map_accNodesPostCalc(accNodesModel,nodesModelToCalc)
8861                  and map_accYearsPostCalc(accYears,yearsToCalc)),
8862          storage_losses.l(timeModelToCalc,nodesModelToCalc,yearsToCalc,storage_techs,vintage,commodity)
8863          * timeLength(timeModelToCalc));
8864   
8865  storage_losses_annual(accNodesModel,accYears,storage_techs(techs),commodity,"netto")
8866      = sum(timeModelToCalc,
8867          storage_losses_out(timeModelToCalc,accNodesModel,accYears,storage_techs,commodity));
8868   
8869   
8870  * == commodity balance ==
8871   
8872  commodity_balance_ext(timeModelToCalc,map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,yearsToCalc),converter_techs(techs),vintage,commodity)
8873      $(converter_usedTech(nodesModelToCalc,yearsToCalc,converter_techs,vintage)
8874          and balance_usedConverter(nodesModelToCalc,yearsToCalc,commodity))
8875      = sum((activity)
8876              $(converter_coefficientProfile(timeModelToCalc,nodesModelToCalc,yearsToCalc,converter_techs,vintage,activity,commodity)),
8877          converter_activity.l(timeModelToCalc,nodesModelToCalc,yearsToCalc,converter_techs,vintage,activity)
8878              * timeLength(timeModelToCalc)
8879              * converter_coefficientProfile(timeModelToCalc,nodesModelToCalc,yearsToCalc,converter_techs,vintage,activity,commodity)
8880          + converter_unitsUsingActivity_MIP.l(timeModelToCalc,nodesModelToCalc,yearsToCalc,converter_techs,vintage,activity)
8881              * timeLength(timeModelToCalc)
8882              * converter_coefficient(converter_techs,vintage,activity,commodity,"constant"));
8883   
8884  commodity_balance_ext(timeModelToCalc,map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,yearsToCalc),storage_techs(techs),vintage,commodity)
8885      $(storage_usedTech(nodesModelToCalc,yearsToCalc,storage_techs,vintage)
8886          and storage_sizeParam(storage_techs,vintage,commodity,"size"))
8887      = commodity_balance_ext(timeModelToCalc,accNodesModel,nodesModelToCalc,accYears,yearsToCalc,storage_techs,vintage,commodity)
8888      + storage_level.l(timeModelToCalc--1,nodesModelToCalc,yearsToCalc,storage_techs,vintage,commodity)
8889          - storage_level.l(timeModelToCalc,nodesModelToCalc,yearsToCalc,storage_techs,vintage,commodity)
8890      - storage_losses.l(timeModelToCalc,nodesModelToCalc,yearsToCalc,storage_techs,vintage,commodity)
8891      * timeLength(timeModelToCalc);
8892   
8893  commodity_balance_ext(timeModelToCalc,map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,yearsToCalc),sourcesink_techs(techs),vintage,commodity)
8894      $(sourcesink_enabled(nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity)
8895          and sameas(yearsToCalc,vintage))
8896      = commodity_balance_ext(timeModelToCalc,accNodesModel,nodesModelToCalc,accYears,yearsToCalc,sourcesink_techs,vintage,commodity)
8897      + sourcesink_flow.l(timeModelToCalc,nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity)
8898      * timeLength(timeModelToCalc);
8899   
8900  commodity_balance_ext(timeModelToCalc,map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,yearsToCalc),transfer_techs(techs),vintage,commodity)
8901      $sum((linksModel)
8902          $(transfer_incidenceModel(nodesModelToCalc,linksModel)
8903                  and transfer_usedTech(linksModel,yearsToCalc,transfer_techs,vintage)
8904                  and transfer_coefficient(transfer_techs,vintage,commodity,"coefficient")), 1)
8905      = commodity_balance_ext(timeModelToCalc,accNodesModel,nodesModelToCalc,accYears,yearsToCalc,transfer_techs,vintage,commodity)
8906      + sum((linksModel)
8907              $(transfer_incidenceModel(nodesModelToCalc,linksModel)
8908                  and transfer_usedTech(linksModel,yearsToCalc,transfer_techs,vintage)
8909                  and transfer_coefficient(transfer_techs,vintage,commodity,"coefficient")),
8910   
8911              (transfer_flowAlong.l(timeModelToCalc,linksModel,yearsToCalc,transfer_techs,vintage)
8912                      $(transfer_incidenceModel(nodesModelToCalc,linksModel) > 0)
8913                + transfer_flowAgainst.l(timeModelToCalc,linksModel,yearsToCalc,transfer_techs,vintage)
8914                      $(transfer_incidenceModel(nodesModelToCalc,linksModel) < 0))
8915              * timeLength(timeModelToCalc)
8916              * transfer_coefficient(transfer_techs,vintage,commodity,"coefficient")
8917   
8918              - (transfer_flowAlong.l(timeModelToCalc,linksModel,yearsToCalc,transfer_techs,vintage)
8919                      $(transfer_incidenceModel(nodesModelToCalc,linksModel) < 0)
8920                + transfer_flowAgainst.l(timeModelToCalc,linksModel,yearsToCalc,transfer_techs,vintage)
8921                      $(transfer_incidenceModel(nodesModelToCalc,linksModel) > 0))
8922              * timeLength(timeModelToCalc)
8923              * transfer_coefficient(transfer_techs,vintage,commodity,"coefficient")
8924   
8925              + 0.5 * ((transfer_flowAlong.l(timeModelToCalc,linksModel,yearsToCalc,transfer_techs,vintage)
8926                          $(transfer_incidenceModel(nodesModelToCalc,linksModel) <> 0)
8927                      + transfer_flowAgainst.l(timeModelToCalc,linksModel,yearsToCalc,transfer_techs,vintage)
8928                          $(transfer_incidenceModel(nodesModelToCalc,linksModel) <> 0))
8929                      * timeLength(timeModelToCalc)
8930                      * ( transfer_coefPerFlow(transfer_techs,vintage,commodity,"coefPerFlow")
8931                          + sum(link_types,
8932                              transfer_coefPerLength(transfer_techs,vintage,commodity,link_types,"coefPerLength")
8933                              * transfer_lengthParam(linksModel,link_types,"length")))))
8934      ;
8935   
8936  commodity_balance(timeModelToCalc,accNodesModel,accYears,balance_techComm(techs,commodity))
8937      = sum((nodesModelToCalc,yearsToCalc,vintage)
8938              $(commodity_balance_ext(timeModelToCalc,accNodesModel,nodesModelToCalc,accYears,yearsToCalc,techs,vintage,commodity)
8939                  and map_accNodesPostCalc(accNodesModel,nodesModelToCalc)
8940                  and map_accYearsPostCalc(accYears,yearsToCalc)),
8941          commodity_balance_ext(timeModelToCalc,accNodesModel,nodesModelToCalc,accYears,yearsToCalc,techs,vintage,commodity));
8942  option clear = commodity_balance_ext;
8943   
8944   
8945  * ==== annual commodity sums ====
8946   
8947  commodity_balance_annual(accNodesModel,accYears,techs,commodity,"netto")
8948      = sum(timeModelToCalc,
8949          commodity_balance(timeModelToCalc,accNodesModel,accYears,techs,commodity));
8950   
8951  commodity_balance_annual(accNodesModel,accYears,techs,commodity,"positive")
8952      = sum(timeModelToCalc
8953              $(commodity_balance(timeModelToCalc,accNodesModel,accYears,techs,commodity) > 0),
8954          commodity_balance(timeModelToCalc,accNodesModel,accYears,techs,commodity));
8955   
8956  commodity_balance_annual(accNodesModel,accYears,techs,commodity,"negative")
8957      = sum(timeModelToCalc
8958              $(commodity_balance(timeModelToCalc,accNodesModel,accYears,techs,commodity) < 0),
8959          commodity_balance(timeModelToCalc,accNodesModel,accYears,techs,commodity));
8960   
8961  commodity_balance_annual(accNodesModel,accYears,techs,commodity,"brutto")
8962      = commodity_balance_annual(accNodesModel,accYears,techs,commodity,"positive")
8963          - commodity_balance_annual(accNodesModel,accYears,techs,commodity,"negative");
8964   
8965  commodity_balance_annual(accNodesModel,accYears,techs,commodity,"flh")
8966      $(commodity_balance_annual(accNodesModel,accYears,techs,commodity,"brutto") > 0
8967          and converter_caps(accNodesModel,accYears,techs,commodity,"total") > 0 )
8968      = commodity_balance_annual(accNodesModel,accYears,techs,commodity,"brutto")
8969          / converter_caps(accNodesModel,accYears,techs,commodity,"total");
8970   
8971   
8972  * ==== marginal information ====
8973   
8974  marginals_balance(timeModelToCalc,nodesModelToCalc,yearsToCalc,commodity)
8975    $balance_usedBalance(nodesModelToCalc,yearsToCalc,commodity)
8976    =
8977    Eq_balance_commodities.m(timeModelToCalc,nodesModelToCalc,yearsToCalc,commodity);
8978   
8979  marginals_sourcesink_profile(timeModelToCalc,nodesModelToCalc,yearsToCalc,sourcesink_techs(techs),commodity)
8980      $( sourcesink_flow.m(timeModelToCalc,nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity) <> 0 )
8981      =
8982      sourcesink_flow.m(timeModelToCalc,nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity);
8983   
8984  marginals_sourcesink_sum(nodesModelToCalc,yearsToCalc,sourcesink_techs(techs),commodity)
8985      $( ( Eq_sourcesink_useLowerSum.m(nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity)
8986          + Eq_sourcesink_useUpperSum.m(nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity)
8987          + Eq_sourcesink_useFixedSum.m(nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity) ) <> eps )
8988      =
8989      ( Eq_sourcesink_useLowerSum.m(nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity)
8990      + Eq_sourcesink_useUpperSum.m(nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity)
8991      + Eq_sourcesink_useFixedSum.m(nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity) );
8992   
8993  marginals_indicator_bounds(accNodesModel,accYears,indicator)
8994      $( accounting_indicator.m(accNodesModel,accYears,indicator) <> 0 )
8995      =
8996      accounting_indicator.m(accNodesModel,accYears,indicator);
8997   
8998   
8999  * ==== R2A postcalc information ====
9000   
9002   
9003   
9004  * ==== round profiles to reduce size of gdx ====
9005   
9007  commodity_balance(timeModelToCalc,accNodesModel,accYears,techs,commodity)
9008      $commodity_balance(timeModelToCalc,accNodesModel,accYears,techs,commodity)
9009      = round(commodity_balance(timeModelToCalc,accNodesModel,accYears,techs,commodity), 6);
9010   
9011  transfer_flows(timeModelToCalc,nodesModelToCalc,nodesModelToCalc_a,linksModel,yearsToCalc,transfer_techs,commodity)
9012      $transfer_flows(timeModelToCalc,nodesModelToCalc,nodesModelToCalc_a,linksModel,yearsToCalc,transfer_techs,commodity)
9013      = round(transfer_flows(timeModelToCalc,nodesModelToCalc,nodesModelToCalc_a,linksModel,yearsToCalc,transfer_techs,commodity), 6);
9014   
9015  transfer_losses(timeModelToCalc,nodesModelToCalc,nodesModelToCalc_a,linksModel,yearsToCalc,transfer_techs,commodity)
9016      $transfer_losses(timeModelToCalc,nodesModelToCalc,nodesModelToCalc_a,linksModel,yearsToCalc,transfer_techs,commodity)
9017      = round(transfer_losses(timeModelToCalc,nodesModelToCalc,nodesModelToCalc_a,linksModel,yearsToCalc,transfer_techs,commodity), 6);
9018   
9019  storage_flows(timeModelToCalc,accNodesModel,accYears,storage_techs,commodity)
9020      $storage_flows(timeModelToCalc,accNodesModel,accYears,storage_techs,commodity)
9021      = round(storage_flows(timeModelToCalc,accNodesModel,accYears,storage_techs,commodity), 6);
9022   
9023  storage_level_out(timeModelToCalc,accNodesModel,accYears,storage_techs,commodity)
9024      $storage_level_out(timeModelToCalc,accNodesModel,accYears,storage_techs,commodity)
9025      = round(storage_level_out(timeModelToCalc,accNodesModel,accYears,storage_techs,commodity), 6);
9026   
9027  marginals_balance(timeModelToCalc,nodesModelToCalc,yearsToCalc,commodity)
9028      $marginals_balance(timeModelToCalc,nodesModelToCalc,yearsToCalc,commodity)
9029      = round(marginals_balance(timeModelToCalc,nodesModelToCalc,yearsToCalc,commodity), 6);
9030   
9031  marginals_sourcesink_profile(timeModelToCalc,nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity)
9032      $marginals_sourcesink_profile(timeModelToCalc,nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity)
9033      = round(marginals_sourcesink_profile(timeModelToCalc,nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity), 6);
9035   
INCLUDE    C:\Local\REMix\framework\remix\framework\model\source\postcalc\writegdx.gms
9038  * SPDX-FileCopyrightText: Copyright (c) 2023 German Aerospace Center (DLR)
9039  * SPDX-License-Identifier: BSD-3-Clause
9040   
9043   
9044  execute_unload "C:\Local\REMix\remix_nz\output\med_pop_out_base_2020-2030-2040-2050\result\med_pop_out_base_2020-2030-2040-2050.gdx"
9045      metadata
9046      timeModel
9047      timeModelToCalc
9048      nodesModel
9049      linksModel
9050      indicator
9051      commodity
9052      techs
9053      accNodesModel
9054      accYears
9055   
9056      map_nodesModel
9057      map_linksModel
9058      map_nodesAccounting
9059   
9060      indicator_accounting
9061      indicator_accounting_ref
9062      indicator_accounting_comp
9063      indicator_accounting_detailed
9064      indicator_accounting_links
9065   
9066      converter_caps
9067      converter_units
9069   
9070      transfer_caps
9071      transfer_links
9072      transfer_flows
9073      transfer_flows_annual
9074      transfer_losses
9075      transfer_losses_annual
9076   
9077      storage_caps
9078      storage_units
9079      storage_flows
9080      storage_level_out
9081      storage_flows_annual
9082      storage_losses_out
9083      storage_losses_annual
9085   
9086      commodity_balance
9087      commodity_balance_annual
9088   
9089      marginals_balance
9090      marginals_sourcesink_profile
9091      marginals_sourcesink_sum
9092      marginals_indicator_bounds
9093   
9095      ;
GAMS 40.4.0  d540b52e Oct 3, 2022           WEX-WEI x86 64bit/MS Windows - 10/02/23 08:18:23 Page 2
G e n e r a l   A l g e b r a i c   M o d e l i n g   S y s t e m
Include File Summary


   SEQ   GLOBAL TYPE      PARENT   LOCAL  FILENAME

     1        1 INPUT          0       0  C:\Local\REMix\framework\remix\framework\model\run_remix.gms
     2       12 IF DEXIST      1      12  C:\Local\REMix\remix_nz\output\med_pop_out_base_2020-2030-2040-2050\data\
     3       15 INCLUDE        1      15  .C:\Local\REMix\framework\remix\framework\model\source\metadata.gms
     4       23 CALL           3       8  .printf "remix_version \"0.9.2\"\n" > c:\Local\REMix\remix_nz\process\225a\\metadata
     5       24 CALL           3       9  .printf "gams_version \"40.4.0\"\n" >> c:\Local\REMix\remix_nz\process\225a\\metadata
     6       25 CALL           3      10  .printf "timestamp \"10/02/23 08:18:23\"\n" >> c:\Local\REMix\remix_nz\process\225a\\metadata
     7       27 CALL           3      12  .printf "framework_path " >> c:\Local\REMix\remix_nz\process\225a\\metadata
     8       29 CALL           3      14  .cd C:\Local\REMix\framework\remix\framework\model\source && cd| sed "s/^/\"/;s/$/\"/" >> c:\Local\REMix\remix_nz\process\225a\\metadata
     9       31 CALL           3      18  .printf "\n" >> c:\Local\REMix\remix_nz\process\225a\\metadata
    10       32 CALL           3      19  .printf "framework_hash " >> c:\Local\REMix\remix_nz\process\225a\\metadata
    11       34 CALL           3      21  .cd C:\Local\REMix\framework\remix\framework\model\source && git rev-parse HEAD >nul 2>&1 && git rev-parse HEAD >> c:\Local\REMix\remix_nz\process\225a\\metadata
    12       36 CALL           3      25  .printf "\n" >> c:\Local\REMix\remix_nz\process\225a\\metadata
    13       37 CALL           3      26  .printf "framework_branch " >> c:\Local\REMix\remix_nz\process\225a\\metadata
    14       39 CALL           3      28  .cd C:\Local\REMix\framework\remix\framework\model\source && git rev-parse --abbrev-ref HEAD >nul 2>&1 && git rev-parse --abbrev-ref HEAD | sed "s/^/\"/;s/$/\"/" >> c:\Local\REMix\remix_nz\process\225a\\metadata
    15       41 CALL           3      32  .printf "\n" >> c:\Local\REMix\remix_nz\process\225a\\metadata
    16       43 CALL           3      34  .printf "project_path " >> c:\Local\REMix\remix_nz\process\225a\\metadata
    17       45 CALL           3      36  .cd C:\Local\REMix\remix_nz\output\med_pop_out_base_2020-2030-2040-2050\data\./ && cd| sed "s/^/\"/;s/$/\"/" >> c:\Local\REMix\remix_nz\process\225a\\metadata
    18       47 CALL           3      40  .printf "\n" >> c:\Local\REMix\remix_nz\process\225a\\metadata
    19       48 CALL           3      41  .printf "project_hash " >> c:\Local\REMix\remix_nz\process\225a\\metadata
    20       50 CALL           3      43  .cd C:\Local\REMix\remix_nz\output\med_pop_out_base_2020-2030-2040-2050\data\./ && git rev-parse HEAD >nul 2>&1 && git rev-parse HEAD | sed "s/^/\"/;s/$/\"/" >> c:\Local\REMix\remix_nz\process\225a\\metadata
    21       52 CALL           3      47  .printf "\n" >> c:\Local\REMix\remix_nz\process\225a\\metadata
    22       53 CALL           3      48  .printf "project_branch " >> c:\Local\REMix\remix_nz\process\225a\\metadata
    23       55 CALL           3      50  .cd C:\Local\REMix\remix_nz\output\med_pop_out_base_2020-2030-2040-2050\data\./ && git rev-parse --abbrev-ref HEAD >nul 2>&1 && git rev-parse --abbrev-ref HEAD | sed "s/^/\"/;s/$/\"/" >> c:\Local\REMix\remix_nz\process\225a\\metadata
    24       57 CALL           3      54  .printf "\n" >> c:\Local\REMix\remix_nz\process\225a\\metadata
    25       60 INCLUDE        3      57  ..c:\Local\REMix\remix_nz\process\225a\metadata
    26       77 INCLUDE        1      16  .C:\Local\REMix\framework\remix\framework\model\source\data_inheritance.gms
    27      119 INCLUDE        1      25  .C:\Local\REMix\framework\remix\framework\model\source\remix.gms
    28      140 INCLUDE       27      21  ..C:\Local\REMix\framework\remix\framework\model\source\sets.gms
    29      160 IF EXIST      28      20  ..c:\Local\REMix\remix_nz\process\225a\map_aggregatetimemodel.csv
    30      211 IF EXIST      28      97  ..c:\Local\REMix\remix_nz\process\225a\set_nodesmodel.csv
    31      211 INCLUDE       28      97  ...c:\Local\REMix\remix_nz\process\225a\set_nodesmodel.csv
    32      224 IF EXIST      28      99  ..c:\Local\REMix\remix_nz\process\225a\set_nodesmodel.csv
    33      231 IF EXIST      28     106  ..c:\Local\REMix\remix_nz\process\225a\set_nodesdata.csv
    34      231 INCLUDE       28     106  ...c:\Local\REMix\remix_nz\process\225a\set_nodesdata.csv
    35      244 IF EXIST      28     108  ..c:\Local\REMix\remix_nz\process\225a\set_nodesdata.csv
    36      250 IF EXIST      28     114  ..c:\Local\REMix\remix_nz\process\225a\set_nodesmodelsel.csv
    37      250 INCLUDE       28     114  ...c:\Local\REMix\remix_nz\process\225a\set_nodesmodelsel.csv
    38      263 IF EXIST      28     116  ..c:\Local\REMix\remix_nz\process\225a\set_nodesmodelsel.csv
    39      265 IF EXIST      28     118  ..c:\Local\REMix\remix_nz\process\225a\set_nodesmodelsel.csv
    40      278 IF EXIST      28     131  ..c:\Local\REMix\remix_nz\process\225a\map_aggregatenodesmodel.csv
    41      278 INCLUDE       28     131  ...c:\Local\REMix\remix_nz\process\225a\map_aggregatenodesmodel.csv
    42      291 IF EXIST      28     133  ..c:\Local\REMix\remix_nz\process\225a\map_aggregatenodesmodel.csv
    43      294 IF EXIST      28     136  ..c:\Local\REMix\remix_nz\process\225a\map_aggregatenodesmodel.csv
    44      317 IF EXIST      28     159  ..c:\Local\REMix\remix_nz\process\225a\set_years.csv
    45      317 INCLUDE       28     159  ...c:\Local\REMix\remix_nz\process\225a\set_years.csv
    46      327 IF EXIST      28     161  ..c:\Local\REMix\remix_nz\process\225a\set_years.csv
    47      336 IF EXIST      28     170  ..c:\Local\REMix\remix_nz\process\225a\set_years.csv
    48      336 INCLUDE       28     170  ...c:\Local\REMix\remix_nz\process\225a\set_years.csv
    49      346 IF EXIST      28     172  ..c:\Local\REMix\remix_nz\process\225a\set_years.csv
    50      352 IF EXIST      28     178  ..c:\Local\REMix\remix_nz\process\225a\set_yearssel.csv
    51      352 INCLUDE       28     178  ...c:\Local\REMix\remix_nz\process\225a\set_yearssel.csv
    52      359 IF EXIST      28     180  ..c:\Local\REMix\remix_nz\process\225a\set_yearssel.csv
    53      377 IF EXIST      28     198  ..c:\Local\REMix\remix_nz\process\225a\set_activities.csv
    54      377 INCLUDE       28     198  ...c:\Local\REMix\remix_nz\process\225a\set_activities.csv
    55      386 IF EXIST      28     200  ..c:\Local\REMix\remix_nz\process\225a\set_activities.csv
    56      394 IF EXIST      28     208  ..c:\Local\REMix\remix_nz\process\225a\set_gridsegments.csv
    57      396 IF EXIST      28     210  ..c:\Local\REMix\remix_nz\process\225a\set_gridsegments.csv
    58      404 IF EXIST      28     218  ..c:\Local\REMix\remix_nz\process\225a\set_linksdata.csv
    59      404 INCLUDE       28     218  ...c:\Local\REMix\remix_nz\process\225a\set_linksdata.csv
    60      418 IF EXIST      28     220  ..c:\Local\REMix\remix_nz\process\225a\set_linksdata.csv
    61      436 IF EXIST      28     238  ..c:\Local\REMix\remix_nz\process\225a\set_link_types.csv
    62      436 INCLUDE       28     238  ...c:\Local\REMix\remix_nz\process\225a\set_link_types.csv
    63      440 IF EXIST      28     240  ..c:\Local\REMix\remix_nz\process\225a\set_link_types.csv
    64      449 IF EXIST      28     249  ..c:\Local\REMix\remix_nz\process\225a\set_commodities.csv
    65      449 INCLUDE       28     249  ...c:\Local\REMix\remix_nz\process\225a\set_commodities.csv
    66      459 IF EXIST      28     251  ..c:\Local\REMix\remix_nz\process\225a\set_commodities.csv
    67      468 IF EXIST      28     260  ..c:\Local\REMix\remix_nz\process\225a\set_indicators.csv
    68      468 INCLUDE       28     260  ...c:\Local\REMix\remix_nz\process\225a\set_indicators.csv
    69      477 IF EXIST      28     262  ..c:\Local\REMix\remix_nz\process\225a\set_indicators.csv
    70      486 IF EXIST      28     271  ..c:\Local\REMix\remix_nz\process\225a\set_converter_techs.csv
    71      486 INCLUDE       28     271  ...c:\Local\REMix\remix_nz\process\225a\set_converter_techs.csv
    72      504 IF EXIST      28     274  ..c:\Local\REMix\remix_nz\process\225a\set_storage_techs.csv
    73      504 INCLUDE       28     274  ...c:\Local\REMix\remix_nz\process\225a\set_storage_techs.csv
    74      508 IF EXIST      28     277  ..c:\Local\REMix\remix_nz\process\225a\set_transfer_techs.csv
    75      508 INCLUDE       28     277  ...c:\Local\REMix\remix_nz\process\225a\set_transfer_techs.csv
    76      512 IF EXIST      28     280  ..c:\Local\REMix\remix_nz\process\225a\set_sourcesink_techs.csv
    77      512 INCLUDE       28     280  ...c:\Local\REMix\remix_nz\process\225a\set_sourcesink_techs.csv
    78      519 IF EXIST      28     285  ..c:\Local\REMix\remix_nz\process\225a\set_converter_techs.csv
    79      519 INCLUDE       28     285  ...c:\Local\REMix\remix_nz\process\225a\set_converter_techs.csv
    80      535 IF EXIST      28     286  ..c:\Local\REMix\remix_nz\process\225a\set_converter_techs.csv
    81      539 IF EXIST      28     290  ..c:\Local\REMix\remix_nz\process\225a\set_storage_techs.csv
    82      539 INCLUDE       28     290  ...c:\Local\REMix\remix_nz\process\225a\set_storage_techs.csv
    83      541 IF EXIST      28     291  ..c:\Local\REMix\remix_nz\process\225a\set_storage_techs.csv
    84      546 IF EXIST      28     296  ..c:\Local\REMix\remix_nz\process\225a\set_transfer_techs.csv
    85      546 INCLUDE       28     296  ...c:\Local\REMix\remix_nz\process\225a\set_transfer_techs.csv
    86      548 IF EXIST      28     297  ..c:\Local\REMix\remix_nz\process\225a\set_transfer_techs.csv
    87      552 IF EXIST      28     301  ..c:\Local\REMix\remix_nz\process\225a\set_sourcesink_techs.csv
    88      552 INCLUDE       28     301  ...c:\Local\REMix\remix_nz\process\225a\set_sourcesink_techs.csv
    89      555 IF EXIST      28     302  ..c:\Local\REMix\remix_nz\process\225a\set_sourcesink_techs.csv
    90      565 IF EXIST      28     312  ..c:\Local\REMix\remix_nz\process\225a\set_degradation_states.csv
    91      567 IF EXIST      28     314  ..c:\Local\REMix\remix_nz\process\225a\set_degradation_states.csv
    92      576 IF EXIST      28     323  ..c:\Local\REMix\remix_nz\process\225a\set_soc.csv
    93      578 IF EXIST      28     325  ..c:\Local\REMix\remix_nz\process\225a\set_soc.csv
    94      594 IF EXIST      28     341  ..c:\Local\REMix\remix_nz\process\225a\transfer_linkstartend.csv
    95      594 INCLUDE       28     341  ...c:\Local\REMix\remix_nz\process\225a\transfer_linkstartend.csv
    96      621 IF EXIST      28     343  ..c:\Local\REMix\remix_nz\process\225a\transfer_linkstartend.csv
    97      635 BATINCLUDE    28     357  ...C:\Local\REMix\framework\remix\framework\model\source\battools\aggregateNodes.gms
    98      744 IF EXIST      28     464  ..c:\Local\REMix\remix_nz\process\225a\set_accnodes.csv
    99      746 IF EXIST      28     466  ..c:\Local\REMix\remix_nz\process\225a\set_accnodes.csv
   100      811 IF EXIST      28     531  ..c:\Local\REMix\remix_nz\process\225a\map_accnodes.csv
   101      813 IF EXIST      28     533  ..c:\Local\REMix\remix_nz\process\225a\map_accnodes.csv
   102      867 INCLUDE       27      22  ..C:\Local\REMix\framework\remix\framework\model\source\accounting\input.gms
   103      899 IF EXIST     102      32  ..c:\Local\REMix\remix_nz\process\225a\accounting_converterunits.csv
   104      899 INCLUDE      102      32  ...c:\Local\REMix\remix_nz\process\225a\accounting_converterunits.csv
   105      996 IF EXIST     102      34  ..c:\Local\REMix\remix_nz\process\225a\accounting_converterunits.csv
   106     1010 IF EXIST     102      48  ..c:\Local\REMix\remix_nz\process\225a\accounting_converteractivity.csv
   107     1010 INCLUDE      102      48  ...c:\Local\REMix\remix_nz\process\225a\accounting_converteractivity.csv
   108     1017 IF EXIST     102      50  ..c:\Local\REMix\remix_nz\process\225a\accounting_converteractivity.csv
   109     1034 IF EXIST     102      67  ..c:\Local\REMix\remix_nz\process\225a\accounting_converterstartup.csv
   110     1036 IF EXIST     102      69  ..c:\Local\REMix\remix_nz\process\225a\accounting_converterstartup.csv
   111     1055 IF EXIST     102      88  ..c:\Local\REMix\remix_nz\process\225a\accounting_storageunits.csv
   112     1055 INCLUDE      102      88  ...c:\Local\REMix\remix_nz\process\225a\accounting_storageunits.csv
   113     1066 IF EXIST     102      90  ..c:\Local\REMix\remix_nz\process\225a\accounting_storageunits.csv
   114     1088 IF EXIST     102     112  ..c:\Local\REMix\remix_nz\process\225a\accounting_transferlinks.csv
   115     1088 INCLUDE      102     112  ...c:\Local\REMix\remix_nz\process\225a\accounting_transferlinks.csv
   116     1101 IF EXIST     102     114  ..c:\Local\REMix\remix_nz\process\225a\accounting_transferlinks.csv
   117     1123 IF EXIST     102     136  ..c:\Local\REMix\remix_nz\process\225a\accounting_transferperlength.csv
   118     1123 INCLUDE      102     136  ...c:\Local\REMix\remix_nz\process\225a\accounting_transferperlength.csv
   119     1146 IF EXIST     102     138  ..c:\Local\REMix\remix_nz\process\225a\accounting_transferperlength.csv
   120     1161 IF EXIST     102     153  ..c:\Local\REMix\remix_nz\process\225a\accounting_sourcesinkflow.csv
   121     1161 INCLUDE      102     153  ...c:\Local\REMix\remix_nz\process\225a\accounting_sourcesinkflow.csv
   122     1171 IF EXIST     102     155  ..c:\Local\REMix\remix_nz\process\225a\accounting_sourcesinkflow.csv
   123     1185 IF EXIST     102     169  ..c:\Local\REMix\remix_nz\process\225a\accounting_perindicator.csv
   124     1185 INCLUDE      102     169  ...c:\Local\REMix\remix_nz\process\225a\accounting_perindicator.csv
   125     1193 IF EXIST     102     171  ..c:\Local\REMix\remix_nz\process\225a\accounting_perindicator.csv
   126     1219 IF EXIST     102     197  ..c:\Local\REMix\remix_nz\process\225a\accounting_indicatorbounds.csv
   127     1219 INCLUDE      102     197  ...c:\Local\REMix\remix_nz\process\225a\accounting_indicatorbounds.csv
   128     1223 IF EXIST     102     199  ..c:\Local\REMix\remix_nz\process\225a\accounting_indicatorbounds.csv
   129     1242 IF EXIST     102     218  ..c:\Local\REMix\remix_nz\process\225a\accounting_indicatorbounds_links.csv
   130     1244 IF EXIST     102     220  ..c:\Local\REMix\remix_nz\process\225a\accounting_indicatorbounds_links.csv
   131     1250 BATINCLUDE   102     226  ...C:\Local\REMix\framework\remix\framework\model\source\battools\aggregateAccountingMean.gms
   132     1309 BATINCLUDE   102     227  ...C:\Local\REMix\framework\remix\framework\model\source\battools\aggregateAccountingMean.gms
   133     1352 BATINCLUDE   102     228  ...C:\Local\REMix\framework\remix\framework\model\source\battools\aggregateAccountingMean.gms
   134     1395 BATINCLUDE   102     229  ...C:\Local\REMix\framework\remix\framework\model\source\battools\aggregateAccountingMean.gms
   135     1454 BATINCLUDE   102     230  ...C:\Local\REMix\framework\remix\framework\model\source\battools\aggregateAccountingMean.gms
   136     1513 BATINCLUDE   102     231  ...C:\Local\REMix\framework\remix\framework\model\source\battools\aggregateAccountingMean.gms
   137     1572 BATINCLUDE   102     232  ...C:\Local\REMix\framework\remix\framework\model\source\battools\aggregateAccountingMean.gms
   138     1981 INCLUDE       27      23  ..C:\Local\REMix\framework\remix\framework\model\source\accounting\annuities.gms
   139     2053 INCLUDE       27      25  ..C:\Local\REMix\framework\remix\framework\model\source\methods\mga_pre.gms
   140     2059 INCLUDE       27      26  ..C:\Local\REMix\framework\remix\framework\model\source\methods\pareto_pre.gms
   141     2065 INCLUDE       27      27  ..C:\Local\REMix\framework\remix\framework\model\source\postcalc\declaration.gms
   142     2082 IF DEXIST    141      17  ..C:\Local\REMix\remix_nz\output\med_pop_out_base_2020-2030-2040-2050\result\
   143     2283 INCLUDE       27      28  ..C:\Local\REMix\framework\remix\framework\model\source\loadgdx.gms
   144     2292 INCLUDE       27      30  ..C:\Local\REMix\framework\remix\framework\model\source\core\converter.gms
   145     2395 IF EXIST     144     103  ..c:\Local\REMix\remix_nz\process\225a\converter_capacityparam.csv
   146     2395 INCLUDE      144     103  ...c:\Local\REMix\remix_nz\process\225a\converter_capacityparam.csv
   147     3553 IF EXIST     144     105  ..c:\Local\REMix\remix_nz\process\225a\converter_capacityparam.csv
   148     3561 BATINCLUDE   144     113  ...C:\Local\REMix\framework\remix\framework\model\source\battools\aggregateNodes.gms
   149     3572 BATINCLUDE   144     114  ...C:\Local\REMix\framework\remix\framework\model\source\battools\aggregateNodes.gms
   150     3605 IF EXIST     144     137  ..c:\Local\REMix\remix_nz\process\225a\converter_techparam.csv
   151     3605 INCLUDE      144     137  ...c:\Local\REMix\remix_nz\process\225a\converter_techparam.csv
   152     3655 IF EXIST     144     139  ..c:\Local\REMix\remix_nz\process\225a\converter_techparam.csv
   153     3677 IF EXIST     144     161  ..c:\Local\REMix\remix_nz\process\225a\converter_activityprofile.csv
   154     3677 INCLUDE      144     161  ...c:\Local\REMix\remix_nz\process\225a\converter_activityprofile.csv
   155     3745 IF EXIST     144     162  ..c:\Local\REMix\remix_nz\process\225a\converter_activityprofile.csv
   156     3747 IF EXIST     144     164  ..c:\Local\REMix\remix_nz\process\225a\converter_activityprofile.csv
   157     3767 IF EXIST     144     184  ..c:\Local\REMix\remix_nz\process\225a\converter_coefficient.csv
   158     3767 INCLUDE      144     184  ...c:\Local\REMix\remix_nz\process\225a\converter_coefficient.csv
   159     3941 IF EXIST     144     185  ..c:\Local\REMix\remix_nz\process\225a\converter_coefficient.csv
   160     3942 IF EXIST     144     186  ..c:\Local\REMix\remix_nz\process\225a\converter_coefficient.csv
   161     3944 IF EXIST     144     188  ..c:\Local\REMix\remix_nz\process\225a\converter_coefficient.csv
   162     3956 IF EXIST     144     200  ..c:\Local\REMix\remix_nz\process\225a\converter_coefficientprofile.csv
   163     3957 IF EXIST     144     201  ..c:\Local\REMix\remix_nz\process\225a\converter_coefficientprofile.csv
   164     3959 IF EXIST     144     203  ..c:\Local\REMix\remix_nz\process\225a\converter_coefficientprofile.csv
   165     4892 INCLUDE       27      31  ..C:\Local\REMix\framework\remix\framework\model\source\core\storage.gms
   166     4983 IF EXIST     165      91  ..c:\Local\REMix\remix_nz\process\225a\storage_reservoirparam.csv
   167     4983 INCLUDE      165      91  ...c:\Local\REMix\remix_nz\process\225a\storage_reservoirparam.csv
   168     5063 IF EXIST     165      93  ..c:\Local\REMix\remix_nz\process\225a\storage_reservoirparam.csv
   169     5067 BATINCLUDE   165      97  ...C:\Local\REMix\framework\remix\framework\model\source\battools\aggregateNodes.gms
   170     5078 BATINCLUDE   165      98  ...C:\Local\REMix\framework\remix\framework\model\source\battools\aggregateNodes.gms
   171     5114 IF EXIST     165     124  ..c:\Local\REMix\remix_nz\process\225a\storage_techparam.csv
   172     5114 INCLUDE      165     124  ...c:\Local\REMix\remix_nz\process\225a\storage_techparam.csv
   173     5121 IF EXIST     165     126  ..c:\Local\REMix\remix_nz\process\225a\storage_techparam.csv
   174     5142 IF EXIST     165     147  ..c:\Local\REMix\remix_nz\process\225a\storage_sizeparam.csv
   175     5142 INCLUDE      165     147  ...c:\Local\REMix\remix_nz\process\225a\storage_sizeparam.csv
   176     5149 IF EXIST     165     149  ..c:\Local\REMix\remix_nz\process\225a\storage_sizeparam.csv
   177     5166 IF EXIST     165     166  ..c:\Local\REMix\remix_nz\process\225a\storage_socparam.csv
   178     5168 IF EXIST     165     168  ..c:\Local\REMix\remix_nz\process\225a\storage_socparam.csv
   179     5187 IF EXIST     165     187  ..c:\Local\REMix\remix_nz\process\225a\storage_degradationparam.csv
   180     5189 IF EXIST     165     189  ..c:\Local\REMix\remix_nz\process\225a\storage_degradationparam.csv
   181     5218 IF EXIST     165     218  ..c:\Local\REMix\remix_nz\process\225a\storage_levelprofile.csv
   182     5219 IF EXIST     165     219  ..c:\Local\REMix\remix_nz\process\225a\storage_levelprofile.csv
   183     5221 IF EXIST     165     221  ..c:\Local\REMix\remix_nz\process\225a\storage_levelprofile.csv
   184     6041 INCLUDE       27      32  ..C:\Local\REMix\framework\remix\framework\model\source\core\transfer.gms
   185     6108 IF EXIST     184      73  ..c:\Local\REMix\remix_nz\process\225a\transfer_linksparam.csv
   186     6108 INCLUDE      184      73  ...c:\Local\REMix\remix_nz\process\225a\transfer_linksparam.csv
   187     6171 IF EXIST     184      75  ..c:\Local\REMix\remix_nz\process\225a\transfer_linksparam.csv
   188     6187 IF EXIST     184      91  ..c:\Local\REMix\remix_nz\process\225a\transfer_flowprofile.csv
   189     6189 IF EXIST     184      93  ..c:\Local\REMix\remix_nz\process\225a\transfer_flowprofile.csv
   190     6209 IF EXIST     184     113  ..c:\Local\REMix\remix_nz\process\225a\transfer_techparam.csv
   191     6209 INCLUDE      184     113  ...c:\Local\REMix\remix_nz\process\225a\transfer_techparam.csv
   192     6217 IF EXIST     184     115  ..c:\Local\REMix\remix_nz\process\225a\transfer_techparam.csv
   193     6231 IF EXIST     184     129  ..c:\Local\REMix\remix_nz\process\225a\transfer_coefficient.csv
   194     6231 INCLUDE      184     129  ...c:\Local\REMix\remix_nz\process\225a\transfer_coefficient.csv
   195     6239 IF EXIST     184     131  ..c:\Local\REMix\remix_nz\process\225a\transfer_coefficient.csv
   196     6253 IF EXIST     184     145  ..c:\Local\REMix\remix_nz\process\225a\transfer_coefperflow.csv
   197     6253 INCLUDE      184     145  ...c:\Local\REMix\remix_nz\process\225a\transfer_coefperflow.csv
   198     6261 IF EXIST     184     147  ..c:\Local\REMix\remix_nz\process\225a\transfer_coefperflow.csv
   199     6275 IF EXIST     184     161  ..c:\Local\REMix\remix_nz\process\225a\transfer_coefperlength.csv
   200     6275 INCLUDE      184     161  ...c:\Local\REMix\remix_nz\process\225a\transfer_coefperlength.csv
   201     6288 IF EXIST     184     163  ..c:\Local\REMix\remix_nz\process\225a\transfer_coefperlength.csv
   202     6302 IF EXIST     184     177  ..c:\Local\REMix\remix_nz\process\225a\transfer_reactperlength.csv
   203     6304 IF EXIST     184     179  ..c:\Local\REMix\remix_nz\process\225a\transfer_reactperlength.csv
   204     6318 IF EXIST     184     193  ..c:\Local\REMix\remix_nz\process\225a\transfer_lengthparam.csv
   205     6318 INCLUDE      184     193  ...c:\Local\REMix\remix_nz\process\225a\transfer_lengthparam.csv
   206     6345 IF EXIST     184     195  ..c:\Local\REMix\remix_nz\process\225a\transfer_lengthparam.csv
   207     6359 IF EXIST     184     209  ..c:\Local\REMix\remix_nz\process\225a\transfer_gridsegments.csv
   208     6361 IF EXIST     184     211  ..c:\Local\REMix\remix_nz\process\225a\transfer_gridsegments.csv
   209     6943 INCLUDE       27      33  ..C:\Local\REMix\framework\remix\framework\model\source\core\sourcesink.gms
   210     6981 IF EXIST     209      38  ..c:\Local\REMix\remix_nz\process\225a\sourcesink_config.csv
   211     6981 INCLUDE      209      38  ...c:\Local\REMix\remix_nz\process\225a\sourcesink_config.csv
   212     7072 IF EXIST     209      40  ..c:\Local\REMix\remix_nz\process\225a\sourcesink_config.csv
   213     7076 BATINCLUDE   209      44  ...C:\Local\REMix\framework\remix\framework\model\source\battools\aggregateNodes.gms
   214     7104 IF EXIST     209      62  ..c:\Local\REMix\remix_nz\process\225a\sourcesink_profile.csv
   215     7104 INCLUDE      209      62  ...c:\Local\REMix\remix_nz\process\225a\sourcesink_profile.csv
   216     7150 IF EXIST     209      63  ..c:\Local\REMix\remix_nz\process\225a\sourcesink_profile.csv
   217     7151 IF EXIST     209      64  ..c:\Local\REMix\remix_nz\process\225a\sourcesink_profile.csv
   218     7153 IF EXIST     209      66  ..c:\Local\REMix\remix_nz\process\225a\sourcesink_profile.csv
   219     7173 IF EXIST     209      86  ..c:\Local\REMix\remix_nz\process\225a\sourcesink_annualsum.csv
   220     7173 INCLUDE      209      86  ...c:\Local\REMix\remix_nz\process\225a\sourcesink_annualsum.csv
   221     7220 IF EXIST     209      88  ..c:\Local\REMix\remix_nz\process\225a\sourcesink_annualsum.csv
   222     7223 BATINCLUDE   209      91  ...C:\Local\REMix\framework\remix\framework\model\source\battools\aggregateNodes.gms
   223     7403 INCLUDE       27      34  ..C:\Local\REMix\framework\remix\framework\model\source\core\balance.gms
   224     7539 INCLUDE       27      36  ..C:\Local\REMix\framework\remix\framework\model\source\accounting\equations.gms
   225     7961 INCLUDE       27      37  ..C:\Local\REMix\framework\remix\framework\model\source\optiframe.gms
   226     8002 INCLUDE       27      71  ..C:\Local\REMix\framework\remix\framework\model\source\methods\checkanno.gms
   227     8013 INCLUDE       27      74  ..C:\Local\REMix\framework\remix\framework\model\source\methods\pips.gms
   228     8022 INCLUDE       27      77  ..C:\Local\REMix\framework\remix\framework\model\source\methods\solve.gms
   229     8228 INCLUDE       27      80  ..C:\Local\REMix\framework\remix\framework\model\source\methods\pareto.gms
   230     8237 INCLUDE       27      83  ..C:\Local\REMix\framework\remix\framework\model\source\methods\mga.gms
   231     8246 INCLUDE       27      86  ..C:\Local\REMix\framework\remix\framework\model\source\methods\iternodes.gms
   232     8255 INCLUDE       27      89  ..C:\Local\REMix\framework\remix\framework\model\source\postcalc\definition.gms
   233     9037 INCLUDE       27      90  ..C:\Local\REMix\framework\remix\framework\model\source\postcalc\writegdx.gms


COMPILATION TIME     =        7.766 SECONDS     33 MB  40.4.0 d540b52e WEX-WEI
GAMS 40.4.0  d540b52e Oct 3, 2022           WEX-WEI x86 64bit/MS Windows - 10/02/23 08:18:23 Page 3
G e n e r a l   A l g e b r a i c   M o d e l i n g   S y s t e m
Range Statistics    SOLVE remix Using MIP From line 8213


RANGE STATISTICS (ABSOLUTE NON-ZERO FINITE VALUES)

RHS       [min, max] : [ 6.400E-02, 1.165E+03] - Zero values observed as well
Bound     [min, max] : [        NA,        NA] - Zero values observed as well
Matrix    [min, max] : [ 6.000E-03, 7.975E+02]

GAMS 40.4.0  d540b52e Oct 3, 2022           WEX-WEI x86 64bit/MS Windows - 10/02/23 08:18:23 Page 4
G e n e r a l   A l g e b r a i c   M o d e l i n g   S y s t e m
Model Statistics    SOLVE remix Using MIP From line 8213


LOOPS                           optiframeToCalc   of1


MODEL STATISTICS

BLOCKS OF EQUATIONS          75     SINGLE EQUATIONS   37,557,288
BLOCKS OF VARIABLES          38     SINGLE VARIABLES   35,439,297
NON ZERO ELEMENTS   106,027,015


GENERATION TIME      =      198.765 SECONDS 19,806 MB  40.4.0 d540b52e WEX-WEI


EXECUTION TIME       =      243.046 SECONDS 19,806 MB  40.4.0 d540b52e WEX-WEI
               L O O P S         optiframeToCalc of1

GAMS 40.4.0  d540b52e Oct 3, 2022           WEX-WEI x86 64bit/MS Windows - 10/02/23 08:18:23 Page 5
G e n e r a l   A l g e b r a i c   M o d e l i n g   S y s t e m
Solution Report     SOLVE remix Using MIP From line 8213


               S O L V E      S U M M A R Y

     MODEL   remix               OBJECTIVE  accounting_objective
     TYPE    MIP                 DIRECTION  MINIMIZE
     SOLVER  CPLEX               FROM LINE  8213

**** SOLVER STATUS     1 Normal Completion
**** MODEL STATUS      1 Optimal
**** OBJECTIVE VALUE             2910.9975

 RESOURCE USAGE, LIMIT      38664.937    604800.000
 ITERATION COUNT, LIMIT       147    2147483647
--- GAMS/Cplex Link licensed for continuous and discrete problems.

Reading parameter(s) from "c:\Local\REMix\remix_nz\process\cplex.opt"
>>  rerun no
>>  lpmethod 4
>>  barorder 0
>>  preind 1
>>  scaind 0
>>  predual -1
>>  baralg 0
>>  barstartalg 1
>>  barepcomp 1e-6
>>  solutiontype 2
>>  startalg 4
>>  epgap 1e-3
>>  quality 1
>>  barcolnz 0
>>  threads 4
>>  parallelmode 1
Finished reading from "c:\Local\REMix\remix_nz\process\cplex.opt"

--- GMO setup time: 0.00s
--- Space for names approximately 4801.58 Mb
--- Use option 'names no' to turn use of names off
--- GMO memory 13199.72 Mb (peak 13470.10 Mb)
--- Dictionary memory 0.00 Mb
--- Cplex 22.1.0.0 link memory 1105.76 Mb (peak 7832.49 Mb)
--- Starting Cplex


--- LP status (1): optimal.
--- Cplex Time: 38593.59sec (det. 25471364.43 ticks)


Optimal solution found
Objective:         2910.997459

Solution Quality Statistics:
                                   unscaled                scaled
                               max         sum         max         sum
primal infeasibility        3.710e-04   3.839e-01   3.710e-04   3.715e-01
dual infeasibility          2.291e-09   4.722e-09   2.291e-09   4.722e-09
primal residual             1.096e-13   7.107e-11   1.096e-13   7.107e-11
dual residual               1.117e-10   4.869e-09   1.117e-10   4.869e-09
primal solution vector      2.911e+03   1.605e+06   2.911e+03   1.605e+06
dual solution vector        7.975e+02   4.989e+05   7.975e+02   4.989e+05
slacks                      1.164e+03   8.027e+05   1.164e+03   8.027e+05
reduced costs               7.975e+02   1.544e+06   7.975e+02   1.544e+06
comp. slackness viol.       2.308e-06   1.279e-02




**** REPORT SUMMARY :        0     NONOPT
                             0 INFEASIBLE
                             0  UNBOUNDED
GAMS 40.4.0  d540b52e Oct 3, 2022           WEX-WEI x86 64bit/MS Windows - 10/02/23 08:18:23 Page 6
G e n e r a l   A l g e b r a i c   M o d e l i n g   S y s t e m
E x e c u t i o n


**** REPORT FILE SUMMARY

opt c:\Local\REMix\remix_nz\process\cplex.opt


EXECUTION TIME       =      185.094 SECONDS 13,849 MB  40.4.0 d540b52e WEX-WEI


USER: Medium MUD - 10 User License                   S220920|0002AO-GEN
      University of Canterbury, Civil Engineering Department    DC16319
      License for teaching and research at degree granting institutions


**** FILE SUMMARY

Input      C:\Local\REMix\framework\remix\framework\model\run_remix.gms
Output     c:\Local\REMix\remix_nz\process\run_remix.lst
