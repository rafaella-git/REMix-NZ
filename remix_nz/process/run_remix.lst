GAMS 44.4.0  06604687 Sep 19, 2023          WEX-WEI x86 64bit/MS Windows - 05/01/24 22:33:59 Page 1
G e n e r a l   A l g e b r a i c   M o d e l i n g   S y s t e m
C o m p i l a t i o n


   1  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
   2  * SPDX-License-Identifier: BSD-3-Clause
   3   
   4  * ==== REMix version number ====
   6   
   7  * ==== global settings ====
  12   
  14   
  15  * ==== write metadata and inherit dataset ====
INCLUDE    C:\Local\REMix\framework\remix\framework\model\source\metadata.gms
  24   
  28   
  44   
  60   
  61  set metadata(*) /
INCLUDE    C:\Local\REMix\remix_nz\process\225a\metadata
  63  remix_version "0.9.7"
  64  gams_version "44.4.0"
  65  timestamp "05/01/24 22:33:59"
  66  framework_path "C:\Local\REMix\framework\remix\framework\model\source"
  67   
  68  framework_hash b39b241fc9508bd178dc0f8682601fffb490cda2
  69   
  70  framework_branch "main"
  71   
  72  project_path "C:\Local\REMix\remix_nz\output\will\04-h2-solar_2020-2035-2050\data"
  73   
  74  project_hash "b39b241fc9508bd178dc0f8682601fffb490cda2"
  75   
  76  project_branch "main"
  77   
  78  /;
INCLUDE    C:\Local\REMix\framework\remix\framework\model\source\data_inheritance.gms
  80  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
  81  * SPDX-License-Identifier: BSD-3-Clause
  82   
  85   
  90   
  91  * pandas based data inheritance reading in the dat files, merging them and writing csv files in the scrdir
 113  ;
 114   
 118   
 119  * ==== run remix ====
INCLUDE    C:\Local\REMix\framework\remix\framework\model\source\remix.gms
 124  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
 125  * SPDX-License-Identifier: BSD-3-Clause
 126   
 127  * ==== global settings ====
 135   
 138   
 140   
 143   
 144  * ==== include modules ====
INCLUDE    C:\Local\REMix\framework\remix\framework\model\source\sets.gms
 146  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
 147  * SPDX-License-Identifier: BSD-3-Clause
 148   
 149  * // # sets
 150  * // Sets are the indices of variables and parameters.
 151   
 152  * // ## Reference
 153  * // {special_table_sets}
 154   
 155  * // ## Input Files
 156  * // {special_table_set_input_files}
 878   
 879  map_accNodes(accNodesModel,accNodesModel_aggregation)
 880      $sum((nodesData, nodesModelToCalc)
 881              $( sameas(nodesModelToCalc,accNodesModel)
 882                  and map_accNodesLoad(nodesData,accNodesModel_aggregation)
 883                  and aggregateNodesModel(nodesData,nodesModelToCalc)), 1) = yes;
 884   
 885  map_accNodes(accNodesModel,"global")$sum(nodesModelToCalc$sameas(accNodesModel,nodesModelToCalc), 1) = yes;
 886  map_accNodes(accNodesModel,"global")$sum(accNodes$sameas(accNodesModel,accNodes), 1) = yes;
 887  map_accNodes(accNodesModel,accNodesModel) = yes;
 888  map_accLinks(accLinksModel,"global")$sum(linksModelToCalc$sameas(accLinksModel,linksModelToCalc), 1) = yes;
 889  map_accLinks(accLinksModel,accLinksModel) = yes;
 890  map_accYears(accYears,"horizon")$sum(yearsToCalc$sameas(accYears,yearsToCalc), 1)  = yes;
 891  map_accYears(accYears,accYears) = yes;
 892   
 893  map_accNodesToCalc(accNodesModel,nodesModelToCalc)
 894      $sum((nodesData)
 895              $( map_accNodesLoad(nodesData,accNodesModel)
 896                  and aggregateNodesModel(nodesData,nodesModelToCalc)), 1) = yes;
 897   
 898  map_accNodesToCalc("global",nodesModelToCalc) = yes;
 899  map_accNodesToCalc(accNodesModel,nodesModelToCalc)$sameas(accNodesModel,nodesModelToCalc) = yes;
 900  map_accLinksToCalc("global",linksModelToCalc) = yes;
 901  map_accLinksToCalc(accLinksModel,linksModelToCalc)$sameas(accLinksModel,linksModelToCalc) = yes;
 902  map_accYearsToCalc("horizon",yearsToCalc) = yes;
 903  map_accYearsToCalc(accYears,yearsToCalc)$sameas(accYears,yearsToCalc) = yes;
 904   
 905  * Duplicate sets for postcalc reporting without horizon and accYears
 906  map_accNodesPostCalc(accNodesModel,nodesModelToCalc) = map_accNodesToCalc(accNodesModel,nodesModelToCalc);
 907  map_accLinksPostCalc(accLinksModel,linksModelToCalc) = map_accLinksToCalc(accLinksModel,linksModelToCalc);
 908  map_accYearsPostCalc(accYears,yearsToCalc)$sameas(accYears,yearsToCalc) = yes;
 909  map_accYearsPostCalc(accYears,years)$(sameas(accYears,years) and years.val < sum(yearsToCalc$(ord(yearsToCalc) = 1), yearsToCalc.val)) = yes;
 910   
 911  set map_nodesAccounting(accNodesModel_aggregation,accNodesModel) "Map accounting nodes describes the mapping between model accounting nodes and data nodes." ;
 912  option map_nodesAccounting < map_accNodes;
 913   
 914  * ==== Generic sets  ====
 915  * These set names are repeated across different profile parameters.
 916  * they are not strictly related to each other and are not input data but
 917  * are needed for validation.
 918  ** // PROFILE: profileTypes | Profile Types | OEO_00140056:flow potential | set_profiletypes.csv
 919   
 920  ** // SET: scenario | Scenario | OEO_00000364:scenario | set_scenarios.csv
 921  * "Scenario indexes help to differentiate scenarios." /
 922   
 923  ** // SET: capType | Capacity Types | OEO_00030019:balance process attribute | set_captypes.csv
 924  * "Capacity types differentiate investment decisions." /
 925   
 926  ** // SET: balanceType | Balance Types | OEO_00030019:balance process attribute | set_balancetypes.csv
 927  * "Balance types differentiate types of balances." /
INCLUDE    C:\Local\REMix\framework\remix\framework\model\source\accounting\input.gms
 929  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
 930  * SPDX-License-Identifier: BSD-3-Clause
 931   
 932  * // # accounting_input
 933  * // The parameters in this file describe the accounting of indicators in the model.
 934   
 935  * // ## Variables
 936  * // {special_table_input_variables}
1321   
1322  * Aggregate accounting parameters
BATINCLUDE C:\Local\REMix\framework\remix\framework\model\source\battools\aggregateAccountingMean.gms
1324  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
1325  * SPDX-License-Identifier: BSD-3-Clause
1326   
1328   
1330   
1331  set accounting_converterUnitsNonzero(indicator,accnodesData,converter_techs,vintage);
1332  accounting_converterUnitsNonzero(indicator,accnodesData,converter_techs,vintage)
1333      $sum(pc_accounting_converterUnits$accounting_converterUnitsIn(indicator,accnodesData,converter_techs,vintage,pc_accounting_converterUnits), 1)
1334      = yes;
1335   
1337  set accounting_converterUnitsChk(indicator,nodesModel,converter_techs,vintage,pc_accounting_converterUnits);
1338  accounting_converterUnitsChk(indicator,nodesModel,converter_techs,vintage,"useAnnuity")
1339      $sum((nodesData,accnodesData)
1340              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1341                  and accounting_converterUnitsNonzero(indicator,accnodesData,converter_techs,vintage)), 1)
1342      = smax((nodesData,accnodesData)
1343              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1344                  and accounting_converterUnitsNonzero(indicator,accnodesData,converter_techs,vintage)),
1345          accounting_converterUnitsIn(indicator,accnodesData,converter_techs,vintage,"useAnnuity"))
1346      - smin((nodesData,accnodesData)
1347              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1348                  and accounting_converterUnitsNonzero(indicator,accnodesData,converter_techs,vintage)),
1349          accounting_converterUnitsIn(indicator,accnodesData,converter_techs,vintage,"useAnnuity"));
1350   
1351  abort$sum(accounting_converterUnitsChk(indicator,nodesModel,converter_techs,vintage,pc_accounting_converterUnits), 1) "Cannot aggregate technologies with different useAnnuity values."
1353   
1354  parameter accounting_converterUnitsAgg(indicator,nodesModel,converter_techs,vintage,pc_accounting_converterUnits);
1355  accounting_converterUnitsAgg(indicator,nodesModel,converter_techs,vintage,pc_accounting_converterUnits)
1356      $sum((nodesData,accnodesData)
1357              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1358                  and accounting_converterUnitsNonzero(indicator,accnodesData,converter_techs,vintage)), 1)
1359      = sum((nodesData,accnodesData)
1360              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1361                  and accounting_converterUnitsNonzero(indicator,accnodesData,converter_techs,vintage)),
1362          accounting_converterUnitsIn(indicator,accnodesData,converter_techs,vintage,pc_accounting_converterUnits))
1363      / sum((nodesData,accnodesData)
1364              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1365                  and accounting_converterUnitsNonzero(indicator,accnodesData,converter_techs,vintage)),
1366          1);
1367   
1368  parameter accounting_converterUnits(indicator,nodesModel,converter_techs,vintage,pc_accounting_converterUnits);
1369  loop(accnodes,
1370  accounting_converterUnits(indicator,nodesModel,converter_techs,vintage,pc_accounting_converterUnits)
1371      $sum(accnodesData$(map_accnodesToCalc(accnodes,nodesModel) and sameas(accnodes,accnodesData)
1372                              and accounting_converterUnitsIn(indicator,accnodesData,converter_techs,vintage,pc_accounting_converterUnits)), 1)
1373      = sum(accnodesData$(map_accnodesToCalc(accnodes,nodesModel) and sameas(accnodes,accnodesData)),
1374              accounting_converterUnitsIn(indicator,accnodesData,converter_techs,vintage,pc_accounting_converterUnits));
1375  );
1376   
1377  accounting_converterUnits(indicator,nodesModel,converter_techs,vintage,pc_accounting_converterUnits)
1378      $accounting_converterUnitsAgg(indicator,nodesModel,converter_techs,vintage,pc_accounting_converterUnits)
1379      = accounting_converterUnitsAgg(indicator,nodesModel,converter_techs,vintage,pc_accounting_converterUnits);
1380   
1381  * option kill %paramName%Nonzero %paramName%Chk %paramName%Agg
BATINCLUDE C:\Local\REMix\framework\remix\framework\model\source\battools\aggregateAccountingMean.gms
1383  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
1384  * SPDX-License-Identifier: BSD-3-Clause
1385   
1387   
1389   
1390  set accounting_converterActivityNonzero(indicator,accnodesData,converter_techs,vintage,activity);
1391  accounting_converterActivityNonzero(indicator,accnodesData,converter_techs,vintage,activity)
1392      $sum(pc_accounting_converterActivity$accounting_converterActivityIn(indicator,accnodesData,converter_techs,vintage,activity,pc_accounting_converterActivity), 1)
1393      = yes;
1394   
1396   
1397  parameter accounting_converterActivityAgg(indicator,nodesModel,converter_techs,vintage,activity,pc_accounting_converterActivity);
1398  accounting_converterActivityAgg(indicator,nodesModel,converter_techs,vintage,activity,pc_accounting_converterActivity)
1399      $sum((nodesData,accnodesData)
1400              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1401                  and accounting_converterActivityNonzero(indicator,accnodesData,converter_techs,vintage,activity)), 1)
1402      = sum((nodesData,accnodesData)
1403              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1404                  and accounting_converterActivityNonzero(indicator,accnodesData,converter_techs,vintage,activity)),
1405          accounting_converterActivityIn(indicator,accnodesData,converter_techs,vintage,activity,pc_accounting_converterActivity))
1406      / sum((nodesData,accnodesData)
1407              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1408                  and accounting_converterActivityNonzero(indicator,accnodesData,converter_techs,vintage,activity)),
1409          1);
1410   
1411  parameter accounting_converterActivity(indicator,nodesModel,converter_techs,vintage,activity,pc_accounting_converterActivity);
1412  loop(accnodes,
1413  accounting_converterActivity(indicator,nodesModel,converter_techs,vintage,activity,pc_accounting_converterActivity)
1414      $sum(accnodesData$(map_accnodesToCalc(accnodes,nodesModel) and sameas(accnodes,accnodesData)
1415                              and accounting_converterActivityIn(indicator,accnodesData,converter_techs,vintage,activity,pc_accounting_converterActivity)), 1)
1416      = sum(accnodesData$(map_accnodesToCalc(accnodes,nodesModel) and sameas(accnodes,accnodesData)),
1417              accounting_converterActivityIn(indicator,accnodesData,converter_techs,vintage,activity,pc_accounting_converterActivity));
1418  );
1419   
1420  accounting_converterActivity(indicator,nodesModel,converter_techs,vintage,activity,pc_accounting_converterActivity)
1421      $accounting_converterActivityAgg(indicator,nodesModel,converter_techs,vintage,activity,pc_accounting_converterActivity)
1422      = accounting_converterActivityAgg(indicator,nodesModel,converter_techs,vintage,activity,pc_accounting_converterActivity);
1423   
1424  * option kill %paramName%Nonzero %paramName%Chk %paramName%Agg
BATINCLUDE C:\Local\REMix\framework\remix\framework\model\source\battools\aggregateAccountingMean.gms
1426  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
1427  * SPDX-License-Identifier: BSD-3-Clause
1428   
1430   
1432   
1433  set accounting_converterStartupNonzero(indicator,accnodesData,converter_techs,vintage);
1434  accounting_converterStartupNonzero(indicator,accnodesData,converter_techs,vintage)
1435      $sum(pc_accounting_converterStartup$accounting_converterStartupIn(indicator,accnodesData,converter_techs,vintage,pc_accounting_converterStartup), 1)
1436      = yes;
1437   
1439   
1440  parameter accounting_converterStartupAgg(indicator,nodesModel,converter_techs,vintage,pc_accounting_converterStartup);
1441  accounting_converterStartupAgg(indicator,nodesModel,converter_techs,vintage,pc_accounting_converterStartup)
1442      $sum((nodesData,accnodesData)
1443              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1444                  and accounting_converterStartupNonzero(indicator,accnodesData,converter_techs,vintage)), 1)
1445      = sum((nodesData,accnodesData)
1446              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1447                  and accounting_converterStartupNonzero(indicator,accnodesData,converter_techs,vintage)),
1448          accounting_converterStartupIn(indicator,accnodesData,converter_techs,vintage,pc_accounting_converterStartup))
1449      / sum((nodesData,accnodesData)
1450              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1451                  and accounting_converterStartupNonzero(indicator,accnodesData,converter_techs,vintage)),
1452          1);
1453   
1454  parameter accounting_converterStartup(indicator,nodesModel,converter_techs,vintage,pc_accounting_converterStartup);
1455  loop(accnodes,
1456  accounting_converterStartup(indicator,nodesModel,converter_techs,vintage,pc_accounting_converterStartup)
1457      $sum(accnodesData$(map_accnodesToCalc(accnodes,nodesModel) and sameas(accnodes,accnodesData)
1458                              and accounting_converterStartupIn(indicator,accnodesData,converter_techs,vintage,pc_accounting_converterStartup)), 1)
1459      = sum(accnodesData$(map_accnodesToCalc(accnodes,nodesModel) and sameas(accnodes,accnodesData)),
1460              accounting_converterStartupIn(indicator,accnodesData,converter_techs,vintage,pc_accounting_converterStartup));
1461  );
1462   
1463  accounting_converterStartup(indicator,nodesModel,converter_techs,vintage,pc_accounting_converterStartup)
1464      $accounting_converterStartupAgg(indicator,nodesModel,converter_techs,vintage,pc_accounting_converterStartup)
1465      = accounting_converterStartupAgg(indicator,nodesModel,converter_techs,vintage,pc_accounting_converterStartup);
1466   
1467  * option kill %paramName%Nonzero %paramName%Chk %paramName%Agg
BATINCLUDE C:\Local\REMix\framework\remix\framework\model\source\battools\aggregateAccountingMean.gms
1469  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
1470  * SPDX-License-Identifier: BSD-3-Clause
1471   
1473   
1475   
1476  set accounting_storageUnitsNonzero(indicator,accnodesData,storage_techs,vintage);
1477  accounting_storageUnitsNonzero(indicator,accnodesData,storage_techs,vintage)
1478      $sum(pc_accounting_storageUnits$accounting_storageUnitsIn(indicator,accnodesData,storage_techs,vintage,pc_accounting_storageUnits), 1)
1479      = yes;
1480   
1482  set accounting_storageUnitsChk(indicator,nodesModel,storage_techs,vintage,pc_accounting_storageUnits);
1483  accounting_storageUnitsChk(indicator,nodesModel,storage_techs,vintage,"useAnnuity")
1484      $sum((nodesData,accnodesData)
1485              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1486                  and accounting_storageUnitsNonzero(indicator,accnodesData,storage_techs,vintage)), 1)
1487      = smax((nodesData,accnodesData)
1488              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1489                  and accounting_storageUnitsNonzero(indicator,accnodesData,storage_techs,vintage)),
1490          accounting_storageUnitsIn(indicator,accnodesData,storage_techs,vintage,"useAnnuity"))
1491      - smin((nodesData,accnodesData)
1492              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1493                  and accounting_storageUnitsNonzero(indicator,accnodesData,storage_techs,vintage)),
1494          accounting_storageUnitsIn(indicator,accnodesData,storage_techs,vintage,"useAnnuity"));
1495   
1496  abort$sum(accounting_storageUnitsChk(indicator,nodesModel,storage_techs,vintage,pc_accounting_storageUnits), 1) "Cannot aggregate technologies with different useAnnuity values."
1498   
1499  parameter accounting_storageUnitsAgg(indicator,nodesModel,storage_techs,vintage,pc_accounting_storageUnits);
1500  accounting_storageUnitsAgg(indicator,nodesModel,storage_techs,vintage,pc_accounting_storageUnits)
1501      $sum((nodesData,accnodesData)
1502              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1503                  and accounting_storageUnitsNonzero(indicator,accnodesData,storage_techs,vintage)), 1)
1504      = sum((nodesData,accnodesData)
1505              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1506                  and accounting_storageUnitsNonzero(indicator,accnodesData,storage_techs,vintage)),
1507          accounting_storageUnitsIn(indicator,accnodesData,storage_techs,vintage,pc_accounting_storageUnits))
1508      / sum((nodesData,accnodesData)
1509              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1510                  and accounting_storageUnitsNonzero(indicator,accnodesData,storage_techs,vintage)),
1511          1);
1512   
1513  parameter accounting_storageUnits(indicator,nodesModel,storage_techs,vintage,pc_accounting_storageUnits);
1514  loop(accnodes,
1515  accounting_storageUnits(indicator,nodesModel,storage_techs,vintage,pc_accounting_storageUnits)
1516      $sum(accnodesData$(map_accnodesToCalc(accnodes,nodesModel) and sameas(accnodes,accnodesData)
1517                              and accounting_storageUnitsIn(indicator,accnodesData,storage_techs,vintage,pc_accounting_storageUnits)), 1)
1518      = sum(accnodesData$(map_accnodesToCalc(accnodes,nodesModel) and sameas(accnodes,accnodesData)),
1519              accounting_storageUnitsIn(indicator,accnodesData,storage_techs,vintage,pc_accounting_storageUnits));
1520  );
1521   
1522  accounting_storageUnits(indicator,nodesModel,storage_techs,vintage,pc_accounting_storageUnits)
1523      $accounting_storageUnitsAgg(indicator,nodesModel,storage_techs,vintage,pc_accounting_storageUnits)
1524      = accounting_storageUnitsAgg(indicator,nodesModel,storage_techs,vintage,pc_accounting_storageUnits);
1525   
1526  * option kill %paramName%Nonzero %paramName%Chk %paramName%Agg
BATINCLUDE C:\Local\REMix\framework\remix\framework\model\source\battools\aggregateAccountingMean.gms
1528  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
1529  * SPDX-License-Identifier: BSD-3-Clause
1530   
1532   
1534   
1535  set accounting_transferLinksNonzero(indicator,acclinksData,transfer_techs,vintage);
1536  accounting_transferLinksNonzero(indicator,acclinksData,transfer_techs,vintage)
1537      $sum(pc_accounting_transferLinks$accounting_transferLinksIn(indicator,acclinksData,transfer_techs,vintage,pc_accounting_transferLinks), 1)
1538      = yes;
1539   
1541  set accounting_transferLinksChk(indicator,linksModel,transfer_techs,vintage,pc_accounting_transferLinks);
1542  accounting_transferLinksChk(indicator,linksModel,transfer_techs,vintage,"useAnnuity")
1543      $sum((linksData,acclinksData)
1544              $(aggregatelinksModel(linksData,linksModel) and sameas(linksData,acclinksData)
1545                  and accounting_transferLinksNonzero(indicator,acclinksData,transfer_techs,vintage)), 1)
1546      = smax((linksData,acclinksData)
1547              $(aggregatelinksModel(linksData,linksModel) and sameas(linksData,acclinksData)
1548                  and accounting_transferLinksNonzero(indicator,acclinksData,transfer_techs,vintage)),
1549          accounting_transferLinksIn(indicator,acclinksData,transfer_techs,vintage,"useAnnuity"))
1550      - smin((linksData,acclinksData)
1551              $(aggregatelinksModel(linksData,linksModel) and sameas(linksData,acclinksData)
1552                  and accounting_transferLinksNonzero(indicator,acclinksData,transfer_techs,vintage)),
1553          accounting_transferLinksIn(indicator,acclinksData,transfer_techs,vintage,"useAnnuity"));
1554   
1555  abort$sum(accounting_transferLinksChk(indicator,linksModel,transfer_techs,vintage,pc_accounting_transferLinks), 1) "Cannot aggregate technologies with different useAnnuity values."
1557   
1558  parameter accounting_transferLinksAgg(indicator,linksModel,transfer_techs,vintage,pc_accounting_transferLinks);
1559  accounting_transferLinksAgg(indicator,linksModel,transfer_techs,vintage,pc_accounting_transferLinks)
1560      $sum((linksData,acclinksData)
1561              $(aggregatelinksModel(linksData,linksModel) and sameas(linksData,acclinksData)
1562                  and accounting_transferLinksNonzero(indicator,acclinksData,transfer_techs,vintage)), 1)
1563      = sum((linksData,acclinksData)
1564              $(aggregatelinksModel(linksData,linksModel) and sameas(linksData,acclinksData)
1565                  and accounting_transferLinksNonzero(indicator,acclinksData,transfer_techs,vintage)),
1566          accounting_transferLinksIn(indicator,acclinksData,transfer_techs,vintage,pc_accounting_transferLinks))
1567      / sum((linksData,acclinksData)
1568              $(aggregatelinksModel(linksData,linksModel) and sameas(linksData,acclinksData)
1569                  and accounting_transferLinksNonzero(indicator,acclinksData,transfer_techs,vintage)),
1570          1);
1571   
1572  parameter accounting_transferLinks(indicator,linksModel,transfer_techs,vintage,pc_accounting_transferLinks);
1573  loop(acclinks,
1574  accounting_transferLinks(indicator,linksModel,transfer_techs,vintage,pc_accounting_transferLinks)
1575      $sum(acclinksData$(map_acclinksToCalc(acclinks,linksModel) and sameas(acclinks,acclinksData)
1576                              and accounting_transferLinksIn(indicator,acclinksData,transfer_techs,vintage,pc_accounting_transferLinks)), 1)
1577      = sum(acclinksData$(map_acclinksToCalc(acclinks,linksModel) and sameas(acclinks,acclinksData)),
1578              accounting_transferLinksIn(indicator,acclinksData,transfer_techs,vintage,pc_accounting_transferLinks));
1579  );
1580   
1581  accounting_transferLinks(indicator,linksModel,transfer_techs,vintage,pc_accounting_transferLinks)
1582      $accounting_transferLinksAgg(indicator,linksModel,transfer_techs,vintage,pc_accounting_transferLinks)
1583      = accounting_transferLinksAgg(indicator,linksModel,transfer_techs,vintage,pc_accounting_transferLinks);
1584   
1585  * option kill %paramName%Nonzero %paramName%Chk %paramName%Agg
BATINCLUDE C:\Local\REMix\framework\remix\framework\model\source\battools\aggregateAccountingMean.gms
1587  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
1588  * SPDX-License-Identifier: BSD-3-Clause
1589   
1591   
1593   
1594  set accounting_transferPerLengthNonzero(indicator,acclinksData,transfer_techs,vintage,link_types);
1595  accounting_transferPerLengthNonzero(indicator,acclinksData,transfer_techs,vintage,link_types)
1596      $sum(pc_accounting_transferPerLength$accounting_transferPerLengthIn(indicator,acclinksData,transfer_techs,vintage,link_types,pc_accounting_transferPerLength), 1)
1597      = yes;
1598   
1600  set accounting_transferPerLengthChk(indicator,linksModel,transfer_techs,vintage,link_types,pc_accounting_transferPerLength);
1601  accounting_transferPerLengthChk(indicator,linksModel,transfer_techs,vintage,link_types,"useAnnuity")
1602      $sum((linksData,acclinksData)
1603              $(aggregatelinksModel(linksData,linksModel) and sameas(linksData,acclinksData)
1604                  and accounting_transferPerLengthNonzero(indicator,acclinksData,transfer_techs,vintage,link_types)), 1)
1605      = smax((linksData,acclinksData)
1606              $(aggregatelinksModel(linksData,linksModel) and sameas(linksData,acclinksData)
1607                  and accounting_transferPerLengthNonzero(indicator,acclinksData,transfer_techs,vintage,link_types)),
1608          accounting_transferPerLengthIn(indicator,acclinksData,transfer_techs,vintage,link_types,"useAnnuity"))
1609      - smin((linksData,acclinksData)
1610              $(aggregatelinksModel(linksData,linksModel) and sameas(linksData,acclinksData)
1611                  and accounting_transferPerLengthNonzero(indicator,acclinksData,transfer_techs,vintage,link_types)),
1612          accounting_transferPerLengthIn(indicator,acclinksData,transfer_techs,vintage,link_types,"useAnnuity"));
1613   
1614  abort$sum(accounting_transferPerLengthChk(indicator,linksModel,transfer_techs,vintage,link_types,pc_accounting_transferPerLength), 1) "Cannot aggregate technologies with different useAnnuity values."
1616   
1617  parameter accounting_transferPerLengthAgg(indicator,linksModel,transfer_techs,vintage,link_types,pc_accounting_transferPerLength);
1618  accounting_transferPerLengthAgg(indicator,linksModel,transfer_techs,vintage,link_types,pc_accounting_transferPerLength)
1619      $sum((linksData,acclinksData)
1620              $(aggregatelinksModel(linksData,linksModel) and sameas(linksData,acclinksData)
1621                  and accounting_transferPerLengthNonzero(indicator,acclinksData,transfer_techs,vintage,link_types)), 1)
1622      = sum((linksData,acclinksData)
1623              $(aggregatelinksModel(linksData,linksModel) and sameas(linksData,acclinksData)
1624                  and accounting_transferPerLengthNonzero(indicator,acclinksData,transfer_techs,vintage,link_types)),
1625          accounting_transferPerLengthIn(indicator,acclinksData,transfer_techs,vintage,link_types,pc_accounting_transferPerLength))
1626      / sum((linksData,acclinksData)
1627              $(aggregatelinksModel(linksData,linksModel) and sameas(linksData,acclinksData)
1628                  and accounting_transferPerLengthNonzero(indicator,acclinksData,transfer_techs,vintage,link_types)),
1629          1);
1630   
1631  parameter accounting_transferPerLength(indicator,linksModel,transfer_techs,vintage,link_types,pc_accounting_transferPerLength);
1632  loop(acclinks,
1633  accounting_transferPerLength(indicator,linksModel,transfer_techs,vintage,link_types,pc_accounting_transferPerLength)
1634      $sum(acclinksData$(map_acclinksToCalc(acclinks,linksModel) and sameas(acclinks,acclinksData)
1635                              and accounting_transferPerLengthIn(indicator,acclinksData,transfer_techs,vintage,link_types,pc_accounting_transferPerLength)), 1)
1636      = sum(acclinksData$(map_acclinksToCalc(acclinks,linksModel) and sameas(acclinks,acclinksData)),
1637              accounting_transferPerLengthIn(indicator,acclinksData,transfer_techs,vintage,link_types,pc_accounting_transferPerLength));
1638  );
1639   
1640  accounting_transferPerLength(indicator,linksModel,transfer_techs,vintage,link_types,pc_accounting_transferPerLength)
1641      $accounting_transferPerLengthAgg(indicator,linksModel,transfer_techs,vintage,link_types,pc_accounting_transferPerLength)
1642      = accounting_transferPerLengthAgg(indicator,linksModel,transfer_techs,vintage,link_types,pc_accounting_transferPerLength);
1643   
1644  * option kill %paramName%Nonzero %paramName%Chk %paramName%Agg
BATINCLUDE C:\Local\REMix\framework\remix\framework\model\source\battools\aggregateAccountingMean.gms
1646  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
1647  * SPDX-License-Identifier: BSD-3-Clause
1648   
1650   
1652   
1653  set accounting_sourcesinkFlowNonzero(indicator,accnodesData,years,sourcesink_techs,commodity);
1654  accounting_sourcesinkFlowNonzero(indicator,accnodesData,years,sourcesink_techs,commodity)
1655      $sum(pc_accounting_sourcesinkFlow$accounting_sourcesinkFlowIn(indicator,accnodesData,years,sourcesink_techs,commodity,pc_accounting_sourcesinkFlow), 1)
1656      = yes;
1657   
1659   
1660  parameter accounting_sourcesinkFlowAgg(indicator,nodesModel,years,sourcesink_techs,commodity,pc_accounting_sourcesinkFlow);
1661  accounting_sourcesinkFlowAgg(indicator,nodesModel,years,sourcesink_techs,commodity,pc_accounting_sourcesinkFlow)
1662      $sum((nodesData,accnodesData)
1663              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1664                  and accounting_sourcesinkFlowNonzero(indicator,accnodesData,years,sourcesink_techs,commodity)), 1)
1665      = sum((nodesData,accnodesData)
1666              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1667                  and accounting_sourcesinkFlowNonzero(indicator,accnodesData,years,sourcesink_techs,commodity)),
1668          accounting_sourcesinkFlowIn(indicator,accnodesData,years,sourcesink_techs,commodity,pc_accounting_sourcesinkFlow))
1669      / sum((nodesData,accnodesData)
1670              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1671                  and accounting_sourcesinkFlowNonzero(indicator,accnodesData,years,sourcesink_techs,commodity)),
1672          1);
1673   
1674  parameter accounting_sourcesinkFlow(indicator,nodesModel,years,sourcesink_techs,commodity,pc_accounting_sourcesinkFlow);
1675  loop(accnodes,
1676  accounting_sourcesinkFlow(indicator,nodesModel,years,sourcesink_techs,commodity,pc_accounting_sourcesinkFlow)
1677      $sum(accnodesData$(map_accnodesToCalc(accnodes,nodesModel) and sameas(accnodes,accnodesData)
1678                              and accounting_sourcesinkFlowIn(indicator,accnodesData,years,sourcesink_techs,commodity,pc_accounting_sourcesinkFlow)), 1)
1679      = sum(accnodesData$(map_accnodesToCalc(accnodes,nodesModel) and sameas(accnodes,accnodesData)),
1680              accounting_sourcesinkFlowIn(indicator,accnodesData,years,sourcesink_techs,commodity,pc_accounting_sourcesinkFlow));
1681  );
1682   
1683  accounting_sourcesinkFlow(indicator,nodesModel,years,sourcesink_techs,commodity,pc_accounting_sourcesinkFlow)
1684      $accounting_sourcesinkFlowAgg(indicator,nodesModel,years,sourcesink_techs,commodity,pc_accounting_sourcesinkFlow)
1685      = accounting_sourcesinkFlowAgg(indicator,nodesModel,years,sourcesink_techs,commodity,pc_accounting_sourcesinkFlow);
1686   
1687  * option kill %paramName%Nonzero %paramName%Chk %paramName%Agg
1688   
1689  parameter accounting_indicatorBounds_links(linksModel,years,indicator,pc_accounting_indicatorBounds_links);
1690  accounting_indicatorBounds_links(linksModelToCalc,yearsToCalc,indicator,pc_accounting_indicatorBounds_links)
1691      = sum((linksData)$sameas(linksModelToCalc,linksData),
1692              accounting_indicatorBounds_linksIn(linksData,yearsToCalc,indicator,pc_accounting_indicatorBounds_links));
1693   
1694  accounting_indicatorBounds_links(linksModelToCalc,yearsToCalc,indicator,pc_accounting_indicatorBounds_links)
1695      = sum((linksData)$links_aggregate(linksModelToCalc,linksData),
1696              accounting_indicatorBounds_linksIn(linksData,yearsToCalc,indicator,pc_accounting_indicatorBounds_links));
1697   
1698  parameter accounting_indicatorBounds(accNodesModel,accYears,indicator,pc_accounting_indicatorBounds);
1699  accounting_indicatorBounds(accNodesModel,accYears,indicator,pc_accounting_indicatorBounds)
1700      = sum (accNodesData$sameas(accNodesModel,accNodesData),
1701          accounting_indicatorBoundsIn(accNodesData,accYears,indicator,pc_accounting_indicatorBounds));
1702   
1703  accounting_indicatorBounds(accNodesModel,accYears,indicator,pc_accounting_indicatorBounds)
1704      $(sum (nodesModel$sameas(accNodesModel,nodesModel), 1) > 0)
1705      = sum ((accNodesData,nodesData,nodesModel)
1706              $(aggregateNodesModel(nodesData,nodesModel) and sameas(accNodesModel,nodesModel) and sameas(accNodesData,nodesData)),
1707          accounting_indicatorBoundsIn(accNodesData,accYears,indicator,pc_accounting_indicatorBounds));
1708   
1709  set accounting_perIndicatorNonzero(indicator,indicator_a,accNodesData,accYears);
1710  accounting_perIndicatorNonzero(indicator,indicator_a,accNodesData,accYears)
1711      $sum(pc_accounting_perIndicator$accounting_perIndicatorIn(indicator,indicator_a,accNodesData,accYears,pc_accounting_perIndicator), 1)
1712      = yes;
1713   
1714  parameter accounting_perIndicatorAgg(indicator,indicator_a,nodesModel,accYears,pc_accounting_perIndicator);
1715  accounting_perIndicatorAgg(indicator,indicator_a,nodesModel,accYears,pc_accounting_perIndicator)
1716      $sum((nodesData,accnodesData)
1717              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1718                  and accounting_perIndicatorNonzero(indicator,indicator_a,accnodesData,accYears)), 1)
1719      = sum((nodesData,accnodesData)
1720              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1721                  and accounting_perIndicatorNonzero(indicator,indicator_a,accnodesData,accYears)),
1722          accounting_perIndicatorIn(indicator,indicator_a,accnodesData,accYears,pc_accounting_perIndicator))
1723      / sum((nodesData,accnodesData)
1724              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1725                  and accounting_perIndicatorNonzero(indicator,indicator_a,accnodesData,accYears)),
1726          1);
1727   
1728  parameter accounting_perIndicator(indicator,indicator_a,accNodesModel,accYears,pc_accounting_perIndicator);
1729   
1730  loop(accNodes,
1731  accounting_perIndicator(indicator,indicator_a,accNodesModel,accYears,pc_accounting_perIndicator)
1732      $(sum(accNodesData$(sameas(accNodes,accNodesData)
1733              and accounting_perIndicatorIn(indicator,indicator_a,accNodesData,"horizon",pc_accounting_perIndicator)), 1)
1734          and map_accNodes(accNodesModel,accNodes)
1735              )
1736      = sum(accNodesData$(sameas(accNodes,accNodesData)),
1737              accounting_perIndicatorIn(indicator,indicator_a,accNodesData,"horizon",pc_accounting_perIndicator));
1738   
1739  accounting_perIndicator(indicator,indicator_a,accNodesModel,accYears,pc_accounting_perIndicator)
1740      $(sum(accNodesData$(sameas(accNodes,accNodesData)
1741              and accounting_perIndicatorIn(indicator,indicator_a,accNodesData,accYears,pc_accounting_perIndicator)), 1)
1742          and map_accNodes(accNodesModel,accNodes)
1743          and not sameas(accYears, "horizon"))
1744      = sum(accNodesData$(sameas(accNodes,accNodesData)),
1745              accounting_perIndicatorIn(indicator,indicator_a,accNodesData,accYears,pc_accounting_perIndicator));
1746  );
1747   
1748  accounting_perIndicator(indicator,indicator_a,accNodesModel,accYears,pc_accounting_perIndicator)
1749      $sum(nodesModel$(accounting_perIndicatorAgg(indicator,indicator_a,nodesModel,"horizon",pc_accounting_perIndicator)
1750          and sameas(accNodesModel,nodesModel)), 1)
1751      = sum(nodesModel$sameas(accNodesModel,nodesModel),
1752          accounting_perIndicatorAgg(indicator,indicator_a,nodesModel,"horizon",pc_accounting_perIndicator));
1753   
1754  accounting_perIndicator(indicator,indicator_a,accNodesModel,accYears,pc_accounting_perIndicator)
1755      $sum(nodesModel$(accounting_perIndicatorAgg(indicator,indicator_a,nodesModel,accYears,pc_accounting_perIndicator)
1756          and sameas(accNodesModel,nodesModel) and not sameas(accYears, "horizon")), 1)
1757      = sum(nodesModel$sameas(accNodesModel,nodesModel),
1758          accounting_perIndicatorAgg(indicator,indicator_a,nodesModel,accYears,pc_accounting_perIndicator));
1759   
1760   
1761  * Make sure all required indicators end up in the model
1762  set activeIndicators(accNodesModel,accYears,indicator);
1763  activeIndicators(accNodesModel,accYears,indicator)
1764     $((accounting_indicatorBounds(accNodesModel,accYears,indicator,"obj") <> 0
1767        or accounting_indicatorBounds(accNodesModel,accYears,indicator,"useFixed") <> 0
1768        or accounting_indicatorBounds(accNodesModel,accYears,indicator,"useLower") <> 0
1769        or accounting_indicatorBounds(accNodesModel,accYears,indicator,"useUpper") <> 0 )
1770          and not accounting_indicatorBounds(accNodesModel,accYears,indicator,"isVariable"))
1771     = yes;
1772   
1773  set activeIndicators_links(linksModel,years,indicator);
1774  activeIndicators_links(linksModelToCalc,yearsToCalc,indicator)
1775     $(accounting_indicatorBounds_links(linksModelToCalc,yearsToCalc,indicator,"useFixed") <> 0
1776        or accounting_indicatorBounds_links(linksModelToCalc,yearsToCalc,indicator,"useLower") <> 0
1777        or accounting_indicatorBounds_links(linksModelToCalc,yearsToCalc,indicator,"useUpper") <> 0 )
1778     = yes;
1779   
1780  set variableIndicators(accNodesModel,accYears,indicator);
1781  variableIndicators(accNodesModel,accYears,indicator)
1782     $(accounting_indicatorBounds(accNodesModel,accYears,indicator,"obj") = 0
1783        and accounting_indicatorBounds(accNodesModel,accYears,indicator,"isVariable"))
1784     = yes;
1785   
1786  * Calculate length of years and discount rates per indicator
1787  parameter yearFactor(accNodesModel,accYears,indicator,accYears);
1788  yearFactor(accNodesModel,accYears,indicator,accYears_a)
1789      $(map_accYears(accYears_a,accYears)
1790          and sum(yearsToCalc$(sameas(yearsToCalc,accYears_a)), 1))
1791      = 1;
1792   
1793  yearFactor(accNodesModel,accYears,indicator,accYears_a)
1794      $(map_accYears(accYears_a,accYears)
1795          and sum(yearsToCalc$(sameas(yearsToCalc,accYears_a)), 1)
1796          and accounting_indicatorBounds(accNodesModel,accYears,indicator,"integral"))
1797      = sum(yearsToCalc$sameas(accYears_a,yearsToCalc), yearsLen(yearsToCalc));
1798   
1799  yearFactor(accNodesModel,accYears,indicator,accYears_a)
1800      $(map_accYears(accYears_a,accYears)
1801          and sum(yearsToCalc$(sameas(yearsToCalc,accYears_a)), 1)
1802          and accounting_indicatorBounds(accNodesModel,accYears,indicator,"integral")
1803          and accounting_indicatorBounds(accNodesModel,accYears,indicator,"endyear")
1804          and yearFactor(accNodesModel,accYears,indicator,accYears_a) = inf)
1805      = accounting_indicatorBounds(accNodesModel,accYears,indicator,"endyear");
1806   
1807  yearFactor(accNodesModel,accYears,indicator,accYears_a)
1808      $(map_accYears(accYears_a,accYears)
1809          and sum(yearsToCalc$(sameas(yearsToCalc,accYears_a)), 1)
1810          and accounting_indicatorBounds(accNodesModel,accYears,indicator,"integral")
1811          and accounting_indicatorBounds(accNodesModel,accYears,indicator,"discount"))
1812      = yearFactor(accNodesModel,accYears,indicator,accYears_a)
1813          * (1 - accounting_indicatorBounds(accNodesModel,accYears,indicator,"discount"))
1814                  ** (accYears_a.val - smin(yearsToCalc, yearsToCalc.val));
1815   
1816   
1817  * ==== calculate compound indicators for the optimization ====
1818  scalar compIndicators_pre;
1819  scalar compIndicators_post;
1820   
1821  parameter compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a);
1822  compoundIndicators(accNodesModel,accYears,indicator,accNodesModel,accYears,indicator)
1823      $activeIndicators(accNodesModel,accYears,indicator) = 1;
1824   
1825  set compoundIndicators_act(accNodesModel,accYears,indicator);
1826  option compoundIndicators_act < compoundIndicators;
1827   
1828  parameter compoundIndicatorsExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa);
1829  parameter compoundIndicatorsExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a);
1830  compoundIndicatorsExt(accNodesModel,accYears,indicator,accNodesModel,accYears,indicator,accNodesModel,accYears,indicator)
1831      $compoundIndicators_act(accNodesModel,accYears,indicator) = 1;
1832   
1833  compIndicators_pre = 0;
1834  compIndicators_post = 1;
1835   
1836  option sparseval = 1;
1837  while(compIndicators_pre < compIndicators_post,
1838      compIndicators_pre = sum((accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa)
1839          $compoundIndicatorsExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa), 1);
1840   
1841      compoundIndicatorsExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa)
1842          $(compoundIndicators_act(accNodesModel,accYears,indicator)
1843              and compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
1844              and not accounting_indicatorBounds(accNodesModel_a,accYears_a,indicator_a,"isVariable")
1845              and map_accNodes(accNodesModel_aa,accNodesModel_a)
1846              and map_accYears(accYears_aa,accYears_a))
1847          = compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
1848              * accounting_perIndicator(indicator_a,indicator_aa,accNodesModel_aa,accYears_aa,"perIndicator");
1849   
1850      option compoundIndicatorsExt_r < compoundIndicatorsExt;
1851   
1852      compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa)
1853          $(compoundIndicators_act(accNodesModel,accYears,indicator)
1854              and sum((accNodesModel_a,accYears_a,indicator_a)
1855                      $compoundIndicatorsExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a), 1) = 1)
1856          = sum((accNodesModel_a,accYears_a,indicator_a)
1857                  $(compoundIndicatorsExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a)),
1858              compoundIndicatorsExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a));
1859   
1860      compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa)
1861          $(compoundIndicators_act(accNodesModel,accYears,indicator)
1862              and sum((accNodesModel_a,accYears_a,indicator_a)
1863                      $compoundIndicatorsExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a), 1) > 1)
1864          = sum((accNodesModel_a,accYears_a,indicator_a)
1865                  $(compoundIndicatorsExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a)
1866                      and not (sameas(accNodesModel, accNodesModel_a) and sameas(accYears, accYears_a) and sameas(indicator, indicator_a))),
1867              compoundIndicatorsExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a))
1868          / sum((accNodesModel_a,accYears_a,indicator_a)
1869                  $(compoundIndicatorsExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a)
1870                      and not (sameas(accNodesModel, accNodesModel_a) and sameas(accYears, accYears_a) and sameas(indicator, indicator_a))), 1);
1871   
1872      option compoundIndicators_act < compoundIndicators;
1873      compIndicators_post = sum((accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa)
1874          $compoundIndicatorsExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa), 1);
1875  );
1876  option sparseval = 0;
1877   
1878  * map to sub-years and sub-nodes
1879  compoundIndicatorsExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_a)
1880      $(compoundIndicators_act(accNodesModel,accYears,indicator)
1881          and compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
1882          and map_accYears(accYears_aa,accYears_a)
1883          and map_accNodes(accNodesModel_aa,accNodesModel_a))
1884      = compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
1885          * yearFactor(accNodesModel,accYears,indicator,accYears_aa);
1886   
1887  * Remove all accounting regions and accounting years
1888  compoundIndicatorsExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa)
1889      $(compoundIndicatorsExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa)
1890          and not accounting_indicatorBounds(accNodesModel_aa,accYears_aa,indicator_aa,"isVariable")
1891          and sum(accNodes$(sameas(accNodes,accNodesModel_aa)), 1)
1892              or sameas("horizon",accYears_aa))
1893      = 0;
1894   
1895  * Map from extended parameter to final parameter
1896  option compoundIndicatorsExt_r < compoundIndicatorsExt;
1897  compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa)
1898      $(compoundIndicators_act(accNodesModel,accYears,indicator)
1899          and sum((accNodesModel_a,accYears_a,indicator_a)
1900                  $compoundIndicatorsExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a), 1) = 1)
1901      = sum((accNodesModel_a,accYears_a,indicator_a)
1902              $(compoundIndicatorsExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a)),
1903          compoundIndicatorsExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a));
1904   
1905  compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa)
1906      $(compoundIndicators_act(accNodesModel,accYears,indicator)
1907          and sum((accNodesModel_a,accYears_a,indicator_a)
1908                  $compoundIndicatorsExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a), 1) > 1)
1909      = sum((accNodesModel_a,accYears_a,indicator_a)
1910              $(compoundIndicatorsExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a)
1911                  and not (sameas(accNodesModel, accNodesModel_a) and sameas(accYears, accYears_a) and sameas(indicator, indicator_a))),
1912          compoundIndicatorsExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a))
1913      / sum((accNodesModel_a,accYears_a,indicator_a)
1914              $(compoundIndicatorsExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a)
1915                  and not (sameas(accNodesModel, accNodesModel_a) and sameas(accYears, accYears_a) and sameas(indicator, indicator_a))), 1);
1916   
1917  * Remove all accounting regions and accounting years
1918  compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
1919      $(compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
1920          and not accounting_indicatorBounds(accNodesModel_a,accYears_a,indicator_a,"isVariable")
1921          and (sum(accNodes$(sameas(accNodes,accNodesModel_a)), 1)
1922              or sameas("horizon",accYears_a)))
1923      = 0;
1924   
1925  * Remove all slack indicators except the ones declared in indicatorBounds
1926  compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
1927      $(compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
1928          and sum((accNodesModel_aa,accYears_aa)$accounting_indicatorBounds(accNodesModel_aa,accYears_aa,indicator_a,"isVariable"), 1)
1929          and not accounting_indicatorBounds(accNodesModel_a,accYears_a,indicator_a,"isVariable"))
1930      = 0;
1931   
1932  * ==== compound indicators for the post calculation ====
1933  parameter compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a);
1934  compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel,accYears,indicator)
1935      $(sum(nodesModelToCalc$map_accNodesToCalc(accNodesModel,nodesModelToCalc), 1)
1936          and sum(yearsToCalc$map_accYearsToCalc(accYears,yearsToCalc), 1)) = 1;
1937   
1938  set compoundIndicatorsFull_act(accNodesModel,accYears,indicator);
1939  option compoundIndicatorsFull_act < compoundIndicatorsFull;
1940   
1941  parameter compoundIndicatorsFullExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa);
1942  parameter compoundIndicatorsFullExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a);
1943  compoundIndicatorsFullExt(accNodesModel,accYears,indicator,accNodesModel,accYears,indicator,accNodesModel,accYears,indicator) = 1;
1944   
1945  compIndicators_pre = 0;
1946  compIndicators_post = 1;
1947   
1948  option sparseval = 1;
1949  while(compIndicators_pre < compIndicators_post,
1950      compIndicators_pre = sum((accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa)
1951          $compoundIndicatorsFullExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa), 1);
1952   
1953      compoundIndicatorsFullExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa)
1954          $(compoundIndicatorsFull_act(accNodesModel,accYears,indicator)
1955              and compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
1956              and not accounting_indicatorBounds(accNodesModel_a,accYears_a,indicator_a,"isVariable")
1957              and map_accNodes(accNodesModel_aa,accNodesModel_a)
1958              and map_accYears(accYears_aa,accYears_a))
1959          = compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
1960              * accounting_perIndicator(indicator_a,indicator_aa,accNodesModel_aa,accYears_aa,"perIndicator");
1961   
1962      option compoundIndicatorsFullExt_r < compoundIndicatorsFullExt;
1963   
1964      compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa)
1965          $(compoundIndicatorsFull_act(accNodesModel,accYears,indicator)
1966              and sum((accNodesModel_a,accYears_a,indicator_a)
1967                      $compoundIndicatorsFullExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a), 1) = 1)
1968          = sum((accNodesModel_a,accYears_a,indicator_a)
1969                  $(compoundIndicatorsFullExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a)),
1970              compoundIndicatorsFullExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a));
1971   
1972      compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa)
1973          $(compoundIndicatorsFull_act(accNodesModel,accYears,indicator)
1974              and sum((accNodesModel_a,accYears_a,indicator_a)
1975                      $compoundIndicatorsFullExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a), 1) > 1)
1976          = sum((accNodesModel_a,accYears_a,indicator_a)
1977                  $(compoundIndicatorsFullExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a)
1978                      and not (sameas(accNodesModel, accNodesModel_a) and sameas(accYears, accYears_a) and sameas(indicator, indicator_a))),
1979              compoundIndicatorsFullExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a))
1980          / sum((accNodesModel_a,accYears_a,indicator_a)
1981                  $(compoundIndicatorsFullExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a)
1982                      and not (sameas(accNodesModel, accNodesModel_a) and sameas(accYears, accYears_a) and sameas(indicator, indicator_a))), 1);
1983   
1984      option compoundIndicatorsFull_act < compoundIndicatorsFull;
1985      compIndicators_post = sum((accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa)
1986          $compoundIndicatorsFullExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa), 1);
1987  );
1988  option sparseval = 0;
1989   
1990  * map to sub-years and sub-nodes
1991  compoundIndicatorsFullExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_a)
1992      $(compoundIndicatorsFull_act(accNodesModel,accYears,indicator)
1993          and compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
1994          and map_accYears(accYears_aa,accYears_a)
1995          and map_accNodes(accNodesModel_aa,accNodesModel_a))
1996      = compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
1997          * yearFactor(accNodesModel,accYears,indicator,accYears_aa);
1998   
1999  * Remove all accounting regions and accounting years
2000  compoundIndicatorsFullExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa)
2001      $(compoundIndicatorsFullExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa)
2002          and not accounting_indicatorBounds(accNodesModel_aa,accYears_aa,indicator_aa,"isVariable")
2003          and sum(accNodes$(sameas(accNodes,accNodesModel_aa)), 1)
2004              or sameas("horizon",accYears_aa))
2005      = 0;
2006   
2007  * Map from extended parameter to final parameter
2008  option compoundIndicatorsFullExt_r < compoundIndicatorsFullExt;
2009  compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa)
2010      $(compoundIndicatorsFull_act(accNodesModel,accYears,indicator)
2011          and sum((accNodesModel_a,accYears_a,indicator_a)
2012                  $compoundIndicatorsFullExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a), 1) = 1)
2013      = sum((accNodesModel_a,accYears_a,indicator_a)
2014              $(compoundIndicatorsFullExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a)),
2015          compoundIndicatorsFullExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a));
2016   
2017  compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa)
2018      $(compoundIndicatorsFull_act(accNodesModel,accYears,indicator)
2019          and sum((accNodesModel_a,accYears_a,indicator_a)
2020                  $compoundIndicatorsFullExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a), 1) > 1)
2021      = sum((accNodesModel_a,accYears_a,indicator_a)
2022              $(compoundIndicatorsFullExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a)
2023                  and not (sameas(accNodesModel, accNodesModel_a) and sameas(accYears, accYears_a) and sameas(indicator, indicator_a))),
2024          compoundIndicatorsFullExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a))
2025      / sum((accNodesModel_a,accYears_a,indicator_a)
2026              $(compoundIndicatorsFullExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a)
2027                  and not (sameas(accNodesModel, accNodesModel_a) and sameas(accYears, accYears_a) and sameas(indicator, indicator_a))), 1);
2028   
2029  * Remove all accounting regions and accounting years
2030  compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
2031      $(compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
2032          and not accounting_indicatorBounds(accNodesModel_a,accYears_a,indicator_a,"isVariable")
2033          and (sum(accNodes$(sameas(accNodes,accNodesModel_a)), 1)
2034              or sameas("horizon",accYears_a)))
2035      = 0;
2036   
2037  * Remove all slack indicators except the ones declared in indicatorBounds
2038  compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
2039      $(compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
2040          and sum((accNodesModel_aa,accYears_aa)$accounting_indicatorBounds(accNodesModel_aa,accYears_aa,indicator_a,"isVariable"), 1)
2041          and not accounting_indicatorBounds(accNodesModel_a,accYears_a,indicator_a,"isVariable"))
2042      = 0;
2043   
2044  * Check if the objective value and optimization sense is set correctly
2045  scalar opti_values, opti_sense;
2046  opti_values = sum((accNodesModel,accYears,indicator)$(accounting_indicatorBounds(accNodesModel,accYears,indicator,"obj") <> 0), 1);
2047  opti_sense = sum((accNodesModel,accYears,indicator), accounting_indicatorBounds(accNodesModel,accYears,indicator,"obj"));
2048  abort$(opti_values < 1)
2049      "Accounting: No indicator specified as objective value"
2050  abort$(opti_values > 1)
2051      "Accounting: Too many indicators specified as objective value"
2052  abort$(opti_sense <> -1 and opti_sense <> 1)
2053      "Accounting: Optimization sense has to be either -1 or 1"
INCLUDE    C:\Local\REMix\framework\remix\framework\model\source\accounting\annuities.gms
2055  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
2056  * SPDX-License-Identifier: BSD-3-Clause
2057   
2058  * Calculation of annuities
2059   
2060  abort$(sum((indicator,nodesModelToCalc,converter_techs,vintage)
2061          $(accounting_converterUnits(indicator,nodesModelToCalc,converter_techs,vintage,"useAnnuity") = 1
2062          and accounting_converterUnits(indicator,nodesModelToCalc,converter_techs,vintage,"amorTime") < 1), 1) > 0 )
2063      "Accounting: Some converter technologies use annuities but have no amortization time"
2064   
2065  parameter accounting_annuityFactor_converter(indicator,nodesModel,converter_techs,vintage);
2066  accounting_annuityFactor_converter(indicator,nodesModelToCalc,converter_techs,vintage)
2067      $accounting_converterUnits(indicator,nodesModelToCalc,converter_techs,vintage,"useAnnuity")
2068      =
2069      accounting_converterUnits(indicator,nodesModelToCalc,converter_techs,vintage,"interest")
2070          * (1 + accounting_converterUnits(indicator,nodesModelToCalc,converter_techs,vintage,"interest"))
2071          ** accounting_converterUnits(indicator,nodesModelToCalc,converter_techs,vintage,"amorTime")
2072      / ((1 + accounting_converterUnits(indicator,nodesModelToCalc,converter_techs,vintage,"interest"))
2073          ** accounting_converterUnits(indicator,nodesModelToCalc,converter_techs,vintage,"amorTime") - 1);
2074   
2075   
2076  abort$(sum((indicator,nodesModelToCalc,storage_techs,vintage)
2077          $(accounting_storageUnits(indicator,nodesModelToCalc,storage_techs,vintage,"useAnnuity") = 1
2078          and accounting_storageUnits(indicator,nodesModelToCalc,storage_techs,vintage,"amorTime") < 1), 1) > 0 )
2079      "Accounting: Some storage technologies use annuities but have no amortization time"
2080   
2081  parameter accounting_annuityFactor_storage(indicator,nodesModel,storage_techs,vintage);
2082  accounting_annuityFactor_storage(indicator,nodesModelToCalc,storage_techs,vintage)
2083      $accounting_storageUnits(indicator,nodesModelToCalc,storage_techs,vintage,"useAnnuity")
2084      =
2085      accounting_storageUnits(indicator,nodesModelToCalc,storage_techs,vintage,"interest")
2086          * (1 + accounting_storageUnits(indicator,nodesModelToCalc,storage_techs,vintage,"interest"))
2087          ** accounting_storageUnits(indicator,nodesModelToCalc,storage_techs,vintage,"amorTime")
2088      / ((1 + accounting_storageUnits(indicator,nodesModelToCalc,storage_techs,vintage,"interest"))
2089          ** accounting_storageUnits(indicator,nodesModelToCalc,storage_techs,vintage,"amorTime") - 1);
2090   
2091   
2092  abort$(sum((indicator,linksModelToCalc,transfer_techs,vintage)
2093          $(accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"useAnnuity") = 1
2094          and accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"amorTime") < 1), 1) > 0 )
2095      "Accounting: Some transfer technologies use annuities but have no amortization time"
2096   
2097  parameter accounting_annuityFactor_transferLink(indicator,linksModel,transfer_techs,vintage);
2098  accounting_annuityFactor_transferLink(indicator,linksModelToCalc,transfer_techs,vintage)
2099      $accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"useAnnuity")
2100      =
2101      accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"interest")
2102          * (1 + accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"interest"))
2103          ** accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"amorTime")
2104      / ((1 + accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"interest"))
2105          ** accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"amorTime") - 1);
2106   
2107   
2108   
2109  abort$(sum((indicator,linksModelToCalc,transfer_techs,vintage,link_types)
2110          $(accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"useAnnuity") = 1
2111          and accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"amorTime") < 1), 1) > 0 )
2112      "Accounting: Some transfer-per-length technologies use annuities but have no amortization time"
2113   
2114  parameter accounting_annuityFactor_transferPerLength(indicator,linksModel,transfer_techs,vintage,link_types);
2115  accounting_annuityFactor_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types) = 1;
2116   
2117  accounting_annuityFactor_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types)
2118      $accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"useAnnuity")
2119      =
2120      accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"interest")
2121          * (1 + accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"interest"))
2122          ** accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"amorTime")
2123      / ((1 + accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"interest"))
2124          ** accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"amorTime") - 1);
2125   
2127   
INCLUDE    C:\Local\REMix\framework\remix\framework\model\source\methods\mga_pre.gms
2129  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
2130  * SPDX-License-Identifier: BSD-3-Clause
2131   
INCLUDE    C:\Local\REMix\framework\remix\framework\model\source\methods\pareto_pre.gms
2135  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
2136  * SPDX-License-Identifier: BSD-3-Clause
2137   
INCLUDE    C:\Local\REMix\framework\remix\framework\model\source\postcalc\declaration.gms
2141  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
2142  * SPDX-License-Identifier: BSD-3-Clause
2143  * // # Output data
2144  * // This is the reference data model of the REMix output.
2145  * //
2146  * // ## Standard output
2149   
2156   
2158   
2159  set capType / "build", "decom", "total", "lowerLimit", "upperLimit", "total_degraded" /;
2160  set balanceType / "netto", "brutto", "positive", "negative", "flh" /;
2161  set profileType / "upper", "fixed", "lower" /;
2162  set r2a_has_converter_cost(indicator,nodesModel,years,techs,vintage,commodity);
2163   
2164  ** // OUTPUT: indicator_accounting | OEO_00000350:quantity value
2165  * // ### indicator_accounting
2166  * // Title: Accounting indicators Post-calculation
2167  parameter indicator_accounting(accNodesModel,accYears,indicator) "Post-calculation aggregated indicator accounting" ;
2168  * //
2169  ** // OUTPUT: indicator_accounting_ref | OEO_00000350:quantity value
2170  * // ### indicator_accounting_ref
2171  * // Title: Accounting indicators reference
2172  parameter indicator_accounting_ref(accNodesModel,accYears,indicator) "Indicator accounting optimization levels" ;
2173  * //
2174  ** // OUTPUT: indicator_accounting_comp | OEO_00000350:quantity value
2175  * // ### indicator_accounting_comp
2176  * // Title: Accounting indicators composition
2177  parameter indicator_accounting_comp(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a) "Indicator accounting with other indicator composition" ;
2178  * //
2179  ** // OUTPUT: indicator_accounting_detailed | OEO_00000350:quantity value
2180  * // ### indicator_accounting_detailed
2181  * // Title: Accounting indicators detail
2182  parameter indicator_accounting_detailed(indicator,nodesModel,years,techs) "Indicator accounting with technological composition" ;
2183  * //
2184  ** // OUTPUT: indicator_accounting_links | OEO_00000350:quantity value
2185  * // ### indicator_accounting_links
2186  * // Title: Accounting indicators per transfer link
2187  parameter indicator_accounting_links(indicator,nodesModel,nodesModel_a,linksModel,years,techs) "Indicator accounting of transfer technologies" ;
2188  * //
2189  parameter converter_ratedInput(techs,vintage,commodity);
2190  parameter converter_ratedOutput(techs,vintage,commodity);
2191  parameter converter_ratedOutput_min(nodesModel,years,techs,commodity);
2192  parameter converter_ratedOutput_max(nodesModel,years,techs,commodity);
2193   
2194  ** // OUTPUT: converter_caps | OEO_00010257:power capacity
2195  * // ### converter_caps
2196  * // Title: Coverter capacities post-calculation
2197  parameter converter_caps(accNodesModel,accYears,techs,commodity,capType) "Converter capacities, aggregated total" ;
2198  * //
2199  parameter converter_caps_ext(accNodesModel,nodesModel,accYears,years,techs,vintage,commodity,capType);
2200   
2201  ** // OUTPUT: converter_units | OEO_00000350:quantity value
2202  * // ### converter_units
2203  * // Title: Coverter units post-calculation
2204  parameter converter_units(accNodesModel,accYears,techs,vintage,capType) "Converter units" ;
2205  * //
2206  parameter converter_units_ext(accNodesModel,nodesModel,accYears,years,techs,vintage,capType);
2207   
2208  set transfer_usedStartEnd(nodesModel,nodesModel,linksModel,years,techs);
2209  parameter max_transfer_coefficient(techs,commodity);
2210  parameter min_transfer_coefficient(techs,commodity);
2211  ** // OUTPUT: transfer_links | OEO_00000350:quantity value
2212  * // ### transfer_links
2213  * // Title: Transfer post-calculation
2214  parameter transfer_links(linksModel,years,techs,vintage,capType) "Transfer links" ;
2215  * //
2216  ** // OUTPUT: transfer_caps | OEO_00010257:power capacity
2217  * // ### transfer_caps
2218  * // Title: Transfer capacities post-calculation
2219  parameter transfer_caps(nodesModel_start,nodesModel_end,linksModel,years,techs,commodity,capType) "Transfer capacities, aggregated total" ;
2220  * //
2221  ** // OUTPUT: transfer_flows | OEO_00050019:energy amount value
2222  * // ### transfer_flows
2223  * // Title: Transfer hourly flows
2224  parameter transfer_flows(timeModel,nodesModel_start,nodesModel_end,linksModel,years,techs,commodity) "Hourly link flows" ;
2225  * //
2226  ** // OUTPUT: transfer_flows_annual | OEO_00050019:energy amount value
2227  * // ### transfer_flows_annual
2228  * // Title: Transfer annual flows
2229  parameter transfer_flows_annual(nodesModel_start,nodesModel_end,linksModel,years,techs,commodity,balanceType) "Annual link flows" ;
2230  * //
2231  ** // OUTPUT: transfer_losses | OEO_00050019:energy amount value
2232  * // ### transfer_losses
2233  * // Title: Transfer hourly losses
2234  parameter transfer_losses(timeModel,nodesModel_start,nodesModel_end,linksModel,years,techs,commodity) "Hourly link losses" ;
2235  * //
2236  ** // OUTPUT: transfer_losses_annual | OEO_00050019:energy amount value
2237  * // ### transfer_losses_annual
2238  * // Title: Transfer annual losses
2239  parameter transfer_losses_annual(nodesModel_start,nodesModel_end,linksModel,years,techs,commodity,balanceType) "Annual link losses" ;
2240  * //
2241  parameter storage_size_max(nodesModel,years,techs,commodity);
2242  parameter storage_size_min(nodesModel,years,techs,commodity);
2243  ** // OUTPUT: storage_units |  OEO_00000350:quantity value
2244  * // ### storage_units
2245  * // Title: Storage units post-calculation
2246  parameter storage_units(accNodesModel,accYears,techs,vintage,capType) "Storage units" ;
2247  * //
2248  parameter storage_units_ext(accNodesModel,nodesModel,accYears,years,techs,vintage,capType);
2249  ** // OUTPUT: storage_caps | OEO_00230000:energy storage capacity
2250  * // ### storage_caps
2251  * // Title: Storage capacities post-calculation
2252  parameter storage_caps(accNodesModel,accYears,techs,commodity,capType) "Storage capacities, aggregated total" ;
2253  * //
2254  parameter storage_caps_ext(accNodesModel,nodesModel,accYears,years,techs,vintage,commodity,capType);
2255  ** // OUTPUT: storage_level_out | OEO_00330012:energy storage content
2256  * // ### storage_level_out
2257  * // Title: Storage level
2258  parameter storage_level_out(timeModel,accNodesModel,accYears,techs,commodity) "Storage level per time step" ;
2259  * //
2260  parameter storage_level_out_ext(timeModel,accNodesModel,nodesModel,accYears,years,techs,vintage,commodity);
2261  ** // OUTPUT: storage_flows | OEO_00050019:energy amount value
2262  * // ### storage_flows
2263  * // Title: Storage hourly flows
2264  parameter storage_flows(timeModel,accNodesModel,accYears,techs,commodity) "Storage flows per time step" ;
2265  * //
2266  parameter storage_flows_ext(timeModel,accNodesModel,nodesModel,accYears,years,techs,vintage,commodity);
2267  ** // OUTPUT: storage_flows_annual | OEO_00050019:energy amount value
2268  * // ### storage_flows_annual
2269  * // Title: Storage annual flows
2270  parameter storage_flows_annual(accNodesModel,accYears,techs,commodity,balanceType) "Aggregated storage flows" ;
2271  * //
2272  ** // OUTPUT: storage_losses_out | OEO_00050019:energy amount value
2273  * // ### storage_losses_out
2274  * // Title: Storage hourly losses
2275  parameter storage_losses_out(timeModel,accNodesModel,accYears,techs,commodity) "Storage losses per time step" ;
2276  * //
2277  ** // OUTPUT: storage_losses_annual | OEO_00050019:energy amount value
2278  * // ### storage_losses_annual
2279  * // Title: Storage annual losses
2280  parameter storage_losses_annual(accNodesModel,accYears,techs,commodity,balanceType) "Aggregated storage losses" ;
2281  * //
2282  ** // OUTPUT: commodity_balance | OEO_00000350:quantity value
2283  * // ### commodity_balance
2284  * // Title: Hourly commodity balance
2285  parameter commodity_balance(timeModel,accNodesModel,accYears,techs,commodity) "Commodity balances per model hour" ;
2286  parameter commodity_balance_ext(timeModel,accNodesModel,nodesModel,accYears,years,techs,vintage,commodity);
2287  * //
2288  ** // OUTPUT: commodity_balance_annual | OEO_00000350:quantity value
2289  * // ### commodity_balance_annual
2290  * // Title: Annual commodity balance
2291  parameter commodity_balance_annual(accNodesModel,accYears,techs,commodity,balanceType) "Aggregated commodity balances" ;
2292  * //
2293  ** // OUTPUT: marginals_sourcesink_profile | OEO_00040008:marginal cost
2294  * // ### marginals_sourcesink_profile
2295  * // Title: Source-sink marginals
2296  parameter marginals_sourcesink_profile(timeModel,nodesModel,years,techs,commodity) "Source and sink flow marginal values" ;
2297  * //
2298  ** // OUTPUT: marginals_balance | OEO_00040008:marginal cost
2299  * // ### marginals_balance
2300  * // Title: Nodel balance marginals
2301  parameter marginals_balance(timeModel,nodesModel,years,commodity) "Nodal balance marginal values" ;
2302  * //
2303  ** // OUTPUT: marginals_sourcesink_sum | OEO_00040008:marginal cost
2304  * // ### marginals_sourcesink_sum
2305  * // Title: Source-sink annual marginals
2306  parameter marginals_sourcesink_sum(nodesModel,years,techs,commodity) "Annual source and sink flow marginal values" ;
2307  * //
2308  ** // OUTPUT: marginals_indicator_bounds | OEO_00040008:marginal cost
2309  * // ### marginals_indicator_bounds
2310  * // Title: Indicator bounds marginals
2311  parameter marginals_indicator_bounds(accNodesModel,accYears,indicator) "Accounting indicator marginals" ;
2312  * //
2313  * // ## REMix-AMIRIS interface output
2314  * //
2315  ** // OUTPUT: r2a_annuity_cost_converter | OEO_00040009:cost
2316  * // ### r2a_annuity_cost_converter
2317  * // Title: Converter annuity cost
2318  parameter r2a_annuity_cost_converter(indicator,accNodesModel,accYears,techs,vintage,commodity) "Annuity cost of converters" ;
2319  * //
2320  ** // OUTPUT: r2a_spec_cost_converter | OEO_00040009:cost
2321  * // ### r2a_spec_cost_converter
2322  * // Title: Converter specific cost
2323  parameter r2a_spec_cost_converter(indicator,accNodesModel,accYears,techs,vintage,commodity) "Specific cost of converters" ;
2324  * //
2325  ** // OUTPUT: r2a_spec_cost_fuel | OEO_00040009:cost
2326  * // ### r2a_spec_cost_fuel
2327  * // Title: Commodity specific cost
2328  parameter r2a_spec_cost_fuel(indicator,accNodesModel,accYears,techs,commodity) "Specific cost of commodities, used particularly for fuels" ;
2329  * //
2330  ** // OUTPUT: r2a_spec_cost_indicator | OEO_00040009:cost
2331  * // ### r2a_spec_cost_indicator
2332  * // Title: Indicator specific cost
2333  parameter r2a_spec_cost_indicator(indicator,indicator_a,accNodesModel,accYears) "Specific indicator cost" ;
2334  * //
2335  ** // OUTPUT: r2a_converter_efficiencies | OEO_00140050:efficiency value
2336  * // ### r2a_converter_efficiencies
2337  * // Title: Indicator specific cost
2338  parameter r2a_converter_efficiencies(techs,vintage,activity,commodity,commodity_a) "Converter-specific efficiency" ;
2339  * //
2340  ** // OUTPUT: r2a_converter_avail_factor | OEO_00000350:quantity value
2341  * // ### r2a_converter_avail_factor
2342  * // Title: Converter availability factor
2343  parameter r2a_converter_avail_factor(accNodesModel,accYears,techs,vintage) "Availability factor of converter technologies" ;
2344  parameter r2a_converter_avail_profile(timeModel,accNodesModel,accYears,techs,commodity,profileType) "Availability of converter technologies" ;
2345  parameter r2a_converter_avail_profile_ext(timeModel,accNodesModel,nodesModel,accYears,years,techs,vintage,commodity,profileType);
2346  * //
2347  ** // OUTPUT: r2a_storage_e2p | OEO_00000350:quantity value
2348  * // ### r2a_storage_e2p
2349  * // Title: E2P Storage
2350  parameter r2a_storage_e2p(accNodesModel,accYears,techs,vintage,commodity,capType) "Energy-to-power ratio" ;
2351  * //
2352  ** // OUTPUT: r2a_storage_selfdischarge | OEO_00000350:quantity value
2353  * // ### r2a_storage_selfdischarge
2354  * // Title: Storage self discharge rates
2355  parameter r2a_storage_selfdischarge(accNodesModel,accYears,techs,vintage,commodity);
2356   
INCLUDE    C:\Local\REMix\framework\remix\framework\model\source\loadgdx.gms
2360  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
2361  * SPDX-License-Identifier: BSD-3-Clause
2362   
2363  * ==== global settings ====
2365   
2367   
INCLUDE    C:\Local\REMix\framework\remix\framework\model\source\core\converter.gms
2369  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
2370  * SPDX-License-Identifier: BSD-3-Clause
2371   
2372  * // # core_converter
2373  * // The equations in this file describe the converters in the model.
2374   
2375  * // ## Advanced features
2376  * //
2377  * // You can find a more detailed explanation of the %curly_open%ref%curly_close%`MIP features <explanations_mip_label>`.
2378  ** // There is also a more detailed explanation on the modeling of outages at the %curly_open%ref%curly_close%`resilience section <explanations_resilience_label>`.
2379  * //
2380  * // In the following table you can see which modifications you have to make to your data to use the different features.
2381  * //
2382  * // | Feature | Modification |
2383  * // | ------ | ------ |
2384  * // | MIP expansion | The converter_tech_Parameter "mipUnits" has to be set to 1 in converter_techParam.dat for the technologies and years where descrete expansion is wanted |
2385  * // | Minimum up/downtime | The converter_tech_Parameters "minUptime" and/or "minDowntime" need to be set to the according amount of minimum time steps.Furthermore, the converter_tech_Parameter "mipDispatch" has to be set to 1 in converter_techParam.dat
2386  * // for the technologies and years where a minimum up- or downtime should be applied so that the units can be shut down. "mipUnits" will automatically be set to 1 |
2387  * // | Partial load | The converter_tech_Parameter "mipDispatch" has to be set to 1 in converter_techParam.dat for the technologies and years where you want to make use of the partial load feature. You also have to set a value to
2388  * // the converter_coefficient_parameters "minLoad" and/or "maxLoad" for the according technologies, vintages, activities and commodities. You can then for example set different "coefficient" values for each activity in converter_coefficient.dat |
2389  ** // | Outages | You have to include the converter_outageProfile.dat-file and while executing the model you have to set --method=resilience |
2390   
2391  * // ## %curly_open%ref%curly_close%`sets <remix_model_sets_label>`
2392  * //
2393  * // ### set_converter_techs.dat
2394  * // In this file all converter technologies are listed that can be used within your model.
2395  * //
2396  * // ### set_activities.dat
2397  * // All modes with which the converter technologies can be operated need to be added here.
2398  * // Examples: Charge (for the charging mode of a storage), Powergen (for the mode in which a converter produces electricity), Curtailment (for the mode in which a renewable power plant is shut down), …
2399  * // If you would like to use the partial load feature, all activity modes that should be available for this feature need to be defined here as well.
2400  * //
2401  * // ### set_commodities.dat
2402  * // In this file all commodities are listed that can be used and converted by the converter technologies.
2403  * // Examples: Electricity, Coal, Biomass, Hydrogen, …
2404   
2405  * // ## Variables
2406  * // {special_table_converter_variables}
4461   
4462  * ==== loading units from gdx file ====
4463   
4464  * Load units from gdx file
4466   
4467  * ==== calculation of mappings ====
4468   
4469  * Technologies with a lifeTime > 0 are available
4470  set converter_availTech(nodesModel,years,converter_techs,vintage);
4471  converter_availTech(nodesModel,years,converter_techs,vintage)
4472      $(vintage.val = smax(vintage_a$(vintage_a.val <= years.val
4473          and converter_techParam(converter_techs,vintage_a,"lifeTime") > 0), vintage_a.val)) = yes;
4474   
4475  * Technologies to optimize become unavailable if they have an unitsUpperLimit of 0
4476  converter_availTech(nodesModel,years,converter_techs,vintage)
4477      $(yearsToCalc(years) and converter_capacityParam(nodesModel,years,converter_techs,"unitsUpperLimit") = 0 ) = no;
4478   
4479  * Technologies already built become unavailable if they have an unitsBuild of 0
4480  converter_availTech(nodesModel,years,converter_techs,vintage)
4481      $( ( not yearsToCalc(years)) and converter_capacityParam(nodesModel,years,converter_techs,"unitsBuild") = 0 ) = no;
4482   
4483  * Used technologies are available technologies over their technical lifeTime
4484  set converter_usedTech(nodesModel,years,converter_techs,vintage);
4485  converter_usedTech(nodesModel,years,converter_techs,vintage)
4486      $(vintage.val <= years.val
4487          and years.val < smax(years_a$converter_availTech(nodesModel,years_a,converter_techs,vintage),
4488                                  years_a.val + converter_techParam(converter_techs,vintage,"lifeTime"))
4489          ) = yes;
4490   
4491  * Technologies have to be decomissioned in the interval of first avail + lifetime to last avail + lifetime
4492  set converter_decomTech(nodesModel,years,converter_techs,vintage);
4493  converter_decomTech(nodesModel,years,converter_techs,vintage)
4494    $(sum(years_a$converter_usedTech(nodesModel,years_a,converter_techs,vintage), 1)
4495      and sum(yearsToCalc
4496        $(sameas(years, yearsToCalc)
4497          and yearsToCalc.val >= smin(years_a$converter_availTech(nodesModel,years_a,converter_techs,vintage), years_a.val) + converter_techParam(converter_techs,vintage,"lifeTime")
4498          and yearsToCalc.val <= smax(years_a$converter_availTech(nodesModel,years_a,converter_techs,vintage), years_a.val) + converter_techParam(converter_techs,vintage,"lifeTime")), 1))
4499    = yes;
4500   
4501  * Extend the decom frame to the year after the last year of usedTech
4502  converter_decomTech(nodesModel,yearsToCalc,converter_techs,vintage)
4503    $(converter_usedTech(nodesModel,yearsToCalc-1,converter_techs,vintage)
4504      and converter_decomTech(nodesModel,yearsToCalc-1,converter_techs,vintage))
4505    = yes;
4506   
4507  * Mapping for used activities and commodities
4508  set converter_usedActCom(converter_techs,vintage,activity,commodity);
4509  option converter_usedActCom < converter_coefficient;
4510   
4511  set converter_usedAct(converter_techs,vintage,activity);
4512  option converter_usedAct < converter_usedActCom;
4513   
4514  set converter_usedCom(converter_techs,vintage,commodity);
4515  option converter_usedCom < converter_usedActCom;
4516   
4517  set converter_usedTechAct(nodesModel,years,converter_techs,vintage,activity);
4518  converter_usedTechAct(nodesModel,years,converter_techs,vintage,activity)
4519      $(converter_usedTech(nodesModel,years,converter_techs,vintage)
4520          and converter_usedAct(converter_techs,vintage,activity))
4521      = yes;
4522   
4523  set converter_useRampPos(nodesModel,years,converter_techs,vintage);
4524  converter_useRampPos(nodesModelToCalc,yearsToCalc,converter_techs,vintage)
4525    $(sum(indicator$accounting_converterStartup(indicator,nodesModelToCalc,converter_techs,vintage,"perRamp"), 1)
4526      or sum(indicator$accounting_converterStartup(indicator,nodesModelToCalc,converter_techs,vintage,"perRampPos"), 1))
4527    = 1;
4528   
4529  set converter_useRampNeg(nodesModel,years,converter_techs,vintage);
4530  converter_useRampNeg(nodesModelToCalc,yearsToCalc,converter_techs,vintage)
4531    $(sum(indicator$accounting_converterStartup(indicator,nodesModelToCalc,converter_techs,vintage,"perRamp"), 1)
4532      or sum(indicator$accounting_converterStartup(indicator,nodesModelToCalc,converter_techs,vintage,"perRampNeg"), 1))
4533    = 1;
4534   
4535   
4536  * ==== aggregation of profiles ====
4537   
4538  * derive upper and lower profiles then aggregate
4539  set converter_activity_hasProfileIn(nodesData,years,converter_techs,pc_converter_activityProfile);
4540  option converter_activity_hasProfileIn < converter_activityProfileIn;
4541   
4542  set converter_activity_hasProfile(nodesModel,years,converter_techs,pc_converter_activityProfile);
4543  converter_activity_hasProfile(nodesModelToCalc,yearsToCalc,converter_techs,pc_converter_activityProfile)
4544      = sum(nodesData$aggregateNodesModel(nodesData,nodesModelToCalc),
4545              converter_activity_hasProfileIn(nodesData,yearsToCalc,converter_techs,pc_converter_activityProfile));
4546   
4547  set converter_coefficient_hasProfileIn(nodesData,years,converter_techs,vintage,activity,commodity);
4548  option converter_coefficient_hasProfileIn < converter_coefficientProfileIn;
4549   
4550  set converter_coefficient_hasProfile(nodesModel,years,converter_techs,vintage,activity,commodity);
4551  converter_coefficient_hasProfile(nodesModelToCalc,yearsToCalc,converter_techs,vintage,activity,commodity)
4552      = sum(nodesData$aggregateNodesModel(nodesData,nodesModelToCalc),
4553              converter_coefficient_hasProfileIn(nodesData,yearsToCalc,converter_techs,vintage,activity,commodity));
4554   
4555  * aagregate time dimension
4556  parameter converter_activityProfileIn_aggTime(timeModel,nodesData,yearsToCalc,converter_techs,pc_converter_activityProfile);
4557  converter_activityProfileIn_aggTime(timeModelToCalc,nodesData,yearsToCalc,converter_techs,pc_converter_activityProfile)
4558    $converter_activity_hasProfileIn(nodesData,yearsToCalc,converter_techs,pc_converter_activityProfile)
4559    = sum(timeData$timeMapping(timeData,timeModelToCalc),
4560            converter_activityProfileIn(timeData,nodesData,yearsToCalc,converter_techs,pc_converter_activityProfile)
4561            / timeLength(timeModelToCalc));
4562  option clear = converter_activityProfileIn;
4563   
4564  * weighted average for a real sum of units upper limits, plain average if one region has an upper limit of inf
4565  parameter converter_activityProfile(timeModel,nodesModel,years,converter_techs,vintage,pc_converter_activityProfile);
4566  converter_activityProfile(timeModelToCalc,converter_usedTech(nodesModelToCalc,yearsToCalc,converter_techs,vintage),"upper")
4567      = converter_techParam(converter_techs,vintage,"activityUpperLimit");
4568  converter_activityProfile(timeModelToCalc,converter_usedTech(nodesModelToCalc,yearsToCalc,converter_techs,vintage),"lower")
4569      = converter_techParam(converter_techs,vintage,"activityLowerLimit");
4570   
4571   
4572  set converter_finiteUnitLimit(nodesModelToCalc,yearsToCalc,converter_techs);
4573  converter_finiteUnitLimit(nodesModelToCalc,yearsToCalc,converter_techs)
4574      = sum(nodesData$aggregateNodesModel(nodesData,nodesModelToCalc), converter_capacityParamIn(nodesData,yearsToCalc,converter_techs,"unitsUpperLimit")) > 0
4575          and sum(nodesData$aggregateNodesModel(nodesData,nodesModelToCalc), converter_capacityParamIn(nodesData,yearsToCalc,converter_techs,"unitsUpperLimit")) < inf;
4576   
4577  set converter_infiniteUnitLimit(nodesModelToCalc,yearsToCalc,converter_techs);
4578  converter_infiniteUnitLimit(nodesModelToCalc,yearsToCalc,converter_techs)
4579      = sum(nodesData$aggregateNodesModel(nodesData,nodesModelToCalc), converter_capacityParamIn(nodesData,yearsToCalc,converter_techs,"unitsUpperLimit")) = inf;
4580   
4581  converter_activityProfile(timeModelToCalc,converter_usedTech(nodesModelToCalc,yearsToCalc,converter_techs,vintage),pc_converter_activityProfile)
4582      $(converter_activity_hasProfile(nodesModelToCalc,yearsToCalc,converter_techs,pc_converter_activityProfile)
4583          and converter_finiteUnitLimit(nodesModelToCalc,yearsToCalc,converter_techs))
4584      = sum(nodesData$(aggregateNodesModel(nodesData,nodesModelToCalc)
4585                  and converter_capacityParamIn(nodesData,yearsToCalc,converter_techs,"unitsUpperLimit") < inf ),
4586                converter_activityProfileIn_aggTime(timeModelToCalc,nodesData,yearsToCalc,converter_techs,pc_converter_activityProfile)
4587                * converter_capacityParamIn(nodesData,yearsToCalc,converter_techs,"unitsUpperLimit"))
4588      / sum(nodesData$aggregateNodesModel(nodesData,nodesModelToCalc),
4589              converter_capacityParamIn(nodesData,yearsToCalc,converter_techs,"unitsUpperLimit"));
4590   
4591  converter_activityProfile(timeModelToCalc,converter_usedTech(nodesModelToCalc,yearsToCalc,converter_techs,vintage),pc_converter_activityProfile)
4592      $(converter_activity_hasProfile(nodesModelToCalc,yearsToCalc,converter_techs,pc_converter_activityProfile)
4593          and converter_infiniteUnitLimit(nodesModelToCalc,yearsToCalc,converter_techs))
4594      = sum(nodesData$(aggregateNodesModel(nodesData,nodesModelToCalc)
4595                  and converter_capacityParamIn(nodesData,yearsToCalc,converter_techs,"unitsUpperLimit") = inf),
4596                converter_activityProfileIn_aggTime(timeModelToCalc,nodesData,yearsToCalc,converter_techs,pc_converter_activityProfile))
4597      / sum(nodesData$(aggregateNodesModel(nodesData,nodesModelToCalc)
4598                      and converter_capacityParamIn(nodesData,yearsToCalc,converter_techs,"unitsUpperLimit") = inf ),
4599              1);
4600  option clear = converter_activityProfileIn_aggTime;
4601   
4602  * for fixed profiles overwrite upper and lower profile
4603  converter_activityProfile(timeModelToCalc,nodesModelToCalc,yearsToCalc,converter_techs,vintage,"lower")
4604      $converter_activity_hasProfile(nodesModelToCalc,yearsToCalc,converter_techs,"fixed")
4605      = converter_activityProfile(timeModelToCalc,nodesModelToCalc,yearsToCalc,converter_techs,vintage,"fixed");
4606   
4607  converter_activityProfile(timeModelToCalc,nodesModelToCalc,yearsToCalc,converter_techs,vintage,"upper")
4608      $converter_activity_hasProfile(nodesModelToCalc,yearsToCalc,converter_techs,"fixed")
4609      = converter_activityProfile(timeModelToCalc,nodesModelToCalc,yearsToCalc,converter_techs,vintage,"fixed");
4610   
4612   
4613  * weighted average for a real sum of units upper limits, plain average if one region has an upper limit of inf
4614  parameter converter_coefficientProfile(timeModel,nodesModel,years,converter_techs,vintage,activity,commodity);
4615  converter_coefficientProfile(timeModelToCalc,converter_usedTechAct(nodesModelToCalc,yearsToCalc,converter_techs,vintage,activity),commodity)
4616      = converter_coefficient(converter_techs,vintage,activity,commodity,"coefficient");
4617   
4618  converter_coefficientProfile(timeModelToCalc,converter_usedTechAct(nodesModelToCalc,yearsToCalc,converter_techs,vintage,activity),commodity)
4619      $( converter_coefficient_hasProfile(nodesModelToCalc,yearsToCalc,converter_techs,vintage,activity,commodity)
4620          and converter_finiteUnitLimit(nodesModelToCalc,yearsToCalc,converter_techs) )
4621      = sum(nodesData$aggregateNodesModel(nodesData,nodesModelToCalc),
4622            sum(timeData$timeMapping(timeData,timeModelToCalc),
4623                    converter_coefficientProfileIn(timeData,nodesData,yearsToCalc,converter_techs,vintage,activity,commodity))
4624                / timeLength(timeModelToCalc)
4625              * converter_capacityParamIn(nodesData,yearsToCalc,converter_techs,"unitsUpperLimit") )
4626      / sum(nodesData$aggregateNodesModel(nodesData,nodesModelToCalc),
4627              converter_capacityParamIn(nodesData,yearsToCalc,converter_techs,"unitsUpperLimit"));
4628   
4629  converter_coefficientProfile(timeModelToCalc,converter_usedTechAct(nodesModelToCalc,yearsToCalc,converter_techs,vintage,activity),commodity)
4630      $( converter_coefficient_hasProfile(nodesModelToCalc,yearsToCalc,converter_techs,vintage,activity,commodity)
4631          and converter_infiniteUnitLimit(nodesModelToCalc,yearsToCalc,converter_techs))
4632      = sum(nodesData$(aggregateNodesModel(nodesData,nodesModelToCalc)
4633                      and converter_capacityParamIn(nodesData,yearsToCalc,converter_techs,"unitsUpperLimit") = inf ),
4634            sum(timeData$timeMapping(timeData,timeModelToCalc),
4635                    converter_coefficientProfileIn(timeData,nodesData,yearsToCalc,converter_techs,vintage,activity,commodity))
4636                / timeLength(timeModelToCalc))
4637      / sum(nodesData$(aggregateNodesModel(nodesData,nodesModelToCalc)
4638                      and converter_capacityParamIn(nodesData,yearsToCalc,converter_techs,"unitsUpperLimit") = inf ), 1);
4639   
4641   
4642  * ==== prepare partial load behavior parameters ====
4643   
4644  * set disabled max load requirements to 1 to avoid excessive logical expressions later on
4645  alias(commodity, com);
4646  converter_coefficient(converter_techs,vintage,activity,commodity,"maxLoad")
4647      $((converter_coefficient(converter_techs,vintage,activity,commodity,"maxLoad") = 0)
4648        and converter_usedAct(converter_techs,vintage,activity))
4649      = 1;
4650   
4651  * indicate that at least one activity of a technology makes use of partial load behavior
4652  set converter_hasMaxLoad(converter_techs,vintage);
4653  converter_hasMaxLoad(converter_techs,vintage)
4654    = smin((activity,commodity)$converter_usedAct(converter_techs,vintage,activity),
4655              converter_coefficient(converter_techs,vintage,activity,commodity,"maxLoad")) < 1;
4656   
4657  set converter_hasMinLoad(converter_techs,vintage);
4658  converter_hasMinLoad(converter_techs,vintage)
4659    = smax((activity,commodity)$converter_usedAct(converter_techs,vintage,activity),
4660              converter_coefficient(converter_techs,vintage,activity,commodity,"minLoad")) > 0;
4661   
4662  set converter_hasConstantFluxInActivity(converter_techs,vintage);
4663  converter_hasConstantFluxInActivity(converter_techs,vintage)
4664    = sum((activity,commodity)$converter_usedAct(converter_techs,vintage,activity),
4665                          abs(converter_coefficient(converter_techs,vintage,activity,commodity,"constant"))) > 0;
4666   
4667  * setting up a requirements parameter to avoid having to cycle through commodities in equations
4668  set pc_converter_activityRequirements
4669      /
4670      minLoad             "Lower profile for converter activity"
4671      maxLoad             "Upper profile for converter activity"
4672      /;
4673  parameter converter_activityRequirements(converter_techs,vintage,activity,pc_converter_activityRequirements);
4674  converter_activityRequirements(converter_techs,vintage,activity,"minLoad")
4675    = smax(commodity, converter_coefficient(converter_techs,vintage,activity,commodity,"minLoad"));
4676  converter_activityRequirements(converter_techs,vintage,activity,"maxLoad")
4677    = smin(commodity, converter_coefficient(converter_techs,vintage,activity,commodity,"maxLoad"));
4678   
4679  * ==== activate MIP units for MIP dispatch or partial load technologies ====
4680   
4681  set converter_hasMinUptime(converter_techs,vintage);
4682  converter_hasMinUptime(converter_techs,vintage)
4683    $(converter_techParam(converter_techs,vintage,"minUptime")
4684      and converter_techParam(converter_techs,vintage,"mipDispatch"))
4685    = yes;
4686   
4687  set converter_hasMinDowntime(converter_techs,vintage);
4688  converter_hasMinDowntime(converter_techs,vintage)
4689    $(converter_techParam(converter_techs,vintage,"minDowntime")
4690      and converter_techParam(converter_techs,vintage,"mipDispatch"))
4691    = yes;
4692   
4693  * require integer unit counts if online state is to be tracked
4694  converter_techParam(converter_techs,vintage,"mipUnits")
4695      $(converter_techParam(converter_techs,vintage,"mipDispatch")
4696        or converter_hasMinLoad(converter_techs, vintage)
4697        or converter_hasMaxLoad(converter_techs, vintage)
4698        or converter_hasConstantFluxInActivity(converter_techs,vintage))
4699      = 1;
4700   
4701  * ==== floor mip converter units to integer values ====
4702  converter_capacityParam(nodesModelToCalc,yearsToCalc,converter_techs,"unitsLowerLimit")
4703      $sum(vintage, converter_techParam(converter_techs,vintage,"mipUnits"))
4704      = floor(converter_capacityParam(nodesModelToCalc,yearsToCalc,converter_techs,"unitsLowerLimit"));
4705  converter_capacityParam(nodesModelToCalc,yearsToCalc,converter_techs,"unitsUpperLimit")
4706      $sum(vintage, converter_techParam(converter_techs,vintage,"mipUnits"))
4707      = ceil(converter_capacityParam(nodesModelToCalc,yearsToCalc,converter_techs,"unitsUpperLimit"));
4708   
4709  * ==== scalars and sets for minUptime and minDowntime ====
4710   
4711  scalar converter_maxUptimeReq;
4712  converter_maxUptimeReq = smax((converter_techs,vintage), converter_techParam(converter_techs,vintage,"minUptime"));
4713  set uptimeSearchRange(timeModelToCalc);
4714  uptimeSearchRange(timeModelToCalc) = ord(timeModelToCalc) <= converter_maxUptimeReq;
4715   
4716  scalar converter_maxDowntimeReq;
4717  converter_maxDowntimeReq = smax((converter_techs,vintage), converter_techParam(converter_techs,vintage,"minDowntime"));
4718  set downtimeSearchRange(timeModelToCalc);
4719  downtimeSearchRange(timeModelToCalc) = ord(timeModelToCalc) <= converter_maxDowntimeReq;
4720   
4721  * ==== definition of variables ====
4722   
4723  * Initialise variables for unitsBuild
4724  converter_unitsBuild.l(nodesModel,years,converter_techs,vintage)
4725      $converter_availTech(nodesModel,years,converter_techs,vintage)
4726      = converter_capacityParam(nodesModel,years,converter_techs,"unitsBuild");
4727  converter_unitsBuild.lo(nodesModel,yearsToCalc,converter_techs,vintage)
4728      $converter_availTech(nodesModel,yearsToCalc,converter_techs,vintage)
4729      = converter_unitsBuild.l(nodesModel,yearsToCalc,converter_techs,vintage);
4730  converter_unitsBuild.fx(nodesModel,years,converter_techs,vintage)
4731      $converter_capacityParam(nodesModel,years,converter_techs,"noExpansion")
4732      = converter_unitsBuild.l(nodesModel,years,converter_techs,vintage);
4733   
4734  * Initialise variables for unitsDecom
4735  converter_unitsDecom.l(nodesModel,years,converter_techs,vintage)
4736    $(converter_decomTech(nodesModel,years,converter_techs,vintage)
4737      and years.val < sum(yearsToCalc$(ord(yearsToCalc) = 1), yearsToCalc.val))
4738    = sum((years_a,years_aa)$(sameas(years-1, years_aa)
4739                        and years_a.val > years_aa.val - converter_techParam(converter_techs,vintage,'lifeTime')
4740                        and years_a.val <= years.val - converter_techParam(converter_techs,vintage,'lifeTime')
4741                        and converter_availTech(nodesModel,years_a,converter_techs,vintage)),
4742          converter_unitsBuild.l(nodesModel,years_a,converter_techs,vintage));
4743   
4744  converter_unitsDecom.l(nodesModel,yearsToCalc,converter_techs,vintage)
4745    $converter_decomTech(nodesModel,yearsToCalc,converter_techs,vintage)
4746    = sum(years$
4747          (years.val < sum(yearsToCalc_a$(ord(yearsToCalc_a) = 1), yearsToCalc_a.val)
4748            and converter_availTech(nodesModel,years,converter_techs,vintage)
4749            and years.val > sum(years_a$sameas(years_a, yearsToCalc-1), years_a.val) - converter_techParam(converter_techs,vintage,'lifeTime')
4750            and years.val <= yearsToCalc.val - converter_techParam(converter_techs,vintage,'lifeTime')),
4751        converter_unitsBuild.l(nodesModel,years,converter_techs,vintage))
4752      + sum(yearsToCalc_a$
4753          (yearsToCalc_a.val < sum(yearsToCalc_aa$(ord(yearsToCalc_aa) > 1), yearsToCalc_a.val)
4754            and converter_availTech(nodesModel,yearsToCalc_a,converter_techs,vintage)
4755            and yearsToCalc_a.val > sum(years_a$sameas(years_a, yearsToCalc-1), years_a.val) - converter_techParam(converter_techs,vintage,'lifeTime')
4756            and yearsToCalc_a.val <= yearsToCalc.val - converter_techParam(converter_techs,vintage,'lifeTime')),
4757        converter_unitsBuild.l(nodesModel,yearsToCalc_a,converter_techs,vintage));
4758        ;
4759   
4760  converter_unitsDecom.lo(nodesModel,yearsToCalc,converter_techs,vintage)
4761      $(converter_usedTech(nodesModel,yearsToCalc,converter_techs,vintage)
4762          and not converter_techParam(converter_techs,vintage,"freeDecom"))
4763      = converter_unitsDecom.l(nodesModel,yearsToCalc,converter_techs,vintage)
4764   
4765  * Calculate planned unit expansion
4766  parameter converter_unitsPlanned(nodesModel,years,converter_techs,vintage);
4767  converter_unitsPlanned(nodesModel,years,converter_techs,vintage) = 0;
4768  loop(years,
4769    converter_unitsPlanned(nodesModel,years,converter_techs,vintage)
4770      =
4771      converter_unitsPlanned(nodesModel,years-1,converter_techs,vintage)
4772          $converter_usedTech(nodesModel,years-1,converter_techs,vintage)
4773      + converter_unitsBuild.l(nodesModel,years,converter_techs,vintage)
4774          $converter_availTech(nodesModel,years,converter_techs,vintage)
4775      - converter_unitsDecom.l(nodesModel,years,converter_techs,vintage)
4776          $converter_usedTech(nodesModel,years,converter_techs,vintage);
4777  );
4778   
4779  * Set initial state for planned units
4780  converter_unitsTotal.l(nodesModel,years,converter_techs,vintage)
4781    = converter_unitsPlanned(nodesModel,years,converter_techs,vintage)
4782   
4783  * Calculate if planned unit expansion is bounded by upper and lower limits
4784  set converter_unitBoundsFixed(nodesModel,years,converter_techs);
4785  converter_unitBoundsFixed(nodesModel,years,converter_techs)
4786    $(sum(vintage$converter_usedTech(nodesModel,years,converter_techs,vintage),
4787          converter_unitsPlanned(nodesModel,years,converter_techs,vintage))
4788      = converter_capacityParam(nodesModel,years,converter_techs,"unitsUpperLimit")
4789    and sum(vintage$converter_usedTech(nodesModel,years,converter_techs,vintage),
4790          converter_unitsPlanned(nodesModel,years,converter_techs,vintage))
4791      = converter_capacityParam(nodesModel,years,converter_techs,"unitsLowerLimit"))
4792    = yes;
4793   
4794  * Fix unitsBuild, unitsDecom, unitsTotal if levels are predetermined by upper and lower limits
4795  converter_unitsBuild.fx(nodesModel,years,converter_techs,vintage)
4796    $(converter_availTech(nodesModel,years,converter_techs,vintage)
4797      and converter_unitBoundsFixed(nodesModel,years,converter_techs))
4798    = converter_unitsBuild.l(nodesModel,years,converter_techs,vintage);
4799  converter_unitsDecom.fx(nodesModel,years,converter_techs,vintage)
4800    $(converter_usedTech(nodesModel,years,converter_techs,vintage)
4801      and converter_unitBoundsFixed(nodesModel,years,converter_techs))
4802    = converter_unitsDecom.l(nodesModel,years,converter_techs,vintage);
4803  converter_unitsTotal.fx(nodesModel,years,converter_techs,vintage)
4804    $(converter_usedTech(nodesModel,years,converter_techs,vintage)
4805      and converter_unitBoundsFixed(nodesModel,years,converter_techs))
4806    = converter_unitsTotal.l(nodesModel,years,converter_techs,vintage);
4807   
4808  converter_unitsOnline_MIP.up(timeModelToCalc,nodesModel,years,converter_techs,vintage)
4809      $(converter_usedTech(nodesModel,years,converter_techs,vintage)
4810        and converter_techParam(converter_techs,vintage,"mipDispatch") = 1)
4811      = converter_capacityParam(nodesModel,years,converter_techs,"unitsUpperLimit");
4812   
4813  converter_unitsTotal_MIP.up(nodesModel,years,converter_techs,vintage)
4814      $(converter_usedTech(nodesModel,years,converter_techs,vintage)
4815        and converter_techParam(converter_techs,vintage,"mipUnits") = 1)
4816      = converter_capacityParam(nodesModel,years,converter_techs,"unitsUpperLimit");
4817   
4818  converter_unitsUsingActivity_MIP.up(timeModelToCalc,nodesModel,years,converter_techs,vintage,activity)
4819      $(converter_usedTech(nodesModel,years,converter_techs,vintage)
4820        and (converter_hasMinLoad(converter_techs, vintage)
4821              or converter_hasMaxLoad(converter_techs, vintage)))
4822      = converter_capacityParam(nodesModel,years,converter_techs,"unitsUpperLimit");
4823   
4824  * Add parameter for fixing capacities during myopic runs
4825  parameter converter_unitsDelta_upper(nodesModel,years,converter_techs);
4826  parameter converter_unitsDelta_lower(nodesModel,years,converter_techs,vintage);
4827   
4828  * ==== declaration of equations ====
4829   
4830  equations
4831    Eq_converter_unitsBalance(nodesModel,years,converter_techs,vintage
4832      ) "Ensures the units balance over the planning period."
4833    Eq_converter_unitsFixedDecom(nodesModel,years,converter_techs,vintage
4834      ) "Restricts the fixed decommissioning of units over the planning period."
4835    Eq_converter_unitsFreeDecom(nodesModel,years,converter_techs,vintage
4836      ) "Restricts the free decommissioning of units over the planning period."
4837    Eq_converter_unitsUpperLimit(nodesModel,years,converter_techs
4838      ) "Upper bound for the total number of units."
4839    Eq_converter_unitsLowerLimit(nodesModel,years,converter_techs
4840      ) "Lower bound for the total number of units."
4841    Eq_converter_unitsFixedLimit(nodesModel,years,converter_techs
4842      ) "Fixed bound for the total number of units."
4843    Eq_converter_unitsTotalMIP(nodesModel,years,converter_techs,vintage
4844      ) "Fixes the total number of units to the corresponding integer variable."
4845    Eq_converter_unitsOnlineMIP(timeModel,nodesModel,years,converter_techs,vintage
4846      ) "Fixes the number of online units to the corresponding integer variable."
4847   
4848    Eq_converter_activityLowerLimit(timeModel,nodesModel,years,converter_techs,vintage
4849      ) "Lower limit on the activity."
4850    Eq_converter_activityUpperLimit(timeModel,nodesModel,years,converter_techs,vintage
4851      ) "Upper limit on the activity."
4852   
4853    Eq_converter_activityFixedLimit(timeModel,nodesModel,years,converter_techs,vintage
4854      ) "Fixed limit on the activity."
4855    Eq_converter_rampPos(timeModel,nodesModel,years,converter_techs,vintage
4856      ) "Positive ramping of unit activity."
4857    Eq_converter_rampNeg(timeModel,nodesModel,years,converter_techs,vintage
4858      ) "Negative ramping of unit activity."
4859    Eq_converter_rampLimit(timeModel,nodesModel,years,converter_techs,vintage
4860      ) "Restrict ramping up of unit activity."
4861   
4862    Eq_converter_unitsOnline(timeModel,nodesModel,years,converter_techs,vintage
4863      ) "Set online units to total number of operational units."
4864    Eq_converter_unitsOnlineUC(timeModel,nodesModel,years,converter_techs,vintage
4865      ) "Allow shutting down units."
4866    Eq_converter_activityStartups(timeModel,nodesModel,years,converter_techs,vintage
4867      ) "Variable counting the number of unit startups."
4868    Eq_converter_activityShutdowns(timeModel,nodesModel,years,converter_techs,vintage
4869      ) "Variable tracking the number of unit shutdowns."
4870    Eq_converter_limitStartups(nodesModel,years,converter_techs,vintage
4871      ) "Limit the number of startup cycles a unit can perform."
4872    Eq_converter_minUptime(timeModel,nodesModel,years,converter_techs,vintage
4873      ) "Require recently started units to remain online for their respective minimum uptime."
4874    Eq_converter_minDowntime(timeModel,nodesModel,years,converter_techs,vintage
4875      ) "Require recently shut down units to remain offline for their respective minimum downtime."
4876    Eq_converter_activityUpperLimitDetailedPartLoadMinReq(timeModel,nodesModel,years,converter_techs,vintage,activity
4877      ) "Limit activity coefficients of activities with a given load requirement or stricter to the number of units in such modes."
4878    Eq_converter_activityUpperLimitDetailedPartLoadMaxReq(timeModel,nodesModel,years,converter_techs,vintage,activity
4879      ) "Limit activity coefficients of activities with a given load requirement or stricter to the number of units in such modes."
4880    Eq_converter_activityLowerLimitDetailedPartLoadMinReq(timeModel,nodesModel,years,converter_techs,vintage,activity
4881      ) "Enforce sufficient activity coefficients of activities to justify all active modes."
4882    Eq_converter_noOnlineIdle(timeModel,nodesModel,years,converter_techs,vintage
4883      ) "Prevent the circumvention of requirements by keeping units online without using any modes."
4884    Eq_converter_noOnlineIdleDetailedPartLoad(timeModel,nodesModel,years,converter_techs,vintage
4885      ) "Prevent the circumvention of requirements by keeping units online without using any modes. Allow more than one mode activation per unit."
4886    Eq_converter_activityUpperLimitPartLoad(timeModel,nodesModel,years,converter_techs,vintage,activity
4887      ) "Limit usage of an activity to corresponding units."
4888    Eq_converter_activityLowerLimitPartLoad(timeModel,nodesModel,years,converter_techs,vintage,activity
4889      ) "Limit usage of an activity to corresponding units."
4890    Eq_converter_activityModeLimit(timeModel,nodesModel,years,converter_techs,vintage,activity
4891      ) "Limit the number of units in one particular mode to the number of operational units."
4892    ;
4893   
4894  * ==== equation definition ====
4895  * // ## Equations
4896  * // ### Converter Units Balance
4897  * // Ensures that the total units are consistent with the built and decommissioned units.
4898  * // {Eq_converter_unitsBalance}
4899  Eq_converter_unitsBalance(nodesModelSel,yearsSel,converter_techs,vintage)
4900      $((converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
4901            or sum(years$sameas(years,yearsSel), converter_usedTech(nodesModelSel,years-1,converter_techs,vintage)))
4902          and not converter_unitBoundsFixed(nodesModelSel,yearsSel,converter_techs))
4903      ..
4904      converter_unitsTotal(nodesModelSel,yearsSel,converter_techs,vintage)
4905      =e=
4906      sum(yearsToCalc$(ord(yearsToCalc) = 1 and sameas(yearsToCalc, yearsSel)),
4907        sum(years$sameas(years, yearsToCalc),
4908          converter_unitsTotal(nodesModelSel,years-1,converter_techs,vintage)
4909            $converter_usedTech(nodesModelSel,years-1,converter_techs,vintage)))
4910      + sum((yearsToCalc)$(ord(yearsToCalc) > 1 and sameas(yearsToCalc, yearsSel)),
4911        converter_unitsTotal(nodesModelSel,yearsToCalc-1,converter_techs,vintage)
4912          $converter_usedTech(nodesModelSel,yearsToCalc-1,converter_techs,vintage))
4913      + converter_unitsBuild(nodesModelSel,yearsSel,converter_techs,vintage)
4914          $converter_availTech(nodesModelSel,yearsSel,converter_techs,vintage)
4915      - converter_unitsDecom(nodesModelSel,yearsSel,converter_techs,vintage)
4916          $converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage);
4917   
4918  * // ### Converter Units Fixed Decommission
4919  * // Restricts the fixed decommissioning of units over the planning period.
4920  * // {Eq_converter_unitsFixedDecom}
4921  Eq_converter_unitsFixedDecom(nodesModelSel,yearsSel,converter_techs,vintage)
4922      $(converter_decomTech(nodesModelSel,yearsSel,converter_techs,vintage)
4923          and not converter_techParam(converter_techs,vintage,"freeDecom") = 1
4924          and not converter_unitBoundsFixed(nodesModelSel,yearsSel,converter_techs))
4925      ..
4926      converter_unitsDecom(nodesModelSel,yearsSel,converter_techs,vintage)
4927      + converter_unitsDelta_lower(nodesModelSel,yearsSel,converter_techs,vintage)
4928      =e=
4929      sum(years$
4930          (converter_availTech(nodesModelSel,years,converter_techs,vintage)
4931            and years.val > sum(yearsToCalc$sameas(yearsToCalc+1, yearsSel), yearsToCalc.val) - converter_techParam(converter_techs,vintage,'lifeTime')
4932            and years.val <= yearsSel.val - converter_techParam(converter_techs,vintage,'lifeTime')),
4933        converter_unitsBuild(nodesModelSel,years,converter_techs,vintage));
4934   
4935  * // ### Converter Units Free Decommission
4936  * // Restricts the free decommissioning of units over the planning period.
4937  * // {Eq_converter_unitsFreeDecom}
4938  Eq_converter_unitsFreeDecom(nodesModelSel,yearsSel,converter_techs,vintage)
4939      $((converter_decomTech(nodesModelSel,yearsSel,converter_techs,vintage)
4940          or converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage))
4941          and converter_techParam(converter_techs,vintage,"freeDecom") = 1)
4942      ..
4943      sum(years$
4944            ((converter_decomTech(nodesModelSel,years,converter_techs,vintage)
4945              or converter_usedTech(nodesModelSel,years,converter_techs,vintage))
4946              and years.val < sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)),
4947          converter_unitsDecom(nodesModelSel,years,converter_techs,vintage))
4948      + sum(yearsToCalc$
4949            ((converter_decomTech(nodesModelSel,yearsToCalc,converter_techs,vintage)
4950              or converter_usedTech(nodesModelSel,yearsToCalc,converter_techs,vintage))
4951              and yearsToCalc.val >= sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
4952              and yearsToCalc.val <= yearsSel.val),
4953          converter_unitsDecom(nodesModelSel,yearsToCalc,converter_techs,vintage))
4954      =g=
4955      sum(years$
4956            (converter_availTech(nodesModelSel,years,converter_techs,vintage)
4957              and years.val < sum(yearsToCalc$(ord(yearsToCalc)=1), yearsToCalc.val) - converter_techParam(converter_techs,vintage,'lifeTime')),
4958          converter_unitsBuild(nodesModelSel,years,converter_techs,vintage))
4959      + sum(yearsToCalc$
4960            (converter_availTech(nodesModelSel,yearsToCalc,converter_techs,vintage)
4961              and yearsToCalc.val >= sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
4962              and yearsToCalc.val <= yearsSel.val - converter_techParam(converter_techs,vintage,'lifeTime')),
4963          converter_unitsBuild(nodesModelSel,yearsToCalc,converter_techs,vintage));
4964   
4965  * // ### Converter Units Upper Limit
4966  * // Upper bound for the total number of units.
4967  * // {Eq_converter_unitsUpperLimit}
4968  Eq_converter_unitsUpperLimit(nodesModelSel,yearsSel,converter_techs)
4969      $(converter_capacityParam(nodesModelSel,yearsSel,converter_techs,'unitsUpperLimit') >= 0
4970          and converter_capacityParam(nodesModelSel,yearsSel,converter_techs,'unitsUpperLimit') < +inf
4971          and converter_capacityParam(nodesModelSel,yearsSel,converter_techs,'unitsUpperLimit')
4972              <> converter_capacityParam(nodesModelSel,yearsSel,converter_techs,'unitsLowerLimit'))
4973      ..
4974      sum(vintage$converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage),
4975          converter_unitsTotal(nodesModelSel,yearsSel,converter_techs,vintage))
4976      =l=
4977      converter_capacityParam(nodesModelSel,yearsSel,converter_techs,"unitsUpperLimit");
4978   
4979  * // ### Converter Units Lower Limit
4980  * // Lower bound for the total number of units.
4981  * // {Eq_converter_unitsLowerLimit}
4982  Eq_converter_unitsLowerLimit(nodesModelSel,yearsSel,converter_techs)
4983      $(converter_capacityParam(nodesModelSel,yearsSel,converter_techs,'unitsLowerLimit') > 0
4984          and converter_capacityParam(nodesModelSel,yearsSel,converter_techs,'unitsLowerLimit')
4985              <> converter_capacityParam(nodesModelSel,yearsSel,converter_techs,'unitsUpperLimit'))
4986      ..
4987      sum(vintage$converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage),
4988          converter_unitsTotal(nodesModelSel,yearsSel,converter_techs,vintage))
4989      =g=
4990      converter_capacityParam(nodesModelSel,yearsSel,converter_techs,"unitsLowerLimit");
4991   
4992  Eq_converter_unitsFixedLimit(nodesModelSel,yearsSel,converter_techs)
4993      $(converter_capacityParam(nodesModelSel,yearsSel,converter_techs,'unitsLowerLimit')
4994          = converter_capacityParam(nodesModelSel,yearsSel,converter_techs,'unitsUpperLimit'))
4995      ..
4996      sum(vintage$converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage),
4997          converter_unitsTotal(nodesModelSel,yearsSel,converter_techs,vintage))
4998      =e=
4999      converter_capacityParam(nodesModelSel,yearsSel,converter_techs,"unitsUpperLimit");
5000   
5001  * // ### Converter Units Total MIP
5002  * // Fixes the total number of units to the corresponding integer variable.
5003  * // {Eq_converter_unitsTotalMIP}
5004  Eq_converter_unitsTotalMIP(nodesModelSel,yearsSel,converter_techs,vintage)
5005      $( converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
5006          and converter_techParam(converter_techs,vintage,"mipUnits") = 1 )
5007      ..
5008      converter_unitsTotal(nodesModelSel,yearsSel,converter_techs,vintage)
5009      =e=
5010      converter_unitsTotal_MIP(nodesModelSel,yearsSel,converter_techs,vintage);
5011   
5012  * // ### Converter Units Online MIP
5013  * // Fixes the number of online units to the corresponding integer variable.
5014  * // {Eq_converter_unitsOnlineMIP}
5015  Eq_converter_unitsOnlineMIP(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
5016      $( converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
5017          and converter_techParam(converter_techs,vintage,"mipDispatch") = 1 )
5018      ..
5019      converter_unitsOnline(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
5020      =e=
5021      converter_unitsOnline_MIP(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage);
5022   
5023  * // ### Converter Activity Lower Limit
5024  * // Lower limit on the activity.
5025  * // {Eq_converter_activityLowerLimit}
5026  Eq_converter_activityLowerLimit(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
5027      $(converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
5028          and converter_activityProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,"lower") > 0
5029          and converter_activityProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,"lower")
5030               <> converter_activityProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,"upper")
5031          and not converter_hasMinLoad(converter_techs, vintage))
5032      ..
5033      sum(activity$converter_usedAct(converter_techs,vintage,activity),
5034          converter_activity(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity)
5035      )
5036      =g=
5037      converter_activityProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,"lower")
5039      * converter_unitsOnline(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage);
5041   
5042  * // ### Converter Activity Upper Limit
5043  * // Upper limit on the activity.
5044  * // {Eq_converter_activityUpperLimit}
5045  Eq_converter_activityUpperLimit(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
5046      $(converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
5047          and converter_activityProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,"upper") >= 0
5048          and converter_activityProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,"upper")
5049               <> converter_activityProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,"lower"))
5050      ..
5051      sum(activity$converter_usedAct(converter_techs,vintage,activity),
5052          converter_activity(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity)
5053      )
5054      =l=
5055      converter_activityProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,"upper")
5057      * converter_unitsOnline(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage);
5059   
5060  Eq_converter_activityFixedLimit(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
5061      $(converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
5062          and converter_activityProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,"lower")
5063               = converter_activityProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,"upper"))
5064      ..
5065      sum(activity$converter_usedAct(converter_techs,vintage,activity),
5066          converter_activity(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity)
5067      )
5068      =e=
5069      converter_activityProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,"upper")
5071      * converter_unitsOnline(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage);
5073   
5074  * // ### Converter Positive Ramping
5075  * // Positive ramping of unit activity.
5076  * // {Eq_converter_rampPos}
5077  Eq_converter_rampPos(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,converter_techs,vintage)
5078    $( converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
5079        and converter_useRampPos(nodesModelSel,yearsSel,converter_techs,vintage))
5080      ..
5081      converter_rampPos(timeModelToCalc,nodesModelSel,yearsSel,converter_techs,vintage)
5082      =g=
5083      sum(activity$converter_usedAct(converter_techs,vintage,activity),
5084              converter_activity(timeModelToCalc,nodesModelSel,yearsSel,converter_techs,vintage,activity)
5085              - converter_activity(timeModelToCalc--1,nodesModelSel,yearsSel,converter_techs,vintage,activity));
5086   
5087  * // ### Converter Negative Ramping
5088  * // Negative ramping of unit activity.
5089  * // {Eq_converter_rampNeg}
5090  Eq_converter_rampNeg(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,converter_techs,vintage)
5091    $( converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
5092        and converter_useRampNeg(nodesModelSel,yearsSel,converter_techs,vintage))
5093      ..
5094      converter_rampNeg(timeModelToCalc,nodesModelSel,yearsSel,converter_techs,vintage)
5095      =g=
5096      - sum(activity$converter_usedAct(converter_techs,vintage,activity),
5097              converter_activity(timeModelToCalc,nodesModelSel,yearsSel,converter_techs,vintage,activity)
5098              - converter_activity(timeModelToCalc--1,nodesModelSel,yearsSel,converter_techs,vintage,activity));
5099   
5100  * // ### Converter Ramping Limit
5101  * // Restrict ramping up of unit activity.
5102  * // {Eq_converter_rampLimit}
5103  Eq_converter_rampLimit(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,converter_techs,vintage)
5104    $( converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
5105          and converter_techParam(converter_techs,vintage,"activityRampLimit") > 0)
5106      ..
5107      sum(activity$converter_usedAct(converter_techs,vintage,activity),
5108              converter_activity(timeModelToCalc,nodesModelSel,yearsSel,converter_techs,vintage,activity)
5109              - converter_activity(timeModelToCalc--1,nodesModelSel,yearsSel,converter_techs,vintage,activity))
5110    =l=
5111    converter_techParam(converter_techs,vintage,"activityRampLimit")
5113      * converter_unitsOnline(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage);
5115   
5116   
5118   
5119  * // ### Converter MIP Units Online
5120  * // Restrict ramping up of unit activity.
5121  * // {Eq_converter_unitsOnline}
5122  Eq_converter_unitsOnline(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
5123      $( converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
5124          and converter_techParam(converter_techs,vintage,"mipDispatch") = 0 )
5125    ..
5126    converter_unitsOnline(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
5127    =e=
5128    converter_unitsTotal(nodesModelSel,yearsSel,converter_techs,vintage)
5129      ;
5130   
5131  * // ### Converter MIP Units Shutting Down
5132  * // Allow shutting down units.
5133  * // {Eq_converter_unitsOnlineUC}
5134  Eq_converter_unitsOnlineUC(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
5135      $( converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
5136          and converter_techParam(converter_techs,vintage,"mipDispatch") = 1 )
5137    ..
5138    converter_unitsOnline(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
5139    =l=
5140    converter_unitsTotal(nodesModelSel,yearsSel,converter_techs,vintage)
5141      ;
5143   
5144  * // ### Converter Activity Startups
5145  * // Variable counting the number of unit startups.
5146  * // {Eq_converter_activityStartups}
5147  Eq_converter_activityStartups(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,converter_techs,vintage)
5148    $( converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
5149          and converter_techParam(converter_techs,vintage,"mipDispatch") = 1 )
5150      ..
5151      converter_unitStartups(timeModelToCalc,nodesModelSel,yearsSel,converter_techs,vintage)
5152      =g=
5153          converter_unitsOnline(timeModelToCalc,nodesModelSel,yearsSel,converter_techs,vintage)
5154      - converter_unitsOnline(timeModelToCalc--1,nodesModelSel,yearsSel,converter_techs,vintage);
5155   
5156  * // ### Converter Activity Shutdowns
5157  * // Variable tracking the number of unit shutdowns.
5158  * // {Eq_converter_activityShutdowns}
5159  Eq_converter_activityShutdowns(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,converter_techs,vintage)
5160    $( converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
5161          and converter_techParam(converter_techs,vintage,"mipDispatch") = 1
5162          and converter_techParam(converter_techs,vintage,"minDowntime") > 0)
5163      ..
5164      converter_unitShutdowns(timeModelToCalc,nodesModelSel,yearsSel,converter_techs,vintage)
5165      =g=
5166          converter_unitsOnline(timeModelToCalc--1,nodesModelSel,yearsSel,converter_techs,vintage)
5167      - converter_unitsOnline(timeModelToCalc,nodesModelSel,yearsSel,converter_techs,vintage);
5168   
5169  * // ### Converter Activity Startup Limit
5170  * // Limit the number of startup cycles a unit can perform.
5171  * // {Eq_converter_limitStartups}
5172  Eq_converter_limitStartups(nodesModelSel,yearsSel,converter_techs,vintage)
5173    $( converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
5174          and converter_techParam(converter_techs,vintage,"mipDispatch") = 1
5175      and converter_techParam(converter_techs,vintage,"startupLimit") > 0)
5176      ..
5177      sum(timeModelToCalc, converter_unitStartups(timeModelToCalc,nodesModelSel,yearsSel,converter_techs,vintage))
5178    =l=
5179    converter_techParam(converter_techs,vintage,"startupLimit")
5180    * converter_unitsTotal(nodesModelSel,yearsSel,converter_techs,vintage);
5181   
5182  alias(timeModelToCalc,ttc);
5183   
5184  * // ### Converter Units Minimum Uptime
5185  * // Require recently started units to remain online for their respective minimum uptime.
5186  * // {Eq_converter_minUptime}
5187  Eq_converter_minUptime(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,converter_techs,vintage)
5188    $( converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
5189          and converter_techParam(converter_techs,vintage,"mipDispatch") = 1
5190      and converter_techParam(converter_techs,vintage,"minUptime") > 0)
5191      ..
5192      sum(ttc$[uptimeSearchRange(ttc) and ord(ttc)<=converter_techParam(converter_techs,vintage,"minUptime")],
5193          converter_unitStartups(ttc+[ord(timeModelToCalc)-converter_techParam(converter_techs,vintage,"minUptime")],
5194              nodesModelSel,yearsSel,converter_techs,vintage))
5195          =l=
5196          converter_unitsOnline(timeModelToCalc,nodesModelSel,yearsSel,converter_techs,vintage);
5197   
5198  * // ### Converter Units Minimum Downtime
5199  * // Require recently shut down units to remain offline for their respective minimum downtime.
5200  * // {Eq_converter_minDowntime}
5201  Eq_converter_minDowntime(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,converter_techs,vintage)
5202    $( converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
5203          and converter_techParam(converter_techs,vintage,"mipDispatch") = 1
5204      and converter_techParam(converter_techs,vintage,"minDowntime") > 0)
5205      ..
5206      sum(ttc$[downtimeSearchRange(ttc) and ord(ttc)<=converter_techParam(converter_techs,vintage,"minDowntime")],
5207          converter_unitShutdowns(ttc+[ord(timeModelToCalc)-converter_techParam(converter_techs,vintage,"minDowntime")],
5208              nodesModelSel,yearsSel,converter_techs,vintage))
5209          =l=
5210          converter_unitsTotal(nodesModelSel,yearsSel,converter_techs,vintage)
5211      - converter_unitsOnline(timeModelToCalc,nodesModelSel,yearsSel,converter_techs,vintage);
5212   
5213  * This equation is meant to cause the units to activate particular mode counters to gain access to the corresponding activities.
5214  * Activities are allowed to be used on units with stricter activity requirements but not the other way around.
5215  alias(activity, act);
5216   
5217  * // ### Converter MIP Units Activity Upper Limit Minimum Required Load
5218  * // Limit activity coefficients of activities with a given load requirement or stricter to the number of units in such modes.
5219  * // {Eq_converter_activityUpperLimitDetailedPartLoadMinReq}
5220  Eq_converter_activityUpperLimitDetailedPartLoadMinReq(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity)
5221    $( converter_usedTechAct(nodesModelSel,yearsSel,converter_techs,vintage,activity)
5222          and converter_hasMinLoad(converter_techs, vintage)
5223          and converter_techParam(converter_techs,vintage,"mipDetailedPartialLoad"))
5224      ..
5225      sum(act$(converter_activityRequirements(converter_techs,vintage,act,"minLoad")
5226                  >= converter_activityRequirements(converter_techs,vintage,activity,"minLoad")
5227               and converter_usedAct(converter_techs,vintage,act)),
5228      converter_activity(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,act))
5229    =l=
5230    converter_activityProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,"upper")
5231      * sum(act$(converter_activityRequirements(converter_techs,vintage,act,"minLoad")
5232                  >= converter_activityRequirements(converter_techs,vintage,activity,"minLoad")
5233                 and converter_usedAct(converter_techs,vintage,act)),
5234      converter_unitsUsingActivity_MIP(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,act));
5235   
5236  * // ### Converter MIP Units Activity Upper Limit Maximum Required Load
5237  * // Limit activity coefficients of activities with a given load requirement or stricter to the number of units in such modes.
5238  * // {Eq_converter_activityUpperLimitDetailedPartLoadMaxReq}
5239  Eq_converter_activityUpperLimitDetailedPartLoadMaxReq(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity)
5240    $( converter_usedTechAct(nodesModelSel,yearsSel,converter_techs,vintage,activity)
5241          and converter_hasMaxLoad(converter_techs,vintage)
5242          and converter_techParam(converter_techs,vintage,"mipDetailedPartialLoad"))
5243      ..
5244      sum(act$(converter_activityRequirements(converter_techs,vintage,act,"maxLoad")
5245                  <= converter_activityRequirements(converter_techs,vintage,activity,"maxLoad")
5246               and converter_usedAct(converter_techs,vintage,act)),
5247      converter_activity(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,act))
5248    =l=
5249      sum(act$(converter_activityRequirements(converter_techs,vintage,act,"maxLoad")
5250                  <= converter_activityRequirements(converter_techs,vintage,activity,"maxLoad")
5251               and converter_usedAct(converter_techs,vintage,act)),
5252      min(converter_activityRequirements(converter_techs,vintage,act,"maxLoad"),
5253            converter_activityProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,"upper"))
5254            * converter_unitsUsingActivity_MIP(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,act));
5255   
5256  * This equation is meant to enforce the lower limit requirements of activities in use.
5257  * Loads produced by activities with less strict requirements can contribute to the minimum load requirement of strict activities but not the other way around,
5258  * because these activities can only run on units in the respectively strict activation state.
5259   
5260  * // ### Converter MIP Units Activity Lower Limit Minimum Required Load
5261  * // Enforce sufficient activity coefficients of activities to justify all active modes.
5262  * // {Eq_converter_activityLowerLimitDetailedPartLoadMinReq}
5263  Eq_converter_activityLowerLimitDetailedPartLoadMinReq(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity)
5264    $( converter_usedTechAct(nodesModelSel,yearsSel,converter_techs,vintage,activity)
5265          and converter_hasMinLoad(converter_techs, vintage)
5266          and converter_techParam(converter_techs,vintage,"mipDetailedPartialLoad"))
5267      ..
5268      sum(act$(converter_activityRequirements(converter_techs,vintage,act,"minLoad")
5269                  <= converter_activityRequirements(converter_techs,vintage,activity,"minLoad")
5270               and converter_usedAct(converter_techs,vintage,act)),
5271      converter_activity(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,act))
5272    =g=
5273      sum(act$(converter_activityRequirements(converter_techs,vintage,act,"minLoad")
5274                  <= converter_activityRequirements(converter_techs,vintage,activity,"minLoad")
5275               and converter_usedAct(converter_techs,vintage,act)),
5276      max(converter_activityRequirements(converter_techs,vintage,act,"minLoad"),
5277            converter_activityProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,"lower"))
5278            * converter_unitsUsingActivity_MIP(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,act));
5279   
5280   
5281  * Simple one-activity-per-unit partial load equations
5282  * // ### Converter MIP Units Activity Upper Limit Partial Load Balance
5283  * // Enforce MIP units partial load upper limit.
5284  * // {Eq_converter_activityUpperLimitPartLoad}
5285  Eq_converter_activityUpperLimitPartLoad(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity)
5286    $( converter_usedTechAct(nodesModelSel,yearsSel,converter_techs,vintage,activity)
5287          and (converter_hasMinLoad(converter_techs, vintage)
5288                or converter_hasMaxLoad(converter_techs, vintage)
5289                or converter_hasConstantFluxInActivity(converter_techs, vintage))
5290          and not converter_techParam(converter_techs,vintage,"mipDetailedPartialLoad"))
5291      ..
5292      converter_activity(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity)
5293    =l=
5294    min(converter_activityRequirements(converter_techs,vintage,activity,"maxLoad"),
5295          converter_activityProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,"upper"))
5296          * converter_unitsUsingActivity_MIP(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity);
5297   
5298  * // ### Converter MIP Units Activity Lower Limit Partial Load Balance
5299  * // Enforce MIP units partial load lower limit.
5300  * // {Eq_converter_activityLowerLimitPartLoad}
5301  Eq_converter_activityLowerLimitPartLoad(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity)
5302    $( converter_usedTechAct(nodesModelSel,yearsSel,converter_techs,vintage,activity)
5303          and (converter_hasMinLoad(converter_techs, vintage)
5304                or converter_hasMaxLoad(converter_techs, vintage))
5305          and not converter_techParam(converter_techs,vintage,"mipDetailedPartialLoad"))
5306      ..
5307      converter_activity(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity)
5308    =g=
5309    max(converter_activityRequirements(converter_techs,vintage,activity,"minLoad"),
5310          converter_activityProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,"lower"))
5311          * converter_unitsUsingActivity_MIP(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity);
5312   
5313  * // ### Converter MIP Units Idle Online Units
5314  * // Counts idle online units at every time step
5315  * // {Eq_converter_noOnlineIdle}
5316  Eq_converter_noOnlineIdle(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
5317    $( converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
5318          and (converter_hasMinLoad(converter_techs, vintage)
5319              or converter_hasMaxLoad(converter_techs, vintage)
5320              or converter_hasConstantFluxInActivity(converter_techs,vintage))
5321          and not converter_techParam(converter_techs,vintage,"mipDetailedPartialLoad"))
5322      ..
5323      converter_unitsOnline(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
5324      =e=
5325      sum(activity$converter_usedAct(converter_techs,vintage,activity),
5326            converter_unitsUsingActivity_MIP(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity));
5327   
5328  * // ### Converter MIP Units Idle Online Units Partial load
5329  * // Counts idle online units at every time step
5330  * // {Eq_converter_noOnlineIdleDetailedPartLoad}
5331  Eq_converter_noOnlineIdleDetailedPartLoad(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
5332    $( converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
5333          and (converter_hasMinLoad(converter_techs, vintage)
5334                  or converter_hasMaxLoad(converter_techs, vintage))
5335          and converter_techParam(converter_techs,vintage,"mipDetailedPartialLoad"))
5336      ..
5337      converter_unitsOnline(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
5338      =l=
5339      sum(activity$converter_usedAct(converter_techs,vintage,activity),
5340            converter_unitsUsingActivity_MIP(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity));
5341   
5342  * // ### Converter MIP activity model limit
5343  * // Converter activity model limit
5344  * // {Eq_converter_activityModeLimit}
5345  Eq_converter_activityModeLimit(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity)
5346    $( converter_usedTechAct(nodesModelSel,yearsSel,converter_techs,vintage,activity)
5347          and (converter_hasMinLoad(converter_techs, vintage)
5348                or converter_hasMaxLoad(converter_techs, vintage))
5349          and converter_techParam(converter_techs,vintage,"mipDetailedPartialLoad"))
5350      ..
5351      converter_unitsOnline(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
5352      =g=
5353      converter_unitsUsingActivity_MIP(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity);
5354   
5355  * ==== model definition ====
5356   
5357  Model M_converter
5358  /
5359    Eq_converter_unitsBalance
5360    Eq_converter_unitsFixedDecom
5361    Eq_converter_unitsFreeDecom
5362    Eq_converter_unitsUpperLimit
5363    Eq_converter_unitsLowerLimit
5364    Eq_converter_unitsFixedLimit
5365    Eq_converter_unitsTotalMIP
5366    Eq_converter_unitsOnlineMIP
5367    Eq_converter_activityUpperLimit
5368    Eq_converter_activityLowerLimit
5369    Eq_converter_activityFixedLimit
5370    Eq_converter_rampPos
5371    Eq_converter_rampNeg
5372    Eq_converter_rampLimit
5374    Eq_converter_unitsOnline
5375    Eq_converter_unitsOnlineUC
5377    Eq_converter_activityStartups
5378    Eq_converter_activityShutdowns
5379    Eq_converter_limitStartups
5380    Eq_converter_minUptime
5381    Eq_converter_minDowntime
5382    Eq_converter_activityUpperLimitDetailedPartLoadMinReq
5383    Eq_converter_activityUpperLimitDetailedPartLoadMaxReq
5384    Eq_converter_activityLowerLimitDetailedPartLoadMinReq
5385    Eq_converter_activityUpperLimitPartLoad
5386    Eq_converter_activityLowerLimitPartLoad
5387    Eq_converter_noOnlineIdle
5388    Eq_converter_noOnlineIdleDetailedPartLoad
5389    Eq_converter_activityModeLimit
5390  /;
INCLUDE    C:\Local\REMix\framework\remix\framework\model\source\core\storage.gms
5392  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
5393  * SPDX-License-Identifier: BSD-3-Clause
5394   
5395  * // # core_storage
5396  * // The equations in this file describe the storages in the model.
5397   
5398  * // ## Variables
5399  * // {special_table_storage_variables}
5755   
5756   
5757  * === SoC mappings ===
5758  set storage_usedTechSoCState(storage_techs,vintage,soc_statesIn);
5759  storage_usedTechSoCState(storage_techs,vintage,soc_states(soc_statesIn))
5760      $(storage_SoCParam(storage_techs,vintage,soc_states,"eRate") > 0
5761        and storage_SoCParam(storage_techs,vintage,soc_states,"cRate") > 0)
5762      = yes;
5763   
5764  set storage_validSoCRange(storage_techs,vintage);
5765  storage_validSoCRange(storage_techs,vintage)
5766      = smax(soc_states$storage_usedTechSoCState(storage_techs,vintage,soc_states), storage_SoCParam(storage_techs,vintage,soc_states,"SoC")) = 1
5767        and smin(soc_states$storage_usedTechSoCState(storage_techs,vintage,soc_states), storage_SoCParam(storage_techs,vintage,soc_states,"SoC")) = 0;
5768   
5769  * === Translate SoC parameters to ordered SoC-set ===
5770  * set ordered_socs / soc1*soc20 /;
5771  * alias(soc_states, soc_states_c);
5772  * parameter storage_SoCParam_ordered(storage_techs,vintage,ordered_socs,pc_storage_SoCParam);
5773  * storage_SoCParam_ordered(storage_techs,vintage,ordered_socs,pc_storage_SoCParam)
5774  *     $storage_validSoCRange(storage_techs,vintage)
5775  *     = sum(soc_states$(ord(ordered_socs) = sum(soc_states_c$(storage_SoCParam(storage_techs,vintage,soc_states_c,"SoC") <= storage_SoCParam(storage_techs,vintage,soc_states,"SoC")
5776  *                                                            and storage_usedTechSoCState(storage_techs,vintage,soc_states_c)), 1)
5777  *                       and storage_usedTechSoCState(storage_techs,vintage,soc_states)),
5778  *           storage_SoCParam(storage_techs,vintage,soc_states,pc_storage_SoCParam));
5779  *
5780  * set storage_usedTechSoCStateOrdered(storage_techs,vintage,ordered_socs);
5781  * storage_usedTechSoCStateOrdered(storage_techs,vintage,ordered_socs)
5782  *     $(storage_SoCParam_ordered(storage_techs,vintage,ordered_socs,"eRate") > 0
5783  *       and storage_SoCParam_ordered(storage_techs,vintage,ordered_socs,"cRate") > 0)
5784  *     = yes;
5785   
5786  parameter storage_bigM(storage_techs,vintage);
5787  storage_bigM(storage_techs,vintage) = smax((nodesModel,years), storage_reservoirParam(nodesModel,years,storage_techs,"unitsUpperLimit"));
5788  storage_bigM(storage_techs,vintage)$(storage_bigM(storage_techs,vintage) = INF) = 10000;
5789  storage_bigM(storage_techs,vintage)$(storage_bigM(storage_techs,vintage) = 0) = 10000;
5790   
5791  * === calculate the number of years represented by single year to calc ===
5792  alias(yearsToCalc, yearsToCalc_a)
5793  parameter representedYears(years);
5794  representedYears(years) = 0.5 *(smin(yearsToCalc$(yearsToCalc.val > years.val or yearsToCalc.val = smax(yearsToCalc_a, yearsToCalc_a.val)), yearsToCalc.val)
5795                                  - smax(yearsToCalc$(yearsToCalc.val < years.val or yearsToCalc.val = smin(yearsToCalc_a, yearsToCalc_a.val)), yearsToCalc.val));
5796   
5797  * ==== calculation of mappings ====
5798   
5799  * Technologies with a lifeTime > 0 are available
5800  set storage_availTech(nodesModel,years,storage_techs,vintage);
5801  storage_availTech(nodesModel,years,storage_techs,vintage)
5802      $(vintage.val = smax(vintage_a$(vintage_a.val <= years.val
5803          and storage_techParam(storage_techs,vintage_a,"lifeTime") > 0), vintage_a.val)) = yes;
5804   
5805  * Technologies to optimize become unavailable if they have an unitsUpperLimit of 0
5806  storage_availTech(nodesModel,years,storage_techs,vintage)
5807      $(yearsToCalc(years) and storage_reservoirParam(nodesModel,years,storage_techs,"unitsUpperLimit") = 0 ) = no;
5808   
5809  * Technologies already built become unavailable if they have an unitsBuild of 0
5810  storage_availTech(nodesModel,years,storage_techs,vintage)
5811      $( ( not yearsToCalc(years)) and storage_reservoirParam(nodesModel,years,storage_techs,"unitsBuild") = 0 ) = no;
5812   
5813  * Used technologies are available technologies over their technical lifeTime
5814  set storage_usedTech(nodesModel,years,storage_techs,vintage);
5815  storage_usedTech(nodesModel,years,storage_techs,vintage)
5816      $(vintage.val <= years.val
5817          and years.val < smax(years_a$storage_availTech(nodesModel,years_a,storage_techs,vintage),
5818                                              years_a.val + storage_techParam(storage_techs,vintage,"lifeTime"))
5819          ) = yes;
5820   
5821  * Technologies have to be decomissioned in the interval of first avail + lifetime to last avail + lifetime
5822  set storage_decomTech(nodesModel,years,storage_techs,vintage);
5823  storage_decomTech(nodesModel,years,storage_techs,vintage)
5824    $(sum(years_a$storage_usedTech(nodesModel,years_a,storage_techs,vintage), 1)
5825      and sum(yearsToCalc
5826        $(sameas(years, yearsToCalc)
5827          and yearsToCalc.val >= smin(years_a$storage_availTech(nodesModel,years_a,storage_techs,vintage), years_a.val) + storage_techParam(storage_techs,vintage,"lifeTime")
5828          and yearsToCalc.val <= smax(years_a$storage_availTech(nodesModel,years_a,storage_techs,vintage), years_a.val) + storage_techParam(storage_techs,vintage,"lifeTime")), 1))
5829    = yes;
5830   
5831  * Extend the decom frame to the year after the last year of usedTech
5832  storage_decomTech(nodesModel,yearsToCalc,storage_techs,vintage)
5833    $(storage_usedTech(nodesModel,yearsToCalc-1,storage_techs,vintage)
5834      and storage_decomTech(nodesModel,yearsToCalc-1,storage_techs,vintage))
5835    = yes;
5836   
5837  * Mapping for used commodities
5838  set storage_usedCom(storage_techs,vintage,commodity);
5839  option storage_usedCom < storage_sizeParam;
5840   
5841  set storage_usedTechCom(nodesModel,years,storage_techs,vintage,commodity);
5842  storage_usedTechCom(nodesModel,years,storage_techs,vintage,commodity)
5843      $(storage_usedTech(nodesModel,years,storage_techs,vintage)
5844          and storage_usedCom(storage_techs,vintage,commodity))
5845      = yes;
5846   
5847   
5848  * // ## Load units from gdx file
5850   
5851  * ==== aggregation of profiles ====
5852  * derive upper and lower profiles then aggregate
5853  set storage_level_hasProfileIn(nodesData,years,storage_techs,pc_storage_levelProfile);
5854  option storage_level_hasProfileIn < storage_levelProfileIn;
5855   
5856  set storage_level_hasProfile(nodesModel,years,storage_techs,pc_storage_levelProfile);
5857  storage_level_hasProfile(nodesModelToCalc,yearsToCalc,storage_techs,pc_storage_levelProfile)
5858      = sum(nodesData$aggregateNodesModel(nodesData,nodesModelToCalc),
5859              storage_level_hasProfileIn(nodesData,yearsToCalc,storage_techs,pc_storage_levelProfile));
5860   
5861  * weighted average for a real sum of units upper limits, plain average if one region has an upper limit of inf
5862  parameter storage_levelProfile(timeModel,nodesModel,years,storage_techs,vintage,pc_storage_levelProfile);
5863  storage_levelProfile(timeModelToCalc,storage_usedTech(nodesModelToCalc,yearsToCalc,storage_techs,vintage),"upper")
5864      = storage_techParam(storage_techs,vintage,"levelUpperLimit");
5865  storage_levelProfile(timeModelToCalc,storage_usedTech(nodesModelToCalc,yearsToCalc,storage_techs,vintage),"lower")
5866      = storage_techParam(storage_techs,vintage,"levelLowerLimit");
5867   
5868  set storage_finiteUnitLimit(nodesModelToCalc,yearsToCalc,storage_techs);
5869  storage_finiteUnitLimit(nodesModelToCalc,yearsToCalc,storage_techs) = sum(nodesData$aggregateNodesModel(nodesData,nodesModelToCalc), storage_reservoirParamIn(nodesData,yearsToCalc,storage_techs,"unitsUpperLimit")) > 0
5870                                                   and sum(nodesData$aggregateNodesModel(nodesData,nodesModelToCalc), storage_reservoirParamIn(nodesData,yearsToCalc,storage_techs,"unitsUpperLimit")) < inf;
5871   
5872  storage_levelProfile(timeModelToCalc,storage_usedTech(nodesModelToCalc,yearsToCalc,storage_techs,vintage),pc_storage_levelProfile)
5873      $( storage_level_hasProfile(nodesModelToCalc,yearsToCalc,storage_techs,pc_storage_levelProfile)
5874          and storage_finiteUnitLimit(nodesModelToCalc,yearsToCalc,storage_techs))
5875      = sum(nodesData$aggregateNodesModel(nodesData,nodesModelToCalc),
5876              sum(timeData$timeMapping(timeData,timeModelToCalc),
5877                    storage_levelProfileIn(timeData,nodesData,yearsToCalc,storage_techs,pc_storage_levelProfile))
5878                / timeLength(timeModelToCalc)
5879              * storage_reservoirParamIn(nodesData,yearsToCalc,storage_techs,"unitsUpperLimit"))
5880      / sum(nodesData$aggregateNodesModel(nodesData,nodesModelToCalc),
5881              storage_reservoirParamIn(nodesData,yearsToCalc,storage_techs,"unitsUpperLimit"));
5882   
5883  storage_levelProfile(timeModelToCalc,storage_usedTech(nodesModelToCalc,yearsToCalc,storage_techs,vintage),pc_storage_levelProfile)
5884      $( storage_level_hasProfile(nodesModelToCalc,yearsToCalc,storage_techs,pc_storage_levelProfile)
5885          and sum(nodesData$aggregateNodesModel(nodesData,nodesModelToCalc),
5886                      storage_reservoirParamIn(nodesData,yearsToCalc,storage_techs,"unitsUpperLimit")) = inf )
5887      = sum(nodesData$(aggregateNodesModel(nodesData,nodesModelToCalc)
5888                      and storage_reservoirParamIn(nodesData,yearsToCalc,storage_techs,"unitsUpperLimit") = inf ),
5889              sum(timeData$timeMapping(timeData,timeModelToCalc),
5890                    storage_levelProfileIn(timeData,nodesData,yearsToCalc,storage_techs,pc_storage_levelProfile))
5891                / timeLength(timeModelToCalc))
5892      / sum(nodesData$(aggregateNodesModel(nodesData,nodesModelToCalc)
5893                      and storage_reservoirParamIn(nodesData,yearsToCalc,storage_techs,"unitsUpperLimit") = inf ), 1);
5894   
5895  * for fixed profiles overwrite upper and lower profile
5896  storage_levelProfile(timeModelToCalc,nodesModelToCalc,yearsToCalc,storage_techs,vintage,"lower")
5897      $storage_level_hasProfile(nodesModelToCalc,yearsToCalc,storage_techs,"fixed")
5898      = storage_levelProfile(timeModelToCalc,nodesModelToCalc,yearsToCalc,storage_techs,vintage,"fixed");
5899   
5900  storage_levelProfile(timeModelToCalc,nodesModelToCalc,yearsToCalc,storage_techs,vintage,"upper")
5901      $storage_level_hasProfile(nodesModelToCalc,yearsToCalc,storage_techs,"fixed")
5902      = storage_levelProfile(timeModelToCalc,nodesModelToCalc,yearsToCalc,storage_techs,vintage,"fixed");
5903   
5904   
5905  * ==== parameter modifications ====
5906  storage_reservoirParam(nodesModel,years,storage_techs,"unitsLowerLimit")
5907          $sum(vintage, storage_techParam(storage_techs,vintage,"mipUnits"))
5908      = floor(storage_reservoirParam(nodesModel,years,storage_techs,"unitsLowerLimit"));
5909  storage_reservoirParam(nodesModel,years,storage_techs,"unitsUpperLimit")
5910          $sum(vintage, storage_techParam(storage_techs,vintage,"mipUnits"))
5911      = ceil(storage_reservoirParam(nodesModel,years,storage_techs,"unitsUpperLimit"));
5912   
5913   
5914  * ==== definition of variables ====
5915   
5916  * Initialise variables for unitsBuild
5917  storage_unitsBuild.l(nodesModel,years,storage_techs,vintage)
5918      $storage_availTech(nodesModel,years,storage_techs,vintage)
5919      = storage_reservoirParam(nodesModel,years,storage_techs,"unitsBuild");
5920  storage_unitsBuild.lo(nodesModel,yearsToCalc,storage_techs,vintage)
5921      $storage_availTech(nodesModel,yearsToCalc,storage_techs,vintage)
5922      = storage_unitsBuild.l(nodesModel,yearsToCalc,storage_techs,vintage);
5923  storage_unitsBuild.fx(nodesModel,years,storage_techs,vintage)
5924      $storage_reservoirParam(nodesModel,years,storage_techs,"noExpansion")
5925      = storage_unitsBuild.l(nodesModel,years,storage_techs,vintage);
5926   
5927  * Initialise variables for unitsDecom
5928  storage_unitsDecom.l(nodesModel,years,storage_techs,vintage)
5929      $(storage_decomTech(nodesModel,years,storage_techs,vintage)
5930        and years.val < sum(yearsToCalc$(ord(yearsToCalc) = 1), yearsToCalc.val))
5931      = sum((years_a,years_aa)$(sameas(years-1, years_aa)
5932                        and years_a.val > years_aa.val - storage_techParam(storage_techs,vintage,'lifeTime')
5933                        and years_a.val <= years.val - storage_techParam(storage_techs,vintage,'lifeTime')
5934                        and storage_availTech(nodesModel,years_a,storage_techs,vintage)),
5935          storage_unitsBuild.l(nodesModel,years_a,storage_techs,vintage));
5936   
5937  storage_unitsDecom.l(nodesModel,yearsToCalc,storage_techs,vintage)
5938    $storage_decomTech(nodesModel,yearsToCalc,storage_techs,vintage)
5939    = sum(years$
5940          (years.val < sum(yearsToCalc_a$(ord(yearsToCalc_a) = 1), yearsToCalc_a.val)
5941            and storage_availTech(nodesModel,years,storage_techs,vintage)
5942            and years.val > sum(years_a$sameas(years_a, yearsToCalc-1), years_a.val) - storage_techParam(storage_techs,vintage,'lifeTime')
5943            and years.val <= yearsToCalc.val - storage_techParam(storage_techs,vintage,'lifeTime')),
5944        storage_unitsBuild.l(nodesModel,years,storage_techs,vintage))
5945      + sum(yearsToCalc_a$
5946          (yearsToCalc_a.val < sum(yearsToCalc_aa$(ord(yearsToCalc_aa) > 1), yearsToCalc_a.val)
5947            and storage_availTech(nodesModel,yearsToCalc_a,storage_techs,vintage)
5948            and yearsToCalc_a.val > sum(years_a$sameas(years_a, yearsToCalc-1), years_a.val) - storage_techParam(storage_techs,vintage,'lifeTime')
5949            and yearsToCalc_a.val <= yearsToCalc.val - storage_techParam(storage_techs,vintage,'lifeTime')),
5950        storage_unitsBuild.l(nodesModel,yearsToCalc_a,storage_techs,vintage));
5951        ;
5952   
5953  storage_unitsDecom.lo(nodesModel,yearsToCalc,storage_techs,vintage)
5954      $(storage_usedTech(nodesModel,yearsToCalc,storage_techs,vintage)
5955        and not storage_techParam(storage_techs,vintage,"freeDecom"))
5956      = storage_unitsDecom.l(nodesModel,yearsToCalc,storage_techs,vintage)
5957   
5958  * Calculate planned unit expansion
5959  parameter storage_unitsPlanned(nodesModel,years,storage_techs,vintage);
5960  storage_unitsPlanned(nodesModel,years,storage_techs,vintage) = 0;
5961  loop(years,
5962    storage_unitsPlanned(nodesModel,years,storage_techs,vintage)
5963      =
5964      storage_unitsPlanned(nodesModel,years-1,storage_techs,vintage)
5965          $storage_usedTech(nodesModel,years-1,storage_techs,vintage)
5966      + storage_unitsBuild.l(nodesModel,years,storage_techs,vintage)
5967          $storage_availTech(nodesModel,years,storage_techs,vintage)
5968      - storage_unitsDecom.l(nodesModel,years,storage_techs,vintage)
5969          $storage_usedTech(nodesModel,years,storage_techs,vintage);
5970  );
5971   
5972  * Set initial state for planned units
5973  storage_unitsTotal.l(nodesModel,years,storage_techs,vintage)
5974    = storage_unitsPlanned(nodesModel,years,storage_techs,vintage)
5975   
5976  * Calculate if planned unit expansion is bounded by upper and lower limits
5977  set storage_unitBoundsFixed(nodesModel,years,storage_techs);
5978  storage_unitBoundsFixed(nodesModel,years,storage_techs)
5979    $(sum(vintage$storage_usedTech(nodesModel,years,storage_techs,vintage),
5980          storage_unitsPlanned(nodesModel,years,storage_techs,vintage))
5981      = storage_reservoirParam(nodesModel,years,storage_techs,"unitsUpperLimit")
5982    and sum(vintage$storage_usedTech(nodesModel,years,storage_techs,vintage),
5983          storage_unitsPlanned(nodesModel,years,storage_techs,vintage))
5984      = storage_reservoirParam(nodesModel,years,storage_techs,"unitsLowerLimit"))
5985    = yes;
5986   
5987  * Fix unitsBuild, unitsDecom, unitsTotal if levels are predetermined by upper and lower limits
5988  storage_unitsBuild.fx(nodesModel,years,storage_techs,vintage)
5989    $(storage_availTech(nodesModel,years,storage_techs,vintage)
5990      and storage_unitBoundsFixed(nodesModel,years,storage_techs))
5991    = storage_unitsBuild.l(nodesModel,years,storage_techs,vintage);
5992  storage_unitsDecom.fx(nodesModel,years,storage_techs,vintage)
5993    $(storage_usedTech(nodesModel,years,storage_techs,vintage)
5994      and storage_unitBoundsFixed(nodesModel,years,storage_techs))
5995    = storage_unitsDecom.l(nodesModel,years,storage_techs,vintage);
5996  storage_unitsTotal.fx(nodesModel,years,storage_techs,vintage)
5997    $(storage_usedTech(nodesModel,years,storage_techs,vintage)
5998      and storage_unitBoundsFixed(nodesModel,years,storage_techs))
5999    = storage_unitsTotal.l(nodesModel,years,storage_techs,vintage);
6000   
6001  storage_unitsTotal_MIP.up(nodesModel,years,storage_techs,vintage)
6002      $(storage_usedTech(nodesModel,years,storage_techs,vintage)
6003        and storage_techParam(storage_techs,vintage,"mipUnits") = 1)
6004      = storage_reservoirParam(nodesModel,years,storage_techs,"unitsUpperLimit");
6005   
6006  * Add parameter for fixing capacities during myopic runs
6007  parameter storage_unitsDelta_upper(nodesModel,years,storage_techs);
6008  parameter storage_unitsDelta_lower(nodesModel,years,storage_techs);
6009   
6010   
6011  * ==== declaration of equations ====
6012   
6013  equations
6014    Eq_storage_unitsBalance(nodesModel,years,storage_techs,vintage
6015      ) "Ensures the units balance over the planning period."
6016    Eq_storage_unitsFixedDecom(nodesModel,years,storage_techs,vintage
6017      ) "Restricts the fixed decommissioning of units over the planning period."
6018    Eq_storage_unitsFreeDecom(nodesModel,years,storage_techs,vintage
6019      ) "Restricts the free decommissioning of units over the planning period."
6020    Eq_storage_unitsUpperLimit(nodesModel,years,storage_techs
6021      ) "Upper bound for the total number of units."
6022    Eq_storage_unitsLowerLimit(nodesModel,years,storage_techs
6023      ) "Lower bound for the total number of units."
6024    Eq_storage_unitsTotalMIP(nodesModel,years,storage_techs,vintage
6025      ) "Fixes the total number of units to the corresponding integer variable."
6026   
6027    Eq_storage_levelUpperLimit(timeModel,nodesModel,years,storage_techs,vintage,commodity
6028      ) "Upper bound for the total number of units."
6029    Eq_storage_levelUpperLimit_degradation(timeModel,nodesModel,years,storage_techs,vintage,commodity
6030      ) "Upper bound for the total number of units if the storage technology accounts for degradation."
6031    Eq_storage_levelLowerLimit(timeModel,nodesModel,years,storage_techs,vintage,commodity
6032      ) "Lower bound for the total number of units."
6033    Eq_storage_losses(timeModel,nodesModel,years,storage_techs,vintage,commodity
6034      ) "Stored commodities lost due to self discharge."
6035    Eq_storage_unitsBalanceStates(nodesModel,years,storage_techs,vintage
6036      ) "Currently available units must have been built at some point in time and have some state of degradation."
6037    Eq_storage_unitsUpperLimitPerState(nodesModel,years,yearsCom,storage_techs,vintage
6038      ) "There cannot be more units from a certain year than the amount built in that year."
6039    Eq_storage_unitsStatesNoRecovery(nodesModel,years,yearsCom,storage_techs,vintage,degradation_states
6040      ) "There is no recovery."
6041    Eq_storage_cRateLimit(timeModel,nodesModel,years,storage_techs,vintage,commodity
6042      ) "Limit charging rate based on unit capacity."
6043    Eq_storage_eRateLimit(timeModel,nodesModel,years,storage_techs,vintage,commodity
6044      ) "Limit discharging rate based on unit capacity."
6045    Eq_storage_charge(timeModel,nodesModel,years,storage_techs,vintage,commodity
6046      ) "Positive change in state of charge is influx."
6047    Eq_storage_discharge(timeModel,nodesModel,years,storage_techs,vintage,commodity
6048      ) "Negative change in state of charge is outflux."
6049   
6050    Eq_storage_levelStateSum(timeModel,nodesModel,years,storage_techs,vintage,commodity
6051      ) "Sum of degradation class storage levels is the global level."
6052    Eq_storage_levelUpperLimitPerAge(timeModel,nodesModel,years,yearsCom,storage_techs,vintage,commodity
6053      ) "Upper bound for units of a certain state."
6054    Eq_storage_chargingPerAge(timeModel,nodesModel,years,yearsCom,storage_techs,vintage,commodity
6055      ) "Positive change in state of charge is influx for each degradation class."
6056    Eq_storage_chargeBasedDegradationDistribution(nodesModel,years,yearsCom,storage_techs,vintage,commodity
6057      ) "Determine degradation states of storage units."
6058    Eq_storage_unitsDecomStateSum(nodesModel,years,storage_techs,vintage
6059      ) "All decomminsioned units must have a degradation state."
6060    Eq_storage_unitsDegradation(nodesModel,years,yearsCom,storage_techs,vintage,degradation_states
6061      ) "Only allow one range of degradation states per year and age group."
6062    Eq_storage_unitsDegradation_onlyOneRange(nodesModel,years,yearsCom,storage_techs,vintage
6063      ) "Limit usable degradation states to one range, i.e., two neighboring states."
6064   
6065    Eq_storage_unitsSoC_sum(timeModel,nodesModel,years,storage_techs,vintage
6066      ) "Every unit has a state of charge."
6067    Eq_storage_levelSoC(timeModel,nodesModel,years,storage_techs,vintage,commodity
6068      ) "Every unit has a state of charge."
6069    Eq_storage_unitsSoC(timeModel,nodesModel,years,storage_techs,vintage,soc_statesIn
6070      ) "Number of units in particular SoC."
6071    Eq_storage_unitsSoC_onlyOneRange(timeModel,nodesModel,years,storage_techs,vintage
6072      ) "Limit usable SoC states to one range, i.e., two neighboring states."
6073   
6074    Eq_storage_cRateLimit_SoC(timeModel,nodesModel,years,storage_techs,vintage,commodity
6075      ) "Limit charging rate based on unit capacity."
6076    Eq_storage_eRateLimit_SoC(timeModel,nodesModel,years,storage_techs,vintage,commodity
6077      ) "Limit discharging rate based on unit capacity."
6078    ;
6079   
6080  * ==== equation definition ====
6081  * // ## Equations
6082  * // ### Storage Units Balance
6083  * // Ensures that the total units are consistent with the built and decommissioned units.
6084  * // {Eq_storage_unitsBalance}
6085  Eq_storage_unitsBalance(nodesModelSel,yearsSel,storage_techs,vintage)
6086      $((storage_usedTech(nodesModelSel,yearsSel,storage_techs,vintage)
6087            or sum(years$sameas(years,yearsSel), storage_usedTech(nodesModelSel,years-1,storage_techs,vintage)))
6088          and not storage_unitBoundsFixed(nodesModelSel,yearsSel,storage_techs))
6089      ..
6090      storage_unitsTotal(nodesModelSel,yearsSel,storage_techs,vintage)
6091      =e=
6092          sum(yearsToCalc$(ord(yearsToCalc) = 1 and sameas(yearsToCalc, yearsSel)),
6093        sum(years$sameas(years, yearsToCalc),
6094          storage_unitsTotal(nodesModelSel,years-1,storage_techs,vintage)
6095            $storage_usedTech(nodesModelSel,years-1,storage_techs,vintage)))
6096      + sum((yearsToCalc)$(ord(yearsToCalc) > 1 and sameas(yearsToCalc, yearsSel)),
6097        storage_unitsTotal(nodesModelSel,yearsToCalc-1,storage_techs,vintage)
6098          $storage_usedTech(nodesModelSel,yearsToCalc-1,storage_techs,vintage))
6099      + storage_unitsBuild(nodesModelSel,yearsSel,storage_techs,vintage)
6100          $storage_availTech(nodesModelSel,yearsSel,storage_techs,vintage)
6101      - storage_unitsDecom(nodesModelSel,yearsSel,storage_techs,vintage)
6102          $storage_usedTech(nodesModelSel,yearsSel,storage_techs,vintage);
6103   
6104  * // ### Storage Units Fixed Decommission
6105  * // Restricts the fixed decommissioning of storage units over the planning period.
6106  * // {Eq_storage_unitsFixedDecom}
6107  Eq_storage_unitsFixedDecom(nodesModelSel,yearsSel,storage_techs,vintage)
6108      $(storage_decomTech(nodesModelSel,yearsSel,storage_techs,vintage)
6109          and not storage_techParam(storage_techs,vintage,"freeDecom") = 1
6110          and not storage_unitBoundsFixed(nodesModelSel,yearsSel,storage_techs))
6111      ..
6112      storage_unitsDecom(nodesModelSel,yearsSel,storage_techs,vintage)
6113      =e=
6114      sum(years$
6115          (storage_availTech(nodesModelSel,years,storage_techs,vintage)
6116            and years.val > sum(yearsToCalc$sameas(yearsToCalc+1, yearsSel), yearsToCalc.val) - storage_techParam(storage_techs,vintage,'lifeTime')
6117            and years.val <= yearsSel.val - storage_techParam(storage_techs,vintage,'lifeTime')),
6118        storage_unitsBuild(nodesModelSel,years,storage_techs,vintage));
6119   
6120  * // ### Storage Units Free Decomission
6121  * // Restricts the free decommissioning of storage units over the planning period.
6122  * // {Eq_storage_unitsFreeDecom}
6123  Eq_storage_unitsFreeDecom(nodesModelSel,yearsSel,storage_techs,vintage)
6124      $((storage_decomTech(nodesModelSel,yearsSel,storage_techs,vintage)
6125          or storage_usedTech(nodesModelSel,yearsSel,storage_techs,vintage))
6126          and storage_techParam(storage_techs,vintage,"freeDecom") = 1)
6127      ..
6128      sum(years$
6129            ((storage_decomTech(nodesModelSel,years,storage_techs,vintage)
6130              or storage_usedTech(nodesModelSel,years,storage_techs,vintage))
6131              and years.val < sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)),
6132          storage_unitsDecom(nodesModelSel,years,storage_techs,vintage))
6133      + sum(yearsToCalc$
6134            ((storage_decomTech(nodesModelSel,yearsToCalc,storage_techs,vintage)
6135              or storage_usedTech(nodesModelSel,yearsToCalc,storage_techs,vintage))
6136              and yearsToCalc.val >= sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
6137              and yearsToCalc.val <= yearsSel.val),
6138          storage_unitsDecom(nodesModelSel,yearsToCalc,storage_techs,vintage))
6139      =g=
6140      sum(years$
6141            (storage_availTech(nodesModelSel,years,storage_techs,vintage)
6142              and years.val < sum(yearsToCalc$(ord(yearsToCalc)=1), yearsToCalc.val) - storage_techParam(storage_techs,vintage,'lifeTime')),
6143          storage_unitsBuild(nodesModelSel,years,storage_techs,vintage))
6144      + sum(yearsToCalc$
6145            (storage_availTech(nodesModelSel,yearsToCalc,storage_techs,vintage)
6146              and yearsToCalc.val >= sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
6147              and yearsToCalc.val <= yearsSel.val - storage_techParam(storage_techs,vintage,'lifeTime')),
6148          storage_unitsBuild(nodesModelSel,yearsToCalc,storage_techs,vintage));
6149   
6150  * // ### Storage Units Lower Limit
6151  * // Lower bound for the total number of storage units.
6152  * // {Eq_storage_unitsLowerLimit}
6153  Eq_storage_unitsLowerLimit(nodesModelSel,yearsSel,storage_techs)
6154      $(storage_reservoirParam(nodesModelSel,yearsSel,storage_techs,'unitsLowerLimit') > 0 )
6155      ..
6156      sum(vintage$storage_usedTech(nodesModelSel,yearsSel,storage_techs,vintage),
6157          storage_unitsTotal(nodesModelSel,yearsSel,storage_techs,vintage))
6158      =g=
6159      storage_reservoirParam(nodesModelSel,yearsSel,storage_techs,"unitsLowerLimit");
6160   
6161  * // ### Storage Units Upper Limit
6162  * // Upper bound for the total number of storage units.
6163  * // {Eq_storage_unitsUpperLimit}
6164  Eq_storage_unitsUpperLimit(nodesModelSel,yearsSel,storage_techs)
6165      $(storage_reservoirParam(nodesModelSel,yearsSel,storage_techs,'unitsUpperLimit') >= 0
6166          and storage_reservoirParam(nodesModelSel,yearsSel,storage_techs,'unitsUpperLimit') < +inf )
6167      ..
6168      sum(vintage$storage_usedTech(nodesModelSel,yearsSel,storage_techs,vintage),
6169          storage_unitsTotal(nodesModelSel,yearsSel,storage_techs,vintage))
6170      =l=
6171      storage_reservoirParam(nodesModelSel,yearsSel,storage_techs,"unitsUpperLimit");
6172   
6173  * // ### Storage Units Total MIP
6174  * // Fixes the total number of storage units to the corresponding integer variable.
6175  * // {Eq_storage_unitsTotalMIP}
6176  Eq_storage_unitsTotalMIP(nodesModelSel,yearsSel,storage_techs,vintage)
6177      $( storage_usedTech(nodesModelSel,yearsSel,storage_techs,vintage)
6178          and storage_techParam(storage_techs,vintage,"mipUnits") = 1 )
6179      ..
6180      storage_unitsTotal(nodesModelSel,yearsSel,storage_techs,vintage)
6181      =e=
6182      storage_unitsTotal_MIP(nodesModelSel,yearsSel,storage_techs,vintage);
6183   
6184  * // ### Storage Level Lower Limit
6185  * // Lower limit on the storage level.
6186  * // {Eq_storage_levelLowerLimit}
6187  Eq_storage_levelLowerLimit(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
6188      $(storage_usedTechCom(nodesModelSel,yearsSel,storage_techs,vintage,commodity)
6189          and storage_levelProfile(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,"lower") > 0)
6190      ..
6191      storage_level(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
6192      =g=
6193      storage_levelProfile(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,"lower")
6194      * storage_sizeParam(storage_techs,vintage,commodity,"size")
6195      * storage_unitsTotal(nodesModelSel,yearsSel,storage_techs,vintage);
6196   
6197  * // ### Storage Level Upper Limit
6198  * // Upper limit on the storage level.
6199  * // {Eq_storage_levelUpperLimit}
6200  Eq_storage_levelUpperLimit(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
6201      $(storage_usedTechCom(nodesModelSel,yearsSel,storage_techs,vintage,commodity)
6202          and not storage_hasDegradation(storage_techs,vintage)
6203          and storage_levelProfile(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,"upper") >= 0)
6204      ..
6205      storage_level(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
6206      =l=
6207      storage_levelProfile(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,"upper")
6208      * storage_sizeParam(storage_techs,vintage,commodity,"size")
6209      * storage_unitsTotal(nodesModelSel,yearsSel,storage_techs,vintage);
6210   
6211  * // ### Storage Level Upper Limit (degradation)
6212  * // Upper limit on the storage level if the storage technology accounts for degradation.
6213  * // {Eq_storage_levelUpperLimit_degradation}
6214  Eq_storage_levelUpperLimit_degradation(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
6215      $(storage_usedTechCom(nodesModelSel,yearsSel,storage_techs,vintage,commodity)
6216          and storage_hasDegradation(storage_techs,vintage)
6217          and storage_levelProfile(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,"upper") >= 0)
6218      ..
6219      storage_level(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
6220      =l=
6221      storage_levelProfile(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,"upper")
6222      * storage_sizeParam(storage_techs,vintage,commodity,"size")
6223      * sum((degradation_states,yearsCom)$storage_usedDegradation(storage_techs,vintage,degradation_states),
6224              (storage_degradationParam(storage_techs,vintage,degradation_states,"remainingCapacity")
6225                - (yearsSel.val - yearsCom.val) * storage_techParam(storage_techs,vintage,"annualDegradation"))
6226                * storage_unitsStateTracker(nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,degradation_states));
6227   
6228  * // ### Storage Unit States Sum (degradation)
6229  * // The number of units in all degradation state must match the total unit number.
6230  * // {Eq_storage_unitsBalanceStates}
6231  Eq_storage_unitsBalanceStates(nodesModelSel,yearsSel,storage_techs,vintage)
6232      $(storage_usedTech(nodesModelSel,yearsSel,storage_techs,vintage)
6233        and storage_hasDegradation(storage_techs,vintage))
6234      ..
6235      storage_unitsTotal(nodesModelSel,yearsSel,storage_techs,vintage)
6236      =e=
6237      sum((yearsCom,degradation_states)$storage_usedDegradation(storage_techs,vintage,degradation_states),
6238            storage_unitsStateTracker(nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,degradation_states));
6239   
6240  * // ### Storage Unit States Upper Limit(degradation)
6241  * // The states of all commissioned units in one year (unitsBuilt) must either still be tracked or have been decommissioned.
6242  * // {Eq_storage_unitsUpperLimitPerState}
6243  Eq_storage_unitsUpperLimitPerState(nodesModelSel,yearsSel,yearsCom,storage_techs,vintage)
6244      $(storage_usedTech(nodesModelSel,yearsSel,storage_techs,vintage)
6245          and storage_hasDegradation(storage_techs,vintage))
6246      ..
6247      sum(degradation_states$storage_usedDegradation(storage_techs,vintage,degradation_states),
6248            storage_unitsStateTracker(nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,degradation_states)
6249            + sum(years$(years.val <= yearsSel.val),
6250                  storage_unitsStateTrackerDecom(nodesModelSel,years,yearsCom,storage_techs,vintage,degradation_states)))
6251      =e=
6252      storage_unitsBuild(nodesModelSel,yearsCom,storage_techs,vintage)$(yearsCom.val <= yearsSel.val);
6253   
6254  * // ### Storage Unit States Progression (degradation)
6255  * // Unit recovery by reassigning the storage cycles to other units is disabled. Therefore, the number of units in a particular degradation state can only increase if the number in a less degraded state is decreased by at least the same amount.
6256  * // {Eq_storage_unitsStatesNoRecovery}
6257  alias(degradation_states, dc_states);
6258  Eq_storage_unitsStatesNoRecovery(nodesModelSel,yearsSel(yearsToCalc),yearsCom,storage_techs,vintage,degradation_states)
6259      $(storage_usedTech(nodesModelSel,yearsSel,storage_techs,vintage)
6260        and yearsToCalc.val > yearsCom.val
6261        and storage_usedDegradation(storage_techs,vintage,degradation_states))
6262      ..
6263      sum(dc_states$(storage_usedDegradation(storage_techs,vintage,dc_states)
6264                and storage_degradationParam(storage_techs,vintage,dc_states,"maxFullCycles") <= storage_degradationParam(storage_techs,vintage,degradation_states,"maxFullCycles")),
6265              storage_unitsStateTracker(nodesModelSel,yearsToCalc,yearsCom,storage_techs,vintage,dc_states)
6266              + sum(years$(years.val <= yearsToCalc.val), storage_unitsStateTrackerDecom(nodesModelSel,years,yearsCom,storage_techs,vintage,dc_states)))
6267      =l=
6268      sum(dc_states$(storage_usedDegradation(storage_techs,vintage,dc_states)
6269                      and storage_degradationParam(storage_techs,vintage,dc_states,"maxFullCycles") <= storage_degradationParam(storage_techs,vintage,degradation_states,"maxFullCycles")),
6270              storage_unitsStateTracker(nodesModelSel,yearsToCalc-1,yearsCom,storage_techs,vintage,dc_states)
6271              + sum(years$(years.val < yearsToCalc.val), storage_unitsStateTrackerDecom(nodesModelSel,years,yearsCom,storage_techs,vintage,dc_states)));
6272   
6273  * // ### Storage Losses
6274  * // Accumulation of storage losses.
6275  * // {Eq_storage_losses}
6276  Eq_storage_losses(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,storage_techs,vintage,commodity)
6277      $storage_usedTechCom(nodesModelSel,yearsSel,storage_techs,vintage,commodity)
6278      ..
6279      storage_losses(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
6280      =e=
6281      - storage_level(timeModelToCalc--1,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
6282        * storage_sizeParam(storage_techs,vintage,commodity,"selfdischarge")
6283      + storage_sizeParam(storage_techs,vintage,commodity,"selfdischargeAbs")
6284      + (storage_techParam(storage_techs,vintage,"chargingLoss")
6285          /(1 - storage_techParam(storage_techs,vintage,"chargingLoss")))
6286        * storage_charge(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
6287          $(storage_techParam(storage_techs,vintage,"chargingLoss") > 0)
6288      + storage_techParam(storage_techs,vintage,"dischargingLoss")
6289        * storage_discharge(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
6290          $(storage_techParam(storage_techs,vintage,"dischargingLoss") > 0)
6291      - storage_sizeParam(storage_techs,vintage,commodity,"size")
6292        * sum(soc_states$(storage_usedTechSoCState(storage_techs,vintage,soc_states)
6293                          and storage_validSoCRange(storage_techs,vintage)),
6294              storage_unitsSoC(timeModelToCalc--1,nodesModelSel,yearsSel,storage_techs,vintage,soc_states)
6295              * storage_SoCParam(storage_techs,vintage,soc_states,"SoC")
6296              * storage_SoCParam(storage_techs,vintage,soc_states,"selfdischarge"));
6297   
6298  * // ### C-Rate Limit
6299  * // The increase in storage level per time step, i.e., the charging rate, is limited relative to the storage capacity.
6300  * // {Eq_storage_cRateLimit}
6301  Eq_storage_cRateLimit(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,storage_techs,vintage,commodity)
6302      $(storage_usedTechCom(nodesModelSel,yearsSel,storage_techs,vintage,commodity)
6303        and storage_techParam(storage_techs,vintage,"maxCRate") > 0)
6304      ..
6305      storage_level(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
6306      - storage_level(timeModelToCalc--1,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
6307      =l=
6308      storage_techParam(storage_techs,vintage,"maxCRate")
6309      * storage_sizeParam(storage_techs,vintage,commodity,"size")
6310      * storage_unitsTotal(nodesModelSel,yearsSel,storage_techs,vintage);
6311   
6312  * // ### E-Rate Limit
6313  * // The decrease in storage level per time step, i.e., the discharging rate, is limited relative to the storage capacity.
6314  * // {Eq_storage_eRateLimit}
6315  Eq_storage_eRateLimit(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,storage_techs,vintage,commodity)
6316      $(storage_usedTechCom(nodesModelSel,yearsSel,storage_techs,vintage,commodity)
6317        and storage_techParam(storage_techs,vintage,"maxERate") > 0)
6318      ..
6319      storage_level(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
6320      - storage_level(timeModelToCalc--1,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
6321      =g=
6322      - storage_techParam(storage_techs,vintage,"maxERate")
6323      * storage_sizeParam(storage_techs,vintage,commodity,"size")
6324      * storage_unitsTotal(nodesModelSel,yearsSel,storage_techs,vintage);
6325   
6326  * // ### Storage Charging
6327  * // Increases in storage levels are accounted as charging amounts.
6328  * // {Eq_storage_charge}
6329  Eq_storage_charge(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,storage_techs,vintage,commodity)
6330      $(storage_usedTechCom(nodesModelSel,yearsSel,storage_techs,vintage,commodity)
6331        and storage_techParam(storage_techs,vintage,"chargingLoss") > 0)
6332      ..
6333      storage_charge(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
6334      =g=
6335      storage_level(timeModelToCalc,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
6336      - storage_level(timeModelToCalc--1,nodesModelSel,yearsSel,storage_techs,vintage,commodity);
6337   
6338  * // ### Storage Discharging
6339  * // Decreases in storage levels are accounted as discharging amounts.
6340  * // {Eq_storage_discharge}
6341  Eq_storage_discharge(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,storage_techs,vintage,commodity)
6342      $(storage_usedTechCom(nodesModelSel,yearsSel,storage_techs,vintage,commodity)
6343        and storage_techParam(storage_techs,vintage,"dischargingLoss") > 0)
6344      ..
6345      storage_discharge(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
6346      =g=
6347      storage_level(timeModelToCalc--1,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
6348      - storage_level(timeModelToCalc,nodesModelSel,yearsSel,storage_techs,vintage,commodity);
6349   
6350  * // ### Storage Level Sum (degradation)
6351  * // The storage level is accounted individually by commissioning year in the case of degradation in order to prohibit the model to assign pre-existing storage cycles to newly built storage reservoirs and thereby avoiding degradation. All those storage levels represent the total storage level.
6352  * // {Eq_storage_levelStateSum}
6353  Eq_storage_levelStateSum(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
6354      $(storage_usedTechCom(nodesModelSel,yearsSel,storage_techs,vintage,commodity)
6355        and storage_techParam(storage_techs,vintage,"usageDegradation"))
6356      ..
6357      storage_level(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
6358      =e=
6359      sum(yearsCom, storage_levelPerAge(timeModelSel,nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,commodity));
6360   
6361  * // ### Storage Level Upper Limit per Age Group (degradation)
6362  * // Upper limit on the storage level per commissioning year if the storage technology accounts for degradation.
6363  * // {Eq_storage_levelUpperLimitPerAge}
6364  Eq_storage_levelUpperLimitPerAge(timeModelSel,nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,commodity)
6365      $(storage_usedTechCom(nodesModelSel,yearsSel,storage_techs,vintage,commodity)
6366        and storage_techParam(storage_techs,vintage,"usageDegradation"))
6367      ..
6368      storage_levelPerAge(timeModelSel,nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,commodity)
6369      =l=
6370      storage_techParam(storage_techs,vintage,"levelUpperLimit")
6371      * storage_sizeParam(storage_techs,vintage,commodity,"size")
6372      * sum(degradation_states,
6373              (storage_degradationParam(storage_techs,vintage,degradation_states,"remainingCapacity")
6374                - (yearsSel.val - yearsCom.val) * storage_techParam(storage_techs,vintage,"annualDegradation"))
6375                * storage_unitsStateTracker(nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,degradation_states));
6376   
6377  * // ### Storage Cycle Distribution to Degradation States per Commissioning Year (degradation)
6378  * // The charging amounts are converted to equivalent full cycles which then must be represented by an adequate distribution of degradation states.
6379  * // {Eq_storage_chargeBasedDegradationDistribution}
6380  alias(years, prev_years);
6381  Eq_storage_chargeBasedDegradationDistribution(nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,commodity)
6382      $(storage_usedTechCom(nodesModelSel,yearsSel,storage_techs,vintage,commodity)
6383        and storage_techParam(storage_techs,vintage,"usageDegradation"))
6384      ..
6385      sum(prev_years$(prev_years.val <= yearsSel.val), representedYears(prev_years)
6386          * sum(timeModel, storage_chargePerAge(timeModel,nodesModelSel,prev_years,yearsCom,storage_techs,vintage,commodity)))
6387      =l=
6388      storage_sizeParam(storage_techs,vintage,commodity,"size")
6389      * sum(dc_states$storage_usedDegradation(storage_techs,vintage,dc_states),
6390          storage_degradationParam(storage_techs,vintage,dc_states,"maxFullCycles")
6391          * (storage_unitsStateTracker(nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,dc_states)
6392             + sum(prev_years$(prev_years.val <= yearsSel.val), storage_unitsStateTrackerDecom(nodesModelSel,prev_years,yearsCom,storage_techs,vintage,dc_states))));
6393   
6394  * // ### Storage Charging per Commissioning Year (degradation)
6395  * // Increases in storage levels are accounted as charging amounts.
6396  * // {Eq_storage_chargingPerAge}
6397  Eq_storage_chargingPerAge(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,commodity)
6398      $(storage_usedTechCom(nodesModelSel,yearsSel,storage_techs,vintage,commodity)
6399        and storage_techParam(storage_techs,vintage,"usageDegradation"))
6400      ..
6401      storage_chargePerAge(timeModelSel,nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,commodity)
6402      =g=
6403      storage_levelPerAge(timeModelToCalc,nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,commodity)
6404      - storage_levelPerAge(timeModelToCalc--1,nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,commodity);
6405   
6406  * // ### Storage Unit Decommissioning States Sum (degradation)
6407  * // The number of decommissioned units in all degradation state must match the total decommissioning unit number.
6408  * // {Eq_storage_unitsDecomStateSum}
6409  Eq_storage_unitsDecomStateSum(nodesModelSel,yearsSel,storage_techs,vintage)
6410      $(storage_techParam(storage_techs,vintage,"usageDegradation"))
6411      ..
6412      storage_unitsDecom(nodesModelSel,yearsSel,storage_techs,vintage)
6413      =e=
6414      sum((yearsCom,degradation_states)$storage_usedDegradation(storage_techs,vintage,degradation_states),
6415          storage_unitsStateTrackerDecom(nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,degradation_states));
6416   
6417  * // ### Storage Unit Sequential Degradation (degradation)
6418  * // Only active degradation ranges, i.e., two neighboring degradation states, can be used.
6419  * // {Eq_storage_unitsDegradation}
6420  alias(degradation_states, degradation_states_a, degradation_states_b);
6421  Eq_storage_unitsDegradation(nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,degradation_states)
6422      $(storage_techParam(storage_techs,vintage,"usageDegradation")
6423        and storage_techParam(storage_techs,vintage,"sequentialDegradationStates"))
6424      ..
6425      sum(degradation_states_a$((storage_degradationParam(storage_techs,vintage,degradation_states_a,"maxFullCycles") = storage_degradationParam(storage_techs,vintage,degradation_states,"maxFullCycles")
6426                        or storage_degradationParam(storage_techs,vintage,degradation_states_a,"maxFullCycles")
6427                                         = smax(degradation_states_b$(storage_degradationParam(storage_techs,vintage,degradation_states_b,"maxFullCycles") < storage_degradationParam(storage_techs,vintage,degradation_states,"maxFullCycles")
6428                                                              and storage_usedDegradation(storage_techs,vintage,degradation_states_b)),
6429                                                              storage_degradationParam(storage_techs,vintage,degradation_states_b,"maxFullCycles")))
6430                        and storage_usedDegradation(storage_techs,vintage,degradation_states_a)),
6431          storage_unitsStateTracker_activeRange(nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,degradation_states_a))
6432      * storage_bigM(storage_techs,vintage)
6433      =g=
6434      storage_unitsStateTracker(nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,degradation_states);
6435   
6436  * // ### Storage Unit Sequential Degradation Range (degradation)
6437  * // Only one degradation range can be active.
6438  * // {Eq_storage_unitsDegradation_onlyOneRange}
6439  Eq_storage_unitsDegradation_onlyOneRange(nodesModelSel,yearsSel,yearsCom,storage_techs,vintage)
6440      $(storage_techParam(storage_techs,vintage,"usageDegradation") and storage_techParam(storage_techs,vintage,"sequentialDegradationStates"))
6441      ..
6442      sum(degradation_states$storage_usedDegradation(storage_techs,vintage,degradation_states),
6443            storage_unitsStateTracker_activeRange(nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,degradation_states))
6444      =e= 1;
6445   
6446  * // ### Storage Unit Sequential State of Charge (SoC)
6447  * // Only active state of charge ranges, i.e., two neighboring states of charge, can be used.
6448  * // {Eq_storage_unitsSoC}
6449  alias(soc_states, soc_states_a, soc_states_b);
6450  Eq_storage_unitsSoC(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,storage_techs,vintage,soc_states)
6451      $(storage_validSoCRange(storage_techs,vintage) and storage_techParam(storage_techs,vintage,"sequentialSoC"))
6452      ..
6453      sum(soc_states_a$((storage_SoCParam(storage_techs,vintage,soc_states_a,"SoC") = storage_SoCParam(storage_techs,vintage,soc_states,"SoC")
6454                        or storage_SoCParam(storage_techs,vintage,soc_states_a,"SoC")
6455                                         = smax(soc_states_b$(storage_SoCParam(storage_techs,vintage,soc_states_b,"SoC") < storage_SoCParam(storage_techs,vintage,soc_states,"SoC")
6456                                                              and storage_usedTechSoCState(storage_techs,vintage,soc_states_b)),
6457                                                              storage_SoCParam(storage_techs,vintage,soc_states_b,"SoC")))
6458                        and storage_usedTechSoCState(storage_techs,vintage,soc_states_a)),
6459          storage_unitsSoC_activeRange(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,soc_states_a))
6460      * storage_bigM(storage_techs,vintage)
6461      =g=
6462      storage_unitsSoC(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,soc_states);
6463   
6464  * // ### Storage Unit Sequential State of Charge Range (SoC)
6465  * // Only one state of charge range can be active.
6466  * // {Eq_storage_unitsSoC_onlyOneRange}
6467  Eq_storage_unitsSoC_onlyOneRange(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,storage_techs,vintage)
6468      $(storage_validSoCRange(storage_techs,vintage) and storage_techParam(storage_techs,vintage,"sequentialSoC"))
6469      ..
6470      sum(soc_states$storage_usedTechSoCState(storage_techs,vintage,soc_states),
6471            storage_unitsSoC_activeRange(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,soc_states)) =e= 1;
6472   
6473  * // ### Storage Unit State of Charge Sum (SoC)
6474  * // Each storage unit must have one state of charge.
6475  * // {Eq_storage_unitsSoC_sum}
6476  Eq_storage_unitsSoC_sum(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,storage_techs,vintage)
6477      $storage_validSoCRange(storage_techs,vintage)
6478      ..
6479      storage_unitsTotal(nodesModelSel,yearsSel,storage_techs,vintage)
6480      =e=
6481      sum(soc_states$storage_usedTechSoCState(storage_techs,vintage,soc_states),
6482            storage_unitsSoC(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,soc_states));
6483   
6484  * // ### Storage Level State of Charge Sum (SoC)
6485  * // The total storage level must be represented by units in their specific states of charge.
6486  * // {Eq_storage_levelSoC}
6487  Eq_storage_levelSoC(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,storage_techs,vintage,commodity)
6488      $(storage_validSoCRange(storage_techs,vintage) and storage_usedTechCom(nodesModelSel,yearsSel,storage_techs,vintage,commodity))
6489      ..
6490      storage_level(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
6491      =e=
6492      storage_sizeParam(storage_techs,vintage,commodity,"size")
6493      * sum(soc_states$storage_usedTechSoCState(storage_techs,vintage,soc_states),
6494              storage_unitsSoC(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,soc_states)
6495              * storage_SoCParam(storage_techs,vintage,soc_states,"SoC"));
6496   
6497  * // ### C-Rate Limit (SoC)
6498  * // The increase in storage level per time step, i.e., the charging rate, is limited relative to the storage capacity. The coefficients can vary between states of charge.
6499  * // {Eq_storage_cRateLimit_SoC}
6500  Eq_storage_cRateLimit_SoC(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,storage_techs,vintage,commodity)
6501      $(storage_usedTechCom(nodesModelSel,yearsSel,storage_techs,vintage,commodity)
6502        and storage_validSoCRange(storage_techs,vintage)
6503        and sum(soc_states, storage_SoCParam(storage_techs,vintage,soc_states,"cRate")) < inf)
6504      ..
6505      storage_level(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
6506      - storage_level(timeModelToCalc--1,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
6507      =l=
6508      storage_sizeParam(storage_techs,vintage,commodity,"size")
6509      * sum(soc_states$storage_usedTechSoCState(storage_techs,vintage,soc_states),
6510                      storage_SoCParam(storage_techs,vintage,soc_states,"cRate")
6511                      * storage_unitsSoC(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,soc_states));
6512   
6513  * // ### E-Rate Limit (SoC)
6514  * // The decrease in storage level per time step, i.e., the discharging rate, is limited relative to the storage capacity. The coefficients can vary between states of charge.
6515  * // {Eq_storage_cRateLimit_SoC}
6516  Eq_storage_eRateLimit_SoC(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,storage_techs,vintage,commodity)
6517      $(storage_usedTechCom(nodesModelSel,yearsSel,storage_techs,vintage,commodity)
6518        and storage_validSoCRange(storage_techs,vintage)
6519        and sum(soc_states, storage_SoCParam(storage_techs,vintage,soc_states,"eRate")) < inf)
6520      ..
6521      storage_level(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
6522      - storage_level(timeModelToCalc--1,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
6523      =g=
6524      - storage_sizeParam(storage_techs,vintage,commodity,"size")
6525      * sum(soc_states$storage_usedTechSoCState(storage_techs,vintage,soc_states),
6526                      storage_SoCParam(storage_techs,vintage,soc_states,"eRate")
6527                      * storage_unitsSoC(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,soc_states));
6528   
6529   
6530  * ==== model definition ====
6531   
6532  Model M_storage
6533  /
6534    Eq_storage_unitsBalance
6535    Eq_storage_unitsFixedDecom
6536    Eq_storage_unitsFreeDecom
6537    Eq_storage_unitsLowerLimit
6538    Eq_storage_unitsUpperLimit
6539    Eq_storage_levelUpperLimit_degradation
6540    Eq_storage_unitsTotalMIP
6541    Eq_storage_levelLowerLimit
6542    Eq_storage_levelUpperLimit
6544    Eq_storage_losses
6546    Eq_storage_unitsBalanceStates
6547    Eq_storage_unitsUpperLimitPerState
6548    Eq_storage_unitsStatesNoRecovery
6549    Eq_storage_cRateLimit
6550    Eq_storage_eRateLimit
6551    Eq_storage_charge
6552    Eq_storage_discharge
6553    Eq_storage_levelStateSum
6554    Eq_storage_levelUpperLimitPerAge
6555    Eq_storage_chargeBasedDegradationDistribution
6556    Eq_storage_chargingPerAge
6557    Eq_storage_unitsDecomStateSum
6558    Eq_storage_unitsDegradation
6559    Eq_storage_unitsDegradation_onlyOneRange
6560   
6561    Eq_storage_unitsSoC
6562    Eq_storage_unitsSoC_sum
6563    Eq_storage_unitsSoC_onlyOneRange
6564    Eq_storage_levelSoC
6565    Eq_storage_cRateLimit_SoC
6566    Eq_storage_eRateLimit_SoC
6567  /;
INCLUDE    C:\Local\REMix\framework\remix\framework\model\source\core\transfer.gms
6569  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
6570  * SPDX-License-Identifier: BSD-3-Clause
6571   
6572  * // # core_transfer
6573  * // The equations in this file describe the commodity transfer in the model.
6574   
6575  * // ## Variables
6576  * // {special_table_transfer_variables}
6579   
6584   
6861   
6862  parameter transfer_linksParam(linksModel,years,transfer_techs,pc_transfer_linksParam);
6863  transfer_linksParam(linksModelToCalc,years,transfer_techs,pc_transfer_linksParam)
6864      = sum(linksData$links_aggregate(linksModelToCalc,linksData), transfer_linksParamIn(linksData,years,transfer_techs,pc_transfer_linksParam));
6865   
6866  * // ## Load links from gdx file
6868   
6869   
6870  set transfer_hasflowProfileIn(linksData,years,transfer_techs,pc_transfer_flowProfile);
6871  option transfer_hasflowProfileIn < transfer_flowProfileIn;
6872   
6873  * === modify transfer_flowProfileIn vector to fill with default values, in case profile is not specified ===
6874  transfer_linksParamIn(linksData,years,transfer_techs,"flowAlongLimit")
6875      $(not transfer_linksParamIn(linksData,years,transfer_techs,"limitFlows"))
6876      = 1;
6877   
6878  transfer_linksParamIn(linksData,years,transfer_techs,"flowAgainstLimit")
6879      $(not transfer_linksParamIn(linksData,years,transfer_techs,"limitFlows"))
6880      = 1;
6881   
6882  transfer_flowProfileIn(timeData,linksData,years,transfer_techs,"along")
6883      $(not transfer_hasflowProfileIn(linksData,years,transfer_techs,"along"))
6884      = transfer_linksParamIn(linksData,years,transfer_techs,"flowAlongLimit");
6885   
6886  transfer_flowProfileIn(timeData,linksData,years,transfer_techs,"against")
6887      $(not transfer_hasflowProfileIn(linksData,years,transfer_techs,"against"))
6888      = transfer_linksParamIn(linksData,years,transfer_techs,"flowAgainstLimit");
6889   
6890  * aggregate time dimension
6891  parameter transfer_flowProfileIn_aggTime(timeModel,linksData,yearsToCalc,transfer_techs,pc_transfer_flowProfile);
6892  transfer_flowProfileIn_aggTime(timeModelToCalc,linksData,yearsToCalc,transfer_techs,pc_transfer_flowProfile)
6893      $transfer_hasflowProfileIn(linksData,yearsToCalc,transfer_techs,pc_transfer_flowProfile)
6894      = sum(timeData$timeMapping(timeData,timeModelToCalc),
6895            transfer_flowProfileIn(timeData,linksData,yearsToCalc,transfer_techs,pc_transfer_flowProfile)
6896            / timeLength(timeModelToCalc));
6897  option clear = transfer_flowProfileIn;
6898   
6899  transfer_flowProfileIn_aggTime(timeModelToCalc,linksData,yearsToCalc,transfer_techs,pc_transfer_flowProfile)
6900      $(not transfer_hasflowProfileIn(linksData,yearsToCalc,transfer_techs,pc_transfer_flowProfile) and
6901        not transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"limitFlows"))
6902      = 1;
6903   
6904  transfer_flowProfileIn_aggTime(timeModelToCalc,linksData,yearsToCalc,transfer_techs,"along")
6905      $(not transfer_hasflowProfileIn(linksData,yearsToCalc,transfer_techs,"along") and
6906        transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"limitFlows"))
6907      = transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"flowAlongLimit");
6908   
6909  transfer_flowProfileIn_aggTime(timeModelToCalc,linksData,yearsToCalc,transfer_techs,"against")
6910      $(not transfer_hasflowProfileIn(linksData,yearsToCalc,transfer_techs,"against") and
6911        transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"limitFlows"))
6912      = transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"flowAgainstLimit");
6913   
6914  set transfer_finiteLinkLimit(linksModel,years,transfer_techs);
6915  transfer_finiteLinkLimit(linksModelToCalc,yearsToCalc,transfer_techs)
6916      = sum(linksData$links_aggregate(linksModelToCalc,linksData), transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"linksUpperLimit")) > 0
6917          and sum(linksData$links_aggregate(linksModelToCalc,linksData), transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"linksUpperLimit")) < inf;
6918   
6919  set transfer_infiniteLinkLimit(linksModel,years,transfer_techs);
6920  transfer_infiniteLinkLimit(linksModelToCalc,yearsToCalc,transfer_techs)
6921      = sum(linksData$links_aggregate(linksModelToCalc,linksData), transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"linksUpperLimit")) = inf;
6923   
6924  parameter transfer_lengthParam(linksModel,link_types,pc_transfer_lengthParam);
6925  transfer_lengthParam(linksModelToCalc,link_types,pc_transfer_lengthParam)
6926      = sum(linksData$links_aggregate(linksModelToCalc,linksData), transfer_lengthParamIn(linksData,link_types,pc_transfer_lengthParam))
6927          / sum(linksData$links_aggregate(linksModelToCalc,linksData), 1);
6928   
6929  parameter transfer_gridSegments(linksModel,transfer_techs,gridSegments,pc_transfer_gridSegments);
6930  transfer_gridSegments(linksModelToCalc,transfer_techs,gridSegments,pc_transfer_gridSegments)
6931      = smax(linksData$links_aggregate(linksModelToCalc,linksData), transfer_gridSegmentsIn(linksData,transfer_techs,gridSegments,pc_transfer_gridSegments));
6932   
6933  parameter transfer_dcopf_Xtech(linksModel,years,transfer_techs,vintage,gridSegments);
6934  transfer_dcopf_Xtech(linksModelToCalc,yearsToCalc,transfer_techs,vintage,gridSegments)
6935      $(transfer_gridSegments(linksModelToCalc,transfer_techs,gridSegments,"useDCopf")
6936          and transfer_linksParam(linksModelToCalc,yearsToCalc,transfer_techs,"circuits") > 0
6937          and sum(link_types, transfer_reactPerLength(transfer_techs,vintage,link_types,"reactPerLength")) > 0 )
6938      = (1 / sum(linksData
6939                  $links_aggregate(linksModelToCalc,linksData),
6940              1 / ( sum(link_types,
6941                          transfer_lengthParamIn(linksData,link_types,"length")
6942                          * transfer_reactPerLength(transfer_techs,vintage,link_types,"reactPerLength"))
6943                      / transfer_linksParam(linksModelToCalc,yearsToCalc,transfer_techs,"circuits"))));
6944   
6945  set transfer_hasflowProfile(linksModel,years,transfer_techs,pc_transfer_flowProfile);
6946  transfer_hasflowProfile(linksModelToCalc,yearsToCalc,transfer_techs,pc_transfer_flowProfile)
6947      = sum(linksData$links_aggregate(linksModelToCalc,linksData),
6948              transfer_hasflowProfileIn(linksData,yearsToCalc,transfer_techs,pc_transfer_flowProfile));
6949   
6950  * ==== parameter modifications ====
6951  transfer_linksParam(linksModelToCalc,yearsToCalc,transfer_techs,"linksLowerLimit")
6952      $sum(vintage, transfer_techParam(transfer_techs,vintage,"mipLinks"))
6953      = floor(transfer_linksParam(linksModelToCalc,yearsToCalc,transfer_techs,"linksLowerLimit"));
6954  transfer_linksParam(linksModelToCalc,yearsToCalc,transfer_techs,"linksUpperLimit")
6955      $sum(vintage, transfer_techParam(transfer_techs,vintage,"mipLinks"))
6956      = ceil(transfer_linksParam(linksModelToCalc,yearsToCalc,transfer_techs,"linksUpperLimit"));
6957   
6958   
6959  * ==== calculation of mappings ====
6960   
6961  * Technologies with a lifeTime > 0 are available
6962  set transfer_availTech(linksModel,years,transfer_techs,vintage);
6963  transfer_availTech(linksModel,years,transfer_techs,vintage)
6964      $(vintage.val = smax(vintage_a$(vintage_a.val <= years.val
6965          and transfer_techParam(transfer_techs,vintage_a,"lifeTime") > 0), vintage_a.val)) = yes;
6966   
6967  * Technologies to optimize become unavailable if they have an linksUpperLimit of 0
6968  transfer_availTech(linksModelToCalc,years,transfer_techs,vintage)
6969      $(yearsToCalc(years) and transfer_linksParam(linksModelToCalc,years,transfer_techs,"linksUpperLimit") = 0 ) = no;
6970   
6971  * Technologies already built become unavailable if they have an linksBuild of 0
6972  transfer_availTech(linksModelToCalc,years,transfer_techs,vintage)
6973      $( ( not yearsToCalc(years)) and transfer_linksParam(linksModelToCalc,years,transfer_techs,"linksBuild") = 0 ) = no;
6974   
6975  * Used technologies are available technologies over their technical lifeTime
6976  set transfer_usedTech(linksModel,years,transfer_techs,vintage);
6977  transfer_usedTech(linksModelToCalc,years,transfer_techs,vintage)
6978      $(vintage.val <= years.val
6979          and years.val < smax(years_a$transfer_availTech(linksModelToCalc,years_a,transfer_techs,vintage),
6980                                  years_a.val + transfer_techParam(transfer_techs,vintage,"lifeTime"))
6981          ) = yes;
6982   
6983  * Technologies have to be decomissioned in the interval of first avail + lifetime to last avail + lifetime
6984  set transfer_decomTech(linksModel,years,transfer_techs,vintage);
6985  transfer_decomTech(linksModel,years,transfer_techs,vintage)
6986    $(sum(years_a$transfer_usedTech(linksModel,years_a,transfer_techs,vintage), 1)
6987      and sum(yearsToCalc
6988        $(sameas(years, yearsToCalc)
6989          and yearsToCalc.val >= smin(years_a$transfer_availTech(linksModel,years_a,transfer_techs,vintage), years_a.val) + transfer_techParam(transfer_techs,vintage,"lifeTime")
6990          and yearsToCalc.val <= smax(years_a$transfer_availTech(linksModel,years_a,transfer_techs,vintage), years_a.val) + transfer_techParam(transfer_techs,vintage,"lifeTime")), 1))
6991    = yes;
6992   
6993  * Extend the decom frame to the year after the last year of usedTech
6994  transfer_decomTech(linksModel,yearsToCalc,transfer_techs,vintage)
6995    $(transfer_usedTech(linksModel,yearsToCalc-1,transfer_techs,vintage)
6996      and transfer_decomTech(linksModel,yearsToCalc-1,transfer_techs,vintage))
6997    = yes;
6998   
6999  parameter transfer_flowProfile(timeModel,linksModel,years,transfer_techs,vintage,pc_transfer_flowProfile);
7000   
7001  transfer_flowProfile(timeModelToCalc,linksModelToCalc,yearsToCalc,transfer_techs,vintage,"along")
7002      $transfer_finiteLinkLimit(linksModelToCalc,yearsToCalc,transfer_techs)
7003      = (sum(linksData$(links_aggregate(linksModelToCalc,linksData)
7004                       and transfer_incidenceData_flip(linksData) = 1),
7005              transfer_flowProfileIn_aggTime(timeModelToCalc,linksData,yearsToCalc,transfer_techs,"along")
7006              * transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"linksUpperLimit"))
7007          + sum(linksData$(links_aggregate(linksModelToCalc,linksData)
7008                          and transfer_incidenceData_flip(linksData) = -1),
7009              transfer_flowProfileIn_aggTime(timeModelToCalc,linksData,yearsToCalc,transfer_techs,"against")
7010              * transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"linksUpperLimit")))
7011      / sum(linksData$links_aggregate(linksModelToCalc,linksData),
7012              transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"linksUpperLimit"));
7013   
7014  transfer_flowProfile(timeModelToCalc,linksModelToCalc,yearsToCalc,transfer_techs,vintage,"against")
7015      $transfer_finiteLinkLimit(linksModelToCalc,yearsToCalc,transfer_techs)
7016      = (sum(linksData$(links_aggregate(linksModelToCalc,linksData)
7017                       and transfer_incidenceData_flip(linksData) = 1),
7018              transfer_flowProfileIn_aggTime(timeModelToCalc,linksData,yearsToCalc,transfer_techs,"against")
7019              * transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"linksUpperLimit"))
7020          + sum(linksData$(links_aggregate(linksModelToCalc,linksData)
7021                          and transfer_incidenceData_flip(linksData) = -1),
7022              transfer_flowProfileIn_aggTime(timeModelToCalc,linksData,yearsToCalc,transfer_techs,"along")
7023              * transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"linksUpperLimit")))
7024      / sum(linksData$links_aggregate(linksModelToCalc,linksData),
7025              transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"linksUpperLimit"));
7026   
7027  transfer_flowProfile(timeModelToCalc,linksModelToCalc,yearsToCalc,transfer_techs,vintage,"along")
7028      $transfer_infiniteLinkLimit(linksModelToCalc,yearsToCalc,transfer_techs)
7029      = (sum(linksData$(links_aggregate(linksModelToCalc,linksData)
7030                       and transfer_incidenceData_flip(linksData) = 1
7031                       and transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"linksUpperLimit") = inf ),
7032              transfer_flowProfileIn_aggTime(timeModelToCalc,linksData,yearsToCalc,transfer_techs,"along"))
7033          + sum(linksData$(links_aggregate(linksModelToCalc,linksData)
7034                          and transfer_incidenceData_flip(linksData) = -1
7035                          and transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"linksUpperLimit") = inf ),
7036              transfer_flowProfileIn_aggTime(timeModelToCalc,linksData,yearsToCalc,transfer_techs,"against")))
7037      / sum(linksData$(links_aggregate(linksModelToCalc,linksData)
7038                      and transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"linksUpperLimit") = inf ),
7039              1);
7040   
7041  transfer_flowProfile(timeModelToCalc,linksModelToCalc,yearsToCalc,transfer_techs,vintage,"against")
7042      $transfer_infiniteLinkLimit(linksModelToCalc,yearsToCalc,transfer_techs)
7043      = (sum(linksData$(links_aggregate(linksModelToCalc,linksData)
7044                       and transfer_incidenceData_flip(linksData) = 1
7045                       and transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"linksUpperLimit") = inf ),
7046              transfer_flowProfileIn_aggTime(timeModelToCalc,linksData,yearsToCalc,transfer_techs,"against"))
7047          + sum(linksData$(links_aggregate(linksModelToCalc,linksData)
7048                          and transfer_incidenceData_flip(linksData) = -1
7049                          and transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"linksUpperLimit") = inf ),
7050              transfer_flowProfileIn_aggTime(timeModelToCalc,linksData,yearsToCalc,transfer_techs,"along")))
7051      / sum(linksData$(links_aggregate(linksModelToCalc,linksData)
7052                      and transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"linksUpperLimit") = inf ),
7053              1);
7054  option clear = transfer_flowProfileIn_aggTime;
7055   
7056  * Orientation of links affects the flowAlongLimit/flowAgainstLimit
7057   
7058  transfer_linksParam(linksModelToCalc,years,transfer_techs,"flowAlongLimit")
7059      $transfer_finiteLinkLimit(linksModelToCalc,years,transfer_techs)
7060      = (sum(linksData$(links_aggregate(linksModelToCalc,linksData)
7061                       and transfer_incidenceData_flip(linksData) = 1),
7062              transfer_linksParamIn(linksData,years,transfer_techs,"flowAlongLimit")
7063              * transfer_linksParamIn(linksData,years,transfer_techs,"linksUpperLimit"))
7064          + sum(linksData$(links_aggregate(linksModelToCalc,linksData)
7065                          and transfer_incidenceData_flip(linksData) = -1),
7066              transfer_linksParamIn(linksData,years,transfer_techs,"flowAgainstLimit")
7067              * transfer_linksParamIn(linksData,years,transfer_techs,"linksUpperLimit")))
7068      / sum(linksData$links_aggregate(linksModelToCalc,linksData),
7069              transfer_linksParamIn(linksData,years,transfer_techs,"linksUpperLimit"));
7070   
7071  transfer_linksParam(linksModelToCalc,years,transfer_techs,"flowAgainstLimit")
7072      $transfer_finiteLinkLimit(linksModelToCalc,years,transfer_techs)
7073      = (sum(linksData$(links_aggregate(linksModelToCalc,linksData)
7074                       and transfer_incidenceData_flip(linksData) = -1),
7075              transfer_linksParamIn(linksData,years,transfer_techs,"flowAlongLimit")
7076              * transfer_linksParamIn(linksData,years,transfer_techs,"linksUpperLimit"))
7077          + sum(linksData$(links_aggregate(linksModelToCalc,linksData)
7078                          and transfer_incidenceData_flip(linksData) = 1),
7079              transfer_linksParamIn(linksData,years,transfer_techs,"flowAgainstLimit")
7080              * transfer_linksParamIn(linksData,years,transfer_techs,"linksUpperLimit")))
7081      / sum(linksData$links_aggregate(linksModelToCalc,linksData),
7082              transfer_linksParamIn(linksData,years,transfer_techs,"linksUpperLimit"));
7083   
7084  transfer_linksParam(linksModelToCalc,years,transfer_techs,"flowAlongLimit")
7085      $transfer_infiniteLinkLimit(linksModelToCalc,years,transfer_techs)
7086      = (sum(linksData$(links_aggregate(linksModelToCalc,linksData)
7087                       and transfer_incidenceData_flip(linksData) = 1
7088                       and transfer_linksParamIn(linksData,years,transfer_techs,"linksUpperLimit") = inf),
7089              transfer_linksParamIn(linksData,years,transfer_techs,"flowAlongLimit"))
7090          + sum(linksData$(links_aggregate(linksModelToCalc,linksData)
7091                          and transfer_incidenceData_flip(linksData) = -1
7092                          and transfer_linksParamIn(linksData,years,transfer_techs,"linksUpperLimit") = inf),
7093              transfer_linksParamIn(linksData,years,transfer_techs,"flowAgainstLimit")))
7094      / sum(linksData$(links_aggregate(linksModelToCalc,linksData)
7095                      and transfer_linksParamIn(linksData,years,transfer_techs,"linksUpperLimit") = inf ),
7096              1);
7097   
7098  transfer_linksParam(linksModelToCalc,years,transfer_techs,"flowAgainstLimit")
7099      $transfer_infiniteLinkLimit(linksModelToCalc,years,transfer_techs)
7100      = (sum(linksData$(links_aggregate(linksModelToCalc,linksData)
7101                       and transfer_incidenceData_flip(linksData) = -1
7102                       and transfer_linksParamIn(linksData,years,transfer_techs,"linksUpperLimit") = inf),
7103              transfer_linksParamIn(linksData,years,transfer_techs,"flowAlongLimit"))
7104          + sum(linksData$(links_aggregate(linksModelToCalc,linksData)
7105                          and transfer_incidenceData_flip(linksData) = 1
7106                          and transfer_linksParamIn(linksData,years,transfer_techs,"linksUpperLimit") = inf),
7107              transfer_linksParamIn(linksData,years,transfer_techs,"flowAgainstLimit")))
7108      / sum(linksData$(links_aggregate(linksModelToCalc,linksData)
7109                      and transfer_linksParamIn(linksData,years,transfer_techs,"linksUpperLimit") = inf ),
7110              1);
7111   
7112  * Mapping for grid segments using DC optimal power flow
7113  set gridSegments_dcopf(linksModel,transfer_techs,gridSegments);
7114  gridSegments_dcopf(linksModelToCalc,transfer_techs,gridSegments)
7115      $transfer_gridSegments(linksModelToCalc,transfer_techs,gridSegments,"useDCopf")
7117      = yes;
7119   
7120  * Ensure each grid segment uses exactly one commodity
7121  parameter checkGridSegmentCommodities(gridSegments);
7122  checkGridSegmentCommodities(gridSegments)
7123      = sum (commodity$(sum((linksModelToCalc,transfer_techs,vintage)
7124                              $( transfer_coefficient(transfer_techs,vintage,commodity,"coefficient") > 0
7125                                  and gridSegments_dcopf(linksModelToCalc,transfer_techs,gridSegments)) , 1) > 0), 1);
7126   
7127  parameter transfer_incidenceSegments(nodesModel,linksModel,years,gridSegments);
7128  transfer_incidenceSegments(nodesModelToCalc,linksModelToCalc,yearsToCalc,gridSegments)
7129      $(sum((transfer_techs,vintage)$(transfer_usedTech(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
7130                                          and gridSegments_dcopf(linksModelToCalc,transfer_techs,gridSegments)
7131                                          and transfer_incidenceModel(nodesModelToCalc,linksModelToCalc) <> 0), 1) > 0)
7132      = transfer_incidenceModel(nodesModelToCalc,linksModelToCalc);
7133   
7134   
7138   
7139  scalar transfer_enableMIP;
7140  transfer_enableMIP = sum(transfer_usedTech(linksModelToCalc,yearsToCalc,transfer_techs,vintage)$transfer_techParam(transfer_techs,vintage,"mipLinks"), 1 );
7141   
7142   
7143  * ==== definition of variables ====
7144   
7145  * Initialise variables for linksBuild
7146  transfer_linksBuild.l(linksModel,years,transfer_techs,vintage)
7147      $transfer_availTech(linksModel,years,transfer_techs,vintage)
7148      = transfer_linksParam(linksModel,years,transfer_techs,"linksBuild");
7149  transfer_linksBuild.lo(linksModel,yearsToCalc,transfer_techs,vintage)
7150      $transfer_availTech(linksModel,yearsToCalc,transfer_techs,vintage)
7151      = transfer_linksBuild.l(linksModel,yearsToCalc,transfer_techs,vintage);
7152  transfer_linksBuild.fx(linksModel,years,transfer_techs,vintage)
7153      $transfer_linksParam(linksModel,years,transfer_techs,"noExpansion")
7154      = transfer_linksBuild.l(linksModel,years,transfer_techs,vintage);
7155   
7156  * Initialise variables for linksDecom
7157  transfer_linksDecom.l(linksModel,years,transfer_techs,vintage)
7158      $(transfer_decomTech(linksModel,years,transfer_techs,vintage)
7159        and years.val < sum(yearsToCalc$(ord(yearsToCalc) = 1), yearsToCalc.val))
7160      = sum((years_a,years_aa)$(sameas(years-1, years_aa)
7161                        and years_a.val > years_aa.val - transfer_techParam(transfer_techs,vintage,'lifeTime')
7162                        and years_a.val <= years.val - transfer_techParam(transfer_techs,vintage,'lifeTime')
7163                        and transfer_availTech(linksModel,years_a,transfer_techs,vintage)),
7164          transfer_linksBuild.l(linksModel,years_a,transfer_techs,vintage));
7165   
7166  transfer_linksDecom.l(linksModel,yearsToCalc,transfer_techs,vintage)
7167    $transfer_decomTech(linksModel,yearsToCalc,transfer_techs,vintage)
7168    = sum(years$
7169          (years.val < sum(yearsToCalc_a$(ord(yearsToCalc_a) = 1), yearsToCalc_a.val)
7170            and transfer_availTech(linksModel,years,transfer_techs,vintage)
7171            and years.val > sum(years_a$sameas(years_a, yearsToCalc-1), years_a.val) - transfer_techParam(transfer_techs,vintage,'lifeTime')
7172            and years.val <= yearsToCalc.val - transfer_techParam(transfer_techs,vintage,'lifeTime')),
7173        transfer_linksBuild.l(linksModel,years,transfer_techs,vintage))
7174      + sum(yearsToCalc_a$
7175          (yearsToCalc_a.val < sum(yearsToCalc_aa$(ord(yearsToCalc_aa) > 1), yearsToCalc_a.val)
7176            and transfer_availTech(linksModel,yearsToCalc_a,transfer_techs,vintage)
7177            and yearsToCalc_a.val > sum(years_a$sameas(years_a, yearsToCalc-1), years_a.val) - transfer_techParam(transfer_techs,vintage,'lifeTime')
7178            and yearsToCalc_a.val <= yearsToCalc.val - transfer_techParam(transfer_techs,vintage,'lifeTime')),
7179        transfer_linksBuild.l(linksModel,yearsToCalc_a,transfer_techs,vintage));
7180        ;
7181   
7182  transfer_linksDecom.lo(linksModel,yearsToCalc,transfer_techs,vintage)
7183      $(transfer_usedTech(linksModel,yearsToCalc,transfer_techs,vintage)
7184          and not transfer_techParam(transfer_techs,vintage,"freeDecom"))
7185      = transfer_linksDecom.l(linksModel,yearsToCalc,transfer_techs,vintage)
7186   
7187  * Calculate planned transfer links expansion
7188  parameter transfer_linksPlanned(linksModel,years,transfer_techs,vintage);
7189  transfer_linksPlanned(linksModel,years,transfer_techs,vintage) = 0;
7190  loop(years,
7191    transfer_linksPlanned(linksModel,years,transfer_techs,vintage)
7192      =
7193      transfer_linksPlanned(linksModel,years-1,transfer_techs,vintage)
7194          $transfer_usedTech(linksModel,years-1,transfer_techs,vintage)
7195      + transfer_linksBuild.l(linksModel,years,transfer_techs,vintage)
7196          $transfer_availTech(linksModel,years,transfer_techs,vintage)
7197      - transfer_linksDecom.l(linksModel,years,transfer_techs,vintage)
7198          $transfer_usedTech(linksModel,years,transfer_techs,vintage);
7199  );
7200   
7201  * Set initial state for planned units
7202  transfer_linksTotal.l(linksModel,years,transfer_techs,vintage)
7203    = transfer_linksPlanned(linksModel,years,transfer_techs,vintage)
7204   
7205  * Calculate if planned links expansion is bound by upper and lower limits
7206  set transfer_linkBoundsFixed(linksModel,years,transfer_techs);
7207  transfer_linkBoundsFixed(linksModel,years,transfer_techs)
7208    $(sum(vintage$transfer_usedTech(linksModel,years,transfer_techs,vintage),
7209          transfer_linksPlanned(linksModel,years,transfer_techs,vintage))
7210      = transfer_linksParam(linksModel,years,transfer_techs,"linksUpperLimit")
7211    and sum(vintage$transfer_usedTech(linksModel,years,transfer_techs,vintage),
7212          transfer_linksPlanned(linksModel,years,transfer_techs,vintage))
7213      = transfer_linksParam(linksModel,years,transfer_techs,"linksLowerLimit"))
7214    = yes;
7215   
7216  * Fix linksBuild, linksDecom, linksTotal if levels are predetermined by upper and lower limits
7217  transfer_linksBuild.fx(linksModel,years,transfer_techs,vintage)
7218    $(transfer_availTech(linksModel,years,transfer_techs,vintage)
7219      and transfer_linkBoundsFixed(linksModel,years,transfer_techs))
7220    = transfer_linksBuild.l(linksModel,years,transfer_techs,vintage);
7221  transfer_linksDecom.fx(linksModel,years,transfer_techs,vintage)
7222    $(transfer_usedTech(linksModel,years,transfer_techs,vintage)
7223      and transfer_linkBoundsFixed(linksModel,years,transfer_techs))
7224    = transfer_linksDecom.l(linksModel,years,transfer_techs,vintage);
7225  transfer_linksTotal.fx(linksModel,years,transfer_techs,vintage)
7226    $(transfer_usedTech(linksModel,years,transfer_techs,vintage)
7227      and transfer_linkBoundsFixed(linksModel,years,transfer_techs))
7228    = transfer_linksTotal.l(linksModel,years,transfer_techs,vintage);
7229   
7230  transfer_linksTotal_MIP.up(linksModel,years,transfer_techs,vintage)
7231      $(transfer_usedTech(linksModel,years,transfer_techs,vintage)
7232        and transfer_techParam(transfer_techs,vintage,"miplinks") = 1)
7233      = transfer_linksParam(linksModel,years,transfer_techs,"linksUpperLimit");
7234   
7235  * Add parameter for fixing capacities during myopic runs
7236  parameter transfer_linksDelta_upper(linksModel,years,transfer_techs);
7237  parameter transfer_linksDelta_lower(linksModel,years,transfer_techs);
7238   
7239   
7240  * ==== declaration of equations ====
7241   
7242  equations
7243    Eq_transfer_linksBalance(linksModel,years,transfer_techs,vintage
7244      ) "Ensures the links balance over the planning period."
7245    Eq_transfer_linksFixedDecom(linksModel,years,transfer_techs,vintage
7246      ) "Restricts the fixed decommissioning of links over the planning period."
7247    Eq_transfer_linksFreeDecom(linksModel,years,transfer_techs,vintage
7248      ) "Restricts the free decommissioning of links over the planning period."
7249    Eq_transfer_linksUpperLimit(linksModel,years,transfer_techs
7250      ) "Upper bound for the total number of links."
7251    Eq_transfer_linksLowerLimit(linksModel,years,transfer_techs
7252      ) "Lower bound for the total number of links."
7253    Eq_transfer_linksTotalMIP(linksModel,years,transfer_techs,vintage
7254      ) "Fixes the total number of links to the corresponding integer variable."
7255   
7256    Eq_transfer_flowAlongUpperLimit(timeModel,linksModel,years,transfer_techs,vintage
7257      ) "Upper bound for the flow along the transfer links."
7258    Eq_transfer_flowAgainstUpperLimit(timeModel,linksModel,years,transfer_techs,vintage
7259      ) "Upper bound for the flow against the transfer links."
7260    Eq_transfer_dcopf_angleFlows(timeModel,linksModel,years,gridSegments
7261      )
7262    Eq_transfer_dcopf_cycleFlows(timeModel,years,cycles,gridSegments
7263      )
7264    ;
7265   
7266   
7267  * ==== equation definition ====
7268  * // ## Equations
7269  * // ### Transfer Links Balance
7270  * // Ensures that the transfer between nodes is balanced.
7271  * // {Eq_transfer_linksBalance}
7272  Eq_transfer_linksBalance(linksModelToCalc,yearsSel,transfer_techs,vintage)
7273      $((transfer_usedTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
7274            or sum(years$sameas(years,yearsSel), transfer_usedTech(linksModelToCalc,years-1,transfer_techs,vintage)))
7275          and not transfer_linkBoundsFixed(linksModelToCalc,yearsSel,transfer_techs))
7276      ..
7277      transfer_linksTotal(linksModelToCalc,yearsSel,transfer_techs,vintage)
7278      =e=
7279      sum(yearsToCalc$(ord(yearsToCalc) = 1 and sameas(yearsToCalc, yearsSel)),
7280        sum(years$sameas(years, yearsToCalc),
7281          transfer_linksTotal(linksModelToCalc,years-1,transfer_techs,vintage)
7282            $transfer_usedTech(linksModelToCalc,years-1,transfer_techs,vintage)))
7283      + sum((yearsToCalc)$(ord(yearsToCalc) > 1 and sameas(yearsToCalc, yearsSel)),
7284        transfer_linksTotal(linksModelToCalc,yearsToCalc-1,transfer_techs,vintage)
7285          $transfer_usedTech(linksModelToCalc,yearsToCalc-1,transfer_techs,vintage))
7286      + transfer_linksBuild(linksModelToCalc,yearsSel,transfer_techs,vintage)
7287          $transfer_availTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
7288      - transfer_linksDecom(linksModelToCalc,yearsSel,transfer_techs,vintage)
7289          $transfer_usedTech(linksModelToCalc,yearsSel,transfer_techs,vintage);
7290   
7291  * // ### Transfer Links Fixed Decommissioning
7292  * // Balances fixed link decommissioning.
7293  * // {Eq_transfer_linksFixedDecom}
7294  Eq_transfer_linksFixedDecom(linksModelToCalc,yearsSel,transfer_techs,vintage)
7295      $(transfer_decomTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
7296          and not transfer_techParam(transfer_techs,vintage,"freeDecom") = 1
7297          and not transfer_linkBoundsFixed(linksModelToCalc,yearsSel,transfer_techs))
7298      ..
7299      transfer_linksDecom(linksModelToCalc,yearsSel,transfer_techs,vintage)
7300      =e=
7301      sum(years$
7302          (transfer_availTech(linksModelToCalc,years,transfer_techs,vintage)
7303              and years.val > sum(yearsToCalc$sameas(yearsToCalc+1, yearsSel), yearsToCalc.val) - transfer_techParam(transfer_techs,vintage,'lifeTime')
7304              and years.val <= yearsSel.val - transfer_techParam(transfer_techs,vintage,'lifeTime')),
7305          transfer_linksBuild(linksModelToCalc,years,transfer_techs,vintage));
7306   
7307  * // ### Transfer Links Free Decommissioning
7308  * // Balances free link decommissioning.
7309  * // {Eq_transfer_linksFreeDecom}
7310  Eq_transfer_linksFreeDecom(linksModelToCalc,yearsSel,transfer_techs,vintage)
7311      $((transfer_decomTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
7312          or transfer_usedTech(linksModelToCalc,yearsSel,transfer_techs,vintage))
7313          and transfer_techParam(transfer_techs,vintage,"freeDecom") = 1)
7314      ..
7315      sum(years$
7316            ((transfer_decomTech(linksModelToCalc,years,transfer_techs,vintage)
7317              or transfer_usedTech(linksModelToCalc,years,transfer_techs,vintage))
7318              and years.val < sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)),
7319          transfer_linksDecom(linksModelToCalc,years,transfer_techs,vintage))
7320      + sum(yearsToCalc$
7321            ((transfer_decomTech(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
7322              or transfer_usedTech(linksModelToCalc,yearsToCalc,transfer_techs,vintage))
7323              and yearsToCalc.val >= sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
7324              and yearsToCalc.val <= yearsSel.val),
7325          transfer_linksDecom(linksModelToCalc,yearsToCalc,transfer_techs,vintage))
7326      =g=
7327      sum(years$
7328            (transfer_availTech(linksModelToCalc,years,transfer_techs,vintage)
7329              and years.val < sum(yearsToCalc$(ord(yearsToCalc)=1), yearsToCalc.val) - transfer_techParam(transfer_techs,vintage,'lifeTime')),
7330          transfer_linksBuild(linksModelToCalc,years,transfer_techs,vintage))
7331      + sum(yearsToCalc$
7332            (transfer_availTech(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
7333              and yearsToCalc.val >= sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
7334              and yearsToCalc.val <= yearsSel.val - transfer_techParam(transfer_techs,vintage,'lifeTime')),
7335          transfer_linksBuild(linksModelToCalc,yearsToCalc,transfer_techs,vintage));
7336   
7337  * // ### Transfer Links Lower Limit
7338  * // Ensures link capacity lower limits.
7339  * // {Eq_transfer_linksLowerLimit}
7340  Eq_transfer_linksLowerLimit(linksModelToCalc,yearsSel,transfer_techs)
7341      $(transfer_linksParam(linksModelToCalc,yearsSel,transfer_techs,'linksLowerLimit') > 0 )
7342      ..
7343      sum(vintage$transfer_usedTech(linksModelToCalc,yearsSel,transfer_techs,vintage),
7344          transfer_linksTotal(linksModelToCalc,yearsSel,transfer_techs,vintage))
7345      =g=
7346      transfer_linksParam(linksModelToCalc,yearsSel,transfer_techs,"linksLowerLimit");
7347   
7348  * // ### Transfer Links Upper Limit
7349  * // Ensures link capacity upper limits.
7350  * // {Eq_transfer_linksUpperLimit}
7351  Eq_transfer_linksUpperLimit(linksModelToCalc,yearsSel,transfer_techs)
7352      $(transfer_linksParam(linksModelToCalc,yearsSel,transfer_techs,'linksUpperLimit') >= 0
7353          and transfer_linksParam(linksModelToCalc,yearsSel,transfer_techs,'linksUpperLimit') < +inf )
7354      ..
7355      sum(vintage$transfer_usedTech(linksModelToCalc,yearsSel,transfer_techs,vintage),
7356          transfer_linksTotal(linksModelToCalc,yearsSel,transfer_techs,vintage))
7357      =l=
7358      transfer_linksParam(linksModelToCalc,yearsSel,transfer_techs,"linksUpperLimit");
7359   
7360  * // ### Transfer Links Total MIP
7361  * // Ensures number of MIP links.
7362  * // {Eq_transfer_linksTotalMIP}
7363  Eq_transfer_linksTotalMIP(linksModelToCalc,yearsSel,transfer_techs,vintage)
7364      $(transfer_usedTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
7365          and transfer_techParam(transfer_techs,vintage,"mipLinks"))
7366      ..
7367      transfer_linksTotal(linksModelToCalc,yearsSel,transfer_techs,vintage)
7368      =e=
7369      transfer_linksTotal_MIP(linksModelToCalc,yearsSel,transfer_techs,vintage);
7370   
7371  * // ### Transfer Links Flow Along Upper Limit
7372  * // Ensures links flow along upper limit.
7373  * // {Eq_transfer_flowAlongUpperLimit}
7374  Eq_transfer_flowAlongUpperLimit(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
7375      $transfer_usedTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
7376      ..
7377      transfer_flowAlong(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
7378      =l=
7379      transfer_flowProfile(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage,"along")
7380      * transfer_linksTotal(linksModelToCalc,yearsSel,transfer_techs,vintage)
7381      * transfer_techParam(transfer_techs,vintage,"flowUpperLimit")
7382      ;
7383   
7384  * // ### Transfer Links Flow Against Upper Limit
7385  * // Ensures links flow against upper limit.
7386  * // {Eq_transfer_flowAgainstUpperLimit}
7387  Eq_transfer_flowAgainstUpperLimit(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
7388      $transfer_usedTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
7389      ..
7390      transfer_flowAgainst(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
7391      =l=
7392      transfer_flowProfile(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage,"against")
7393      * transfer_linksTotal(linksModelToCalc,yearsSel,transfer_techs,vintage)
7394      * transfer_techParam(transfer_techs,vintage,"flowUpperLimit")
7395      ;
7396   
7397  set transfer_usedOpf(linksModel,years,gridSegments,transfer_techs,vintage);
7398  transfer_usedOpf(linksModel,yearsToCalc,gridSegments,transfer_techs,vintage)
7399      $(transfer_usedTech(linksModel,yearsToCalc,transfer_techs,vintage)
7400          and gridSegments_dcopf(linksModel,transfer_techs,gridSegments))
7401      = yes;
7402   
7403  set transfer_usedOpfLinks(linksModel,years,gridSegments);
7404  option transfer_usedOpfLinks < transfer_usedOpf;
7405   
7406  set transfer_usedOpfSegments(years,gridSegments);
7407  option transfer_usedOpfSegments < transfer_usedOpf;
7408   
7412  * // ### Transfer DC optimal flow angle flows
7413  * // Angle flows.
7414  * // {Eq_transfer_dcopf_cycleFlows}
7415  Eq_transfer_dcopf_angleFlows(timeModelSel,linksModelToCalc,yearsSel,gridSegments)
7416      $transfer_usedOpfLinks(linksModelToCalc,yearsSel,gridSegments)
7417      ..
7418      sum ((transfer_techs,vintage)
7419              $transfer_usedOpf(linksModelToCalc,yearsSel,gridSegments,transfer_techs,vintage),
7420          ( transfer_flowAlong(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
7421              - transfer_flowAgainst(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage) )
7422          * transfer_dcopf_Xtech(linksModelToCalc,yearsSel,transfer_techs,vintage,gridSegments) )
7423      =e=
7424      sum ( nodesModelSel,
7425          - transfer_incidenceModel(nodesModelSel,linksModelToCalc)
7426          * transfer_dcopf_voltageAngle(timeModelSel,nodesModelSel,yearsSel,gridSegments));
7430   
7431   
7432  * ==== model definition ====
7433   
7434  Model M_transfer
7435  /
7436    Eq_transfer_linksBalance
7437    Eq_transfer_linksFixedDecom
7438    Eq_transfer_linksFreeDecom
7439    Eq_transfer_linksLowerLimit
7440    Eq_transfer_linksUpperLimit
7441    Eq_transfer_linksTotalMIP
7442    Eq_transfer_flowAlongUpperLimit
7443    Eq_transfer_flowAgainstUpperLimit
7447    Eq_transfer_dcopf_angleFlows
7451  /;
INCLUDE    C:\Local\REMix\framework\remix\framework\model\source\core\sourcesink.gms
7453  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
7454  * SPDX-License-Identifier: BSD-3-Clause
7455   
7456  * // # core_sourcesink
7457  * // The equations in this file describe the sources and sinks in the model.
7458   
7459  * // ## Variables
7460  * // {special_table_sourcesink_variables}
7975   
7976  * // ## Aggregation of profiles
7977  * // Profiles are rescaled based on the annual sum.
7978   
7979  set sourcesink_usesProfileScaling(nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile);
7980  sourcesink_usesProfileScaling(nodesData,years,sourcesink_techs,commodity,"fixed")
7981      $sourcesink_configIn(nodesData,years,sourcesink_techs,commodity,"scaleFixProfileWithFixSum") = yes;
7982  sourcesink_usesProfileScaling(nodesData,years,sourcesink_techs,commodity,"lower")
7983      $sourcesink_configIn(nodesData,years,sourcesink_techs,commodity,"scaleLowProfileWithLowSum") = yes;
7984  sourcesink_usesProfileScaling(nodesData,years,sourcesink_techs,commodity,"upper")
7985      $sourcesink_configIn(nodesData,years,sourcesink_techs,commodity,"scaleUpProfileWithUpSum") = yes;
7986   
7987  parameter sourcesink_ProfileSum(nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile);
7988  sourcesink_ProfileSum(nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile)
7989      $sourcesink_usesProfileScaling(nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile)
7990      = sum(timeData, sourcesink_profileIn(timeData,nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile));
7991   
7992  parameter sourcesink_ProfileAbsSum(nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile);
7993  sourcesink_ProfileAbsSum(nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile)
7994      $sourcesink_usesProfileScaling(nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile)
7995      = sum(timeData, abs(sourcesink_profileIn(timeData,nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile)));
7996   
7997  set sourcesink_ProfileScaleError(nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile);
7998  sourcesink_ProfileScaleError(nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile)
7999      $(sourcesink_usesProfileScaling(nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile)
8000          and sourcesink_ProfileSum(nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile) = 0
8001          and sourcesink_ProfileAbsSum(nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile) > 0)
8002      = yes;
8003   
8004  abort$sum((nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile),
8005              sourcesink_ProfileScaleError(nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile)) "One or more profiles cannot be rescaled as their annual sum equals zero!"
8006   
8007  * calculate scaling factor for each type
8008  parameter sourcesink_scalingFactor(nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile);
8009  sourcesink_scalingFactor(nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile)
8010      $(sourcesink_ProfileSum(nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile)
8011          and sourcesink_usesProfileScaling(nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile))
8012      = sum(pc_sourcesink_annualSum$sameas(pc_sourcesink_profile,pc_sourcesink_annualSum),
8013          sourcesink_annualSumIn(nodesData,years,sourcesink_techs,commodity,pc_sourcesink_annualSum)
8014              / sourcesink_ProfileSum(nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile));
8015   
8016  * rescale profiles
8017  sourcesink_profileIn(timeData,nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile)
8018      $sourcesink_usesProfileScaling(nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile)
8019      = sourcesink_profileIn(timeData,nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile)
8020          * sourcesink_scalingFactor(nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile)
8021   
8022  * // ## Aggregation of profiles
8023  * // Profiles are aggregated based on the mapping from data nodes to model nodes.
8024   
8025  * ==== aggregation of profiles ====
8026  set sourcesink_usesProfileIn(nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile);
8027  option sourcesink_usesProfileIn < sourcesink_profileIn
8028   
8029  set sourcesink_usesProfile(nodesModel,years,sourcesink_techs,commodity,pc_sourcesink_profile);
8030  sourcesink_usesProfile(nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity,pc_sourcesink_profile)
8031      $sum(nodesData$(aggregateNodesModel(nodesData,nodesModelToCalc)
8032          and sourcesink_usesProfileIn(nodesData,yearsToCalc,sourcesink_techs,commodity,pc_sourcesink_profile)), 1)
8033      = yes;
8034   
8035  * aagregate time dimension
8036  parameter sourcesink_profileIn_aggTime(timeModel,nodesData,yearsToCalc,sourcesink_techs,commodity,pc_sourcesink_profile);
8037  sourcesink_profileIn_aggTime(timeModelToCalc,nodesData,yearsToCalc,sourcesink_techs,commodity,pc_sourcesink_profile)
8038    $sourcesink_usesProfileIn(nodesData,yearsToCalc,sourcesink_techs,commodity,pc_sourcesink_profile)
8039    = sum(timeData$timeMapping(timeData,timeModelToCalc),
8040            sourcesink_profileIn(timeData,nodesData,yearsToCalc,sourcesink_techs,commodity,pc_sourcesink_profile)
8041            / timeLength(timeModelToCalc));
8042  option clear = sourcesink_profileIn;
8043   
8044  * sum up absolute profiles
8045  parameter sourcesink_profile(timeModel,nodesModel,years,sourcesink_techs,commodity,pc_sourcesink_profile);
8046  sourcesink_profile(timeModelToCalc,nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity,pc_sourcesink_profile)
8047      $sourcesink_usesProfile(nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity,pc_sourcesink_profile)
8048      = sum(nodesData$aggregateNodesModel(nodesData,nodesModelToCalc),
8049              sourcesink_profileIn_aggTime(timeModelToCalc,nodesData,yearsToCalc,sourcesink_techs,commodity,pc_sourcesink_profile));
8050  option clear = sourcesink_profileIn_aggTime;
8051   
8052  set sourcesink_enabled(nodesModel,years,sourcesink_techs,commodity);
8053  option sourcesink_enabled < sourcesink_config;
8054   
8056   
8057  * ==== declaration of variables ====
8058  * // ## Bounding of variables
8059  * // Source-sink variables with either a lower, fixed, or upper profile are bounded to their respective profiles given by the input parameters.
8060   
8061  sourcesink_flow.lo(timeModelToCalc,nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity)
8062      $( sourcesink_enabled(nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity)
8063          and sourcesink_config(nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity,"usesLowerProfile") = 1
8064          and sourcesink_profile(timeModelToCalc,nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity,"lower") > -inf )
8065      = sourcesink_profile(timeModelToCalc,nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity,"lower");
8066   
8067  sourcesink_flow.up(timeModelToCalc,nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity)
8068      $( sourcesink_enabled(nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity)
8069          and sourcesink_config(nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity,"usesUpperProfile") = 1
8070          and sourcesink_profile(timeModelToCalc,nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity,"upper") < inf )
8071      = sourcesink_profile(timeModelToCalc,nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity,"upper");
8072   
8073  sourcesink_flow.fx(timeModelToCalc,nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity)
8074      $( sourcesink_enabled(nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity)
8075          and sourcesink_config(nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity,"usesFixedProfile") = 1 )
8076      = sourcesink_profile(timeModelToCalc,nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity,"fixed");
8077   
8078  option clear = sourcesink_profile;
8079   
8080   
8081  * ==== equation definition ====
8082  * // ## Equations
8083  equations
8084  Eq_sourcesink_useFixedSum(nodesModel,years,sourcesink_techs,commodity
8085      ) "Fixes the annual sum from sources / to sinks"
8086  Eq_sourcesink_useLowerSum(nodesModel,years,sourcesink_techs,commodity
8087      ) "Limits the lower sum from sources / to sinks"
8088  Eq_sourcesink_useUpperSum(nodesModel,years,sourcesink_techs,commodity
8089      ) "Limits the upper sum from sources / to sinks"
8090    ;
8091   
8092  * // ### Fixed annual sums for sources and sinks
8093  * // Ensures that the sources and sinks with annual sums given as fixed limits are balanced.
8094  * // {Eq_sourcesink_useFixedSum}
8095  Eq_sourcesink_useFixedSum(nodesModelSel,yearsSel,sourcesink_techs,commodity)
8096      $( sourcesink_enabled(nodesModelSel,yearsSel,sourcesink_techs,commodity)
8097          and sourcesink_config(nodesModelSel,yearsSel,sourcesink_techs,commodity,"usesFixedSum") = 1 )
8098      ..
8099      sum(timeModelSel,
8100          sourcesink_flow(timeModelSel,nodesModelSel,yearsSel,sourcesink_techs,commodity))
8101      =e=
8102      sourcesink_annualSum(nodesModelSel,yearsSel,sourcesink_techs,commodity,"fixed")
8103      ;
8104   
8105  * // ### Lower annual sums for sources and sinks
8106  * // Ensures that the sources and sinks with annual sums given as lower limits are balanced.
8107  * // {Eq_sourcesink_useLowerSum}
8108  Eq_sourcesink_useLowerSum(nodesModelSel,yearsSel,sourcesink_techs,commodity)
8109      $( sourcesink_enabled(nodesModelSel,yearsSel,sourcesink_techs,commodity)
8110          and sourcesink_config(nodesModelSel,yearsSel,sourcesink_techs,commodity,"usesLowerSum") = 1
8111          and sourcesink_annualSum(nodesModelSel,yearsSel,sourcesink_techs,commodity,"lower") > -inf )
8112      ..
8113      sum(timeModelSel,
8114          sourcesink_flow(timeModelSel,nodesModelSel,yearsSel,sourcesink_techs,commodity))
8115      =g=
8116      sourcesink_annualSum(nodesModelSel,yearsSel,sourcesink_techs,commodity,"lower")
8117      ;
8118   
8119  * // ### Upper annual sums for sources and sinks
8120  * // Ensures that the sources and sinks with annual sums given as upper limits are balanced.
8121  * // {Eq_sourcesink_useUpperSum}
8122  Eq_sourcesink_useUpperSum(nodesModelSel,yearsSel,sourcesink_techs,commodity)
8123      $( sourcesink_enabled(nodesModelSel,yearsSel,sourcesink_techs,commodity)
8124          and sourcesink_config(nodesModelSel,yearsSel,sourcesink_techs,commodity,"usesUpperSum") = 1
8125          and sourcesink_annualSum(nodesModelSel,yearsSel,sourcesink_techs,commodity,"upper") < inf )
8126      ..
8127      sum(timeModelSel,
8128          sourcesink_flow(timeModelSel,nodesModelSel,yearsSel,sourcesink_techs,commodity))
8129      =l=
8130      sourcesink_annualSum(nodesModelSel,yearsSel,sourcesink_techs,commodity,"upper")
8131      ;
8132   
8133   
8134  * ==== model definition ====
8135   
8136  Model M_sourcesink
8137  /
8138    Eq_sourcesink_useFixedSum
8139    Eq_sourcesink_useLowerSum
8140    Eq_sourcesink_useUpperSum
8141  /;
INCLUDE    C:\Local\REMix\framework\remix\framework\model\source\core\balance.gms
8143  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
8144  * SPDX-License-Identifier: BSD-3-Clause
8145   
8146  * // # balance
8147  * // The equations in this file describe the commodity balancing in the model.
8148   
8149  Equations
8150    Eq_balance_commodities(timeModel,nodesModel,years,commodity
8151      ) "Balance for each commodity used in each time step, region, and year";
8152   
8153   
8154  * ==== calculation of mappings ====
8155   
8156  set balance_techComm(techs,commodity);
8157  balance_techComm(converter_techs(techs),commodity)
8158      $sum((vintage,activity)$converter_coefficient(converter_techs,vintage,activity,commodity,"coefficient"), 1) = yes;
8159  balance_techComm(storage_techs(techs),commodity)
8160      $sum((vintage)$storage_sizeParam(storage_techs,vintage,commodity,"size"), 1) = yes;
8161  balance_techComm(transfer_techs(techs),commodity)
8162      $sum((vintage)$transfer_coefficient(transfer_techs,vintage,commodity,"coefficient"), 1) = yes;
8163  balance_techComm(sourcesink_techs(techs),commodity)
8164      $sum((nodesModelToCalc,yearsToCalc)$sourcesink_enabled(nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity), 1) = yes;
8165   
8166  set balance_usedConverter(nodesModel,years,commodity);
8167  set balance_usedStorage(nodesModel,years,commodity);
8168  set balance_usedTransfer(nodesModel,years,commodity);
8169  set balance_usedSourceSink(nodesModel,years,commodity);
8170  set balance_usedBalance(nodesModel,years,commodity);
8171   
8172  balance_usedConverter(nodesModel,years,commodity)
8173      = sum ((converter_techs,vintage,activity)
8174              $( converter_coefficient(converter_techs,vintage,activity,commodity,"coefficient") <> 0
8175                  and converter_usedTech(nodesModel,years,converter_techs,vintage) ), 1);
8176   
8177  balance_usedStorage(nodesModel,years,commodity)
8178      = sum ((storage_techs,vintage,activity)
8179              $(storage_sizeParam(storage_techs,vintage,commodity,"size") <> 0
8180                  and storage_usedTech(nodesModel,years,storage_techs,vintage) ), 1);
8181   
8182  balance_usedTransfer(nodesModel,years,commodity)
8183      = sum ((linksModel,transfer_techs,vintage)
8184              $(transfer_coefficient(transfer_techs,vintage,commodity,"coefficient") <> 0
8185                  and transfer_incidenceModel(nodesModel,linksModel) <> 0), 1);
8186   
8187  option balance_usedSourceSink < sourcesink_enabled;
8188   
8189  balance_usedBalance(nodesModel,years,commodity)
8190      $(balance_usedConverter(nodesModel,years,commodity)
8191          or balance_usedStorage(nodesModel,years,commodity)
8192          or balance_usedTransfer(nodesModel,years,commodity)
8193          or balance_usedSourceSink(nodesModel,years,commodity) )
8194      = yes;
8195   
8196   
8197  * ==== equation definition ====
8198   
8199  * // ### Balance commodities
8200  * // Balancing of commodities for all model regions, time steps, and years
8201  * // {Eq_balance_commodities}
8202  Eq_balance_commodities(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,commodity)
8203      $balance_usedBalance(nodesModelSel,yearsSel,commodity)
8204      ..
8205  * converter
8206      sum((converter_techs,vintage,activity)
8207              $( converter_coefficientProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity,commodity) <> 0
8208                  AND converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage) ),
8209          converter_activity(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity)
8210              * converter_coefficientProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity,commodity)
8211              * timeLength(timeModelSel)
8212          + converter_unitsUsingActivity_MIP(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity)
8213              * converter_coefficient(converter_techs,vintage,activity,commodity,"constant")
8214              * timeLength(timeModelSel))
8215   
8216  * storages
8217      + sum((storage_techs,vintage)
8218              $( storage_sizeParam(storage_techs,vintage,commodity,"size") <> 0
8219                  and storage_usedTech(nodesModelSel,yearsSel,storage_techs,vintage) ),
8220          storage_level(timeModelToCalc--1,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
8221          - storage_level(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
8223          - storage_losses(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
8224          * timeLength(timeModelSel)
8226          )
8227   
8228  * transfer
8229      + sum((linksModel,transfer_techs,vintage)
8230              $(transfer_usedTech(linksModel,yearsSel,transfer_techs,vintage)
8231                  and linksModelToCalc(linksModel)),
8232          (   transfer_flowAlong(timeModelSel,linksModel,yearsSel,transfer_techs,vintage)
8233                  $(transfer_incidenceModel(nodesModelSel,linksModel) > 0)
8234            + transfer_flowAgainst(timeModelSel,linksModel,yearsSel,transfer_techs,vintage)
8235                  $(transfer_incidenceModel(nodesModelSel,linksModel) < 0) )
8236          * transfer_coefficient(transfer_techs,vintage,commodity,"coefficient")
8237          * timeLength(timeModelSel))
8238   
8239      - sum((linksModel,transfer_techs,vintage)
8240              $(transfer_usedTech(linksModel,yearsSel,transfer_techs,vintage)
8241                  and linksModelToCalc(linksModel)),
8242          (   transfer_flowAlong(timeModelSel,linksModel,yearsSel,transfer_techs,vintage)
8243                  $(transfer_incidenceModel(nodesModelSel,linksModel) < 0)
8244            + transfer_flowAgainst(timeModelSel,linksModel,yearsSel,transfer_techs,vintage)
8245                  $(transfer_incidenceModel(nodesModelSel,linksModel) > 0) )
8246          * transfer_coefficient(transfer_techs,vintage,commodity,"coefficient")
8247          * timeLength(timeModelSel))
8248   
8249      + 0.5 * sum((linksModel,transfer_techs,vintage)
8250              $(transfer_usedTech(linksModel,yearsSel,transfer_techs,vintage)
8251                  AND linksModelToCalc(linksModel)),
8252          (   transfer_flowAlong(timeModelSel,linksModel,yearsSel,transfer_techs,vintage)
8253                  $(transfer_incidenceModel(nodesModelSel,linksModel) <> 0)
8254            + transfer_flowAgainst(timeModelSel,linksModel,yearsSel,transfer_techs,vintage)
8255                  $(transfer_incidenceModel(nodesModelSel,linksModel) <> 0) )
8256          * timeLength(timeModelSel)
8257          * ( transfer_coefPerFlow(transfer_techs,vintage,commodity,"coefPerFlow")
8258              + sum(link_types,
8259                  transfer_coefPerLength(transfer_techs,vintage,commodity,link_types,"coefPerLength")
8260                  * transfer_lengthParam(linksModel,link_types,"length"))))
8261   
8262  * sourcesink
8263      + sum((sourcesink_techs)
8264              $sourcesink_enabled(nodesModelSel,yearsSel,sourcesink_techs,commodity),
8265          sourcesink_flow(timeModelSel,nodesModelSel,yearsSel,sourcesink_techs,commodity)
8266          * timeLength(timeModelSel))
8267      =e=
8268      0;
8269   
8270   
8271  * ==== model definition ====
8272   
8273  Model M_balance
8274  /
8275    Eq_balance_commodities
8276  /;
8277   
INCLUDE    C:\Local\REMix\framework\remix\framework\model\source\accounting\equations.gms
8279  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
8280  * SPDX-License-Identifier: BSD-3-Clause
8281   
8282  * // # accounting_equations
8283   
8284  * ==== declaration of variables ====
8285   
8286  variables
8287  accounting_indicator(accNodesModel,accYears,indicator)
8288  accounting_indicator_links(linksModel,years,indicator)
8289  accounting_objective
8290    ;
8291   
8292   
8293  * ==== definition of variables ====
8294   
8295  * set the variable levels to be fixed for years before the optimization years
8296  accounting_indicator.l(accNodesModel,accYears,indicator)
8297      $activeIndicators(accNodesModel,accYears,indicator)
8298      = 0;
8299   
8300  accounting_indicator.lo(accNodesModel,accYears,indicator)
8301      $(accounting_indicatorBounds(accNodesModel,accYears,indicator,"useLower") <> 0 )
8302      = accounting_indicatorBounds(accNodesModel,accYears,indicator,"lowerValue");
8303   
8304  accounting_indicator.up(accNodesModel,accYears,indicator)
8305      $(accounting_indicatorBounds(accNodesModel,accYears,indicator,"useUpper") <> 0 )
8306      = accounting_indicatorBounds(accNodesModel,accYears,indicator,"upperValue");
8307   
8308  accounting_indicator.fx(accNodesModel,accYears,indicator)
8309      $(accounting_indicatorBounds(accNodesModel,accYears,indicator,"useFixed") <> 0 )
8310      = accounting_indicatorBounds(accNodesModel,accYears,indicator,"fixedValue");
8311   
8312   
8313  accounting_indicator_links.lo(linksModelToCalc,yearsToCalc,indicator)
8314      $(accounting_indicatorBounds_links(linksModelToCalc,yearsToCalc,indicator,"useLower") <> 0 )
8315      = accounting_indicatorBounds_links(linksModelToCalc,yearsToCalc,indicator,"lowerValue");
8316   
8317  accounting_indicator_links.up(linksModelToCalc,yearsToCalc,indicator)
8318      $(accounting_indicatorBounds_links(linksModelToCalc,yearsToCalc,indicator,"useUpper") <> 0 )
8319      = accounting_indicatorBounds_links(linksModelToCalc,yearsToCalc,indicator,"upperValue");
8320   
8321  accounting_indicator_links.fx(linksModelToCalc,yearsToCalc,indicator)
8322      $(accounting_indicatorBounds_links(linksModelToCalc,yearsToCalc,indicator,"useFixed") <> 0 )
8323      = accounting_indicatorBounds_links(linksModelToCalc,yearsToCalc,indicator,"fixedValue");
8324   
8325   
8326  * ==== declaration of equations ====
8327   
8328  equations
8329  Eq_accounting_indicatorCalc(accNodesModel,accYears,indicator
8330      ) "Calculates the level of an indicator per accounting region"
8331  Eq_accounting_indicatorCalc_links(linksModel,years,indicator
8332      ) "Calculates the level of an indicator per model link"
8333  Eq_accounting_objective "Calculates the objective value based on the specified indicator"
8334    ;
8335   
8336   
8337  * ==== equations definition ====
8338  * // ## Equations
8339  * // ### Accounting Indicator Calculation
8340  * // Calculates the indicators for each model node for converters, sources and sinks, transfer, storage and variable indicators.
8341  * // {Eq_accounting_indicatorCalc}
8342  Eq_accounting_indicatorCalc(accNodesModel,accYearsSel(accYears),indicator)
8343      $activeIndicators(accNodesModel,accYears,indicator)
8344      ..
8345      accounting_indicator(accNodesModel,accYears,indicator)
8346      =e=
8347   
8348  * == variable indicators ==
8349      sum((accNodesModel_a,accYears_a,indicator_a)
8350          $(compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
8351              and variableIndicators(accNodesModel_a,accYears_a,indicator_a)),
8352          compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
8353          * accounting_indicator(accNodesModel_a,accYears_a,indicator_a))
8354   
8355  * == converters ==
8356      + sum ((accNodesModel_a,nodesModelSel,accYears_a,yearsSel,indicator_a)
8357              $( compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
8358                  and sameas(nodesModelSel,accNodesModel_a) and sameas(yearsSel,accYears_a)),
8359          compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
8360          *
8361          ( sum ((converter_techs,vintage)
8362                      $(converter_availTech(nodesModelSel,yearsSel,converter_techs,vintage)
8363                          and accounting_converterUnits(indicator_a,nodesModelSel,converter_techs,vintage,"useAnnuity") = 0),
8364              converter_unitsBuild(nodesModelSel,yearsSel,converter_techs,vintage)
8365              * accounting_converterUnits(indicator_a,nodesModelSel,converter_techs,vintage,"perUnitBuild"))
8366   
8367          + sum ((years_a,converter_techs,vintage)
8368                      $(converter_availTech(nodesModelSel,years_a,converter_techs,vintage)
8369                          and years_a.val < sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
8370                          and accounting_converterUnits(indicator_a,nodesModelSel,converter_techs,vintage,"useAnnuity") = 1
8371                          and years_a.val + accounting_converterUnits(indicator_a,nodesModelSel,converter_techs,vintage,"amorTime") > yearsSel.val
8372                          and years_a.val <= yearsSel.val ),
8373              converter_unitsBuild(nodesModelSel,years_a,converter_techs,vintage)
8374              * accounting_converterUnits(indicator_a,nodesModelSel,converter_techs,vintage,"perUnitBuild")
8375              * accounting_annuityFactor_converter(indicator_a,nodesModelSel,converter_techs,vintage) )
8376   
8377          + sum ((yearsToCalc,converter_techs,vintage)
8378                      $(converter_availTech(nodesModelSel,yearsToCalc,converter_techs,vintage)
8379                          and yearsToCalc.val >= sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
8380                          and accounting_converterUnits(indicator_a,nodesModelSel,converter_techs,vintage,"useAnnuity") = 1
8381                          and yearsToCalc.val + accounting_converterUnits(indicator_a,nodesModelSel,converter_techs,vintage,"amorTime") > yearsSel.val
8382                          and yearsToCalc.val <= yearsSel.val ),
8383              converter_unitsBuild(nodesModelSel,yearsToCalc,converter_techs,vintage)
8384              * accounting_converterUnits(indicator_a,nodesModelSel,converter_techs,vintage,"perUnitBuild")
8385              * accounting_annuityFactor_converter(indicator_a,nodesModelSel,converter_techs,vintage) )
8386   
8387          + sum ((converter_techs,vintage)
8388                      $converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage),
8389              converter_unitsDecom(nodesModelSel,yearsSel,converter_techs,vintage)
8390              * accounting_converterUnits(indicator_a,nodesModelSel,converter_techs,vintage,"perUnitDecom")
8391   
8392              + converter_unitsTotal(nodesModelSel,yearsSel,converter_techs,vintage)
8393              * accounting_converterUnits(indicator_a,nodesModelSel,converter_techs,vintage,"perUnitTotal") )
8394   
8395          + sum ((timeModelSel,converter_techs,vintage,activity)
8396                      $converter_usedTechAct(nodesModelSel,yearsSel,converter_techs,vintage,activity),
8397              converter_activity(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity)
8398              * timeLength(timeModelSel)
8399              * accounting_converterActivity(indicator_a,nodesModelSel,converter_techs,vintage,activity,"perActivity") )
8400   
8401          + sum ((timeModelSel,converter_techs,vintage)
8402                      $converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage),
8403              converter_unitStartups(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
8404              * accounting_converterStartup(indicator_a,nodesModelSel,converter_techs,vintage,"perStartup") )
8405   
8406          + sum ((timeModelSel,converter_techs,vintage)
8407                      $converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage),
8408              converter_rampPos(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
8409              * (accounting_converterStartup(indicator_a,nodesModelSel,converter_techs,vintage,"perRamp")
8410                 + accounting_converterStartup(indicator_a,nodesModelSel,converter_techs,vintage,"perRampPos"))
8411   
8412              + converter_rampNeg(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
8413              * (accounting_converterStartup(indicator_a,nodesModelSel,converter_techs,vintage,"perRamp")
8414                 + accounting_converterStartup(indicator_a,nodesModelSel,converter_techs,vintage,"perRampNeg")))
8415          )
8416      )
8417   
8418  * == storage ==
8419      + sum ((accNodesModel_a,nodesModelSel,accYears_a,yearsSel,indicator_a)
8420              $( compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
8421                  and sameas(nodesModelSel,accNodesModel_a) and sameas(yearsSel,accYears_a)),
8422          compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
8423          *
8424          ( sum ((storage_techs,vintage)
8425                      $(storage_availTech(nodesModelSel,yearsSel,storage_techs,vintage)
8426                          and accounting_storageUnits(indicator_a,nodesModelSel,storage_techs,vintage,"useAnnuity") = 0),
8427              storage_unitsBuild(nodesModelSel,yearsSel,storage_techs,vintage)
8428              * accounting_storageUnits(indicator_a,nodesModelSel,storage_techs,vintage,"perUnitBuild") )
8429   
8430          + sum ((years_a,storage_techs,vintage)
8431                      $(storage_availTech(nodesModelSel,years_a,storage_techs,vintage)
8432                          and years_a.val < sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
8433                          and accounting_storageUnits(indicator_a,nodesModelSel,storage_techs,vintage,"useAnnuity") = 1
8434                          and years_a.val + accounting_storageUnits(indicator_a,nodesModelSel,storage_techs,vintage,"amorTime") > yearsSel.val
8435                          and years_a.val <= yearsSel.val ),
8436              storage_unitsBuild(nodesModelSel,years_a,storage_techs,vintage)
8437              * accounting_storageUnits(indicator_a,nodesModelSel,storage_techs,vintage,"perUnitBuild")
8438              * accounting_annuityFactor_storage(indicator_a,nodesModelSel,storage_techs,vintage) )
8439   
8440          + sum ((yearsToCalc,storage_techs,vintage)
8441                      $(storage_availTech(nodesModelSel,yearsToCalc,storage_techs,vintage)
8442                          and yearsToCalc.val >= sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
8443                          and accounting_storageUnits(indicator_a,nodesModelSel,storage_techs,vintage,"useAnnuity") = 1
8444                          and yearsToCalc.val + accounting_storageUnits(indicator_a,nodesModelSel,storage_techs,vintage,"amorTime") > yearsSel.val
8445                          and yearsToCalc.val <= yearsSel.val ),
8446              storage_unitsBuild(nodesModelSel,yearsToCalc,storage_techs,vintage)
8447              * accounting_storageUnits(indicator_a,nodesModelSel,storage_techs,vintage,"perUnitBuild")
8448              * accounting_annuityFactor_storage(indicator_a,nodesModelSel,storage_techs,vintage) )
8449   
8450          + sum ((storage_techs,vintage)
8451                      $storage_usedTech(nodesModelSel,yearsSel,storage_techs,vintage),
8452              storage_unitsDecom(nodesModelSel,yearsSel,storage_techs,vintage)
8453              * accounting_storageUnits(indicator_a,nodesModelSel,storage_techs,vintage,"perUnitDecom")
8454   
8455              + storage_unitsTotal(nodesModelSel,yearsSel,storage_techs,vintage)
8456              * accounting_storageUnits(indicator_a,nodesModelSel,storage_techs,vintage,"perUnitTotal") )
8457          )
8458      )
8459   
8460   
8461  * == transfer ==
8462      + sum ((accNodesModel_a,nodesModelSel,accYears_a,yearsSel,indicator_a)
8463              $( compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
8464                  and sameas(nodesModelSel,accNodesModel_a) and sameas(yearsSel,accYears_a)),
8465          compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
8466          *
8467          ( sum ((linksModelToCalc,transfer_techs,vintage)
8468                      $(transfer_availTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
8469                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0
8470                          and accounting_transferLinks(indicator_a,linksModelToCalc,transfer_techs,vintage,"useAnnuity") = 0),
8471              0.5
8472              * transfer_linksBuild(linksModelToCalc,yearsSel,transfer_techs,vintage)
8473              * accounting_transferLinks(indicator_a,linksModelToCalc,transfer_techs,vintage,"perLinkBuild") )
8474   
8475          + sum ((linksModelToCalc,years_a,transfer_techs,vintage)
8476                      $(transfer_availTech(linksModelToCalc,years_a,transfer_techs,vintage)
8477                          and years_a.val < sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
8478                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0
8479                          and accounting_transferLinks(indicator_a,linksModelToCalc,transfer_techs,vintage,"useAnnuity") = 1
8480                          and years_a.val + accounting_transferLinks(indicator_a,linksModelToCalc,transfer_techs,vintage,"amorTime") > yearsSel.val
8481                          and years_a.val <= yearsSel.val ),
8482              0.5
8483              * transfer_linksBuild(linksModelToCalc,years_a,transfer_techs,vintage)
8484              * accounting_transferLinks(indicator_a,linksModelToCalc,transfer_techs,vintage,"perLinkBuild")
8485              * accounting_annuityFactor_transferLink(indicator_a,linksModelToCalc,transfer_techs,vintage) )
8486   
8487          + sum ((linksModelToCalc,yearsToCalc,transfer_techs,vintage)
8488                      $(transfer_availTech(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
8489                          and yearsToCalc.val >= sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
8490                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0
8491                          and accounting_transferLinks(indicator_a,linksModelToCalc,transfer_techs,vintage,"useAnnuity") = 1
8492                          and yearsToCalc.val + accounting_transferLinks(indicator_a,linksModelToCalc,transfer_techs,vintage,"amorTime") > yearsSel.val
8493                          and yearsToCalc.val <= yearsSel.val ),
8494              0.5
8495              * transfer_linksBuild(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
8496              * accounting_transferLinks(indicator_a,linksModelToCalc,transfer_techs,vintage,"perLinkBuild")
8497              * accounting_annuityFactor_transferLink(indicator_a,linksModelToCalc,transfer_techs,vintage) )
8498   
8499          + sum ((linksModelToCalc,transfer_techs,vintage,link_types)
8500                      $(transfer_availTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
8501                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0
8502                          and accounting_transferPerLength(indicator_a,linksModelToCalc,transfer_techs,vintage,link_types,"useAnnuity") = 0 ),
8503              0.5
8504              * transfer_linksBuild(linksModelToCalc,yearsSel,transfer_techs,vintage)
8505              * transfer_lengthParam(linksModelToCalc,link_types,"length")
8506              * accounting_transferPerLength(indicator_a,linksModelToCalc,transfer_techs,vintage,link_types,"perLengthBuild") )
8507   
8508          + sum ((linksModelToCalc,years_a,transfer_techs,vintage,link_types)
8509                      $(transfer_availTech(linksModelToCalc,years_a,transfer_techs,vintage)
8510                          and years_a.val < sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
8511                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0
8512                          and accounting_transferPerLength(indicator_a,linksModelToCalc,transfer_techs,vintage,link_types,"useAnnuity") = 1
8513                          and years_a.val + accounting_transferPerLength(indicator_a,linksModelToCalc,transfer_techs,vintage,link_types,"amorTime") > yearsSel.val
8514                          and years_a.val <= yearsSel.val ),
8515              0.5
8516              * transfer_linksBuild(linksModelToCalc,years_a,transfer_techs,vintage)
8517              * transfer_lengthParam(linksModelToCalc,link_types,"length")
8518              * accounting_transferPerLength(indicator_a,linksModelToCalc,transfer_techs,vintage,link_types,"perLengthBuild")
8519              * accounting_annuityFactor_transferPerLength(indicator_a,linksModelToCalc,transfer_techs,vintage,link_types) )
8520   
8521          + sum ((linksModelToCalc,yearsToCalc,transfer_techs,vintage,link_types)
8522                      $(transfer_availTech(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
8523                          and yearsToCalc.val >= sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
8524                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0
8525                          and accounting_transferPerLength(indicator_a,linksModelToCalc,transfer_techs,vintage,link_types,"useAnnuity") = 1
8526                          and yearsToCalc.val + accounting_transferPerLength(indicator_a,linksModelToCalc,transfer_techs,vintage,link_types,"amorTime") > yearsSel.val
8527                          and yearsToCalc.val <= yearsSel.val ),
8528              0.5
8529              * transfer_linksBuild(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
8530              * transfer_lengthParam(linksModelToCalc,link_types,"length")
8531              * accounting_transferPerLength(indicator_a,linksModelToCalc,transfer_techs,vintage,link_types,"perLengthBuild")
8532              * accounting_annuityFactor_transferPerLength(indicator_a,linksModelToCalc,transfer_techs,vintage,link_types) )
8533   
8534          + sum ((linksModelToCalc,transfer_techs,vintage)
8535                      $(transfer_usedTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
8536                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0 ),
8537              0.5
8538              * transfer_linksDecom(linksModelToCalc,yearsSel,transfer_techs,vintage)
8539              * accounting_transferLinks(indicator_a,linksModelToCalc,transfer_techs,vintage,"perLinkDecom")
8540   
8541              + 0.5
8542              * transfer_linksTotal(linksModelToCalc,yearsSel,transfer_techs,vintage)
8543              * accounting_transferLinks(indicator_a,linksModelToCalc,transfer_techs,vintage,"perLinkTotal")
8544   
8545              + 0.5
8546              * sum (link_types,
8547                  transfer_linksDecom(linksModelToCalc,yearsSel,transfer_techs,vintage)
8548                  * transfer_lengthParam(linksModelToCalc,link_types,"length")
8549                  * accounting_transferPerLength(indicator_a,linksModelToCalc,transfer_techs,vintage,link_types,"perLengthDecom")
8550   
8551                  + transfer_linksTotal(linksModelToCalc,yearsSel,transfer_techs,vintage)
8552                  * transfer_lengthParam(linksModelToCalc,link_types,"length")
8553                  * accounting_transferPerLength(indicator_a,linksModelToCalc,transfer_techs,vintage,link_types,"perLengthTotal"))
8554   
8555              + 0.5
8556              * sum (timeModelSel,
8557                  transfer_flowAlong(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
8558                  * timeLength(timeModelSel)
8559                  * ( accounting_transferLinks(indicator_a,linksModelToCalc,transfer_techs,vintage,"perFlow")
8560                      + accounting_transferLinks(indicator_a,linksModelToCalc,transfer_techs,vintage,"perFlowAlong"))
8561   
8562                  + transfer_flowAgainst(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
8563                  * timeLength(timeModelSel)
8564                  * ( accounting_transferLinks(indicator_a,linksModelToCalc,transfer_techs,vintage,"perFlow")
8565                      + accounting_transferLinks(indicator_a,linksModelToCalc,transfer_techs,vintage,"perFlowAgainst")))
8566   
8567              + 0.5
8568              * sum ((timeModelSel, link_types),
8569                  transfer_flowAlong(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
8570                  * timeLength(timeModelSel)
8571                  * transfer_lengthParam(linksModelToCalc,link_types,"length")
8572                  * (accounting_transferPerLength(indicator_a,linksModelToCalc,transfer_techs,vintage,link_types,"perFlow")
8573                      + accounting_transferPerLength(indicator_a,linksModelToCalc,transfer_techs,vintage,link_types,"perFlowAlong"))
8574   
8575                  + transfer_flowAgainst(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
8576                  * timeLength(timeModelSel)
8577                  * transfer_lengthParam(linksModelToCalc,link_types,"length")
8578                  * (accounting_transferPerLength(indicator_a,linksModelToCalc,transfer_techs,vintage,link_types,"perFlow")
8579                      + accounting_transferPerLength(indicator_a,linksModelToCalc,transfer_techs,vintage,link_types,"perFlowAgainst")))
8580              )
8581          )
8582      )
8583   
8584   
8585  * == sources / sinks ==
8586      + sum ((accNodesModel_a,nodesModelSel,accYears_a,yearsSel,indicator_a)
8587              $( compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
8588                  and sameas(nodesModelSel,accNodesModel_a) and sameas(yearsSel,accYears_a)),
8589          compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
8590          *
8591          sum ((timeModelSel,sourcesink_techs,commodity)
8592                  $sourcesink_enabled(nodesModelSel,yearsSel,sourcesink_techs,commodity),
8593              sourcesink_flow(timeModelSel,nodesModelSel,yearsSel,sourcesink_techs,commodity)
8594              * timeLength(timeModelSel)
8595              * accounting_sourcesinkFlow(indicator_a,nodesModelSel,yearsSel,sourcesink_techs,commodity,"perFlow") )
8596      );
8597   
8598  * // ### Accounting Indicator Calculation Links
8599  * // Calculates the indicators for each transfer for converters, sources and sinks, transfer, storage and variable indicators.
8600  * // {Eq_accounting_indicatorCalc_links}
8601  Eq_accounting_indicatorCalc_links(linksModelToCalc,yearsSel,indicator)
8602      $activeIndicators_links(linksModelToCalc,yearsSel,indicator)
8603      ..
8604      accounting_indicator_links(linksModelToCalc,yearsSel,indicator)
8605      =e=
8606      sum ((transfer_techs,vintage)
8607                  $(transfer_availTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
8608                      and accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"useAnnuity") = 0),
8609          transfer_linksBuild(linksModelToCalc,yearsSel,transfer_techs,vintage)
8610          * accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"perLinkBuild") )
8611   
8612      + sum ((years_a,transfer_techs,vintage)
8613                  $(transfer_availTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
8614                      and accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"useAnnuity") = 1
8615                      and years_a.val + accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"amorTime") > yearsSel.val
8616                      and years_a.val <= yearsSel.val ),
8617          transfer_linksBuild(linksModelToCalc,years_a,transfer_techs,vintage)
8618          * accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"perLinkBuild")
8619          * accounting_annuityFactor_transferLink(indicator,linksModelToCalc,transfer_techs,vintage) )
8620   
8621      + sum ((transfer_techs,vintage,link_types)
8622                  $(transfer_availTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
8623                      and accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"useAnnuity") = 0 ),
8624          transfer_linksBuild(linksModelToCalc,yearsSel,transfer_techs,vintage)
8625          * transfer_lengthParam(linksModelToCalc,link_types,"length")
8626          * accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"perLengthBuild") )
8627   
8628      + sum ((years_a,transfer_techs,vintage,link_types)
8629                  $(transfer_availTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
8630                      and accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"useAnnuity") = 1
8631                      and years_a.val + accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"amorTime") > yearsSel.val
8632                      and years_a.val <= yearsSel.val ),
8633          transfer_linksBuild(linksModelToCalc,years_a,transfer_techs,vintage)
8634          * transfer_lengthParam(linksModelToCalc,link_types,"length")
8635          * accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"perLengthBuild")
8636          * accounting_annuityFactor_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types) )
8637   
8638      + sum ((transfer_techs,vintage)
8639                  $(transfer_usedTech(linksModelToCalc,yearsSel,transfer_techs,vintage)),
8640          transfer_linksDecom(linksModelToCalc,yearsSel,transfer_techs,vintage)
8641          * accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"perLinkDecom")
8642   
8643          + transfer_linksTotal(linksModelToCalc,yearsSel,transfer_techs,vintage)
8644          * accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"perLinkTotal")
8645   
8646          + sum (link_types,
8647              transfer_linksDecom(linksModelToCalc,yearsSel,transfer_techs,vintage)
8648              * transfer_lengthParam(linksModelToCalc,link_types,"length")
8649              * accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"perLengthDecom")
8650   
8651              + transfer_linksTotal(linksModelToCalc,yearsSel,transfer_techs,vintage)
8652              * transfer_lengthParam(linksModelToCalc,link_types,"length")
8653              * accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"perLengthTotal"))
8654   
8655          + sum (timeModelSel,
8656              transfer_flowAlong(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
8657              * timeLength(timeModelSel)
8658              * ( accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"perFlow")
8659                  + accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"perFlowAlong"))
8660   
8661              + transfer_flowAgainst(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
8662              * timeLength(timeModelSel)
8663              * ( accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"perFlow")
8664                  + accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"perFlowAgainst")))
8665   
8666          + sum ((timeModelSel, link_types),
8667              transfer_flowAlong(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
8668              * timeLength(timeModelSel)
8669              * transfer_lengthParam(linksModelToCalc,link_types,"length")
8670              * (accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"perFlow")
8671                  + accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"perFlowAlong"))
8672   
8673              + transfer_flowAgainst(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
8674              * timeLength(timeModelSel)
8675              * transfer_lengthParam(linksModelToCalc,link_types,"length")
8676              * (accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"perFlow")
8677                  + accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"perFlowAgainst")))
8678          );
8679   
8680  * // ### Accounting Objective
8681  * // Calculates the indicators for the objective.
8682  * // {Eq_accounting_objective}
8683  Eq_accounting_objective
8684      ..
8685      accounting_objective
8686      =e=
8687      sum ((accNodesModel,accYears,indicator)
8688              $(accounting_indicatorBounds(accNodesModel,accYears,indicator,"obj") <> 0 ),
8689          accounting_indicator(accNodesModel,accYears,indicator) )
8690   
8691   
8692  * ==== model definition ====
8693   
8694  Model M_accounting
8695  /
8696  Eq_accounting_indicatorCalc_links
8697  Eq_accounting_indicatorCalc
8698  Eq_accounting_objective
8699  /;
INCLUDE    C:\Local\REMix\framework\remix\framework\model\source\optiframe.gms
8701  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
8702  * SPDX-License-Identifier: BSD-3-Clause
8703   
8704  * ==== optimization frames ====
8706   
8707  * mapping from optimization frame to years
8709  set optiframe / of1 * of3 /;
8710  set optiframeToCalc(optiframe);
8711   
8713  set map_optiframe(optiframe,years) / #optiframe : #yearsToCalc /;
8715   
8717   
8718  option optiframeToCalc < map_optiframe;
8719   
8720  Model remix /
8721    M_converter
8722    M_storage
8723    M_transfer
8724    M_sourcesink
8725    M_balance
8726    M_accounting
8727  /;
8728   
8729   
8730  * ==== include methods  ====
8731   
8732  * check if the method is valid
8738   
8739   
8740  * if method is pips write the checkanno tool
INCLUDE    C:\Local\REMix\framework\remix\framework\model\source\methods\checkanno.gms
8742  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
8743  * SPDX-License-Identifier: BSD-3-Clause
8744   
8747   
8750   
8751  * if method is pips generate the annotated gdx file
INCLUDE    C:\Local\REMix\framework\remix\framework\model\source\methods\pips.gms
8753  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
8754  * SPDX-License-Identifier: BSD-3-Clause
8755   
8759   
8760  * if method is solve run the model with commercial solvers
INCLUDE    C:\Local\REMix\framework\remix\framework\model\source\methods\solve.gms
8762  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
8763  * SPDX-License-Identifier: BSD-3-Clause
8764   
8767   
8769   
8770  * ==== global options ====
8777   
8778  * ==== general solver options ====
8788   
8789  * ==== cplex options ====
8798   
8799  * ==== gurobi options ====
8800   
8801   
8802  * ==== copt options ====
8806   
8807  * ==== debug options ====
8810   
8811   
8812  * ==== setup optimization ====
8813  if ((sum(nodesModelToCalc, 1)>40 or sum(timeModelToCalc, 1)>50) and not 0,
8814     option limRow=0, limCol=0, solPrint=off;
8815  else
8816     option limRow=100000, limCol=100000, solPrint=on;
8817  );
8818   
8820   
8821  option mip = gurobi;
8822  option reslim = 1209600;
8823  option optcr = 1e-3;
8824  remix.threads = 8;
8825  remix.optFile = 1;
8826  remix.solveLink = 0;
8827  remix.holdFixed = 1;
8828   
8829   
8830  * ==== configure option files ====
8831   
8834   
8835  file opt / "gurobi.opt" /;
8836  put opt;
8839  put "method 2" /;
8840  put "iis 1" /;
8841  put "barorder 1" /;
8842  put "presolve -1" /;
8843  put "mipgap 1e-3" /;
8844  put "crossover 0" /;
8845  put "threads 8" /;
8846  put "barconvtol 1e-6" /;
8847  putclose;
8848   
8850   
8851   
8852  * ==== solve the problem ====
8853   
8854  loop ( optiframeToCalc,
8855      yearsSel(years) = no;
8856      yearsSel(years)$map_optiframe(optiframeToCalc,years) = yes;
8857      yearsToFix(years) = no;
8858      yearsToFix(years)$(years.val < smin(years_a$yearsSel(years_a), years_a.val)) = yes;
8859      accYearsSel(accYears) = no;
8860      accYearsSel("horizon") = yes;
8861      accYearsSel(accYears)$(sum(yearsSel$sameas(accYears,yearsSel), 1)) = yes;
8862      accYearsToFix(accYears) = no;
8863      accYearsToFix(accYears)$(sum(years$(sameas(years,accYears) and years.val < smin(years_a$yearsSel(years_a), years_a.val)), 1) > 0) = yes;
8864      timeModelSel(timeModel) = no;
8865      timeModelSel(timeModel)$timeModelToCalc(timeModel) = yes;
8866      nodesModelSel(nodesModel) = no;
8867      nodesModelSel(nodesModel)$nodesModelToCalc(nodesModel) = yes;
8868   
8869  * Fix decision for years previously optimized in case of myopic or foresight
8870      converter_unitsDelta_upper(nodesModelToCalc,yearsToFix,converter_techs)
8871          $(sum(yearsToCalc$sameas(yearsToFix, yearsToCalc), 1))
8872          = sum(vintage, converter_unitsTotal.l(nodesModelToCalc,yearsToFix,converter_techs,vintage))
8873              - converter_capacityParam(nodesModelToCalc,yearsToFix,converter_techs,"unitsUpperLimit");
8874      converter_unitsDelta_upper(nodesModelToCalc,yearsToFix,converter_techs)
8875          $(converter_unitsDelta_upper(nodesModelToCalc,yearsToFix,converter_techs) < 0) = 0;
8876   
8877      converter_unitsDelta_lower(nodesModelToCalc,yearsToCalc,converter_techs,vintage)
8878          = converter_unitsDecom.lo(nodesModelToCalc,yearsToCalc,converter_techs,vintage)
8879              - converter_unitsTotal.l(nodesModelToCalc,yearsToCalc-1,converter_techs,vintage);
8880      converter_unitsDelta_lower(nodesModelToCalc,yearsToCalc,converter_techs,vintage)
8881          $(converter_unitsDelta_lower(nodesModelToCalc,yearsToCalc,converter_techs,vintage) < 0) = 0;
8882   
8883      converter_unitsBuild.l(nodesModelToCalc,yearsToFix,converter_techs,vintage)
8884          $converter_availTech(nodesModelToCalc,yearsToFix,converter_techs,vintage)
8885          = converter_unitsBuild.l(nodesModelToCalc,yearsToFix,converter_techs,vintage)
8886              - converter_unitsDelta_upper(nodesModelToCalc,yearsToFix,converter_techs);
8887   
8888      converter_unitsDecom.lo(nodesModelToCalc,yearsToCalc,converter_techs,vintage)
8889          $converter_usedTech(nodesModelToCalc,yearsToCalc,converter_techs,vintage)
8890          = converter_unitsDecom.lo(nodesModelToCalc,yearsToCalc,converter_techs,vintage)
8891              - converter_unitsDelta_lower(nodesModelToCalc,yearsToCalc,converter_techs,vintage);
8892   
8893      converter_unitsBuild.l(nodesModelToCalc,yearsToFix,converter_techs,vintage)
8894          $(converter_unitsBuild.l(nodesModelToCalc,yearsToFix,converter_techs,vintage) < 0) = 0;
8895      converter_unitsBuild.fx(nodesModelToCalc,yearsToFix,converter_techs,vintage)
8896          = converter_unitsBuild.l(nodesModelToCalc,yearsToFix,converter_techs,vintage);
8897      converter_unitsDecom.l(nodesModelToCalc,yearsToFix,converter_techs,vintage)
8898          $(converter_unitsDecom.l(nodesModelToCalc,yearsToFix,converter_techs,vintage) < 0) = 0;
8899      converter_unitsDecom.fx(nodesModelToCalc,yearsToFix,converter_techs,vintage)
8900          = converter_unitsDecom.l(nodesModelToCalc,yearsToFix,converter_techs,vintage);
8901      converter_unitsTotal.fx(nodesModelToCalc,yearsToFix,converter_techs,vintage)
8902          = converter_unitsTotal.l(nodesModelToCalc,yearsToFix,converter_techs,vintage);
8903   
8904   
8905      storage_unitsDelta_upper(nodesModelToCalc,yearsToFix,storage_techs)
8906          $(sum(yearsToCalc$sameas(yearsToFix, yearsToCalc), 1))
8907          = sum(vintage, storage_unitsTotal.l(nodesModelToCalc,yearsToFix,storage_techs,vintage))
8908              - storage_reservoirParam(nodesModelToCalc,yearsToFix,storage_techs,"unitsUpperLimit");
8909      storage_unitsDelta_upper(nodesModelToCalc,yearsToFix,storage_techs)
8910          $(storage_unitsDelta_upper(nodesModelToCalc,yearsToFix,storage_techs) < 0) = 0;
8911   
8912      storage_unitsDelta_lower(nodesModelToCalc,yearsToFix,storage_techs)
8913          $(sum(yearsToCalc$sameas(yearsToFix, yearsToCalc), 1))
8914          = storage_reservoirParam(nodesModelToCalc,yearsToFix,storage_techs,"unitsLowerLimit")
8915              - sum(vintage, storage_unitsTotal.l(nodesModelToCalc,yearsToFix,storage_techs,vintage));
8916      storage_unitsDelta_lower(nodesModelToCalc,yearsToFix,storage_techs)
8917          $(storage_unitsDelta_lower(nodesModelToCalc,yearsToFix,storage_techs) < 0) = 0;
8918   
8919      storage_unitsBuild.l(nodesModelToCalc,yearsToFix,storage_techs,vintage)
8920          $storage_availTech(nodesModelToCalc,yearsToFix,storage_techs,vintage)
8921          = storage_unitsBuild.l(nodesModelToCalc,yearsToFix,storage_techs,vintage)
8922              - storage_unitsDelta_upper(nodesModelToCalc,yearsToFix,storage_techs);
8923   
8924      storage_unitsDecom.l(nodesModelToCalc,yearsToFix,storage_techs,vintage)
8925          $storage_usedTech(nodesModelToCalc,yearsToFix,storage_techs,vintage)
8926          = storage_unitsDecom.l(nodesModelToCalc,yearsToFix,storage_techs,vintage)
8927              - storage_unitsDelta_lower(nodesModelToCalc,yearsToFix,storage_techs);
8928   
8929      storage_unitsBuild.l(nodesModelToCalc,yearsToFix,storage_techs,vintage)
8930          $(storage_unitsBuild.l(nodesModelToCalc,yearsToFix,storage_techs,vintage) < 0) = 0;
8931      storage_unitsBuild.fx(nodesModelToCalc,yearsToFix,storage_techs,vintage)
8932          = storage_unitsBuild.l(nodesModelToCalc,yearsToFix,storage_techs,vintage);
8933      storage_unitsDecom.l(nodesModelToCalc,yearsToFix,storage_techs,vintage)
8934          $(storage_unitsDecom.l(nodesModelToCalc,yearsToFix,storage_techs,vintage) < 0) = 0;
8935      storage_unitsDecom.fx(nodesModelToCalc,yearsToFix,storage_techs,vintage)
8936          = storage_unitsDecom.l(nodesModelToCalc,yearsToFix,storage_techs,vintage);
8937      storage_unitsTotal.fx(nodesModelToCalc,yearsToFix,storage_techs,vintage)
8938          = storage_unitsTotal.l(nodesModelToCalc,yearsToFix,storage_techs,vintage);
8939   
8940   
8941      transfer_linksDelta_upper(linksModelToCalc,yearsToFix,transfer_techs)
8942          $(sum(yearsToCalc$sameas(yearsToFix, yearsToCalc), 1))
8943          = sum(vintage, transfer_linksTotal.l(linksModelToCalc,yearsToFix,transfer_techs,vintage))
8944              - transfer_linksParam(linksModelToCalc,yearsToFix,transfer_techs,"linksUpperLimit");
8945      transfer_linksDelta_upper(linksModelToCalc,yearsToFix,transfer_techs)
8946          $(transfer_linksDelta_upper(linksModelToCalc,yearsToFix,transfer_techs) < 0) = 0;
8947   
8948      transfer_linksDelta_lower(linksModelToCalc,yearsToFix,transfer_techs)
8949          $(sum(yearsToCalc$sameas(yearsToFix, yearsToCalc), 1))
8950          = transfer_linksParam(linksModelToCalc,yearsToFix,transfer_techs,"linksLowerLimit")
8951              - sum(vintage, transfer_linksTotal.l(linksModelToCalc,yearsToFix,transfer_techs,vintage));
8952      transfer_linksDelta_lower(linksModelToCalc,yearsToFix,transfer_techs)
8953          $(transfer_linksDelta_lower(linksModelToCalc,yearsToFix,transfer_techs) < 0) = 0;
8954   
8955      transfer_linksBuild.l(linksModelToCalc,yearsToFix,transfer_techs,vintage)
8956          $transfer_availTech(linksModelToCalc,yearsToFix,transfer_techs,vintage)
8957          = transfer_linksBuild.l(linksModelToCalc,yearsToFix,transfer_techs,vintage)
8958              - transfer_linksDelta_upper(linksModelToCalc,yearsToFix,transfer_techs);
8959   
8960      transfer_linksDecom.l(linksModelToCalc,yearsToFix,transfer_techs,vintage)
8961          $transfer_usedTech(linksModelToCalc,yearsToFix,transfer_techs,vintage)
8962          = transfer_linksDecom.l(linksModelToCalc,yearsToFix,transfer_techs,vintage)
8963              - transfer_linksDelta_lower(linksModelToCalc,yearsToFix,transfer_techs);
8964   
8965      transfer_linksBuild.l(linksModelToCalc,yearsToFix,transfer_techs,vintage)
8966          $(transfer_linksBuild.l(linksModelToCalc,yearsToFix,transfer_techs,vintage) < 0) = 0;
8967      transfer_linksBuild.fx(linksModelToCalc,yearsToFix,transfer_techs,vintage)
8968          = transfer_linksBuild.l(linksModelToCalc,yearsToFix,transfer_techs,vintage);
8969      transfer_linksDecom.l(linksModelToCalc,yearsToFix,transfer_techs,vintage)
8970          $(transfer_linksDecom.l(linksModelToCalc,yearsToFix,transfer_techs,vintage) < 0) = 0;
8971      transfer_linksDecom.fx(linksModelToCalc,yearsToFix,transfer_techs,vintage)
8972          = transfer_linksDecom.l(linksModelToCalc,yearsToFix,transfer_techs,vintage);
8973      transfer_linksTotal.fx(linksModelToCalc,yearsToFix,transfer_techs,vintage)
8974          = transfer_linksTotal.l(linksModelToCalc,yearsToFix,transfer_techs,vintage);
8975   
8976      accounting_indicator.fx(accNodesModel,accYearsToFix,indicator)
8977          = accounting_indicator.l(accNodesModel,accYearsToFix,indicator);
8978   
8979  * Optimize and log values
8980      if (opti_sense < 0,
8981      solve remix minimizing accounting_objective using mip;
8982      else
8983      solve remix maximizing accounting_objective using mip;
8984      );
8985   
8986      put_utility 'log' / 'Model status ' remix.modelstat:0:0;
8987      put_utility 'log' / 'Objective value ' accounting_objective.l:0:3;
8988   
8989  );
8990   
8994   
8995  * if method is pareto solve the model once and afterwards run multiple points along the pareto front
INCLUDE    C:\Local\REMix\framework\remix\framework\model\source\methods\pareto.gms
8997  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
8998  * SPDX-License-Identifier: BSD-3-Clause
8999   
9003   
9004  * if method is mga solve the model once and afterwards maximize the length metric of indicators
INCLUDE    C:\Local\REMix\framework\remix\framework\model\source\methods\mga.gms
9006  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
9007  * SPDX-License-Identifier: BSD-3-Clause
9008   
9012   
9013  * if method is iternodes run the model by iterating through all nodesToCalc
INCLUDE    C:\Local\REMix\framework\remix\framework\model\source\methods\iternodes.gms
9015  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
9016  * SPDX-License-Identifier: BSD-3-Clause
9017   
9021   
9022  * if postcalc is one write the results gdx
INCLUDE    C:\Local\REMix\framework\remix\framework\model\source\postcalc\definition.gms
9024  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
9025  * SPDX-License-Identifier: BSD-3-Clause
9026   
9028   
9029  * ==== indicator accounting ====
9030   
9031  indicator_accounting_detailed(indicator,nodesModelToCalc,yearsToCalc,techs)
9032      =
9033  * == converters ==
9034      sum ((converter_techs(techs),vintage)
9035                  $(converter_availTech(nodesModelToCalc,yearsToCalc,converter_techs,vintage)
9036                      and accounting_converterUnits(indicator,nodesModelToCalc,converter_techs,vintage,"useAnnuity") = 0),
9037          converter_unitsBuild.l(nodesModelToCalc,yearsToCalc,converter_techs,vintage)
9038          * accounting_converterUnits(indicator,nodesModelToCalc,converter_techs,vintage,"perUnitBuild"))
9039   
9040      + sum ((years_a,converter_techs(techs),vintage)
9041                  $(converter_availTech(nodesModelToCalc,years_a,converter_techs,vintage)
9042                      and accounting_converterUnits(indicator,nodesModelToCalc,converter_techs,vintage,"useAnnuity") = 1
9043                      and years_a.val + accounting_converterUnits(indicator,nodesModelToCalc,converter_techs,vintage,"amorTime") > yearsToCalc.val
9044                      and years_a.val <= yearsToCalc.val ),
9045          converter_unitsBuild.l(nodesModelToCalc,years_a,converter_techs,vintage)
9046          * accounting_converterUnits(indicator,nodesModelToCalc,converter_techs,vintage,"perUnitBuild")
9047          * accounting_annuityFactor_converter(indicator,nodesModelToCalc,converter_techs,vintage) )
9048   
9049      + sum ((converter_techs(techs),vintage)
9050                  $converter_usedTech(nodesModelToCalc,yearsToCalc,converter_techs,vintage),
9051          converter_unitsDecom.l(nodesModelToCalc,yearsToCalc,converter_techs,vintage)
9052          * accounting_converterUnits(indicator,nodesModelToCalc,converter_techs,vintage,"perUnitDecom")
9053   
9054          + converter_unitsTotal.l(nodesModelToCalc,yearsToCalc,converter_techs,vintage)
9055          * accounting_converterUnits(indicator,nodesModelToCalc,converter_techs,vintage,"perUnitTotal") )
9056   
9057      + sum ((timeModelToCalc,converter_techs(techs),vintage,activity)
9058                  $converter_usedTechAct(nodesModelToCalc,yearsToCalc,converter_techs,vintage,activity),
9059          converter_activity.l(timeModelToCalc,nodesModelToCalc,yearsToCalc,converter_techs,vintage,activity)
9060          * timeLength(timeModelToCalc)
9061          * accounting_converterActivity(indicator,nodesModelToCalc,converter_techs,vintage,activity,"perActivity") )
9062   
9063      + sum ((timeModelToCalc,converter_techs(techs),vintage)
9064                  $converter_usedTech(nodesModelToCalc,yearsToCalc,converter_techs,vintage),
9065          converter_unitStartups.l(timeModelToCalc,nodesModelToCalc,yearsToCalc,converter_techs,vintage)
9066          * accounting_converterStartup(indicator,nodesModelToCalc,converter_techs,vintage,"perStartup") )
9067   
9068      + sum ((timeModelToCalc,converter_techs(techs),vintage)
9069                  $converter_usedTech(nodesModelToCalc,yearsToCalc,converter_techs,vintage),
9070          converter_rampPos.l(timeModelToCalc,nodesModelToCalc,yearsToCalc,converter_techs,vintage)
9071          * (accounting_converterStartup(indicator,nodesModelToCalc,converter_techs,vintage,"perRamp")
9072              + accounting_converterStartup(indicator,nodesModelToCalc,converter_techs,vintage,"perRampPos"))
9073   
9074          + converter_rampNeg.l(timeModelToCalc,nodesModelToCalc,yearsToCalc,converter_techs,vintage)
9075          * (accounting_converterStartup(indicator,nodesModelToCalc,converter_techs,vintage,"perRamp")
9076              + accounting_converterStartup(indicator,nodesModelToCalc,converter_techs,vintage,"perRampNeg")))
9077   
9078  * == storage ==
9079      + sum ((storage_techs(techs),vintage)
9080                  $(storage_availTech(nodesModelToCalc,yearsToCalc,storage_techs,vintage)
9081                      and accounting_storageUnits(indicator,nodesModelToCalc,storage_techs,vintage,"useAnnuity") = 0),
9082          storage_unitsBuild.l(nodesModelToCalc,yearsToCalc,storage_techs,vintage)
9083          * accounting_storageUnits(indicator,nodesModelToCalc,storage_techs,vintage,"perUnitBuild") )
9084   
9085      + sum ((years_a,storage_techs(techs),vintage)
9086                  $(storage_availTech(nodesModelToCalc,yearsToCalc,storage_techs,vintage)
9087                      and accounting_storageUnits(indicator,nodesModelToCalc,storage_techs,vintage,"useAnnuity") = 1
9088                      and years_a.val + accounting_storageUnits(indicator,nodesModelToCalc,storage_techs,vintage,"amorTime") > yearsToCalc.val
9089                      and years_a.val <= yearsToCalc.val ),
9090          storage_unitsBuild.l(nodesModelToCalc,years_a,storage_techs,vintage)
9091          * accounting_storageUnits(indicator,nodesModelToCalc,storage_techs,vintage,"perUnitBuild")
9092          * accounting_annuityFactor_storage(indicator,nodesModelToCalc,storage_techs,vintage) )
9093   
9094      + sum ((storage_techs(techs),vintage)
9095                  $storage_usedTech(nodesModelToCalc,yearsToCalc,storage_techs,vintage),
9096          storage_unitsDecom.l(nodesModelToCalc,yearsToCalc,storage_techs,vintage)
9097          * accounting_storageUnits(indicator,nodesModelToCalc,storage_techs,vintage,"perUnitDecom")
9098   
9099          + storage_unitsTotal.l(nodesModelToCalc,yearsToCalc,storage_techs,vintage)
9100          * accounting_storageUnits(indicator,nodesModelToCalc,storage_techs,vintage,"perUnitTotal") )
9101   
9102  * == transfer ==
9103      + sum ((linksModel,transfer_techs(techs),vintage)
9104                  $(transfer_availTech(linksModel,yearsToCalc,transfer_techs,vintage)
9105                      and linksModelToCalc(linksModel)
9106                      and transfer_incidenceModel(nodesModelToCalc,linksModel) <> 0
9107                      and accounting_transferLinks(indicator,linksModel,transfer_techs,vintage,"useAnnuity") = 0),
9108          0.5
9109          * transfer_linksBuild.l(linksModel,yearsToCalc,transfer_techs,vintage)
9110          * accounting_transferLinks(indicator,linksModel,transfer_techs,vintage,"perLinkBuild") )
9111   
9112      + sum ((linksModel,years_a,transfer_techs(techs),vintage)
9113                  $(transfer_availTech(linksModel,yearsToCalc,transfer_techs,vintage)
9114                      and linksModelToCalc(linksModel)
9115                      and transfer_incidenceModel(nodesModelToCalc,linksModel) <> 0
9116                      and accounting_transferLinks(indicator,linksModel,transfer_techs,vintage,"useAnnuity") = 1
9117                      and years_a.val + accounting_transferLinks(indicator,linksModel,transfer_techs,vintage,"amorTime") > yearsToCalc.val
9118                      and years_a.val <= yearsToCalc.val ),
9119          0.5
9120          * transfer_linksBuild.l(linksModel,years_a,transfer_techs,vintage)
9121          * accounting_transferLinks(indicator,linksModel,transfer_techs,vintage,"perLinkBuild")
9122          * accounting_annuityFactor_transferLink(indicator,linksModel,transfer_techs,vintage) )
9123   
9124      + sum ((linksModel,transfer_techs(techs),vintage,link_types)
9125                  $(transfer_availTech(linksModel,yearsToCalc,transfer_techs,vintage)
9126                      and linksModelToCalc(linksModel)
9127                      and transfer_incidenceModel(nodesModelToCalc,linksModel) <> 0
9128                      and accounting_transferPerLength(indicator,linksModel,transfer_techs,vintage,link_types,"useAnnuity") = 0 ),
9129          0.5
9130          * transfer_linksBuild.l(linksModel,yearsToCalc,transfer_techs,vintage)
9131          * transfer_lengthParam(linksModel,link_types,"length")
9132          * accounting_transferPerLength(indicator,linksModel,transfer_techs,vintage,link_types,"perLengthBuild") )
9133   
9134      + sum ((linksModel,years_a,transfer_techs(techs),vintage,link_types)
9135                  $(transfer_availTech(linksModel,yearsToCalc,transfer_techs,vintage)
9136                      and linksModelToCalc(linksModel)
9137                      and transfer_incidenceModel(nodesModelToCalc,linksModel) <> 0
9138                      and accounting_transferPerLength(indicator,linksModel,transfer_techs,vintage,link_types,"useAnnuity") = 1
9139                      and years_a.val + accounting_transferPerLength(indicator,linksModel,transfer_techs,vintage,link_types,"amorTime") > yearsToCalc.val
9140                      and years_a.val <= yearsToCalc.val ),
9141          0.5
9142          * transfer_linksBuild.l(linksModel,years_a,transfer_techs,vintage)
9143          * transfer_lengthParam(linksModel,link_types,"length")
9144          * accounting_transferPerLength(indicator,linksModel,transfer_techs,vintage,link_types,"perLengthBuild")
9145          * accounting_annuityFactor_transferPerLength(indicator,linksModel,transfer_techs,vintage,link_types) )
9146   
9147      + sum ((linksModel,transfer_techs(techs),vintage)
9148                  $(transfer_usedTech(linksModel,yearsToCalc,transfer_techs,vintage)
9149                      and linksModelToCalc(linksModel)
9150                      and transfer_incidenceModel(nodesModelToCalc,linksModel) <> 0 ),
9151          0.5
9152          * transfer_linksDecom.l(linksModel,yearsToCalc,transfer_techs,vintage)
9153          * accounting_transferLinks(indicator,linksModel,transfer_techs,vintage,"perLinkDecom")
9154   
9155          + 0.5
9156          * transfer_linksTotal.l(linksModel,yearsToCalc,transfer_techs,vintage)
9157          * accounting_transferLinks(indicator,linksModel,transfer_techs,vintage,"perLinkTotal")
9158   
9159          + 0.5
9160          * sum (link_types,
9161              transfer_linksDecom.l(linksModel,yearsToCalc,transfer_techs,vintage)
9162              * transfer_lengthParam(linksModel,link_types,"length")
9163              * accounting_transferPerLength(indicator,linksModel,transfer_techs,vintage,link_types,"perLengthDecom")
9164   
9165              + transfer_linksTotal.l(linksModel,yearsToCalc,transfer_techs,vintage)
9166              * transfer_lengthParam(linksModel,link_types,"length")
9167              * accounting_transferPerLength(indicator,linksModel,transfer_techs,vintage,link_types,"perLengthTotal"))
9168   
9169          + 0.5
9170          * sum (timeModelToCalc,
9171              transfer_flowAlong.l(timeModelToCalc,linksModel,yearsToCalc,transfer_techs,vintage)
9172              * timeLength(timeModelToCalc)
9173              * ( accounting_transferLinks(indicator,linksModel,transfer_techs,vintage,"perFlow")
9174                  + accounting_transferLinks(indicator,linksModel,transfer_techs,vintage,"perFlowAlong"))
9175   
9176              + transfer_flowAgainst.l(timeModelToCalc,linksModel,yearsToCalc,transfer_techs,vintage)
9177              * timeLength(timeModelToCalc)
9178              * ( accounting_transferLinks(indicator,linksModel,transfer_techs,vintage,"perFlow")
9179                  + accounting_transferLinks(indicator,linksModel,transfer_techs,vintage,"perFlowAgainst")))
9180   
9181          + 0.5
9182          * sum ((timeModelToCalc, link_types),
9183              transfer_flowAlong.l(timeModelToCalc,linksModel,yearsToCalc,transfer_techs,vintage)
9184              * timeLength(timeModelToCalc)
9185              * transfer_lengthParam(linksModel,link_types,"length")
9186              * (accounting_transferPerLength(indicator,linksModel,transfer_techs,vintage,link_types,"perFlow")
9187                  + accounting_transferPerLength(indicator,linksModel,transfer_techs,vintage,link_types,"perFlowAlong"))
9188   
9189              + transfer_flowAgainst.l(timeModelToCalc,linksModel,yearsToCalc,transfer_techs,vintage)
9190              * timeLength(timeModelToCalc)
9191              * transfer_lengthParam(linksModel,link_types,"length")
9192              * (accounting_transferPerLength(indicator,linksModel,transfer_techs,vintage,link_types,"perFlow")
9193                  + accounting_transferPerLength(indicator,linksModel,transfer_techs,vintage,link_types,"perFlowAgainst"))))
9194   
9195   
9196  * == sources / sinks ==
9197      + sum ((timeModelToCalc,sourcesink_techs(techs),commodity)
9198              $sourcesink_enabled(nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity),
9199          sourcesink_flow.l(timeModelToCalc,nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity)
9200          * timeLength(timeModelToCalc)
9201          * accounting_sourcesinkFlow(indicator,nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity,"perFlow"))
9202      ;
9203   
9204   
9205  * ==== full set of main indicators ====
9206   
9207  indicator_accounting(accNodesModel,accYears,indicator)
9208      $sum((accNodesModel_a,accYears_a,indicator_a)
9209              $compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a), 1)
9210      =
9211      + sum((accNodesModel_a,accYears_a,indicator_a)
9212              $(compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
9213                  and variableIndicators(accNodesModel_a,accYears_a,indicator_a)),
9214          compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
9215          * accounting_indicator.l(accNodesModel_a,accYears_a,indicator_a))
9216   
9217      + sum((accNodesModel_a,accYears_a,indicator_a)
9218              $(compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)),
9219          compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
9220          * (sum((nodesModelToCalc,yearsToCalc,techs)
9221                  $(sameas(accNodesModel_a, nodesModelToCalc)
9222                      and sameas(accYears_a, yearsToCalc)),
9223                  indicator_accounting_detailed(indicator_a,nodesModelToCalc,yearsToCalc,techs))))
9224      ;
9225   
9226  indicator_accounting_comp(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
9227      $compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
9228      =
9229          compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
9230          * accounting_indicator.l(accNodesModel_a,accYears_a,indicator_a)
9231              $variableIndicators(accNodesModel_a,accYears_a,indicator_a)
9232   
9233          + compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
9234          * (sum((nodesModelToCalc,yearsToCalc,techs)
9235                  $(sameas(accNodesModel_a, nodesModelToCalc)
9236                      and sameas(accYears_a, yearsToCalc)),
9237                  indicator_accounting_detailed(indicator_a,nodesModelToCalc,yearsToCalc,techs)))
9238      ;
9239   
9240  indicator_accounting_ref(accNodesModel,accYears,indicator)
9241      $accounting_indicator.l(accNodesModel,accYears,indicator)
9242      = accounting_indicator.l(accNodesModel,accYears,indicator);
9243   
9244  * ==== link-specific indicator accounting ====
9245   
9246  indicator_accounting_links(indicator,nodesModelToCalc,nodesModelToCalc_a,linksModelToCalc,yearsToCalc,techs)
9247      $(transfer_incidenceModel(nodesModelToCalc,linksModelToCalc) < 0
9248          and transfer_incidenceModel(nodesModelToCalc_a,linksModelToCalc) > 0)
9249      =
9250      sum ((transfer_techs(techs),vintage)
9251                  $(transfer_availTech(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
9252                      and accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"useAnnuity") = 0),
9253          transfer_linksBuild.l(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
9254          * accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"perLinkBuild") )
9255   
9256      + sum ((years_a,transfer_techs(techs),vintage)
9257                  $(transfer_availTech(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
9258                      and accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"useAnnuity") = 1
9259                      and years_a.val + accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"amorTime") > yearsToCalc.val
9260                      and years_a.val <= yearsToCalc.val ),
9261          transfer_linksBuild.l(linksModelToCalc,years_a,transfer_techs,vintage)
9262          * accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"perLinkBuild")
9263          * accounting_annuityFactor_transferLink(indicator,linksModelToCalc,transfer_techs,vintage) )
9264   
9265      + sum ((transfer_techs(techs),vintage,link_types)
9266                  $(transfer_availTech(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
9267                      and accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"useAnnuity") = 0 ),
9268          transfer_linksBuild.l(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
9269          * transfer_lengthParam(linksModelToCalc,link_types,"length")
9270          * accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"perLengthBuild") )
9271   
9272      + sum ((years_a,transfer_techs(techs),vintage,link_types)
9273                  $(transfer_availTech(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
9274                      and accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"useAnnuity") = 1
9275                      and years_a.val + accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"amorTime") > yearsToCalc.val
9276                      and years_a.val <= yearsToCalc.val ),
9277          transfer_linksBuild.l(linksModelToCalc,years_a,transfer_techs,vintage)
9278          * transfer_lengthParam(linksModelToCalc,link_types,"length")
9279          * accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"perLengthBuild")
9280          * accounting_annuityFactor_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types) )
9281   
9282      + sum ((transfer_techs(techs),vintage)
9283                  $(transfer_usedTech(linksModelToCalc,yearsToCalc,transfer_techs,vintage)),
9284          transfer_linksDecom.l(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
9285          * accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"perLinkDecom")
9286   
9287          + transfer_linksTotal.l(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
9288          * accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"perLinkTotal")
9289   
9290          + sum (link_types,
9291              transfer_linksDecom.l(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
9292              * transfer_lengthParam(linksModelToCalc,link_types,"length")
9293              * accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"perLengthDecom")
9294   
9295              + transfer_linksTotal.l(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
9296              * transfer_lengthParam(linksModelToCalc,link_types,"length")
9297              * accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"perLengthTotal"))
9298   
9299          + sum (timeModelToCalc,
9300              transfer_flowAlong.l(timeModelToCalc,linksModelToCalc,yearsToCalc,transfer_techs,vintage)
9301              * timeLength(timeModelToCalc)
9302              * ( accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"perFlow")
9303                  + accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"perFlowAlong"))
9304   
9305              + transfer_flowAgainst.l(timeModelToCalc,linksModelToCalc,yearsToCalc,transfer_techs,vintage)
9306              * timeLength(timeModelToCalc)
9307              * ( accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"perFlow")
9308                  + accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"perFlowAgainst")))
9309   
9310          + sum ((timeModelToCalc, link_types),
9311              transfer_flowAlong.l(timeModelToCalc,linksModelToCalc,yearsToCalc,transfer_techs,vintage)
9312              * timeLength(timeModelToCalc)
9313              * transfer_lengthParam(linksModelToCalc,link_types,"length")
9314              * (accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"perFlow")
9315                  + accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"perFlowAlong"))
9316   
9317              + transfer_flowAgainst.l(timeModelToCalc,linksModelToCalc,yearsToCalc,transfer_techs,vintage)
9318              * timeLength(timeModelToCalc)
9319              * transfer_lengthParam(linksModelToCalc,link_types,"length")
9320              * (accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"perFlow")
9321                  + accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"perFlowAgainst")))
9322      );
9323   
9324   
9325  * == converter capacities ==
9326   
9327  converter_ratedInput(converter_techs,vintage,commodity)
9328      $(converter_techParam(converter_techs,vintage,"lifeTime") > 0)
9329      = smin(activity$converter_usedAct(converter_techs,vintage,activity),
9330              converter_coefficient(converter_techs,vintage,activity,commodity,"coefficient"));
9331  converter_ratedInput(converter_techs,vintage,commodity)
9332      $(converter_ratedInput(converter_techs,vintage,commodity) > 0)
9333      = 0;
9334   
9335  converter_ratedOutput(converter_techs,vintage,commodity)
9336      $(converter_techParam(converter_techs,vintage,"lifeTime") > 0)
9337      = smax(activity$converter_usedAct(converter_techs,vintage,activity),
9338              converter_coefficient(converter_techs,vintage,activity,commodity,"coefficient"));
9339  converter_ratedOutput(converter_techs,vintage,commodity)
9340      $(converter_ratedOutput(converter_techs,vintage,commodity) < 0)
9341      = 0;
9342   
9343  converter_ratedOutput_min(nodesModelToCalc,years,converter_techs(techs),commodity)
9344      $sum(vintage$(converter_usedTech(nodesModelToCalc,years,converter_techs,vintage)
9345          and converter_ratedOutput(converter_techs,vintage,commodity)), 1)
9346      = smin(vintage$(converter_usedTech(nodesModelToCalc,years,converter_techs,vintage)
9347              and converter_ratedOutput(converter_techs,vintage,commodity)),
9348          converter_ratedOutput(converter_techs,vintage,commodity));
9349   
9350  converter_ratedOutput_max(nodesModelToCalc,years,converter_techs(techs),commodity)
9351      $sum(vintage$(converter_usedTech(nodesModelToCalc,years,converter_techs,vintage)
9352          and converter_ratedOutput(converter_techs,vintage,commodity)), 1)
9353      = smax(vintage$(converter_usedTech(nodesModelToCalc,years,converter_techs,vintage)
9354              and converter_ratedOutput(converter_techs,vintage,commodity)),
9355          converter_ratedOutput(converter_techs,vintage,commodity));
9356   
9357  converter_units_ext(map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,years),converter_techs(techs),vintage,"build")
9358      = converter_unitsBuild.l(nodesModelToCalc,years,converter_techs,vintage);
9359   
9360  converter_units_ext(map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,years),converter_techs(techs),vintage,"decom")
9361      = converter_unitsDecom.l(nodesModelToCalc,years,converter_techs,vintage);
9362   
9363  converter_units_ext(map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,years),converter_techs(techs),vintage,"total")
9364      = converter_unitsTotal.l(nodesModelToCalc,years,converter_techs,vintage);
9365   
9366  converter_caps_ext(map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,years),converter_techs(techs),vintage,commodity,capType)
9367      $(converter_ratedOutput(converter_techs,vintage,commodity))
9368      = converter_units_ext(accNodesModel,nodesModelToCalc,accYears,years,techs,vintage,capType)
9369          * converter_ratedOutput(converter_techs,vintage,commodity);
9370   
9371  converter_caps_ext(map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,years),converter_techs(techs),vintage,commodity,"lowerLimit")
9372      $(converter_usedTech(nodesModelToCalc,years,converter_techs,vintage)
9373          and converter_capacityParam(nodesModelToCalc,years,converter_techs,"unitsLowerLimit") > 0
9374          and converter_ratedOutput_min(nodesModelToCalc,years,converter_techs,commodity))
9375      = converter_capacityParam(nodesModelToCalc,years,converter_techs,"unitsLowerLimit")
9376          * converter_ratedOutput_min(nodesModelToCalc,years,converter_techs,commodity);
9377   
9378  converter_caps_ext(map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,years),converter_techs(techs),vintage,commodity,"upperLimit")
9379      $(converter_usedTech(nodesModelToCalc,years,converter_techs,vintage)
9380          and converter_capacityParam(nodesModelToCalc,years,converter_techs,"unitsUpperLimit") < inf
9381          and converter_ratedOutput_min(nodesModelToCalc,years,converter_techs,commodity))
9382      = converter_capacityParam(nodesModelToCalc,years,converter_techs,"unitsUpperLimit")
9383          * converter_ratedOutput_max(nodesModelToCalc,years,converter_techs,commodity);
9384   
9385  converter_caps(accNodesModel,accYears,converter_techs(techs),commodity,capType)
9386      = sum((nodesModelToCalc,years,vintage)
9387              $(map_accNodesPostCalc(accNodesModel,nodesModelToCalc)
9388                  and map_accYearsPostCalc(accYears,years)),
9389          converter_caps_ext(accNodesModel,nodesModelToCalc,accYears,years,converter_techs,vintage,commodity,capType));
9390  option clear = converter_caps_ext;
9391   
9392  converter_units(accNodesModel,accYears,converter_techs(techs),vintage,capType)
9393      = sum((nodesModelToCalc,years)
9394              $(map_accNodesPostCalc(accNodesModel,nodesModelToCalc)
9395                  and map_accYearsPostCalc(accYears,years)),
9396          converter_units_ext(accNodesModel,nodesModelToCalc,accYears,years,converter_techs,vintage,capType));
9397  option clear = converter_units_ext;
9398   
9399   
9400  * ==== transfer capacities ====
9401   
9402  max_transfer_coefficient(transfer_techs(techs),commodity)
9403          $(smax(vintage, transfer_coefficient(transfer_techs,vintage,commodity,"coefficient")) > 0)
9404          = smax(vintage, transfer_coefficient(transfer_techs,vintage,commodity,"coefficient"));
9405   
9406  min_transfer_coefficient(transfer_techs(techs),commodity)
9407          $(smin(vintage, transfer_coefficient(transfer_techs,vintage,commodity,"coefficient")) > 0)
9408          = smin(vintage, transfer_coefficient(transfer_techs,vintage,commodity,"coefficient"));
9409   
9410  transfer_usedStartEnd(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,years,transfer_techs)
9411      $(transfer_incidenceModel(nodesModelToCalc_start,linksModel) < 0
9412          and transfer_incidenceModel(nodesModelToCalc_end,linksModel) > 0
9413          and sum(vintage$transfer_usedTech(linksModel,years,transfer_techs,vintage), 1))
9414      = yes;
9415   
9416  transfer_links(linksModel,years,transfer_techs,vintage,"build")
9417      = transfer_linksBuild.l(linksModel,years,transfer_techs,vintage);
9418   
9419  transfer_links(linksModel,years,transfer_techs,vintage,"decom")
9420      = transfer_linksDecom.l(linksModel,years,transfer_techs,vintage);
9421   
9422  transfer_links(linksModel,years,transfer_techs,vintage,"total")
9423      = transfer_linksTotal.l(linksModel,years,transfer_techs,vintage);
9424   
9425  transfer_caps(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,years,transfer_techs(techs),commodity,capType)
9426      $(transfer_usedStartEnd(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,years,transfer_techs)
9427          and sum(vintage$(transfer_usedTech(linksModel,years,transfer_techs,vintage)
9428                              and transfer_coefficient(transfer_techs,vintage,commodity,"coefficient")), 1))
9429      = sum(vintage,
9430          transfer_links(linksModel,years,transfer_techs,vintage,capType)
9431          * transfer_coefficient(transfer_techs,vintage,commodity,"coefficient"));
9432   
9433  transfer_caps(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,years,transfer_techs(techs),commodity,"lowerLimit")
9434      $(transfer_usedStartEnd(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,years,transfer_techs)
9435          and sum(vintage$(transfer_usedTech(linksModel,years,transfer_techs,vintage)
9436                              and transfer_coefficient(transfer_techs,vintage,commodity,"coefficient")), 1))
9437      = transfer_linksParam(linksModel,years,transfer_techs,'linksLowerLimit')
9438          * min_transfer_coefficient(transfer_techs,commodity);
9439   
9440  transfer_caps(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,years,transfer_techs(techs),commodity,"upperLimit")
9441      $(transfer_usedStartEnd(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,years,transfer_techs)
9442          and sum(vintage$(transfer_usedTech(linksModel,years,transfer_techs,vintage)
9443                              and transfer_coefficient(transfer_techs,vintage,commodity,"coefficient")), 1))
9444      = transfer_linksParam(linksModel,years,transfer_techs,'linksUpperLimit')
9445          * max_transfer_coefficient(transfer_techs,commodity);
9446   
9447   
9448  * ==== transfer flows ====
9449   
9450  transfer_flows(timeModelToCalc,nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs(techs),commodity)
9451      $transfer_usedStartEnd(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs)
9452      = sum(vintage,
9453          ( transfer_flowAlong.l(timeModelToCalc,linksModel,yearsToCalc,transfer_techs,vintage)
9454              - transfer_flowAgainst.l(timeModelToCalc,linksModel,yearsToCalc,transfer_techs,vintage) )
9455          * timeLength(timeModelToCalc)
9456          * transfer_coefficient(transfer_techs,vintage,commodity,"coefficient"));
9457   
9458  transfer_flows_annual(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs(techs),commodity,"netto")
9459      $transfer_usedStartEnd(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs)
9460      = sum(timeModelToCalc,
9461          transfer_flows(timeModelToCalc,nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs,commodity));
9462   
9463  transfer_flows_annual(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs(techs),commodity,"positive")
9464      $transfer_usedStartEnd(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs)
9465      = sum(timeModelToCalc
9466              $(transfer_flows(timeModelToCalc,nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs,commodity) > 0),
9467          transfer_flows(timeModelToCalc,nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs,commodity));
9468   
9469  transfer_flows_annual(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs(techs),commodity,"negative")
9470      $transfer_usedStartEnd(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs)
9471      = sum(timeModelToCalc
9472              $(transfer_flows(timeModelToCalc,nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs,commodity) < 0),
9473          transfer_flows(timeModelToCalc,nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs,commodity));
9474   
9475  transfer_flows_annual(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs(techs),commodity,"brutto")
9476      $transfer_usedStartEnd(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs)
9477      = transfer_flows_annual(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs,commodity,"positive")
9478          - transfer_flows_annual(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs,commodity,"negative");
9479   
9480  transfer_flows_annual(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs(techs),commodity,"flh")
9481      $(transfer_usedStartEnd(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs)
9482          and transfer_flows_annual(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs,commodity,"brutto") > 0
9483          and transfer_caps(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs,commodity,"total") > 0)
9484      = transfer_flows_annual(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs,commodity,"brutto")
9485          / transfer_caps(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs,commodity,"total");
9486   
9487  transfer_losses(timeModelToCalc,nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs(techs),commodity)
9488      $(transfer_usedStartEnd(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs)
9489          and (sum(vintage$transfer_coefPerFlow(transfer_techs,vintage,commodity,"coefPerFlow"), 1)
9490              or sum((vintage, link_types)$transfer_coefPerLength(transfer_techs,vintage,commodity,link_types,"coefPerLength"), 1)))
9491      = -1 * abs(sum(vintage,
9492          ( transfer_flowAlong.l(timeModelToCalc,linksModel,yearsToCalc,transfer_techs,vintage)
9493              - transfer_flowAgainst.l(timeModelToCalc,linksModel,yearsToCalc,transfer_techs,vintage) )
9494          * ( transfer_coefPerFlow(transfer_techs,vintage,commodity,"coefPerFlow")
9495              + sum(link_types,
9496                  transfer_coefPerLength(transfer_techs,vintage,commodity,link_types,"coefPerLength")
9497                  * transfer_lengthParam(linksModel,link_types,"length")))))
9498          * timeLength(timeModelToCalc);
9499   
9500  transfer_losses_annual(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs(techs),commodity,"netto")
9501      $(transfer_usedStartEnd(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs)
9502          and (sum(vintage$transfer_coefPerFlow(transfer_techs,vintage,commodity,"coefPerFlow"), 1)
9503              or sum((vintage, link_types)$transfer_coefPerLength(transfer_techs,vintage,commodity,link_types,"coefPerLength"), 1)))
9504      = sum(timeModelToCalc,
9505          transfer_losses(timeModelToCalc,nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs,commodity));
9506   
9507   
9508  * ==== storage capacities ====
9509   
9510  storage_size_max(nodesModelToCalc,years,storage_techs(techs),commodity)
9511      $sum(vintage$(storage_usedTech(nodesModelToCalc,years,storage_techs,vintage)
9512              and storage_usedCom(storage_techs,vintage,commodity)
9513              and storage_sizeParam(storage_techs,vintage,commodity,"size")), 1)
9514      = smax(vintage$(storage_usedTech(nodesModelToCalc,years,storage_techs,vintage)
9515              and storage_usedCom(storage_techs,vintage,commodity)
9516              and storage_sizeParam(storage_techs,vintage,commodity,"size")),
9517          storage_sizeParam(storage_techs,vintage,commodity,"size"));
9518   
9519  storage_size_min(nodesModelToCalc,years,storage_techs(techs),commodity)
9520      $sum(vintage$(storage_usedTech(nodesModelToCalc,years,storage_techs,vintage)
9521              and storage_usedCom(storage_techs,vintage,commodity)
9522              and storage_sizeParam(storage_techs,vintage,commodity,"size")), 1)
9523      = smin(vintage$(storage_usedTech(nodesModelToCalc,years,storage_techs,vintage)
9524              and storage_usedCom(storage_techs,vintage,commodity)
9525              and storage_sizeParam(storage_techs,vintage,commodity,"size")),
9526          storage_sizeParam(storage_techs,vintage,commodity,"size"));
9527   
9528  storage_units_ext(map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,years),storage_techs(techs),vintage,"build")
9529      $storage_usedTech(nodesModelToCalc,years,storage_techs,vintage)
9530      = storage_unitsBuild.l(nodesModelToCalc,years,storage_techs,vintage);
9531   
9532  storage_units_ext(map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,years),storage_techs(techs),vintage,"decom")
9533      $storage_usedTech(nodesModelToCalc,years,storage_techs,vintage)
9534      = storage_unitsDecom.l(nodesModelToCalc,years,storage_techs,vintage);
9535   
9536  storage_units_ext(map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,years),storage_techs(techs),vintage,"total")
9537      $storage_usedTech(nodesModelToCalc,years,storage_techs,vintage)
9538      = storage_unitsTotal.l(nodesModelToCalc,years,storage_techs,vintage);
9539   
9540  storage_caps_ext(map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,years),storage_techs(techs),vintage,commodity,capType)
9541      $storage_sizeParam(storage_techs,vintage,commodity,"size")
9542      = storage_units_ext(accNodesModel,nodesModelToCalc,accYears,years,storage_techs,vintage,capType)
9543          * storage_sizeParam(storage_techs,vintage,commodity,"size");
9544   
9545  storage_caps_ext(map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,years),storage_techs(techs),vintage,commodity,"lowerLimit")
9546      $(storage_usedTech(nodesModelToCalc,years,storage_techs,vintage)
9547          and storage_reservoirParam(nodesModelToCalc,years,storage_techs,"unitsLowerLimit") > 0
9548          and storage_size_min(nodesModelToCalc,years,storage_techs,commodity))
9549      = storage_reservoirParam(nodesModelToCalc,years,storage_techs,"unitsLowerLimit")
9550          * storage_size_min(nodesModelToCalc,years,storage_techs,commodity);
9551   
9552  storage_caps_ext(map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,years),storage_techs(techs),vintage,commodity,"upperLimit")
9553      $(storage_usedTech(nodesModelToCalc,years,storage_techs,vintage)
9554          and storage_reservoirParam(nodesModelToCalc,years,storage_techs,"unitsUpperLimit") < inf
9555          and storage_size_max(nodesModelToCalc,years,storage_techs,commodity))
9556      = storage_reservoirParam(nodesModelToCalc,years,storage_techs,"unitsUpperLimit")
9557          * storage_size_max(nodesModelToCalc,years,storage_techs,commodity);
9558   
9559  storage_caps_ext(map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,years),storage_techs(techs),vintage,commodity,"total_degraded")
9560      $(storage_usedCom(storage_techs,vintage,commodity)
9561          and (storage_techParam(storage_techs,vintage,"annualDegradation") > 0
9562               or storage_techParam(storage_techs,vintage,"usageDegradation")))
9563      = sum((degradation_states,yearsCom), (storage_degradationParam(storage_techs,vintage,degradation_states,"remainingCapacity")
9564                                      - (years.val - yearsCom.val) * storage_techParam(storage_techs,vintage,"annualDegradation"))
9565                                      * storage_unitsStateTracker.l(nodesModelToCalc,years,yearsCom,storage_techs,vintage,degradation_states)
9566                                      * storage_sizeParam(storage_techs,vintage,commodity,"size"));
9567   
9568  storage_caps(accNodesModel,accYears,storage_techs(techs),commodity,capType)
9569      = sum((nodesModelToCalc,years,vintage)
9570              $(map_accNodesPostCalc(accNodesModel,nodesModelToCalc)
9571                  and map_accYearsPostCalc(accYears,years)),
9572          storage_caps_ext(accNodesModel,nodesModelToCalc,accYears,years,storage_techs,vintage,commodity,capType));
9573  option clear = storage_caps_ext;
9574   
9575  storage_units(accNodesModel,accYears,storage_techs(techs),vintage,capType)
9576      = sum((nodesModelToCalc,years)
9577              $(map_accNodesPostCalc(accNodesModel,nodesModelToCalc)
9578                  and map_accYearsPostCalc(accYears,years)),
9579          storage_units_ext(accNodesModel,nodesModelToCalc,accYears,years,storage_techs,vintage,capType));
9580  option clear = storage_units_ext;
9581   
9582   
9583  * ==== storage levels and flows ====
9584   
9585  storage_flows_ext(timeModelToCalc,map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,yearsToCalc),storage_techs(techs),vintage,commodity)
9586      $(storage_usedTech(nodesModelToCalc,yearsToCalc,storage_techs,vintage) and balance_techComm(storage_techs,commodity))
9587      = storage_level.l(timeModelToCalc,nodesModelToCalc,yearsToCalc,storage_techs,vintage,commodity)
9588          - storage_level.l(timeModelToCalc--1,nodesModelToCalc,yearsToCalc,storage_techs,vintage,commodity)
9590      + storage_losses.l(timeModelToCalc,nodesModelToCalc,yearsToCalc,storage_techs,vintage,commodity)
9591          * timeLength(timeModelToCalc)
9593      ;
9594   
9595  storage_flows(timeModelToCalc,accNodesModel,accYears,storage_techs(techs),commodity)
9596      = sum((nodesModelToCalc,yearsToCalc,vintage)
9597              $(storage_usedTech(nodesModelToCalc,yearsToCalc,storage_techs,vintage) and balance_techComm(storage_techs,commodity)),
9598          storage_flows_ext(timeModelToCalc,accNodesModel,nodesModelToCalc,accYears,yearsToCalc,storage_techs,vintage,commodity));
9599  option clear = storage_flows_ext;
9600   
9601  storage_level_out_ext(timeModelToCalc,map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,yearsToCalc),storage_techs(techs),vintage,commodity)
9602      $(storage_usedTech(nodesModelToCalc,yearsToCalc,storage_techs,vintage) and balance_techComm(storage_techs,commodity))
9603      = storage_level.l(timeModelToCalc,nodesModelToCalc,yearsToCalc,storage_techs,vintage,commodity);
9604   
9605  storage_level_out(timeModelToCalc,accNodesModel,accYears,storage_techs(techs),commodity)
9606      = sum((nodesModelToCalc,yearsToCalc,vintage)
9607              $(storage_usedTech(nodesModelToCalc,yearsToCalc,storage_techs,vintage) and balance_techComm(storage_techs,commodity)),
9608          storage_level_out_ext(timeModelToCalc,accNodesModel,nodesModelToCalc,accYears,yearsToCalc,storage_techs,vintage,commodity));
9609  option clear = storage_level_out_ext;
9610   
9611  storage_flows_annual(accNodesModel,accYears,storage_techs(techs),commodity,"netto")
9612      = sum(timeModelToCalc,
9613          storage_flows(timeModelToCalc,accNodesModel,accYears,storage_techs,commodity));
9614   
9615  storage_flows_annual(accNodesModel,accYears,storage_techs(techs),commodity,"positive")
9616      = sum(timeModelToCalc
9617              $(storage_flows(timeModelToCalc,accNodesModel,accYears,storage_techs,commodity) > 0),
9618          storage_flows(timeModelToCalc,accNodesModel,accYears,storage_techs,commodity));
9619   
9620  storage_flows_annual(accNodesModel,accYears,storage_techs(techs),commodity,"negative")
9621      = sum(timeModelToCalc
9622              $(storage_flows(timeModelToCalc,accNodesModel,accYears,storage_techs,commodity) < 0),
9623          storage_flows(timeModelToCalc,accNodesModel,accYears,storage_techs,commodity));
9624   
9625  storage_flows_annual(accNodesModel,accYears,storage_techs(techs),commodity,"brutto")
9626      = storage_flows_annual(accNodesModel,accYears,storage_techs,commodity,"positive")
9627          + storage_flows_annual(accNodesModel,accYears,storage_techs,commodity,"negative");
9628   
9629  storage_flows_annual(accNodesModel,accYears,storage_techs(techs),commodity,"flh")
9630      $(storage_flows_annual(accNodesModel,accYears,storage_techs,commodity,"brutto") > 0
9631          and storage_caps(accNodesModel,accYears,storage_techs,commodity,"total") > 0)
9632      = storage_flows_annual(accNodesModel,accYears,storage_techs,commodity,"brutto")
9633          / storage_caps(accNodesModel,accYears,storage_techs,commodity,"total");
9634   
9635  storage_losses_out(timeModelToCalc,accNodesModel,accYears,storage_techs(techs),commodity)
9636      = sum((nodesModelToCalc,yearsToCalc,vintage)
9637              $(storage_losses.l(timeModelToCalc,nodesModelToCalc,yearsToCalc,storage_techs,vintage,commodity)
9638                  and map_accNodesPostCalc(accNodesModel,nodesModelToCalc)
9639                  and map_accYearsPostCalc(accYears,yearsToCalc)),
9640          storage_losses.l(timeModelToCalc,nodesModelToCalc,yearsToCalc,storage_techs,vintage,commodity)
9641          * timeLength(timeModelToCalc));
9642   
9643  storage_losses_annual(accNodesModel,accYears,storage_techs(techs),commodity,"netto")
9644      = sum(timeModelToCalc,
9645          storage_losses_out(timeModelToCalc,accNodesModel,accYears,storage_techs,commodity));
9646   
9647   
9648  * == commodity balance ==
9649   
9650  commodity_balance_ext(timeModelToCalc,map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,yearsToCalc),converter_techs(techs),vintage,commodity)
9651      $(converter_usedTech(nodesModelToCalc,yearsToCalc,converter_techs,vintage)
9652          and balance_usedConverter(nodesModelToCalc,yearsToCalc,commodity))
9653      = sum((activity)
9654              $(converter_coefficientProfile(timeModelToCalc,nodesModelToCalc,yearsToCalc,converter_techs,vintage,activity,commodity)),
9655          converter_activity.l(timeModelToCalc,nodesModelToCalc,yearsToCalc,converter_techs,vintage,activity)
9656              * timeLength(timeModelToCalc)
9657              * converter_coefficientProfile(timeModelToCalc,nodesModelToCalc,yearsToCalc,converter_techs,vintage,activity,commodity)
9658          + converter_unitsUsingActivity_MIP.l(timeModelToCalc,nodesModelToCalc,yearsToCalc,converter_techs,vintage,activity)
9659              * timeLength(timeModelToCalc)
9660              * converter_coefficient(converter_techs,vintage,activity,commodity,"constant"));
9661   
9662  commodity_balance_ext(timeModelToCalc,map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,yearsToCalc),storage_techs(techs),vintage,commodity)
9663      $(storage_usedTech(nodesModelToCalc,yearsToCalc,storage_techs,vintage)
9664          and storage_sizeParam(storage_techs,vintage,commodity,"size"))
9665      = commodity_balance_ext(timeModelToCalc,accNodesModel,nodesModelToCalc,accYears,yearsToCalc,storage_techs,vintage,commodity)
9666      + storage_level.l(timeModelToCalc--1,nodesModelToCalc,yearsToCalc,storage_techs,vintage,commodity)
9667          - storage_level.l(timeModelToCalc,nodesModelToCalc,yearsToCalc,storage_techs,vintage,commodity)
9668      - storage_losses.l(timeModelToCalc,nodesModelToCalc,yearsToCalc,storage_techs,vintage,commodity)
9669      * timeLength(timeModelToCalc);
9670   
9671  commodity_balance_ext(timeModelToCalc,map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,yearsToCalc),sourcesink_techs(techs),vintage,commodity)
9672      $(sourcesink_enabled(nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity)
9673          and sameas(yearsToCalc,vintage))
9674      = commodity_balance_ext(timeModelToCalc,accNodesModel,nodesModelToCalc,accYears,yearsToCalc,sourcesink_techs,vintage,commodity)
9675      + sourcesink_flow.l(timeModelToCalc,nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity)
9676      * timeLength(timeModelToCalc);
9677   
9678  commodity_balance_ext(timeModelToCalc,map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,yearsToCalc),transfer_techs(techs),vintage,commodity)
9679      $sum((linksModel)
9680          $(transfer_incidenceModel(nodesModelToCalc,linksModel)
9681                  and transfer_usedTech(linksModel,yearsToCalc,transfer_techs,vintage)
9682                  and transfer_coefficient(transfer_techs,vintage,commodity,"coefficient")), 1)
9683      = commodity_balance_ext(timeModelToCalc,accNodesModel,nodesModelToCalc,accYears,yearsToCalc,transfer_techs,vintage,commodity)
9684      + sum((linksModel)
9685              $(transfer_incidenceModel(nodesModelToCalc,linksModel)
9686                  and transfer_usedTech(linksModel,yearsToCalc,transfer_techs,vintage)
9687                  and transfer_coefficient(transfer_techs,vintage,commodity,"coefficient")),
9688   
9689              (transfer_flowAlong.l(timeModelToCalc,linksModel,yearsToCalc,transfer_techs,vintage)
9690                      $(transfer_incidenceModel(nodesModelToCalc,linksModel) > 0)
9691                + transfer_flowAgainst.l(timeModelToCalc,linksModel,yearsToCalc,transfer_techs,vintage)
9692                      $(transfer_incidenceModel(nodesModelToCalc,linksModel) < 0))
9693              * timeLength(timeModelToCalc)
9694              * transfer_coefficient(transfer_techs,vintage,commodity,"coefficient")
9695   
9696              - (transfer_flowAlong.l(timeModelToCalc,linksModel,yearsToCalc,transfer_techs,vintage)
9697                      $(transfer_incidenceModel(nodesModelToCalc,linksModel) < 0)
9698                + transfer_flowAgainst.l(timeModelToCalc,linksModel,yearsToCalc,transfer_techs,vintage)
9699                      $(transfer_incidenceModel(nodesModelToCalc,linksModel) > 0))
9700              * timeLength(timeModelToCalc)
9701              * transfer_coefficient(transfer_techs,vintage,commodity,"coefficient")
9702   
9703              + 0.5 * ((transfer_flowAlong.l(timeModelToCalc,linksModel,yearsToCalc,transfer_techs,vintage)
9704                          $(transfer_incidenceModel(nodesModelToCalc,linksModel) <> 0)
9705                      + transfer_flowAgainst.l(timeModelToCalc,linksModel,yearsToCalc,transfer_techs,vintage)
9706                          $(transfer_incidenceModel(nodesModelToCalc,linksModel) <> 0))
9707                      * timeLength(timeModelToCalc)
9708                      * ( transfer_coefPerFlow(transfer_techs,vintage,commodity,"coefPerFlow")
9709                          + sum(link_types,
9710                              transfer_coefPerLength(transfer_techs,vintage,commodity,link_types,"coefPerLength")
9711                              * transfer_lengthParam(linksModel,link_types,"length")))))
9712      ;
9713   
9714  commodity_balance(timeModelToCalc,accNodesModel,accYears,balance_techComm(techs,commodity))
9715      = sum((nodesModelToCalc,yearsToCalc,vintage)
9716              $(commodity_balance_ext(timeModelToCalc,accNodesModel,nodesModelToCalc,accYears,yearsToCalc,techs,vintage,commodity)
9717                  and map_accNodesPostCalc(accNodesModel,nodesModelToCalc)
9718                  and map_accYearsPostCalc(accYears,yearsToCalc)),
9719          commodity_balance_ext(timeModelToCalc,accNodesModel,nodesModelToCalc,accYears,yearsToCalc,techs,vintage,commodity));
9720  option clear = commodity_balance_ext;
9721   
9722   
9723  * ==== annual commodity sums ====
9724   
9725  commodity_balance_annual(accNodesModel,accYears,techs,commodity,"netto")
9726      = sum(timeModelToCalc,
9727          commodity_balance(timeModelToCalc,accNodesModel,accYears,techs,commodity));
9728   
9729  commodity_balance_annual(accNodesModel,accYears,techs,commodity,"positive")
9730      = sum(timeModelToCalc
9731              $(commodity_balance(timeModelToCalc,accNodesModel,accYears,techs,commodity) > 0),
9732          commodity_balance(timeModelToCalc,accNodesModel,accYears,techs,commodity));
9733   
9734  commodity_balance_annual(accNodesModel,accYears,techs,commodity,"negative")
9735      = sum(timeModelToCalc
9736              $(commodity_balance(timeModelToCalc,accNodesModel,accYears,techs,commodity) < 0),
9737          commodity_balance(timeModelToCalc,accNodesModel,accYears,techs,commodity));
9738   
9739  commodity_balance_annual(accNodesModel,accYears,techs,commodity,"brutto")
9740      = commodity_balance_annual(accNodesModel,accYears,techs,commodity,"positive")
9741          - commodity_balance_annual(accNodesModel,accYears,techs,commodity,"negative");
9742   
9743  commodity_balance_annual(accNodesModel,accYears,techs,commodity,"flh")
9744      $(commodity_balance_annual(accNodesModel,accYears,techs,commodity,"brutto") > 0
9745          and converter_caps(accNodesModel,accYears,techs,commodity,"total") > 0 )
9746      = commodity_balance_annual(accNodesModel,accYears,techs,commodity,"brutto")
9747          / converter_caps(accNodesModel,accYears,techs,commodity,"total");
9748   
9749   
9750  * ==== marginal information ====
9751   
9752  marginals_balance(timeModelToCalc,nodesModelToCalc,yearsToCalc,commodity)
9753    $balance_usedBalance(nodesModelToCalc,yearsToCalc,commodity)
9754    =
9755    Eq_balance_commodities.m(timeModelToCalc,nodesModelToCalc,yearsToCalc,commodity);
9756   
9757  marginals_sourcesink_profile(timeModelToCalc,nodesModelToCalc,yearsToCalc,sourcesink_techs(techs),commodity)
9758      $( sourcesink_flow.m(timeModelToCalc,nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity) <> 0 )
9759      =
9760      sourcesink_flow.m(timeModelToCalc,nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity);
9761   
9762  marginals_sourcesink_sum(nodesModelToCalc,yearsToCalc,sourcesink_techs(techs),commodity)
9763      $( ( Eq_sourcesink_useLowerSum.m(nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity)
9764          + Eq_sourcesink_useUpperSum.m(nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity)
9765          + Eq_sourcesink_useFixedSum.m(nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity) ) <> eps )
9766      =
9767      ( Eq_sourcesink_useLowerSum.m(nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity)
9768      + Eq_sourcesink_useUpperSum.m(nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity)
9769      + Eq_sourcesink_useFixedSum.m(nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity) );
9770   
9771  marginals_indicator_bounds(accNodesModel,accYears,indicator)
9772      $( accounting_indicator.m(accNodesModel,accYears,indicator) <> 0 )
9773      =
9774      accounting_indicator.m(accNodesModel,accYears,indicator);
9775   
9776   
9777  * ==== R2A postcalc information ====
9778   
9780   
9781   
9782  * ==== round profiles to reduce size of gdx ====
9783   
9785  commodity_balance(timeModelToCalc,accNodesModel,accYears,techs,commodity)
9786      $commodity_balance(timeModelToCalc,accNodesModel,accYears,techs,commodity)
9787      = round(commodity_balance(timeModelToCalc,accNodesModel,accYears,techs,commodity), 6);
9788   
9789  transfer_flows(timeModelToCalc,nodesModelToCalc,nodesModelToCalc_a,linksModel,yearsToCalc,transfer_techs,commodity)
9790      $transfer_flows(timeModelToCalc,nodesModelToCalc,nodesModelToCalc_a,linksModel,yearsToCalc,transfer_techs,commodity)
9791      = round(transfer_flows(timeModelToCalc,nodesModelToCalc,nodesModelToCalc_a,linksModel,yearsToCalc,transfer_techs,commodity), 6);
9792   
9793  transfer_losses(timeModelToCalc,nodesModelToCalc,nodesModelToCalc_a,linksModel,yearsToCalc,transfer_techs,commodity)
9794      $transfer_losses(timeModelToCalc,nodesModelToCalc,nodesModelToCalc_a,linksModel,yearsToCalc,transfer_techs,commodity)
9795      = round(transfer_losses(timeModelToCalc,nodesModelToCalc,nodesModelToCalc_a,linksModel,yearsToCalc,transfer_techs,commodity), 6);
9796   
9797  storage_flows(timeModelToCalc,accNodesModel,accYears,storage_techs,commodity)
9798      $storage_flows(timeModelToCalc,accNodesModel,accYears,storage_techs,commodity)
9799      = round(storage_flows(timeModelToCalc,accNodesModel,accYears,storage_techs,commodity), 6);
9800   
9801  storage_level_out(timeModelToCalc,accNodesModel,accYears,storage_techs,commodity)
9802      $storage_level_out(timeModelToCalc,accNodesModel,accYears,storage_techs,commodity)
9803      = round(storage_level_out(timeModelToCalc,accNodesModel,accYears,storage_techs,commodity), 6);
9804   
9805  marginals_balance(timeModelToCalc,nodesModelToCalc,yearsToCalc,commodity)
9806      $marginals_balance(timeModelToCalc,nodesModelToCalc,yearsToCalc,commodity)
9807      = round(marginals_balance(timeModelToCalc,nodesModelToCalc,yearsToCalc,commodity), 6);
9808   
9809  marginals_sourcesink_profile(timeModelToCalc,nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity)
9810      $marginals_sourcesink_profile(timeModelToCalc,nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity)
9811      = round(marginals_sourcesink_profile(timeModelToCalc,nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity), 6);
9813   
INCLUDE    C:\Local\REMix\framework\remix\framework\model\source\postcalc\writegdx.gms
9816  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
9817  * SPDX-License-Identifier: BSD-3-Clause
9818   
9821   
9822  execute_unload "C:\Local\REMix\remix_nz\output\will\04-h2-solar_2020-2035-2050\result\04-h2-solar_2020-2035-2050.gdx"
9823      metadata
9824      timeModel
9825      timeModelToCalc
9826      nodesModel
9827      linksModel
9828      indicator
9829      commodity
9830      techs
9831      accNodesModel
9832      accYears
9833   
9834      map_nodesModel
9835      map_linksModel
9836      map_nodesAccounting
9837   
9838      indicator_accounting
9839      indicator_accounting_ref
9840      indicator_accounting_comp
9841      indicator_accounting_detailed
9842      indicator_accounting_links
9843   
9844      converter_caps
9845      converter_units
9847   
9848      transfer_caps
9849      transfer_links
9850      transfer_flows
9851      transfer_flows_annual
9852      transfer_losses
9853      transfer_losses_annual
9854   
9855      storage_caps
9856      storage_units
9857      storage_flows
9858      storage_level_out
9859      storage_flows_annual
9860      storage_losses_out
9861      storage_losses_annual
9863   
9864      commodity_balance
9865      commodity_balance_annual
9866   
9867      marginals_balance
9868      marginals_sourcesink_profile
9869      marginals_sourcesink_sum
9870      marginals_indicator_bounds
9871   
9873      ;
GAMS 44.4.0  06604687 Sep 19, 2023          WEX-WEI x86 64bit/MS Windows - 05/01/24 22:33:59 Page 2
G e n e r a l   A l g e b r a i c   M o d e l i n g   S y s t e m
Include File Summary


   SEQ   GLOBAL TYPE      PARENT   LOCAL  FILENAME

     1        1 INPUT          0       0  C:\Local\REMix\framework\remix\framework\model\run_remix.gms
     2       13 IF DEXIST      1      13  C:\Local\REMix\remix_nz\output\will\04-h2-solar_2020-2035-2050\data\
     3       16 INCLUDE        1      16  .C:\Local\REMix\framework\remix\framework\model\source\metadata.gms
     4       25 CALL           3       9  .printf "remix_version \"0.9.7\"\n" > C:\Local\REMix\remix_nz\process\225a\\metadata
     5       26 CALL           3      10  .printf "gams_version \"44.4.0\"\n" >> C:\Local\REMix\remix_nz\process\225a\\metadata
     6       27 CALL           3      11  .printf "timestamp \"05/01/24 22:33:59\"\n" >> C:\Local\REMix\remix_nz\process\225a\\metadata
     7       29 CALL           3      13  .printf "framework_path " >> C:\Local\REMix\remix_nz\process\225a\\metadata
     8       31 CALL           3      15  .cd C:\Local\REMix\framework\remix\framework\model\source && cd| sed "s/^/\"/;s/$/\"/" >> C:\Local\REMix\remix_nz\process\225a\\metadata
     9       33 CALL           3      19  .printf "\n" >> C:\Local\REMix\remix_nz\process\225a\\metadata
    10       34 CALL           3      20  .printf "framework_hash " >> C:\Local\REMix\remix_nz\process\225a\\metadata
    11       36 CALL           3      22  .cd C:\Local\REMix\framework\remix\framework\model\source && git rev-parse HEAD >nul 2>&1 && git rev-parse HEAD >> C:\Local\REMix\remix_nz\process\225a\\metadata
    12       38 CALL           3      26  .printf "\n" >> C:\Local\REMix\remix_nz\process\225a\\metadata
    13       39 CALL           3      27  .printf "framework_branch " >> C:\Local\REMix\remix_nz\process\225a\\metadata
    14       41 CALL           3      29  .cd C:\Local\REMix\framework\remix\framework\model\source && git rev-parse --abbrev-ref HEAD >nul 2>&1 && git rev-parse --abbrev-ref HEAD | sed "s/^/\"/;s/$/\"/" >> C:\Local\REMix\remix_nz\process\225a\\metadata
    15       43 CALL           3      33  .printf "\n" >> C:\Local\REMix\remix_nz\process\225a\\metadata
    16       45 CALL           3      35  .printf "project_path " >> C:\Local\REMix\remix_nz\process\225a\\metadata
    17       47 CALL           3      37  .cd C:\Local\REMix\remix_nz\output\will\04-h2-solar_2020-2035-2050\data\./ && cd| sed "s/^/\"/;s/$/\"/" >> C:\Local\REMix\remix_nz\process\225a\\metadata
    18       49 CALL           3      41  .printf "\n" >> C:\Local\REMix\remix_nz\process\225a\\metadata
    19       50 CALL           3      42  .printf "project_hash " >> C:\Local\REMix\remix_nz\process\225a\\metadata
    20       52 CALL           3      44  .cd C:\Local\REMix\remix_nz\output\will\04-h2-solar_2020-2035-2050\data\./ && git rev-parse HEAD >nul 2>&1 && git rev-parse HEAD | sed "s/^/\"/;s/$/\"/" >> C:\Local\REMix\remix_nz\process\225a\\metadata
    21       54 CALL           3      48  .printf "\n" >> C:\Local\REMix\remix_nz\process\225a\\metadata
    22       55 CALL           3      49  .printf "project_branch " >> C:\Local\REMix\remix_nz\process\225a\\metadata
    23       57 CALL           3      51  .cd C:\Local\REMix\remix_nz\output\will\04-h2-solar_2020-2035-2050\data\./ && git rev-parse --abbrev-ref HEAD >nul 2>&1 && git rev-parse --abbrev-ref HEAD | sed "s/^/\"/;s/$/\"/" >> C:\Local\REMix\remix_nz\process\225a\\metadata
    24       59 CALL           3      55  .printf "\n" >> C:\Local\REMix\remix_nz\process\225a\\metadata
    25       62 INCLUDE        3      58  ..C:\Local\REMix\remix_nz\process\225a\metadata
    26       79 INCLUDE        1      17  .C:\Local\REMix\framework\remix\framework\model\source\data_inheritance.gms
    27      123 INCLUDE        1      26  .C:\Local\REMix\framework\remix\framework\model\source\remix.gms
    28      145 INCLUDE       27      22  ..C:\Local\REMix\framework\remix\framework\model\source\sets.gms
    29      165 IF EXIST      28      20  ..C:\Local\REMix\remix_nz\process\225a\map_aggregatetimemodel.csv
    30      216 IF EXIST      28      97  ..C:\Local\REMix\remix_nz\process\225a\set_nodesmodel.csv
    31      216 INCLUDE       28      97  ...C:\Local\REMix\remix_nz\process\225a\set_nodesmodel.csv
    32      229 IF EXIST      28      99  ..C:\Local\REMix\remix_nz\process\225a\set_nodesmodel.csv
    33      236 IF EXIST      28     106  ..C:\Local\REMix\remix_nz\process\225a\set_nodesdata.csv
    34      236 INCLUDE       28     106  ...C:\Local\REMix\remix_nz\process\225a\set_nodesdata.csv
    35      249 IF EXIST      28     108  ..C:\Local\REMix\remix_nz\process\225a\set_nodesdata.csv
    36      255 IF EXIST      28     114  ..C:\Local\REMix\remix_nz\process\225a\set_nodesmodelsel.csv
    37      257 IF EXIST      28     116  ..C:\Local\REMix\remix_nz\process\225a\set_nodesmodelsel.csv
    38      259 IF EXIST      28     118  ..C:\Local\REMix\remix_nz\process\225a\set_nodesmodelsel.csv
    39      272 IF EXIST      28     131  ..C:\Local\REMix\remix_nz\process\225a\map_aggregatenodesmodel.csv
    40      272 INCLUDE       28     131  ...C:\Local\REMix\remix_nz\process\225a\map_aggregatenodesmodel.csv
    41      285 IF EXIST      28     133  ..C:\Local\REMix\remix_nz\process\225a\map_aggregatenodesmodel.csv
    42      288 IF EXIST      28     136  ..C:\Local\REMix\remix_nz\process\225a\map_aggregatenodesmodel.csv
    43      311 IF EXIST      28     159  ..C:\Local\REMix\remix_nz\process\225a\set_years.csv
    44      311 INCLUDE       28     159  ...C:\Local\REMix\remix_nz\process\225a\set_years.csv
    45      346 IF EXIST      28     161  ..C:\Local\REMix\remix_nz\process\225a\set_years.csv
    46      355 IF EXIST      28     170  ..C:\Local\REMix\remix_nz\process\225a\set_years.csv
    47      355 INCLUDE       28     170  ...C:\Local\REMix\remix_nz\process\225a\set_years.csv
    48      390 IF EXIST      28     172  ..C:\Local\REMix\remix_nz\process\225a\set_years.csv
    49      396 IF EXIST      28     178  ..C:\Local\REMix\remix_nz\process\225a\set_yearssel.csv
    50      396 INCLUDE       28     178  ...C:\Local\REMix\remix_nz\process\225a\set_yearssel.csv
    51      401 IF EXIST      28     180  ..C:\Local\REMix\remix_nz\process\225a\set_yearssel.csv
    52      419 IF EXIST      28     198  ..C:\Local\REMix\remix_nz\process\225a\set_activities.csv
    53      419 INCLUDE       28     198  ...C:\Local\REMix\remix_nz\process\225a\set_activities.csv
    54      428 IF EXIST      28     200  ..C:\Local\REMix\remix_nz\process\225a\set_activities.csv
    55      436 IF EXIST      28     208  ..C:\Local\REMix\remix_nz\process\225a\set_gridsegments.csv
    56      438 IF EXIST      28     210  ..C:\Local\REMix\remix_nz\process\225a\set_gridsegments.csv
    57      446 IF EXIST      28     218  ..C:\Local\REMix\remix_nz\process\225a\set_linksdata.csv
    58      446 INCLUDE       28     218  ...C:\Local\REMix\remix_nz\process\225a\set_linksdata.csv
    59      460 IF EXIST      28     220  ..C:\Local\REMix\remix_nz\process\225a\set_linksdata.csv
    60      478 IF EXIST      28     238  ..C:\Local\REMix\remix_nz\process\225a\set_link_types.csv
    61      478 INCLUDE       28     238  ...C:\Local\REMix\remix_nz\process\225a\set_link_types.csv
    62      482 IF EXIST      28     240  ..C:\Local\REMix\remix_nz\process\225a\set_link_types.csv
    63      491 IF EXIST      28     249  ..C:\Local\REMix\remix_nz\process\225a\set_commodities.csv
    64      491 INCLUDE       28     249  ...C:\Local\REMix\remix_nz\process\225a\set_commodities.csv
    65      500 IF EXIST      28     251  ..C:\Local\REMix\remix_nz\process\225a\set_commodities.csv
    66      509 IF EXIST      28     260  ..C:\Local\REMix\remix_nz\process\225a\set_indicators.csv
    67      509 INCLUDE       28     260  ...C:\Local\REMix\remix_nz\process\225a\set_indicators.csv
    68      518 IF EXIST      28     262  ..C:\Local\REMix\remix_nz\process\225a\set_indicators.csv
    69      527 IF EXIST      28     271  ..C:\Local\REMix\remix_nz\process\225a\set_converter_techs.csv
    70      527 INCLUDE       28     271  ...C:\Local\REMix\remix_nz\process\225a\set_converter_techs.csv
    71      548 IF EXIST      28     274  ..C:\Local\REMix\remix_nz\process\225a\set_storage_techs.csv
    72      548 INCLUDE       28     274  ...C:\Local\REMix\remix_nz\process\225a\set_storage_techs.csv
    73      554 IF EXIST      28     277  ..C:\Local\REMix\remix_nz\process\225a\set_transfer_techs.csv
    74      554 INCLUDE       28     277  ...C:\Local\REMix\remix_nz\process\225a\set_transfer_techs.csv
    75      558 IF EXIST      28     280  ..C:\Local\REMix\remix_nz\process\225a\set_sourcesink_techs.csv
    76      558 INCLUDE       28     280  ...C:\Local\REMix\remix_nz\process\225a\set_sourcesink_techs.csv
    77      569 IF EXIST      28     285  ..C:\Local\REMix\remix_nz\process\225a\set_converter_techs.csv
    78      569 INCLUDE       28     285  ...C:\Local\REMix\remix_nz\process\225a\set_converter_techs.csv
    79      588 IF EXIST      28     286  ..C:\Local\REMix\remix_nz\process\225a\set_converter_techs.csv
    80      592 IF EXIST      28     290  ..C:\Local\REMix\remix_nz\process\225a\set_storage_techs.csv
    81      592 INCLUDE       28     290  ...C:\Local\REMix\remix_nz\process\225a\set_storage_techs.csv
    82      596 IF EXIST      28     291  ..C:\Local\REMix\remix_nz\process\225a\set_storage_techs.csv
    83      601 IF EXIST      28     296  ..C:\Local\REMix\remix_nz\process\225a\set_transfer_techs.csv
    84      601 INCLUDE       28     296  ...C:\Local\REMix\remix_nz\process\225a\set_transfer_techs.csv
    85      603 IF EXIST      28     297  ..C:\Local\REMix\remix_nz\process\225a\set_transfer_techs.csv
    86      607 IF EXIST      28     301  ..C:\Local\REMix\remix_nz\process\225a\set_sourcesink_techs.csv
    87      607 INCLUDE       28     301  ...C:\Local\REMix\remix_nz\process\225a\set_sourcesink_techs.csv
    88      614 IF EXIST      28     302  ..C:\Local\REMix\remix_nz\process\225a\set_sourcesink_techs.csv
    89      624 IF EXIST      28     312  ..C:\Local\REMix\remix_nz\process\225a\set_degradation_states.csv
    90      626 IF EXIST      28     314  ..C:\Local\REMix\remix_nz\process\225a\set_degradation_states.csv
    91      635 IF EXIST      28     323  ..C:\Local\REMix\remix_nz\process\225a\set_soc.csv
    92      637 IF EXIST      28     325  ..C:\Local\REMix\remix_nz\process\225a\set_soc.csv
    93      653 IF EXIST      28     341  ..C:\Local\REMix\remix_nz\process\225a\transfer_linkstartend.csv
    94      653 INCLUDE       28     341  ...C:\Local\REMix\remix_nz\process\225a\transfer_linkstartend.csv
    95      680 IF EXIST      28     343  ..C:\Local\REMix\remix_nz\process\225a\transfer_linkstartend.csv
    96      694 BATINCLUDE    28     357  ...C:\Local\REMix\framework\remix\framework\model\source\battools\aggregateNodes.gms
    97      805 IF EXIST      28     466  ..C:\Local\REMix\remix_nz\process\225a\set_accnodes.csv
    98      807 IF EXIST      28     468  ..C:\Local\REMix\remix_nz\process\225a\set_accnodes.csv
    99      872 IF EXIST      28     533  ..C:\Local\REMix\remix_nz\process\225a\map_accnodes.csv
   100      874 IF EXIST      28     535  ..C:\Local\REMix\remix_nz\process\225a\map_accnodes.csv
   101      928 INCLUDE       27      23  ..C:\Local\REMix\framework\remix\framework\model\source\accounting\input.gms
   102      960 IF EXIST     101      32  ..C:\Local\REMix\remix_nz\process\225a\accounting_converterunits.csv
   103      960 INCLUDE      101      32  ...C:\Local\REMix\remix_nz\process\225a\accounting_converterunits.csv
   104     1057 IF EXIST     101      34  ..C:\Local\REMix\remix_nz\process\225a\accounting_converterunits.csv
   105     1071 IF EXIST     101      48  ..C:\Local\REMix\remix_nz\process\225a\accounting_converteractivity.csv
   106     1071 INCLUDE      101      48  ...C:\Local\REMix\remix_nz\process\225a\accounting_converteractivity.csv
   107     1098 IF EXIST     101      50  ..C:\Local\REMix\remix_nz\process\225a\accounting_converteractivity.csv
   108     1115 IF EXIST     101      67  ..C:\Local\REMix\remix_nz\process\225a\accounting_converterstartup.csv
   109     1117 IF EXIST     101      69  ..C:\Local\REMix\remix_nz\process\225a\accounting_converterstartup.csv
   110     1136 IF EXIST     101      88  ..C:\Local\REMix\remix_nz\process\225a\accounting_storageunits.csv
   111     1136 INCLUDE      101      88  ...C:\Local\REMix\remix_nz\process\225a\accounting_storageunits.csv
   112     1151 IF EXIST     101      90  ..C:\Local\REMix\remix_nz\process\225a\accounting_storageunits.csv
   113     1173 IF EXIST     101     112  ..C:\Local\REMix\remix_nz\process\225a\accounting_transferlinks.csv
   114     1173 INCLUDE      101     112  ...C:\Local\REMix\remix_nz\process\225a\accounting_transferlinks.csv
   115     1182 IF EXIST     101     114  ..C:\Local\REMix\remix_nz\process\225a\accounting_transferlinks.csv
   116     1204 IF EXIST     101     136  ..C:\Local\REMix\remix_nz\process\225a\accounting_transferperlength.csv
   117     1204 INCLUDE      101     136  ...C:\Local\REMix\remix_nz\process\225a\accounting_transferperlength.csv
   118     1219 IF EXIST     101     138  ..C:\Local\REMix\remix_nz\process\225a\accounting_transferperlength.csv
   119     1234 IF EXIST     101     153  ..C:\Local\REMix\remix_nz\process\225a\accounting_sourcesinkflow.csv
   120     1234 INCLUDE      101     153  ...C:\Local\REMix\remix_nz\process\225a\accounting_sourcesinkflow.csv
   121     1244 IF EXIST     101     155  ..C:\Local\REMix\remix_nz\process\225a\accounting_sourcesinkflow.csv
   122     1258 IF EXIST     101     169  ..C:\Local\REMix\remix_nz\process\225a\accounting_perindicator.csv
   123     1258 INCLUDE      101     169  ...C:\Local\REMix\remix_nz\process\225a\accounting_perindicator.csv
   124     1266 IF EXIST     101     171  ..C:\Local\REMix\remix_nz\process\225a\accounting_perindicator.csv
   125     1292 IF EXIST     101     197  ..C:\Local\REMix\remix_nz\process\225a\accounting_indicatorbounds.csv
   126     1292 INCLUDE      101     197  ...C:\Local\REMix\remix_nz\process\225a\accounting_indicatorbounds.csv
   127     1296 IF EXIST     101     199  ..C:\Local\REMix\remix_nz\process\225a\accounting_indicatorbounds.csv
   128     1315 IF EXIST     101     218  ..C:\Local\REMix\remix_nz\process\225a\accounting_indicatorbounds_links.csv
   129     1317 IF EXIST     101     220  ..C:\Local\REMix\remix_nz\process\225a\accounting_indicatorbounds_links.csv
   130     1323 BATINCLUDE   101     226  ...C:\Local\REMix\framework\remix\framework\model\source\battools\aggregateAccountingMean.gms
   131     1382 BATINCLUDE   101     227  ...C:\Local\REMix\framework\remix\framework\model\source\battools\aggregateAccountingMean.gms
   132     1425 BATINCLUDE   101     228  ...C:\Local\REMix\framework\remix\framework\model\source\battools\aggregateAccountingMean.gms
   133     1468 BATINCLUDE   101     229  ...C:\Local\REMix\framework\remix\framework\model\source\battools\aggregateAccountingMean.gms
   134     1527 BATINCLUDE   101     230  ...C:\Local\REMix\framework\remix\framework\model\source\battools\aggregateAccountingMean.gms
   135     1586 BATINCLUDE   101     231  ...C:\Local\REMix\framework\remix\framework\model\source\battools\aggregateAccountingMean.gms
   136     1645 BATINCLUDE   101     232  ...C:\Local\REMix\framework\remix\framework\model\source\battools\aggregateAccountingMean.gms
   137     2054 INCLUDE       27      24  ..C:\Local\REMix\framework\remix\framework\model\source\accounting\annuities.gms
   138     2128 INCLUDE       27      26  ..C:\Local\REMix\framework\remix\framework\model\source\methods\mga_pre.gms
   139     2134 INCLUDE       27      27  ..C:\Local\REMix\framework\remix\framework\model\source\methods\pareto_pre.gms
   140     2140 INCLUDE       27      28  ..C:\Local\REMix\framework\remix\framework\model\source\postcalc\declaration.gms
   141     2157 IF DEXIST    140      17  ..C:\Local\REMix\remix_nz\output\will\04-h2-solar_2020-2035-2050\result\
   142     2359 INCLUDE       27      29  ..C:\Local\REMix\framework\remix\framework\model\source\loadgdx.gms
   143     2368 INCLUDE       27      31  ..C:\Local\REMix\framework\remix\framework\model\source\core\converter.gms
   144     2471 IF EXIST     143     103  ..C:\Local\REMix\remix_nz\process\225a\converter_capacityparam.csv
   145     2471 INCLUDE      143     103  ...C:\Local\REMix\remix_nz\process\225a\converter_capacityparam.csv
   146     3658 IF EXIST     143     105  ..C:\Local\REMix\remix_nz\process\225a\converter_capacityparam.csv
   147     3666 BATINCLUDE   143     113  ...C:\Local\REMix\framework\remix\framework\model\source\battools\aggregateNodes.gms
   148     3677 BATINCLUDE   143     114  ...C:\Local\REMix\framework\remix\framework\model\source\battools\aggregateNodes.gms
   149     3710 IF EXIST     143     137  ..C:\Local\REMix\remix_nz\process\225a\converter_techparam.csv
   150     3710 INCLUDE      143     137  ...C:\Local\REMix\remix_nz\process\225a\converter_techparam.csv
   151     3760 IF EXIST     143     139  ..C:\Local\REMix\remix_nz\process\225a\converter_techparam.csv
   152     3782 IF EXIST     143     161  ..C:\Local\REMix\remix_nz\process\225a\converter_activityprofile.csv
   153     3782 INCLUDE      143     161  ...C:\Local\REMix\remix_nz\process\225a\converter_activityprofile.csv
   154     4267 IF EXIST     143     162  ..C:\Local\REMix\remix_nz\process\225a\converter_activityprofile.csv
   155     4269 IF EXIST     143     164  ..C:\Local\REMix\remix_nz\process\225a\converter_activityprofile.csv
   156     4289 IF EXIST     143     184  ..C:\Local\REMix\remix_nz\process\225a\converter_coefficient.csv
   157     4289 INCLUDE      143     184  ...C:\Local\REMix\remix_nz\process\225a\converter_coefficient.csv
   158     4436 IF EXIST     143     185  ..C:\Local\REMix\remix_nz\process\225a\converter_coefficient.csv
   159     4437 IF EXIST     143     186  ..C:\Local\REMix\remix_nz\process\225a\converter_coefficient.csv
   160     4439 IF EXIST     143     188  ..C:\Local\REMix\remix_nz\process\225a\converter_coefficient.csv
   161     4451 IF EXIST     143     200  ..C:\Local\REMix\remix_nz\process\225a\converter_coefficientprofile.csv
   162     4452 IF EXIST     143     201  ..C:\Local\REMix\remix_nz\process\225a\converter_coefficientprofile.csv
   163     4454 IF EXIST     143     203  ..C:\Local\REMix\remix_nz\process\225a\converter_coefficientprofile.csv
   164     5391 INCLUDE       27      32  ..C:\Local\REMix\framework\remix\framework\model\source\core\storage.gms
   165     5482 IF EXIST     164      91  ..C:\Local\REMix\remix_nz\process\225a\storage_reservoirparam.csv
   166     5482 INCLUDE      164      91  ...C:\Local\REMix\remix_nz\process\225a\storage_reservoirparam.csv
   167     5585 IF EXIST     164      93  ..C:\Local\REMix\remix_nz\process\225a\storage_reservoirparam.csv
   168     5589 BATINCLUDE   164      97  ...C:\Local\REMix\framework\remix\framework\model\source\battools\aggregateNodes.gms
   169     5600 BATINCLUDE   164      98  ...C:\Local\REMix\framework\remix\framework\model\source\battools\aggregateNodes.gms
   170     5636 IF EXIST     164     124  ..C:\Local\REMix\remix_nz\process\225a\storage_techparam.csv
   171     5636 INCLUDE      164     124  ...C:\Local\REMix\remix_nz\process\225a\storage_techparam.csv
   172     5645 IF EXIST     164     126  ..C:\Local\REMix\remix_nz\process\225a\storage_techparam.csv
   173     5666 IF EXIST     164     147  ..C:\Local\REMix\remix_nz\process\225a\storage_sizeparam.csv
   174     5666 INCLUDE      164     147  ...C:\Local\REMix\remix_nz\process\225a\storage_sizeparam.csv
   175     5675 IF EXIST     164     149  ..C:\Local\REMix\remix_nz\process\225a\storage_sizeparam.csv
   176     5692 IF EXIST     164     166  ..C:\Local\REMix\remix_nz\process\225a\storage_socparam.csv
   177     5694 IF EXIST     164     168  ..C:\Local\REMix\remix_nz\process\225a\storage_socparam.csv
   178     5713 IF EXIST     164     187  ..C:\Local\REMix\remix_nz\process\225a\storage_degradationparam.csv
   179     5715 IF EXIST     164     189  ..C:\Local\REMix\remix_nz\process\225a\storage_degradationparam.csv
   180     5744 IF EXIST     164     218  ..C:\Local\REMix\remix_nz\process\225a\storage_levelprofile.csv
   181     5745 IF EXIST     164     219  ..C:\Local\REMix\remix_nz\process\225a\storage_levelprofile.csv
   182     5747 IF EXIST     164     221  ..C:\Local\REMix\remix_nz\process\225a\storage_levelprofile.csv
   183     6568 INCLUDE       27      33  ..C:\Local\REMix\framework\remix\framework\model\source\core\transfer.gms
   184     6635 IF EXIST     183      73  ..C:\Local\REMix\remix_nz\process\225a\transfer_linksparam.csv
   185     6635 INCLUDE      183      73  ...C:\Local\REMix\remix_nz\process\225a\transfer_linksparam.csv
   186     6674 IF EXIST     183      75  ..C:\Local\REMix\remix_nz\process\225a\transfer_linksparam.csv
   187     6690 IF EXIST     183      91  ..C:\Local\REMix\remix_nz\process\225a\transfer_flowprofile.csv
   188     6692 IF EXIST     183      93  ..C:\Local\REMix\remix_nz\process\225a\transfer_flowprofile.csv
   189     6712 IF EXIST     183     113  ..C:\Local\REMix\remix_nz\process\225a\transfer_techparam.csv
   190     6712 INCLUDE      183     113  ...C:\Local\REMix\remix_nz\process\225a\transfer_techparam.csv
   191     6718 IF EXIST     183     115  ..C:\Local\REMix\remix_nz\process\225a\transfer_techparam.csv
   192     6732 IF EXIST     183     129  ..C:\Local\REMix\remix_nz\process\225a\transfer_coefficient.csv
   193     6732 INCLUDE      183     129  ...C:\Local\REMix\remix_nz\process\225a\transfer_coefficient.csv
   194     6738 IF EXIST     183     131  ..C:\Local\REMix\remix_nz\process\225a\transfer_coefficient.csv
   195     6752 IF EXIST     183     145  ..C:\Local\REMix\remix_nz\process\225a\transfer_coefperflow.csv
   196     6752 INCLUDE      183     145  ...C:\Local\REMix\remix_nz\process\225a\transfer_coefperflow.csv
   197     6758 IF EXIST     183     147  ..C:\Local\REMix\remix_nz\process\225a\transfer_coefperflow.csv
   198     6772 IF EXIST     183     161  ..C:\Local\REMix\remix_nz\process\225a\transfer_coefperlength.csv
   199     6772 INCLUDE      183     161  ...C:\Local\REMix\remix_nz\process\225a\transfer_coefperlength.csv
   200     6781 IF EXIST     183     163  ..C:\Local\REMix\remix_nz\process\225a\transfer_coefperlength.csv
   201     6795 IF EXIST     183     177  ..C:\Local\REMix\remix_nz\process\225a\transfer_reactperlength.csv
   202     6797 IF EXIST     183     179  ..C:\Local\REMix\remix_nz\process\225a\transfer_reactperlength.csv
   203     6811 IF EXIST     183     193  ..C:\Local\REMix\remix_nz\process\225a\transfer_lengthparam.csv
   204     6811 INCLUDE      183     193  ...C:\Local\REMix\remix_nz\process\225a\transfer_lengthparam.csv
   205     6838 IF EXIST     183     195  ..C:\Local\REMix\remix_nz\process\225a\transfer_lengthparam.csv
   206     6852 IF EXIST     183     209  ..C:\Local\REMix\remix_nz\process\225a\transfer_gridsegments.csv
   207     6854 IF EXIST     183     211  ..C:\Local\REMix\remix_nz\process\225a\transfer_gridsegments.csv
   208     7452 INCLUDE       27      34  ..C:\Local\REMix\framework\remix\framework\model\source\core\sourcesink.gms
   209     7490 IF EXIST     208      38  ..C:\Local\REMix\remix_nz\process\225a\sourcesink_config.csv
   210     7490 INCLUDE      208      38  ...C:\Local\REMix\remix_nz\process\225a\sourcesink_config.csv
   211     7712 IF EXIST     208      40  ..C:\Local\REMix\remix_nz\process\225a\sourcesink_config.csv
   212     7716 BATINCLUDE   208      44  ...C:\Local\REMix\framework\remix\framework\model\source\battools\aggregateNodes.gms
   213     7744 IF EXIST     208      62  ..C:\Local\REMix\remix_nz\process\225a\sourcesink_profile.csv
   214     7744 INCLUDE      208      62  ...C:\Local\REMix\remix_nz\process\225a\sourcesink_profile.csv
   215     7822 IF EXIST     208      63  ..C:\Local\REMix\remix_nz\process\225a\sourcesink_profile.csv
   216     7823 IF EXIST     208      64  ..C:\Local\REMix\remix_nz\process\225a\sourcesink_profile.csv
   217     7825 IF EXIST     208      66  ..C:\Local\REMix\remix_nz\process\225a\sourcesink_profile.csv
   218     7845 IF EXIST     208      86  ..C:\Local\REMix\remix_nz\process\225a\sourcesink_annualsum.csv
   219     7845 INCLUDE      208      86  ...C:\Local\REMix\remix_nz\process\225a\sourcesink_annualsum.csv
   220     7958 IF EXIST     208      88  ..C:\Local\REMix\remix_nz\process\225a\sourcesink_annualsum.csv
   221     7961 BATINCLUDE   208      91  ...C:\Local\REMix\framework\remix\framework\model\source\battools\aggregateNodes.gms
   222     8142 INCLUDE       27      35  ..C:\Local\REMix\framework\remix\framework\model\source\core\balance.gms
   223     8278 INCLUDE       27      37  ..C:\Local\REMix\framework\remix\framework\model\source\accounting\equations.gms
   224     8700 INCLUDE       27      38  ..C:\Local\REMix\framework\remix\framework\model\source\optiframe.gms
   225     8741 INCLUDE       27      72  ..C:\Local\REMix\framework\remix\framework\model\source\methods\checkanno.gms
   226     8752 INCLUDE       27      75  ..C:\Local\REMix\framework\remix\framework\model\source\methods\pips.gms
   227     8761 INCLUDE       27      78  ..C:\Local\REMix\framework\remix\framework\model\source\methods\solve.gms
   228     8996 INCLUDE       27      81  ..C:\Local\REMix\framework\remix\framework\model\source\methods\pareto.gms
   229     9005 INCLUDE       27      84  ..C:\Local\REMix\framework\remix\framework\model\source\methods\mga.gms
   230     9014 INCLUDE       27      87  ..C:\Local\REMix\framework\remix\framework\model\source\methods\iternodes.gms
   231     9023 INCLUDE       27      90  ..C:\Local\REMix\framework\remix\framework\model\source\postcalc\definition.gms
   232     9815 INCLUDE       27      91  ..C:\Local\REMix\framework\remix\framework\model\source\postcalc\writegdx.gms


COMPILATION TIME     =       21.875 SECONDS    122 MB  44.4.0 06604687 WEX-WEI
GAMS 44.4.0  06604687 Sep 19, 2023          WEX-WEI x86 64bit/MS Windows - 05/01/24 22:33:59 Page 3
G e n e r a l   A l g e b r a i c   M o d e l i n g   S y s t e m
Range Statistics    SOLVE remix Using MIP From line 8981


RANGE STATISTICS (ABSOLUTE NON-ZERO FINITE VALUES)

RHS       [min, max] : [ 6.000E-04, 3.000E+03] - Zero values observed as well
Bound     [min, max] : [        NA,        NA] - Zero values observed as well
Matrix    [min, max] : [ 1.000E-02, 1.000E+02]

GAMS 44.4.0  06604687 Sep 19, 2023          WEX-WEI x86 64bit/MS Windows - 05/01/24 22:33:59 Page 4
G e n e r a l   A l g e b r a i c   M o d e l i n g   S y s t e m
Model Statistics    SOLVE remix Using MIP From line 8981


LOOPS                           optiframeToCalc   of1


MODEL STATISTICS

BLOCKS OF EQUATIONS          75     SINGLE EQUATIONS    4,327,882
BLOCKS OF VARIABLES          38     SINGLE VARIABLES    4,327,919
NON ZERO ELEMENTS    12,196,109


GENERATION TIME      =       67.953 SECONDS  4,407 MB  44.4.0 06604687 WEX-WEI


EXECUTION TIME       =      143.593 SECONDS  4,407 MB  44.4.0 06604687 WEX-WEI
               L O O P S         optiframeToCalc of1

GAMS 44.4.0  06604687 Sep 19, 2023          WEX-WEI x86 64bit/MS Windows - 05/01/24 22:33:59 Page 5
G e n e r a l   A l g e b r a i c   M o d e l i n g   S y s t e m
Solution Report     SOLVE remix Using MIP From line 8981


               S O L V E      S U M M A R Y

     MODEL   remix               OBJECTIVE  accounting_objective
     TYPE    MIP                 DIRECTION  MINIMIZE
     SOLVER  GUROBI              FROM LINE  8981

**** SOLVER STATUS     1 Normal Completion
**** MODEL STATUS      1 Optimal
**** OBJECTIVE VALUE             2329.5049

 RESOURCE USAGE, LIMIT         38.250   1209600.000
 ITERATION COUNT, LIMIT         0    2147483647
*** This solver runs with a community license.
Gurobi library version 10.0.2
No GAMS/Gurobi or GAMS/Gurobi Link license detected. Requires Gurobi license from Gurobi Optimization.
Reading parameter(s) from "C:\Local\REMix\remix_nz\process\gurobi.opt"
>>  method 2
>>  iis 1
>>  barorder 1
>>  presolve -1
>>  mipgap 1e-3
>>  crossover 0
>>  threads 8
>>  barconvtol 1e-6
Finished reading from "C:\Local\REMix\remix_nz\process\gurobi.opt"
Space for names approximately 549.97 Mb
LP status(2): Model was solved to optimality (subject to tolerances).
No basis information available.


**** REPORT SUMMARY :        0     NONOPT
                             0 INFEASIBLE
                             0  UNBOUNDED
GAMS 44.4.0  06604687 Sep 19, 2023          WEX-WEI x86 64bit/MS Windows - 05/01/24 22:33:59 Page 6
G e n e r a l   A l g e b r a i c   M o d e l i n g   S y s t e m
Range Statistics    SOLVE remix Using MIP From line 8981


RANGE STATISTICS (ABSOLUTE NON-ZERO FINITE VALUES)

RHS       [min, max] : [ 2.232E-08, 3.000E+03] - Zero values observed as well
Bound     [min, max] : [ 6.000E-04, 3.770E-01] - Zero values observed as well
Matrix    [min, max] : [ 1.000E-02, 1.994E+02]

GAMS 44.4.0  06604687 Sep 19, 2023          WEX-WEI x86 64bit/MS Windows - 05/01/24 22:33:59 Page 7
G e n e r a l   A l g e b r a i c   M o d e l i n g   S y s t e m
Model Statistics    SOLVE remix Using MIP From line 8981


LOOPS                           optiframeToCalc   of2


MODEL STATISTICS

BLOCKS OF EQUATIONS          75     SINGLE EQUATIONS    7,429,073
BLOCKS OF VARIABLES          38     SINGLE VARIABLES    7,525,761
NON ZERO ELEMENTS    21,063,427


GENERATION TIME      =       82.812 SECONDS  6,302 MB  44.4.0 06604687 WEX-WEI


EXECUTION TIME       =       84.609 SECONDS  6,302 MB  44.4.0 06604687 WEX-WEI
               L O O P S         optiframeToCalc of2

GAMS 44.4.0  06604687 Sep 19, 2023          WEX-WEI x86 64bit/MS Windows - 05/01/24 22:33:59 Page 8
G e n e r a l   A l g e b r a i c   M o d e l i n g   S y s t e m
Solution Report     SOLVE remix Using MIP From line 8981


               S O L V E      S U M M A R Y

     MODEL   remix               OBJECTIVE  accounting_objective
     TYPE    MIP                 DIRECTION  MINIMIZE
     SOLVER  GUROBI              FROM LINE  8981

**** SOLVER STATUS     1 Normal Completion
**** MODEL STATUS      1 Optimal
**** OBJECTIVE VALUE             1800.4395

 RESOURCE USAGE, LIMIT        269.015   1209600.000
 ITERATION COUNT, LIMIT         0    2147483647
*** This solver runs with a community license.
Gurobi library version 10.0.2
No GAMS/Gurobi or GAMS/Gurobi Link license detected. Requires Gurobi license from Gurobi Optimization.
Reading parameter(s) from "C:\Local\REMix\remix_nz\process\gurobi.opt"
>>  method 2
>>  iis 1
>>  barorder 1
>>  presolve -1
>>  mipgap 1e-3
>>  crossover 0
>>  threads 8
>>  barconvtol 1e-6
Finished reading from "C:\Local\REMix\remix_nz\process\gurobi.opt"
Space for names approximately 957.85 Mb
LP status(2): Model was solved to optimality (subject to tolerances).
No basis information available.


**** REPORT SUMMARY :        0     NONOPT
                             0 INFEASIBLE
                             0  UNBOUNDED
GAMS 44.4.0  06604687 Sep 19, 2023          WEX-WEI x86 64bit/MS Windows - 05/01/24 22:33:59 Page 9
G e n e r a l   A l g e b r a i c   M o d e l i n g   S y s t e m
Range Statistics    SOLVE remix Using MIP From line 8981


RANGE STATISTICS (ABSOLUTE NON-ZERO FINITE VALUES)

RHS       [min, max] : [ 1.042E-08, 3.000E+03] - Zero values observed as well
Bound     [min, max] : [        NA,        NA] - Zero values observed as well
Matrix    [min, max] : [ 1.000E-02, 1.857E+02]

GAMS 44.4.0  06604687 Sep 19, 2023          WEX-WEI x86 64bit/MS Windows - 05/01/24 22:33:59 Page 10
G e n e r a l   A l g e b r a i c   M o d e l i n g   S y s t e m
Model Statistics    SOLVE remix Using MIP From line 8981


LOOPS                           optiframeToCalc   of3


MODEL STATISTICS

BLOCKS OF EQUATIONS          75     SINGLE EQUATIONS    7,061,279
BLOCKS OF VARIABLES          38     SINGLE VARIABLES    7,157,968
NON ZERO ELEMENTS    19,731,385


GENERATION TIME      =       80.797 SECONDS  7,399 MB  44.4.0 06604687 WEX-WEI


EXECUTION TIME       =       83.578 SECONDS  7,399 MB  44.4.0 06604687 WEX-WEI
               L O O P S         optiframeToCalc of3

GAMS 44.4.0  06604687 Sep 19, 2023          WEX-WEI x86 64bit/MS Windows - 05/01/24 22:33:59 Page 11
G e n e r a l   A l g e b r a i c   M o d e l i n g   S y s t e m
Solution Report     SOLVE remix Using MIP From line 8981


               S O L V E      S U M M A R Y

     MODEL   remix               OBJECTIVE  accounting_objective
     TYPE    MIP                 DIRECTION  MINIMIZE
     SOLVER  GUROBI              FROM LINE  8981

**** SOLVER STATUS     1 Normal Completion
**** MODEL STATUS      1 Optimal
**** OBJECTIVE VALUE             2978.4229

 RESOURCE USAGE, LIMIT        554.954   1209600.000
 ITERATION COUNT, LIMIT         0    2147483647
*** This solver runs with a community license.
Gurobi library version 10.0.2
No GAMS/Gurobi or GAMS/Gurobi Link license detected. Requires Gurobi license from Gurobi Optimization.
Reading parameter(s) from "C:\Local\REMix\remix_nz\process\gurobi.opt"
>>  method 2
>>  iis 1
>>  barorder 1
>>  presolve -1
>>  mipgap 1e-3
>>  crossover 0
>>  threads 8
>>  barconvtol 1e-6
Finished reading from "C:\Local\REMix\remix_nz\process\gurobi.opt"
Space for names approximately 930.79 Mb
LP status(2): Model was solved to optimality (subject to tolerances).
No basis information available.


**** REPORT SUMMARY :        0     NONOPT
                             0 INFEASIBLE
                             0  UNBOUNDED
GAMS 44.4.0  06604687 Sep 19, 2023          WEX-WEI x86 64bit/MS Windows - 05/01/24 22:33:59 Page 12
G e n e r a l   A l g e b r a i c   M o d e l i n g   S y s t e m
E x e c u t i o n


**** REPORT FILE SUMMARY

opt C:\Local\REMix\remix_nz\process\gurobi.opt


EXECUTION TIME       =      149.797 SECONDS  8,484 MB  44.4.0 06604687 WEX-WEI


USER: Medium MUD - 10 User License                   S220920|0002AO-GEN
      University of Canterbury, Civil Engineering Department    DC16319
      License for teaching and research at degree granting institutions


**** FILE SUMMARY

Input      C:\Local\REMix\framework\remix\framework\model\run_remix.gms
Output     C:\Local\REMix\remix_nz\process\run_remix.lst
