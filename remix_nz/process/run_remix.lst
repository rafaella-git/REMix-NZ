GAMS 40.4.0  d540b52e Oct 3, 2022           WEX-WEI x86 64bit/MS Windows - 03/08/24 23:09:20 Page 1
G e n e r a l   A l g e b r a i c   M o d e l i n g   S y s t e m
C o m p i l a t i o n


   1  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
   2  * SPDX-License-Identifier: BSD-3-Clause
   3   
   4  * ==== REMix version number ====
   6   
   7  * ==== global settings ====
  12   
  14   
  15  * ==== write metadata and inherit dataset ====
INCLUDE    C:\Local\REMix\framework\remix\framework\model\source\metadata.gms
  24   
  28   
  44   
  60   
  61  set metadata(*) /
INCLUDE    c:\Local\REMix\remix_nz\process\225a\metadata
  63  remix_version "0.9.7"
  64  gams_version "40.4.0"
  65  timestamp "03/08/24 23:09:20"
  66  framework_path "C:\Local\REMix\framework\remix\framework\model\source"
  67   
  68  framework_hash eb22d0cca0bbdef4957ab6cf6eea8189b09326a0
  69   
  70  framework_branch "main"
  71   
  72  project_path "C:\Local\REMix\remix_nz\output\will\02-battery-overnight_2020-2035-2050\data"
  73   
  74  project_hash "eb22d0cca0bbdef4957ab6cf6eea8189b09326a0"
  75   
  76  project_branch "main"
  77   
  78  /;
INCLUDE    C:\Local\REMix\framework\remix\framework\model\source\data_inheritance.gms
  80  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
  81  * SPDX-License-Identifier: BSD-3-Clause
  82   
  85   
  90   
  91  * pandas based data inheritance reading in the dat files, merging them and writing csv files in the scrdir
 113  ;
 114   
 118   
 119  * ==== run remix ====
INCLUDE    C:\Local\REMix\framework\remix\framework\model\source\remix.gms
 124  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
 125  * SPDX-License-Identifier: BSD-3-Clause
 126   
 127  * ==== global settings ====
 135   
 138   
 140   
 143   
 144  * ==== include modules ====
INCLUDE    C:\Local\REMix\framework\remix\framework\model\source\sets.gms
 146  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
 147  * SPDX-License-Identifier: BSD-3-Clause
 148   
 149  * // # sets
 150  * // Sets are the indices of variables and parameters.
 151   
 152  * // ## Reference
 153  * // {special_table_sets}
 154   
 155  * // ## Input Files
 156  * // {special_table_set_input_files}
 967   
 968  map_accNodes(accNodesModel,accNodesModel_aggregation)
 969      $sum((nodesData, nodesModelToCalc)
 970              $( sameas(nodesModelToCalc,accNodesModel)
 971                  and map_accNodesLoad(nodesData,accNodesModel_aggregation)
 972                  and aggregateNodesModel(nodesData,nodesModelToCalc)), 1) = yes;
 973   
 974  map_accNodes(accNodesModel,"global")$sum(nodesModelToCalc$sameas(accNodesModel,nodesModelToCalc), 1) = yes;
 975  map_accNodes(accNodesModel,"global")$sum(accNodes$sameas(accNodesModel,accNodes), 1) = yes;
 976  map_accNodes(accNodesModel,accNodesModel) = yes;
 977  map_accLinks(accLinksModel,"global")$sum(linksModelToCalc$sameas(accLinksModel,linksModelToCalc), 1) = yes;
 978  map_accLinks(accLinksModel,accLinksModel) = yes;
 979  map_accYears(accYears,"horizon")$sum(yearsToCalc$sameas(accYears,yearsToCalc), 1)  = yes;
 980  map_accYears(accYears,accYears) = yes;
 981   
 982  map_accNodesToCalc(accNodesModel,nodesModelToCalc)
 983      $sum((nodesData)
 984              $( map_accNodesLoad(nodesData,accNodesModel)
 985                  and aggregateNodesModel(nodesData,nodesModelToCalc)), 1) = yes;
 986   
 987  map_accNodesToCalc("global",nodesModelToCalc) = yes;
 988  map_accNodesToCalc(accNodesModel,nodesModelToCalc)$sameas(accNodesModel,nodesModelToCalc) = yes;
 989  map_accLinksToCalc("global",linksModelToCalc) = yes;
 990  map_accLinksToCalc(accLinksModel,linksModelToCalc)$sameas(accLinksModel,linksModelToCalc) = yes;
 991  map_accYearsToCalc("horizon",yearsToCalc) = yes;
 992  map_accYearsToCalc(accYears,yearsToCalc)$sameas(accYears,yearsToCalc) = yes;
 993   
 994  * Duplicate sets for postcalc reporting without horizon and accYears
 995  map_accNodesPostCalc(accNodesModel,nodesModelToCalc) = map_accNodesToCalc(accNodesModel,nodesModelToCalc);
 996  map_accLinksPostCalc(accLinksModel,linksModelToCalc) = map_accLinksToCalc(accLinksModel,linksModelToCalc);
 997  map_accYearsPostCalc(accYears,yearsToCalc)$sameas(accYears,yearsToCalc) = yes;
 998  map_accYearsPostCalc(accYears,years)$(sameas(accYears,years) and years.val < sum(yearsToCalc$(ord(yearsToCalc) = 1), yearsToCalc.val)) = yes;
 999   
1000  set map_nodesAccounting(accNodesModel_aggregation,accNodesModel) "Map accounting nodes describes the mapping between model accounting nodes and data nodes." ;
1001  option map_nodesAccounting < map_accNodes;
1002   
1003  * ==== Generic sets  ====
1004  * These set names are repeated across different profile parameters.
1005  * they are not strictly related to each other and are not input data but
1006  * are needed for validation.
1007  ** // PROFILE: profileTypes | Profile Types | OEO_00140056:flow potential | set_profiletypes.csv
1008   
1009  ** // SET: scenario | Scenario | OEO_00000364:scenario | set_scenarios.csv
1010  * "Scenario indexes help to differentiate scenarios." /
1011   
1012  ** // SET: capType | Capacity Types | OEO_00030019:balance process attribute | set_captypes.csv
1013  * "Capacity types differentiate investment decisions." /
1014   
1015  ** // SET: balanceType | Balance Types | OEO_00030019:balance process attribute | set_balancetypes.csv
1016  * "Balance types differentiate types of balances." /
INCLUDE    C:\Local\REMix\framework\remix\framework\model\source\accounting\input.gms
1018  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
1019  * SPDX-License-Identifier: BSD-3-Clause
1020   
1021  * // # accounting_input
1022  * // The parameters in this file describe the accounting of indicators in the model.
1023   
1024  * // ## Variables
1025  * // {special_table_input_variables}
1446   
1447  * Aggregate accounting parameters
BATINCLUDE C:\Local\REMix\framework\remix\framework\model\source\battools\aggregateAccountingMean.gms
1449  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
1450  * SPDX-License-Identifier: BSD-3-Clause
1451   
1453   
1455   
1456  set accounting_converterUnitsNonzero(indicator,accnodesData,converter_techs,vintage);
1457  accounting_converterUnitsNonzero(indicator,accnodesData,converter_techs,vintage)
1458      $sum(pc_accounting_converterUnits$accounting_converterUnitsIn(indicator,accnodesData,converter_techs,vintage,pc_accounting_converterUnits), 1)
1459      = yes;
1460   
1462  set accounting_converterUnitsChk(indicator,nodesModel,converter_techs,vintage,pc_accounting_converterUnits);
1463  accounting_converterUnitsChk(indicator,nodesModel,converter_techs,vintage,"useAnnuity")
1464      $sum((nodesData,accnodesData)
1465              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1466                  and accounting_converterUnitsNonzero(indicator,accnodesData,converter_techs,vintage)), 1)
1467      = smax((nodesData,accnodesData)
1468              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1469                  and accounting_converterUnitsNonzero(indicator,accnodesData,converter_techs,vintage)),
1470          accounting_converterUnitsIn(indicator,accnodesData,converter_techs,vintage,"useAnnuity"))
1471      - smin((nodesData,accnodesData)
1472              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1473                  and accounting_converterUnitsNonzero(indicator,accnodesData,converter_techs,vintage)),
1474          accounting_converterUnitsIn(indicator,accnodesData,converter_techs,vintage,"useAnnuity"));
1475   
1476  abort$sum(accounting_converterUnitsChk(indicator,nodesModel,converter_techs,vintage,pc_accounting_converterUnits), 1) "Cannot aggregate technologies with different useAnnuity values."
1478   
1479  parameter accounting_converterUnitsAgg(indicator,nodesModel,converter_techs,vintage,pc_accounting_converterUnits);
1480  accounting_converterUnitsAgg(indicator,nodesModel,converter_techs,vintage,pc_accounting_converterUnits)
1481      $sum((nodesData,accnodesData)
1482              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1483                  and accounting_converterUnitsNonzero(indicator,accnodesData,converter_techs,vintage)), 1)
1484      = sum((nodesData,accnodesData)
1485              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1486                  and accounting_converterUnitsNonzero(indicator,accnodesData,converter_techs,vintage)),
1487          accounting_converterUnitsIn(indicator,accnodesData,converter_techs,vintage,pc_accounting_converterUnits))
1488      / sum((nodesData,accnodesData)
1489              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1490                  and accounting_converterUnitsNonzero(indicator,accnodesData,converter_techs,vintage)),
1491          1);
1492   
1493  parameter accounting_converterUnits(indicator,nodesModel,converter_techs,vintage,pc_accounting_converterUnits);
1494  loop(accnodes,
1495  accounting_converterUnits(indicator,nodesModel,converter_techs,vintage,pc_accounting_converterUnits)
1496      $sum(accnodesData$(map_accnodesToCalc(accnodes,nodesModel) and sameas(accnodes,accnodesData)
1497                              and accounting_converterUnitsIn(indicator,accnodesData,converter_techs,vintage,pc_accounting_converterUnits)), 1)
1498      = sum(accnodesData$(map_accnodesToCalc(accnodes,nodesModel) and sameas(accnodes,accnodesData)),
1499              accounting_converterUnitsIn(indicator,accnodesData,converter_techs,vintage,pc_accounting_converterUnits));
1500  );
1501   
1502  accounting_converterUnits(indicator,nodesModel,converter_techs,vintage,pc_accounting_converterUnits)
1503      $accounting_converterUnitsAgg(indicator,nodesModel,converter_techs,vintage,pc_accounting_converterUnits)
1504      = accounting_converterUnitsAgg(indicator,nodesModel,converter_techs,vintage,pc_accounting_converterUnits);
1505   
1506  * option kill %paramName%Nonzero %paramName%Chk %paramName%Agg
BATINCLUDE C:\Local\REMix\framework\remix\framework\model\source\battools\aggregateAccountingMean.gms
1508  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
1509  * SPDX-License-Identifier: BSD-3-Clause
1510   
1512   
1514   
1515  set accounting_converterActivityNonzero(indicator,accnodesData,converter_techs,vintage,activity);
1516  accounting_converterActivityNonzero(indicator,accnodesData,converter_techs,vintage,activity)
1517      $sum(pc_accounting_converterActivity$accounting_converterActivityIn(indicator,accnodesData,converter_techs,vintage,activity,pc_accounting_converterActivity), 1)
1518      = yes;
1519   
1521   
1522  parameter accounting_converterActivityAgg(indicator,nodesModel,converter_techs,vintage,activity,pc_accounting_converterActivity);
1523  accounting_converterActivityAgg(indicator,nodesModel,converter_techs,vintage,activity,pc_accounting_converterActivity)
1524      $sum((nodesData,accnodesData)
1525              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1526                  and accounting_converterActivityNonzero(indicator,accnodesData,converter_techs,vintage,activity)), 1)
1527      = sum((nodesData,accnodesData)
1528              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1529                  and accounting_converterActivityNonzero(indicator,accnodesData,converter_techs,vintage,activity)),
1530          accounting_converterActivityIn(indicator,accnodesData,converter_techs,vintage,activity,pc_accounting_converterActivity))
1531      / sum((nodesData,accnodesData)
1532              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1533                  and accounting_converterActivityNonzero(indicator,accnodesData,converter_techs,vintage,activity)),
1534          1);
1535   
1536  parameter accounting_converterActivity(indicator,nodesModel,converter_techs,vintage,activity,pc_accounting_converterActivity);
1537  loop(accnodes,
1538  accounting_converterActivity(indicator,nodesModel,converter_techs,vintage,activity,pc_accounting_converterActivity)
1539      $sum(accnodesData$(map_accnodesToCalc(accnodes,nodesModel) and sameas(accnodes,accnodesData)
1540                              and accounting_converterActivityIn(indicator,accnodesData,converter_techs,vintage,activity,pc_accounting_converterActivity)), 1)
1541      = sum(accnodesData$(map_accnodesToCalc(accnodes,nodesModel) and sameas(accnodes,accnodesData)),
1542              accounting_converterActivityIn(indicator,accnodesData,converter_techs,vintage,activity,pc_accounting_converterActivity));
1543  );
1544   
1545  accounting_converterActivity(indicator,nodesModel,converter_techs,vintage,activity,pc_accounting_converterActivity)
1546      $accounting_converterActivityAgg(indicator,nodesModel,converter_techs,vintage,activity,pc_accounting_converterActivity)
1547      = accounting_converterActivityAgg(indicator,nodesModel,converter_techs,vintage,activity,pc_accounting_converterActivity);
1548   
1549  * option kill %paramName%Nonzero %paramName%Chk %paramName%Agg
BATINCLUDE C:\Local\REMix\framework\remix\framework\model\source\battools\aggregateAccountingMean.gms
1551  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
1552  * SPDX-License-Identifier: BSD-3-Clause
1553   
1555   
1557   
1558  set accounting_converterStartupNonzero(indicator,accnodesData,converter_techs,vintage);
1559  accounting_converterStartupNonzero(indicator,accnodesData,converter_techs,vintage)
1560      $sum(pc_accounting_converterStartup$accounting_converterStartupIn(indicator,accnodesData,converter_techs,vintage,pc_accounting_converterStartup), 1)
1561      = yes;
1562   
1564   
1565  parameter accounting_converterStartupAgg(indicator,nodesModel,converter_techs,vintage,pc_accounting_converterStartup);
1566  accounting_converterStartupAgg(indicator,nodesModel,converter_techs,vintage,pc_accounting_converterStartup)
1567      $sum((nodesData,accnodesData)
1568              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1569                  and accounting_converterStartupNonzero(indicator,accnodesData,converter_techs,vintage)), 1)
1570      = sum((nodesData,accnodesData)
1571              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1572                  and accounting_converterStartupNonzero(indicator,accnodesData,converter_techs,vintage)),
1573          accounting_converterStartupIn(indicator,accnodesData,converter_techs,vintage,pc_accounting_converterStartup))
1574      / sum((nodesData,accnodesData)
1575              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1576                  and accounting_converterStartupNonzero(indicator,accnodesData,converter_techs,vintage)),
1577          1);
1578   
1579  parameter accounting_converterStartup(indicator,nodesModel,converter_techs,vintage,pc_accounting_converterStartup);
1580  loop(accnodes,
1581  accounting_converterStartup(indicator,nodesModel,converter_techs,vintage,pc_accounting_converterStartup)
1582      $sum(accnodesData$(map_accnodesToCalc(accnodes,nodesModel) and sameas(accnodes,accnodesData)
1583                              and accounting_converterStartupIn(indicator,accnodesData,converter_techs,vintage,pc_accounting_converterStartup)), 1)
1584      = sum(accnodesData$(map_accnodesToCalc(accnodes,nodesModel) and sameas(accnodes,accnodesData)),
1585              accounting_converterStartupIn(indicator,accnodesData,converter_techs,vintage,pc_accounting_converterStartup));
1586  );
1587   
1588  accounting_converterStartup(indicator,nodesModel,converter_techs,vintage,pc_accounting_converterStartup)
1589      $accounting_converterStartupAgg(indicator,nodesModel,converter_techs,vintage,pc_accounting_converterStartup)
1590      = accounting_converterStartupAgg(indicator,nodesModel,converter_techs,vintage,pc_accounting_converterStartup);
1591   
1592  * option kill %paramName%Nonzero %paramName%Chk %paramName%Agg
BATINCLUDE C:\Local\REMix\framework\remix\framework\model\source\battools\aggregateAccountingMean.gms
1594  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
1595  * SPDX-License-Identifier: BSD-3-Clause
1596   
1598   
1600   
1601  set accounting_storageUnitsNonzero(indicator,accnodesData,storage_techs,vintage);
1602  accounting_storageUnitsNonzero(indicator,accnodesData,storage_techs,vintage)
1603      $sum(pc_accounting_storageUnits$accounting_storageUnitsIn(indicator,accnodesData,storage_techs,vintage,pc_accounting_storageUnits), 1)
1604      = yes;
1605   
1607  set accounting_storageUnitsChk(indicator,nodesModel,storage_techs,vintage,pc_accounting_storageUnits);
1608  accounting_storageUnitsChk(indicator,nodesModel,storage_techs,vintage,"useAnnuity")
1609      $sum((nodesData,accnodesData)
1610              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1611                  and accounting_storageUnitsNonzero(indicator,accnodesData,storage_techs,vintage)), 1)
1612      = smax((nodesData,accnodesData)
1613              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1614                  and accounting_storageUnitsNonzero(indicator,accnodesData,storage_techs,vintage)),
1615          accounting_storageUnitsIn(indicator,accnodesData,storage_techs,vintage,"useAnnuity"))
1616      - smin((nodesData,accnodesData)
1617              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1618                  and accounting_storageUnitsNonzero(indicator,accnodesData,storage_techs,vintage)),
1619          accounting_storageUnitsIn(indicator,accnodesData,storage_techs,vintage,"useAnnuity"));
1620   
1621  abort$sum(accounting_storageUnitsChk(indicator,nodesModel,storage_techs,vintage,pc_accounting_storageUnits), 1) "Cannot aggregate technologies with different useAnnuity values."
1623   
1624  parameter accounting_storageUnitsAgg(indicator,nodesModel,storage_techs,vintage,pc_accounting_storageUnits);
1625  accounting_storageUnitsAgg(indicator,nodesModel,storage_techs,vintage,pc_accounting_storageUnits)
1626      $sum((nodesData,accnodesData)
1627              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1628                  and accounting_storageUnitsNonzero(indicator,accnodesData,storage_techs,vintage)), 1)
1629      = sum((nodesData,accnodesData)
1630              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1631                  and accounting_storageUnitsNonzero(indicator,accnodesData,storage_techs,vintage)),
1632          accounting_storageUnitsIn(indicator,accnodesData,storage_techs,vintage,pc_accounting_storageUnits))
1633      / sum((nodesData,accnodesData)
1634              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1635                  and accounting_storageUnitsNonzero(indicator,accnodesData,storage_techs,vintage)),
1636          1);
1637   
1638  parameter accounting_storageUnits(indicator,nodesModel,storage_techs,vintage,pc_accounting_storageUnits);
1639  loop(accnodes,
1640  accounting_storageUnits(indicator,nodesModel,storage_techs,vintage,pc_accounting_storageUnits)
1641      $sum(accnodesData$(map_accnodesToCalc(accnodes,nodesModel) and sameas(accnodes,accnodesData)
1642                              and accounting_storageUnitsIn(indicator,accnodesData,storage_techs,vintage,pc_accounting_storageUnits)), 1)
1643      = sum(accnodesData$(map_accnodesToCalc(accnodes,nodesModel) and sameas(accnodes,accnodesData)),
1644              accounting_storageUnitsIn(indicator,accnodesData,storage_techs,vintage,pc_accounting_storageUnits));
1645  );
1646   
1647  accounting_storageUnits(indicator,nodesModel,storage_techs,vintage,pc_accounting_storageUnits)
1648      $accounting_storageUnitsAgg(indicator,nodesModel,storage_techs,vintage,pc_accounting_storageUnits)
1649      = accounting_storageUnitsAgg(indicator,nodesModel,storage_techs,vintage,pc_accounting_storageUnits);
1650   
1651  * option kill %paramName%Nonzero %paramName%Chk %paramName%Agg
BATINCLUDE C:\Local\REMix\framework\remix\framework\model\source\battools\aggregateAccountingMean.gms
1653  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
1654  * SPDX-License-Identifier: BSD-3-Clause
1655   
1657   
1659   
1660  set accounting_transferLinksNonzero(indicator,acclinksData,transfer_techs,vintage);
1661  accounting_transferLinksNonzero(indicator,acclinksData,transfer_techs,vintage)
1662      $sum(pc_accounting_transferLinks$accounting_transferLinksIn(indicator,acclinksData,transfer_techs,vintage,pc_accounting_transferLinks), 1)
1663      = yes;
1664   
1666  set accounting_transferLinksChk(indicator,linksModel,transfer_techs,vintage,pc_accounting_transferLinks);
1667  accounting_transferLinksChk(indicator,linksModel,transfer_techs,vintage,"useAnnuity")
1668      $sum((linksData,acclinksData)
1669              $(aggregatelinksModel(linksData,linksModel) and sameas(linksData,acclinksData)
1670                  and accounting_transferLinksNonzero(indicator,acclinksData,transfer_techs,vintage)), 1)
1671      = smax((linksData,acclinksData)
1672              $(aggregatelinksModel(linksData,linksModel) and sameas(linksData,acclinksData)
1673                  and accounting_transferLinksNonzero(indicator,acclinksData,transfer_techs,vintage)),
1674          accounting_transferLinksIn(indicator,acclinksData,transfer_techs,vintage,"useAnnuity"))
1675      - smin((linksData,acclinksData)
1676              $(aggregatelinksModel(linksData,linksModel) and sameas(linksData,acclinksData)
1677                  and accounting_transferLinksNonzero(indicator,acclinksData,transfer_techs,vintage)),
1678          accounting_transferLinksIn(indicator,acclinksData,transfer_techs,vintage,"useAnnuity"));
1679   
1680  abort$sum(accounting_transferLinksChk(indicator,linksModel,transfer_techs,vintage,pc_accounting_transferLinks), 1) "Cannot aggregate technologies with different useAnnuity values."
1682   
1683  parameter accounting_transferLinksAgg(indicator,linksModel,transfer_techs,vintage,pc_accounting_transferLinks);
1684  accounting_transferLinksAgg(indicator,linksModel,transfer_techs,vintage,pc_accounting_transferLinks)
1685      $sum((linksData,acclinksData)
1686              $(aggregatelinksModel(linksData,linksModel) and sameas(linksData,acclinksData)
1687                  and accounting_transferLinksNonzero(indicator,acclinksData,transfer_techs,vintage)), 1)
1688      = sum((linksData,acclinksData)
1689              $(aggregatelinksModel(linksData,linksModel) and sameas(linksData,acclinksData)
1690                  and accounting_transferLinksNonzero(indicator,acclinksData,transfer_techs,vintage)),
1691          accounting_transferLinksIn(indicator,acclinksData,transfer_techs,vintage,pc_accounting_transferLinks))
1692      / sum((linksData,acclinksData)
1693              $(aggregatelinksModel(linksData,linksModel) and sameas(linksData,acclinksData)
1694                  and accounting_transferLinksNonzero(indicator,acclinksData,transfer_techs,vintage)),
1695          1);
1696   
1697  parameter accounting_transferLinks(indicator,linksModel,transfer_techs,vintage,pc_accounting_transferLinks);
1698  loop(acclinks,
1699  accounting_transferLinks(indicator,linksModel,transfer_techs,vintage,pc_accounting_transferLinks)
1700      $sum(acclinksData$(map_acclinksToCalc(acclinks,linksModel) and sameas(acclinks,acclinksData)
1701                              and accounting_transferLinksIn(indicator,acclinksData,transfer_techs,vintage,pc_accounting_transferLinks)), 1)
1702      = sum(acclinksData$(map_acclinksToCalc(acclinks,linksModel) and sameas(acclinks,acclinksData)),
1703              accounting_transferLinksIn(indicator,acclinksData,transfer_techs,vintage,pc_accounting_transferLinks));
1704  );
1705   
1706  accounting_transferLinks(indicator,linksModel,transfer_techs,vintage,pc_accounting_transferLinks)
1707      $accounting_transferLinksAgg(indicator,linksModel,transfer_techs,vintage,pc_accounting_transferLinks)
1708      = accounting_transferLinksAgg(indicator,linksModel,transfer_techs,vintage,pc_accounting_transferLinks);
1709   
1710  * option kill %paramName%Nonzero %paramName%Chk %paramName%Agg
BATINCLUDE C:\Local\REMix\framework\remix\framework\model\source\battools\aggregateAccountingMean.gms
1712  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
1713  * SPDX-License-Identifier: BSD-3-Clause
1714   
1716   
1718   
1719  set accounting_transferPerLengthNonzero(indicator,acclinksData,transfer_techs,vintage,link_types);
1720  accounting_transferPerLengthNonzero(indicator,acclinksData,transfer_techs,vintage,link_types)
1721      $sum(pc_accounting_transferPerLength$accounting_transferPerLengthIn(indicator,acclinksData,transfer_techs,vintage,link_types,pc_accounting_transferPerLength), 1)
1722      = yes;
1723   
1725  set accounting_transferPerLengthChk(indicator,linksModel,transfer_techs,vintage,link_types,pc_accounting_transferPerLength);
1726  accounting_transferPerLengthChk(indicator,linksModel,transfer_techs,vintage,link_types,"useAnnuity")
1727      $sum((linksData,acclinksData)
1728              $(aggregatelinksModel(linksData,linksModel) and sameas(linksData,acclinksData)
1729                  and accounting_transferPerLengthNonzero(indicator,acclinksData,transfer_techs,vintage,link_types)), 1)
1730      = smax((linksData,acclinksData)
1731              $(aggregatelinksModel(linksData,linksModel) and sameas(linksData,acclinksData)
1732                  and accounting_transferPerLengthNonzero(indicator,acclinksData,transfer_techs,vintage,link_types)),
1733          accounting_transferPerLengthIn(indicator,acclinksData,transfer_techs,vintage,link_types,"useAnnuity"))
1734      - smin((linksData,acclinksData)
1735              $(aggregatelinksModel(linksData,linksModel) and sameas(linksData,acclinksData)
1736                  and accounting_transferPerLengthNonzero(indicator,acclinksData,transfer_techs,vintage,link_types)),
1737          accounting_transferPerLengthIn(indicator,acclinksData,transfer_techs,vintage,link_types,"useAnnuity"));
1738   
1739  abort$sum(accounting_transferPerLengthChk(indicator,linksModel,transfer_techs,vintage,link_types,pc_accounting_transferPerLength), 1) "Cannot aggregate technologies with different useAnnuity values."
1741   
1742  parameter accounting_transferPerLengthAgg(indicator,linksModel,transfer_techs,vintage,link_types,pc_accounting_transferPerLength);
1743  accounting_transferPerLengthAgg(indicator,linksModel,transfer_techs,vintage,link_types,pc_accounting_transferPerLength)
1744      $sum((linksData,acclinksData)
1745              $(aggregatelinksModel(linksData,linksModel) and sameas(linksData,acclinksData)
1746                  and accounting_transferPerLengthNonzero(indicator,acclinksData,transfer_techs,vintage,link_types)), 1)
1747      = sum((linksData,acclinksData)
1748              $(aggregatelinksModel(linksData,linksModel) and sameas(linksData,acclinksData)
1749                  and accounting_transferPerLengthNonzero(indicator,acclinksData,transfer_techs,vintage,link_types)),
1750          accounting_transferPerLengthIn(indicator,acclinksData,transfer_techs,vintage,link_types,pc_accounting_transferPerLength))
1751      / sum((linksData,acclinksData)
1752              $(aggregatelinksModel(linksData,linksModel) and sameas(linksData,acclinksData)
1753                  and accounting_transferPerLengthNonzero(indicator,acclinksData,transfer_techs,vintage,link_types)),
1754          1);
1755   
1756  parameter accounting_transferPerLength(indicator,linksModel,transfer_techs,vintage,link_types,pc_accounting_transferPerLength);
1757  loop(acclinks,
1758  accounting_transferPerLength(indicator,linksModel,transfer_techs,vintage,link_types,pc_accounting_transferPerLength)
1759      $sum(acclinksData$(map_acclinksToCalc(acclinks,linksModel) and sameas(acclinks,acclinksData)
1760                              and accounting_transferPerLengthIn(indicator,acclinksData,transfer_techs,vintage,link_types,pc_accounting_transferPerLength)), 1)
1761      = sum(acclinksData$(map_acclinksToCalc(acclinks,linksModel) and sameas(acclinks,acclinksData)),
1762              accounting_transferPerLengthIn(indicator,acclinksData,transfer_techs,vintage,link_types,pc_accounting_transferPerLength));
1763  );
1764   
1765  accounting_transferPerLength(indicator,linksModel,transfer_techs,vintage,link_types,pc_accounting_transferPerLength)
1766      $accounting_transferPerLengthAgg(indicator,linksModel,transfer_techs,vintage,link_types,pc_accounting_transferPerLength)
1767      = accounting_transferPerLengthAgg(indicator,linksModel,transfer_techs,vintage,link_types,pc_accounting_transferPerLength);
1768   
1769  * option kill %paramName%Nonzero %paramName%Chk %paramName%Agg
BATINCLUDE C:\Local\REMix\framework\remix\framework\model\source\battools\aggregateAccountingMean.gms
1771  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
1772  * SPDX-License-Identifier: BSD-3-Clause
1773   
1775   
1777   
1778  set accounting_sourcesinkFlowNonzero(indicator,accnodesData,years,sourcesink_techs,commodity);
1779  accounting_sourcesinkFlowNonzero(indicator,accnodesData,years,sourcesink_techs,commodity)
1780      $sum(pc_accounting_sourcesinkFlow$accounting_sourcesinkFlowIn(indicator,accnodesData,years,sourcesink_techs,commodity,pc_accounting_sourcesinkFlow), 1)
1781      = yes;
1782   
1784   
1785  parameter accounting_sourcesinkFlowAgg(indicator,nodesModel,years,sourcesink_techs,commodity,pc_accounting_sourcesinkFlow);
1786  accounting_sourcesinkFlowAgg(indicator,nodesModel,years,sourcesink_techs,commodity,pc_accounting_sourcesinkFlow)
1787      $sum((nodesData,accnodesData)
1788              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1789                  and accounting_sourcesinkFlowNonzero(indicator,accnodesData,years,sourcesink_techs,commodity)), 1)
1790      = sum((nodesData,accnodesData)
1791              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1792                  and accounting_sourcesinkFlowNonzero(indicator,accnodesData,years,sourcesink_techs,commodity)),
1793          accounting_sourcesinkFlowIn(indicator,accnodesData,years,sourcesink_techs,commodity,pc_accounting_sourcesinkFlow))
1794      / sum((nodesData,accnodesData)
1795              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1796                  and accounting_sourcesinkFlowNonzero(indicator,accnodesData,years,sourcesink_techs,commodity)),
1797          1);
1798   
1799  parameter accounting_sourcesinkFlow(indicator,nodesModel,years,sourcesink_techs,commodity,pc_accounting_sourcesinkFlow);
1800  loop(accnodes,
1801  accounting_sourcesinkFlow(indicator,nodesModel,years,sourcesink_techs,commodity,pc_accounting_sourcesinkFlow)
1802      $sum(accnodesData$(map_accnodesToCalc(accnodes,nodesModel) and sameas(accnodes,accnodesData)
1803                              and accounting_sourcesinkFlowIn(indicator,accnodesData,years,sourcesink_techs,commodity,pc_accounting_sourcesinkFlow)), 1)
1804      = sum(accnodesData$(map_accnodesToCalc(accnodes,nodesModel) and sameas(accnodes,accnodesData)),
1805              accounting_sourcesinkFlowIn(indicator,accnodesData,years,sourcesink_techs,commodity,pc_accounting_sourcesinkFlow));
1806  );
1807   
1808  accounting_sourcesinkFlow(indicator,nodesModel,years,sourcesink_techs,commodity,pc_accounting_sourcesinkFlow)
1809      $accounting_sourcesinkFlowAgg(indicator,nodesModel,years,sourcesink_techs,commodity,pc_accounting_sourcesinkFlow)
1810      = accounting_sourcesinkFlowAgg(indicator,nodesModel,years,sourcesink_techs,commodity,pc_accounting_sourcesinkFlow);
1811   
1812  * option kill %paramName%Nonzero %paramName%Chk %paramName%Agg
1813   
1814  parameter accounting_indicatorBounds_links(linksModel,years,indicator,pc_accounting_indicatorBounds_links);
1815  accounting_indicatorBounds_links(linksModelToCalc,yearsToCalc,indicator,pc_accounting_indicatorBounds_links)
1816      = sum((linksData)$sameas(linksModelToCalc,linksData),
1817              accounting_indicatorBounds_linksIn(linksData,yearsToCalc,indicator,pc_accounting_indicatorBounds_links));
1818   
1819  accounting_indicatorBounds_links(linksModelToCalc,yearsToCalc,indicator,pc_accounting_indicatorBounds_links)
1820      = sum((linksData)$links_aggregate(linksModelToCalc,linksData),
1821              accounting_indicatorBounds_linksIn(linksData,yearsToCalc,indicator,pc_accounting_indicatorBounds_links));
1822   
1823  parameter accounting_indicatorBounds(accNodesModel,accYears,indicator,pc_accounting_indicatorBounds);
1824  accounting_indicatorBounds(accNodesModel,accYears,indicator,pc_accounting_indicatorBounds)
1825      = sum (accNodesData$sameas(accNodesModel,accNodesData),
1826          accounting_indicatorBoundsIn(accNodesData,accYears,indicator,pc_accounting_indicatorBounds));
1827   
1828  accounting_indicatorBounds(accNodesModel,accYears,indicator,pc_accounting_indicatorBounds)
1829      $(sum (nodesModel$sameas(accNodesModel,nodesModel), 1) > 0)
1830      = sum ((accNodesData,nodesData,nodesModel)
1831              $(aggregateNodesModel(nodesData,nodesModel) and sameas(accNodesModel,nodesModel) and sameas(accNodesData,nodesData)),
1832          accounting_indicatorBoundsIn(accNodesData,accYears,indicator,pc_accounting_indicatorBounds));
1833   
1834  set accounting_perIndicatorNonzero(indicator,indicator_a,accNodesData,accYears);
1835  accounting_perIndicatorNonzero(indicator,indicator_a,accNodesData,accYears)
1836      $sum(pc_accounting_perIndicator$accounting_perIndicatorIn(indicator,indicator_a,accNodesData,accYears,pc_accounting_perIndicator), 1)
1837      = yes;
1838   
1839  parameter accounting_perIndicatorAgg(indicator,indicator_a,nodesModel,accYears,pc_accounting_perIndicator);
1840  accounting_perIndicatorAgg(indicator,indicator_a,nodesModel,accYears,pc_accounting_perIndicator)
1841      $sum((nodesData,accnodesData)
1842              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1843                  and accounting_perIndicatorNonzero(indicator,indicator_a,accnodesData,accYears)), 1)
1844      = sum((nodesData,accnodesData)
1845              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1846                  and accounting_perIndicatorNonzero(indicator,indicator_a,accnodesData,accYears)),
1847          accounting_perIndicatorIn(indicator,indicator_a,accnodesData,accYears,pc_accounting_perIndicator))
1848      / sum((nodesData,accnodesData)
1849              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1850                  and accounting_perIndicatorNonzero(indicator,indicator_a,accnodesData,accYears)),
1851          1);
1852   
1853  parameter accounting_perIndicator(indicator,indicator_a,accNodesModel,accYears,pc_accounting_perIndicator);
1854   
1855  loop(accNodes,
1856  accounting_perIndicator(indicator,indicator_a,accNodesModel,accYears,pc_accounting_perIndicator)
1857      $(sum(accNodesData$(sameas(accNodes,accNodesData)
1858              and accounting_perIndicatorIn(indicator,indicator_a,accNodesData,"horizon",pc_accounting_perIndicator)), 1)
1859          and map_accNodes(accNodesModel,accNodes)
1860              )
1861      = sum(accNodesData$(sameas(accNodes,accNodesData)),
1862              accounting_perIndicatorIn(indicator,indicator_a,accNodesData,"horizon",pc_accounting_perIndicator));
1863   
1864  accounting_perIndicator(indicator,indicator_a,accNodesModel,accYears,pc_accounting_perIndicator)
1865      $(sum(accNodesData$(sameas(accNodes,accNodesData)
1866              and accounting_perIndicatorIn(indicator,indicator_a,accNodesData,accYears,pc_accounting_perIndicator)), 1)
1867          and map_accNodes(accNodesModel,accNodes)
1868          and not sameas(accYears, "horizon"))
1869      = sum(accNodesData$(sameas(accNodes,accNodesData)),
1870              accounting_perIndicatorIn(indicator,indicator_a,accNodesData,accYears,pc_accounting_perIndicator));
1871  );
1872   
1873  accounting_perIndicator(indicator,indicator_a,accNodesModel,accYears,pc_accounting_perIndicator)
1874      $sum(nodesModel$(accounting_perIndicatorAgg(indicator,indicator_a,nodesModel,"horizon",pc_accounting_perIndicator)
1875          and sameas(accNodesModel,nodesModel)), 1)
1876      = sum(nodesModel$sameas(accNodesModel,nodesModel),
1877          accounting_perIndicatorAgg(indicator,indicator_a,nodesModel,"horizon",pc_accounting_perIndicator));
1878   
1879  accounting_perIndicator(indicator,indicator_a,accNodesModel,accYears,pc_accounting_perIndicator)
1880      $sum(nodesModel$(accounting_perIndicatorAgg(indicator,indicator_a,nodesModel,accYears,pc_accounting_perIndicator)
1881          and sameas(accNodesModel,nodesModel) and not sameas(accYears, "horizon")), 1)
1882      = sum(nodesModel$sameas(accNodesModel,nodesModel),
1883          accounting_perIndicatorAgg(indicator,indicator_a,nodesModel,accYears,pc_accounting_perIndicator));
1884   
1885   
1886  * Make sure all required indicators end up in the model
1887  set activeIndicators(accNodesModel,accYears,indicator);
1888  activeIndicators(accNodesModel,accYears,indicator)
1889     $((accounting_indicatorBounds(accNodesModel,accYears,indicator,"obj") <> 0
1892        or accounting_indicatorBounds(accNodesModel,accYears,indicator,"useFixed") <> 0
1893        or accounting_indicatorBounds(accNodesModel,accYears,indicator,"useLower") <> 0
1894        or accounting_indicatorBounds(accNodesModel,accYears,indicator,"useUpper") <> 0 )
1895          and not accounting_indicatorBounds(accNodesModel,accYears,indicator,"isVariable"))
1896     = yes;
1897   
1898  set activeIndicators_links(linksModel,years,indicator);
1899  activeIndicators_links(linksModelToCalc,yearsToCalc,indicator)
1900     $(accounting_indicatorBounds_links(linksModelToCalc,yearsToCalc,indicator,"useFixed") <> 0
1901        or accounting_indicatorBounds_links(linksModelToCalc,yearsToCalc,indicator,"useLower") <> 0
1902        or accounting_indicatorBounds_links(linksModelToCalc,yearsToCalc,indicator,"useUpper") <> 0 )
1903     = yes;
1904   
1905  set variableIndicators(accNodesModel,accYears,indicator);
1906  variableIndicators(accNodesModel,accYears,indicator)
1907     $(accounting_indicatorBounds(accNodesModel,accYears,indicator,"obj") = 0
1908        and accounting_indicatorBounds(accNodesModel,accYears,indicator,"isVariable"))
1909     = yes;
1910   
1911  * Calculate length of years and discount rates per indicator
1912  parameter yearFactor(accNodesModel,accYears,indicator,accYears);
1913  yearFactor(accNodesModel,accYears,indicator,accYears_a)
1914      $(map_accYears(accYears_a,accYears)
1915          and sum(yearsToCalc$(sameas(yearsToCalc,accYears_a)), 1))
1916      = 1;
1917   
1918  yearFactor(accNodesModel,accYears,indicator,accYears_a)
1919      $(map_accYears(accYears_a,accYears)
1920          and sum(yearsToCalc$(sameas(yearsToCalc,accYears_a)), 1)
1921          and accounting_indicatorBounds(accNodesModel,accYears,indicator,"integral"))
1922      = sum(yearsToCalc$sameas(accYears_a,yearsToCalc), yearsLen(yearsToCalc));
1923   
1924  yearFactor(accNodesModel,accYears,indicator,accYears_a)
1925      $(map_accYears(accYears_a,accYears)
1926          and sum(yearsToCalc$(sameas(yearsToCalc,accYears_a)), 1)
1927          and accounting_indicatorBounds(accNodesModel,accYears,indicator,"integral")
1928          and accounting_indicatorBounds(accNodesModel,accYears,indicator,"endyear")
1929          and yearFactor(accNodesModel,accYears,indicator,accYears_a) = inf)
1930      = accounting_indicatorBounds(accNodesModel,accYears,indicator,"endyear");
1931   
1932  yearFactor(accNodesModel,accYears,indicator,accYears_a)
1933      $(map_accYears(accYears_a,accYears)
1934          and sum(yearsToCalc$(sameas(yearsToCalc,accYears_a)), 1)
1935          and accounting_indicatorBounds(accNodesModel,accYears,indicator,"integral")
1936          and accounting_indicatorBounds(accNodesModel,accYears,indicator,"discount"))
1937      = yearFactor(accNodesModel,accYears,indicator,accYears_a)
1938          * (1 - accounting_indicatorBounds(accNodesModel,accYears,indicator,"discount"))
1939                  ** (accYears_a.val - smin(yearsToCalc, yearsToCalc.val));
1940   
1941   
1942  * ==== calculate compound indicators for the optimization ====
1943  scalar compIndicators_pre;
1944  scalar compIndicators_post;
1945   
1946  parameter compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a);
1947  compoundIndicators(accNodesModel,accYears,indicator,accNodesModel,accYears,indicator)
1948      $activeIndicators(accNodesModel,accYears,indicator) = 1;
1949   
1950  set compoundIndicators_act(accNodesModel,accYears,indicator);
1951  option compoundIndicators_act < compoundIndicators;
1952   
1953  parameter compoundIndicatorsExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa);
1954  parameter compoundIndicatorsExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a);
1955  compoundIndicatorsExt(accNodesModel,accYears,indicator,accNodesModel,accYears,indicator,accNodesModel,accYears,indicator)
1956      $compoundIndicators_act(accNodesModel,accYears,indicator) = 1;
1957   
1958  compIndicators_pre = 0;
1959  compIndicators_post = 1;
1960   
1961  option sparseval = 1;
1962  while(compIndicators_pre < compIndicators_post,
1963      compIndicators_pre = sum((accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa)
1964          $compoundIndicatorsExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa), 1);
1965   
1966      compoundIndicatorsExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa)
1967          $(compoundIndicators_act(accNodesModel,accYears,indicator)
1968              and compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
1969              and not accounting_indicatorBounds(accNodesModel_a,accYears_a,indicator_a,"isVariable")
1970              and map_accNodes(accNodesModel_aa,accNodesModel_a)
1971              and map_accYears(accYears_aa,accYears_a))
1972          = compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
1973              * accounting_perIndicator(indicator_a,indicator_aa,accNodesModel_aa,accYears_aa,"perIndicator");
1974   
1975      option compoundIndicatorsExt_r < compoundIndicatorsExt;
1976   
1977      compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa)
1978          $(compoundIndicators_act(accNodesModel,accYears,indicator)
1979              and sum((accNodesModel_a,accYears_a,indicator_a)
1980                      $compoundIndicatorsExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a), 1) = 1)
1981          = sum((accNodesModel_a,accYears_a,indicator_a)
1982                  $(compoundIndicatorsExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a)),
1983              compoundIndicatorsExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a));
1984   
1985      compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa)
1986          $(compoundIndicators_act(accNodesModel,accYears,indicator)
1987              and sum((accNodesModel_a,accYears_a,indicator_a)
1988                      $compoundIndicatorsExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a), 1) > 1)
1989          = sum((accNodesModel_a,accYears_a,indicator_a)
1990                  $(compoundIndicatorsExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a)
1991                      and not (sameas(accNodesModel, accNodesModel_a) and sameas(accYears, accYears_a) and sameas(indicator, indicator_a))),
1992              compoundIndicatorsExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a))
1993          / sum((accNodesModel_a,accYears_a,indicator_a)
1994                  $(compoundIndicatorsExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a)
1995                      and not (sameas(accNodesModel, accNodesModel_a) and sameas(accYears, accYears_a) and sameas(indicator, indicator_a))), 1);
1996   
1997      option compoundIndicators_act < compoundIndicators;
1998      compIndicators_post = sum((accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa)
1999          $compoundIndicatorsExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa), 1);
2000  );
2001  option sparseval = 0;
2002   
2003  * map to sub-years and sub-nodes
2004  compoundIndicatorsExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_a)
2005      $(compoundIndicators_act(accNodesModel,accYears,indicator)
2006          and compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
2007          and map_accYears(accYears_aa,accYears_a)
2008          and map_accNodes(accNodesModel_aa,accNodesModel_a))
2009      = compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
2010          * yearFactor(accNodesModel,accYears,indicator,accYears_aa);
2011   
2012  * Remove all accounting regions and accounting years
2013  compoundIndicatorsExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa)
2014      $(compoundIndicatorsExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa)
2015          and not accounting_indicatorBounds(accNodesModel_aa,accYears_aa,indicator_aa,"isVariable")
2016          and sum(accNodes$(sameas(accNodes,accNodesModel_aa)), 1)
2017              or sameas("horizon",accYears_aa))
2018      = 0;
2019   
2020  * Map from extended parameter to final parameter
2021  option compoundIndicatorsExt_r < compoundIndicatorsExt;
2022  compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa)
2023      $(compoundIndicators_act(accNodesModel,accYears,indicator)
2024          and sum((accNodesModel_a,accYears_a,indicator_a)
2025                  $compoundIndicatorsExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a), 1) = 1)
2026      = sum((accNodesModel_a,accYears_a,indicator_a)
2027              $(compoundIndicatorsExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a)),
2028          compoundIndicatorsExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a));
2029   
2030  compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa)
2031      $(compoundIndicators_act(accNodesModel,accYears,indicator)
2032          and sum((accNodesModel_a,accYears_a,indicator_a)
2033                  $compoundIndicatorsExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a), 1) > 1)
2034      = sum((accNodesModel_a,accYears_a,indicator_a)
2035              $(compoundIndicatorsExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a)
2036                  and not (sameas(accNodesModel, accNodesModel_a) and sameas(accYears, accYears_a) and sameas(indicator, indicator_a))),
2037          compoundIndicatorsExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a))
2038      / sum((accNodesModel_a,accYears_a,indicator_a)
2039              $(compoundIndicatorsExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a)
2040                  and not (sameas(accNodesModel, accNodesModel_a) and sameas(accYears, accYears_a) and sameas(indicator, indicator_a))), 1);
2041   
2042  * Remove all accounting regions and accounting years
2043  compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
2044      $(compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
2045          and not accounting_indicatorBounds(accNodesModel_a,accYears_a,indicator_a,"isVariable")
2046          and (sum(accNodes$(sameas(accNodes,accNodesModel_a)), 1)
2047              or sameas("horizon",accYears_a)))
2048      = 0;
2049   
2050  * Remove all slack indicators except the ones declared in indicatorBounds
2051  compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
2052      $(compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
2053          and sum((accNodesModel_aa,accYears_aa)$accounting_indicatorBounds(accNodesModel_aa,accYears_aa,indicator_a,"isVariable"), 1)
2054          and not accounting_indicatorBounds(accNodesModel_a,accYears_a,indicator_a,"isVariable"))
2055      = 0;
2056   
2057  * ==== compound indicators for the post calculation ====
2058  parameter compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a);
2059  compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel,accYears,indicator)
2060      $(sum(nodesModelToCalc$map_accNodesToCalc(accNodesModel,nodesModelToCalc), 1)
2061          and sum(yearsToCalc$map_accYearsToCalc(accYears,yearsToCalc), 1)) = 1;
2062   
2063  set compoundIndicatorsFull_act(accNodesModel,accYears,indicator);
2064  option compoundIndicatorsFull_act < compoundIndicatorsFull;
2065   
2066  parameter compoundIndicatorsFullExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa);
2067  parameter compoundIndicatorsFullExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a);
2068  compoundIndicatorsFullExt(accNodesModel,accYears,indicator,accNodesModel,accYears,indicator,accNodesModel,accYears,indicator) = 1;
2069   
2070  compIndicators_pre = 0;
2071  compIndicators_post = 1;
2072   
2073  option sparseval = 1;
2074  while(compIndicators_pre < compIndicators_post,
2075      compIndicators_pre = sum((accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa)
2076          $compoundIndicatorsFullExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa), 1);
2077   
2078      compoundIndicatorsFullExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa)
2079          $(compoundIndicatorsFull_act(accNodesModel,accYears,indicator)
2080              and compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
2081              and not accounting_indicatorBounds(accNodesModel_a,accYears_a,indicator_a,"isVariable")
2082              and map_accNodes(accNodesModel_aa,accNodesModel_a)
2083              and map_accYears(accYears_aa,accYears_a))
2084          = compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
2085              * accounting_perIndicator(indicator_a,indicator_aa,accNodesModel_aa,accYears_aa,"perIndicator");
2086   
2087      option compoundIndicatorsFullExt_r < compoundIndicatorsFullExt;
2088   
2089      compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa)
2090          $(compoundIndicatorsFull_act(accNodesModel,accYears,indicator)
2091              and sum((accNodesModel_a,accYears_a,indicator_a)
2092                      $compoundIndicatorsFullExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a), 1) = 1)
2093          = sum((accNodesModel_a,accYears_a,indicator_a)
2094                  $(compoundIndicatorsFullExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a)),
2095              compoundIndicatorsFullExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a));
2096   
2097      compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa)
2098          $(compoundIndicatorsFull_act(accNodesModel,accYears,indicator)
2099              and sum((accNodesModel_a,accYears_a,indicator_a)
2100                      $compoundIndicatorsFullExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a), 1) > 1)
2101          = sum((accNodesModel_a,accYears_a,indicator_a)
2102                  $(compoundIndicatorsFullExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a)
2103                      and not (sameas(accNodesModel, accNodesModel_a) and sameas(accYears, accYears_a) and sameas(indicator, indicator_a))),
2104              compoundIndicatorsFullExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a))
2105          / sum((accNodesModel_a,accYears_a,indicator_a)
2106                  $(compoundIndicatorsFullExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a)
2107                      and not (sameas(accNodesModel, accNodesModel_a) and sameas(accYears, accYears_a) and sameas(indicator, indicator_a))), 1);
2108   
2109      option compoundIndicatorsFull_act < compoundIndicatorsFull;
2110      compIndicators_post = sum((accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa)
2111          $compoundIndicatorsFullExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa), 1);
2112  );
2113  option sparseval = 0;
2114   
2115  * map to sub-years and sub-nodes
2116  compoundIndicatorsFullExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_a)
2117      $(compoundIndicatorsFull_act(accNodesModel,accYears,indicator)
2118          and compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
2119          and map_accYears(accYears_aa,accYears_a)
2120          and map_accNodes(accNodesModel_aa,accNodesModel_a))
2121      = compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
2122          * yearFactor(accNodesModel,accYears,indicator,accYears_aa);
2123   
2124  * Remove all accounting regions and accounting years
2125  compoundIndicatorsFullExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa)
2126      $(compoundIndicatorsFullExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa)
2127          and not accounting_indicatorBounds(accNodesModel_aa,accYears_aa,indicator_aa,"isVariable")
2128          and sum(accNodes$(sameas(accNodes,accNodesModel_aa)), 1)
2129              or sameas("horizon",accYears_aa))
2130      = 0;
2131   
2132  * Map from extended parameter to final parameter
2133  option compoundIndicatorsFullExt_r < compoundIndicatorsFullExt;
2134  compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa)
2135      $(compoundIndicatorsFull_act(accNodesModel,accYears,indicator)
2136          and sum((accNodesModel_a,accYears_a,indicator_a)
2137                  $compoundIndicatorsFullExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a), 1) = 1)
2138      = sum((accNodesModel_a,accYears_a,indicator_a)
2139              $(compoundIndicatorsFullExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a)),
2140          compoundIndicatorsFullExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a));
2141   
2142  compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa)
2143      $(compoundIndicatorsFull_act(accNodesModel,accYears,indicator)
2144          and sum((accNodesModel_a,accYears_a,indicator_a)
2145                  $compoundIndicatorsFullExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a), 1) > 1)
2146      = sum((accNodesModel_a,accYears_a,indicator_a)
2147              $(compoundIndicatorsFullExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a)
2148                  and not (sameas(accNodesModel, accNodesModel_a) and sameas(accYears, accYears_a) and sameas(indicator, indicator_a))),
2149          compoundIndicatorsFullExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a))
2150      / sum((accNodesModel_a,accYears_a,indicator_a)
2151              $(compoundIndicatorsFullExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a)
2152                  and not (sameas(accNodesModel, accNodesModel_a) and sameas(accYears, accYears_a) and sameas(indicator, indicator_a))), 1);
2153   
2154  * Remove all accounting regions and accounting years
2155  compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
2156      $(compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
2157          and not accounting_indicatorBounds(accNodesModel_a,accYears_a,indicator_a,"isVariable")
2158          and (sum(accNodes$(sameas(accNodes,accNodesModel_a)), 1)
2159              or sameas("horizon",accYears_a)))
2160      = 0;
2161   
2162  * Remove all slack indicators except the ones declared in indicatorBounds
2163  compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
2164      $(compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
2165          and sum((accNodesModel_aa,accYears_aa)$accounting_indicatorBounds(accNodesModel_aa,accYears_aa,indicator_a,"isVariable"), 1)
2166          and not accounting_indicatorBounds(accNodesModel_a,accYears_a,indicator_a,"isVariable"))
2167      = 0;
2168   
2169  * Check if the objective value and optimization sense is set correctly
2170  scalar opti_values, opti_sense;
2171  opti_values = sum((accNodesModel,accYears,indicator)$(accounting_indicatorBounds(accNodesModel,accYears,indicator,"obj") <> 0), 1);
2172  opti_sense = sum((accNodesModel,accYears,indicator), accounting_indicatorBounds(accNodesModel,accYears,indicator,"obj"));
2173  abort$(opti_values < 1)
2174      "Accounting: No indicator specified as objective value"
2175  abort$(opti_values > 1)
2176      "Accounting: Too many indicators specified as objective value"
2177  abort$(opti_sense <> -1 and opti_sense <> 1)
2178      "Accounting: Optimization sense has to be either -1 or 1"
INCLUDE    C:\Local\REMix\framework\remix\framework\model\source\accounting\annuities.gms
2180  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
2181  * SPDX-License-Identifier: BSD-3-Clause
2182   
2183  * Calculation of annuities
2184   
2185  abort$(sum((indicator,nodesModelToCalc,converter_techs,vintage)
2186          $(accounting_converterUnits(indicator,nodesModelToCalc,converter_techs,vintage,"useAnnuity") = 1
2187          and accounting_converterUnits(indicator,nodesModelToCalc,converter_techs,vintage,"amorTime") < 1), 1) > 0 )
2188      "Accounting: Some converter technologies use annuities but have no amortization time"
2189   
2190  parameter accounting_annuityFactor_converter(indicator,nodesModel,converter_techs,vintage);
2191  accounting_annuityFactor_converter(indicator,nodesModelToCalc,converter_techs,vintage)
2192      $accounting_converterUnits(indicator,nodesModelToCalc,converter_techs,vintage,"useAnnuity")
2193      =
2194      accounting_converterUnits(indicator,nodesModelToCalc,converter_techs,vintage,"interest")
2195          * (1 + accounting_converterUnits(indicator,nodesModelToCalc,converter_techs,vintage,"interest"))
2196          ** accounting_converterUnits(indicator,nodesModelToCalc,converter_techs,vintage,"amorTime")
2197      / ((1 + accounting_converterUnits(indicator,nodesModelToCalc,converter_techs,vintage,"interest"))
2198          ** accounting_converterUnits(indicator,nodesModelToCalc,converter_techs,vintage,"amorTime") - 1);
2199   
2200   
2201  abort$(sum((indicator,nodesModelToCalc,storage_techs,vintage)
2202          $(accounting_storageUnits(indicator,nodesModelToCalc,storage_techs,vintage,"useAnnuity") = 1
2203          and accounting_storageUnits(indicator,nodesModelToCalc,storage_techs,vintage,"amorTime") < 1), 1) > 0 )
2204      "Accounting: Some storage technologies use annuities but have no amortization time"
2205   
2206  parameter accounting_annuityFactor_storage(indicator,nodesModel,storage_techs,vintage);
2207  accounting_annuityFactor_storage(indicator,nodesModelToCalc,storage_techs,vintage)
2208      $accounting_storageUnits(indicator,nodesModelToCalc,storage_techs,vintage,"useAnnuity")
2209      =
2210      accounting_storageUnits(indicator,nodesModelToCalc,storage_techs,vintage,"interest")
2211          * (1 + accounting_storageUnits(indicator,nodesModelToCalc,storage_techs,vintage,"interest"))
2212          ** accounting_storageUnits(indicator,nodesModelToCalc,storage_techs,vintage,"amorTime")
2213      / ((1 + accounting_storageUnits(indicator,nodesModelToCalc,storage_techs,vintage,"interest"))
2214          ** accounting_storageUnits(indicator,nodesModelToCalc,storage_techs,vintage,"amorTime") - 1);
2215   
2216   
2217  abort$(sum((indicator,linksModelToCalc,transfer_techs,vintage)
2218          $(accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"useAnnuity") = 1
2219          and accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"amorTime") < 1), 1) > 0 )
2220      "Accounting: Some transfer technologies use annuities but have no amortization time"
2221   
2222  parameter accounting_annuityFactor_transferLink(indicator,linksModel,transfer_techs,vintage);
2223  accounting_annuityFactor_transferLink(indicator,linksModelToCalc,transfer_techs,vintage)
2224      $accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"useAnnuity")
2225      =
2226      accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"interest")
2227          * (1 + accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"interest"))
2228          ** accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"amorTime")
2229      / ((1 + accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"interest"))
2230          ** accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"amorTime") - 1);
2231   
2232   
2233   
2234  abort$(sum((indicator,linksModelToCalc,transfer_techs,vintage,link_types)
2235          $(accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"useAnnuity") = 1
2236          and accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"amorTime") < 1), 1) > 0 )
2237      "Accounting: Some transfer-per-length technologies use annuities but have no amortization time"
2238   
2239  parameter accounting_annuityFactor_transferPerLength(indicator,linksModel,transfer_techs,vintage,link_types);
2240  accounting_annuityFactor_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types) = 1;
2241   
2242  accounting_annuityFactor_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types)
2243      $accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"useAnnuity")
2244      =
2245      accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"interest")
2246          * (1 + accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"interest"))
2247          ** accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"amorTime")
2248      / ((1 + accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"interest"))
2249          ** accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"amorTime") - 1);
2250   
2252   
INCLUDE    C:\Local\REMix\framework\remix\framework\model\source\methods\mga_pre.gms
2254  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
2255  * SPDX-License-Identifier: BSD-3-Clause
2256   
INCLUDE    C:\Local\REMix\framework\remix\framework\model\source\methods\pareto_pre.gms
2260  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
2261  * SPDX-License-Identifier: BSD-3-Clause
2262   
INCLUDE    C:\Local\REMix\framework\remix\framework\model\source\postcalc\declaration.gms
2266  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
2267  * SPDX-License-Identifier: BSD-3-Clause
2268  * // # Output data
2269  * // This is the reference data model of the REMix output.
2270  * //
2271  * // ## Standard output
2274   
2281   
2283   
2284  set capType / "build", "decom", "total", "lowerLimit", "upperLimit", "total_degraded" /;
2285  set balanceType / "netto", "brutto", "positive", "negative", "flh" /;
2286  set profileType / "upper", "fixed", "lower" /;
2287  set r2a_has_converter_cost(indicator,nodesModel,years,techs,vintage,commodity);
2288   
2289  ** // OUTPUT: indicator_accounting | OEO_00000350:quantity value
2290  * // ### indicator_accounting
2291  * // Title: Accounting indicators Post-calculation
2292  parameter indicator_accounting(accNodesModel,accYears,indicator) "Post-calculation aggregated indicator accounting" ;
2293  * //
2294  ** // OUTPUT: indicator_accounting_ref | OEO_00000350:quantity value
2295  * // ### indicator_accounting_ref
2296  * // Title: Accounting indicators reference
2297  parameter indicator_accounting_ref(accNodesModel,accYears,indicator) "Indicator accounting optimization levels" ;
2298  * //
2299  ** // OUTPUT: indicator_accounting_comp | OEO_00000350:quantity value
2300  * // ### indicator_accounting_comp
2301  * // Title: Accounting indicators composition
2302  parameter indicator_accounting_comp(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a) "Indicator accounting with other indicator composition" ;
2303  * //
2304  ** // OUTPUT: indicator_accounting_detailed | OEO_00000350:quantity value
2305  * // ### indicator_accounting_detailed
2306  * // Title: Accounting indicators detail
2307  parameter indicator_accounting_detailed(indicator,nodesModel,years,techs) "Indicator accounting with technological composition" ;
2308  * //
2309  ** // OUTPUT: indicator_accounting_links | OEO_00000350:quantity value
2310  * // ### indicator_accounting_links
2311  * // Title: Accounting indicators per transfer link
2312  parameter indicator_accounting_links(indicator,nodesModel,nodesModel_a,linksModel,years,techs) "Indicator accounting of transfer technologies" ;
2313  * //
2314  parameter converter_ratedInput(techs,vintage,commodity);
2315  parameter converter_ratedOutput(techs,vintage,commodity);
2316  parameter converter_ratedOutput_min(nodesModel,years,techs,commodity);
2317  parameter converter_ratedOutput_max(nodesModel,years,techs,commodity);
2318   
2319  ** // OUTPUT: converter_caps | OEO_00010257:power capacity
2320  * // ### converter_caps
2321  * // Title: Coverter capacities post-calculation
2322  parameter converter_caps(accNodesModel,accYears,techs,commodity,capType) "Converter capacities, aggregated total" ;
2323  * //
2324  parameter converter_caps_ext(accNodesModel,nodesModel,accYears,years,techs,vintage,commodity,capType);
2325   
2326  ** // OUTPUT: converter_units | OEO_00000350:quantity value
2327  * // ### converter_units
2328  * // Title: Coverter units post-calculation
2329  parameter converter_units(accNodesModel,accYears,techs,vintage,capType) "Converter units" ;
2330  * //
2331  parameter converter_units_ext(accNodesModel,nodesModel,accYears,years,techs,vintage,capType);
2332   
2333  set transfer_usedStartEnd(nodesModel,nodesModel,linksModel,years,techs);
2334  parameter max_transfer_coefficient(techs,commodity);
2335  parameter min_transfer_coefficient(techs,commodity);
2336  ** // OUTPUT: transfer_links | OEO_00000350:quantity value
2337  * // ### transfer_links
2338  * // Title: Transfer post-calculation
2339  parameter transfer_links(linksModel,years,techs,vintage,capType) "Transfer links" ;
2340  * //
2341  ** // OUTPUT: transfer_caps | OEO_00010257:power capacity
2342  * // ### transfer_caps
2343  * // Title: Transfer capacities post-calculation
2344  parameter transfer_caps(nodesModel_start,nodesModel_end,linksModel,years,techs,commodity,capType) "Transfer capacities, aggregated total" ;
2345  * //
2346  ** // OUTPUT: transfer_flows | OEO_00050019:energy amount value
2347  * // ### transfer_flows
2348  * // Title: Transfer hourly flows
2349  parameter transfer_flows(timeModel,nodesModel_start,nodesModel_end,linksModel,years,techs,commodity) "Hourly link flows" ;
2350  * //
2351  ** // OUTPUT: transfer_flows_annual | OEO_00050019:energy amount value
2352  * // ### transfer_flows_annual
2353  * // Title: Transfer annual flows
2354  parameter transfer_flows_annual(nodesModel_start,nodesModel_end,linksModel,years,techs,commodity,balanceType) "Annual link flows" ;
2355  * //
2356  ** // OUTPUT: transfer_losses | OEO_00050019:energy amount value
2357  * // ### transfer_losses
2358  * // Title: Transfer hourly losses
2359  parameter transfer_losses(timeModel,nodesModel_start,nodesModel_end,linksModel,years,techs,commodity) "Hourly link losses" ;
2360  * //
2361  ** // OUTPUT: transfer_losses_annual | OEO_00050019:energy amount value
2362  * // ### transfer_losses_annual
2363  * // Title: Transfer annual losses
2364  parameter transfer_losses_annual(nodesModel_start,nodesModel_end,linksModel,years,techs,commodity,balanceType) "Annual link losses" ;
2365  * //
2366  parameter storage_size_max(nodesModel,years,techs,commodity);
2367  parameter storage_size_min(nodesModel,years,techs,commodity);
2368  ** // OUTPUT: storage_units |  OEO_00000350:quantity value
2369  * // ### storage_units
2370  * // Title: Storage units post-calculation
2371  parameter storage_units(accNodesModel,accYears,techs,vintage,capType) "Storage units" ;
2372  * //
2373  parameter storage_units_ext(accNodesModel,nodesModel,accYears,years,techs,vintage,capType);
2374  ** // OUTPUT: storage_caps | OEO_00230000:energy storage capacity
2375  * // ### storage_caps
2376  * // Title: Storage capacities post-calculation
2377  parameter storage_caps(accNodesModel,accYears,techs,commodity,capType) "Storage capacities, aggregated total" ;
2378  * //
2379  parameter storage_caps_ext(accNodesModel,nodesModel,accYears,years,techs,vintage,commodity,capType);
2380  ** // OUTPUT: storage_level_out | OEO_00330012:energy storage content
2381  * // ### storage_level_out
2382  * // Title: Storage level
2383  parameter storage_level_out(timeModel,accNodesModel,accYears,techs,commodity) "Storage level per time step" ;
2384  * //
2385  parameter storage_level_out_ext(timeModel,accNodesModel,nodesModel,accYears,years,techs,vintage,commodity);
2386  ** // OUTPUT: storage_flows | OEO_00050019:energy amount value
2387  * // ### storage_flows
2388  * // Title: Storage hourly flows
2389  parameter storage_flows(timeModel,accNodesModel,accYears,techs,commodity) "Storage flows per time step" ;
2390  * //
2391  parameter storage_flows_ext(timeModel,accNodesModel,nodesModel,accYears,years,techs,vintage,commodity);
2392  ** // OUTPUT: storage_flows_annual | OEO_00050019:energy amount value
2393  * // ### storage_flows_annual
2394  * // Title: Storage annual flows
2395  parameter storage_flows_annual(accNodesModel,accYears,techs,commodity,balanceType) "Aggregated storage flows" ;
2396  * //
2397  ** // OUTPUT: storage_losses_out | OEO_00050019:energy amount value
2398  * // ### storage_losses_out
2399  * // Title: Storage hourly losses
2400  parameter storage_losses_out(timeModel,accNodesModel,accYears,techs,commodity) "Storage losses per time step" ;
2401  * //
2402  ** // OUTPUT: storage_losses_annual | OEO_00050019:energy amount value
2403  * // ### storage_losses_annual
2404  * // Title: Storage annual losses
2405  parameter storage_losses_annual(accNodesModel,accYears,techs,commodity,balanceType) "Aggregated storage losses" ;
2406  * //
2407  ** // OUTPUT: commodity_balance | OEO_00000350:quantity value
2408  * // ### commodity_balance
2409  * // Title: Hourly commodity balance
2410  parameter commodity_balance(timeModel,accNodesModel,accYears,techs,commodity) "Commodity balances per model hour" ;
2411  parameter commodity_balance_ext(timeModel,accNodesModel,nodesModel,accYears,years,techs,vintage,commodity);
2412  * //
2413  ** // OUTPUT: commodity_balance_annual | OEO_00000350:quantity value
2414  * // ### commodity_balance_annual
2415  * // Title: Annual commodity balance
2416  parameter commodity_balance_annual(accNodesModel,accYears,techs,commodity,balanceType) "Aggregated commodity balances" ;
2417  * //
2418  ** // OUTPUT: marginals_sourcesink_profile | OEO_00040008:marginal cost
2419  * // ### marginals_sourcesink_profile
2420  * // Title: Source-sink marginals
2421  parameter marginals_sourcesink_profile(timeModel,nodesModel,years,techs,commodity) "Source and sink flow marginal values" ;
2422  * //
2423  ** // OUTPUT: marginals_balance | OEO_00040008:marginal cost
2424  * // ### marginals_balance
2425  * // Title: Nodel balance marginals
2426  parameter marginals_balance(timeModel,nodesModel,years,commodity) "Nodal balance marginal values" ;
2427  * //
2428  ** // OUTPUT: marginals_sourcesink_sum | OEO_00040008:marginal cost
2429  * // ### marginals_sourcesink_sum
2430  * // Title: Source-sink annual marginals
2431  parameter marginals_sourcesink_sum(nodesModel,years,techs,commodity) "Annual source and sink flow marginal values" ;
2432  * //
2433  ** // OUTPUT: marginals_indicator_bounds | OEO_00040008:marginal cost
2434  * // ### marginals_indicator_bounds
2435  * // Title: Indicator bounds marginals
2436  parameter marginals_indicator_bounds(accNodesModel,accYears,indicator) "Accounting indicator marginals" ;
2437  * //
2438  * // ## REMix-AMIRIS interface output
2439  * //
2440  ** // OUTPUT: r2a_annuity_cost_converter | OEO_00040009:cost
2441  * // ### r2a_annuity_cost_converter
2442  * // Title: Converter annuity cost
2443  parameter r2a_annuity_cost_converter(indicator,accNodesModel,accYears,techs,vintage,commodity) "Annuity cost of converters" ;
2444  * //
2445  ** // OUTPUT: r2a_spec_cost_converter | OEO_00040009:cost
2446  * // ### r2a_spec_cost_converter
2447  * // Title: Converter specific cost
2448  parameter r2a_spec_cost_converter(indicator,accNodesModel,accYears,techs,vintage,commodity) "Specific cost of converters" ;
2449  * //
2450  ** // OUTPUT: r2a_spec_cost_fuel | OEO_00040009:cost
2451  * // ### r2a_spec_cost_fuel
2452  * // Title: Commodity specific cost
2453  parameter r2a_spec_cost_fuel(indicator,accNodesModel,accYears,techs,commodity) "Specific cost of commodities, used particularly for fuels" ;
2454  * //
2455  ** // OUTPUT: r2a_spec_cost_indicator | OEO_00040009:cost
2456  * // ### r2a_spec_cost_indicator
2457  * // Title: Indicator specific cost
2458  parameter r2a_spec_cost_indicator(indicator,indicator_a,accNodesModel,accYears) "Specific indicator cost" ;
2459  * //
2460  ** // OUTPUT: r2a_converter_efficiencies | OEO_00140050:efficiency value
2461  * // ### r2a_converter_efficiencies
2462  * // Title: Indicator specific cost
2463  parameter r2a_converter_efficiencies(techs,vintage,activity,commodity,commodity_a) "Converter-specific efficiency" ;
2464  * //
2465  ** // OUTPUT: r2a_converter_avail_factor | OEO_00000350:quantity value
2466  * // ### r2a_converter_avail_factor
2467  * // Title: Converter availability factor
2468  parameter r2a_converter_avail_factor(accNodesModel,accYears,techs,vintage) "Availability factor of converter technologies" ;
2469  parameter r2a_converter_avail_profile(timeModel,accNodesModel,accYears,techs,commodity,profileType) "Availability of converter technologies" ;
2470  parameter r2a_converter_avail_profile_ext(timeModel,accNodesModel,nodesModel,accYears,years,techs,vintage,commodity,profileType);
2471  * //
2472  ** // OUTPUT: r2a_storage_e2p | OEO_00000350:quantity value
2473  * // ### r2a_storage_e2p
2474  * // Title: E2P Storage
2475  parameter r2a_storage_e2p(accNodesModel,accYears,techs,vintage,commodity,capType) "Energy-to-power ratio" ;
2476  * //
2477  ** // OUTPUT: r2a_storage_selfdischarge | OEO_00000350:quantity value
2478  * // ### r2a_storage_selfdischarge
2479  * // Title: Storage self discharge rates
2480  parameter r2a_storage_selfdischarge(accNodesModel,accYears,techs,vintage,commodity);
2481   
INCLUDE    C:\Local\REMix\framework\remix\framework\model\source\loadgdx.gms
2485  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
2486  * SPDX-License-Identifier: BSD-3-Clause
2487   
2488  * ==== global settings ====
2490   
2492   
INCLUDE    C:\Local\REMix\framework\remix\framework\model\source\core\converter.gms
2494  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
2495  * SPDX-License-Identifier: BSD-3-Clause
2496   
2497  * // # core_converter
2498  * // The equations in this file describe the converters in the model.
2499   
2500  * // ## Advanced features
2501  * //
2502  * // You can find a more detailed explanation of the %curly_open%ref%curly_close%`MIP features <explanations_mip_label>`.
2503  ** // There is also a more detailed explanation on the modeling of outages at the %curly_open%ref%curly_close%`resilience section <explanations_resilience_label>`.
2504  * //
2505  * // In the following table you can see which modifications you have to make to your data to use the different features.
2506  * //
2507  * // | Feature | Modification |
2508  * // | ------ | ------ |
2509  * // | MIP expansion | The converter_tech_Parameter "mipUnits" has to be set to 1 in converter_techParam.dat for the technologies and years where descrete expansion is wanted |
2510  * // | Minimum up/downtime | The converter_tech_Parameters "minUptime" and/or "minDowntime" need to be set to the according amount of minimum time steps.Furthermore, the converter_tech_Parameter "mipDispatch" has to be set to 1 in converter_techParam.dat
2511  * // for the technologies and years where a minimum up- or downtime should be applied so that the units can be shut down. "mipUnits" will automatically be set to 1 |
2512  * // | Partial load | The converter_tech_Parameter "mipDispatch" has to be set to 1 in converter_techParam.dat for the technologies and years where you want to make use of the partial load feature. You also have to set a value to
2513  * // the converter_coefficient_parameters "minLoad" and/or "maxLoad" for the according technologies, vintages, activities and commodities. You can then for example set different "coefficient" values for each activity in converter_coefficient.dat |
2514  ** // | Outages | You have to include the converter_outageProfile.dat-file and while executing the model you have to set --method=resilience |
2515   
2516  * // ## %curly_open%ref%curly_close%`sets <remix_model_sets_label>`
2517  * //
2518  * // ### set_converter_techs.dat
2519  * // In this file all converter technologies are listed that can be used within your model.
2520  * //
2521  * // ### set_activities.dat
2522  * // All modes with which the converter technologies can be operated need to be added here.
2523  * // Examples: Charge (for the charging mode of a storage), Powergen (for the mode in which a converter produces electricity), Curtailment (for the mode in which a renewable power plant is shut down), …
2524  * // If you would like to use the partial load feature, all activity modes that should be available for this feature need to be defined here as well.
2525  * //
2526  * // ### set_commodities.dat
2527  * // In this file all commodities are listed that can be used and converted by the converter technologies.
2528  * // Examples: Electricity, Coal, Biomass, Hydrogen, …
2529   
2530  * // ## Variables
2531  * // {special_table_converter_variables}
8151   
8152  * ==== loading units from gdx file ====
8153   
8154  * Load units from gdx file
8156   
8157  * ==== calculation of mappings ====
8158   
8159  * Technologies with a lifeTime > 0 are available
8160  set converter_availTech(nodesModel,years,converter_techs,vintage);
8161  converter_availTech(nodesModel,years,converter_techs,vintage)
8162      $(vintage.val = smax(vintage_a$(vintage_a.val <= years.val
8163          and converter_techParam(converter_techs,vintage_a,"lifeTime") > 0), vintage_a.val)) = yes;
8164   
8165  * Technologies to optimize become unavailable if they have an unitsUpperLimit of 0
8166  converter_availTech(nodesModel,years,converter_techs,vintage)
8167      $(yearsToCalc(years) and converter_capacityParam(nodesModel,years,converter_techs,"unitsUpperLimit") = 0 ) = no;
8168   
8169  * Technologies already built become unavailable if they have an unitsBuild of 0
8170  converter_availTech(nodesModel,years,converter_techs,vintage)
8171      $( ( not yearsToCalc(years)) and converter_capacityParam(nodesModel,years,converter_techs,"unitsBuild") = 0 ) = no;
8172   
8173  * Used technologies are available technologies over their technical lifeTime
8174  set converter_usedTech(nodesModel,years,converter_techs,vintage);
8175  converter_usedTech(nodesModel,years,converter_techs,vintage)
8176      $(vintage.val <= years.val
8177          and years.val < smax(years_a$converter_availTech(nodesModel,years_a,converter_techs,vintage),
8178                                  years_a.val + converter_techParam(converter_techs,vintage,"lifeTime"))
8179          ) = yes;
8180   
8181  * Technologies have to be decomissioned in the interval of first avail + lifetime to last avail + lifetime
8182  set converter_decomTech(nodesModel,years,converter_techs,vintage);
8183  converter_decomTech(nodesModel,years,converter_techs,vintage)
8184    $(sum(years_a$converter_usedTech(nodesModel,years_a,converter_techs,vintage), 1)
8185      and sum(yearsToCalc
8186        $(sameas(years, yearsToCalc)
8187          and yearsToCalc.val >= smin(years_a$converter_availTech(nodesModel,years_a,converter_techs,vintage), years_a.val) + converter_techParam(converter_techs,vintage,"lifeTime")
8188          and yearsToCalc.val <= smax(years_a$converter_availTech(nodesModel,years_a,converter_techs,vintage), years_a.val) + converter_techParam(converter_techs,vintage,"lifeTime")), 1))
8189    = yes;
8190   
8191  * Extend the decom frame to the year after the last year of usedTech
8192  converter_decomTech(nodesModel,yearsToCalc,converter_techs,vintage)
8193    $(converter_usedTech(nodesModel,yearsToCalc-1,converter_techs,vintage)
8194      and converter_decomTech(nodesModel,yearsToCalc-1,converter_techs,vintage))
8195    = yes;
8196   
8197  * Mapping for used activities and commodities
8198  set converter_usedActCom(converter_techs,vintage,activity,commodity);
8199  option converter_usedActCom < converter_coefficient;
8200   
8201  set converter_usedAct(converter_techs,vintage,activity);
8202  option converter_usedAct < converter_usedActCom;
8203   
8204  set converter_usedCom(converter_techs,vintage,commodity);
8205  option converter_usedCom < converter_usedActCom;
8206   
8207  set converter_usedTechAct(nodesModel,years,converter_techs,vintage,activity);
8208  converter_usedTechAct(nodesModel,years,converter_techs,vintage,activity)
8209      $(converter_usedTech(nodesModel,years,converter_techs,vintage)
8210          and converter_usedAct(converter_techs,vintage,activity))
8211      = yes;
8212   
8213  set converter_useRampPos(nodesModel,years,converter_techs,vintage);
8214  converter_useRampPos(nodesModelToCalc,yearsToCalc,converter_techs,vintage)
8215    $(sum(indicator$accounting_converterStartup(indicator,nodesModelToCalc,converter_techs,vintage,"perRamp"), 1)
8216      or sum(indicator$accounting_converterStartup(indicator,nodesModelToCalc,converter_techs,vintage,"perRampPos"), 1))
8217    = 1;
8218   
8219  set converter_useRampNeg(nodesModel,years,converter_techs,vintage);
8220  converter_useRampNeg(nodesModelToCalc,yearsToCalc,converter_techs,vintage)
8221    $(sum(indicator$accounting_converterStartup(indicator,nodesModelToCalc,converter_techs,vintage,"perRamp"), 1)
8222      or sum(indicator$accounting_converterStartup(indicator,nodesModelToCalc,converter_techs,vintage,"perRampNeg"), 1))
8223    = 1;
8224   
8225   
8226  * ==== aggregation of profiles ====
8227   
8228  * derive upper and lower profiles then aggregate
8229  set converter_activity_hasProfileIn(nodesData,years,converter_techs,pc_converter_activityProfile);
8230  option converter_activity_hasProfileIn < converter_activityProfileIn;
8231   
8232  set converter_activity_hasProfile(nodesModel,years,converter_techs,pc_converter_activityProfile);
8233  converter_activity_hasProfile(nodesModelToCalc,yearsToCalc,converter_techs,pc_converter_activityProfile)
8234      = sum(nodesData$aggregateNodesModel(nodesData,nodesModelToCalc),
8235              converter_activity_hasProfileIn(nodesData,yearsToCalc,converter_techs,pc_converter_activityProfile));
8236   
8237  set converter_coefficient_hasProfileIn(nodesData,years,converter_techs,vintage,activity,commodity);
8238  option converter_coefficient_hasProfileIn < converter_coefficientProfileIn;
8239   
8240  set converter_coefficient_hasProfile(nodesModel,years,converter_techs,vintage,activity,commodity);
8241  converter_coefficient_hasProfile(nodesModelToCalc,yearsToCalc,converter_techs,vintage,activity,commodity)
8242      = sum(nodesData$aggregateNodesModel(nodesData,nodesModelToCalc),
8243              converter_coefficient_hasProfileIn(nodesData,yearsToCalc,converter_techs,vintage,activity,commodity));
8244   
8245  * aagregate time dimension
8246  parameter converter_activityProfileIn_aggTime(timeModel,nodesData,yearsToCalc,converter_techs,pc_converter_activityProfile);
8247  converter_activityProfileIn_aggTime(timeModelToCalc,nodesData,yearsToCalc,converter_techs,pc_converter_activityProfile)
8248    $converter_activity_hasProfileIn(nodesData,yearsToCalc,converter_techs,pc_converter_activityProfile)
8249    = sum(timeData$timeMapping(timeData,timeModelToCalc),
8250            converter_activityProfileIn(timeData,nodesData,yearsToCalc,converter_techs,pc_converter_activityProfile)
8251            / timeLength(timeModelToCalc));
8252  option clear = converter_activityProfileIn;
8253   
8254  * weighted average for a real sum of units upper limits, plain average if one region has an upper limit of inf
8255  parameter converter_activityProfile(timeModel,nodesModel,years,converter_techs,vintage,pc_converter_activityProfile);
8256  converter_activityProfile(timeModelToCalc,converter_usedTech(nodesModelToCalc,yearsToCalc,converter_techs,vintage),"upper")
8257      = converter_techParam(converter_techs,vintage,"activityUpperLimit");
8258  converter_activityProfile(timeModelToCalc,converter_usedTech(nodesModelToCalc,yearsToCalc,converter_techs,vintage),"lower")
8259      = converter_techParam(converter_techs,vintage,"activityLowerLimit");
8260   
8261   
8262  set converter_finiteUnitLimit(nodesModelToCalc,yearsToCalc,converter_techs);
8263  converter_finiteUnitLimit(nodesModelToCalc,yearsToCalc,converter_techs)
8264      = sum(nodesData$aggregateNodesModel(nodesData,nodesModelToCalc), converter_capacityParamIn(nodesData,yearsToCalc,converter_techs,"unitsUpperLimit")) > 0
8265          and sum(nodesData$aggregateNodesModel(nodesData,nodesModelToCalc), converter_capacityParamIn(nodesData,yearsToCalc,converter_techs,"unitsUpperLimit")) < inf;
8266   
8267  set converter_infiniteUnitLimit(nodesModelToCalc,yearsToCalc,converter_techs);
8268  converter_infiniteUnitLimit(nodesModelToCalc,yearsToCalc,converter_techs)
8269      = sum(nodesData$aggregateNodesModel(nodesData,nodesModelToCalc), converter_capacityParamIn(nodesData,yearsToCalc,converter_techs,"unitsUpperLimit")) = inf;
8270   
8271  converter_activityProfile(timeModelToCalc,converter_usedTech(nodesModelToCalc,yearsToCalc,converter_techs,vintage),pc_converter_activityProfile)
8272      $(converter_activity_hasProfile(nodesModelToCalc,yearsToCalc,converter_techs,pc_converter_activityProfile)
8273          and converter_finiteUnitLimit(nodesModelToCalc,yearsToCalc,converter_techs))
8274      = sum(nodesData$(aggregateNodesModel(nodesData,nodesModelToCalc)
8275                  and converter_capacityParamIn(nodesData,yearsToCalc,converter_techs,"unitsUpperLimit") < inf ),
8276                converter_activityProfileIn_aggTime(timeModelToCalc,nodesData,yearsToCalc,converter_techs,pc_converter_activityProfile)
8277                * converter_capacityParamIn(nodesData,yearsToCalc,converter_techs,"unitsUpperLimit"))
8278      / sum(nodesData$aggregateNodesModel(nodesData,nodesModelToCalc),
8279              converter_capacityParamIn(nodesData,yearsToCalc,converter_techs,"unitsUpperLimit"));
8280   
8281  converter_activityProfile(timeModelToCalc,converter_usedTech(nodesModelToCalc,yearsToCalc,converter_techs,vintage),pc_converter_activityProfile)
8282      $(converter_activity_hasProfile(nodesModelToCalc,yearsToCalc,converter_techs,pc_converter_activityProfile)
8283          and converter_infiniteUnitLimit(nodesModelToCalc,yearsToCalc,converter_techs))
8284      = sum(nodesData$(aggregateNodesModel(nodesData,nodesModelToCalc)
8285                  and converter_capacityParamIn(nodesData,yearsToCalc,converter_techs,"unitsUpperLimit") = inf),
8286                converter_activityProfileIn_aggTime(timeModelToCalc,nodesData,yearsToCalc,converter_techs,pc_converter_activityProfile)
8287                * converter_capacityParamIn(nodesData,yearsToCalc,converter_techs,"unitsUpperLimit"))
8288      / sum(nodesData$(aggregateNodesModel(nodesData,nodesModelToCalc)
8289                      and converter_capacityParamIn(nodesData,yearsToCalc,converter_techs,"unitsUpperLimit") = inf ),
8290              1);
8291  option clear = converter_activityProfileIn_aggTime;
8292   
8293  * for fixed profiles overwrite upper and lower profile
8294  converter_activityProfile(timeModelToCalc,nodesModelToCalc,yearsToCalc,converter_techs,vintage,"lower")
8295      $converter_activity_hasProfile(nodesModelToCalc,yearsToCalc,converter_techs,"fixed")
8296      = converter_activityProfile(timeModelToCalc,nodesModelToCalc,yearsToCalc,converter_techs,vintage,"fixed");
8297   
8298  converter_activityProfile(timeModelToCalc,nodesModelToCalc,yearsToCalc,converter_techs,vintage,"upper")
8299      $converter_activity_hasProfile(nodesModelToCalc,yearsToCalc,converter_techs,"fixed")
8300      = converter_activityProfile(timeModelToCalc,nodesModelToCalc,yearsToCalc,converter_techs,vintage,"fixed");
8301   
8303   
8304  * weighted average for a real sum of units upper limits, plain average if one region has an upper limit of inf
8305  parameter converter_coefficientProfile(timeModel,nodesModel,years,converter_techs,vintage,activity,commodity);
8306  converter_coefficientProfile(timeModelToCalc,converter_usedTechAct(nodesModelToCalc,yearsToCalc,converter_techs,vintage,activity),commodity)
8307      = converter_coefficient(converter_techs,vintage,activity,commodity,"coefficient");
8308   
8309  converter_coefficientProfile(timeModelToCalc,converter_usedTechAct(nodesModelToCalc,yearsToCalc,converter_techs,vintage,activity),commodity)
8310      $( converter_coefficient_hasProfile(nodesModelToCalc,yearsToCalc,converter_techs,vintage,activity,commodity)
8311          and converter_finiteUnitLimit(nodesModelToCalc,yearsToCalc,converter_techs) )
8312      = sum(nodesData$aggregateNodesModel(nodesData,nodesModelToCalc),
8313            sum(timeData$timeMapping(timeData,timeModelToCalc),
8314                    converter_coefficientProfileIn(timeData,nodesData,yearsToCalc,converter_techs,vintage,activity,commodity))
8315                / timeLength(timeModelToCalc)
8316              * converter_capacityParamIn(nodesData,yearsToCalc,converter_techs,"unitsUpperLimit") )
8317      / sum(nodesData$aggregateNodesModel(nodesData,nodesModelToCalc),
8318              converter_capacityParamIn(nodesData,yearsToCalc,converter_techs,"unitsUpperLimit"));
8319   
8320  converter_coefficientProfile(timeModelToCalc,converter_usedTechAct(nodesModelToCalc,yearsToCalc,converter_techs,vintage,activity),commodity)
8321      $( converter_coefficient_hasProfile(nodesModelToCalc,yearsToCalc,converter_techs,vintage,activity,commodity)
8322          and converter_infiniteUnitLimit(nodesModelToCalc,yearsToCalc,converter_techs))
8323      = sum(nodesData$(aggregateNodesModel(nodesData,nodesModelToCalc)
8324                      and converter_capacityParamIn(nodesData,yearsToCalc,converter_techs,"unitsUpperLimit") = inf ),
8325            sum(timeData$timeMapping(timeData,timeModelToCalc),
8326                    converter_coefficientProfileIn(timeData,nodesData,yearsToCalc,converter_techs,vintage,activity,commodity))
8327                / timeLength(timeModelToCalc))
8328      / sum(nodesData$(aggregateNodesModel(nodesData,nodesModelToCalc)
8329                      and converter_capacityParamIn(nodesData,yearsToCalc,converter_techs,"unitsUpperLimit") = inf ), 1);
8330   
8332   
8333  * ==== prepare partial load behavior parameters ====
8334   
8335  * set disabled max load requirements to 1 to avoid excessive logical expressions later on
8336  alias(commodity, com);
8337  converter_coefficient(converter_techs,vintage,activity,commodity,"maxLoad")
8338      $((converter_coefficient(converter_techs,vintage,activity,commodity,"maxLoad") = 0)
8339        and converter_usedAct(converter_techs,vintage,activity))
8340      = 1;
8341   
8342  * indicate that at least one activity of a technology makes use of partial load behavior
8343  set converter_hasMaxLoad(converter_techs,vintage);
8344  converter_hasMaxLoad(converter_techs,vintage)
8345    = smin((activity,commodity)$converter_usedAct(converter_techs,vintage,activity),
8346              converter_coefficient(converter_techs,vintage,activity,commodity,"maxLoad")) < 1;
8347   
8348  set converter_hasMinLoad(converter_techs,vintage);
8349  converter_hasMinLoad(converter_techs,vintage)
8350    = smax((activity,commodity)$converter_usedAct(converter_techs,vintage,activity),
8351              converter_coefficient(converter_techs,vintage,activity,commodity,"minLoad")) > 0;
8352   
8353  set converter_hasConstantFluxInActivity(converter_techs,vintage);
8354  converter_hasConstantFluxInActivity(converter_techs,vintage)
8355    = sum((activity,commodity)$converter_usedAct(converter_techs,vintage,activity),
8356                          abs(converter_coefficient(converter_techs,vintage,activity,commodity,"constant"))) > 0;
8357   
8358  * setting up a requirements parameter to avoid having to cycle through commodities in equations
8359  set pc_converter_activityRequirements
8360      /
8361      minLoad             "Lower profile for converter activity"
8362      maxLoad             "Upper profile for converter activity"
8363      /;
8364  parameter converter_activityRequirements(converter_techs,vintage,activity,pc_converter_activityRequirements);
8365  converter_activityRequirements(converter_techs,vintage,activity,"minLoad")
8366    = smax(commodity, converter_coefficient(converter_techs,vintage,activity,commodity,"minLoad"));
8367  converter_activityRequirements(converter_techs,vintage,activity,"maxLoad")
8368    = smin(commodity, converter_coefficient(converter_techs,vintage,activity,commodity,"maxLoad"));
8369   
8370  * ==== activate MIP units for MIP dispatch or partial load technologies ====
8371   
8372  set converter_hasMinUptime(converter_techs,vintage);
8373  converter_hasMinUptime(converter_techs,vintage)
8374    $(converter_techParam(converter_techs,vintage,"minUptime")
8375      and converter_techParam(converter_techs,vintage,"mipDispatch"))
8376    = yes;
8377   
8378  set converter_hasMinDowntime(converter_techs,vintage);
8379  converter_hasMinDowntime(converter_techs,vintage)
8380    $(converter_techParam(converter_techs,vintage,"minDowntime")
8381      and converter_techParam(converter_techs,vintage,"mipDispatch"))
8382    = yes;
8383   
8384  * require integer unit counts if online state is to be tracked
8385  converter_techParam(converter_techs,vintage,"mipUnits")
8386      $(converter_techParam(converter_techs,vintage,"mipDispatch")
8387        or converter_hasMinLoad(converter_techs, vintage)
8388        or converter_hasMaxLoad(converter_techs, vintage)
8389        or converter_hasConstantFluxInActivity(converter_techs,vintage))
8390      = 1;
8391   
8392  * ==== floor mip converter units to integer values ====
8393  converter_capacityParam(nodesModelToCalc,yearsToCalc,converter_techs,"unitsLowerLimit")
8394      $sum(vintage, converter_techParam(converter_techs,vintage,"mipUnits"))
8395      = floor(converter_capacityParam(nodesModelToCalc,yearsToCalc,converter_techs,"unitsLowerLimit"));
8396  converter_capacityParam(nodesModelToCalc,yearsToCalc,converter_techs,"unitsUpperLimit")
8397      $sum(vintage, converter_techParam(converter_techs,vintage,"mipUnits"))
8398      = ceil(converter_capacityParam(nodesModelToCalc,yearsToCalc,converter_techs,"unitsUpperLimit"));
8399   
8400  * ==== scalars and sets for minUptime and minDowntime ====
8401   
8402  scalar converter_maxUptimeReq;
8403  converter_maxUptimeReq = smax((converter_techs,vintage), converter_techParam(converter_techs,vintage,"minUptime"));
8404  set uptimeSearchRange(timeModelToCalc);
8405  uptimeSearchRange(timeModelToCalc) = ord(timeModelToCalc) <= converter_maxUptimeReq;
8406   
8407  scalar converter_maxDowntimeReq;
8408  converter_maxDowntimeReq = smax((converter_techs,vintage), converter_techParam(converter_techs,vintage,"minDowntime"));
8409  set downtimeSearchRange(timeModelToCalc);
8410  downtimeSearchRange(timeModelToCalc) = ord(timeModelToCalc) <= converter_maxDowntimeReq;
8411   
8412  * ==== definition of variables ====
8413   
8414  * Initialise variables for unitsBuild
8415  converter_unitsBuild.l(nodesModel,years,converter_techs,vintage)
8416      $converter_availTech(nodesModel,years,converter_techs,vintage)
8417      = converter_capacityParam(nodesModel,years,converter_techs,"unitsBuild");
8418  converter_unitsBuild.lo(nodesModel,yearsToCalc,converter_techs,vintage)
8419      $converter_availTech(nodesModel,yearsToCalc,converter_techs,vintage)
8420      = converter_unitsBuild.l(nodesModel,yearsToCalc,converter_techs,vintage);
8421  converter_unitsBuild.fx(nodesModel,years,converter_techs,vintage)
8422      $converter_capacityParam(nodesModel,years,converter_techs,"noExpansion")
8423      = converter_unitsBuild.l(nodesModel,years,converter_techs,vintage);
8424   
8425  * Initialise variables for unitsDecom
8426  converter_unitsDecom.l(nodesModel,years,converter_techs,vintage)
8427    $(converter_decomTech(nodesModel,years,converter_techs,vintage)
8428      and years.val < sum(yearsToCalc$(ord(yearsToCalc) = 1), yearsToCalc.val))
8429    = sum((years_a,years_aa)$(sameas(years-1, years_aa)
8430                        and years_a.val > years_aa.val - converter_techParam(converter_techs,vintage,'lifeTime')
8431                        and years_a.val <= years.val - converter_techParam(converter_techs,vintage,'lifeTime')
8432                        and converter_availTech(nodesModel,years_a,converter_techs,vintage)),
8433          converter_unitsBuild.l(nodesModel,years_a,converter_techs,vintage));
8434   
8435  converter_unitsDecom.l(nodesModel,yearsToCalc,converter_techs,vintage)
8436    $converter_decomTech(nodesModel,yearsToCalc,converter_techs,vintage)
8437    = sum(years$
8438          (years.val < sum(yearsToCalc_a$(ord(yearsToCalc_a) = 1), yearsToCalc_a.val)
8439            and converter_availTech(nodesModel,years,converter_techs,vintage)
8440            and years.val > sum(years_a$sameas(years_a, yearsToCalc-1), years_a.val) - converter_techParam(converter_techs,vintage,'lifeTime')
8441            and years.val <= yearsToCalc.val - converter_techParam(converter_techs,vintage,'lifeTime')),
8442        converter_unitsBuild.l(nodesModel,years,converter_techs,vintage))
8443      + sum(yearsToCalc_a$
8444          (yearsToCalc_a.val < sum(yearsToCalc_aa$(ord(yearsToCalc_aa) > 1), yearsToCalc_a.val)
8445            and converter_availTech(nodesModel,yearsToCalc_a,converter_techs,vintage)
8446            and yearsToCalc_a.val > sum(years_a$sameas(years_a, yearsToCalc-1), years_a.val) - converter_techParam(converter_techs,vintage,'lifeTime')
8447            and yearsToCalc_a.val <= yearsToCalc.val - converter_techParam(converter_techs,vintage,'lifeTime')),
8448        converter_unitsBuild.l(nodesModel,yearsToCalc_a,converter_techs,vintage));
8449        ;
8450   
8451  converter_unitsDecom.lo(nodesModel,yearsToCalc,converter_techs,vintage)
8452      $(converter_usedTech(nodesModel,yearsToCalc,converter_techs,vintage)
8453          and not converter_techParam(converter_techs,vintage,"freeDecom"))
8454      = converter_unitsDecom.l(nodesModel,yearsToCalc,converter_techs,vintage)
8455   
8456  * Calculate planned unit expansion
8457  parameter converter_unitsPlanned(nodesModel,years,converter_techs,vintage);
8458  converter_unitsPlanned(nodesModel,years,converter_techs,vintage) = 0;
8459  loop(years,
8460    converter_unitsPlanned(nodesModel,years,converter_techs,vintage)
8461      =
8462      converter_unitsPlanned(nodesModel,years-1,converter_techs,vintage)
8463          $converter_usedTech(nodesModel,years-1,converter_techs,vintage)
8464      + converter_unitsBuild.l(nodesModel,years,converter_techs,vintage)
8465          $converter_availTech(nodesModel,years,converter_techs,vintage)
8466      - converter_unitsDecom.l(nodesModel,years,converter_techs,vintage)
8467          $converter_usedTech(nodesModel,years,converter_techs,vintage);
8468  );
8469   
8470  * Set initial state for planned units
8471  converter_unitsTotal.l(nodesModel,years,converter_techs,vintage)
8472    = converter_unitsPlanned(nodesModel,years,converter_techs,vintage)
8473   
8474  * Calculate if planned unit expansion is bounded by upper and lower limits
8475  set converter_unitBoundsFixed(nodesModel,years,converter_techs);
8476  converter_unitBoundsFixed(nodesModel,years,converter_techs)
8477    $(sum(vintage$converter_usedTech(nodesModel,years,converter_techs,vintage),
8478          converter_unitsPlanned(nodesModel,years,converter_techs,vintage))
8479      = converter_capacityParam(nodesModel,years,converter_techs,"unitsUpperLimit")
8480    and sum(vintage$converter_usedTech(nodesModel,years,converter_techs,vintage),
8481          converter_unitsPlanned(nodesModel,years,converter_techs,vintage))
8482      = converter_capacityParam(nodesModel,years,converter_techs,"unitsLowerLimit"))
8483    = yes;
8484   
8485  * Fix unitsBuild, unitsDecom, unitsTotal if levels are predetermined by upper and lower limits
8486  converter_unitsBuild.fx(nodesModel,years,converter_techs,vintage)
8487    $(converter_availTech(nodesModel,years,converter_techs,vintage)
8488      and converter_unitBoundsFixed(nodesModel,years,converter_techs))
8489    = converter_unitsBuild.l(nodesModel,years,converter_techs,vintage);
8490  converter_unitsDecom.fx(nodesModel,years,converter_techs,vintage)
8491    $(converter_usedTech(nodesModel,years,converter_techs,vintage)
8492      and converter_unitBoundsFixed(nodesModel,years,converter_techs))
8493    = converter_unitsDecom.l(nodesModel,years,converter_techs,vintage);
8494  converter_unitsTotal.fx(nodesModel,years,converter_techs,vintage)
8495    $(converter_usedTech(nodesModel,years,converter_techs,vintage)
8496      and converter_unitBoundsFixed(nodesModel,years,converter_techs))
8497    = converter_unitsTotal.l(nodesModel,years,converter_techs,vintage);
8498   
8499  converter_unitsOnline_MIP.up(timeModelToCalc,nodesModel,years,converter_techs,vintage)
8500      $(converter_usedTech(nodesModel,years,converter_techs,vintage)
8501        and converter_techParam(converter_techs,vintage,"mipDispatch") = 1)
8502      = converter_capacityParam(nodesModel,years,converter_techs,"unitsUpperLimit");
8503   
8504  converter_unitsTotal_MIP.up(nodesModel,years,converter_techs,vintage)
8505      $(converter_usedTech(nodesModel,years,converter_techs,vintage)
8506        and converter_techParam(converter_techs,vintage,"mipUnits") = 1)
8507      = converter_capacityParam(nodesModel,years,converter_techs,"unitsUpperLimit");
8508   
8509  converter_unitsUsingActivity_MIP.up(timeModelToCalc,nodesModel,years,converter_techs,vintage,activity)
8510      $(converter_usedTech(nodesModel,years,converter_techs,vintage)
8511        and (converter_hasMinLoad(converter_techs, vintage)
8512              or converter_hasMaxLoad(converter_techs, vintage)))
8513      = converter_capacityParam(nodesModel,years,converter_techs,"unitsUpperLimit");
8514   
8515  * Add parameter for fixing capacities during myopic runs
8516  parameter converter_unitsDelta(nodesModel,years,converter_techs);
8517   
8518  * ==== declaration of equations ====
8519   
8520  equations
8521    Eq_converter_unitsBalance(nodesModel,years,converter_techs,vintage
8522      ) "Ensures the units balance over the planning period."
8523    Eq_converter_unitsFixedDecom(nodesModel,years,converter_techs,vintage
8524      ) "Restricts the fixed decommissioning of units over the planning period."
8525    Eq_converter_unitsFreeDecom(nodesModel,years,converter_techs,vintage
8526      ) "Restricts the free decommissioning of units over the planning period."
8527    Eq_converter_unitsUpperLimit(nodesModel,years,converter_techs
8528      ) "Upper bound for the total number of units."
8529    Eq_converter_unitsLowerLimit(nodesModel,years,converter_techs
8530      ) "Lower bound for the total number of units."
8531    Eq_converter_unitsFixedLimit(nodesModel,years,converter_techs
8532      ) "Fixed bound for the total number of units."
8533    Eq_converter_unitsTotalMIP(nodesModel,years,converter_techs,vintage
8534      ) "Fixes the total number of units to the corresponding integer variable."
8535    Eq_converter_unitsOnlineMIP(timeModel,nodesModel,years,converter_techs,vintage
8536      ) "Fixes the number of online units to the corresponding integer variable."
8537   
8538    Eq_converter_activityLowerLimit(timeModel,nodesModel,years,converter_techs,vintage
8539      ) "Lower limit on the activity."
8540    Eq_converter_activityUpperLimit(timeModel,nodesModel,years,converter_techs,vintage
8541      ) "Upper limit on the activity."
8542   
8543    Eq_converter_activityFixedLimit(timeModel,nodesModel,years,converter_techs,vintage
8544      ) "Fixed limit on the activity."
8545    Eq_converter_rampPos(timeModel,nodesModel,years,converter_techs,vintage
8546      ) "Positive ramping of unit activity."
8547    Eq_converter_rampNeg(timeModel,nodesModel,years,converter_techs,vintage
8548      ) "Negative ramping of unit activity."
8549    Eq_converter_rampLimit(timeModel,nodesModel,years,converter_techs,vintage
8550      ) "Restrict ramping up of unit activity."
8551   
8552    Eq_converter_unitsOnline(timeModel,nodesModel,years,converter_techs,vintage
8553      ) "Set online units to total number of operational units."
8554    Eq_converter_unitsOnlineUC(timeModel,nodesModel,years,converter_techs,vintage
8555      ) "Allow shutting down units."
8556    Eq_converter_activityStartups(timeModel,nodesModel,years,converter_techs,vintage
8557      ) "Variable counting the number of unit startups."
8558    Eq_converter_activityShutdowns(timeModel,nodesModel,years,converter_techs,vintage
8559      ) "Variable tracking the number of unit shutdowns."
8560    Eq_converter_limitStartups(nodesModel,years,converter_techs,vintage
8561      ) "Limit the number of startup cycles a unit can perform."
8562    Eq_converter_minUptime(timeModel,nodesModel,years,converter_techs,vintage
8563      ) "Require recently started units to remain online for their respective minimum uptime."
8564    Eq_converter_minDowntime(timeModel,nodesModel,years,converter_techs,vintage
8565      ) "Require recently shut down units to remain offline for their respective minimum downtime."
8566    Eq_converter_activityUpperLimitDetailedPartLoadMinReq(timeModel,nodesModel,years,converter_techs,vintage,activity
8567      ) "Limit activity coefficients of activities with a given load requirement or stricter to the number of units in such modes."
8568    Eq_converter_activityUpperLimitDetailedPartLoadMaxReq(timeModel,nodesModel,years,converter_techs,vintage,activity
8569      ) "Limit activity coefficients of activities with a given load requirement or stricter to the number of units in such modes."
8570    Eq_converter_activityLowerLimitDetailedPartLoadMinReq(timeModel,nodesModel,years,converter_techs,vintage,activity
8571      ) "Enforce sufficient activity coefficients of activities to justify all active modes."
8572    Eq_converter_noOnlineIdle(timeModel,nodesModel,years,converter_techs,vintage
8573      ) "Prevent the circumvention of requirements by keeping units online without using any modes."
8574    Eq_converter_noOnlineIdleDetailedPartLoad(timeModel,nodesModel,years,converter_techs,vintage
8575      ) "Prevent the circumvention of requirements by keeping units online without using any modes. Allow more than one mode activation per unit."
8576    Eq_converter_activityUpperLimitPartLoad(timeModel,nodesModel,years,converter_techs,vintage,activity
8577      ) "Limit usage of an activity to corresponding units."
8578    Eq_converter_activityLowerLimitPartLoad(timeModel,nodesModel,years,converter_techs,vintage,activity
8579      ) "Limit usage of an activity to corresponding units."
8580    Eq_converter_activityModeLimit(timeModel,nodesModel,years,converter_techs,vintage,activity
8581      ) "Limit the number of units in one particular mode to the number of operational units."
8582    ;
8583   
8584  * ==== equation definition ====
8585  * // ## Equations
8586  * // ### Converter Units Balance
8587  * // Ensures that the total units are consistent with the built and decommissioned units.
8588  * // {Eq_converter_unitsBalance}
8589  Eq_converter_unitsBalance(nodesModelSel,yearsSel,converter_techs,vintage)
8590      $((converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
8591            or sum(years$sameas(years,yearsSel), converter_usedTech(nodesModelSel,years-1,converter_techs,vintage)))
8592          and not converter_unitBoundsFixed(nodesModelSel,yearsSel,converter_techs))
8593      ..
8594      converter_unitsTotal(nodesModelSel,yearsSel,converter_techs,vintage)
8595      =e=
8596      sum(yearsToCalc$(ord(yearsToCalc) = 1 and sameas(yearsToCalc, yearsSel)),
8597        sum(years$sameas(years, yearsToCalc),
8598          converter_unitsTotal(nodesModelSel,years-1,converter_techs,vintage)
8599            $converter_usedTech(nodesModelSel,years-1,converter_techs,vintage)))
8600      + sum((yearsToCalc)$(ord(yearsToCalc) > 1 and sameas(yearsToCalc, yearsSel)),
8601        converter_unitsTotal(nodesModelSel,yearsToCalc-1,converter_techs,vintage)
8602          $converter_usedTech(nodesModelSel,yearsToCalc-1,converter_techs,vintage))
8603      + converter_unitsBuild(nodesModelSel,yearsSel,converter_techs,vintage)
8604          $converter_availTech(nodesModelSel,yearsSel,converter_techs,vintage)
8605      - converter_unitsDecom(nodesModelSel,yearsSel,converter_techs,vintage)
8606          $converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage);
8607   
8608  * // ### Converter Units Fixed Decommission
8609  * // Restricts the fixed decommissioning of units over the planning period.
8610  * // {Eq_converter_unitsFixedDecom}
8611  Eq_converter_unitsFixedDecom(nodesModelSel,yearsSel,converter_techs,vintage)
8612      $(converter_decomTech(nodesModelSel,yearsSel,converter_techs,vintage)
8613          and not converter_techParam(converter_techs,vintage,"freeDecom") = 1
8614          and not converter_unitBoundsFixed(nodesModelSel,yearsSel,converter_techs))
8615      ..
8616      converter_unitsDecom(nodesModelSel,yearsSel,converter_techs,vintage)
8617      =e=
8618      sum(years$
8619          (converter_availTech(nodesModelSel,years,converter_techs,vintage)
8620            and years.val > sum(yearsToCalc$sameas(yearsToCalc+1, yearsSel), yearsToCalc.val) - converter_techParam(converter_techs,vintage,'lifeTime')
8621            and years.val <= yearsSel.val - converter_techParam(converter_techs,vintage,'lifeTime')),
8622        converter_unitsBuild(nodesModelSel,years,converter_techs,vintage));
8623   
8624  * // ### Converter Units Free Decommission
8625  * // Restricts the free decommissioning of units over the planning period.
8626  * // {Eq_converter_unitsFreeDecom}
8627  Eq_converter_unitsFreeDecom(nodesModelSel,yearsSel,converter_techs,vintage)
8628      $((converter_decomTech(nodesModelSel,yearsSel,converter_techs,vintage)
8629          or converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage))
8630          and converter_techParam(converter_techs,vintage,"freeDecom") = 1)
8631      ..
8632      sum(years$
8633            ((converter_decomTech(nodesModelSel,years,converter_techs,vintage)
8634              or converter_usedTech(nodesModelSel,years,converter_techs,vintage))
8635              and years.val < sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)),
8636          converter_unitsDecom(nodesModelSel,years,converter_techs,vintage))
8637      + sum(yearsToCalc$
8638            ((converter_decomTech(nodesModelSel,yearsToCalc,converter_techs,vintage)
8639              or converter_usedTech(nodesModelSel,yearsToCalc,converter_techs,vintage))
8640              and yearsToCalc.val >= sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
8641              and yearsToCalc.val <= yearsSel.val),
8642          converter_unitsDecom(nodesModelSel,yearsToCalc,converter_techs,vintage))
8643      =g=
8644      sum(years$
8645            (converter_availTech(nodesModelSel,years,converter_techs,vintage)
8646              and years.val < sum(yearsToCalc$(ord(yearsToCalc)=1), yearsToCalc.val) - converter_techParam(converter_techs,vintage,'lifeTime')),
8647          converter_unitsBuild(nodesModelSel,years,converter_techs,vintage))
8648      + sum(yearsToCalc$
8649            (converter_availTech(nodesModelSel,yearsToCalc,converter_techs,vintage)
8650              and yearsToCalc.val >= sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
8651              and yearsToCalc.val <= yearsSel.val - converter_techParam(converter_techs,vintage,'lifeTime')),
8652          converter_unitsBuild(nodesModelSel,yearsToCalc,converter_techs,vintage));
8653   
8654  * // ### Converter Units Upper Limit
8655  * // Upper bound for the total number of units.
8656  * // {Eq_converter_unitsUpperLimit}
8657  Eq_converter_unitsUpperLimit(nodesModelSel,yearsSel,converter_techs)
8658      $(converter_capacityParam(nodesModelSel,yearsSel,converter_techs,'unitsUpperLimit') >= 0
8659          and converter_capacityParam(nodesModelSel,yearsSel,converter_techs,'unitsUpperLimit') < +inf
8660          and converter_capacityParam(nodesModelSel,yearsSel,converter_techs,'unitsUpperLimit')
8661              <> converter_capacityParam(nodesModelSel,yearsSel,converter_techs,'unitsLowerLimit'))
8662      ..
8663      sum(vintage$converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage),
8664          converter_unitsTotal(nodesModelSel,yearsSel,converter_techs,vintage))
8665      =l=
8666      converter_capacityParam(nodesModelSel,yearsSel,converter_techs,"unitsUpperLimit");
8667   
8668  * // ### Converter Units Lower Limit
8669  * // Lower bound for the total number of units.
8670  * // {Eq_converter_unitsLowerLimit}
8671  Eq_converter_unitsLowerLimit(nodesModelSel,yearsSel,converter_techs)
8672      $(converter_capacityParam(nodesModelSel,yearsSel,converter_techs,'unitsLowerLimit') > 0
8673          and converter_capacityParam(nodesModelSel,yearsSel,converter_techs,'unitsLowerLimit')
8674              <> converter_capacityParam(nodesModelSel,yearsSel,converter_techs,'unitsUpperLimit'))
8675      ..
8676      sum(vintage$converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage),
8677          converter_unitsTotal(nodesModelSel,yearsSel,converter_techs,vintage))
8678      =g=
8679      converter_capacityParam(nodesModelSel,yearsSel,converter_techs,"unitsLowerLimit");
8680   
8681  Eq_converter_unitsFixedLimit(nodesModelSel,yearsSel,converter_techs)
8682      $(converter_capacityParam(nodesModelSel,yearsSel,converter_techs,'unitsLowerLimit')
8683          = converter_capacityParam(nodesModelSel,yearsSel,converter_techs,'unitsUpperLimit'))
8684      ..
8685      sum(vintage$converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage),
8686          converter_unitsTotal(nodesModelSel,yearsSel,converter_techs,vintage))
8687      =e=
8688      converter_capacityParam(nodesModelSel,yearsSel,converter_techs,"unitsUpperLimit");
8689   
8690  * // ### Converter Units Total MIP
8691  * // Fixes the total number of units to the corresponding integer variable.
8692  * // {Eq_converter_unitsTotalMIP}
8693  Eq_converter_unitsTotalMIP(nodesModelSel,yearsSel,converter_techs,vintage)
8694      $( converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
8695          and converter_techParam(converter_techs,vintage,"mipUnits") = 1 )
8696      ..
8697      converter_unitsTotal(nodesModelSel,yearsSel,converter_techs,vintage)
8698      =e=
8699      converter_unitsTotal_MIP(nodesModelSel,yearsSel,converter_techs,vintage);
8700   
8701  * // ### Converter Units Online MIP
8702  * // Fixes the number of online units to the corresponding integer variable.
8703  * // {Eq_converter_unitsOnlineMIP}
8704  Eq_converter_unitsOnlineMIP(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
8705      $( converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
8706          and converter_techParam(converter_techs,vintage,"mipDispatch") = 1 )
8707      ..
8708      converter_unitsOnline(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
8709      =e=
8710      converter_unitsOnline_MIP(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage);
8711   
8712  * // ### Converter Activity Lower Limit
8713  * // Lower limit on the activity.
8714  * // {Eq_converter_activityLowerLimit}
8715  Eq_converter_activityLowerLimit(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
8716      $(converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
8717          and converter_activityProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,"lower") > 0
8718          and converter_activityProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,"lower")
8719               <> converter_activityProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,"upper")
8720          and not converter_hasMinLoad(converter_techs, vintage))
8721      ..
8722      sum(activity$converter_usedAct(converter_techs,vintage,activity),
8723          converter_activity(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity)
8724      )
8725      =g=
8726      converter_activityProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,"lower")
8728      * converter_unitsOnline(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage);
8730   
8731  * // ### Converter Activity Upper Limit
8732  * // Upper limit on the activity.
8733  * // {Eq_converter_activityUpperLimit}
8734  Eq_converter_activityUpperLimit(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
8735      $(converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
8736          and converter_activityProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,"upper") >= 0
8737          and converter_activityProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,"upper")
8738               <> converter_activityProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,"lower"))
8739      ..
8740      sum(activity$converter_usedAct(converter_techs,vintage,activity),
8741          converter_activity(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity)
8742      )
8743      =l=
8744      converter_activityProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,"upper")
8746      * converter_unitsOnline(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage);
8748   
8749  Eq_converter_activityFixedLimit(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
8750      $(converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
8751          and converter_activityProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,"lower")
8752               = converter_activityProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,"upper"))
8753      ..
8754      sum(activity$converter_usedAct(converter_techs,vintage,activity),
8755          converter_activity(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity)
8756      )
8757      =e=
8758      converter_activityProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,"upper")
8760      * converter_unitsOnline(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage);
8762   
8763  * // ### Converter Positive Ramping
8764  * // Positive ramping of unit activity.
8765  * // {Eq_converter_rampPos}
8766  Eq_converter_rampPos(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,converter_techs,vintage)
8767    $( converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
8768        and converter_useRampPos(nodesModelSel,yearsSel,converter_techs,vintage))
8769      ..
8770      converter_rampPos(timeModelToCalc,nodesModelSel,yearsSel,converter_techs,vintage)
8771      =g=
8772      sum(activity$converter_usedAct(converter_techs,vintage,activity),
8773              converter_activity(timeModelToCalc,nodesModelSel,yearsSel,converter_techs,vintage,activity)
8774              - converter_activity(timeModelToCalc--1,nodesModelSel,yearsSel,converter_techs,vintage,activity));
8775   
8776  * // ### Converter Negative Ramping
8777  * // Negative ramping of unit activity.
8778  * // {Eq_converter_rampNeg}
8779  Eq_converter_rampNeg(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,converter_techs,vintage)
8780    $( converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
8781        and converter_useRampNeg(nodesModelSel,yearsSel,converter_techs,vintage))
8782      ..
8783      converter_rampNeg(timeModelToCalc,nodesModelSel,yearsSel,converter_techs,vintage)
8784      =g=
8785      - sum(activity$converter_usedAct(converter_techs,vintage,activity),
8786              converter_activity(timeModelToCalc,nodesModelSel,yearsSel,converter_techs,vintage,activity)
8787              - converter_activity(timeModelToCalc--1,nodesModelSel,yearsSel,converter_techs,vintage,activity));
8788   
8789  * // ### Converter Ramping Limit
8790  * // Restrict ramping up of unit activity.
8791  * // {Eq_converter_rampLimit}
8792  Eq_converter_rampLimit(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,converter_techs,vintage)
8793    $( converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
8794          and converter_techParam(converter_techs,vintage,"activityRampLimit") > 0)
8795      ..
8796      sum(activity$converter_usedAct(converter_techs,vintage,activity),
8797              converter_activity(timeModelToCalc,nodesModelSel,yearsSel,converter_techs,vintage,activity)
8798              - converter_activity(timeModelToCalc--1,nodesModelSel,yearsSel,converter_techs,vintage,activity))
8799    =l=
8800    converter_techParam(converter_techs,vintage,"activityRampLimit")
8802      * converter_unitsOnline(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage);
8804   
8805   
8807   
8808  * // ### Converter MIP Units Online
8809  * // Restrict ramping up of unit activity.
8810  * // {Eq_converter_unitsOnline}
8811  Eq_converter_unitsOnline(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
8812      $( converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
8813          and converter_techParam(converter_techs,vintage,"mipDispatch") = 0 )
8814    ..
8815    converter_unitsOnline(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
8816    =e=
8817    converter_unitsTotal(nodesModelSel,yearsSel,converter_techs,vintage)
8818      ;
8819   
8820  * // ### Converter MIP Units Shutting Down
8821  * // Allow shutting down units.
8822  * // {Eq_converter_unitsOnlineUC}
8823  Eq_converter_unitsOnlineUC(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
8824      $( converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
8825          and converter_techParam(converter_techs,vintage,"mipDispatch") = 1 )
8826    ..
8827    converter_unitsOnline(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
8828    =l=
8829    converter_unitsTotal(nodesModelSel,yearsSel,converter_techs,vintage)
8830      ;
8832   
8833  * // ### Converter Activity Startups
8834  * // Variable counting the number of unit startups.
8835  * // {Eq_converter_activityStartups}
8836  Eq_converter_activityStartups(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,converter_techs,vintage)
8837    $( converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
8838          and converter_techParam(converter_techs,vintage,"mipDispatch") = 1 )
8839      ..
8840      converter_unitStartups(timeModelToCalc,nodesModelSel,yearsSel,converter_techs,vintage)
8841      =g=
8842          converter_unitsOnline(timeModelToCalc,nodesModelSel,yearsSel,converter_techs,vintage)
8843      - converter_unitsOnline(timeModelToCalc--1,nodesModelSel,yearsSel,converter_techs,vintage);
8844   
8845  * // ### Converter Activity Shutdowns
8846  * // Variable tracking the number of unit shutdowns.
8847  * // {Eq_converter_activityShutdowns}
8848  Eq_converter_activityShutdowns(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,converter_techs,vintage)
8849    $( converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
8850          and converter_techParam(converter_techs,vintage,"mipDispatch") = 1
8851          and converter_techParam(converter_techs,vintage,"minDowntime") > 0)
8852      ..
8853      converter_unitShutdowns(timeModelToCalc,nodesModelSel,yearsSel,converter_techs,vintage)
8854      =g=
8855          converter_unitsOnline(timeModelToCalc--1,nodesModelSel,yearsSel,converter_techs,vintage)
8856      - converter_unitsOnline(timeModelToCalc,nodesModelSel,yearsSel,converter_techs,vintage);
8857   
8858  * // ### Converter Activity Startup Limit
8859  * // Limit the number of startup cycles a unit can perform.
8860  * // {Eq_converter_limitStartups}
8861  Eq_converter_limitStartups(nodesModelSel,yearsSel,converter_techs,vintage)
8862    $( converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
8863          and converter_techParam(converter_techs,vintage,"mipDispatch") = 1
8864      and converter_techParam(converter_techs,vintage,"startupLimit") > 0)
8865      ..
8866      sum(timeModelToCalc, converter_unitStartups(timeModelToCalc,nodesModelSel,yearsSel,converter_techs,vintage))
8867    =l=
8868    converter_techParam(converter_techs,vintage,"startupLimit")
8869    * converter_unitsTotal(nodesModelSel,yearsSel,converter_techs,vintage);
8870   
8871  alias(timeModelToCalc,ttc);
8872   
8873  * // ### Converter Units Minimum Uptime
8874  * // Require recently started units to remain online for their respective minimum uptime.
8875  * // {Eq_converter_minUptime}
8876  Eq_converter_minUptime(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,converter_techs,vintage)
8877    $( converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
8878          and converter_techParam(converter_techs,vintage,"mipDispatch") = 1
8879      and converter_techParam(converter_techs,vintage,"minUptime") > 0)
8880      ..
8881      sum(ttc$[uptimeSearchRange(ttc) and ord(ttc)<=converter_techParam(converter_techs,vintage,"minUptime")],
8882          converter_unitStartups(ttc+[ord(timeModelToCalc)-converter_techParam(converter_techs,vintage,"minUptime")],
8883              nodesModelSel,yearsSel,converter_techs,vintage))
8884          =l=
8885          converter_unitsOnline(timeModelToCalc,nodesModelSel,yearsSel,converter_techs,vintage);
8886   
8887  * // ### Converter Units Minimum Downtime
8888  * // Require recently shut down units to remain offline for their respective minimum downtime.
8889  * // {Eq_converter_minDowntime}
8890  Eq_converter_minDowntime(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,converter_techs,vintage)
8891    $( converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
8892          and converter_techParam(converter_techs,vintage,"mipDispatch") = 1
8893      and converter_techParam(converter_techs,vintage,"minDowntime") > 0)
8894      ..
8895      sum(ttc$[downtimeSearchRange(ttc) and ord(ttc)<=converter_techParam(converter_techs,vintage,"minDowntime")],
8896          converter_unitShutdowns(ttc+[ord(timeModelToCalc)-converter_techParam(converter_techs,vintage,"minDowntime")],
8897              nodesModelSel,yearsSel,converter_techs,vintage))
8898          =l=
8899          converter_unitsTotal(nodesModelSel,yearsSel,converter_techs,vintage)
8900      - converter_unitsOnline(timeModelToCalc,nodesModelSel,yearsSel,converter_techs,vintage);
8901   
8902  * This equation is meant to cause the units to activate particular mode counters to gain access to the corresponding activities.
8903  * Activities are allowed to be used on units with stricter activity requirements but not the other way around.
8904  alias(activity, act);
8905   
8906  * // ### Converter MIP Units Activity Upper Limit Minimum Required Load
8907  * // Limit activity coefficients of activities with a given load requirement or stricter to the number of units in such modes.
8908  * // {Eq_converter_activityUpperLimitDetailedPartLoadMinReq}
8909  Eq_converter_activityUpperLimitDetailedPartLoadMinReq(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity)
8910    $( converter_usedTechAct(nodesModelSel,yearsSel,converter_techs,vintage,activity)
8911          and converter_hasMinLoad(converter_techs, vintage)
8912          and converter_techParam(converter_techs,vintage,"mipDetailedPartialLoad"))
8913      ..
8914      sum(act$(converter_activityRequirements(converter_techs,vintage,act,"minLoad")
8915                  >= converter_activityRequirements(converter_techs,vintage,activity,"minLoad")
8916               and converter_usedAct(converter_techs,vintage,act)),
8917      converter_activity(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,act))
8918    =l=
8919    converter_activityProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,"upper")
8920      * sum(act$(converter_activityRequirements(converter_techs,vintage,act,"minLoad")
8921                  >= converter_activityRequirements(converter_techs,vintage,activity,"minLoad")
8922                 and converter_usedAct(converter_techs,vintage,act)),
8923      converter_unitsUsingActivity_MIP(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,act));
8924   
8925  * // ### Converter MIP Units Activity Upper Limit Maximum Required Load
8926  * // Limit activity coefficients of activities with a given load requirement or stricter to the number of units in such modes.
8927  * // {Eq_converter_activityUpperLimitDetailedPartLoadMaxReq}
8928  Eq_converter_activityUpperLimitDetailedPartLoadMaxReq(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity)
8929    $( converter_usedTechAct(nodesModelSel,yearsSel,converter_techs,vintage,activity)
8930          and converter_hasMaxLoad(converter_techs,vintage)
8931          and converter_techParam(converter_techs,vintage,"mipDetailedPartialLoad"))
8932      ..
8933      sum(act$(converter_activityRequirements(converter_techs,vintage,act,"maxLoad")
8934                  <= converter_activityRequirements(converter_techs,vintage,activity,"maxLoad")
8935               and converter_usedAct(converter_techs,vintage,act)),
8936      converter_activity(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,act))
8937    =l=
8938      sum(act$(converter_activityRequirements(converter_techs,vintage,act,"maxLoad")
8939                  <= converter_activityRequirements(converter_techs,vintage,activity,"maxLoad")
8940               and converter_usedAct(converter_techs,vintage,act)),
8941      min(converter_activityRequirements(converter_techs,vintage,act,"maxLoad"),
8942            converter_activityProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,"upper"))
8943            * converter_unitsUsingActivity_MIP(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,act));
8944   
8945  * This equation is meant to enforce the lower limit requirements of activities in use.
8946  * Loads produced by activities with less strict requirements can contribute to the minimum load requirement of strict activities but not the other way around,
8947  * because these activities can only run on units in the respectively strict activation state.
8948   
8949  * // ### Converter MIP Units Activity Lower Limit Minimum Required Load
8950  * // Enforce sufficient activity coefficients of activities to justify all active modes.
8951  * // {Eq_converter_activityLowerLimitDetailedPartLoadMinReq}
8952  Eq_converter_activityLowerLimitDetailedPartLoadMinReq(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity)
8953    $( converter_usedTechAct(nodesModelSel,yearsSel,converter_techs,vintage,activity)
8954          and converter_hasMinLoad(converter_techs, vintage)
8955          and converter_techParam(converter_techs,vintage,"mipDetailedPartialLoad"))
8956      ..
8957      sum(act$(converter_activityRequirements(converter_techs,vintage,act,"minLoad")
8958                  <= converter_activityRequirements(converter_techs,vintage,activity,"minLoad")
8959               and converter_usedAct(converter_techs,vintage,act)),
8960      converter_activity(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,act))
8961    =g=
8962      sum(act$(converter_activityRequirements(converter_techs,vintage,act,"minLoad")
8963                  <= converter_activityRequirements(converter_techs,vintage,activity,"minLoad")
8964               and converter_usedAct(converter_techs,vintage,act)),
8965      max(converter_activityRequirements(converter_techs,vintage,act,"minLoad"),
8966            converter_activityProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,"lower"))
8967            * converter_unitsUsingActivity_MIP(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,act));
8968   
8969   
8970  * Simple one-activity-per-unit partial load equations
8971  * // ### Converter MIP Units Activity Upper Limit Partial Load Balance
8972  * // Enforce MIP units partial load upper limit.
8973  * // {Eq_converter_activityUpperLimitPartLoad}
8974  Eq_converter_activityUpperLimitPartLoad(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity)
8975    $( converter_usedTechAct(nodesModelSel,yearsSel,converter_techs,vintage,activity)
8976          and (converter_hasMinLoad(converter_techs, vintage)
8977                or converter_hasMaxLoad(converter_techs, vintage)
8978                or converter_hasConstantFluxInActivity(converter_techs, vintage))
8979          and not converter_techParam(converter_techs,vintage,"mipDetailedPartialLoad"))
8980      ..
8981      converter_activity(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity)
8982    =l=
8983    min(converter_activityRequirements(converter_techs,vintage,activity,"maxLoad"),
8984          converter_activityProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,"upper"))
8985          * converter_unitsUsingActivity_MIP(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity);
8986   
8987  * // ### Converter MIP Units Activity Lower Limit Partial Load Balance
8988  * // Enforce MIP units partial load lower limit.
8989  * // {Eq_converter_activityLowerLimitPartLoad}
8990  Eq_converter_activityLowerLimitPartLoad(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity)
8991    $( converter_usedTechAct(nodesModelSel,yearsSel,converter_techs,vintage,activity)
8992          and (converter_hasMinLoad(converter_techs, vintage)
8993                or converter_hasMaxLoad(converter_techs, vintage))
8994          and not converter_techParam(converter_techs,vintage,"mipDetailedPartialLoad"))
8995      ..
8996      converter_activity(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity)
8997    =g=
8998    max(converter_activityRequirements(converter_techs,vintage,activity,"minLoad"),
8999          converter_activityProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,"lower"))
9000          * converter_unitsUsingActivity_MIP(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity);
9001   
9002  * // ### Converter MIP Units Idle Online Units
9003  * // Counts idle online units at every time step
9004  * // {Eq_converter_noOnlineIdle}
9005  Eq_converter_noOnlineIdle(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
9006    $( converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
9007          and (converter_hasMinLoad(converter_techs, vintage)
9008              or converter_hasMaxLoad(converter_techs, vintage)
9009              or converter_hasConstantFluxInActivity(converter_techs,vintage))
9010          and not converter_techParam(converter_techs,vintage,"mipDetailedPartialLoad"))
9011      ..
9012      converter_unitsOnline(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
9013      =e=
9014      sum(activity$converter_usedAct(converter_techs,vintage,activity),
9015            converter_unitsUsingActivity_MIP(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity));
9016   
9017  * // ### Converter MIP Units Idle Online Units Partial load
9018  * // Counts idle online units at every time step
9019  * // {Eq_converter_noOnlineIdleDetailedPartLoad}
9020  Eq_converter_noOnlineIdleDetailedPartLoad(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
9021    $( converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
9022          and (converter_hasMinLoad(converter_techs, vintage)
9023                  or converter_hasMaxLoad(converter_techs, vintage))
9024          and converter_techParam(converter_techs,vintage,"mipDetailedPartialLoad"))
9025      ..
9026      converter_unitsOnline(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
9027      =l=
9028      sum(activity$converter_usedAct(converter_techs,vintage,activity),
9029            converter_unitsUsingActivity_MIP(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity));
9030   
9031  * // ### Converter MIP activity model limit
9032  * // Converter activity model limit
9033  * // {Eq_converter_activityModeLimit}
9034  Eq_converter_activityModeLimit(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity)
9035    $( converter_usedTechAct(nodesModelSel,yearsSel,converter_techs,vintage,activity)
9036          and (converter_hasMinLoad(converter_techs, vintage)
9037                or converter_hasMaxLoad(converter_techs, vintage))
9038          and converter_techParam(converter_techs,vintage,"mipDetailedPartialLoad"))
9039      ..
9040      converter_unitsOnline(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
9041      =g=
9042      converter_unitsUsingActivity_MIP(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity);
9043   
9044  * ==== model definition ====
9045   
9046  Model M_converter
9047  /
9048    Eq_converter_unitsBalance
9049    Eq_converter_unitsFixedDecom
9050    Eq_converter_unitsFreeDecom
9051    Eq_converter_unitsUpperLimit
9052    Eq_converter_unitsLowerLimit
9053    Eq_converter_unitsFixedLimit
9054    Eq_converter_unitsTotalMIP
9055    Eq_converter_unitsOnlineMIP
9056    Eq_converter_activityUpperLimit
9057    Eq_converter_activityLowerLimit
9058    Eq_converter_activityFixedLimit
9059    Eq_converter_rampPos
9060    Eq_converter_rampNeg
9061    Eq_converter_rampLimit
9063    Eq_converter_unitsOnline
9064    Eq_converter_unitsOnlineUC
9066    Eq_converter_activityStartups
9067    Eq_converter_activityShutdowns
9068    Eq_converter_limitStartups
9069    Eq_converter_minUptime
9070    Eq_converter_minDowntime
9071    Eq_converter_activityUpperLimitDetailedPartLoadMinReq
9072    Eq_converter_activityUpperLimitDetailedPartLoadMaxReq
9073    Eq_converter_activityLowerLimitDetailedPartLoadMinReq
9074    Eq_converter_activityUpperLimitPartLoad
9075    Eq_converter_activityLowerLimitPartLoad
9076    Eq_converter_noOnlineIdle
9077    Eq_converter_noOnlineIdleDetailedPartLoad
9078    Eq_converter_activityModeLimit
9079  /;
INCLUDE    C:\Local\REMix\framework\remix\framework\model\source\core\storage.gms
9081  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
9082  * SPDX-License-Identifier: BSD-3-Clause
9083   
9084  * // # core_storage
9085  * // The equations in this file describe the storages in the model.
9086   
9087  * // ## Variables
9088  * // {special_table_storage_variables}
9629   
9630   
9631  * === SoC mappings ===
9632  set storage_usedTechSoCState(storage_techs,vintage,soc_statesIn);
9633  storage_usedTechSoCState(storage_techs,vintage,soc_states(soc_statesIn))
9634      $(storage_SoCParam(storage_techs,vintage,soc_states,"eRate") > 0
9635        and storage_SoCParam(storage_techs,vintage,soc_states,"cRate") > 0)
9636      = yes;
9637   
9638  set storage_validSoCRange(storage_techs,vintage);
9639  storage_validSoCRange(storage_techs,vintage)
9640      = smax(soc_states$storage_usedTechSoCState(storage_techs,vintage,soc_states), storage_SoCParam(storage_techs,vintage,soc_states,"SoC")) = 1
9641        and smin(soc_states$storage_usedTechSoCState(storage_techs,vintage,soc_states), storage_SoCParam(storage_techs,vintage,soc_states,"SoC")) = 0;
9642   
9643  * === Translate SoC parameters to ordered SoC-set ===
9644  * set ordered_socs / soc1*soc20 /;
9645  * alias(soc_states, soc_states_c);
9646  * parameter storage_SoCParam_ordered(storage_techs,vintage,ordered_socs,pc_storage_SoCParam);
9647  * storage_SoCParam_ordered(storage_techs,vintage,ordered_socs,pc_storage_SoCParam)
9648  *     $storage_validSoCRange(storage_techs,vintage)
9649  *     = sum(soc_states$(ord(ordered_socs) = sum(soc_states_c$(storage_SoCParam(storage_techs,vintage,soc_states_c,"SoC") <= storage_SoCParam(storage_techs,vintage,soc_states,"SoC")
9650  *                                                            and storage_usedTechSoCState(storage_techs,vintage,soc_states_c)), 1)
9651  *                       and storage_usedTechSoCState(storage_techs,vintage,soc_states)),
9652  *           storage_SoCParam(storage_techs,vintage,soc_states,pc_storage_SoCParam));
9653  *
9654  * set storage_usedTechSoCStateOrdered(storage_techs,vintage,ordered_socs);
9655  * storage_usedTechSoCStateOrdered(storage_techs,vintage,ordered_socs)
9656  *     $(storage_SoCParam_ordered(storage_techs,vintage,ordered_socs,"eRate") > 0
9657  *       and storage_SoCParam_ordered(storage_techs,vintage,ordered_socs,"cRate") > 0)
9658  *     = yes;
9659   
9660  parameter storage_bigM(storage_techs,vintage);
9661  storage_bigM(storage_techs,vintage) = smax((nodesModel,years), storage_reservoirParam(nodesModel,years,storage_techs,"unitsUpperLimit"));
9662  storage_bigM(storage_techs,vintage)$(storage_bigM(storage_techs,vintage) = INF) = 10000;
9663  storage_bigM(storage_techs,vintage)$(storage_bigM(storage_techs,vintage) = 0) = 10000;
9664   
9665  * === calculate the number of years represented by single year to calc ===
9666  alias(yearsToCalc, yearsToCalc_a)
9667  parameter representedYears(years);
9668  representedYears(years) = 0.5 *(smin(yearsToCalc$(yearsToCalc.val > years.val or yearsToCalc.val = smax(yearsToCalc_a, yearsToCalc_a.val)), yearsToCalc.val)
9669                                  - smax(yearsToCalc$(yearsToCalc.val < years.val or yearsToCalc.val = smin(yearsToCalc_a, yearsToCalc_a.val)), yearsToCalc.val));
9670   
9671  * ==== calculation of mappings ====
9672   
9673  * Technologies with a lifeTime > 0 are available
9674  set storage_availTech(nodesModel,years,storage_techs,vintage);
9675  storage_availTech(nodesModel,years,storage_techs,vintage)
9676      $(vintage.val = smax(vintage_a$(vintage_a.val <= years.val
9677          and storage_techParam(storage_techs,vintage_a,"lifeTime") > 0), vintage_a.val)) = yes;
9678   
9679  * Technologies to optimize become unavailable if they have an unitsUpperLimit of 0
9680  storage_availTech(nodesModel,years,storage_techs,vintage)
9681      $(yearsToCalc(years) and storage_reservoirParam(nodesModel,years,storage_techs,"unitsUpperLimit") = 0 ) = no;
9682   
9683  * Technologies already built become unavailable if they have an unitsBuild of 0
9684  storage_availTech(nodesModel,years,storage_techs,vintage)
9685      $( ( not yearsToCalc(years)) and storage_reservoirParam(nodesModel,years,storage_techs,"unitsBuild") = 0 ) = no;
9686   
9687  * Used technologies are available technologies over their technical lifeTime
9688  set storage_usedTech(nodesModel,years,storage_techs,vintage);
9689  storage_usedTech(nodesModel,years,storage_techs,vintage)
9690      $(vintage.val <= years.val
9691          and years.val < smax(years_a$storage_availTech(nodesModel,years_a,storage_techs,vintage),
9692                                              years_a.val + storage_techParam(storage_techs,vintage,"lifeTime"))
9693          ) = yes;
9694   
9695  * Technologies have to be decomissioned in the interval of first avail + lifetime to last avail + lifetime
9696  set storage_decomTech(nodesModel,years,storage_techs,vintage);
9697  storage_decomTech(nodesModel,years,storage_techs,vintage)
9698    $(sum(years_a$storage_usedTech(nodesModel,years_a,storage_techs,vintage), 1)
9699      and sum(yearsToCalc
9700        $(sameas(years, yearsToCalc)
9701          and yearsToCalc.val >= smin(years_a$storage_availTech(nodesModel,years_a,storage_techs,vintage), years_a.val) + storage_techParam(storage_techs,vintage,"lifeTime")
9702          and yearsToCalc.val <= smax(years_a$storage_availTech(nodesModel,years_a,storage_techs,vintage), years_a.val) + storage_techParam(storage_techs,vintage,"lifeTime")), 1))
9703    = yes;
9704   
9705  * Extend the decom frame to the year after the last year of usedTech
9706  storage_decomTech(nodesModel,yearsToCalc,storage_techs,vintage)
9707    $(storage_usedTech(nodesModel,yearsToCalc-1,storage_techs,vintage)
9708      and storage_decomTech(nodesModel,yearsToCalc-1,storage_techs,vintage))
9709    = yes;
9710   
9711  * Mapping for used commodities
9712  set storage_usedCom(storage_techs,vintage,commodity);
9713  option storage_usedCom < storage_sizeParam;
9714   
9715  set storage_usedTechCom(nodesModel,years,storage_techs,vintage,commodity);
9716  storage_usedTechCom(nodesModel,years,storage_techs,vintage,commodity)
9717      $(storage_usedTech(nodesModel,years,storage_techs,vintage)
9718          and storage_usedCom(storage_techs,vintage,commodity))
9719      = yes;
9720   
9721   
9722  * // ## Load units from gdx file
9724   
9725  * ==== aggregation of profiles ====
9726  * derive upper and lower profiles then aggregate
9727  set storage_level_hasProfileIn(nodesData,years,storage_techs,pc_storage_levelProfile);
9728  option storage_level_hasProfileIn < storage_levelProfileIn;
9729   
9730  set storage_level_hasProfile(nodesModel,years,storage_techs,pc_storage_levelProfile);
9731  storage_level_hasProfile(nodesModelToCalc,yearsToCalc,storage_techs,pc_storage_levelProfile)
9732      = sum(nodesData$aggregateNodesModel(nodesData,nodesModelToCalc),
9733              storage_level_hasProfileIn(nodesData,yearsToCalc,storage_techs,pc_storage_levelProfile));
9734   
9735  * weighted average for a real sum of units upper limits, plain average if one region has an upper limit of inf
9736  parameter storage_levelProfile(timeModel,nodesModel,years,storage_techs,vintage,pc_storage_levelProfile);
9737  storage_levelProfile(timeModelToCalc,storage_usedTech(nodesModelToCalc,yearsToCalc,storage_techs,vintage),"upper")
9738      = storage_techParam(storage_techs,vintage,"levelUpperLimit");
9739  storage_levelProfile(timeModelToCalc,storage_usedTech(nodesModelToCalc,yearsToCalc,storage_techs,vintage),"lower")
9740      = storage_techParam(storage_techs,vintage,"levelLowerLimit");
9741   
9742  set storage_finiteUnitLimit(nodesModelToCalc,yearsToCalc,storage_techs);
9743  storage_finiteUnitLimit(nodesModelToCalc,yearsToCalc,storage_techs) = sum(nodesData$aggregateNodesModel(nodesData,nodesModelToCalc), storage_reservoirParamIn(nodesData,yearsToCalc,storage_techs,"unitsUpperLimit")) > 0
9744                                                   and sum(nodesData$aggregateNodesModel(nodesData,nodesModelToCalc), storage_reservoirParamIn(nodesData,yearsToCalc,storage_techs,"unitsUpperLimit")) < inf;
9745   
9746  storage_levelProfile(timeModelToCalc,storage_usedTech(nodesModelToCalc,yearsToCalc,storage_techs,vintage),pc_storage_levelProfile)
9747      $( storage_level_hasProfile(nodesModelToCalc,yearsToCalc,storage_techs,pc_storage_levelProfile)
9748          and storage_finiteUnitLimit(nodesModelToCalc,yearsToCalc,storage_techs))
9749      = sum(nodesData$aggregateNodesModel(nodesData,nodesModelToCalc),
9750              sum(timeData$timeMapping(timeData,timeModelToCalc),
9751                    storage_levelProfileIn(timeData,nodesData,yearsToCalc,storage_techs,pc_storage_levelProfile))
9752                / timeLength(timeModelToCalc)
9753              * storage_reservoirParamIn(nodesData,yearsToCalc,storage_techs,"unitsUpperLimit"))
9754      / sum(nodesData$aggregateNodesModel(nodesData,nodesModelToCalc),
9755              storage_reservoirParamIn(nodesData,yearsToCalc,storage_techs,"unitsUpperLimit"));
9756   
9757  storage_levelProfile(timeModelToCalc,storage_usedTech(nodesModelToCalc,yearsToCalc,storage_techs,vintage),pc_storage_levelProfile)
9758      $( storage_level_hasProfile(nodesModelToCalc,yearsToCalc,storage_techs,pc_storage_levelProfile)
9759          and sum(nodesData$aggregateNodesModel(nodesData,nodesModelToCalc),
9760                      storage_reservoirParamIn(nodesData,yearsToCalc,storage_techs,"unitsUpperLimit")) = inf )
9761      = sum(nodesData$(aggregateNodesModel(nodesData,nodesModelToCalc)
9762                      and storage_reservoirParamIn(nodesData,yearsToCalc,storage_techs,"unitsUpperLimit") = inf ),
9763              sum(timeData$timeMapping(timeData,timeModelToCalc),
9764                    storage_levelProfileIn(timeData,nodesData,yearsToCalc,storage_techs,pc_storage_levelProfile))
9765                / timeLength(timeModelToCalc))
9766      / sum(nodesData$(aggregateNodesModel(nodesData,nodesModelToCalc)
9767                      and storage_reservoirParamIn(nodesData,yearsToCalc,storage_techs,"unitsUpperLimit") = inf ), 1);
9768   
9769  * for fixed profiles overwrite upper and lower profile
9770  storage_levelProfile(timeModelToCalc,nodesModelToCalc,yearsToCalc,storage_techs,vintage,"lower")
9771      $storage_level_hasProfile(nodesModelToCalc,yearsToCalc,storage_techs,"fixed")
9772      = storage_levelProfile(timeModelToCalc,nodesModelToCalc,yearsToCalc,storage_techs,vintage,"fixed");
9773   
9774  storage_levelProfile(timeModelToCalc,nodesModelToCalc,yearsToCalc,storage_techs,vintage,"upper")
9775      $storage_level_hasProfile(nodesModelToCalc,yearsToCalc,storage_techs,"fixed")
9776      = storage_levelProfile(timeModelToCalc,nodesModelToCalc,yearsToCalc,storage_techs,vintage,"fixed");
9777   
9778   
9779  * ==== parameter modifications ====
9780  storage_reservoirParam(nodesModel,years,storage_techs,"unitsLowerLimit")
9781          $sum(vintage, storage_techParam(storage_techs,vintage,"mipUnits"))
9782      = floor(storage_reservoirParam(nodesModel,years,storage_techs,"unitsLowerLimit"));
9783  storage_reservoirParam(nodesModel,years,storage_techs,"unitsUpperLimit")
9784          $sum(vintage, storage_techParam(storage_techs,vintage,"mipUnits"))
9785      = ceil(storage_reservoirParam(nodesModel,years,storage_techs,"unitsUpperLimit"));
9786   
9787   
9788  * ==== definition of variables ====
9789   
9790  * Initialise variables for unitsBuild
9791  storage_unitsBuild.l(nodesModel,years,storage_techs,vintage)
9792      $storage_availTech(nodesModel,years,storage_techs,vintage)
9793      = storage_reservoirParam(nodesModel,years,storage_techs,"unitsBuild");
9794  storage_unitsBuild.lo(nodesModel,yearsToCalc,storage_techs,vintage)
9795      $storage_availTech(nodesModel,yearsToCalc,storage_techs,vintage)
9796      = storage_unitsBuild.l(nodesModel,yearsToCalc,storage_techs,vintage);
9797  storage_unitsBuild.fx(nodesModel,years,storage_techs,vintage)
9798      $storage_reservoirParam(nodesModel,years,storage_techs,"noExpansion")
9799      = storage_unitsBuild.l(nodesModel,years,storage_techs,vintage);
9800   
9801  * Initialise variables for unitsDecom
9802  storage_unitsDecom.l(nodesModel,years,storage_techs,vintage)
9803      $(storage_decomTech(nodesModel,years,storage_techs,vintage)
9804        and years.val < sum(yearsToCalc$(ord(yearsToCalc) = 1), yearsToCalc.val))
9805      = sum((years_a,years_aa)$(sameas(years-1, years_aa)
9806                        and years_a.val > years_aa.val - storage_techParam(storage_techs,vintage,'lifeTime')
9807                        and years_a.val <= years.val - storage_techParam(storage_techs,vintage,'lifeTime')
9808                        and storage_availTech(nodesModel,years_a,storage_techs,vintage)),
9809          storage_unitsBuild.l(nodesModel,years_a,storage_techs,vintage));
9810   
9811  storage_unitsDecom.l(nodesModel,yearsToCalc,storage_techs,vintage)
9812    $storage_decomTech(nodesModel,yearsToCalc,storage_techs,vintage)
9813    = sum(years$
9814          (years.val < sum(yearsToCalc_a$(ord(yearsToCalc_a) = 1), yearsToCalc_a.val)
9815            and storage_availTech(nodesModel,years,storage_techs,vintage)
9816            and years.val > sum(years_a$sameas(years_a, yearsToCalc-1), years_a.val) - storage_techParam(storage_techs,vintage,'lifeTime')
9817            and years.val <= yearsToCalc.val - storage_techParam(storage_techs,vintage,'lifeTime')),
9818        storage_unitsBuild.l(nodesModel,years,storage_techs,vintage))
9819      + sum(yearsToCalc_a$
9820          (yearsToCalc_a.val < sum(yearsToCalc_aa$(ord(yearsToCalc_aa) > 1), yearsToCalc_a.val)
9821            and storage_availTech(nodesModel,yearsToCalc_a,storage_techs,vintage)
9822            and yearsToCalc_a.val > sum(years_a$sameas(years_a, yearsToCalc-1), years_a.val) - storage_techParam(storage_techs,vintage,'lifeTime')
9823            and yearsToCalc_a.val <= yearsToCalc.val - storage_techParam(storage_techs,vintage,'lifeTime')),
9824        storage_unitsBuild.l(nodesModel,yearsToCalc_a,storage_techs,vintage));
9825        ;
9826   
9827  storage_unitsDecom.lo(nodesModel,yearsToCalc,storage_techs,vintage)
9828      $(storage_usedTech(nodesModel,yearsToCalc,storage_techs,vintage)
9829        and not storage_techParam(storage_techs,vintage,"freeDecom"))
9830      = storage_unitsDecom.l(nodesModel,yearsToCalc,storage_techs,vintage)
9831   
9832  * Calculate planned unit expansion
9833  parameter storage_unitsPlanned(nodesModel,years,storage_techs,vintage);
9834  storage_unitsPlanned(nodesModel,years,storage_techs,vintage) = 0;
9835  loop(years,
9836    storage_unitsPlanned(nodesModel,years,storage_techs,vintage)
9837      =
9838      storage_unitsPlanned(nodesModel,years-1,storage_techs,vintage)
9839          $storage_usedTech(nodesModel,years-1,storage_techs,vintage)
9840      + storage_unitsBuild.l(nodesModel,years,storage_techs,vintage)
9841          $storage_availTech(nodesModel,years,storage_techs,vintage)
9842      - storage_unitsDecom.l(nodesModel,years,storage_techs,vintage)
9843          $storage_usedTech(nodesModel,years,storage_techs,vintage);
9844  );
9845   
9846  * Set initial state for planned units
9847  storage_unitsTotal.l(nodesModel,years,storage_techs,vintage)
9848    = storage_unitsPlanned(nodesModel,years,storage_techs,vintage)
9849   
9850  * Calculate if planned unit expansion is bounded by upper and lower limits
9851  set storage_unitBoundsFixed(nodesModel,years,storage_techs);
9852  storage_unitBoundsFixed(nodesModel,years,storage_techs)
9853    $(sum(vintage$storage_usedTech(nodesModel,years,storage_techs,vintage),
9854          storage_unitsPlanned(nodesModel,years,storage_techs,vintage))
9855      = storage_reservoirParam(nodesModel,years,storage_techs,"unitsUpperLimit")
9856    and sum(vintage$storage_usedTech(nodesModel,years,storage_techs,vintage),
9857          storage_unitsPlanned(nodesModel,years,storage_techs,vintage))
9858      = storage_reservoirParam(nodesModel,years,storage_techs,"unitsLowerLimit"))
9859    = yes;
9860   
9861  * Fix unitsBuild, unitsDecom, unitsTotal if levels are predetermined by upper and lower limits
9862  storage_unitsBuild.fx(nodesModel,years,storage_techs,vintage)
9863    $(storage_availTech(nodesModel,years,storage_techs,vintage)
9864      and storage_unitBoundsFixed(nodesModel,years,storage_techs))
9865    = storage_unitsBuild.l(nodesModel,years,storage_techs,vintage);
9866  storage_unitsDecom.fx(nodesModel,years,storage_techs,vintage)
9867    $(storage_usedTech(nodesModel,years,storage_techs,vintage)
9868      and storage_unitBoundsFixed(nodesModel,years,storage_techs))
9869    = storage_unitsDecom.l(nodesModel,years,storage_techs,vintage);
9870  storage_unitsTotal.fx(nodesModel,years,storage_techs,vintage)
9871    $(storage_usedTech(nodesModel,years,storage_techs,vintage)
9872      and storage_unitBoundsFixed(nodesModel,years,storage_techs))
9873    = storage_unitsTotal.l(nodesModel,years,storage_techs,vintage);
9874   
9875  storage_unitsTotal_MIP.up(nodesModel,years,storage_techs,vintage)
9876      $(storage_usedTech(nodesModel,years,storage_techs,vintage)
9877        and storage_techParam(storage_techs,vintage,"mipUnits") = 1)
9878      = storage_reservoirParam(nodesModel,years,storage_techs,"unitsUpperLimit");
9879   
9880  * Add parameter for fixing capacities during myopic runs
9881  parameter storage_unitsDelta(nodesModel,years,storage_techs);
9882   
9883   
9884  * ==== declaration of equations ====
9885   
9886  equations
9887    Eq_storage_unitsBalance(nodesModel,years,storage_techs,vintage
9888      ) "Ensures the units balance over the planning period."
9889    Eq_storage_unitsFixedDecom(nodesModel,years,storage_techs,vintage
9890      ) "Restricts the fixed decommissioning of units over the planning period."
9891    Eq_storage_unitsFreeDecom(nodesModel,years,storage_techs,vintage
9892      ) "Restricts the free decommissioning of units over the planning period."
9893    Eq_storage_unitsUpperLimit(nodesModel,years,storage_techs
9894      ) "Upper bound for the total number of units."
9895    Eq_storage_unitsLowerLimit(nodesModel,years,storage_techs
9896      ) "Lower bound for the total number of units."
9897    Eq_storage_unitsTotalMIP(nodesModel,years,storage_techs,vintage
9898      ) "Fixes the total number of units to the corresponding integer variable."
9899   
9900    Eq_storage_levelUpperLimit(timeModel,nodesModel,years,storage_techs,vintage,commodity
9901      ) "Upper bound for the total number of units."
9902    Eq_storage_levelUpperLimit_degradation(timeModel,nodesModel,years,storage_techs,vintage,commodity
9903      ) "Upper bound for the total number of units if the storage technology accounts for degradation."
9904    Eq_storage_levelLowerLimit(timeModel,nodesModel,years,storage_techs,vintage,commodity
9905      ) "Lower bound for the total number of units."
9906    Eq_storage_losses(timeModel,nodesModel,years,storage_techs,vintage,commodity
9907      ) "Stored commodities lost due to self discharge."
9908    Eq_storage_unitsBalanceStates(nodesModel,years,storage_techs,vintage
9909      ) "Currently available units must have been built at some point in time and have some state of degradation."
9910    Eq_storage_unitsUpperLimitPerState(nodesModel,years,yearsCom,storage_techs,vintage
9911      ) "There cannot be more units from a certain year than the amount built in that year."
9912    Eq_storage_unitsStatesNoRecovery(nodesModel,years,yearsCom,storage_techs,vintage,degradation_states
9913      ) "There is no recovery."
9914    Eq_storage_cRateLimit(timeModel,nodesModel,years,storage_techs,vintage,commodity
9915      ) "Limit charging rate based on unit capacity."
9916    Eq_storage_eRateLimit(timeModel,nodesModel,years,storage_techs,vintage,commodity
9917      ) "Limit discharging rate based on unit capacity."
9918    Eq_storage_charge(timeModel,nodesModel,years,storage_techs,vintage,commodity
9919      ) "Positive change in state of charge is influx."
9920    Eq_storage_discharge(timeModel,nodesModel,years,storage_techs,vintage,commodity
9921      ) "Negative change in state of charge is outflux."
9922   
9923    Eq_storage_levelStateSum(timeModel,nodesModel,years,storage_techs,vintage,commodity
9924      ) "Sum of degradation class storage levels is the global level."
9925    Eq_storage_levelUpperLimitPerAge(timeModel,nodesModel,years,yearsCom,storage_techs,vintage,commodity
9926      ) "Upper bound for units of a certain state."
9927    Eq_storage_chargingPerAge(timeModel,nodesModel,years,yearsCom,storage_techs,vintage,commodity
9928      ) "Positive change in state of charge is influx for each degradation class."
9929    Eq_storage_chargeBasedDegradationDistribution(nodesModel,years,yearsCom,storage_techs,vintage,commodity
9930      ) "Determine degradation states of storage units."
9931    Eq_storage_unitsDecomStateSum(nodesModel,years,storage_techs,vintage
9932      ) "All decomminsioned units must have a degradation state."
9933    Eq_storage_unitsDegradation(nodesModel,years,yearsCom,storage_techs,vintage,degradation_states
9934      ) "Only allow one range of degradation states per year and age group."
9935    Eq_storage_unitsDegradation_onlyOneRange(nodesModel,years,yearsCom,storage_techs,vintage
9936      ) "Limit usable degradation states to one range, i.e., two neighboring states."
9937   
9938    Eq_storage_unitsSoC_sum(timeModel,nodesModel,years,storage_techs,vintage
9939      ) "Every unit has a state of charge."
9940    Eq_storage_levelSoC(timeModel,nodesModel,years,storage_techs,vintage,commodity
9941      ) "Every unit has a state of charge."
9942    Eq_storage_unitsSoC(timeModel,nodesModel,years,storage_techs,vintage,soc_statesIn
9943      ) "Number of units in particular SoC."
9944    Eq_storage_unitsSoC_onlyOneRange(timeModel,nodesModel,years,storage_techs,vintage
9945      ) "Limit usable SoC states to one range, i.e., two neighboring states."
9946   
9947    Eq_storage_cRateLimit_SoC(timeModel,nodesModel,years,storage_techs,vintage,commodity
9948      ) "Limit charging rate based on unit capacity."
9949    Eq_storage_eRateLimit_SoC(timeModel,nodesModel,years,storage_techs,vintage,commodity
9950      ) "Limit discharging rate based on unit capacity."
9951    ;
9952   
9953  * ==== equation definition ====
9954  * // ## Equations
9955  * // ### Storage Units Balance
9956  * // Ensures that the total units are consistent with the built and decommissioned units.
9957  * // {Eq_storage_unitsBalance}
9958  Eq_storage_unitsBalance(nodesModelSel,yearsSel,storage_techs,vintage)
9959      $((storage_usedTech(nodesModelSel,yearsSel,storage_techs,vintage)
9960            or sum(years$sameas(years,yearsSel), storage_usedTech(nodesModelSel,years-1,storage_techs,vintage)))
9961          and not storage_unitBoundsFixed(nodesModelSel,yearsSel,storage_techs))
9962      ..
9963      storage_unitsTotal(nodesModelSel,yearsSel,storage_techs,vintage)
9964      =e=
9965          sum(yearsToCalc$(ord(yearsToCalc) = 1 and sameas(yearsToCalc, yearsSel)),
9966        sum(years$sameas(years, yearsToCalc),
9967          storage_unitsTotal(nodesModelSel,years-1,storage_techs,vintage)
9968            $storage_usedTech(nodesModelSel,years-1,storage_techs,vintage)))
9969      + sum((yearsToCalc)$(ord(yearsToCalc) > 1 and sameas(yearsToCalc, yearsSel)),
9970        storage_unitsTotal(nodesModelSel,yearsToCalc-1,storage_techs,vintage)
9971          $storage_usedTech(nodesModelSel,yearsToCalc-1,storage_techs,vintage))
9972      + storage_unitsBuild(nodesModelSel,yearsSel,storage_techs,vintage)
9973          $storage_availTech(nodesModelSel,yearsSel,storage_techs,vintage)
9974      - storage_unitsDecom(nodesModelSel,yearsSel,storage_techs,vintage)
9975          $storage_usedTech(nodesModelSel,yearsSel,storage_techs,vintage);
9976   
9977  * // ### Storage Units Fixed Decommission
9978  * // Restricts the fixed decommissioning of storage units over the planning period.
9979  * // {Eq_storage_unitsFixedDecom}
9980  Eq_storage_unitsFixedDecom(nodesModelSel,yearsSel,storage_techs,vintage)
9981      $(storage_decomTech(nodesModelSel,yearsSel,storage_techs,vintage)
9982          and not storage_techParam(storage_techs,vintage,"freeDecom") = 1
9983          and not storage_unitBoundsFixed(nodesModelSel,yearsSel,storage_techs))
9984      ..
9985      storage_unitsDecom(nodesModelSel,yearsSel,storage_techs,vintage)
9986      =e=
9987      sum(years$
9988          (storage_availTech(nodesModelSel,years,storage_techs,vintage)
9989            and years.val > sum(yearsToCalc$sameas(yearsToCalc+1, yearsSel), yearsToCalc.val) - storage_techParam(storage_techs,vintage,'lifeTime')
9990            and years.val <= yearsSel.val - storage_techParam(storage_techs,vintage,'lifeTime')),
9991        storage_unitsBuild(nodesModelSel,years,storage_techs,vintage));
9992   
9993  * // ### Storage Units Free Decomission
9994  * // Restricts the free decommissioning of storage units over the planning period.
9995  * // {Eq_storage_unitsFreeDecom}
9996  Eq_storage_unitsFreeDecom(nodesModelSel,yearsSel,storage_techs,vintage)
9997      $((storage_decomTech(nodesModelSel,yearsSel,storage_techs,vintage)
9998          or storage_usedTech(nodesModelSel,yearsSel,storage_techs,vintage))
9999          and storage_techParam(storage_techs,vintage,"freeDecom") = 1)
10000      ..
10001      sum(years$
10002            ((storage_decomTech(nodesModelSel,years,storage_techs,vintage)
10003              or storage_usedTech(nodesModelSel,years,storage_techs,vintage))
10004              and years.val < sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)),
10005          storage_unitsDecom(nodesModelSel,years,storage_techs,vintage))
10006      + sum(yearsToCalc$
10007            ((storage_decomTech(nodesModelSel,yearsToCalc,storage_techs,vintage)
10008              or storage_usedTech(nodesModelSel,yearsToCalc,storage_techs,vintage))
10009              and yearsToCalc.val >= sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
10010              and yearsToCalc.val <= yearsSel.val),
10011          storage_unitsDecom(nodesModelSel,yearsToCalc,storage_techs,vintage))
10012      =g=
10013      sum(years$
10014            (storage_availTech(nodesModelSel,years,storage_techs,vintage)
10015              and years.val < sum(yearsToCalc$(ord(yearsToCalc)=1), yearsToCalc.val) - storage_techParam(storage_techs,vintage,'lifeTime')),
10016          storage_unitsBuild(nodesModelSel,years,storage_techs,vintage))
10017      + sum(yearsToCalc$
10018            (storage_availTech(nodesModelSel,yearsToCalc,storage_techs,vintage)
10019              and yearsToCalc.val >= sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
10020              and yearsToCalc.val <= yearsSel.val - storage_techParam(storage_techs,vintage,'lifeTime')),
10021          storage_unitsBuild(nodesModelSel,yearsToCalc,storage_techs,vintage));
10022   
10023  * // ### Storage Units Lower Limit
10024  * // Lower bound for the total number of storage units.
10025  * // {Eq_storage_unitsLowerLimit}
10026  Eq_storage_unitsLowerLimit(nodesModelSel,yearsSel,storage_techs)
10027      $(storage_reservoirParam(nodesModelSel,yearsSel,storage_techs,'unitsLowerLimit') > 0 )
10028      ..
10029      sum(vintage$storage_usedTech(nodesModelSel,yearsSel,storage_techs,vintage),
10030          storage_unitsTotal(nodesModelSel,yearsSel,storage_techs,vintage))
10031      =g=
10032      storage_reservoirParam(nodesModelSel,yearsSel,storage_techs,"unitsLowerLimit");
10033   
10034  * // ### Storage Units Upper Limit
10035  * // Upper bound for the total number of storage units.
10036  * // {Eq_storage_unitsUpperLimit}
10037  Eq_storage_unitsUpperLimit(nodesModelSel,yearsSel,storage_techs)
10038      $(storage_reservoirParam(nodesModelSel,yearsSel,storage_techs,'unitsUpperLimit') >= 0
10039          and storage_reservoirParam(nodesModelSel,yearsSel,storage_techs,'unitsUpperLimit') < +inf )
10040      ..
10041      sum(vintage$storage_usedTech(nodesModelSel,yearsSel,storage_techs,vintage),
10042          storage_unitsTotal(nodesModelSel,yearsSel,storage_techs,vintage))
10043      =l=
10044      storage_reservoirParam(nodesModelSel,yearsSel,storage_techs,"unitsUpperLimit");
10045   
10046  * // ### Storage Units Total MIP
10047  * // Fixes the total number of storage units to the corresponding integer variable.
10048  * // {Eq_storage_unitsTotalMIP}
10049  Eq_storage_unitsTotalMIP(nodesModelSel,yearsSel,storage_techs,vintage)
10050      $( storage_usedTech(nodesModelSel,yearsSel,storage_techs,vintage)
10051          and storage_techParam(storage_techs,vintage,"mipUnits") = 1 )
10052      ..
10053      storage_unitsTotal(nodesModelSel,yearsSel,storage_techs,vintage)
10054      =e=
10055      storage_unitsTotal_MIP(nodesModelSel,yearsSel,storage_techs,vintage);
10056   
10057  * // ### Storage Level Lower Limit
10058  * // Lower limit on the storage level.
10059  * // {Eq_storage_levelLowerLimit}
10060  Eq_storage_levelLowerLimit(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
10061      $(storage_usedTechCom(nodesModelSel,yearsSel,storage_techs,vintage,commodity)
10062          and storage_levelProfile(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,"lower") > 0)
10063      ..
10064      storage_level(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
10065      =g=
10066      storage_levelProfile(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,"lower")
10067      * storage_sizeParam(storage_techs,vintage,commodity,"size")
10068      * storage_unitsTotal(nodesModelSel,yearsSel,storage_techs,vintage);
10069   
10070  * // ### Storage Level Upper Limit
10071  * // Upper limit on the storage level.
10072  * // {Eq_storage_levelUpperLimit}
10073  Eq_storage_levelUpperLimit(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
10074      $(storage_usedTechCom(nodesModelSel,yearsSel,storage_techs,vintage,commodity)
10075          and not storage_hasDegradation(storage_techs,vintage)
10076          and storage_levelProfile(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,"upper") >= 0)
10077      ..
10078      storage_level(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
10079      =l=
10080      storage_levelProfile(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,"upper")
10081      * storage_sizeParam(storage_techs,vintage,commodity,"size")
10082      * storage_unitsTotal(nodesModelSel,yearsSel,storage_techs,vintage);
10083   
10084  * // ### Storage Level Upper Limit (degradation)
10085  * // Upper limit on the storage level if the storage technology accounts for degradation.
10086  * // {Eq_storage_levelUpperLimit_degradation}
10087  Eq_storage_levelUpperLimit_degradation(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
10088      $(storage_usedTechCom(nodesModelSel,yearsSel,storage_techs,vintage,commodity)
10089          and storage_hasDegradation(storage_techs,vintage)
10090          and storage_levelProfile(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,"upper") >= 0)
10091      ..
10092      storage_level(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
10093      =l=
10094      storage_levelProfile(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,"upper")
10095      * storage_sizeParam(storage_techs,vintage,commodity,"size")
10096      * sum((degradation_states,yearsCom)$storage_usedDegradation(storage_techs,vintage,degradation_states),
10097              (storage_degradationParam(storage_techs,vintage,degradation_states,"remainingCapacity")
10098                - (yearsSel.val - yearsCom.val) * storage_techParam(storage_techs,vintage,"annualDegradation"))
10099                * storage_unitsStateTracker(nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,degradation_states));
10100   
10101  * // ### Storage Unit States Sum (degradation)
10102  * // The number of units in all degradation state must match the total unit number.
10103  * // {Eq_storage_unitsBalanceStates}
10104  Eq_storage_unitsBalanceStates(nodesModelSel,yearsSel,storage_techs,vintage)
10105      $(storage_usedTech(nodesModelSel,yearsSel,storage_techs,vintage)
10106        and storage_hasDegradation(storage_techs,vintage))
10107      ..
10108      storage_unitsTotal(nodesModelSel,yearsSel,storage_techs,vintage)
10109      =e=
10110      sum((yearsCom,degradation_states)$storage_usedDegradation(storage_techs,vintage,degradation_states),
10111            storage_unitsStateTracker(nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,degradation_states));
10112   
10113  * // ### Storage Unit States Upper Limit(degradation)
10114  * // The states of all commissioned units in one year (unitsBuilt) must either still be tracked or have been decommissioned.
10115  * // {Eq_storage_unitsUpperLimitPerState}
10116  Eq_storage_unitsUpperLimitPerState(nodesModelSel,yearsSel,yearsCom,storage_techs,vintage)
10117      $(storage_usedTech(nodesModelSel,yearsSel,storage_techs,vintage)
10118          and storage_hasDegradation(storage_techs,vintage))
10119      ..
10120      sum(degradation_states$storage_usedDegradation(storage_techs,vintage,degradation_states),
10121            storage_unitsStateTracker(nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,degradation_states)
10122            + sum(years$(years.val <= yearsSel.val),
10123                  storage_unitsStateTrackerDecom(nodesModelSel,years,yearsCom,storage_techs,vintage,degradation_states)))
10124      =e=
10125      storage_unitsBuild(nodesModelSel,yearsCom,storage_techs,vintage)$(yearsCom.val <= yearsSel.val);
10126   
10127  * // ### Storage Unit States Progression (degradation)
10128  * // Unit recovery by reassigning the storage cycles to other units is disabled. Therefore, the number of units in a particular degradation state can only increase if the number in a less degraded state is decreased by at least the same amount.
10129  * // {Eq_storage_unitsStatesNoRecovery}
10130  alias(degradation_states, dc_states);
10131  Eq_storage_unitsStatesNoRecovery(nodesModelSel,yearsSel(yearsToCalc),yearsCom,storage_techs,vintage,degradation_states)
10132      $(storage_usedTech(nodesModelSel,yearsSel,storage_techs,vintage)
10133        and yearsToCalc.val > yearsCom.val
10134        and storage_usedDegradation(storage_techs,vintage,degradation_states))
10135      ..
10136      sum(dc_states$(storage_usedDegradation(storage_techs,vintage,dc_states)
10137                and storage_degradationParam(storage_techs,vintage,dc_states,"maxFullCycles") <= storage_degradationParam(storage_techs,vintage,degradation_states,"maxFullCycles")),
10138              storage_unitsStateTracker(nodesModelSel,yearsToCalc,yearsCom,storage_techs,vintage,dc_states)
10139              + sum(years$(years.val <= yearsToCalc.val), storage_unitsStateTrackerDecom(nodesModelSel,years,yearsCom,storage_techs,vintage,dc_states)))
10140      =l=
10141      sum(dc_states$(storage_usedDegradation(storage_techs,vintage,dc_states)
10142                      and storage_degradationParam(storage_techs,vintage,dc_states,"maxFullCycles") <= storage_degradationParam(storage_techs,vintage,degradation_states,"maxFullCycles")),
10143              storage_unitsStateTracker(nodesModelSel,yearsToCalc-1,yearsCom,storage_techs,vintage,dc_states)
10144              + sum(years$(years.val < yearsToCalc.val), storage_unitsStateTrackerDecom(nodesModelSel,years,yearsCom,storage_techs,vintage,dc_states)));
10145   
10146  * // ### Storage Losses
10147  * // Accumulation of storage losses.
10148  * // {Eq_storage_losses}
10149  Eq_storage_losses(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,storage_techs,vintage,commodity)
10150      $storage_usedTechCom(nodesModelSel,yearsSel,storage_techs,vintage,commodity)
10151      ..
10152      storage_losses(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
10153      =e=
10154      - storage_level(timeModelToCalc--1,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
10155        * storage_sizeParam(storage_techs,vintage,commodity,"selfdischarge")
10156      + storage_sizeParam(storage_techs,vintage,commodity,"selfdischargeAbs")
10157      + (storage_techParam(storage_techs,vintage,"chargingLoss")
10158          /(1 - storage_techParam(storage_techs,vintage,"chargingLoss")))
10159        * storage_charge(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
10160          $(storage_techParam(storage_techs,vintage,"chargingLoss") > 0)
10161      + storage_techParam(storage_techs,vintage,"dischargingLoss")
10162        * storage_discharge(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
10163          $(storage_techParam(storage_techs,vintage,"dischargingLoss") > 0)
10164      - storage_sizeParam(storage_techs,vintage,commodity,"size")
10165        * sum(soc_states$(storage_usedTechSoCState(storage_techs,vintage,soc_states)
10166                          and storage_validSoCRange(storage_techs,vintage)),
10167              storage_unitsSoC(timeModelToCalc--1,nodesModelSel,yearsSel,storage_techs,vintage,soc_states)
10168              * storage_SoCParam(storage_techs,vintage,soc_states,"SoC")
10169              * storage_SoCParam(storage_techs,vintage,soc_states,"selfdischarge"));
10170   
10171  * // ### C-Rate Limit
10172  * // The increase in storage level per time step, i.e., the charging rate, is limited relative to the storage capacity.
10173  * // {Eq_storage_cRateLimit}
10174  Eq_storage_cRateLimit(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,storage_techs,vintage,commodity)
10175      $(storage_usedTechCom(nodesModelSel,yearsSel,storage_techs,vintage,commodity)
10176        and storage_techParam(storage_techs,vintage,"maxCRate") > 0)
10177      ..
10178      storage_level(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
10179      - storage_level(timeModelToCalc--1,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
10180      =l=
10181      storage_techParam(storage_techs,vintage,"maxCRate")
10182      * storage_sizeParam(storage_techs,vintage,commodity,"size")
10183      * storage_unitsTotal(nodesModelSel,yearsSel,storage_techs,vintage);
10184   
10185  * // ### E-Rate Limit
10186  * // The decrease in storage level per time step, i.e., the discharging rate, is limited relative to the storage capacity.
10187  * // {Eq_storage_eRateLimit}
10188  Eq_storage_eRateLimit(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,storage_techs,vintage,commodity)
10189      $(storage_usedTechCom(nodesModelSel,yearsSel,storage_techs,vintage,commodity)
10190        and storage_techParam(storage_techs,vintage,"maxERate") > 0)
10191      ..
10192      storage_level(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
10193      - storage_level(timeModelToCalc--1,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
10194      =g=
10195      - storage_techParam(storage_techs,vintage,"maxERate")
10196      * storage_sizeParam(storage_techs,vintage,commodity,"size")
10197      * storage_unitsTotal(nodesModelSel,yearsSel,storage_techs,vintage);
10198   
10199  * // ### Storage Charging
10200  * // Increases in storage levels are accounted as charging amounts.
10201  * // {Eq_storage_charge}
10202  Eq_storage_charge(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,storage_techs,vintage,commodity)
10203      $(storage_usedTechCom(nodesModelSel,yearsSel,storage_techs,vintage,commodity)
10204        and storage_techParam(storage_techs,vintage,"chargingLoss") > 0)
10205      ..
10206      storage_charge(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
10207      =g=
10208      storage_level(timeModelToCalc,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
10209      - storage_level(timeModelToCalc--1,nodesModelSel,yearsSel,storage_techs,vintage,commodity);
10210   
10211  * // ### Storage Discharging
10212  * // Decreases in storage levels are accounted as discharging amounts.
10213  * // {Eq_storage_discharge}
10214  Eq_storage_discharge(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,storage_techs,vintage,commodity)
10215      $(storage_usedTechCom(nodesModelSel,yearsSel,storage_techs,vintage,commodity)
10216        and storage_techParam(storage_techs,vintage,"dischargingLoss") > 0)
10217      ..
10218      storage_discharge(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
10219      =g=
10220      storage_level(timeModelToCalc--1,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
10221      - storage_level(timeModelToCalc,nodesModelSel,yearsSel,storage_techs,vintage,commodity);
10222   
10223  * // ### Storage Level Sum (degradation)
10224  * // The storage level is accounted individually by commissioning year in the case of degradation in order to prohibit the model to assign pre-existing storage cycles to newly built storage reservoirs and thereby avoiding degradation. All those storage levels represent the total storage level.
10225  * // {Eq_storage_levelStateSum}
10226  Eq_storage_levelStateSum(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
10227      $(storage_usedTechCom(nodesModelSel,yearsSel,storage_techs,vintage,commodity)
10228        and storage_techParam(storage_techs,vintage,"usageDegradation"))
10229      ..
10230      storage_level(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
10231      =e=
10232      sum(yearsCom, storage_levelPerAge(timeModelSel,nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,commodity));
10233   
10234  * // ### Storage Level Upper Limit per Age Group (degradation)
10235  * // Upper limit on the storage level per commissioning year if the storage technology accounts for degradation.
10236  * // {Eq_storage_levelUpperLimitPerAge}
10237  Eq_storage_levelUpperLimitPerAge(timeModelSel,nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,commodity)
10238      $(storage_usedTechCom(nodesModelSel,yearsSel,storage_techs,vintage,commodity)
10239        and storage_techParam(storage_techs,vintage,"usageDegradation"))
10240      ..
10241      storage_levelPerAge(timeModelSel,nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,commodity)
10242      =l=
10243      storage_techParam(storage_techs,vintage,"levelUpperLimit")
10244      * storage_sizeParam(storage_techs,vintage,commodity,"size")
10245      * sum(degradation_states,
10246              (storage_degradationParam(storage_techs,vintage,degradation_states,"remainingCapacity")
10247                - (yearsSel.val - yearsCom.val) * storage_techParam(storage_techs,vintage,"annualDegradation"))
10248                * storage_unitsStateTracker(nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,degradation_states));
10249   
10250  * // ### Storage Cycle Distribution to Degradation States per Commissioning Year (degradation)
10251  * // The charging amounts are converted to equivalent full cycles which then must be represented by an adequate distribution of degradation states.
10252  * // {Eq_storage_chargeBasedDegradationDistribution}
10253  alias(years, prev_years);
10254  Eq_storage_chargeBasedDegradationDistribution(nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,commodity)
10255      $(storage_usedTechCom(nodesModelSel,yearsSel,storage_techs,vintage,commodity)
10256        and storage_techParam(storage_techs,vintage,"usageDegradation"))
10257      ..
10258      sum(prev_years$(prev_years.val <= yearsSel.val), representedYears(prev_years)
10259          * sum(timeModel, storage_chargePerAge(timeModel,nodesModelSel,prev_years,yearsCom,storage_techs,vintage,commodity)))
10260      =l=
10261      storage_sizeParam(storage_techs,vintage,commodity,"size")
10262      * sum(dc_states$storage_usedDegradation(storage_techs,vintage,dc_states),
10263          storage_degradationParam(storage_techs,vintage,dc_states,"maxFullCycles")
10264          * (storage_unitsStateTracker(nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,dc_states)
10265             + sum(prev_years$(prev_years.val <= yearsSel.val), storage_unitsStateTrackerDecom(nodesModelSel,prev_years,yearsCom,storage_techs,vintage,dc_states))));
10266   
10267  * // ### Storage Charging per Commissioning Year (degradation)
10268  * // Increases in storage levels are accounted as charging amounts.
10269  * // {Eq_storage_chargingPerAge}
10270  Eq_storage_chargingPerAge(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,commodity)
10271      $(storage_usedTechCom(nodesModelSel,yearsSel,storage_techs,vintage,commodity)
10272        and storage_techParam(storage_techs,vintage,"usageDegradation"))
10273      ..
10274      storage_chargePerAge(timeModelSel,nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,commodity)
10275      =g=
10276      storage_levelPerAge(timeModelToCalc,nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,commodity)
10277      - storage_levelPerAge(timeModelToCalc--1,nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,commodity);
10278   
10279  * // ### Storage Unit Decommissioning States Sum (degradation)
10280  * // The number of decommissioned units in all degradation state must match the total decommissioning unit number.
10281  * // {Eq_storage_unitsDecomStateSum}
10282  Eq_storage_unitsDecomStateSum(nodesModelSel,yearsSel,storage_techs,vintage)
10283      $(storage_techParam(storage_techs,vintage,"usageDegradation"))
10284      ..
10285      storage_unitsDecom(nodesModelSel,yearsSel,storage_techs,vintage)
10286      =e=
10287      sum((yearsCom,degradation_states)$storage_usedDegradation(storage_techs,vintage,degradation_states),
10288          storage_unitsStateTrackerDecom(nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,degradation_states));
10289   
10290  * // ### Storage Unit Sequential Degradation (degradation)
10291  * // Only active degradation ranges, i.e., two neighboring degradation states, can be used.
10292  * // {Eq_storage_unitsDegradation}
10293  alias(degradation_states, degradation_states_a, degradation_states_b);
10294  Eq_storage_unitsDegradation(nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,degradation_states)
10295      $(storage_techParam(storage_techs,vintage,"usageDegradation")
10296        and storage_techParam(storage_techs,vintage,"sequentialDegradationStates"))
10297      ..
10298      sum(degradation_states_a$((storage_degradationParam(storage_techs,vintage,degradation_states_a,"maxFullCycles") = storage_degradationParam(storage_techs,vintage,degradation_states,"maxFullCycles")
10299                        or storage_degradationParam(storage_techs,vintage,degradation_states_a,"maxFullCycles")
10300                                         = smax(degradation_states_b$(storage_degradationParam(storage_techs,vintage,degradation_states_b,"maxFullCycles") < storage_degradationParam(storage_techs,vintage,degradation_states,"maxFullCycles")
10301                                                              and storage_usedDegradation(storage_techs,vintage,degradation_states_b)),
10302                                                              storage_degradationParam(storage_techs,vintage,degradation_states_b,"maxFullCycles")))
10303                        and storage_usedDegradation(storage_techs,vintage,degradation_states_a)),
10304          storage_unitsStateTracker_activeRange(nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,degradation_states_a))
10305      * storage_bigM(storage_techs,vintage)
10306      =g=
10307      storage_unitsStateTracker(nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,degradation_states);
10308   
10309  * // ### Storage Unit Sequential Degradation Range (degradation)
10310  * // Only one degradation range can be active.
10311  * // {Eq_storage_unitsDegradation_onlyOneRange}
10312  Eq_storage_unitsDegradation_onlyOneRange(nodesModelSel,yearsSel,yearsCom,storage_techs,vintage)
10313      $(storage_techParam(storage_techs,vintage,"usageDegradation") and storage_techParam(storage_techs,vintage,"sequentialDegradationStates"))
10314      ..
10315      sum(degradation_states$storage_usedDegradation(storage_techs,vintage,degradation_states),
10316            storage_unitsStateTracker_activeRange(nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,degradation_states))
10317      =e= 1;
10318   
10319  * // ### Storage Unit Sequential State of Charge (SoC)
10320  * // Only active state of charge ranges, i.e., two neighboring states of charge, can be used.
10321  * // {Eq_storage_unitsSoC}
10322  alias(soc_states, soc_states_a, soc_states_b);
10323  Eq_storage_unitsSoC(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,storage_techs,vintage,soc_states)
10324      $(storage_validSoCRange(storage_techs,vintage) and storage_techParam(storage_techs,vintage,"sequentialSoC"))
10325      ..
10326      sum(soc_states_a$((storage_SoCParam(storage_techs,vintage,soc_states_a,"SoC") = storage_SoCParam(storage_techs,vintage,soc_states,"SoC")
10327                        or storage_SoCParam(storage_techs,vintage,soc_states_a,"SoC")
10328                                         = smax(soc_states_b$(storage_SoCParam(storage_techs,vintage,soc_states_b,"SoC") < storage_SoCParam(storage_techs,vintage,soc_states,"SoC")
10329                                                              and storage_usedTechSoCState(storage_techs,vintage,soc_states_b)),
10330                                                              storage_SoCParam(storage_techs,vintage,soc_states_b,"SoC")))
10331                        and storage_usedTechSoCState(storage_techs,vintage,soc_states_a)),
10332          storage_unitsSoC_activeRange(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,soc_states_a))
10333      * storage_bigM(storage_techs,vintage)
10334      =g=
10335      storage_unitsSoC(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,soc_states);
10336   
10337  * // ### Storage Unit Sequential State of Charge Range (SoC)
10338  * // Only one state of charge range can be active.
10339  * // {Eq_storage_unitsSoC_onlyOneRange}
10340  Eq_storage_unitsSoC_onlyOneRange(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,storage_techs,vintage)
10341      $(storage_validSoCRange(storage_techs,vintage) and storage_techParam(storage_techs,vintage,"sequentialSoC"))
10342      ..
10343      sum(soc_states$storage_usedTechSoCState(storage_techs,vintage,soc_states),
10344            storage_unitsSoC_activeRange(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,soc_states)) =e= 1;
10345   
10346  * // ### Storage Unit State of Charge Sum (SoC)
10347  * // Each storage unit must have one state of charge.
10348  * // {Eq_storage_unitsSoC_sum}
10349  Eq_storage_unitsSoC_sum(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,storage_techs,vintage)
10350      $storage_validSoCRange(storage_techs,vintage)
10351      ..
10352      storage_unitsTotal(nodesModelSel,yearsSel,storage_techs,vintage)
10353      =e=
10354      sum(soc_states$storage_usedTechSoCState(storage_techs,vintage,soc_states),
10355            storage_unitsSoC(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,soc_states));
10356   
10357  * // ### Storage Level State of Charge Sum (SoC)
10358  * // The total storage level must be represented by units in their specific states of charge.
10359  * // {Eq_storage_levelSoC}
10360  Eq_storage_levelSoC(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,storage_techs,vintage,commodity)
10361      $(storage_validSoCRange(storage_techs,vintage) and storage_usedTechCom(nodesModelSel,yearsSel,storage_techs,vintage,commodity))
10362      ..
10363      storage_level(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
10364      =e=
10365      storage_sizeParam(storage_techs,vintage,commodity,"size")
10366      * sum(soc_states$storage_usedTechSoCState(storage_techs,vintage,soc_states),
10367              storage_unitsSoC(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,soc_states)
10368              * storage_SoCParam(storage_techs,vintage,soc_states,"SoC"));
10369   
10370  * // ### C-Rate Limit (SoC)
10371  * // The increase in storage level per time step, i.e., the charging rate, is limited relative to the storage capacity. The coefficients can vary between states of charge.
10372  * // {Eq_storage_cRateLimit_SoC}
10373  Eq_storage_cRateLimit_SoC(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,storage_techs,vintage,commodity)
10374      $(storage_usedTechCom(nodesModelSel,yearsSel,storage_techs,vintage,commodity)
10375        and storage_validSoCRange(storage_techs,vintage)
10376        and sum(soc_states, storage_SoCParam(storage_techs,vintage,soc_states,"cRate")) < inf)
10377      ..
10378      storage_level(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
10379      - storage_level(timeModelToCalc--1,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
10380      =l=
10381      storage_sizeParam(storage_techs,vintage,commodity,"size")
10382      * sum(soc_states$storage_usedTechSoCState(storage_techs,vintage,soc_states),
10383                      storage_SoCParam(storage_techs,vintage,soc_states,"cRate")
10384                      * storage_unitsSoC(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,soc_states));
10385   
10386  * // ### E-Rate Limit (SoC)
10387  * // The decrease in storage level per time step, i.e., the discharging rate, is limited relative to the storage capacity. The coefficients can vary between states of charge.
10388  * // {Eq_storage_cRateLimit_SoC}
10389  Eq_storage_eRateLimit_SoC(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,storage_techs,vintage,commodity)
10390      $(storage_usedTechCom(nodesModelSel,yearsSel,storage_techs,vintage,commodity)
10391        and storage_validSoCRange(storage_techs,vintage)
10392        and sum(soc_states, storage_SoCParam(storage_techs,vintage,soc_states,"eRate")) < inf)
10393      ..
10394      storage_level(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
10395      - storage_level(timeModelToCalc--1,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
10396      =g=
10397      - storage_sizeParam(storage_techs,vintage,commodity,"size")
10398      * sum(soc_states$storage_usedTechSoCState(storage_techs,vintage,soc_states),
10399                      storage_SoCParam(storage_techs,vintage,soc_states,"eRate")
10400                      * storage_unitsSoC(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,soc_states));
10401   
10402   
10403  * ==== model definition ====
10404   
10405  Model M_storage
10406  /
10407    Eq_storage_unitsBalance
10408    Eq_storage_unitsFixedDecom
10409    Eq_storage_unitsFreeDecom
10410    Eq_storage_unitsLowerLimit
10411    Eq_storage_unitsUpperLimit
10412    Eq_storage_levelUpperLimit_degradation
10413    Eq_storage_unitsTotalMIP
10414    Eq_storage_levelLowerLimit
10415    Eq_storage_levelUpperLimit
10417    Eq_storage_losses
10419    Eq_storage_unitsBalanceStates
10420    Eq_storage_unitsUpperLimitPerState
10421    Eq_storage_unitsStatesNoRecovery
10422    Eq_storage_cRateLimit
10423    Eq_storage_eRateLimit
10424    Eq_storage_charge
10425    Eq_storage_discharge
10426    Eq_storage_levelStateSum
10427    Eq_storage_levelUpperLimitPerAge
10428    Eq_storage_chargeBasedDegradationDistribution
10429    Eq_storage_chargingPerAge
10430    Eq_storage_unitsDecomStateSum
10431    Eq_storage_unitsDegradation
10432    Eq_storage_unitsDegradation_onlyOneRange
10433   
10434    Eq_storage_unitsSoC
10435    Eq_storage_unitsSoC_sum
10436    Eq_storage_unitsSoC_onlyOneRange
10437    Eq_storage_levelSoC
10438    Eq_storage_cRateLimit_SoC
10439    Eq_storage_eRateLimit_SoC
10440  /;
INCLUDE    C:\Local\REMix\framework\remix\framework\model\source\core\transfer.gms
10442  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
10443  * SPDX-License-Identifier: BSD-3-Clause
10444   
10445  * // # core_transfer
10446  * // The equations in this file describe the commodity transfer in the model.
10447   
10448  * // ## Variables
10449  * // {special_table_transfer_variables}
10452   
10457   
10734   
10735  parameter transfer_linksParam(linksModel,years,transfer_techs,pc_transfer_linksParam);
10736  transfer_linksParam(linksModelToCalc,years,transfer_techs,pc_transfer_linksParam)
10737      = sum(linksData$links_aggregate(linksModelToCalc,linksData), transfer_linksParamIn(linksData,years,transfer_techs,pc_transfer_linksParam));
10738   
10739  * // ## Load links from gdx file
10741   
10742   
10743  set transfer_hasflowProfileIn(linksData,years,transfer_techs,pc_transfer_flowProfile);
10744  option transfer_hasflowProfileIn < transfer_flowProfileIn;
10745   
10746  * === modify transfer_flowProfileIn vector to fill with default values, in case profile is not specified ===
10747  transfer_linksParamIn(linksData,years,transfer_techs,"flowAlongLimit")
10748      $(not transfer_linksParamIn(linksData,years,transfer_techs,"limitFlows"))
10749      = 1;
10750   
10751  transfer_linksParamIn(linksData,years,transfer_techs,"flowAgainstLimit")
10752      $(not transfer_linksParamIn(linksData,years,transfer_techs,"limitFlows"))
10753      = 1;
10754   
10755  transfer_flowProfileIn(timeData,linksData,years,transfer_techs,"along")
10756      $(not transfer_hasflowProfileIn(linksData,years,transfer_techs,"along"))
10757      = transfer_linksParamIn(linksData,years,transfer_techs,"flowAlongLimit");
10758   
10759  transfer_flowProfileIn(timeData,linksData,years,transfer_techs,"against")
10760      $(not transfer_hasflowProfileIn(linksData,years,transfer_techs,"against"))
10761      = transfer_linksParamIn(linksData,years,transfer_techs,"flowAgainstLimit");
10762   
10763  * aggregate time dimension
10764  parameter transfer_flowProfileIn_aggTime(timeModel,linksData,yearsToCalc,transfer_techs,pc_transfer_flowProfile);
10765  transfer_flowProfileIn_aggTime(timeModelToCalc,linksData,yearsToCalc,transfer_techs,pc_transfer_flowProfile)
10766      $transfer_hasflowProfileIn(linksData,yearsToCalc,transfer_techs,pc_transfer_flowProfile)
10767      = sum(timeData$timeMapping(timeData,timeModelToCalc),
10768            transfer_flowProfileIn(timeData,linksData,yearsToCalc,transfer_techs,pc_transfer_flowProfile)
10769            / timeLength(timeModelToCalc));
10770  option clear = transfer_flowProfileIn;
10771   
10772  transfer_flowProfileIn_aggTime(timeModelToCalc,linksData,yearsToCalc,transfer_techs,pc_transfer_flowProfile)
10773      $(not transfer_hasflowProfileIn(linksData,yearsToCalc,transfer_techs,pc_transfer_flowProfile) and
10774        not transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"limitFlows"))
10775      = 1;
10776   
10777  transfer_flowProfileIn_aggTime(timeModelToCalc,linksData,yearsToCalc,transfer_techs,"along")
10778      $(not transfer_hasflowProfileIn(linksData,yearsToCalc,transfer_techs,"along") and
10779        transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"limitFlows"))
10780      = transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"flowAlongLimit");
10781   
10782  transfer_flowProfileIn_aggTime(timeModelToCalc,linksData,yearsToCalc,transfer_techs,"against")
10783      $(not transfer_hasflowProfileIn(linksData,yearsToCalc,transfer_techs,"against") and
10784        transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"limitFlows"))
10785      = transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"flowAgainstLimit");
10786   
10787  set transfer_finiteLinkLimit(linksModel,years,transfer_techs);
10788  transfer_finiteLinkLimit(linksModelToCalc,yearsToCalc,transfer_techs)
10789      = sum(linksData$links_aggregate(linksModelToCalc,linksData), transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"linksUpperLimit")) > 0
10790          and sum(linksData$links_aggregate(linksModelToCalc,linksData), transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"linksUpperLimit")) < inf;
10791   
10792  set transfer_infiniteLinkLimit(linksModel,years,transfer_techs);
10793  transfer_infiniteLinkLimit(linksModelToCalc,yearsToCalc,transfer_techs)
10794      = sum(linksData$links_aggregate(linksModelToCalc,linksData), transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"linksUpperLimit")) = inf;
10796   
10797  parameter transfer_lengthParam(linksModel,link_types,pc_transfer_lengthParam);
10798  transfer_lengthParam(linksModelToCalc,link_types,pc_transfer_lengthParam)
10799      = sum(linksData$links_aggregate(linksModelToCalc,linksData), transfer_lengthParamIn(linksData,link_types,pc_transfer_lengthParam))
10800          / sum(linksData$links_aggregate(linksModelToCalc,linksData), 1);
10801   
10802  parameter transfer_gridSegments(linksModel,transfer_techs,gridSegments,pc_transfer_gridSegments);
10803  transfer_gridSegments(linksModelToCalc,transfer_techs,gridSegments,pc_transfer_gridSegments)
10804      = smax(linksData$links_aggregate(linksModelToCalc,linksData), transfer_gridSegmentsIn(linksData,transfer_techs,gridSegments,pc_transfer_gridSegments));
10805   
10806  parameter transfer_dcopf_Xtech(linksModel,years,transfer_techs,vintage,gridSegments);
10807  transfer_dcopf_Xtech(linksModelToCalc,yearsToCalc,transfer_techs,vintage,gridSegments)
10808      $(transfer_gridSegments(linksModelToCalc,transfer_techs,gridSegments,"useDCopf")
10809          and transfer_linksParam(linksModelToCalc,yearsToCalc,transfer_techs,"circuits") > 0
10810          and sum(link_types, transfer_reactPerLength(transfer_techs,vintage,link_types,"reactPerLength")) > 0 )
10811      = (1 / sum(linksData
10812                  $links_aggregate(linksModelToCalc,linksData),
10813              1 / ( sum(link_types,
10814                          transfer_lengthParamIn(linksData,link_types,"length")
10815                          * transfer_reactPerLength(transfer_techs,vintage,link_types,"reactPerLength"))
10816                      / transfer_linksParam(linksModelToCalc,yearsToCalc,transfer_techs,"circuits"))));
10817   
10818  set transfer_hasflowProfile(linksModel,years,transfer_techs,pc_transfer_flowProfile);
10819  transfer_hasflowProfile(linksModelToCalc,yearsToCalc,transfer_techs,pc_transfer_flowProfile)
10820      = sum(linksData$links_aggregate(linksModelToCalc,linksData),
10821              transfer_hasflowProfileIn(linksData,yearsToCalc,transfer_techs,pc_transfer_flowProfile));
10822   
10823  * ==== parameter modifications ====
10824  transfer_linksParam(linksModelToCalc,yearsToCalc,transfer_techs,"linksLowerLimit")
10825      $sum(vintage, transfer_techParam(transfer_techs,vintage,"mipLinks"))
10826      = floor(transfer_linksParam(linksModelToCalc,yearsToCalc,transfer_techs,"linksLowerLimit"));
10827  transfer_linksParam(linksModelToCalc,yearsToCalc,transfer_techs,"linksUpperLimit")
10828      $sum(vintage, transfer_techParam(transfer_techs,vintage,"mipLinks"))
10829      = ceil(transfer_linksParam(linksModelToCalc,yearsToCalc,transfer_techs,"linksUpperLimit"));
10830   
10831   
10832  * ==== calculation of mappings ====
10833   
10834  * Technologies with a lifeTime > 0 are available
10835  set transfer_availTech(linksModel,years,transfer_techs,vintage);
10836  transfer_availTech(linksModel,years,transfer_techs,vintage)
10837      $(vintage.val = smax(vintage_a$(vintage_a.val <= years.val
10838          and transfer_techParam(transfer_techs,vintage_a,"lifeTime") > 0), vintage_a.val)) = yes;
10839   
10840  * Technologies to optimize become unavailable if they have an linksUpperLimit of 0
10841  transfer_availTech(linksModelToCalc,years,transfer_techs,vintage)
10842      $(yearsToCalc(years) and transfer_linksParam(linksModelToCalc,years,transfer_techs,"linksUpperLimit") = 0 ) = no;
10843   
10844  * Technologies already built become unavailable if they have an linksBuild of 0
10845  transfer_availTech(linksModelToCalc,years,transfer_techs,vintage)
10846      $( ( not yearsToCalc(years)) and transfer_linksParam(linksModelToCalc,years,transfer_techs,"linksBuild") = 0 ) = no;
10847   
10848  * Used technologies are available technologies over their technical lifeTime
10849  set transfer_usedTech(linksModel,years,transfer_techs,vintage);
10850  transfer_usedTech(linksModelToCalc,years,transfer_techs,vintage)
10851      $(vintage.val <= years.val
10852          and years.val < smax(years_a$transfer_availTech(linksModelToCalc,years_a,transfer_techs,vintage),
10853                                  years_a.val + transfer_techParam(transfer_techs,vintage,"lifeTime"))
10854          ) = yes;
10855   
10856  * Technologies have to be decomissioned in the interval of first avail + lifetime to last avail + lifetime
10857  set transfer_decomTech(linksModel,years,transfer_techs,vintage);
10858  transfer_decomTech(linksModel,years,transfer_techs,vintage)
10859    $(sum(years_a$transfer_usedTech(linksModel,years_a,transfer_techs,vintage), 1)
10860      and sum(yearsToCalc
10861        $(sameas(years, yearsToCalc)
10862          and yearsToCalc.val >= smin(years_a$transfer_availTech(linksModel,years_a,transfer_techs,vintage), years_a.val) + transfer_techParam(transfer_techs,vintage,"lifeTime")
10863          and yearsToCalc.val <= smax(years_a$transfer_availTech(linksModel,years_a,transfer_techs,vintage), years_a.val) + transfer_techParam(transfer_techs,vintage,"lifeTime")), 1))
10864    = yes;
10865   
10866  * Extend the decom frame to the year after the last year of usedTech
10867  transfer_decomTech(linksModel,yearsToCalc,transfer_techs,vintage)
10868    $(transfer_usedTech(linksModel,yearsToCalc-1,transfer_techs,vintage)
10869      and transfer_decomTech(linksModel,yearsToCalc-1,transfer_techs,vintage))
10870    = yes;
10871   
10872  parameter transfer_flowProfile(timeModel,linksModel,years,transfer_techs,vintage,pc_transfer_flowProfile);
10873   
10874  transfer_flowProfile(timeModelToCalc,linksModelToCalc,yearsToCalc,transfer_techs,vintage,"along")
10875      $transfer_finiteLinkLimit(linksModelToCalc,yearsToCalc,transfer_techs)
10876      = (sum(linksData$(links_aggregate(linksModelToCalc,linksData)
10877                       and transfer_incidenceData_flip(linksData) = 1),
10878              transfer_flowProfileIn_aggTime(timeModelToCalc,linksData,yearsToCalc,transfer_techs,"along")
10879              * transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"linksUpperLimit"))
10880          + sum(linksData$(links_aggregate(linksModelToCalc,linksData)
10881                          and transfer_incidenceData_flip(linksData) = -1),
10882              transfer_flowProfileIn_aggTime(timeModelToCalc,linksData,yearsToCalc,transfer_techs,"against")
10883              * transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"linksUpperLimit")))
10884      / sum(linksData$links_aggregate(linksModelToCalc,linksData),
10885              transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"linksUpperLimit"));
10886   
10887  transfer_flowProfile(timeModelToCalc,linksModelToCalc,yearsToCalc,transfer_techs,vintage,"against")
10888      $transfer_finiteLinkLimit(linksModelToCalc,yearsToCalc,transfer_techs)
10889      = (sum(linksData$(links_aggregate(linksModelToCalc,linksData)
10890                       and transfer_incidenceData_flip(linksData) = 1),
10891              transfer_flowProfileIn_aggTime(timeModelToCalc,linksData,yearsToCalc,transfer_techs,"against")
10892              * transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"linksUpperLimit"))
10893          + sum(linksData$(links_aggregate(linksModelToCalc,linksData)
10894                          and transfer_incidenceData_flip(linksData) = -1),
10895              transfer_flowProfileIn_aggTime(timeModelToCalc,linksData,yearsToCalc,transfer_techs,"along")
10896              * transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"linksUpperLimit")))
10897      / sum(linksData$links_aggregate(linksModelToCalc,linksData),
10898              transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"linksUpperLimit"));
10899   
10900  transfer_flowProfile(timeModelToCalc,linksModelToCalc,yearsToCalc,transfer_techs,vintage,"along")
10901      $transfer_infiniteLinkLimit(linksModelToCalc,yearsToCalc,transfer_techs)
10902      = (sum(linksData$(links_aggregate(linksModelToCalc,linksData)
10903                       and transfer_incidenceData_flip(linksData) = 1
10904                       and transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"linksUpperLimit") = inf ),
10905              transfer_flowProfileIn_aggTime(timeModelToCalc,linksData,yearsToCalc,transfer_techs,"along"))
10906          + sum(linksData$(links_aggregate(linksModelToCalc,linksData)
10907                          and transfer_incidenceData_flip(linksData) = -1
10908                          and transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"linksUpperLimit") = inf ),
10909              transfer_flowProfileIn_aggTime(timeModelToCalc,linksData,yearsToCalc,transfer_techs,"against")))
10910      / sum(linksData$(links_aggregate(linksModelToCalc,linksData)
10911                      and transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"linksUpperLimit") = inf ),
10912              1);
10913   
10914  transfer_flowProfile(timeModelToCalc,linksModelToCalc,yearsToCalc,transfer_techs,vintage,"against")
10915      $transfer_infiniteLinkLimit(linksModelToCalc,yearsToCalc,transfer_techs)
10916      = (sum(linksData$(links_aggregate(linksModelToCalc,linksData)
10917                       and transfer_incidenceData_flip(linksData) = 1
10918                       and transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"linksUpperLimit") = inf ),
10919              transfer_flowProfileIn_aggTime(timeModelToCalc,linksData,yearsToCalc,transfer_techs,"against"))
10920          + sum(linksData$(links_aggregate(linksModelToCalc,linksData)
10921                          and transfer_incidenceData_flip(linksData) = -1
10922                          and transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"linksUpperLimit") = inf ),
10923              transfer_flowProfileIn_aggTime(timeModelToCalc,linksData,yearsToCalc,transfer_techs,"along")))
10924      / sum(linksData$(links_aggregate(linksModelToCalc,linksData)
10925                      and transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"linksUpperLimit") = inf ),
10926              1);
10927  option clear = transfer_flowProfileIn_aggTime;
10928   
10929  * Orientation of links affects the flowAlongLimit/flowAgainstLimit
10930   
10931  transfer_linksParam(linksModelToCalc,years,transfer_techs,"flowAlongLimit")
10932      $transfer_finiteLinkLimit(linksModelToCalc,years,transfer_techs)
10933      = (sum(linksData$(links_aggregate(linksModelToCalc,linksData)
10934                       and transfer_incidenceData_flip(linksData) = 1),
10935              transfer_linksParamIn(linksData,years,transfer_techs,"flowAlongLimit")
10936              * transfer_linksParamIn(linksData,years,transfer_techs,"linksUpperLimit"))
10937          + sum(linksData$(links_aggregate(linksModelToCalc,linksData)
10938                          and transfer_incidenceData_flip(linksData) = -1),
10939              transfer_linksParamIn(linksData,years,transfer_techs,"flowAgainstLimit")
10940              * transfer_linksParamIn(linksData,years,transfer_techs,"linksUpperLimit")))
10941      / sum(linksData$links_aggregate(linksModelToCalc,linksData),
10942              transfer_linksParamIn(linksData,years,transfer_techs,"linksUpperLimit"));
10943   
10944  transfer_linksParam(linksModelToCalc,years,transfer_techs,"flowAgainstLimit")
10945      $transfer_finiteLinkLimit(linksModelToCalc,years,transfer_techs)
10946      = (sum(linksData$(links_aggregate(linksModelToCalc,linksData)
10947                       and transfer_incidenceData_flip(linksData) = -1),
10948              transfer_linksParamIn(linksData,years,transfer_techs,"flowAlongLimit")
10949              * transfer_linksParamIn(linksData,years,transfer_techs,"linksUpperLimit"))
10950          + sum(linksData$(links_aggregate(linksModelToCalc,linksData)
10951                          and transfer_incidenceData_flip(linksData) = 1),
10952              transfer_linksParamIn(linksData,years,transfer_techs,"flowAgainstLimit")
10953              * transfer_linksParamIn(linksData,years,transfer_techs,"linksUpperLimit")))
10954      / sum(linksData$links_aggregate(linksModelToCalc,linksData),
10955              transfer_linksParamIn(linksData,years,transfer_techs,"linksUpperLimit"));
10956   
10957  transfer_linksParam(linksModelToCalc,years,transfer_techs,"flowAlongLimit")
10958      $transfer_infiniteLinkLimit(linksModelToCalc,years,transfer_techs)
10959      = (sum(linksData$(links_aggregate(linksModelToCalc,linksData)
10960                       and transfer_incidenceData_flip(linksData) = 1
10961                       and transfer_linksParamIn(linksData,years,transfer_techs,"linksUpperLimit") = inf),
10962              transfer_linksParamIn(linksData,years,transfer_techs,"flowAlongLimit"))
10963          + sum(linksData$(links_aggregate(linksModelToCalc,linksData)
10964                          and transfer_incidenceData_flip(linksData) = -1
10965                          and transfer_linksParamIn(linksData,years,transfer_techs,"linksUpperLimit") = inf),
10966              transfer_linksParamIn(linksData,years,transfer_techs,"flowAgainstLimit")))
10967      / sum(linksData$(links_aggregate(linksModelToCalc,linksData)
10968                      and transfer_linksParamIn(linksData,years,transfer_techs,"linksUpperLimit") = inf ),
10969              1);
10970   
10971  transfer_linksParam(linksModelToCalc,years,transfer_techs,"flowAgainstLimit")
10972      $transfer_infiniteLinkLimit(linksModelToCalc,years,transfer_techs)
10973      = (sum(linksData$(links_aggregate(linksModelToCalc,linksData)
10974                       and transfer_incidenceData_flip(linksData) = -1
10975                       and transfer_linksParamIn(linksData,years,transfer_techs,"linksUpperLimit") = inf),
10976              transfer_linksParamIn(linksData,years,transfer_techs,"flowAlongLimit"))
10977          + sum(linksData$(links_aggregate(linksModelToCalc,linksData)
10978                          and transfer_incidenceData_flip(linksData) = 1
10979                          and transfer_linksParamIn(linksData,years,transfer_techs,"linksUpperLimit") = inf),
10980              transfer_linksParamIn(linksData,years,transfer_techs,"flowAgainstLimit")))
10981      / sum(linksData$(links_aggregate(linksModelToCalc,linksData)
10982                      and transfer_linksParamIn(linksData,years,transfer_techs,"linksUpperLimit") = inf ),
10983              1);
10984   
10985  * Mapping for grid segments using DC optimal power flow
10986  set gridSegments_dcopf(linksModel,transfer_techs,gridSegments);
10987  gridSegments_dcopf(linksModelToCalc,transfer_techs,gridSegments)
10988      $transfer_gridSegments(linksModelToCalc,transfer_techs,gridSegments,"useDCopf")
10990      = yes;
10992   
10993  * Ensure each grid segment uses exactly one commodity
10994  parameter checkGridSegmentCommodities(gridSegments);
10995  checkGridSegmentCommodities(gridSegments)
10996      = sum (commodity$(sum((linksModelToCalc,transfer_techs,vintage)
10997                              $( transfer_coefficient(transfer_techs,vintage,commodity,"coefficient") > 0
10998                                  and gridSegments_dcopf(linksModelToCalc,transfer_techs,gridSegments)) , 1) > 0), 1);
10999   
11000  parameter transfer_incidenceSegments(nodesModel,linksModel,years,gridSegments);
11001  transfer_incidenceSegments(nodesModelToCalc,linksModelToCalc,yearsToCalc,gridSegments)
11002      $(sum((transfer_techs,vintage)$(transfer_usedTech(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
11003                                          and gridSegments_dcopf(linksModelToCalc,transfer_techs,gridSegments)
11004                                          and transfer_incidenceModel(nodesModelToCalc,linksModelToCalc) <> 0), 1) > 0)
11005      = transfer_incidenceModel(nodesModelToCalc,linksModelToCalc);
11006   
11007   
11011   
11012  scalar transfer_enableMIP;
11013  transfer_enableMIP = sum(transfer_usedTech(linksModelToCalc,yearsToCalc,transfer_techs,vintage)$transfer_techParam(transfer_techs,vintage,"mipLinks"), 1 );
11014   
11015   
11016  * ==== definition of variables ====
11017   
11018  * Initialise variables for linksBuild
11019  transfer_linksBuild.l(linksModel,years,transfer_techs,vintage)
11020      $transfer_availTech(linksModel,years,transfer_techs,vintage)
11021      = transfer_linksParam(linksModel,years,transfer_techs,"linksBuild");
11022  transfer_linksBuild.lo(linksModel,yearsToCalc,transfer_techs,vintage)
11023      $transfer_availTech(linksModel,yearsToCalc,transfer_techs,vintage)
11024      = transfer_linksBuild.l(linksModel,yearsToCalc,transfer_techs,vintage);
11025  transfer_linksBuild.fx(linksModel,years,transfer_techs,vintage)
11026      $transfer_linksParam(linksModel,years,transfer_techs,"noExpansion")
11027      = transfer_linksBuild.l(linksModel,years,transfer_techs,vintage);
11028   
11029  * Initialise variables for linksDecom
11030  transfer_linksDecom.l(linksModel,years,transfer_techs,vintage)
11031      $(transfer_decomTech(linksModel,years,transfer_techs,vintage)
11032        and years.val < sum(yearsToCalc$(ord(yearsToCalc) = 1), yearsToCalc.val))
11033      = sum((years_a,years_aa)$(sameas(years-1, years_aa)
11034                        and years_a.val > years_aa.val - transfer_techParam(transfer_techs,vintage,'lifeTime')
11035                        and years_a.val <= years.val - transfer_techParam(transfer_techs,vintage,'lifeTime')
11036                        and transfer_availTech(linksModel,years_a,transfer_techs,vintage)),
11037          transfer_linksBuild.l(linksModel,years_a,transfer_techs,vintage));
11038   
11039  transfer_linksDecom.l(linksModel,yearsToCalc,transfer_techs,vintage)
11040    $transfer_decomTech(linksModel,yearsToCalc,transfer_techs,vintage)
11041    = sum(years$
11042          (years.val < sum(yearsToCalc_a$(ord(yearsToCalc_a) = 1), yearsToCalc_a.val)
11043            and transfer_availTech(linksModel,years,transfer_techs,vintage)
11044            and years.val > sum(years_a$sameas(years_a, yearsToCalc-1), years_a.val) - transfer_techParam(transfer_techs,vintage,'lifeTime')
11045            and years.val <= yearsToCalc.val - transfer_techParam(transfer_techs,vintage,'lifeTime')),
11046        transfer_linksBuild.l(linksModel,years,transfer_techs,vintage))
11047      + sum(yearsToCalc_a$
11048          (yearsToCalc_a.val < sum(yearsToCalc_aa$(ord(yearsToCalc_aa) > 1), yearsToCalc_a.val)
11049            and transfer_availTech(linksModel,yearsToCalc_a,transfer_techs,vintage)
11050            and yearsToCalc_a.val > sum(years_a$sameas(years_a, yearsToCalc-1), years_a.val) - transfer_techParam(transfer_techs,vintage,'lifeTime')
11051            and yearsToCalc_a.val <= yearsToCalc.val - transfer_techParam(transfer_techs,vintage,'lifeTime')),
11052        transfer_linksBuild.l(linksModel,yearsToCalc_a,transfer_techs,vintage));
11053        ;
11054   
11055  transfer_linksDecom.lo(linksModel,yearsToCalc,transfer_techs,vintage)
11056      $(transfer_usedTech(linksModel,yearsToCalc,transfer_techs,vintage)
11057          and not transfer_techParam(transfer_techs,vintage,"freeDecom"))
11058      = transfer_linksDecom.l(linksModel,yearsToCalc,transfer_techs,vintage)
11059   
11060  * Calculate planned transfer links expansion
11061  parameter transfer_linksPlanned(linksModel,years,transfer_techs,vintage);
11062  transfer_linksPlanned(linksModel,years,transfer_techs,vintage) = 0;
11063  loop(years,
11064    transfer_linksPlanned(linksModel,years,transfer_techs,vintage)
11065      =
11066      transfer_linksPlanned(linksModel,years-1,transfer_techs,vintage)
11067          $transfer_usedTech(linksModel,years-1,transfer_techs,vintage)
11068      + transfer_linksBuild.l(linksModel,years,transfer_techs,vintage)
11069          $transfer_availTech(linksModel,years,transfer_techs,vintage)
11070      - transfer_linksDecom.l(linksModel,years,transfer_techs,vintage)
11071          $transfer_usedTech(linksModel,years,transfer_techs,vintage);
11072  );
11073   
11074  * Set initial state for planned units
11075  transfer_linksTotal.l(linksModel,years,transfer_techs,vintage)
11076    = transfer_linksPlanned(linksModel,years,transfer_techs,vintage)
11077   
11078  * Calculate if planned links expansion is bound by upper and lower limits
11079  set transfer_linkBoundsFixed(linksModel,years,transfer_techs);
11080  transfer_linkBoundsFixed(linksModel,years,transfer_techs)
11081    $(sum(vintage$transfer_usedTech(linksModel,years,transfer_techs,vintage),
11082          transfer_linksPlanned(linksModel,years,transfer_techs,vintage))
11083      = transfer_linksParam(linksModel,years,transfer_techs,"linksUpperLimit")
11084    and sum(vintage$transfer_usedTech(linksModel,years,transfer_techs,vintage),
11085          transfer_linksPlanned(linksModel,years,transfer_techs,vintage))
11086      = transfer_linksParam(linksModel,years,transfer_techs,"linksLowerLimit"))
11087    = yes;
11088   
11089  * Fix linksBuild, linksDecom, linksTotal if levels are predetermined by upper and lower limits
11090  transfer_linksBuild.fx(linksModel,years,transfer_techs,vintage)
11091    $(transfer_availTech(linksModel,years,transfer_techs,vintage)
11092      and transfer_linkBoundsFixed(linksModel,years,transfer_techs))
11093    = transfer_linksBuild.l(linksModel,years,transfer_techs,vintage);
11094  transfer_linksDecom.fx(linksModel,years,transfer_techs,vintage)
11095    $(transfer_usedTech(linksModel,years,transfer_techs,vintage)
11096      and transfer_linkBoundsFixed(linksModel,years,transfer_techs))
11097    = transfer_linksDecom.l(linksModel,years,transfer_techs,vintage);
11098  transfer_linksTotal.fx(linksModel,years,transfer_techs,vintage)
11099    $(transfer_usedTech(linksModel,years,transfer_techs,vintage)
11100      and transfer_linkBoundsFixed(linksModel,years,transfer_techs))
11101    = transfer_linksTotal.l(linksModel,years,transfer_techs,vintage);
11102   
11103  transfer_linksTotal_MIP.up(linksModel,years,transfer_techs,vintage)
11104      $(transfer_usedTech(linksModel,years,transfer_techs,vintage)
11105        and transfer_techParam(transfer_techs,vintage,"miplinks") = 1)
11106      = transfer_linksParam(linksModel,years,transfer_techs,"linksUpperLimit");
11107   
11108  * Add parameter for fixing capacities during myopic runs
11109  parameter transfer_linksDelta(linksModel,years,transfer_techs);
11110   
11111   
11112  * ==== declaration of equations ====
11113   
11114  equations
11115    Eq_transfer_linksBalance(linksModel,years,transfer_techs,vintage
11116      ) "Ensures the links balance over the planning period."
11117    Eq_transfer_linksFixedDecom(linksModel,years,transfer_techs,vintage
11118      ) "Restricts the fixed decommissioning of links over the planning period."
11119    Eq_transfer_linksFreeDecom(linksModel,years,transfer_techs,vintage
11120      ) "Restricts the free decommissioning of links over the planning period."
11121    Eq_transfer_linksUpperLimit(linksModel,years,transfer_techs
11122      ) "Upper bound for the total number of links."
11123    Eq_transfer_linksLowerLimit(linksModel,years,transfer_techs
11124      ) "Lower bound for the total number of links."
11125    Eq_transfer_linksTotalMIP(linksModel,years,transfer_techs,vintage
11126      ) "Fixes the total number of links to the corresponding integer variable."
11127   
11128    Eq_transfer_flowAlongUpperLimit(timeModel,linksModel,years,transfer_techs,vintage
11129      ) "Upper bound for the flow along the transfer links."
11130    Eq_transfer_flowAgainstUpperLimit(timeModel,linksModel,years,transfer_techs,vintage
11131      ) "Upper bound for the flow against the transfer links."
11132    Eq_transfer_dcopf_angleFlows(timeModel,linksModel,years,gridSegments
11133      )
11134    Eq_transfer_dcopf_cycleFlows(timeModel,years,cycles,gridSegments
11135      )
11136    ;
11137   
11138   
11139  * ==== equation definition ====
11140  * // ## Equations
11141  * // ### Transfer Links Balance
11142  * // Ensures that the transfer between nodes is balanced.
11143  * // {Eq_transfer_linksBalance}
11144  Eq_transfer_linksBalance(linksModelToCalc,yearsSel,transfer_techs,vintage)
11145      $((transfer_usedTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
11146            or sum(years$sameas(years,yearsSel), transfer_usedTech(linksModelToCalc,years-1,transfer_techs,vintage)))
11147          and not transfer_linkBoundsFixed(linksModelToCalc,yearsSel,transfer_techs))
11148      ..
11149      transfer_linksTotal(linksModelToCalc,yearsSel,transfer_techs,vintage)
11150      =e=
11151      sum(yearsToCalc$(ord(yearsToCalc) = 1 and sameas(yearsToCalc, yearsSel)),
11152        sum(years$sameas(years, yearsToCalc),
11153          transfer_linksTotal(linksModelToCalc,years-1,transfer_techs,vintage)
11154            $transfer_usedTech(linksModelToCalc,years-1,transfer_techs,vintage)))
11155      + sum((yearsToCalc)$(ord(yearsToCalc) > 1 and sameas(yearsToCalc, yearsSel)),
11156        transfer_linksTotal(linksModelToCalc,yearsToCalc-1,transfer_techs,vintage)
11157          $transfer_usedTech(linksModelToCalc,yearsToCalc-1,transfer_techs,vintage))
11158      + transfer_linksBuild(linksModelToCalc,yearsSel,transfer_techs,vintage)
11159          $transfer_availTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
11160      - transfer_linksDecom(linksModelToCalc,yearsSel,transfer_techs,vintage)
11161          $transfer_usedTech(linksModelToCalc,yearsSel,transfer_techs,vintage);
11162   
11163  * // ### Transfer Links Fixed Decommissioning
11164  * // Balances fixed link decommissioning.
11165  * // {Eq_transfer_linksFixedDecom}
11166  Eq_transfer_linksFixedDecom(linksModelToCalc,yearsSel,transfer_techs,vintage)
11167      $(transfer_decomTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
11168          and not transfer_techParam(transfer_techs,vintage,"freeDecom") = 1
11169          and not transfer_linkBoundsFixed(linksModelToCalc,yearsSel,transfer_techs))
11170      ..
11171      transfer_linksDecom(linksModelToCalc,yearsSel,transfer_techs,vintage)
11172      =e=
11173      sum(years$
11174          (transfer_availTech(linksModelToCalc,years,transfer_techs,vintage)
11175              and years.val > sum(yearsToCalc$sameas(yearsToCalc+1, yearsSel), yearsToCalc.val) - transfer_techParam(transfer_techs,vintage,'lifeTime')
11176              and years.val <= yearsSel.val - transfer_techParam(transfer_techs,vintage,'lifeTime')),
11177          transfer_linksBuild(linksModelToCalc,years,transfer_techs,vintage));
11178   
11179  * // ### Transfer Links Free Decommissioning
11180  * // Balances free link decommissioning.
11181  * // {Eq_transfer_linksFreeDecom}
11182  Eq_transfer_linksFreeDecom(linksModelToCalc,yearsSel,transfer_techs,vintage)
11183      $((transfer_decomTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
11184          or transfer_usedTech(linksModelToCalc,yearsSel,transfer_techs,vintage))
11185          and transfer_techParam(transfer_techs,vintage,"freeDecom") = 1)
11186      ..
11187      sum(years$
11188            ((transfer_decomTech(linksModelToCalc,years,transfer_techs,vintage)
11189              or transfer_usedTech(linksModelToCalc,years,transfer_techs,vintage))
11190              and years.val < sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)),
11191          transfer_linksDecom(linksModelToCalc,years,transfer_techs,vintage))
11192      + sum(yearsToCalc$
11193            ((transfer_decomTech(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
11194              or transfer_usedTech(linksModelToCalc,yearsToCalc,transfer_techs,vintage))
11195              and yearsToCalc.val >= sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
11196              and yearsToCalc.val <= yearsSel.val),
11197          transfer_linksDecom(linksModelToCalc,yearsToCalc,transfer_techs,vintage))
11198      =g=
11199      sum(years$
11200            (transfer_availTech(linksModelToCalc,years,transfer_techs,vintage)
11201              and years.val < sum(yearsToCalc$(ord(yearsToCalc)=1), yearsToCalc.val) - transfer_techParam(transfer_techs,vintage,'lifeTime')),
11202          transfer_linksBuild(linksModelToCalc,years,transfer_techs,vintage))
11203      + sum(yearsToCalc$
11204            (transfer_availTech(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
11205              and yearsToCalc.val >= sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
11206              and yearsToCalc.val <= yearsSel.val - transfer_techParam(transfer_techs,vintage,'lifeTime')),
11207          transfer_linksBuild(linksModelToCalc,yearsToCalc,transfer_techs,vintage));
11208   
11209  * // ### Transfer Links Lower Limit
11210  * // Ensures link capacity lower limits.
11211  * // {Eq_transfer_linksLowerLimit}
11212  Eq_transfer_linksLowerLimit(linksModelToCalc,yearsSel,transfer_techs)
11213      $(transfer_linksParam(linksModelToCalc,yearsSel,transfer_techs,'linksLowerLimit') > 0 )
11214      ..
11215      sum(vintage$transfer_usedTech(linksModelToCalc,yearsSel,transfer_techs,vintage),
11216          transfer_linksTotal(linksModelToCalc,yearsSel,transfer_techs,vintage))
11217      =g=
11218      transfer_linksParam(linksModelToCalc,yearsSel,transfer_techs,"linksLowerLimit");
11219   
11220  * // ### Transfer Links Upper Limit
11221  * // Ensures link capacity upper limits.
11222  * // {Eq_transfer_linksUpperLimit}
11223  Eq_transfer_linksUpperLimit(linksModelToCalc,yearsSel,transfer_techs)
11224      $(transfer_linksParam(linksModelToCalc,yearsSel,transfer_techs,'linksUpperLimit') >= 0
11225          and transfer_linksParam(linksModelToCalc,yearsSel,transfer_techs,'linksUpperLimit') < +inf )
11226      ..
11227      sum(vintage$transfer_usedTech(linksModelToCalc,yearsSel,transfer_techs,vintage),
11228          transfer_linksTotal(linksModelToCalc,yearsSel,transfer_techs,vintage))
11229      =l=
11230      transfer_linksParam(linksModelToCalc,yearsSel,transfer_techs,"linksUpperLimit");
11231   
11232  * // ### Transfer Links Total MIP
11233  * // Ensures number of MIP links.
11234  * // {Eq_transfer_linksTotalMIP}
11235  Eq_transfer_linksTotalMIP(linksModelToCalc,yearsSel,transfer_techs,vintage)
11236      $(transfer_usedTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
11237          and transfer_techParam(transfer_techs,vintage,"mipLinks"))
11238      ..
11239      transfer_linksTotal(linksModelToCalc,yearsSel,transfer_techs,vintage)
11240      =e=
11241      transfer_linksTotal_MIP(linksModelToCalc,yearsSel,transfer_techs,vintage);
11242   
11243  * // ### Transfer Links Flow Along Upper Limit
11244  * // Ensures links flow along upper limit.
11245  * // {Eq_transfer_flowAlongUpperLimit}
11246  Eq_transfer_flowAlongUpperLimit(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
11247      $transfer_usedTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
11248      ..
11249      transfer_flowAlong(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
11250      =l=
11251      transfer_flowProfile(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage,"along")
11252      * transfer_linksTotal(linksModelToCalc,yearsSel,transfer_techs,vintage)
11253      * transfer_techParam(transfer_techs,vintage,"flowUpperLimit")
11254      ;
11255   
11256  * // ### Transfer Links Flow Against Upper Limit
11257  * // Ensures links flow against upper limit.
11258  * // {Eq_transfer_flowAgainstUpperLimit}
11259  Eq_transfer_flowAgainstUpperLimit(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
11260      $transfer_usedTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
11261      ..
11262      transfer_flowAgainst(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
11263      =l=
11264      transfer_flowProfile(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage,"against")
11265      * transfer_linksTotal(linksModelToCalc,yearsSel,transfer_techs,vintage)
11266      * transfer_techParam(transfer_techs,vintage,"flowUpperLimit")
11267      ;
11268   
11269  set transfer_usedOpf(linksModel,years,gridSegments,transfer_techs,vintage);
11270  transfer_usedOpf(linksModel,yearsToCalc,gridSegments,transfer_techs,vintage)
11271      $(transfer_usedTech(linksModel,yearsToCalc,transfer_techs,vintage)
11272          and gridSegments_dcopf(linksModel,transfer_techs,gridSegments))
11273      = yes;
11274   
11275  set transfer_usedOpfLinks(linksModel,years,gridSegments);
11276  option transfer_usedOpfLinks < transfer_usedOpf;
11277   
11278  set transfer_usedOpfSegments(years,gridSegments);
11279  option transfer_usedOpfSegments < transfer_usedOpf;
11280   
11284  * // ### Transfer DC optimal flow angle flows
11285  * // Angle flows.
11286  * // {Eq_transfer_dcopf_cycleFlows}
11287  Eq_transfer_dcopf_angleFlows(timeModelSel,linksModelToCalc,yearsSel,gridSegments)
11288      $transfer_usedOpfLinks(linksModelToCalc,yearsSel,gridSegments)
11289      ..
11290      sum ((transfer_techs,vintage)
11291              $transfer_usedOpf(linksModelToCalc,yearsSel,gridSegments,transfer_techs,vintage),
11292          ( transfer_flowAlong(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
11293              - transfer_flowAgainst(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage) )
11294          * transfer_dcopf_Xtech(linksModelToCalc,yearsSel,transfer_techs,vintage,gridSegments) )
11295      =e=
11296      sum ( nodesModelSel,
11297          - transfer_incidenceModel(nodesModelSel,linksModelToCalc)
11298          * transfer_dcopf_voltageAngle(timeModelSel,nodesModelSel,yearsSel,gridSegments));
11302   
11303   
11304  * ==== model definition ====
11305   
11306  Model M_transfer
11307  /
11308    Eq_transfer_linksBalance
11309    Eq_transfer_linksFixedDecom
11310    Eq_transfer_linksFreeDecom
11311    Eq_transfer_linksLowerLimit
11312    Eq_transfer_linksUpperLimit
11313    Eq_transfer_linksTotalMIP
11314    Eq_transfer_flowAlongUpperLimit
11315    Eq_transfer_flowAgainstUpperLimit
11319    Eq_transfer_dcopf_angleFlows
11323  /;
INCLUDE    C:\Local\REMix\framework\remix\framework\model\source\core\sourcesink.gms
11325  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
11326  * SPDX-License-Identifier: BSD-3-Clause
11327   
11328  * // # core_sourcesink
11329  * // The equations in this file describe the sources and sinks in the model.
11330   
11331  * // ## Variables
11332  * // {special_table_sourcesink_variables}
11759   
11760  * // ## Aggregation of profiles
11761  * // Profiles are rescaled based on the annual sum.
11762   
11763  set sourcesink_usesProfileScaling(nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile);
11764  sourcesink_usesProfileScaling(nodesData,years,sourcesink_techs,commodity,"fixed")
11765      $sourcesink_configIn(nodesData,years,sourcesink_techs,commodity,"scaleFixProfileWithFixSum") = yes;
11766  sourcesink_usesProfileScaling(nodesData,years,sourcesink_techs,commodity,"lower")
11767      $sourcesink_configIn(nodesData,years,sourcesink_techs,commodity,"scaleLowProfileWithLowSum") = yes;
11768  sourcesink_usesProfileScaling(nodesData,years,sourcesink_techs,commodity,"upper")
11769      $sourcesink_configIn(nodesData,years,sourcesink_techs,commodity,"scaleUpProfileWithUpSum") = yes;
11770   
11771  parameter sourcesink_ProfileSum(nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile);
11772  sourcesink_ProfileSum(nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile)
11773      $sourcesink_usesProfileScaling(nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile)
11774      = sum(timeData, sourcesink_profileIn(timeData,nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile));
11775   
11776  parameter sourcesink_ProfileAbsSum(nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile);
11777  sourcesink_ProfileAbsSum(nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile)
11778      $sourcesink_usesProfileScaling(nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile)
11779      = sum(timeData, abs(sourcesink_profileIn(timeData,nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile)));
11780   
11781  set sourcesink_ProfileScaleError(nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile);
11782  sourcesink_ProfileScaleError(nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile)
11783      $(sourcesink_usesProfileScaling(nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile)
11784          and sourcesink_ProfileSum(nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile) = 0
11785          and sourcesink_ProfileAbsSum(nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile) > 0)
11786      = yes;
11787   
11788  abort$sum((nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile),
11789              sourcesink_ProfileScaleError(nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile)) "One or more profiles cannot be rescaled as their annual sum equals zero!"
11790   
11791  * calculate scaling factor for each type
11792  parameter sourcesink_scalingFactor(nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile);
11793  sourcesink_scalingFactor(nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile)
11794      $(sourcesink_ProfileSum(nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile)
11795          and sourcesink_usesProfileScaling(nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile))
11796      = sum(pc_sourcesink_annualSum$sameas(pc_sourcesink_profile,pc_sourcesink_annualSum),
11797          sourcesink_annualSumIn(nodesData,years,sourcesink_techs,commodity,pc_sourcesink_annualSum)
11798              / sourcesink_ProfileSum(nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile));
11799   
11800  * rescale profiles
11801  sourcesink_profileIn(timeData,nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile)
11802      $sourcesink_usesProfileScaling(nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile)
11803      = sourcesink_profileIn(timeData,nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile)
11804          * sourcesink_scalingFactor(nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile)
11805   
11806  * // ## Aggregation of profiles
11807  * // Profiles are aggregated based on the mapping from data nodes to model nodes.
11808   
11809  * ==== aggregation of profiles ====
11810  set sourcesink_usesProfileIn(nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile);
11811  option sourcesink_usesProfileIn < sourcesink_profileIn
11812   
11813  set sourcesink_usesProfile(nodesModel,years,sourcesink_techs,commodity,pc_sourcesink_profile);
11814  sourcesink_usesProfile(nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity,pc_sourcesink_profile)
11815      $sum(nodesData$(aggregateNodesModel(nodesData,nodesModelToCalc)
11816          and sourcesink_usesProfileIn(nodesData,yearsToCalc,sourcesink_techs,commodity,pc_sourcesink_profile)), 1)
11817      = yes;
11818   
11819  * aagregate time dimension
11820  parameter sourcesink_profileIn_aggTime(timeModel,nodesData,yearsToCalc,sourcesink_techs,commodity,pc_sourcesink_profile);
11821  sourcesink_profileIn_aggTime(timeModelToCalc,nodesData,yearsToCalc,sourcesink_techs,commodity,pc_sourcesink_profile)
11822    $sourcesink_usesProfileIn(nodesData,yearsToCalc,sourcesink_techs,commodity,pc_sourcesink_profile)
11823    = sum(timeData$timeMapping(timeData,timeModelToCalc),
11824            sourcesink_profileIn(timeData,nodesData,yearsToCalc,sourcesink_techs,commodity,pc_sourcesink_profile)
11825            / timeLength(timeModelToCalc));
11826  option clear = sourcesink_profileIn;
11827   
11828  * sum up absolute profiles
11829  parameter sourcesink_profile(timeModel,nodesModel,years,sourcesink_techs,commodity,pc_sourcesink_profile);
11830  sourcesink_profile(timeModelToCalc,nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity,pc_sourcesink_profile)
11831      $sourcesink_usesProfile(nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity,pc_sourcesink_profile)
11832      = sum(nodesData$aggregateNodesModel(nodesData,nodesModelToCalc),
11833              sourcesink_profileIn_aggTime(timeModelToCalc,nodesData,yearsToCalc,sourcesink_techs,commodity,pc_sourcesink_profile));
11834  option clear = sourcesink_profileIn_aggTime;
11835   
11836  set sourcesink_enabled(nodesModel,years,sourcesink_techs,commodity);
11837  option sourcesink_enabled < sourcesink_config;
11838   
11840   
11841  * ==== declaration of variables ====
11842  * // ## Bounding of variables
11843  * // Source-sink variables with either a lower, fixed, or upper profile are bounded to their respective profiles given by the input parameters.
11844   
11845  sourcesink_flow.lo(timeModelToCalc,nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity)
11846      $( sourcesink_enabled(nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity)
11847          and sourcesink_config(nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity,"usesLowerProfile") = 1
11848          and sourcesink_profile(timeModelToCalc,nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity,"lower") > -inf )
11849      = sourcesink_profile(timeModelToCalc,nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity,"lower");
11850   
11851  sourcesink_flow.up(timeModelToCalc,nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity)
11852      $( sourcesink_enabled(nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity)
11853          and sourcesink_config(nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity,"usesUpperProfile") = 1
11854          and sourcesink_profile(timeModelToCalc,nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity,"upper") < inf )
11855      = sourcesink_profile(timeModelToCalc,nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity,"upper");
11856   
11857  sourcesink_flow.fx(timeModelToCalc,nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity)
11858      $( sourcesink_enabled(nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity)
11859          and sourcesink_config(nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity,"usesFixedProfile") = 1 )
11860      = sourcesink_profile(timeModelToCalc,nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity,"fixed");
11861   
11862  option clear = sourcesink_profile;
11863   
11864   
11865  * ==== equation definition ====
11866  * // ## Equations
11867  equations
11868  Eq_sourcesink_useFixedSum(nodesModel,years,sourcesink_techs,commodity
11869      ) "Fixes the annual sum from sources / to sinks"
11870  Eq_sourcesink_useLowerSum(nodesModel,years,sourcesink_techs,commodity
11871      ) "Limits the lower sum from sources / to sinks"
11872  Eq_sourcesink_useUpperSum(nodesModel,years,sourcesink_techs,commodity
11873      ) "Limits the upper sum from sources / to sinks"
11874    ;
11875   
11876  * // ### Fixed annual sums for sources and sinks
11877  * // Ensures that the sources and sinks with annual sums given as fixed limits are balanced.
11878  * // {Eq_sourcesink_useFixedSum}
11879  Eq_sourcesink_useFixedSum(nodesModelSel,yearsSel,sourcesink_techs,commodity)
11880      $( sourcesink_enabled(nodesModelSel,yearsSel,sourcesink_techs,commodity)
11881          and sourcesink_config(nodesModelSel,yearsSel,sourcesink_techs,commodity,"usesFixedSum") = 1 )
11882      ..
11883      sum(timeModelSel,
11884          sourcesink_flow(timeModelSel,nodesModelSel,yearsSel,sourcesink_techs,commodity))
11885      =e=
11886      sourcesink_annualSum(nodesModelSel,yearsSel,sourcesink_techs,commodity,"fixed")
11887      ;
11888   
11889  * // ### Lower annual sums for sources and sinks
11890  * // Ensures that the sources and sinks with annual sums given as lower limits are balanced.
11891  * // {Eq_sourcesink_useLowerSum}
11892  Eq_sourcesink_useLowerSum(nodesModelSel,yearsSel,sourcesink_techs,commodity)
11893      $( sourcesink_enabled(nodesModelSel,yearsSel,sourcesink_techs,commodity)
11894          and sourcesink_config(nodesModelSel,yearsSel,sourcesink_techs,commodity,"usesLowerSum") = 1
11895          and sourcesink_annualSum(nodesModelSel,yearsSel,sourcesink_techs,commodity,"lower") > -inf )
11896      ..
11897      sum(timeModelSel,
11898          sourcesink_flow(timeModelSel,nodesModelSel,yearsSel,sourcesink_techs,commodity))
11899      =g=
11900      sourcesink_annualSum(nodesModelSel,yearsSel,sourcesink_techs,commodity,"lower")
11901      ;
11902   
11903  * // ### Upper annual sums for sources and sinks
11904  * // Ensures that the sources and sinks with annual sums given as upper limits are balanced.
11905  * // {Eq_sourcesink_useUpperSum}
11906  Eq_sourcesink_useUpperSum(nodesModelSel,yearsSel,sourcesink_techs,commodity)
11907      $( sourcesink_enabled(nodesModelSel,yearsSel,sourcesink_techs,commodity)
11908          and sourcesink_config(nodesModelSel,yearsSel,sourcesink_techs,commodity,"usesUpperSum") = 1
11909          and sourcesink_annualSum(nodesModelSel,yearsSel,sourcesink_techs,commodity,"upper") < inf )
11910      ..
11911      sum(timeModelSel,
11912          sourcesink_flow(timeModelSel,nodesModelSel,yearsSel,sourcesink_techs,commodity))
11913      =l=
11914      sourcesink_annualSum(nodesModelSel,yearsSel,sourcesink_techs,commodity,"upper")
11915      ;
11916   
11917   
11918  * ==== model definition ====
11919   
11920  Model M_sourcesink
11921  /
11922    Eq_sourcesink_useFixedSum
11923    Eq_sourcesink_useLowerSum
11924    Eq_sourcesink_useUpperSum
11925  /;
INCLUDE    C:\Local\REMix\framework\remix\framework\model\source\core\balance.gms
11927  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
11928  * SPDX-License-Identifier: BSD-3-Clause
11929   
11930  * // # balance
11931  * // The equations in this file describe the commodity balancing in the model.
11932   
11933  Equations
11934    Eq_balance_commodities(timeModel,nodesModel,years,commodity
11935      ) "Balance for each commodity used in each time step, region, and year";
11936   
11937   
11938  * ==== calculation of mappings ====
11939   
11940  set balance_techComm(techs,commodity);
11941  balance_techComm(converter_techs(techs),commodity)
11942      $sum((vintage,activity)$converter_coefficient(converter_techs,vintage,activity,commodity,"coefficient"), 1) = yes;
11943  balance_techComm(storage_techs(techs),commodity)
11944      $sum((vintage)$storage_sizeParam(storage_techs,vintage,commodity,"size"), 1) = yes;
11945  balance_techComm(transfer_techs(techs),commodity)
11946      $sum((vintage)$transfer_coefficient(transfer_techs,vintage,commodity,"coefficient"), 1) = yes;
11947  balance_techComm(sourcesink_techs(techs),commodity)
11948      $sum((nodesModelToCalc,yearsToCalc)$sourcesink_enabled(nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity), 1) = yes;
11949   
11950  set balance_usedConverter(nodesModel,years,commodity);
11951  set balance_usedStorage(nodesModel,years,commodity);
11952  set balance_usedTransfer(nodesModel,years,commodity);
11953  set balance_usedSourceSink(nodesModel,years,commodity);
11954  set balance_usedBalance(nodesModel,years,commodity);
11955   
11956  balance_usedConverter(nodesModel,years,commodity)
11957      = sum ((converter_techs,vintage,activity)
11958              $( converter_coefficient(converter_techs,vintage,activity,commodity,"coefficient") <> 0
11959                  and converter_usedTech(nodesModel,years,converter_techs,vintage) ), 1);
11960   
11961  balance_usedStorage(nodesModel,years,commodity)
11962      = sum ((storage_techs,vintage,activity)
11963              $(storage_sizeParam(storage_techs,vintage,commodity,"size") <> 0
11964                  and storage_usedTech(nodesModel,years,storage_techs,vintage) ), 1);
11965   
11966  balance_usedTransfer(nodesModel,years,commodity)
11967      = sum ((linksModel,transfer_techs,vintage)
11968              $(transfer_coefficient(transfer_techs,vintage,commodity,"coefficient") <> 0
11969                  and transfer_incidenceModel(nodesModel,linksModel) <> 0), 1);
11970   
11971  option balance_usedSourceSink < sourcesink_enabled;
11972   
11973  balance_usedBalance(nodesModel,years,commodity)
11974      $(balance_usedConverter(nodesModel,years,commodity)
11975          or balance_usedStorage(nodesModel,years,commodity)
11976          or balance_usedTransfer(nodesModel,years,commodity)
11977          or balance_usedSourceSink(nodesModel,years,commodity) )
11978      = yes;
11979   
11980   
11981  * ==== equation definition ====
11982   
11983  * // ### Balance commodities
11984  * // Balancing of commodities for all model regions, time steps, and years
11985  * // {Eq_balance_commodities}
11986  Eq_balance_commodities(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,commodity)
11987      $balance_usedBalance(nodesModelSel,yearsSel,commodity)
11988      ..
11989  * converter
11990      sum((converter_techs,vintage,activity)
11991              $( converter_coefficientProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity,commodity) <> 0
11992                  AND converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage) ),
11993          converter_activity(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity)
11994              * converter_coefficientProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity,commodity)
11995              * timeLength(timeModelSel)
11996          + converter_unitsUsingActivity_MIP(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity)
11997              * converter_coefficient(converter_techs,vintage,activity,commodity,"constant")
11998              * timeLength(timeModelSel))
11999   
12000  * storages
12001      + sum((storage_techs,vintage)
12002              $( storage_sizeParam(storage_techs,vintage,commodity,"size") <> 0
12003                  and storage_usedTech(nodesModelSel,yearsSel,storage_techs,vintage) ),
12004          storage_level(timeModelToCalc--1,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
12005          - storage_level(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
12007          - storage_losses(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
12008          * timeLength(timeModelSel)
12010          )
12011   
12012  * transfer
12013      + sum((linksModel,transfer_techs,vintage)
12014              $(transfer_usedTech(linksModel,yearsSel,transfer_techs,vintage)
12015                  and linksModelToCalc(linksModel)),
12016          (   transfer_flowAlong(timeModelSel,linksModel,yearsSel,transfer_techs,vintage)
12017                  $(transfer_incidenceModel(nodesModelSel,linksModel) > 0)
12018            + transfer_flowAgainst(timeModelSel,linksModel,yearsSel,transfer_techs,vintage)
12019                  $(transfer_incidenceModel(nodesModelSel,linksModel) < 0) )
12020          * transfer_coefficient(transfer_techs,vintage,commodity,"coefficient")
12021          * timeLength(timeModelSel))
12022   
12023      - sum((linksModel,transfer_techs,vintage)
12024              $(transfer_usedTech(linksModel,yearsSel,transfer_techs,vintage)
12025                  and linksModelToCalc(linksModel)),
12026          (   transfer_flowAlong(timeModelSel,linksModel,yearsSel,transfer_techs,vintage)
12027                  $(transfer_incidenceModel(nodesModelSel,linksModel) < 0)
12028            + transfer_flowAgainst(timeModelSel,linksModel,yearsSel,transfer_techs,vintage)
12029                  $(transfer_incidenceModel(nodesModelSel,linksModel) > 0) )
12030          * transfer_coefficient(transfer_techs,vintage,commodity,"coefficient")
12031          * timeLength(timeModelSel))
12032   
12033      + 0.5 * sum((linksModel,transfer_techs,vintage)
12034              $(transfer_usedTech(linksModel,yearsSel,transfer_techs,vintage)
12035                  AND linksModelToCalc(linksModel)),
12036          (   transfer_flowAlong(timeModelSel,linksModel,yearsSel,transfer_techs,vintage)
12037                  $(transfer_incidenceModel(nodesModelSel,linksModel) <> 0)
12038            + transfer_flowAgainst(timeModelSel,linksModel,yearsSel,transfer_techs,vintage)
12039                  $(transfer_incidenceModel(nodesModelSel,linksModel) <> 0) )
12040          * timeLength(timeModelSel)
12041          * ( transfer_coefPerFlow(transfer_techs,vintage,commodity,"coefPerFlow")
12042              + sum(link_types,
12043                  transfer_coefPerLength(transfer_techs,vintage,commodity,link_types,"coefPerLength")
12044                  * transfer_lengthParam(linksModel,link_types,"length"))))
12045   
12046  * sourcesink
12047      + sum((sourcesink_techs)
12048              $sourcesink_enabled(nodesModelSel,yearsSel,sourcesink_techs,commodity),
12049          sourcesink_flow(timeModelSel,nodesModelSel,yearsSel,sourcesink_techs,commodity)
12050          * timeLength(timeModelSel))
12051      =e=
12052      0;
12053   
12054   
12055  * ==== model definition ====
12056   
12057  Model M_balance
12058  /
12059    Eq_balance_commodities
12060  /;
12061   
INCLUDE    C:\Local\REMix\framework\remix\framework\model\source\accounting\equations.gms
12063  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
12064  * SPDX-License-Identifier: BSD-3-Clause
12065   
12066  * // # accounting_equations
12067   
12068  * ==== declaration of variables ====
12069   
12070  variables
12071  accounting_indicator(accNodesModel,accYears,indicator)
12072  accounting_indicator_links(linksModel,years,indicator)
12073  accounting_objective
12074    ;
12075   
12076   
12077  * ==== definition of variables ====
12078   
12079  * set the variable levels to be fixed for years before the optimization years
12080  accounting_indicator.l(accNodesModel,accYears,indicator)
12081      $activeIndicators(accNodesModel,accYears,indicator)
12082      = 0;
12083   
12084  accounting_indicator.lo(accNodesModel,accYears,indicator)
12085      $(accounting_indicatorBounds(accNodesModel,accYears,indicator,"useLower") <> 0 )
12086      = accounting_indicatorBounds(accNodesModel,accYears,indicator,"lowerValue");
12087   
12088  accounting_indicator.up(accNodesModel,accYears,indicator)
12089      $(accounting_indicatorBounds(accNodesModel,accYears,indicator,"useUpper") <> 0 )
12090      = accounting_indicatorBounds(accNodesModel,accYears,indicator,"upperValue");
12091   
12092  accounting_indicator.fx(accNodesModel,accYears,indicator)
12093      $(accounting_indicatorBounds(accNodesModel,accYears,indicator,"useFixed") <> 0 )
12094      = accounting_indicatorBounds(accNodesModel,accYears,indicator,"fixedValue");
12095   
12096   
12097  accounting_indicator_links.lo(linksModelToCalc,yearsToCalc,indicator)
12098      $(accounting_indicatorBounds_links(linksModelToCalc,yearsToCalc,indicator,"useLower") <> 0 )
12099      = accounting_indicatorBounds_links(linksModelToCalc,yearsToCalc,indicator,"lowerValue");
12100   
12101  accounting_indicator_links.up(linksModelToCalc,yearsToCalc,indicator)
12102      $(accounting_indicatorBounds_links(linksModelToCalc,yearsToCalc,indicator,"useUpper") <> 0 )
12103      = accounting_indicatorBounds_links(linksModelToCalc,yearsToCalc,indicator,"upperValue");
12104   
12105  accounting_indicator_links.fx(linksModelToCalc,yearsToCalc,indicator)
12106      $(accounting_indicatorBounds_links(linksModelToCalc,yearsToCalc,indicator,"useFixed") <> 0 )
12107      = accounting_indicatorBounds_links(linksModelToCalc,yearsToCalc,indicator,"fixedValue");
12108   
12109   
12110  * ==== declaration of equations ====
12111   
12112  equations
12113  Eq_accounting_indicatorCalc(accNodesModel,accYears,indicator
12114      ) "Calculates the level of an indicator per accounting region"
12115  Eq_accounting_indicatorCalc_links(linksModel,years,indicator
12116      ) "Calculates the level of an indicator per model link"
12117  Eq_accounting_objective "Calculates the objective value based on the specified indicator"
12118    ;
12119   
12120   
12121  * ==== equations definition ====
12122  * // ## Equations
12123  * // ### Accounting Indicator Calculation
12124  * // Calculates the indicators for each model node for converters, sources and sinks, transfer, storage and variable indicators.
12125  * // {Eq_accounting_indicatorCalc}
12126  Eq_accounting_indicatorCalc(accNodesModel,accYearsSel(accYears),indicator)
12127      $activeIndicators(accNodesModel,accYears,indicator)
12128      ..
12129      accounting_indicator(accNodesModel,accYears,indicator)
12130      =e=
12131   
12132  * == variable indicators ==
12133      sum((accNodesModel_a,accYears_a,indicator_a)
12134          $(compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
12135              and variableIndicators(accNodesModel_a,accYears_a,indicator_a)),
12136          compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
12137          * accounting_indicator(accNodesModel_a,accYears_a,indicator_a))
12138   
12139  * == converters ==
12140      + sum ((accNodesModel_a,nodesModelSel,accYears_a,yearsSel,indicator_a)
12141              $( compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
12142                  and sameas(nodesModelSel,accNodesModel_a) and sameas(yearsSel,accYears_a)),
12143          compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
12144          *
12145          ( sum ((converter_techs,vintage)
12146                      $(converter_availTech(nodesModelSel,yearsSel,converter_techs,vintage)
12147                          and accounting_converterUnits(indicator_a,nodesModelSel,converter_techs,vintage,"useAnnuity") = 0),
12148              converter_unitsBuild(nodesModelSel,yearsSel,converter_techs,vintage)
12149              * accounting_converterUnits(indicator_a,nodesModelSel,converter_techs,vintage,"perUnitBuild"))
12150   
12151          + sum ((years_a,converter_techs,vintage)
12152                      $(converter_availTech(nodesModelSel,years_a,converter_techs,vintage)
12153                          and years_a.val < sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
12154                          and accounting_converterUnits(indicator_a,nodesModelSel,converter_techs,vintage,"useAnnuity") = 1
12155                          and years_a.val + accounting_converterUnits(indicator_a,nodesModelSel,converter_techs,vintage,"amorTime") > yearsSel.val
12156                          and years_a.val <= yearsSel.val ),
12157              converter_unitsBuild(nodesModelSel,years_a,converter_techs,vintage)
12158              * accounting_converterUnits(indicator_a,nodesModelSel,converter_techs,vintage,"perUnitBuild")
12159              * accounting_annuityFactor_converter(indicator_a,nodesModelSel,converter_techs,vintage) )
12160   
12161          + sum ((yearsToCalc,converter_techs,vintage)
12162                      $(converter_availTech(nodesModelSel,yearsToCalc,converter_techs,vintage)
12163                          and yearsToCalc.val >= sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
12164                          and accounting_converterUnits(indicator_a,nodesModelSel,converter_techs,vintage,"useAnnuity") = 1
12165                          and yearsToCalc.val + accounting_converterUnits(indicator_a,nodesModelSel,converter_techs,vintage,"amorTime") > yearsSel.val
12166                          and yearsToCalc.val <= yearsSel.val ),
12167              converter_unitsBuild(nodesModelSel,yearsToCalc,converter_techs,vintage)
12168              * accounting_converterUnits(indicator_a,nodesModelSel,converter_techs,vintage,"perUnitBuild")
12169              * accounting_annuityFactor_converter(indicator_a,nodesModelSel,converter_techs,vintage) )
12170   
12171          + sum ((converter_techs,vintage)
12172                      $converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage),
12173              converter_unitsDecom(nodesModelSel,yearsSel,converter_techs,vintage)
12174              * accounting_converterUnits(indicator_a,nodesModelSel,converter_techs,vintage,"perUnitDecom")
12175   
12176              + converter_unitsTotal(nodesModelSel,yearsSel,converter_techs,vintage)
12177              * accounting_converterUnits(indicator_a,nodesModelSel,converter_techs,vintage,"perUnitTotal") )
12178   
12179          + sum ((timeModelSel,converter_techs,vintage,activity)
12180                      $converter_usedTechAct(nodesModelSel,yearsSel,converter_techs,vintage,activity),
12181              converter_activity(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity)
12182              * timeLength(timeModelSel)
12183              * accounting_converterActivity(indicator_a,nodesModelSel,converter_techs,vintage,activity,"perActivity") )
12184   
12185          + sum ((timeModelSel,converter_techs,vintage)
12186                      $converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage),
12187              converter_unitStartups(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
12188              * accounting_converterStartup(indicator_a,nodesModelSel,converter_techs,vintage,"perStartup") )
12189   
12190          + sum ((timeModelSel,converter_techs,vintage)
12191                      $converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage),
12192              converter_rampPos(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
12193              * (accounting_converterStartup(indicator_a,nodesModelSel,converter_techs,vintage,"perRamp")
12194                 + accounting_converterStartup(indicator_a,nodesModelSel,converter_techs,vintage,"perRampPos"))
12195   
12196              + converter_rampNeg(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
12197              * (accounting_converterStartup(indicator_a,nodesModelSel,converter_techs,vintage,"perRamp")
12198                 + accounting_converterStartup(indicator_a,nodesModelSel,converter_techs,vintage,"perRampNeg")))
12199          )
12200      )
12201   
12202  * == storage ==
12203      + sum ((accNodesModel_a,nodesModelSel,accYears_a,yearsSel,indicator_a)
12204              $( compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
12205                  and sameas(nodesModelSel,accNodesModel_a) and sameas(yearsSel,accYears_a)),
12206          compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
12207          *
12208          ( sum ((storage_techs,vintage)
12209                      $(storage_availTech(nodesModelSel,yearsSel,storage_techs,vintage)
12210                          and accounting_storageUnits(indicator_a,nodesModelSel,storage_techs,vintage,"useAnnuity") = 0),
12211              storage_unitsBuild(nodesModelSel,yearsSel,storage_techs,vintage)
12212              * accounting_storageUnits(indicator_a,nodesModelSel,storage_techs,vintage,"perUnitBuild") )
12213   
12214          + sum ((years_a,storage_techs,vintage)
12215                      $(storage_availTech(nodesModelSel,years_a,storage_techs,vintage)
12216                          and years_a.val < sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
12217                          and accounting_storageUnits(indicator_a,nodesModelSel,storage_techs,vintage,"useAnnuity") = 1
12218                          and years_a.val + accounting_storageUnits(indicator_a,nodesModelSel,storage_techs,vintage,"amorTime") > yearsSel.val
12219                          and years_a.val <= yearsSel.val ),
12220              storage_unitsBuild(nodesModelSel,years_a,storage_techs,vintage)
12221              * accounting_storageUnits(indicator_a,nodesModelSel,storage_techs,vintage,"perUnitBuild")
12222              * accounting_annuityFactor_storage(indicator_a,nodesModelSel,storage_techs,vintage) )
12223   
12224          + sum ((yearsToCalc,storage_techs,vintage)
12225                      $(storage_availTech(nodesModelSel,yearsToCalc,storage_techs,vintage)
12226                          and yearsToCalc.val >= sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
12227                          and accounting_storageUnits(indicator_a,nodesModelSel,storage_techs,vintage,"useAnnuity") = 1
12228                          and yearsToCalc.val + accounting_storageUnits(indicator_a,nodesModelSel,storage_techs,vintage,"amorTime") > yearsSel.val
12229                          and yearsToCalc.val <= yearsSel.val ),
12230              storage_unitsBuild(nodesModelSel,yearsToCalc,storage_techs,vintage)
12231              * accounting_storageUnits(indicator_a,nodesModelSel,storage_techs,vintage,"perUnitBuild")
12232              * accounting_annuityFactor_storage(indicator_a,nodesModelSel,storage_techs,vintage) )
12233   
12234          + sum ((storage_techs,vintage)
12235                      $storage_usedTech(nodesModelSel,yearsSel,storage_techs,vintage),
12236              storage_unitsDecom(nodesModelSel,yearsSel,storage_techs,vintage)
12237              * accounting_storageUnits(indicator_a,nodesModelSel,storage_techs,vintage,"perUnitDecom")
12238   
12239              + storage_unitsTotal(nodesModelSel,yearsSel,storage_techs,vintage)
12240              * accounting_storageUnits(indicator_a,nodesModelSel,storage_techs,vintage,"perUnitTotal") )
12241          )
12242      )
12243   
12244   
12245  * == transfer ==
12246      + sum ((accNodesModel_a,nodesModelSel,accYears_a,yearsSel,indicator_a)
12247              $( compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
12248                  and sameas(nodesModelSel,accNodesModel_a) and sameas(yearsSel,accYears_a)),
12249          compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
12250          *
12251          ( sum ((linksModelToCalc,transfer_techs,vintage)
12252                      $(transfer_availTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
12253                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0
12254                          and accounting_transferLinks(indicator_a,linksModelToCalc,transfer_techs,vintage,"useAnnuity") = 0),
12255              0.5
12256              * transfer_linksBuild(linksModelToCalc,yearsSel,transfer_techs,vintage)
12257              * accounting_transferLinks(indicator_a,linksModelToCalc,transfer_techs,vintage,"perLinkBuild") )
12258   
12259          + sum ((linksModelToCalc,years_a,transfer_techs,vintage)
12260                      $(transfer_availTech(linksModelToCalc,years_a,transfer_techs,vintage)
12261                          and years_a.val < sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
12262                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0
12263                          and accounting_transferLinks(indicator_a,linksModelToCalc,transfer_techs,vintage,"useAnnuity") = 1
12264                          and years_a.val + accounting_transferLinks(indicator_a,linksModelToCalc,transfer_techs,vintage,"amorTime") > yearsSel.val
12265                          and years_a.val <= yearsSel.val ),
12266              0.5
12267              * transfer_linksBuild(linksModelToCalc,years_a,transfer_techs,vintage)
12268              * accounting_transferLinks(indicator_a,linksModelToCalc,transfer_techs,vintage,"perLinkBuild")
12269              * accounting_annuityFactor_transferLink(indicator_a,linksModelToCalc,transfer_techs,vintage) )
12270   
12271          + sum ((linksModelToCalc,yearsToCalc,transfer_techs,vintage)
12272                      $(transfer_availTech(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
12273                          and yearsToCalc.val >= sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
12274                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0
12275                          and accounting_transferLinks(indicator_a,linksModelToCalc,transfer_techs,vintage,"useAnnuity") = 1
12276                          and yearsToCalc.val + accounting_transferLinks(indicator_a,linksModelToCalc,transfer_techs,vintage,"amorTime") > yearsSel.val
12277                          and yearsToCalc.val <= yearsSel.val ),
12278              0.5
12279              * transfer_linksBuild(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
12280              * accounting_transferLinks(indicator_a,linksModelToCalc,transfer_techs,vintage,"perLinkBuild")
12281              * accounting_annuityFactor_transferLink(indicator_a,linksModelToCalc,transfer_techs,vintage) )
12282   
12283          + sum ((linksModelToCalc,transfer_techs,vintage,link_types)
12284                      $(transfer_availTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
12285                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0
12286                          and accounting_transferPerLength(indicator_a,linksModelToCalc,transfer_techs,vintage,link_types,"useAnnuity") = 0 ),
12287              0.5
12288              * transfer_linksBuild(linksModelToCalc,yearsSel,transfer_techs,vintage)
12289              * transfer_lengthParam(linksModelToCalc,link_types,"length")
12290              * accounting_transferPerLength(indicator_a,linksModelToCalc,transfer_techs,vintage,link_types,"perLengthBuild") )
12291   
12292          + sum ((linksModelToCalc,years_a,transfer_techs,vintage,link_types)
12293                      $(transfer_availTech(linksModelToCalc,years_a,transfer_techs,vintage)
12294                          and years_a.val < sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
12295                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0
12296                          and accounting_transferPerLength(indicator_a,linksModelToCalc,transfer_techs,vintage,link_types,"useAnnuity") = 1
12297                          and years_a.val + accounting_transferPerLength(indicator_a,linksModelToCalc,transfer_techs,vintage,link_types,"amorTime") > yearsSel.val
12298                          and years_a.val <= yearsSel.val ),
12299              0.5
12300              * transfer_linksBuild(linksModelToCalc,years_a,transfer_techs,vintage)
12301              * transfer_lengthParam(linksModelToCalc,link_types,"length")
12302              * accounting_transferPerLength(indicator_a,linksModelToCalc,transfer_techs,vintage,link_types,"perLengthBuild")
12303              * accounting_annuityFactor_transferPerLength(indicator_a,linksModelToCalc,transfer_techs,vintage,link_types) )
12304   
12305          + sum ((linksModelToCalc,yearsToCalc,transfer_techs,vintage,link_types)
12306                      $(transfer_availTech(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
12307                          and yearsToCalc.val >= sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
12308                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0
12309                          and accounting_transferPerLength(indicator_a,linksModelToCalc,transfer_techs,vintage,link_types,"useAnnuity") = 1
12310                          and yearsToCalc.val + accounting_transferPerLength(indicator_a,linksModelToCalc,transfer_techs,vintage,link_types,"amorTime") > yearsSel.val
12311                          and yearsToCalc.val <= yearsSel.val ),
12312              0.5
12313              * transfer_linksBuild(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
12314              * transfer_lengthParam(linksModelToCalc,link_types,"length")
12315              * accounting_transferPerLength(indicator_a,linksModelToCalc,transfer_techs,vintage,link_types,"perLengthBuild")
12316              * accounting_annuityFactor_transferPerLength(indicator_a,linksModelToCalc,transfer_techs,vintage,link_types) )
12317   
12318          + sum ((linksModelToCalc,transfer_techs,vintage)
12319                      $(transfer_usedTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
12320                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0 ),
12321              0.5
12322              * transfer_linksDecom(linksModelToCalc,yearsSel,transfer_techs,vintage)
12323              * accounting_transferLinks(indicator_a,linksModelToCalc,transfer_techs,vintage,"perLinkDecom")
12324   
12325              + 0.5
12326              * transfer_linksTotal(linksModelToCalc,yearsSel,transfer_techs,vintage)
12327              * accounting_transferLinks(indicator_a,linksModelToCalc,transfer_techs,vintage,"perLinkTotal")
12328   
12329              + 0.5
12330              * sum (link_types,
12331                  transfer_linksDecom(linksModelToCalc,yearsSel,transfer_techs,vintage)
12332                  * transfer_lengthParam(linksModelToCalc,link_types,"length")
12333                  * accounting_transferPerLength(indicator_a,linksModelToCalc,transfer_techs,vintage,link_types,"perLengthDecom")
12334   
12335                  + transfer_linksTotal(linksModelToCalc,yearsSel,transfer_techs,vintage)
12336                  * transfer_lengthParam(linksModelToCalc,link_types,"length")
12337                  * accounting_transferPerLength(indicator_a,linksModelToCalc,transfer_techs,vintage,link_types,"perLengthTotal"))
12338   
12339              + 0.5
12340              * sum (timeModelSel,
12341                  transfer_flowAlong(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
12342                  * timeLength(timeModelSel)
12343                  * ( accounting_transferLinks(indicator_a,linksModelToCalc,transfer_techs,vintage,"perFlow")
12344                      + accounting_transferLinks(indicator_a,linksModelToCalc,transfer_techs,vintage,"perFlowAlong"))
12345   
12346                  + transfer_flowAgainst(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
12347                  * timeLength(timeModelSel)
12348                  * ( accounting_transferLinks(indicator_a,linksModelToCalc,transfer_techs,vintage,"perFlow")
12349                      + accounting_transferLinks(indicator_a,linksModelToCalc,transfer_techs,vintage,"perFlowAgainst")))
12350   
12351              + 0.5
12352              * sum ((timeModelSel, link_types),
12353                  transfer_flowAlong(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
12354                  * timeLength(timeModelSel)
12355                  * transfer_lengthParam(linksModelToCalc,link_types,"length")
12356                  * (accounting_transferPerLength(indicator_a,linksModelToCalc,transfer_techs,vintage,link_types,"perFlow")
12357                      + accounting_transferPerLength(indicator_a,linksModelToCalc,transfer_techs,vintage,link_types,"perFlowAlong"))
12358   
12359                  + transfer_flowAgainst(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
12360                  * timeLength(timeModelSel)
12361                  * transfer_lengthParam(linksModelToCalc,link_types,"length")
12362                  * (accounting_transferPerLength(indicator_a,linksModelToCalc,transfer_techs,vintage,link_types,"perFlow")
12363                      + accounting_transferPerLength(indicator_a,linksModelToCalc,transfer_techs,vintage,link_types,"perFlowAgainst")))
12364              )
12365          )
12366      )
12367   
12368   
12369  * == sources / sinks ==
12370      + sum ((accNodesModel_a,nodesModelSel,accYears_a,yearsSel,indicator_a)
12371              $( compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
12372                  and sameas(nodesModelSel,accNodesModel_a) and sameas(yearsSel,accYears_a)),
12373          compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
12374          *
12375          sum ((timeModelSel,sourcesink_techs,commodity)
12376                  $sourcesink_enabled(nodesModelSel,yearsSel,sourcesink_techs,commodity),
12377              sourcesink_flow(timeModelSel,nodesModelSel,yearsSel,sourcesink_techs,commodity)
12378              * timeLength(timeModelSel)
12379              * accounting_sourcesinkFlow(indicator_a,nodesModelSel,yearsSel,sourcesink_techs,commodity,"perFlow") )
12380      );
12381   
12382  * // ### Accounting Indicator Calculation Links
12383  * // Calculates the indicators for each transfer for converters, sources and sinks, transfer, storage and variable indicators.
12384  * // {Eq_accounting_indicatorCalc_links}
12385  Eq_accounting_indicatorCalc_links(linksModelToCalc,yearsSel,indicator)
12386      $activeIndicators_links(linksModelToCalc,yearsSel,indicator)
12387      ..
12388      accounting_indicator_links(linksModelToCalc,yearsSel,indicator)
12389      =e=
12390      sum ((transfer_techs,vintage)
12391                  $(transfer_availTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
12392                      and accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"useAnnuity") = 0),
12393          transfer_linksBuild(linksModelToCalc,yearsSel,transfer_techs,vintage)
12394          * accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"perLinkBuild") )
12395   
12396      + sum ((years_a,transfer_techs,vintage)
12397                  $(transfer_availTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
12398                      and accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"useAnnuity") = 1
12399                      and years_a.val + accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"amorTime") > yearsSel.val
12400                      and years_a.val <= yearsSel.val ),
12401          transfer_linksBuild(linksModelToCalc,years_a,transfer_techs,vintage)
12402          * accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"perLinkBuild")
12403          * accounting_annuityFactor_transferLink(indicator,linksModelToCalc,transfer_techs,vintage) )
12404   
12405      + sum ((transfer_techs,vintage,link_types)
12406                  $(transfer_availTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
12407                      and accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"useAnnuity") = 0 ),
12408          transfer_linksBuild(linksModelToCalc,yearsSel,transfer_techs,vintage)
12409          * transfer_lengthParam(linksModelToCalc,link_types,"length")
12410          * accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"perLengthBuild") )
12411   
12412      + sum ((years_a,transfer_techs,vintage,link_types)
12413                  $(transfer_availTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
12414                      and accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"useAnnuity") = 1
12415                      and years_a.val + accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"amorTime") > yearsSel.val
12416                      and years_a.val <= yearsSel.val ),
12417          transfer_linksBuild(linksModelToCalc,years_a,transfer_techs,vintage)
12418          * transfer_lengthParam(linksModelToCalc,link_types,"length")
12419          * accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"perLengthBuild")
12420          * accounting_annuityFactor_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types) )
12421   
12422      + sum ((transfer_techs,vintage)
12423                  $(transfer_usedTech(linksModelToCalc,yearsSel,transfer_techs,vintage)),
12424          transfer_linksDecom(linksModelToCalc,yearsSel,transfer_techs,vintage)
12425          * accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"perLinkDecom")
12426   
12427          + transfer_linksTotal(linksModelToCalc,yearsSel,transfer_techs,vintage)
12428          * accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"perLinkTotal")
12429   
12430          + sum (link_types,
12431              transfer_linksDecom(linksModelToCalc,yearsSel,transfer_techs,vintage)
12432              * transfer_lengthParam(linksModelToCalc,link_types,"length")
12433              * accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"perLengthDecom")
12434   
12435              + transfer_linksTotal(linksModelToCalc,yearsSel,transfer_techs,vintage)
12436              * transfer_lengthParam(linksModelToCalc,link_types,"length")
12437              * accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"perLengthTotal"))
12438   
12439          + sum (timeModelSel,
12440              transfer_flowAlong(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
12441              * timeLength(timeModelSel)
12442              * ( accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"perFlow")
12443                  + accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"perFlowAlong"))
12444   
12445              + transfer_flowAgainst(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
12446              * timeLength(timeModelSel)
12447              * ( accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"perFlow")
12448                  + accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"perFlowAgainst")))
12449   
12450          + sum ((timeModelSel, link_types),
12451              transfer_flowAlong(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
12452              * timeLength(timeModelSel)
12453              * transfer_lengthParam(linksModelToCalc,link_types,"length")
12454              * (accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"perFlow")
12455                  + accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"perFlowAlong"))
12456   
12457              + transfer_flowAgainst(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
12458              * timeLength(timeModelSel)
12459              * transfer_lengthParam(linksModelToCalc,link_types,"length")
12460              * (accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"perFlow")
12461                  + accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"perFlowAgainst")))
12462          );
12463   
12464  * // ### Accounting Objective
12465  * // Calculates the indicators for the objective.
12466  * // {Eq_accounting_objective}
12467  Eq_accounting_objective
12468      ..
12469      accounting_objective
12470      =e=
12471      sum ((accNodesModel,accYears,indicator)
12472              $(accounting_indicatorBounds(accNodesModel,accYears,indicator,"obj") <> 0 ),
12473          accounting_indicator(accNodesModel,accYears,indicator) )
12474   
12475   
12476  * ==== model definition ====
12477   
12478  Model M_accounting
12479  /
12480  Eq_accounting_indicatorCalc_links
12481  Eq_accounting_indicatorCalc
12482  Eq_accounting_objective
12483  /;
INCLUDE    C:\Local\REMix\framework\remix\framework\model\source\optiframe.gms
12485  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
12486  * SPDX-License-Identifier: BSD-3-Clause
12487   
12488  * ==== optimization frames ====
12490   
12491  * mapping from optimization frame to years
12493  set optiframe / of1 * of3 /;
12494  set optiframeToCalc(optiframe);
12495   
12497  set map_optiframe(optiframe,years) / of1 . #yearsToCalc /;
12499   
12501   
12502  option optiframeToCalc < map_optiframe;
12503   
12504  Model remix /
12505    M_converter
12506    M_storage
12507    M_transfer
12508    M_sourcesink
12509    M_balance
12510    M_accounting
12511  /;
12512   
12513   
12514  * ==== include methods  ====
12515   
12516  * check if the method is valid
12522   
12523   
12524  * if method is pips write the checkanno tool
INCLUDE    C:\Local\REMix\framework\remix\framework\model\source\methods\checkanno.gms
12526  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
12527  * SPDX-License-Identifier: BSD-3-Clause
12528   
12531   
12534   
12535  * if method is pips generate the annotated gdx file
INCLUDE    C:\Local\REMix\framework\remix\framework\model\source\methods\pips.gms
12537  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
12538  * SPDX-License-Identifier: BSD-3-Clause
12539   
12543   
12544  * if method is solve run the model with commercial solvers
INCLUDE    C:\Local\REMix\framework\remix\framework\model\source\methods\solve.gms
12546  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
12547  * SPDX-License-Identifier: BSD-3-Clause
12548   
12551   
12553   
12554  * ==== global options ====
12561   
12562  * ==== general solver options ====
12572   
12573  * ==== cplex options ====
12582   
12583  * ==== gurobi options ====
12584   
12585   
12586  * ==== copt options ====
12590   
12591  * ==== debug options ====
12594   
12595   
12596  * ==== setup optimization ====
12597  if ((sum(nodesModelToCalc, 1)>40 or sum(timeModelToCalc, 1)>50) and not 0,
12598     option limRow=0, limCol=0, solPrint=off;
12599  else
12600     option limRow=100000, limCol=100000, solPrint=on;
12601  );
12602   
12604   
12605  option mip = cplex;
12606  option reslim = 1209600;
12607  option optcr = 1e-3;
12608  remix.threads = 4;
12609  remix.optFile = 1;
12610  remix.solveLink = 0;
12611  remix.holdFixed = 1;
12612   
12613   
12614  * ==== configure option files ====
12615   
12618   
12619  file opt / "cplex.opt" /;
12620  put opt;
12622  put "rerun no" /;
12623  put "iis 1" /;
12624  put "lpmethod 4" /;
12626  put "barorder 3 /;" /;
12627  put "preind 1" /;
12628  put "scaind 0" /;
12629  put "predual -1" /;
12630  put "baralg 0" /;
12631  put "barstartalg 1" /;
12632  put "barepcomp 1e-6" /;
12633  put "solutiontype 2" /;
12635  put "startalg 4" /;
12636  put "epgap 1e-3" /;
12637  put "quality 1" /;
12638  put "barcolnz 0" /;
12639  put "threads 4" /;
12640  put "parallelmode 1" /;
12643  putclose;
12644   
12646   
12647   
12648  * ==== solve the problem ====
12649   
12650  loop ( optiframeToCalc,
12651      yearsSel(years) = no;
12652      yearsSel(years)$map_optiframe(optiframeToCalc,years) = yes;
12653      yearsToFix(years) = no;
12654      yearsToFix(years)$(years.val < smin(years_a$yearsSel(years_a), years_a.val)) = yes;
12655      accYearsSel(accYears) = no;
12656      accYearsSel("horizon") = yes;
12657      accYearsSel(accYears)$(sum(yearsSel$sameas(accYears,yearsSel), 1)) = yes;
12658      accYearsToFix(accYears) = no;
12659      accYearsToFix(accYears)$(sum(years$(sameas(years,accYears) and years.val < smin(years_a$yearsSel(years_a), years_a.val)), 1) > 0) = yes;
12660      timeModelSel(timeModel) = no;
12661      timeModelSel(timeModel)$timeModelToCalc(timeModel) = yes;
12662      nodesModelSel(nodesModel) = no;
12663      nodesModelSel(nodesModel)$nodesModelToCalc(nodesModel) = yes;
12664   
12665  * Fix decision for years previously optimized in case of myopic or foresight
12666      converter_unitsDelta(nodesModelToCalc,yearsToFix,converter_techs)
12667          $(sum(yearsToCalc$sameas(yearsToFix, yearsToCalc), 1))
12668          = sum(vintage, converter_unitsTotal.l(nodesModelToCalc,yearsToFix,converter_techs,vintage))
12669              - converter_capacityParam(nodesModelToCalc,yearsToFix,converter_techs,"unitsUpperLimit");
12670      converter_unitsDelta(nodesModelToCalc,yearsToFix,converter_techs)
12671          $(converter_unitsDelta(nodesModelToCalc,yearsToFix,converter_techs) < 0) = 0;
12672   
12673      converter_unitsBuild.l(nodesModelToCalc,yearsToFix,converter_techs,vintage)
12674          $converter_availTech(nodesModelToCalc,yearsToFix,converter_techs,vintage)
12675          = converter_unitsBuild.l(nodesModelToCalc,yearsToFix,converter_techs,vintage)
12676              - converter_unitsDelta(nodesModelToCalc,yearsToFix,converter_techs);
12677   
12678      converter_unitsBuild.l(nodesModelToCalc,yearsToFix,converter_techs,vintage)
12679          $(converter_unitsBuild.l(nodesModelToCalc,yearsToFix,converter_techs,vintage) < 0) = 0;
12680      converter_unitsBuild.fx(nodesModelToCalc,yearsToFix,converter_techs,vintage)
12681          = converter_unitsBuild.l(nodesModelToCalc,yearsToFix,converter_techs,vintage);
12682      converter_unitsDecom.l(nodesModelToCalc,yearsToFix,converter_techs,vintage)
12683          $(converter_unitsDecom.l(nodesModelToCalc,yearsToFix,converter_techs,vintage) < 0) = 0;
12684      converter_unitsDecom.fx(nodesModelToCalc,yearsToFix,converter_techs,vintage)
12685          = converter_unitsDecom.l(nodesModelToCalc,yearsToFix,converter_techs,vintage);
12686      converter_unitsTotal.fx(nodesModelToCalc,yearsToFix,converter_techs,vintage)
12687          = converter_unitsTotal.l(nodesModelToCalc,yearsToFix,converter_techs,vintage);
12688   
12689   
12690      storage_unitsDelta(nodesModelToCalc,yearsToFix,storage_techs)
12691          $(sum(yearsToCalc$sameas(yearsToFix, yearsToCalc), 1))
12692          = sum(vintage, storage_unitsTotal.l(nodesModelToCalc,yearsToFix,storage_techs,vintage))
12693              - storage_reservoirParam(nodesModelToCalc,yearsToFix,storage_techs,"unitsUpperLimit");
12694      storage_unitsDelta(nodesModelToCalc,yearsToFix,storage_techs)
12695          $(storage_unitsDelta(nodesModelToCalc,yearsToFix,storage_techs) < 0) = 0;
12696   
12697      storage_unitsBuild.l(nodesModelToCalc,yearsToFix,storage_techs,vintage)
12698          $storage_availTech(nodesModelToCalc,yearsToFix,storage_techs,vintage)
12699          = storage_unitsBuild.l(nodesModelToCalc,yearsToFix,storage_techs,vintage)
12700              - storage_unitsDelta(nodesModelToCalc,yearsToFix,storage_techs);
12701   
12702      storage_unitsBuild.l(nodesModelToCalc,yearsToFix,storage_techs,vintage)
12703          $(storage_unitsBuild.l(nodesModelToCalc,yearsToFix,storage_techs,vintage) < 0) = 0;
12704      storage_unitsBuild.fx(nodesModelToCalc,yearsToFix,storage_techs,vintage)
12705          = storage_unitsBuild.l(nodesModelToCalc,yearsToFix,storage_techs,vintage);
12706      storage_unitsDecom.l(nodesModelToCalc,yearsToFix,storage_techs,vintage)
12707          $(storage_unitsDecom.l(nodesModelToCalc,yearsToFix,storage_techs,vintage) < 0) = 0;
12708      storage_unitsDecom.fx(nodesModelToCalc,yearsToFix,storage_techs,vintage)
12709          = storage_unitsDecom.l(nodesModelToCalc,yearsToFix,storage_techs,vintage);
12710      storage_unitsTotal.fx(nodesModelToCalc,yearsToFix,storage_techs,vintage)
12711          = storage_unitsTotal.l(nodesModelToCalc,yearsToFix,storage_techs,vintage);
12712   
12713   
12714      transfer_linksDelta(linksModelToCalc,yearsToFix,transfer_techs)
12715          $(sum(yearsToCalc$sameas(yearsToFix, yearsToCalc), 1))
12716          = sum(vintage, transfer_linksTotal.l(linksModelToCalc,yearsToFix,transfer_techs,vintage))
12717              - transfer_linksParam(linksModelToCalc,yearsToFix,transfer_techs,"linksUpperLimit");
12718      transfer_linksDelta(linksModelToCalc,yearsToFix,transfer_techs)
12719          $(transfer_linksDelta(linksModelToCalc,yearsToFix,transfer_techs) < 0) = 0;
12720   
12721      transfer_linksBuild.l(linksModelToCalc,yearsToFix,transfer_techs,vintage)
12722          $transfer_availTech(linksModelToCalc,yearsToFix,transfer_techs,vintage)
12723          = transfer_linksBuild.l(linksModelToCalc,yearsToFix,transfer_techs,vintage)
12724              - transfer_linksDelta(linksModelToCalc,yearsToFix,transfer_techs);
12725   
12726      transfer_linksBuild.l(linksModelToCalc,yearsToFix,transfer_techs,vintage)
12727          $(transfer_linksBuild.l(linksModelToCalc,yearsToFix,transfer_techs,vintage) < 0) = 0;
12728      transfer_linksBuild.fx(linksModelToCalc,yearsToFix,transfer_techs,vintage)
12729          = transfer_linksBuild.l(linksModelToCalc,yearsToFix,transfer_techs,vintage);
12730      transfer_linksDecom.l(linksModelToCalc,yearsToFix,transfer_techs,vintage)
12731          $(transfer_linksDecom.l(linksModelToCalc,yearsToFix,transfer_techs,vintage) < 0) = 0;
12732      transfer_linksDecom.fx(linksModelToCalc,yearsToFix,transfer_techs,vintage)
12733          = transfer_linksDecom.l(linksModelToCalc,yearsToFix,transfer_techs,vintage);
12734      transfer_linksTotal.fx(linksModelToCalc,yearsToFix,transfer_techs,vintage)
12735          = transfer_linksTotal.l(linksModelToCalc,yearsToFix,transfer_techs,vintage);
12736   
12737      accounting_indicator.fx(accNodesModel,accYearsToFix,indicator)
12738          = accounting_indicator.l(accNodesModel,accYearsToFix,indicator);
12739   
12740  * Optimize and log values
12741      if (opti_sense < 0,
12742      solve remix minimizing accounting_objective using mip;
12743      else
12744      solve remix maximizing accounting_objective using mip;
12745      );
12746   
12747      put_utility 'log' / 'Model status ' remix.modelstat:0:0;
12748      put_utility 'log' / 'Objective value ' accounting_objective.l:0:3;
12749   
12750  );
12751   
12755   
12756  * if method is pareto solve the model once and afterwards run multiple points along the pareto front
INCLUDE    C:\Local\REMix\framework\remix\framework\model\source\methods\pareto.gms
12758  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
12759  * SPDX-License-Identifier: BSD-3-Clause
12760   
12764   
12765  * if method is mga solve the model once and afterwards maximize the length metric of indicators
INCLUDE    C:\Local\REMix\framework\remix\framework\model\source\methods\mga.gms
12767  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
12768  * SPDX-License-Identifier: BSD-3-Clause
12769   
12773   
12774  * if method is iternodes run the model by iterating through all nodesToCalc
INCLUDE    C:\Local\REMix\framework\remix\framework\model\source\methods\iternodes.gms
12776  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
12777  * SPDX-License-Identifier: BSD-3-Clause
12778   
12782   
12783  * if postcalc is one write the results gdx
INCLUDE    C:\Local\REMix\framework\remix\framework\model\source\postcalc\definition.gms
12785  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
12786  * SPDX-License-Identifier: BSD-3-Clause
12787   
12789   
12790  * ==== indicator accounting ====
12791   
12792  indicator_accounting_detailed(indicator,nodesModelToCalc,yearsToCalc,techs)
12793      =
12794  * == converters ==
12795      sum ((converter_techs(techs),vintage)
12796                  $(converter_availTech(nodesModelToCalc,yearsToCalc,converter_techs,vintage)
12797                      and accounting_converterUnits(indicator,nodesModelToCalc,converter_techs,vintage,"useAnnuity") = 0),
12798          converter_unitsBuild.l(nodesModelToCalc,yearsToCalc,converter_techs,vintage)
12799          * accounting_converterUnits(indicator,nodesModelToCalc,converter_techs,vintage,"perUnitBuild"))
12800   
12801      + sum ((years_a,converter_techs(techs),vintage)
12802                  $(converter_availTech(nodesModelToCalc,years_a,converter_techs,vintage)
12803                      and accounting_converterUnits(indicator,nodesModelToCalc,converter_techs,vintage,"useAnnuity") = 1
12804                      and years_a.val + accounting_converterUnits(indicator,nodesModelToCalc,converter_techs,vintage,"amorTime") > yearsToCalc.val
12805                      and years_a.val <= yearsToCalc.val ),
12806          converter_unitsBuild.l(nodesModelToCalc,years_a,converter_techs,vintage)
12807          * accounting_converterUnits(indicator,nodesModelToCalc,converter_techs,vintage,"perUnitBuild")
12808          * accounting_annuityFactor_converter(indicator,nodesModelToCalc,converter_techs,vintage) )
12809   
12810      + sum ((converter_techs(techs),vintage)
12811                  $converter_usedTech(nodesModelToCalc,yearsToCalc,converter_techs,vintage),
12812          converter_unitsDecom.l(nodesModelToCalc,yearsToCalc,converter_techs,vintage)
12813          * accounting_converterUnits(indicator,nodesModelToCalc,converter_techs,vintage,"perUnitDecom")
12814   
12815          + converter_unitsTotal.l(nodesModelToCalc,yearsToCalc,converter_techs,vintage)
12816          * accounting_converterUnits(indicator,nodesModelToCalc,converter_techs,vintage,"perUnitTotal") )
12817   
12818      + sum ((timeModelToCalc,converter_techs(techs),vintage,activity)
12819                  $converter_usedTechAct(nodesModelToCalc,yearsToCalc,converter_techs,vintage,activity),
12820          converter_activity.l(timeModelToCalc,nodesModelToCalc,yearsToCalc,converter_techs,vintage,activity)
12821          * timeLength(timeModelToCalc)
12822          * accounting_converterActivity(indicator,nodesModelToCalc,converter_techs,vintage,activity,"perActivity") )
12823   
12824      + sum ((timeModelToCalc,converter_techs(techs),vintage)
12825                  $converter_usedTech(nodesModelToCalc,yearsToCalc,converter_techs,vintage),
12826          converter_unitStartups.l(timeModelToCalc,nodesModelToCalc,yearsToCalc,converter_techs,vintage)
12827          * accounting_converterStartup(indicator,nodesModelToCalc,converter_techs,vintage,"perStartup") )
12828   
12829      + sum ((timeModelToCalc,converter_techs(techs),vintage)
12830                  $converter_usedTech(nodesModelToCalc,yearsToCalc,converter_techs,vintage),
12831          converter_rampPos.l(timeModelToCalc,nodesModelToCalc,yearsToCalc,converter_techs,vintage)
12832          * (accounting_converterStartup(indicator,nodesModelToCalc,converter_techs,vintage,"perRamp")
12833              + accounting_converterStartup(indicator,nodesModelToCalc,converter_techs,vintage,"perRampPos"))
12834   
12835          + converter_rampNeg.l(timeModelToCalc,nodesModelToCalc,yearsToCalc,converter_techs,vintage)
12836          * (accounting_converterStartup(indicator,nodesModelToCalc,converter_techs,vintage,"perRamp")
12837              + accounting_converterStartup(indicator,nodesModelToCalc,converter_techs,vintage,"perRampNeg")))
12838   
12839  * == storage ==
12840      + sum ((storage_techs(techs),vintage)
12841                  $(storage_availTech(nodesModelToCalc,yearsToCalc,storage_techs,vintage)
12842                      and accounting_storageUnits(indicator,nodesModelToCalc,storage_techs,vintage,"useAnnuity") = 0),
12843          storage_unitsBuild.l(nodesModelToCalc,yearsToCalc,storage_techs,vintage)
12844          * accounting_storageUnits(indicator,nodesModelToCalc,storage_techs,vintage,"perUnitBuild") )
12845   
12846      + sum ((years_a,storage_techs(techs),vintage)
12847                  $(storage_availTech(nodesModelToCalc,yearsToCalc,storage_techs,vintage)
12848                      and accounting_storageUnits(indicator,nodesModelToCalc,storage_techs,vintage,"useAnnuity") = 1
12849                      and years_a.val + accounting_storageUnits(indicator,nodesModelToCalc,storage_techs,vintage,"amorTime") > yearsToCalc.val
12850                      and years_a.val <= yearsToCalc.val ),
12851          storage_unitsBuild.l(nodesModelToCalc,years_a,storage_techs,vintage)
12852          * accounting_storageUnits(indicator,nodesModelToCalc,storage_techs,vintage,"perUnitBuild")
12853          * accounting_annuityFactor_storage(indicator,nodesModelToCalc,storage_techs,vintage) )
12854   
12855      + sum ((storage_techs(techs),vintage)
12856                  $storage_usedTech(nodesModelToCalc,yearsToCalc,storage_techs,vintage),
12857          storage_unitsDecom.l(nodesModelToCalc,yearsToCalc,storage_techs,vintage)
12858          * accounting_storageUnits(indicator,nodesModelToCalc,storage_techs,vintage,"perUnitDecom")
12859   
12860          + storage_unitsTotal.l(nodesModelToCalc,yearsToCalc,storage_techs,vintage)
12861          * accounting_storageUnits(indicator,nodesModelToCalc,storage_techs,vintage,"perUnitTotal") )
12862   
12863  * == transfer ==
12864      + sum ((linksModel,transfer_techs(techs),vintage)
12865                  $(transfer_availTech(linksModel,yearsToCalc,transfer_techs,vintage)
12866                      and linksModelToCalc(linksModel)
12867                      and transfer_incidenceModel(nodesModelToCalc,linksModel) <> 0
12868                      and accounting_transferLinks(indicator,linksModel,transfer_techs,vintage,"useAnnuity") = 0),
12869          0.5
12870          * transfer_linksBuild.l(linksModel,yearsToCalc,transfer_techs,vintage)
12871          * accounting_transferLinks(indicator,linksModel,transfer_techs,vintage,"perLinkBuild") )
12872   
12873      + sum ((linksModel,years_a,transfer_techs(techs),vintage)
12874                  $(transfer_availTech(linksModel,yearsToCalc,transfer_techs,vintage)
12875                      and linksModelToCalc(linksModel)
12876                      and transfer_incidenceModel(nodesModelToCalc,linksModel) <> 0
12877                      and accounting_transferLinks(indicator,linksModel,transfer_techs,vintage,"useAnnuity") = 1
12878                      and years_a.val + accounting_transferLinks(indicator,linksModel,transfer_techs,vintage,"amorTime") > yearsToCalc.val
12879                      and years_a.val <= yearsToCalc.val ),
12880          0.5
12881          * transfer_linksBuild.l(linksModel,years_a,transfer_techs,vintage)
12882          * accounting_transferLinks(indicator,linksModel,transfer_techs,vintage,"perLinkBuild")
12883          * accounting_annuityFactor_transferLink(indicator,linksModel,transfer_techs,vintage) )
12884   
12885      + sum ((linksModel,transfer_techs(techs),vintage,link_types)
12886                  $(transfer_availTech(linksModel,yearsToCalc,transfer_techs,vintage)
12887                      and linksModelToCalc(linksModel)
12888                      and transfer_incidenceModel(nodesModelToCalc,linksModel) <> 0
12889                      and accounting_transferPerLength(indicator,linksModel,transfer_techs,vintage,link_types,"useAnnuity") = 0 ),
12890          0.5
12891          * transfer_linksBuild.l(linksModel,yearsToCalc,transfer_techs,vintage)
12892          * transfer_lengthParam(linksModel,link_types,"length")
12893          * accounting_transferPerLength(indicator,linksModel,transfer_techs,vintage,link_types,"perLengthBuild") )
12894   
12895      + sum ((linksModel,years_a,transfer_techs(techs),vintage,link_types)
12896                  $(transfer_availTech(linksModel,yearsToCalc,transfer_techs,vintage)
12897                      and linksModelToCalc(linksModel)
12898                      and transfer_incidenceModel(nodesModelToCalc,linksModel) <> 0
12899                      and accounting_transferPerLength(indicator,linksModel,transfer_techs,vintage,link_types,"useAnnuity") = 1
12900                      and years_a.val + accounting_transferPerLength(indicator,linksModel,transfer_techs,vintage,link_types,"amorTime") > yearsToCalc.val
12901                      and years_a.val <= yearsToCalc.val ),
12902          0.5
12903          * transfer_linksBuild.l(linksModel,years_a,transfer_techs,vintage)
12904          * transfer_lengthParam(linksModel,link_types,"length")
12905          * accounting_transferPerLength(indicator,linksModel,transfer_techs,vintage,link_types,"perLengthBuild")
12906          * accounting_annuityFactor_transferPerLength(indicator,linksModel,transfer_techs,vintage,link_types) )
12907   
12908      + sum ((linksModel,transfer_techs(techs),vintage)
12909                  $(transfer_usedTech(linksModel,yearsToCalc,transfer_techs,vintage)
12910                      and linksModelToCalc(linksModel)
12911                      and transfer_incidenceModel(nodesModelToCalc,linksModel) <> 0 ),
12912          0.5
12913          * transfer_linksDecom.l(linksModel,yearsToCalc,transfer_techs,vintage)
12914          * accounting_transferLinks(indicator,linksModel,transfer_techs,vintage,"perLinkDecom")
12915   
12916          + 0.5
12917          * transfer_linksTotal.l(linksModel,yearsToCalc,transfer_techs,vintage)
12918          * accounting_transferLinks(indicator,linksModel,transfer_techs,vintage,"perLinkTotal")
12919   
12920          + 0.5
12921          * sum (link_types,
12922              transfer_linksDecom.l(linksModel,yearsToCalc,transfer_techs,vintage)
12923              * transfer_lengthParam(linksModel,link_types,"length")
12924              * accounting_transferPerLength(indicator,linksModel,transfer_techs,vintage,link_types,"perLengthDecom")
12925   
12926              + transfer_linksTotal.l(linksModel,yearsToCalc,transfer_techs,vintage)
12927              * transfer_lengthParam(linksModel,link_types,"length")
12928              * accounting_transferPerLength(indicator,linksModel,transfer_techs,vintage,link_types,"perLengthTotal"))
12929   
12930          + 0.5
12931          * sum (timeModelToCalc,
12932              transfer_flowAlong.l(timeModelToCalc,linksModel,yearsToCalc,transfer_techs,vintage)
12933              * timeLength(timeModelToCalc)
12934              * ( accounting_transferLinks(indicator,linksModel,transfer_techs,vintage,"perFlow")
12935                  + accounting_transferLinks(indicator,linksModel,transfer_techs,vintage,"perFlowAlong"))
12936   
12937              + transfer_flowAgainst.l(timeModelToCalc,linksModel,yearsToCalc,transfer_techs,vintage)
12938              * timeLength(timeModelToCalc)
12939              * ( accounting_transferLinks(indicator,linksModel,transfer_techs,vintage,"perFlow")
12940                  + accounting_transferLinks(indicator,linksModel,transfer_techs,vintage,"perFlowAgainst")))
12941   
12942          + 0.5
12943          * sum ((timeModelToCalc, link_types),
12944              transfer_flowAlong.l(timeModelToCalc,linksModel,yearsToCalc,transfer_techs,vintage)
12945              * timeLength(timeModelToCalc)
12946              * transfer_lengthParam(linksModel,link_types,"length")
12947              * (accounting_transferPerLength(indicator,linksModel,transfer_techs,vintage,link_types,"perFlow")
12948                  + accounting_transferPerLength(indicator,linksModel,transfer_techs,vintage,link_types,"perFlowAlong"))
12949   
12950              + transfer_flowAgainst.l(timeModelToCalc,linksModel,yearsToCalc,transfer_techs,vintage)
12951              * timeLength(timeModelToCalc)
12952              * transfer_lengthParam(linksModel,link_types,"length")
12953              * (accounting_transferPerLength(indicator,linksModel,transfer_techs,vintage,link_types,"perFlow")
12954                  + accounting_transferPerLength(indicator,linksModel,transfer_techs,vintage,link_types,"perFlowAgainst"))))
12955   
12956   
12957  * == sources / sinks ==
12958      + sum ((timeModelToCalc,sourcesink_techs(techs),commodity)
12959              $sourcesink_enabled(nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity),
12960          sourcesink_flow.l(timeModelToCalc,nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity)
12961          * timeLength(timeModelToCalc)
12962          * accounting_sourcesinkFlow(indicator,nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity,"perFlow"))
12963      ;
12964   
12965   
12966  * ==== full set of main indicators ====
12967   
12968  indicator_accounting(accNodesModel,accYears,indicator)
12969      $sum((accNodesModel_a,accYears_a,indicator_a)
12970              $compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a), 1)
12971      =
12972      + sum((accNodesModel_a,accYears_a,indicator_a)
12973              $(compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
12974                  and variableIndicators(accNodesModel_a,accYears_a,indicator_a)),
12975          compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
12976          * accounting_indicator.l(accNodesModel_a,accYears_a,indicator_a))
12977   
12978      + sum((accNodesModel_a,accYears_a,indicator_a)
12979              $(compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)),
12980          compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
12981          * (sum((nodesModelToCalc,yearsToCalc,techs)
12982                  $(sameas(accNodesModel_a, nodesModelToCalc)
12983                      and sameas(accYears_a, yearsToCalc)),
12984                  indicator_accounting_detailed(indicator_a,nodesModelToCalc,yearsToCalc,techs))))
12985      ;
12986   
12987  indicator_accounting_comp(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
12988      $compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
12989      =
12990          compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
12991          * accounting_indicator.l(accNodesModel_a,accYears_a,indicator_a)
12992              $variableIndicators(accNodesModel_a,accYears_a,indicator_a)
12993   
12994          + compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
12995          * (sum((nodesModelToCalc,yearsToCalc,techs)
12996                  $(sameas(accNodesModel_a, nodesModelToCalc)
12997                      and sameas(accYears_a, yearsToCalc)),
12998                  indicator_accounting_detailed(indicator_a,nodesModelToCalc,yearsToCalc,techs)))
12999      ;
13000   
13001  indicator_accounting_ref(accNodesModel,accYears,indicator)
13002      $accounting_indicator.l(accNodesModel,accYears,indicator)
13003      = accounting_indicator.l(accNodesModel,accYears,indicator);
13004   
13005  * ==== link-specific indicator accounting ====
13006   
13007  indicator_accounting_links(indicator,nodesModelToCalc,nodesModelToCalc_a,linksModelToCalc,yearsToCalc,techs)
13008      $(transfer_incidenceModel(nodesModelToCalc,linksModelToCalc) < 0
13009          and transfer_incidenceModel(nodesModelToCalc_a,linksModelToCalc) > 0)
13010      =
13011      sum ((transfer_techs(techs),vintage)
13012                  $(transfer_availTech(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
13013                      and accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"useAnnuity") = 0),
13014          transfer_linksBuild.l(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
13015          * accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"perLinkBuild") )
13016   
13017      + sum ((years_a,transfer_techs(techs),vintage)
13018                  $(transfer_availTech(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
13019                      and accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"useAnnuity") = 1
13020                      and years_a.val + accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"amorTime") > yearsToCalc.val
13021                      and years_a.val <= yearsToCalc.val ),
13022          transfer_linksBuild.l(linksModelToCalc,years_a,transfer_techs,vintage)
13023          * accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"perLinkBuild")
13024          * accounting_annuityFactor_transferLink(indicator,linksModelToCalc,transfer_techs,vintage) )
13025   
13026      + sum ((transfer_techs(techs),vintage,link_types)
13027                  $(transfer_availTech(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
13028                      and accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"useAnnuity") = 0 ),
13029          transfer_linksBuild.l(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
13030          * transfer_lengthParam(linksModelToCalc,link_types,"length")
13031          * accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"perLengthBuild") )
13032   
13033      + sum ((years_a,transfer_techs(techs),vintage,link_types)
13034                  $(transfer_availTech(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
13035                      and accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"useAnnuity") = 1
13036                      and years_a.val + accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"amorTime") > yearsToCalc.val
13037                      and years_a.val <= yearsToCalc.val ),
13038          transfer_linksBuild.l(linksModelToCalc,years_a,transfer_techs,vintage)
13039          * transfer_lengthParam(linksModelToCalc,link_types,"length")
13040          * accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"perLengthBuild")
13041          * accounting_annuityFactor_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types) )
13042   
13043      + sum ((transfer_techs(techs),vintage)
13044                  $(transfer_usedTech(linksModelToCalc,yearsToCalc,transfer_techs,vintage)),
13045          transfer_linksDecom.l(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
13046          * accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"perLinkDecom")
13047   
13048          + transfer_linksTotal.l(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
13049          * accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"perLinkTotal")
13050   
13051          + sum (link_types,
13052              transfer_linksDecom.l(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
13053              * transfer_lengthParam(linksModelToCalc,link_types,"length")
13054              * accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"perLengthDecom")
13055   
13056              + transfer_linksTotal.l(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
13057              * transfer_lengthParam(linksModelToCalc,link_types,"length")
13058              * accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"perLengthTotal"))
13059   
13060          + sum (timeModelToCalc,
13061              transfer_flowAlong.l(timeModelToCalc,linksModelToCalc,yearsToCalc,transfer_techs,vintage)
13062              * timeLength(timeModelToCalc)
13063              * ( accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"perFlow")
13064                  + accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"perFlowAlong"))
13065   
13066              + transfer_flowAgainst.l(timeModelToCalc,linksModelToCalc,yearsToCalc,transfer_techs,vintage)
13067              * timeLength(timeModelToCalc)
13068              * ( accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"perFlow")
13069                  + accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"perFlowAgainst")))
13070   
13071          + sum ((timeModelToCalc, link_types),
13072              transfer_flowAlong.l(timeModelToCalc,linksModelToCalc,yearsToCalc,transfer_techs,vintage)
13073              * timeLength(timeModelToCalc)
13074              * transfer_lengthParam(linksModelToCalc,link_types,"length")
13075              * (accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"perFlow")
13076                  + accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"perFlowAlong"))
13077   
13078              + transfer_flowAgainst.l(timeModelToCalc,linksModelToCalc,yearsToCalc,transfer_techs,vintage)
13079              * timeLength(timeModelToCalc)
13080              * transfer_lengthParam(linksModelToCalc,link_types,"length")
13081              * (accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"perFlow")
13082                  + accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"perFlowAgainst")))
13083      );
13084   
13085   
13086  * == converter capacities ==
13087   
13088  converter_ratedInput(converter_techs,vintage,commodity)
13089      $(converter_techParam(converter_techs,vintage,"lifeTime") > 0)
13090      = smin(activity$converter_usedAct(converter_techs,vintage,activity),
13091              converter_coefficient(converter_techs,vintage,activity,commodity,"coefficient"));
13092  converter_ratedInput(converter_techs,vintage,commodity)
13093      $(converter_ratedInput(converter_techs,vintage,commodity) > 0)
13094      = 0;
13095   
13096  converter_ratedOutput(converter_techs,vintage,commodity)
13097      $(converter_techParam(converter_techs,vintage,"lifeTime") > 0)
13098      = smax(activity$converter_usedAct(converter_techs,vintage,activity),
13099              converter_coefficient(converter_techs,vintage,activity,commodity,"coefficient"));
13100  converter_ratedOutput(converter_techs,vintage,commodity)
13101      $(converter_ratedOutput(converter_techs,vintage,commodity) < 0)
13102      = 0;
13103   
13104  converter_ratedOutput_min(nodesModelToCalc,years,converter_techs(techs),commodity)
13105      $sum(vintage$(converter_usedTech(nodesModelToCalc,years,converter_techs,vintage)
13106          and converter_ratedOutput(converter_techs,vintage,commodity)), 1)
13107      = smin(vintage$(converter_usedTech(nodesModelToCalc,years,converter_techs,vintage)
13108              and converter_ratedOutput(converter_techs,vintage,commodity)),
13109          converter_ratedOutput(converter_techs,vintage,commodity));
13110   
13111  converter_ratedOutput_max(nodesModelToCalc,years,converter_techs(techs),commodity)
13112      $sum(vintage$(converter_usedTech(nodesModelToCalc,years,converter_techs,vintage)
13113          and converter_ratedOutput(converter_techs,vintage,commodity)), 1)
13114      = smax(vintage$(converter_usedTech(nodesModelToCalc,years,converter_techs,vintage)
13115              and converter_ratedOutput(converter_techs,vintage,commodity)),
13116          converter_ratedOutput(converter_techs,vintage,commodity));
13117   
13118  converter_units_ext(map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,years),converter_techs(techs),vintage,"build")
13119      = converter_unitsBuild.l(nodesModelToCalc,years,converter_techs,vintage);
13120   
13121  converter_units_ext(map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,years),converter_techs(techs),vintage,"decom")
13122      = converter_unitsDecom.l(nodesModelToCalc,years,converter_techs,vintage);
13123   
13124  converter_units_ext(map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,years),converter_techs(techs),vintage,"total")
13125      = converter_unitsTotal.l(nodesModelToCalc,years,converter_techs,vintage);
13126   
13127  converter_caps_ext(map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,years),converter_techs(techs),vintage,commodity,capType)
13128      $(converter_ratedOutput(converter_techs,vintage,commodity))
13129      = converter_units_ext(accNodesModel,nodesModelToCalc,accYears,years,techs,vintage,capType)
13130          * converter_ratedOutput(converter_techs,vintage,commodity);
13131   
13132  converter_caps_ext(map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,years),converter_techs(techs),vintage,commodity,"lowerLimit")
13133      $(converter_usedTech(nodesModelToCalc,years,converter_techs,vintage)
13134          and converter_capacityParam(nodesModelToCalc,years,converter_techs,"unitsLowerLimit") > 0
13135          and converter_ratedOutput_min(nodesModelToCalc,years,converter_techs,commodity))
13136      = converter_capacityParam(nodesModelToCalc,years,converter_techs,"unitsLowerLimit")
13137          * converter_ratedOutput_min(nodesModelToCalc,years,converter_techs,commodity);
13138   
13139  converter_caps_ext(map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,years),converter_techs(techs),vintage,commodity,"upperLimit")
13140      $(converter_usedTech(nodesModelToCalc,years,converter_techs,vintage)
13141          and converter_capacityParam(nodesModelToCalc,years,converter_techs,"unitsUpperLimit") < inf
13142          and converter_ratedOutput_min(nodesModelToCalc,years,converter_techs,commodity))
13143      = converter_capacityParam(nodesModelToCalc,years,converter_techs,"unitsUpperLimit")
13144          * converter_ratedOutput_max(nodesModelToCalc,years,converter_techs,commodity);
13145   
13146  converter_caps(accNodesModel,accYears,converter_techs(techs),commodity,capType)
13147      = sum((nodesModelToCalc,years,vintage)
13148              $(map_accNodesPostCalc(accNodesModel,nodesModelToCalc)
13149                  and map_accYearsPostCalc(accYears,years)),
13150          converter_caps_ext(accNodesModel,nodesModelToCalc,accYears,years,converter_techs,vintage,commodity,capType));
13151  option clear = converter_caps_ext;
13152   
13153  converter_units(accNodesModel,accYears,converter_techs(techs),vintage,capType)
13154      = sum((nodesModelToCalc,years)
13155              $(map_accNodesPostCalc(accNodesModel,nodesModelToCalc)
13156                  and map_accYearsPostCalc(accYears,years)),
13157          converter_units_ext(accNodesModel,nodesModelToCalc,accYears,years,converter_techs,vintage,capType));
13158  option clear = converter_units_ext;
13159   
13160   
13161  * ==== transfer capacities ====
13162   
13163  max_transfer_coefficient(transfer_techs(techs),commodity)
13164          $(smax(vintage, transfer_coefficient(transfer_techs,vintage,commodity,"coefficient")) > 0)
13165          = smax(vintage, transfer_coefficient(transfer_techs,vintage,commodity,"coefficient"));
13166   
13167  min_transfer_coefficient(transfer_techs(techs),commodity)
13168          $(smin(vintage, transfer_coefficient(transfer_techs,vintage,commodity,"coefficient")) > 0)
13169          = smin(vintage, transfer_coefficient(transfer_techs,vintage,commodity,"coefficient"));
13170   
13171  transfer_usedStartEnd(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,years,transfer_techs)
13172      $(transfer_incidenceModel(nodesModelToCalc_start,linksModel) < 0
13173          and transfer_incidenceModel(nodesModelToCalc_end,linksModel) > 0
13174          and sum(vintage$transfer_usedTech(linksModel,years,transfer_techs,vintage), 1))
13175      = yes;
13176   
13177  transfer_links(linksModel,years,transfer_techs,vintage,"build")
13178      = transfer_linksBuild.l(linksModel,years,transfer_techs,vintage);
13179   
13180  transfer_links(linksModel,years,transfer_techs,vintage,"decom")
13181      = transfer_linksDecom.l(linksModel,years,transfer_techs,vintage);
13182   
13183  transfer_links(linksModel,years,transfer_techs,vintage,"total")
13184      = transfer_linksTotal.l(linksModel,years,transfer_techs,vintage);
13185   
13186  transfer_caps(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,years,transfer_techs(techs),commodity,capType)
13187      $(transfer_usedStartEnd(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,years,transfer_techs)
13188          and sum(vintage$(transfer_usedTech(linksModel,years,transfer_techs,vintage)
13189                              and transfer_coefficient(transfer_techs,vintage,commodity,"coefficient")), 1))
13190      = sum(vintage,
13191          transfer_links(linksModel,years,transfer_techs,vintage,capType)
13192          * transfer_coefficient(transfer_techs,vintage,commodity,"coefficient"));
13193   
13194  transfer_caps(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,years,transfer_techs(techs),commodity,"lowerLimit")
13195      $(transfer_usedStartEnd(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,years,transfer_techs)
13196          and sum(vintage$(transfer_usedTech(linksModel,years,transfer_techs,vintage)
13197                              and transfer_coefficient(transfer_techs,vintage,commodity,"coefficient")), 1))
13198      = transfer_linksParam(linksModel,years,transfer_techs,'linksLowerLimit')
13199          * min_transfer_coefficient(transfer_techs,commodity);
13200   
13201  transfer_caps(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,years,transfer_techs(techs),commodity,"upperLimit")
13202      $(transfer_usedStartEnd(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,years,transfer_techs)
13203          and sum(vintage$(transfer_usedTech(linksModel,years,transfer_techs,vintage)
13204                              and transfer_coefficient(transfer_techs,vintage,commodity,"coefficient")), 1))
13205      = transfer_linksParam(linksModel,years,transfer_techs,'linksUpperLimit')
13206          * max_transfer_coefficient(transfer_techs,commodity);
13207   
13208   
13209  * ==== transfer flows ====
13210   
13211  transfer_flows(timeModelToCalc,nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs(techs),commodity)
13212      $transfer_usedStartEnd(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs)
13213      = sum(vintage,
13214          ( transfer_flowAlong.l(timeModelToCalc,linksModel,yearsToCalc,transfer_techs,vintage)
13215              - transfer_flowAgainst.l(timeModelToCalc,linksModel,yearsToCalc,transfer_techs,vintage) )
13216          * timeLength(timeModelToCalc)
13217          * transfer_coefficient(transfer_techs,vintage,commodity,"coefficient"));
13218   
13219  transfer_flows_annual(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs(techs),commodity,"netto")
13220      $transfer_usedStartEnd(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs)
13221      = sum(timeModelToCalc,
13222          transfer_flows(timeModelToCalc,nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs,commodity));
13223   
13224  transfer_flows_annual(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs(techs),commodity,"positive")
13225      $transfer_usedStartEnd(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs)
13226      = sum(timeModelToCalc
13227              $(transfer_flows(timeModelToCalc,nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs,commodity) > 0),
13228          transfer_flows(timeModelToCalc,nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs,commodity));
13229   
13230  transfer_flows_annual(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs(techs),commodity,"negative")
13231      $transfer_usedStartEnd(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs)
13232      = sum(timeModelToCalc
13233              $(transfer_flows(timeModelToCalc,nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs,commodity) < 0),
13234          transfer_flows(timeModelToCalc,nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs,commodity));
13235   
13236  transfer_flows_annual(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs(techs),commodity,"brutto")
13237      $transfer_usedStartEnd(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs)
13238      = transfer_flows_annual(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs,commodity,"positive")
13239          - transfer_flows_annual(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs,commodity,"negative");
13240   
13241  transfer_flows_annual(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs(techs),commodity,"flh")
13242      $(transfer_usedStartEnd(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs)
13243          and transfer_flows_annual(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs,commodity,"brutto") > 0
13244          and transfer_caps(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs,commodity,"total") > 0)
13245      = transfer_flows_annual(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs,commodity,"brutto")
13246          / transfer_caps(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs,commodity,"total");
13247   
13248  transfer_losses(timeModelToCalc,nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs(techs),commodity)
13249      $(transfer_usedStartEnd(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs)
13250          and (sum(vintage$transfer_coefPerFlow(transfer_techs,vintage,commodity,"coefPerFlow"), 1)
13251              or sum((vintage, link_types)$transfer_coefPerLength(transfer_techs,vintage,commodity,link_types,"coefPerLength"), 1)))
13252      = -1 * abs(sum(vintage,
13253          ( transfer_flowAlong.l(timeModelToCalc,linksModel,yearsToCalc,transfer_techs,vintage)
13254              - transfer_flowAgainst.l(timeModelToCalc,linksModel,yearsToCalc,transfer_techs,vintage) )
13255          * ( transfer_coefPerFlow(transfer_techs,vintage,commodity,"coefPerFlow")
13256              + sum(link_types,
13257                  transfer_coefPerLength(transfer_techs,vintage,commodity,link_types,"coefPerLength")
13258                  * transfer_lengthParam(linksModel,link_types,"length")))))
13259          * timeLength(timeModelToCalc);
13260   
13261  transfer_losses_annual(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs(techs),commodity,"netto")
13262      $(transfer_usedStartEnd(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs)
13263          and (sum(vintage$transfer_coefPerFlow(transfer_techs,vintage,commodity,"coefPerFlow"), 1)
13264              or sum((vintage, link_types)$transfer_coefPerLength(transfer_techs,vintage,commodity,link_types,"coefPerLength"), 1)))
13265      = sum(timeModelToCalc,
13266          transfer_losses(timeModelToCalc,nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs,commodity));
13267   
13268   
13269  * ==== storage capacities ====
13270   
13271  storage_size_max(nodesModelToCalc,years,storage_techs(techs),commodity)
13272      $sum(vintage$(storage_usedTech(nodesModelToCalc,years,storage_techs,vintage)
13273              and storage_usedCom(storage_techs,vintage,commodity)
13274              and storage_sizeParam(storage_techs,vintage,commodity,"size")), 1)
13275      = smax(vintage$(storage_usedTech(nodesModelToCalc,years,storage_techs,vintage)
13276              and storage_usedCom(storage_techs,vintage,commodity)
13277              and storage_sizeParam(storage_techs,vintage,commodity,"size")),
13278          storage_sizeParam(storage_techs,vintage,commodity,"size"));
13279   
13280  storage_size_min(nodesModelToCalc,years,storage_techs(techs),commodity)
13281      $sum(vintage$(storage_usedTech(nodesModelToCalc,years,storage_techs,vintage)
13282              and storage_usedCom(storage_techs,vintage,commodity)
13283              and storage_sizeParam(storage_techs,vintage,commodity,"size")), 1)
13284      = smin(vintage$(storage_usedTech(nodesModelToCalc,years,storage_techs,vintage)
13285              and storage_usedCom(storage_techs,vintage,commodity)
13286              and storage_sizeParam(storage_techs,vintage,commodity,"size")),
13287          storage_sizeParam(storage_techs,vintage,commodity,"size"));
13288   
13289  storage_units_ext(map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,years),storage_techs(techs),vintage,"build")
13290      $storage_usedTech(nodesModelToCalc,years,storage_techs,vintage)
13291      = storage_unitsBuild.l(nodesModelToCalc,years,storage_techs,vintage);
13292   
13293  storage_units_ext(map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,years),storage_techs(techs),vintage,"decom")
13294      $storage_usedTech(nodesModelToCalc,years,storage_techs,vintage)
13295      = storage_unitsDecom.l(nodesModelToCalc,years,storage_techs,vintage);
13296   
13297  storage_units_ext(map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,years),storage_techs(techs),vintage,"total")
13298      $storage_usedTech(nodesModelToCalc,years,storage_techs,vintage)
13299      = storage_unitsTotal.l(nodesModelToCalc,years,storage_techs,vintage);
13300   
13301  storage_caps_ext(map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,years),storage_techs(techs),vintage,commodity,capType)
13302      $storage_sizeParam(storage_techs,vintage,commodity,"size")
13303      = storage_units_ext(accNodesModel,nodesModelToCalc,accYears,years,storage_techs,vintage,capType)
13304          * storage_sizeParam(storage_techs,vintage,commodity,"size");
13305   
13306  storage_caps_ext(map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,years),storage_techs(techs),vintage,commodity,"lowerLimit")
13307      $(storage_usedTech(nodesModelToCalc,years,storage_techs,vintage)
13308          and storage_reservoirParam(nodesModelToCalc,years,storage_techs,"unitsLowerLimit") > 0
13309          and storage_size_min(nodesModelToCalc,years,storage_techs,commodity))
13310      = storage_reservoirParam(nodesModelToCalc,years,storage_techs,"unitsLowerLimit")
13311          * storage_size_min(nodesModelToCalc,years,storage_techs,commodity);
13312   
13313  storage_caps_ext(map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,years),storage_techs(techs),vintage,commodity,"upperLimit")
13314      $(storage_usedTech(nodesModelToCalc,years,storage_techs,vintage)
13315          and storage_reservoirParam(nodesModelToCalc,years,storage_techs,"unitsUpperLimit") < inf
13316          and storage_size_max(nodesModelToCalc,years,storage_techs,commodity))
13317      = storage_reservoirParam(nodesModelToCalc,years,storage_techs,"unitsUpperLimit")
13318          * storage_size_max(nodesModelToCalc,years,storage_techs,commodity);
13319   
13320  storage_caps_ext(map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,years),storage_techs(techs),vintage,commodity,"total_degraded")
13321      $(storage_usedCom(storage_techs,vintage,commodity)
13322          and (storage_techParam(storage_techs,vintage,"annualDegradation") > 0
13323               or storage_techParam(storage_techs,vintage,"usageDegradation")))
13324      = sum((degradation_states,yearsCom), (storage_degradationParam(storage_techs,vintage,degradation_states,"remainingCapacity")
13325                                      - (years.val - yearsCom.val) * storage_techParam(storage_techs,vintage,"annualDegradation"))
13326                                      * storage_unitsStateTracker.l(nodesModelToCalc,years,yearsCom,storage_techs,vintage,degradation_states)
13327                                      * storage_sizeParam(storage_techs,vintage,commodity,"size"));
13328   
13329  storage_caps(accNodesModel,accYears,storage_techs(techs),commodity,capType)
13330      = sum((nodesModelToCalc,years,vintage)
13331              $(map_accNodesPostCalc(accNodesModel,nodesModelToCalc)
13332                  and map_accYearsPostCalc(accYears,years)),
13333          storage_caps_ext(accNodesModel,nodesModelToCalc,accYears,years,storage_techs,vintage,commodity,capType));
13334  option clear = storage_caps_ext;
13335   
13336  storage_units(accNodesModel,accYears,storage_techs(techs),vintage,capType)
13337      = sum((nodesModelToCalc,years)
13338              $(map_accNodesPostCalc(accNodesModel,nodesModelToCalc)
13339                  and map_accYearsPostCalc(accYears,years)),
13340          storage_units_ext(accNodesModel,nodesModelToCalc,accYears,years,storage_techs,vintage,capType));
13341  option clear = storage_units_ext;
13342   
13343   
13344  * ==== storage levels and flows ====
13345   
13346  storage_flows_ext(timeModelToCalc,map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,yearsToCalc),storage_techs(techs),vintage,commodity)
13347      $(storage_usedTech(nodesModelToCalc,yearsToCalc,storage_techs,vintage) and balance_techComm(storage_techs,commodity))
13348      = storage_level.l(timeModelToCalc,nodesModelToCalc,yearsToCalc,storage_techs,vintage,commodity)
13349          - storage_level.l(timeModelToCalc--1,nodesModelToCalc,yearsToCalc,storage_techs,vintage,commodity)
13351      + storage_losses.l(timeModelToCalc,nodesModelToCalc,yearsToCalc,storage_techs,vintage,commodity)
13352          * timeLength(timeModelToCalc)
13354      ;
13355   
13356  storage_flows(timeModelToCalc,accNodesModel,accYears,storage_techs(techs),commodity)
13357      = sum((nodesModelToCalc,yearsToCalc,vintage)
13358              $(storage_usedTech(nodesModelToCalc,yearsToCalc,storage_techs,vintage) and balance_techComm(storage_techs,commodity)),
13359          storage_flows_ext(timeModelToCalc,accNodesModel,nodesModelToCalc,accYears,yearsToCalc,storage_techs,vintage,commodity));
13360  option clear = storage_flows_ext;
13361   
13362  storage_level_out_ext(timeModelToCalc,map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,yearsToCalc),storage_techs(techs),vintage,commodity)
13363      $(storage_usedTech(nodesModelToCalc,yearsToCalc,storage_techs,vintage) and balance_techComm(storage_techs,commodity))
13364      = storage_level.l(timeModelToCalc,nodesModelToCalc,yearsToCalc,storage_techs,vintage,commodity);
13365   
13366  storage_level_out(timeModelToCalc,accNodesModel,accYears,storage_techs(techs),commodity)
13367      = sum((nodesModelToCalc,yearsToCalc,vintage)
13368              $(storage_usedTech(nodesModelToCalc,yearsToCalc,storage_techs,vintage) and balance_techComm(storage_techs,commodity)),
13369          storage_level_out_ext(timeModelToCalc,accNodesModel,nodesModelToCalc,accYears,yearsToCalc,storage_techs,vintage,commodity));
13370  option clear = storage_level_out_ext;
13371   
13372  storage_flows_annual(accNodesModel,accYears,storage_techs(techs),commodity,"netto")
13373      = sum(timeModelToCalc,
13374          storage_flows(timeModelToCalc,accNodesModel,accYears,storage_techs,commodity));
13375   
13376  storage_flows_annual(accNodesModel,accYears,storage_techs(techs),commodity,"positive")
13377      = sum(timeModelToCalc
13378              $(storage_flows(timeModelToCalc,accNodesModel,accYears,storage_techs,commodity) > 0),
13379          storage_flows(timeModelToCalc,accNodesModel,accYears,storage_techs,commodity));
13380   
13381  storage_flows_annual(accNodesModel,accYears,storage_techs(techs),commodity,"negative")
13382      = sum(timeModelToCalc
13383              $(storage_flows(timeModelToCalc,accNodesModel,accYears,storage_techs,commodity) < 0),
13384          storage_flows(timeModelToCalc,accNodesModel,accYears,storage_techs,commodity));
13385   
13386  storage_flows_annual(accNodesModel,accYears,storage_techs(techs),commodity,"brutto")
13387      = storage_flows_annual(accNodesModel,accYears,storage_techs,commodity,"positive")
13388          + storage_flows_annual(accNodesModel,accYears,storage_techs,commodity,"negative");
13389   
13390  storage_flows_annual(accNodesModel,accYears,storage_techs(techs),commodity,"flh")
13391      $(storage_flows_annual(accNodesModel,accYears,storage_techs,commodity,"brutto") > 0
13392          and storage_caps(accNodesModel,accYears,storage_techs,commodity,"total") > 0)
13393      = storage_flows_annual(accNodesModel,accYears,storage_techs,commodity,"brutto")
13394          / storage_caps(accNodesModel,accYears,storage_techs,commodity,"total");
13395   
13396  storage_losses_out(timeModelToCalc,accNodesModel,accYears,storage_techs(techs),commodity)
13397      = sum((nodesModelToCalc,yearsToCalc,vintage)
13398              $(storage_losses.l(timeModelToCalc,nodesModelToCalc,yearsToCalc,storage_techs,vintage,commodity)
13399                  and map_accNodesPostCalc(accNodesModel,nodesModelToCalc)
13400                  and map_accYearsPostCalc(accYears,yearsToCalc)),
13401          storage_losses.l(timeModelToCalc,nodesModelToCalc,yearsToCalc,storage_techs,vintage,commodity)
13402          * timeLength(timeModelToCalc));
13403   
13404  storage_losses_annual(accNodesModel,accYears,storage_techs(techs),commodity,"netto")
13405      = sum(timeModelToCalc,
13406          storage_losses_out(timeModelToCalc,accNodesModel,accYears,storage_techs,commodity));
13407   
13408   
13409  * == commodity balance ==
13410   
13411  commodity_balance_ext(timeModelToCalc,map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,yearsToCalc),converter_techs(techs),vintage,commodity)
13412      $(converter_usedTech(nodesModelToCalc,yearsToCalc,converter_techs,vintage)
13413          and balance_usedConverter(nodesModelToCalc,yearsToCalc,commodity))
13414      = sum((activity)
13415              $(converter_coefficientProfile(timeModelToCalc,nodesModelToCalc,yearsToCalc,converter_techs,vintage,activity,commodity)),
13416          converter_activity.l(timeModelToCalc,nodesModelToCalc,yearsToCalc,converter_techs,vintage,activity)
13417              * timeLength(timeModelToCalc)
13418              * converter_coefficientProfile(timeModelToCalc,nodesModelToCalc,yearsToCalc,converter_techs,vintage,activity,commodity)
13419          + converter_unitsUsingActivity_MIP.l(timeModelToCalc,nodesModelToCalc,yearsToCalc,converter_techs,vintage,activity)
13420              * timeLength(timeModelToCalc)
13421              * converter_coefficient(converter_techs,vintage,activity,commodity,"constant"));
13422   
13423  commodity_balance_ext(timeModelToCalc,map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,yearsToCalc),storage_techs(techs),vintage,commodity)
13424      $(storage_usedTech(nodesModelToCalc,yearsToCalc,storage_techs,vintage)
13425          and storage_sizeParam(storage_techs,vintage,commodity,"size"))
13426      = commodity_balance_ext(timeModelToCalc,accNodesModel,nodesModelToCalc,accYears,yearsToCalc,storage_techs,vintage,commodity)
13427      + storage_level.l(timeModelToCalc--1,nodesModelToCalc,yearsToCalc,storage_techs,vintage,commodity)
13428          - storage_level.l(timeModelToCalc,nodesModelToCalc,yearsToCalc,storage_techs,vintage,commodity)
13429      - storage_losses.l(timeModelToCalc,nodesModelToCalc,yearsToCalc,storage_techs,vintage,commodity)
13430      * timeLength(timeModelToCalc);
13431   
13432  commodity_balance_ext(timeModelToCalc,map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,yearsToCalc),sourcesink_techs(techs),vintage,commodity)
13433      $(sourcesink_enabled(nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity)
13434          and sameas(yearsToCalc,vintage))
13435      = commodity_balance_ext(timeModelToCalc,accNodesModel,nodesModelToCalc,accYears,yearsToCalc,sourcesink_techs,vintage,commodity)
13436      + sourcesink_flow.l(timeModelToCalc,nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity)
13437      * timeLength(timeModelToCalc);
13438   
13439  commodity_balance_ext(timeModelToCalc,map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,yearsToCalc),transfer_techs(techs),vintage,commodity)
13440      $sum((linksModel)
13441          $(transfer_incidenceModel(nodesModelToCalc,linksModel)
13442                  and transfer_usedTech(linksModel,yearsToCalc,transfer_techs,vintage)
13443                  and transfer_coefficient(transfer_techs,vintage,commodity,"coefficient")), 1)
13444      = commodity_balance_ext(timeModelToCalc,accNodesModel,nodesModelToCalc,accYears,yearsToCalc,transfer_techs,vintage,commodity)
13445      + sum((linksModel)
13446              $(transfer_incidenceModel(nodesModelToCalc,linksModel)
13447                  and transfer_usedTech(linksModel,yearsToCalc,transfer_techs,vintage)
13448                  and transfer_coefficient(transfer_techs,vintage,commodity,"coefficient")),
13449   
13450              (transfer_flowAlong.l(timeModelToCalc,linksModel,yearsToCalc,transfer_techs,vintage)
13451                      $(transfer_incidenceModel(nodesModelToCalc,linksModel) > 0)
13452                + transfer_flowAgainst.l(timeModelToCalc,linksModel,yearsToCalc,transfer_techs,vintage)
13453                      $(transfer_incidenceModel(nodesModelToCalc,linksModel) < 0))
13454              * timeLength(timeModelToCalc)
13455              * transfer_coefficient(transfer_techs,vintage,commodity,"coefficient")
13456   
13457              - (transfer_flowAlong.l(timeModelToCalc,linksModel,yearsToCalc,transfer_techs,vintage)
13458                      $(transfer_incidenceModel(nodesModelToCalc,linksModel) < 0)
13459                + transfer_flowAgainst.l(timeModelToCalc,linksModel,yearsToCalc,transfer_techs,vintage)
13460                      $(transfer_incidenceModel(nodesModelToCalc,linksModel) > 0))
13461              * timeLength(timeModelToCalc)
13462              * transfer_coefficient(transfer_techs,vintage,commodity,"coefficient")
13463   
13464              + 0.5 * ((transfer_flowAlong.l(timeModelToCalc,linksModel,yearsToCalc,transfer_techs,vintage)
13465                          $(transfer_incidenceModel(nodesModelToCalc,linksModel) <> 0)
13466                      + transfer_flowAgainst.l(timeModelToCalc,linksModel,yearsToCalc,transfer_techs,vintage)
13467                          $(transfer_incidenceModel(nodesModelToCalc,linksModel) <> 0))
13468                      * timeLength(timeModelToCalc)
13469                      * ( transfer_coefPerFlow(transfer_techs,vintage,commodity,"coefPerFlow")
13470                          + sum(link_types,
13471                              transfer_coefPerLength(transfer_techs,vintage,commodity,link_types,"coefPerLength")
13472                              * transfer_lengthParam(linksModel,link_types,"length")))))
13473      ;
13474   
13475  commodity_balance(timeModelToCalc,accNodesModel,accYears,balance_techComm(techs,commodity))
13476      = sum((nodesModelToCalc,yearsToCalc,vintage)
13477              $(commodity_balance_ext(timeModelToCalc,accNodesModel,nodesModelToCalc,accYears,yearsToCalc,techs,vintage,commodity)
13478                  and map_accNodesPostCalc(accNodesModel,nodesModelToCalc)
13479                  and map_accYearsPostCalc(accYears,yearsToCalc)),
13480          commodity_balance_ext(timeModelToCalc,accNodesModel,nodesModelToCalc,accYears,yearsToCalc,techs,vintage,commodity));
13481  option clear = commodity_balance_ext;
13482   
13483   
13484  * ==== annual commodity sums ====
13485   
13486  commodity_balance_annual(accNodesModel,accYears,techs,commodity,"netto")
13487      = sum(timeModelToCalc,
13488          commodity_balance(timeModelToCalc,accNodesModel,accYears,techs,commodity));
13489   
13490  commodity_balance_annual(accNodesModel,accYears,techs,commodity,"positive")
13491      = sum(timeModelToCalc
13492              $(commodity_balance(timeModelToCalc,accNodesModel,accYears,techs,commodity) > 0),
13493          commodity_balance(timeModelToCalc,accNodesModel,accYears,techs,commodity));
13494   
13495  commodity_balance_annual(accNodesModel,accYears,techs,commodity,"negative")
13496      = sum(timeModelToCalc
13497              $(commodity_balance(timeModelToCalc,accNodesModel,accYears,techs,commodity) < 0),
13498          commodity_balance(timeModelToCalc,accNodesModel,accYears,techs,commodity));
13499   
13500  commodity_balance_annual(accNodesModel,accYears,techs,commodity,"brutto")
13501      = commodity_balance_annual(accNodesModel,accYears,techs,commodity,"positive")
13502          - commodity_balance_annual(accNodesModel,accYears,techs,commodity,"negative");
13503   
13504  commodity_balance_annual(accNodesModel,accYears,techs,commodity,"flh")
13505      $(commodity_balance_annual(accNodesModel,accYears,techs,commodity,"brutto") > 0
13506          and converter_caps(accNodesModel,accYears,techs,commodity,"total") > 0 )
13507      = commodity_balance_annual(accNodesModel,accYears,techs,commodity,"brutto")
13508          / converter_caps(accNodesModel,accYears,techs,commodity,"total");
13509   
13510   
13511  * ==== marginal information ====
13512   
13513  marginals_balance(timeModelToCalc,nodesModelToCalc,yearsToCalc,commodity)
13514    $balance_usedBalance(nodesModelToCalc,yearsToCalc,commodity)
13515    =
13516    Eq_balance_commodities.m(timeModelToCalc,nodesModelToCalc,yearsToCalc,commodity);
13517   
13518  marginals_sourcesink_profile(timeModelToCalc,nodesModelToCalc,yearsToCalc,sourcesink_techs(techs),commodity)
13519      $( sourcesink_flow.m(timeModelToCalc,nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity) <> 0 )
13520      =
13521      sourcesink_flow.m(timeModelToCalc,nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity);
13522   
13523  marginals_sourcesink_sum(nodesModelToCalc,yearsToCalc,sourcesink_techs(techs),commodity)
13524      $( ( Eq_sourcesink_useLowerSum.m(nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity)
13525          + Eq_sourcesink_useUpperSum.m(nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity)
13526          + Eq_sourcesink_useFixedSum.m(nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity) ) <> eps )
13527      =
13528      ( Eq_sourcesink_useLowerSum.m(nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity)
13529      + Eq_sourcesink_useUpperSum.m(nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity)
13530      + Eq_sourcesink_useFixedSum.m(nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity) );
13531   
13532  marginals_indicator_bounds(accNodesModel,accYears,indicator)
13533      $( accounting_indicator.m(accNodesModel,accYears,indicator) <> 0 )
13534      =
13535      accounting_indicator.m(accNodesModel,accYears,indicator);
13536   
13537   
13538  * ==== R2A postcalc information ====
13539   
13541   
13542   
13543  * ==== round profiles to reduce size of gdx ====
13544   
13546  commodity_balance(timeModelToCalc,accNodesModel,accYears,techs,commodity)
13547      $commodity_balance(timeModelToCalc,accNodesModel,accYears,techs,commodity)
13548      = round(commodity_balance(timeModelToCalc,accNodesModel,accYears,techs,commodity), 6);
13549   
13550  transfer_flows(timeModelToCalc,nodesModelToCalc,nodesModelToCalc_a,linksModel,yearsToCalc,transfer_techs,commodity)
13551      $transfer_flows(timeModelToCalc,nodesModelToCalc,nodesModelToCalc_a,linksModel,yearsToCalc,transfer_techs,commodity)
13552      = round(transfer_flows(timeModelToCalc,nodesModelToCalc,nodesModelToCalc_a,linksModel,yearsToCalc,transfer_techs,commodity), 6);
13553   
13554  transfer_losses(timeModelToCalc,nodesModelToCalc,nodesModelToCalc_a,linksModel,yearsToCalc,transfer_techs,commodity)
13555      $transfer_losses(timeModelToCalc,nodesModelToCalc,nodesModelToCalc_a,linksModel,yearsToCalc,transfer_techs,commodity)
13556      = round(transfer_losses(timeModelToCalc,nodesModelToCalc,nodesModelToCalc_a,linksModel,yearsToCalc,transfer_techs,commodity), 6);
13557   
13558  storage_flows(timeModelToCalc,accNodesModel,accYears,storage_techs,commodity)
13559      $storage_flows(timeModelToCalc,accNodesModel,accYears,storage_techs,commodity)
13560      = round(storage_flows(timeModelToCalc,accNodesModel,accYears,storage_techs,commodity), 6);
13561   
13562  storage_level_out(timeModelToCalc,accNodesModel,accYears,storage_techs,commodity)
13563      $storage_level_out(timeModelToCalc,accNodesModel,accYears,storage_techs,commodity)
13564      = round(storage_level_out(timeModelToCalc,accNodesModel,accYears,storage_techs,commodity), 6);
13565   
13566  marginals_balance(timeModelToCalc,nodesModelToCalc,yearsToCalc,commodity)
13567      $marginals_balance(timeModelToCalc,nodesModelToCalc,yearsToCalc,commodity)
13568      = round(marginals_balance(timeModelToCalc,nodesModelToCalc,yearsToCalc,commodity), 6);
13569   
13570  marginals_sourcesink_profile(timeModelToCalc,nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity)
13571      $marginals_sourcesink_profile(timeModelToCalc,nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity)
13572      = round(marginals_sourcesink_profile(timeModelToCalc,nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity), 6);
13574   
INCLUDE    C:\Local\REMix\framework\remix\framework\model\source\postcalc\writegdx.gms
13577  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
13578  * SPDX-License-Identifier: BSD-3-Clause
13579   
13582   
13583  execute_unload "C:\Local\REMix\remix_nz\output\will\02-battery-overnight_2020-2035-2050\result\02-battery-overnight_2020-2035-2050.gdx"
13584      metadata
13585      timeModel
13586      timeModelToCalc
13587      nodesModel
13588      linksModel
13589      indicator
13590      commodity
13591      techs
13592      accNodesModel
13593      accYears
13594   
13595      map_nodesModel
13596      map_linksModel
13597      map_nodesAccounting
13598   
13599      indicator_accounting
13600      indicator_accounting_ref
13601      indicator_accounting_comp
13602      indicator_accounting_detailed
13603      indicator_accounting_links
13604   
13605      converter_caps
13606      converter_units
13608   
13609      transfer_caps
13610      transfer_links
13611      transfer_flows
13612      transfer_flows_annual
13613      transfer_losses
13614      transfer_losses_annual
13615   
13616      storage_caps
13617      storage_units
13618      storage_flows
13619      storage_level_out
13620      storage_flows_annual
13621      storage_losses_out
13622      storage_losses_annual
13624   
13625      commodity_balance
13626      commodity_balance_annual
13627   
13628      marginals_balance
13629      marginals_sourcesink_profile
13630      marginals_sourcesink_sum
13631      marginals_indicator_bounds
13632   
13634      ;
GAMS 40.4.0  d540b52e Oct 3, 2022           WEX-WEI x86 64bit/MS Windows - 03/08/24 23:09:20 Page 2
G e n e r a l   A l g e b r a i c   M o d e l i n g   S y s t e m
Include File Summary


   SEQ   GLOBAL TYPE      PARENT   LOCAL  FILENAME

     1        1 INPUT          0       0  C:\Local\REMix\framework\remix\framework\model\run_remix.gms
     2       13 IF DEXIST      1      13  C:\Local\REMix\remix_nz\output\will\02-battery-overnight_2020-2035-2050\data\
     3       16 INCLUDE        1      16  .C:\Local\REMix\framework\remix\framework\model\source\metadata.gms
     4       25 CALL           3       9  .printf "remix_version \"0.9.7\"\n" > c:\Local\REMix\remix_nz\process\225a\\metadata
     5       26 CALL           3      10  .printf "gams_version \"40.4.0\"\n" >> c:\Local\REMix\remix_nz\process\225a\\metadata
     6       27 CALL           3      11  .printf "timestamp \"03/08/24 23:09:20\"\n" >> c:\Local\REMix\remix_nz\process\225a\\metadata
     7       29 CALL           3      13  .printf "framework_path " >> c:\Local\REMix\remix_nz\process\225a\\metadata
     8       31 CALL           3      15  .cd C:\Local\REMix\framework\remix\framework\model\source && cd| sed "s/^/\"/;s/$/\"/" >> c:\Local\REMix\remix_nz\process\225a\\metadata
     9       33 CALL           3      19  .printf "\n" >> c:\Local\REMix\remix_nz\process\225a\\metadata
    10       34 CALL           3      20  .printf "framework_hash " >> c:\Local\REMix\remix_nz\process\225a\\metadata
    11       36 CALL           3      22  .cd C:\Local\REMix\framework\remix\framework\model\source && git rev-parse HEAD >nul 2>&1 && git rev-parse HEAD >> c:\Local\REMix\remix_nz\process\225a\\metadata
    12       38 CALL           3      26  .printf "\n" >> c:\Local\REMix\remix_nz\process\225a\\metadata
    13       39 CALL           3      27  .printf "framework_branch " >> c:\Local\REMix\remix_nz\process\225a\\metadata
    14       41 CALL           3      29  .cd C:\Local\REMix\framework\remix\framework\model\source && git rev-parse --abbrev-ref HEAD >nul 2>&1 && git rev-parse --abbrev-ref HEAD | sed "s/^/\"/;s/$/\"/" >> c:\Local\REMix\remix_nz\process\225a\\metadata
    15       43 CALL           3      33  .printf "\n" >> c:\Local\REMix\remix_nz\process\225a\\metadata
    16       45 CALL           3      35  .printf "project_path " >> c:\Local\REMix\remix_nz\process\225a\\metadata
    17       47 CALL           3      37  .cd C:\Local\REMix\remix_nz\output\will\02-battery-overnight_2020-2035-2050\data\./ && cd| sed "s/^/\"/;s/$/\"/" >> c:\Local\REMix\remix_nz\process\225a\\metadata
    18       49 CALL           3      41  .printf "\n" >> c:\Local\REMix\remix_nz\process\225a\\metadata
    19       50 CALL           3      42  .printf "project_hash " >> c:\Local\REMix\remix_nz\process\225a\\metadata
    20       52 CALL           3      44  .cd C:\Local\REMix\remix_nz\output\will\02-battery-overnight_2020-2035-2050\data\./ && git rev-parse HEAD >nul 2>&1 && git rev-parse HEAD | sed "s/^/\"/;s/$/\"/" >> c:\Local\REMix\remix_nz\process\225a\\metadata
    21       54 CALL           3      48  .printf "\n" >> c:\Local\REMix\remix_nz\process\225a\\metadata
    22       55 CALL           3      49  .printf "project_branch " >> c:\Local\REMix\remix_nz\process\225a\\metadata
    23       57 CALL           3      51  .cd C:\Local\REMix\remix_nz\output\will\02-battery-overnight_2020-2035-2050\data\./ && git rev-parse --abbrev-ref HEAD >nul 2>&1 && git rev-parse --abbrev-ref HEAD | sed "s/^/\"/;s/$/\"/" >> c:\Local\REMix\remix_nz\process\225a\\metadata
    24       59 CALL           3      55  .printf "\n" >> c:\Local\REMix\remix_nz\process\225a\\metadata
    25       62 INCLUDE        3      58  ..c:\Local\REMix\remix_nz\process\225a\metadata
    26       79 INCLUDE        1      17  .C:\Local\REMix\framework\remix\framework\model\source\data_inheritance.gms
    27      123 INCLUDE        1      26  .C:\Local\REMix\framework\remix\framework\model\source\remix.gms
    28      145 INCLUDE       27      22  ..C:\Local\REMix\framework\remix\framework\model\source\sets.gms
    29      165 IF EXIST      28      20  ..c:\Local\REMix\remix_nz\process\225a\map_aggregatetimemodel.csv
    30      216 IF EXIST      28      97  ..c:\Local\REMix\remix_nz\process\225a\set_nodesmodel.csv
    31      216 INCLUDE       28      97  ...c:\Local\REMix\remix_nz\process\225a\set_nodesmodel.csv
    32      229 IF EXIST      28      99  ..c:\Local\REMix\remix_nz\process\225a\set_nodesmodel.csv
    33      236 IF EXIST      28     106  ..c:\Local\REMix\remix_nz\process\225a\set_nodesdata.csv
    34      236 INCLUDE       28     106  ...c:\Local\REMix\remix_nz\process\225a\set_nodesdata.csv
    35      249 IF EXIST      28     108  ..c:\Local\REMix\remix_nz\process\225a\set_nodesdata.csv
    36      255 IF EXIST      28     114  ..c:\Local\REMix\remix_nz\process\225a\set_nodesmodelsel.csv
    37      255 INCLUDE       28     114  ...c:\Local\REMix\remix_nz\process\225a\set_nodesmodelsel.csv
    38      268 IF EXIST      28     116  ..c:\Local\REMix\remix_nz\process\225a\set_nodesmodelsel.csv
    39      270 IF EXIST      28     118  ..c:\Local\REMix\remix_nz\process\225a\set_nodesmodelsel.csv
    40      283 IF EXIST      28     131  ..c:\Local\REMix\remix_nz\process\225a\map_aggregatenodesmodel.csv
    41      283 INCLUDE       28     131  ...c:\Local\REMix\remix_nz\process\225a\map_aggregatenodesmodel.csv
    42      296 IF EXIST      28     133  ..c:\Local\REMix\remix_nz\process\225a\map_aggregatenodesmodel.csv
    43      299 IF EXIST      28     136  ..c:\Local\REMix\remix_nz\process\225a\map_aggregatenodesmodel.csv
    44      322 IF EXIST      28     159  ..c:\Local\REMix\remix_nz\process\225a\set_years.csv
    45      322 INCLUDE       28     159  ...c:\Local\REMix\remix_nz\process\225a\set_years.csv
    46      394 IF EXIST      28     161  ..c:\Local\REMix\remix_nz\process\225a\set_years.csv
    47      403 IF EXIST      28     170  ..c:\Local\REMix\remix_nz\process\225a\set_years.csv
    48      403 INCLUDE       28     170  ...c:\Local\REMix\remix_nz\process\225a\set_years.csv
    49      475 IF EXIST      28     172  ..c:\Local\REMix\remix_nz\process\225a\set_years.csv
    50      481 IF EXIST      28     178  ..c:\Local\REMix\remix_nz\process\225a\set_yearssel.csv
    51      481 INCLUDE       28     178  ...c:\Local\REMix\remix_nz\process\225a\set_yearssel.csv
    52      486 IF EXIST      28     180  ..c:\Local\REMix\remix_nz\process\225a\set_yearssel.csv
    53      504 IF EXIST      28     198  ..c:\Local\REMix\remix_nz\process\225a\set_activities.csv
    54      504 INCLUDE       28     198  ...c:\Local\REMix\remix_nz\process\225a\set_activities.csv
    55      513 IF EXIST      28     200  ..c:\Local\REMix\remix_nz\process\225a\set_activities.csv
    56      521 IF EXIST      28     208  ..c:\Local\REMix\remix_nz\process\225a\set_gridsegments.csv
    57      523 IF EXIST      28     210  ..c:\Local\REMix\remix_nz\process\225a\set_gridsegments.csv
    58      531 IF EXIST      28     218  ..c:\Local\REMix\remix_nz\process\225a\set_linksdata.csv
    59      531 INCLUDE       28     218  ...c:\Local\REMix\remix_nz\process\225a\set_linksdata.csv
    60      545 IF EXIST      28     220  ..c:\Local\REMix\remix_nz\process\225a\set_linksdata.csv
    61      563 IF EXIST      28     238  ..c:\Local\REMix\remix_nz\process\225a\set_link_types.csv
    62      563 INCLUDE       28     238  ...c:\Local\REMix\remix_nz\process\225a\set_link_types.csv
    63      567 IF EXIST      28     240  ..c:\Local\REMix\remix_nz\process\225a\set_link_types.csv
    64      576 IF EXIST      28     249  ..c:\Local\REMix\remix_nz\process\225a\set_commodities.csv
    65      576 INCLUDE       28     249  ...c:\Local\REMix\remix_nz\process\225a\set_commodities.csv
    66      585 IF EXIST      28     251  ..c:\Local\REMix\remix_nz\process\225a\set_commodities.csv
    67      594 IF EXIST      28     260  ..c:\Local\REMix\remix_nz\process\225a\set_indicators.csv
    68      594 INCLUDE       28     260  ...c:\Local\REMix\remix_nz\process\225a\set_indicators.csv
    69      603 IF EXIST      28     262  ..c:\Local\REMix\remix_nz\process\225a\set_indicators.csv
    70      612 IF EXIST      28     271  ..c:\Local\REMix\remix_nz\process\225a\set_converter_techs.csv
    71      612 INCLUDE       28     271  ...c:\Local\REMix\remix_nz\process\225a\set_converter_techs.csv
    72      633 IF EXIST      28     274  ..c:\Local\REMix\remix_nz\process\225a\set_storage_techs.csv
    73      633 INCLUDE       28     274  ...c:\Local\REMix\remix_nz\process\225a\set_storage_techs.csv
    74      641 IF EXIST      28     277  ..c:\Local\REMix\remix_nz\process\225a\set_transfer_techs.csv
    75      641 INCLUDE       28     277  ...c:\Local\REMix\remix_nz\process\225a\set_transfer_techs.csv
    76      645 IF EXIST      28     280  ..c:\Local\REMix\remix_nz\process\225a\set_sourcesink_techs.csv
    77      645 INCLUDE       28     280  ...c:\Local\REMix\remix_nz\process\225a\set_sourcesink_techs.csv
    78      656 IF EXIST      28     285  ..c:\Local\REMix\remix_nz\process\225a\set_converter_techs.csv
    79      656 INCLUDE       28     285  ...c:\Local\REMix\remix_nz\process\225a\set_converter_techs.csv
    80      675 IF EXIST      28     286  ..c:\Local\REMix\remix_nz\process\225a\set_converter_techs.csv
    81      679 IF EXIST      28     290  ..c:\Local\REMix\remix_nz\process\225a\set_storage_techs.csv
    82      679 INCLUDE       28     290  ...c:\Local\REMix\remix_nz\process\225a\set_storage_techs.csv
    83      685 IF EXIST      28     291  ..c:\Local\REMix\remix_nz\process\225a\set_storage_techs.csv
    84      690 IF EXIST      28     296  ..c:\Local\REMix\remix_nz\process\225a\set_transfer_techs.csv
    85      690 INCLUDE       28     296  ...c:\Local\REMix\remix_nz\process\225a\set_transfer_techs.csv
    86      692 IF EXIST      28     297  ..c:\Local\REMix\remix_nz\process\225a\set_transfer_techs.csv
    87      696 IF EXIST      28     301  ..c:\Local\REMix\remix_nz\process\225a\set_sourcesink_techs.csv
    88      696 INCLUDE       28     301  ...c:\Local\REMix\remix_nz\process\225a\set_sourcesink_techs.csv
    89      703 IF EXIST      28     302  ..c:\Local\REMix\remix_nz\process\225a\set_sourcesink_techs.csv
    90      713 IF EXIST      28     312  ..c:\Local\REMix\remix_nz\process\225a\set_degradation_states.csv
    91      715 IF EXIST      28     314  ..c:\Local\REMix\remix_nz\process\225a\set_degradation_states.csv
    92      724 IF EXIST      28     323  ..c:\Local\REMix\remix_nz\process\225a\set_soc.csv
    93      726 IF EXIST      28     325  ..c:\Local\REMix\remix_nz\process\225a\set_soc.csv
    94      742 IF EXIST      28     341  ..c:\Local\REMix\remix_nz\process\225a\transfer_linkstartend.csv
    95      742 INCLUDE       28     341  ...c:\Local\REMix\remix_nz\process\225a\transfer_linkstartend.csv
    96      769 IF EXIST      28     343  ..c:\Local\REMix\remix_nz\process\225a\transfer_linkstartend.csv
    97      783 BATINCLUDE    28     357  ...C:\Local\REMix\framework\remix\framework\model\source\battools\aggregateNodes.gms
    98      894 IF EXIST      28     466  ..c:\Local\REMix\remix_nz\process\225a\set_accnodes.csv
    99      896 IF EXIST      28     468  ..c:\Local\REMix\remix_nz\process\225a\set_accnodes.csv
   100      961 IF EXIST      28     533  ..c:\Local\REMix\remix_nz\process\225a\map_accnodes.csv
   101      963 IF EXIST      28     535  ..c:\Local\REMix\remix_nz\process\225a\map_accnodes.csv
   102     1017 INCLUDE       27      23  ..C:\Local\REMix\framework\remix\framework\model\source\accounting\input.gms
   103     1049 IF EXIST     102      32  ..c:\Local\REMix\remix_nz\process\225a\accounting_converterunits.csv
   104     1049 INCLUDE      102      32  ...c:\Local\REMix\remix_nz\process\225a\accounting_converterunits.csv
   105     1162 IF EXIST     102      34  ..c:\Local\REMix\remix_nz\process\225a\accounting_converterunits.csv
   106     1176 IF EXIST     102      48  ..c:\Local\REMix\remix_nz\process\225a\accounting_converteractivity.csv
   107     1176 INCLUDE      102      48  ...c:\Local\REMix\remix_nz\process\225a\accounting_converteractivity.csv
   108     1203 IF EXIST     102      50  ..c:\Local\REMix\remix_nz\process\225a\accounting_converteractivity.csv
   109     1220 IF EXIST     102      67  ..c:\Local\REMix\remix_nz\process\225a\accounting_converterstartup.csv
   110     1222 IF EXIST     102      69  ..c:\Local\REMix\remix_nz\process\225a\accounting_converterstartup.csv
   111     1241 IF EXIST     102      88  ..c:\Local\REMix\remix_nz\process\225a\accounting_storageunits.csv
   112     1241 INCLUDE      102      88  ...c:\Local\REMix\remix_nz\process\225a\accounting_storageunits.csv
   113     1280 IF EXIST     102      90  ..c:\Local\REMix\remix_nz\process\225a\accounting_storageunits.csv
   114     1302 IF EXIST     102     112  ..c:\Local\REMix\remix_nz\process\225a\accounting_transferlinks.csv
   115     1302 INCLUDE      102     112  ...c:\Local\REMix\remix_nz\process\225a\accounting_transferlinks.csv
   116     1311 IF EXIST     102     114  ..c:\Local\REMix\remix_nz\process\225a\accounting_transferlinks.csv
   117     1333 IF EXIST     102     136  ..c:\Local\REMix\remix_nz\process\225a\accounting_transferperlength.csv
   118     1333 INCLUDE      102     136  ...c:\Local\REMix\remix_nz\process\225a\accounting_transferperlength.csv
   119     1348 IF EXIST     102     138  ..c:\Local\REMix\remix_nz\process\225a\accounting_transferperlength.csv
   120     1363 IF EXIST     102     153  ..c:\Local\REMix\remix_nz\process\225a\accounting_sourcesinkflow.csv
   121     1363 INCLUDE      102     153  ...c:\Local\REMix\remix_nz\process\225a\accounting_sourcesinkflow.csv
   122     1369 IF EXIST     102     155  ..c:\Local\REMix\remix_nz\process\225a\accounting_sourcesinkflow.csv
   123     1383 IF EXIST     102     169  ..c:\Local\REMix\remix_nz\process\225a\accounting_perindicator.csv
   124     1383 INCLUDE      102     169  ...c:\Local\REMix\remix_nz\process\225a\accounting_perindicator.csv
   125     1391 IF EXIST     102     171  ..c:\Local\REMix\remix_nz\process\225a\accounting_perindicator.csv
   126     1417 IF EXIST     102     197  ..c:\Local\REMix\remix_nz\process\225a\accounting_indicatorbounds.csv
   127     1417 INCLUDE      102     197  ...c:\Local\REMix\remix_nz\process\225a\accounting_indicatorbounds.csv
   128     1421 IF EXIST     102     199  ..c:\Local\REMix\remix_nz\process\225a\accounting_indicatorbounds.csv
   129     1440 IF EXIST     102     218  ..c:\Local\REMix\remix_nz\process\225a\accounting_indicatorbounds_links.csv
   130     1442 IF EXIST     102     220  ..c:\Local\REMix\remix_nz\process\225a\accounting_indicatorbounds_links.csv
   131     1448 BATINCLUDE   102     226  ...C:\Local\REMix\framework\remix\framework\model\source\battools\aggregateAccountingMean.gms
   132     1507 BATINCLUDE   102     227  ...C:\Local\REMix\framework\remix\framework\model\source\battools\aggregateAccountingMean.gms
   133     1550 BATINCLUDE   102     228  ...C:\Local\REMix\framework\remix\framework\model\source\battools\aggregateAccountingMean.gms
   134     1593 BATINCLUDE   102     229  ...C:\Local\REMix\framework\remix\framework\model\source\battools\aggregateAccountingMean.gms
   135     1652 BATINCLUDE   102     230  ...C:\Local\REMix\framework\remix\framework\model\source\battools\aggregateAccountingMean.gms
   136     1711 BATINCLUDE   102     231  ...C:\Local\REMix\framework\remix\framework\model\source\battools\aggregateAccountingMean.gms
   137     1770 BATINCLUDE   102     232  ...C:\Local\REMix\framework\remix\framework\model\source\battools\aggregateAccountingMean.gms
   138     2179 INCLUDE       27      24  ..C:\Local\REMix\framework\remix\framework\model\source\accounting\annuities.gms
   139     2253 INCLUDE       27      26  ..C:\Local\REMix\framework\remix\framework\model\source\methods\mga_pre.gms
   140     2259 INCLUDE       27      27  ..C:\Local\REMix\framework\remix\framework\model\source\methods\pareto_pre.gms
   141     2265 INCLUDE       27      28  ..C:\Local\REMix\framework\remix\framework\model\source\postcalc\declaration.gms
   142     2282 IF DEXIST    141      17  ..C:\Local\REMix\remix_nz\output\will\02-battery-overnight_2020-2035-2050\result\
   143     2484 INCLUDE       27      29  ..C:\Local\REMix\framework\remix\framework\model\source\loadgdx.gms
   144     2493 INCLUDE       27      31  ..C:\Local\REMix\framework\remix\framework\model\source\core\converter.gms
   145     2596 IF EXIST     144     103  ..c:\Local\REMix\remix_nz\process\225a\converter_capacityparam.csv
   146     2596 INCLUDE      144     103  ...c:\Local\REMix\remix_nz\process\225a\converter_capacityparam.csv
   147     7578 IF EXIST     144     105  ..c:\Local\REMix\remix_nz\process\225a\converter_capacityparam.csv
   148     7586 BATINCLUDE   144     113  ...C:\Local\REMix\framework\remix\framework\model\source\battools\aggregateNodes.gms
   149     7597 BATINCLUDE   144     114  ...C:\Local\REMix\framework\remix\framework\model\source\battools\aggregateNodes.gms
   150     7630 IF EXIST     144     137  ..c:\Local\REMix\remix_nz\process\225a\converter_techparam.csv
   151     7630 INCLUDE      144     137  ...c:\Local\REMix\remix_nz\process\225a\converter_techparam.csv
   152     7688 IF EXIST     144     139  ..c:\Local\REMix\remix_nz\process\225a\converter_techparam.csv
   153     7710 IF EXIST     144     161  ..c:\Local\REMix\remix_nz\process\225a\converter_activityprofile.csv
   154     7710 INCLUDE      144     161  ...c:\Local\REMix\remix_nz\process\225a\converter_activityprofile.csv
   155     7922 IF EXIST     144     162  ..c:\Local\REMix\remix_nz\process\225a\converter_activityprofile.csv
   156     7924 IF EXIST     144     164  ..c:\Local\REMix\remix_nz\process\225a\converter_activityprofile.csv
   157     7944 IF EXIST     144     184  ..c:\Local\REMix\remix_nz\process\225a\converter_coefficient.csv
   158     7944 INCLUDE      144     184  ...c:\Local\REMix\remix_nz\process\225a\converter_coefficient.csv
   159     8126 IF EXIST     144     185  ..c:\Local\REMix\remix_nz\process\225a\converter_coefficient.csv
   160     8127 IF EXIST     144     186  ..c:\Local\REMix\remix_nz\process\225a\converter_coefficient.csv
   161     8129 IF EXIST     144     188  ..c:\Local\REMix\remix_nz\process\225a\converter_coefficient.csv
   162     8141 IF EXIST     144     200  ..c:\Local\REMix\remix_nz\process\225a\converter_coefficientprofile.csv
   163     8142 IF EXIST     144     201  ..c:\Local\REMix\remix_nz\process\225a\converter_coefficientprofile.csv
   164     8144 IF EXIST     144     203  ..c:\Local\REMix\remix_nz\process\225a\converter_coefficientprofile.csv
   165     9080 INCLUDE       27      32  ..C:\Local\REMix\framework\remix\framework\model\source\core\storage.gms
   166     9171 IF EXIST     165      91  ..c:\Local\REMix\remix_nz\process\225a\storage_reservoirparam.csv
   167     9171 INCLUDE      165      91  ...c:\Local\REMix\remix_nz\process\225a\storage_reservoirparam.csv
   168     9440 IF EXIST     165      93  ..c:\Local\REMix\remix_nz\process\225a\storage_reservoirparam.csv
   169     9444 BATINCLUDE   165      97  ...C:\Local\REMix\framework\remix\framework\model\source\battools\aggregateNodes.gms
   170     9455 BATINCLUDE   165      98  ...C:\Local\REMix\framework\remix\framework\model\source\battools\aggregateNodes.gms
   171     9491 IF EXIST     165     124  ..c:\Local\REMix\remix_nz\process\225a\storage_techparam.csv
   172     9491 INCLUDE      165     124  ...c:\Local\REMix\remix_nz\process\225a\storage_techparam.csv
   173     9507 IF EXIST     165     126  ..c:\Local\REMix\remix_nz\process\225a\storage_techparam.csv
   174     9528 IF EXIST     165     147  ..c:\Local\REMix\remix_nz\process\225a\storage_sizeparam.csv
   175     9528 INCLUDE      165     147  ...c:\Local\REMix\remix_nz\process\225a\storage_sizeparam.csv
   176     9549 IF EXIST     165     149  ..c:\Local\REMix\remix_nz\process\225a\storage_sizeparam.csv
   177     9566 IF EXIST     165     166  ..c:\Local\REMix\remix_nz\process\225a\storage_socparam.csv
   178     9568 IF EXIST     165     168  ..c:\Local\REMix\remix_nz\process\225a\storage_socparam.csv
   179     9587 IF EXIST     165     187  ..c:\Local\REMix\remix_nz\process\225a\storage_degradationparam.csv
   180     9589 IF EXIST     165     189  ..c:\Local\REMix\remix_nz\process\225a\storage_degradationparam.csv
   181     9618 IF EXIST     165     218  ..c:\Local\REMix\remix_nz\process\225a\storage_levelprofile.csv
   182     9619 IF EXIST     165     219  ..c:\Local\REMix\remix_nz\process\225a\storage_levelprofile.csv
   183     9621 IF EXIST     165     221  ..c:\Local\REMix\remix_nz\process\225a\storage_levelprofile.csv
   184    10441 INCLUDE       27      33  ..C:\Local\REMix\framework\remix\framework\model\source\core\transfer.gms
   185    10508 IF EXIST     184      73  ..c:\Local\REMix\remix_nz\process\225a\transfer_linksparam.csv
   186    10508 INCLUDE      184      73  ...c:\Local\REMix\remix_nz\process\225a\transfer_linksparam.csv
   187    10547 IF EXIST     184      75  ..c:\Local\REMix\remix_nz\process\225a\transfer_linksparam.csv
   188    10563 IF EXIST     184      91  ..c:\Local\REMix\remix_nz\process\225a\transfer_flowprofile.csv
   189    10565 IF EXIST     184      93  ..c:\Local\REMix\remix_nz\process\225a\transfer_flowprofile.csv
   190    10585 IF EXIST     184     113  ..c:\Local\REMix\remix_nz\process\225a\transfer_techparam.csv
   191    10585 INCLUDE      184     113  ...c:\Local\REMix\remix_nz\process\225a\transfer_techparam.csv
   192    10591 IF EXIST     184     115  ..c:\Local\REMix\remix_nz\process\225a\transfer_techparam.csv
   193    10605 IF EXIST     184     129  ..c:\Local\REMix\remix_nz\process\225a\transfer_coefficient.csv
   194    10605 INCLUDE      184     129  ...c:\Local\REMix\remix_nz\process\225a\transfer_coefficient.csv
   195    10611 IF EXIST     184     131  ..c:\Local\REMix\remix_nz\process\225a\transfer_coefficient.csv
   196    10625 IF EXIST     184     145  ..c:\Local\REMix\remix_nz\process\225a\transfer_coefperflow.csv
   197    10625 INCLUDE      184     145  ...c:\Local\REMix\remix_nz\process\225a\transfer_coefperflow.csv
   198    10631 IF EXIST     184     147  ..c:\Local\REMix\remix_nz\process\225a\transfer_coefperflow.csv
   199    10645 IF EXIST     184     161  ..c:\Local\REMix\remix_nz\process\225a\transfer_coefperlength.csv
   200    10645 INCLUDE      184     161  ...c:\Local\REMix\remix_nz\process\225a\transfer_coefperlength.csv
   201    10654 IF EXIST     184     163  ..c:\Local\REMix\remix_nz\process\225a\transfer_coefperlength.csv
   202    10668 IF EXIST     184     177  ..c:\Local\REMix\remix_nz\process\225a\transfer_reactperlength.csv
   203    10670 IF EXIST     184     179  ..c:\Local\REMix\remix_nz\process\225a\transfer_reactperlength.csv
   204    10684 IF EXIST     184     193  ..c:\Local\REMix\remix_nz\process\225a\transfer_lengthparam.csv
   205    10684 INCLUDE      184     193  ...c:\Local\REMix\remix_nz\process\225a\transfer_lengthparam.csv
   206    10711 IF EXIST     184     195  ..c:\Local\REMix\remix_nz\process\225a\transfer_lengthparam.csv
   207    10725 IF EXIST     184     209  ..c:\Local\REMix\remix_nz\process\225a\transfer_gridsegments.csv
   208    10727 IF EXIST     184     211  ..c:\Local\REMix\remix_nz\process\225a\transfer_gridsegments.csv
   209    11324 INCLUDE       27      34  ..C:\Local\REMix\framework\remix\framework\model\source\core\sourcesink.gms
   210    11362 IF EXIST     209      38  ..c:\Local\REMix\remix_nz\process\225a\sourcesink_config.csv
   211    11362 INCLUDE      209      38  ...c:\Local\REMix\remix_nz\process\225a\sourcesink_config.csv
   212    11540 IF EXIST     209      40  ..c:\Local\REMix\remix_nz\process\225a\sourcesink_config.csv
   213    11544 BATINCLUDE   209      44  ...C:\Local\REMix\framework\remix\framework\model\source\battools\aggregateNodes.gms
   214    11572 IF EXIST     209      62  ..c:\Local\REMix\remix_nz\process\225a\sourcesink_profile.csv
   215    11572 INCLUDE      209      62  ...c:\Local\REMix\remix_nz\process\225a\sourcesink_profile.csv
   216    11650 IF EXIST     209      63  ..c:\Local\REMix\remix_nz\process\225a\sourcesink_profile.csv
   217    11651 IF EXIST     209      64  ..c:\Local\REMix\remix_nz\process\225a\sourcesink_profile.csv
   218    11653 IF EXIST     209      66  ..c:\Local\REMix\remix_nz\process\225a\sourcesink_profile.csv
   219    11673 IF EXIST     209      86  ..c:\Local\REMix\remix_nz\process\225a\sourcesink_annualsum.csv
   220    11673 INCLUDE      209      86  ...c:\Local\REMix\remix_nz\process\225a\sourcesink_annualsum.csv
   221    11742 IF EXIST     209      88  ..c:\Local\REMix\remix_nz\process\225a\sourcesink_annualsum.csv
   222    11745 BATINCLUDE   209      91  ...C:\Local\REMix\framework\remix\framework\model\source\battools\aggregateNodes.gms
   223    11926 INCLUDE       27      35  ..C:\Local\REMix\framework\remix\framework\model\source\core\balance.gms
   224    12062 INCLUDE       27      37  ..C:\Local\REMix\framework\remix\framework\model\source\accounting\equations.gms
   225    12484 INCLUDE       27      38  ..C:\Local\REMix\framework\remix\framework\model\source\optiframe.gms
   226    12525 INCLUDE       27      72  ..C:\Local\REMix\framework\remix\framework\model\source\methods\checkanno.gms
   227    12536 INCLUDE       27      75  ..C:\Local\REMix\framework\remix\framework\model\source\methods\pips.gms
   228    12545 INCLUDE       27      78  ..C:\Local\REMix\framework\remix\framework\model\source\methods\solve.gms
   229    12757 INCLUDE       27      81  ..C:\Local\REMix\framework\remix\framework\model\source\methods\pareto.gms
   230    12766 INCLUDE       27      84  ..C:\Local\REMix\framework\remix\framework\model\source\methods\mga.gms
   231    12775 INCLUDE       27      87  ..C:\Local\REMix\framework\remix\framework\model\source\methods\iternodes.gms
   232    12784 INCLUDE       27      90  ..C:\Local\REMix\framework\remix\framework\model\source\postcalc\definition.gms
   233    13576 INCLUDE       27 