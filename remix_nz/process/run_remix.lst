GAMS 40.4.0  d540b52e Oct 3, 2022           WEX-WEI x86 64bit/MS Windows - 03/07/24 13:57:35 Page 1
G e n e r a l   A l g e b r a i c   M o d e l i n g   S y s t e m
C o m p i l a t i o n


   1  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
   2  * SPDX-License-Identifier: BSD-3-Clause
   3   
   4  * ==== REMix version number ====
   6   
   7  * ==== global settings ====
  12   
  14   
  15  * ==== write metadata and inherit dataset ====
INCLUDE    C:\Local\REMix\framework\remix\framework\model\source\metadata.gms
  24   
  28   
  44   
  60   
  61  set metadata(*) /
INCLUDE    c:\Local\REMix\remix_nz\process\225a\metadata
  63  remix_version "0.9.7"
  64  gams_version "40.4.0"
  65  timestamp "03/07/24 13:57:35"
  66  framework_path "C:\Local\REMix\framework\remix\framework\model\source"
  67   
  68  framework_hash 941e0022b17b91bc7adc3b6997f2147d75687f85
  69   
  70  framework_branch "main"
  71   
  72  project_path "C:\Local\REMix\remix_nz\output\will\01-battery-distributed_2020-2035-2050\data"
  73   
  74  project_hash "941e0022b17b91bc7adc3b6997f2147d75687f85"
  75   
  76  project_branch "main"
  77   
  78  /;
INCLUDE    C:\Local\REMix\framework\remix\framework\model\source\data_inheritance.gms
  80  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
  81  * SPDX-License-Identifier: BSD-3-Clause
  82   
  85   
  90   
  91  * pandas based data inheritance reading in the dat files, merging them and writing csv files in the scrdir
 113  ;
 114   
 118   
 119  * ==== run remix ====
INCLUDE    C:\Local\REMix\framework\remix\framework\model\source\remix.gms
 124  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
 125  * SPDX-License-Identifier: BSD-3-Clause
 126   
 127  * ==== global settings ====
 135   
 138   
 140   
 143   
 144  * ==== include modules ====
INCLUDE    C:\Local\REMix\framework\remix\framework\model\source\sets.gms
 146  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
 147  * SPDX-License-Identifier: BSD-3-Clause
 148   
 149  * // # sets
 150  * // Sets are the indices of variables and parameters.
 151   
 152  * // ## Reference
 153  * // {special_table_sets}
 154   
 155  * // ## Input Files
 156  * // {special_table_set_input_files}
1063   
1064  map_accNodes(accNodesModel,accNodesModel_aggregation)
1065      $sum((nodesData, nodesModelToCalc)
1066              $( sameas(nodesModelToCalc,accNodesModel)
1067                  and map_accNodesLoad(nodesData,accNodesModel_aggregation)
1068                  and aggregateNodesModel(nodesData,nodesModelToCalc)), 1) = yes;
1069   
1070  map_accNodes(accNodesModel,"global")$sum(nodesModelToCalc$sameas(accNodesModel,nodesModelToCalc), 1) = yes;
1071  map_accNodes(accNodesModel,"global")$sum(accNodes$sameas(accNodesModel,accNodes), 1) = yes;
1072  map_accNodes(accNodesModel,accNodesModel) = yes;
1073  map_accLinks(accLinksModel,"global")$sum(linksModelToCalc$sameas(accLinksModel,linksModelToCalc), 1) = yes;
1074  map_accLinks(accLinksModel,accLinksModel) = yes;
1075  map_accYears(accYears,"horizon")$sum(yearsToCalc$sameas(accYears,yearsToCalc), 1)  = yes;
1076  map_accYears(accYears,accYears) = yes;
1077   
1078  map_accNodesToCalc(accNodesModel,nodesModelToCalc)
1079      $sum((nodesData)
1080              $( map_accNodesLoad(nodesData,accNodesModel)
1081                  and aggregateNodesModel(nodesData,nodesModelToCalc)), 1) = yes;
1082   
1083  map_accNodesToCalc("global",nodesModelToCalc) = yes;
1084  map_accNodesToCalc(accNodesModel,nodesModelToCalc)$sameas(accNodesModel,nodesModelToCalc) = yes;
1085  map_accLinksToCalc("global",linksModelToCalc) = yes;
1086  map_accLinksToCalc(accLinksModel,linksModelToCalc)$sameas(accLinksModel,linksModelToCalc) = yes;
1087  map_accYearsToCalc("horizon",yearsToCalc) = yes;
1088  map_accYearsToCalc(accYears,yearsToCalc)$sameas(accYears,yearsToCalc) = yes;
1089   
1090  * Duplicate sets for postcalc reporting without horizon and accYears
1091  map_accNodesPostCalc(accNodesModel,nodesModelToCalc) = map_accNodesToCalc(accNodesModel,nodesModelToCalc);
1092  map_accLinksPostCalc(accLinksModel,linksModelToCalc) = map_accLinksToCalc(accLinksModel,linksModelToCalc);
1093  map_accYearsPostCalc(accYears,yearsToCalc)$sameas(accYears,yearsToCalc) = yes;
1094  map_accYearsPostCalc(accYears,years)$(sameas(accYears,years) and years.val < sum(yearsToCalc$(ord(yearsToCalc) = 1), yearsToCalc.val)) = yes;
1095   
1096  set map_nodesAccounting(accNodesModel_aggregation,accNodesModel) "Map accounting nodes describes the mapping between model accounting nodes and data nodes." ;
1097  option map_nodesAccounting < map_accNodes;
1098   
1099  * ==== Generic sets  ====
1100  * These set names are repeated across different profile parameters.
1101  * they are not strictly related to each other and are not input data but
1102  * are needed for validation.
1103  ** // PROFILE: profileTypes | Profile Types | OEO_00140056:flow potential | set_profiletypes.csv
1104   
1105  ** // SET: scenario | Scenario | OEO_00000364:scenario | set_scenarios.csv
1106  * "Scenario indexes help to differentiate scenarios." /
1107   
1108  ** // SET: capType | Capacity Types | OEO_00030019:balance process attribute | set_captypes.csv
1109  * "Capacity types differentiate investment decisions." /
1110   
1111  ** // SET: balanceType | Balance Types | OEO_00030019:balance process attribute | set_balancetypes.csv
1112  * "Balance types differentiate types of balances." /
INCLUDE    C:\Local\REMix\framework\remix\framework\model\source\accounting\input.gms
1114  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
1115  * SPDX-License-Identifier: BSD-3-Clause
1116   
1117  * // # accounting_input
1118  * // The parameters in this file describe the accounting of indicators in the model.
1119   
1120  * // ## Variables
1121  * // {special_table_input_variables}
1532   
1533  * Aggregate accounting parameters
BATINCLUDE C:\Local\REMix\framework\remix\framework\model\source\battools\aggregateAccountingMean.gms
1535  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
1536  * SPDX-License-Identifier: BSD-3-Clause
1537   
1539   
1541   
1542  set accounting_converterUnitsNonzero(indicator,accnodesData,converter_techs,vintage);
1543  accounting_converterUnitsNonzero(indicator,accnodesData,converter_techs,vintage)
1544      $sum(pc_accounting_converterUnits$accounting_converterUnitsIn(indicator,accnodesData,converter_techs,vintage,pc_accounting_converterUnits), 1)
1545      = yes;
1546   
1548  set accounting_converterUnitsChk(indicator,nodesModel,converter_techs,vintage,pc_accounting_converterUnits);
1549  accounting_converterUnitsChk(indicator,nodesModel,converter_techs,vintage,"useAnnuity")
1550      $sum((nodesData,accnodesData)
1551              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1552                  and accounting_converterUnitsNonzero(indicator,accnodesData,converter_techs,vintage)), 1)
1553      = smax((nodesData,accnodesData)
1554              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1555                  and accounting_converterUnitsNonzero(indicator,accnodesData,converter_techs,vintage)),
1556          accounting_converterUnitsIn(indicator,accnodesData,converter_techs,vintage,"useAnnuity"))
1557      - smin((nodesData,accnodesData)
1558              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1559                  and accounting_converterUnitsNonzero(indicator,accnodesData,converter_techs,vintage)),
1560          accounting_converterUnitsIn(indicator,accnodesData,converter_techs,vintage,"useAnnuity"));
1561   
1562  abort$sum(accounting_converterUnitsChk(indicator,nodesModel,converter_techs,vintage,pc_accounting_converterUnits), 1) "Cannot aggregate technologies with different useAnnuity values."
1564   
1565  parameter accounting_converterUnitsAgg(indicator,nodesModel,converter_techs,vintage,pc_accounting_converterUnits);
1566  accounting_converterUnitsAgg(indicator,nodesModel,converter_techs,vintage,pc_accounting_converterUnits)
1567      $sum((nodesData,accnodesData)
1568              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1569                  and accounting_converterUnitsNonzero(indicator,accnodesData,converter_techs,vintage)), 1)
1570      = sum((nodesData,accnodesData)
1571              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1572                  and accounting_converterUnitsNonzero(indicator,accnodesData,converter_techs,vintage)),
1573          accounting_converterUnitsIn(indicator,accnodesData,converter_techs,vintage,pc_accounting_converterUnits))
1574      / sum((nodesData,accnodesData)
1575              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1576                  and accounting_converterUnitsNonzero(indicator,accnodesData,converter_techs,vintage)),
1577          1);
1578   
1579  parameter accounting_converterUnits(indicator,nodesModel,converter_techs,vintage,pc_accounting_converterUnits);
1580  loop(accnodes,
1581  accounting_converterUnits(indicator,nodesModel,converter_techs,vintage,pc_accounting_converterUnits)
1582      $sum(accnodesData$(map_accnodesToCalc(accnodes,nodesModel) and sameas(accnodes,accnodesData)
1583                              and accounting_converterUnitsIn(indicator,accnodesData,converter_techs,vintage,pc_accounting_converterUnits)), 1)
1584      = sum(accnodesData$(map_accnodesToCalc(accnodes,nodesModel) and sameas(accnodes,accnodesData)),
1585              accounting_converterUnitsIn(indicator,accnodesData,converter_techs,vintage,pc_accounting_converterUnits));
1586  );
1587   
1588  accounting_converterUnits(indicator,nodesModel,converter_techs,vintage,pc_accounting_converterUnits)
1589      $accounting_converterUnitsAgg(indicator,nodesModel,converter_techs,vintage,pc_accounting_converterUnits)
1590      = accounting_converterUnitsAgg(indicator,nodesModel,converter_techs,vintage,pc_accounting_converterUnits);
1591   
1592  * option kill %paramName%Nonzero %paramName%Chk %paramName%Agg
BATINCLUDE C:\Local\REMix\framework\remix\framework\model\source\battools\aggregateAccountingMean.gms
1594  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
1595  * SPDX-License-Identifier: BSD-3-Clause
1596   
1598   
1600   
1601  set accounting_converterActivityNonzero(indicator,accnodesData,converter_techs,vintage,activity);
1602  accounting_converterActivityNonzero(indicator,accnodesData,converter_techs,vintage,activity)
1603      $sum(pc_accounting_converterActivity$accounting_converterActivityIn(indicator,accnodesData,converter_techs,vintage,activity,pc_accounting_converterActivity), 1)
1604      = yes;
1605   
1607   
1608  parameter accounting_converterActivityAgg(indicator,nodesModel,converter_techs,vintage,activity,pc_accounting_converterActivity);
1609  accounting_converterActivityAgg(indicator,nodesModel,converter_techs,vintage,activity,pc_accounting_converterActivity)
1610      $sum((nodesData,accnodesData)
1611              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1612                  and accounting_converterActivityNonzero(indicator,accnodesData,converter_techs,vintage,activity)), 1)
1613      = sum((nodesData,accnodesData)
1614              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1615                  and accounting_converterActivityNonzero(indicator,accnodesData,converter_techs,vintage,activity)),
1616          accounting_converterActivityIn(indicator,accnodesData,converter_techs,vintage,activity,pc_accounting_converterActivity))
1617      / sum((nodesData,accnodesData)
1618              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1619                  and accounting_converterActivityNonzero(indicator,accnodesData,converter_techs,vintage,activity)),
1620          1);
1621   
1622  parameter accounting_converterActivity(indicator,nodesModel,converter_techs,vintage,activity,pc_accounting_converterActivity);
1623  loop(accnodes,
1624  accounting_converterActivity(indicator,nodesModel,converter_techs,vintage,activity,pc_accounting_converterActivity)
1625      $sum(accnodesData$(map_accnodesToCalc(accnodes,nodesModel) and sameas(accnodes,accnodesData)
1626                              and accounting_converterActivityIn(indicator,accnodesData,converter_techs,vintage,activity,pc_accounting_converterActivity)), 1)
1627      = sum(accnodesData$(map_accnodesToCalc(accnodes,nodesModel) and sameas(accnodes,accnodesData)),
1628              accounting_converterActivityIn(indicator,accnodesData,converter_techs,vintage,activity,pc_accounting_converterActivity));
1629  );
1630   
1631  accounting_converterActivity(indicator,nodesModel,converter_techs,vintage,activity,pc_accounting_converterActivity)
1632      $accounting_converterActivityAgg(indicator,nodesModel,converter_techs,vintage,activity,pc_accounting_converterActivity)
1633      = accounting_converterActivityAgg(indicator,nodesModel,converter_techs,vintage,activity,pc_accounting_converterActivity);
1634   
1635  * option kill %paramName%Nonzero %paramName%Chk %paramName%Agg
BATINCLUDE C:\Local\REMix\framework\remix\framework\model\source\battools\aggregateAccountingMean.gms
1637  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
1638  * SPDX-License-Identifier: BSD-3-Clause
1639   
1641   
1643   
1644  set accounting_converterStartupNonzero(indicator,accnodesData,converter_techs,vintage);
1645  accounting_converterStartupNonzero(indicator,accnodesData,converter_techs,vintage)
1646      $sum(pc_accounting_converterStartup$accounting_converterStartupIn(indicator,accnodesData,converter_techs,vintage,pc_accounting_converterStartup), 1)
1647      = yes;
1648   
1650   
1651  parameter accounting_converterStartupAgg(indicator,nodesModel,converter_techs,vintage,pc_accounting_converterStartup);
1652  accounting_converterStartupAgg(indicator,nodesModel,converter_techs,vintage,pc_accounting_converterStartup)
1653      $sum((nodesData,accnodesData)
1654              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1655                  and accounting_converterStartupNonzero(indicator,accnodesData,converter_techs,vintage)), 1)
1656      = sum((nodesData,accnodesData)
1657              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1658                  and accounting_converterStartupNonzero(indicator,accnodesData,converter_techs,vintage)),
1659          accounting_converterStartupIn(indicator,accnodesData,converter_techs,vintage,pc_accounting_converterStartup))
1660      / sum((nodesData,accnodesData)
1661              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1662                  and accounting_converterStartupNonzero(indicator,accnodesData,converter_techs,vintage)),
1663          1);
1664   
1665  parameter accounting_converterStartup(indicator,nodesModel,converter_techs,vintage,pc_accounting_converterStartup);
1666  loop(accnodes,
1667  accounting_converterStartup(indicator,nodesModel,converter_techs,vintage,pc_accounting_converterStartup)
1668      $sum(accnodesData$(map_accnodesToCalc(accnodes,nodesModel) and sameas(accnodes,accnodesData)
1669                              and accounting_converterStartupIn(indicator,accnodesData,converter_techs,vintage,pc_accounting_converterStartup)), 1)
1670      = sum(accnodesData$(map_accnodesToCalc(accnodes,nodesModel) and sameas(accnodes,accnodesData)),
1671              accounting_converterStartupIn(indicator,accnodesData,converter_techs,vintage,pc_accounting_converterStartup));
1672  );
1673   
1674  accounting_converterStartup(indicator,nodesModel,converter_techs,vintage,pc_accounting_converterStartup)
1675      $accounting_converterStartupAgg(indicator,nodesModel,converter_techs,vintage,pc_accounting_converterStartup)
1676      = accounting_converterStartupAgg(indicator,nodesModel,converter_techs,vintage,pc_accounting_converterStartup);
1677   
1678  * option kill %paramName%Nonzero %paramName%Chk %paramName%Agg
BATINCLUDE C:\Local\REMix\framework\remix\framework\model\source\battools\aggregateAccountingMean.gms
1680  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
1681  * SPDX-License-Identifier: BSD-3-Clause
1682   
1684   
1686   
1687  set accounting_storageUnitsNonzero(indicator,accnodesData,storage_techs,vintage);
1688  accounting_storageUnitsNonzero(indicator,accnodesData,storage_techs,vintage)
1689      $sum(pc_accounting_storageUnits$accounting_storageUnitsIn(indicator,accnodesData,storage_techs,vintage,pc_accounting_storageUnits), 1)
1690      = yes;
1691   
1693  set accounting_storageUnitsChk(indicator,nodesModel,storage_techs,vintage,pc_accounting_storageUnits);
1694  accounting_storageUnitsChk(indicator,nodesModel,storage_techs,vintage,"useAnnuity")
1695      $sum((nodesData,accnodesData)
1696              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1697                  and accounting_storageUnitsNonzero(indicator,accnodesData,storage_techs,vintage)), 1)
1698      = smax((nodesData,accnodesData)
1699              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1700                  and accounting_storageUnitsNonzero(indicator,accnodesData,storage_techs,vintage)),
1701          accounting_storageUnitsIn(indicator,accnodesData,storage_techs,vintage,"useAnnuity"))
1702      - smin((nodesData,accnodesData)
1703              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1704                  and accounting_storageUnitsNonzero(indicator,accnodesData,storage_techs,vintage)),
1705          accounting_storageUnitsIn(indicator,accnodesData,storage_techs,vintage,"useAnnuity"));
1706   
1707  abort$sum(accounting_storageUnitsChk(indicator,nodesModel,storage_techs,vintage,pc_accounting_storageUnits), 1) "Cannot aggregate technologies with different useAnnuity values."
1709   
1710  parameter accounting_storageUnitsAgg(indicator,nodesModel,storage_techs,vintage,pc_accounting_storageUnits);
1711  accounting_storageUnitsAgg(indicator,nodesModel,storage_techs,vintage,pc_accounting_storageUnits)
1712      $sum((nodesData,accnodesData)
1713              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1714                  and accounting_storageUnitsNonzero(indicator,accnodesData,storage_techs,vintage)), 1)
1715      = sum((nodesData,accnodesData)
1716              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1717                  and accounting_storageUnitsNonzero(indicator,accnodesData,storage_techs,vintage)),
1718          accounting_storageUnitsIn(indicator,accnodesData,storage_techs,vintage,pc_accounting_storageUnits))
1719      / sum((nodesData,accnodesData)
1720              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1721                  and accounting_storageUnitsNonzero(indicator,accnodesData,storage_techs,vintage)),
1722          1);
1723   
1724  parameter accounting_storageUnits(indicator,nodesModel,storage_techs,vintage,pc_accounting_storageUnits);
1725  loop(accnodes,
1726  accounting_storageUnits(indicator,nodesModel,storage_techs,vintage,pc_accounting_storageUnits)
1727      $sum(accnodesData$(map_accnodesToCalc(accnodes,nodesModel) and sameas(accnodes,accnodesData)
1728                              and accounting_storageUnitsIn(indicator,accnodesData,storage_techs,vintage,pc_accounting_storageUnits)), 1)
1729      = sum(accnodesData$(map_accnodesToCalc(accnodes,nodesModel) and sameas(accnodes,accnodesData)),
1730              accounting_storageUnitsIn(indicator,accnodesData,storage_techs,vintage,pc_accounting_storageUnits));
1731  );
1732   
1733  accounting_storageUnits(indicator,nodesModel,storage_techs,vintage,pc_accounting_storageUnits)
1734      $accounting_storageUnitsAgg(indicator,nodesModel,storage_techs,vintage,pc_accounting_storageUnits)
1735      = accounting_storageUnitsAgg(indicator,nodesModel,storage_techs,vintage,pc_accounting_storageUnits);
1736   
1737  * option kill %paramName%Nonzero %paramName%Chk %paramName%Agg
BATINCLUDE C:\Local\REMix\framework\remix\framework\model\source\battools\aggregateAccountingMean.gms
1739  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
1740  * SPDX-License-Identifier: BSD-3-Clause
1741   
1743   
1745   
1746  set accounting_transferLinksNonzero(indicator,acclinksData,transfer_techs,vintage);
1747  accounting_transferLinksNonzero(indicator,acclinksData,transfer_techs,vintage)
1748      $sum(pc_accounting_transferLinks$accounting_transferLinksIn(indicator,acclinksData,transfer_techs,vintage,pc_accounting_transferLinks), 1)
1749      = yes;
1750   
1752  set accounting_transferLinksChk(indicator,linksModel,transfer_techs,vintage,pc_accounting_transferLinks);
1753  accounting_transferLinksChk(indicator,linksModel,transfer_techs,vintage,"useAnnuity")
1754      $sum((linksData,acclinksData)
1755              $(aggregatelinksModel(linksData,linksModel) and sameas(linksData,acclinksData)
1756                  and accounting_transferLinksNonzero(indicator,acclinksData,transfer_techs,vintage)), 1)
1757      = smax((linksData,acclinksData)
1758              $(aggregatelinksModel(linksData,linksModel) and sameas(linksData,acclinksData)
1759                  and accounting_transferLinksNonzero(indicator,acclinksData,transfer_techs,vintage)),
1760          accounting_transferLinksIn(indicator,acclinksData,transfer_techs,vintage,"useAnnuity"))
1761      - smin((linksData,acclinksData)
1762              $(aggregatelinksModel(linksData,linksModel) and sameas(linksData,acclinksData)
1763                  and accounting_transferLinksNonzero(indicator,acclinksData,transfer_techs,vintage)),
1764          accounting_transferLinksIn(indicator,acclinksData,transfer_techs,vintage,"useAnnuity"));
1765   
1766  abort$sum(accounting_transferLinksChk(indicator,linksModel,transfer_techs,vintage,pc_accounting_transferLinks), 1) "Cannot aggregate technologies with different useAnnuity values."
1768   
1769  parameter accounting_transferLinksAgg(indicator,linksModel,transfer_techs,vintage,pc_accounting_transferLinks);
1770  accounting_transferLinksAgg(indicator,linksModel,transfer_techs,vintage,pc_accounting_transferLinks)
1771      $sum((linksData,acclinksData)
1772              $(aggregatelinksModel(linksData,linksModel) and sameas(linksData,acclinksData)
1773                  and accounting_transferLinksNonzero(indicator,acclinksData,transfer_techs,vintage)), 1)
1774      = sum((linksData,acclinksData)
1775              $(aggregatelinksModel(linksData,linksModel) and sameas(linksData,acclinksData)
1776                  and accounting_transferLinksNonzero(indicator,acclinksData,transfer_techs,vintage)),
1777          accounting_transferLinksIn(indicator,acclinksData,transfer_techs,vintage,pc_accounting_transferLinks))
1778      / sum((linksData,acclinksData)
1779              $(aggregatelinksModel(linksData,linksModel) and sameas(linksData,acclinksData)
1780                  and accounting_transferLinksNonzero(indicator,acclinksData,transfer_techs,vintage)),
1781          1);
1782   
1783  parameter accounting_transferLinks(indicator,linksModel,transfer_techs,vintage,pc_accounting_transferLinks);
1784  loop(acclinks,
1785  accounting_transferLinks(indicator,linksModel,transfer_techs,vintage,pc_accounting_transferLinks)
1786      $sum(acclinksData$(map_acclinksToCalc(acclinks,linksModel) and sameas(acclinks,acclinksData)
1787                              and accounting_transferLinksIn(indicator,acclinksData,transfer_techs,vintage,pc_accounting_transferLinks)), 1)
1788      = sum(acclinksData$(map_acclinksToCalc(acclinks,linksModel) and sameas(acclinks,acclinksData)),
1789              accounting_transferLinksIn(indicator,acclinksData,transfer_techs,vintage,pc_accounting_transferLinks));
1790  );
1791   
1792  accounting_transferLinks(indicator,linksModel,transfer_techs,vintage,pc_accounting_transferLinks)
1793      $accounting_transferLinksAgg(indicator,linksModel,transfer_techs,vintage,pc_accounting_transferLinks)
1794      = accounting_transferLinksAgg(indicator,linksModel,transfer_techs,vintage,pc_accounting_transferLinks);
1795   
1796  * option kill %paramName%Nonzero %paramName%Chk %paramName%Agg
BATINCLUDE C:\Local\REMix\framework\remix\framework\model\source\battools\aggregateAccountingMean.gms
1798  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
1799  * SPDX-License-Identifier: BSD-3-Clause
1800   
1802   
1804   
1805  set accounting_transferPerLengthNonzero(indicator,acclinksData,transfer_techs,vintage,link_types);
1806  accounting_transferPerLengthNonzero(indicator,acclinksData,transfer_techs,vintage,link_types)
1807      $sum(pc_accounting_transferPerLength$accounting_transferPerLengthIn(indicator,acclinksData,transfer_techs,vintage,link_types,pc_accounting_transferPerLength), 1)
1808      = yes;
1809   
1811  set accounting_transferPerLengthChk(indicator,linksModel,transfer_techs,vintage,link_types,pc_accounting_transferPerLength);
1812  accounting_transferPerLengthChk(indicator,linksModel,transfer_techs,vintage,link_types,"useAnnuity")
1813      $sum((linksData,acclinksData)
1814              $(aggregatelinksModel(linksData,linksModel) and sameas(linksData,acclinksData)
1815                  and accounting_transferPerLengthNonzero(indicator,acclinksData,transfer_techs,vintage,link_types)), 1)
1816      = smax((linksData,acclinksData)
1817              $(aggregatelinksModel(linksData,linksModel) and sameas(linksData,acclinksData)
1818                  and accounting_transferPerLengthNonzero(indicator,acclinksData,transfer_techs,vintage,link_types)),
1819          accounting_transferPerLengthIn(indicator,acclinksData,transfer_techs,vintage,link_types,"useAnnuity"))
1820      - smin((linksData,acclinksData)
1821              $(aggregatelinksModel(linksData,linksModel) and sameas(linksData,acclinksData)
1822                  and accounting_transferPerLengthNonzero(indicator,acclinksData,transfer_techs,vintage,link_types)),
1823          accounting_transferPerLengthIn(indicator,acclinksData,transfer_techs,vintage,link_types,"useAnnuity"));
1824   
1825  abort$sum(accounting_transferPerLengthChk(indicator,linksModel,transfer_techs,vintage,link_types,pc_accounting_transferPerLength), 1) "Cannot aggregate technologies with different useAnnuity values."
1827   
1828  parameter accounting_transferPerLengthAgg(indicator,linksModel,transfer_techs,vintage,link_types,pc_accounting_transferPerLength);
1829  accounting_transferPerLengthAgg(indicator,linksModel,transfer_techs,vintage,link_types,pc_accounting_transferPerLength)
1830      $sum((linksData,acclinksData)
1831              $(aggregatelinksModel(linksData,linksModel) and sameas(linksData,acclinksData)
1832                  and accounting_transferPerLengthNonzero(indicator,acclinksData,transfer_techs,vintage,link_types)), 1)
1833      = sum((linksData,acclinksData)
1834              $(aggregatelinksModel(linksData,linksModel) and sameas(linksData,acclinksData)
1835                  and accounting_transferPerLengthNonzero(indicator,acclinksData,transfer_techs,vintage,link_types)),
1836          accounting_transferPerLengthIn(indicator,acclinksData,transfer_techs,vintage,link_types,pc_accounting_transferPerLength))
1837      / sum((linksData,acclinksData)
1838              $(aggregatelinksModel(linksData,linksModel) and sameas(linksData,acclinksData)
1839                  and accounting_transferPerLengthNonzero(indicator,acclinksData,transfer_techs,vintage,link_types)),
1840          1);
1841   
1842  parameter accounting_transferPerLength(indicator,linksModel,transfer_techs,vintage,link_types,pc_accounting_transferPerLength);
1843  loop(acclinks,
1844  accounting_transferPerLength(indicator,linksModel,transfer_techs,vintage,link_types,pc_accounting_transferPerLength)
1845      $sum(acclinksData$(map_acclinksToCalc(acclinks,linksModel) and sameas(acclinks,acclinksData)
1846                              and accounting_transferPerLengthIn(indicator,acclinksData,transfer_techs,vintage,link_types,pc_accounting_transferPerLength)), 1)
1847      = sum(acclinksData$(map_acclinksToCalc(acclinks,linksModel) and sameas(acclinks,acclinksData)),
1848              accounting_transferPerLengthIn(indicator,acclinksData,transfer_techs,vintage,link_types,pc_accounting_transferPerLength));
1849  );
1850   
1851  accounting_transferPerLength(indicator,linksModel,transfer_techs,vintage,link_types,pc_accounting_transferPerLength)
1852      $accounting_transferPerLengthAgg(indicator,linksModel,transfer_techs,vintage,link_types,pc_accounting_transferPerLength)
1853      = accounting_transferPerLengthAgg(indicator,linksModel,transfer_techs,vintage,link_types,pc_accounting_transferPerLength);
1854   
1855  * option kill %paramName%Nonzero %paramName%Chk %paramName%Agg
BATINCLUDE C:\Local\REMix\framework\remix\framework\model\source\battools\aggregateAccountingMean.gms
1857  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
1858  * SPDX-License-Identifier: BSD-3-Clause
1859   
1861   
1863   
1864  set accounting_sourcesinkFlowNonzero(indicator,accnodesData,years,sourcesink_techs,commodity);
1865  accounting_sourcesinkFlowNonzero(indicator,accnodesData,years,sourcesink_techs,commodity)
1866      $sum(pc_accounting_sourcesinkFlow$accounting_sourcesinkFlowIn(indicator,accnodesData,years,sourcesink_techs,commodity,pc_accounting_sourcesinkFlow), 1)
1867      = yes;
1868   
1870   
1871  parameter accounting_sourcesinkFlowAgg(indicator,nodesModel,years,sourcesink_techs,commodity,pc_accounting_sourcesinkFlow);
1872  accounting_sourcesinkFlowAgg(indicator,nodesModel,years,sourcesink_techs,commodity,pc_accounting_sourcesinkFlow)
1873      $sum((nodesData,accnodesData)
1874              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1875                  and accounting_sourcesinkFlowNonzero(indicator,accnodesData,years,sourcesink_techs,commodity)), 1)
1876      = sum((nodesData,accnodesData)
1877              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1878                  and accounting_sourcesinkFlowNonzero(indicator,accnodesData,years,sourcesink_techs,commodity)),
1879          accounting_sourcesinkFlowIn(indicator,accnodesData,years,sourcesink_techs,commodity,pc_accounting_sourcesinkFlow))
1880      / sum((nodesData,accnodesData)
1881              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1882                  and accounting_sourcesinkFlowNonzero(indicator,accnodesData,years,sourcesink_techs,commodity)),
1883          1);
1884   
1885  parameter accounting_sourcesinkFlow(indicator,nodesModel,years,sourcesink_techs,commodity,pc_accounting_sourcesinkFlow);
1886  loop(accnodes,
1887  accounting_sourcesinkFlow(indicator,nodesModel,years,sourcesink_techs,commodity,pc_accounting_sourcesinkFlow)
1888      $sum(accnodesData$(map_accnodesToCalc(accnodes,nodesModel) and sameas(accnodes,accnodesData)
1889                              and accounting_sourcesinkFlowIn(indicator,accnodesData,years,sourcesink_techs,commodity,pc_accounting_sourcesinkFlow)), 1)
1890      = sum(accnodesData$(map_accnodesToCalc(accnodes,nodesModel) and sameas(accnodes,accnodesData)),
1891              accounting_sourcesinkFlowIn(indicator,accnodesData,years,sourcesink_techs,commodity,pc_accounting_sourcesinkFlow));
1892  );
1893   
1894  accounting_sourcesinkFlow(indicator,nodesModel,years,sourcesink_techs,commodity,pc_accounting_sourcesinkFlow)
1895      $accounting_sourcesinkFlowAgg(indicator,nodesModel,years,sourcesink_techs,commodity,pc_accounting_sourcesinkFlow)
1896      = accounting_sourcesinkFlowAgg(indicator,nodesModel,years,sourcesink_techs,commodity,pc_accounting_sourcesinkFlow);
1897   
1898  * option kill %paramName%Nonzero %paramName%Chk %paramName%Agg
1899   
1900  parameter accounting_indicatorBounds_links(linksModel,years,indicator,pc_accounting_indicatorBounds_links);
1901  accounting_indicatorBounds_links(linksModelToCalc,yearsToCalc,indicator,pc_accounting_indicatorBounds_links)
1902      = sum((linksData)$sameas(linksModelToCalc,linksData),
1903              accounting_indicatorBounds_linksIn(linksData,yearsToCalc,indicator,pc_accounting_indicatorBounds_links));
1904   
1905  accounting_indicatorBounds_links(linksModelToCalc,yearsToCalc,indicator,pc_accounting_indicatorBounds_links)
1906      = sum((linksData)$links_aggregate(linksModelToCalc,linksData),
1907              accounting_indicatorBounds_linksIn(linksData,yearsToCalc,indicator,pc_accounting_indicatorBounds_links));
1908   
1909  parameter accounting_indicatorBounds(accNodesModel,accYears,indicator,pc_accounting_indicatorBounds);
1910  accounting_indicatorBounds(accNodesModel,accYears,indicator,pc_accounting_indicatorBounds)
1911      = sum (accNodesData$sameas(accNodesModel,accNodesData),
1912          accounting_indicatorBoundsIn(accNodesData,accYears,indicator,pc_accounting_indicatorBounds));
1913   
1914  accounting_indicatorBounds(accNodesModel,accYears,indicator,pc_accounting_indicatorBounds)
1915      $(sum (nodesModel$sameas(accNodesModel,nodesModel), 1) > 0)
1916      = sum ((accNodesData,nodesData,nodesModel)
1917              $(aggregateNodesModel(nodesData,nodesModel) and sameas(accNodesModel,nodesModel) and sameas(accNodesData,nodesData)),
1918          accounting_indicatorBoundsIn(accNodesData,accYears,indicator,pc_accounting_indicatorBounds));
1919   
1920  set accounting_perIndicatorNonzero(indicator,indicator_a,accNodesData,accYears);
1921  accounting_perIndicatorNonzero(indicator,indicator_a,accNodesData,accYears)
1922      $sum(pc_accounting_perIndicator$accounting_perIndicatorIn(indicator,indicator_a,accNodesData,accYears,pc_accounting_perIndicator), 1)
1923      = yes;
1924   
1925  parameter accounting_perIndicatorAgg(indicator,indicator_a,nodesModel,accYears,pc_accounting_perIndicator);
1926  accounting_perIndicatorAgg(indicator,indicator_a,nodesModel,accYears,pc_accounting_perIndicator)
1927      $sum((nodesData,accnodesData)
1928              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1929                  and accounting_perIndicatorNonzero(indicator,indicator_a,accnodesData,accYears)), 1)
1930      = sum((nodesData,accnodesData)
1931              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1932                  and accounting_perIndicatorNonzero(indicator,indicator_a,accnodesData,accYears)),
1933          accounting_perIndicatorIn(indicator,indicator_a,accnodesData,accYears,pc_accounting_perIndicator))
1934      / sum((nodesData,accnodesData)
1935              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1936                  and accounting_perIndicatorNonzero(indicator,indicator_a,accnodesData,accYears)),
1937          1);
1938   
1939  parameter accounting_perIndicator(indicator,indicator_a,accNodesModel,accYears,pc_accounting_perIndicator);
1940   
1941  loop(accNodes,
1942  accounting_perIndicator(indicator,indicator_a,accNodesModel,accYears,pc_accounting_perIndicator)
1943      $(sum(accNodesData$(sameas(accNodes,accNodesData)
1944              and accounting_perIndicatorIn(indicator,indicator_a,accNodesData,"horizon",pc_accounting_perIndicator)), 1)
1945          and map_accNodes(accNodesModel,accNodes)
1946              )
1947      = sum(accNodesData$(sameas(accNodes,accNodesData)),
1948              accounting_perIndicatorIn(indicator,indicator_a,accNodesData,"horizon",pc_accounting_perIndicator));
1949   
1950  accounting_perIndicator(indicator,indicator_a,accNodesModel,accYears,pc_accounting_perIndicator)
1951      $(sum(accNodesData$(sameas(accNodes,accNodesData)
1952              and accounting_perIndicatorIn(indicator,indicator_a,accNodesData,accYears,pc_accounting_perIndicator)), 1)
1953          and map_accNodes(accNodesModel,accNodes)
1954          and not sameas(accYears, "horizon"))
1955      = sum(accNodesData$(sameas(accNodes,accNodesData)),
1956              accounting_perIndicatorIn(indicator,indicator_a,accNodesData,accYears,pc_accounting_perIndicator));
1957  );
1958   
1959  accounting_perIndicator(indicator,indicator_a,accNodesModel,accYears,pc_accounting_perIndicator)
1960      $sum(nodesModel$(accounting_perIndicatorAgg(indicator,indicator_a,nodesModel,"horizon",pc_accounting_perIndicator)
1961          and sameas(accNodesModel,nodesModel)), 1)
1962      = sum(nodesModel$sameas(accNodesModel,nodesModel),
1963          accounting_perIndicatorAgg(indicator,indicator_a,nodesModel,"horizon",pc_accounting_perIndicator));
1964   
1965  accounting_perIndicator(indicator,indicator_a,accNodesModel,accYears,pc_accounting_perIndicator)
1966      $sum(nodesModel$(accounting_perIndicatorAgg(indicator,indicator_a,nodesModel,accYears,pc_accounting_perIndicator)
1967          and sameas(accNodesModel,nodesModel) and not sameas(accYears, "horizon")), 1)
1968      = sum(nodesModel$sameas(accNodesModel,nodesModel),
1969          accounting_perIndicatorAgg(indicator,indicator_a,nodesModel,accYears,pc_accounting_perIndicator));
1970   
1971   
1972  * Make sure all required indicators end up in the model
1973  set activeIndicators(accNodesModel,accYears,indicator);
1974  activeIndicators(accNodesModel,accYears,indicator)
1975     $((accounting_indicatorBounds(accNodesModel,accYears,indicator,"obj") <> 0
1978        or accounting_indicatorBounds(accNodesModel,accYears,indicator,"useFixed") <> 0
1979        or accounting_indicatorBounds(accNodesModel,accYears,indicator,"useLower") <> 0
1980        or accounting_indicatorBounds(accNodesModel,accYears,indicator,"useUpper") <> 0 )
1981          and not accounting_indicatorBounds(accNodesModel,accYears,indicator,"isVariable"))
1982     = yes;
1983   
1984  set activeIndicators_links(linksModel,years,indicator);
1985  activeIndicators_links(linksModelToCalc,yearsToCalc,indicator)
1986     $(accounting_indicatorBounds_links(linksModelToCalc,yearsToCalc,indicator,"useFixed") <> 0
1987        or accounting_indicatorBounds_links(linksModelToCalc,yearsToCalc,indicator,"useLower") <> 0
1988        or accounting_indicatorBounds_links(linksModelToCalc,yearsToCalc,indicator,"useUpper") <> 0 )
1989     = yes;
1990   
1991  set variableIndicators(accNodesModel,accYears,indicator);
1992  variableIndicators(accNodesModel,accYears,indicator)
1993     $(accounting_indicatorBounds(accNodesModel,accYears,indicator,"obj") = 0
1994        and accounting_indicatorBounds(accNodesModel,accYears,indicator,"isVariable"))
1995     = yes;
1996   
1997  * Calculate length of years and discount rates per indicator
1998  parameter yearFactor(accNodesModel,accYears,indicator,accYears);
1999  yearFactor(accNodesModel,accYears,indicator,accYears_a)
2000      $(map_accYears(accYears_a,accYears)
2001          and sum(yearsToCalc$(sameas(yearsToCalc,accYears_a)), 1))
2002      = 1;
2003   
2004  yearFactor(accNodesModel,accYears,indicator,accYears_a)
2005      $(map_accYears(accYears_a,accYears)
2006          and sum(yearsToCalc$(sameas(yearsToCalc,accYears_a)), 1)
2007          and accounting_indicatorBounds(accNodesModel,accYears,indicator,"integral"))
2008      = sum(yearsToCalc$sameas(accYears_a,yearsToCalc), yearsLen(yearsToCalc));
2009   
2010  yearFactor(accNodesModel,accYears,indicator,accYears_a)
2011      $(map_accYears(accYears_a,accYears)
2012          and sum(yearsToCalc$(sameas(yearsToCalc,accYears_a)), 1)
2013          and accounting_indicatorBounds(accNodesModel,accYears,indicator,"integral")
2014          and accounting_indicatorBounds(accNodesModel,accYears,indicator,"endyear")
2015          and yearFactor(accNodesModel,accYears,indicator,accYears_a) = inf)
2016      = accounting_indicatorBounds(accNodesModel,accYears,indicator,"endyear");
2017   
2018  yearFactor(accNodesModel,accYears,indicator,accYears_a)
2019      $(map_accYears(accYears_a,accYears)
2020          and sum(yearsToCalc$(sameas(yearsToCalc,accYears_a)), 1)
2021          and accounting_indicatorBounds(accNodesModel,accYears,indicator,"integral")
2022          and accounting_indicatorBounds(accNodesModel,accYears,indicator,"discount"))
2023      = yearFactor(accNodesModel,accYears,indicator,accYears_a)
2024          * (1 - accounting_indicatorBounds(accNodesModel,accYears,indicator,"discount"))
2025                  ** (accYears_a.val - smin(yearsToCalc, yearsToCalc.val));
2026   
2027   
2028  * ==== calculate compound indicators for the optimization ====
2029  scalar compIndicators_pre;
2030  scalar compIndicators_post;
2031   
2032  parameter compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a);
2033  compoundIndicators(accNodesModel,accYears,indicator,accNodesModel,accYears,indicator)
2034      $activeIndicators(accNodesModel,accYears,indicator) = 1;
2035   
2036  set compoundIndicators_act(accNodesModel,accYears,indicator);
2037  option compoundIndicators_act < compoundIndicators;
2038   
2039  parameter compoundIndicatorsExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa);
2040  parameter compoundIndicatorsExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a);
2041  compoundIndicatorsExt(accNodesModel,accYears,indicator,accNodesModel,accYears,indicator,accNodesModel,accYears,indicator)
2042      $compoundIndicators_act(accNodesModel,accYears,indicator) = 1;
2043   
2044  compIndicators_pre = 0;
2045  compIndicators_post = 1;
2046   
2047  option sparseval = 1;
2048  while(compIndicators_pre < compIndicators_post,
2049      compIndicators_pre = sum((accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa)
2050          $compoundIndicatorsExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa), 1);
2051   
2052      compoundIndicatorsExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa)
2053          $(compoundIndicators_act(accNodesModel,accYears,indicator)
2054              and compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
2055              and not accounting_indicatorBounds(accNodesModel_a,accYears_a,indicator_a,"isVariable")
2056              and map_accNodes(accNodesModel_aa,accNodesModel_a)
2057              and map_accYears(accYears_aa,accYears_a))
2058          = compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
2059              * accounting_perIndicator(indicator_a,indicator_aa,accNodesModel_aa,accYears_aa,"perIndicator");
2060   
2061      option compoundIndicatorsExt_r < compoundIndicatorsExt;
2062   
2063      compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa)
2064          $(compoundIndicators_act(accNodesModel,accYears,indicator)
2065              and sum((accNodesModel_a,accYears_a,indicator_a)
2066                      $compoundIndicatorsExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a), 1) = 1)
2067          = sum((accNodesModel_a,accYears_a,indicator_a)
2068                  $(compoundIndicatorsExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a)),
2069              compoundIndicatorsExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a));
2070   
2071      compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa)
2072          $(compoundIndicators_act(accNodesModel,accYears,indicator)
2073              and sum((accNodesModel_a,accYears_a,indicator_a)
2074                      $compoundIndicatorsExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a), 1) > 1)
2075          = sum((accNodesModel_a,accYears_a,indicator_a)
2076                  $(compoundIndicatorsExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a)
2077                      and not (sameas(accNodesModel, accNodesModel_a) and sameas(accYears, accYears_a) and sameas(indicator, indicator_a))),
2078              compoundIndicatorsExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a))
2079          / sum((accNodesModel_a,accYears_a,indicator_a)
2080                  $(compoundIndicatorsExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a)
2081                      and not (sameas(accNodesModel, accNodesModel_a) and sameas(accYears, accYears_a) and sameas(indicator, indicator_a))), 1);
2082   
2083      option compoundIndicators_act < compoundIndicators;
2084      compIndicators_post = sum((accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa)
2085          $compoundIndicatorsExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa), 1);
2086  );
2087  option sparseval = 0;
2088   
2089  * map to sub-years and sub-nodes
2090  compoundIndicatorsExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_a)
2091      $(compoundIndicators_act(accNodesModel,accYears,indicator)
2092          and compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
2093          and map_accYears(accYears_aa,accYears_a)
2094          and map_accNodes(accNodesModel_aa,accNodesModel_a))
2095      = compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
2096          * yearFactor(accNodesModel,accYears,indicator,accYears_aa);
2097   
2098  * Remove all accounting regions and accounting years
2099  compoundIndicatorsExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa)
2100      $(compoundIndicatorsExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa)
2101          and not accounting_indicatorBounds(accNodesModel_aa,accYears_aa,indicator_aa,"isVariable")
2102          and sum(accNodes$(sameas(accNodes,accNodesModel_aa)), 1)
2103              or sameas("horizon",accYears_aa))
2104      = 0;
2105   
2106  * Map from extended parameter to final parameter
2107  option compoundIndicatorsExt_r < compoundIndicatorsExt;
2108  compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa)
2109      $(compoundIndicators_act(accNodesModel,accYears,indicator)
2110          and sum((accNodesModel_a,accYears_a,indicator_a)
2111                  $compoundIndicatorsExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a), 1) = 1)
2112      = sum((accNodesModel_a,accYears_a,indicator_a)
2113              $(compoundIndicatorsExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a)),
2114          compoundIndicatorsExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a));
2115   
2116  compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa)
2117      $(compoundIndicators_act(accNodesModel,accYears,indicator)
2118          and sum((accNodesModel_a,accYears_a,indicator_a)
2119                  $compoundIndicatorsExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a), 1) > 1)
2120      = sum((accNodesModel_a,accYears_a,indicator_a)
2121              $(compoundIndicatorsExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a)
2122                  and not (sameas(accNodesModel, accNodesModel_a) and sameas(accYears, accYears_a) and sameas(indicator, indicator_a))),
2123          compoundIndicatorsExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a))
2124      / sum((accNodesModel_a,accYears_a,indicator_a)
2125              $(compoundIndicatorsExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a)
2126                  and not (sameas(accNodesModel, accNodesModel_a) and sameas(accYears, accYears_a) and sameas(indicator, indicator_a))), 1);
2127   
2128  * Remove all accounting regions and accounting years
2129  compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
2130      $(compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
2131          and not accounting_indicatorBounds(accNodesModel_a,accYears_a,indicator_a,"isVariable")
2132          and (sum(accNodes$(sameas(accNodes,accNodesModel_a)), 1)
2133              or sameas("horizon",accYears_a)))
2134      = 0;
2135   
2136  * Remove all slack indicators except the ones declared in indicatorBounds
2137  compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
2138      $(compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
2139          and sum((accNodesModel_aa,accYears_aa)$accounting_indicatorBounds(accNodesModel_aa,accYears_aa,indicator_a,"isVariable"), 1)
2140          and not accounting_indicatorBounds(accNodesModel_a,accYears_a,indicator_a,"isVariable"))
2141      = 0;
2142   
2143  * ==== compound indicators for the post calculation ====
2144  parameter compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a);
2145  compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel,accYears,indicator)
2146      $(sum(nodesModelToCalc$map_accNodesToCalc(accNodesModel,nodesModelToCalc), 1)
2147          and sum(yearsToCalc$map_accYearsToCalc(accYears,yearsToCalc), 1)) = 1;
2148   
2149  set compoundIndicatorsFull_act(accNodesModel,accYears,indicator);
2150  option compoundIndicatorsFull_act < compoundIndicatorsFull;
2151   
2152  parameter compoundIndicatorsFullExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa);
2153  parameter compoundIndicatorsFullExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a);
2154  compoundIndicatorsFullExt(accNodesModel,accYears,indicator,accNodesModel,accYears,indicator,accNodesModel,accYears,indicator) = 1;
2155   
2156  compIndicators_pre = 0;
2157  compIndicators_post = 1;
2158   
2159  option sparseval = 1;
2160  while(compIndicators_pre < compIndicators_post,
2161      compIndicators_pre = sum((accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa)
2162          $compoundIndicatorsFullExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa), 1);
2163   
2164      compoundIndicatorsFullExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa)
2165          $(compoundIndicatorsFull_act(accNodesModel,accYears,indicator)
2166              and compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
2167              and not accounting_indicatorBounds(accNodesModel_a,accYears_a,indicator_a,"isVariable")
2168              and map_accNodes(accNodesModel_aa,accNodesModel_a)
2169              and map_accYears(accYears_aa,accYears_a))
2170          = compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
2171              * accounting_perIndicator(indicator_a,indicator_aa,accNodesModel_aa,accYears_aa,"perIndicator");
2172   
2173      option compoundIndicatorsFullExt_r < compoundIndicatorsFullExt;
2174   
2175      compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa)
2176          $(compoundIndicatorsFull_act(accNodesModel,accYears,indicator)
2177              and sum((accNodesModel_a,accYears_a,indicator_a)
2178                      $compoundIndicatorsFullExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a), 1) = 1)
2179          = sum((accNodesModel_a,accYears_a,indicator_a)
2180                  $(compoundIndicatorsFullExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a)),
2181              compoundIndicatorsFullExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a));
2182   
2183      compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa)
2184          $(compoundIndicatorsFull_act(accNodesModel,accYears,indicator)
2185              and sum((accNodesModel_a,accYears_a,indicator_a)
2186                      $compoundIndicatorsFullExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a), 1) > 1)
2187          = sum((accNodesModel_a,accYears_a,indicator_a)
2188                  $(compoundIndicatorsFullExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a)
2189                      and not (sameas(accNodesModel, accNodesModel_a) and sameas(accYears, accYears_a) and sameas(indicator, indicator_a))),
2190              compoundIndicatorsFullExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a))
2191          / sum((accNodesModel_a,accYears_a,indicator_a)
2192                  $(compoundIndicatorsFullExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a)
2193                      and not (sameas(accNodesModel, accNodesModel_a) and sameas(accYears, accYears_a) and sameas(indicator, indicator_a))), 1);
2194   
2195      option compoundIndicatorsFull_act < compoundIndicatorsFull;
2196      compIndicators_post = sum((accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa)
2197          $compoundIndicatorsFullExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa), 1);
2198  );
2199  option sparseval = 0;
2200   
2201  * map to sub-years and sub-nodes
2202  compoundIndicatorsFullExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_a)
2203      $(compoundIndicatorsFull_act(accNodesModel,accYears,indicator)
2204          and compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
2205          and map_accYears(accYears_aa,accYears_a)
2206          and map_accNodes(accNodesModel_aa,accNodesModel_a))
2207      = compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
2208          * yearFactor(accNodesModel,accYears,indicator,accYears_aa);
2209   
2210  * Remove all accounting regions and accounting years
2211  compoundIndicatorsFullExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa)
2212      $(compoundIndicatorsFullExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa)
2213          and not accounting_indicatorBounds(accNodesModel_aa,accYears_aa,indicator_aa,"isVariable")
2214          and sum(accNodes$(sameas(accNodes,accNodesModel_aa)), 1)
2215              or sameas("horizon",accYears_aa))
2216      = 0;
2217   
2218  * Map from extended parameter to final parameter
2219  option compoundIndicatorsFullExt_r < compoundIndicatorsFullExt;
2220  compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa)
2221      $(compoundIndicatorsFull_act(accNodesModel,accYears,indicator)
2222          and sum((accNodesModel_a,accYears_a,indicator_a)
2223                  $compoundIndicatorsFullExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a), 1) = 1)
2224      = sum((accNodesModel_a,accYears_a,indicator_a)
2225              $(compoundIndicatorsFullExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a)),
2226          compoundIndicatorsFullExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a));
2227   
2228  compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa)
2229      $(compoundIndicatorsFull_act(accNodesModel,accYears,indicator)
2230          and sum((accNodesModel_a,accYears_a,indicator_a)
2231                  $compoundIndicatorsFullExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a), 1) > 1)
2232      = sum((accNodesModel_a,accYears_a,indicator_a)
2233              $(compoundIndicatorsFullExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a)
2234                  and not (sameas(accNodesModel, accNodesModel_a) and sameas(accYears, accYears_a) and sameas(indicator, indicator_a))),
2235          compoundIndicatorsFullExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a))
2236      / sum((accNodesModel_a,accYears_a,indicator_a)
2237              $(compoundIndicatorsFullExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a)
2238                  and not (sameas(accNodesModel, accNodesModel_a) and sameas(accYears, accYears_a) and sameas(indicator, indicator_a))), 1);
2239   
2240  * Remove all accounting regions and accounting years
2241  compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
2242      $(compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
2243          and not accounting_indicatorBounds(accNodesModel_a,accYears_a,indicator_a,"isVariable")
2244          and (sum(accNodes$(sameas(accNodes,accNodesModel_a)), 1)
2245              or sameas("horizon",accYears_a)))
2246      = 0;
2247   
2248  * Remove all slack indicators except the ones declared in indicatorBounds
2249  compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
2250      $(compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
2251          and sum((accNodesModel_aa,accYears_aa)$accounting_indicatorBounds(accNodesModel_aa,accYears_aa,indicator_a,"isVariable"), 1)
2252          and not accounting_indicatorBounds(accNodesModel_a,accYears_a,indicator_a,"isVariable"))
2253      = 0;
2254   
2255  * Check if the objective value and optimization sense is set correctly
2256  scalar opti_values, opti_sense;
2257  opti_values = sum((accNodesModel,accYears,indicator)$(accounting_indicatorBounds(accNodesModel,accYears,indicator,"obj") <> 0), 1);
2258  opti_sense = sum((accNodesModel,accYears,indicator), accounting_indicatorBounds(accNodesModel,accYears,indicator,"obj"));
2259  abort$(opti_values < 1)
2260      "Accounting: No indicator specified as objective value"
2261  abort$(opti_values > 1)
2262      "Accounting: Too many indicators specified as objective value"
2263  abort$(opti_sense <> -1 and opti_sense <> 1)
2264      "Accounting: Optimization sense has to be either -1 or 1"
INCLUDE    C:\Local\REMix\framework\remix\framework\model\source\accounting\annuities.gms
2266  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
2267  * SPDX-License-Identifier: BSD-3-Clause
2268   
2269  * Calculation of annuities
2270   
2271  abort$(sum((indicator,nodesModelToCalc,converter_techs,vintage)
2272          $(accounting_converterUnits(indicator,nodesModelToCalc,converter_techs,vintage,"useAnnuity") = 1
2273          and accounting_converterUnits(indicator,nodesModelToCalc,converter_techs,vintage,"amorTime") < 1), 1) > 0 )
2274      "Accounting: Some converter technologies use annuities but have no amortization time"
2275   
2276  parameter accounting_annuityFactor_converter(indicator,nodesModel,converter_techs,vintage);
2277  accounting_annuityFactor_converter(indicator,nodesModelToCalc,converter_techs,vintage)
2278      $accounting_converterUnits(indicator,nodesModelToCalc,converter_techs,vintage,"useAnnuity")
2279      =
2280      accounting_converterUnits(indicator,nodesModelToCalc,converter_techs,vintage,"interest")
2281          * (1 + accounting_converterUnits(indicator,nodesModelToCalc,converter_techs,vintage,"interest"))
2282          ** accounting_converterUnits(indicator,nodesModelToCalc,converter_techs,vintage,"amorTime")
2283      / ((1 + accounting_converterUnits(indicator,nodesModelToCalc,converter_techs,vintage,"interest"))
2284          ** accounting_converterUnits(indicator,nodesModelToCalc,converter_techs,vintage,"amorTime") - 1);
2285   
2286   
2287  abort$(sum((indicator,nodesModelToCalc,storage_techs,vintage)
2288          $(accounting_storageUnits(indicator,nodesModelToCalc,storage_techs,vintage,"useAnnuity") = 1
2289          and accounting_storageUnits(indicator,nodesModelToCalc,storage_techs,vintage,"amorTime") < 1), 1) > 0 )
2290      "Accounting: Some storage technologies use annuities but have no amortization time"
2291   
2292  parameter accounting_annuityFactor_storage(indicator,nodesModel,storage_techs,vintage);
2293  accounting_annuityFactor_storage(indicator,nodesModelToCalc,storage_techs,vintage)
2294      $accounting_storageUnits(indicator,nodesModelToCalc,storage_techs,vintage,"useAnnuity")
2295      =
2296      accounting_storageUnits(indicator,nodesModelToCalc,storage_techs,vintage,"interest")
2297          * (1 + accounting_storageUnits(indicator,nodesModelToCalc,storage_techs,vintage,"interest"))
2298          ** accounting_storageUnits(indicator,nodesModelToCalc,storage_techs,vintage,"amorTime")
2299      / ((1 + accounting_storageUnits(indicator,nodesModelToCalc,storage_techs,vintage,"interest"))
2300          ** accounting_storageUnits(indicator,nodesModelToCalc,storage_techs,vintage,"amorTime") - 1);
2301   
2302   
2303  abort$(sum((indicator,linksModelToCalc,transfer_techs,vintage)
2304          $(accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"useAnnuity") = 1
2305          and accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"amorTime") < 1), 1) > 0 )
2306      "Accounting: Some transfer technologies use annuities but have no amortization time"
2307   
2308  parameter accounting_annuityFactor_transferLink(indicator,linksModel,transfer_techs,vintage);
2309  accounting_annuityFactor_transferLink(indicator,linksModelToCalc,transfer_techs,vintage)
2310      $accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"useAnnuity")
2311      =
2312      accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"interest")
2313          * (1 + accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"interest"))
2314          ** accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"amorTime")
2315      / ((1 + accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"interest"))
2316          ** accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"amorTime") - 1);
2317   
2318   
2319   
2320  abort$(sum((indicator,linksModelToCalc,transfer_techs,vintage,link_types)
2321          $(accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"useAnnuity") = 1
2322          and accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"amorTime") < 1), 1) > 0 )
2323      "Accounting: Some transfer-per-length technologies use annuities but have no amortization time"
2324   
2325  parameter accounting_annuityFactor_transferPerLength(indicator,linksModel,transfer_techs,vintage,link_types);
2326  accounting_annuityFactor_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types) = 1;
2327   
2328  accounting_annuityFactor_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types)
2329      $accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"useAnnuity")
2330      =
2331      accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"interest")
2332          * (1 + accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"interest"))
2333          ** accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"amorTime")
2334      / ((1 + accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"interest"))
2335          ** accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"amorTime") - 1);
2336   
2338   
INCLUDE    C:\Local\REMix\framework\remix\framework\model\source\methods\mga_pre.gms
2340  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
2341  * SPDX-License-Identifier: BSD-3-Clause
2342   
INCLUDE    C:\Local\REMix\framework\remix\framework\model\source\methods\pareto_pre.gms
2346  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
2347  * SPDX-License-Identifier: BSD-3-Clause
2348   
INCLUDE    C:\Local\REMix\framework\remix\framework\model\source\postcalc\declaration.gms
2352  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
2353  * SPDX-License-Identifier: BSD-3-Clause
2354  * // # Output data
2355  * // This is the reference data model of the REMix output.
2356  * //
2357  * // ## Standard output
2360   
2367   
2369   
2370  set capType / "build", "decom", "total", "lowerLimit", "upperLimit", "total_degraded" /;
2371  set balanceType / "netto", "brutto", "positive", "negative", "flh" /;
2372  set profileType / "upper", "fixed", "lower" /;
2373  set r2a_has_converter_cost(indicator,nodesModel,years,techs,vintage,commodity);
2374   
2375  ** // OUTPUT: indicator_accounting | OEO_00000350:quantity value
2376  * // ### indicator_accounting
2377  * // Title: Accounting indicators Post-calculation
2378  parameter indicator_accounting(accNodesModel,accYears,indicator) "Post-calculation aggregated indicator accounting" ;
2379  * //
2380  ** // OUTPUT: indicator_accounting_ref | OEO_00000350:quantity value
2381  * // ### indicator_accounting_ref
2382  * // Title: Accounting indicators reference
2383  parameter indicator_accounting_ref(accNodesModel,accYears,indicator) "Indicator accounting optimization levels" ;
2384  * //
2385  ** // OUTPUT: indicator_accounting_comp | OEO_00000350:quantity value
2386  * // ### indicator_accounting_comp
2387  * // Title: Accounting indicators composition
2388  parameter indicator_accounting_comp(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a) "Indicator accounting with other indicator composition" ;
2389  * //
2390  ** // OUTPUT: indicator_accounting_detailed | OEO_00000350:quantity value
2391  * // ### indicator_accounting_detailed
2392  * // Title: Accounting indicators detail
2393  parameter indicator_accounting_detailed(indicator,nodesModel,years,techs) "Indicator accounting with technological composition" ;
2394  * //
2395  ** // OUTPUT: indicator_accounting_links | OEO_00000350:quantity value
2396  * // ### indicator_accounting_links
2397  * // Title: Accounting indicators per transfer link
2398  parameter indicator_accounting_links(indicator,nodesModel,nodesModel_a,linksModel,years,techs) "Indicator accounting of transfer technologies" ;
2399  * //
2400  parameter converter_ratedInput(techs,vintage,commodity);
2401  parameter converter_ratedOutput(techs,vintage,commodity);
2402  parameter converter_ratedOutput_min(nodesModel,years,techs,commodity);
2403  parameter converter_ratedOutput_max(nodesModel,years,techs,commodity);
2404   
2405  ** // OUTPUT: converter_caps | OEO_00010257:power capacity
2406  * // ### converter_caps
2407  * // Title: Coverter capacities post-calculation
2408  parameter converter_caps(accNodesModel,accYears,techs,commodity,capType) "Converter capacities, aggregated total" ;
2409  * //
2410  parameter converter_caps_ext(accNodesModel,nodesModel,accYears,years,techs,vintage,commodity,capType);
2411   
2412  ** // OUTPUT: converter_units | OEO_00000350:quantity value
2413  * // ### converter_units
2414  * // Title: Coverter units post-calculation
2415  parameter converter_units(accNodesModel,accYears,techs,vintage,capType) "Converter units" ;
2416  * //
2417  parameter converter_units_ext(accNodesModel,nodesModel,accYears,years,techs,vintage,capType);
2418   
2419  set transfer_usedStartEnd(nodesModel,nodesModel,linksModel,years,techs);
2420  parameter max_transfer_coefficient(techs,commodity);
2421  parameter min_transfer_coefficient(techs,commodity);
2422  ** // OUTPUT: transfer_links | OEO_00000350:quantity value
2423  * // ### transfer_links
2424  * // Title: Transfer post-calculation
2425  parameter transfer_links(linksModel,years,techs,vintage,capType) "Transfer links" ;
2426  * //
2427  ** // OUTPUT: transfer_caps | OEO_00010257:power capacity
2428  * // ### transfer_caps
2429  * // Title: Transfer capacities post-calculation
2430  parameter transfer_caps(nodesModel_start,nodesModel_end,linksModel,years,techs,commodity,capType) "Transfer capacities, aggregated total" ;
2431  * //
2432  ** // OUTPUT: transfer_flows | OEO_00050019:energy amount value
2433  * // ### transfer_flows
2434  * // Title: Transfer hourly flows
2435  parameter transfer_flows(timeModel,nodesModel_start,nodesModel_end,linksModel,years,techs,commodity) "Hourly link flows" ;
2436  * //
2437  ** // OUTPUT: transfer_flows_annual | OEO_00050019:energy amount value
2438  * // ### transfer_flows_annual
2439  * // Title: Transfer annual flows
2440  parameter transfer_flows_annual(nodesModel_start,nodesModel_end,linksModel,years,techs,commodity,balanceType) "Annual link flows" ;
2441  * //
2442  ** // OUTPUT: transfer_losses | OEO_00050019:energy amount value
2443  * // ### transfer_losses
2444  * // Title: Transfer hourly losses
2445  parameter transfer_losses(timeModel,nodesModel_start,nodesModel_end,linksModel,years,techs,commodity) "Hourly link losses" ;
2446  * //
2447  ** // OUTPUT: transfer_losses_annual | OEO_00050019:energy amount value
2448  * // ### transfer_losses_annual
2449  * // Title: Transfer annual losses
2450  parameter transfer_losses_annual(nodesModel_start,nodesModel_end,linksModel,years,techs,commodity,balanceType) "Annual link losses" ;
2451  * //
2452  parameter storage_size_max(nodesModel,years,techs,commodity);
2453  parameter storage_size_min(nodesModel,years,techs,commodity);
2454  ** // OUTPUT: storage_units |  OEO_00000350:quantity value
2455  * // ### storage_units
2456  * // Title: Storage units post-calculation
2457  parameter storage_units(accNodesModel,accYears,techs,vintage,capType) "Storage units" ;
2458  * //
2459  parameter storage_units_ext(accNodesModel,nodesModel,accYears,years,techs,vintage,capType);
2460  ** // OUTPUT: storage_caps | OEO_00230000:energy storage capacity
2461  * // ### storage_caps
2462  * // Title: Storage capacities post-calculation
2463  parameter storage_caps(accNodesModel,accYears,techs,commodity,capType) "Storage capacities, aggregated total" ;
2464  * //
2465  parameter storage_caps_ext(accNodesModel,nodesModel,accYears,years,techs,vintage,commodity,capType);
2466  ** // OUTPUT: storage_level_out | OEO_00330012:energy storage content
2467  * // ### storage_level_out
2468  * // Title: Storage level
2469  parameter storage_level_out(timeModel,accNodesModel,accYears,techs,commodity) "Storage level per time step" ;
2470  * //
2471  parameter storage_level_out_ext(timeModel,accNodesModel,nodesModel,accYears,years,techs,vintage,commodity);
2472  ** // OUTPUT: storage_flows | OEO_00050019:energy amount value
2473  * // ### storage_flows
2474  * // Title: Storage hourly flows
2475  parameter storage_flows(timeModel,accNodesModel,accYears,techs,commodity) "Storage flows per time step" ;
2476  * //
2477  parameter storage_flows_ext(timeModel,accNodesModel,nodesModel,accYears,years,techs,vintage,commodity);
2478  ** // OUTPUT: storage_flows_annual | OEO_00050019:energy amount value
2479  * // ### storage_flows_annual
2480  * // Title: Storage annual flows
2481  parameter storage_flows_annual(accNodesModel,accYears,techs,commodity,balanceType) "Aggregated storage flows" ;
2482  * //
2483  ** // OUTPUT: storage_losses_out | OEO_00050019:energy amount value
2484  * // ### storage_losses_out
2485  * // Title: Storage hourly losses
2486  parameter storage_losses_out(timeModel,accNodesModel,accYears,techs,commodity) "Storage losses per time step" ;
2487  * //
2488  ** // OUTPUT: storage_losses_annual | OEO_00050019:energy amount value
2489  * // ### storage_losses_annual
2490  * // Title: Storage annual losses
2491  parameter storage_losses_annual(accNodesModel,accYears,techs,commodity,balanceType) "Aggregated storage losses" ;
2492  * //
2493  ** // OUTPUT: commodity_balance | OEO_00000350:quantity value
2494  * // ### commodity_balance
2495  * // Title: Hourly commodity balance
2496  parameter commodity_balance(timeModel,accNodesModel,accYears,techs,commodity) "Commodity balances per model hour" ;
2497  parameter commodity_balance_ext(timeModel,accNodesModel,nodesModel,accYears,years,techs,vintage,commodity);
2498  * //
2499  ** // OUTPUT: commodity_balance_annual | OEO_00000350:quantity value
2500  * // ### commodity_balance_annual
2501  * // Title: Annual commodity balance
2502  parameter commodity_balance_annual(accNodesModel,accYears,techs,commodity,balanceType) "Aggregated commodity balances" ;
2503  * //
2504  ** // OUTPUT: marginals_sourcesink_profile | OEO_00040008:marginal cost
2505  * // ### marginals_sourcesink_profile
2506  * // Title: Source-sink marginals
2507  parameter marginals_sourcesink_profile(timeModel,nodesModel,years,techs,commodity) "Source and sink flow marginal values" ;
2508  * //
2509  ** // OUTPUT: marginals_balance | OEO_00040008:marginal cost
2510  * // ### marginals_balance
2511  * // Title: Nodel balance marginals
2512  parameter marginals_balance(timeModel,nodesModel,years,commodity) "Nodal balance marginal values" ;
2513  * //
2514  ** // OUTPUT: marginals_sourcesink_sum | OEO_00040008:marginal cost
2515  * // ### marginals_sourcesink_sum
2516  * // Title: Source-sink annual marginals
2517  parameter marginals_sourcesink_sum(nodesModel,years,techs,commodity) "Annual source and sink flow marginal values" ;
2518  * //
2519  ** // OUTPUT: marginals_indicator_bounds | OEO_00040008:marginal cost
2520  * // ### marginals_indicator_bounds
2521  * // Title: Indicator bounds marginals
2522  parameter marginals_indicator_bounds(accNodesModel,accYears,indicator) "Accounting indicator marginals" ;
2523  * //
2524  * // ## REMix-AMIRIS interface output
2525  * //
2526  ** // OUTPUT: r2a_annuity_cost_converter | OEO_00040009:cost
2527  * // ### r2a_annuity_cost_converter
2528  * // Title: Converter annuity cost
2529  parameter r2a_annuity_cost_converter(indicator,accNodesModel,accYears,techs,vintage,commodity) "Annuity cost of converters" ;
2530  * //
2531  ** // OUTPUT: r2a_spec_cost_converter | OEO_00040009:cost
2532  * // ### r2a_spec_cost_converter
2533  * // Title: Converter specific cost
2534  parameter r2a_spec_cost_converter(indicator,accNodesModel,accYears,techs,vintage,commodity) "Specific cost of converters" ;
2535  * //
2536  ** // OUTPUT: r2a_spec_cost_fuel | OEO_00040009:cost
2537  * // ### r2a_spec_cost_fuel
2538  * // Title: Commodity specific cost
2539  parameter r2a_spec_cost_fuel(indicator,accNodesModel,accYears,techs,commodity) "Specific cost of commodities, used particularly for fuels" ;
2540  * //
2541  ** // OUTPUT: r2a_spec_cost_indicator | OEO_00040009:cost
2542  * // ### r2a_spec_cost_indicator
2543  * // Title: Indicator specific cost
2544  parameter r2a_spec_cost_indicator(indicator,indicator_a,accNodesModel,accYears) "Specific indicator cost" ;
2545  * //
2546  ** // OUTPUT: r2a_converter_efficiencies | OEO_00140050:efficiency value
2547  * // ### r2a_converter_efficiencies
2548  * // Title: Indicator specific cost
2549  parameter r2a_converter_efficiencies(techs,vintage,activity,commodity,commodity_a) "Converter-specific efficiency" ;
2550  * //
2551  ** // OUTPUT: r2a_converter_avail_factor | OEO_00000350:quantity value
2552  * // ### r2a_converter_avail_factor
2553  * // Title: Converter availability factor
2554  parameter r2a_converter_avail_factor(accNodesModel,accYears,techs,vintage) "Availability factor of converter technologies" ;
2555  parameter r2a_converter_avail_profile(timeModel,accNodesModel,accYears,techs,commodity,profileType) "Availability of converter technologies" ;
2556  parameter r2a_converter_avail_profile_ext(timeModel,accNodesModel,nodesModel,accYears,years,techs,vintage,commodity,profileType);
2557  * //
2558  ** // OUTPUT: r2a_storage_e2p | OEO_00000350:quantity value
2559  * // ### r2a_storage_e2p
2560  * // Title: E2P Storage
2561  parameter r2a_storage_e2p(accNodesModel,accYears,techs,vintage,commodity,capType) "Energy-to-power ratio" ;
2562  * //
2563  ** // OUTPUT: r2a_storage_selfdischarge | OEO_00000350:quantity value
2564  * // ### r2a_storage_selfdischarge
2565  * // Title: Storage self discharge rates
2566  parameter r2a_storage_selfdischarge(accNodesModel,accYears,techs,vintage,commodity);
2567   
INCLUDE    C:\Local\REMix\framework\remix\framework\model\source\loadgdx.gms
2571  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
2572  * SPDX-License-Identifier: BSD-3-Clause
2573   
2574  * ==== global settings ====
2576   
2578   
INCLUDE    C:\Local\REMix\framework\remix\framework\model\source\core\converter.gms
2580  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
2581  * SPDX-License-Identifier: BSD-3-Clause
2582   
2583  * // # core_converter
2584  * // The equations in this file describe the converters in the model.
2585   
2586  * // ## Advanced features
2587  * //
2588  * // You can find a more detailed explanation of the %curly_open%ref%curly_close%`MIP features <explanations_mip_label>`.
2589  ** // There is also a more detailed explanation on the modeling of outages at the %curly_open%ref%curly_close%`resilience section <explanations_resilience_label>`.
2590  * //
2591  * // In the following table you can see which modifications you have to make to your data to use the different features.
2592  * //
2593  * // | Feature | Modification |
2594  * // | ------ | ------ |
2595  * // | MIP expansion | The converter_tech_Parameter "mipUnits" has to be set to 1 in converter_techParam.dat for the technologies and years where descrete expansion is wanted |
2596  * // | Minimum up/downtime | The converter_tech_Parameters "minUptime" and/or "minDowntime" need to be set to the according amount of minimum time steps.Furthermore, the converter_tech_Parameter "mipDispatch" has to be set to 1 in converter_techParam.dat
2597  * // for the technologies and years where a minimum up- or downtime should be applied so that the units can be shut down. "mipUnits" will automatically be set to 1 |
2598  * // | Partial load | The converter_tech_Parameter "mipDispatch" has to be set to 1 in converter_techParam.dat for the technologies and years where you want to make use of the partial load feature. You also have to set a value to
2599  * // the converter_coefficient_parameters "minLoad" and/or "maxLoad" for the according technologies, vintages, activities and commodities. You can then for example set different "coefficient" values for each activity in converter_coefficient.dat |
2600  ** // | Outages | You have to include the converter_outageProfile.dat-file and while executing the model you have to set --method=resilience |
2601   
2602  * // ## %curly_open%ref%curly_close%`sets <remix_model_sets_label>`
2603  * //
2604  * // ### set_converter_techs.dat
2605  * // In this file all converter technologies are listed that can be used within your model.
2606  * //
2607  * // ### set_activities.dat
2608  * // All modes with which the converter technologies can be operated need to be added here.
2609  * // Examples: Charge (for the charging mode of a storage), Powergen (for the mode in which a converter produces electricity), Curtailment (for the mode in which a renewable power plant is shut down), …
2610  * // If you would like to use the partial load feature, all activity modes that should be available for this feature need to be defined here as well.
2611  * //
2612  * // ### set_commodities.dat
2613  * // In this file all commodities are listed that can be used and converted by the converter technologies.
2614  * // Examples: Electricity, Coal, Biomass, Hydrogen, …
2615   
2616  * // ## Variables
2617  * // {special_table_converter_variables}
8459   
8460  * ==== loading units from gdx file ====
8461   
8462  * Load units from gdx file
8464   
8465  * ==== calculation of mappings ====
8466   
8467  * Technologies with a lifeTime > 0 are available
8468  set converter_availTech(nodesModel,years,converter_techs,vintage);
8469  converter_availTech(nodesModel,years,converter_techs,vintage)
8470      $(vintage.val = smax(vintage_a$(vintage_a.val <= years.val
8471          and converter_techParam(converter_techs,vintage_a,"lifeTime") > 0), vintage_a.val)) = yes;
8472   
8473  * Technologies to optimize become unavailable if they have an unitsUpperLimit of 0
8474  converter_availTech(nodesModel,years,converter_techs,vintage)
8475      $(yearsToCalc(years) and converter_capacityParam(nodesModel,years,converter_techs,"unitsUpperLimit") = 0 ) = no;
8476   
8477  * Technologies already built become unavailable if they have an unitsBuild of 0
8478  converter_availTech(nodesModel,years,converter_techs,vintage)
8479      $( ( not yearsToCalc(years)) and converter_capacityParam(nodesModel,years,converter_techs,"unitsBuild") = 0 ) = no;
8480   
8481  * Used technologies are available technologies over their technical lifeTime
8482  set converter_usedTech(nodesModel,years,converter_techs,vintage);
8483  converter_usedTech(nodesModel,years,converter_techs,vintage)
8484      $(vintage.val <= years.val
8485          and years.val < smax(years_a$converter_availTech(nodesModel,years_a,converter_techs,vintage),
8486                                  years_a.val + converter_techParam(converter_techs,vintage,"lifeTime"))
8487          ) = yes;
8488   
8489  * Technologies have to be decomissioned in the interval of first avail + lifetime to last avail + lifetime
8490  set converter_decomTech(nodesModel,years,converter_techs,vintage);
8491  converter_decomTech(nodesModel,years,converter_techs,vintage)
8492    $(sum(years_a$converter_usedTech(nodesModel,years_a,converter_techs,vintage), 1)
8493      and sum(yearsToCalc
8494        $(sameas(years, yearsToCalc)
8495          and yearsToCalc.val >= smin(years_a$converter_availTech(nodesModel,years_a,converter_techs,vintage), years_a.val) + converter_techParam(converter_techs,vintage,"lifeTime")
8496          and yearsToCalc.val <= smax(years_a$converter_availTech(nodesModel,years_a,converter_techs,vintage), years_a.val) + converter_techParam(converter_techs,vintage,"lifeTime")), 1))
8497    = yes;
8498   
8499  * Extend the decom frame to the year after the last year of usedTech
8500  converter_decomTech(nodesModel,yearsToCalc,converter_techs,vintage)
8501    $(converter_usedTech(nodesModel,yearsToCalc-1,converter_techs,vintage)
8502      and converter_decomTech(nodesModel,yearsToCalc-1,converter_techs,vintage))
8503    = yes;
8504   
8505  * Mapping for used activities and commodities
8506  set converter_usedActCom(converter_techs,vintage,activity,commodity);
8507  option converter_usedActCom < converter_coefficient;
8508   
8509  set converter_usedAct(converter_techs,vintage,activity);
8510  option converter_usedAct < converter_usedActCom;
8511   
8512  set converter_usedCom(converter_techs,vintage,commodity);
8513  option converter_usedCom < converter_usedActCom;
8514   
8515  set converter_usedTechAct(nodesModel,years,converter_techs,vintage,activity);
8516  converter_usedTechAct(nodesModel,years,converter_techs,vintage,activity)
8517      $(converter_usedTech(nodesModel,years,converter_techs,vintage)
8518          and converter_usedAct(converter_techs,vintage,activity))
8519      = yes;
8520   
8521  set converter_useRampPos(nodesModel,years,converter_techs,vintage);
8522  converter_useRampPos(nodesModelToCalc,yearsToCalc,converter_techs,vintage)
8523    $(sum(indicator$accounting_converterStartup(indicator,nodesModelToCalc,converter_techs,vintage,"perRamp"), 1)
8524      or sum(indicator$accounting_converterStartup(indicator,nodesModelToCalc,converter_techs,vintage,"perRampPos"), 1))
8525    = 1;
8526   
8527  set converter_useRampNeg(nodesModel,years,converter_techs,vintage);
8528  converter_useRampNeg(nodesModelToCalc,yearsToCalc,converter_techs,vintage)
8529    $(sum(indicator$accounting_converterStartup(indicator,nodesModelToCalc,converter_techs,vintage,"perRamp"), 1)
8530      or sum(indicator$accounting_converterStartup(indicator,nodesModelToCalc,converter_techs,vintage,"perRampNeg"), 1))
8531    = 1;
8532   
8533   
8534  * ==== aggregation of profiles ====
8535   
8536  * derive upper and lower profiles then aggregate
8537  set converter_activity_hasProfileIn(nodesData,years,converter_techs,pc_converter_activityProfile);
8538  option converter_activity_hasProfileIn < converter_activityProfileIn;
8539   
8540  set converter_activity_hasProfile(nodesModel,years,converter_techs,pc_converter_activityProfile);
8541  converter_activity_hasProfile(nodesModelToCalc,yearsToCalc,converter_techs,pc_converter_activityProfile)
8542      = sum(nodesData$aggregateNodesModel(nodesData,nodesModelToCalc),
8543              converter_activity_hasProfileIn(nodesData,yearsToCalc,converter_techs,pc_converter_activityProfile));
8544   
8545  set converter_coefficient_hasProfileIn(nodesData,years,converter_techs,vintage,activity,commodity);
8546  option converter_coefficient_hasProfileIn < converter_coefficientProfileIn;
8547   
8548  set converter_coefficient_hasProfile(nodesModel,years,converter_techs,vintage,activity,commodity);
8549  converter_coefficient_hasProfile(nodesModelToCalc,yearsToCalc,converter_techs,vintage,activity,commodity)
8550      = sum(nodesData$aggregateNodesModel(nodesData,nodesModelToCalc),
8551              converter_coefficient_hasProfileIn(nodesData,yearsToCalc,converter_techs,vintage,activity,commodity));
8552   
8553  * aagregate time dimension
8554  parameter converter_activityProfileIn_aggTime(timeModel,nodesData,yearsToCalc,converter_techs,pc_converter_activityProfile);
8555  converter_activityProfileIn_aggTime(timeModelToCalc,nodesData,yearsToCalc,converter_techs,pc_converter_activityProfile)
8556    $converter_activity_hasProfileIn(nodesData,yearsToCalc,converter_techs,pc_converter_activityProfile)
8557    = sum(timeData$timeMapping(timeData,timeModelToCalc),
8558            converter_activityProfileIn(timeData,nodesData,yearsToCalc,converter_techs,pc_converter_activityProfile)
8559            / timeLength(timeModelToCalc));
8560  option clear = converter_activityProfileIn;
8561   
8562  * weighted average for a real sum of units upper limits, plain average if one region has an upper limit of inf
8563  parameter converter_activityProfile(timeModel,nodesModel,years,converter_techs,vintage,pc_converter_activityProfile);
8564  converter_activityProfile(timeModelToCalc,converter_usedTech(nodesModelToCalc,yearsToCalc,converter_techs,vintage),"upper")
8565      = converter_techParam(converter_techs,vintage,"activityUpperLimit");
8566  converter_activityProfile(timeModelToCalc,converter_usedTech(nodesModelToCalc,yearsToCalc,converter_techs,vintage),"lower")
8567      = converter_techParam(converter_techs,vintage,"activityLowerLimit");
8568   
8569   
8570  set converter_finiteUnitLimit(nodesModelToCalc,yearsToCalc,converter_techs);
8571  converter_finiteUnitLimit(nodesModelToCalc,yearsToCalc,converter_techs)
8572      = sum(nodesData$aggregateNodesModel(nodesData,nodesModelToCalc), converter_capacityParamIn(nodesData,yearsToCalc,converter_techs,"unitsUpperLimit")) > 0
8573          and sum(nodesData$aggregateNodesModel(nodesData,nodesModelToCalc), converter_capacityParamIn(nodesData,yearsToCalc,converter_techs,"unitsUpperLimit")) < inf;
8574   
8575  set converter_infiniteUnitLimit(nodesModelToCalc,yearsToCalc,converter_techs);
8576  converter_infiniteUnitLimit(nodesModelToCalc,yearsToCalc,converter_techs)
8577      = sum(nodesData$aggregateNodesModel(nodesData,nodesModelToCalc), converter_capacityParamIn(nodesData,yearsToCalc,converter_techs,"unitsUpperLimit")) = inf;
8578   
8579  converter_activityProfile(timeModelToCalc,converter_usedTech(nodesModelToCalc,yearsToCalc,converter_techs,vintage),pc_converter_activityProfile)
8580      $(converter_activity_hasProfile(nodesModelToCalc,yearsToCalc,converter_techs,pc_converter_activityProfile)
8581          and converter_finiteUnitLimit(nodesModelToCalc,yearsToCalc,converter_techs))
8582      = sum(nodesData$(aggregateNodesModel(nodesData,nodesModelToCalc)
8583                  and converter_capacityParamIn(nodesData,yearsToCalc,converter_techs,"unitsUpperLimit") < inf ),
8584                converter_activityProfileIn_aggTime(timeModelToCalc,nodesData,yearsToCalc,converter_techs,pc_converter_activityProfile)
8585                * converter_capacityParamIn(nodesData,yearsToCalc,converter_techs,"unitsUpperLimit"))
8586      / sum(nodesData$aggregateNodesModel(nodesData,nodesModelToCalc),
8587              converter_capacityParamIn(nodesData,yearsToCalc,converter_techs,"unitsUpperLimit"));
8588   
8589  converter_activityProfile(timeModelToCalc,converter_usedTech(nodesModelToCalc,yearsToCalc,converter_techs,vintage),pc_converter_activityProfile)
8590      $(converter_activity_hasProfile(nodesModelToCalc,yearsToCalc,converter_techs,pc_converter_activityProfile)
8591          and converter_infiniteUnitLimit(nodesModelToCalc,yearsToCalc,converter_techs))
8592      = sum(nodesData$(aggregateNodesModel(nodesData,nodesModelToCalc)
8593                  and converter_capacityParamIn(nodesData,yearsToCalc,converter_techs,"unitsUpperLimit") = inf),
8594                converter_activityProfileIn_aggTime(timeModelToCalc,nodesData,yearsToCalc,converter_techs,pc_converter_activityProfile)
8595                * converter_capacityParamIn(nodesData,yearsToCalc,converter_techs,"unitsUpperLimit"))
8596      / sum(nodesData$(aggregateNodesModel(nodesData,nodesModelToCalc)
8597                      and converter_capacityParamIn(nodesData,yearsToCalc,converter_techs,"unitsUpperLimit") = inf ),
8598              1);
8599  option clear = converter_activityProfileIn_aggTime;
8600   
8601  * for fixed profiles overwrite upper and lower profile
8602  converter_activityProfile(timeModelToCalc,nodesModelToCalc,yearsToCalc,converter_techs,vintage,"lower")
8603      $converter_activity_hasProfile(nodesModelToCalc,yearsToCalc,converter_techs,"fixed")
8604      = converter_activityProfile(timeModelToCalc,nodesModelToCalc,yearsToCalc,converter_techs,vintage,"fixed");
8605   
8606  converter_activityProfile(timeModelToCalc,nodesModelToCalc,yearsToCalc,converter_techs,vintage,"upper")
8607      $converter_activity_hasProfile(nodesModelToCalc,yearsToCalc,converter_techs,"fixed")
8608      = converter_activityProfile(timeModelToCalc,nodesModelToCalc,yearsToCalc,converter_techs,vintage,"fixed");
8609   
8611   
8612  * weighted average for a real sum of units upper limits, plain average if one region has an upper limit of inf
8613  parameter converter_coefficientProfile(timeModel,nodesModel,years,converter_techs,vintage,activity,commodity);
8614  converter_coefficientProfile(timeModelToCalc,converter_usedTechAct(nodesModelToCalc,yearsToCalc,converter_techs,vintage,activity),commodity)
8615      = converter_coefficient(converter_techs,vintage,activity,commodity,"coefficient");
8616   
8617  converter_coefficientProfile(timeModelToCalc,converter_usedTechAct(nodesModelToCalc,yearsToCalc,converter_techs,vintage,activity),commodity)
8618      $( converter_coefficient_hasProfile(nodesModelToCalc,yearsToCalc,converter_techs,vintage,activity,commodity)
8619          and converter_finiteUnitLimit(nodesModelToCalc,yearsToCalc,converter_techs) )
8620      = sum(nodesData$aggregateNodesModel(nodesData,nodesModelToCalc),
8621            sum(timeData$timeMapping(timeData,timeModelToCalc),
8622                    converter_coefficientProfileIn(timeData,nodesData,yearsToCalc,converter_techs,vintage,activity,commodity))
8623                / timeLength(timeModelToCalc)
8624              * converter_capacityParamIn(nodesData,yearsToCalc,converter_techs,"unitsUpperLimit") )
8625      / sum(nodesData$aggregateNodesModel(nodesData,nodesModelToCalc),
8626              converter_capacityParamIn(nodesData,yearsToCalc,converter_techs,"unitsUpperLimit"));
8627   
8628  converter_coefficientProfile(timeModelToCalc,converter_usedTechAct(nodesModelToCalc,yearsToCalc,converter_techs,vintage,activity),commodity)
8629      $( converter_coefficient_hasProfile(nodesModelToCalc,yearsToCalc,converter_techs,vintage,activity,commodity)
8630          and converter_infiniteUnitLimit(nodesModelToCalc,yearsToCalc,converter_techs))
8631      = sum(nodesData$(aggregateNodesModel(nodesData,nodesModelToCalc)
8632                      and converter_capacityParamIn(nodesData,yearsToCalc,converter_techs,"unitsUpperLimit") = inf ),
8633            sum(timeData$timeMapping(timeData,timeModelToCalc),
8634                    converter_coefficientProfileIn(timeData,nodesData,yearsToCalc,converter_techs,vintage,activity,commodity))
8635                / timeLength(timeModelToCalc))
8636      / sum(nodesData$(aggregateNodesModel(nodesData,nodesModelToCalc)
8637                      and converter_capacityParamIn(nodesData,yearsToCalc,converter_techs,"unitsUpperLimit") = inf ), 1);
8638   
8640   
8641  * ==== prepare partial load behavior parameters ====
8642   
8643  * set disabled max load requirements to 1 to avoid excessive logical expressions later on
8644  alias(commodity, com);
8645  converter_coefficient(converter_techs,vintage,activity,commodity,"maxLoad")
8646      $((converter_coefficient(converter_techs,vintage,activity,commodity,"maxLoad") = 0)
8647        and converter_usedAct(converter_techs,vintage,activity))
8648      = 1;
8649   
8650  * indicate that at least one activity of a technology makes use of partial load behavior
8651  set converter_hasMaxLoad(converter_techs,vintage);
8652  converter_hasMaxLoad(converter_techs,vintage)
8653    = smin((activity,commodity)$converter_usedAct(converter_techs,vintage,activity),
8654              converter_coefficient(converter_techs,vintage,activity,commodity,"maxLoad")) < 1;
8655   
8656  set converter_hasMinLoad(converter_techs,vintage);
8657  converter_hasMinLoad(converter_techs,vintage)
8658    = smax((activity,commodity)$converter_usedAct(converter_techs,vintage,activity),
8659              converter_coefficient(converter_techs,vintage,activity,commodity,"minLoad")) > 0;
8660   
8661  set converter_hasConstantFluxInActivity(converter_techs,vintage);
8662  converter_hasConstantFluxInActivity(converter_techs,vintage)
8663    = sum((activity,commodity)$converter_usedAct(converter_techs,vintage,activity),
8664                          abs(converter_coefficient(converter_techs,vintage,activity,commodity,"constant"))) > 0;
8665   
8666  * setting up a requirements parameter to avoid having to cycle through commodities in equations
8667  set pc_converter_activityRequirements
8668      /
8669      minLoad             "Lower profile for converter activity"
8670      maxLoad             "Upper profile for converter activity"
8671      /;
8672  parameter converter_activityRequirements(converter_techs,vintage,activity,pc_converter_activityRequirements);
8673  converter_activityRequirements(converter_techs,vintage,activity,"minLoad")
8674    = smax(commodity, converter_coefficient(converter_techs,vintage,activity,commodity,"minLoad"));
8675  converter_activityRequirements(converter_techs,vintage,activity,"maxLoad")
8676    = smin(commodity, converter_coefficient(converter_techs,vintage,activity,commodity,"maxLoad"));
8677   
8678  * ==== activate MIP units for MIP dispatch or partial load technologies ====
8679   
8680  set converter_hasMinUptime(converter_techs,vintage);
8681  converter_hasMinUptime(converter_techs,vintage)
8682    $(converter_techParam(converter_techs,vintage,"minUptime")
8683      and converter_techParam(converter_techs,vintage,"mipDispatch"))
8684    = yes;
8685   
8686  set converter_hasMinDowntime(converter_techs,vintage);
8687  converter_hasMinDowntime(converter_techs,vintage)
8688    $(converter_techParam(converter_techs,vintage,"minDowntime")
8689      and converter_techParam(converter_techs,vintage,"mipDispatch"))
8690    = yes;
8691   
8692  * require integer unit counts if online state is to be tracked
8693  converter_techParam(converter_techs,vintage,"mipUnits")
8694      $(converter_techParam(converter_techs,vintage,"mipDispatch")
8695        or converter_hasMinLoad(converter_techs, vintage)
8696        or converter_hasMaxLoad(converter_techs, vintage)
8697        or converter_hasConstantFluxInActivity(converter_techs,vintage))
8698      = 1;
8699   
8700  * ==== floor mip converter units to integer values ====
8701  converter_capacityParam(nodesModelToCalc,yearsToCalc,converter_techs,"unitsLowerLimit")
8702      $sum(vintage, converter_techParam(converter_techs,vintage,"mipUnits"))
8703      = floor(converter_capacityParam(nodesModelToCalc,yearsToCalc,converter_techs,"unitsLowerLimit"));
8704  converter_capacityParam(nodesModelToCalc,yearsToCalc,converter_techs,"unitsUpperLimit")
8705      $sum(vintage, converter_techParam(converter_techs,vintage,"mipUnits"))
8706      = ceil(converter_capacityParam(nodesModelToCalc,yearsToCalc,converter_techs,"unitsUpperLimit"));
8707   
8708  * ==== scalars and sets for minUptime and minDowntime ====
8709   
8710  scalar converter_maxUptimeReq;
8711  converter_maxUptimeReq = smax((converter_techs,vintage), converter_techParam(converter_techs,vintage,"minUptime"));
8712  set uptimeSearchRange(timeModelToCalc);
8713  uptimeSearchRange(timeModelToCalc) = ord(timeModelToCalc) <= converter_maxUptimeReq;
8714   
8715  scalar converter_maxDowntimeReq;
8716  converter_maxDowntimeReq = smax((converter_techs,vintage), converter_techParam(converter_techs,vintage,"minDowntime"));
8717  set downtimeSearchRange(timeModelToCalc);
8718  downtimeSearchRange(timeModelToCalc) = ord(timeModelToCalc) <= converter_maxDowntimeReq;
8719   
8720  * ==== definition of variables ====
8721   
8722  * Initialise variables for unitsBuild
8723  converter_unitsBuild.l(nodesModel,years,converter_techs,vintage)
8724      $converter_availTech(nodesModel,years,converter_techs,vintage)
8725      = converter_capacityParam(nodesModel,years,converter_techs,"unitsBuild");
8726  converter_unitsBuild.lo(nodesModel,yearsToCalc,converter_techs,vintage)
8727      $converter_availTech(nodesModel,yearsToCalc,converter_techs,vintage)
8728      = converter_unitsBuild.l(nodesModel,yearsToCalc,converter_techs,vintage);
8729  converter_unitsBuild.fx(nodesModel,years,converter_techs,vintage)
8730      $converter_capacityParam(nodesModel,years,converter_techs,"noExpansion")
8731      = converter_unitsBuild.l(nodesModel,years,converter_techs,vintage);
8732   
8733  * Initialise variables for unitsDecom
8734  converter_unitsDecom.l(nodesModel,years,converter_techs,vintage)
8735    $(converter_decomTech(nodesModel,years,converter_techs,vintage)
8736      and years.val < sum(yearsToCalc$(ord(yearsToCalc) = 1), yearsToCalc.val))
8737    = sum((years_a,years_aa)$(sameas(years-1, years_aa)
8738                        and years_a.val > years_aa.val - converter_techParam(converter_techs,vintage,'lifeTime')
8739                        and years_a.val <= years.val - converter_techParam(converter_techs,vintage,'lifeTime')
8740                        and converter_availTech(nodesModel,years_a,converter_techs,vintage)),
8741          converter_unitsBuild.l(nodesModel,years_a,converter_techs,vintage));
8742   
8743  converter_unitsDecom.l(nodesModel,yearsToCalc,converter_techs,vintage)
8744    $converter_decomTech(nodesModel,yearsToCalc,converter_techs,vintage)
8745    = sum(years$
8746          (years.val < sum(yearsToCalc_a$(ord(yearsToCalc_a) = 1), yearsToCalc_a.val)
8747            and converter_availTech(nodesModel,years,converter_techs,vintage)
8748            and years.val > sum(years_a$sameas(years_a, yearsToCalc-1), years_a.val) - converter_techParam(converter_techs,vintage,'lifeTime')
8749            and years.val <= yearsToCalc.val - converter_techParam(converter_techs,vintage,'lifeTime')),
8750        converter_unitsBuild.l(nodesModel,years,converter_techs,vintage))
8751      + sum(yearsToCalc_a$
8752          (yearsToCalc_a.val < sum(yearsToCalc_aa$(ord(yearsToCalc_aa) > 1), yearsToCalc_a.val)
8753            and converter_availTech(nodesModel,yearsToCalc_a,converter_techs,vintage)
8754            and yearsToCalc_a.val > sum(years_a$sameas(years_a, yearsToCalc-1), years_a.val) - converter_techParam(converter_techs,vintage,'lifeTime')
8755            and yearsToCalc_a.val <= yearsToCalc.val - converter_techParam(converter_techs,vintage,'lifeTime')),
8756        converter_unitsBuild.l(nodesModel,yearsToCalc_a,converter_techs,vintage));
8757        ;
8758   
8759  converter_unitsDecom.lo(nodesModel,yearsToCalc,converter_techs,vintage)
8760      $(converter_usedTech(nodesModel,yearsToCalc,converter_techs,vintage)
8761          and not converter_techParam(converter_techs,vintage,"freeDecom"))
8762      = converter_unitsDecom.l(nodesModel,yearsToCalc,converter_techs,vintage)
8763   
8764  * Calculate planned unit expansion
8765  parameter converter_unitsPlanned(nodesModel,years,converter_techs,vintage);
8766  converter_unitsPlanned(nodesModel,years,converter_techs,vintage) = 0;
8767  loop(years,
8768    converter_unitsPlanned(nodesModel,years,converter_techs,vintage)
8769      =
8770      converter_unitsPlanned(nodesModel,years-1,converter_techs,vintage)
8771          $converter_usedTech(nodesModel,years-1,converter_techs,vintage)
8772      + converter_unitsBuild.l(nodesModel,years,converter_techs,vintage)
8773          $converter_availTech(nodesModel,years,converter_techs,vintage)
8774      - converter_unitsDecom.l(nodesModel,years,converter_techs,vintage)
8775          $converter_usedTech(nodesModel,years,converter_techs,vintage);
8776  );
8777   
8778  * Set initial state for planned units
8779  converter_unitsTotal.l(nodesModel,years,converter_techs,vintage)
8780    = converter_unitsPlanned(nodesModel,years,converter_techs,vintage)
8781   
8782  * Calculate if planned unit expansion is bounded by upper and lower limits
8783  set converter_unitBoundsFixed(nodesModel,years,converter_techs);
8784  converter_unitBoundsFixed(nodesModel,years,converter_techs)
8785    $(sum(vintage$converter_usedTech(nodesModel,years,converter_techs,vintage),
8786          converter_unitsPlanned(nodesModel,years,converter_techs,vintage))
8787      = converter_capacityParam(nodesModel,years,converter_techs,"unitsUpperLimit")
8788    and sum(vintage$converter_usedTech(nodesModel,years,converter_techs,vintage),
8789          converter_unitsPlanned(nodesModel,years,converter_techs,vintage))
8790      = converter_capacityParam(nodesModel,years,converter_techs,"unitsLowerLimit"))
8791    = yes;
8792   
8793  * Fix unitsBuild, unitsDecom, unitsTotal if levels are predetermined by upper and lower limits
8794  converter_unitsBuild.fx(nodesModel,years,converter_techs,vintage)
8795    $(converter_availTech(nodesModel,years,converter_techs,vintage)
8796      and converter_unitBoundsFixed(nodesModel,years,converter_techs))
8797    = converter_unitsBuild.l(nodesModel,years,converter_techs,vintage);
8798  converter_unitsDecom.fx(nodesModel,years,converter_techs,vintage)
8799    $(converter_usedTech(nodesModel,years,converter_techs,vintage)
8800      and converter_unitBoundsFixed(nodesModel,years,converter_techs))
8801    = converter_unitsDecom.l(nodesModel,years,converter_techs,vintage);
8802  converter_unitsTotal.fx(nodesModel,years,converter_techs,vintage)
8803    $(converter_usedTech(nodesModel,years,converter_techs,vintage)
8804      and converter_unitBoundsFixed(nodesModel,years,converter_techs))
8805    = converter_unitsTotal.l(nodesModel,years,converter_techs,vintage);
8806   
8807  converter_unitsOnline_MIP.up(timeModelToCalc,nodesModel,years,converter_techs,vintage)
8808      $(converter_usedTech(nodesModel,years,converter_techs,vintage)
8809        and converter_techParam(converter_techs,vintage,"mipDispatch") = 1)
8810      = converter_capacityParam(nodesModel,years,converter_techs,"unitsUpperLimit");
8811   
8812  converter_unitsTotal_MIP.up(nodesModel,years,converter_techs,vintage)
8813      $(converter_usedTech(nodesModel,years,converter_techs,vintage)
8814        and converter_techParam(converter_techs,vintage,"mipUnits") = 1)
8815      = converter_capacityParam(nodesModel,years,converter_techs,"unitsUpperLimit");
8816   
8817  converter_unitsUsingActivity_MIP.up(timeModelToCalc,nodesModel,years,converter_techs,vintage,activity)
8818      $(converter_usedTech(nodesModel,years,converter_techs,vintage)
8819        and (converter_hasMinLoad(converter_techs, vintage)
8820              or converter_hasMaxLoad(converter_techs, vintage)))
8821      = converter_capacityParam(nodesModel,years,converter_techs,"unitsUpperLimit");
8822   
8823  * Add parameter for fixing capacities during myopic runs
8824  parameter converter_unitsDelta(nodesModel,years,converter_techs);
8825   
8826  * ==== declaration of equations ====
8827   
8828  equations
8829    Eq_converter_unitsBalance(nodesModel,years,converter_techs,vintage
8830      ) "Ensures the units balance over the planning period."
8831    Eq_converter_unitsFixedDecom(nodesModel,years,converter_techs,vintage
8832      ) "Restricts the fixed decommissioning of units over the planning period."
8833    Eq_converter_unitsFreeDecom(nodesModel,years,converter_techs,vintage
8834      ) "Restricts the free decommissioning of units over the planning period."
8835    Eq_converter_unitsUpperLimit(nodesModel,years,converter_techs
8836      ) "Upper bound for the total number of units."
8837    Eq_converter_unitsLowerLimit(nodesModel,years,converter_techs
8838      ) "Lower bound for the total number of units."
8839    Eq_converter_unitsFixedLimit(nodesModel,years,converter_techs
8840      ) "Fixed bound for the total number of units."
8841    Eq_converter_unitsTotalMIP(nodesModel,years,converter_techs,vintage
8842      ) "Fixes the total number of units to the corresponding integer variable."
8843    Eq_converter_unitsOnlineMIP(timeModel,nodesModel,years,converter_techs,vintage
8844      ) "Fixes the number of online units to the corresponding integer variable."
8845   
8846    Eq_converter_activityLowerLimit(timeModel,nodesModel,years,converter_techs,vintage
8847      ) "Lower limit on the activity."
8848    Eq_converter_activityUpperLimit(timeModel,nodesModel,years,converter_techs,vintage
8849      ) "Upper limit on the activity."
8850   
8851    Eq_converter_activityFixedLimit(timeModel,nodesModel,years,converter_techs,vintage
8852      ) "Fixed limit on the activity."
8853    Eq_converter_rampPos(timeModel,nodesModel,years,converter_techs,vintage
8854      ) "Positive ramping of unit activity."
8855    Eq_converter_rampNeg(timeModel,nodesModel,years,converter_techs,vintage
8856      ) "Negative ramping of unit activity."
8857    Eq_converter_rampLimit(timeModel,nodesModel,years,converter_techs,vintage
8858      ) "Restrict ramping up of unit activity."
8859   
8860    Eq_converter_unitsOnline(timeModel,nodesModel,years,converter_techs,vintage
8861      ) "Set online units to total number of operational units."
8862    Eq_converter_unitsOnlineUC(timeModel,nodesModel,years,converter_techs,vintage
8863      ) "Allow shutting down units."
8864    Eq_converter_activityStartups(timeModel,nodesModel,years,converter_techs,vintage
8865      ) "Variable counting the number of unit startups."
8866    Eq_converter_activityShutdowns(timeModel,nodesModel,years,converter_techs,vintage
8867      ) "Variable tracking the number of unit shutdowns."
8868    Eq_converter_limitStartups(nodesModel,years,converter_techs,vintage
8869      ) "Limit the number of startup cycles a unit can perform."
8870    Eq_converter_minUptime(timeModel,nodesModel,years,converter_techs,vintage
8871      ) "Require recently started units to remain online for their respective minimum uptime."
8872    Eq_converter_minDowntime(timeModel,nodesModel,years,converter_techs,vintage
8873      ) "Require recently shut down units to remain offline for their respective minimum downtime."
8874    Eq_converter_activityUpperLimitDetailedPartLoadMinReq(timeModel,nodesModel,years,converter_techs,vintage,activity
8875      ) "Limit activity coefficients of activities with a given load requirement or stricter to the number of units in such modes."
8876    Eq_converter_activityUpperLimitDetailedPartLoadMaxReq(timeModel,nodesModel,years,converter_techs,vintage,activity
8877      ) "Limit activity coefficients of activities with a given load requirement or stricter to the number of units in such modes."
8878    Eq_converter_activityLowerLimitDetailedPartLoadMinReq(timeModel,nodesModel,years,converter_techs,vintage,activity
8879      ) "Enforce sufficient activity coefficients of activities to justify all active modes."
8880    Eq_converter_noOnlineIdle(timeModel,nodesModel,years,converter_techs,vintage
8881      ) "Prevent the circumvention of requirements by keeping units online without using any modes."
8882    Eq_converter_noOnlineIdleDetailedPartLoad(timeModel,nodesModel,years,converter_techs,vintage
8883      ) "Prevent the circumvention of requirements by keeping units online without using any modes. Allow more than one mode activation per unit."
8884    Eq_converter_activityUpperLimitPartLoad(timeModel,nodesModel,years,converter_techs,vintage,activity
8885      ) "Limit usage of an activity to corresponding units."
8886    Eq_converter_activityLowerLimitPartLoad(timeModel,nodesModel,years,converter_techs,vintage,activity
8887      ) "Limit usage of an activity to corresponding units."
8888    Eq_converter_activityModeLimit(timeModel,nodesModel,years,converter_techs,vintage,activity
8889      ) "Limit the number of units in one particular mode to the number of operational units."
8890    ;
8891   
8892  * ==== equation definition ====
8893  * // ## Equations
8894  * // ### Converter Units Balance
8895  * // Ensures that the total units are consistent with the built and decommissioned units.
8896  * // {Eq_converter_unitsBalance}
8897  Eq_converter_unitsBalance(nodesModelSel,yearsSel,converter_techs,vintage)
8898      $((converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
8899            or sum(years$sameas(years,yearsSel), converter_usedTech(nodesModelSel,years-1,converter_techs,vintage)))
8900          and not converter_unitBoundsFixed(nodesModelSel,yearsSel,converter_techs))
8901      ..
8902      converter_unitsTotal(nodesModelSel,yearsSel,converter_techs,vintage)
8903      =e=
8904      sum(yearsToCalc$(ord(yearsToCalc) = 1 and sameas(yearsToCalc, yearsSel)),
8905        sum(years$sameas(years, yearsToCalc),
8906          converter_unitsTotal(nodesModelSel,years-1,converter_techs,vintage)
8907            $converter_usedTech(nodesModelSel,years-1,converter_techs,vintage)))
8908      + sum((yearsToCalc)$(ord(yearsToCalc) > 1 and sameas(yearsToCalc, yearsSel)),
8909        converter_unitsTotal(nodesModelSel,yearsToCalc-1,converter_techs,vintage)
8910          $converter_usedTech(nodesModelSel,yearsToCalc-1,converter_techs,vintage))
8911      + converter_unitsBuild(nodesModelSel,yearsSel,converter_techs,vintage)
8912          $converter_availTech(nodesModelSel,yearsSel,converter_techs,vintage)
8913      - converter_unitsDecom(nodesModelSel,yearsSel,converter_techs,vintage)
8914          $converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage);
8915   
8916  * // ### Converter Units Fixed Decommission
8917  * // Restricts the fixed decommissioning of units over the planning period.
8918  * // {Eq_converter_unitsFixedDecom}
8919  Eq_converter_unitsFixedDecom(nodesModelSel,yearsSel,converter_techs,vintage)
8920      $(converter_decomTech(nodesModelSel,yearsSel,converter_techs,vintage)
8921          and not converter_techParam(converter_techs,vintage,"freeDecom") = 1
8922          and not converter_unitBoundsFixed(nodesModelSel,yearsSel,converter_techs))
8923      ..
8924      converter_unitsDecom(nodesModelSel,yearsSel,converter_techs,vintage)
8925      =e=
8926      sum(years$
8927          (converter_availTech(nodesModelSel,years,converter_techs,vintage)
8928            and years.val > sum(yearsToCalc$sameas(yearsToCalc+1, yearsSel), yearsToCalc.val) - converter_techParam(converter_techs,vintage,'lifeTime')
8929            and years.val <= yearsSel.val - converter_techParam(converter_techs,vintage,'lifeTime')),
8930        converter_unitsBuild(nodesModelSel,years,converter_techs,vintage));
8931   
8932  * // ### Converter Units Free Decommission
8933  * // Restricts the free decommissioning of units over the planning period.
8934  * // {Eq_converter_unitsFreeDecom}
8935  Eq_converter_unitsFreeDecom(nodesModelSel,yearsSel,converter_techs,vintage)
8936      $((converter_decomTech(nodesModelSel,yearsSel,converter_techs,vintage)
8937          or converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage))
8938          and converter_techParam(converter_techs,vintage,"freeDecom") = 1)
8939      ..
8940      sum(years$
8941            ((converter_decomTech(nodesModelSel,years,converter_techs,vintage)
8942              or converter_usedTech(nodesModelSel,years,converter_techs,vintage))
8943              and years.val < sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)),
8944          converter_unitsDecom(nodesModelSel,years,converter_techs,vintage))
8945      + sum(yearsToCalc$
8946            ((converter_decomTech(nodesModelSel,yearsToCalc,converter_techs,vintage)
8947              or converter_usedTech(nodesModelSel,yearsToCalc,converter_techs,vintage))
8948              and yearsToCalc.val >= sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
8949              and yearsToCalc.val <= yearsSel.val),
8950          converter_unitsDecom(nodesModelSel,yearsToCalc,converter_techs,vintage))
8951      =g=
8952      sum(years$
8953            (converter_availTech(nodesModelSel,years,converter_techs,vintage)
8954              and years.val < sum(yearsToCalc$(ord(yearsToCalc)=1), yearsToCalc.val) - converter_techParam(converter_techs,vintage,'lifeTime')),
8955          converter_unitsBuild(nodesModelSel,years,converter_techs,vintage))
8956      + sum(yearsToCalc$
8957            (converter_availTech(nodesModelSel,yearsToCalc,converter_techs,vintage)
8958              and yearsToCalc.val >= sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
8959              and yearsToCalc.val <= yearsSel.val - converter_techParam(converter_techs,vintage,'lifeTime')),
8960          converter_unitsBuild(nodesModelSel,yearsToCalc,converter_techs,vintage));
8961   
8962  * // ### Converter Units Upper Limit
8963  * // Upper bound for the total number of units.
8964  * // {Eq_converter_unitsUpperLimit}
8965  Eq_converter_unitsUpperLimit(nodesModelSel,yearsSel,converter_techs)
8966      $(converter_capacityParam(nodesModelSel,yearsSel,converter_techs,'unitsUpperLimit') >= 0
8967          and converter_capacityParam(nodesModelSel,yearsSel,converter_techs,'unitsUpperLimit') < +inf
8968          and converter_capacityParam(nodesModelSel,yearsSel,converter_techs,'unitsUpperLimit')
8969              <> converter_capacityParam(nodesModelSel,yearsSel,converter_techs,'unitsLowerLimit'))
8970      ..
8971      sum(vintage$converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage),
8972          converter_unitsTotal(nodesModelSel,yearsSel,converter_techs,vintage))
8973      =l=
8974      converter_capacityParam(nodesModelSel,yearsSel,converter_techs,"unitsUpperLimit");
8975   
8976  * // ### Converter Units Lower Limit
8977  * // Lower bound for the total number of units.
8978  * // {Eq_converter_unitsLowerLimit}
8979  Eq_converter_unitsLowerLimit(nodesModelSel,yearsSel,converter_techs)
8980      $(converter_capacityParam(nodesModelSel,yearsSel,converter_techs,'unitsLowerLimit') > 0
8981          and converter_capacityParam(nodesModelSel,yearsSel,converter_techs,'unitsLowerLimit')
8982              <> converter_capacityParam(nodesModelSel,yearsSel,converter_techs,'unitsUpperLimit'))
8983      ..
8984      sum(vintage$converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage),
8985          converter_unitsTotal(nodesModelSel,yearsSel,converter_techs,vintage))
8986      =g=
8987      converter_capacityParam(nodesModelSel,yearsSel,converter_techs,"unitsLowerLimit");
8988   
8989  Eq_converter_unitsFixedLimit(nodesModelSel,yearsSel,converter_techs)
8990      $(converter_capacityParam(nodesModelSel,yearsSel,converter_techs,'unitsLowerLimit')
8991          = converter_capacityParam(nodesModelSel,yearsSel,converter_techs,'unitsUpperLimit'))
8992      ..
8993      sum(vintage$converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage),
8994          converter_unitsTotal(nodesModelSel,yearsSel,converter_techs,vintage))
8995      =e=
8996      converter_capacityParam(nodesModelSel,yearsSel,converter_techs,"unitsUpperLimit");
8997   
8998  * // ### Converter Units Total MIP
8999  * // Fixes the total number of units to the corresponding integer variable.
9000  * // {Eq_converter_unitsTotalMIP}
9001  Eq_converter_unitsTotalMIP(nodesModelSel,yearsSel,converter_techs,vintage)
9002      $( converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
9003          and converter_techParam(converter_techs,vintage,"mipUnits") = 1 )
9004      ..
9005      converter_unitsTotal(nodesModelSel,yearsSel,converter_techs,vintage)
9006      =e=
9007      converter_unitsTotal_MIP(nodesModelSel,yearsSel,converter_techs,vintage);
9008   
9009  * // ### Converter Units Online MIP
9010  * // Fixes the number of online units to the corresponding integer variable.
9011  * // {Eq_converter_unitsOnlineMIP}
9012  Eq_converter_unitsOnlineMIP(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
9013      $( converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
9014          and converter_techParam(converter_techs,vintage,"mipDispatch") = 1 )
9015      ..
9016      converter_unitsOnline(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
9017      =e=
9018      converter_unitsOnline_MIP(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage);
9019   
9020  * // ### Converter Activity Lower Limit
9021  * // Lower limit on the activity.
9022  * // {Eq_converter_activityLowerLimit}
9023  Eq_converter_activityLowerLimit(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
9024      $(converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
9025          and converter_activityProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,"lower") > 0
9026          and converter_activityProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,"lower")
9027               <> converter_activityProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,"upper")
9028          and not converter_hasMinLoad(converter_techs, vintage))
9029      ..
9030      sum(activity$converter_usedAct(converter_techs,vintage,activity),
9031          converter_activity(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity)
9032      )
9033      =g=
9034      converter_activityProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,"lower")
9036      * converter_unitsOnline(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage);
9038   
9039  * // ### Converter Activity Upper Limit
9040  * // Upper limit on the activity.
9041  * // {Eq_converter_activityUpperLimit}
9042  Eq_converter_activityUpperLimit(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
9043      $(converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
9044          and converter_activityProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,"upper") >= 0
9045          and converter_activityProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,"upper")
9046               <> converter_activityProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,"lower"))
9047      ..
9048      sum(activity$converter_usedAct(converter_techs,vintage,activity),
9049          converter_activity(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity)
9050      )
9051      =l=
9052      converter_activityProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,"upper")
9054      * converter_unitsOnline(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage);
9056   
9057  Eq_converter_activityFixedLimit(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
9058      $(converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
9059          and converter_activityProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,"lower")
9060               = converter_activityProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,"upper"))
9061      ..
9062      sum(activity$converter_usedAct(converter_techs,vintage,activity),
9063          converter_activity(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity)
9064      )
9065      =e=
9066      converter_activityProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,"upper")
9068      * converter_unitsOnline(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage);
9070   
9071  * // ### Converter Positive Ramping
9072  * // Positive ramping of unit activity.
9073  * // {Eq_converter_rampPos}
9074  Eq_converter_rampPos(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,converter_techs,vintage)
9075    $( converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
9076        and converter_useRampPos(nodesModelSel,yearsSel,converter_techs,vintage))
9077      ..
9078      converter_rampPos(timeModelToCalc,nodesModelSel,yearsSel,converter_techs,vintage)
9079      =g=
9080      sum(activity$converter_usedAct(converter_techs,vintage,activity),
9081              converter_activity(timeModelToCalc,nodesModelSel,yearsSel,converter_techs,vintage,activity)
9082              - converter_activity(timeModelToCalc--1,nodesModelSel,yearsSel,converter_techs,vintage,activity));
9083   
9084  * // ### Converter Negative Ramping
9085  * // Negative ramping of unit activity.
9086  * // {Eq_converter_rampNeg}
9087  Eq_converter_rampNeg(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,converter_techs,vintage)
9088    $( converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
9089        and converter_useRampNeg(nodesModelSel,yearsSel,converter_techs,vintage))
9090      ..
9091      converter_rampNeg(timeModelToCalc,nodesModelSel,yearsSel,converter_techs,vintage)
9092      =g=
9093      - sum(activity$converter_usedAct(converter_techs,vintage,activity),
9094              converter_activity(timeModelToCalc,nodesModelSel,yearsSel,converter_techs,vintage,activity)
9095              - converter_activity(timeModelToCalc--1,nodesModelSel,yearsSel,converter_techs,vintage,activity));
9096   
9097  * // ### Converter Ramping Limit
9098  * // Restrict ramping up of unit activity.
9099  * // {Eq_converter_rampLimit}
9100  Eq_converter_rampLimit(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,converter_techs,vintage)
9101    $( converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
9102          and converter_techParam(converter_techs,vintage,"activityRampLimit") > 0)
9103      ..
9104      sum(activity$converter_usedAct(converter_techs,vintage,activity),
9105              converter_activity(timeModelToCalc,nodesModelSel,yearsSel,converter_techs,vintage,activity)
9106              - converter_activity(timeModelToCalc--1,nodesModelSel,yearsSel,converter_techs,vintage,activity))
9107    =l=
9108    converter_techParam(converter_techs,vintage,"activityRampLimit")
9110      * converter_unitsOnline(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage);
9112   
9113   
9115   
9116  * // ### Converter MIP Units Online
9117  * // Restrict ramping up of unit activity.
9118  * // {Eq_converter_unitsOnline}
9119  Eq_converter_unitsOnline(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
9120      $( converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
9121          and converter_techParam(converter_techs,vintage,"mipDispatch") = 0 )
9122    ..
9123    converter_unitsOnline(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
9124    =e=
9125    converter_unitsTotal(nodesModelSel,yearsSel,converter_techs,vintage)
9126      ;
9127   
9128  * // ### Converter MIP Units Shutting Down
9129  * // Allow shutting down units.
9130  * // {Eq_converter_unitsOnlineUC}
9131  Eq_converter_unitsOnlineUC(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
9132      $( converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
9133          and converter_techParam(converter_techs,vintage,"mipDispatch") = 1 )
9134    ..
9135    converter_unitsOnline(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
9136    =l=
9137    converter_unitsTotal(nodesModelSel,yearsSel,converter_techs,vintage)
9138      ;
9140   
9141  * // ### Converter Activity Startups
9142  * // Variable counting the number of unit startups.
9143  * // {Eq_converter_activityStartups}
9144  Eq_converter_activityStartups(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,converter_techs,vintage)
9145    $( converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
9146          and converter_techParam(converter_techs,vintage,"mipDispatch") = 1 )
9147      ..
9148      converter_unitStartups(timeModelToCalc,nodesModelSel,yearsSel,converter_techs,vintage)
9149      =g=
9150          converter_unitsOnline(timeModelToCalc,nodesModelSel,yearsSel,converter_techs,vintage)
9151      - converter_unitsOnline(timeModelToCalc--1,nodesModelSel,yearsSel,converter_techs,vintage);
9152   
9153  * // ### Converter Activity Shutdowns
9154  * // Variable tracking the number of unit shutdowns.
9155  * // {Eq_converter_activityShutdowns}
9156  Eq_converter_activityShutdowns(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,converter_techs,vintage)
9157    $( converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
9158          and converter_techParam(converter_techs,vintage,"mipDispatch") = 1
9159          and converter_techParam(converter_techs,vintage,"minDowntime") > 0)
9160      ..
9161      converter_unitShutdowns(timeModelToCalc,nodesModelSel,yearsSel,converter_techs,vintage)
9162      =g=
9163          converter_unitsOnline(timeModelToCalc--1,nodesModelSel,yearsSel,converter_techs,vintage)
9164      - converter_unitsOnline(timeModelToCalc,nodesModelSel,yearsSel,converter_techs,vintage);
9165   
9166  * // ### Converter Activity Startup Limit
9167  * // Limit the number of startup cycles a unit can perform.
9168  * // {Eq_converter_limitStartups}
9169  Eq_converter_limitStartups(nodesModelSel,yearsSel,converter_techs,vintage)
9170    $( converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
9171          and converter_techParam(converter_techs,vintage,"mipDispatch") = 1
9172      and converter_techParam(converter_techs,vintage,"startupLimit") > 0)
9173      ..
9174      sum(timeModelToCalc, converter_unitStartups(timeModelToCalc,nodesModelSel,yearsSel,converter_techs,vintage))
9175    =l=
9176    converter_techParam(converter_techs,vintage,"startupLimit")
9177    * converter_unitsTotal(nodesModelSel,yearsSel,converter_techs,vintage);
9178   
9179  alias(timeModelToCalc,ttc);
9180   
9181  * // ### Converter Units Minimum Uptime
9182  * // Require recently started units to remain online for their respective minimum uptime.
9183  * // {Eq_converter_minUptime}
9184  Eq_converter_minUptime(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,converter_techs,vintage)
9185    $( converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
9186          and converter_techParam(converter_techs,vintage,"mipDispatch") = 1
9187      and converter_techParam(converter_techs,vintage,"minUptime") > 0)
9188      ..
9189      sum(ttc$[uptimeSearchRange(ttc) and ord(ttc)<=converter_techParam(converter_techs,vintage,"minUptime")],
9190          converter_unitStartups(ttc+[ord(timeModelToCalc)-converter_techParam(converter_techs,vintage,"minUptime")],
9191              nodesModelSel,yearsSel,converter_techs,vintage))
9192          =l=
9193          converter_unitsOnline(timeModelToCalc,nodesModelSel,yearsSel,converter_techs,vintage);
9194   
9195  * // ### Converter Units Minimum Downtime
9196  * // Require recently shut down units to remain offline for their respective minimum downtime.
9197  * // {Eq_converter_minDowntime}
9198  Eq_converter_minDowntime(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,converter_techs,vintage)
9199    $( converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
9200          and converter_techParam(converter_techs,vintage,"mipDispatch") = 1
9201      and converter_techParam(converter_techs,vintage,"minDowntime") > 0)
9202      ..
9203      sum(ttc$[downtimeSearchRange(ttc) and ord(ttc)<=converter_techParam(converter_techs,vintage,"minDowntime")],
9204          converter_unitShutdowns(ttc+[ord(timeModelToCalc)-converter_techParam(converter_techs,vintage,"minDowntime")],
9205              nodesModelSel,yearsSel,converter_techs,vintage))
9206          =l=
9207          converter_unitsTotal(nodesModelSel,yearsSel,converter_techs,vintage)
9208      - converter_unitsOnline(timeModelToCalc,nodesModelSel,yearsSel,converter_techs,vintage);
9209   
9210  * This equation is meant to cause the units to activate particular mode counters to gain access to the corresponding activities.
9211  * Activities are allowed to be used on units with stricter activity requirements but not the other way around.
9212  alias(activity, act);
9213   
9214  * // ### Converter MIP Units Activity Upper Limit Minimum Required Load
9215  * // Limit activity coefficients of activities with a given load requirement or stricter to the number of units in such modes.
9216  * // {Eq_converter_activityUpperLimitDetailedPartLoadMinReq}
9217  Eq_converter_activityUpperLimitDetailedPartLoadMinReq(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity)
9218    $( converter_usedTechAct(nodesModelSel,yearsSel,converter_techs,vintage,activity)
9219          and converter_hasMinLoad(converter_techs, vintage)
9220          and converter_techParam(converter_techs,vintage,"mipDetailedPartialLoad"))
9221      ..
9222      sum(act$(converter_activityRequirements(converter_techs,vintage,act,"minLoad")
9223                  >= converter_activityRequirements(converter_techs,vintage,activity,"minLoad")
9224               and converter_usedAct(converter_techs,vintage,act)),
9225      converter_activity(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,act))
9226    =l=
9227    converter_activityProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,"upper")
9228      * sum(act$(converter_activityRequirements(converter_techs,vintage,act,"minLoad")
9229                  >= converter_activityRequirements(converter_techs,vintage,activity,"minLoad")
9230                 and converter_usedAct(converter_techs,vintage,act)),
9231      converter_unitsUsingActivity_MIP(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,act));
9232   
9233  * // ### Converter MIP Units Activity Upper Limit Maximum Required Load
9234  * // Limit activity coefficients of activities with a given load requirement or stricter to the number of units in such modes.
9235  * // {Eq_converter_activityUpperLimitDetailedPartLoadMaxReq}
9236  Eq_converter_activityUpperLimitDetailedPartLoadMaxReq(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity)
9237    $( converter_usedTechAct(nodesModelSel,yearsSel,converter_techs,vintage,activity)
9238          and converter_hasMaxLoad(converter_techs,vintage)
9239          and converter_techParam(converter_techs,vintage,"mipDetailedPartialLoad"))
9240      ..
9241      sum(act$(converter_activityRequirements(converter_techs,vintage,act,"maxLoad")
9242                  <= converter_activityRequirements(converter_techs,vintage,activity,"maxLoad")
9243               and converter_usedAct(converter_techs,vintage,act)),
9244      converter_activity(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,act))
9245    =l=
9246      sum(act$(converter_activityRequirements(converter_techs,vintage,act,"maxLoad")
9247                  <= converter_activityRequirements(converter_techs,vintage,activity,"maxLoad")
9248               and converter_usedAct(converter_techs,vintage,act)),
9249      min(converter_activityRequirements(converter_techs,vintage,act,"maxLoad"),
9250            converter_activityProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,"upper"))
9251            * converter_unitsUsingActivity_MIP(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,act));
9252   
9253  * This equation is meant to enforce the lower limit requirements of activities in use.
9254  * Loads produced by activities with less strict requirements can contribute to the minimum load requirement of strict activities but not the other way around,
9255  * because these activities can only run on units in the respectively strict activation state.
9256   
9257  * // ### Converter MIP Units Activity Lower Limit Minimum Required Load
9258  * // Enforce sufficient activity coefficients of activities to justify all active modes.
9259  * // {Eq_converter_activityLowerLimitDetailedPartLoadMinReq}
9260  Eq_converter_activityLowerLimitDetailedPartLoadMinReq(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity)
9261    $( converter_usedTechAct(nodesModelSel,yearsSel,converter_techs,vintage,activity)
9262          and converter_hasMinLoad(converter_techs, vintage)
9263          and converter_techParam(converter_techs,vintage,"mipDetailedPartialLoad"))
9264      ..
9265      sum(act$(converter_activityRequirements(converter_techs,vintage,act,"minLoad")
9266                  <= converter_activityRequirements(converter_techs,vintage,activity,"minLoad")
9267               and converter_usedAct(converter_techs,vintage,act)),
9268      converter_activity(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,act))
9269    =g=
9270      sum(act$(converter_activityRequirements(converter_techs,vintage,act,"minLoad")
9271                  <= converter_activityRequirements(converter_techs,vintage,activity,"minLoad")
9272               and converter_usedAct(converter_techs,vintage,act)),
9273      max(converter_activityRequirements(converter_techs,vintage,act,"minLoad"),
9274            converter_activityProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,"lower"))
9275            * converter_unitsUsingActivity_MIP(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,act));
9276   
9277   
9278  * Simple one-activity-per-unit partial load equations
9279  * // ### Converter MIP Units Activity Upper Limit Partial Load Balance
9280  * // Enforce MIP units partial load upper limit.
9281  * // {Eq_converter_activityUpperLimitPartLoad}
9282  Eq_converter_activityUpperLimitPartLoad(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity)
9283    $( converter_usedTechAct(nodesModelSel,yearsSel,converter_techs,vintage,activity)
9284          and (converter_hasMinLoad(converter_techs, vintage)
9285                or converter_hasMaxLoad(converter_techs, vintage)
9286                or converter_hasConstantFluxInActivity(converter_techs, vintage))
9287          and not converter_techParam(converter_techs,vintage,"mipDetailedPartialLoad"))
9288      ..
9289      converter_activity(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity)
9290    =l=
9291    min(converter_activityRequirements(converter_techs,vintage,activity,"maxLoad"),
9292          converter_activityProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,"upper"))
9293          * converter_unitsUsingActivity_MIP(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity);
9294   
9295  * // ### Converter MIP Units Activity Lower Limit Partial Load Balance
9296  * // Enforce MIP units partial load lower limit.
9297  * // {Eq_converter_activityLowerLimitPartLoad}
9298  Eq_converter_activityLowerLimitPartLoad(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity)
9299    $( converter_usedTechAct(nodesModelSel,yearsSel,converter_techs,vintage,activity)
9300          and (converter_hasMinLoad(converter_techs, vintage)
9301                or converter_hasMaxLoad(converter_techs, vintage))
9302          and not converter_techParam(converter_techs,vintage,"mipDetailedPartialLoad"))
9303      ..
9304      converter_activity(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity)
9305    =g=
9306    max(converter_activityRequirements(converter_techs,vintage,activity,"minLoad"),
9307          converter_activityProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,"lower"))
9308          * converter_unitsUsingActivity_MIP(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity);
9309   
9310  * // ### Converter MIP Units Idle Online Units
9311  * // Counts idle online units at every time step
9312  * // {Eq_converter_noOnlineIdle}
9313  Eq_converter_noOnlineIdle(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
9314    $( converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
9315          and (converter_hasMinLoad(converter_techs, vintage)
9316              or converter_hasMaxLoad(converter_techs, vintage)
9317              or converter_hasConstantFluxInActivity(converter_techs,vintage))
9318          and not converter_techParam(converter_techs,vintage,"mipDetailedPartialLoad"))
9319      ..
9320      converter_unitsOnline(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
9321      =e=
9322      sum(activity$converter_usedAct(converter_techs,vintage,activity),
9323            converter_unitsUsingActivity_MIP(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity));
9324   
9325  * // ### Converter MIP Units Idle Online Units Partial load
9326  * // Counts idle online units at every time step
9327  * // {Eq_converter_noOnlineIdleDetailedPartLoad}
9328  Eq_converter_noOnlineIdleDetailedPartLoad(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
9329    $( converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
9330          and (converter_hasMinLoad(converter_techs, vintage)
9331                  or converter_hasMaxLoad(converter_techs, vintage))
9332          and converter_techParam(converter_techs,vintage,"mipDetailedPartialLoad"))
9333      ..
9334      converter_unitsOnline(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
9335      =l=
9336      sum(activity$converter_usedAct(converter_techs,vintage,activity),
9337            converter_unitsUsingActivity_MIP(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity));
9338   
9339  * // ### Converter MIP activity model limit
9340  * // Converter activity model limit
9341  * // {Eq_converter_activityModeLimit}
9342  Eq_converter_activityModeLimit(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity)
9343    $( converter_usedTechAct(nodesModelSel,yearsSel,converter_techs,vintage,activity)
9344          and (converter_hasMinLoad(converter_techs, vintage)
9345                or converter_hasMaxLoad(converter_techs, vintage))
9346          and converter_techParam(converter_techs,vintage,"mipDetailedPartialLoad"))
9347      ..
9348      converter_unitsOnline(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
9349      =g=
9350      converter_unitsUsingActivity_MIP(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity);
9351   
9352  * ==== model definition ====
9353   
9354  Model M_converter
9355  /
9356    Eq_converter_unitsBalance
9357    Eq_converter_unitsFixedDecom
9358    Eq_converter_unitsFreeDecom
9359    Eq_converter_unitsUpperLimit
9360    Eq_converter_unitsLowerLimit
9361    Eq_converter_unitsFixedLimit
9362    Eq_converter_unitsTotalMIP
9363    Eq_converter_unitsOnlineMIP
9364    Eq_converter_activityUpperLimit
9365    Eq_converter_activityLowerLimit
9366    Eq_converter_activityFixedLimit
9367    Eq_converter_rampPos
9368    Eq_converter_rampNeg
9369    Eq_converter_rampLimit
9371    Eq_converter_unitsOnline
9372    Eq_converter_unitsOnlineUC
9374    Eq_converter_activityStartups
9375    Eq_converter_activityShutdowns
9376    Eq_converter_limitStartups
9377    Eq_converter_minUptime
9378    Eq_converter_minDowntime
9379    Eq_converter_activityUpperLimitDetailedPartLoadMinReq
9380    Eq_converter_activityUpperLimitDetailedPartLoadMaxReq
9381    Eq_converter_activityLowerLimitDetailedPartLoadMinReq
9382    Eq_converter_activityUpperLimitPartLoad
9383    Eq_converter_activityLowerLimitPartLoad
9384    Eq_converter_noOnlineIdle
9385    Eq_converter_noOnlineIdleDetailedPartLoad
9386    Eq_converter_activityModeLimit
9387  /;
INCLUDE    C:\Local\REMix\framework\remix\framework\model\source\core\storage.gms
9389  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
9390  * SPDX-License-Identifier: BSD-3-Clause
9391   
9392  * // # core_storage
9393  * // The equations in this file describe the storages in the model.
9394   
9395  * // ## Variables
9396  * // {special_table_storage_variables}
9876   
9877   
9878  * === SoC mappings ===
9879  set storage_usedTechSoCState(storage_techs,vintage,soc_statesIn);
9880  storage_usedTechSoCState(storage_techs,vintage,soc_states(soc_statesIn))
9881      $(storage_SoCParam(storage_techs,vintage,soc_states,"eRate") > 0
9882        and storage_SoCParam(storage_techs,vintage,soc_states,"cRate") > 0)
9883      = yes;
9884   
9885  set storage_validSoCRange(storage_techs,vintage);
9886  storage_validSoCRange(storage_techs,vintage)
9887      = smax(soc_states$storage_usedTechSoCState(storage_techs,vintage,soc_states), storage_SoCParam(storage_techs,vintage,soc_states,"SoC")) = 1
9888        and smin(soc_states$storage_usedTechSoCState(storage_techs,vintage,soc_states), storage_SoCParam(storage_techs,vintage,soc_states,"SoC")) = 0;
9889   
9890  * === Translate SoC parameters to ordered SoC-set ===
9891  * set ordered_socs / soc1*soc20 /;
9892  * alias(soc_states, soc_states_c);
9893  * parameter storage_SoCParam_ordered(storage_techs,vintage,ordered_socs,pc_storage_SoCParam);
9894  * storage_SoCParam_ordered(storage_techs,vintage,ordered_socs,pc_storage_SoCParam)
9895  *     $storage_validSoCRange(storage_techs,vintage)
9896  *     = sum(soc_states$(ord(ordered_socs) = sum(soc_states_c$(storage_SoCParam(storage_techs,vintage,soc_states_c,"SoC") <= storage_SoCParam(storage_techs,vintage,soc_states,"SoC")
9897  *                                                            and storage_usedTechSoCState(storage_techs,vintage,soc_states_c)), 1)
9898  *                       and storage_usedTechSoCState(storage_techs,vintage,soc_states)),
9899  *           storage_SoCParam(storage_techs,vintage,soc_states,pc_storage_SoCParam));
9900  *
9901  * set storage_usedTechSoCStateOrdered(storage_techs,vintage,ordered_socs);
9902  * storage_usedTechSoCStateOrdered(storage_techs,vintage,ordered_socs)
9903  *     $(storage_SoCParam_ordered(storage_techs,vintage,ordered_socs,"eRate") > 0
9904  *       and storage_SoCParam_ordered(storage_techs,vintage,ordered_socs,"cRate") > 0)
9905  *     = yes;
9906   
9907  parameter storage_bigM(storage_techs,vintage);
9908  storage_bigM(storage_techs,vintage) = smax((nodesModel,years), storage_reservoirParam(nodesModel,years,storage_techs,"unitsUpperLimit"));
9909  storage_bigM(storage_techs,vintage)$(storage_bigM(storage_techs,vintage) = INF) = 10000;
9910  storage_bigM(storage_techs,vintage)$(storage_bigM(storage_techs,vintage) = 0) = 10000;
9911   
9912  * === calculate the number of years represented by single year to calc ===
9913  alias(yearsToCalc, yearsToCalc_a)
9914  parameter representedYears(years);
9915  representedYears(years) = 0.5 *(smin(yearsToCalc$(yearsToCalc.val > years.val or yearsToCalc.val = smax(yearsToCalc_a, yearsToCalc_a.val)), yearsToCalc.val)
9916                                  - smax(yearsToCalc$(yearsToCalc.val < years.val or yearsToCalc.val = smin(yearsToCalc_a, yearsToCalc_a.val)), yearsToCalc.val));
9917   
9918  * ==== calculation of mappings ====
9919   
9920  * Technologies with a lifeTime > 0 are available
9921  set storage_availTech(nodesModel,years,storage_techs,vintage);
9922  storage_availTech(nodesModel,years,storage_techs,vintage)
9923      $(vintage.val = smax(vintage_a$(vintage_a.val <= years.val
9924          and storage_techParam(storage_techs,vintage_a,"lifeTime") > 0), vintage_a.val)) = yes;
9925   
9926  * Technologies to optimize become unavailable if they have an unitsUpperLimit of 0
9927  storage_availTech(nodesModel,years,storage_techs,vintage)
9928      $(yearsToCalc(years) and storage_reservoirParam(nodesModel,years,storage_techs,"unitsUpperLimit") = 0 ) = no;
9929   
9930  * Technologies already built become unavailable if they have an unitsBuild of 0
9931  storage_availTech(nodesModel,years,storage_techs,vintage)
9932      $( ( not yearsToCalc(years)) and storage_reservoirParam(nodesModel,years,storage_techs,"unitsBuild") = 0 ) = no;
9933   
9934  * Used technologies are available technologies over their technical lifeTime
9935  set storage_usedTech(nodesModel,years,storage_techs,vintage);
9936  storage_usedTech(nodesModel,years,storage_techs,vintage)
9937      $(vintage.val <= years.val
9938          and years.val < smax(years_a$storage_availTech(nodesModel,years_a,storage_techs,vintage),
9939                                              years_a.val + storage_techParam(storage_techs,vintage,"lifeTime"))
9940          ) = yes;
9941   
9942  * Technologies have to be decomissioned in the interval of first avail + lifetime to last avail + lifetime
9943  set storage_decomTech(nodesModel,years,storage_techs,vintage);
9944  storage_decomTech(nodesModel,years,storage_techs,vintage)
9945    $(sum(years_a$storage_usedTech(nodesModel,years_a,storage_techs,vintage), 1)
9946      and sum(yearsToCalc
9947        $(sameas(years, yearsToCalc)
9948          and yearsToCalc.val >= smin(years_a$storage_availTech(nodesModel,years_a,storage_techs,vintage), years_a.val) + storage_techParam(storage_techs,vintage,"lifeTime")
9949          and yearsToCalc.val <= smax(years_a$storage_availTech(nodesModel,years_a,storage_techs,vintage), years_a.val) + storage_techParam(storage_techs,vintage,"lifeTime")), 1))
9950    = yes;
9951   
9952  * Extend the decom frame to the year after the last year of usedTech
9953  storage_decomTech(nodesModel,yearsToCalc,storage_techs,vintage)
9954    $(storage_usedTech(nodesModel,yearsToCalc-1,storage_techs,vintage)
9955      and storage_decomTech(nodesModel,yearsToCalc-1,storage_techs,vintage))
9956    = yes;
9957   
9958  * Mapping for used commodities
9959  set storage_usedCom(storage_techs,vintage,commodity);
9960  option storage_usedCom < storage_sizeParam;
9961   
9962  set storage_usedTechCom(nodesModel,years,storage_techs,vintage,commodity);
9963  storage_usedTechCom(nodesModel,years,storage_techs,vintage,commodity)
9964      $(storage_usedTech(nodesModel,years,storage_techs,vintage)
9965          and storage_usedCom(storage_techs,vintage,commodity))
9966      = yes;
9967   
9968   
9969  * // ## Load units from gdx file
9971   
9972  * ==== aggregation of profiles ====
9973  * derive upper and lower profiles then aggregate
9974  set storage_level_hasProfileIn(nodesData,years,storage_techs,pc_storage_levelProfile);
9975  option storage_level_hasProfileIn < storage_levelProfileIn;
9976   
9977  set storage_level_hasProfile(nodesModel,years,storage_techs,pc_storage_levelProfile);
9978  storage_level_hasProfile(nodesModelToCalc,yearsToCalc,storage_techs,pc_storage_levelProfile)
9979      = sum(nodesData$aggregateNodesModel(nodesData,nodesModelToCalc),
9980              storage_level_hasProfileIn(nodesData,yearsToCalc,storage_techs,pc_storage_levelProfile));
9981   
9982  * weighted average for a real sum of units upper limits, plain average if one region has an upper limit of inf
9983  parameter storage_levelProfile(timeModel,nodesModel,years,storage_techs,vintage,pc_storage_levelProfile);
9984  storage_levelProfile(timeModelToCalc,storage_usedTech(nodesModelToCalc,yearsToCalc,storage_techs,vintage),"upper")
9985      = storage_techParam(storage_techs,vintage,"levelUpperLimit");
9986  storage_levelProfile(timeModelToCalc,storage_usedTech(nodesModelToCalc,yearsToCalc,storage_techs,vintage),"lower")
9987      = storage_techParam(storage_techs,vintage,"levelLowerLimit");
9988   
9989  set storage_finiteUnitLimit(nodesModelToCalc,yearsToCalc,storage_techs);
9990  storage_finiteUnitLimit(nodesModelToCalc,yearsToCalc,storage_techs) = sum(nodesData$aggregateNodesModel(nodesData,nodesModelToCalc), storage_reservoirParamIn(nodesData,yearsToCalc,storage_techs,"unitsUpperLimit")) > 0
9991                                                   and sum(nodesData$aggregateNodesModel(nodesData,nodesModelToCalc), storage_reservoirParamIn(nodesData,yearsToCalc,storage_techs,"unitsUpperLimit")) < inf;
9992   
9993  storage_levelProfile(timeModelToCalc,storage_usedTech(nodesModelToCalc,yearsToCalc,storage_techs,vintage),pc_storage_levelProfile)
9994      $( storage_level_hasProfile(nodesModelToCalc,yearsToCalc,storage_techs,pc_storage_levelProfile)
9995          and storage_finiteUnitLimit(nodesModelToCalc,yearsToCalc,storage_techs))
9996      = sum(nodesData$aggregateNodesModel(nodesData,nodesModelToCalc),
9997              sum(timeData$timeMapping(timeData,timeModelToCalc),
9998                    storage_levelProfileIn(timeData,nodesData,yearsToCalc,storage_techs,pc_storage_levelProfile))
9999                / timeLength(timeModelToCalc)
10000              * storage_reservoirParamIn(nodesData,yearsToCalc,storage_techs,"unitsUpperLimit"))
10001      / sum(nodesData$aggregateNodesModel(nodesData,nodesModelToCalc),
10002              storage_reservoirParamIn(nodesData,yearsToCalc,storage_techs,"unitsUpperLimit"));
10003   
10004  storage_levelProfile(timeModelToCalc,storage_usedTech(nodesModelToCalc,yearsToCalc,storage_techs,vintage),pc_storage_levelProfile)
10005      $( storage_level_hasProfile(nodesModelToCalc,yearsToCalc,storage_techs,pc_storage_levelProfile)
10006          and sum(nodesData$aggregateNodesModel(nodesData,nodesModelToCalc),
10007                      storage_reservoirParamIn(nodesData,yearsToCalc,storage_techs,"unitsUpperLimit")) = inf )
10008      = sum(nodesData$(aggregateNodesModel(nodesData,nodesModelToCalc)
10009                      and storage_reservoirParamIn(nodesData,yearsToCalc,storage_techs,"unitsUpperLimit") = inf ),
10010              sum(timeData$timeMapping(timeData,timeModelToCalc),
10011                    storage_levelProfileIn(timeData,nodesData,yearsToCalc,storage_techs,pc_storage_levelProfile))
10012                / timeLength(timeModelToCalc))
10013      / sum(nodesData$(aggregateNodesModel(nodesData,nodesModelToCalc)
10014                      and storage_reservoirParamIn(nodesData,yearsToCalc,storage_techs,"unitsUpperLimit") = inf ), 1);
10015   
10016  * for fixed profiles overwrite upper and lower profile
10017  storage_levelProfile(timeModelToCalc,nodesModelToCalc,yearsToCalc,storage_techs,vintage,"lower")
10018      $storage_level_hasProfile(nodesModelToCalc,yearsToCalc,storage_techs,"fixed")
10019      = storage_levelProfile(timeModelToCalc,nodesModelToCalc,yearsToCalc,storage_techs,vintage,"fixed");
10020   
10021  storage_levelProfile(timeModelToCalc,nodesModelToCalc,yearsToCalc,storage_techs,vintage,"upper")
10022      $storage_level_hasProfile(nodesModelToCalc,yearsToCalc,storage_techs,"fixed")
10023      = storage_levelProfile(timeModelToCalc,nodesModelToCalc,yearsToCalc,storage_techs,vintage,"fixed");
10024   
10025   
10026  * ==== parameter modifications ====
10027  storage_reservoirParam(nodesModel,years,storage_techs,"unitsLowerLimit")
10028          $sum(vintage, storage_techParam(storage_techs,vintage,"mipUnits"))
10029      = floor(storage_reservoirParam(nodesModel,years,storage_techs,"unitsLowerLimit"));
10030  storage_reservoirParam(nodesModel,years,storage_techs,"unitsUpperLimit")
10031          $sum(vintage, storage_techParam(storage_techs,vintage,"mipUnits"))
10032      = ceil(storage_reservoirParam(nodesModel,years,storage_techs,"unitsUpperLimit"));
10033   
10034   
10035  * ==== definition of variables ====
10036   
10037  * Initialise variables for unitsBuild
10038  storage_unitsBuild.l(nodesModel,years,storage_techs,vintage)
10039      $storage_availTech(nodesModel,years,storage_techs,vintage)
10040      = storage_reservoirParam(nodesModel,years,storage_techs,"unitsBuild");
10041  storage_unitsBuild.lo(nodesModel,yearsToCalc,storage_techs,vintage)
10042      $storage_availTech(nodesModel,yearsToCalc,storage_techs,vintage)
10043      = storage_unitsBuild.l(nodesModel,yearsToCalc,storage_techs,vintage);
10044  storage_unitsBuild.fx(nodesModel,years,storage_techs,vintage)
10045      $storage_reservoirParam(nodesModel,years,storage_techs,"noExpansion")
10046      = storage_unitsBuild.l(nodesModel,years,storage_techs,vintage);
10047   
10048  * Initialise variables for unitsDecom
10049  storage_unitsDecom.l(nodesModel,years,storage_techs,vintage)
10050      $(storage_decomTech(nodesModel,years,storage_techs,vintage)
10051        and years.val < sum(yearsToCalc$(ord(yearsToCalc) = 1), yearsToCalc.val))
10052      = sum((years_a,years_aa)$(sameas(years-1, years_aa)
10053                        and years_a.val > years_aa.val - storage_techParam(storage_techs,vintage,'lifeTime')
10054                        and years_a.val <= years.val - storage_techParam(storage_techs,vintage,'lifeTime')
10055                        and storage_availTech(nodesModel,years_a,storage_techs,vintage)),
10056          storage_unitsBuild.l(nodesModel,years_a,storage_techs,vintage));
10057   
10058  storage_unitsDecom.l(nodesModel,yearsToCalc,storage_techs,vintage)
10059    $storage_decomTech(nodesModel,yearsToCalc,storage_techs,vintage)
10060    = sum(years$
10061          (years.val < sum(yearsToCalc_a$(ord(yearsToCalc_a) = 1), yearsToCalc_a.val)
10062            and storage_availTech(nodesModel,years,storage_techs,vintage)
10063            and years.val > sum(years_a$sameas(years_a, yearsToCalc-1), years_a.val) - storage_techParam(storage_techs,vintage,'lifeTime')
10064            and years.val <= yearsToCalc.val - storage_techParam(storage_techs,vintage,'lifeTime')),
10065        storage_unitsBuild.l(nodesModel,years,storage_techs,vintage))
10066      + sum(yearsToCalc_a$
10067          (yearsToCalc_a.val < sum(yearsToCalc_aa$(ord(yearsToCalc_aa) > 1), yearsToCalc_a.val)
10068            and storage_availTech(nodesModel,yearsToCalc_a,storage_techs,vintage)
10069            and yearsToCalc_a.val > sum(years_a$sameas(years_a, yearsToCalc-1), years_a.val) - storage_techParam(storage_techs,vintage,'lifeTime')
10070            and yearsToCalc_a.val <= yearsToCalc.val - storage_techParam(storage_techs,vintage,'lifeTime')),
10071        storage_unitsBuild.l(nodesModel,yearsToCalc_a,storage_techs,vintage));
10072        ;
10073   
10074  storage_unitsDecom.lo(nodesModel,yearsToCalc,storage_techs,vintage)
10075      $(storage_usedTech(nodesModel,yearsToCalc,storage_techs,vintage)
10076        and not storage_techParam(storage_techs,vintage,"freeDecom"))
10077      = storage_unitsDecom.l(nodesModel,yearsToCalc,storage_techs,vintage)
10078   
10079  * Calculate planned unit expansion
10080  parameter storage_unitsPlanned(nodesModel,years,storage_techs,vintage);
10081  storage_unitsPlanned(nodesModel,years,storage_techs,vintage) = 0;
10082  loop(years,
10083    storage_unitsPlanned(nodesModel,years,storage_techs,vintage)
10084      =
10085      storage_unitsPlanned(nodesModel,years-1,storage_techs,vintage)
10086          $storage_usedTech(nodesModel,years-1,storage_techs,vintage)
10087      + storage_unitsBuild.l(nodesModel,years,storage_techs,vintage)
10088          $storage_availTech(nodesModel,years,storage_techs,vintage)
10089      - storage_unitsDecom.l(nodesModel,years,storage_techs,vintage)
10090          $storage_usedTech(nodesModel,years,storage_techs,vintage);
10091  );
10092   
10093  * Set initial state for planned units
10094  storage_unitsTotal.l(nodesModel,years,storage_techs,vintage)
10095    = storage_unitsPlanned(nodesModel,years,storage_techs,vintage)
10096   
10097  * Calculate if planned unit expansion is bounded by upper and lower limits
10098  set storage_unitBoundsFixed(nodesModel,years,storage_techs);
10099  storage_unitBoundsFixed(nodesModel,years,storage_techs)
10100    $(sum(vintage$storage_usedTech(nodesModel,years,storage_techs,vintage),
10101          storage_unitsPlanned(nodesModel,years,storage_techs,vintage))
10102      = storage_reservoirParam(nodesModel,years,storage_techs,"unitsUpperLimit")
10103    and sum(vintage$storage_usedTech(nodesModel,years,storage_techs,vintage),
10104          storage_unitsPlanned(nodesModel,years,storage_techs,vintage))
10105      = storage_reservoirParam(nodesModel,years,storage_techs,"unitsLowerLimit"))
10106    = yes;
10107   
10108  * Fix unitsBuild, unitsDecom, unitsTotal if levels are predetermined by upper and lower limits
10109  storage_unitsBuild.fx(nodesModel,years,storage_techs,vintage)
10110    $(storage_availTech(nodesModel,years,storage_techs,vintage)
10111      and storage_unitBoundsFixed(nodesModel,years,storage_techs))
10112    = storage_unitsBuild.l(nodesModel,years,storage_techs,vintage);
10113  storage_unitsDecom.fx(nodesModel,years,storage_techs,vintage)
10114    $(storage_usedTech(nodesModel,years,storage_techs,vintage)
10115      and storage_unitBoundsFixed(nodesModel,years,storage_techs))
10116    = storage_unitsDecom.l(nodesModel,years,storage_techs,vintage);
10117  storage_unitsTotal.fx(nodesModel,years,storage_techs,vintage)
10118    $(storage_usedTech(nodesModel,years,storage_techs,vintage)
10119      and storage_unitBoundsFixed(nodesModel,years,storage_techs))
10120    = storage_unitsTotal.l(nodesModel,years,storage_techs,vintage);
10121   
10122  storage_unitsTotal_MIP.up(nodesModel,years,storage_techs,vintage)
10123      $(storage_usedTech(nodesModel,years,storage_techs,vintage)
10124        and storage_techParam(storage_techs,vintage,"mipUnits") = 1)
10125      = storage_reservoirParam(nodesModel,years,storage_techs,"unitsUpperLimit");
10126   
10127  * Add parameter for fixing capacities during myopic runs
10128  parameter storage_unitsDelta(nodesModel,years,storage_techs);
10129   
10130   
10131  * ==== declaration of equations ====
10132   
10133  equations
10134    Eq_storage_unitsBalance(nodesModel,years,storage_techs,vintage
10135      ) "Ensures the units balance over the planning period."
10136    Eq_storage_unitsFixedDecom(nodesModel,years,storage_techs,vintage
10137      ) "Restricts the fixed decommissioning of units over the planning period."
10138    Eq_storage_unitsFreeDecom(nodesModel,years,storage_techs,vintage
10139      ) "Restricts the free decommissioning of units over the planning period."
10140    Eq_storage_unitsUpperLimit(nodesModel,years,storage_techs
10141      ) "Upper bound for the total number of units."
10142    Eq_storage_unitsLowerLimit(nodesModel,years,storage_techs
10143      ) "Lower bound for the total number of units."
10144    Eq_storage_unitsTotalMIP(nodesModel,years,storage_techs,vintage
10145      ) "Fixes the total number of units to the corresponding integer variable."
10146   
10147    Eq_storage_levelUpperLimit(timeModel,nodesModel,years,storage_techs,vintage,commodity
10148      ) "Upper bound for the total number of units."
10149    Eq_storage_levelUpperLimit_degradation(timeModel,nodesModel,years,storage_techs,vintage,commodity
10150      ) "Upper bound for the total number of units if the storage technology accounts for degradation."
10151    Eq_storage_levelLowerLimit(timeModel,nodesModel,years,storage_techs,vintage,commodity
10152      ) "Lower bound for the total number of units."
10153    Eq_storage_losses(timeModel,nodesModel,years,storage_techs,vintage,commodity
10154      ) "Stored commodities lost due to self discharge."
10155    Eq_storage_unitsBalanceStates(nodesModel,years,storage_techs,vintage
10156      ) "Currently available units must have been built at some point in time and have some state of degradation."
10157    Eq_storage_unitsUpperLimitPerState(nodesModel,years,yearsCom,storage_techs,vintage
10158      ) "There cannot be more units from a certain year than the amount built in that year."
10159    Eq_storage_unitsStatesNoRecovery(nodesModel,years,yearsCom,storage_techs,vintage,degradation_states
10160      ) "There is no recovery."
10161    Eq_storage_cRateLimit(timeModel,nodesModel,years,storage_techs,vintage,commodity
10162      ) "Limit charging rate based on unit capacity."
10163    Eq_storage_eRateLimit(timeModel,nodesModel,years,storage_techs,vintage,commodity
10164      ) "Limit discharging rate based on unit capacity."
10165    Eq_storage_charge(timeModel,nodesModel,years,storage_techs,vintage,commodity
10166      ) "Positive change in state of charge is influx."
10167    Eq_storage_discharge(timeModel,nodesModel,years,storage_techs,vintage,commodity
10168      ) "Negative change in state of charge is outflux."
10169   
10170    Eq_storage_levelStateSum(timeModel,nodesModel,years,storage_techs,vintage,commodity
10171      ) "Sum of degradation class storage levels is the global level."
10172    Eq_storage_levelUpperLimitPerAge(timeModel,nodesModel,years,yearsCom,storage_techs,vintage,commodity
10173      ) "Upper bound for units of a certain state."
10174    Eq_storage_chargingPerAge(timeModel,nodesModel,years,yearsCom,storage_techs,vintage,commodity
10175      ) "Positive change in state of charge is influx for each degradation class."
10176    Eq_storage_chargeBasedDegradationDistribution(nodesModel,years,yearsCom,storage_techs,vintage,commodity
10177      ) "Determine degradation states of storage units."
10178    Eq_storage_unitsDecomStateSum(nodesModel,years,storage_techs,vintage
10179      ) "All decomminsioned units must have a degradation state."
10180    Eq_storage_unitsDegradation(nodesModel,years,yearsCom,storage_techs,vintage,degradation_states
10181      ) "Only allow one range of degradation states per year and age group."
10182    Eq_storage_unitsDegradation_onlyOneRange(nodesModel,years,yearsCom,storage_techs,vintage
10183      ) "Limit usable degradation states to one range, i.e., two neighboring states."
10184   
10185    Eq_storage_unitsSoC_sum(timeModel,nodesModel,years,storage_techs,vintage
10186      ) "Every unit has a state of charge."
10187    Eq_storage_levelSoC(timeModel,nodesModel,years,storage_techs,vintage,commodity
10188      ) "Every unit has a state of charge."
10189    Eq_storage_unitsSoC(timeModel,nodesModel,years,storage_techs,vintage,soc_statesIn
10190      ) "Number of units in particular SoC."
10191    Eq_storage_unitsSoC_onlyOneRange(timeModel,nodesModel,years,storage_techs,vintage
10192      ) "Limit usable SoC states to one range, i.e., two neighboring states."
10193   
10194    Eq_storage_cRateLimit_SoC(timeModel,nodesModel,years,storage_techs,vintage,commodity
10195      ) "Limit charging rate based on unit capacity."
10196    Eq_storage_eRateLimit_SoC(timeModel,nodesModel,years,storage_techs,vintage,commodity
10197      ) "Limit discharging rate based on unit capacity."
10198    ;
10199   
10200  * ==== equation definition ====
10201  * // ## Equations
10202  * // ### Storage Units Balance
10203  * // Ensures that the total units are consistent with the built and decommissioned units.
10204  * // {Eq_storage_unitsBalance}
10205  Eq_storage_unitsBalance(nodesModelSel,yearsSel,storage_techs,vintage)
10206      $((storage_usedTech(nodesModelSel,yearsSel,storage_techs,vintage)
10207            or sum(years$sameas(years,yearsSel), storage_usedTech(nodesModelSel,years-1,storage_techs,vintage)))
10208          and not storage_unitBoundsFixed(nodesModelSel,yearsSel,storage_techs))
10209      ..
10210      storage_unitsTotal(nodesModelSel,yearsSel,storage_techs,vintage)
10211      =e=
10212          sum(yearsToCalc$(ord(yearsToCalc) = 1 and sameas(yearsToCalc, yearsSel)),
10213        sum(years$sameas(years, yearsToCalc),
10214          storage_unitsTotal(nodesModelSel,years-1,storage_techs,vintage)
10215            $storage_usedTech(nodesModelSel,years-1,storage_techs,vintage)))
10216      + sum((yearsToCalc)$(ord(yearsToCalc) > 1 and sameas(yearsToCalc, yearsSel)),
10217        storage_unitsTotal(nodesModelSel,yearsToCalc-1,storage_techs,vintage)
10218          $storage_usedTech(nodesModelSel,yearsToCalc-1,storage_techs,vintage))
10219      + storage_unitsBuild(nodesModelSel,yearsSel,storage_techs,vintage)
10220          $storage_availTech(nodesModelSel,yearsSel,storage_techs,vintage)
10221      - storage_unitsDecom(nodesModelSel,yearsSel,storage_techs,vintage)
10222          $storage_usedTech(nodesModelSel,yearsSel,storage_techs,vintage);
10223   
10224  * // ### Storage Units Fixed Decommission
10225  * // Restricts the fixed decommissioning of storage units over the planning period.
10226  * // {Eq_storage_unitsFixedDecom}
10227  Eq_storage_unitsFixedDecom(nodesModelSel,yearsSel,storage_techs,vintage)
10228      $(storage_decomTech(nodesModelSel,yearsSel,storage_techs,vintage)
10229          and not storage_techParam(storage_techs,vintage,"freeDecom") = 1
10230          and not storage_unitBoundsFixed(nodesModelSel,yearsSel,storage_techs))
10231      ..
10232      storage_unitsDecom(nodesModelSel,yearsSel,storage_techs,vintage)
10233      =e=
10234      sum(years$
10235          (storage_availTech(nodesModelSel,years,storage_techs,vintage)
10236            and years.val > sum(yearsToCalc$sameas(yearsToCalc+1, yearsSel), yearsToCalc.val) - storage_techParam(storage_techs,vintage,'lifeTime')
10237            and years.val <= yearsSel.val - storage_techParam(storage_techs,vintage,'lifeTime')),
10238        storage_unitsBuild(nodesModelSel,years,storage_techs,vintage));
10239   
10240  * // ### Storage Units Free Decomission
10241  * // Restricts the free decommissioning of storage units over the planning period.
10242  * // {Eq_storage_unitsFreeDecom}
10243  Eq_storage_unitsFreeDecom(nodesModelSel,yearsSel,storage_techs,vintage)
10244      $((storage_decomTech(nodesModelSel,yearsSel,storage_techs,vintage)
10245          or storage_usedTech(nodesModelSel,yearsSel,storage_techs,vintage))
10246          and storage_techParam(storage_techs,vintage,"freeDecom") = 1)
10247      ..
10248      sum(years$
10249            ((storage_decomTech(nodesModelSel,years,storage_techs,vintage)
10250              or storage_usedTech(nodesModelSel,years,storage_techs,vintage))
10251              and years.val < sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)),
10252          storage_unitsDecom(nodesModelSel,years,storage_techs,vintage))
10253      + sum(yearsToCalc$
10254            ((storage_decomTech(nodesModelSel,yearsToCalc,storage_techs,vintage)
10255              or storage_usedTech(nodesModelSel,yearsToCalc,storage_techs,vintage))
10256              and yearsToCalc.val >= sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
10257              and yearsToCalc.val <= yearsSel.val),
10258          storage_unitsDecom(nodesModelSel,yearsToCalc,storage_techs,vintage))
10259      =g=
10260      sum(years$
10261            (storage_availTech(nodesModelSel,years,storage_techs,vintage)
10262              and years.val < sum(yearsToCalc$(ord(yearsToCalc)=1), yearsToCalc.val) - storage_techParam(storage_techs,vintage,'lifeTime')),
10263          storage_unitsBuild(nodesModelSel,years,storage_techs,vintage))
10264      + sum(yearsToCalc$
10265            (storage_availTech(nodesModelSel,yearsToCalc,storage_techs,vintage)
10266              and yearsToCalc.val >= sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
10267              and yearsToCalc.val <= yearsSel.val - storage_techParam(storage_techs,vintage,'lifeTime')),
10268          storage_unitsBuild(nodesModelSel,yearsToCalc,storage_techs,vintage));
10269   
10270  * // ### Storage Units Lower Limit
10271  * // Lower bound for the total number of storage units.
10272  * // {Eq_storage_unitsLowerLimit}
10273  Eq_storage_unitsLowerLimit(nodesModelSel,yearsSel,storage_techs)
10274      $(storage_reservoirParam(nodesModelSel,yearsSel,storage_techs,'unitsLowerLimit') > 0 )
10275      ..
10276      sum(vintage$storage_usedTech(nodesModelSel,yearsSel,storage_techs,vintage),
10277          storage_unitsTotal(nodesModelSel,yearsSel,storage_techs,vintage))
10278      =g=
10279      storage_reservoirParam(nodesModelSel,yearsSel,storage_techs,"unitsLowerLimit");
10280   
10281  * // ### Storage Units Upper Limit
10282  * // Upper bound for the total number of storage units.
10283  * // {Eq_storage_unitsUpperLimit}
10284  Eq_storage_unitsUpperLimit(nodesModelSel,yearsSel,storage_techs)
10285      $(storage_reservoirParam(nodesModelSel,yearsSel,storage_techs,'unitsUpperLimit') >= 0
10286          and storage_reservoirParam(nodesModelSel,yearsSel,storage_techs,'unitsUpperLimit') < +inf )
10287      ..
10288      sum(vintage$storage_usedTech(nodesModelSel,yearsSel,storage_techs,vintage),
10289          storage_unitsTotal(nodesModelSel,yearsSel,storage_techs,vintage))
10290      =l=
10291      storage_reservoirParam(nodesModelSel,yearsSel,storage_techs,"unitsUpperLimit");
10292   
10293  * // ### Storage Units Total MIP
10294  * // Fixes the total number of storage units to the corresponding integer variable.
10295  * // {Eq_storage_unitsTotalMIP}
10296  Eq_storage_unitsTotalMIP(nodesModelSel,yearsSel,storage_techs,vintage)
10297      $( storage_usedTech(nodesModelSel,yearsSel,storage_techs,vintage)
10298          and storage_techParam(storage_techs,vintage,"mipUnits") = 1 )
10299      ..
10300      storage_unitsTotal(nodesModelSel,yearsSel,storage_techs,vintage)
10301      =e=
10302      storage_unitsTotal_MIP(nodesModelSel,yearsSel,storage_techs,vintage);
10303   
10304  * // ### Storage Level Lower Limit
10305  * // Lower limit on the storage level.
10306  * // {Eq_storage_levelLowerLimit}
10307  Eq_storage_levelLowerLimit(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
10308      $(storage_usedTechCom(nodesModelSel,yearsSel,storage_techs,vintage,commodity)
10309          and storage_levelProfile(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,"lower") > 0)
10310      ..
10311      storage_level(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
10312      =g=
10313      storage_levelProfile(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,"lower")
10314      * storage_sizeParam(storage_techs,vintage,commodity,"size")
10315      * storage_unitsTotal(nodesModelSel,yearsSel,storage_techs,vintage);
10316   
10317  * // ### Storage Level Upper Limit
10318  * // Upper limit on the storage level.
10319  * // {Eq_storage_levelUpperLimit}
10320  Eq_storage_levelUpperLimit(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
10321      $(storage_usedTechCom(nodesModelSel,yearsSel,storage_techs,vintage,commodity)
10322          and not storage_hasDegradation(storage_techs,vintage)
10323          and storage_levelProfile(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,"upper") >= 0)
10324      ..
10325      storage_level(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
10326      =l=
10327      storage_levelProfile(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,"upper")
10328      * storage_sizeParam(storage_techs,vintage,commodity,"size")
10329      * storage_unitsTotal(nodesModelSel,yearsSel,storage_techs,vintage);
10330   
10331  * // ### Storage Level Upper Limit (degradation)
10332  * // Upper limit on the storage level if the storage technology accounts for degradation.
10333  * // {Eq_storage_levelUpperLimit_degradation}
10334  Eq_storage_levelUpperLimit_degradation(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
10335      $(storage_usedTechCom(nodesModelSel,yearsSel,storage_techs,vintage,commodity)
10336          and storage_hasDegradation(storage_techs,vintage)
10337          and storage_levelProfile(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,"upper") >= 0)
10338      ..
10339      storage_level(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
10340      =l=
10341      storage_levelProfile(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,"upper")
10342      * storage_sizeParam(storage_techs,vintage,commodity,"size")
10343      * sum((degradation_states,yearsCom)$storage_usedDegradation(storage_techs,vintage,degradation_states),
10344              (storage_degradationParam(storage_techs,vintage,degradation_states,"remainingCapacity")
10345                - (yearsSel.val - yearsCom.val) * storage_techParam(storage_techs,vintage,"annualDegradation"))
10346                * storage_unitsStateTracker(nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,degradation_states));
10347   
10348  * // ### Storage Unit States Sum (degradation)
10349  * // The number of units in all degradation state must match the total unit number.
10350  * // {Eq_storage_unitsBalanceStates}
10351  Eq_storage_unitsBalanceStates(nodesModelSel,yearsSel,storage_techs,vintage)
10352      $(storage_usedTech(nodesModelSel,yearsSel,storage_techs,vintage)
10353        and storage_hasDegradation(storage_techs,vintage))
10354      ..
10355      storage_unitsTotal(nodesModelSel,yearsSel,storage_techs,vintage)
10356      =e=
10357      sum((yearsCom,degradation_states)$storage_usedDegradation(storage_techs,vintage,degradation_states),
10358            storage_unitsStateTracker(nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,degradation_states));
10359   
10360  * // ### Storage Unit States Upper Limit(degradation)
10361  * // The states of all commissioned units in one year (unitsBuilt) must either still be tracked or have been decommissioned.
10362  * // {Eq_storage_unitsUpperLimitPerState}
10363  Eq_storage_unitsUpperLimitPerState(nodesModelSel,yearsSel,yearsCom,storage_techs,vintage)
10364      $(storage_usedTech(nodesModelSel,yearsSel,storage_techs,vintage)
10365          and storage_hasDegradation(storage_techs,vintage))
10366      ..
10367      sum(degradation_states$storage_usedDegradation(storage_techs,vintage,degradation_states),
10368            storage_unitsStateTracker(nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,degradation_states)
10369            + sum(years$(years.val <= yearsSel.val),
10370                  storage_unitsStateTrackerDecom(nodesModelSel,years,yearsCom,storage_techs,vintage,degradation_states)))
10371      =e=
10372      storage_unitsBuild(nodesModelSel,yearsCom,storage_techs,vintage)$(yearsCom.val <= yearsSel.val);
10373   
10374  * // ### Storage Unit States Progression (degradation)
10375  * // Unit recovery by reassigning the storage cycles to other units is disabled. Therefore, the number of units in a particular degradation state can only increase if the number in a less degraded state is decreased by at least the same amount.
10376  * // {Eq_storage_unitsStatesNoRecovery}
10377  alias(degradation_states, dc_states);
10378  Eq_storage_unitsStatesNoRecovery(nodesModelSel,yearsSel(yearsToCalc),yearsCom,storage_techs,vintage,degradation_states)
10379      $(storage_usedTech(nodesModelSel,yearsSel,storage_techs,vintage)
10380        and yearsToCalc.val > yearsCom.val
10381        and storage_usedDegradation(storage_techs,vintage,degradation_states))
10382      ..
10383      sum(dc_states$(storage_usedDegradation(storage_techs,vintage,dc_states)
10384                and storage_degradationParam(storage_techs,vintage,dc_states,"maxFullCycles") <= storage_degradationParam(storage_techs,vintage,degradation_states,"maxFullCycles")),
10385              storage_unitsStateTracker(nodesModelSel,yearsToCalc,yearsCom,storage_techs,vintage,dc_states)
10386              + sum(years$(years.val <= yearsToCalc.val), storage_unitsStateTrackerDecom(nodesModelSel,years,yearsCom,storage_techs,vintage,dc_states)))
10387      =l=
10388      sum(dc_states$(storage_usedDegradation(storage_techs,vintage,dc_states)
10389                      and storage_degradationParam(storage_techs,vintage,dc_states,"maxFullCycles") <= storage_degradationParam(storage_techs,vintage,degradation_states,"maxFullCycles")),
10390              storage_unitsStateTracker(nodesModelSel,yearsToCalc-1,yearsCom,storage_techs,vintage,dc_states)
10391              + sum(years$(years.val < yearsToCalc.val), storage_unitsStateTrackerDecom(nodesModelSel,years,yearsCom,storage_techs,vintage,dc_states)));
10392   
10393  * // ### Storage Losses
10394  * // Accumulation of storage losses.
10395  * // {Eq_storage_losses}
10396  Eq_storage_losses(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,storage_techs,vintage,commodity)
10397      $storage_usedTechCom(nodesModelSel,yearsSel,storage_techs,vintage,commodity)
10398      ..
10399      storage_losses(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
10400      =e=
10401      - storage_level(timeModelToCalc--1,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
10402        * storage_sizeParam(storage_techs,vintage,commodity,"selfdischarge")
10403      + storage_sizeParam(storage_techs,vintage,commodity,"selfdischargeAbs")
10404      + (storage_techParam(storage_techs,vintage,"chargingLoss")
10405          /(1 - storage_techParam(storage_techs,vintage,"chargingLoss")))
10406        * storage_charge(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
10407          $(storage_techParam(storage_techs,vintage,"chargingLoss") > 0)
10408      + storage_techParam(storage_techs,vintage,"dischargingLoss")
10409        * storage_discharge(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
10410          $(storage_techParam(storage_techs,vintage,"dischargingLoss") > 0)
10411      - storage_sizeParam(storage_techs,vintage,commodity,"size")
10412        * sum(soc_states$(storage_usedTechSoCState(storage_techs,vintage,soc_states)
10413                          and storage_validSoCRange(storage_techs,vintage)),
10414              storage_unitsSoC(timeModelToCalc--1,nodesModelSel,yearsSel,storage_techs,vintage,soc_states)
10415              * storage_SoCParam(storage_techs,vintage,soc_states,"SoC")
10416              * storage_SoCParam(storage_techs,vintage,soc_states,"selfdischarge"));
10417   
10418  * // ### C-Rate Limit
10419  * // The increase in storage level per time step, i.e., the charging rate, is limited relative to the storage capacity.
10420  * // {Eq_storage_cRateLimit}
10421  Eq_storage_cRateLimit(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,storage_techs,vintage,commodity)
10422      $(storage_usedTechCom(nodesModelSel,yearsSel,storage_techs,vintage,commodity)
10423        and storage_techParam(storage_techs,vintage,"maxCRate") > 0)
10424      ..
10425      storage_level(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
10426      - storage_level(timeModelToCalc--1,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
10427      =l=
10428      storage_techParam(storage_techs,vintage,"maxCRate")
10429      * storage_sizeParam(storage_techs,vintage,commodity,"size")
10430      * storage_unitsTotal(nodesModelSel,yearsSel,storage_techs,vintage);
10431   
10432  * // ### E-Rate Limit
10433  * // The decrease in storage level per time step, i.e., the discharging rate, is limited relative to the storage capacity.
10434  * // {Eq_storage_eRateLimit}
10435  Eq_storage_eRateLimit(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,storage_techs,vintage,commodity)
10436      $(storage_usedTechCom(nodesModelSel,yearsSel,storage_techs,vintage,commodity)
10437        and storage_techParam(storage_techs,vintage,"maxERate") > 0)
10438      ..
10439      storage_level(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
10440      - storage_level(timeModelToCalc--1,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
10441      =g=
10442      - storage_techParam(storage_techs,vintage,"maxERate")
10443      * storage_sizeParam(storage_techs,vintage,commodity,"size")
10444      * storage_unitsTotal(nodesModelSel,yearsSel,storage_techs,vintage);
10445   
10446  * // ### Storage Charging
10447  * // Increases in storage levels are accounted as charging amounts.
10448  * // {Eq_storage_charge}
10449  Eq_storage_charge(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,storage_techs,vintage,commodity)
10450      $(storage_usedTechCom(nodesModelSel,yearsSel,storage_techs,vintage,commodity)
10451        and storage_techParam(storage_techs,vintage,"chargingLoss") > 0)
10452      ..
10453      storage_charge(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
10454      =g=
10455      storage_level(timeModelToCalc,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
10456      - storage_level(timeModelToCalc--1,nodesModelSel,yearsSel,storage_techs,vintage,commodity);
10457   
10458  * // ### Storage Discharging
10459  * // Decreases in storage levels are accounted as discharging amounts.
10460  * // {Eq_storage_discharge}
10461  Eq_storage_discharge(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,storage_techs,vintage,commodity)
10462      $(storage_usedTechCom(nodesModelSel,yearsSel,storage_techs,vintage,commodity)
10463        and storage_techParam(storage_techs,vintage,"dischargingLoss") > 0)
10464      ..
10465      storage_discharge(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
10466      =g=
10467      storage_level(timeModelToCalc--1,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
10468      - storage_level(timeModelToCalc,nodesModelSel,yearsSel,storage_techs,vintage,commodity);
10469   
10470  * // ### Storage Level Sum (degradation)
10471  * // The storage level is accounted individually by commissioning year in the case of degradation in order to prohibit the model to assign pre-existing storage cycles to newly built storage reservoirs and thereby avoiding degradation. All those storage levels represent the total storage level.
10472  * // {Eq_storage_levelStateSum}
10473  Eq_storage_levelStateSum(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
10474      $(storage_usedTechCom(nodesModelSel,yearsSel,storage_techs,vintage,commodity)
10475        and storage_techParam(storage_techs,vintage,"usageDegradation"))
10476      ..
10477      storage_level(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
10478      =e=
10479      sum(yearsCom, storage_levelPerAge(timeModelSel,nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,commodity));
10480   
10481  * // ### Storage Level Upper Limit per Age Group (degradation)
10482  * // Upper limit on the storage level per commissioning year if the storage technology accounts for degradation.
10483  * // {Eq_storage_levelUpperLimitPerAge}
10484  Eq_storage_levelUpperLimitPerAge(timeModelSel,nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,commodity)
10485      $(storage_usedTechCom(nodesModelSel,yearsSel,storage_techs,vintage,commodity)
10486        and storage_techParam(storage_techs,vintage,"usageDegradation"))
10487      ..
10488      storage_levelPerAge(timeModelSel,nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,commodity)
10489      =l=
10490      storage_techParam(storage_techs,vintage,"levelUpperLimit")
10491      * storage_sizeParam(storage_techs,vintage,commodity,"size")
10492      * sum(degradation_states,
10493              (storage_degradationParam(storage_techs,vintage,degradation_states,"remainingCapacity")
10494                - (yearsSel.val - yearsCom.val) * storage_techParam(storage_techs,vintage,"annualDegradation"))
10495                * storage_unitsStateTracker(nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,degradation_states));
10496   
10497  * // ### Storage Cycle Distribution to Degradation States per Commissioning Year (degradation)
10498  * // The charging amounts are converted to equivalent full cycles which then must be represented by an adequate distribution of degradation states.
10499  * // {Eq_storage_chargeBasedDegradationDistribution}
10500  alias(years, prev_years);
10501  Eq_storage_chargeBasedDegradationDistribution(nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,commodity)
10502      $(storage_usedTechCom(nodesModelSel,yearsSel,storage_techs,vintage,commodity)
10503        and storage_techParam(storage_techs,vintage,"usageDegradation"))
10504      ..
10505      sum(prev_years$(prev_years.val <= yearsSel.val), representedYears(prev_years)
10506          * sum(timeModel, storage_chargePerAge(timeModel,nodesModelSel,prev_years,yearsCom,storage_techs,vintage,commodity)))
10507      =l=
10508      storage_sizeParam(storage_techs,vintage,commodity,"size")
10509      * sum(dc_states$storage_usedDegradation(storage_techs,vintage,dc_states),
10510          storage_degradationParam(storage_techs,vintage,dc_states,"maxFullCycles")
10511          * (storage_unitsStateTracker(nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,dc_states)
10512             + sum(prev_years$(prev_years.val <= yearsSel.val), storage_unitsStateTrackerDecom(nodesModelSel,prev_years,yearsCom,storage_techs,vintage,dc_states))));
10513   
10514  * // ### Storage Charging per Commissioning Year (degradation)
10515  * // Increases in storage levels are accounted as charging amounts.
10516  * // {Eq_storage_chargingPerAge}
10517  Eq_storage_chargingPerAge(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,commodity)
10518      $(storage_usedTechCom(nodesModelSel,yearsSel,storage_techs,vintage,commodity)
10519        and storage_techParam(storage_techs,vintage,"usageDegradation"))
10520      ..
10521      storage_chargePerAge(timeModelSel,nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,commodity)
10522      =g=
10523      storage_levelPerAge(timeModelToCalc,nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,commodity)
10524      - storage_levelPerAge(timeModelToCalc--1,nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,commodity);
10525   
10526  * // ### Storage Unit Decommissioning States Sum (degradation)
10527  * // The number of decommissioned units in all degradation state must match the total decommissioning unit number.
10528  * // {Eq_storage_unitsDecomStateSum}
10529  Eq_storage_unitsDecomStateSum(nodesModelSel,yearsSel,storage_techs,vintage)
10530      $(storage_techParam(storage_techs,vintage,"usageDegradation"))
10531      ..
10532      storage_unitsDecom(nodesModelSel,yearsSel,storage_techs,vintage)
10533      =e=
10534      sum((yearsCom,degradation_states)$storage_usedDegradation(storage_techs,vintage,degradation_states),
10535          storage_unitsStateTrackerDecom(nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,degradation_states));
10536   
10537  * // ### Storage Unit Sequential Degradation (degradation)
10538  * // Only active degradation ranges, i.e., two neighboring degradation states, can be used.
10539  * // {Eq_storage_unitsDegradation}
10540  alias(degradation_states, degradation_states_a, degradation_states_b);
10541  Eq_storage_unitsDegradation(nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,degradation_states)
10542      $(storage_techParam(storage_techs,vintage,"usageDegradation")
10543        and storage_techParam(storage_techs,vintage,"sequentialDegradationStates"))
10544      ..
10545      sum(degradation_states_a$((storage_degradationParam(storage_techs,vintage,degradation_states_a,"maxFullCycles") = storage_degradationParam(storage_techs,vintage,degradation_states,"maxFullCycles")
10546                        or storage_degradationParam(storage_techs,vintage,degradation_states_a,"maxFullCycles")
10547                                         = smax(degradation_states_b$(storage_degradationParam(storage_techs,vintage,degradation_states_b,"maxFullCycles") < storage_degradationParam(storage_techs,vintage,degradation_states,"maxFullCycles")
10548                                                              and storage_usedDegradation(storage_techs,vintage,degradation_states_b)),
10549                                                              storage_degradationParam(storage_techs,vintage,degradation_states_b,"maxFullCycles")))
10550                        and storage_usedDegradation(storage_techs,vintage,degradation_states_a)),
10551          storage_unitsStateTracker_activeRange(nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,degradation_states_a))
10552      * storage_bigM(storage_techs,vintage)
10553      =g=
10554      storage_unitsStateTracker(nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,degradation_states);
10555   
10556  * // ### Storage Unit Sequential Degradation Range (degradation)
10557  * // Only one degradation range can be active.
10558  * // {Eq_storage_unitsDegradation_onlyOneRange}
10559  Eq_storage_unitsDegradation_onlyOneRange(nodesModelSel,yearsSel,yearsCom,storage_techs,vintage)
10560      $(storage_techParam(storage_techs,vintage,"usageDegradation") and storage_techParam(storage_techs,vintage,"sequentialDegradationStates"))
10561      ..
10562      sum(degradation_states$storage_usedDegradation(storage_techs,vintage,degradation_states),
10563            storage_unitsStateTracker_activeRange(nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,degradation_states))
10564      =e= 1;
10565   
10566  * // ### Storage Unit Sequential State of Charge (SoC)
10567  * // Only active state of charge ranges, i.e., two neighboring states of charge, can be used.
10568  * // {Eq_storage_unitsSoC}
10569  alias(soc_states, soc_states_a, soc_states_b);
10570  Eq_storage_unitsSoC(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,storage_techs,vintage,soc_states)
10571      $(storage_validSoCRange(storage_techs,vintage) and storage_techParam(storage_techs,vintage,"sequentialSoC"))
10572      ..
10573      sum(soc_states_a$((storage_SoCParam(storage_techs,vintage,soc_states_a,"SoC") = storage_SoCParam(storage_techs,vintage,soc_states,"SoC")
10574                        or storage_SoCParam(storage_techs,vintage,soc_states_a,"SoC")
10575                                         = smax(soc_states_b$(storage_SoCParam(storage_techs,vintage,soc_states_b,"SoC") < storage_SoCParam(storage_techs,vintage,soc_states,"SoC")
10576                                                              and storage_usedTechSoCState(storage_techs,vintage,soc_states_b)),
10577                                                              storage_SoCParam(storage_techs,vintage,soc_states_b,"SoC")))
10578                        and storage_usedTechSoCState(storage_techs,vintage,soc_states_a)),
10579          storage_unitsSoC_activeRange(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,soc_states_a))
10580      * storage_bigM(storage_techs,vintage)
10581      =g=
10582      storage_unitsSoC(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,soc_states);
10583   
10584  * // ### Storage Unit Sequential State of Charge Range (SoC)
10585  * // Only one state of charge range can be active.
10586  * // {Eq_storage_unitsSoC_onlyOneRange}
10587  Eq_storage_unitsSoC_onlyOneRange(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,storage_techs,vintage)
10588      $(storage_validSoCRange(storage_techs,vintage) and storage_techParam(storage_techs,vintage,"sequentialSoC"))
10589      ..
10590      sum(soc_states$storage_usedTechSoCState(storage_techs,vintage,soc_states),
10591            storage_unitsSoC_activeRange(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,soc_states)) =e= 1;
10592   
10593  * // ### Storage Unit State of Charge Sum (SoC)
10594  * // Each storage unit must have one state of charge.
10595  * // {Eq_storage_unitsSoC_sum}
10596  Eq_storage_unitsSoC_sum(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,storage_techs,vintage)
10597      $storage_validSoCRange(storage_techs,vintage)
10598      ..
10599      storage_unitsTotal(nodesModelSel,yearsSel,storage_techs,vintage)
10600      =e=
10601      sum(soc_states$storage_usedTechSoCState(storage_techs,vintage,soc_states),
10602            storage_unitsSoC(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,soc_states));
10603   
10604  * // ### Storage Level State of Charge Sum (SoC)
10605  * // The total storage level must be represented by units in their specific states of charge.
10606  * // {Eq_storage_levelSoC}
10607  Eq_storage_levelSoC(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,storage_techs,vintage,commodity)
10608      $(storage_validSoCRange(storage_techs,vintage) and storage_usedTechCom(nodesModelSel,yearsSel,storage_techs,vintage,commodity))
10609      ..
10610      storage_level(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
10611      =e=
10612      storage_sizeParam(storage_techs,vintage,commodity,"size")
10613      * sum(soc_states$storage_usedTechSoCState(storage_techs,vintage,soc_states),
10614              storage_unitsSoC(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,soc_states)
10615              * storage_SoCParam(storage_techs,vintage,soc_states,"SoC"));
10616   
10617  * // ### C-Rate Limit (SoC)
10618  * // The increase in storage level per time step, i.e., the charging rate, is limited relative to the storage capacity. The coefficients can vary between states of charge.
10619  * // {Eq_storage_cRateLimit_SoC}
10620  Eq_storage_cRateLimit_SoC(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,storage_techs,vintage,commodity)
10621      $(storage_usedTechCom(nodesModelSel,yearsSel,storage_techs,vintage,commodity)
10622        and storage_validSoCRange(storage_techs,vintage)
10623        and sum(soc_states, storage_SoCParam(storage_techs,vintage,soc_states,"cRate")) < inf)
10624      ..
10625      storage_level(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
10626      - storage_level(timeModelToCalc--1,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
10627      =l=
10628      storage_sizeParam(storage_techs,vintage,commodity,"size")
10629      * sum(soc_states$storage_usedTechSoCState(storage_techs,vintage,soc_states),
10630                      storage_SoCParam(storage_techs,vintage,soc_states,"cRate")
10631                      * storage_unitsSoC(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,soc_states));
10632   
10633  * // ### E-Rate Limit (SoC)
10634  * // The decrease in storage level per time step, i.e., the discharging rate, is limited relative to the storage capacity. The coefficients can vary between states of charge.
10635  * // {Eq_storage_cRateLimit_SoC}
10636  Eq_storage_eRateLimit_SoC(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,storage_techs,vintage,commodity)
10637      $(storage_usedTechCom(nodesModelSel,yearsSel,storage_techs,vintage,commodity)
10638        and storage_validSoCRange(storage_techs,vintage)
10639        and sum(soc_states, storage_SoCParam(storage_techs,vintage,soc_states,"eRate")) < inf)
10640      ..
10641      storage_level(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
10642      - storage_level(timeModelToCalc--1,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
10643      =g=
10644      - storage_sizeParam(storage_techs,vintage,commodity,"size")
10645      * sum(soc_states$storage_usedTechSoCState(storage_techs,vintage,soc_states),
10646                      storage_SoCParam(storage_techs,vintage,soc_states,"eRate")
10647                      * storage_unitsSoC(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,soc_states));
10648   
10649   
10650  * ==== model definition ====
10651   
10652  Model M_storage
10653  /
10654    Eq_storage_unitsBalance
10655    Eq_storage_unitsFixedDecom
10656    Eq_storage_unitsFreeDecom
10657    Eq_storage_unitsLowerLimit
10658    Eq_storage_unitsUpperLimit
10659    Eq_storage_levelUpperLimit_degradation
10660    Eq_storage_unitsTotalMIP
10661    Eq_storage_levelLowerLimit
10662    Eq_storage_levelUpperLimit
10664    Eq_storage_losses
10666    Eq_storage_unitsBalanceStates
10667    Eq_storage_unitsUpperLimitPerState
10668    Eq_storage_unitsStatesNoRecovery
10669    Eq_storage_cRateLimit
10670    Eq_storage_eRateLimit
10671    Eq_storage_charge
10672    Eq_storage_discharge
10673    Eq_storage_levelStateSum
10674    Eq_storage_levelUpperLimitPerAge
10675    Eq_storage_chargeBasedDegradationDistribution
10676    Eq_storage_chargingPerAge
10677    Eq_storage_unitsDecomStateSum
10678    Eq_storage_unitsDegradation
10679    Eq_storage_unitsDegradation_onlyOneRange
10680   
10681    Eq_storage_unitsSoC
10682    Eq_storage_unitsSoC_sum
10683    Eq_storage_unitsSoC_onlyOneRange
10684    Eq_storage_levelSoC
10685    Eq_storage_cRateLimit_SoC
10686    Eq_storage_eRateLimit_SoC
10687  /;
INCLUDE    C:\Local\REMix\framework\remix\framework\model\source\core\transfer.gms
10689  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
10690  * SPDX-License-Identifier: BSD-3-Clause
10691   
10692  * // # core_transfer
10693  * // The equations in this file describe the commodity transfer in the model.
10694   
10695  * // ## Variables
10696  * // {special_table_transfer_variables}
10699   
10704   
10981   
10982  parameter transfer_linksParam(linksModel,years,transfer_techs,pc_transfer_linksParam);
10983  transfer_linksParam(linksModelToCalc,years,transfer_techs,pc_transfer_linksParam)
10984      = sum(linksData$links_aggregate(linksModelToCalc,linksData), transfer_linksParamIn(linksData,years,transfer_techs,pc_transfer_linksParam));
10985   
10986  * // ## Load links from gdx file
10988   
10989   
10990  set transfer_hasflowProfileIn(linksData,years,transfer_techs,pc_transfer_flowProfile);
10991  option transfer_hasflowProfileIn < transfer_flowProfileIn;
10992   
10993  * === modify transfer_flowProfileIn vector to fill with default values, in case profile is not specified ===
10994  transfer_linksParamIn(linksData,years,transfer_techs,"flowAlongLimit")
10995      $(not transfer_linksParamIn(linksData,years,transfer_techs,"limitFlows"))
10996      = 1;
10997   
10998  transfer_linksParamIn(linksData,years,transfer_techs,"flowAgainstLimit")
10999      $(not transfer_linksParamIn(linksData,years,transfer_techs,"limitFlows"))
11000      = 1;
11001   
11002  transfer_flowProfileIn(timeData,linksData,years,transfer_techs,"along")
11003      $(not transfer_hasflowProfileIn(linksData,years,transfer_techs,"along"))
11004      = transfer_linksParamIn(linksData,years,transfer_techs,"flowAlongLimit");
11005   
11006  transfer_flowProfileIn(timeData,linksData,years,transfer_techs,"against")
11007      $(not transfer_hasflowProfileIn(linksData,years,transfer_techs,"against"))
11008      = transfer_linksParamIn(linksData,years,transfer_techs,"flowAgainstLimit");
11009   
11010  * aggregate time dimension
11011  parameter transfer_flowProfileIn_aggTime(timeModel,linksData,yearsToCalc,transfer_techs,pc_transfer_flowProfile);
11012  transfer_flowProfileIn_aggTime(timeModelToCalc,linksData,yearsToCalc,transfer_techs,pc_transfer_flowProfile)
11013      $transfer_hasflowProfileIn(linksData,yearsToCalc,transfer_techs,pc_transfer_flowProfile)
11014      = sum(timeData$timeMapping(timeData,timeModelToCalc),
11015            transfer_flowProfileIn(timeData,linksData,yearsToCalc,transfer_techs,pc_transfer_flowProfile)
11016            / timeLength(timeModelToCalc));
11017  option clear = transfer_flowProfileIn;
11018   
11019  transfer_flowProfileIn_aggTime(timeModelToCalc,linksData,yearsToCalc,transfer_techs,pc_transfer_flowProfile)
11020      $(not transfer_hasflowProfileIn(linksData,yearsToCalc,transfer_techs,pc_transfer_flowProfile) and
11021        not transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"limitFlows"))
11022      = 1;
11023   
11024  transfer_flowProfileIn_aggTime(timeModelToCalc,linksData,yearsToCalc,transfer_techs,"along")
11025      $(not transfer_hasflowProfileIn(linksData,yearsToCalc,transfer_techs,"along") and
11026        transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"limitFlows"))
11027      = transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"flowAlongLimit");
11028   
11029  transfer_flowProfileIn_aggTime(timeModelToCalc,linksData,yearsToCalc,transfer_techs,"against")
11030      $(not transfer_hasflowProfileIn(linksData,yearsToCalc,transfer_techs,"against") and
11031        transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"limitFlows"))
11032      = transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"flowAgainstLimit");
11033   
11034  set transfer_finiteLinkLimit(linksModel,years,transfer_techs);
11035  transfer_finiteLinkLimit(linksModelToCalc,yearsToCalc,transfer_techs)
11036      = sum(linksData$links_aggregate(linksModelToCalc,linksData), transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"linksUpperLimit")) > 0
11037          and sum(linksData$links_aggregate(linksModelToCalc,linksData), transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"linksUpperLimit")) < inf;
11038   
11039  set transfer_infiniteLinkLimit(linksModel,years,transfer_techs);
11040  transfer_infiniteLinkLimit(linksModelToCalc,yearsToCalc,transfer_techs)
11041      = sum(linksData$links_aggregate(linksModelToCalc,linksData), transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"linksUpperLimit")) = inf;
11043   
11044  parameter transfer_lengthParam(linksModel,link_types,pc_transfer_lengthParam);
11045  transfer_lengthParam(linksModelToCalc,link_types,pc_transfer_lengthParam)
11046      = sum(linksData$links_aggregate(linksModelToCalc,linksData), transfer_lengthParamIn(linksData,link_types,pc_transfer_lengthParam))
11047          / sum(linksData$links_aggregate(linksModelToCalc,linksData), 1);
11048   
11049  parameter transfer_gridSegments(linksModel,transfer_techs,gridSegments,pc_transfer_gridSegments);
11050  transfer_gridSegments(linksModelToCalc,transfer_techs,gridSegments,pc_transfer_gridSegments)
11051      = smax(linksData$links_aggregate(linksModelToCalc,linksData), transfer_gridSegmentsIn(linksData,transfer_techs,gridSegments,pc_transfer_gridSegments));
11052   
11053  parameter transfer_dcopf_Xtech(linksModel,years,transfer_techs,vintage,gridSegments);
11054  transfer_dcopf_Xtech(linksModelToCalc,yearsToCalc,transfer_techs,vintage,gridSegments)
11055      $(transfer_gridSegments(linksModelToCalc,transfer_techs,gridSegments,"useDCopf")
11056          and transfer_linksParam(linksModelToCalc,yearsToCalc,transfer_techs,"circuits") > 0
11057          and sum(link_types, transfer_reactPerLength(transfer_techs,vintage,link_types,"reactPerLength")) > 0 )
11058      = (1 / sum(linksData
11059                  $links_aggregate(linksModelToCalc,linksData),
11060              1 / ( sum(link_types,
11061                          transfer_lengthParamIn(linksData,link_types,"length")
11062                          * transfer_reactPerLength(transfer_techs,vintage,link_types,"reactPerLength"))
11063                      / transfer_linksParam(linksModelToCalc,yearsToCalc,transfer_techs,"circuits"))));
11064   
11065  set transfer_hasflowProfile(linksModel,years,transfer_techs,pc_transfer_flowProfile);
11066  transfer_hasflowProfile(linksModelToCalc,yearsToCalc,transfer_techs,pc_transfer_flowProfile)
11067      = sum(linksData$links_aggregate(linksModelToCalc,linksData),
11068              transfer_hasflowProfileIn(linksData,yearsToCalc,transfer_techs,pc_transfer_flowProfile));
11069   
11070  * ==== parameter modifications ====
11071  transfer_linksParam(linksModelToCalc,yearsToCalc,transfer_techs,"linksLowerLimit")
11072      $sum(vintage, transfer_techParam(transfer_techs,vintage,"mipLinks"))
11073      = floor(transfer_linksParam(linksModelToCalc,yearsToCalc,transfer_techs,"linksLowerLimit"));
11074  transfer_linksParam(linksModelToCalc,yearsToCalc,transfer_techs,"linksUpperLimit")
11075      $sum(vintage, transfer_techParam(transfer_techs,vintage,"mipLinks"))
11076      = ceil(transfer_linksParam(linksModelToCalc,yearsToCalc,transfer_techs,"linksUpperLimit"));
11077   
11078   
11079  * ==== calculation of mappings ====
11080   
11081  * Technologies with a lifeTime > 0 are available
11082  set transfer_availTech(linksModel,years,transfer_techs,vintage);
11083  transfer_availTech(linksModel,years,transfer_techs,vintage)
11084      $(vintage.val = smax(vintage_a$(vintage_a.val <= years.val
11085          and transfer_techParam(transfer_techs,vintage_a,"lifeTime") > 0), vintage_a.val)) = yes;
11086   
11087  * Technologies to optimize become unavailable if they have an linksUpperLimit of 0
11088  transfer_availTech(linksModelToCalc,years,transfer_techs,vintage)
11089      $(yearsToCalc(years) and transfer_linksParam(linksModelToCalc,years,transfer_techs,"linksUpperLimit") = 0 ) = no;
11090   
11091  * Technologies already built become unavailable if they have an linksBuild of 0
11092  transfer_availTech(linksModelToCalc,years,transfer_techs,vintage)
11093      $( ( not yearsToCalc(years)) and transfer_linksParam(linksModelToCalc,years,transfer_techs,"linksBuild") = 0 ) = no;
11094   
11095  * Used technologies are available technologies over their technical lifeTime
11096  set transfer_usedTech(linksModel,years,transfer_techs,vintage);
11097  transfer_usedTech(linksModelToCalc,years,transfer_techs,vintage)
11098      $(vintage.val <= years.val
11099          and years.val < smax(years_a$transfer_availTech(linksModelToCalc,years_a,transfer_techs,vintage),
11100                                  years_a.val + transfer_techParam(transfer_techs,vintage,"lifeTime"))
11101          ) = yes;
11102   
11103  * Technologies have to be decomissioned in the interval of first avail + lifetime to last avail + lifetime
11104  set transfer_decomTech(linksModel,years,transfer_techs,vintage);
11105  transfer_decomTech(linksModel,years,transfer_techs,vintage)
11106    $(sum(years_a$transfer_usedTech(linksModel,years_a,transfer_techs,vintage), 1)
11107      and sum(yearsToCalc
11108        $(sameas(years, yearsToCalc)
11109          and yearsToCalc.val >= smin(years_a$transfer_availTech(linksModel,years_a,transfer_techs,vintage), years_a.val) + transfer_techParam(transfer_techs,vintage,"lifeTime")
11110          and yearsToCalc.val <= smax(years_a$transfer_availTech(linksModel,years_a,transfer_techs,vintage), years_a.val) + transfer_techParam(transfer_techs,vintage,"lifeTime")), 1))
11111    = yes;
11112   
11113  * Extend the decom frame to the year after the last year of usedTech
11114  transfer_decomTech(linksModel,yearsToCalc,transfer_techs,vintage)
11115    $(transfer_usedTech(linksModel,yearsToCalc-1,transfer_techs,vintage)
11116      and transfer_decomTech(linksModel,yearsToCalc-1,transfer_techs,vintage))
11117    = yes;
11118   
11119  parameter transfer_flowProfile(timeModel,linksModel,years,transfer_techs,vintage,pc_transfer_flowProfile);
11120   
11121  transfer_flowProfile(timeModelToCalc,linksModelToCalc,yearsToCalc,transfer_techs,vintage,"along")
11122      $transfer_finiteLinkLimit(linksModelToCalc,yearsToCalc,transfer_techs)
11123      = (sum(linksData$(links_aggregate(linksModelToCalc,linksData)
11124                       and transfer_incidenceData_flip(linksData) = 1),
11125              transfer_flowProfileIn_aggTime(timeModelToCalc,linksData,yearsToCalc,transfer_techs,"along")
11126              * transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"linksUpperLimit"))
11127          + sum(linksData$(links_aggregate(linksModelToCalc,linksData)
11128                          and transfer_incidenceData_flip(linksData) = -1),
11129              transfer_flowProfileIn_aggTime(timeModelToCalc,linksData,yearsToCalc,transfer_techs,"against")
11130              * transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"linksUpperLimit")))
11131      / sum(linksData$links_aggregate(linksModelToCalc,linksData),
11132              transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"linksUpperLimit"));
11133   
11134  transfer_flowProfile(timeModelToCalc,linksModelToCalc,yearsToCalc,transfer_techs,vintage,"against")
11135      $transfer_finiteLinkLimit(linksModelToCalc,yearsToCalc,transfer_techs)
11136      = (sum(linksData$(links_aggregate(linksModelToCalc,linksData)
11137                       and transfer_incidenceData_flip(linksData) = 1),
11138              transfer_flowProfileIn_aggTime(timeModelToCalc,linksData,yearsToCalc,transfer_techs,"against")
11139              * transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"linksUpperLimit"))
11140          + sum(linksData$(links_aggregate(linksModelToCalc,linksData)
11141                          and transfer_incidenceData_flip(linksData) = -1),
11142              transfer_flowProfileIn_aggTime(timeModelToCalc,linksData,yearsToCalc,transfer_techs,"along")
11143              * transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"linksUpperLimit")))
11144      / sum(linksData$links_aggregate(linksModelToCalc,linksData),
11145              transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"linksUpperLimit"));
11146   
11147  transfer_flowProfile(timeModelToCalc,linksModelToCalc,yearsToCalc,transfer_techs,vintage,"along")
11148      $transfer_infiniteLinkLimit(linksModelToCalc,yearsToCalc,transfer_techs)
11149      = (sum(linksData$(links_aggregate(linksModelToCalc,linksData)
11150                       and transfer_incidenceData_flip(linksData) = 1
11151                       and transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"linksUpperLimit") = inf ),
11152              transfer_flowProfileIn_aggTime(timeModelToCalc,linksData,yearsToCalc,transfer_techs,"along"))
11153          + sum(linksData$(links_aggregate(linksModelToCalc,linksData)
11154                          and transfer_incidenceData_flip(linksData) = -1
11155                          and transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"linksUpperLimit") = inf ),
11156              transfer_flowProfileIn_aggTime(timeModelToCalc,linksData,yearsToCalc,transfer_techs,"against")))
11157      / sum(linksData$(links_aggregate(linksModelToCalc,linksData)
11158                      and transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"linksUpperLimit") = inf ),
11159              1);
11160   
11161  transfer_flowProfile(timeModelToCalc,linksModelToCalc,yearsToCalc,transfer_techs,vintage,"against")
11162      $transfer_infiniteLinkLimit(linksModelToCalc,yearsToCalc,transfer_techs)
11163      = (sum(linksData$(links_aggregate(linksModelToCalc,linksData)
11164                       and transfer_incidenceData_flip(linksData) = 1
11165                       and transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"linksUpperLimit") = inf ),
11166              transfer_flowProfileIn_aggTime(timeModelToCalc,linksData,yearsToCalc,transfer_techs,"against"))
11167          + sum(linksData$(links_aggregate(linksModelToCalc,linksData)
11168                          and transfer_incidenceData_flip(linksData) = -1
11169                          and transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"linksUpperLimit") = inf ),
11170              transfer_flowProfileIn_aggTime(timeModelToCalc,linksData,yearsToCalc,transfer_techs,"along")))
11171      / sum(linksData$(links_aggregate(linksModelToCalc,linksData)
11172                      and transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"linksUpperLimit") = inf ),
11173              1);
11174  option clear = transfer_flowProfileIn_aggTime;
11175   
11176  * Orientation of links affects the flowAlongLimit/flowAgainstLimit
11177   
11178  transfer_linksParam(linksModelToCalc,years,transfer_techs,"flowAlongLimit")
11179      $transfer_finiteLinkLimit(linksModelToCalc,years,transfer_techs)
11180      = (sum(linksData$(links_aggregate(linksModelToCalc,linksData)
11181                       and transfer_incidenceData_flip(linksData) = 1),
11182              transfer_linksParamIn(linksData,years,transfer_techs,"flowAlongLimit")
11183              * transfer_linksParamIn(linksData,years,transfer_techs,"linksUpperLimit"))
11184          + sum(linksData$(links_aggregate(linksModelToCalc,linksData)
11185                          and transfer_incidenceData_flip(linksData) = -1),
11186              transfer_linksParamIn(linksData,years,transfer_techs,"flowAgainstLimit")
11187              * transfer_linksParamIn(linksData,years,transfer_techs,"linksUpperLimit")))
11188      / sum(linksData$links_aggregate(linksModelToCalc,linksData),
11189              transfer_linksParamIn(linksData,years,transfer_techs,"linksUpperLimit"));
11190   
11191  transfer_linksParam(linksModelToCalc,years,transfer_techs,"flowAgainstLimit")
11192      $transfer_finiteLinkLimit(linksModelToCalc,years,transfer_techs)
11193      = (sum(linksData$(links_aggregate(linksModelToCalc,linksData)
11194                       and transfer_incidenceData_flip(linksData) = -1),
11195              transfer_linksParamIn(linksData,years,transfer_techs,"flowAlongLimit")
11196              * transfer_linksParamIn(linksData,years,transfer_techs,"linksUpperLimit"))
11197          + sum(linksData$(links_aggregate(linksModelToCalc,linksData)
11198                          and transfer_incidenceData_flip(linksData) = 1),
11199              transfer_linksParamIn(linksData,years,transfer_techs,"flowAgainstLimit")
11200              * transfer_linksParamIn(linksData,years,transfer_techs,"linksUpperLimit")))
11201      / sum(linksData$links_aggregate(linksModelToCalc,linksData),
11202              transfer_linksParamIn(linksData,years,transfer_techs,"linksUpperLimit"));
11203   
11204  transfer_linksParam(linksModelToCalc,years,transfer_techs,"flowAlongLimit")
11205      $transfer_infiniteLinkLimit(linksModelToCalc,years,transfer_techs)
11206      = (sum(linksData$(links_aggregate(linksModelToCalc,linksData)
11207                       and transfer_incidenceData_flip(linksData) = 1
11208                       and transfer_linksParamIn(linksData,years,transfer_techs,"linksUpperLimit") = inf),
11209              transfer_linksParamIn(linksData,years,transfer_techs,"flowAlongLimit"))
11210          + sum(linksData$(links_aggregate(linksModelToCalc,linksData)
11211                          and transfer_incidenceData_flip(linksData) = -1
11212                          and transfer_linksParamIn(linksData,years,transfer_techs,"linksUpperLimit") = inf),
11213              transfer_linksParamIn(linksData,years,transfer_techs,"flowAgainstLimit")))
11214      / sum(linksData$(links_aggregate(linksModelToCalc,linksData)
11215                      and transfer_linksParamIn(linksData,years,transfer_techs,"linksUpperLimit") = inf ),
11216              1);
11217   
11218  transfer_linksParam(linksModelToCalc,years,transfer_techs,"flowAgainstLimit")
11219      $transfer_infiniteLinkLimit(linksModelToCalc,years,transfer_techs)
11220      = (sum(linksData$(links_aggregate(linksModelToCalc,linksData)
11221                       and transfer_incidenceData_flip(linksData) = -1
11222                       and transfer_linksParamIn(linksData,years,transfer_techs,"linksUpperLimit") = inf),
11223              transfer_linksParamIn(linksData,years,transfer_techs,"flowAlongLimit"))
11224          + sum(linksData$(links_aggregate(linksModelToCalc,linksData)
11225                          and transfer_incidenceData_flip(linksData) = 1
11226                          and transfer_linksParamIn(linksData,years,transfer_techs,"linksUpperLimit") = inf),
11227              transfer_linksParamIn(linksData,years,transfer_techs,"flowAgainstLimit")))
11228      / sum(linksData$(links_aggregate(linksModelToCalc,linksData)
11229                      and transfer_linksParamIn(linksData,years,transfer_techs,"linksUpperLimit") = inf ),
11230              1);
11231   
11232  * Mapping for grid segments using DC optimal power flow
11233  set gridSegments_dcopf(linksModel,transfer_techs,gridSegments);
11234  gridSegments_dcopf(linksModelToCalc,transfer_techs,gridSegments)
11235      $transfer_gridSegments(linksModelToCalc,transfer_techs,gridSegments,"useDCopf")
11237      = yes;
11239   
11240  * Ensure each grid segment uses exactly one commodity
11241  parameter checkGridSegmentCommodities(gridSegments);
11242  checkGridSegmentCommodities(gridSegments)
11243      = sum (commodity$(sum((linksModelToCalc,transfer_techs,vintage)
11244                              $( transfer_coefficient(transfer_techs,vintage,commodity,"coefficient") > 0
11245                                  and gridSegments_dcopf(linksModelToCalc,transfer_techs,gridSegments)) , 1) > 0), 1);
11246   
11247  parameter transfer_incidenceSegments(nodesModel,linksModel,years,gridSegments);
11248  transfer_incidenceSegments(nodesModelToCalc,linksModelToCalc,yearsToCalc,gridSegments)
11249      $(sum((transfer_techs,vintage)$(transfer_usedTech(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
11250                                          and gridSegments_dcopf(linksModelToCalc,transfer_techs,gridSegments)
11251                                          and transfer_incidenceModel(nodesModelToCalc,linksModelToCalc) <> 0), 1) > 0)
11252      = transfer_incidenceModel(nodesModelToCalc,linksModelToCalc);
11253   
11254   
11258   
11259  scalar transfer_enableMIP;
11260  transfer_enableMIP = sum(transfer_usedTech(linksModelToCalc,yearsToCalc,transfer_techs,vintage)$transfer_techParam(transfer_techs,vintage,"mipLinks"), 1 );
11261   
11262   
11263  * ==== definition of variables ====
11264   
11265  * Initialise variables for linksBuild
11266  transfer_linksBuild.l(linksModel,years,transfer_techs,vintage)
11267      $transfer_availTech(linksModel,years,transfer_techs,vintage)
11268      = transfer_linksParam(linksModel,years,transfer_techs,"linksBuild");
11269  transfer_linksBuild.lo(linksModel,yearsToCalc,transfer_techs,vintage)
11270      $transfer_availTech(linksModel,yearsToCalc,transfer_techs,vintage)
11271      = transfer_linksBuild.l(linksModel,yearsToCalc,transfer_techs,vintage);
11272  transfer_linksBuild.fx(linksModel,years,transfer_techs,vintage)
11273      $transfer_linksParam(linksModel,years,transfer_techs,"noExpansion")
11274      = transfer_linksBuild.l(linksModel,years,transfer_techs,vintage);
11275   
11276  * Initialise variables for linksDecom
11277  transfer_linksDecom.l(linksModel,years,transfer_techs,vintage)
11278      $(transfer_decomTech(linksModel,years,transfer_techs,vintage)
11279        and years.val < sum(yearsToCalc$(ord(yearsToCalc) = 1), yearsToCalc.val))
11280      = sum((years_a,years_aa)$(sameas(years-1, years_aa)
11281                        and years_a.val > years_aa.val - transfer_techParam(transfer_techs,vintage,'lifeTime')
11282                        and years_a.val <= years.val - transfer_techParam(transfer_techs,vintage,'lifeTime')
11283                        and transfer_availTech(linksModel,years_a,transfer_techs,vintage)),
11284          transfer_linksBuild.l(linksModel,years_a,transfer_techs,vintage));
11285   
11286  transfer_linksDecom.l(linksModel,yearsToCalc,transfer_techs,vintage)
11287    $transfer_decomTech(linksModel,yearsToCalc,transfer_techs,vintage)
11288    = sum(years$
11289          (years.val < sum(yearsToCalc_a$(ord(yearsToCalc_a) = 1), yearsToCalc_a.val)
11290            and transfer_availTech(linksModel,years,transfer_techs,vintage)
11291            and years.val > sum(years_a$sameas(years_a, yearsToCalc-1), years_a.val) - transfer_techParam(transfer_techs,vintage,'lifeTime')
11292            and years.val <= yearsToCalc.val - transfer_techParam(transfer_techs,vintage,'lifeTime')),
11293        transfer_linksBuild.l(linksModel,years,transfer_techs,vintage))
11294      + sum(yearsToCalc_a$
11295          (yearsToCalc_a.val < sum(yearsToCalc_aa$(ord(yearsToCalc_aa) > 1), yearsToCalc_a.val)
11296            and transfer_availTech(linksModel,yearsToCalc_a,transfer_techs,vintage)
11297            and yearsToCalc_a.val > sum(years_a$sameas(years_a, yearsToCalc-1), years_a.val) - transfer_techParam(transfer_techs,vintage,'lifeTime')
11298            and yearsToCalc_a.val <= yearsToCalc.val - transfer_techParam(transfer_techs,vintage,'lifeTime')),
11299        transfer_linksBuild.l(linksModel,yearsToCalc_a,transfer_techs,vintage));
11300        ;
11301   
11302  transfer_linksDecom.lo(linksModel,yearsToCalc,transfer_techs,vintage)
11303      $(transfer_usedTech(linksModel,yearsToCalc,transfer_techs,vintage)
11304          and not transfer_techParam(transfer_techs,vintage,"freeDecom"))
11305      = transfer_linksDecom.l(linksModel,yearsToCalc,transfer_techs,vintage)
11306   
11307  * Calculate planned transfer links expansion
11308  parameter transfer_linksPlanned(linksModel,years,transfer_techs,vintage);
11309  transfer_linksPlanned(linksModel,years,transfer_techs,vintage) = 0;
11310  loop(years,
11311    transfer_linksPlanned(linksModel,years,transfer_techs,vintage)
11312      =
11313      transfer_linksPlanned(linksModel,years-1,transfer_techs,vintage)
11314          $transfer_usedTech(linksModel,years-1,transfer_techs,vintage)
11315      + transfer_linksBuild.l(linksModel,years,transfer_techs,vintage)
11316          $transfer_availTech(linksModel,years,transfer_techs,vintage)
11317      - transfer_linksDecom.l(linksModel,years,transfer_techs,vintage)
11318          $transfer_usedTech(linksModel,years,transfer_techs,vintage);
11319  );
11320   
11321  * Set initial state for planned units
11322  transfer_linksTotal.l(linksModel,years,transfer_techs,vintage)
11323    = transfer_linksPlanned(linksModel,years,transfer_techs,vintage)
11324   
11325  * Calculate if planned links expansion is bound by upper and lower limits
11326  set transfer_linkBoundsFixed(linksModel,years,transfer_techs);
11327  transfer_linkBoundsFixed(linksModel,years,transfer_techs)
11328    $(sum(vintage$transfer_usedTech(linksModel,years,transfer_techs,vintage),
11329          transfer_linksPlanned(linksModel,years,transfer_techs,vintage))
11330      = transfer_linksParam(linksModel,years,transfer_techs,"linksUpperLimit")
11331    and sum(vintage$transfer_usedTech(linksModel,years,transfer_techs,vintage),
11332          transfer_linksPlanned(linksModel,years,transfer_techs,vintage))
11333      = transfer_linksParam(linksModel,years,transfer_techs,"linksLowerLimit"))
11334    = yes;
11335   
11336  * Fix linksBuild, linksDecom, linksTotal if levels are predetermined by upper and lower limits
11337  transfer_linksBuild.fx(linksModel,years,transfer_techs,vintage)
11338    $(transfer_availTech(linksModel,years,transfer_techs,vintage)
11339      and transfer_linkBoundsFixed(linksModel,years,transfer_techs))
11340    = transfer_linksBuild.l(linksModel,years,transfer_techs,vintage);
11341  transfer_linksDecom.fx(linksModel,years,transfer_techs,vintage)
11342    $(transfer_usedTech(linksModel,years,transfer_techs,vintage)
11343      and transfer_linkBoundsFixed(linksModel,years,transfer_techs))
11344    = transfer_linksDecom.l(linksModel,years,transfer_techs,vintage);
11345  transfer_linksTotal.fx(linksModel,years,transfer_techs,vintage)
11346    $(transfer_usedTech(linksModel,years,transfer_techs,vintage)
11347      and transfer_linkBoundsFixed(linksModel,years,transfer_techs))
11348    = transfer_linksTotal.l(linksModel,years,transfer_techs,vintage);
11349   
11350  transfer_linksTotal_MIP.up(linksModel,years,transfer_techs,vintage)
11351      $(transfer_usedTech(linksModel,years,transfer_techs,vintage)
11352        and transfer_techParam(transfer_techs,vintage,"miplinks") = 1)
11353      = transfer_linksParam(linksModel,years,transfer_techs,"linksUpperLimit");
11354   
11355  * Add parameter for fixing capacities during myopic runs
11356  parameter transfer_linksDelta(linksModel,years,transfer_techs);
11357   
11358   
11359  * ==== declaration of equations ====
11360   
11361  equations
11362    Eq_transfer_linksBalance(linksModel,years,transfer_techs,vintage
11363      ) "Ensures the links balance over the planning period."
11364    Eq_transfer_linksFixedDecom(linksModel,years,transfer_techs,vintage
11365      ) "Restricts the fixed decommissioning of links over the planning period."
11366    Eq_transfer_linksFreeDecom(linksModel,years,transfer_techs,vintage
11367      ) "Restricts the free decommissioning of links over the planning period."
11368    Eq_transfer_linksUpperLimit(linksModel,years,transfer_techs
11369      ) "Upper bound for the total number of links."
11370    Eq_transfer_linksLowerLimit(linksModel,years,transfer_techs
11371      ) "Lower bound for the total number of links."
11372    Eq_transfer_linksTotalMIP(linksModel,years,transfer_techs,vintage
11373      ) "Fixes the total number of links to the corresponding integer variable."
11374   
11375    Eq_transfer_flowAlongUpperLimit(timeModel,linksModel,years,transfer_techs,vintage
11376      ) "Upper bound for the flow along the transfer links."
11377    Eq_transfer_flowAgainstUpperLimit(timeModel,linksModel,years,transfer_techs,vintage
11378      ) "Upper bound for the flow against the transfer links."
11379    Eq_transfer_dcopf_angleFlows(timeModel,linksModel,years,gridSegments
11380      )
11381    Eq_transfer_dcopf_cycleFlows(timeModel,years,cycles,gridSegments
11382      )
11383    ;
11384   
11385   
11386  * ==== equation definition ====
11387  * // ## Equations
11388  * // ### Transfer Links Balance
11389  * // Ensures that the transfer between nodes is balanced.
11390  * // {Eq_transfer_linksBalance}
11391  Eq_transfer_linksBalance(linksModelToCalc,yearsSel,transfer_techs,vintage)
11392      $((transfer_usedTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
11393            or sum(years$sameas(years,yearsSel), transfer_usedTech(linksModelToCalc,years-1,transfer_techs,vintage)))
11394          and not transfer_linkBoundsFixed(linksModelToCalc,yearsSel,transfer_techs))
11395      ..
11396      transfer_linksTotal(linksModelToCalc,yearsSel,transfer_techs,vintage)
11397      =e=
11398      sum(yearsToCalc$(ord(yearsToCalc) = 1 and sameas(yearsToCalc, yearsSel)),
11399        sum(years$sameas(years, yearsToCalc),
11400          transfer_linksTotal(linksModelToCalc,years-1,transfer_techs,vintage)
11401            $transfer_usedTech(linksModelToCalc,years-1,transfer_techs,vintage)))
11402      + sum((yearsToCalc)$(ord(yearsToCalc) > 1 and sameas(yearsToCalc, yearsSel)),
11403        transfer_linksTotal(linksModelToCalc,yearsToCalc-1,transfer_techs,vintage)
11404          $transfer_usedTech(linksModelToCalc,yearsToCalc-1,transfer_techs,vintage))
11405      + transfer_linksBuild(linksModelToCalc,yearsSel,transfer_techs,vintage)
11406          $transfer_availTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
11407      - transfer_linksDecom(linksModelToCalc,yearsSel,transfer_techs,vintage)
11408          $transfer_usedTech(linksModelToCalc,yearsSel,transfer_techs,vintage);
11409   
11410  * // ### Transfer Links Fixed Decommissioning
11411  * // Balances fixed link decommissioning.
11412  * // {Eq_transfer_linksFixedDecom}
11413  Eq_transfer_linksFixedDecom(linksModelToCalc,yearsSel,transfer_techs,vintage)
11414      $(transfer_decomTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
11415          and not transfer_techParam(transfer_techs,vintage,"freeDecom") = 1
11416          and not transfer_linkBoundsFixed(linksModelToCalc,yearsSel,transfer_techs))
11417      ..
11418      transfer_linksDecom(linksModelToCalc,yearsSel,transfer_techs,vintage)
11419      =e=
11420      sum(years$
11421          (transfer_availTech(linksModelToCalc,years,transfer_techs,vintage)
11422              and years.val > sum(yearsToCalc$sameas(yearsToCalc+1, yearsSel), yearsToCalc.val) - transfer_techParam(transfer_techs,vintage,'lifeTime')
11423              and years.val <= yearsSel.val - transfer_techParam(transfer_techs,vintage,'lifeTime')),
11424          transfer_linksBuild(linksModelToCalc,years,transfer_techs,vintage));
11425   
11426  * // ### Transfer Links Free Decommissioning
11427  * // Balances free link decommissioning.
11428  * // {Eq_transfer_linksFreeDecom}
11429  Eq_transfer_linksFreeDecom(linksModelToCalc,yearsSel,transfer_techs,vintage)
11430      $((transfer_decomTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
11431          or transfer_usedTech(linksModelToCalc,yearsSel,transfer_techs,vintage))
11432          and transfer_techParam(transfer_techs,vintage,"freeDecom") = 1)
11433      ..
11434      sum(years$
11435            ((transfer_decomTech(linksModelToCalc,years,transfer_techs,vintage)
11436              or transfer_usedTech(linksModelToCalc,years,transfer_techs,vintage))
11437              and years.val < sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)),
11438          transfer_linksDecom(linksModelToCalc,years,transfer_techs,vintage))
11439      + sum(yearsToCalc$
11440            ((transfer_decomTech(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
11441              or transfer_usedTech(linksModelToCalc,yearsToCalc,transfer_techs,vintage))
11442              and yearsToCalc.val >= sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
11443              and yearsToCalc.val <= yearsSel.val),
11444          transfer_linksDecom(linksModelToCalc,yearsToCalc,transfer_techs,vintage))
11445      =g=
11446      sum(years$
11447            (transfer_availTech(linksModelToCalc,years,transfer_techs,vintage)
11448              and years.val < sum(yearsToCalc$(ord(yearsToCalc)=1), yearsToCalc.val) - transfer_techParam(transfer_techs,vintage,'lifeTime')),
11449          transfer_linksBuild(linksModelToCalc,years,transfer_techs,vintage))
11450      + sum(yearsToCalc$
11451            (transfer_availTech(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
11452              and yearsToCalc.val >= sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
11453              and yearsToCalc.val <= yearsSel.val - transfer_techParam(transfer_techs,vintage,'lifeTime')),
11454          transfer_linksBuild(linksModelToCalc,yearsToCalc,transfer_techs,vintage));
11455   
11456  * // ### Transfer Links Lower Limit
11457  * // Ensures link capacity lower limits.
11458  * // {Eq_transfer_linksLowerLimit}
11459  Eq_transfer_linksLowerLimit(linksModelToCalc,yearsSel,transfer_techs)
11460      $(transfer_linksParam(linksModelToCalc,yearsSel,transfer_techs,'linksLowerLimit') > 0 )
11461      ..
11462      sum(vintage$transfer_usedTech(linksModelToCalc,yearsSel,transfer_techs,vintage),
11463          transfer_linksTotal(linksModelToCalc,yearsSel,transfer_techs,vintage))
11464      =g=
11465      transfer_linksParam(linksModelToCalc,yearsSel,transfer_techs,"linksLowerLimit");
11466   
11467  * // ### Transfer Links Upper Limit
11468  * // Ensures link capacity upper limits.
11469  * // {Eq_transfer_linksUpperLimit}
11470  Eq_transfer_linksUpperLimit(linksModelToCalc,yearsSel,transfer_techs)
11471      $(transfer_linksParam(linksModelToCalc,yearsSel,transfer_techs,'linksUpperLimit') >= 0
11472          and transfer_linksParam(linksModelToCalc,yearsSel,transfer_techs,'linksUpperLimit') < +inf )
11473      ..
11474      sum(vintage$transfer_usedTech(linksModelToCalc,yearsSel,transfer_techs,vintage),
11475          transfer_linksTotal(linksModelToCalc,yearsSel,transfer_techs,vintage))
11476      =l=
11477      transfer_linksParam(linksModelToCalc,yearsSel,transfer_techs,"linksUpperLimit");
11478   
11479  * // ### Transfer Links Total MIP
11480  * // Ensures number of MIP links.
11481  * // {Eq_transfer_linksTotalMIP}
11482  Eq_transfer_linksTotalMIP(linksModelToCalc,yearsSel,transfer_techs,vintage)
11483      $(transfer_usedTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
11484          and transfer_techParam(transfer_techs,vintage,"mipLinks"))
11485      ..
11486      transfer_linksTotal(linksModelToCalc,yearsSel,transfer_techs,vintage)
11487      =e=
11488      transfer_linksTotal_MIP(linksModelToCalc,yearsSel,transfer_techs,vintage);
11489   
11490  * // ### Transfer Links Flow Along Upper Limit
11491  * // Ensures links flow along upper limit.
11492  * // {Eq_transfer_flowAlongUpperLimit}
11493  Eq_transfer_flowAlongUpperLimit(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
11494      $transfer_usedTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
11495      ..
11496      transfer_flowAlong(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
11497      =l=
11498      transfer_flowProfile(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage,"along")
11499      * transfer_linksTotal(linksModelToCalc,yearsSel,transfer_techs,vintage)
11500      * transfer_techParam(transfer_techs,vintage,"flowUpperLimit")
11501      ;
11502   
11503  * // ### Transfer Links Flow Against Upper Limit
11504  * // Ensures links flow against upper limit.
11505  * // {Eq_transfer_flowAgainstUpperLimit}
11506  Eq_transfer_flowAgainstUpperLimit(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
11507      $transfer_usedTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
11508      ..
11509      transfer_flowAgainst(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
11510      =l=
11511      transfer_flowProfile(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage,"against")
11512      * transfer_linksTotal(linksModelToCalc,yearsSel,transfer_techs,vintage)
11513      * transfer_techParam(transfer_techs,vintage,"flowUpperLimit")
11514      ;
11515   
11516  set transfer_usedOpf(linksModel,years,gridSegments,transfer_techs,vintage);
11517  transfer_usedOpf(linksModel,yearsToCalc,gridSegments,transfer_techs,vintage)
11518      $(transfer_usedTech(linksModel,yearsToCalc,transfer_techs,vintage)
11519          and gridSegments_dcopf(linksModel,transfer_techs,gridSegments))
11520      = yes;
11521   
11522  set transfer_usedOpfLinks(linksModel,years,gridSegments);
11523  option transfer_usedOpfLinks < transfer_usedOpf;
11524   
11525  set transfer_usedOpfSegments(years,gridSegments);
11526  option transfer_usedOpfSegments < transfer_usedOpf;
11527   
11531  * // ### Transfer DC optimal flow angle flows
11532  * // Angle flows.
11533  * // {Eq_transfer_dcopf_cycleFlows}
11534  Eq_transfer_dcopf_angleFlows(timeModelSel,linksModelToCalc,yearsSel,gridSegments)
11535      $transfer_usedOpfLinks(linksModelToCalc,yearsSel,gridSegments)
11536      ..
11537      sum ((transfer_techs,vintage)
11538              $transfer_usedOpf(linksModelToCalc,yearsSel,gridSegments,transfer_techs,vintage),
11539          ( transfer_flowAlong(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
11540              - transfer_flowAgainst(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage) )
11541          * transfer_dcopf_Xtech(linksModelToCalc,yearsSel,transfer_techs,vintage,gridSegments) )
11542      =e=
11543      sum ( nodesModelSel,
11544          - transfer_incidenceModel(nodesModelSel,linksModelToCalc)
11545          * transfer_dcopf_voltageAngle(timeModelSel,nodesModelSel,yearsSel,gridSegments));
11549   
11550   
11551  * ==== model definition ====
11552   
11553  Model M_transfer
11554  /
11555    Eq_transfer_linksBalance
11556    Eq_transfer_linksFixedDecom
11557    Eq_transfer_linksFreeDecom
11558    Eq_transfer_linksLowerLimit
11559    Eq_transfer_linksUpperLimit
11560    Eq_transfer_linksTotalMIP
11561    Eq_transfer_flowAlongUpperLimit
11562    Eq_transfer_flowAgainstUpperLimit
11566    Eq_transfer_dcopf_angleFlows
11570  /;
INCLUDE    C:\Local\REMix\framework\remix\framework\model\source\core\sourcesink.gms
11572  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
11573  * SPDX-License-Identifier: BSD-3-Clause
11574   
11575  * // # core_sourcesink
11576  * // The equations in this file describe the sources and sinks in the model.
11577   
11578  * // ## Variables
11579  * // {special_table_sourcesink_variables}
12006   
12007  * // ## Aggregation of profiles
12008  * // Profiles are rescaled based on the annual sum.
12009   
12010  set sourcesink_usesProfileScaling(nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile);
12011  sourcesink_usesProfileScaling(nodesData,years,sourcesink_techs,commodity,"fixed")
12012      $sourcesink_configIn(nodesData,years,sourcesink_techs,commodity,"scaleFixProfileWithFixSum") = yes;
12013  sourcesink_usesProfileScaling(nodesData,years,sourcesink_techs,commodity,"lower")
12014      $sourcesink_configIn(nodesData,years,sourcesink_techs,commodity,"scaleLowProfileWithLowSum") = yes;
12015  sourcesink_usesProfileScaling(nodesData,years,sourcesink_techs,commodity,"upper")
12016      $sourcesink_configIn(nodesData,years,sourcesink_techs,commodity,"scaleUpProfileWithUpSum") = yes;
12017   
12018  parameter sourcesink_ProfileSum(nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile);
12019  sourcesink_ProfileSum(nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile)
12020      $sourcesink_usesProfileScaling(nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile)
12021      = sum(timeData, sourcesink_profileIn(timeData,nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile));
12022   
12023  parameter sourcesink_ProfileAbsSum(nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile);
12024  sourcesink_ProfileAbsSum(nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile)
12025      $sourcesink_usesProfileScaling(nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile)
12026      = sum(timeData, abs(sourcesink_profileIn(timeData,nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile)));
12027   
12028  set sourcesink_ProfileScaleError(nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile);
12029  sourcesink_ProfileScaleError(nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile)
12030      $(sourcesink_usesProfileScaling(nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile)
12031          and sourcesink_ProfileSum(nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile) = 0
12032          and sourcesink_ProfileAbsSum(nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile) > 0)
12033      = yes;
12034   
12035  abort$sum((nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile),
12036              sourcesink_ProfileScaleError(nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile)) "One or more profiles cannot be rescaled as their annual sum equals zero!"
12037   
12038  * calculate scaling factor for each type
12039  parameter sourcesink_scalingFactor(nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile);
12040  sourcesink_scalingFactor(nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile)
12041      $(sourcesink_ProfileSum(nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile)
12042          and sourcesink_usesProfileScaling(nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile))
12043      = sum(pc_sourcesink_annualSum$sameas(pc_sourcesink_profile,pc_sourcesink_annualSum),
12044          sourcesink_annualSumIn(nodesData,years,sourcesink_techs,commodity,pc_sourcesink_annualSum)
12045              / sourcesink_ProfileSum(nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile));
12046   
12047  * rescale profiles
12048  sourcesink_profileIn(timeData,nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile)
12049      $sourcesink_usesProfileScaling(nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile)
12050      = sourcesink_profileIn(timeData,nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile)
12051          * sourcesink_scalingFactor(nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile)
12052   
12053  * // ## Aggregation of profiles
12054  * // Profiles are aggregated based on the mapping from data nodes to model nodes.
12055   
12056  * ==== aggregation of profiles ====
12057  set sourcesink_usesProfileIn(nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile);
12058  option sourcesink_usesProfileIn < sourcesink_profileIn
12059   
12060  set sourcesink_usesProfile(nodesModel,years,sourcesink_techs,commodity,pc_sourcesink_profile);
12061  sourcesink_usesProfile(nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity,pc_sourcesink_profile)
12062      $sum(nodesData$(aggregateNodesModel(nodesData,nodesModelToCalc)
12063          and sourcesink_usesProfileIn(nodesData,yearsToCalc,sourcesink_techs,commodity,pc_sourcesink_profile)), 1)
12064      = yes;
12065   
12066  * aagregate time dimension
12067  parameter sourcesink_profileIn_aggTime(timeModel,nodesData,yearsToCalc,sourcesink_techs,commodity,pc_sourcesink_profile);
12068  sourcesink_profileIn_aggTime(timeModelToCalc,nodesData,yearsToCalc,sourcesink_techs,commodity,pc_sourcesink_profile)
12069    $sourcesink_usesProfileIn(nodesData,yearsToCalc,sourcesink_techs,commodity,pc_sourcesink_profile)
12070    = sum(timeData$timeMapping(timeData,timeModelToCalc),
12071            sourcesink_profileIn(timeData,nodesData,yearsToCalc,sourcesink_techs,commodity,pc_sourcesink_profile)
12072            / timeLength(timeModelToCalc));
12073  option clear = sourcesink_profileIn;
12074   
12075  * sum up absolute profiles
12076  parameter sourcesink_profile(timeModel,nodesModel,years,sourcesink_techs,commodity,pc_sourcesink_profile);
12077  sourcesink_profile(timeModelToCalc,nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity,pc_sourcesink_profile)
12078      $sourcesink_usesProfile(nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity,pc_sourcesink_profile)
12079      = sum(nodesData$aggregateNodesModel(nodesData,nodesModelToCalc),
12080              sourcesink_profileIn_aggTime(timeModelToCalc,nodesData,yearsToCalc,sourcesink_techs,commodity,pc_sourcesink_profile));
12081  option clear = sourcesink_profileIn_aggTime;
12082   
12083  set sourcesink_enabled(nodesModel,years,sourcesink_techs,commodity);
12084  option sourcesink_enabled < sourcesink_config;
12085   
12087   
12088  * ==== declaration of variables ====
12089  * // ## Bounding of variables
12090  * // Source-sink variables with either a lower, fixed, or upper profile are bounded to their respective profiles given by the input parameters.
12091   
12092  sourcesink_flow.lo(timeModelToCalc,nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity)
12093      $( sourcesink_enabled(nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity)
12094          and sourcesink_config(nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity,"usesLowerProfile") = 1
12095          and sourcesink_profile(timeModelToCalc,nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity,"lower") > -inf )
12096      = sourcesink_profile(timeModelToCalc,nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity,"lower");
12097   
12098  sourcesink_flow.up(timeModelToCalc,nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity)
12099      $( sourcesink_enabled(nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity)
12100          and sourcesink_config(nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity,"usesUpperProfile") = 1
12101          and sourcesink_profile(timeModelToCalc,nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity,"upper") < inf )
12102      = sourcesink_profile(timeModelToCalc,nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity,"upper");
12103   
12104  sourcesink_flow.fx(timeModelToCalc,nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity)
12105      $( sourcesink_enabled(nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity)
12106          and sourcesink_config(nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity,"usesFixedProfile") = 1 )
12107      = sourcesink_profile(timeModelToCalc,nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity,"fixed");
12108   
12109  option clear = sourcesink_profile;
12110   
12111   
12112  * ==== equation definition ====
12113  * // ## Equations
12114  equations
12115  Eq_sourcesink_useFixedSum(nodesModel,years,sourcesink_techs,commodity
12116      ) "Fixes the annual sum from sources / to sinks"
12117  Eq_sourcesink_useLowerSum(nodesModel,years,sourcesink_techs,commodity
12118      ) "Limits the lower sum from sources / to sinks"
12119  Eq_sourcesink_useUpperSum(nodesModel,years,sourcesink_techs,commodity
12120      ) "Limits the upper sum from sources / to sinks"
12121    ;
12122   
12123  * // ### Fixed annual sums for sources and sinks
12124  * // Ensures that the sources and sinks with annual sums given as fixed limits are balanced.
12125  * // {Eq_sourcesink_useFixedSum}
12126  Eq_sourcesink_useFixedSum(nodesModelSel,yearsSel,sourcesink_techs,commodity)
12127      $( sourcesink_enabled(nodesModelSel,yearsSel,sourcesink_techs,commodity)
12128          and sourcesink_config(nodesModelSel,yearsSel,sourcesink_techs,commodity,"usesFixedSum") = 1 )
12129      ..
12130      sum(timeModelSel,
12131          sourcesink_flow(timeModelSel,nodesModelSel,yearsSel,sourcesink_techs,commodity))
12132      =e=
12133      sourcesink_annualSum(nodesModelSel,yearsSel,sourcesink_techs,commodity,"fixed")
12134      ;
12135   
12136  * // ### Lower annual sums for sources and sinks
12137  * // Ensures that the sources and sinks with annual sums given as lower limits are balanced.
12138  * // {Eq_sourcesink_useLowerSum}
12139  Eq_sourcesink_useLowerSum(nodesModelSel,yearsSel,sourcesink_techs,commodity)
12140      $( sourcesink_enabled(nodesModelSel,yearsSel,sourcesink_techs,commodity)
12141          and sourcesink_config(nodesModelSel,yearsSel,sourcesink_techs,commodity,"usesLowerSum") = 1
12142          and sourcesink_annualSum(nodesModelSel,yearsSel,sourcesink_techs,commodity,"lower") > -inf )
12143      ..
12144      sum(timeModelSel,
12145          sourcesink_flow(timeModelSel,nodesModelSel,yearsSel,sourcesink_techs,commodity))
12146      =g=
12147      sourcesink_annualSum(nodesModelSel,yearsSel,sourcesink_techs,commodity,"lower")
12148      ;
12149   
12150  * // ### Upper annual sums for sources and sinks
12151  * // Ensures that the sources and sinks with annual sums given as upper limits are balanced.
12152  * // {Eq_sourcesink_useUpperSum}
12153  Eq_sourcesink_useUpperSum(nodesModelSel,yearsSel,sourcesink_techs,commodity)
12154      $( sourcesink_enabled(nodesModelSel,yearsSel,sourcesink_techs,commodity)
12155          and sourcesink_config(nodesModelSel,yearsSel,sourcesink_techs,commodity,"usesUpperSum") = 1
12156          and sourcesink_annualSum(nodesModelSel,yearsSel,sourcesink_techs,commodity,"upper") < inf )
12157      ..
12158      sum(timeModelSel,
12159          sourcesink_flow(timeModelSel,nodesModelSel,yearsSel,sourcesink_techs,commodity))
12160      =l=
12161      sourcesink_annualSum(nodesModelSel,yearsSel,sourcesink_techs,commodity,"upper")
12162      ;
12163   
12164   
12165  * ==== model definition ====
12166   
12167  Model M_sourcesink
12168  /
12169    Eq_sourcesink_useFixedSum
12170    Eq_sourcesink_useLowerSum
12171    Eq_sourcesink_useUpperSum
12172  /;
INCLUDE    C:\Local\REMix\framework\remix\framework\model\source\core\balance.gms
12174  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
12175  * SPDX-License-Identifier: BSD-3-Clause
12176   
12177  * // # balance
12178  * // The equations in this file describe the commodity balancing in the model.
12179   
12180  Equations
12181    Eq_balance_commodities(timeModel,nodesModel,years,commodity
12182      ) "Balance for each commodity used in each time step, region, and year";
12183   
12184   
12185  * ==== calculation of mappings ====
12186   
12187  set balance_techComm(techs,commodity);
12188  balance_techComm(converter_techs(techs),commodity)
12189      $sum((vintage,activity)$converter_coefficient(converter_techs,vintage,activity,commodity,"coefficient"), 1) = yes;
12190  balance_techComm(storage_techs(techs),commodity)
12191      $sum((vintage)$storage_sizeParam(storage_techs,vintage,commodity,"size"), 1) = yes;
12192  balance_techComm(transfer_techs(techs),commodity)
12193      $sum((vintage)$transfer_coefficient(transfer_techs,vintage,commodity,"coefficient"), 1) = yes;
12194  balance_techComm(sourcesink_techs(techs),commodity)
12195      $sum((nodesModelToCalc,yearsToCalc)$sourcesink_enabled(nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity), 1) = yes;
12196   
12197  set balance_usedConverter(nodesModel,years,commodity);
12198  set balance_usedStorage(nodesModel,years,commodity);
12199  set balance_usedTransfer(nodesModel,years,commodity);
12200  set balance_usedSourceSink(nodesModel,years,commodity);
12201  set balance_usedBalance(nodesModel,years,commodity);
12202   
12203  balance_usedConverter(nodesModel,years,commodity)
12204      = sum ((converter_techs,vintage,activity)
12205              $( converter_coefficient(converter_techs,vintage,activity,commodity,"coefficient") <> 0
12206                  and converter_usedTech(nodesModel,years,converter_techs,vintage) ), 1);
12207   
12208  balance_usedStorage(nodesModel,years,commodity)
12209      = sum ((storage_techs,vintage,activity)
12210              $(storage_sizeParam(storage_techs,vintage,commodity,"size") <> 0
12211                  and storage_usedTech(nodesModel,years,storage_techs,vintage) ), 1);
12212   
12213  balance_usedTransfer(nodesModel,years,commodity)
12214      = sum ((linksModel,transfer_techs,vintage)
12215              $(transfer_coefficient(transfer_techs,vintage,commodity,"coefficient") <> 0
12216                  and transfer_incidenceModel(nodesModel,linksModel) <> 0), 1);
12217   
12218  option balance_usedSourceSink < sourcesink_enabled;
12219   
12220  balance_usedBalance(nodesModel,years,commodity)
12221      $(balance_usedConverter(nodesModel,years,commodity)
12222          or balance_usedStorage(nodesModel,years,commodity)
12223          or balance_usedTransfer(nodesModel,years,commodity)
12224          or balance_usedSourceSink(nodesModel,years,commodity) )
12225      = yes;
12226   
12227   
12228  * ==== equation definition ====
12229   
12230  * // ### Balance commodities
12231  * // Balancing of commodities for all model regions, time steps, and years
12232  * // {Eq_balance_commodities}
12233  Eq_balance_commodities(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,commodity)
12234      $balance_usedBalance(nodesModelSel,yearsSel,commodity)
12235      ..
12236  * converter
12237      sum((converter_techs,vintage,activity)
12238              $( converter_coefficientProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity,commodity) <> 0
12239                  AND converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage) ),
12240          converter_activity(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity)
12241              * converter_coefficientProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity,commodity)
12242              * timeLength(timeModelSel)
12243          + converter_unitsUsingActivity_MIP(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity)
12244              * converter_coefficient(converter_techs,vintage,activity,commodity,"constant")
12245              * timeLength(timeModelSel))
12246   
12247  * storages
12248      + sum((storage_techs,vintage)
12249              $( storage_sizeParam(storage_techs,vintage,commodity,"size") <> 0
12250                  and storage_usedTech(nodesModelSel,yearsSel,storage_techs,vintage) ),
12251          storage_level(timeModelToCalc--1,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
12252          - storage_level(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
12254          - storage_losses(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
12255          * timeLength(timeModelSel)
12257          )
12258   
12259  * transfer
12260      + sum((linksModel,transfer_techs,vintage)
12261              $(transfer_usedTech(linksModel,yearsSel,transfer_techs,vintage)
12262                  and linksModelToCalc(linksModel)),
12263          (   transfer_flowAlong(timeModelSel,linksModel,yearsSel,transfer_techs,vintage)
12264                  $(transfer_incidenceModel(nodesModelSel,linksModel) > 0)
12265            + transfer_flowAgainst(timeModelSel,linksModel,yearsSel,transfer_techs,vintage)
12266                  $(transfer_incidenceModel(nodesModelSel,linksModel) < 0) )
12267          * transfer_coefficient(transfer_techs,vintage,commodity,"coefficient")
12268          * timeLength(timeModelSel))
12269   
12270      - sum((linksModel,transfer_techs,vintage)
12271              $(transfer_usedTech(linksModel,yearsSel,transfer_techs,vintage)
12272                  and linksModelToCalc(linksModel)),
12273          (   transfer_flowAlong(timeModelSel,linksModel,yearsSel,transfer_techs,vintage)
12274                  $(transfer_incidenceModel(nodesModelSel,linksModel) < 0)
12275            + transfer_flowAgainst(timeModelSel,linksModel,yearsSel,transfer_techs,vintage)
12276                  $(transfer_incidenceModel(nodesModelSel,linksModel) > 0) )
12277          * transfer_coefficient(transfer_techs,vintage,commodity,"coefficient")
12278          * timeLength(timeModelSel))
12279   
12280      + 0.5 * sum((linksModel,transfer_techs,vintage)
12281              $(transfer_usedTech(linksModel,yearsSel,transfer_techs,vintage)
12282                  AND linksModelToCalc(linksModel)),
12283          (   transfer_flowAlong(timeModelSel,linksModel,yearsSel,transfer_techs,vintage)
12284                  $(transfer_incidenceModel(nodesModelSel,linksModel) <> 0)
12285            + transfer_flowAgainst(timeModelSel,linksModel,yearsSel,transfer_techs,vintage)
12286                  $(transfer_incidenceModel(nodesModelSel,linksModel) <> 0) )
12287          * timeLength(timeModelSel)
12288          * ( transfer_coefPerFlow(transfer_techs,vintage,commodity,"coefPerFlow")
12289              + sum(link_types,
12290                  transfer_coefPerLength(transfer_techs,vintage,commodity,link_types,"coefPerLength")
12291                  * transfer_lengthParam(linksModel,link_types,"length"))))
12292   
12293  * sourcesink
12294      + sum((sourcesink_techs)
12295              $sourcesink_enabled(nodesModelSel,yearsSel,sourcesink_techs,commodity),
12296          sourcesink_flow(timeModelSel,nodesModelSel,yearsSel,sourcesink_techs,commodity)
12297          * timeLength(timeModelSel))
12298      =e=
12299      0;
12300   
12301   
12302  * ==== model definition ====
12303   
12304  Model M_balance
12305  /
12306    Eq_balance_commodities
12307  /;
12308   
INCLUDE    C:\Local\REMix\framework\remix\framework\model\source\accounting\equations.gms
12310  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
12311  * SPDX-License-Identifier: BSD-3-Clause
12312   
12313  * // # accounting_equations
12314   
12315  * ==== declaration of variables ====
12316   
12317  variables
12318  accounting_indicator(accNodesModel,accYears,indicator)
12319  accounting_indicator_links(linksModel,years,indicator)
12320  accounting_objective
12321    ;
12322   
12323   
12324  * ==== definition of variables ====
12325   
12326  * set the variable levels to be fixed for years before the optimization years
12327  accounting_indicator.l(accNodesModel,accYears,indicator)
12328      $activeIndicators(accNodesModel,accYears,indicator)
12329      = 0;
12330   
12331  accounting_indicator.lo(accNodesModel,accYears,indicator)
12332      $(accounting_indicatorBounds(accNodesModel,accYears,indicator,"useLower") <> 0 )
12333      = accounting_indicatorBounds(accNodesModel,accYears,indicator,"lowerValue");
12334   
12335  accounting_indicator.up(accNodesModel,accYears,indicator)
12336      $(accounting_indicatorBounds(accNodesModel,accYears,indicator,"useUpper") <> 0 )
12337      = accounting_indicatorBounds(accNodesModel,accYears,indicator,"upperValue");
12338   
12339  accounting_indicator.fx(accNodesModel,accYears,indicator)
12340      $(accounting_indicatorBounds(accNodesModel,accYears,indicator,"useFixed") <> 0 )
12341      = accounting_indicatorBounds(accNodesModel,accYears,indicator,"fixedValue");
12342   
12343   
12344  accounting_indicator_links.lo(linksModelToCalc,yearsToCalc,indicator)
12345      $(accounting_indicatorBounds_links(linksModelToCalc,yearsToCalc,indicator,"useLower") <> 0 )
12346      = accounting_indicatorBounds_links(linksModelToCalc,yearsToCalc,indicator,"lowerValue");
12347   
12348  accounting_indicator_links.up(linksModelToCalc,yearsToCalc,indicator)
12349      $(accounting_indicatorBounds_links(linksModelToCalc,yearsToCalc,indicator,"useUpper") <> 0 )
12350      = accounting_indicatorBounds_links(linksModelToCalc,yearsToCalc,indicator,"upperValue");
12351   
12352  accounting_indicator_links.fx(linksModelToCalc,yearsToCalc,indicator)
12353      $(accounting_indicatorBounds_links(linksModelToCalc,yearsToCalc,indicator,"useFixed") <> 0 )
12354      = accounting_indicatorBounds_links(linksModelToCalc,yearsToCalc,indicator,"fixedValue");
12355   
12356   
12357  * ==== declaration of equations ====
12358   
12359  equations
12360  Eq_accounting_indicatorCalc(accNodesModel,accYears,indicator
12361      ) "Calculates the level of an indicator per accounting region"
12362  Eq_accounting_indicatorCalc_links(linksModel,years,indicator
12363      ) "Calculates the level of an indicator per model link"
12364  Eq_accounting_objective "Calculates the objective value based on the specified indicator"
12365    ;
12366   
12367   
12368  * ==== equations definition ====
12369  * // ## Equations
12370  * // ### Accounting Indicator Calculation
12371  * // Calculates the indicators for each model node for converters, sources and sinks, transfer, storage and variable indicators.
12372  * // {Eq_accounting_indicatorCalc}
12373  Eq_accounting_indicatorCalc(accNodesModel,accYearsSel(accYears),indicator)
12374      $activeIndicators(accNodesModel,accYears,indicator)
12375      ..
12376      accounting_indicator(accNodesModel,accYears,indicator)
12377      =e=
12378   
12379  * == variable indicators ==
12380      sum((accNodesModel_a,accYears_a,indicator_a)
12381          $(compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
12382              and variableIndicators(accNodesModel_a,accYears_a,indicator_a)),
12383          compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
12384          * accounting_indicator(accNodesModel_a,accYears_a,indicator_a))
12385   
12386  * == converters ==
12387      + sum ((accNodesModel_a,nodesModelSel,accYears_a,yearsSel,indicator_a)
12388              $( compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
12389                  and sameas(nodesModelSel,accNodesModel_a) and sameas(yearsSel,accYears_a)),
12390          compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
12391          *
12392          ( sum ((converter_techs,vintage)
12393                      $(converter_availTech(nodesModelSel,yearsSel,converter_techs,vintage)
12394                          and accounting_converterUnits(indicator_a,nodesModelSel,converter_techs,vintage,"useAnnuity") = 0),
12395              converter_unitsBuild(nodesModelSel,yearsSel,converter_techs,vintage)
12396              * accounting_converterUnits(indicator_a,nodesModelSel,converter_techs,vintage,"perUnitBuild"))
12397   
12398          + sum ((years_a,converter_techs,vintage)
12399                      $(converter_availTech(nodesModelSel,years_a,converter_techs,vintage)
12400                          and years_a.val < sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
12401                          and accounting_converterUnits(indicator_a,nodesModelSel,converter_techs,vintage,"useAnnuity") = 1
12402                          and years_a.val + accounting_converterUnits(indicator_a,nodesModelSel,converter_techs,vintage,"amorTime") > yearsSel.val
12403                          and years_a.val <= yearsSel.val ),
12404              converter_unitsBuild(nodesModelSel,years_a,converter_techs,vintage)
12405              * accounting_converterUnits(indicator_a,nodesModelSel,converter_techs,vintage,"perUnitBuild")
12406              * accounting_annuityFactor_converter(indicator_a,nodesModelSel,converter_techs,vintage) )
12407   
12408          + sum ((yearsToCalc,converter_techs,vintage)
12409                      $(converter_availTech(nodesModelSel,yearsToCalc,converter_techs,vintage)
12410                          and yearsToCalc.val >= sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
12411                          and accounting_converterUnits(indicator_a,nodesModelSel,converter_techs,vintage,"useAnnuity") = 1
12412                          and yearsToCalc.val + accounting_converterUnits(indicator_a,nodesModelSel,converter_techs,vintage,"amorTime") > yearsSel.val
12413                          and yearsToCalc.val <= yearsSel.val ),
12414              converter_unitsBuild(nodesModelSel,yearsToCalc,converter_techs,vintage)
12415              * accounting_converterUnits(indicator_a,nodesModelSel,converter_techs,vintage,"perUnitBuild")
12416              * accounting_annuityFactor_converter(indicator_a,nodesModelSel,converter_techs,vintage) )
12417   
12418          + sum ((converter_techs,vintage)
12419                      $converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage),
12420              converter_unitsDecom(nodesModelSel,yearsSel,converter_techs,vintage)
12421              * accounting_converterUnits(indicator_a,nodesModelSel,converter_techs,vintage,"perUnitDecom")
12422   
12423              + converter_unitsTotal(nodesModelSel,yearsSel,converter_techs,vintage)
12424              * accounting_converterUnits(indicator_a,nodesModelSel,converter_techs,vintage,"perUnitTotal") )
12425   
12426          + sum ((timeModelSel,converter_techs,vintage,activity)
12427                      $converter_usedTechAct(nodesModelSel,yearsSel,converter_techs,vintage,activity),
12428              converter_activity(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity)
12429              * timeLength(timeModelSel)
12430              * accounting_converterActivity(indicator_a,nodesModelSel,converter_techs,vintage,activity,"perActivity") )
12431   
12432          + sum ((timeModelSel,converter_techs,vintage)
12433                      $converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage),
12434              converter_unitStartups(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
12435              * accounting_converterStartup(indicator_a,nodesModelSel,converter_techs,vintage,"perStartup") )
12436   
12437          + sum ((timeModelSel,converter_techs,vintage)
12438                      $converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage),
12439              converter_rampPos(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
12440              * (accounting_converterStartup(indicator_a,nodesModelSel,converter_techs,vintage,"perRamp")
12441                 + accounting_converterStartup(indicator_a,nodesModelSel,converter_techs,vintage,"perRampPos"))
12442   
12443              + converter_rampNeg(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
12444              * (accounting_converterStartup(indicator_a,nodesModelSel,converter_techs,vintage,"perRamp")
12445                 + accounting_converterStartup(indicator_a,nodesModelSel,converter_techs,vintage,"perRampNeg")))
12446          )
12447      )
12448   
12449  * == storage ==
12450      + sum ((accNodesModel_a,nodesModelSel,accYears_a,yearsSel,indicator_a)
12451              $( compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
12452                  and sameas(nodesModelSel,accNodesModel_a) and sameas(yearsSel,accYears_a)),
12453          compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
12454          *
12455          ( sum ((storage_techs,vintage)
12456                      $(storage_availTech(nodesModelSel,yearsSel,storage_techs,vintage)
12457                          and accounting_storageUnits(indicator_a,nodesModelSel,storage_techs,vintage,"useAnnuity") = 0),
12458              storage_unitsBuild(nodesModelSel,yearsSel,storage_techs,vintage)
12459              * accounting_storageUnits(indicator_a,nodesModelSel,storage_techs,vintage,"perUnitBuild") )
12460   
12461          + sum ((years_a,storage_techs,vintage)
12462                      $(storage_availTech(nodesModelSel,years_a,storage_techs,vintage)
12463                          and years_a.val < sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
12464                          and accounting_storageUnits(indicator_a,nodesModelSel,storage_techs,vintage,"useAnnuity") = 1
12465                          and years_a.val + accounting_storageUnits(indicator_a,nodesModelSel,storage_techs,vintage,"amorTime") > yearsSel.val
12466                          and years_a.val <= yearsSel.val ),
12467              storage_unitsBuild(nodesModelSel,years_a,storage_techs,vintage)
12468              * accounting_storageUnits(indicator_a,nodesModelSel,storage_techs,vintage,"perUnitBuild")
12469              * accounting_annuityFactor_storage(indicator_a,nodesModelSel,storage_techs,vintage) )
12470   
12471          + sum ((yearsToCalc,storage_techs,vintage)
12472                      $(storage_availTech(nodesModelSel,yearsToCalc,storage_techs,vintage)
12473                          and yearsToCalc.val >= sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
12474                          and accounting_storageUnits(indicator_a,nodesModelSel,storage_techs,vintage,"useAnnuity") = 1
12475                          and yearsToCalc.val + accounting_storageUnits(indicator_a,nodesModelSel,storage_techs,vintage,"amorTime") > yearsSel.val
12476                          and yearsToCalc.val <= yearsSel.val ),
12477              storage_unitsBuild(nodesModelSel,yearsToCalc,storage_techs,vintage)
12478              * accounting_storageUnits(indicator_a,nodesModelSel,storage_techs,vintage,"perUnitBuild")
12479              * accounting_annuityFactor_storage(indicator_a,nodesModelSel,storage_techs,vintage) )
12480   
12481          + sum ((storage_techs,vintage)
12482                      $storage_usedTech(nodesModelSel,yearsSel,storage_techs,vintage),
12483              storage_unitsDecom(nodesModelSel,yearsSel,storage_techs,vintage)
12484              * accounting_storageUnits(indicator_a,nodesModelSel,storage_techs,vintage,"perUnitDecom")
12485   
12486              + storage_unitsTotal(nodesModelSel,yearsSel,storage_techs,vintage)
12487              * accounting_storageUnits(indicator_a,nodesModelSel,storage_techs,vintage,"perUnitTotal") )
12488          )
12489      )
12490   
12491   
12492  * == transfer ==
12493      + sum ((accNodesModel_a,nodesModelSel,accYears_a,yearsSel,indicator_a)
12494              $( compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
12495                  and sameas(nodesModelSel,accNodesModel_a) and sameas(yearsSel,accYears_a)),
12496          compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
12497          *
12498          ( sum ((linksModelToCalc,transfer_techs,vintage)
12499                      $(transfer_availTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
12500                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0
12501                          and accounting_transferLinks(indicator_a,linksModelToCalc,transfer_techs,vintage,"useAnnuity") = 0),
12502              0.5
12503              * transfer_linksBuild(linksModelToCalc,yearsSel,transfer_techs,vintage)
12504              * accounting_transferLinks(indicator_a,linksModelToCalc,transfer_techs,vintage,"perLinkBuild") )
12505   
12506          + sum ((linksModelToCalc,years_a,transfer_techs,vintage)
12507                      $(transfer_availTech(linksModelToCalc,years_a,transfer_techs,vintage)
12508                          and years_a.val < sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
12509                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0
12510                          and accounting_transferLinks(indicator_a,linksModelToCalc,transfer_techs,vintage,"useAnnuity") = 1
12511                          and years_a.val + accounting_transferLinks(indicator_a,linksModelToCalc,transfer_techs,vintage,"amorTime") > yearsSel.val
12512                          and years_a.val <= yearsSel.val ),
12513              0.5
12514              * transfer_linksBuild(linksModelToCalc,years_a,transfer_techs,vintage)
12515              * accounting_transferLinks(indicator_a,linksModelToCalc,transfer_techs,vintage,"perLinkBuild")
12516              * accounting_annuityFactor_transferLink(indicator_a,linksModelToCalc,transfer_techs,vintage) )
12517   
12518          + sum ((linksModelToCalc,yearsToCalc,transfer_techs,vintage)
12519                      $(transfer_availTech(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
12520                          and yearsToCalc.val >= sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
12521                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0
12522                          and accounting_transferLinks(indicator_a,linksModelToCalc,transfer_techs,vintage,"useAnnuity") = 1
12523                          and yearsToCalc.val + accounting_transferLinks(indicator_a,linksModelToCalc,transfer_techs,vintage,"amorTime") > yearsSel.val
12524                          and yearsToCalc.val <= yearsSel.val ),
12525              0.5
12526              * transfer_linksBuild(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
12527              * accounting_transferLinks(indicator_a,linksModelToCalc,transfer_techs,vintage,"perLinkBuild")
12528              * accounting_annuityFactor_transferLink(indicator_a,linksModelToCalc,transfer_techs,vintage) )
12529   
12530          + sum ((linksModelToCalc,transfer_techs,vintage,link_types)
12531                      $(transfer_availTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
12532                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0
12533                          and accounting_transferPerLength(indicator_a,linksModelToCalc,transfer_techs,vintage,link_types,"useAnnuity") = 0 ),
12534              0.5
12535              * transfer_linksBuild(linksModelToCalc,yearsSel,transfer_techs,vintage)
12536              * transfer_lengthParam(linksModelToCalc,link_types,"length")
12537              * accounting_transferPerLength(indicator_a,linksModelToCalc,transfer_techs,vintage,link_types,"perLengthBuild") )
12538   
12539          + sum ((linksModelToCalc,years_a,transfer_techs,vintage,link_types)
12540                      $(transfer_availTech(linksModelToCalc,years_a,transfer_techs,vintage)
12541                          and years_a.val < sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
12542                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0
12543                          and accounting_transferPerLength(indicator_a,linksModelToCalc,transfer_techs,vintage,link_types,"useAnnuity") = 1
12544                          and years_a.val + accounting_transferPerLength(indicator_a,linksModelToCalc,transfer_techs,vintage,link_types,"amorTime") > yearsSel.val
12545                          and years_a.val <= yearsSel.val ),
12546              0.5
12547              * transfer_linksBuild(linksModelToCalc,years_a,transfer_techs,vintage)
12548              * transfer_lengthParam(linksModelToCalc,link_types,"length")
12549              * accounting_transferPerLength(indicator_a,linksModelToCalc,transfer_techs,vintage,link_types,"perLengthBuild")
12550              * accounting_annuityFactor_transferPerLength(indicator_a,linksModelToCalc,transfer_techs,vintage,link_types) )
12551   
12552          + sum ((linksModelToCalc,yearsToCalc,transfer_techs,vintage,link_types)
12553                      $(transfer_availTech(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
12554                          and yearsToCalc.val >= sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
12555                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0
12556                          and accounting_transferPerLength(indicator_a,linksModelToCalc,transfer_techs,vintage,link_types,"useAnnuity") = 1
12557                          and yearsToCalc.val + accounting_transferPerLength(indicator_a,linksModelToCalc,transfer_techs,vintage,link_types,"amorTime") > yearsSel.val
12558                          and yearsToCalc.val <= yearsSel.val ),
12559              0.5
12560              * transfer_linksBuild(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
12561              * transfer_lengthParam(linksModelToCalc,link_types,"length")
12562              * accounting_transferPerLength(indicator_a,linksModelToCalc,transfer_techs,vintage,link_types,"perLengthBuild")
12563              * accounting_annuityFactor_transferPerLength(indicator_a,linksModelToCalc,transfer_techs,vintage,link_types) )
12564   
12565          + sum ((linksModelToCalc,transfer_techs,vintage)
12566                      $(transfer_usedTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
12567                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0 ),
12568              0.5
12569              * transfer_linksDecom(linksModelToCalc,yearsSel,transfer_techs,vintage)
12570              * accounting_transferLinks(indicator_a,linksModelToCalc,transfer_techs,vintage,"perLinkDecom")
12571   
12572              + 0.5
12573              * transfer_linksTotal(linksModelToCalc,yearsSel,transfer_techs,vintage)
12574              * accounting_transferLinks(indicator_a,linksModelToCalc,transfer_techs,vintage,"perLinkTotal")
12575   
12576              + 0.5
12577              * sum (link_types,
12578                  transfer_linksDecom(linksModelToCalc,yearsSel,transfer_techs,vintage)
12579                  * transfer_lengthParam(linksModelToCalc,link_types,"length")
12580                  * accounting_transferPerLength(indicator_a,linksModelToCalc,transfer_techs,vintage,link_types,"perLengthDecom")
12581   
12582                  + transfer_linksTotal(linksModelToCalc,yearsSel,transfer_techs,vintage)
12583                  * transfer_lengthParam(linksModelToCalc,link_types,"length")
12584                  * accounting_transferPerLength(indicator_a,linksModelToCalc,transfer_techs,vintage,link_types,"perLengthTotal"))
12585   
12586              + 0.5
12587              * sum (timeModelSel,
12588                  transfer_flowAlong(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
12589                  * timeLength(timeModelSel)
12590                  * ( accounting_transferLinks(indicator_a,linksModelToCalc,transfer_techs,vintage,"perFlow")
12591                      + accounting_transferLinks(indicator_a,linksModelToCalc,transfer_techs,vintage,"perFlowAlong"))
12592   
12593                  + transfer_flowAgainst(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
12594                  * timeLength(timeModelSel)
12595                  * ( accounting_transferLinks(indicator_a,linksModelToCalc,transfer_techs,vintage,"perFlow")
12596                      + accounting_transferLinks(indicator_a,linksModelToCalc,transfer_techs,vintage,"perFlowAgainst")))
12597   
12598              + 0.5
12599              * sum ((timeModelSel, link_types),
12600                  transfer_flowAlong(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
12601                  * timeLength(timeModelSel)
12602                  * transfer_lengthParam(linksModelToCalc,link_types,"length")
12603                  * (accounting_transferPerLength(indicator_a,linksModelToCalc,transfer_techs,vintage,link_types,"perFlow")
12604                      + accounting_transferPerLength(indicator_a,linksModelToCalc,transfer_techs,vintage,link_types,"perFlowAlong"))
12605   
12606                  + transfer_flowAgainst(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
12607                  * timeLength(timeModelSel)
12608                  * transfer_lengthParam(linksModelToCalc,link_types,"length")
12609                  * (accounting_transferPerLength(indicator_a,linksModelToCalc,transfer_techs,vintage,link_types,"perFlow")
12610                      + accounting_transferPerLength(indicator_a,linksModelToCalc,transfer_techs,vintage,link_types,"perFlowAgainst")))
12611              )
12612          )
12613      )
12614   
12615   
12616  * == sources / sinks ==
12617      + sum ((accNodesModel_a,nodesModelSel,accYears_a,yearsSel,indicator_a)
12618              $( compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
12619                  and sameas(nodesModelSel,accNodesModel_a) and sameas(yearsSel,accYears_a)),
12620          compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
12621          *
12622          sum ((timeModelSel,sourcesink_techs,commodity)
12623                  $sourcesink_enabled(nodesModelSel,yearsSel,sourcesink_techs,commodity),
12624              sourcesink_flow(timeModelSel,nodesModelSel,yearsSel,sourcesink_techs,commodity)
12625              * timeLength(timeModelSel)
12626              * accounting_sourcesinkFlow(indicator_a,nodesModelSel,yearsSel,sourcesink_techs,commodity,"perFlow") )
12627      );
12628   
12629  * // ### Accounting Indicator Calculation Links
12630  * // Calculates the indicators for each transfer for converters, sources and sinks, transfer, storage and variable indicators.
12631  * // {Eq_accounting_indicatorCalc_links}
12632  Eq_accounting_indicatorCalc_links(linksModelToCalc,yearsSel,indicator)
12633      $activeIndicators_links(linksModelToCalc,yearsSel,indicator)
12634      ..
12635      accounting_indicator_links(linksModelToCalc,yearsSel,indicator)
12636      =e=
12637      sum ((transfer_techs,vintage)
12638                  $(transfer_availTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
12639                      and accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"useAnnuity") = 0),
12640          transfer_linksBuild(linksModelToCalc,yearsSel,transfer_techs,vintage)
12641          * accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"perLinkBuild") )
12642   
12643      + sum ((years_a,transfer_techs,vintage)
12644                  $(transfer_availTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
12645                      and accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"useAnnuity") = 1
12646                      and years_a.val + accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"amorTime") > yearsSel.val
12647                      and years_a.val <= yearsSel.val ),
12648          transfer_linksBuild(linksModelToCalc,years_a,transfer_techs,vintage)
12649          * accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"perLinkBuild")
12650          * accounting_annuityFactor_transferLink(indicator,linksModelToCalc,transfer_techs,vintage) )
12651   
12652      + sum ((transfer_techs,vintage,link_types)
12653                  $(transfer_availTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
12654                      and accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"useAnnuity") = 0 ),
12655          transfer_linksBuild(linksModelToCalc,yearsSel,transfer_techs,vintage)
12656          * transfer_lengthParam(linksModelToCalc,link_types,"length")
12657          * accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"perLengthBuild") )
12658   
12659      + sum ((years_a,transfer_techs,vintage,link_types)
12660                  $(transfer_availTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
12661                      and accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"useAnnuity") = 1
12662                      and years_a.val + accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"amorTime") > yearsSel.val
12663                      and years_a.val <= yearsSel.val ),
12664          transfer_linksBuild(linksModelToCalc,years_a,transfer_techs,vintage)
12665          * transfer_lengthParam(linksModelToCalc,link_types,"length")
12666          * accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"perLengthBuild")
12667          * accounting_annuityFactor_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types) )
12668   
12669      + sum ((transfer_techs,vintage)
12670                  $(transfer_usedTech(linksModelToCalc,yearsSel,transfer_techs,vintage)),
12671          transfer_linksDecom(linksModelToCalc,yearsSel,transfer_techs,vintage)
12672          * accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"perLinkDecom")
12673   
12674          + transfer_linksTotal(linksModelToCalc,yearsSel,transfer_techs,vintage)
12675          * accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"perLinkTotal")
12676   
12677          + sum (link_types,
12678              transfer_linksDecom(linksModelToCalc,yearsSel,transfer_techs,vintage)
12679              * transfer_lengthParam(linksModelToCalc,link_types,"length")
12680              * accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"perLengthDecom")
12681   
12682              + transfer_linksTotal(linksModelToCalc,yearsSel,transfer_techs,vintage)
12683              * transfer_lengthParam(linksModelToCalc,link_types,"length")
12684              * accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"perLengthTotal"))
12685   
12686          + sum (timeModelSel,
12687              transfer_flowAlong(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
12688              * timeLength(timeModelSel)
12689              * ( accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"perFlow")
12690                  + accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"perFlowAlong"))
12691   
12692              + transfer_flowAgainst(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
12693              * timeLength(timeModelSel)
12694              * ( accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"perFlow")
12695                  + accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"perFlowAgainst")))
12696   
12697          + sum ((timeModelSel, link_types),
12698              transfer_flowAlong(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
12699              * timeLength(timeModelSel)
12700              * transfer_lengthParam(linksModelToCalc,link_types,"length")
12701              * (accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"perFlow")
12702                  + accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"perFlowAlong"))
12703   
12704              + transfer_flowAgainst(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
12705              * timeLength(timeModelSel)
12706              * transfer_lengthParam(linksModelToCalc,link_types,"length")
12707              * (accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"perFlow")
12708                  + accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"perFlowAgainst")))
12709          );
12710   
12711  * // ### Accounting Objective
12712  * // Calculates the indicators for the objective.
12713  * // {Eq_accounting_objective}
12714  Eq_accounting_objective
12715      ..
12716      accounting_objective
12717      =e=
12718      sum ((accNodesModel,accYears,indicator)
12719              $(accounting_indicatorBounds(accNodesModel,accYears,indicator,"obj") <> 0 ),
12720          accounting_indicator(accNodesModel,accYears,indicator) )
12721   
12722   
12723  * ==== model definition ====
12724   
12725  Model M_accounting
12726  /
12727  Eq_accounting_indicatorCalc_links
12728  Eq_accounting_indicatorCalc
12729  Eq_accounting_objective
12730  /;
INCLUDE    C:\Local\REMix\framework\remix\framework\model\source\optiframe.gms
12732  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
12733  * SPDX-License-Identifier: BSD-3-Clause
12734   
12735  * ==== optimization frames ====
12737   
12738  * mapping from optimization frame to years
12740  set optiframe / of1 * of3 /;
12741  set optiframeToCalc(optiframe);
12742   
12744  set map_optiframe(optiframe,years) / of1 . #yearsToCalc /;
12746   
12748   
12749  option optiframeToCalc < map_optiframe;
12750   
12751  Model remix /
12752    M_converter
12753    M_storage
12754    M_transfer
12755    M_sourcesink
12756    M_balance
12757    M_accounting
12758  /;
12759   
12760   
12761  * ==== include methods  ====
12762   
12763  * check if the method is valid
12769   
12770   
12771  * if method is pips write the checkanno tool
INCLUDE    C:\Local\REMix\framework\remix\framework\model\source\methods\checkanno.gms
12773  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
12774  * SPDX-License-Identifier: BSD-3-Clause
12775   
12778   
12781   
12782  * if method is pips generate the annotated gdx file
INCLUDE    C:\Local\REMix\framework\remix\framework\model\source\methods\pips.gms
12784  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
12785  * SPDX-License-Identifier: BSD-3-Clause
12786   
12790   
12791  * if method is solve run the model with commercial solvers
INCLUDE    C:\Local\REMix\framework\remix\framework\model\source\methods\solve.gms
12793  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
12794  * SPDX-License-Identifier: BSD-3-Clause
12795   
12798   
12800   
12801  * ==== global options ====
12808   
12809  * ==== general solver options ====
12819   
12820  * ==== cplex options ====
12829   
12830  * ==== gurobi options ====
12831   
12832   
12833  * ==== copt options ====
12837   
12838  * ==== debug options ====
12841   
12842   
12843  * ==== setup optimization ====
12844  if ((sum(nodesModelToCalc, 1)>40 or sum(timeModelToCalc, 1)>50) and not 0,
12845     option limRow=0, limCol=0, solPrint=off;
12846  else
12847     option limRow=100000, limCol=100000, solPrint=on;
12848  );
12849   
12851   
12852  option mip = cplex;
12853  option reslim = 1209600;
12854  option optcr = 1e-3;
12855  remix.threads = 4;
12856  remix.optFile = 1;
12857  remix.solveLink = 0;
12858  remix.holdFixed = 1;
12859   
12860   
12861  * ==== configure option files ====
12862   
12865   
12866  file opt / "cplex.opt" /;
12867  put opt;
12869  put "rerun no" /;
12870  put "iis 1" /;
12871  put "lpmethod 4" /;
12873  put "barorder 3 /;" /;
12874  put "preind 1" /;
12875  put "scaind 0" /;
12876  put "predual -1" /;
12877  put "baralg 0" /;
12878  put "barstartalg 1" /;
12879  put "barepcomp 1e-6" /;
12880  put "solutiontype 2" /;
12882  put "startalg 4" /;
12883  put "epgap 1e-3" /;
12884  put "quality 1" /;
12885  put "barcolnz 0" /;
12886  put "threads 4" /;
12887  put "parallelmode 1" /;
12890  putclose;
12891   
12893   
12894   
12895  * ==== solve the problem ====
12896   
12897  loop ( optiframeToCalc,
12898      yearsSel(years) = no;
12899      yearsSel(years)$map_optiframe(optiframeToCalc,years) = yes;
12900      yearsToFix(years) = no;
12901      yearsToFix(years)$(years.val < smin(years_a$yearsSel(years_a), years_a.val)) = yes;
12902      accYearsSel(accYears) = no;
12903      accYearsSel("horizon") = yes;
12904      accYearsSel(accYears)$(sum(yearsSel$sameas(accYears,yearsSel), 1)) = yes;
12905      accYearsToFix(accYears) = no;
12906      accYearsToFix(accYears)$(sum(years$(sameas(years,accYears) and years.val < smin(years_a$yearsSel(years_a), years_a.val)), 1) > 0) = yes;
12907      timeModelSel(timeModel) = no;
12908      timeModelSel(timeModel)$timeModelToCalc(timeModel) = yes;
12909      nodesModelSel(nodesModel) = no;
12910      nodesModelSel(nodesModel)$nodesModelToCalc(nodesModel) = yes;
12911   
12912  * Fix decision for years previously optimized in case of myopic or foresight
12913      converter_unitsDelta(nodesModelToCalc,yearsToFix,converter_techs)
12914          $(sum(yearsToCalc$sameas(yearsToFix, yearsToCalc), 1))
12915          = sum(vintage, converter_unitsTotal.l(nodesModelToCalc,yearsToFix,converter_techs,vintage))
12916              - converter_capacityParam(nodesModelToCalc,yearsToFix,converter_techs,"unitsUpperLimit");
12917      converter_unitsDelta(nodesModelToCalc,yearsToFix,converter_techs)
12918          $(converter_unitsDelta(nodesModelToCalc,yearsToFix,converter_techs) < 0) = 0;
12919   
12920      converter_unitsBuild.l(nodesModelToCalc,yearsToFix,converter_techs,vintage)
12921          $converter_availTech(nodesModelToCalc,yearsToFix,converter_techs,vintage)
12922          = converter_unitsBuild.l(nodesModelToCalc,yearsToFix,converter_techs,vintage)
12923              - converter_unitsDelta(nodesModelToCalc,yearsToFix,converter_techs);
12924   
12925      converter_unitsBuild.l(nodesModelToCalc,yearsToFix,converter_techs,vintage)
12926          $(converter_unitsBuild.l(nodesModelToCalc,yearsToFix,converter_techs,vintage) < 0) = 0;
12927      converter_unitsBuild.fx(nodesModelToCalc,yearsToFix,converter_techs,vintage)
12928          = converter_unitsBuild.l(nodesModelToCalc,yearsToFix,converter_techs,vintage);
12929      converter_unitsDecom.l(nodesModelToCalc,yearsToFix,converter_techs,vintage)
12930          $(converter_unitsDecom.l(nodesModelToCalc,yearsToFix,converter_techs,vintage) < 0) = 0;
12931      converter_unitsDecom.fx(nodesModelToCalc,yearsToFix,converter_techs,vintage)
12932          = converter_unitsDecom.l(nodesModelToCalc,yearsToFix,converter_techs,vintage);
12933      converter_unitsTotal.fx(nodesModelToCalc,yearsToFix,converter_techs,vintage)
12934          = converter_unitsTotal.l(nodesModelToCalc,yearsToFix,converter_techs,vintage);
12935   
12936   
12937      storage_unitsDelta(nodesModelToCalc,yearsToFix,storage_techs)
12938          $(sum(yearsToCalc$sameas(yearsToFix, yearsToCalc), 1))
12939          = sum(vintage, storage_unitsTotal.l(nodesModelToCalc,yearsToFix,storage_techs,vintage))
12940              - storage_reservoirParam(nodesModelToCalc,yearsToFix,storage_techs,"unitsUpperLimit");
12941      storage_unitsDelta(nodesModelToCalc,yearsToFix,storage_techs)
12942          $(storage_unitsDelta(nodesModelToCalc,yearsToFix,storage_techs) < 0) = 0;
12943   
12944      storage_unitsBuild.l(nodesModelToCalc,yearsToFix,storage_techs,vintage)
12945          $storage_availTech(nodesModelToCalc,yearsToFix,storage_techs,vintage)
12946          = storage_unitsBuild.l(nodesModelToCalc,yearsToFix,storage_techs,vintage)
12947              - storage_unitsDelta(nodesModelToCalc,yearsToFix,storage_techs);
12948   
12949      storage_unitsBuild.l(nodesModelToCalc,yearsToFix,storage_techs,vintage)
12950          $(storage_unitsBuild.l(nodesModelToCalc,yearsToFix,storage_techs,vintage) < 0) = 0;
12951      storage_unitsBuild.fx(nodesModelToCalc,yearsToFix,storage_techs,vintage)
12952          = storage_unitsBuild.l(nodesModelToCalc,yearsToFix,storage_techs,vintage);
12953      storage_unitsDecom.l(nodesModelToCalc,yearsToFix,storage_techs,vintage)
12954          $(storage_unitsDecom.l(nodesModelToCalc,yearsToFix,storage_techs,vintage) < 0) = 0;
12955      storage_unitsDecom.fx(nodesModelToCalc,yearsToFix,storage_techs,vintage)
12956          = storage_unitsDecom.l(nodesModelToCalc,yearsToFix,storage_techs,vintage);
12957      storage_unitsTotal.fx(nodesModelToCalc,yearsToFix,storage_techs,vintage)
12958          = storage_unitsTotal.l(nodesModelToCalc,yearsToFix,storage_techs,vintage);
12959   
12960   
12961      transfer_linksDelta(linksModelToCalc,yearsToFix,transfer_techs)
12962          $(sum(yearsToCalc$sameas(yearsToFix, yearsToCalc), 1))
12963          = sum(vintage, transfer_linksTotal.l(linksModelToCalc,yearsToFix,transfer_techs,vintage))
12964              - transfer_linksParam(linksModelToCalc,yearsToFix,transfer_techs,"linksUpperLimit");
12965      transfer_linksDelta(linksModelToCalc,yearsToFix,transfer_techs)
12966          $(transfer_linksDelta(linksModelToCalc,yearsToFix,transfer_techs) < 0) = 0;
12967   
12968      transfer_linksBuild.l(linksModelToCalc,yearsToFix,transfer_techs,vintage)
12969          $transfer_availTech(linksModelToCalc,yearsToFix,transfer_techs,vintage)
12970          = transfer_linksBuild.l(linksModelToCalc,yearsToFix,transfer_techs,vintage)
12971              - transfer_linksDelta(linksModelToCalc,yearsToFix,transfer_techs);
12972   
12973      transfer_linksBuild.l(linksModelToCalc,yearsToFix,transfer_techs,vintage)
12974          $(transfer_linksBuild.l(linksModelToCalc,yearsToFix,transfer_techs,vintage) < 0) = 0;
12975      transfer_linksBuild.fx(linksModelToCalc,yearsToFix,transfer_techs,vintage)
12976          = transfer_linksBuild.l(linksModelToCalc,yearsToFix,transfer_techs,vintage);
12977      transfer_linksDecom.l(linksModelToCalc,yearsToFix,transfer_techs,vintage)
12978          $(transfer_linksDecom.l(linksModelToCalc,yearsToFix,transfer_techs,vintage) < 0) = 0;
12979      transfer_linksDecom.fx(linksModelToCalc,yearsToFix,transfer_techs,vintage)
12980          = transfer_linksDecom.l(linksModelToCalc,yearsToFix,transfer_techs,vintage);
12981      transfer_linksTotal.fx(linksModelToCalc,yearsToFix,transfer_techs,vintage)
12982          = transfer_linksTotal.l(linksModelToCalc,yearsToFix,transfer_techs,vintage);
12983   
12984      accounting_indicator.fx(accNodesModel,accYearsToFix,indicator)
12985          = accounting_indicator.l(accNodesModel,accYearsToFix,indicator);
12986   
12987  * Optimize and log values
12988      if (opti_sense < 0,
12989      solve remix minimizing accounting_objective using mip;
12990      else
12991      solve remix maximizing accounting_objective using mip;
12992      );
12993   
12994      put_utility 'log' / 'Model status ' remix.modelstat:0:0;
12995      put_utility 'log' / 'Objective value ' accounting_objective.l:0:3;
12996   
12997  );
12998   
13002   
13003  * if method is pareto solve the model once and afterwards run multiple points along the pareto front
INCLUDE    C:\Local\REMix\framework\remix\framework\model\source\methods\pareto.gms
13005  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
13006  * SPDX-License-Identifier: BSD-3-Clause
13007   
13011   
13012  * if method is mga solve the model once and afterwards maximize the length metric of indicators
INCLUDE    C:\Local\REMix\framework\remix\framework\model\source\methods\mga.gms
13014  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
13015  * SPDX-License-Identifier: BSD-3-Clause
13016   
13020   
13021  * if method is iternodes run the model by iterating through all nodesToCalc
INCLUDE    C:\Local\REMix\framework\remix\framework\model\source\methods\iternodes.gms
13023  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
13024  * SPDX-License-Identifier: BSD-3-Clause
13025   
13029   
13030  * if postcalc is one write the results gdx
INCLUDE    C:\Local\REMix\framework\remix\framework\model\source\postcalc\definition.gms
13032  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
13033  * SPDX-License-Identifier: BSD-3-Clause
13034   
13036   
13037  * ==== indicator accounting ====
13038   
13039  indicator_accounting_detailed(indicator,nodesModelToCalc,yearsToCalc,techs)
13040      =
13041  * == converters ==
13042      sum ((converter_techs(techs),vintage)
13043                  $(converter_availTech(nodesModelToCalc,yearsToCalc,converter_techs,vintage)
13044                      and accounting_converterUnits(indicator,nodesModelToCalc,converter_techs,vintage,"useAnnuity") = 0),
13045          converter_unitsBuild.l(nodesModelToCalc,yearsToCalc,converter_techs,vintage)
13046          * accounting_converterUnits(indicator,nodesModelToCalc,converter_techs,vintage,"perUnitBuild"))
13047   
13048      + sum ((years_a,converter_techs(techs),vintage)
13049                  $(converter_availTech(nodesModelToCalc,years_a,converter_techs,vintage)
13050                      and accounting_converterUnits(indicator,nodesModelToCalc,converter_techs,vintage,"useAnnuity") = 1
13051                      and years_a.val + accounting_converterUnits(indicator,nodesModelToCalc,converter_techs,vintage,"amorTime") > yearsToCalc.val
13052                      and years_a.val <= yearsToCalc.val ),
13053          converter_unitsBuild.l(nodesModelToCalc,years_a,converter_techs,vintage)
13054          * accounting_converterUnits(indicator,nodesModelToCalc,converter_techs,vintage,"perUnitBuild")
13055          * accounting_annuityFactor_converter(indicator,nodesModelToCalc,converter_techs,vintage) )
13056   
13057      + sum ((converter_techs(techs),vintage)
13058                  $converter_usedTech(nodesModelToCalc,yearsToCalc,converter_techs,vintage),
13059          converter_unitsDecom.l(nodesModelToCalc,yearsToCalc,converter_techs,vintage)
13060          * accounting_converterUnits(indicator,nodesModelToCalc,converter_techs,vintage,"perUnitDecom")
13061   
13062          + converter_unitsTotal.l(nodesModelToCalc,yearsToCalc,converter_techs,vintage)
13063          * accounting_converterUnits(indicator,nodesModelToCalc,converter_techs,vintage,"perUnitTotal") )
13064   
13065      + sum ((timeModelToCalc,converter_techs(techs),vintage,activity)
13066                  $converter_usedTechAct(nodesModelToCalc,yearsToCalc,converter_techs,vintage,activity),
13067          converter_activity.l(timeModelToCalc,nodesModelToCalc,yearsToCalc,converter_techs,vintage,activity)
13068          * timeLength(timeModelToCalc)
13069          * accounting_converterActivity(indicator,nodesModelToCalc,converter_techs,vintage,activity,"perActivity") )
13070   
13071      + sum ((timeModelToCalc,converter_techs(techs),vintage)
13072                  $converter_usedTech(nodesModelToCalc,yearsToCalc,converter_techs,vintage),
13073          converter_unitStartups.l(timeModelToCalc,nodesModelToCalc,yearsToCalc,converter_techs,vintage)
13074          * accounting_converterStartup(indicator,nodesModelToCalc,converter_techs,vintage,"perStartup") )
13075   
13076      + sum ((timeModelToCalc,converter_techs(techs),vintage)
13077                  $converter_usedTech(nodesModelToCalc,yearsToCalc,converter_techs,vintage),
13078          converter_rampPos.l(timeModelToCalc,nodesModelToCalc,yearsToCalc,converter_techs,vintage)
13079          * (accounting_converterStartup(indicator,nodesModelToCalc,converter_techs,vintage,"perRamp")
13080              + accounting_converterStartup(indicator,nodesModelToCalc,converter_techs,vintage,"perRampPos"))
13081   
13082          + converter_rampNeg.l(timeModelToCalc,nodesModelToCalc,yearsToCalc,converter_techs,vintage)
13083          * (accounting_converterStartup(indicator,nodesModelToCalc,converter_techs,vintage,"perRamp")
13084              + accounting_converterStartup(indicator,nodesModelToCalc,converter_techs,vintage,"perRampNeg")))
13085   
13086  * == storage ==
13087      + sum ((storage_techs(techs),vintage)
13088                  $(storage_availTech(nodesModelToCalc,yearsToCalc,storage_techs,vintage)
13089                      and accounting_storageUnits(indicator,nodesModelToCalc,storage_techs,vintage,"useAnnuity") = 0),
13090          storage_unitsBuild.l(nodesModelToCalc,yearsToCalc,storage_techs,vintage)
13091          * accounting_storageUnits(indicator,nodesModelToCalc,storage_techs,vintage,"perUnitBuild") )
13092   
13093      + sum ((years_a,storage_techs(techs),vintage)
13094                  $(storage_availTech(nodesModelToCalc,yearsToCalc,storage_techs,vintage)
13095                      and accounting_storageUnits(indicator,nodesModelToCalc,storage_techs,vintage,"useAnnuity") = 1
13096                      and years_a.val + accounting_storageUnits(indicator,nodesModelToCalc,storage_techs,vintage,"amorTime") > yearsToCalc.val
13097                      and years_a.val <= yearsToCalc.val ),
13098          storage_unitsBuild.l(nodesModelToCalc,years_a,storage_techs,vintage)
13099          * accounting_storageUnits(indicator,nodesModelToCalc,storage_techs,vintage,"perUnitBuild")
13100          * accounting_annuityFactor_storage(indicator,nodesModelToCalc,storage_techs,vintage) )
13101   
13102      + sum ((storage_techs(techs),vintage)
13103                  $storage_usedTech(nodesModelToCalc,yearsToCalc,storage_techs,vintage),
13104          storage_unitsDecom.l(nodesModelToCalc,yearsToCalc,storage_techs,vintage)
13105          * accounting_storageUnits(indicator,nodesModelToCalc,storage_techs,vintage,"perUnitDecom")
13106   
13107          + storage_unitsTotal.l(nodesModelToCalc,yearsToCalc,storage_techs,vintage)
13108          * accounting_storageUnits(indicator,nodesModelToCalc,storage_techs,vintage,"perUnitTotal") )
13109   
13110  * == transfer ==
13111      + sum ((linksModel,transfer_techs(techs),vintage)
13112                  $(transfer_availTech(linksModel,yearsToCalc,transfer_techs,vintage)
13113                      and linksModelToCalc(linksModel)
13114                      and transfer_incidenceModel(nodesModelToCalc,linksModel) <> 0
13115                      and accounting_transferLinks(indicator,linksModel,transfer_techs,vintage,"useAnnuity") = 0),
13116          0.5
13117          * transfer_linksBuild.l(linksModel,yearsToCalc,transfer_techs,vintage)
13118          * accounting_transferLinks(indicator,linksModel,transfer_techs,vintage,"perLinkBuild") )
13119   
13120      + sum ((linksModel,years_a,transfer_techs(techs),vintage)
13121                  $(transfer_availTech(linksModel,yearsToCalc,transfer_techs,vintage)
13122                      and linksModelToCalc(linksModel)
13123                      and transfer_incidenceModel(nodesModelToCalc,linksModel) <> 0
13124                      and accounting_transferLinks(indicator,linksModel,transfer_techs,vintage,"useAnnuity") = 1
13125                      and years_a.val + accounting_transferLinks(indicator,linksModel,transfer_techs,vintage,"amorTime") > yearsToCalc.val
13126                      and years_a.val <= yearsToCalc.val ),
13127          0.5
13128          * transfer_linksBuild.l(linksModel,years_a,transfer_techs,vintage)
13129          * accounting_transferLinks(indicator,linksModel,transfer_techs,vintage,"perLinkBuild")
13130          * accounting_annuityFactor_transferLink(indicator,linksModel,transfer_techs,vintage) )
13131   
13132      + sum ((linksModel,transfer_techs(techs),vintage,link_types)
13133                  $(transfer_availTech(linksModel,yearsToCalc,transfer_techs,vintage)
13134                      and linksModelToCalc(linksModel)
13135                      and transfer_incidenceModel(nodesModelToCalc,linksModel) <> 0
13136                      and accounting_transferPerLength(indicator,linksModel,transfer_techs,vintage,link_types,"useAnnuity") = 0 ),
13137          0.5
13138          * transfer_linksBuild.l(linksModel,yearsToCalc,transfer_techs,vintage)
13139          * transfer_lengthParam(linksModel,link_types,"length")
13140          * accounting_transferPerLength(indicator,linksModel,transfer_techs,vintage,link_types,"perLengthBuild") )
13141   
13142      + sum ((linksModel,years_a,transfer_techs(techs),vintage,link_types)
13143                  $(transfer_availTech(linksModel,yearsToCalc,transfer_techs,vintage)
13144                      and linksModelToCalc(linksModel)
13145                      and transfer_incidenceModel(nodesModelToCalc,linksModel) <> 0
13146                      and accounting_transferPerLength(indicator,linksModel,transfer_techs,vintage,link_types,"useAnnuity") = 1
13147                      and years_a.val + accounting_transferPerLength(indicator,linksModel,transfer_techs,vintage,link_types,"amorTime") > yearsToCalc.val
13148                      and years_a.val <= yearsToCalc.val ),
13149          0.5
13150          * transfer_linksBuild.l(linksModel,years_a,transfer_techs,vintage)
13151          * transfer_lengthParam(linksModel,link_types,"length")
13152          * accounting_transferPerLength(indicator,linksModel,transfer_techs,vintage,link_types,"perLengthBuild")
13153          * accounting_annuityFactor_transferPerLength(indicator,linksModel,transfer_techs,vintage,link_types) )
13154   
13155      + sum ((linksModel,transfer_techs(techs),vintage)
13156                  $(transfer_usedTech(linksModel,yearsToCalc,transfer_techs,vintage)
13157                      and linksModelToCalc(linksModel)
13158                      and transfer_incidenceModel(nodesModelToCalc,linksModel) <> 0 ),
13159          0.5
13160          * transfer_linksDecom.l(linksModel,yearsToCalc,transfer_techs,vintage)
13161          * accounting_transferLinks(indicator,linksModel,transfer_techs,vintage,"perLinkDecom")
13162   
13163          + 0.5
13164          * transfer_linksTotal.l(linksModel,yearsToCalc,transfer_techs,vintage)
13165          * accounting_transferLinks(indicator,linksModel,transfer_techs,vintage,"perLinkTotal")
13166   
13167          + 0.5
13168          * sum (link_types,
13169              transfer_linksDecom.l(linksModel,yearsToCalc,transfer_techs,vintage)
13170              * transfer_lengthParam(linksModel,link_types,"length")
13171              * accounting_transferPerLength(indicator,linksModel,transfer_techs,vintage,link_types,"perLengthDecom")
13172   
13173              + transfer_linksTotal.l(linksModel,yearsToCalc,transfer_techs,vintage)
13174              * transfer_lengthParam(linksModel,link_types,"length")
13175              * accounting_transferPerLength(indicator,linksModel,transfer_techs,vintage,link_types,"perLengthTotal"))
13176   
13177          + 0.5
13178          * sum (timeModelToCalc,
13179              transfer_flowAlong.l(timeModelToCalc,linksModel,yearsToCalc,transfer_techs,vintage)
13180              * timeLength(timeModelToCalc)
13181              * ( accounting_transferLinks(indicator,linksModel,transfer_techs,vintage,"perFlow")
13182                  + accounting_transferLinks(indicator,linksModel,transfer_techs,vintage,"perFlowAlong"))
13183   
13184              + transfer_flowAgainst.l(timeModelToCalc,linksModel,yearsToCalc,transfer_techs,vintage)
13185              * timeLength(timeModelToCalc)
13186              * ( accounting_transferLinks(indicator,linksModel,transfer_techs,vintage,"perFlow")
13187                  + accounting_transferLinks(indicator,linksModel,transfer_techs,vintage,"perFlowAgainst")))
13188   
13189          + 0.5
13190          * sum ((timeModelToCalc, link_types),
13191              transfer_flowAlong.l(timeModelToCalc,linksModel,yearsToCalc,transfer_techs,vintage)
13192              * timeLength(timeModelToCalc)
13193              * transfer_lengthParam(linksModel,link_types,"length")
13194              * (accounting_transferPerLength(indicator,linksModel,transfer_techs,vintage,link_types,"perFlow")
13195                  + accounting_transferPerLength(indicator,linksModel,transfer_techs,vintage,link_types,"perFlowAlong"))
13196   
13197              + transfer_flowAgainst.l(timeModelToCalc,linksModel,yearsToCalc,transfer_techs,vintage)
13198              * timeLength(timeModelToCalc)
13199              * transfer_lengthParam(linksModel,link_types,"length")
13200              * (accounting_transferPerLength(indicator,linksModel,transfer_techs,vintage,link_types,"perFlow")
13201                  + accounting_transferPerLength(indicator,linksModel,transfer_techs,vintage,link_types,"perFlowAgainst"))))
13202   
13203   
13204  * == sources / sinks ==
13205      + sum ((timeModelToCalc,sourcesink_techs(techs),commodity)
13206              $sourcesink_enabled(nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity),
13207          sourcesink_flow.l(timeModelToCalc,nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity)
13208          * timeLength(timeModelToCalc)
13209          * accounting_sourcesinkFlow(indicator,nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity,"perFlow"))
13210      ;
13211   
13212   
13213  * ==== full set of main indicators ====
13214   
13215  indicator_accounting(accNodesModel,accYears,indicator)
13216      $sum((accNodesModel_a,accYears_a,indicator_a)
13217              $compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a), 1)
13218      =
13219      + sum((accNodesModel_a,accYears_a,indicator_a)
13220              $(compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
13221                  and variableIndicators(accNodesModel_a,accYears_a,indicator_a)),
13222          compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
13223          * accounting_indicator.l(accNodesModel_a,accYears_a,indicator_a))
13224   
13225      + sum((accNodesModel_a,accYears_a,indicator_a)
13226              $(compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)),
13227          compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
13228          * (sum((nodesModelToCalc,yearsToCalc,techs)
13229                  $(sameas(accNodesModel_a, nodesModelToCalc)
13230                      and sameas(accYears_a, yearsToCalc)),
13231                  indicator_accounting_detailed(indicator_a,nodesModelToCalc,yearsToCalc,techs))))
13232      ;
13233   
13234  indicator_accounting_comp(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
13235      $compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
13236      =
13237          compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
13238          * accounting_indicator.l(accNodesModel_a,accYears_a,indicator_a)
13239              $variableIndicators(accNodesModel_a,accYears_a,indicator_a)
13240   
13241          + compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
13242          * (sum((nodesModelToCalc,yearsToCalc,techs)
13243                  $(sameas(accNodesModel_a, nodesModelToCalc)
13244                      and sameas(accYears_a, yearsToCalc)),
13245                  indicator_accounting_detailed(indicator_a,nodesModelToCalc,yearsToCalc,techs)))
13246      ;
13247   
13248  indicator_accounting_ref(accNodesModel,accYears,indicator)
13249      $accounting_indicator.l(accNodesModel,accYears,indicator)
13250      = accounting_indicator.l(accNodesModel,accYears,indicator);
13251   
13252  * ==== link-specific indicator accounting ====
13253   
13254  indicator_accounting_links(indicator,nodesModelToCalc,nodesModelToCalc_a,linksModelToCalc,yearsToCalc,techs)
13255      $(transfer_incidenceModel(nodesModelToCalc,linksModelToCalc) < 0
13256          and transfer_incidenceModel(nodesModelToCalc_a,linksModelToCalc) > 0)
13257      =
13258      sum ((transfer_techs(techs),vintage)
13259                  $(transfer_availTech(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
13260                      and accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"useAnnuity") = 0),
13261          transfer_linksBuild.l(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
13262          * accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"perLinkBuild") )
13263   
13264      + sum ((years_a,transfer_techs(techs),vintage)
13265                  $(transfer_availTech(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
13266                      and accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"useAnnuity") = 1
13267                      and years_a.val + accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"amorTime") > yearsToCalc.val
13268                      and years_a.val <= yearsToCalc.val ),
13269          transfer_linksBuild.l(linksModelToCalc,years_a,transfer_techs,vintage)
13270          * accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"perLinkBuild")
13271          * accounting_annuityFactor_transferLink(indicator,linksModelToCalc,transfer_techs,vintage) )
13272   
13273      + sum ((transfer_techs(techs),vintage,link_types)
13274                  $(transfer_availTech(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
13275                      and accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"useAnnuity") = 0 ),
13276          transfer_linksBuild.l(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
13277          * transfer_lengthParam(linksModelToCalc,link_types,"length")
13278          * accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"perLengthBuild") )
13279   
13280      + sum ((years_a,transfer_techs(techs),vintage,link_types)
13281                  $(transfer_availTech(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
13282                      and accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"useAnnuity") = 1
13283                      and years_a.val + accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"amorTime") > yearsToCalc.val
13284                      and years_a.val <= yearsToCalc.val ),
13285          transfer_linksBuild.l(linksModelToCalc,years_a,transfer_techs,vintage)
13286          * transfer_lengthParam(linksModelToCalc,link_types,"length")
13287          * accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"perLengthBuild")
13288          * accounting_annuityFactor_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types) )
13289   
13290      + sum ((transfer_techs(techs),vintage)
13291                  $(transfer_usedTech(linksModelToCalc,yearsToCalc,transfer_techs,vintage)),
13292          transfer_linksDecom.l(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
13293          * accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"perLinkDecom")
13294   
13295          + transfer_linksTotal.l(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
13296          * accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"perLinkTotal")
13297   
13298          + sum (link_types,
13299              transfer_linksDecom.l(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
13300              * transfer_lengthParam(linksModelToCalc,link_types,"length")
13301              * accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"perLengthDecom")
13302   
13303              + transfer_linksTotal.l(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
13304              * transfer_lengthParam(linksModelToCalc,link_types,"length")
13305              * accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"perLengthTotal"))
13306   
13307          + sum (timeModelToCalc,
13308              transfer_flowAlong.l(timeModelToCalc,linksModelToCalc,yearsToCalc,transfer_techs,vintage)
13309              * timeLength(timeModelToCalc)
13310              * ( accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"perFlow")
13311                  + accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"perFlowAlong"))
13312   
13313              + transfer_flowAgainst.l(timeModelToCalc,linksModelToCalc,yearsToCalc,transfer_techs,vintage)
13314              * timeLength(timeModelToCalc)
13315              * ( accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"perFlow")
13316                  + accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"perFlowAgainst")))
13317   
13318          + sum ((timeModelToCalc, link_types),
13319              transfer_flowAlong.l(timeModelToCalc,linksModelToCalc,yearsToCalc,transfer_techs,vintage)
13320              * timeLength(timeModelToCalc)
13321              * transfer_lengthParam(linksModelToCalc,link_types,"length")
13322              * (accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"perFlow")
13323                  + accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"perFlowAlong"))
13324   
13325              + transfer_flowAgainst.l(timeModelToCalc,linksModelToCalc,yearsToCalc,transfer_techs,vintage)
13326              * timeLength(timeModelToCalc)
13327              * transfer_lengthParam(linksModelToCalc,link_types,"length")
13328              * (accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"perFlow")
13329                  + accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"perFlowAgainst")))
13330      );
13331   
13332   
13333  * == converter capacities ==
13334   
13335  converter_ratedInput(converter_techs,vintage,commodity)
13336      $(converter_techParam(converter_techs,vintage,"lifeTime") > 0)
13337      = smin(activity$converter_usedAct(converter_techs,vintage,activity),
13338              converter_coefficient(converter_techs,vintage,activity,commodity,"coefficient"));
13339  converter_ratedInput(converter_techs,vintage,commodity)
13340      $(converter_ratedInput(converter_techs,vintage,commodity) > 0)
13341      = 0;
13342   
13343  converter_ratedOutput(converter_techs,vintage,commodity)
13344      $(converter_techParam(converter_techs,vintage,"lifeTime") > 0)
13345      = smax(activity$converter_usedAct(converter_techs,vintage,activity),
13346              converter_coefficient(converter_techs,vintage,activity,commodity,"coefficient"));
13347  converter_ratedOutput(converter_techs,vintage,commodity)
13348      $(converter_ratedOutput(converter_techs,vintage,commodity) < 0)
13349      = 0;
13350   
13351  converter_ratedOutput_min(nodesModelToCalc,years,converter_techs(techs),commodity)
13352      $sum(vintage$(converter_usedTech(nodesModelToCalc,years,converter_techs,vintage)
13353          and converter_ratedOutput(converter_techs,vintage,commodity)), 1)
13354      = smin(vintage$(converter_usedTech(nodesModelToCalc,years,converter_techs,vintage)
13355              and converter_ratedOutput(converter_techs,vintage,commodity)),
13356          converter_ratedOutput(converter_techs,vintage,commodity));
13357   
13358  converter_ratedOutput_max(nodesModelToCalc,years,converter_techs(techs),commodity)
13359      $sum(vintage$(converter_usedTech(nodesModelToCalc,years,converter_techs,vintage)
13360          and converter_ratedOutput(converter_techs,vintage,commodity)), 1)
13361      = smax(vintage$(converter_usedTech(nodesModelToCalc,years,converter_techs,vintage)
13362              and converter_ratedOutput(converter_techs,vintage,commodity)),
13363          converter_ratedOutput(converter_techs,vintage,commodity));
13364   
13365  converter_units_ext(map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,years),converter_techs(techs),vintage,"build")
13366      = converter_unitsBuild.l(nodesModelToCalc,years,converter_techs,vintage);
13367   
13368  converter_units_ext(map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,years),converter_techs(techs),vintage,"decom")
13369      = converter_unitsDecom.l(nodesModelToCalc,years,converter_techs,vintage);
13370   
13371  converter_units_ext(map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,years),converter_techs(techs),vintage,"total")
13372      = converter_unitsTotal.l(nodesModelToCalc,years,converter_techs,vintage);
13373   
13374  converter_caps_ext(map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,years),converter_techs(techs),vintage,commodity,capType)
13375      $(converter_ratedOutput(converter_techs,vintage,commodity))
13376      = converter_units_ext(accNodesModel,nodesModelToCalc,accYears,years,techs,vintage,capType)
13377          * converter_ratedOutput(converter_techs,vintage,commodity);
13378   
13379  converter_caps_ext(map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,years),converter_techs(techs),vintage,commodity,"lowerLimit")
13380      $(converter_usedTech(nodesModelToCalc,years,converter_techs,vintage)
13381          and converter_capacityParam(nodesModelToCalc,years,converter_techs,"unitsLowerLimit") > 0
13382          and converter_ratedOutput_min(nodesModelToCalc,years,converter_techs,commodity))
13383      = converter_capacityParam(nodesModelToCalc,years,converter_techs,"unitsLowerLimit")
13384          * converter_ratedOutput_min(nodesModelToCalc,years,converter_techs,commodity);
13385   
13386  converter_caps_ext(map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,years),converter_techs(techs),vintage,commodity,"upperLimit")
13387      $(converter_usedTech(nodesModelToCalc,years,converter_techs,vintage)
13388          and converter_capacityParam(nodesModelToCalc,years,converter_techs,"unitsUpperLimit") < inf
13389          and converter_ratedOutput_min(nodesModelToCalc,years,converter_techs,commodity))
13390      = converter_capacityParam(nodesModelToCalc,years,converter_techs,"unitsUpperLimit")
13391          * converter_ratedOutput_max(nodesModelToCalc,years,converter_techs,commodity);
13392   
13393  converter_caps(accNodesModel,accYears,converter_techs(techs),commodity,capType)
13394      = sum((nodesModelToCalc,years,vintage)
13395              $(map_accNodesPostCalc(accNodesModel,nodesModelToCalc)
13396                  and map_accYearsPostCalc(accYears,years)),
13397          converter_caps_ext(accNodesModel,nodesModelToCalc,accYears,years,converter_techs,vintage,commodity,capType));
13398  option clear = converter_caps_ext;
13399   
13400  converter_units(accNodesModel,accYears,converter_techs(techs),vintage,capType)
13401      = sum((nodesModelToCalc,years)
13402              $(map_accNodesPostCalc(accNodesModel,nodesModelToCalc)
13403                  and map_accYearsPostCalc(accYears,years)),
13404          converter_units_ext(accNodesModel,nodesModelToCalc,accYears,years,converter_techs,vintage,capType));
13405  option clear = converter_units_ext;
13406   
13407   
13408  * ==== transfer capacities ====
13409   
13410  max_transfer_coefficient(transfer_techs(techs),commodity)
13411          $(smax(vintage, transfer_coefficient(transfer_techs,vintage,commodity,"coefficient")) > 0)
13412          = smax(vintage, transfer_coefficient(transfer_techs,vintage,commodity,"coefficient"));
13413   
13414  min_transfer_coefficient(transfer_techs(techs),commodity)
13415          $(smin(vintage, transfer_coefficient(transfer_techs,vintage,commodity,"coefficient")) > 0)
13416          = smin(vintage, transfer_coefficient(transfer_techs,vintage,commodity,"coefficient"));
13417   
13418  transfer_usedStartEnd(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,years,transfer_techs)
13419      $(transfer_incidenceModel(nodesModelToCalc_start,linksModel) < 0
13420          and transfer_incidenceModel(nodesModelToCalc_end,linksModel) > 0
13421          and sum(vintage$transfer_usedTech(linksModel,years,transfer_techs,vintage), 1))
13422      = yes;
13423   
13424  transfer_links(linksModel,years,transfer_techs,vintage,"build")
13425      = transfer_linksBuild.l(linksModel,years,transfer_techs,vintage);
13426   
13427  transfer_links(linksModel,years,transfer_techs,vintage,"decom")
13428      = transfer_linksDecom.l(linksModel,years,transfer_techs,vintage);
13429   
13430  transfer_links(linksModel,years,transfer_techs,vintage,"total")
13431      = transfer_linksTotal.l(linksModel,years,transfer_techs,vintage);
13432   
13433  transfer_caps(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,years,transfer_techs(techs),commodity,capType)
13434      $(transfer_usedStartEnd(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,years,transfer_techs)
13435          and sum(vintage$(transfer_usedTech(linksModel,years,transfer_techs,vintage)
13436                              and transfer_coefficient(transfer_techs,vintage,commodity,"coefficient")), 1))
13437      = sum(vintage,
13438          transfer_links(linksModel,years,transfer_techs,vintage,capType)
13439          * transfer_coefficient(transfer_techs,vintage,commodity,"coefficient"));
13440   
13441  transfer_caps(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,years,transfer_techs(techs),commodity,"lowerLimit")
13442      $(transfer_usedStartEnd(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,years,transfer_techs)
13443          and sum(vintage$(transfer_usedTech(linksModel,years,transfer_techs,vintage)
13444                              and transfer_coefficient(transfer_techs,vintage,commodity,"coefficient")), 1))
13445      = transfer_linksParam(linksModel,years,transfer_techs,'linksLowerLimit')
13446          * min_transfer_coefficient(transfer_techs,commodity);
13447   
13448  transfer_caps(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,years,transfer_techs(techs),commodity,"upperLimit")
13449      $(transfer_usedStartEnd(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,years,transfer_techs)
13450          and sum(vintage$(transfer_usedTech(linksModel,years,transfer_techs,vintage)
13451                              and transfer_coefficient(transfer_techs,vintage,commodity,"coefficient")), 1))
13452      = transfer_linksParam(linksModel,years,transfer_techs,'linksUpperLimit')
13453          * max_transfer_coefficient(transfer_techs,commodity);
13454   
13455   
13456  * ==== transfer flows ====
13457   
13458  transfer_flows(timeModelToCalc,nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs(techs),commodity)
13459      $transfer_usedStartEnd(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs)
13460      = sum(vintage,
13461          ( transfer_flowAlong.l(timeModelToCalc,linksModel,yearsToCalc,transfer_techs,vintage)
13462              - transfer_flowAgainst.l(timeModelToCalc,linksModel,yearsToCalc,transfer_techs,vintage) )
13463          * timeLength(timeModelToCalc)
13464          * transfer_coefficient(transfer_techs,vintage,commodity,"coefficient"));
13465   
13466  transfer_flows_annual(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs(techs),commodity,"netto")
13467      $transfer_usedStartEnd(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs)
13468      = sum(timeModelToCalc,
13469          transfer_flows(timeModelToCalc,nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs,commodity));
13470   
13471  transfer_flows_annual(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs(techs),commodity,"positive")
13472      $transfer_usedStartEnd(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs)
13473      = sum(timeModelToCalc
13474              $(transfer_flows(timeModelToCalc,nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs,commodity) > 0),
13475          transfer_flows(timeModelToCalc,nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs,commodity));
13476   
13477  transfer_flows_annual(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs(techs),commodity,"negative")
13478      $transfer_usedStartEnd(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs)
13479      = sum(timeModelToCalc
13480              $(transfer_flows(timeModelToCalc,nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs,commodity) < 0),
13481          transfer_flows(timeModelToCalc,nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs,commodity));
13482   
13483  transfer_flows_annual(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs(techs),commodity,"brutto")
13484      $transfer_usedStartEnd(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs)
13485      = transfer_flows_annual(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs,commodity,"positive")
13486          - transfer_flows_annual(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs,commodity,"negative");
13487   
13488  transfer_flows_annual(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs(techs),commodity,"flh")
13489      $(transfer_usedStartEnd(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs)
13490          and transfer_flows_annual(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs,commodity,"brutto") > 0
13491          and transfer_caps(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs,commodity,"total") > 0)
13492      = transfer_flows_annual(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs,commodity,"brutto")
13493          / transfer_caps(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs,commodity,"total");
13494   
13495  transfer_losses(timeModelToCalc,nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs(techs),commodity)
13496      $(transfer_usedStartEnd(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs)
13497          and (sum(vintage$transfer_coefPerFlow(transfer_techs,vintage,commodity,"coefPerFlow"), 1)
13498              or sum((vintage, link_types)$transfer_coefPerLength(transfer_techs,vintage,commodity,link_types,"coefPerLength"), 1)))
13499      = -1 * abs(sum(vintage,
13500          ( transfer_flowAlong.l(timeModelToCalc,linksModel,yearsToCalc,transfer_techs,vintage)
13501              - transfer_flowAgainst.l(timeModelToCalc,linksModel,yearsToCalc,transfer_techs,vintage) )
13502          * ( transfer_coefPerFlow(transfer_techs,vintage,commodity,"coefPerFlow")
13503              + sum(link_types,
13504                  transfer_coefPerLength(transfer_techs,vintage,commodity,link_types,"coefPerLength")
13505                  * transfer_lengthParam(linksModel,link_types,"length")))))
13506          * timeLength(timeModelToCalc);
13507   
13508  transfer_losses_annual(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs(techs),commodity,"netto")
13509      $(transfer_usedStartEnd(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs)
13510          and (sum(vintage$transfer_coefPerFlow(transfer_techs,vintage,commodity,"coefPerFlow"), 1)
13511              or sum((vintage, link_types)$transfer_coefPerLength(transfer_techs,vintage,commodity,link_types,"coefPerLength"), 1)))
13512      = sum(timeModelToCalc,
13513          transfer_losses(timeModelToCalc,nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs,commodity));
13514   
13515   
13516  * ==== storage capacities ====
13517   
13518  storage_size_max(nodesModelToCalc,years,storage_techs(techs),commodity)
13519      $sum(vintage$(storage_usedTech(nodesModelToCalc,years,storage_techs,vintage)
13520              and storage_usedCom(storage_techs,vintage,commodity)
13521              and storage_sizeParam(storage_techs,vintage,commodity,"size")), 1)
13522      = smax(vintage$(storage_usedTech(nodesModelToCalc,years,storage_techs,vintage)
13523              and storage_usedCom(storage_techs,vintage,commodity)
13524              and storage_sizeParam(storage_techs,vintage,commodity,"size")),
13525          storage_sizeParam(storage_techs,vintage,commodity,"size"));
13526   
13527  storage_size_min(nodesModelToCalc,years,storage_techs(techs),commodity)
13528      $sum(vintage$(storage_usedTech(nodesModelToCalc,years,storage_techs,vintage)
13529              and storage_usedCom(storage_techs,vintage,commodity)
13530              and storage_sizeParam(storage_techs,vintage,commodity,"size")), 1)
13531      = smin(vintage$(storage_usedTech(nodesModelToCalc,years,storage_techs,vintage)
13532              and storage_usedCom(storage_techs,vintage,commodity)
13533              and storage_sizeParam(storage_techs,vintage,commodity,"size")),
13534          storage_sizeParam(storage_techs,vintage,commodity,"size"));
13535   
13536  storage_units_ext(map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,years),storage_techs(techs),vintage,"build")
13537      $storage_usedTech(nodesModelToCalc,years,storage_techs,vintage)
13538      = storage_unitsBuild.l(nodesModelToCalc,years,storage_techs,vintage);
13539   
13540  storage_units_ext(map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,years),storage_techs(techs),vintage,"decom")
13541      $storage_usedTech(nodesModelToCalc,years,storage_techs,vintage)
13542      = storage_unitsDecom.l(nodesModelToCalc,years,storage_techs,vintage);
13543   
13544  storage_units_ext(map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,years),storage_techs(techs),vintage,"total")
13545      $storage_usedTech(nodesModelToCalc,years,storage_techs,vintage)
13546      = storage_unitsTotal.l(nodesModelToCalc,years,storage_techs,vintage);
13547   
13548  storage_caps_ext(map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,years),storage_techs(techs),vintage,commodity,capType)
13549      $storage_sizeParam(storage_techs,vintage,commodity,"size")
13550      = storage_units_ext(accNodesModel,nodesModelToCalc,accYears,years,storage_techs,vintage,capType)
13551          * storage_sizeParam(storage_techs,vintage,commodity,"size");
13552   
13553  storage_caps_ext(map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,years),storage_techs(techs),vintage,commodity,"lowerLimit")
13554      $(storage_usedTech(nodesModelToCalc,years,storage_techs,vintage)
13555          and storage_reservoirParam(nodesModelToCalc,years,storage_techs,"unitsLowerLimit") > 0
13556          and storage_size_min(nodesModelToCalc,years,storage_techs,commodity))
13557      = storage_reservoirParam(nodesModelToCalc,years,storage_techs,"unitsLowerLimit")
13558          * storage_size_min(nodesModelToCalc,years,storage_techs,commodity);
13559   
13560  storage_caps_ext(map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,years),storage_techs(techs),vintage,commodity,"upperLimit")
13561      $(storage_usedTech(nodesModelToCalc,years,storage_techs,vintage)
13562          and storage_reservoirParam(nodesModelToCalc,years,storage_techs,"unitsUpperLimit") < inf
13563          and storage_size_max(nodesModelToCalc,years,storage_techs,commodity))
13564      = storage_reservoirParam(nodesModelToCalc,years,storage_techs,"unitsUpperLimit")
13565          * storage_size_max(nodesModelToCalc,years,storage_techs,commodity);
13566   
13567  storage_caps_ext(map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,years),storage_techs(techs),vintage,commodity,"total_degraded")
13568      $(storage_usedCom(storage_techs,vintage,commodity)
13569          and (storage_techParam(storage_techs,vintage,"annualDegradation") > 0
13570               or storage_techParam(storage_techs,vintage,"usageDegradation")))
13571      = sum((degradation_states,yearsCom), (storage_degradationParam(storage_techs,vintage,degradation_states,"remainingCapacity")
13572                                      - (years.val - yearsCom.val) * storage_techParam(storage_techs,vintage,"annualDegradation"))
13573                                      * storage_unitsStateTracker.l(nodesModelToCalc,years,yearsCom,storage_techs,vintage,degradation_states)
13574                                      * storage_sizeParam(storage_techs,vintage,commodity,"size"));
13575   
13576  storage_caps(accNodesModel,accYears,storage_techs(techs),commodity,capType)
13577      = sum((nodesModelToCalc,years,vintage)
13578              $(map_accNodesPostCalc(accNodesModel,nodesModelToCalc)
13579                  and map_accYearsPostCalc(accYears,years)),
13580          storage_caps_ext(accNodesModel,nodesModelToCalc,accYears,years,storage_techs,vintage,commodity,capType));
13581  option clear = storage_caps_ext;
13582   
13583  storage_units(accNodesModel,accYears,storage_techs(techs),vintage,capType)
13584      = sum((nodesModelToCalc,years)
13585              $(map_accNodesPostCalc(accNodesModel,nodesModelToCalc)
13586                  and map_accYearsPostCalc(accYears,years)),
13587          storage_units_ext(accNodesModel,nodesModelToCalc,accYears,years,storage_techs,vintage,capType));
13588  option clear = storage_units_ext;
13589   
13590   
13591  * ==== storage levels and flows ====
13592   
13593  storage_flows_ext(timeModelToCalc,map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,yearsToCalc),storage_techs(techs),vintage,commodity)
13594      $(storage_usedTech(nodesModelToCalc,yearsToCalc,storage_techs,vintage) and balance_techComm(storage_techs,commodity))
13595      = storage_level.l(timeModelToCalc,nodesModelToCalc,yearsToCalc,storage_techs,vintage,commodity)
13596          - storage_level.l(timeModelToCalc--1,nodesModelToCalc,yearsToCalc,storage_techs,vintage,commodity)
13598      + storage_losses.l(timeModelToCalc,nodesModelToCalc,yearsToCalc,storage_techs,vintage,commodity)
13599          * timeLength(timeModelToCalc)
13601      ;
13602   
13603  storage_flows(timeModelToCalc,accNodesModel,accYears,storage_techs(techs),commodity)
13604      = sum((nodesModelToCalc,yearsToCalc,vintage)
13605              $(storage_usedTech(nodesModelToCalc,yearsToCalc,storage_techs,vintage) and balance_techComm(storage_techs,commodity)),
13606          storage_flows_ext(timeModelToCalc,accNodesModel,nodesModelToCalc,accYears,yearsToCalc,storage_techs,vintage,commodity));
13607  option clear = storage_flows_ext;
13608   
13609  storage_level_out_ext(timeModelToCalc,map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,yearsToCalc),storage_techs(techs),vintage,commodity)
13610      $(storage_usedTech(nodesModelToCalc,yearsToCalc,storage_techs,vintage) and balance_techComm(storage_techs,commodity))
13611      = storage_level.l(timeModelToCalc,nodesModelToCalc,yearsToCalc,storage_techs,vintage,commodity);
13612   
13613  storage_level_out(timeModelToCalc,accNodesModel,accYears,storage_techs(techs),commodity)
13614      = sum((nodesModelToCalc,yearsToCalc,vintage)
13615              $(storage_usedTech(nodesModelToCalc,yearsToCalc,storage_techs,vintage) and balance_techComm(storage_techs,commodity)),
13616          storage_level_out_ext(timeModelToCalc,accNodesModel,nodesModelToCalc,accYears,yearsToCalc,storage_techs,vintage,commodity));
13617  option clear = storage_level_out_ext;
13618   
13619  storage_flows_annual(accNodesModel,accYears,storage_techs(techs),commodity,"netto")
13620      = sum(timeModelToCalc,
13621          storage_flows(timeModelToCalc,accNodesModel,accYears,storage_techs,commodity));
13622   
13623  storage_flows_annual(accNodesModel,accYears,storage_techs(techs),commodity,"positive")
13624      = sum(timeModelToCalc
13625              $(storage_flows(timeModelToCalc,accNodesModel,accYears,storage_techs,commodity) > 0),
13626          storage_flows(timeModelToCalc,accNodesModel,accYears,storage_techs,commodity));
13627   
13628  storage_flows_annual(accNodesModel,accYears,storage_techs(techs),commodity,"negative")
13629      = sum(timeModelToCalc
13630              $(storage_flows(timeModelToCalc,accNodesModel,accYears,storage_techs,commodity) < 0),
13631          storage_flows(timeModelToCalc,accNodesModel,accYears,storage_techs,commodity));
13632   
13633  storage_flows_annual(accNodesModel,accYears,storage_techs(techs),commodity,"brutto")
13634      = storage_flows_annual(accNodesModel,accYears,storage_techs,commodity,"positive")
13635          + storage_flows_annual(accNodesModel,accYears,storage_techs,commodity,"negative");
13636   
13637  storage_flows_annual(accNodesModel,accYears,storage_techs(techs),commodity,"flh")
13638      $(storage_flows_annual(accNodesModel,accYears,storage_techs,commodity,"brutto") > 0
13639          and storage_caps(accNodesModel,accYears,storage_techs,commodity,"total") > 0)
13640      = storage_flows_annual(accNodesModel,accYears,storage_techs,commodity,"brutto")
13641          / storage_caps(accNodesModel,accYears,storage_techs,commodity,"total");
13642   
13643  storage_losses_out(timeModelToCalc,accNodesModel,accYears,storage_techs(techs),commodity)
13644      = sum((nodesModelToCalc,yearsToCalc,vintage)
13645              $(storage_losses.l(timeModelToCalc,nodesModelToCalc,yearsToCalc,storage_techs,vintage,commodity)
13646                  and map_accNodesPostCalc(accNodesModel,nodesModelToCalc)
13647                  and map_accYearsPostCalc(accYears,yearsToCalc)),
13648          storage_losses.l(timeModelToCalc,nodesModelToCalc,yearsToCalc,storage_techs,vintage,commodity)
13649          * timeLength(timeModelToCalc));
13650   
13651  storage_losses_annual(accNodesModel,accYears,storage_techs(techs),commodity,"netto")
13652      = sum(timeModelToCalc,
13653          storage_losses_out(timeModelToCalc,accNodesModel,accYears,storage_techs,commodity));
13654   
13655   
13656  * == commodity balance ==
13657   
13658  commodity_balance_ext(timeModelToCalc,map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,yearsToCalc),converter_techs(techs),vintage,commodity)
13659      $(converter_usedTech(nodesModelToCalc,yearsToCalc,converter_techs,vintage)
13660          and balance_usedConverter(nodesModelToCalc,yearsToCalc,commodity))
13661      = sum((activity)
13662              $(converter_coefficientProfile(timeModelToCalc,nodesModelToCalc,yearsToCalc,converter_techs,vintage,activity,commodity)),
13663          converter_activity.l(timeModelToCalc,nodesModelToCalc,yearsToCalc,converter_techs,vintage,activity)
13664              * timeLength(timeModelToCalc)
13665              * converter_coefficientProfile(timeModelToCalc,nodesModelToCalc,yearsToCalc,converter_techs,vintage,activity,commodity)
13666          + converter_unitsUsingActivity_MIP.l(timeModelToCalc,nodesModelToCalc,yearsToCalc,converter_techs,vintage,activity)
13667              * timeLength(timeModelToCalc)
13668              * converter_coefficient(converter_techs,vintage,activity,commodity,"constant"));
13669   
13670  commodity_balance_ext(timeModelToCalc,map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,yearsToCalc),storage_techs(techs),vintage,commodity)
13671      $(storage_usedTech(nodesModelToCalc,yearsToCalc,storage_techs,vintage)
13672          and storage_sizeParam(storage_techs,vintage,commodity,"size"))
13673      = commodity_balance_ext(timeModelToCalc,accNodesModel,nodesModelToCalc,accYears,yearsToCalc,storage_techs,vintage,commodity)
13674      + storage_level.l(timeModelToCalc--1,nodesModelToCalc,yearsToCalc,storage_techs,vintage,commodity)
13675          - storage_level.l(timeModelToCalc,nodesModelToCalc,yearsToCalc,storage_techs,vintage,commodity)
13676      - storage_losses.l(timeModelToCalc,nodesModelToCalc,yearsToCalc,storage_techs,vintage,commodity)
13677      * timeLength(timeModelToCalc);
13678   
13679  commodity_balance_ext(timeModelToCalc,map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,yearsToCalc),sourcesink_techs(techs),vintage,commodity)
13680      $(sourcesink_enabled(nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity)
13681          and sameas(yearsToCalc,vintage))
13682      = commodity_balance_ext(timeModelToCalc,accNodesModel,nodesModelToCalc,accYears,yearsToCalc,sourcesink_techs,vintage,commodity)
13683      + sourcesink_flow.l(timeModelToCalc,nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity)
13684      * timeLength(timeModelToCalc);
13685   
13686  commodity_balance_ext(timeModelToCalc,map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,yearsToCalc),transfer_techs(techs),vintage,commodity)
13687      $sum((linksModel)
13688          $(transfer_incidenceModel(nodesModelToCalc,linksModel)
13689                  and transfer_usedTech(linksModel,yearsToCalc,transfer_techs,vintage)
13690                  and transfer_coefficient(transfer_techs,vintage,commodity,"coefficient")), 1)
13691      = commodity_balance_ext(timeModelToCalc,accNodesModel,nodesModelToCalc,accYears,yearsToCalc,transfer_techs,vintage,commodity)
13692      + sum((linksModel)
13693              $(transfer_incidenceModel(nodesModelToCalc,linksModel)
13694                  and transfer_usedTech(linksModel,yearsToCalc,transfer_techs,vintage)
13695                  and transfer_coefficient(transfer_techs,vintage,commodity,"coefficient")),
13696   
13697              (transfer_flowAlong.l(timeModelToCalc,linksModel,yearsToCalc,transfer_techs,vintage)
13698                      $(transfer_incidenceModel(nodesModelToCalc,linksModel) > 0)
13699                + transfer_flowAgainst.l(timeModelToCalc,linksModel,yearsToCalc,transfer_techs,vintage)
13700                      $(transfer_incidenceModel(nodesModelToCalc,linksModel) < 0))
13701              * timeLength(timeModelToCalc)
13702              * transfer_coefficient(transfer_techs,vintage,commodity,"coefficient")
13703   
13704              - (transfer_flowAlong.l(timeModelToCalc,linksModel,yearsToCalc,transfer_techs,vintage)
13705                      $(transfer_incidenceModel(nodesModelToCalc,linksModel) < 0)
13706                + transfer_flowAgainst.l(timeModelToCalc,linksModel,yearsToCalc,transfer_techs,vintage)
13707                      $(transfer_incidenceModel(nodesModelToCalc,linksModel) > 0))
13708              * timeLength(timeModelToCalc)
13709              * transfer_coefficient(transfer_techs,vintage,commodity,"coefficient")
13710   
13711              + 0.5 * ((transfer_flowAlong.l(timeModelToCalc,linksModel,yearsToCalc,transfer_techs,vintage)
13712                          $(transfer_incidenceModel(nodesModelToCalc,linksModel) <> 0)
13713                      + transfer_flowAgainst.l(timeModelToCalc,linksModel,yearsToCalc,transfer_techs,vintage)
13714                          $(transfer_incidenceModel(nodesModelToCalc,linksModel) <> 0))
13715                      * timeLength(timeModelToCalc)
13716                      * ( transfer_coefPerFlow(transfer_techs,vintage,commodity,"coefPerFlow")
13717                          + sum(link_types,
13718                              transfer_coefPerLength(transfer_techs,vintage,commodity,link_types,"coefPerLength")
13719                              * transfer_lengthParam(linksModel,link_types,"length")))))
13720      ;
13721   
13722  commodity_balance(timeModelToCalc,accNodesModel,accYears,balance_techComm(techs,commodity))
13723      = sum((nodesModelToCalc,yearsToCalc,vintage)
13724              $(commodity_balance_ext(timeModelToCalc,accNodesModel,nodesModelToCalc,accYears,yearsToCalc,techs,vintage,commodity)
13725                  and map_accNodesPostCalc(accNodesModel,nodesModelToCalc)
13726                  and map_accYearsPostCalc(accYears,yearsToCalc)),
13727          commodity_balance_ext(timeModelToCalc,accNodesModel,nodesModelToCalc,accYears,yearsToCalc,techs,vintage,commodity));
13728  option clear = commodity_balance_ext;
13729   
13730   
13731  * ==== annual commodity sums ====
13732   
13733  commodity_balance_annual(accNodesModel,accYears,techs,commodity,"netto")
13734      = sum(timeModelToCalc,
13735          commodity_balance(timeModelToCalc,accNodesModel,accYears,techs,commodity));
13736   
13737  commodity_balance_annual(accNodesModel,accYears,techs,commodity,"positive")
13738      = sum(timeModelToCalc
13739              $(commodity_balance(timeModelToCalc,accNodesModel,accYears,techs,commodity) > 0),
13740          commodity_balance(timeModelToCalc,accNodesModel,accYears,techs,commodity));
13741   
13742  commodity_balance_annual(accNodesModel,accYears,techs,commodity,"negative")
13743      = sum(timeModelToCalc
13744              $(commodity_balance(timeModelToCalc,accNodesModel,accYears,techs,commodity) < 0),
13745          commodity_balance(timeModelToCalc,accNodesModel,accYears,techs,commodity));
13746   
13747  commodity_balance_annual(accNodesModel,accYears,techs,commodity,"brutto")
13748      = commodity_balance_annual(accNodesModel,accYears,techs,commodity,"positive")
13749          - commodity_balance_annual(accNodesModel,accYears,techs,commodity,"negative");
13750   
13751  commodity_balance_annual(accNodesModel,accYears,techs,commodity,"flh")
13752      $(commodity_balance_annual(accNodesModel,accYears,techs,commodity,"brutto") > 0
13753          and converter_caps(accNodesModel,accYears,techs,commodity,"total") > 0 )
13754      = commodity_balance_annual(accNodesModel,accYears,techs,commodity,"brutto")
13755          / converter_caps(accNodesModel,accYears,techs,commodity,"total");
13756   
13757   
13758  * ==== marginal information ====
13759   
13760  marginals_balance(timeModelToCalc,nodesModelToCalc,yearsToCalc,commodity)
13761    $balance_usedBalance(nodesModelToCalc,yearsToCalc,commodity)
13762    =
13763    Eq_balance_commodities.m(timeModelToCalc,nodesModelToCalc,yearsToCalc,commodity);
13764   
13765  marginals_sourcesink_profile(timeModelToCalc,nodesModelToCalc,yearsToCalc,sourcesink_techs(techs),commodity)
13766      $( sourcesink_flow.m(timeModelToCalc,nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity) <> 0 )
13767      =
13768      sourcesink_flow.m(timeModelToCalc,nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity);
13769   
13770  marginals_sourcesink_sum(nodesModelToCalc,yearsToCalc,sourcesink_techs(techs),commodity)
13771      $( ( Eq_sourcesink_useLowerSum.m(nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity)
13772          + Eq_sourcesink_useUpperSum.m(nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity)
13773          + Eq_sourcesink_useFixedSum.m(nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity) ) <> eps )
13774      =
13775      ( Eq_sourcesink_useLowerSum.m(nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity)
13776      + Eq_sourcesink_useUpperSum.m(nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity)
13777      + Eq_sourcesink_useFixedSum.m(nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity) );
13778   
13779  marginals_indicator_bounds(accNodesModel,accYears,indicator)
13780      $( accounting_indicator.m(accNodesModel,accYears,indicator) <> 0 )
13781      =
13782      accounting_indicator.m(accNodesModel,accYears,indicator);
13783   
13784   
13785  * ==== R2A postcalc information ====
13786   
13788   
13789   
13790  * ==== round profiles to reduce size of gdx ====
13791   
13793  commodity_balance(timeModelToCalc,accNodesModel,accYears,techs,commodity)
13794      $commodity_balance(timeModelToCalc,accNodesModel,accYears,techs,commodity)
13795      = round(commodity_balance(timeModelToCalc,accNodesModel,accYears,techs,commodity), 6);
13796   
13797  transfer_flows(timeModelToCalc,nodesModelToCalc,nodesModelToCalc_a,linksModel,yearsToCalc,transfer_techs,commodity)
13798      $transfer_flows(timeModelToCalc,nodesModelToCalc,nodesModelToCalc_a,linksModel,yearsToCalc,transfer_techs,commodity)
13799      = round(transfer_flows(timeModelToCalc,nodesModelToCalc,nodesModelToCalc_a,linksModel,yearsToCalc,transfer_techs,commodity), 6);
13800   
13801  transfer_losses(timeModelToCalc,nodesModelToCalc,nodesModelToCalc_a,linksModel,yearsToCalc,transfer_techs,commodity)
13802      $transfer_losses(timeModelToCalc,nodesModelToCalc,nodesModelToCalc_a,linksModel,yearsToCalc,transfer_techs,commodity)
13803      = round(transfer_losses(timeModelToCalc,nodesModelToCalc,nodesModelToCalc_a,linksModel,yearsToCalc,transfer_techs,commodity), 6);
13804   
13805  storage_flows(timeModelToCalc,accNodesModel,accYears,storage_techs,commodity)
13806      $storage_flows(timeModelToCalc,accNodesModel,accYears,storage_techs,commodity)
13807      = round(storage_flows(timeModelToCalc,accNodesModel,accYears,storage_techs,commodity), 6);
13808   
13809  storage_level_out(timeModelToCalc,accNodesModel,accYears,storage_techs,commodity)
13810      $storage_level_out(timeModelToCalc,accNodesModel,accYears,storage_techs,commodity)
13811      = round(storage_level_out(timeModelToCalc,accNodesModel,accYears,storage_techs,commodity), 6);
13812   
13813  marginals_balance(timeModelToCalc,nodesModelToCalc,yearsToCalc,commodity)
13814      $marginals_balance(timeModelToCalc,nodesModelToCalc,yearsToCalc,commodity)
13815      = round(marginals_balance(timeModelToCalc,nodesModelToCalc,yearsToCalc,commodity), 6);
13816   
13817  marginals_sourcesink_profile(timeModelToCalc,nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity)
13818      $marginals_sourcesink_profile(timeModelToCalc,nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity)
13819      = round(marginals_sourcesink_profile(timeModelToCalc,nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity), 6);
13821   
INCLUDE    C:\Local\REMix\framework\remix\framework\model\source\postcalc\writegdx.gms
13824  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
13825  * SPDX-License-Identifier: BSD-3-Clause
13826   
13829   
13830  execute_unload "C:\Local\REMix\remix_nz\output\will\01-battery-distributed_2020-2035-2050\result\01-battery-distributed_2020-2035-2050.gdx"
13831      metadata
13832      timeModel
13833      timeModelToCalc
13834      nodesModel
13835      linksModel
13836      indicator
13837      commodity
13838      techs
13839      accNodesModel
13840      accYears
13841   
13842      map_nodesModel
13843      map_linksModel
13844      map_nodesAccounting
13845   
13846      indicator_accounting
13847      indicator_accounting_ref
13848      indicator_accounting_comp
13849      indicator_accounting_detailed
13850      indicator_accounting_links
13851   
13852      converter_caps
13853      converter_units
13855   
13856      transfer_caps
13857      transfer_links
13858      transfer_flows
13859      transfer_flows_annual
13860      transfer_losses
13861      transfer_losses_annual
13862   
13863      storage_caps
13864      storage_units
13865      storage_flows
13866      storage_level_out
13867      storage_flows_annual
13868      storage_losses_out
13869      storage_losses_annual
13871   
13872      commodity_balance
13873      commodity_balance_annual
13874   
13875      marginals_balance
13876      marginals_sourcesink_profile
13877      marginals_sourcesink_sum
13878      marginals_indicator_bounds
13879   
13881      ;
GAMS 40.4.0  d540b52e Oct 3, 2022           WEX-WEI x86 64bit/MS Windows - 03/07/24 13:57:35 Page 2
G e n e r a l   A l g e b r a i c   M o d e l i n g   S y s t e m
Include File Summary


   SEQ   GLOBAL TYPE      PARENT   LOCAL  FILENAME

     1        1 INPUT          0       0  C:\Local\REMix\framework\remix\framework\model\run_remix.gms
     2       13 IF DEXIST      1      13  C:\Local\REMix\remix_nz\output\will\01-battery-distributed_2020-2035-2050\data\
     3       16 INCLUDE        1      16  .C:\Local\REMix\framework\remix\framework\model\source\metadata.gms
     4       25 CALL           3       9  .printf "remix_version \"0.9.7\"\n" > c:\Local\REMix\remix_nz\process\225a\\metadata
     5       26 CALL           3      10  .printf "gams_version \"40.4.0\"\n" >> c:\Local\REMix\remix_nz\process\225a\\metadata
     6       27 CALL           3      11  .printf "timestamp \"03/07/24 13:57:35\"\n" >> c:\Local\REMix\remix_nz\process\225a\\metadata
     7       29 CALL           3      13  .printf "framework_path " >> c:\Local\REMix\remix_nz\process\225a\\metadata
     8       31 CALL           3      15  .cd C:\Local\REMix\framework\remix\framework\model\source && cd| sed "s/^/\"/;s/$/\"/" >> c:\Local\REMix\remix_nz\process\225a\\metadata
     9       33 CALL           3      19  .printf "\n" >> c:\Local\REMix\remix_nz\process\225a\\metadata
    10       34 CALL           3      20  .printf "framework_hash " >> c:\Local\REMix\remix_nz\process\225a\\metadata
    11       36 CALL           3      22  .cd C:\Local\REMix\framework\remix\framework\model\source && git rev-parse HEAD >nul 2>&1 && git rev-parse HEAD >> c:\Local\REMix\remix_nz\process\225a\\metadata
    12       38 CALL           3      26  .printf "\n" >> c:\Local\REMix\remix_nz\process\225a\\metadata
    13       39 CALL           3      27  .printf "framework_branch " >> c:\Local\REMix\remix_nz\process\225a\\metadata
    14       41 CALL           3      29  .cd C:\Local\REMix\framework\remix\framework\model\source && git rev-parse --abbrev-ref HEAD >nul 2>&1 && git rev-parse --abbrev-ref HEAD | sed "s/^/\"/;s/$/\"/" >> c:\Local\REMix\remix_nz\process\225a\\metadata
    15       43 CALL           3      33  .printf "\n" >> c:\Local\REMix\remix_nz\process\225a\\metadata
    16       45 CALL           3      35  .printf "project_path " >> c:\Local\REMix\remix_nz\process\225a\\metadata
    17       47 CALL           3      37  .cd C:\Local\REMix\remix_nz\output\will\01-battery-distributed_2020-2035-2050\data\./ && cd| sed "s/^/\"/;s/$/\"/" >> c:\Local\REMix\remix_nz\process\225a\\metadata
    18       49 CALL           3      41  .printf "\n" >> c:\Local\REMix\remix_nz\process\225a\\metadata
    19       50 CALL           3      42  .printf "project_hash " >> c:\Local\REMix\remix_nz\process\225a\\metadata
    20       52 CALL           3      44  .cd C:\Local\REMix\remix_nz\output\will\01-battery-distributed_2020-2035-2050\data\./ && git rev-parse HEAD >nul 2>&1 && git rev-parse HEAD | sed "s/^/\"/;s/$/\"/" >> c:\Local\REMix\remix_nz\process\225a\\metadata
    21       54 CALL           3      48  .printf "\n" >> c:\Local\REMix\remix_nz\process\225a\\metadata
    22       55 CALL           3      49  .printf "project_branch " >> c:\Local\REMix\remix_nz\process\225a\\metadata
    23       57 CALL           3      51  .cd C:\Local\REMix\remix_nz\output\will\01-battery-distributed_2020-2035-2050\data\./ && git rev-parse --abbrev-ref HEAD >nul 2>&1 && git rev-parse --abbrev-ref HEAD | sed "s/^/\"/;s/$/\"/" >> c:\Local\REMix\remix_nz\process\225a\\metadata
    24       59 CALL           3      55  .printf "\n" >> c:\Local\REMix\remix_nz\process\225a\\metadata
    25       62 INCLUDE        3      58  ..c:\Local\REMix\remix_nz\process\225a\metadata
    26       79 INCLUDE        1      17  .C:\Local\REMix\framework\remix\framework\model\source\data_inheritance.gms
    27      123 INCLUDE        1      26  .C:\Local\REMix\framework\remix\framework\model\source\remix.gms
    28      145 INCLUDE       27      22  ..C:\Local\REMix\framework\remix\framework\model\source\sets.gms
    29      165 IF EXIST      28      20  ..c:\Local\REMix\remix_nz\process\225a\map_aggregatetimemodel.csv
    30      216 IF EXIST      28      97  ..c:\Local\REMix\remix_nz\process\225a\set_nodesmodel.csv
    31      216 INCLUDE       28      97  ...c:\Local\REMix\remix_nz\process\225a\set_nodesmodel.csv
    32      229 IF EXIST      28      99  ..c:\Local\REMix\remix_nz\process\225a\set_nodesmodel.csv
    33      236 IF EXIST      28     106  ..c:\Local\REMix\remix_nz\process\225a\set_nodesdata.csv
    34      236 INCLUDE       28     106  ...c:\Local\REMix\remix_nz\process\225a\set_nodesdata.csv
    35      249 IF EXIST      28     108  ..c:\Local\REMix\remix_nz\process\225a\set_nodesdata.csv
    36      255 IF EXIST      28     114  ..c:\Local\REMix\remix_nz\process\225a\set_nodesmodelsel.csv
    37      255 INCLUDE       28     114  ...c:\Local\REMix\remix_nz\process\225a\set_nodesmodelsel.csv
    38      268 IF EXIST      28     116  ..c:\Local\REMix\remix_nz\process\225a\set_nodesmodelsel.csv
    39      270 IF EXIST      28     118  ..c:\Local\REMix\remix_nz\process\225a\set_nodesmodelsel.csv
    40      283 IF EXIST      28     131  ..c:\Local\REMix\remix_nz\process\225a\map_aggregatenodesmodel.csv
    41      283 INCLUDE       28     131  ...c:\Local\REMix\remix_nz\process\225a\map_aggregatenodesmodel.csv
    42      296 IF EXIST      28     133  ..c:\Local\REMix\remix_nz\process\225a\map_aggregatenodesmodel.csv
    43      299 IF EXIST      28     136  ..c:\Local\REMix\remix_nz\process\225a\map_aggregatenodesmodel.csv
    44      322 IF EXIST      28     159  ..c:\Local\REMix\remix_nz\process\225a\set_years.csv
    45      322 INCLUDE       28     159  ...c:\Local\REMix\remix_nz\process\225a\set_years.csv
    46      444 IF EXIST      28     161  ..c:\Local\REMix\remix_nz\process\225a\set_years.csv
    47      453 IF EXIST      28     170  ..c:\Local\REMix\remix_nz\process\225a\set_years.csv
    48      453 INCLUDE       28     170  ...c:\Local\REMix\remix_nz\process\225a\set_years.csv
    49      575 IF EXIST      28     172  ..c:\Local\REMix\remix_nz\process\225a\set_years.csv
    50      581 IF EXIST      28     178  ..c:\Local\REMix\remix_nz\process\225a\set_yearssel.csv
    51      581 INCLUDE       28     178  ...c:\Local\REMix\remix_nz\process\225a\set_yearssel.csv
    52      586 IF EXIST      28     180  ..c:\Local\REMix\remix_nz\process\225a\set_yearssel.csv
    53      604 IF EXIST      28     198  ..c:\Local\REMix\remix_nz\process\225a\set_activities.csv
    54      604 INCLUDE       28     198  ...c:\Local\REMix\remix_nz\process\225a\set_activities.csv
    55      613 IF EXIST      28     200  ..c:\Local\REMix\remix_nz\process\225a\set_activities.csv
    56      621 IF EXIST      28     208  ..c:\Local\REMix\remix_nz\process\225a\set_gridsegments.csv
    57      623 IF EXIST      28     210  ..c:\Local\REMix\remix_nz\process\225a\set_gridsegments.csv
    58      631 IF EXIST      28     218  ..c:\Local\REMix\remix_nz\process\225a\set_linksdata.csv
    59      631 INCLUDE       28     218  ...c:\Local\REMix\remix_nz\process\225a\set_linksdata.csv
    60      645 IF EXIST      28     220  ..c:\Local\REMix\remix_nz\process\225a\set_linksdata.csv
    61      663 IF EXIST      28     238  ..c:\Local\REMix\remix_nz\process\225a\set_link_types.csv
    62      663 INCLUDE       28     238  ...c:\Local\REMix\remix_nz\process\225a\set_link_types.csv
    63      667 IF EXIST      28     240  ..c:\Local\REMix\remix_nz\process\225a\set_link_types.csv
    64      676 IF EXIST      28     249  ..c:\Local\REMix\remix_nz\process\225a\set_commodities.csv
    65      676 INCLUDE       28     249  ...c:\Local\REMix\remix_nz\process\225a\set_commodities.csv
    66      685 IF EXIST      28     251  ..c:\Local\REMix\remix_nz\process\225a\set_commodities.csv
    67      694 IF EXIST      28     260  ..c:\Local\REMix\remix_nz\process\225a\set_indicators.csv
    68      694 INCLUDE       28     260  ...c:\Local\REMix\remix_nz\process\225a\set_indicators.csv
    69      703 IF EXIST      28     262  ..c:\Local\REMix\remix_nz\process\225a\set_indicators.csv
    70      712 IF EXIST      28     271  ..c:\Local\REMix\remix_nz\process\225a\set_converter_techs.csv
    71      712 INCLUDE       28     271  ...c:\Local\REMix\remix_nz\process\225a\set_converter_techs.csv
    72      733 IF EXIST      28     274  ..c:\Local\REMix\remix_nz\process\225a\set_storage_techs.csv
    73      733 INCLUDE       28     274  ...c:\Local\REMix\remix_nz\process\225a\set_storage_techs.csv
    74      739 IF EXIST      28     277  ..c:\Local\REMix\remix_nz\process\225a\set_transfer_techs.csv
    75      739 INCLUDE       28     277  ...c:\Local\REMix\remix_nz\process\225a\set_transfer_techs.csv
    76      743 IF EXIST      28     280  ..c:\Local\REMix\remix_nz\process\225a\set_sourcesink_techs.csv
    77      743 INCLUDE       28     280  ...c:\Local\REMix\remix_nz\process\225a\set_sourcesink_techs.csv
    78      754 IF EXIST      28     285  ..c:\Local\REMix\remix_nz\process\225a\set_converter_techs.csv
    79      754 INCLUDE       28     285  ...c:\Local\REMix\remix_nz\process\225a\set_converter_techs.csv
    80      773 IF EXIST      28     286  ..c:\Local\REMix\remix_nz\process\225a\set_converter_techs.csv
    81      777 IF EXIST      28     290  ..c:\Local\REMix\remix_nz\process\225a\set_storage_techs.csv
    82      777 INCLUDE       28     290  ...c:\Local\REMix\remix_nz\process\225a\set_storage_techs.csv
    83      781 IF EXIST      28     291  ..c:\Local\REMix\remix_nz\process\225a\set_storage_techs.csv
    84      786 IF EXIST      28     296  ..c:\Local\REMix\remix_nz\process\225a\set_transfer_techs.csv
    85      786 INCLUDE       28     296  ...c:\Local\REMix\remix_nz\process\225a\set_transfer_techs.csv
    86      788 IF EXIST      28     297  ..c:\Local\REMix\remix_nz\process\225a\set_transfer_techs.csv
    87      792 IF EXIST      28     301  ..c:\Local\REMix\remix_nz\process\225a\set_sourcesink_techs.csv
    88      792 INCLUDE       28     301  ...c:\Local\REMix\remix_nz\process\225a\set_sourcesink_techs.csv
    89      799 IF EXIST      28     302  ..c:\Local\REMix\remix_nz\process\225a\set_sourcesink_techs.csv
    90      809 IF EXIST      28     312  ..c:\Local\REMix\remix_nz\process\225a\set_degradation_states.csv
    91      811 IF EXIST      28     314  ..c:\Local\REMix\remix_nz\process\225a\set_degradation_states.csv
    92      820 IF EXIST      28     323  ..c:\Local\REMix\remix_nz\process\225a\set_soc.csv
    93      822 IF EXIST      28     325  ..c:\Local\REMix\remix_nz\process\225a\set_soc.csv
    94      838 IF EXIST      28     341  ..c:\Local\REMix\remix_nz\process\225a\transfer_linkstartend.csv
    95      838 INCLUDE       28     341  ...c:\Local\REMix\remix_nz\process\225a\transfer_linkstartend.csv
    96      865 IF EXIST      28     343  ..c:\Local\REMix\remix_nz\process\225a\transfer_linkstartend.csv
    97      879 BATINCLUDE    28     357  ...C:\Local\REMix\framework\remix\framework\model\source\battools\aggregateNodes.gms
    98      990 IF EXIST      28     466  ..c:\Local\REMix\remix_nz\process\225a\set_accnodes.csv
    99      992 IF EXIST      28     468  ..c:\Local\REMix\remix_nz\process\225a\set_accnodes.csv
   100     1057 IF EXIST      28     533  ..c:\Local\REMix\remix_nz\process\225a\map_accnodes.csv
   101     1059 IF EXIST      28     535  ..c:\Local\REMix\remix_nz\process\225a\map_accnodes.csv
   102     1113 INCLUDE       27      23  ..C:\Local\REMix\framework\remix\framework\model\source\accounting\input.gms
   103     1145 IF EXIST     102      32  ..c:\Local\REMix\remix_nz\process\225a\accounting_converterunits.csv
   104     1145 INCLUDE      102      32  ...c:\Local\REMix\remix_nz\process\225a\accounting_converterunits.csv
   105     1258 IF EXIST     102      34  ..c:\Local\REMix\remix_nz\process\225a\accounting_converterunits.csv
   106     1272 IF EXIST     102      48  ..c:\Local\REMix\remix_nz\process\225a\accounting_converteractivity.csv
   107     1272 INCLUDE      102      48  ...c:\Local\REMix\remix_nz\process\225a\accounting_converteractivity.csv
   108     1299 IF EXIST     102      50  ..c:\Local\REMix\remix_nz\process\225a\accounting_converteractivity.csv
   109     1316 IF EXIST     102      67  ..c:\Local\REMix\remix_nz\process\225a\accounting_converterstartup.csv
   110     1318 IF EXIST     102      69  ..c:\Local\REMix\remix_nz\process\225a\accounting_converterstartup.csv
   111     1337 IF EXIST     102      88  ..c:\Local\REMix\remix_nz\process\225a\accounting_storageunits.csv
   112     1337 INCLUDE      102      88  ...c:\Local\REMix\remix_nz\process\225a\accounting_storageunits.csv
   113     1366 IF EXIST     102      90  ..c:\Local\REMix\remix_nz\process\225a\accounting_storageunits.csv
   114     1388 IF EXIST     102     112  ..c:\Local\REMix\remix_nz\process\225a\accounting_transferlinks.csv
   115     1388 INCLUDE      102     112  ...c:\Local\REMix\remix_nz\process\225a\accounting_transferlinks.csv
   116     1397 IF EXIST     102     114  ..c:\Local\REMix\remix_nz\process\225a\accounting_transferlinks.csv
   117     1419 IF EXIST     102     136  ..c:\Local\REMix\remix_nz\process\225a\accounting_transferperlength.csv
   118     1419 INCLUDE      102     136  ...c:\Local\REMix\remix_nz\process\225a\accounting_transferperlength.csv
   119     1434 IF EXIST     102     138  ..c:\Local\REMix\remix_nz\process\225a\accounting_transferperlength.csv
   120     1449 IF EXIST     102     153  ..c:\Local\REMix\remix_nz\process\225a\accounting_sourcesinkflow.csv
   121     1449 INCLUDE      102     153  ...c:\Local\REMix\remix_nz\process\225a\accounting_sourcesinkflow.csv
   122     1455 IF EXIST     102     155  ..c:\Local\REMix\remix_nz\process\225a\accounting_sourcesinkflow.csv
   123     1469 IF EXIST     102     169  ..c:\Local\REMix\remix_nz\process\225a\accounting_perindicator.csv
   124     1469 INCLUDE      102     169  ...c:\Local\REMix\remix_nz\process\225a\accounting_perindicator.csv
   125     1477 IF EXIST     102     171  ..c:\Local\REMix\remix_nz\process\225a\accounting_perindicator.csv
   126     1503 IF EXIST     102     197  ..c:\Local\REMix\remix_nz\process\225a\accounting_indicatorbounds.csv
   127     1503 INCLUDE      102     197  ...c:\Local\REMix\remix_nz\process\225a\accounting_indicatorbounds.csv
   128     1507 IF EXIST     102     199  ..c:\Local\REMix\remix_nz\process\225a\accounting_indicatorbounds.csv
   129     1526 IF EXIST     102     218  ..c:\Local\REMix\remix_nz\process\225a\accounting_indicatorbounds_links.csv
   130     1528 IF EXIST     102     220  ..c:\Local\REMix\remix_nz\process\225a\accounting_indicatorbounds_links.csv
   131     1534 BATINCLUDE   102     226  ...C:\Local\REMix\framework\remix\framework\model\source\battools\aggregateAccountingMean.gms
   132     1593 BATINCLUDE   102     227  ...C:\Local\REMix\framework\remix\framework\model\source\battools\aggregateAccountingMean.gms
   133     1636 BATINCLUDE   102     228  ...C:\Local\REMix\framework\remix\framework\model\source\battools\aggregateAccountingMean.gms
   134     1679 BATINCLUDE   102     229  ...C:\Local\REMix\framework\remix\framework\model\source\battools\aggregateAccountingMean.gms
   135     1738 BATINCLUDE   102     230  ...C:\Local\REMix\framework\remix\framework\model\source\battools\aggregateAccountingMean.gms
   136     1797 BATINCLUDE   102     231  ...C:\Local\REMix\framework\remix\framework\model\source\battools\aggregateAccountingMean.gms
   137     1856 BATINCLUDE   102     232  ...C:\Local\REMix\framework\remix\framework\model\source\battools\aggregateAccountingMean.gms
   138     2265 INCLUDE       27      24  ..C:\Local\REMix\framework\remix\framework\model\source\accounting\annuities.gms
   139     2339 INCLUDE       27      26  ..C:\Local\REMix\framework\remix\framework\model\source\methods\mga_pre.gms
   140     2345 INCLUDE       27      27  ..C:\Local\REMix\framework\remix\framework\model\source\methods\pareto_pre.gms
   141     2351 INCLUDE       27      28  ..C:\Local\REMix\framework\remix\framework\model\source\postcalc\declaration.gms
   142     2368 IF DEXIST    141      17  ..C:\Local\REMix\remix_nz\output\will\01-battery-distributed_2020-2035-2050\result\
   143     2570 INCLUDE       27      29  ..C:\Local\REMix\framework\remix\framework\model\source\loadgdx.gms
   144     2579 INCLUDE       27      31  ..C:\Local\REMix\framework\remix\framework\model\source\core\converter.gms
   145     2682 IF EXIST     144     103  ..c:\Local\REMix\remix_nz\process\225a\converter_capacityparam.csv
   146     2682 INCLUDE      144     103  ...c:\Local\REMix\remix_nz\process\225a\converter_capacityparam.csv
   147     8018 IF EXIST     144     105  ..c:\Local\REMix\remix_nz\process\225a\converter_capacityparam.csv
   148     8026 BATINCLUDE   144     113  ...C:\Local\REMix\framework\remix\framework\model\source\battools\aggregateNodes.gms
   149     8037 BATINCLUDE   144     114  ...C:\Local\REMix\framework\remix\framework\model\source\battools\aggregateNodes.gms
   150     8070 IF EXIST     144     137  ..c:\Local\REMix\remix_nz\process\225a\converter_techparam.csv
   151     8070 INCLUDE      144     137  ...c:\Local\REMix\remix_nz\process\225a\converter_techparam.csv
   152     8128 IF EXIST     144     139  ..c:\Local\REMix\remix_nz\process\225a\converter_techparam.csv
   153     8150 IF EXIST     144     161  ..c:\Local\REMix\remix_nz\process\225a\converter_activityprofile.csv
   154     8150 INCLUDE      144     161  ...c:\Local\REMix\remix_nz\process\225a\converter_activityprofile.csv
   155     8230 IF EXIST     144     162  ..c:\Local\REMix\remix_nz\process\225a\converter_activityprofile.csv
   156     8232 IF EXIST     144     164  ..c:\Local\REMix\remix_nz\process\225a\converter_activityprofile.csv
   157     8252 IF EXIST     144     184  ..c:\Local\REMix\remix_nz\process\225a\converter_coefficient.csv
   158     8252 INCLUDE      144     184  ...c:\Local\REMix\remix_nz\process\225a\converter_coefficient.csv
   159     8434 IF EXIST     144     185  ..c:\Local\REMix\remix_nz\process\225a\converter_coefficient.csv
   160     8435 IF EXIST     144     186  ..c:\Local\REMix\remix_nz\process\225a\converter_coefficient.csv
   161     8437 IF EXIST     144     188  ..c:\Local\REMix\remix_nz\process\225a\converter_coefficient.csv
   162     8449 IF EXIST     144     200  ..c:\Local\REMix\remix_nz\process\225a\converter_coefficientprofile.csv
   163     8450 IF EXIST     144     201  ..c:\Local\REMix\remix_nz\process\225a\converter_coefficientprofile.csv
   164     8452 IF EXIST     144     203  ..c:\Local\REMix\remix_nz\process\225a\converter_coefficientprofile.csv
   165     9388 INCLUDE       27      32  ..C:\Local\REMix\framework\remix\framework\model\source\core\storage.gms
   166     9479 IF EXIST     165      91  ..c:\Local\REMix\remix_nz\process\225a\storage_reservoirparam.csv
   167     9479 INCLUDE      165      91  ...c:\Local\REMix\remix_nz\process\225a\storage_reservoirparam.csv
   168     9692 IF EXIST     165      93  ..c:\Local\REMix\remix_nz\process\225a\storage_reservoirparam.csv
   169     9696 BATINCLUDE   165      97  ...C:\Local\REMix\framework\remix\framework\model\source\battools\aggregateNodes.gms
   170     9707 BATINCLUDE   165      98  ...C:\Local\REMix\framework\remix\framework\model\source\battools\aggregateNodes.gms
   171     9743 IF EXIST     165     124  ..c:\Local\REMix\remix_nz\process\225a\storage_techparam.csv
   172     9743 INCLUDE      165     124  ...c:\Local\REMix\remix_nz\process\225a\storage_techparam.csv
   173     9759 IF EXIST     165     126  ..c:\Local\REMix\remix_nz\process\225a\storage_techparam.csv
   174     9780 IF EXIST     165     147  ..c:\Local\REMix\remix_nz\process\225a\storage_sizeparam.csv
   175     9780 INCLUDE      165     147  ...c:\Local\REMix\remix_nz\process\225a\storage_sizeparam.csv
   176     9796 IF EXIST     165     149  ..c:\Local\REMix\remix_nz\process\225a\storage_sizeparam.csv
   177     9813 IF EXIST     165     166  ..c:\Local\REMix\remix_nz\process\225a\storage_socparam.csv
   178     9815 IF EXIST     165     168  ..c:\Local\REMix\remix_nz\process\225a\storage_socparam.csv
   179     9834 IF EXIST     165     187  ..c:\Local\REMix\remix_nz\process\225a\storage_degradationparam.csv
   180     9836 IF EXIST     165     189  ..c:\Local\REMix\remix_nz\process\225a\storage_degradationparam.csv
   181     9865 IF EXIST     165     218  ..c:\Local\REMix\remix_nz\process\225a\storage_levelprofile.csv
   182     9866 IF EXIST     165     219  ..c:\Local\REMix\remix_nz\process\225a\storage_levelprofile.csv
   183     9868 IF EXIST     165     221  ..c:\Local\REMix\remix_nz\process\225a\storage_levelprofile.csv
   184    10688 INCLUDE       27      33  ..C:\Local\REMix\framework\remix\framework\model\source\core\transfer.gms
   185    10755 IF EXIST     184      73  ..c:\Local\REMix\remix_nz\process\225a\transfer_linksparam.csv
   186    10755 INCLUDE      184      73  ...c:\Local\REMix\remix_nz\process\225a\transfer_linksparam.csv
   187    10794 IF EXIST     184      75  ..c:\Local\REMix\remix_nz\process\225a\transfer_linksparam.csv
   188    10810 IF EXIST     184      91  ..c:\Local\REMix\remix_nz\process\225a\transfer_flowprofile.csv
   189    10812 IF EXIST     184      93  ..c:\Local\REMix\remix_nz\process\225a\transfer_flowprofile.csv
   190    10832 IF EXIST     184     113  ..c:\Local\REMix\remix_nz\process\225a\transfer_techparam.csv
   191    10832 INCLUDE      184     113  ...c:\Local\REMix\remix_nz\process\225a\transfer_techparam.csv
   192    10838 IF EXIST     184     115  ..c:\Local\REMix\remix_nz\process\225a\transfer_techparam.csv
   193    10852 IF EXIST     184     129  ..c:\Local\REMix\remix_nz\process\225a\transfer_coefficient.csv
   194    10852 INCLUDE      184     129  ...c:\Local\REMix\remix_nz\process\225a\transfer_coefficient.csv
   195    10858 IF EXIST     184     131  ..c:\Local\REMix\remix_nz\process\225a\transfer_coefficient.csv
   196    10872 IF EXIST     184     145  ..c:\Local\REMix\remix_nz\process\225a\transfer_coefperflow.csv
   197    10872 INCLUDE      184     145  ...c:\Local\REMix\remix_nz\process\225a\transfer_coefperflow.csv
   198    10878 IF EXIST     184     147  ..c:\Local\REMix\remix_nz\process\225a\transfer_coefperflow.csv
   199    10892 IF EXIST     184     161  ..c:\Local\REMix\remix_nz\process\225a\transfer_coefperlength.csv
   200    10892 INCLUDE      184     161  ...c:\Local\REMix\remix_nz\process\225a\transfer_coefperlength.csv
   201    10901 IF EXIST     184     163  ..c:\Local\REMix\remix_nz\process\225a\transfer_coefperlength.csv
   202    10915 IF EXIST     184     177  ..c:\Local\REMix\remix_nz\process\225a\transfer_reactperlength.csv
   203    10917 IF EXIST     184     179  ..c:\Local\REMix\remix_nz\process\225a\transfer_reactperlength.csv
   204    10931 IF EXIST     184     193  ..c:\Local\REMix\remix_nz\process\225a\transfer_lengthparam.csv
   205    10931 INCLUDE      184     193  ...c:\Local\REMix\remix_nz\process\225a\transfer_lengthparam.csv
   206    10958 IF EXIST     184     195  ..c:\Local\REMix\remix_nz\process\225a\transfer_lengthparam.csv
   207    10972 IF EXIST     184     209  ..c:\Local\REMix\remix_nz\process\225a\transfer_gridsegments.csv
   208    10974 IF EXIST     184     211  ..c:\Local\REMix\remix_nz\process\225a\transfer_gridsegments.csv
   209    11571 INCLUDE       27      34  ..C:\Local\REMix\framework\remix\framework\model\source\core\sourcesink.gms
   210    11609 IF EXIST     209      38  ..c:\Local\REMix\remix_nz\process\225a\sourcesink_config.csv
   211    11609 INCLUDE      209      38  ...c:\Local\REMix\remix_nz\process\225a\sourcesink_config.csv
   212    11787 IF EXIST     209      40  ..c:\Local\REMix\remix_nz\process\225a\sourcesink_config.csv
   213    11791 BATINCLUDE   209      44  ...C:\Local\REMix\framework\remix\framework\model\source\battools\aggregateNodes.gms
   214    11819 IF EXIST     209      62  ..c:\Local\REMix\remix_nz\process\225a\sourcesink_profile.csv
   215    11819 INCLUDE      209      62  ...c:\Local\REMix\remix_nz\process\225a\sourcesink_profile.csv
   216    11897 IF EXIST     209      63  ..c:\Local\REMix\remix_nz\process\225a\sourcesink_profile.csv
   217    11898 IF EXIST     209      64  ..c:\Local\REMix\remix_nz\process\225a\sourcesink_profile.csv
   218    11900 IF EXIST     209      66  ..c:\Local\REMix\remix_nz\process\225a\sourcesink_profile.csv
   219    11920 IF EXIST     209      86  ..c:\Local\REMix\remix_nz\process\225a\sourcesink_annualsum.csv
   220    11920 INCLUDE      209      86  ...c:\Local\REMix\remix_nz\process\225a\sourcesink_annualsum.csv
   221    11989 IF EXIST     209      88  ..c:\Local\REMix\remix_nz\process\225a\sourcesink_annualsum.csv
   222    11992 BATINCLUDE   209      91  ...C:\Local\REMix\framework\remix\framework\model\source\battools\aggregateNodes.gms
   223    12173 INCLUDE       27      35  ..C:\Local\REMix\framework\remix\framework\model\source\core\balance.gms
   224    12309 INCLUDE       27      37  ..C:\Local\REMix\framework\remix\framework\model\source\accounting\equations.gms
   225    12731 INCLUDE       27      38  ..C:\Local\REMix\framework\remix\framework\model\source\optiframe.gms
   226    12772 INCLUDE       27      72  ..C:\Local\REMix\framework\remix\framework\model\source\methods\checkanno.gms
   227    12783 INCLUDE       27      75  ..C:\Local\REMix\framework\remix\framework\model\source\methods\pips.gms
   228    12792 INCLUDE       27      78  ..C:\Local\REMix\framework\remix\framework\model\source\methods\solve.gms
   229    13004 INCLUDE       27      81  ..C:\Local\REMix\framework\remix\framework\model\source\methods\pareto.gms
   230    13013 INCLUDE       27      84  ..C:\Local\REMix\framework\remix\framework\model\source\methods\mga.gms
   231    13022 INCLUDE       27      87  ..C:\Local\REMix\framework\remix\framework\model\source\methods\iternodes.gms
   232    13031 INCLUDE       27      90  ..C:\Local\REMix\framework\remix\framework\model\source\postcalc\definition.gms
   233    13823 INCLUDE       27      91  ..C:\Local\REMix\framework\remix\framework\model\source\postcalc\writegdx.gms


COMPILATION TIME     =       12.891 SECONDS     45 MB  40.4.0 d540b52e WEX-WEI
GAMS 40.4.0  d540b52e Oct 3, 2022           WEX-WEI x86 64bit/MS Windows - 03/07/24 13:57:35 Page 3
G e n e r a l   A l g e b r a i c   M o d e l i n g   S y s t e m
Range Statistics    SOLVE remix Using MIP From line 12989


RANGE STATISTICS (ABSOLUTE NON-ZERO FINITE VALUES)

RHS       [min, max] : [ 2.000E-06, 1.165E+03] - Zero values observed as well
Bound     [min, max] : [ 9.000E-04, 1.550E-01] - Zero values observed as well
Matrix    [min, max] : [ 1.335E-01, 3.988E+02]

GAMS 40.4.0  d540b52e Oct 3, 2022           WEX-WEI x86 64bit/MS Windows - 03/07/24 13:57:35 Page 4
G e n e r a l   A l g e b r a i c   M o d e l i n g   S y s t e m
Model Statistics    SOLVE remix Using MIP From line 12989


LOOPS                           optiframeToCalc   of1


MODEL STATISTICS

BLOCKS OF EQUATIONS          75     SINGLE EQUATIONS   18,379,968
BLOCKS OF VARIABLES          38     SINGLE VARIABLES   19,230,553
NON ZERO ELEMENTS    54,237,213


GENERATION TIME      =      557.657 SECONDS 13,494 MB  40.4.0 d540b52e WEX-WEI


EXECUTION TIME       =      700.250 SECONDS 13,494 MB  40.4.0 d540b52e WEX-WEI
               L O O P S         optiframeToCalc of1

GAMS 40.4.0  d540b52e Oct 3, 2022           WEX-WEI x86 64bit/MS Windows - 03/07/24 13:57:35 Page 5
G e n e r a l   A l g e b r a i c   M o d e l i n g   S y s t e m
Solution Report     SOLVE remix Using MIP From line 12989


               S O L V E      S U M M A R Y

     MODEL   remix               OBJECTIVE  accounting_objective
     TYPE    MIP                 DIRECTION  MINIMIZE
     SOLVER  CPLEX               FROM LINE  12989

**** SOLVER STATUS     1 Normal Completion
**** MODEL STATUS      1 Optimal
**** OBJECTIVE VALUE            67353.5481

 RESOURCE USAGE, LIMIT       1554.688   1209600.000
 ITERATION COUNT, LIMIT       328    2147483647
--- GAMS/Cplex Link licensed for continuous and discrete problems.

Reading parameter(s) from "c:\Local\REMix\remix_nz\process\cplex.opt"
>>  rerun no
>>  iis 1
>>  lpmethod 4
>>  barorder 3 /;
*** Value Error line 4: Integer expected, for option "barorder" saw "3 /;"
*** Value Error line 4:    Option ignored
>>  preind 1
>>  scaind 0
>>  predual -1
>>  baralg 0
>>  barstartalg 1
>>  barepcomp 1e-6
>>  solutiontype 2
>>  startalg 4
>>  epgap 1e-3
>>  quality 1
>>  barcolnz 0
>>  threads 4
>>  parallelmode 1
Finished reading from "c:\Local\REMix\remix_nz\process\cplex.opt"

--- GMO setup time: 0.00s
--- Space for names approximately 2363.86 Mb
--- Use option 'names no' to turn use of names off
--- GMO memory 6790.43 Mb (peak 6937.14 Mb)
--- Dictionary memory 0.00 Mb
--- Cplex 22.1.0.0 link memory 577.14 Mb (peak 3946.02 Mb)
--- Starting Cplex


--- LP status (1): optimal.
--- Cplex Time: 1490.94sec (det. 1288775.92 ticks)


Optimal solution found
Objective:        67353.548079

Solution Quality Statistics:
                                   unscaled                scaled
                               max         sum         max         sum
primal infeasibility        2.119e-06   3.534e-01   2.119e-06   3.534e-01
dual infeasibility          0.000e+00   0.000e+00   0.000e+00   0.000e+00
primal residual             4.657e-09   4.712e-09   4.657e-09   4.712e-09
dual residual               1.338e-03   1.487e-03   1.338e-03   1.487e-03
primal solution vector      6.735e+04   7.459e+05   6.735e+04   7.459e+05
dual solution vector        2.664e+04   5.561e+06   2.664e+04   5.561e+06
slacks                      1.165e+03   3.797e+05   1.165e+03   3.797e+05
reduced costs               2.664e+04   4.375e+07   2.664e+04   4.375e+07
comp. slackness viol.       1.320e-04   5.091e-01




**** REPORT SUMMARY :        0     NONOPT
                             0 INFEASIBLE
                             0  UNBOUNDED
GAMS 40.4.0  d540b52e Oct 3, 2022           WEX-WEI x86 64bit/MS Windows - 03/07/24 13:57:35 Page 6
G e n e r a l   A l g e b r a i c   M o d e l i n g   S y s t e m
E x e c u t i o n


**** REPORT FILE SUMMARY

opt c:\Local\REMix\remix_nz\process\cplex.opt


EXECUTION TIME       =      202.781 SECONDS 10,908 MB  40.4.0 d540b52e WEX-WEI


USER: Medium MUD - 10 User License                   S220920|0002AO-GEN
      University of Canterbury, Civil Engineering Department    DC16319
      License for teaching and research at degree granting institutions


**** FILE SUMMARY

Input      C:\Local\REMix\framework\remix\framework\model\run_remix.gms
Output     c:\Local\REMix\remix_nz\process\run_remix.lst
