GAMS 40.4.0  d540b52e Oct 3, 2022           WEX-WEI x86 64bit/MS Windows - 02/28/24 12:36:48 Page 1
G e n e r a l   A l g e b r a i c   M o d e l i n g   S y s t e m
C o m p i l a t i o n


   1  * SPDX-FileCopyrightText: Copyright (c) 2023 German Aerospace Center (DLR)
   2  * SPDX-License-Identifier: BSD-3-Clause
   3   
   4  * ==== REMix version number ====
   6   
   7  * ==== global settings ====
  11   
  13   
  14  * ==== write metadata and inherit dataset ====
INCLUDE    C:\Local\REMix\framework\remix\framework\model\source\metadata.gms
  22   
  26   
  42   
  58   
  59  set metadata(*) /
INCLUDE    c:\Local\REMix\remix_nz\process\225a\metadata
  61  remix_version "0.9.2"
  62  gams_version "40.4.0"
  63  timestamp "02/28/24 12:36:48"
  64  framework_path "C:\Local\REMix\framework\remix\framework\model\source"
  65   
  66  framework_hash 96c2159997fb47c52b8300c49677756ddfb1ee40
  67   
  68  framework_branch "dev"
  69   
  70  project_path "C:\Local\REMix\remix_nz\output\nz-h2-stor_2020-2050\data"
  71   
  72  project_hash "c725cdd1c57081c826c1026b642c3c86e5b6f17b"
  73   
  74  project_branch "main"
  75   
  76  /;
INCLUDE    C:\Local\REMix\framework\remix\framework\model\source\data_inheritance.gms
  78  * SPDX-FileCopyrightText: Copyright (c) 2023 German Aerospace Center (DLR)
  79  * SPDX-License-Identifier: BSD-3-Clause
  80   
  83   
  88   
  89  * pandas based data inheritance reading in the dat files, merging them and writing csv files in the scrdir
 109  ;
 110   
 114   
 115  * ==== run remix ====
INCLUDE    C:\Local\REMix\framework\remix\framework\model\source\remix.gms
 120  * SPDX-FileCopyrightText: Copyright (c) 2023 German Aerospace Center (DLR)
 121  * SPDX-License-Identifier: BSD-3-Clause
 122   
 123  * ==== global settings ====
 130   
 133   
 135   
 138   
 139  * ==== include modules ====
INCLUDE    C:\Local\REMix\framework\remix\framework\model\source\sets.gms
 141  * SPDX-FileCopyrightText: Copyright (c) 2023 German Aerospace Center (DLR)
 142  * SPDX-License-Identifier: BSD-3-Clause
 143   
 144  * // # sets
 145  * // Sets are the indices of variables and parameters.
 146   
 147  * // ## Reference
 148  * // {special_table_sets}
 149   
 150  * // ## Input Files
 151  * // {special_table_set_input_files}
1050   
1051  map_accNodes(accNodesModel,accNodesModel_aggregation)
1052      $sum((nodesData, nodesModelToCalc)
1053              $( sameas(nodesModelToCalc,accNodesModel)
1054                  and map_accNodesLoad(nodesData,accNodesModel_aggregation)
1055                  and aggregateNodesModel(nodesData,nodesModelToCalc)), 1) = yes;
1056   
1057  map_accNodes(accNodesModel,"global")$sum(nodesModelToCalc$sameas(accNodesModel,nodesModelToCalc), 1) = yes;
1058  map_accNodes(accNodesModel,"global")$sum(accNodes$sameas(accNodesModel,accNodes), 1) = yes;
1059  map_accNodes(accNodesModel,accNodesModel) = yes;
1060  map_accLinks(accLinksModel,"global")$sum(linksModelToCalc$sameas(accLinksModel,linksModelToCalc), 1) = yes;
1061  map_accLinks(accLinksModel,accLinksModel) = yes;
1062  map_accYears(accYears,"horizon")$sum(yearsToCalc$sameas(accYears,yearsToCalc), 1)  = yes;
1063  map_accYears(accYears,accYears) = yes;
1064   
1065  map_accNodesToCalc(accNodesModel,nodesModelToCalc)
1066      $sum((nodesData)
1067              $( map_accNodesLoad(nodesData,accNodesModel)
1068                  and aggregateNodesModel(nodesData,nodesModelToCalc)), 1) = yes;
1069   
1070  map_accNodesToCalc("global",nodesModelToCalc) = yes;
1071  map_accNodesToCalc(accNodesModel,nodesModelToCalc)$sameas(accNodesModel,nodesModelToCalc) = yes;
1072  map_accLinksToCalc("global",linksModelToCalc) = yes;
1073  map_accLinksToCalc(accLinksModel,linksModelToCalc)$sameas(accLinksModel,linksModelToCalc) = yes;
1074  map_accYearsToCalc("horizon",yearsToCalc) = yes;
1075  map_accYearsToCalc(accYears,yearsToCalc)$sameas(accYears,yearsToCalc) = yes;
1076   
1077  * Duplicate sets for postcalc reporting without horizon and accYears
1078  map_accNodesPostCalc(accNodesModel,nodesModelToCalc) = map_accNodesToCalc(accNodesModel,nodesModelToCalc);
1079  map_accLinksPostCalc(accLinksModel,linksModelToCalc) = map_accLinksToCalc(accLinksModel,linksModelToCalc);
1080  map_accYearsPostCalc(accYears,yearsToCalc)$sameas(accYears,yearsToCalc) = yes;
1081  map_accYearsPostCalc(accYears,years)$(sameas(accYears,years) and years.val < sum(yearsToCalc$(ord(yearsToCalc) = 1), yearsToCalc.val)) = yes;
1082   
1083  set map_nodesAccounting(accNodesModel_aggregation,accNodesModel) "Map accounting nodes describes the mapping between model accounting nodes and data nodes." ;
1084  option map_nodesAccounting < map_accNodes;
1085   
1086  * ==== Generic sets  ====
1087  * These set names are repeated across different profile parameters.
1088  * they are not strictly related to each other and are not input data but
1089  * are needed for validation.
1090  ** // PROFILE: profileTypes | Profile Types | OEO_00140056:flow potential | set_profiletypes.csv
1091   
1092  ** // SET: scenario | Scenario | OEO_00000364:scenario | set_scenarios.csv
1093  * "Scenario indexes help to differentiate scenarios." /
1094   
1095  ** // SET: capType | Capacity Types | OEO_00030019:balance process attribute | set_captypes.csv
1096  * "Capacity types differentiate investment decisions." /
1097   
1098  ** // SET: balanceType | Balance Types | OEO_00030019:balance process attribute | set_balancetypes.csv
1099  * "Balance types differentiate types of balances." /
INCLUDE    C:\Local\REMix\framework\remix\framework\model\source\accounting\input.gms
1101  * SPDX-FileCopyrightText: Copyright (c) 2023 German Aerospace Center (DLR)
1102  * SPDX-License-Identifier: BSD-3-Clause
1103   
1104  * // # accounting_input
1105  * // The parameters in this file describe the accounting of indicators in the model.
1106   
1107  * // ## Variables
1108  * // {special_table_input_variables}
1501   
1502  * Aggregate accounting parameters
BATINCLUDE C:\Local\REMix\framework\remix\framework\model\source\battools\aggregateAccountingMean.gms
1504  * SPDX-FileCopyrightText: Copyright (c) 2023 German Aerospace Center (DLR)
1505  * SPDX-License-Identifier: BSD-3-Clause
1506   
1508   
1510   
1511  set accounting_converterUnitsNonzero(indicator,accnodesData,converter_techs,vintage);
1512  accounting_converterUnitsNonzero(indicator,accnodesData,converter_techs,vintage)
1513      $sum(pc_accounting_converterUnits$accounting_converterUnitsIn(indicator,accnodesData,converter_techs,vintage,pc_accounting_converterUnits), 1)
1514      = yes;
1515   
1517  set accounting_converterUnitsChk(indicator,nodesModel,converter_techs,vintage,pc_accounting_converterUnits);
1518  accounting_converterUnitsChk(indicator,nodesModel,converter_techs,vintage,"useAnnuity")
1519      $sum((nodesData,accnodesData)
1520              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1521                  and accounting_converterUnitsNonzero(indicator,accnodesData,converter_techs,vintage)), 1)
1522      = smax((nodesData,accnodesData)
1523              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1524                  and accounting_converterUnitsNonzero(indicator,accnodesData,converter_techs,vintage)),
1525          accounting_converterUnitsIn(indicator,accnodesData,converter_techs,vintage,"useAnnuity"))
1526      - smin((nodesData,accnodesData)
1527              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1528                  and accounting_converterUnitsNonzero(indicator,accnodesData,converter_techs,vintage)),
1529          accounting_converterUnitsIn(indicator,accnodesData,converter_techs,vintage,"useAnnuity"));
1530   
1531  abort$sum(accounting_converterUnitsChk(indicator,nodesModel,converter_techs,vintage,pc_accounting_converterUnits), 1) "Cannot aggregate technologies with different useAnnuity values."
1533   
1534  parameter accounting_converterUnitsAgg(indicator,nodesModel,converter_techs,vintage,pc_accounting_converterUnits);
1535  accounting_converterUnitsAgg(indicator,nodesModel,converter_techs,vintage,pc_accounting_converterUnits)
1536      $sum((nodesData,accnodesData)
1537              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1538                  and accounting_converterUnitsNonzero(indicator,accnodesData,converter_techs,vintage)), 1)
1539      = sum((nodesData,accnodesData)
1540              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1541                  and accounting_converterUnitsNonzero(indicator,accnodesData,converter_techs,vintage)),
1542          accounting_converterUnitsIn(indicator,accnodesData,converter_techs,vintage,pc_accounting_converterUnits))
1543      / sum((nodesData,accnodesData)
1544              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1545                  and accounting_converterUnitsNonzero(indicator,accnodesData,converter_techs,vintage)),
1546          1);
1547   
1548  parameter accounting_converterUnits(indicator,nodesModel,converter_techs,vintage,pc_accounting_converterUnits);
1549  loop(accnodes,
1550  accounting_converterUnits(indicator,nodesModel,converter_techs,vintage,pc_accounting_converterUnits)
1551      $sum(accnodesData$(map_accnodesToCalc(accnodes,nodesModel) and sameas(accnodes,accnodesData)
1552                              and accounting_converterUnitsIn(indicator,accnodesData,converter_techs,vintage,pc_accounting_converterUnits)), 1)
1553      = sum(accnodesData$(map_accnodesToCalc(accnodes,nodesModel) and sameas(accnodes,accnodesData)),
1554              accounting_converterUnitsIn(indicator,accnodesData,converter_techs,vintage,pc_accounting_converterUnits));
1555  );
1556   
1557  accounting_converterUnits(indicator,nodesModel,converter_techs,vintage,pc_accounting_converterUnits)
1558      $accounting_converterUnitsAgg(indicator,nodesModel,converter_techs,vintage,pc_accounting_converterUnits)
1559      = accounting_converterUnitsAgg(indicator,nodesModel,converter_techs,vintage,pc_accounting_converterUnits);
1560   
1561  * option kill %paramName%Nonzero %paramName%Chk %paramName%Agg
BATINCLUDE C:\Local\REMix\framework\remix\framework\model\source\battools\aggregateAccountingMean.gms
1563  * SPDX-FileCopyrightText: Copyright (c) 2023 German Aerospace Center (DLR)
1564  * SPDX-License-Identifier: BSD-3-Clause
1565   
1567   
1569   
1570  set accounting_converterActivityNonzero(indicator,accnodesData,converter_techs,vintage,activity);
1571  accounting_converterActivityNonzero(indicator,accnodesData,converter_techs,vintage,activity)
1572      $sum(pc_accounting_converterActivity$accounting_converterActivityIn(indicator,accnodesData,converter_techs,vintage,activity,pc_accounting_converterActivity), 1)
1573      = yes;
1574   
1576   
1577  parameter accounting_converterActivityAgg(indicator,nodesModel,converter_techs,vintage,activity,pc_accounting_converterActivity);
1578  accounting_converterActivityAgg(indicator,nodesModel,converter_techs,vintage,activity,pc_accounting_converterActivity)
1579      $sum((nodesData,accnodesData)
1580              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1581                  and accounting_converterActivityNonzero(indicator,accnodesData,converter_techs,vintage,activity)), 1)
1582      = sum((nodesData,accnodesData)
1583              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1584                  and accounting_converterActivityNonzero(indicator,accnodesData,converter_techs,vintage,activity)),
1585          accounting_converterActivityIn(indicator,accnodesData,converter_techs,vintage,activity,pc_accounting_converterActivity))
1586      / sum((nodesData,accnodesData)
1587              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1588                  and accounting_converterActivityNonzero(indicator,accnodesData,converter_techs,vintage,activity)),
1589          1);
1590   
1591  parameter accounting_converterActivity(indicator,nodesModel,converter_techs,vintage,activity,pc_accounting_converterActivity);
1592  loop(accnodes,
1593  accounting_converterActivity(indicator,nodesModel,converter_techs,vintage,activity,pc_accounting_converterActivity)
1594      $sum(accnodesData$(map_accnodesToCalc(accnodes,nodesModel) and sameas(accnodes,accnodesData)
1595                              and accounting_converterActivityIn(indicator,accnodesData,converter_techs,vintage,activity,pc_accounting_converterActivity)), 1)
1596      = sum(accnodesData$(map_accnodesToCalc(accnodes,nodesModel) and sameas(accnodes,accnodesData)),
1597              accounting_converterActivityIn(indicator,accnodesData,converter_techs,vintage,activity,pc_accounting_converterActivity));
1598  );
1599   
1600  accounting_converterActivity(indicator,nodesModel,converter_techs,vintage,activity,pc_accounting_converterActivity)
1601      $accounting_converterActivityAgg(indicator,nodesModel,converter_techs,vintage,activity,pc_accounting_converterActivity)
1602      = accounting_converterActivityAgg(indicator,nodesModel,converter_techs,vintage,activity,pc_accounting_converterActivity);
1603   
1604  * option kill %paramName%Nonzero %paramName%Chk %paramName%Agg
BATINCLUDE C:\Local\REMix\framework\remix\framework\model\source\battools\aggregateAccountingMean.gms
1606  * SPDX-FileCopyrightText: Copyright (c) 2023 German Aerospace Center (DLR)
1607  * SPDX-License-Identifier: BSD-3-Clause
1608   
1610   
1612   
1613  set accounting_converterStartupNonzero(indicator,accnodesData,converter_techs,vintage);
1614  accounting_converterStartupNonzero(indicator,accnodesData,converter_techs,vintage)
1615      $sum(pc_accounting_converterStartup$accounting_converterStartupIn(indicator,accnodesData,converter_techs,vintage,pc_accounting_converterStartup), 1)
1616      = yes;
1617   
1619   
1620  parameter accounting_converterStartupAgg(indicator,nodesModel,converter_techs,vintage,pc_accounting_converterStartup);
1621  accounting_converterStartupAgg(indicator,nodesModel,converter_techs,vintage,pc_accounting_converterStartup)
1622      $sum((nodesData,accnodesData)
1623              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1624                  and accounting_converterStartupNonzero(indicator,accnodesData,converter_techs,vintage)), 1)
1625      = sum((nodesData,accnodesData)
1626              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1627                  and accounting_converterStartupNonzero(indicator,accnodesData,converter_techs,vintage)),
1628          accounting_converterStartupIn(indicator,accnodesData,converter_techs,vintage,pc_accounting_converterStartup))
1629      / sum((nodesData,accnodesData)
1630              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1631                  and accounting_converterStartupNonzero(indicator,accnodesData,converter_techs,vintage)),
1632          1);
1633   
1634  parameter accounting_converterStartup(indicator,nodesModel,converter_techs,vintage,pc_accounting_converterStartup);
1635  loop(accnodes,
1636  accounting_converterStartup(indicator,nodesModel,converter_techs,vintage,pc_accounting_converterStartup)
1637      $sum(accnodesData$(map_accnodesToCalc(accnodes,nodesModel) and sameas(accnodes,accnodesData)
1638                              and accounting_converterStartupIn(indicator,accnodesData,converter_techs,vintage,pc_accounting_converterStartup)), 1)
1639      = sum(accnodesData$(map_accnodesToCalc(accnodes,nodesModel) and sameas(accnodes,accnodesData)),
1640              accounting_converterStartupIn(indicator,accnodesData,converter_techs,vintage,pc_accounting_converterStartup));
1641  );
1642   
1643  accounting_converterStartup(indicator,nodesModel,converter_techs,vintage,pc_accounting_converterStartup)
1644      $accounting_converterStartupAgg(indicator,nodesModel,converter_techs,vintage,pc_accounting_converterStartup)
1645      = accounting_converterStartupAgg(indicator,nodesModel,converter_techs,vintage,pc_accounting_converterStartup);
1646   
1647  * option kill %paramName%Nonzero %paramName%Chk %paramName%Agg
BATINCLUDE C:\Local\REMix\framework\remix\framework\model\source\battools\aggregateAccountingMean.gms
1649  * SPDX-FileCopyrightText: Copyright (c) 2023 German Aerospace Center (DLR)
1650  * SPDX-License-Identifier: BSD-3-Clause
1651   
1653   
1655   
1656  set accounting_storageUnitsNonzero(indicator,accnodesData,storage_techs,vintage);
1657  accounting_storageUnitsNonzero(indicator,accnodesData,storage_techs,vintage)
1658      $sum(pc_accounting_storageUnits$accounting_storageUnitsIn(indicator,accnodesData,storage_techs,vintage,pc_accounting_storageUnits), 1)
1659      = yes;
1660   
1662  set accounting_storageUnitsChk(indicator,nodesModel,storage_techs,vintage,pc_accounting_storageUnits);
1663  accounting_storageUnitsChk(indicator,nodesModel,storage_techs,vintage,"useAnnuity")
1664      $sum((nodesData,accnodesData)
1665              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1666                  and accounting_storageUnitsNonzero(indicator,accnodesData,storage_techs,vintage)), 1)
1667      = smax((nodesData,accnodesData)
1668              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1669                  and accounting_storageUnitsNonzero(indicator,accnodesData,storage_techs,vintage)),
1670          accounting_storageUnitsIn(indicator,accnodesData,storage_techs,vintage,"useAnnuity"))
1671      - smin((nodesData,accnodesData)
1672              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1673                  and accounting_storageUnitsNonzero(indicator,accnodesData,storage_techs,vintage)),
1674          accounting_storageUnitsIn(indicator,accnodesData,storage_techs,vintage,"useAnnuity"));
1675   
1676  abort$sum(accounting_storageUnitsChk(indicator,nodesModel,storage_techs,vintage,pc_accounting_storageUnits), 1) "Cannot aggregate technologies with different useAnnuity values."
1678   
1679  parameter accounting_storageUnitsAgg(indicator,nodesModel,storage_techs,vintage,pc_accounting_storageUnits);
1680  accounting_storageUnitsAgg(indicator,nodesModel,storage_techs,vintage,pc_accounting_storageUnits)
1681      $sum((nodesData,accnodesData)
1682              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1683                  and accounting_storageUnitsNonzero(indicator,accnodesData,storage_techs,vintage)), 1)
1684      = sum((nodesData,accnodesData)
1685              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1686                  and accounting_storageUnitsNonzero(indicator,accnodesData,storage_techs,vintage)),
1687          accounting_storageUnitsIn(indicator,accnodesData,storage_techs,vintage,pc_accounting_storageUnits))
1688      / sum((nodesData,accnodesData)
1689              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1690                  and accounting_storageUnitsNonzero(indicator,accnodesData,storage_techs,vintage)),
1691          1);
1692   
1693  parameter accounting_storageUnits(indicator,nodesModel,storage_techs,vintage,pc_accounting_storageUnits);
1694  loop(accnodes,
1695  accounting_storageUnits(indicator,nodesModel,storage_techs,vintage,pc_accounting_storageUnits)
1696      $sum(accnodesData$(map_accnodesToCalc(accnodes,nodesModel) and sameas(accnodes,accnodesData)
1697                              and accounting_storageUnitsIn(indicator,accnodesData,storage_techs,vintage,pc_accounting_storageUnits)), 1)
1698      = sum(accnodesData$(map_accnodesToCalc(accnodes,nodesModel) and sameas(accnodes,accnodesData)),
1699              accounting_storageUnitsIn(indicator,accnodesData,storage_techs,vintage,pc_accounting_storageUnits));
1700  );
1701   
1702  accounting_storageUnits(indicator,nodesModel,storage_techs,vintage,pc_accounting_storageUnits)
1703      $accounting_storageUnitsAgg(indicator,nodesModel,storage_techs,vintage,pc_accounting_storageUnits)
1704      = accounting_storageUnitsAgg(indicator,nodesModel,storage_techs,vintage,pc_accounting_storageUnits);
1705   
1706  * option kill %paramName%Nonzero %paramName%Chk %paramName%Agg
BATINCLUDE C:\Local\REMix\framework\remix\framework\model\source\battools\aggregateAccountingMean.gms
1708  * SPDX-FileCopyrightText: Copyright (c) 2023 German Aerospace Center (DLR)
1709  * SPDX-License-Identifier: BSD-3-Clause
1710   
1712   
1714   
1715  set accounting_transferLinksNonzero(indicator,acclinksData,transfer_techs,vintage);
1716  accounting_transferLinksNonzero(indicator,acclinksData,transfer_techs,vintage)
1717      $sum(pc_accounting_transferLinks$accounting_transferLinksIn(indicator,acclinksData,transfer_techs,vintage,pc_accounting_transferLinks), 1)
1718      = yes;
1719   
1721  set accounting_transferLinksChk(indicator,linksModel,transfer_techs,vintage,pc_accounting_transferLinks);
1722  accounting_transferLinksChk(indicator,linksModel,transfer_techs,vintage,"useAnnuity")
1723      $sum((linksData,acclinksData)
1724              $(aggregatelinksModel(linksData,linksModel) and sameas(linksData,acclinksData)
1725                  and accounting_transferLinksNonzero(indicator,acclinksData,transfer_techs,vintage)), 1)
1726      = smax((linksData,acclinksData)
1727              $(aggregatelinksModel(linksData,linksModel) and sameas(linksData,acclinksData)
1728                  and accounting_transferLinksNonzero(indicator,acclinksData,transfer_techs,vintage)),
1729          accounting_transferLinksIn(indicator,acclinksData,transfer_techs,vintage,"useAnnuity"))
1730      - smin((linksData,acclinksData)
1731              $(aggregatelinksModel(linksData,linksModel) and sameas(linksData,acclinksData)
1732                  and accounting_transferLinksNonzero(indicator,acclinksData,transfer_techs,vintage)),
1733          accounting_transferLinksIn(indicator,acclinksData,transfer_techs,vintage,"useAnnuity"));
1734   
1735  abort$sum(accounting_transferLinksChk(indicator,linksModel,transfer_techs,vintage,pc_accounting_transferLinks), 1) "Cannot aggregate technologies with different useAnnuity values."
1737   
1738  parameter accounting_transferLinksAgg(indicator,linksModel,transfer_techs,vintage,pc_accounting_transferLinks);
1739  accounting_transferLinksAgg(indicator,linksModel,transfer_techs,vintage,pc_accounting_transferLinks)
1740      $sum((linksData,acclinksData)
1741              $(aggregatelinksModel(linksData,linksModel) and sameas(linksData,acclinksData)
1742                  and accounting_transferLinksNonzero(indicator,acclinksData,transfer_techs,vintage)), 1)
1743      = sum((linksData,acclinksData)
1744              $(aggregatelinksModel(linksData,linksModel) and sameas(linksData,acclinksData)
1745                  and accounting_transferLinksNonzero(indicator,acclinksData,transfer_techs,vintage)),
1746          accounting_transferLinksIn(indicator,acclinksData,transfer_techs,vintage,pc_accounting_transferLinks))
1747      / sum((linksData,acclinksData)
1748              $(aggregatelinksModel(linksData,linksModel) and sameas(linksData,acclinksData)
1749                  and accounting_transferLinksNonzero(indicator,acclinksData,transfer_techs,vintage)),
1750          1);
1751   
1752  parameter accounting_transferLinks(indicator,linksModel,transfer_techs,vintage,pc_accounting_transferLinks);
1753  loop(acclinks,
1754  accounting_transferLinks(indicator,linksModel,transfer_techs,vintage,pc_accounting_transferLinks)
1755      $sum(acclinksData$(map_acclinksToCalc(acclinks,linksModel) and sameas(acclinks,acclinksData)
1756                              and accounting_transferLinksIn(indicator,acclinksData,transfer_techs,vintage,pc_accounting_transferLinks)), 1)
1757      = sum(acclinksData$(map_acclinksToCalc(acclinks,linksModel) and sameas(acclinks,acclinksData)),
1758              accounting_transferLinksIn(indicator,acclinksData,transfer_techs,vintage,pc_accounting_transferLinks));
1759  );
1760   
1761  accounting_transferLinks(indicator,linksModel,transfer_techs,vintage,pc_accounting_transferLinks)
1762      $accounting_transferLinksAgg(indicator,linksModel,transfer_techs,vintage,pc_accounting_transferLinks)
1763      = accounting_transferLinksAgg(indicator,linksModel,transfer_techs,vintage,pc_accounting_transferLinks);
1764   
1765  * option kill %paramName%Nonzero %paramName%Chk %paramName%Agg
BATINCLUDE C:\Local\REMix\framework\remix\framework\model\source\battools\aggregateAccountingMean.gms
1767  * SPDX-FileCopyrightText: Copyright (c) 2023 German Aerospace Center (DLR)
1768  * SPDX-License-Identifier: BSD-3-Clause
1769   
1771   
1773   
1774  set accounting_transferPerLengthNonzero(indicator,acclinksData,transfer_techs,vintage,link_types);
1775  accounting_transferPerLengthNonzero(indicator,acclinksData,transfer_techs,vintage,link_types)
1776      $sum(pc_accounting_transferPerLength$accounting_transferPerLengthIn(indicator,acclinksData,transfer_techs,vintage,link_types,pc_accounting_transferPerLength), 1)
1777      = yes;
1778   
1780  set accounting_transferPerLengthChk(indicator,linksModel,transfer_techs,vintage,link_types,pc_accounting_transferPerLength);
1781  accounting_transferPerLengthChk(indicator,linksModel,transfer_techs,vintage,link_types,"useAnnuity")
1782      $sum((linksData,acclinksData)
1783              $(aggregatelinksModel(linksData,linksModel) and sameas(linksData,acclinksData)
1784                  and accounting_transferPerLengthNonzero(indicator,acclinksData,transfer_techs,vintage,link_types)), 1)
1785      = smax((linksData,acclinksData)
1786              $(aggregatelinksModel(linksData,linksModel) and sameas(linksData,acclinksData)
1787                  and accounting_transferPerLengthNonzero(indicator,acclinksData,transfer_techs,vintage,link_types)),
1788          accounting_transferPerLengthIn(indicator,acclinksData,transfer_techs,vintage,link_types,"useAnnuity"))
1789      - smin((linksData,acclinksData)
1790              $(aggregatelinksModel(linksData,linksModel) and sameas(linksData,acclinksData)
1791                  and accounting_transferPerLengthNonzero(indicator,acclinksData,transfer_techs,vintage,link_types)),
1792          accounting_transferPerLengthIn(indicator,acclinksData,transfer_techs,vintage,link_types,"useAnnuity"));
1793   
1794  abort$sum(accounting_transferPerLengthChk(indicator,linksModel,transfer_techs,vintage,link_types,pc_accounting_transferPerLength), 1) "Cannot aggregate technologies with different useAnnuity values."
1796   
1797  parameter accounting_transferPerLengthAgg(indicator,linksModel,transfer_techs,vintage,link_types,pc_accounting_transferPerLength);
1798  accounting_transferPerLengthAgg(indicator,linksModel,transfer_techs,vintage,link_types,pc_accounting_transferPerLength)
1799      $sum((linksData,acclinksData)
1800              $(aggregatelinksModel(linksData,linksModel) and sameas(linksData,acclinksData)
1801                  and accounting_transferPerLengthNonzero(indicator,acclinksData,transfer_techs,vintage,link_types)), 1)
1802      = sum((linksData,acclinksData)
1803              $(aggregatelinksModel(linksData,linksModel) and sameas(linksData,acclinksData)
1804                  and accounting_transferPerLengthNonzero(indicator,acclinksData,transfer_techs,vintage,link_types)),
1805          accounting_transferPerLengthIn(indicator,acclinksData,transfer_techs,vintage,link_types,pc_accounting_transferPerLength))
1806      / sum((linksData,acclinksData)
1807              $(aggregatelinksModel(linksData,linksModel) and sameas(linksData,acclinksData)
1808                  and accounting_transferPerLengthNonzero(indicator,acclinksData,transfer_techs,vintage,link_types)),
1809          1);
1810   
1811  parameter accounting_transferPerLength(indicator,linksModel,transfer_techs,vintage,link_types,pc_accounting_transferPerLength);
1812  loop(acclinks,
1813  accounting_transferPerLength(indicator,linksModel,transfer_techs,vintage,link_types,pc_accounting_transferPerLength)
1814      $sum(acclinksData$(map_acclinksToCalc(acclinks,linksModel) and sameas(acclinks,acclinksData)
1815                              and accounting_transferPerLengthIn(indicator,acclinksData,transfer_techs,vintage,link_types,pc_accounting_transferPerLength)), 1)
1816      = sum(acclinksData$(map_acclinksToCalc(acclinks,linksModel) and sameas(acclinks,acclinksData)),
1817              accounting_transferPerLengthIn(indicator,acclinksData,transfer_techs,vintage,link_types,pc_accounting_transferPerLength));
1818  );
1819   
1820  accounting_transferPerLength(indicator,linksModel,transfer_techs,vintage,link_types,pc_accounting_transferPerLength)
1821      $accounting_transferPerLengthAgg(indicator,linksModel,transfer_techs,vintage,link_types,pc_accounting_transferPerLength)
1822      = accounting_transferPerLengthAgg(indicator,linksModel,transfer_techs,vintage,link_types,pc_accounting_transferPerLength);
1823   
1824  * option kill %paramName%Nonzero %paramName%Chk %paramName%Agg
BATINCLUDE C:\Local\REMix\framework\remix\framework\model\source\battools\aggregateAccountingMean.gms
1826  * SPDX-FileCopyrightText: Copyright (c) 2023 German Aerospace Center (DLR)
1827  * SPDX-License-Identifier: BSD-3-Clause
1828   
1830   
1832   
1833  set accounting_sourcesinkFlowNonzero(indicator,accnodesData,years,sourcesink_techs,commodity);
1834  accounting_sourcesinkFlowNonzero(indicator,accnodesData,years,sourcesink_techs,commodity)
1835      $sum(pc_accounting_sourcesinkFlow$accounting_sourcesinkFlowIn(indicator,accnodesData,years,sourcesink_techs,commodity,pc_accounting_sourcesinkFlow), 1)
1836      = yes;
1837   
1839   
1840  parameter accounting_sourcesinkFlowAgg(indicator,nodesModel,years,sourcesink_techs,commodity,pc_accounting_sourcesinkFlow);
1841  accounting_sourcesinkFlowAgg(indicator,nodesModel,years,sourcesink_techs,commodity,pc_accounting_sourcesinkFlow)
1842      $sum((nodesData,accnodesData)
1843              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1844                  and accounting_sourcesinkFlowNonzero(indicator,accnodesData,years,sourcesink_techs,commodity)), 1)
1845      = sum((nodesData,accnodesData)
1846              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1847                  and accounting_sourcesinkFlowNonzero(indicator,accnodesData,years,sourcesink_techs,commodity)),
1848          accounting_sourcesinkFlowIn(indicator,accnodesData,years,sourcesink_techs,commodity,pc_accounting_sourcesinkFlow))
1849      / sum((nodesData,accnodesData)
1850              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1851                  and accounting_sourcesinkFlowNonzero(indicator,accnodesData,years,sourcesink_techs,commodity)),
1852          1);
1853   
1854  parameter accounting_sourcesinkFlow(indicator,nodesModel,years,sourcesink_techs,commodity,pc_accounting_sourcesinkFlow);
1855  loop(accnodes,
1856  accounting_sourcesinkFlow(indicator,nodesModel,years,sourcesink_techs,commodity,pc_accounting_sourcesinkFlow)
1857      $sum(accnodesData$(map_accnodesToCalc(accnodes,nodesModel) and sameas(accnodes,accnodesData)
1858                              and accounting_sourcesinkFlowIn(indicator,accnodesData,years,sourcesink_techs,commodity,pc_accounting_sourcesinkFlow)), 1)
1859      = sum(accnodesData$(map_accnodesToCalc(accnodes,nodesModel) and sameas(accnodes,accnodesData)),
1860              accounting_sourcesinkFlowIn(indicator,accnodesData,years,sourcesink_techs,commodity,pc_accounting_sourcesinkFlow));
1861  );
1862   
1863  accounting_sourcesinkFlow(indicator,nodesModel,years,sourcesink_techs,commodity,pc_accounting_sourcesinkFlow)
1864      $accounting_sourcesinkFlowAgg(indicator,nodesModel,years,sourcesink_techs,commodity,pc_accounting_sourcesinkFlow)
1865      = accounting_sourcesinkFlowAgg(indicator,nodesModel,years,sourcesink_techs,commodity,pc_accounting_sourcesinkFlow);
1866   
1867  * option kill %paramName%Nonzero %paramName%Chk %paramName%Agg
1868   
1869  parameter accounting_indicatorBounds_links(linksModel,years,indicator,pc_accounting_indicatorBounds_links);
1870  accounting_indicatorBounds_links(linksModelToCalc,yearsToCalc,indicator,pc_accounting_indicatorBounds_links)
1871      = sum((linksData)$sameas(linksModelToCalc,linksData),
1872              accounting_indicatorBounds_linksIn(linksData,yearsToCalc,indicator,pc_accounting_indicatorBounds_links));
1873   
1874  accounting_indicatorBounds_links(linksModelToCalc,yearsToCalc,indicator,pc_accounting_indicatorBounds_links)
1875      = sum((linksData)$links_aggregate(linksModelToCalc,linksData),
1876              accounting_indicatorBounds_linksIn(linksData,yearsToCalc,indicator,pc_accounting_indicatorBounds_links));
1877   
1878  parameter accounting_indicatorBounds(accNodesModel,accYears,indicator,pc_accounting_indicatorBounds);
1879  accounting_indicatorBounds(accNodesModel,accYears,indicator,pc_accounting_indicatorBounds)
1880      = sum (accNodesData$sameas(accNodesModel,accNodesData),
1881          accounting_indicatorBoundsIn(accNodesData,accYears,indicator,pc_accounting_indicatorBounds));
1882   
1883  accounting_indicatorBounds(accNodesModel,accYears,indicator,pc_accounting_indicatorBounds)
1884      $(sum (nodesModel$sameas(accNodesModel,nodesModel), 1) > 0)
1885      = sum ((accNodesData,nodesData,nodesModel)
1886              $(aggregateNodesModel(nodesData,nodesModel) and sameas(accNodesModel,nodesModel) and sameas(accNodesData,nodesData)),
1887          accounting_indicatorBoundsIn(accNodesData,accYears,indicator,pc_accounting_indicatorBounds));
1888   
1889  set accounting_perIndicatorNonzero(indicator,indicator_a,accNodesData,accYears);
1890  accounting_perIndicatorNonzero(indicator,indicator_a,accNodesData,accYears)
1891      $sum(pc_accounting_perIndicator$accounting_perIndicatorIn(indicator,indicator_a,accNodesData,accYears,pc_accounting_perIndicator), 1)
1892      = yes;
1893   
1894  parameter accounting_perIndicatorAgg(indicator,indicator_a,nodesModel,accYears,pc_accounting_perIndicator);
1895  accounting_perIndicatorAgg(indicator,indicator_a,nodesModel,accYears,pc_accounting_perIndicator)
1896      $sum((nodesData,accnodesData)
1897              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1898                  and accounting_perIndicatorNonzero(indicator,indicator_a,accnodesData,accYears)), 1)
1899      = sum((nodesData,accnodesData)
1900              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1901                  and accounting_perIndicatorNonzero(indicator,indicator_a,accnodesData,accYears)),
1902          accounting_perIndicatorIn(indicator,indicator_a,accnodesData,accYears,pc_accounting_perIndicator))
1903      / sum((nodesData,accnodesData)
1904              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1905                  and accounting_perIndicatorNonzero(indicator,indicator_a,accnodesData,accYears)),
1906          1);
1907   
1908  parameter accounting_perIndicator(indicator,indicator_a,accNodesModel,accYears,pc_accounting_perIndicator);
1909   
1910  loop(accNodes,
1911  accounting_perIndicator(indicator,indicator_a,accNodesModel,accYears,pc_accounting_perIndicator)
1912      $(sum(accNodesData$(sameas(accNodes,accNodesData)
1913              and accounting_perIndicatorIn(indicator,indicator_a,accNodesData,"horizon",pc_accounting_perIndicator)), 1)
1914          and map_accNodes(accNodesModel,accNodes)
1915              )
1916      = sum(accNodesData$(sameas(accNodes,accNodesData)),
1917              accounting_perIndicatorIn(indicator,indicator_a,accNodesData,"horizon",pc_accounting_perIndicator));
1918   
1919  accounting_perIndicator(indicator,indicator_a,accNodesModel,accYears,pc_accounting_perIndicator)
1920      $(sum(accNodesData$(sameas(accNodes,accNodesData)
1921              and accounting_perIndicatorIn(indicator,indicator_a,accNodesData,accYears,pc_accounting_perIndicator)), 1)
1922          and map_accNodes(accNodesModel,accNodes)
1923          and not sameas(accYears, "horizon"))
1924      = sum(accNodesData$(sameas(accNodes,accNodesData)),
1925              accounting_perIndicatorIn(indicator,indicator_a,accNodesData,accYears,pc_accounting_perIndicator));
1926  );
1927   
1928  accounting_perIndicator(indicator,indicator_a,accNodesModel,accYears,pc_accounting_perIndicator)
1929      $sum(nodesModel$(accounting_perIndicatorAgg(indicator,indicator_a,nodesModel,"horizon",pc_accounting_perIndicator)
1930          and sameas(accNodesModel,nodesModel)), 1)
1931      = sum(nodesModel$sameas(accNodesModel,nodesModel),
1932          accounting_perIndicatorAgg(indicator,indicator_a,nodesModel,"horizon",pc_accounting_perIndicator));
1933   
1934  accounting_perIndicator(indicator,indicator_a,accNodesModel,accYears,pc_accounting_perIndicator)
1935      $sum(nodesModel$(accounting_perIndicatorAgg(indicator,indicator_a,nodesModel,accYears,pc_accounting_perIndicator)
1936          and sameas(accNodesModel,nodesModel) and not sameas(accYears, "horizon")), 1)
1937      = sum(nodesModel$sameas(accNodesModel,nodesModel),
1938          accounting_perIndicatorAgg(indicator,indicator_a,nodesModel,accYears,pc_accounting_perIndicator));
1939   
1940   
1941  * Make sure all required indicators end up in the model
1942  set activeIndicators(accNodesModel,accYears,indicator);
1943  activeIndicators(accNodesModel,accYears,indicator)
1944     $((accounting_indicatorBounds(accNodesModel,accYears,indicator,"obj") <> 0
1947        or accounting_indicatorBounds(accNodesModel,accYears,indicator,"useFixed") <> 0
1948        or accounting_indicatorBounds(accNodesModel,accYears,indicator,"useLower") <> 0
1949        or accounting_indicatorBounds(accNodesModel,accYears,indicator,"useUpper") <> 0 )
1950          and not accounting_indicatorBounds(accNodesModel,accYears,indicator,"isVariable"))
1951     = yes;
1952   
1953  set activeIndicators_links(linksModel,years,indicator);
1954  activeIndicators_links(linksModelToCalc,yearsToCalc,indicator)
1955     $(accounting_indicatorBounds_links(linksModelToCalc,yearsToCalc,indicator,"useFixed") <> 0
1956        or accounting_indicatorBounds_links(linksModelToCalc,yearsToCalc,indicator,"useLower") <> 0
1957        or accounting_indicatorBounds_links(linksModelToCalc,yearsToCalc,indicator,"useUpper") <> 0 )
1958     = yes;
1959   
1960  set variableIndicators(accNodesModel,accYears,indicator);
1961  variableIndicators(accNodesModel,accYears,indicator)
1962     $(accounting_indicatorBounds(accNodesModel,accYears,indicator,"obj") = 0
1963        and accounting_indicatorBounds(accNodesModel,accYears,indicator,"isVariable"))
1964     = yes;
1965   
1966  * Calculate length of years and discount rates per indicator
1967  parameter yearFactor(accNodesModel,accYears,indicator,accYears);
1968  yearFactor(accNodesModel,accYears,indicator,accYears_a)
1969      $(map_accYears(accYears_a,accYears)
1970          and sum(yearsToCalc$(sameas(yearsToCalc,accYears_a)), 1))
1971      = 1;
1972   
1973  yearFactor(accNodesModel,accYears,indicator,accYears_a)
1974      $(map_accYears(accYears_a,accYears)
1975          and sum(yearsToCalc$(sameas(yearsToCalc,accYears_a)), 1)
1976          and accounting_indicatorBounds(accNodesModel,accYears,indicator,"integral"))
1977      = sum(yearsToCalc$sameas(accYears_a,yearsToCalc), yearsLen(yearsToCalc));
1978   
1979  yearFactor(accNodesModel,accYears,indicator,accYears_a)
1980      $(map_accYears(accYears_a,accYears)
1981          and sum(yearsToCalc$(sameas(yearsToCalc,accYears_a)), 1)
1982          and accounting_indicatorBounds(accNodesModel,accYears,indicator,"integral")
1983          and accounting_indicatorBounds(accNodesModel,accYears,indicator,"endyear")
1984          and yearFactor(accNodesModel,accYears,indicator,accYears_a) = inf)
1985      = accounting_indicatorBounds(accNodesModel,accYears,indicator,"endyear");
1986   
1987  yearFactor(accNodesModel,accYears,indicator,accYears_a)
1988      $(map_accYears(accYears_a,accYears)
1989          and sum(yearsToCalc$(sameas(yearsToCalc,accYears_a)), 1)
1990          and accounting_indicatorBounds(accNodesModel,accYears,indicator,"integral")
1991          and accounting_indicatorBounds(accNodesModel,accYears,indicator,"discount"))
1992      = yearFactor(accNodesModel,accYears,indicator,accYears_a)
1993          * (1 - accounting_indicatorBounds(accNodesModel,accYears,indicator,"discount"))
1994                  ** (accYears_a.val - smin(yearsToCalc, yearsToCalc.val));
1995   
1996   
1997  * ==== calculate compound indicators for the optimization ====
1998  scalar compIndicators_pre;
1999  scalar compIndicators_post;
2000   
2001  parameter compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a);
2002  compoundIndicators(accNodesModel,accYears,indicator,accNodesModel,accYears,indicator)
2003      $activeIndicators(accNodesModel,accYears,indicator) = 1;
2004   
2005  set compoundIndicators_act(accNodesModel,accYears,indicator);
2006  option compoundIndicators_act < compoundIndicators;
2007   
2008  parameter compoundIndicatorsExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa);
2009  parameter compoundIndicatorsExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a);
2010  compoundIndicatorsExt(accNodesModel,accYears,indicator,accNodesModel,accYears,indicator,accNodesModel,accYears,indicator)
2011      $compoundIndicators_act(accNodesModel,accYears,indicator) = 1;
2012   
2013  compIndicators_pre = 0;
2014  compIndicators_post = 1;
2015   
2016  option sparseval = 1;
2017  while(compIndicators_pre < compIndicators_post,
2018      compIndicators_pre = sum((accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa)
2019          $compoundIndicatorsExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa), 1);
2020   
2021      compoundIndicatorsExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa)
2022          $(compoundIndicators_act(accNodesModel,accYears,indicator)
2023              and compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
2024              and not accounting_indicatorBounds(accNodesModel_a,accYears_a,indicator_a,"isVariable")
2025              and map_accNodes(accNodesModel_aa,accNodesModel_a)
2026              and map_accYears(accYears_aa,accYears_a))
2027          = compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
2028              * accounting_perIndicator(indicator_a,indicator_aa,accNodesModel_aa,accYears_aa,"perIndicator");
2029   
2030      option compoundIndicatorsExt_r < compoundIndicatorsExt;
2031   
2032      compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa)
2033          $(compoundIndicators_act(accNodesModel,accYears,indicator)
2034              and sum((accNodesModel_a,accYears_a,indicator_a)
2035                      $compoundIndicatorsExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a), 1) = 1)
2036          = sum((accNodesModel_a,accYears_a,indicator_a)
2037                  $(compoundIndicatorsExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a)),
2038              compoundIndicatorsExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a));
2039   
2040      compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa)
2041          $(compoundIndicators_act(accNodesModel,accYears,indicator)
2042              and sum((accNodesModel_a,accYears_a,indicator_a)
2043                      $compoundIndicatorsExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a), 1) > 1)
2044          = sum((accNodesModel_a,accYears_a,indicator_a)
2045                  $(compoundIndicatorsExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a)
2046                      and not (sameas(accNodesModel, accNodesModel_a) and sameas(accYears, accYears_a) and sameas(indicator, indicator_a))),
2047              compoundIndicatorsExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a))
2048          / sum((accNodesModel_a,accYears_a,indicator_a)
2049                  $(compoundIndicatorsExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a)
2050                      and not (sameas(accNodesModel, accNodesModel_a) and sameas(accYears, accYears_a) and sameas(indicator, indicator_a))), 1);
2051   
2052      option compoundIndicators_act < compoundIndicators;
2053      compIndicators_post = sum((accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa)
2054          $compoundIndicatorsExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa), 1);
2055  );
2056  option sparseval = 0;
2057   
2058  * map to sub-years and sub-nodes
2059  compoundIndicatorsExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_a)
2060      $(compoundIndicators_act(accNodesModel,accYears,indicator)
2061          and compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
2062          and map_accYears(accYears_aa,accYears_a)
2063          and map_accNodes(accNodesModel_aa,accNodesModel_a))
2064      = compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
2065          * yearFactor(accNodesModel,accYears,indicator,accYears_aa);
2066   
2067  * Remove all accounting regions and accounting years
2068  compoundIndicatorsExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa)
2069      $(compoundIndicatorsExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa)
2070          and not accounting_indicatorBounds(accNodesModel_aa,accYears_aa,indicator_aa,"isVariable")
2071          and sum(accNodes$(sameas(accNodes,accNodesModel_aa)), 1)
2072              or sameas("horizon",accYears_aa))
2073      = 0;
2074   
2075  * Map from extended parameter to final parameter
2076  option compoundIndicatorsExt_r < compoundIndicatorsExt;
2077  compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa)
2078      $(compoundIndicators_act(accNodesModel,accYears,indicator)
2079          and sum((accNodesModel_a,accYears_a,indicator_a)
2080                  $compoundIndicatorsExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a), 1) = 1)
2081      = sum((accNodesModel_a,accYears_a,indicator_a)
2082              $(compoundIndicatorsExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a)),
2083          compoundIndicatorsExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a));
2084   
2085  compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa)
2086      $(compoundIndicators_act(accNodesModel,accYears,indicator)
2087          and sum((accNodesModel_a,accYears_a,indicator_a)
2088                  $compoundIndicatorsExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a), 1) > 1)
2089      = sum((accNodesModel_a,accYears_a,indicator_a)
2090              $(compoundIndicatorsExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a)
2091                  and not (sameas(accNodesModel, accNodesModel_a) and sameas(accYears, accYears_a) and sameas(indicator, indicator_a))),
2092          compoundIndicatorsExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a))
2093      / sum((accNodesModel_a,accYears_a,indicator_a)
2094              $(compoundIndicatorsExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a)
2095                  and not (sameas(accNodesModel, accNodesModel_a) and sameas(accYears, accYears_a) and sameas(indicator, indicator_a))), 1);
2096   
2097  * Remove all accounting regions and accounting years
2098  compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
2099      $(compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
2100          and not accounting_indicatorBounds(accNodesModel_a,accYears_a,indicator_a,"isVariable")
2101          and (sum(accNodes$(sameas(accNodes,accNodesModel_a)), 1)
2102              or sameas("horizon",accYears_a)))
2103      = 0;
2104   
2105  * Remove all slack indicators except the ones declared in indicatorBounds
2106  compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
2107      $(compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
2108          and sum((accNodesModel_aa,accYears_aa)$accounting_indicatorBounds(accNodesModel_aa,accYears_aa,indicator_a,"isVariable"), 1)
2109          and not accounting_indicatorBounds(accNodesModel_a,accYears_a,indicator_a,"isVariable"))
2110      = 0;
2111   
2112  * ==== compound indicators for the post calculation ====
2113  parameter compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a);
2114  compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel,accYears,indicator)
2115      $(sum(nodesModelToCalc$map_accNodesToCalc(accNodesModel,nodesModelToCalc), 1)
2116          and sum(yearsToCalc$map_accYearsToCalc(accYears,yearsToCalc), 1)) = 1;
2117   
2118  set compoundIndicatorsFull_act(accNodesModel,accYears,indicator);
2119  option compoundIndicatorsFull_act < compoundIndicatorsFull;
2120   
2121  parameter compoundIndicatorsFullExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa);
2122  parameter compoundIndicatorsFullExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a);
2123  compoundIndicatorsFullExt(accNodesModel,accYears,indicator,accNodesModel,accYears,indicator,accNodesModel,accYears,indicator) = 1;
2124   
2125  compIndicators_pre = 0;
2126  compIndicators_post = 1;
2127   
2128  option sparseval = 1;
2129  while(compIndicators_pre < compIndicators_post,
2130      compIndicators_pre = sum((accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa)
2131          $compoundIndicatorsFullExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa), 1);
2132   
2133      compoundIndicatorsFullExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa)
2134          $(compoundIndicatorsFull_act(accNodesModel,accYears,indicator)
2135              and compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
2136              and not accounting_indicatorBounds(accNodesModel_a,accYears_a,indicator_a,"isVariable")
2137              and map_accNodes(accNodesModel_aa,accNodesModel_a)
2138              and map_accYears(accYears_aa,accYears_a))
2139          = compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
2140              * accounting_perIndicator(indicator_a,indicator_aa,accNodesModel_aa,accYears_aa,"perIndicator");
2141   
2142      option compoundIndicatorsFullExt_r < compoundIndicatorsFullExt;
2143   
2144      compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa)
2145          $(compoundIndicatorsFull_act(accNodesModel,accYears,indicator)
2146              and sum((accNodesModel_a,accYears_a,indicator_a)
2147                      $compoundIndicatorsFullExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a), 1) = 1)
2148          = sum((accNodesModel_a,accYears_a,indicator_a)
2149                  $(compoundIndicatorsFullExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a)),
2150              compoundIndicatorsFullExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a));
2151   
2152      compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa)
2153          $(compoundIndicatorsFull_act(accNodesModel,accYears,indicator)
2154              and sum((accNodesModel_a,accYears_a,indicator_a)
2155                      $compoundIndicatorsFullExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a), 1) > 1)
2156          = sum((accNodesModel_a,accYears_a,indicator_a)
2157                  $(compoundIndicatorsFullExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a)
2158                      and not (sameas(accNodesModel, accNodesModel_a) and sameas(accYears, accYears_a) and sameas(indicator, indicator_a))),
2159              compoundIndicatorsFullExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a))
2160          / sum((accNodesModel_a,accYears_a,indicator_a)
2161                  $(compoundIndicatorsFullExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a)
2162                      and not (sameas(accNodesModel, accNodesModel_a) and sameas(accYears, accYears_a) and sameas(indicator, indicator_a))), 1);
2163   
2164      option compoundIndicatorsFull_act < compoundIndicatorsFull;
2165      compIndicators_post = sum((accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa)
2166          $compoundIndicatorsFullExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa), 1);
2167  );
2168  option sparseval = 0;
2169   
2170  * map to sub-years and sub-nodes
2171  compoundIndicatorsFullExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_a)
2172      $(compoundIndicatorsFull_act(accNodesModel,accYears,indicator)
2173          and compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
2174          and map_accYears(accYears_aa,accYears_a)
2175          and map_accNodes(accNodesModel_aa,accNodesModel_a))
2176      = compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
2177          * yearFactor(accNodesModel,accYears,indicator,accYears_aa);
2178   
2179  * Remove all accounting regions and accounting years
2180  compoundIndicatorsFullExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa)
2181      $(compoundIndicatorsFullExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa)
2182          and not accounting_indicatorBounds(accNodesModel_aa,accYears_aa,indicator_aa,"isVariable")
2183          and sum(accNodes$(sameas(accNodes,accNodesModel_aa)), 1)
2184              or sameas("horizon",accYears_aa))
2185      = 0;
2186   
2187  * Map from extended parameter to final parameter
2188  option compoundIndicatorsFullExt_r < compoundIndicatorsFullExt;
2189  compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa)
2190      $(compoundIndicatorsFull_act(accNodesModel,accYears,indicator)
2191          and sum((accNodesModel_a,accYears_a,indicator_a)
2192                  $compoundIndicatorsFullExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a), 1) = 1)
2193      = sum((accNodesModel_a,accYears_a,indicator_a)
2194              $(compoundIndicatorsFullExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a)),
2195          compoundIndicatorsFullExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a));
2196   
2197  compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa)
2198      $(compoundIndicatorsFull_act(accNodesModel,accYears,indicator)
2199          and sum((accNodesModel_a,accYears_a,indicator_a)
2200                  $compoundIndicatorsFullExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a), 1) > 1)
2201      = sum((accNodesModel_a,accYears_a,indicator_a)
2202              $(compoundIndicatorsFullExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a)
2203                  and not (sameas(accNodesModel, accNodesModel_a) and sameas(accYears, accYears_a) and sameas(indicator, indicator_a))),
2204          compoundIndicatorsFullExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a))
2205      / sum((accNodesModel_a,accYears_a,indicator_a)
2206              $(compoundIndicatorsFullExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a)
2207                  and not (sameas(accNodesModel, accNodesModel_a) and sameas(accYears, accYears_a) and sameas(indicator, indicator_a))), 1);
2208   
2209  * Remove all accounting regions and accounting years
2210  compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
2211      $(compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
2212          and not accounting_indicatorBounds(accNodesModel_a,accYears_a,indicator_a,"isVariable")
2213          and (sum(accNodes$(sameas(accNodes,accNodesModel_a)), 1)
2214              or sameas("horizon",accYears_a)))
2215      = 0;
2216   
2217  * Remove all slack indicators except the ones declared in indicatorBounds
2218  compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
2219      $(compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
2220          and sum((accNodesModel_aa,accYears_aa)$accounting_indicatorBounds(accNodesModel_aa,accYears_aa,indicator_a,"isVariable"), 1)
2221          and not accounting_indicatorBounds(accNodesModel_a,accYears_a,indicator_a,"isVariable"))
2222      = 0;
2223   
2224  * Check if the objective value and optimization sense is set correctly
2225  scalar opti_values, opti_sense;
2226  opti_values = sum((accNodesModel,accYears,indicator)$(accounting_indicatorBounds(accNodesModel,accYears,indicator,"obj") <> 0), 1);
2227  opti_sense = sum((accNodesModel,accYears,indicator), accounting_indicatorBounds(accNodesModel,accYears,indicator,"obj"));
2228  abort$(opti_values < 1)
2229      "Accounting: No indicator specified as objective value"
2230  abort$(opti_values > 1)
2231      "Accounting: Too many indicators specified as objective value"
2232  abort$(opti_sense <> -1 and opti_sense <> 1)
2233      "Accounting: Optimization sense has to be either -1 or 1"
INCLUDE    C:\Local\REMix\framework\remix\framework\model\source\accounting\annuities.gms
2235  * SPDX-FileCopyrightText: Copyright (c) 2023 German Aerospace Center (DLR)
2236  * SPDX-License-Identifier: BSD-3-Clause
2237   
2238  * Calculation of annuities
2239   
2240  abort$(sum((indicator,nodesModelToCalc,converter_techs,vintage)
2241          $(accounting_converterUnits(indicator,nodesModelToCalc,converter_techs,vintage,"useAnnuity") = 1
2242          and accounting_converterUnits(indicator,nodesModelToCalc,converter_techs,vintage,"amorTime") < 1), 1) > 0 )
2243      "Accounting: Some converter technologies use annuities but have no amortization time"
2244   
2245  parameter accounting_annuityFactor_converter(indicator,nodesModel,converter_techs,vintage);
2246  accounting_annuityFactor_converter(indicator,nodesModelToCalc,converter_techs,vintage)
2247      $accounting_converterUnits(indicator,nodesModelToCalc,converter_techs,vintage,"useAnnuity")
2248      =
2249      accounting_converterUnits(indicator,nodesModelToCalc,converter_techs,vintage,"interest")
2250          * (1 + accounting_converterUnits(indicator,nodesModelToCalc,converter_techs,vintage,"interest"))
2251          ** accounting_converterUnits(indicator,nodesModelToCalc,converter_techs,vintage,"amorTime")
2252      / ((1 + accounting_converterUnits(indicator,nodesModelToCalc,converter_techs,vintage,"interest"))
2253          ** accounting_converterUnits(indicator,nodesModelToCalc,converter_techs,vintage,"amorTime") - 1);
2254   
2255   
2256  abort$(sum((indicator,nodesModelToCalc,storage_techs,vintage)
2257          $(accounting_storageUnits(indicator,nodesModelToCalc,storage_techs,vintage,"useAnnuity") = 1
2258          and accounting_storageUnits(indicator,nodesModelToCalc,storage_techs,vintage,"amorTime") < 1), 1) > 0 )
2259      "Accounting: Some storage technologies use annuities but have no amortization time"
2260   
2261  parameter accounting_annuityFactor_storage(indicator,nodesModel,storage_techs,vintage);
2262  accounting_annuityFactor_storage(indicator,nodesModelToCalc,storage_techs,vintage)
2263      $accounting_storageUnits(indicator,nodesModelToCalc,storage_techs,vintage,"useAnnuity")
2264      =
2265      accounting_storageUnits(indicator,nodesModelToCalc,storage_techs,vintage,"interest")
2266          * (1 + accounting_storageUnits(indicator,nodesModelToCalc,storage_techs,vintage,"interest"))
2267          ** accounting_storageUnits(indicator,nodesModelToCalc,storage_techs,vintage,"amorTime")
2268      / ((1 + accounting_storageUnits(indicator,nodesModelToCalc,storage_techs,vintage,"interest"))
2269          ** accounting_storageUnits(indicator,nodesModelToCalc,storage_techs,vintage,"amorTime") - 1);
2270   
2271   
2272  abort$(sum((indicator,linksModelToCalc,transfer_techs,vintage)
2273          $(accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"useAnnuity") = 1
2274          and accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"amorTime") < 1), 1) > 0 )
2275      "Accounting: Some transfer technologies use annuities but have no amortization time"
2276   
2277  parameter accounting_annuityFactor_transferLink(indicator,linksModel,transfer_techs,vintage);
2278  accounting_annuityFactor_transferLink(indicator,linksModelToCalc,transfer_techs,vintage)
2279      $accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"useAnnuity")
2280      =
2281      accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"interest")
2282          * (1 + accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"interest"))
2283          ** accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"amorTime")
2284      / ((1 + accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"interest"))
2285          ** accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"amorTime") - 1);
2286   
2287   
2288   
2289  abort$(sum((indicator,linksModelToCalc,transfer_techs,vintage,link_types)
2290          $(accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"useAnnuity") = 1
2291          and accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"amorTime") < 1), 1) > 0 )
2292      "Accounting: Some transfer-per-length technologies use annuities but have no amortization time"
2293   
2294  parameter accounting_annuityFactor_transferDistance(indicator,linksModel,transfer_techs,vintage,link_types);
2295  accounting_annuityFactor_transferDistance(indicator,linksModelToCalc,transfer_techs,vintage,link_types) = 1;
2296   
2297  accounting_annuityFactor_transferDistance(indicator,linksModelToCalc,transfer_techs,vintage,link_types)
2298      $accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"useAnnuity")
2299      =
2300      accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"interest")
2301          * (1 + accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"interest"))
2302          ** accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"amorTime")
2303      / ((1 + accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"interest"))
2304          ** accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"amorTime") - 1);
2305   
INCLUDE    C:\Local\REMix\framework\remix\framework\model\source\methods\mga_pre.gms
2307  * SPDX-FileCopyrightText: Copyright (c) 2023 German Aerospace Center (DLR)
2308  * SPDX-License-Identifier: BSD-3-Clause
2309   
INCLUDE    C:\Local\REMix\framework\remix\framework\model\source\methods\pareto_pre.gms
2313  * SPDX-FileCopyrightText: Copyright (c) 2023 German Aerospace Center (DLR)
2314  * SPDX-License-Identifier: BSD-3-Clause
2315   
INCLUDE    C:\Local\REMix\framework\remix\framework\model\source\postcalc\declaration.gms
2319  * SPDX-FileCopyrightText: Copyright (c) 2023 German Aerospace Center (DLR)
2320  * SPDX-License-Identifier: BSD-3-Clause
2321  * // # Output data
2322  * // This is the reference data model of the REMix output.
2323  * //
2324  * // ## Standard output
2327   
2334   
2336   
2337  set capType / "build", "decom", "total", "lowerLimit", "upperLimit", "total_degraded" /;
2338  set balanceType / "netto", "brutto", "positive", "negative", "flh" /;
2339  set profileType / "upper", "fixed", "lower" /;
2340  set r2a_has_converter_cost(indicator,nodesModel,years,techs,vintage,commodity);
2341   
2342  ** // OUTPUT: indicator_accounting | OEO_00000350:quantity value
2343  * // ### indicator_accounting
2344  * // Title: Accounting indicators Post-calculation
2345  parameter indicator_accounting(accNodesModel,accYears,indicator) "Post-calculation aggregated indicator accounting" ;
2346  * //
2347  ** // OUTPUT: indicator_accounting_ref | OEO_00000350:quantity value
2348  * // ### indicator_accounting_ref
2349  * // Title: Accounting indicators reference
2350  parameter indicator_accounting_ref(accNodesModel,accYears,indicator) "Indicator accounting optimization levels" ;
2351  * //
2352  ** // OUTPUT: indicator_accounting_comp | OEO_00000350:quantity value
2353  * // ### indicator_accounting_comp
2354  * // Title: Accounting indicators composition
2355  parameter indicator_accounting_comp(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a) "Indicator accounting with other indicator composition" ;
2356  * //
2357  ** // OUTPUT: indicator_accounting_detailed | OEO_00000350:quantity value
2358  * // ### indicator_accounting_detailed
2359  * // Title: Accounting indicators detail
2360  parameter indicator_accounting_detailed(indicator,nodesModel,years,techs) "Indicator accounting with technological composition" ;
2361  * //
2362  ** // OUTPUT: indicator_accounting_links | OEO_00000350:quantity value
2363  * // ### indicator_accounting_links
2364  * // Title: Accounting indicators per transfer link
2365  parameter indicator_accounting_links(indicator,nodesModel,nodesModel_a,linksModel,years,techs) "Indicator accounting of transfer technologies" ;
2366  * //
2367  parameter converter_ratedInput(techs,vintage,commodity);
2368  parameter converter_ratedOutput(techs,vintage,commodity);
2369  parameter converter_ratedOutput_min(nodesModel,years,techs,commodity);
2370  parameter converter_ratedOutput_max(nodesModel,years,techs,commodity);
2371   
2372  ** // OUTPUT: converter_caps | OEO_00010257:power capacity
2373  * // ### converter_caps
2374  * // Title: Coverter capacities post-calculation
2375  parameter converter_caps(accNodesModel,accYears,techs,commodity,capType) "Converter capacities, aggregated total" ;
2376  * //
2377  parameter converter_caps_ext(accNodesModel,nodesModel,accYears,years,techs,vintage,commodity,capType);
2378   
2379  ** // OUTPUT: converter_units | OEO_00000350:quantity value
2380  * // ### converter_units
2381  * // Title: Coverter units post-calculation
2382  parameter converter_units(accNodesModel,accYears,techs,vintage,capType) "Converter units" ;
2383  * //
2384  parameter converter_units_ext(accNodesModel,nodesModel,accYears,years,techs,vintage,capType);
2385   
2386  parameter max_transfer_coefficient(techs,commodity);
2387  parameter min_transfer_coefficient(techs,commodity);
2388  ** // OUTPUT: transfer_links | OEO_00000350:quantity value
2389  * // ### transfer_links
2390  * // Title: Transfer post-calculation
2391  parameter transfer_links(linksModel,years,techs,vintage,capType) "Transfer links" ;
2392  * //
2393  ** // OUTPUT: transfer_caps | OEO_00010257:power capacity
2394  * // ### transfer_caps
2395  * // Title: Transfer capacities post-calculation
2396  parameter transfer_caps(nodesModel_start,nodesModel_end,linksModel,years,techs,commodity,capType) "Transfer capacities, aggregated total" ;
2397  * //
2398  ** // OUTPUT: transfer_flows | OEO_00050019:energy amount value
2399  * // ### transfer_flows
2400  * // Title: Transfer hourly flows
2401  parameter transfer_flows(timeModel,nodesModel_start,nodesModel_end,linksModel,years,techs,commodity) "Hourly link flows" ;
2402  * //
2403  ** // OUTPUT: transfer_flows_annual | OEO_00050019:energy amount value
2404  * // ### transfer_flows_annual
2405  * // Title: Transfer annual flows
2406  parameter transfer_flows_annual(nodesModel_start,nodesModel_end,linksModel,years,techs,commodity,balanceType) "Annual link flows" ;
2407  * //
2408  ** // OUTPUT: transfer_losses | OEO_00050019:energy amount value
2409  * // ### transfer_losses
2410  * // Title: Transfer hourly losses
2411  parameter transfer_losses(timeModel,nodesModel_start,nodesModel_end,linksModel,years,techs,commodity) "Hourly link losses" ;
2412  * //
2413  ** // OUTPUT: transfer_losses_annual | OEO_00050019:energy amount value
2414  * // ### transfer_losses_annual
2415  * // Title: Transfer annual losses
2416  parameter transfer_losses_annual(nodesModel_start,nodesModel_end,linksModel,years,techs,commodity,balanceType) "Annual link losses" ;
2417  * //
2418  parameter storage_size_max(nodesModel,years,techs,commodity);
2419  parameter storage_size_min(nodesModel,years,techs,commodity);
2420  ** // OUTPUT: storage_units |  OEO_00000350:quantity value
2421  * // ### storage_units
2422  * // Title: Storage units post-calculation
2423  parameter storage_units(accNodesModel,accYears,techs,vintage,capType) "Storage units" ;
2424  * //
2425  parameter storage_units_ext(accNodesModel,nodesModel,accYears,years,techs,vintage,capType);
2426  ** // OUTPUT: storage_caps | OEO_00230000:energy storage capacity
2427  * // ### storage_caps
2428  * // Title: Storage capacities post-calculation
2429  parameter storage_caps(accNodesModel,accYears,techs,commodity,capType) "Storage capacities, aggregated total" ;
2430  * //
2431  parameter storage_caps_ext(accNodesModel,nodesModel,accYears,years,techs,vintage,commodity,capType);
2432  ** // OUTPUT: storage_level_out | OEO_00330012:energy storage content
2433  * // ### storage_level_out
2434  * // Title: Storage level
2435  parameter storage_level_out(timeModel,accNodesModel,accYears,techs,commodity) "Storage level per time step" ;
2436  * //
2437  parameter storage_level_out_ext(timeModel,accNodesModel,nodesModel,accYears,years,techs,vintage,commodity);
2438  ** // OUTPUT: storage_flows | OEO_00050019:energy amount value
2439  * // ### storage_flows
2440  * // Title: Storage hourly flows
2441  parameter storage_flows(timeModel,accNodesModel,accYears,techs,commodity) "Storage flows per time step" ;
2442  * //
2443  parameter storage_flows_ext(timeModel,accNodesModel,nodesModel,accYears,years,techs,vintage,commodity);
2444  ** // OUTPUT: storage_flows_annual | OEO_00050019:energy amount value
2445  * // ### storage_flows_annual
2446  * // Title: Storage annual flows
2447  parameter storage_flows_annual(accNodesModel,accYears,techs,commodity,balanceType) "Aggregated storage flows" ;
2448  * //
2449  ** // OUTPUT: storage_losses_out | OEO_00050019:energy amount value
2450  * // ### storage_losses_out
2451  * // Title: Storage hourly losses
2452  parameter storage_losses_out(timeModel,accNodesModel,accYears,techs,commodity) "Storage losses per time step" ;
2453  * //
2454  ** // OUTPUT: storage_losses_annual | OEO_00050019:energy amount value
2455  * // ### storage_losses_annual
2456  * // Title: Storage annual losses
2457  parameter storage_losses_annual(accNodesModel,accYears,techs,commodity,balanceType) "Aggregated storage losses" ;
2458  * //
2459  ** // OUTPUT: commodity_balance | OEO_00000350:quantity value
2460  * // ### commodity_balance
2461  * // Title: Hourly commodity balance
2462  parameter commodity_balance(timeModel,accNodesModel,accYears,techs,commodity) "Commodity balances per model hour" ;
2463  parameter commodity_balance_ext(timeModel,accNodesModel,nodesModel,accYears,years,techs,vintage,commodity);
2464  * //
2465  ** // OUTPUT: commodity_balance_annual | OEO_00000350:quantity value
2466  * // ### commodity_balance_annual
2467  * // Title: Annual commodity balance
2468  parameter commodity_balance_annual(accNodesModel,accYears,techs,commodity,balanceType) "Aggregated commodity balances" ;
2469  * //
2470  ** // OUTPUT: marginals_sourcesink_profile | OEO_00040008:marginal cost
2471  * // ### marginals_sourcesink_profile
2472  * // Title: Source-sink marginals
2473  parameter marginals_sourcesink_profile(timeModel,nodesModel,years,techs,commodity) "Source and sink flow marginal values" ;
2474  * //
2475  ** // OUTPUT: marginals_balance | OEO_00040008:marginal cost
2476  * // ### marginals_balance
2477  * // Title: Nodel balance marginals
2478  parameter marginals_balance(timeModel,nodesModel,years,commodity) "Nodal balance marginal values" ;
2479  * //
2480  ** // OUTPUT: marginals_sourcesink_sum | OEO_00040008:marginal cost
2481  * // ### marginals_sourcesink_sum
2482  * // Title: Source-sink annual marginals
2483  parameter marginals_sourcesink_sum(nodesModel,years,techs,commodity) "Annual source and sink flow marginal values" ;
2484  * //
2485  ** // OUTPUT: marginals_indicator_bounds | OEO_00040008:marginal cost
2486  * // ### marginals_indicator_bounds
2487  * // Title: Indicator bounds marginals
2488  parameter marginals_indicator_bounds(accNodesModel,accYears,indicator) "Accounting indicator marginals" ;
2489  * //
2490  * // ## REMix-AMIRIS interface output
2491  * //
2492  ** // OUTPUT: r2a_annuity_cost_converter | OEO_00040009:cost
2493  * // ### r2a_annuity_cost_converter
2494  * // Title: Converter annuity cost
2495  parameter r2a_annuity_cost_converter(indicator,accNodesModel,accYears,techs,vintage,commodity) "Annuity cost of converters" ;
2496  * //
2497  ** // OUTPUT: r2a_spec_cost_converter | OEO_00040009:cost
2498  * // ### r2a_spec_cost_converter
2499  * // Title: Converter specific cost
2500  parameter r2a_spec_cost_converter(indicator,accNodesModel,accYears,techs,vintage,commodity) "Specific cost of converters" ;
2501  * //
2502  ** // OUTPUT: r2a_spec_cost_fuel | OEO_00040009:cost
2503  * // ### r2a_spec_cost_fuel
2504  * // Title: Commodity specific cost
2505  parameter r2a_spec_cost_fuel(indicator,accNodesModel,accYears,techs,commodity) "Specific cost of commodities, used particularly for fuels" ;
2506  * //
2507  ** // OUTPUT: r2a_spec_cost_indicator | OEO_00040009:cost
2508  * // ### r2a_spec_cost_indicator
2509  * // Title: Indicator specific cost
2510  parameter r2a_spec_cost_indicator(indicator,indicator_a,accNodesModel,accYears) "Specific indicator cost" ;
2511  * //
2512  ** // OUTPUT: r2a_converter_efficiencies | OEO_00140050:efficiency value
2513  * // ### r2a_converter_efficiencies
2514  * // Title: Indicator specific cost
2515  parameter r2a_converter_efficiencies(techs,vintage,activity,commodity,commodity_a) "Converter-specific efficiency" ;
2516  * //
2517  ** // OUTPUT: r2a_converter_avail_factor | OEO_00000350:quantity value
2518  * // ### r2a_converter_avail_factor
2519  * // Title: Converter availability factor
2520  parameter r2a_converter_avail_factor(accNodesModel,accYears,techs,vintage) "Availability factor of converter technologies" ;
2521  parameter r2a_converter_avail_profile(timeModel,accNodesModel,accYears,techs,commodity,profileType) "Availability of converter technologies" ;
2522  parameter r2a_converter_avail_profile_ext(timeModel,accNodesModel,nodesModel,accYears,years,techs,vintage,commodity,profileType);
2523  * //
2524  ** // OUTPUT: r2a_storage_e2p | OEO_00000350:quantity value
2525  * // ### r2a_storage_e2p
2526  * // Title: E2P Storage
2527  parameter r2a_storage_e2p(accNodesModel,accYears,techs,vintage,commodity,capType) "Energy-to-power ratio" ;
2528  * //
2529  ** // OUTPUT: r2a_storage_selfdischarge | OEO_00000350:quantity value
2530  * // ### r2a_storage_selfdischarge
2531  * // Title: Storage self discharge rates
2532  parameter r2a_storage_selfdischarge(accNodesModel,accYears,techs,vintage,commodity);
2533   
INCLUDE    C:\Local\REMix\framework\remix\framework\model\source\loadgdx.gms
2537  * SPDX-FileCopyrightText: Copyright (c) 2023 German Aerospace Center (DLR)
2538  * SPDX-License-Identifier: BSD-3-Clause
2539   
2540  * ==== global settings ====
2542   
2544   
INCLUDE    C:\Local\REMix\framework\remix\framework\model\source\core\converter.gms
2546  * SPDX-FileCopyrightText: Copyright (c) 2023 German Aerospace Center (DLR)
2547  * SPDX-License-Identifier: BSD-3-Clause
2548   
2549  * // # core_converter
2550  * // The equations in this file describe the converters in the model.
2551   
2552  * // ## Advanced features
2553  * //
2554  * // You can find a more detailed explanation of the %curly_open%ref%curly_close%`MIP features <explanations_mip_label>`.
2555  ** // There is also a more detailed explanation on the modeling of outages at the %curly_open%ref%curly_close%`resilience section <explanations_resilience_label>`.
2556  * //
2557  * // In the following table you can see which modifications you have to make to your data to use the different features.
2558  * //
2559  * // | Feature | Modification |
2560  * // | ------ | ------ |
2561  * // | MIP expansion | The converter_tech_Parameter "mipUnits" has to be set to 1 in converter_techParam.dat for the technologies and years where descrete expansion is wanted |
2562  * // | Minimum up/downtime | The converter_tech_Parameters "minUptime" and/or "minDowntime" need to be set to the according amount of minimum time steps.Furthermore, the converter_tech_Parameter "mipDispatch" has to be set to 1 in converter_techParam.dat
2563  * // for the technologies and years where a minimum up- or downtime should be applied so that the units can be shut down. "mipUnits" will automatically be set to 1 |
2564  * // | Partial load | The converter_tech_Parameter "mipDispatch" has to be set to 1 in converter_techParam.dat for the technologies and years where you want to make use of the partial load feature. You also have to set a value to
2565  * // the converter_coefficient_parameters "minLoad" and/or "maxLoad" for the according technologies, vintages, activities and commodities. You can then for example set different "coefficient" values for each activity in converter_coefficient.dat |
2566  ** // | Outages | You have to include the converter_outageProfile.dat-file and while executing the model you have to set --method=resilience |
2567   
2568  * // ## %curly_open%ref%curly_close%`sets <remix_model_sets_label>`
2569  * //
2570  * // ### set_converter_techs.dat
2571  * // In this file all converter technologies are listed that can be used within your model.
2572  * //
2573  * // ### set_activities.dat
2574  * // All modes with which the converter technologies can be operated need to be added here.
2575  * // Examples: Charge (for the charging mode of a storage), Powergen (for the mode in which a converter produces electricity), Curtailment (for the mode in which a renewable power plant is shut down), …
2576  * // If you would like to use the partial load feature, all activity modes that should be available for this feature need to be defined here as well.
2577  * //
2578  * // ### set_commodities.dat
2579  * // In this file all commodities are listed that can be used and converted by the converter technologies.
2580  * // Examples: Electricity, Coal, Biomass, Hydrogen, …
2581   
2582  * // ## Variables
2583  * // {special_table_converter_variables}
8526   
8527  * ==== loading units from gdx file ====
8528   
8529  * Load units from gdx file
8531   
8532  * ==== calculation of mappings ====
8533   
8534  * Technologies with a lifeTime > 0 are available
8535  set converter_availTech(nodesModel,years,converter_techs,vintage);
8536  converter_availTech(nodesModel,years,converter_techs,vintage)
8537      $(vintage.val = smax(vintage_a$(vintage_a.val <= years.val
8538          and converter_techParam(converter_techs,vintage_a,"lifeTime") > 0), vintage_a.val)) = yes;
8539   
8540  * Technologies to optimize become unavailable if they have an unitsUpperLimit of 0
8541  converter_availTech(nodesModel,years,converter_techs,vintage)
8542      $(yearsToCalc(years) and converter_capacityParam(nodesModel,years,converter_techs,"unitsUpperLimit") = 0 ) = no;
8543   
8544  * Technologies already built become unavailable if they have an unitsBuild of 0
8545  converter_availTech(nodesModel,years,converter_techs,vintage)
8546      $( ( not yearsToCalc(years)) and converter_capacityParam(nodesModel,years,converter_techs,"unitsBuild") = 0 ) = no;
8547   
8548  * Used technologies are available technologies over their technical lifeTime
8549  set converter_usedTech(nodesModel,years,converter_techs,vintage);
8550  converter_usedTech(nodesModel,years,converter_techs,vintage)
8551      $(vintage.val <= years.val
8552          and years.val < smax(years_a$converter_availTech(nodesModel,years_a,converter_techs,vintage),
8553                                  years_a.val + converter_techParam(converter_techs,vintage,"lifeTime"))
8554          ) = yes;
8555   
8556  * Technologies have to be decomissioned in the interval of first avail + lifetime to last avail + lifetime
8557  set converter_decomTech(nodesModel,years,converter_techs,vintage);
8558  converter_decomTech(nodesModel,years,converter_techs,vintage)
8559    $(sum(years_a$converter_usedTech(nodesModel,years_a,converter_techs,vintage), 1)
8560      and sum(yearsToCalc
8561        $(sameas(years, yearsToCalc)
8562          and yearsToCalc.val >= smin(years_a$converter_availTech(nodesModel,years_a,converter_techs,vintage), years_a.val) + converter_techParam(converter_techs,vintage,"lifeTime")
8563          and yearsToCalc.val <= smax(years_a$converter_availTech(nodesModel,years_a,converter_techs,vintage), years_a.val) + converter_techParam(converter_techs,vintage,"lifeTime")), 1))
8564    = yes;
8565   
8566  * Extend the decom frame to the year after the last year of usedTech
8567  converter_decomTech(nodesModel,yearsToCalc,converter_techs,vintage)
8568    $(converter_usedTech(nodesModel,yearsToCalc-1,converter_techs,vintage)
8569      and converter_decomTech(nodesModel,yearsToCalc-1,converter_techs,vintage))
8570    = yes;
8571   
8572  * Mapping for used activities and commodities
8573  set converter_usedActCom(converter_techs,vintage,activity,commodity);
8574  option converter_usedActCom < converter_coefficient;
8575   
8576  set converter_usedAct(converter_techs,vintage,activity);
8577  option converter_usedAct < converter_usedActCom;
8578   
8579  set converter_usedCom(converter_techs,vintage,commodity);
8580  option converter_usedCom < converter_usedActCom;
8581   
8582  set converter_usedTechAct(nodesModel,years,converter_techs,vintage,activity);
8583  converter_usedTechAct(nodesModel,years,converter_techs,vintage,activity)
8584      $(converter_usedTech(nodesModel,years,converter_techs,vintage)
8585          and converter_usedAct(converter_techs,vintage,activity))
8586      = yes;
8587   
8588  set converter_useRampPos(nodesModel,years,converter_techs,vintage);
8589  converter_useRampPos(nodesModelToCalc,yearsToCalc,converter_techs,vintage)
8590    $(sum(indicator$accounting_converterStartup(indicator,nodesModelToCalc,converter_techs,vintage,"perRamp"), 1)
8591      or sum(indicator$accounting_converterStartup(indicator,nodesModelToCalc,converter_techs,vintage,"perRampPos"), 1))
8592    = 1;
8593   
8594  set converter_useRampNeg(nodesModel,years,converter_techs,vintage);
8595  converter_useRampNeg(nodesModelToCalc,yearsToCalc,converter_techs,vintage)
8596    $(sum(indicator$accounting_converterStartup(indicator,nodesModelToCalc,converter_techs,vintage,"perRamp"), 1)
8597      or sum(indicator$accounting_converterStartup(indicator,nodesModelToCalc,converter_techs,vintage,"perRampNeg"), 1))
8598    = 1;
8599   
8600   
8601  * ==== aggregation of profiles ====
8602   
8603  * derive upper and lower profiles then aggregate
8604  set converter_activity_hasProfileIn(nodesData,years,converter_techs,pc_converter_activityProfile);
8605  option converter_activity_hasProfileIn < converter_activityProfileIn;
8606   
8607  set converter_activity_hasProfile(nodesModel,years,converter_techs,pc_converter_activityProfile);
8608  converter_activity_hasProfile(nodesModelToCalc,yearsToCalc,converter_techs,pc_converter_activityProfile)
8609      = sum(nodesData$aggregateNodesModel(nodesData,nodesModelToCalc),
8610              converter_activity_hasProfileIn(nodesData,yearsToCalc,converter_techs,pc_converter_activityProfile));
8611   
8612  set converter_coefficient_hasProfileIn(nodesData,years,converter_techs,vintage,activity,commodity);
8613  option converter_coefficient_hasProfileIn < converter_coefficientProfileIn;
8614   
8615  set converter_coefficient_hasProfile(nodesModel,years,converter_techs,vintage,activity,commodity);
8616  converter_coefficient_hasProfile(nodesModelToCalc,yearsToCalc,converter_techs,vintage,activity,commodity)
8617      = sum(nodesData$aggregateNodesModel(nodesData,nodesModelToCalc),
8618              converter_coefficient_hasProfileIn(nodesData,yearsToCalc,converter_techs,vintage,activity,commodity));
8619   
8620  * aagregate time dimension
8621  parameter converter_activityProfileIn_aggTime(timeModel,nodesData,yearsToCalc,converter_techs,pc_converter_activityProfile);
8622  converter_activityProfileIn_aggTime(timeModelToCalc,nodesData,yearsToCalc,converter_techs,pc_converter_activityProfile)
8623    $converter_activity_hasProfileIn(nodesData,yearsToCalc,converter_techs,pc_converter_activityProfile)
8624    = sum(timeData$timeMapping(timeData,timeModelToCalc),
8625            converter_activityProfileIn(timeData,nodesData,yearsToCalc,converter_techs,pc_converter_activityProfile)
8626            / timeLength(timeModelToCalc));
8627  option clear = converter_activityProfileIn;
8628   
8629  * weighted average for a real sum of units upper limits, plain average if one region has an upper limit of inf
8630  parameter converter_activityProfile(timeModel,nodesModel,years,converter_techs,vintage,pc_converter_activityProfile);
8631  converter_activityProfile(timeModelToCalc,converter_usedTech(nodesModelToCalc,yearsToCalc,converter_techs,vintage),"upper")
8632      = converter_techParam(converter_techs,vintage,"activityUpperLimit");
8633  converter_activityProfile(timeModelToCalc,converter_usedTech(nodesModelToCalc,yearsToCalc,converter_techs,vintage),"lower")
8634      = converter_techParam(converter_techs,vintage,"activityLowerLimit");
8635   
8636   
8637  set converter_finiteUnitLimit(nodesModelToCalc,yearsToCalc,converter_techs);
8638  converter_finiteUnitLimit(nodesModelToCalc,yearsToCalc,converter_techs)
8639      = sum(nodesData$aggregateNodesModel(nodesData,nodesModelToCalc), converter_capacityParamIn(nodesData,yearsToCalc,converter_techs,"unitsUpperLimit")) > 0
8640          and sum(nodesData$aggregateNodesModel(nodesData,nodesModelToCalc), converter_capacityParamIn(nodesData,yearsToCalc,converter_techs,"unitsUpperLimit")) < inf;
8641   
8642  set converter_infiniteUnitLimit(nodesModelToCalc,yearsToCalc,converter_techs);
8643  converter_infiniteUnitLimit(nodesModelToCalc,yearsToCalc,converter_techs)
8644      = sum(nodesData$aggregateNodesModel(nodesData,nodesModelToCalc), converter_capacityParamIn(nodesData,yearsToCalc,converter_techs,"unitsUpperLimit")) = inf;
8645   
8646  converter_activityProfile(timeModelToCalc,converter_usedTech(nodesModelToCalc,yearsToCalc,converter_techs,vintage),pc_converter_activityProfile)
8647      $(converter_activity_hasProfile(nodesModelToCalc,yearsToCalc,converter_techs,pc_converter_activityProfile)
8648          and converter_finiteUnitLimit(nodesModelToCalc,yearsToCalc,converter_techs))
8649      = sum(nodesData$(aggregateNodesModel(nodesData,nodesModelToCalc)
8650                  and converter_capacityParamIn(nodesData,yearsToCalc,converter_techs,"unitsUpperLimit") < inf ),
8651                converter_activityProfileIn_aggTime(timeModelToCalc,nodesData,yearsToCalc,converter_techs,pc_converter_activityProfile)
8652                * converter_capacityParamIn(nodesData,yearsToCalc,converter_techs,"unitsUpperLimit"))
8653      / sum(nodesData$aggregateNodesModel(nodesData,nodesModelToCalc),
8654              converter_capacityParamIn(nodesData,yearsToCalc,converter_techs,"unitsUpperLimit"));
8655   
8656  converter_activityProfile(timeModelToCalc,converter_usedTech(nodesModelToCalc,yearsToCalc,converter_techs,vintage),pc_converter_activityProfile)
8657      $(converter_activity_hasProfile(nodesModelToCalc,yearsToCalc,converter_techs,pc_converter_activityProfile)
8658          and converter_infiniteUnitLimit(nodesModelToCalc,yearsToCalc,converter_techs))
8659      = sum(nodesData$(aggregateNodesModel(nodesData,nodesModelToCalc)
8660                  and converter_capacityParamIn(nodesData,yearsToCalc,converter_techs,"unitsUpperLimit") = inf),
8661                converter_activityProfileIn_aggTime(timeModelToCalc,nodesData,yearsToCalc,converter_techs,pc_converter_activityProfile)
8662                * converter_capacityParamIn(nodesData,yearsToCalc,converter_techs,"unitsUpperLimit"))
8663      / sum(nodesData$(aggregateNodesModel(nodesData,nodesModelToCalc)
8664                      and converter_capacityParamIn(nodesData,yearsToCalc,converter_techs,"unitsUpperLimit") = inf ),
8665              1);
8666  option clear = converter_activityProfileIn_aggTime;
8667   
8668  * for fixed profiles overwrite upper and lower profile
8669  converter_activityProfile(timeModelToCalc,nodesModelToCalc,yearsToCalc,converter_techs,vintage,"lower")
8670      $converter_activity_hasProfile(nodesModelToCalc,yearsToCalc,converter_techs,"fixed")
8671      = converter_activityProfile(timeModelToCalc,nodesModelToCalc,yearsToCalc,converter_techs,vintage,"fixed");
8672   
8673  converter_activityProfile(timeModelToCalc,nodesModelToCalc,yearsToCalc,converter_techs,vintage,"upper")
8674      $converter_activity_hasProfile(nodesModelToCalc,yearsToCalc,converter_techs,"fixed")
8675      = converter_activityProfile(timeModelToCalc,nodesModelToCalc,yearsToCalc,converter_techs,vintage,"fixed");
8676   
8677   
8678  * weighted average for a real sum of units upper limits, plain average if one region has an upper limit of inf
8679  parameter converter_coefficientProfile(timeModel,nodesModel,years,converter_techs,vintage,activity,commodity);
8680  converter_coefficientProfile(timeModelToCalc,converter_usedTechAct(nodesModelToCalc,yearsToCalc,converter_techs,vintage,activity),commodity)
8681      = converter_coefficient(converter_techs,vintage,activity,commodity,"coefficient");
8682   
8683  converter_coefficientProfile(timeModelToCalc,converter_usedTechAct(nodesModelToCalc,yearsToCalc,converter_techs,vintage,activity),commodity)
8684      $( converter_coefficient_hasProfile(nodesModelToCalc,yearsToCalc,converter_techs,vintage,activity,commodity)
8685          and converter_finiteUnitLimit(nodesModelToCalc,yearsToCalc,converter_techs) )
8686      = sum(nodesData$aggregateNodesModel(nodesData,nodesModelToCalc),
8687            sum(timeData$timeMapping(timeData,timeModelToCalc),
8688                    converter_coefficientProfileIn(timeData,nodesData,yearsToCalc,converter_techs,vintage,activity,commodity))
8689                / timeLength(timeModelToCalc)
8690              * converter_capacityParamIn(nodesData,yearsToCalc,converter_techs,"unitsUpperLimit") )
8691      / sum(nodesData$aggregateNodesModel(nodesData,nodesModelToCalc),
8692              converter_capacityParamIn(nodesData,yearsToCalc,converter_techs,"unitsUpperLimit"));
8693   
8694  converter_coefficientProfile(timeModelToCalc,converter_usedTechAct(nodesModelToCalc,yearsToCalc,converter_techs,vintage,activity),commodity)
8695      $( converter_coefficient_hasProfile(nodesModelToCalc,yearsToCalc,converter_techs,vintage,activity,commodity)
8696          and converter_infiniteUnitLimit(nodesModelToCalc,yearsToCalc,converter_techs))
8697      = sum(nodesData$(aggregateNodesModel(nodesData,nodesModelToCalc)
8698                      and converter_capacityParamIn(nodesData,yearsToCalc,converter_techs,"unitsUpperLimit") = inf ),
8699            sum(timeData$timeMapping(timeData,timeModelToCalc),
8700                    converter_coefficientProfileIn(timeData,nodesData,yearsToCalc,converter_techs,vintage,activity,commodity))
8701                / timeLength(timeModelToCalc))
8702      / sum(nodesData$(aggregateNodesModel(nodesData,nodesModelToCalc)
8703                      and converter_capacityParamIn(nodesData,yearsToCalc,converter_techs,"unitsUpperLimit") = inf ), 1);
8704   
8705  * ==== prepare partial load behavior parameters ====
8706   
8707  * set disabled max load requirements to 1 to avoid excessive logical expressions later on
8708  alias(commodity, com);
8709  converter_coefficient(converter_techs,vintage,activity,commodity,"maxLoad")
8710      $((converter_coefficient(converter_techs,vintage,activity,commodity,"maxLoad") = 0)
8711        and converter_usedAct(converter_techs,vintage,activity))
8712      = 1;
8713   
8714  * indicate that at least one activity of a technology makes use of partial load behavior
8715  set converter_hasMaxLoad(converter_techs,vintage);
8716  converter_hasMaxLoad(converter_techs,vintage)
8717    = smin((activity,commodity)$converter_usedAct(converter_techs,vintage,activity),
8718              converter_coefficient(converter_techs,vintage,activity,commodity,"maxLoad")) < 1;
8719   
8720  set converter_hasMinLoad(converter_techs,vintage);
8721  converter_hasMinLoad(converter_techs,vintage)
8722    = smax((activity,commodity)$converter_usedAct(converter_techs,vintage,activity),
8723              converter_coefficient(converter_techs,vintage,activity,commodity,"minLoad")) > 0;
8724   
8725  set converter_hasConstantFluxInActivity(converter_techs,vintage);
8726  converter_hasConstantFluxInActivity(converter_techs,vintage)
8727    = sum((activity,commodity)$converter_usedAct(converter_techs,vintage,activity),
8728                          abs(converter_coefficient(converter_techs,vintage,activity,commodity,"constant"))) > 0;
8729   
8730  * setting up a requirements parameter to avoid having to cycle through commodities in equations
8731  set pc_converter_activityRequirements
8732      /
8733      minLoad             "Lower profile for converter activity"
8734      maxLoad             "Upper profile for converter activity"
8735      /;
8736  parameter converter_activityRequirements(converter_techs,vintage,activity,pc_converter_activityRequirements);
8737  converter_activityRequirements(converter_techs,vintage,activity,"minLoad")
8738    = smax(commodity, converter_coefficient(converter_techs,vintage,activity,commodity,"minLoad"));
8739  converter_activityRequirements(converter_techs,vintage,activity,"maxLoad")
8740    = smin(commodity, converter_coefficient(converter_techs,vintage,activity,commodity,"maxLoad"));
8741   
8742  * ==== activate MIP units for MIP dispatch or partial load technologies ====
8743   
8744  set converter_hasMinUptime(converter_techs,vintage);
8745  converter_hasMinUptime(converter_techs,vintage)
8746    $(converter_techParam(converter_techs,vintage,"minUptime")
8747      and converter_techParam(converter_techs,vintage,"mipDispatch"))
8748    = yes;
8749   
8750  set converter_hasMinDowntime(converter_techs,vintage);
8751  converter_hasMinDowntime(converter_techs,vintage)
8752    $(converter_techParam(converter_techs,vintage,"minDowntime")
8753      and converter_techParam(converter_techs,vintage,"mipDispatch"))
8754    = yes;
8755   
8756  * require integer unit counts if online state is to be tracked
8757  converter_techParam(converter_techs,vintage,"mipUnits")
8758      $(converter_techParam(converter_techs,vintage,"mipDispatch")
8759        or converter_hasMinLoad(converter_techs, vintage)
8760        or converter_hasMaxLoad(converter_techs, vintage)
8761        or converter_hasConstantFluxInActivity(converter_techs,vintage))
8762      = 1;
8763   
8764  * ==== floor mip converter units to integer values ====
8765  converter_capacityParam(nodesModelToCalc,yearsToCalc,converter_techs,"unitsLowerLimit")
8766      $sum(vintage, converter_techParam(converter_techs,vintage,"mipUnits"))
8767      = floor(converter_capacityParam(nodesModelToCalc,yearsToCalc,converter_techs,"unitsLowerLimit"));
8768  converter_capacityParam(nodesModelToCalc,yearsToCalc,converter_techs,"unitsUpperLimit")
8769      $sum(vintage, converter_techParam(converter_techs,vintage,"mipUnits"))
8770      = ceil(converter_capacityParam(nodesModelToCalc,yearsToCalc,converter_techs,"unitsUpperLimit"));
8771   
8772  * ==== scalars and sets for minUptime and minDowntime ====
8773   
8774  scalar converter_maxUptimeReq;
8775  converter_maxUptimeReq = smax((converter_techs,vintage), converter_techParam(converter_techs,vintage,"minUptime"));
8776  set uptimeSearchRange(timeModelToCalc);
8777  uptimeSearchRange(timeModelToCalc) = ord(timeModelToCalc) <= converter_maxUptimeReq;
8778   
8779  scalar converter_maxDowntimeReq;
8780  converter_maxDowntimeReq = smax((converter_techs,vintage), converter_techParam(converter_techs,vintage,"minDowntime"));
8781  set downtimeSearchRange(timeModelToCalc);
8782  downtimeSearchRange(timeModelToCalc) = ord(timeModelToCalc) <= converter_maxDowntimeReq;
8783   
8784  * ==== definition of variables ====
8785   
8786  * Initialise variables for unitsBuild
8787  converter_unitsBuild.l(nodesModel,years,converter_techs,vintage)
8788      $converter_availTech(nodesModel,years,converter_techs,vintage)
8789      = converter_capacityParam(nodesModel,years,converter_techs,"unitsBuild");
8790  converter_unitsBuild.lo(nodesModel,yearsToCalc,converter_techs,vintage)
8791      $converter_availTech(nodesModel,yearsToCalc,converter_techs,vintage)
8792      = converter_unitsBuild.l(nodesModel,yearsToCalc,converter_techs,vintage);
8793  converter_unitsBuild.fx(nodesModel,years,converter_techs,vintage)
8794      $converter_capacityParam(nodesModel,years,converter_techs,"noExpansion")
8795      = converter_unitsBuild.l(nodesModel,years,converter_techs,vintage);
8796   
8797  * Initialise variables for unitsDecom
8798  converter_unitsDecom.l(nodesModel,years,converter_techs,vintage)
8799    $(converter_decomTech(nodesModel,years,converter_techs,vintage)
8800      and years.val < sum(yearsToCalc$(ord(yearsToCalc) = 1), yearsToCalc.val))
8801    = sum((years_a,years_aa)$(sameas(years-1, years_aa)
8802                        and years_a.val > years_aa.val - converter_techParam(converter_techs,vintage,'lifeTime')
8803                        and years_a.val <= years.val - converter_techParam(converter_techs,vintage,'lifeTime')
8804                        and converter_availTech(nodesModel,years_a,converter_techs,vintage)),
8805          converter_unitsBuild.l(nodesModel,years_a,converter_techs,vintage));
8806   
8807  converter_unitsDecom.l(nodesModel,yearsToCalc,converter_techs,vintage)
8808    $converter_decomTech(nodesModel,yearsToCalc,converter_techs,vintage)
8809    = sum(years$
8810          (years.val < sum(yearsToCalc_a$(ord(yearsToCalc_a) = 1), yearsToCalc_a.val)
8811            and converter_availTech(nodesModel,years,converter_techs,vintage)
8812            and years.val > sum(years_a$sameas(years_a, yearsToCalc-1), years_a.val) - converter_techParam(converter_techs,vintage,'lifeTime')
8813            and years.val <= yearsToCalc.val - converter_techParam(converter_techs,vintage,'lifeTime')),
8814        converter_unitsBuild.l(nodesModel,years,converter_techs,vintage))
8815      + sum(yearsToCalc_a$
8816          (yearsToCalc_a.val < sum(yearsToCalc_aa$(ord(yearsToCalc_aa) > 1), yearsToCalc_a.val)
8817            and converter_availTech(nodesModel,yearsToCalc_a,converter_techs,vintage)
8818            and yearsToCalc_a.val > sum(years_a$sameas(years_a, yearsToCalc-1), years_a.val) - converter_techParam(converter_techs,vintage,'lifeTime')
8819            and yearsToCalc_a.val <= yearsToCalc.val - converter_techParam(converter_techs,vintage,'lifeTime')),
8820        converter_unitsBuild.l(nodesModel,yearsToCalc_a,converter_techs,vintage));
8821        ;
8822   
8823  converter_unitsDecom.lo(nodesModel,yearsToCalc,converter_techs,vintage)
8824      $(converter_usedTech(nodesModel,yearsToCalc,converter_techs,vintage)
8825          and not converter_techParam(converter_techs,vintage,"freeDecom"))
8826      = converter_unitsDecom.l(nodesModel,yearsToCalc,converter_techs,vintage)
8827   
8828  * Calculate planned unit expansion
8829  parameter converter_unitsPlanned(nodesModel,years,converter_techs,vintage);
8830  converter_unitsPlanned(nodesModel,years,converter_techs,vintage) = 0;
8831  loop(years,
8832    converter_unitsPlanned(nodesModel,years,converter_techs,vintage)
8833      =
8834      converter_unitsPlanned(nodesModel,years-1,converter_techs,vintage)
8835          $converter_usedTech(nodesModel,years-1,converter_techs,vintage)
8836      + converter_unitsBuild.l(nodesModel,years,converter_techs,vintage)
8837          $converter_availTech(nodesModel,years,converter_techs,vintage)
8838      - converter_unitsDecom.l(nodesModel,years,converter_techs,vintage)
8839          $converter_usedTech(nodesModel,years,converter_techs,vintage);
8840  );
8841   
8842  * Set initial state for planned units
8843  converter_unitsTotal.l(nodesModel,years,converter_techs,vintage)
8844    = converter_unitsPlanned(nodesModel,years,converter_techs,vintage)
8845   
8846  * Calculate if planned unit expansion is bounded by upper and lower limits
8847  set converter_unitBoundsFixed(nodesModel,years,converter_techs);
8848  converter_unitBoundsFixed(nodesModel,years,converter_techs)
8849    $(sum(vintage$converter_usedTech(nodesModel,years,converter_techs,vintage),
8850          converter_unitsPlanned(nodesModel,years,converter_techs,vintage))
8851      = converter_capacityParam(nodesModel,years,converter_techs,"unitsUpperLimit")
8852    and sum(vintage$converter_usedTech(nodesModel,years,converter_techs,vintage),
8853          converter_unitsPlanned(nodesModel,years,converter_techs,vintage))
8854      = converter_capacityParam(nodesModel,years,converter_techs,"unitsLowerLimit"))
8855    = yes;
8856   
8857  * Fix unitsBuild, unitsDecom, unitsTotal if levels are predetermined by upper and lower limits
8858  converter_unitsBuild.fx(nodesModel,years,converter_techs,vintage)
8859    $(converter_availTech(nodesModel,years,converter_techs,vintage)
8860      and converter_unitBoundsFixed(nodesModel,years,converter_techs))
8861    = converter_unitsBuild.l(nodesModel,years,converter_techs,vintage);
8862  converter_unitsDecom.fx(nodesModel,years,converter_techs,vintage)
8863    $(converter_usedTech(nodesModel,years,converter_techs,vintage)
8864      and converter_unitBoundsFixed(nodesModel,years,converter_techs))
8865    = converter_unitsDecom.l(nodesModel,years,converter_techs,vintage);
8866  converter_unitsTotal.fx(nodesModel,years,converter_techs,vintage)
8867    $(converter_usedTech(nodesModel,years,converter_techs,vintage)
8868      and converter_unitBoundsFixed(nodesModel,years,converter_techs))
8869    = converter_unitsTotal.l(nodesModel,years,converter_techs,vintage);
8870   
8871  converter_unitsOnline_MIP.up(timeModelToCalc,nodesModel,years,converter_techs,vintage)
8872      $(converter_usedTech(nodesModel,years,converter_techs,vintage)
8873        and converter_techParam(converter_techs,vintage,"mipDispatch") = 1)
8874      = converter_capacityParam(nodesModel,years,converter_techs,"unitsUpperLimit");
8875   
8876  converter_unitsTotal_MIP.up(nodesModel,years,converter_techs,vintage)
8877      $(converter_usedTech(nodesModel,years,converter_techs,vintage)
8878        and converter_techParam(converter_techs,vintage,"mipUnits") = 1)
8879      = converter_capacityParam(nodesModel,years,converter_techs,"unitsUpperLimit");
8880   
8881  converter_unitsUsingActivity_MIP.up(timeModelToCalc,nodesModel,years,converter_techs,vintage,activity)
8882      $(converter_usedTech(nodesModel,years,converter_techs,vintage)
8883        and (converter_hasMinLoad(converter_techs, vintage)
8884              or converter_hasMaxLoad(converter_techs, vintage)))
8885      = converter_capacityParam(nodesModel,years,converter_techs,"unitsUpperLimit");
8886   
8887  * Add parameter for fixing capacities during myopic runs
8888  parameter converter_unitsDelta(nodesModel,years,converter_techs);
8889   
8890  * ==== declaration of equations ====
8891   
8892  equations
8893    Eq_converter_unitsBalance(nodesModel,years,converter_techs,vintage
8894      ) "Ensures the units balance over the planning period."
8895    Eq_converter_unitsFixedDecom(nodesModel,years,converter_techs,vintage
8896      ) "Restricts the fixed decommissioning of units over the planning period."
8897    Eq_converter_unitsFreeDecom(nodesModel,years,converter_techs,vintage
8898      ) "Restricts the free decommissioning of units over the planning period."
8899    Eq_converter_unitsUpperLimit(nodesModel,years,converter_techs
8900      ) "Upper bound for the total number of units."
8901    Eq_converter_unitsLowerLimit(nodesModel,years,converter_techs
8902      ) "Lower bound for the total number of units."
8903    Eq_converter_unitsFixedLimit(nodesModel,years,converter_techs
8904      ) "Fixed bound for the total number of units."
8905    Eq_converter_unitsTotalMIP(nodesModel,years,converter_techs,vintage
8906      ) "Fixes the total number of units to the corresponding integer variable."
8907    Eq_converter_unitsOnlineMIP(timeModel,nodesModel,years,converter_techs,vintage
8908      ) "Fixes the number of online units to the corresponding integer variable."
8909   
8910    Eq_converter_activityLowerLimit(timeModel,nodesModel,years,converter_techs,vintage
8911      ) "Lower limit on the activity."
8912    Eq_converter_activityUpperLimit(timeModel,nodesModel,years,converter_techs,vintage
8913      ) "Upper limit on the activity."
8914   
8915    Eq_converter_activityFixedLimit(timeModel,nodesModel,years,converter_techs,vintage
8916      ) "Fixed limit on the activity."
8917    Eq_converter_rampPos(timeModel,nodesModel,years,converter_techs,vintage
8918      ) "Positive ramping of unit activity."
8919    Eq_converter_rampNeg(timeModel,nodesModel,years,converter_techs,vintage
8920      ) "Negative ramping of unit activity."
8921    Eq_converter_rampLimit(timeModel,nodesModel,years,converter_techs,vintage
8922      ) "Restrict ramping up of unit activity."
8923   
8924    Eq_converter_unitsOnline(timeModel,nodesModel,years,converter_techs,vintage
8925      ) "Set online units to total number of operational units."
8926    Eq_converter_unitsOnlineUC(timeModel,nodesModel,years,converter_techs,vintage
8927      ) "Allow shutting down units."
8928    Eq_converter_activityStartups(timeModel,nodesModel,years,converter_techs,vintage
8929      ) "Variable counting the number of unit startups."
8930    Eq_converter_activityShutdowns(timeModel,nodesModel,years,converter_techs,vintage
8931      ) "Variable tracking the number of unit shutdowns."
8932    Eq_converter_limitStartups(nodesModel,years,converter_techs,vintage
8933      ) "Limit the number of startup cycles a unit can perform."
8934    Eq_converter_minUptime(timeModel,nodesModel,years,converter_techs,vintage
8935      ) "Require recently started units to remain online for their respective minimum uptime."
8936    Eq_converter_minDowntime(timeModel,nodesModel,years,converter_techs,vintage
8937      ) "Require recently shut down units to remain offline for their respective minimum downtime."
8938    Eq_converter_activityUpperLimitDetailedPartLoadMinReq(timeModel,nodesModel,years,converter_techs,vintage,activity
8939      ) "Limit activity coefficients of activities with a given load requirement or stricter to the number of units in such modes."
8940    Eq_converter_activityUpperLimitDetailedPartLoadMaxReq(timeModel,nodesModel,years,converter_techs,vintage,activity
8941      ) "Limit activity coefficients of activities with a given load requirement or stricter to the number of units in such modes."
8942    Eq_converter_activityLowerLimitDetailedPartLoadMinReq(timeModel,nodesModel,years,converter_techs,vintage,activity
8943      ) "Enforce sufficient activity coefficients of activities to justify all active modes."
8944    Eq_converter_noOnlineIdle(timeModel,nodesModel,years,converter_techs,vintage
8945      ) "Prevent the circumvention of requirements by keeping units online without using any modes."
8946    Eq_converter_noOnlineIdleDetailedPartLoad(timeModel,nodesModel,years,converter_techs,vintage
8947      ) "Prevent the circumvention of requirements by keeping units online without using any modes. Allow more than one mode activation per unit."
8948    Eq_converter_activityUpperLimitPartLoad(timeModel,nodesModel,years,converter_techs,vintage,activity
8949      ) "Limit usage of an activity to corresponding units."
8950    Eq_converter_activityLowerLimitPartLoad(timeModel,nodesModel,years,converter_techs,vintage,activity
8951      ) "Limit usage of an activity to corresponding units."
8952    Eq_converter_activityModeLimit(timeModel,nodesModel,years,converter_techs,vintage,activity
8953      ) "Limit the number of units in one particular mode to the number of operational units."
8954    ;
8955   
8956  * ==== equation definition ====
8957  * // ## Equations
8958  * // ### Converter Units Balance
8959  * // Ensures that the total units are consistent with the built and decommissioned units.
8960  * // {Eq_converter_unitsBalance}
8961  Eq_converter_unitsBalance(nodesModelSel,yearsSel,converter_techs,vintage)
8962      $((converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
8963            or sum(years$sameas(years,yearsSel), converter_usedTech(nodesModelSel,years-1,converter_techs,vintage)))
8964          and not converter_unitBoundsFixed(nodesModelSel,yearsSel,converter_techs))
8965      ..
8966      converter_unitsTotal(nodesModelSel,yearsSel,converter_techs,vintage)
8967      =e=
8968      sum(yearsToCalc$(ord(yearsToCalc) = 1 and sameas(yearsToCalc, yearsSel)),
8969        sum(years$sameas(years, yearsToCalc),
8970          converter_unitsTotal(nodesModelSel,years-1,converter_techs,vintage)
8971            $converter_usedTech(nodesModelSel,years-1,converter_techs,vintage)))
8972      + sum((yearsToCalc)$(ord(yearsToCalc) > 1 and sameas(yearsToCalc, yearsSel)),
8973        converter_unitsTotal(nodesModelSel,yearsToCalc-1,converter_techs,vintage)
8974          $converter_usedTech(nodesModelSel,yearsToCalc-1,converter_techs,vintage))
8975      + converter_unitsBuild(nodesModelSel,yearsSel,converter_techs,vintage)
8976          $converter_availTech(nodesModelSel,yearsSel,converter_techs,vintage)
8977      - converter_unitsDecom(nodesModelSel,yearsSel,converter_techs,vintage)
8978          $converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage);
8979   
8980  * // ### Converter Units Fixed Decommission
8981  * // Restricts the fixed decommissioning of units over the planning period.
8982  * // {Eq_converter_unitsFixedDecom}
8983  Eq_converter_unitsFixedDecom(nodesModelSel,yearsSel,converter_techs,vintage)
8984      $(converter_decomTech(nodesModelSel,yearsSel,converter_techs,vintage)
8985          and not converter_techParam(converter_techs,vintage,"freeDecom") = 1
8986          and not converter_unitBoundsFixed(nodesModelSel,yearsSel,converter_techs))
8987      ..
8988      converter_unitsDecom(nodesModelSel,yearsSel,converter_techs,vintage)
8989      =e=
8990      sum(years$
8991          (converter_availTech(nodesModelSel,years,converter_techs,vintage)
8992            and years.val > sum(yearsToCalc$sameas(yearsToCalc+1, yearsSel), yearsToCalc.val) - converter_techParam(converter_techs,vintage,'lifeTime')
8993            and years.val <= yearsSel.val - converter_techParam(converter_techs,vintage,'lifeTime')),
8994        converter_unitsBuild(nodesModelSel,years,converter_techs,vintage));
8995   
8996  * // ### Converter Units Free Decommission
8997  * // Restricts the free decommissioning of units over the planning period.
8998  * // {Eq_converter_unitsFreeDecom}
8999  Eq_converter_unitsFreeDecom(nodesModelSel,yearsSel,converter_techs,vintage)
9000      $((converter_decomTech(nodesModelSel,yearsSel,converter_techs,vintage)
9001          or converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage))
9002          and converter_techParam(converter_techs,vintage,"freeDecom") = 1)
9003      ..
9004      sum(years$
9005            ((converter_decomTech(nodesModelSel,years,converter_techs,vintage)
9006              or converter_usedTech(nodesModelSel,years,converter_techs,vintage))
9007              and years.val < sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)),
9008          converter_unitsDecom(nodesModelSel,years,converter_techs,vintage))
9009      + sum(yearsToCalc$
9010            ((converter_decomTech(nodesModelSel,yearsToCalc,converter_techs,vintage)
9011              or converter_usedTech(nodesModelSel,yearsToCalc,converter_techs,vintage))
9012              and yearsToCalc.val >= sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
9013              and yearsToCalc.val <= yearsSel.val),
9014          converter_unitsDecom(nodesModelSel,yearsToCalc,converter_techs,vintage))
9015      =g=
9016      sum(years$
9017            (converter_availTech(nodesModelSel,years,converter_techs,vintage)
9018              and years.val < sum(yearsToCalc$(ord(yearsToCalc)=1), yearsToCalc.val) - converter_techParam(converter_techs,vintage,'lifeTime')),
9019          converter_unitsBuild(nodesModelSel,years,converter_techs,vintage))
9020      + sum(yearsToCalc$
9021            (converter_availTech(nodesModelSel,yearsToCalc,converter_techs,vintage)
9022              and yearsToCalc.val >= sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
9023              and yearsToCalc.val <= yearsSel.val - converter_techParam(converter_techs,vintage,'lifeTime')),
9024          converter_unitsBuild(nodesModelSel,yearsToCalc,converter_techs,vintage));
9025   
9026  * // ### Converter Units Upper Limit
9027  * // Upper bound for the total number of units.
9028  * // {Eq_converter_unitsUpperLimit}
9029  Eq_converter_unitsUpperLimit(nodesModelSel,yearsSel,converter_techs)
9030      $(converter_capacityParam(nodesModelSel,yearsSel,converter_techs,'unitsUpperLimit') >= 0
9031          and converter_capacityParam(nodesModelSel,yearsSel,converter_techs,'unitsUpperLimit') < +inf
9032          and converter_capacityParam(nodesModelSel,yearsSel,converter_techs,'unitsUpperLimit')
9033              <> converter_capacityParam(nodesModelSel,yearsSel,converter_techs,'unitsLowerLimit'))
9034      ..
9035      sum(vintage$converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage),
9036          converter_unitsTotal(nodesModelSel,yearsSel,converter_techs,vintage))
9037      =l=
9038      converter_capacityParam(nodesModelSel,yearsSel,converter_techs,"unitsUpperLimit");
9039   
9040  * // ### Converter Units Lower Limit
9041  * // Lower bound for the total number of units.
9042  * // {Eq_converter_unitsLowerLimit}
9043  Eq_converter_unitsLowerLimit(nodesModelSel,yearsSel,converter_techs)
9044      $(converter_capacityParam(nodesModelSel,yearsSel,converter_techs,'unitsLowerLimit') > 0
9045          and converter_capacityParam(nodesModelSel,yearsSel,converter_techs,'unitsLowerLimit')
9046              <> converter_capacityParam(nodesModelSel,yearsSel,converter_techs,'unitsUpperLimit'))
9047      ..
9048      sum(vintage$converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage),
9049          converter_unitsTotal(nodesModelSel,yearsSel,converter_techs,vintage))
9050      =g=
9051      converter_capacityParam(nodesModelSel,yearsSel,converter_techs,"unitsLowerLimit");
9052   
9053  Eq_converter_unitsFixedLimit(nodesModelSel,yearsSel,converter_techs)
9054      $(converter_capacityParam(nodesModelSel,yearsSel,converter_techs,'unitsLowerLimit')
9055          = converter_capacityParam(nodesModelSel,yearsSel,converter_techs,'unitsUpperLimit'))
9056      ..
9057      sum(vintage$converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage),
9058          converter_unitsTotal(nodesModelSel,yearsSel,converter_techs,vintage))
9059      =e=
9060      converter_capacityParam(nodesModelSel,yearsSel,converter_techs,"unitsUpperLimit");
9061   
9062  * // ### Converter Units Total MIP
9063  * // Fixes the total number of units to the corresponding integer variable.
9064  * // {Eq_converter_unitsTotalMIP}
9065  Eq_converter_unitsTotalMIP(nodesModelSel,yearsSel,converter_techs,vintage)
9066      $( converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
9067          and converter_techParam(converter_techs,vintage,"mipUnits") = 1 )
9068      ..
9069      converter_unitsTotal(nodesModelSel,yearsSel,converter_techs,vintage)
9070      =e=
9071      converter_unitsTotal_MIP(nodesModelSel,yearsSel,converter_techs,vintage);
9072   
9073  * // ### Converter Units Online MIP
9074  * // Fixes the number of online units to the corresponding integer variable.
9075  * // {Eq_converter_unitsOnlineMIP}
9076  Eq_converter_unitsOnlineMIP(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
9077      $( converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
9078          and converter_techParam(converter_techs,vintage,"mipDispatch") = 1 )
9079      ..
9080      converter_unitsOnline(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
9081      =e=
9082      converter_unitsOnline_MIP(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage);
9083   
9084  * // ### Converter Activity Lower Limit
9085  * // Lower limit on the activity.
9086  * // {Eq_converter_activityLowerLimit}
9087  Eq_converter_activityLowerLimit(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
9088      $(converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
9089          and converter_activityProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,"lower") > 0
9090          and converter_activityProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,"lower")
9091               <> converter_activityProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,"upper")
9092          and not converter_hasMinLoad(converter_techs, vintage))
9093      ..
9094      sum(activity$converter_usedAct(converter_techs,vintage,activity),
9095          converter_activity(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity)
9096      )
9097      =g=
9098      converter_activityProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,"lower")
9100      * converter_unitsOnline(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage);
9102   
9103  * // ### Converter Activity Upper Limit
9104  * // Upper limit on the activity.
9105  * // {Eq_converter_activityUpperLimit}
9106  Eq_converter_activityUpperLimit(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
9107      $(converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
9108          and converter_activityProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,"upper") >= 0
9109          and converter_activityProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,"upper")
9110               <> converter_activityProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,"lower"))
9111      ..
9112      sum(activity$converter_usedAct(converter_techs,vintage,activity),
9113          converter_activity(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity)
9114      )
9115      =l=
9116      converter_activityProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,"upper")
9118      * converter_unitsOnline(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage);
9120   
9121  Eq_converter_activityFixedLimit(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
9122      $(converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
9123          and converter_activityProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,"lower")
9124               = converter_activityProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,"upper"))
9125      ..
9126      sum(activity$converter_usedAct(converter_techs,vintage,activity),
9127          converter_activity(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity)
9128      )
9129      =e=
9130      converter_activityProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,"upper")
9132      * converter_unitsOnline(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage);
9134   
9135  * // ### Converter Positive Ramping
9136  * // Positive ramping of unit activity.
9137  * // {Eq_converter_rampPos}
9138  Eq_converter_rampPos(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,converter_techs,vintage)
9139    $( converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
9140        and converter_useRampPos(nodesModelSel,yearsSel,converter_techs,vintage))
9141      ..
9142      converter_rampPos(timeModelToCalc,nodesModelSel,yearsSel,converter_techs,vintage)
9143      =g=
9144      sum(activity$converter_usedAct(converter_techs,vintage,activity),
9145              converter_activity(timeModelToCalc,nodesModelSel,yearsSel,converter_techs,vintage,activity)
9146              - converter_activity(timeModelToCalc--1,nodesModelSel,yearsSel,converter_techs,vintage,activity));
9147   
9148  * // ### Converter Negative Ramping
9149  * // Negative ramping of unit activity.
9150  * // {Eq_converter_rampNeg}
9151  Eq_converter_rampNeg(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,converter_techs,vintage)
9152    $( converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
9153        and converter_useRampNeg(nodesModelSel,yearsSel,converter_techs,vintage))
9154      ..
9155      converter_rampNeg(timeModelToCalc,nodesModelSel,yearsSel,converter_techs,vintage)
9156      =g=
9157      - sum(activity$converter_usedAct(converter_techs,vintage,activity),
9158              converter_activity(timeModelToCalc,nodesModelSel,yearsSel,converter_techs,vintage,activity)
9159              - converter_activity(timeModelToCalc--1,nodesModelSel,yearsSel,converter_techs,vintage,activity));
9160   
9161  * // ### Converter Ramping Limit
9162  * // Restrict ramping up of unit activity.
9163  * // {Eq_converter_rampLimit}
9164  Eq_converter_rampLimit(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,converter_techs,vintage)
9165    $( converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
9166          and converter_techParam(converter_techs,vintage,"activityRampLimit") > 0)
9167      ..
9168      sum(activity$converter_usedAct(converter_techs,vintage,activity),
9169              converter_activity(timeModelToCalc,nodesModelSel,yearsSel,converter_techs,vintage,activity)
9170              - converter_activity(timeModelToCalc--1,nodesModelSel,yearsSel,converter_techs,vintage,activity))
9171    =l=
9172    converter_techParam(converter_techs,vintage,"activityRampLimit")
9174      * converter_unitsOnline(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage);
9176   
9177   
9179   
9180  * // ### Converter MIP Units Online
9181  * // Restrict ramping up of unit activity.
9182  * // {Eq_converter_unitsOnline}
9183  Eq_converter_unitsOnline(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
9184      $( converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
9185          and converter_techParam(converter_techs,vintage,"mipDispatch") = 0 )
9186    ..
9187    converter_unitsOnline(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
9188    =e=
9189    converter_unitsTotal(nodesModelSel,yearsSel,converter_techs,vintage)
9190      ;
9191   
9192  * // ### Converter MIP Units Shutting Down
9193  * // Allow shutting down units.
9194  * // {Eq_converter_unitsOnlineUC}
9195  Eq_converter_unitsOnlineUC(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
9196      $( converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
9197          and converter_techParam(converter_techs,vintage,"mipDispatch") = 1 )
9198    ..
9199    converter_unitsOnline(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
9200    =l=
9201    converter_unitsTotal(nodesModelSel,yearsSel,converter_techs,vintage)
9202      ;
9204   
9205  * // ### Converter Activity Startups
9206  * // Variable counting the number of unit startups.
9207  * // {Eq_converter_activityStartups}
9208  Eq_converter_activityStartups(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,converter_techs,vintage)
9209    $( converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
9210          and converter_techParam(converter_techs,vintage,"mipDispatch") = 1 )
9211      ..
9212      converter_unitStartups(timeModelToCalc,nodesModelSel,yearsSel,converter_techs,vintage)
9213      =g=
9214          converter_unitsOnline(timeModelToCalc,nodesModelSel,yearsSel,converter_techs,vintage)
9215      - converter_unitsOnline(timeModelToCalc--1,nodesModelSel,yearsSel,converter_techs,vintage);
9216   
9217  * // ### Converter Activity Shutdowns
9218  * // Variable tracking the number of unit shutdowns.
9219  * // {Eq_converter_activityShutdowns}
9220  Eq_converter_activityShutdowns(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,converter_techs,vintage)
9221    $( converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
9222          and converter_techParam(converter_techs,vintage,"mipDispatch") = 1
9223          and converter_techParam(converter_techs,vintage,"minDowntime") > 0)
9224      ..
9225      converter_unitShutdowns(timeModelToCalc,nodesModelSel,yearsSel,converter_techs,vintage)
9226      =g=
9227          converter_unitsOnline(timeModelToCalc--1,nodesModelSel,yearsSel,converter_techs,vintage)
9228      - converter_unitsOnline(timeModelToCalc,nodesModelSel,yearsSel,converter_techs,vintage);
9229   
9230  * // ### Converter Activity Startup Limit
9231  * // Limit the number of startup cycles a unit can perform.
9232  * // {Eq_converter_limitStartups}
9233  Eq_converter_limitStartups(nodesModelSel,yearsSel,converter_techs,vintage)
9234    $( converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
9235          and converter_techParam(converter_techs,vintage,"mipDispatch") = 1
9236      and converter_techParam(converter_techs,vintage,"startupLimit") > 0)
9237      ..
9238      sum(timeModelToCalc, converter_unitStartups(timeModelToCalc,nodesModelSel,yearsSel,converter_techs,vintage))
9239    =l=
9240    converter_techParam(converter_techs,vintage,"startupLimit")
9241    * converter_unitsTotal(nodesModelSel,yearsSel,converter_techs,vintage);
9242   
9243  alias(timeModelToCalc,ttc);
9244   
9245  * // ### Converter Units Minimum Uptime
9246  * // Require recently started units to remain online for their respective minimum uptime.
9247  * // {Eq_converter_minUptime}
9248  Eq_converter_minUptime(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,converter_techs,vintage)
9249    $( converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
9250          and converter_techParam(converter_techs,vintage,"mipDispatch") = 1
9251      and converter_techParam(converter_techs,vintage,"minUptime") > 0)
9252      ..
9253      sum(ttc$[uptimeSearchRange(ttc) and ord(ttc)<=converter_techParam(converter_techs,vintage,"minUptime")],
9254          converter_unitStartups(ttc+[ord(timeModelToCalc)-converter_techParam(converter_techs,vintage,"minUptime")],
9255              nodesModelSel,yearsSel,converter_techs,vintage))
9256          =l=
9257          converter_unitsOnline(timeModelToCalc,nodesModelSel,yearsSel,converter_techs,vintage);
9258   
9259  * // ### Converter Units Minimum Downtime
9260  * // Require recently shut down units to remain offline for their respective minimum downtime.
9261  * // {Eq_converter_minDowntime}
9262  Eq_converter_minDowntime(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,converter_techs,vintage)
9263    $( converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
9264          and converter_techParam(converter_techs,vintage,"mipDispatch") = 1
9265      and converter_techParam(converter_techs,vintage,"minDowntime") > 0)
9266      ..
9267      sum(ttc$[downtimeSearchRange(ttc) and ord(ttc)<=converter_techParam(converter_techs,vintage,"minDowntime")],
9268          converter_unitShutdowns(ttc+[ord(timeModelToCalc)-converter_techParam(converter_techs,vintage,"minDowntime")],
9269              nodesModelSel,yearsSel,converter_techs,vintage))
9270          =l=
9271          converter_unitsTotal(nodesModelSel,yearsSel,converter_techs,vintage)
9272      - converter_unitsOnline(timeModelToCalc,nodesModelSel,yearsSel,converter_techs,vintage);
9273   
9274  * This equation is meant to cause the units to activate particular mode counters to gain access to the corresponding activities.
9275  * Activities are allowed to be used on units with stricter activity requirements but not the other way around.
9276  alias(activity, act);
9277   
9278  * // ### Converter MIP Units Activity Upper Limit Minimum Required Load
9279  * // Limit activity coefficients of activities with a given load requirement or stricter to the number of units in such modes.
9280  * // {Eq_converter_activityUpperLimitDetailedPartLoadMinReq}
9281  Eq_converter_activityUpperLimitDetailedPartLoadMinReq(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity)
9282    $( converter_usedTechAct(nodesModelSel,yearsSel,converter_techs,vintage,activity)
9283          and converter_hasMinLoad(converter_techs, vintage)
9284          and converter_techParam(converter_techs,vintage,"mipDetailedPartialLoad"))
9285      ..
9286      sum(act$(converter_activityRequirements(converter_techs,vintage,act,"minLoad")
9287                  >= converter_activityRequirements(converter_techs,vintage,activity,"minLoad")
9288               and converter_usedAct(converter_techs,vintage,act)),
9289      converter_activity(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,act))
9290    =l=
9291    converter_activityProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,"upper")
9292      * sum(act$(converter_activityRequirements(converter_techs,vintage,act,"minLoad")
9293                  >= converter_activityRequirements(converter_techs,vintage,activity,"minLoad")
9294                 and converter_usedAct(converter_techs,vintage,act)),
9295      converter_unitsUsingActivity_MIP(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,act));
9296   
9297  * // ### Converter MIP Units Activity Upper Limit Maximum Required Load
9298  * // Limit activity coefficients of activities with a given load requirement or stricter to the number of units in such modes.
9299  * // {Eq_converter_activityUpperLimitDetailedPartLoadMaxReq}
9300  Eq_converter_activityUpperLimitDetailedPartLoadMaxReq(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity)
9301    $( converter_usedTechAct(nodesModelSel,yearsSel,converter_techs,vintage,activity)
9302          and converter_hasMaxLoad(converter_techs,vintage)
9303          and converter_techParam(converter_techs,vintage,"mipDetailedPartialLoad"))
9304      ..
9305      sum(act$(converter_activityRequirements(converter_techs,vintage,act,"maxLoad")
9306                  <= converter_activityRequirements(converter_techs,vintage,activity,"maxLoad")
9307               and converter_usedAct(converter_techs,vintage,act)),
9308      converter_activity(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,act))
9309    =l=
9310      sum(act$(converter_activityRequirements(converter_techs,vintage,act,"maxLoad")
9311                  <= converter_activityRequirements(converter_techs,vintage,activity,"maxLoad")
9312               and converter_usedAct(converter_techs,vintage,act)),
9313      min(converter_activityRequirements(converter_techs,vintage,act,"maxLoad"),
9314            converter_activityProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,"upper"))
9315            * converter_unitsUsingActivity_MIP(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,act));
9316   
9317  * This equation is meant to enforce the lower limit requirements of activities in use.
9318  * Loads produced by activities with less strict requirements can contribute to the minimum load requirement of strict activities but not the other way around,
9319  * because these activities can only run on units in the respectively strict activation state.
9320   
9321  * // ### Converter MIP Units Activity Lower Limit Minimum Required Load
9322  * // Enforce sufficient activity coefficients of activities to justify all active modes.
9323  * // {Eq_converter_activityLowerLimitDetailedPartLoadMinReq}
9324  Eq_converter_activityLowerLimitDetailedPartLoadMinReq(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity)
9325    $( converter_usedTechAct(nodesModelSel,yearsSel,converter_techs,vintage,activity)
9326          and converter_hasMinLoad(converter_techs, vintage)
9327          and converter_techParam(converter_techs,vintage,"mipDetailedPartialLoad"))
9328      ..
9329      sum(act$(converter_activityRequirements(converter_techs,vintage,act,"minLoad")
9330                  <= converter_activityRequirements(converter_techs,vintage,activity,"minLoad")
9331               and converter_usedAct(converter_techs,vintage,act)),
9332      converter_activity(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,act))
9333    =g=
9334      sum(act$(converter_activityRequirements(converter_techs,vintage,act,"minLoad")
9335                  <= converter_activityRequirements(converter_techs,vintage,activity,"minLoad")
9336               and converter_usedAct(converter_techs,vintage,act)),
9337      max(converter_activityRequirements(converter_techs,vintage,act,"minLoad"),
9338            converter_activityProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,"lower"))
9339            * converter_unitsUsingActivity_MIP(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,act));
9340   
9341   
9342  * Simple one-activity-per-unit partial load equations
9343  * // ### Converter MIP Units Activity Upper Limit Partial Load Balance
9344  * // Enforce MIP units partial load upper limit.
9345  * // {Eq_converter_activityUpperLimitPartLoad}
9346  Eq_converter_activityUpperLimitPartLoad(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity)
9347    $( converter_usedTechAct(nodesModelSel,yearsSel,converter_techs,vintage,activity)
9348          and (converter_hasMinLoad(converter_techs, vintage)
9349                or converter_hasMaxLoad(converter_techs, vintage)
9350                or converter_hasConstantFluxInActivity(converter_techs, vintage))
9351          and not converter_techParam(converter_techs,vintage,"mipDetailedPartialLoad"))
9352      ..
9353      converter_activity(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity)
9354    =l=
9355    min(converter_activityRequirements(converter_techs,vintage,activity,"maxLoad"),
9356          converter_activityProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,"upper"))
9357          * converter_unitsUsingActivity_MIP(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity);
9358   
9359  * // ### Converter MIP Units Activity Lower Limit Partial Load Balance
9360  * // Enforce MIP units partial load lower limit.
9361  * // {Eq_converter_activityLowerLimitPartLoad}
9362  Eq_converter_activityLowerLimitPartLoad(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity)
9363    $( converter_usedTechAct(nodesModelSel,yearsSel,converter_techs,vintage,activity)
9364          and (converter_hasMinLoad(converter_techs, vintage)
9365                or converter_hasMaxLoad(converter_techs, vintage))
9366          and not converter_techParam(converter_techs,vintage,"mipDetailedPartialLoad"))
9367      ..
9368      converter_activity(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity)
9369    =g=
9370    max(converter_activityRequirements(converter_techs,vintage,activity,"minLoad"),
9371          converter_activityProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,"lower"))
9372          * converter_unitsUsingActivity_MIP(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity);
9373   
9374  * // ### Converter MIP Units Idle Online Units
9375  * // Counts idle online units at every time step
9376  * // {Eq_converter_noOnlineIdle}
9377  Eq_converter_noOnlineIdle(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
9378    $( converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
9379          and (converter_hasMinLoad(converter_techs, vintage)
9380              or converter_hasMaxLoad(converter_techs, vintage)
9381              or converter_hasConstantFluxInActivity(converter_techs,vintage))
9382          and not converter_techParam(converter_techs,vintage,"mipDetailedPartialLoad"))
9383      ..
9384      converter_unitsOnline(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
9385      =e=
9386      sum(activity$converter_usedAct(converter_techs,vintage,activity),
9387            converter_unitsUsingActivity_MIP(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity));
9388   
9389  * // ### Converter MIP Units Idle Online Units Partial load
9390  * // Counts idle online units at every time step
9391  * // {Eq_converter_noOnlineIdleDetailedPartLoad}
9392  Eq_converter_noOnlineIdleDetailedPartLoad(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
9393    $( converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
9394          and (converter_hasMinLoad(converter_techs, vintage)
9395                  or converter_hasMaxLoad(converter_techs, vintage))
9396          and converter_techParam(converter_techs,vintage,"mipDetailedPartialLoad"))
9397      ..
9398      converter_unitsOnline(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
9399      =l=
9400      sum(activity$converter_usedAct(converter_techs,vintage,activity),
9401            converter_unitsUsingActivity_MIP(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity));
9402   
9403  * // ### Converter MIP activity model limit
9404  * // Converter activity model limit
9405  * // {Eq_converter_activityModeLimit}
9406  Eq_converter_activityModeLimit(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity)
9407    $( converter_usedTechAct(nodesModelSel,yearsSel,converter_techs,vintage,activity)
9408          and (converter_hasMinLoad(converter_techs, vintage)
9409                or converter_hasMaxLoad(converter_techs, vintage))
9410          and converter_techParam(converter_techs,vintage,"mipDetailedPartialLoad"))
9411      ..
9412      converter_unitsOnline(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
9413      =g=
9414      converter_unitsUsingActivity_MIP(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity);
9415   
9416  * ==== model definition ====
9417   
9418  Model M_converter
9419  /
9420    Eq_converter_unitsBalance
9421    Eq_converter_unitsFixedDecom
9422    Eq_converter_unitsFreeDecom
9423    Eq_converter_unitsUpperLimit
9424    Eq_converter_unitsLowerLimit
9425    Eq_converter_unitsFixedLimit
9426    Eq_converter_unitsTotalMIP
9427    Eq_converter_unitsOnlineMIP
9428    Eq_converter_activityUpperLimit
9429    Eq_converter_activityLowerLimit
9430    Eq_converter_activityFixedLimit
9431    Eq_converter_rampPos
9432    Eq_converter_rampNeg
9433    Eq_converter_rampLimit
9435    Eq_converter_unitsOnline
9436    Eq_converter_unitsOnlineUC
9438    Eq_converter_activityStartups
9439    Eq_converter_activityShutdowns
9440    Eq_converter_limitStartups
9441    Eq_converter_minUptime
9442    Eq_converter_minDowntime
9443    Eq_converter_activityUpperLimitDetailedPartLoadMinReq
9444    Eq_converter_activityUpperLimitDetailedPartLoadMaxReq
9445    Eq_converter_activityLowerLimitDetailedPartLoadMinReq
9446    Eq_converter_activityUpperLimitPartLoad
9447    Eq_converter_activityLowerLimitPartLoad
9448    Eq_converter_noOnlineIdle
9449    Eq_converter_noOnlineIdleDetailedPartLoad
9450    Eq_converter_activityModeLimit
9451  /;
INCLUDE    C:\Local\REMix\framework\remix\framework\model\source\core\storage.gms
9453  * SPDX-FileCopyrightText: Copyright (c) 2023 German Aerospace Center (DLR)
9454  * SPDX-License-Identifier: BSD-3-Clause
9455   
9456  * // # core_storage
9457  * // The equations in this file describe the storages in the model.
9458   
9459  * // ## Variables
9460  * // {special_table_storage_variables}
9855   
9856   
9857  * === SoC mappings ===
9858  set storage_usedTechSoCState(storage_techs,vintage,soc_statesIn);
9859  storage_usedTechSoCState(storage_techs,vintage,soc_states(soc_statesIn))
9860      $(storage_SoCParam(storage_techs,vintage,soc_states,"eRate") > 0
9861        and storage_SoCParam(storage_techs,vintage,soc_states,"cRate") > 0)
9862      = yes;
9863   
9864  set storage_validSoCRange(storage_techs,vintage);
9865  storage_validSoCRange(storage_techs,vintage)
9866      = smax(soc_states$storage_usedTechSoCState(storage_techs,vintage,soc_states), storage_SoCParam(storage_techs,vintage,soc_states,"SoC")) = 1
9867        and smin(soc_states$storage_usedTechSoCState(storage_techs,vintage,soc_states), storage_SoCParam(storage_techs,vintage,soc_states,"SoC")) = 0;
9868   
9869  * === Translate SoC parameters to ordered SoC-set ===
9870  * set ordered_socs / soc1*soc20 /;
9871  * alias(soc_states, soc_states_c);
9872  * parameter storage_SoCParam_ordered(storage_techs,vintage,ordered_socs,pc_storage_SoCParam);
9873  * storage_SoCParam_ordered(storage_techs,vintage,ordered_socs,pc_storage_SoCParam)
9874  *     $storage_validSoCRange(storage_techs,vintage)
9875  *     = sum(soc_states$(ord(ordered_socs) = sum(soc_states_c$(storage_SoCParam(storage_techs,vintage,soc_states_c,"SoC") <= storage_SoCParam(storage_techs,vintage,soc_states,"SoC")
9876  *                                                            and storage_usedTechSoCState(storage_techs,vintage,soc_states_c)), 1)
9877  *                       and storage_usedTechSoCState(storage_techs,vintage,soc_states)),
9878  *           storage_SoCParam(storage_techs,vintage,soc_states,pc_storage_SoCParam));
9879  *
9880  * set storage_usedTechSoCStateOrdered(storage_techs,vintage,ordered_socs);
9881  * storage_usedTechSoCStateOrdered(storage_techs,vintage,ordered_socs)
9882  *     $(storage_SoCParam_ordered(storage_techs,vintage,ordered_socs,"eRate") > 0
9883  *       and storage_SoCParam_ordered(storage_techs,vintage,ordered_socs,"cRate") > 0)
9884  *     = yes;
9885   
9886  parameter storage_bigM(storage_techs,vintage);
9887  storage_bigM(storage_techs,vintage) = smax((nodesModel,years), storage_reservoirParam(nodesModel,years,storage_techs,"unitsUpperLimit"));
9888  storage_bigM(storage_techs,vintage)$(storage_bigM(storage_techs,vintage) = INF) = 10000;
9889  storage_bigM(storage_techs,vintage)$(storage_bigM(storage_techs,vintage) = 0) = 10000;
9890   
9891  * === calculate the number of years represented by single year to calc ===
9892  alias(yearsToCalc, yearsToCalc_a)
9893  parameter representedYears(years);
9894  representedYears(years) = 0.5 *(smin(yearsToCalc$(yearsToCalc.val > years.val or yearsToCalc.val = smax(yearsToCalc_a, yearsToCalc_a.val)), yearsToCalc.val)
9895                                  - smax(yearsToCalc$(yearsToCalc.val < years.val or yearsToCalc.val = smin(yearsToCalc_a, yearsToCalc_a.val)), yearsToCalc.val));
9896   
9897  * ==== calculation of mappings ====
9898   
9899  * Technologies with a lifeTime > 0 are available
9900  set storage_availTech(nodesModel,years,storage_techs,vintage);
9901  storage_availTech(nodesModel,years,storage_techs,vintage)
9902      $(vintage.val = smax(vintage_a$(vintage_a.val <= years.val
9903          and storage_techParam(storage_techs,vintage_a,"lifeTime") > 0), vintage_a.val)) = yes;
9904   
9905  * Technologies to optimize become unavailable if they have an unitsUpperLimit of 0
9906  storage_availTech(nodesModel,years,storage_techs,vintage)
9907      $(yearsToCalc(years) and storage_reservoirParam(nodesModel,years,storage_techs,"unitsUpperLimit") = 0 ) = no;
9908   
9909  * Technologies already built become unavailable if they have an unitsBuild of 0
9910  storage_availTech(nodesModel,years,storage_techs,vintage)
9911      $( ( not yearsToCalc(years)) and storage_reservoirParam(nodesModel,years,storage_techs,"unitsBuild") = 0 ) = no;
9912   
9913  * Used technologies are available technologies over their technical lifeTime
9914  set storage_usedTech(nodesModel,years,storage_techs,vintage);
9915  storage_usedTech(nodesModel,years,storage_techs,vintage)
9916      $(vintage.val <= years.val
9917          and years.val < smax(years_a$storage_availTech(nodesModel,years_a,storage_techs,vintage),
9918                                              years_a.val + storage_techParam(storage_techs,vintage,"lifeTime"))
9919          ) = yes;
9920   
9921  * Technologies have to be decomissioned in the interval of first avail + lifetime to last avail + lifetime
9922  set storage_decomTech(nodesModel,years,storage_techs,vintage);
9923  storage_decomTech(nodesModel,years,storage_techs,vintage)
9924    $(sum(years_a$storage_usedTech(nodesModel,years_a,storage_techs,vintage), 1)
9925      and sum(yearsToCalc
9926        $(sameas(years, yearsToCalc)
9927          and yearsToCalc.val >= smin(years_a$storage_availTech(nodesModel,years_a,storage_techs,vintage), years_a.val) + storage_techParam(storage_techs,vintage,"lifeTime")
9928          and yearsToCalc.val <= smax(years_a$storage_availTech(nodesModel,years_a,storage_techs,vintage), years_a.val) + storage_techParam(storage_techs,vintage,"lifeTime")), 1))
9929    = yes;
9930   
9931  * Extend the decom frame to the year after the last year of usedTech
9932  storage_decomTech(nodesModel,yearsToCalc,storage_techs,vintage)
9933    $(storage_usedTech(nodesModel,yearsToCalc-1,storage_techs,vintage)
9934      and storage_decomTech(nodesModel,yearsToCalc-1,storage_techs,vintage))
9935    = yes;
9936   
9937  * Mapping for used commodities
9938  set storage_usedCom(storage_techs,vintage,commodity);
9939  option storage_usedCom < storage_sizeParam;
9940   
9941  set storage_usedTechCom(nodesModel,years,storage_techs,vintage,commodity);
9942  storage_usedTechCom(nodesModel,years,storage_techs,vintage,commodity)
9943      $(storage_usedTech(nodesModel,years,storage_techs,vintage)
9944          and storage_usedCom(storage_techs,vintage,commodity))
9945      = yes;
9946   
9947   
9948  * // ## Load units from gdx file
9950   
9951  * ==== aggregation of profiles ====
9952  * derive upper and lower profiles then aggregate
9953  set storage_level_hasProfileIn(nodesData,years,storage_techs,pc_storage_levelProfile);
9954  option storage_level_hasProfileIn < storage_levelProfileIn;
9955   
9956  set storage_level_hasProfile(nodesModel,years,storage_techs,pc_storage_levelProfile);
9957  storage_level_hasProfile(nodesModelToCalc,yearsToCalc,storage_techs,pc_storage_levelProfile)
9958      = sum(nodesData$aggregateNodesModel(nodesData,nodesModelToCalc),
9959              storage_level_hasProfileIn(nodesData,yearsToCalc,storage_techs,pc_storage_levelProfile));
9960   
9961  * weighted average for a real sum of units upper limits, plain average if one region has an upper limit of inf
9962  parameter storage_levelProfile(timeModel,nodesModel,years,storage_techs,vintage,pc_storage_levelProfile);
9963  storage_levelProfile(timeModelToCalc,storage_usedTech(nodesModelToCalc,yearsToCalc,storage_techs,vintage),"upper")
9964      = storage_techParam(storage_techs,vintage,"levelUpperLimit");
9965  storage_levelProfile(timeModelToCalc,storage_usedTech(nodesModelToCalc,yearsToCalc,storage_techs,vintage),"lower")
9966      = storage_techParam(storage_techs,vintage,"levelLowerLimit");
9967   
9968  set storage_finiteUnitLimit(nodesModelToCalc,yearsToCalc,storage_techs);
9969  storage_finiteUnitLimit(nodesModelToCalc,yearsToCalc,storage_techs) = sum(nodesData$aggregateNodesModel(nodesData,nodesModelToCalc), storage_reservoirParamIn(nodesData,yearsToCalc,storage_techs,"unitsUpperLimit")) > 0
9970                                                   and sum(nodesData$aggregateNodesModel(nodesData,nodesModelToCalc), storage_reservoirParamIn(nodesData,yearsToCalc,storage_techs,"unitsUpperLimit")) < inf;
9971   
9972  storage_levelProfile(timeModelToCalc,storage_usedTech(nodesModelToCalc,yearsToCalc,storage_techs,vintage),pc_storage_levelProfile)
9973      $( storage_level_hasProfile(nodesModelToCalc,yearsToCalc,storage_techs,pc_storage_levelProfile)
9974          and storage_finiteUnitLimit(nodesModelToCalc,yearsToCalc,storage_techs))
9975      = sum(nodesData$aggregateNodesModel(nodesData,nodesModelToCalc),
9976              sum(timeData$timeMapping(timeData,timeModelToCalc),
9977                    storage_levelProfileIn(timeData,nodesData,yearsToCalc,storage_techs,pc_storage_levelProfile))
9978                / timeLength(timeModelToCalc)
9979              * storage_reservoirParamIn(nodesData,yearsToCalc,storage_techs,"unitsUpperLimit"))
9980      / sum(nodesData$aggregateNodesModel(nodesData,nodesModelToCalc),
9981              storage_reservoirParamIn(nodesData,yearsToCalc,storage_techs,"unitsUpperLimit"));
9982   
9983  storage_levelProfile(timeModelToCalc,storage_usedTech(nodesModelToCalc,yearsToCalc,storage_techs,vintage),pc_storage_levelProfile)
9984      $( storage_level_hasProfile(nodesModelToCalc,yearsToCalc,storage_techs,pc_storage_levelProfile)
9985          and sum(nodesData$aggregateNodesModel(nodesData,nodesModelToCalc),
9986                      storage_reservoirParamIn(nodesData,yearsToCalc,storage_techs,"unitsUpperLimit")) = inf )
9987      = sum(nodesData$(aggregateNodesModel(nodesData,nodesModelToCalc)
9988                      and storage_reservoirParamIn(nodesData,yearsToCalc,storage_techs,"unitsUpperLimit") = inf ),
9989              sum(timeData$timeMapping(timeData,timeModelToCalc),
9990                    storage_levelProfileIn(timeData,nodesData,yearsToCalc,storage_techs,pc_storage_levelProfile))
9991                / timeLength(timeModelToCalc))
9992      / sum(nodesData$(aggregateNodesModel(nodesData,nodesModelToCalc)
9993                      and storage_reservoirParamIn(nodesData,yearsToCalc,storage_techs,"unitsUpperLimit") = inf ), 1);
9994   
9995  * for fixed profiles overwrite upper and lower profile
9996  storage_levelProfile(timeModelToCalc,nodesModelToCalc,yearsToCalc,storage_techs,vintage,"lower")
9997      $storage_level_hasProfile(nodesModelToCalc,yearsToCalc,storage_techs,"fixed")
9998      = storage_levelProfile(timeModelToCalc,nodesModelToCalc,yearsToCalc,storage_techs,vintage,"fixed");
9999   
10000  storage_levelProfile(timeModelToCalc,nodesModelToCalc,yearsToCalc,storage_techs,vintage,"upper")
10001      $storage_level_hasProfile(nodesModelToCalc,yearsToCalc,storage_techs,"fixed")
10002      = storage_levelProfile(timeModelToCalc,nodesModelToCalc,yearsToCalc,storage_techs,vintage,"fixed");
10003   
10004   
10005  * ==== parameter modifications ====
10006  storage_reservoirParam(nodesModel,years,storage_techs,"unitsLowerLimit")
10007          $sum(vintage, storage_techParam(storage_techs,vintage,"mipUnits"))
10008      = floor(storage_reservoirParam(nodesModel,years,storage_techs,"unitsLowerLimit"));
10009  storage_reservoirParam(nodesModel,years,storage_techs,"unitsUpperLimit")
10010          $sum(vintage, storage_techParam(storage_techs,vintage,"mipUnits"))
10011      = ceil(storage_reservoirParam(nodesModel,years,storage_techs,"unitsUpperLimit"));
10012   
10013   
10014  * ==== definition of variables ====
10015   
10016  * Initialise variables for unitsBuild
10017  storage_unitsBuild.l(nodesModel,years,storage_techs,vintage)
10018      $storage_availTech(nodesModel,years,storage_techs,vintage)
10019      = storage_reservoirParam(nodesModel,years,storage_techs,"unitsBuild");
10020  storage_unitsBuild.lo(nodesModel,yearsToCalc,storage_techs,vintage)
10021      $storage_availTech(nodesModel,yearsToCalc,storage_techs,vintage)
10022      = storage_unitsBuild.l(nodesModel,yearsToCalc,storage_techs,vintage);
10023  storage_unitsBuild.fx(nodesModel,years,storage_techs,vintage)
10024      $storage_reservoirParam(nodesModel,years,storage_techs,"noExpansion")
10025      = storage_unitsBuild.l(nodesModel,years,storage_techs,vintage);
10026   
10027  * Initialise variables for unitsDecom
10028  storage_unitsDecom.l(nodesModel,years,storage_techs,vintage)
10029      $(storage_decomTech(nodesModel,years,storage_techs,vintage)
10030        and years.val < sum(yearsToCalc$(ord(yearsToCalc) = 1), yearsToCalc.val))
10031      = sum((years_a,years_aa)$(sameas(years-1, years_aa)
10032                        and years_a.val > years_aa.val - storage_techParam(storage_techs,vintage,'lifeTime')
10033                        and years_a.val <= years.val - storage_techParam(storage_techs,vintage,'lifeTime')
10034                        and storage_availTech(nodesModel,years_a,storage_techs,vintage)),
10035          storage_unitsBuild.l(nodesModel,years_a,storage_techs,vintage));
10036   
10037  storage_unitsDecom.l(nodesModel,yearsToCalc,storage_techs,vintage)
10038    $storage_decomTech(nodesModel,yearsToCalc,storage_techs,vintage)
10039    = sum(years$
10040          (years.val < sum(yearsToCalc_a$(ord(yearsToCalc_a) = 1), yearsToCalc_a.val)
10041            and storage_availTech(nodesModel,years,storage_techs,vintage)
10042            and years.val > sum(years_a$sameas(years_a, yearsToCalc-1), years_a.val) - storage_techParam(storage_techs,vintage,'lifeTime')
10043            and years.val <= yearsToCalc.val - storage_techParam(storage_techs,vintage,'lifeTime')),
10044        storage_unitsBuild.l(nodesModel,years,storage_techs,vintage))
10045      + sum(yearsToCalc_a$
10046          (yearsToCalc_a.val < sum(yearsToCalc_aa$(ord(yearsToCalc_aa) > 1), yearsToCalc_a.val)
10047            and storage_availTech(nodesModel,yearsToCalc_a,storage_techs,vintage)
10048            and yearsToCalc_a.val > sum(years_a$sameas(years_a, yearsToCalc-1), years_a.val) - storage_techParam(storage_techs,vintage,'lifeTime')
10049            and yearsToCalc_a.val <= yearsToCalc.val - storage_techParam(storage_techs,vintage,'lifeTime')),
10050        storage_unitsBuild.l(nodesModel,yearsToCalc_a,storage_techs,vintage));
10051        ;
10052   
10053  storage_unitsDecom.lo(nodesModel,yearsToCalc,storage_techs,vintage)
10054      $(storage_usedTech(nodesModel,yearsToCalc,storage_techs,vintage)
10055        and not storage_techParam(storage_techs,vintage,"freeDecom"))
10056      = storage_unitsDecom.l(nodesModel,yearsToCalc,storage_techs,vintage)
10057   
10058  * Calculate planned unit expansion
10059  parameter storage_unitsPlanned(nodesModel,years,storage_techs,vintage);
10060  storage_unitsPlanned(nodesModel,years,storage_techs,vintage) = 0;
10061  loop(years,
10062    storage_unitsPlanned(nodesModel,years,storage_techs,vintage)
10063      =
10064      storage_unitsPlanned(nodesModel,years-1,storage_techs,vintage)
10065          $storage_usedTech(nodesModel,years-1,storage_techs,vintage)
10066      + storage_unitsBuild.l(nodesModel,years,storage_techs,vintage)
10067          $storage_availTech(nodesModel,years,storage_techs,vintage)
10068      - storage_unitsDecom.l(nodesModel,years,storage_techs,vintage)
10069          $storage_usedTech(nodesModel,years,storage_techs,vintage);
10070  );
10071   
10072  * Set initial state for planned units
10073  storage_unitsTotal.l(nodesModel,years,storage_techs,vintage)
10074    = storage_unitsPlanned(nodesModel,years,storage_techs,vintage)
10075   
10076  * Calculate if planned unit expansion is bounded by upper and lower limits
10077  set storage_unitBoundsFixed(nodesModel,years,storage_techs);
10078  storage_unitBoundsFixed(nodesModel,years,storage_techs)
10079    $(sum(vintage$storage_usedTech(nodesModel,years,storage_techs,vintage),
10080          storage_unitsPlanned(nodesModel,years,storage_techs,vintage))
10081      = storage_reservoirParam(nodesModel,years,storage_techs,"unitsUpperLimit")
10082    and sum(vintage$storage_usedTech(nodesModel,years,storage_techs,vintage),
10083          storage_unitsPlanned(nodesModel,years,storage_techs,vintage))
10084      = storage_reservoirParam(nodesModel,years,storage_techs,"unitsLowerLimit"))
10085    = yes;
10086   
10087  * Fix unitsBuild, unitsDecom, unitsTotal if levels are predetermined by upper and lower limits
10088  storage_unitsBuild.fx(nodesModel,years,storage_techs,vintage)
10089    $(storage_availTech(nodesModel,years,storage_techs,vintage)
10090      and storage_unitBoundsFixed(nodesModel,years,storage_techs))
10091    = storage_unitsBuild.l(nodesModel,years,storage_techs,vintage);
10092  storage_unitsDecom.fx(nodesModel,years,storage_techs,vintage)
10093    $(storage_usedTech(nodesModel,years,storage_techs,vintage)
10094      and storage_unitBoundsFixed(nodesModel,years,storage_techs))
10095    = storage_unitsDecom.l(nodesModel,years,storage_techs,vintage);
10096  storage_unitsTotal.fx(nodesModel,years,storage_techs,vintage)
10097    $(storage_usedTech(nodesModel,years,storage_techs,vintage)
10098      and storage_unitBoundsFixed(nodesModel,years,storage_techs))
10099    = storage_unitsTotal.l(nodesModel,years,storage_techs,vintage);
10100   
10101  storage_unitsTotal_MIP.up(nodesModel,years,storage_techs,vintage)
10102      $(storage_usedTech(nodesModel,years,storage_techs,vintage)
10103        and storage_techParam(storage_techs,vintage,"mipUnits") = 1)
10104      = storage_reservoirParam(nodesModel,years,storage_techs,"unitsUpperLimit");
10105   
10106  * Add parameter for fixing capacities during myopic runs
10107  parameter storage_unitsDelta(nodesModel,years,storage_techs);
10108   
10109   
10110  * ==== declaration of equations ====
10111   
10112  equations
10113    Eq_storage_unitsBalance(nodesModel,years,storage_techs,vintage
10114      ) "Ensures the units balance over the planning period."
10115    Eq_storage_unitsFixedDecom(nodesModel,years,storage_techs,vintage
10116      ) "Restricts the fixed decommissioning of units over the planning period."
10117    Eq_storage_unitsFreeDecom(nodesModel,years,storage_techs,vintage
10118      ) "Restricts the free decommissioning of units over the planning period."
10119    Eq_storage_unitsUpperLimit(nodesModel,years,storage_techs
10120      ) "Upper bound for the total number of units."
10121    Eq_storage_unitsLowerLimit(nodesModel,years,storage_techs
10122      ) "Lower bound for the total number of units."
10123    Eq_storage_unitsTotalMIP(nodesModel,years,storage_techs,vintage
10124      ) "Fixes the total number of units to the corresponding integer variable."
10125   
10126    Eq_storage_levelUpperLimit(timeModel,nodesModel,years,storage_techs,vintage,commodity
10127      ) "Upper bound for the total number of units."
10128    Eq_storage_levelUpperLimit_degradation(timeModel,nodesModel,years,storage_techs,vintage,commodity
10129      ) "Upper bound for the total number of units if the storage technology accounts for degradation."
10130    Eq_storage_levelLowerLimit(timeModel,nodesModel,years,storage_techs,vintage,commodity
10131      ) "Lower bound for the total number of units."
10132    Eq_storage_losses(timeModel,nodesModel,years,storage_techs,vintage,commodity
10133      ) "Stored commodities lost due to self discharge."
10134    Eq_storage_unitsBalanceStates(nodesModel,years,storage_techs,vintage
10135      ) "Currently available units must have been built at some point in time and have some state of degradation."
10136    Eq_storage_unitsUpperLimitPerState(nodesModel,years,yearsCom,storage_techs,vintage
10137      ) "There cannot be more units from a certain year than the amount built in that year."
10138    Eq_storage_unitsStatesNoRecovery(nodesModel,years,yearsCom,storage_techs,vintage,degradation_states
10139      ) "There is no recovery."
10140    Eq_storage_cRateLimit(timeModel,nodesModel,years,storage_techs,vintage,commodity
10141      ) "Limit charging rate based on unit capacity."
10142    Eq_storage_eRateLimit(timeModel,nodesModel,years,storage_techs,vintage,commodity
10143      ) "Limit discharging rate based on unit capacity."
10144    Eq_storage_charge(timeModel,nodesModel,years,storage_techs,vintage,commodity
10145      ) "Positive change in state of charge is influx."
10146    Eq_storage_discharge(timeModel,nodesModel,years,storage_techs,vintage,commodity
10147      ) "Negative change in state of charge is outflux."
10148   
10149    Eq_storage_levelStateSum(timeModel,nodesModel,years,storage_techs,vintage,commodity
10150      ) "Sum of degradation class storage levels is the global level."
10151    Eq_storage_levelUpperLimitPerAge(timeModel,nodesModel,years,yearsCom,storage_techs,vintage,commodity
10152      ) "Upper bound for units of a certain state."
10153    Eq_storage_chargingPerAge(timeModel,nodesModel,years,yearsCom,storage_techs,vintage,commodity
10154      ) "Positive change in state of charge is influx for each degradation class."
10155    Eq_storage_chargeBasedDegradationDistribution(nodesModel,years,yearsCom,storage_techs,vintage,commodity
10156      ) "Determine degradation states of storage units."
10157    Eq_storage_unitsDecomStateSum(nodesModel,years,storage_techs,vintage
10158      ) "All decomminsioned units must have a degradation state."
10159    Eq_storage_unitsDegradation(nodesModel,years,yearsCom,storage_techs,vintage,degradation_states
10160      ) "Only allow one range of degradation states per year and age group."
10161    Eq_storage_unitsDegradation_onlyOneRange(nodesModel,years,yearsCom,storage_techs,vintage
10162      ) "Limit usable degradation states to one range, i.e., two neighboring states."
10163   
10164    Eq_storage_unitsSoC_sum(timeModel,nodesModel,years,storage_techs,vintage
10165      ) "Every unit has a state of charge."
10166    Eq_storage_levelSoC(timeModel,nodesModel,years,storage_techs,vintage,commodity
10167      ) "Every unit has a state of charge."
10168    Eq_storage_unitsSoC(timeModel,nodesModel,years,storage_techs,vintage,soc_statesIn
10169      ) "Number of units in particular SoC."
10170    Eq_storage_unitsSoC_onlyOneRange(timeModel,nodesModel,years,storage_techs,vintage
10171      ) "Limit usable SoC states to one range, i.e., two neighboring states."
10172   
10173    Eq_storage_cRateLimit_SoC(timeModel,nodesModel,years,storage_techs,vintage,commodity
10174      ) "Limit charging rate based on unit capacity."
10175    Eq_storage_eRateLimit_SoC(timeModel,nodesModel,years,storage_techs,vintage,commodity
10176      ) "Limit discharging rate based on unit capacity."
10177    ;
10178   
10179  * ==== equation definition ====
10180  * // ## Equations
10181  * // ### Storage Units Balance
10182  * // Ensures that the total units are consistent with the built and decommissioned units.
10183  * // {Eq_storage_unitsBalance}
10184  Eq_storage_unitsBalance(nodesModelSel,yearsSel,storage_techs,vintage)
10185      $((storage_usedTech(nodesModelSel,yearsSel,storage_techs,vintage)
10186            or sum(years$sameas(years,yearsSel), storage_usedTech(nodesModelSel,years-1,storage_techs,vintage)))
10187          and not storage_unitBoundsFixed(nodesModelSel,yearsSel,storage_techs))
10188      ..
10189      storage_unitsTotal(nodesModelSel,yearsSel,storage_techs,vintage)
10190      =e=
10191          sum(yearsToCalc$(ord(yearsToCalc) = 1 and sameas(yearsToCalc, yearsSel)),
10192        sum(years$sameas(years, yearsToCalc),
10193          storage_unitsTotal(nodesModelSel,years-1,storage_techs,vintage)
10194            $storage_usedTech(nodesModelSel,years-1,storage_techs,vintage)))
10195      + sum((yearsToCalc)$(ord(yearsToCalc) > 1 and sameas(yearsToCalc, yearsSel)),
10196        storage_unitsTotal(nodesModelSel,yearsToCalc-1,storage_techs,vintage)
10197          $storage_usedTech(nodesModelSel,yearsToCalc-1,storage_techs,vintage))
10198      + storage_unitsBuild(nodesModelSel,yearsSel,storage_techs,vintage)
10199          $storage_availTech(nodesModelSel,yearsSel,storage_techs,vintage)
10200      - storage_unitsDecom(nodesModelSel,yearsSel,storage_techs,vintage)
10201          $storage_usedTech(nodesModelSel,yearsSel,storage_techs,vintage);
10202   
10203  * // ### Storage Units Fixed Decommission
10204  * // Restricts the fixed decommissioning of storage units over the planning period.
10205  * // {Eq_storage_unitsFixedDecom}
10206  Eq_storage_unitsFixedDecom(nodesModelSel,yearsSel,storage_techs,vintage)
10207      $(storage_decomTech(nodesModelSel,yearsSel,storage_techs,vintage)
10208          and not storage_techParam(storage_techs,vintage,"freeDecom") = 1
10209          and not storage_unitBoundsFixed(nodesModelSel,yearsSel,storage_techs))
10210      ..
10211      storage_unitsDecom(nodesModelSel,yearsSel,storage_techs,vintage)
10212      =e=
10213      sum(years$
10214          (storage_availTech(nodesModelSel,years,storage_techs,vintage)
10215            and years.val > sum(yearsToCalc$sameas(yearsToCalc+1, yearsSel), yearsToCalc.val) - storage_techParam(storage_techs,vintage,'lifeTime')
10216            and years.val <= yearsSel.val - storage_techParam(storage_techs,vintage,'lifeTime')),
10217        storage_unitsBuild(nodesModelSel,years,storage_techs,vintage));
10218   
10219  * // ### Storage Units Free Decomission
10220  * // Restricts the free decommissioning of storage units over the planning period.
10221  * // {Eq_storage_unitsFreeDecom}
10222  Eq_storage_unitsFreeDecom(nodesModelSel,yearsSel,storage_techs,vintage)
10223      $((storage_decomTech(nodesModelSel,yearsSel,storage_techs,vintage)
10224          or storage_usedTech(nodesModelSel,yearsSel,storage_techs,vintage))
10225          and storage_techParam(storage_techs,vintage,"freeDecom") = 1)
10226      ..
10227      sum(years$
10228            ((storage_decomTech(nodesModelSel,years,storage_techs,vintage)
10229              or storage_usedTech(nodesModelSel,years,storage_techs,vintage))
10230              and years.val < sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)),
10231          storage_unitsDecom(nodesModelSel,years,storage_techs,vintage))
10232      + sum(yearsToCalc$
10233            ((storage_decomTech(nodesModelSel,yearsToCalc,storage_techs,vintage)
10234              or storage_usedTech(nodesModelSel,yearsToCalc,storage_techs,vintage))
10235              and yearsToCalc.val >= sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
10236              and yearsToCalc.val <= yearsSel.val),
10237          storage_unitsDecom(nodesModelSel,yearsToCalc,storage_techs,vintage))
10238      =g=
10239      sum(years$
10240            (storage_availTech(nodesModelSel,years,storage_techs,vintage)
10241              and years.val < sum(yearsToCalc$(ord(yearsToCalc)=1), yearsToCalc.val) - storage_techParam(storage_techs,vintage,'lifeTime')),
10242          storage_unitsBuild(nodesModelSel,years,storage_techs,vintage))
10243      + sum(yearsToCalc$
10244            (storage_availTech(nodesModelSel,yearsToCalc,storage_techs,vintage)
10245              and yearsToCalc.val >= sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
10246              and yearsToCalc.val <= yearsSel.val - storage_techParam(storage_techs,vintage,'lifeTime')),
10247          storage_unitsBuild(nodesModelSel,yearsToCalc,storage_techs,vintage));
10248   
10249  * // ### Storage Units Lower Limit
10250  * // Lower bound for the total number of storage units.
10251  * // {Eq_storage_unitsLowerLimit}
10252  Eq_storage_unitsLowerLimit(nodesModelSel,yearsSel,storage_techs)
10253      $(storage_reservoirParam(nodesModelSel,yearsSel,storage_techs,'unitsLowerLimit') > 0 )
10254      ..
10255      sum(vintage$storage_usedTech(nodesModelSel,yearsSel,storage_techs,vintage),
10256          storage_unitsTotal(nodesModelSel,yearsSel,storage_techs,vintage))
10257      =g=
10258      storage_reservoirParam(nodesModelSel,yearsSel,storage_techs,"unitsLowerLimit");
10259   
10260  * // ### Storage Units Upper Limit
10261  * // Upper bound for the total number of storage units.
10262  * // {Eq_storage_unitsUpperLimit}
10263  Eq_storage_unitsUpperLimit(nodesModelSel,yearsSel,storage_techs)
10264      $(storage_reservoirParam(nodesModelSel,yearsSel,storage_techs,'unitsUpperLimit') >= 0
10265          and storage_reservoirParam(nodesModelSel,yearsSel,storage_techs,'unitsUpperLimit') < +inf )
10266      ..
10267      sum(vintage$storage_usedTech(nodesModelSel,yearsSel,storage_techs,vintage),
10268          storage_unitsTotal(nodesModelSel,yearsSel,storage_techs,vintage))
10269      =l=
10270      storage_reservoirParam(nodesModelSel,yearsSel,storage_techs,"unitsUpperLimit");
10271   
10272  * // ### Storage Units Total MIP
10273  * // Fixes the total number of storage units to the corresponding integer variable.
10274  * // {Eq_storage_unitsTotalMIP}
10275  Eq_storage_unitsTotalMIP(nodesModelSel,yearsSel,storage_techs,vintage)
10276      $( storage_usedTech(nodesModelSel,yearsSel,storage_techs,vintage)
10277          and storage_techParam(storage_techs,vintage,"mipUnits") = 1 )
10278      ..
10279      storage_unitsTotal(nodesModelSel,yearsSel,storage_techs,vintage)
10280      =e=
10281      storage_unitsTotal_MIP(nodesModelSel,yearsSel,storage_techs,vintage);
10282   
10283  * // ### Storage Level Lower Limit
10284  * // Lower limit on the storage level.
10285  * // {Eq_storage_levelLowerLimit}
10286  Eq_storage_levelLowerLimit(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
10287      $(storage_usedTechCom(nodesModelSel,yearsSel,storage_techs,vintage,commodity)
10288          and storage_levelProfile(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,"lower") > 0)
10289      ..
10290      storage_level(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
10291      =g=
10292      storage_levelProfile(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,"lower")
10293      * storage_sizeParam(storage_techs,vintage,commodity,"size")
10294      * storage_unitsTotal(nodesModelSel,yearsSel,storage_techs,vintage);
10295   
10296  * // ### Storage Level Upper Limit
10297  * // Upper limit on the storage level.
10298  * // {Eq_storage_levelUpperLimit}
10299  Eq_storage_levelUpperLimit(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
10300      $(storage_usedTechCom(nodesModelSel,yearsSel,storage_techs,vintage,commodity)
10301          and not storage_hasDegradation(storage_techs,vintage)
10302          and storage_levelProfile(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,"upper") >= 0)
10303      ..
10304      storage_level(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
10305      =l=
10306      storage_levelProfile(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,"upper")
10307      * storage_sizeParam(storage_techs,vintage,commodity,"size")
10308      * storage_unitsTotal(nodesModelSel,yearsSel,storage_techs,vintage);
10309   
10310  * // ### Storage Level Upper Limit (degradation)
10311  * // Upper limit on the storage level if the storage technology accounts for degradation.
10312  * // {Eq_storage_levelUpperLimit_degradation}
10313  Eq_storage_levelUpperLimit_degradation(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
10314      $(storage_usedTechCom(nodesModelSel,yearsSel,storage_techs,vintage,commodity)
10315          and storage_hasDegradation(storage_techs,vintage)
10316          and storage_levelProfile(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,"upper") >= 0)
10317      ..
10318      storage_level(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
10319      =l=
10320      storage_levelProfile(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,"upper")
10321      * storage_sizeParam(storage_techs,vintage,commodity,"size")
10322      * sum((degradation_states,yearsCom)$storage_usedDegradation(storage_techs,vintage,degradation_states),
10323              (storage_degradationParam(storage_techs,vintage,degradation_states,"remainingCapacity")
10324                - (yearsSel.val - yearsCom.val) * storage_techParam(storage_techs,vintage,"annualDegradation"))
10325                * storage_unitsStateTracker(nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,degradation_states));
10326   
10327  * // ### Storage Unit States Sum (degradation)
10328  * // The number of units in all degradation state must match the total unit number.
10329  * // {Eq_storage_unitsBalanceStates}
10330  Eq_storage_unitsBalanceStates(nodesModelSel,yearsSel,storage_techs,vintage)
10331      $(storage_usedTech(nodesModelSel,yearsSel,storage_techs,vintage)
10332        and storage_hasDegradation(storage_techs,vintage))
10333      ..
10334      storage_unitsTotal(nodesModelSel,yearsSel,storage_techs,vintage)
10335      =e=
10336      sum((yearsCom,degradation_states)$storage_usedDegradation(storage_techs,vintage,degradation_states),
10337            storage_unitsStateTracker(nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,degradation_states));
10338   
10339  * // ### Storage Unit States Upper Limit(degradation)
10340  * // The states of all commissioned units in one year (unitsBuilt) must either still be tracked or have been decommissioned.
10341  * // {Eq_storage_unitsUpperLimitPerState}
10342  Eq_storage_unitsUpperLimitPerState(nodesModelSel,yearsSel,yearsCom,storage_techs,vintage)
10343      $(storage_usedTech(nodesModelSel,yearsSel,storage_techs,vintage)
10344          and storage_hasDegradation(storage_techs,vintage))
10345      ..
10346      sum(degradation_states$storage_usedDegradation(storage_techs,vintage,degradation_states),
10347            storage_unitsStateTracker(nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,degradation_states)
10348            + sum(years$(years.val <= yearsSel.val),
10349                  storage_unitsStateTrackerDecom(nodesModelSel,years,yearsCom,storage_techs,vintage,degradation_states)))
10350      =e=
10351      storage_unitsBuild(nodesModelSel,yearsCom,storage_techs,vintage)$(yearsCom.val <= yearsSel.val);
10352   
10353  * // ### Storage Unit States Progression (degradation)
10354  * // Unit recovery by reassigning the storage cycles to other units is disabled. Therefore, the number of units in a particular degradation state can only increase if the number in a less degraded state is decreased by at least the same amount.
10355  * // {Eq_storage_unitsStatesNoRecovery}
10356  alias(degradation_states, dc_states);
10357  Eq_storage_unitsStatesNoRecovery(nodesModelSel,yearsSel(yearsToCalc),yearsCom,storage_techs,vintage,degradation_states)
10358      $(storage_usedTech(nodesModelSel,yearsSel,storage_techs,vintage)
10359        and yearsToCalc.val > yearsCom.val
10360        and storage_usedDegradation(storage_techs,vintage,degradation_states))
10361      ..
10362      sum(dc_states$(storage_usedDegradation(storage_techs,vintage,dc_states)
10363                and storage_degradationParam(storage_techs,vintage,dc_states,"maxFullCycles") <= storage_degradationParam(storage_techs,vintage,degradation_states,"maxFullCycles")),
10364              storage_unitsStateTracker(nodesModelSel,yearsToCalc,yearsCom,storage_techs,vintage,dc_states)
10365              + sum(years$(years.val <= yearsToCalc.val), storage_unitsStateTrackerDecom(nodesModelSel,years,yearsCom,storage_techs,vintage,dc_states)))
10366      =l=
10367      sum(dc_states$(storage_usedDegradation(storage_techs,vintage,dc_states)
10368                      and storage_degradationParam(storage_techs,vintage,dc_states,"maxFullCycles") <= storage_degradationParam(storage_techs,vintage,degradation_states,"maxFullCycles")),
10369              storage_unitsStateTracker(nodesModelSel,yearsToCalc-1,yearsCom,storage_techs,vintage,dc_states)
10370              + sum(years$(years.val < yearsToCalc.val), storage_unitsStateTrackerDecom(nodesModelSel,years,yearsCom,storage_techs,vintage,dc_states)));
10371   
10372  * // ### Storage Losses
10373  * // Accumulation of storage losses.
10374  * // {Eq_storage_losses}
10375  Eq_storage_losses(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,storage_techs,vintage,commodity)
10376      $storage_usedTechCom(nodesModelSel,yearsSel,storage_techs,vintage,commodity)
10377      ..
10378      storage_losses(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
10379      =e=
10380      - storage_level(timeModelToCalc--1,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
10381        * storage_sizeParam(storage_techs,vintage,commodity,"selfdischarge")
10382      + storage_sizeParam(storage_techs,vintage,commodity,"selfdischargeAbs")
10383      + (storage_techParam(storage_techs,vintage,"chargingLoss")
10384          /(1 - storage_techParam(storage_techs,vintage,"chargingLoss")))
10385        * storage_charge(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
10386          $(storage_techParam(storage_techs,vintage,"chargingLoss") > 0)
10387      + storage_techParam(storage_techs,vintage,"dischargingLoss")
10388        * storage_discharge(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
10389          $(storage_techParam(storage_techs,vintage,"dischargingLoss") > 0)
10390      - storage_sizeParam(storage_techs,vintage,commodity,"size")
10391        * sum(soc_states$(storage_usedTechSoCState(storage_techs,vintage,soc_states)
10392                          and storage_validSoCRange(storage_techs,vintage)),
10393              storage_unitsSoC(timeModelToCalc--1,nodesModelSel,yearsSel,storage_techs,vintage,soc_states)
10394              * storage_SoCParam(storage_techs,vintage,soc_states,"SoC")
10395              * storage_SoCParam(storage_techs,vintage,soc_states,"selfdischarge"));
10396   
10397  * // ### C-Rate Limit
10398  * // The increase in storage level per time step, i.e., the charging rate, is limited relative to the storage capacity.
10399  * // {Eq_storage_cRateLimit}
10400  Eq_storage_cRateLimit(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,storage_techs,vintage,commodity)
10401      $(storage_usedTechCom(nodesModelSel,yearsSel,storage_techs,vintage,commodity)
10402        and storage_techParam(storage_techs,vintage,"maxCRate") > 0)
10403      ..
10404      storage_level(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
10405      - storage_level(timeModelToCalc--1,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
10406      =l=
10407      storage_techParam(storage_techs,vintage,"maxCRate")
10408      * storage_sizeParam(storage_techs,vintage,commodity,"size")
10409      * storage_unitsTotal(nodesModelSel,yearsSel,storage_techs,vintage);
10410   
10411  * // ### E-Rate Limit
10412  * // The decrease in storage level per time step, i.e., the discharging rate, is limited relative to the storage capacity.
10413  * // {Eq_storage_eRateLimit}
10414  Eq_storage_eRateLimit(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,storage_techs,vintage,commodity)
10415      $(storage_usedTechCom(nodesModelSel,yearsSel,storage_techs,vintage,commodity)
10416        and storage_techParam(storage_techs,vintage,"maxERate") > 0)
10417      ..
10418      storage_level(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
10419      - storage_level(timeModelToCalc--1,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
10420      =g=
10421      - storage_techParam(storage_techs,vintage,"maxERate")
10422      * storage_sizeParam(storage_techs,vintage,commodity,"size")
10423      * storage_unitsTotal(nodesModelSel,yearsSel,storage_techs,vintage);
10424   
10425  * // ### Storage Charging
10426  * // Increases in storage levels are accounted as charging amounts.
10427  * // {Eq_storage_charge}
10428  Eq_storage_charge(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,storage_techs,vintage,commodity)
10429      $(storage_usedTechCom(nodesModelSel,yearsSel,storage_techs,vintage,commodity)
10430        and storage_techParam(storage_techs,vintage,"chargingLoss") > 0)
10431      ..
10432      storage_charge(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
10433      =g=
10434      storage_level(timeModelToCalc,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
10435      - storage_level(timeModelToCalc--1,nodesModelSel,yearsSel,storage_techs,vintage,commodity);
10436   
10437  * // ### Storage Discharging
10438  * // Decreases in storage levels are accounted as discharging amounts.
10439  * // {Eq_storage_discharge}
10440  Eq_storage_discharge(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,storage_techs,vintage,commodity)
10441      $(storage_usedTechCom(nodesModelSel,yearsSel,storage_techs,vintage,commodity)
10442        and storage_techParam(storage_techs,vintage,"dischargingLoss") > 0)
10443      ..
10444      storage_discharge(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
10445      =g=
10446      storage_level(timeModelToCalc--1,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
10447      - storage_level(timeModelToCalc,nodesModelSel,yearsSel,storage_techs,vintage,commodity);
10448   
10449  * // ### Storage Level Sum (degradation)
10450  * // The storage level is accounted individually by commissioning year in the case of degradation in order to prohibit the model to assign pre-existing storage cycles to newly built storage reservoirs and thereby avoiding degradation. All those storage levels represent the total storage level.
10451  * // {Eq_storage_levelStateSum}
10452  Eq_storage_levelStateSum(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
10453      $(storage_usedTechCom(nodesModelSel,yearsSel,storage_techs,vintage,commodity)
10454        and storage_techParam(storage_techs,vintage,"usageDegradation"))
10455      ..
10456      storage_level(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
10457      =e=
10458      sum(yearsCom, storage_levelPerAge(timeModelSel,nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,commodity));
10459   
10460  * // ### Storage Level Upper Limit per Age Group (degradation)
10461  * // Upper limit on the storage level per commissioning year if the storage technology accounts for degradation.
10462  * // {Eq_storage_levelUpperLimitPerAge}
10463  Eq_storage_levelUpperLimitPerAge(timeModelSel,nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,commodity)
10464      $(storage_usedTechCom(nodesModelSel,yearsSel,storage_techs,vintage,commodity)
10465        and storage_techParam(storage_techs,vintage,"usageDegradation"))
10466      ..
10467      storage_levelPerAge(timeModelSel,nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,commodity)
10468      =l=
10469      storage_techParam(storage_techs,vintage,"levelUpperLimit")
10470      * storage_sizeParam(storage_techs,vintage,commodity,"size")
10471      * sum(degradation_states,
10472              (storage_degradationParam(storage_techs,vintage,degradation_states,"remainingCapacity")
10473                - (yearsSel.val - yearsCom.val) * storage_techParam(storage_techs,vintage,"annualDegradation"))
10474                * storage_unitsStateTracker(nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,degradation_states));
10475   
10476  * // ### Storage Cycle Distribution to Degradation States per Commissioning Year (degradation)
10477  * // The charging amounts are converted to equivalent full cycles which then must be represented by an adequate distribution of degradation states.
10478  * // {Eq_storage_chargeBasedDegradationDistribution}
10479  alias(years, prev_years);
10480  Eq_storage_chargeBasedDegradationDistribution(nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,commodity)
10481      $(storage_usedTechCom(nodesModelSel,yearsSel,storage_techs,vintage,commodity)
10482        and storage_techParam(storage_techs,vintage,"usageDegradation"))
10483      ..
10484      sum(prev_years$(prev_years.val <= yearsSel.val), representedYears(prev_years)
10485          * sum(timeModel, storage_chargePerAge(timeModel,nodesModelSel,prev_years,yearsCom,storage_techs,vintage,commodity)))
10486      =l=
10487      storage_sizeParam(storage_techs,vintage,commodity,"size")
10488      * sum(dc_states$storage_usedDegradation(storage_techs,vintage,dc_states),
10489          storage_degradationParam(storage_techs,vintage,dc_states,"maxFullCycles")
10490          * (storage_unitsStateTracker(nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,dc_states)
10491             + sum(prev_years$(prev_years.val <= yearsSel.val), storage_unitsStateTrackerDecom(nodesModelSel,prev_years,yearsCom,storage_techs,vintage,dc_states))));
10492   
10493  * // ### Storage Charging per Commissioning Year (degradation)
10494  * // Increases in storage levels are accounted as charging amounts.
10495  * // {Eq_storage_chargingPerAge}
10496  Eq_storage_chargingPerAge(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,commodity)
10497      $(storage_usedTechCom(nodesModelSel,yearsSel,storage_techs,vintage,commodity)
10498        and storage_techParam(storage_techs,vintage,"usageDegradation"))
10499      ..
10500      storage_chargePerAge(timeModelSel,nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,commodity)
10501      =g=
10502      storage_levelPerAge(timeModelToCalc,nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,commodity)
10503      - storage_levelPerAge(timeModelToCalc--1,nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,commodity);
10504   
10505  * // ### Storage Unit Decommissioning States Sum (degradation)
10506  * // The number of decommissioned units in all degradation state must match the total decommissioning unit number.
10507  * // {Eq_storage_unitsDecomStateSum}
10508  Eq_storage_unitsDecomStateSum(nodesModelSel,yearsSel,storage_techs,vintage)
10509      $(storage_techParam(storage_techs,vintage,"usageDegradation"))
10510      ..
10511      storage_unitsDecom(nodesModelSel,yearsSel,storage_techs,vintage)
10512      =e=
10513      sum((yearsCom,degradation_states)$storage_usedDegradation(storage_techs,vintage,degradation_states),
10514          storage_unitsStateTrackerDecom(nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,degradation_states));
10515   
10516  * // ### Storage Unit Sequential Degradation (degradation)
10517  * // Only active degradation ranges, i.e., two neighboring degradation states, can be used.
10518  * // {Eq_storage_unitsDegradation}
10519  alias(degradation_states, degradation_states_a, degradation_states_b);
10520  Eq_storage_unitsDegradation(nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,degradation_states)
10521      $(storage_techParam(storage_techs,vintage,"usageDegradation")
10522        and storage_techParam(storage_techs,vintage,"sequentialDegradationStates"))
10523      ..
10524      sum(degradation_states_a$((storage_degradationParam(storage_techs,vintage,degradation_states_a,"maxFullCycles") = storage_degradationParam(storage_techs,vintage,degradation_states,"maxFullCycles")
10525                        or storage_degradationParam(storage_techs,vintage,degradation_states_a,"maxFullCycles")
10526                                         = smax(degradation_states_b$(storage_degradationParam(storage_techs,vintage,degradation_states_b,"maxFullCycles") < storage_degradationParam(storage_techs,vintage,degradation_states,"maxFullCycles")
10527                                                              and storage_usedDegradation(storage_techs,vintage,degradation_states_b)),
10528                                                              storage_degradationParam(storage_techs,vintage,degradation_states_b,"maxFullCycles")))
10529                        and storage_usedDegradation(storage_techs,vintage,degradation_states_a)),
10530          storage_unitsStateTracker_activeRange(nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,degradation_states_a))
10531      * storage_bigM(storage_techs,vintage)
10532      =g=
10533      storage_unitsStateTracker(nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,degradation_states);
10534   
10535  * // ### Storage Unit Sequential Degradation Range (degradation)
10536  * // Only one degradation range can be active.
10537  * // {Eq_storage_unitsDegradation_onlyOneRange}
10538  Eq_storage_unitsDegradation_onlyOneRange(nodesModelSel,yearsSel,yearsCom,storage_techs,vintage)
10539      $(storage_techParam(storage_techs,vintage,"usageDegradation") and storage_techParam(storage_techs,vintage,"sequentialDegradationStates"))
10540      ..
10541      sum(degradation_states$storage_usedDegradation(storage_techs,vintage,degradation_states),
10542            storage_unitsStateTracker_activeRange(nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,degradation_states))
10543      =e= 1;
10544   
10545  * // ### Storage Unit Sequential State of Charge (SoC)
10546  * // Only active state of charge ranges, i.e., two neighboring states of charge, can be used.
10547  * // {Eq_storage_unitsSoC}
10548  alias(soc_states, soc_states_a, soc_states_b);
10549  Eq_storage_unitsSoC(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,storage_techs,vintage,soc_states)
10550      $(storage_validSoCRange(storage_techs,vintage) and storage_techParam(storage_techs,vintage,"sequentialSoC"))
10551      ..
10552      sum(soc_states_a$((storage_SoCParam(storage_techs,vintage,soc_states_a,"SoC") = storage_SoCParam(storage_techs,vintage,soc_states,"SoC")
10553                        or storage_SoCParam(storage_techs,vintage,soc_states_a,"SoC")
10554                                         = smax(soc_states_b$(storage_SoCParam(storage_techs,vintage,soc_states_b,"SoC") < storage_SoCParam(storage_techs,vintage,soc_states,"SoC")
10555                                                              and storage_usedTechSoCState(storage_techs,vintage,soc_states_b)),
10556                                                              storage_SoCParam(storage_techs,vintage,soc_states_b,"SoC")))
10557                        and storage_usedTechSoCState(storage_techs,vintage,soc_states_a)),
10558          storage_unitsSoC_activeRange(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,soc_states_a))
10559      * storage_bigM(storage_techs,vintage)
10560      =g=
10561      storage_unitsSoC(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,soc_states);
10562   
10563  * // ### Storage Unit Sequential State of Charge Range (SoC)
10564  * // Only one state of charge range can be active.
10565  * // {Eq_storage_unitsSoC_onlyOneRange}
10566  Eq_storage_unitsSoC_onlyOneRange(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,storage_techs,vintage)
10567      $(storage_validSoCRange(storage_techs,vintage) and storage_techParam(storage_techs,vintage,"sequentialSoC"))
10568      ..
10569      sum(soc_states$storage_usedTechSoCState(storage_techs,vintage,soc_states),
10570            storage_unitsSoC_activeRange(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,soc_states)) =e= 1;
10571   
10572  * // ### Storage Unit State of Charge Sum (SoC)
10573  * // Each storage unit must have one state of charge.
10574  * // {Eq_storage_unitsSoC_sum}
10575  Eq_storage_unitsSoC_sum(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,storage_techs,vintage)
10576      $storage_validSoCRange(storage_techs,vintage)
10577      ..
10578      storage_unitsTotal(nodesModelSel,yearsSel,storage_techs,vintage)
10579      =e=
10580      sum(soc_states$storage_usedTechSoCState(storage_techs,vintage,soc_states),
10581            storage_unitsSoC(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,soc_states));
10582   
10583  * // ### Storage Level State of Charge Sum (SoC)
10584  * // The total storage level must be represented by units in their specific states of charge.
10585  * // {Eq_storage_levelSoC}
10586  Eq_storage_levelSoC(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,storage_techs,vintage,commodity)
10587      $(storage_validSoCRange(storage_techs,vintage) and storage_usedTechCom(nodesModelSel,yearsSel,storage_techs,vintage,commodity))
10588      ..
10589      storage_level(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
10590      =e=
10591      storage_sizeParam(storage_techs,vintage,commodity,"size")
10592      * sum(soc_states$storage_usedTechSoCState(storage_techs,vintage,soc_states),
10593              storage_unitsSoC(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,soc_states)
10594              * storage_SoCParam(storage_techs,vintage,soc_states,"SoC"));
10595   
10596  * // ### C-Rate Limit (SoC)
10597  * // The increase in storage level per time step, i.e., the charging rate, is limited relative to the storage capacity. The coefficients can vary between states of charge.
10598  * // {Eq_storage_cRateLimit_SoC}
10599  Eq_storage_cRateLimit_SoC(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,storage_techs,vintage,commodity)
10600      $(storage_usedTechCom(nodesModelSel,yearsSel,storage_techs,vintage,commodity)
10601        and storage_validSoCRange(storage_techs,vintage)
10602        and sum(soc_states, storage_SoCParam(storage_techs,vintage,soc_states,"cRate")) < inf)
10603      ..
10604      storage_level(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
10605      - storage_level(timeModelToCalc--1,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
10606      =l=
10607      storage_sizeParam(storage_techs,vintage,commodity,"size")
10608      * sum(soc_states$storage_usedTechSoCState(storage_techs,vintage,soc_states),
10609                      storage_SoCParam(storage_techs,vintage,soc_states,"cRate")
10610                      * storage_unitsSoC(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,soc_states));
10611   
10612  * // ### E-Rate Limit (SoC)
10613  * // The decrease in storage level per time step, i.e., the discharging rate, is limited relative to the storage capacity. The coefficients can vary between states of charge.
10614  * // {Eq_storage_cRateLimit_SoC}
10615  Eq_storage_eRateLimit_SoC(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,storage_techs,vintage,commodity)
10616      $(storage_usedTechCom(nodesModelSel,yearsSel,storage_techs,vintage,commodity)
10617        and storage_validSoCRange(storage_techs,vintage)
10618        and sum(soc_states, storage_SoCParam(storage_techs,vintage,soc_states,"eRate")) < inf)
10619      ..
10620      storage_level(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
10621      - storage_level(timeModelToCalc--1,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
10622      =g=
10623      - storage_sizeParam(storage_techs,vintage,commodity,"size")
10624      * sum(soc_states$storage_usedTechSoCState(storage_techs,vintage,soc_states),
10625                      storage_SoCParam(storage_techs,vintage,soc_states,"eRate")
10626                      * storage_unitsSoC(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,soc_states));
10627   
10628   
10629  * ==== model definition ====
10630   
10631  Model M_storage
10632  /
10633    Eq_storage_unitsBalance
10634    Eq_storage_unitsFixedDecom
10635    Eq_storage_unitsFreeDecom
10636    Eq_storage_unitsLowerLimit
10637    Eq_storage_unitsUpperLimit
10638    Eq_storage_levelUpperLimit_degradation
10639    Eq_storage_unitsTotalMIP
10640    Eq_storage_levelLowerLimit
10641    Eq_storage_levelUpperLimit
10643    Eq_storage_losses
10645    Eq_storage_unitsBalanceStates
10646    Eq_storage_unitsUpperLimitPerState
10647    Eq_storage_unitsStatesNoRecovery
10648    Eq_storage_cRateLimit
10649    Eq_storage_eRateLimit
10650    Eq_storage_charge
10651    Eq_storage_discharge
10652    Eq_storage_levelStateSum
10653    Eq_storage_levelUpperLimitPerAge
10654    Eq_storage_chargeBasedDegradationDistribution
10655    Eq_storage_chargingPerAge
10656    Eq_storage_unitsDecomStateSum
10657    Eq_storage_unitsDegradation
10658    Eq_storage_unitsDegradation_onlyOneRange
10659   
10660    Eq_storage_unitsSoC
10661    Eq_storage_unitsSoC_sum
10662    Eq_storage_unitsSoC_onlyOneRange
10663    Eq_storage_levelSoC
10664    Eq_storage_cRateLimit_SoC
10665    Eq_storage_eRateLimit_SoC
10666  /;
INCLUDE    C:\Local\REMix\framework\remix\framework\model\source\core\transfer.gms
10668  * SPDX-FileCopyrightText: Copyright (c) 2023 German Aerospace Center (DLR)
10669  * SPDX-License-Identifier: BSD-3-Clause
10670   
10671  * // # core_transfer
10672  * // The equations in this file describe the commodity transfer in the model.
10673   
10674  * // ## Variables
10675  * // {special_table_transfer_variables}
10678   
10683   
10943   
10944  parameter transfer_linksParam(linksModel,years,transfer_techs,pc_transfer_linksParam);
10945  transfer_linksParam(linksModelToCalc,years,transfer_techs,pc_transfer_linksParam)
10946      = sum(linksData$links_aggregate(linksModelToCalc,linksData), transfer_linksParamIn(linksData,years,transfer_techs,pc_transfer_linksParam));
10947   
10948  * // ## Load links from gdx file
10950   
10951   
10952  set transfer_hasflowProfileIn(linksData,years,transfer_techs,pc_transfer_flowProfile);
10953  option transfer_hasflowProfileIn < transfer_flowProfileIn;
10954   
10955  * === modify transfer_flowProfileIn vector to fill with default values, in case profile is not specified ===
10956  transfer_linksParamIn(linksData,years,transfer_techs,"flowAlongLimit")
10957      $(not transfer_linksParamIn(linksData,years,transfer_techs,"limitFlows"))
10958      = 1;
10959   
10960  transfer_linksParamIn(linksData,years,transfer_techs,"flowAgainstLimit")
10961      $(not transfer_linksParamIn(linksData,years,transfer_techs,"limitFlows"))
10962      = 1;
10963   
10964  transfer_flowProfileIn(timeData,linksData,years,transfer_techs,"along")
10965      $(not transfer_hasflowProfileIn(linksData,years,transfer_techs,"along"))
10966      = transfer_linksParamIn(linksData,years,transfer_techs,"flowAlongLimit");
10967   
10968  transfer_flowProfileIn(timeData,linksData,years,transfer_techs,"against")
10969      $(not transfer_hasflowProfileIn(linksData,years,transfer_techs,"against"))
10970      = transfer_linksParamIn(linksData,years,transfer_techs,"flowAgainstLimit");
10971   
10972  * aggregate time dimension
10973  parameter transfer_flowProfileIn_aggTime(timeModel,linksData,yearsToCalc,transfer_techs,pc_transfer_flowProfile);
10974  transfer_flowProfileIn_aggTime(timeModelToCalc,linksData,yearsToCalc,transfer_techs,pc_transfer_flowProfile)
10975    = sum(timeData$timeMapping(timeData,timeModelToCalc),
10976            transfer_flowProfileIn(timeData,linksData,yearsToCalc,transfer_techs,pc_transfer_flowProfile)
10977            / timeLength(timeModelToCalc));
10978  option clear = transfer_flowProfileIn;
10979   
10980   
10981  set transfer_finiteLinkLimit(linksModel,years,transfer_techs);
10982  transfer_finiteLinkLimit(linksModelToCalc,yearsToCalc,transfer_techs)
10983      = sum(linksData$links_aggregate(linksModelToCalc,linksData), transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"linksUpperLimit")) > 0
10984          and sum(linksData$links_aggregate(linksModelToCalc,linksData), transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"linksUpperLimit")) < inf;
10985   
10986  set transfer_infiniteLinkLimit(linksModel,years,transfer_techs);
10987  transfer_infiniteLinkLimit(linksModelToCalc,yearsToCalc,transfer_techs)
10988      = sum(linksData$links_aggregate(linksModelToCalc,linksData), transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"linksUpperLimit")) = inf;
10990   
10991  parameter transfer_lengthParam(linksModel,link_types,pc_transfer_lengthParam);
10992  transfer_lengthParam(linksModelToCalc,link_types,pc_transfer_lengthParam)
10993      = sum(linksData$links_aggregate(linksModelToCalc,linksData), transfer_lengthParamIn(linksData,link_types,pc_transfer_lengthParam))
10994          / sum(linksData$links_aggregate(linksModelToCalc,linksData), 1);
10995   
10996  parameter transfer_gridSegments(linksModel,transfer_techs,gridSegments,pc_transfer_gridSegments);
10997  transfer_gridSegments(linksModelToCalc,transfer_techs,gridSegments,pc_transfer_gridSegments)
10998      = smax(linksData$links_aggregate(linksModelToCalc,linksData), transfer_gridSegmentsIn(linksData,transfer_techs,gridSegments,pc_transfer_gridSegments));
10999   
11000  parameter transfer_dcopf_Xtech(linksModel,years,transfer_techs,vintage,gridSegments);
11001  transfer_dcopf_Xtech(linksModelToCalc,yearsToCalc,transfer_techs,vintage,gridSegments)
11002      $(transfer_gridSegments(linksModelToCalc,transfer_techs,gridSegments,"useDCopf")
11003          and transfer_linksParam(linksModelToCalc,yearsToCalc,transfer_techs,"circuits") > 0
11004          and sum(link_types, transfer_reactPerLength(transfer_techs,vintage,link_types,"reactPerLength")) > 0 )
11005      = (1 / sum(linksData
11006                  $links_aggregate(linksModelToCalc,linksData),
11007              1 / ( sum(link_types,
11008                          transfer_lengthParamIn(linksData,link_types,"length")
11009                          * transfer_reactPerLength(transfer_techs,vintage,link_types,"reactPerLength"))
11010                      / transfer_linksParam(linksModelToCalc,yearsToCalc,transfer_techs,"circuits"))));
11011   
11012  set transfer_hasflowProfile(linksModel,years,transfer_techs,pc_transfer_flowProfile);
11013  transfer_hasflowProfile(linksModelToCalc,yearsToCalc,transfer_techs,pc_transfer_flowProfile)
11014      = sum(linksData$links_aggregate(linksModelToCalc,linksData),
11015              transfer_hasflowProfileIn(linksData,yearsToCalc,transfer_techs,pc_transfer_flowProfile));
11016   
11017  * ==== parameter modifications ====
11018  transfer_linksParam(linksModelToCalc,yearsToCalc,transfer_techs,"linksLowerLimit")
11019      $sum(vintage, transfer_techParam(transfer_techs,vintage,"mipLinks"))
11020      = floor(transfer_linksParam(linksModelToCalc,yearsToCalc,transfer_techs,"linksLowerLimit"));
11021  transfer_linksParam(linksModelToCalc,yearsToCalc,transfer_techs,"linksUpperLimit")
11022      $sum(vintage, transfer_techParam(transfer_techs,vintage,"mipLinks"))
11023      = ceil(transfer_linksParam(linksModelToCalc,yearsToCalc,transfer_techs,"linksUpperLimit"));
11024   
11025   
11026  * ==== calculation of mappings ====
11027   
11028  * Technologies with a lifeTime > 0 are available
11029  set transfer_availTech(linksModel,years,transfer_techs,vintage);
11030  transfer_availTech(linksModel,years,transfer_techs,vintage)
11031      $(vintage.val = smax(vintage_a$(vintage_a.val <= years.val
11032          and transfer_techParam(transfer_techs,vintage_a,"lifeTime") > 0), vintage_a.val)) = yes;
11033   
11034  * Technologies to optimize become unavailable if they have an linksUpperLimit of 0
11035  transfer_availTech(linksModelToCalc,years,transfer_techs,vintage)
11036      $(yearsToCalc(years) and transfer_linksParam(linksModelToCalc,years,transfer_techs,"linksUpperLimit") = 0 ) = no;
11037   
11038  * Technologies already built become unavailable if they have an linksBuild of 0
11039  transfer_availTech(linksModelToCalc,years,transfer_techs,vintage)
11040      $( ( not yearsToCalc(years)) and transfer_linksParam(linksModelToCalc,years,transfer_techs,"linksBuild") = 0 ) = no;
11041   
11042  * Used technologies are available technologies over their technical lifeTime
11043  set transfer_usedTech(linksModel,years,transfer_techs,vintage);
11044  transfer_usedTech(linksModelToCalc,years,transfer_techs,vintage)
11045      $(vintage.val <= years.val
11046          and years.val < smax(years_a$transfer_availTech(linksModelToCalc,years_a,transfer_techs,vintage),
11047                                  years_a.val + transfer_techParam(transfer_techs,vintage,"lifeTime"))
11048          ) = yes;
11049   
11050  * Technologies have to be decomissioned in the interval of first avail + lifetime to last avail + lifetime
11051  set transfer_decomTech(linksModel,years,transfer_techs,vintage);
11052  transfer_decomTech(linksModel,years,transfer_techs,vintage)
11053    $(sum(years_a$transfer_usedTech(linksModel,years_a,transfer_techs,vintage), 1)
11054      and sum(yearsToCalc
11055        $(sameas(years, yearsToCalc)
11056          and yearsToCalc.val >= smin(years_a$transfer_availTech(linksModel,years_a,transfer_techs,vintage), years_a.val) + transfer_techParam(transfer_techs,vintage,"lifeTime")
11057          and yearsToCalc.val <= smax(years_a$transfer_availTech(linksModel,years_a,transfer_techs,vintage), years_a.val) + transfer_techParam(transfer_techs,vintage,"lifeTime")), 1))
11058    = yes;
11059   
11060  * Extend the decom frame to the year after the last year of usedTech
11061  transfer_decomTech(linksModel,yearsToCalc,transfer_techs,vintage)
11062    $(transfer_usedTech(linksModel,yearsToCalc-1,transfer_techs,vintage)
11063      and transfer_decomTech(linksModel,yearsToCalc-1,transfer_techs,vintage))
11064    = yes;
11065   
11066  parameter transfer_flowProfile(timeModel,linksModel,years,transfer_techs,vintage,pc_transfer_flowProfile);
11067   
11068  transfer_flowProfile(timeModelToCalc,linksModelToCalc,yearsToCalc,transfer_techs,vintage,"along")
11069      $transfer_finiteLinkLimit(linksModelToCalc,yearsToCalc,transfer_techs)
11070      = (sum(linksData$(links_aggregate(linksModelToCalc,linksData)
11071                       and transfer_incidenceData_flip(linksData) = 1),
11072              transfer_flowProfileIn_aggTime(timeModelToCalc,linksData,yearsToCalc,transfer_techs,"along")
11073              * transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"linksUpperLimit"))
11074          + sum(linksData$(links_aggregate(linksModelToCalc,linksData)
11075                          and transfer_incidenceData_flip(linksData) = -1),
11076              transfer_flowProfileIn_aggTime(timeModelToCalc,linksData,yearsToCalc,transfer_techs,"against")
11077              * transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"linksUpperLimit")))
11078      / sum(linksData$links_aggregate(linksModelToCalc,linksData),
11079              transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"linksUpperLimit"));
11080   
11081  transfer_flowProfile(timeModelToCalc,linksModelToCalc,yearsToCalc,transfer_techs,vintage,"against")
11082      $transfer_finiteLinkLimit(linksModelToCalc,yearsToCalc,transfer_techs)
11083      = (sum(linksData$(links_aggregate(linksModelToCalc,linksData)
11084                       and transfer_incidenceData_flip(linksData) = 1),
11085              transfer_flowProfileIn_aggTime(timeModelToCalc,linksData,yearsToCalc,transfer_techs,"against")
11086              * transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"linksUpperLimit"))
11087          + sum(linksData$(links_aggregate(linksModelToCalc,linksData)
11088                          and transfer_incidenceData_flip(linksData) = -1),
11089              transfer_flowProfileIn_aggTime(timeModelToCalc,linksData,yearsToCalc,transfer_techs,"along")
11090              * transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"linksUpperLimit")))
11091      / sum(linksData$links_aggregate(linksModelToCalc,linksData),
11092              transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"linksUpperLimit"));
11093   
11094  transfer_flowProfile(timeModelToCalc,linksModelToCalc,yearsToCalc,transfer_techs,vintage,"along")
11095      $transfer_infiniteLinkLimit(linksModelToCalc,yearsToCalc,transfer_techs)
11096      = (sum(linksData$(links_aggregate(linksModelToCalc,linksData)
11097                       and transfer_incidenceData_flip(linksData) = 1
11098                       and transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"linksUpperLimit") = inf ),
11099              transfer_flowProfileIn_aggTime(timeModelToCalc,linksData,yearsToCalc,transfer_techs,"along"))
11100          + sum(linksData$(links_aggregate(linksModelToCalc,linksData)
11101                          and transfer_incidenceData_flip(linksData) = -1
11102                          and transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"linksUpperLimit") = inf ),
11103              transfer_flowProfileIn_aggTime(timeModelToCalc,linksData,yearsToCalc,transfer_techs,"against")))
11104      / sum(linksData$(links_aggregate(linksModelToCalc,linksData)
11105                      and transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"linksUpperLimit") = inf ),
11106              1);
11107   
11108  transfer_flowProfile(timeModelToCalc,linksModelToCalc,yearsToCalc,transfer_techs,vintage,"against")
11109      $transfer_infiniteLinkLimit(linksModelToCalc,yearsToCalc,transfer_techs)
11110      = (sum(linksData$(links_aggregate(linksModelToCalc,linksData)
11111                       and transfer_incidenceData_flip(linksData) = 1
11112                       and transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"linksUpperLimit") = inf ),
11113              transfer_flowProfileIn_aggTime(timeModelToCalc,linksData,yearsToCalc,transfer_techs,"against"))
11114          + sum(linksData$(links_aggregate(linksModelToCalc,linksData)
11115                          and transfer_incidenceData_flip(linksData) = -1
11116                          and transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"linksUpperLimit") = inf ),
11117              transfer_flowProfileIn_aggTime(timeModelToCalc,linksData,yearsToCalc,transfer_techs,"along")))
11118      / sum(linksData$(links_aggregate(linksModelToCalc,linksData)
11119                      and transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"linksUpperLimit") = inf ),
11120              1);
11121  option clear = transfer_flowProfileIn_aggTime;
11122   
11123  * Orientation of links affects the flowAlongLimit/flowAgainstLimit
11124   
11125  transfer_linksParam(linksModelToCalc,years,transfer_techs,"flowAlongLimit")
11126      $transfer_finiteLinkLimit(linksModelToCalc,years,transfer_techs)
11127      = (sum(linksData$(links_aggregate(linksModelToCalc,linksData)
11128                       and transfer_incidenceData_flip(linksData) = 1),
11129              transfer_linksParamIn(linksData,years,transfer_techs,"flowAlongLimit")
11130              * transfer_linksParamIn(linksData,years,transfer_techs,"linksUpperLimit"))
11131          + sum(linksData$(links_aggregate(linksModelToCalc,linksData)
11132                          and transfer_incidenceData_flip(linksData) = -1),
11133              transfer_linksParamIn(linksData,years,transfer_techs,"flowAgainstLimit")
11134              * transfer_linksParamIn(linksData,years,transfer_techs,"linksUpperLimit")))
11135      / sum(linksData$links_aggregate(linksModelToCalc,linksData),
11136              transfer_linksParamIn(linksData,years,transfer_techs,"linksUpperLimit"));
11137   
11138  transfer_linksParam(linksModelToCalc,years,transfer_techs,"flowAgainstLimit")
11139      $transfer_finiteLinkLimit(linksModelToCalc,years,transfer_techs)
11140      = (sum(linksData$(links_aggregate(linksModelToCalc,linksData)
11141                       and transfer_incidenceData_flip(linksData) = -1),
11142              transfer_linksParamIn(linksData,years,transfer_techs,"flowAlongLimit")
11143              * transfer_linksParamIn(linksData,years,transfer_techs,"linksUpperLimit"))
11144          + sum(linksData$(links_aggregate(linksModelToCalc,linksData)
11145                          and transfer_incidenceData_flip(linksData) = 1),
11146              transfer_linksParamIn(linksData,years,transfer_techs,"flowAgainstLimit")
11147              * transfer_linksParamIn(linksData,years,transfer_techs,"linksUpperLimit")))
11148      / sum(linksData$links_aggregate(linksModelToCalc,linksData),
11149              transfer_linksParamIn(linksData,years,transfer_techs,"linksUpperLimit"));
11150   
11151  transfer_linksParam(linksModelToCalc,years,transfer_techs,"flowAlongLimit")
11152      $transfer_infiniteLinkLimit(linksModelToCalc,years,transfer_techs)
11153      = (sum(linksData$(links_aggregate(linksModelToCalc,linksData)
11154                       and transfer_incidenceData_flip(linksData) = 1
11155                       and transfer_linksParamIn(linksData,years,transfer_techs,"linksUpperLimit") = inf),
11156              transfer_linksParamIn(linksData,years,transfer_techs,"flowAlongLimit"))
11157          + sum(linksData$(links_aggregate(linksModelToCalc,linksData)
11158                          and transfer_incidenceData_flip(linksData) = -1
11159                          and transfer_linksParamIn(linksData,years,transfer_techs,"linksUpperLimit") = inf),
11160              transfer_linksParamIn(linksData,years,transfer_techs,"flowAgainstLimit")))
11161      / sum(linksData$(links_aggregate(linksModelToCalc,linksData)
11162                      and transfer_linksParamIn(linksData,years,transfer_techs,"linksUpperLimit") = inf ),
11163              1);
11164   
11165  transfer_linksParam(linksModelToCalc,years,transfer_techs,"flowAgainstLimit")
11166      $transfer_infiniteLinkLimit(linksModelToCalc,years,transfer_techs)
11167      = (sum(linksData$(links_aggregate(linksModelToCalc,linksData)
11168                       and transfer_incidenceData_flip(linksData) = -1
11169                       and transfer_linksParamIn(linksData,years,transfer_techs,"linksUpperLimit") = inf),
11170              transfer_linksParamIn(linksData,years,transfer_techs,"flowAlongLimit"))
11171          + sum(linksData$(links_aggregate(linksModelToCalc,linksData)
11172                          and transfer_incidenceData_flip(linksData) = 1
11173                          and transfer_linksParamIn(linksData,years,transfer_techs,"linksUpperLimit") = inf),
11174              transfer_linksParamIn(linksData,years,transfer_techs,"flowAgainstLimit")))
11175      / sum(linksData$(links_aggregate(linksModelToCalc,linksData)
11176                      and transfer_linksParamIn(linksData,years,transfer_techs,"linksUpperLimit") = inf ),
11177              1);
11178   
11179  * Mapping for grid segments using DC optimal power flow
11180  set gridSegments_dcopf(linksModel,transfer_techs,gridSegments);
11181  gridSegments_dcopf(linksModelToCalc,transfer_techs,gridSegments)
11182      $transfer_gridSegments(linksModelToCalc,transfer_techs,gridSegments,"useDCopf")
11184      = yes;
11186   
11187  * Ensure each grid segment uses exactly one commodity
11188  parameter checkGridSegmentCommodities(gridSegments);
11189  checkGridSegmentCommodities(gridSegments)
11190      = sum (commodity$(sum((linksModelToCalc,transfer_techs,vintage)
11191                              $( transfer_coefficient(transfer_techs,vintage,commodity,"coefficient") > 0
11192                                  and gridSegments_dcopf(linksModelToCalc,transfer_techs,gridSegments)) , 1) > 0), 1);
11193   
11194  parameter transfer_incidenceSegments(nodesModel,linksModel,years,gridSegments);
11195  transfer_incidenceSegments(nodesModelToCalc,linksModelToCalc,yearsToCalc,gridSegments)
11196      $(sum((transfer_techs,vintage)$(transfer_usedTech(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
11197                                          and gridSegments_dcopf(linksModelToCalc,transfer_techs,gridSegments)
11198                                          and transfer_incidenceModel(nodesModelToCalc,linksModelToCalc) <> 0), 1) > 0)
11199      = transfer_incidenceModel(nodesModelToCalc,linksModelToCalc);
11200   
11201   
11205   
11206  scalar transfer_enableMIP;
11207  transfer_enableMIP = sum(transfer_usedTech(linksModelToCalc,yearsToCalc,transfer_techs,vintage)$transfer_techParam(transfer_techs,vintage,"mipLinks"), 1 );
11208   
11209   
11210  * ==== definition of variables ====
11211   
11212  * Initialise variables for linksBuild
11213  transfer_linksBuild.l(linksModel,years,transfer_techs,vintage)
11214      $transfer_availTech(linksModel,years,transfer_techs,vintage)
11215      = transfer_linksParam(linksModel,years,transfer_techs,"linksBuild");
11216  transfer_linksBuild.lo(linksModel,yearsToCalc,transfer_techs,vintage)
11217      $transfer_availTech(linksModel,yearsToCalc,transfer_techs,vintage)
11218      = transfer_linksBuild.l(linksModel,yearsToCalc,transfer_techs,vintage);
11219  transfer_linksBuild.fx(linksModel,years,transfer_techs,vintage)
11220      $transfer_linksParam(linksModel,years,transfer_techs,"noExpansion")
11221      = transfer_linksBuild.l(linksModel,years,transfer_techs,vintage);
11222   
11223  * Initialise variables for linksDecom
11224  transfer_linksDecom.l(linksModel,years,transfer_techs,vintage)
11225      $(transfer_decomTech(linksModel,years,transfer_techs,vintage)
11226        and years.val < sum(yearsToCalc$(ord(yearsToCalc) = 1), yearsToCalc.val))
11227      = sum((years_a,years_aa)$(sameas(years-1, years_aa)
11228                        and years_a.val > years_aa.val - transfer_techParam(transfer_techs,vintage,'lifeTime')
11229                        and years_a.val <= years.val - transfer_techParam(transfer_techs,vintage,'lifeTime')
11230                        and transfer_availTech(linksModel,years_a,transfer_techs,vintage)),
11231          transfer_linksBuild.l(linksModel,years_a,transfer_techs,vintage));
11232   
11233  transfer_linksDecom.l(linksModel,yearsToCalc,transfer_techs,vintage)
11234    $transfer_decomTech(linksModel,yearsToCalc,transfer_techs,vintage)
11235    = sum(years$
11236          (years.val < sum(yearsToCalc_a$(ord(yearsToCalc_a) = 1), yearsToCalc_a.val)
11237            and transfer_availTech(linksModel,years,transfer_techs,vintage)
11238            and years.val > sum(years_a$sameas(years_a, yearsToCalc-1), years_a.val) - transfer_techParam(transfer_techs,vintage,'lifeTime')
11239            and years.val <= yearsToCalc.val - transfer_techParam(transfer_techs,vintage,'lifeTime')),
11240        transfer_linksBuild.l(linksModel,years,transfer_techs,vintage))
11241      + sum(yearsToCalc_a$
11242          (yearsToCalc_a.val < sum(yearsToCalc_aa$(ord(yearsToCalc_aa) > 1), yearsToCalc_a.val)
11243            and transfer_availTech(linksModel,yearsToCalc_a,transfer_techs,vintage)
11244            and yearsToCalc_a.val > sum(years_a$sameas(years_a, yearsToCalc-1), years_a.val) - transfer_techParam(transfer_techs,vintage,'lifeTime')
11245            and yearsToCalc_a.val <= yearsToCalc.val - transfer_techParam(transfer_techs,vintage,'lifeTime')),
11246        transfer_linksBuild.l(linksModel,yearsToCalc_a,transfer_techs,vintage));
11247        ;
11248   
11249  transfer_linksDecom.lo(linksModel,yearsToCalc,transfer_techs,vintage)
11250      $(transfer_usedTech(linksModel,yearsToCalc,transfer_techs,vintage)
11251          and not transfer_techParam(transfer_techs,vintage,"freeDecom"))
11252      = transfer_linksDecom.l(linksModel,yearsToCalc,transfer_techs,vintage)
11253   
11254  * Calculate planned transfer links expansion
11255  parameter transfer_linksPlanned(linksModel,years,transfer_techs,vintage);
11256  transfer_linksPlanned(linksModel,years,transfer_techs,vintage) = 0;
11257  loop(years,
11258    transfer_linksPlanned(linksModel,years,transfer_techs,vintage)
11259      =
11260      transfer_linksPlanned(linksModel,years-1,transfer_techs,vintage)
11261          $transfer_usedTech(linksModel,years-1,transfer_techs,vintage)
11262      + transfer_linksBuild.l(linksModel,years,transfer_techs,vintage)
11263          $transfer_availTech(linksModel,years,transfer_techs,vintage)
11264      - transfer_linksDecom.l(linksModel,years,transfer_techs,vintage)
11265          $transfer_usedTech(linksModel,years,transfer_techs,vintage);
11266  );
11267   
11268  * Set initial state for planned units
11269  transfer_linksTotal.l(linksModel,years,transfer_techs,vintage)
11270    = transfer_linksPlanned(linksModel,years,transfer_techs,vintage)
11271   
11272  * Calculate if planned links expansion is bound by upper and lower limits
11273  set transfer_linkBoundsFixed(linksModel,years,transfer_techs);
11274  transfer_linkBoundsFixed(linksModel,years,transfer_techs)
11275    $(sum(vintage$transfer_usedTech(linksModel,years,transfer_techs,vintage),
11276          transfer_linksPlanned(linksModel,years,transfer_techs,vintage))
11277      = transfer_linksParam(linksModel,years,transfer_techs,"linksUpperLimit")
11278    and sum(vintage$transfer_usedTech(linksModel,years,transfer_techs,vintage),
11279          transfer_linksPlanned(linksModel,years,transfer_techs,vintage))
11280      = transfer_linksParam(linksModel,years,transfer_techs,"linksLowerLimit"))
11281    = yes;
11282   
11283  * Fix linksBuild, linksDecom, linksTotal if levels are predetermined by upper and lower limits
11284  transfer_linksBuild.fx(linksModel,years,transfer_techs,vintage)
11285    $(transfer_availTech(linksModel,years,transfer_techs,vintage)
11286      and transfer_linkBoundsFixed(linksModel,years,transfer_techs))
11287    = transfer_linksBuild.l(linksModel,years,transfer_techs,vintage);
11288  transfer_linksDecom.fx(linksModel,years,transfer_techs,vintage)
11289    $(transfer_usedTech(linksModel,years,transfer_techs,vintage)
11290      and transfer_linkBoundsFixed(linksModel,years,transfer_techs))
11291    = transfer_linksDecom.l(linksModel,years,transfer_techs,vintage);
11292  transfer_linksTotal.fx(linksModel,years,transfer_techs,vintage)
11293    $(transfer_usedTech(linksModel,years,transfer_techs,vintage)
11294      and transfer_linkBoundsFixed(linksModel,years,transfer_techs))
11295    = transfer_linksTotal.l(linksModel,years,transfer_techs,vintage);
11296   
11297  transfer_linksTotal_MIP.up(linksModel,years,transfer_techs,vintage)
11298      $(transfer_usedTech(linksModel,years,transfer_techs,vintage)
11299        and transfer_techParam(transfer_techs,vintage,"miplinks") = 1)
11300      = transfer_linksParam(linksModel,years,transfer_techs,"linksUpperLimit");
11301   
11302  * Add parameter for fixing capacities during myopic runs
11303  parameter transfer_linksDelta(linksModel,years,transfer_techs);
11304   
11305   
11306  * ==== declaration of equations ====
11307   
11308  equations
11309    Eq_transfer_linksBalance(linksModel,years,transfer_techs,vintage
11310      ) "Ensures the links balance over the planning period."
11311    Eq_transfer_linksFixedDecom(linksModel,years,transfer_techs,vintage
11312      ) "Restricts the fixed decommissioning of links over the planning period."
11313    Eq_transfer_linksFreeDecom(linksModel,years,transfer_techs,vintage
11314      ) "Restricts the free decommissioning of links over the planning period."
11315    Eq_transfer_linksUpperLimit(linksModel,years,transfer_techs
11316      ) "Upper bound for the total number of links."
11317    Eq_transfer_linksLowerLimit(linksModel,years,transfer_techs
11318      ) "Lower bound for the total number of links."
11319    Eq_transfer_linksTotalMIP(linksModel,years,transfer_techs,vintage
11320      ) "Fixes the total number of links to the corresponding integer variable."
11321   
11322    Eq_transfer_flowAlongUpperLimit(timeModel,linksModel,years,transfer_techs,vintage
11323      ) "Upper bound for the flow along the transfer links."
11324    Eq_transfer_flowAgainstUpperLimit(timeModel,linksModel,years,transfer_techs,vintage
11325      ) "Upper bound for the flow against the transfer links."
11326    Eq_transfer_dcopf_angleFlows(timeModel,linksModel,years,gridSegments
11327      )
11328    Eq_transfer_dcopf_cycleFlows(timeModel,years,cycles,gridSegments
11329      )
11330    ;
11331   
11332   
11333  * ==== equation definition ====
11334  * // ## Equations
11335  * // ### Transfer Links Balance
11336  * // Ensures that the transfer between nodes is balanced.
11337  * // {Eq_transfer_linksBalance}
11338  Eq_transfer_linksBalance(linksModelToCalc,yearsSel,transfer_techs,vintage)
11339      $((transfer_usedTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
11340            or sum(years$sameas(years,yearsSel), transfer_usedTech(linksModelToCalc,years-1,transfer_techs,vintage)))
11341          and not transfer_linkBoundsFixed(linksModelToCalc,yearsSel,transfer_techs))
11342      ..
11343      transfer_linksTotal(linksModelToCalc,yearsSel,transfer_techs,vintage)
11344      =e=
11345      sum(yearsToCalc$(ord(yearsToCalc) = 1 and sameas(yearsToCalc, yearsSel)),
11346        sum(years$sameas(years, yearsToCalc),
11347          transfer_linksTotal(linksModelToCalc,years-1,transfer_techs,vintage)
11348            $transfer_usedTech(linksModelToCalc,years-1,transfer_techs,vintage)))
11349      + sum((yearsToCalc)$(ord(yearsToCalc) > 1 and sameas(yearsToCalc, yearsSel)),
11350        transfer_linksTotal(linksModelToCalc,yearsToCalc-1,transfer_techs,vintage)
11351          $transfer_usedTech(linksModelToCalc,yearsToCalc-1,transfer_techs,vintage))
11352      + transfer_linksBuild(linksModelToCalc,yearsSel,transfer_techs,vintage)
11353          $transfer_availTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
11354      - transfer_linksDecom(linksModelToCalc,yearsSel,transfer_techs,vintage)
11355          $transfer_usedTech(linksModelToCalc,yearsSel,transfer_techs,vintage);
11356   
11357  * // ### Transfer Links Fixed Decommissioning
11358  * // Balances fixed link decommissioning.
11359  * // {Eq_transfer_linksFixedDecom}
11360  Eq_transfer_linksFixedDecom(linksModelToCalc,yearsSel,transfer_techs,vintage)
11361      $(transfer_decomTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
11362          and not transfer_techParam(transfer_techs,vintage,"freeDecom") = 1
11363          and not transfer_linkBoundsFixed(linksModelToCalc,yearsSel,transfer_techs))
11364      ..
11365      transfer_linksDecom(linksModelToCalc,yearsSel,transfer_techs,vintage)
11366      =e=
11367      sum(years$
11368          (transfer_availTech(linksModelToCalc,years,transfer_techs,vintage)
11369              and years.val > sum(yearsToCalc$sameas(yearsToCalc+1, yearsSel), yearsToCalc.val) - transfer_techParam(transfer_techs,vintage,'lifeTime')
11370              and years.val <= yearsSel.val - transfer_techParam(transfer_techs,vintage,'lifeTime')),
11371          transfer_linksBuild(linksModelToCalc,years,transfer_techs,vintage));
11372   
11373  * // ### Transfer Links Free Decommissioning
11374  * // Balances free link decommissioning.
11375  * // {Eq_transfer_linksFreeDecom}
11376  Eq_transfer_linksFreeDecom(linksModelToCalc,yearsSel,transfer_techs,vintage)
11377      $((transfer_decomTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
11378          or transfer_usedTech(linksModelToCalc,yearsSel,transfer_techs,vintage))
11379          and transfer_techParam(transfer_techs,vintage,"freeDecom") = 1)
11380      ..
11381      sum(years$
11382            ((transfer_decomTech(linksModelToCalc,years,transfer_techs,vintage)
11383              or transfer_usedTech(linksModelToCalc,years,transfer_techs,vintage))
11384              and years.val < sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)),
11385          transfer_linksDecom(linksModelToCalc,years,transfer_techs,vintage))
11386      + sum(yearsToCalc$
11387            ((transfer_decomTech(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
11388              or transfer_usedTech(linksModelToCalc,yearsToCalc,transfer_techs,vintage))
11389              and yearsToCalc.val >= sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
11390              and yearsToCalc.val <= yearsSel.val),
11391          transfer_linksDecom(linksModelToCalc,yearsToCalc,transfer_techs,vintage))
11392      =g=
11393      sum(years$
11394            (transfer_availTech(linksModelToCalc,years,transfer_techs,vintage)
11395              and years.val < sum(yearsToCalc$(ord(yearsToCalc)=1), yearsToCalc.val) - transfer_techParam(transfer_techs,vintage,'lifeTime')),
11396          transfer_linksBuild(linksModelToCalc,years,transfer_techs,vintage))
11397      + sum(yearsToCalc$
11398            (transfer_availTech(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
11399              and yearsToCalc.val >= sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
11400              and yearsToCalc.val <= yearsSel.val - transfer_techParam(transfer_techs,vintage,'lifeTime')),
11401          transfer_linksBuild(linksModelToCalc,yearsToCalc,transfer_techs,vintage));
11402   
11403  * // ### Transfer Links Lower Limit
11404  * // Ensures link capacity lower limits.
11405  * // {Eq_transfer_linksLowerLimit}
11406  Eq_transfer_linksLowerLimit(linksModelToCalc,yearsSel,transfer_techs)
11407      $(transfer_linksParam(linksModelToCalc,yearsSel,transfer_techs,'linksLowerLimit') > 0 )
11408      ..
11409      sum(vintage$transfer_usedTech(linksModelToCalc,yearsSel,transfer_techs,vintage),
11410          transfer_linksTotal(linksModelToCalc,yearsSel,transfer_techs,vintage))
11411      =g=
11412      transfer_linksParam(linksModelToCalc,yearsSel,transfer_techs,"linksLowerLimit");
11413   
11414  * // ### Transfer Links Upper Limit
11415  * // Ensures link capacity upper limits.
11416  * // {Eq_transfer_linksUpperLimit}
11417  Eq_transfer_linksUpperLimit(linksModelToCalc,yearsSel,transfer_techs)
11418      $(transfer_linksParam(linksModelToCalc,yearsSel,transfer_techs,'linksUpperLimit') >= 0
11419          and transfer_linksParam(linksModelToCalc,yearsSel,transfer_techs,'linksUpperLimit') < +inf )
11420      ..
11421      sum(vintage$transfer_usedTech(linksModelToCalc,yearsSel,transfer_techs,vintage),
11422          transfer_linksTotal(linksModelToCalc,yearsSel,transfer_techs,vintage))
11423      =l=
11424      transfer_linksParam(linksModelToCalc,yearsSel,transfer_techs,"linksUpperLimit");
11425   
11426  * // ### Transfer Links Total MIP
11427  * // Ensures number of MIP links.
11428  * // {Eq_transfer_linksTotalMIP}
11429  Eq_transfer_linksTotalMIP(linksModelToCalc,yearsSel,transfer_techs,vintage)
11430      $(transfer_usedTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
11431          and transfer_techParam(transfer_techs,vintage,"mipLinks"))
11432      ..
11433      transfer_linksTotal(linksModelToCalc,yearsSel,transfer_techs,vintage)
11434      =e=
11435      transfer_linksTotal_MIP(linksModelToCalc,yearsSel,transfer_techs,vintage);
11436   
11437  * // ### Transfer Links Flow Along Upper Limit
11438  * // Ensures links flow along upper limit.
11439  * // {Eq_transfer_flowAlongUpperLimit}
11440  Eq_transfer_flowAlongUpperLimit(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
11441      $transfer_usedTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
11442      ..
11443      transfer_flowAlong(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
11444      =l=
11445      transfer_flowProfile(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage,"along")
11446      * transfer_linksTotal(linksModelToCalc,yearsSel,transfer_techs,vintage)
11447      * transfer_techParam(transfer_techs,vintage,"flowUpperLimit")
11448      ;
11449   
11450  * // ### Transfer Links Flow Against Upper Limit
11451  * // Ensures links flow against upper limit.
11452  * // {Eq_transfer_flowAgainstUpperLimit}
11453  Eq_transfer_flowAgainstUpperLimit(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
11454      $transfer_usedTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
11455      ..
11456      transfer_flowAgainst(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
11457      =l=
11458      transfer_flowProfile(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage,"against")
11459      * transfer_linksTotal(linksModelToCalc,yearsSel,transfer_techs,vintage)
11460      * transfer_techParam(transfer_techs,vintage,"flowUpperLimit")
11461      ;
11462   
11463  set transfer_usedOpf(linksModel,years,gridSegments,transfer_techs,vintage);
11464  transfer_usedOpf(linksModel,yearsToCalc,gridSegments,transfer_techs,vintage)
11465      $(transfer_usedTech(linksModel,yearsToCalc,transfer_techs,vintage)
11466          and gridSegments_dcopf(linksModel,transfer_techs,gridSegments))
11467      = yes;
11468   
11469  set transfer_usedOpfLinks(linksModel,years,gridSegments);
11470  option transfer_usedOpfLinks < transfer_usedOpf;
11471   
11472  set transfer_usedOpfSegments(years,gridSegments);
11473  option transfer_usedOpfSegments < transfer_usedOpf;
11474   
11478  * // ### Transfer DC optimal flow angle flows
11479  * // Angle flows.
11480  * // {Eq_transfer_dcopf_cycleFlows}
11481  Eq_transfer_dcopf_angleFlows(timeModelSel,linksModelToCalc,yearsSel,gridSegments)
11482      $transfer_usedOpfLinks(linksModelToCalc,yearsSel,gridSegments)
11483      ..
11484      sum ((transfer_techs,vintage)
11485              $transfer_usedOpf(linksModelToCalc,yearsSel,gridSegments,transfer_techs,vintage),
11486          ( transfer_flowAlong(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
11487              - transfer_flowAgainst(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage) )
11488          * transfer_dcopf_Xtech(linksModelToCalc,yearsSel,transfer_techs,vintage,gridSegments) )
11489      =e=
11490      sum ( nodesModelSel,
11491          - transfer_incidenceModel(nodesModelSel,linksModelToCalc)
11492          * transfer_dcopf_voltageAngle(timeModelSel,nodesModelSel,yearsSel,gridSegments));
11496   
11497   
11498  * ==== model definition ====
11499   
11500  Model M_transfer
11501  /
11502    Eq_transfer_linksBalance
11503    Eq_transfer_linksFixedDecom
11504    Eq_transfer_linksFreeDecom
11505    Eq_transfer_linksLowerLimit
11506    Eq_transfer_linksUpperLimit
11507    Eq_transfer_linksTotalMIP
11508    Eq_transfer_flowAlongUpperLimit
11509    Eq_transfer_flowAgainstUpperLimit
11513    Eq_transfer_dcopf_angleFlows
11517  /;
INCLUDE    C:\Local\REMix\framework\remix\framework\model\source\core\sourcesink.gms
11519  * SPDX-FileCopyrightText: Copyright (c) 2023 German Aerospace Center (DLR)
11520  * SPDX-License-Identifier: BSD-3-Clause
11521   
11522  * // # core_sourcesink
11523  * // The equations in this file describe the sources and sinks in the model.
11524   
11525  * // ## Variables
11526  * // {special_table_sourcesink_variables}
12038   
12039  * // ## Aggregation of profiles
12040  * // Profiles are rescaled based on the annual sum.
12041   
12042  set sourcesink_usesProfileScaling(nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile);
12043  sourcesink_usesProfileScaling(nodesData,years,sourcesink_techs,commodity,"fixed")
12044      $sourcesink_configIn(nodesData,years,sourcesink_techs,commodity,"scaleFixProfileWithFixSum") = yes;
12045  sourcesink_usesProfileScaling(nodesData,years,sourcesink_techs,commodity,"lower")
12046      $sourcesink_configIn(nodesData,years,sourcesink_techs,commodity,"scaleLowProfileWithLowSum") = yes;
12047  sourcesink_usesProfileScaling(nodesData,years,sourcesink_techs,commodity,"upper")
12048      $sourcesink_configIn(nodesData,years,sourcesink_techs,commodity,"scaleUpProfileWithUpSum") = yes;
12049   
12050  parameter sourcesink_ProfileSum(nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile);
12051  sourcesink_ProfileSum(nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile)
12052      $sourcesink_usesProfileScaling(nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile)
12053      = sum(timeData, sourcesink_profileIn(timeData,nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile));
12054   
12055  parameter sourcesink_ProfileAbsSum(nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile);
12056  sourcesink_ProfileAbsSum(nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile)
12057      $sourcesink_usesProfileScaling(nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile)
12058      = sum(timeData, abs(sourcesink_profileIn(timeData,nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile)));
12059   
12060  set sourcesink_ProfileScaleError(nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile);
12061  sourcesink_ProfileScaleError(nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile)
12062      $(sourcesink_usesProfileScaling(nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile)
12063          and sourcesink_ProfileSum(nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile) = 0
12064          and sourcesink_ProfileAbsSum(nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile) > 0)
12065      = yes;
12066   
12067  abort$sum((nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile),
12068              sourcesink_ProfileScaleError(nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile)) "One or more profiles cannot be rescaled as their annual sum equals zero!"
12069   
12070  * calculate scaling factor for each type
12071  parameter sourcesink_scalingFactor(nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile);
12072  sourcesink_scalingFactor(nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile)
12073      $(sourcesink_ProfileSum(nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile)
12074          and sourcesink_usesProfileScaling(nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile))
12075      = sum(pc_sourcesink_annualSum$sameas(pc_sourcesink_profile,pc_sourcesink_annualSum),
12076          sourcesink_annualSumIn(nodesData,years,sourcesink_techs,commodity,pc_sourcesink_annualSum)
12077              / sourcesink_ProfileSum(nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile));
12078   
12079  * rescale profiles
12080  sourcesink_profileIn(timeData,nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile)
12081      $sourcesink_usesProfileScaling(nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile)
12082      = sourcesink_profileIn(timeData,nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile)
12083          * sourcesink_scalingFactor(nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile)
12084   
12085  * // ## Aggregation of profiles
12086  * // Profiles are aggregated based on the mapping from data nodes to model nodes.
12087   
12088  * ==== aggregation of profiles ====
12089  set sourcesink_usesProfileIn(nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile);
12090  option sourcesink_usesProfileIn < sourcesink_profileIn
12091   
12092  set sourcesink_usesProfile(nodesModel,years,sourcesink_techs,commodity,pc_sourcesink_profile);
12093  sourcesink_usesProfile(nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity,pc_sourcesink_profile)
12094      $sum(nodesData$(aggregateNodesModel(nodesData,nodesModelToCalc)
12095          and sourcesink_usesProfileIn(nodesData,yearsToCalc,sourcesink_techs,commodity,pc_sourcesink_profile)), 1)
12096      = yes;
12097   
12098  * aagregate time dimension
12099  parameter sourcesink_profileIn_aggTime(timeModel,nodesData,yearsToCalc,sourcesink_techs,commodity,pc_sourcesink_profile);
12100  sourcesink_profileIn_aggTime(timeModelToCalc,nodesData,yearsToCalc,sourcesink_techs,commodity,pc_sourcesink_profile)
12101    $sourcesink_usesProfileIn(nodesData,yearsToCalc,sourcesink_techs,commodity,pc_sourcesink_profile)
12102    = sum(timeData$timeMapping(timeData,timeModelToCalc),
12103            sourcesink_profileIn(timeData,nodesData,yearsToCalc,sourcesink_techs,commodity,pc_sourcesink_profile)
12104            / timeLength(timeModelToCalc));
12105  option clear = sourcesink_profileIn;
12106   
12107  * sum up absolute profiles
12108  parameter sourcesink_profile(timeModel,nodesModel,years,sourcesink_techs,commodity,pc_sourcesink_profile);
12109  sourcesink_profile(timeModelToCalc,nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity,pc_sourcesink_profile)
12110      $sourcesink_usesProfile(nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity,pc_sourcesink_profile)
12111      = sum(nodesData$aggregateNodesModel(nodesData,nodesModelToCalc),
12112              sourcesink_profileIn_aggTime(timeModelToCalc,nodesData,yearsToCalc,sourcesink_techs,commodity,pc_sourcesink_profile));
12113  option clear = sourcesink_profileIn_aggTime;
12114   
12115  set sourcesink_enabled(nodesModel,years,sourcesink_techs,commodity);
12116  option sourcesink_enabled < sourcesink_config;
12117   
12118   
12119  * ==== declaration of variables ====
12120  * // ## Bounding of variables
12121  * // Source-sink variables with either a lower, fixed, or upper profile are bounded to their respective profiles given by the input parameters.
12122   
12123  sourcesink_flow.lo(timeModelToCalc,nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity)
12124      $( sourcesink_enabled(nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity)
12125          and sourcesink_config(nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity,"usesLowerProfile") = 1
12126          and sourcesink_profile(timeModelToCalc,nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity,"lower") > -inf )
12127      = sourcesink_profile(timeModelToCalc,nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity,"lower");
12128   
12129  sourcesink_flow.up(timeModelToCalc,nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity)
12130      $( sourcesink_enabled(nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity)
12131          and sourcesink_config(nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity,"usesUpperProfile") = 1
12132          and sourcesink_profile(timeModelToCalc,nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity,"upper") < inf )
12133      = sourcesink_profile(timeModelToCalc,nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity,"upper");
12134   
12135  sourcesink_flow.fx(timeModelToCalc,nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity)
12136      $( sourcesink_enabled(nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity)
12137          and sourcesink_config(nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity,"usesFixedProfile") = 1 )
12138      = sourcesink_profile(timeModelToCalc,nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity,"fixed");
12139   
12140  option clear = sourcesink_profile;
12141   
12142   
12143  * ==== equation definition ====
12144  * // ## Equations
12145  equations
12146  Eq_sourcesink_useFixedSum(nodesModel,years,sourcesink_techs,commodity
12147      ) "Fixes the annual sum from sources / to sinks"
12148  Eq_sourcesink_useLowerSum(nodesModel,years,sourcesink_techs,commodity
12149      ) "Limits the lower sum from sources / to sinks"
12150  Eq_sourcesink_useUpperSum(nodesModel,years,sourcesink_techs,commodity
12151      ) "Limits the upper sum from sources / to sinks"
12152    ;
12153   
12154  * // ### Fixed annual sums for sources and sinks
12155  * // Ensures that the sources and sinks with annual sums given as fixed limits are balanced.
12156  * // {Eq_sourcesink_useFixedSum}
12157  Eq_sourcesink_useFixedSum(nodesModelSel,yearsSel,sourcesink_techs,commodity)
12158      $( sourcesink_enabled(nodesModelSel,yearsSel,sourcesink_techs,commodity)
12159          and sourcesink_config(nodesModelSel,yearsSel,sourcesink_techs,commodity,"usesFixedSum") = 1 )
12160      ..
12161      sum(timeModelSel,
12162          sourcesink_flow(timeModelSel,nodesModelSel,yearsSel,sourcesink_techs,commodity))
12163      =e=
12164      sourcesink_annualSum(nodesModelSel,yearsSel,sourcesink_techs,commodity,"fixed")
12165      ;
12166   
12167  * // ### Lower annual sums for sources and sinks
12168  * // Ensures that the sources and sinks with annual sums given as lower limits are balanced.
12169  * // {Eq_sourcesink_useLowerSum}
12170  Eq_sourcesink_useLowerSum(nodesModelSel,yearsSel,sourcesink_techs,commodity)
12171      $( sourcesink_enabled(nodesModelSel,yearsSel,sourcesink_techs,commodity)
12172          and sourcesink_config(nodesModelSel,yearsSel,sourcesink_techs,commodity,"usesLowerSum") = 1
12173          and sourcesink_annualSum(nodesModelSel,yearsSel,sourcesink_techs,commodity,"lower") > -inf )
12174      ..
12175      sum(timeModelSel,
12176          sourcesink_flow(timeModelSel,nodesModelSel,yearsSel,sourcesink_techs,commodity))
12177      =g=
12178      sourcesink_annualSum(nodesModelSel,yearsSel,sourcesink_techs,commodity,"lower")
12179      ;
12180   
12181  * // ### Upper annual sums for sources and sinks
12182  * // Ensures that the sources and sinks with annual sums given as upper limits are balanced.
12183  * // {Eq_sourcesink_useUpperSum}
12184  Eq_sourcesink_useUpperSum(nodesModelSel,yearsSel,sourcesink_techs,commodity)
12185      $( sourcesink_enabled(nodesModelSel,yearsSel,sourcesink_techs,commodity)
12186          and sourcesink_config(nodesModelSel,yearsSel,sourcesink_techs,commodity,"usesUpperSum") = 1
12187          and sourcesink_annualSum(nodesModelSel,yearsSel,sourcesink_techs,commodity,"upper") < inf )
12188      ..
12189      sum(timeModelSel,
12190          sourcesink_flow(timeModelSel,nodesModelSel,yearsSel,sourcesink_techs,commodity))
12191      =l=
12192      sourcesink_annualSum(nodesModelSel,yearsSel,sourcesink_techs,commodity,"upper")
12193      ;
12194   
12195   
12196  * ==== model definition ====
12197   
12198  Model M_sourcesink
12199  /
12200    Eq_sourcesink_useFixedSum
12201    Eq_sourcesink_useLowerSum
12202    Eq_sourcesink_useUpperSum
12203  /;
INCLUDE    C:\Local\REMix\framework\remix\framework\model\source\core\balance.gms
12205  * SPDX-FileCopyrightText: Copyright (c) 2023 German Aerospace Center (DLR)
12206  * SPDX-License-Identifier: BSD-3-Clause
12207   
12208  * // # balance
12209  * // The equations in this file describe the commodity balancing in the model.
12210   
12211  Equations
12212    Eq_balance_commodities(timeModel,nodesModel,years,commodity
12213      ) "Balance for each commodity used in each time step, region, and year";
12214   
12215   
12216  * ==== calculation of mappings ====
12217   
12218  set balance_techComm(techs,commodity);
12219  balance_techComm(converter_techs(techs),commodity)
12220      $sum((vintage,activity)$converter_coefficient(converter_techs,vintage,activity,commodity,"coefficient"), 1) = yes;
12221  balance_techComm(storage_techs(techs),commodity)
12222      $sum((vintage)$storage_sizeParam(storage_techs,vintage,commodity,"size"), 1) = yes;
12223  balance_techComm(transfer_techs(techs),commodity)
12224      $sum((vintage)$transfer_coefficient(transfer_techs,vintage,commodity,"coefficient"), 1) = yes;
12225  balance_techComm(sourcesink_techs(techs),commodity)
12226      $sum((nodesModelToCalc,yearsToCalc)$sourcesink_enabled(nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity), 1) = yes;
12227   
12228  set balance_usedConverter(nodesModel,years,commodity);
12229  set balance_usedStorage(nodesModel,years,commodity);
12230  set balance_usedTransfer(nodesModel,years,commodity);
12231  set balance_usedSourceSink(nodesModel,years,commodity);
12232  set balance_usedBalance(nodesModel,years,commodity);
12233   
12234  balance_usedConverter(nodesModel,years,commodity)
12235      = sum ((converter_techs,vintage,activity)
12236              $( converter_coefficient(converter_techs,vintage,activity,commodity,"coefficient") <> 0
12237                  and converter_usedTech(nodesModel,years,converter_techs,vintage) ), 1);
12238   
12239  balance_usedStorage(nodesModel,years,commodity)
12240      = sum ((storage_techs,vintage,activity)
12241              $(storage_sizeParam(storage_techs,vintage,commodity,"size") <> 0
12242                  and storage_usedTech(nodesModel,years,storage_techs,vintage) ), 1);
12243   
12244  balance_usedTransfer(nodesModel,years,commodity)
12245      = sum ((linksModel,transfer_techs,vintage)
12246              $(transfer_coefficient(transfer_techs,vintage,commodity,"coefficient") <> 0
12247                  and transfer_incidenceModel(nodesModel,linksModel) <> 0), 1);
12248   
12249  option balance_usedSourceSink < sourcesink_enabled;
12250   
12251  balance_usedBalance(nodesModel,years,commodity)
12252      $(balance_usedConverter(nodesModel,years,commodity)
12253          or balance_usedStorage(nodesModel,years,commodity)
12254          or balance_usedTransfer(nodesModel,years,commodity)
12255          or balance_usedSourceSink(nodesModel,years,commodity) )
12256      = yes;
12257   
12258   
12259  * ==== equation definition ====
12260   
12261  * // ### Balance commodities
12262  * // Balancing of commodities for all model regions, time steps, and years
12263  * // {Eq_balance_commodities}
12264  Eq_balance_commodities(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,commodity)
12265      $balance_usedBalance(nodesModelSel,yearsSel,commodity)
12266      ..
12267  * converter
12268      sum((converter_techs,vintage,activity)
12269              $( converter_coefficientProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity,commodity) <> 0
12270                  AND converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage) ),
12271          converter_activity(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity)
12272              * converter_coefficientProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity,commodity)
12273              * timeLength(timeModelSel)
12274          + converter_unitsUsingActivity_MIP(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity)
12275              * converter_coefficient(converter_techs,vintage,activity,commodity,"constant")
12276              * timeLength(timeModelSel))
12277   
12278  * storages
12279      + sum((storage_techs,vintage)
12280              $( storage_sizeParam(storage_techs,vintage,commodity,"size") <> 0
12281                  and storage_usedTech(nodesModelSel,yearsSel,storage_techs,vintage) ),
12282          storage_level(timeModelToCalc--1,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
12283          - storage_level(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
12285          - storage_losses(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
12286          * timeLength(timeModelSel)
12288          )
12289   
12290  * transfer
12291      + sum((linksModel,transfer_techs,vintage)
12292              $(transfer_usedTech(linksModel,yearsSel,transfer_techs,vintage)
12293                  and linksModelToCalc(linksModel)),
12294          (   transfer_flowAlong(timeModelSel,linksModel,yearsSel,transfer_techs,vintage)
12295                  $(transfer_incidenceModel(nodesModelSel,linksModel) > 0)
12296            + transfer_flowAgainst(timeModelSel,linksModel,yearsSel,transfer_techs,vintage)
12297                  $(transfer_incidenceModel(nodesModelSel,linksModel) < 0) )
12298          * transfer_coefficient(transfer_techs,vintage,commodity,"coefficient")
12299          * timeLength(timeModelSel))
12300   
12301      - sum((linksModel,transfer_techs,vintage)
12302              $(transfer_usedTech(linksModel,yearsSel,transfer_techs,vintage)
12303                  and linksModelToCalc(linksModel)),
12304          (   transfer_flowAlong(timeModelSel,linksModel,yearsSel,transfer_techs,vintage)
12305                  $(transfer_incidenceModel(nodesModelSel,linksModel) < 0)
12306            + transfer_flowAgainst(timeModelSel,linksModel,yearsSel,transfer_techs,vintage)
12307                  $(transfer_incidenceModel(nodesModelSel,linksModel) > 0) )
12308          * transfer_coefficient(transfer_techs,vintage,commodity,"coefficient")
12309          * timeLength(timeModelSel))
12310   
12311      + 0.5 * sum((linksModel,transfer_techs,vintage)
12312              $(transfer_usedTech(linksModel,yearsSel,transfer_techs,vintage)
12313                  AND linksModelToCalc(linksModel)),
12314          (   transfer_flowAlong(timeModelSel,linksModel,yearsSel,transfer_techs,vintage)
12315                  $(transfer_incidenceModel(nodesModelSel,linksModel) <> 0)
12316            + transfer_flowAgainst(timeModelSel,linksModel,yearsSel,transfer_techs,vintage)
12317                  $(transfer_incidenceModel(nodesModelSel,linksModel) <> 0) )
12318          * timeLength(timeModelSel)
12319          * ( transfer_coefPerFlow(transfer_techs,vintage,commodity,"coefPerFlow")
12320              + sum(link_types,
12321                  transfer_coefPerLength(transfer_techs,vintage,commodity,link_types,"coefPerLength")
12322                  * transfer_lengthParam(linksModel,link_types,"length"))))
12323   
12324  * sourcesink
12325      + sum((sourcesink_techs)
12326              $sourcesink_enabled(nodesModelSel,yearsSel,sourcesink_techs,commodity),
12327          sourcesink_flow(timeModelSel,nodesModelSel,yearsSel,sourcesink_techs,commodity)
12328          * timeLength(timeModelSel))
12329      =e=
12330      0;
12331   
12332   
12333  * ==== model definition ====
12334   
12335  Model M_balance
12336  /
12337    Eq_balance_commodities
12338  /;
12339   
INCLUDE    C:\Local\REMix\framework\remix\framework\model\source\accounting\equations.gms
12341  * SPDX-FileCopyrightText: Copyright (c) 2023 German Aerospace Center (DLR)
12342  * SPDX-License-Identifier: BSD-3-Clause
12343   
12344  * // # accounting_equations
12345   
12346  * ==== declaration of variables ====
12347   
12348  variables
12349  accounting_indicator(accNodesModel,accYears,indicator)
12350  accounting_indicator_links(linksModel,years,indicator)
12351  accounting_objective
12352    ;
12353   
12354   
12355  * ==== definition of variables ====
12356   
12357  * set the variable levels to be fixed for years before the optimization years
12358  accounting_indicator.l(accNodesModel,accYears,indicator)
12359      $activeIndicators(accNodesModel,accYears,indicator)
12360      = 0;
12361   
12362  accounting_indicator.lo(accNodesModel,accYears,indicator)
12363      $(accounting_indicatorBounds(accNodesModel,accYears,indicator,"useLower") <> 0 )
12364      = accounting_indicatorBounds(accNodesModel,accYears,indicator,"lowerValue");
12365   
12366  accounting_indicator.up(accNodesModel,accYears,indicator)
12367      $(accounting_indicatorBounds(accNodesModel,accYears,indicator,"useUpper") <> 0 )
12368      = accounting_indicatorBounds(accNodesModel,accYears,indicator,"upperValue");
12369   
12370  accounting_indicator.fx(accNodesModel,accYears,indicator)
12371      $(accounting_indicatorBounds(accNodesModel,accYears,indicator,"useFixed") <> 0 )
12372      = accounting_indicatorBounds(accNodesModel,accYears,indicator,"fixedValue");
12373   
12374   
12375  accounting_indicator_links.lo(linksModelToCalc,yearsToCalc,indicator)
12376      $(accounting_indicatorBounds_links(linksModelToCalc,yearsToCalc,indicator,"useLower") <> 0 )
12377      = accounting_indicatorBounds_links(linksModelToCalc,yearsToCalc,indicator,"lowerValue");
12378   
12379  accounting_indicator_links.up(linksModelToCalc,yearsToCalc,indicator)
12380      $(accounting_indicatorBounds_links(linksModelToCalc,yearsToCalc,indicator,"useUpper") <> 0 )
12381      = accounting_indicatorBounds_links(linksModelToCalc,yearsToCalc,indicator,"upperValue");
12382   
12383  accounting_indicator_links.fx(linksModelToCalc,yearsToCalc,indicator)
12384      $(accounting_indicatorBounds_links(linksModelToCalc,yearsToCalc,indicator,"useFixed") <> 0 )
12385      = accounting_indicatorBounds_links(linksModelToCalc,yearsToCalc,indicator,"fixedValue");
12386   
12387   
12388  * ==== declaration of equations ====
12389   
12390  equations
12391  Eq_accounting_indicatorCalc(accNodesModel,accYears,indicator
12392      ) "Calculates the level of an indicator per accounting region"
12393  Eq_accounting_indicatorCalc_links(linksModel,years,indicator
12394      ) "Calculates the level of an indicator per model link"
12395  Eq_accounting_objective "Calculates the objective value based on the specified indicator"
12396    ;
12397   
12398   
12399  * ==== equations definition ====
12400  * // ## Equations
12401  * // ### Accounting Indicator Calculation
12402  * // Calculates the indicators for each model node for converters, sources and sinks, transfer, storage and variable indicators.
12403  * // {Eq_accounting_indicatorCalc}
12404  Eq_accounting_indicatorCalc(accNodesModel,accYearsSel(accYears),indicator)
12405      $activeIndicators(accNodesModel,accYears,indicator)
12406      ..
12407      accounting_indicator(accNodesModel,accYears,indicator)
12408      =e=
12409   
12410  * == variable indicators ==
12411      sum((accNodesModel_a,accYears_a,indicator_a)
12412          $(compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
12413              and variableIndicators(accNodesModel_a,accYears_a,indicator_a)),
12414          compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
12415          * accounting_indicator(accNodesModel_a,accYears_a,indicator_a))
12416   
12417  * == converters ==
12418      + sum ((accNodesModel_a,nodesModelSel,accYears_a,yearsSel,indicator_a)
12419              $( compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
12420                  and sameas(nodesModelSel,accNodesModel_a) and sameas(yearsSel,accYears_a)),
12421          compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
12422          *
12423          ( sum ((converter_techs,vintage)
12424                      $(converter_availTech(nodesModelSel,yearsSel,converter_techs,vintage)
12425                          and accounting_converterUnits(indicator_a,nodesModelSel,converter_techs,vintage,"useAnnuity") = 0),
12426              converter_unitsBuild(nodesModelSel,yearsSel,converter_techs,vintage)
12427              * accounting_converterUnits(indicator_a,nodesModelSel,converter_techs,vintage,"perUnitBuild"))
12428   
12429          + sum ((years_a,converter_techs,vintage)
12430                      $(converter_availTech(nodesModelSel,years_a,converter_techs,vintage)
12431                          and years_a.val < sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
12432                          and accounting_converterUnits(indicator_a,nodesModelSel,converter_techs,vintage,"useAnnuity") = 1
12433                          and years_a.val + accounting_converterUnits(indicator_a,nodesModelSel,converter_techs,vintage,"amorTime") > yearsSel.val
12434                          and years_a.val <= yearsSel.val ),
12435              converter_unitsBuild(nodesModelSel,years_a,converter_techs,vintage)
12436              * accounting_converterUnits(indicator_a,nodesModelSel,converter_techs,vintage,"perUnitBuild")
12437              * accounting_annuityFactor_converter(indicator_a,nodesModelSel,converter_techs,vintage) )
12438   
12439          + sum ((yearsToCalc,converter_techs,vintage)
12440                      $(converter_availTech(nodesModelSel,yearsToCalc,converter_techs,vintage)
12441                          and yearsToCalc.val >= sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
12442                          and accounting_converterUnits(indicator_a,nodesModelSel,converter_techs,vintage,"useAnnuity") = 1
12443                          and yearsToCalc.val + accounting_converterUnits(indicator_a,nodesModelSel,converter_techs,vintage,"amorTime") > yearsSel.val
12444                          and yearsToCalc.val <= yearsSel.val ),
12445              converter_unitsBuild(nodesModelSel,yearsToCalc,converter_techs,vintage)
12446              * accounting_converterUnits(indicator_a,nodesModelSel,converter_techs,vintage,"perUnitBuild")
12447              * accounting_annuityFactor_converter(indicator_a,nodesModelSel,converter_techs,vintage) )
12448   
12449          + sum ((converter_techs,vintage)
12450                      $converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage),
12451              converter_unitsDecom(nodesModelSel,yearsSel,converter_techs,vintage)
12452              * accounting_converterUnits(indicator_a,nodesModelSel,converter_techs,vintage,"perUnitDecom")
12453   
12454              + converter_unitsTotal(nodesModelSel,yearsSel,converter_techs,vintage)
12455              * accounting_converterUnits(indicator_a,nodesModelSel,converter_techs,vintage,"perUnitTotal") )
12456   
12457          + sum ((timeModelSel,converter_techs,vintage,activity)
12458                      $converter_usedTechAct(nodesModelSel,yearsSel,converter_techs,vintage,activity),
12459              converter_activity(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity)
12460              * timeLength(timeModelSel)
12461              * accounting_converterActivity(indicator_a,nodesModelSel,converter_techs,vintage,activity,"perActivity") )
12462   
12463          + sum ((timeModelSel,converter_techs,vintage)
12464                      $converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage),
12465              converter_unitStartups(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
12466              * accounting_converterStartup(indicator_a,nodesModelSel,converter_techs,vintage,"perStartup") )
12467   
12468          + sum ((timeModelSel,converter_techs,vintage)
12469                      $converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage),
12470              converter_rampPos(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
12471              * (accounting_converterStartup(indicator_a,nodesModelSel,converter_techs,vintage,"perRamp")
12472                 + accounting_converterStartup(indicator_a,nodesModelSel,converter_techs,vintage,"perRampPos"))
12473   
12474              + converter_rampNeg(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
12475              * (accounting_converterStartup(indicator_a,nodesModelSel,converter_techs,vintage,"perRamp")
12476                 + accounting_converterStartup(indicator_a,nodesModelSel,converter_techs,vintage,"perRampNeg")))
12477          )
12478      )
12479   
12480  * == storage ==
12481      + sum ((accNodesModel_a,nodesModelSel,accYears_a,yearsSel,indicator_a)
12482              $( compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
12483                  and sameas(nodesModelSel,accNodesModel_a) and sameas(yearsSel,accYears_a)),
12484          compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
12485          *
12486          ( sum ((storage_techs,vintage)
12487                      $(storage_availTech(nodesModelSel,yearsSel,storage_techs,vintage)
12488                          and accounting_storageUnits(indicator_a,nodesModelSel,storage_techs,vintage,"useAnnuity") = 0),
12489              storage_unitsBuild(nodesModelSel,yearsSel,storage_techs,vintage)
12490              * accounting_storageUnits(indicator_a,nodesModelSel,storage_techs,vintage,"perUnitBuild") )
12491   
12492          + sum ((years_a,storage_techs,vintage)
12493                      $(storage_availTech(nodesModelSel,years_a,storage_techs,vintage)
12494                          and years_a.val < sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
12495                          and accounting_storageUnits(indicator_a,nodesModelSel,storage_techs,vintage,"useAnnuity") = 1
12496                          and years_a.val + accounting_storageUnits(indicator_a,nodesModelSel,storage_techs,vintage,"amorTime") > yearsSel.val
12497                          and years_a.val <= yearsSel.val ),
12498              storage_unitsBuild(nodesModelSel,years_a,storage_techs,vintage)
12499              * accounting_storageUnits(indicator_a,nodesModelSel,storage_techs,vintage,"perUnitBuild")
12500              * accounting_annuityFactor_storage(indicator_a,nodesModelSel,storage_techs,vintage) )
12501   
12502          + sum ((yearsToCalc,storage_techs,vintage)
12503                      $(storage_availTech(nodesModelSel,yearsToCalc,storage_techs,vintage)
12504                          and yearsToCalc.val >= sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
12505                          and accounting_storageUnits(indicator_a,nodesModelSel,storage_techs,vintage,"useAnnuity") = 1
12506                          and yearsToCalc.val + accounting_storageUnits(indicator_a,nodesModelSel,storage_techs,vintage,"amorTime") > yearsSel.val
12507                          and yearsToCalc.val <= yearsSel.val ),
12508              storage_unitsBuild(nodesModelSel,yearsToCalc,storage_techs,vintage)
12509              * accounting_storageUnits(indicator_a,nodesModelSel,storage_techs,vintage,"perUnitBuild")
12510              * accounting_annuityFactor_storage(indicator_a,nodesModelSel,storage_techs,vintage) )
12511   
12512          + sum ((storage_techs,vintage)
12513                      $storage_usedTech(nodesModelSel,yearsSel,storage_techs,vintage),
12514              storage_unitsDecom(nodesModelSel,yearsSel,storage_techs,vintage)
12515              * accounting_storageUnits(indicator_a,nodesModelSel,storage_techs,vintage,"perUnitDecom")
12516   
12517              + storage_unitsTotal(nodesModelSel,yearsSel,storage_techs,vintage)
12518              * accounting_storageUnits(indicator_a,nodesModelSel,storage_techs,vintage,"perUnitTotal") )
12519          )
12520      )
12521   
12522   
12523  * == transfer ==
12524      + sum ((accNodesModel_a,nodesModelSel,accYears_a,yearsSel,indicator_a)
12525              $( compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
12526                  and sameas(nodesModelSel,accNodesModel_a) and sameas(yearsSel,accYears_a)),
12527          compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
12528          *
12529          ( sum ((linksModelToCalc,transfer_techs,vintage)
12530                      $(transfer_availTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
12531                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0
12532                          and accounting_transferLinks(indicator_a,linksModelToCalc,transfer_techs,vintage,"useAnnuity") = 0),
12533              0.5
12534              * transfer_linksBuild(linksModelToCalc,yearsSel,transfer_techs,vintage)
12535              * accounting_transferLinks(indicator_a,linksModelToCalc,transfer_techs,vintage,"perLinkBuild") )
12536   
12537          + sum ((linksModelToCalc,years_a,transfer_techs,vintage)
12538                      $(transfer_availTech(linksModelToCalc,years_a,transfer_techs,vintage)
12539                          and years_a.val < sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
12540                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0
12541                          and accounting_transferLinks(indicator_a,linksModelToCalc,transfer_techs,vintage,"useAnnuity") = 1
12542                          and years_a.val + accounting_transferLinks(indicator_a,linksModelToCalc,transfer_techs,vintage,"amorTime") > yearsSel.val
12543                          and years_a.val <= yearsSel.val ),
12544              0.5
12545              * transfer_linksBuild(linksModelToCalc,years_a,transfer_techs,vintage)
12546              * accounting_transferLinks(indicator_a,linksModelToCalc,transfer_techs,vintage,"perLinkBuild")
12547              * accounting_annuityFactor_transferLink(indicator_a,linksModelToCalc,transfer_techs,vintage) )
12548   
12549          + sum ((linksModelToCalc,yearsToCalc,transfer_techs,vintage)
12550                      $(transfer_availTech(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
12551                          and yearsToCalc.val >= sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
12552                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0
12553                          and accounting_transferLinks(indicator_a,linksModelToCalc,transfer_techs,vintage,"useAnnuity") = 1
12554                          and yearsToCalc.val + accounting_transferLinks(indicator_a,linksModelToCalc,transfer_techs,vintage,"amorTime") > yearsSel.val
12555                          and yearsToCalc.val <= yearsSel.val ),
12556              0.5
12557              * transfer_linksBuild(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
12558              * accounting_transferLinks(indicator_a,linksModelToCalc,transfer_techs,vintage,"perLinkBuild")
12559              * accounting_annuityFactor_transferLink(indicator_a,linksModelToCalc,transfer_techs,vintage) )
12560   
12561          + sum ((linksModelToCalc,transfer_techs,vintage,link_types)
12562                      $(transfer_availTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
12563                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0
12564                          and accounting_transferPerLength(indicator_a,linksModelToCalc,transfer_techs,vintage,link_types,"useAnnuity") = 0 ),
12565              0.5
12566              * transfer_linksBuild(linksModelToCalc,yearsSel,transfer_techs,vintage)
12567              * transfer_lengthParam(linksModelToCalc,link_types,"length")
12568              * accounting_transferPerLength(indicator_a,linksModelToCalc,transfer_techs,vintage,link_types,"perLengthBuild") )
12569   
12570          + sum ((linksModelToCalc,years_a,transfer_techs,vintage,link_types)
12571                      $(transfer_availTech(linksModelToCalc,years_a,transfer_techs,vintage)
12572                          and years_a.val < sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
12573                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0
12574                          and accounting_transferPerLength(indicator_a,linksModelToCalc,transfer_techs,vintage,link_types,"useAnnuity") = 1
12575                          and years_a.val + accounting_transferPerLength(indicator_a,linksModelToCalc,transfer_techs,vintage,link_types,"amorTime") > yearsSel.val
12576                          and years_a.val <= yearsSel.val ),
12577              0.5
12578              * transfer_linksBuild(linksModelToCalc,years_a,transfer_techs,vintage)
12579              * transfer_lengthParam(linksModelToCalc,link_types,"length")
12580              * accounting_transferPerLength(indicator_a,linksModelToCalc,transfer_techs,vintage,link_types,"perLengthBuild")
12581              * accounting_annuityFactor_transferDistance(indicator_a,linksModelToCalc,transfer_techs,vintage,link_types) )
12582   
12583          + sum ((linksModelToCalc,yearsToCalc,transfer_techs,vintage,link_types)
12584                      $(transfer_availTech(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
12585                          and yearsToCalc.val >= sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
12586                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0
12587                          and accounting_transferPerLength(indicator_a,linksModelToCalc,transfer_techs,vintage,link_types,"useAnnuity") = 1
12588                          and yearsToCalc.val + accounting_transferPerLength(indicator_a,linksModelToCalc,transfer_techs,vintage,link_types,"amorTime") > yearsSel.val
12589                          and yearsToCalc.val <= yearsSel.val ),
12590              0.5
12591              * transfer_linksBuild(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
12592              * transfer_lengthParam(linksModelToCalc,link_types,"length")
12593              * accounting_transferPerLength(indicator_a,linksModelToCalc,transfer_techs,vintage,link_types,"perLengthBuild")
12594              * accounting_annuityFactor_transferDistance(indicator_a,linksModelToCalc,transfer_techs,vintage,link_types) )
12595   
12596          + sum ((linksModelToCalc,transfer_techs,vintage)
12597                      $(transfer_usedTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
12598                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0 ),
12599              0.5
12600              * transfer_linksDecom(linksModelToCalc,yearsSel,transfer_techs,vintage)
12601              * accounting_transferLinks(indicator_a,linksModelToCalc,transfer_techs,vintage,"perLinkDecom")
12602   
12603              + 0.5
12604              * transfer_linksTotal(linksModelToCalc,yearsSel,transfer_techs,vintage)
12605              * accounting_transferLinks(indicator_a,linksModelToCalc,transfer_techs,vintage,"perLinkTotal")
12606   
12607              + 0.5
12608              * sum (link_types,
12609                  transfer_linksDecom(linksModelToCalc,yearsSel,transfer_techs,vintage)
12610                  * transfer_lengthParam(linksModelToCalc,link_types,"length")
12611                  * accounting_transferPerLength(indicator_a,linksModelToCalc,transfer_techs,vintage,link_types,"perLengthDecom")
12612   
12613                  + transfer_linksTotal(linksModelToCalc,yearsSel,transfer_techs,vintage)
12614                  * transfer_lengthParam(linksModelToCalc,link_types,"length")
12615                  * accounting_transferPerLength(indicator_a,linksModelToCalc,transfer_techs,vintage,link_types,"perLengthTotal"))
12616   
12617              + 0.5
12618              * sum (timeModelSel,
12619                  transfer_flowAlong(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
12620                  * timeLength(timeModelSel)
12621                  * ( accounting_transferLinks(indicator_a,linksModelToCalc,transfer_techs,vintage,"perFlow")
12622                      + accounting_transferLinks(indicator_a,linksModelToCalc,transfer_techs,vintage,"perFlowAlong"))
12623   
12624                  + transfer_flowAgainst(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
12625                  * timeLength(timeModelSel)
12626                  * ( accounting_transferLinks(indicator_a,linksModelToCalc,transfer_techs,vintage,"perFlow")
12627                      + accounting_transferLinks(indicator_a,linksModelToCalc,transfer_techs,vintage,"perFlowAgainst")))
12628   
12629              + 0.5
12630              * sum ((timeModelSel, link_types),
12631                  transfer_flowAlong(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
12632                  * timeLength(timeModelSel)
12633                  * transfer_lengthParam(linksModelToCalc,link_types,"length")
12634                  * (accounting_transferPerLength(indicator_a,linksModelToCalc,transfer_techs,vintage,link_types,"perFlow")
12635                      + accounting_transferPerLength(indicator_a,linksModelToCalc,transfer_techs,vintage,link_types,"perFlowAlong"))
12636   
12637                  + transfer_flowAgainst(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
12638                  * timeLength(timeModelSel)
12639                  * transfer_lengthParam(linksModelToCalc,link_types,"length")
12640                  * (accounting_transferPerLength(indicator_a,linksModelToCalc,transfer_techs,vintage,link_types,"perFlow")
12641                      + accounting_transferPerLength(indicator_a,linksModelToCalc,transfer_techs,vintage,link_types,"perFlowAgainst")))
12642              )
12643          )
12644      )
12645   
12646   
12647  * == sources / sinks ==
12648      + sum ((accNodesModel_a,nodesModelSel,accYears_a,yearsSel,indicator_a)
12649              $( compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
12650                  and sameas(nodesModelSel,accNodesModel_a) and sameas(yearsSel,accYears_a)),
12651          compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
12652          *
12653          sum ((timeModelSel,sourcesink_techs,commodity)
12654                  $sourcesink_enabled(nodesModelSel,yearsSel,sourcesink_techs,commodity),
12655              sourcesink_flow(timeModelSel,nodesModelSel,yearsSel,sourcesink_techs,commodity)
12656              * timeLength(timeModelSel)
12657              * accounting_sourcesinkFlow(indicator_a,nodesModelSel,yearsSel,sourcesink_techs,commodity,"perFlow") )
12658      );
12659   
12660  * // ### Accounting Indicator Calculation Links
12661  * // Calculates the indicators for each transfer for converters, sources and sinks, transfer, storage and variable indicators.
12662  * // {Eq_accounting_indicatorCalc_links}
12663  Eq_accounting_indicatorCalc_links(linksModelToCalc,yearsSel,indicator)
12664      $activeIndicators_links(linksModelToCalc,yearsSel,indicator)
12665      ..
12666      accounting_indicator_links(linksModelToCalc,yearsSel,indicator)
12667      =e=
12668      sum ((transfer_techs,vintage)
12669                  $(transfer_availTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
12670                      and accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"useAnnuity") = 0),
12671          transfer_linksBuild(linksModelToCalc,yearsSel,transfer_techs,vintage)
12672          * accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"perLinkBuild") )
12673   
12674      + sum ((years_a,transfer_techs,vintage)
12675                  $(transfer_availTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
12676                      and accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"useAnnuity") = 1
12677                      and years_a.val + accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"amorTime") > yearsSel.val
12678                      and years_a.val <= yearsSel.val ),
12679          transfer_linksBuild(linksModelToCalc,years_a,transfer_techs,vintage)
12680          * accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"perLinkBuild")
12681          * accounting_annuityFactor_transferLink(indicator,linksModelToCalc,transfer_techs,vintage) )
12682   
12683      + sum ((transfer_techs,vintage,link_types)
12684                  $(transfer_availTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
12685                      and accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"useAnnuity") = 0 ),
12686          transfer_linksBuild(linksModelToCalc,yearsSel,transfer_techs,vintage)
12687          * transfer_lengthParam(linksModelToCalc,link_types,"length")
12688          * accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"perLengthBuild") )
12689   
12690      + sum ((years_a,transfer_techs,vintage,link_types)
12691                  $(transfer_availTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
12692                      and accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"useAnnuity") = 1
12693                      and years_a.val + accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"amorTime") > yearsSel.val
12694                      and years_a.val <= yearsSel.val ),
12695          transfer_linksBuild(linksModelToCalc,years_a,transfer_techs,vintage)
12696          * transfer_lengthParam(linksModelToCalc,link_types,"length")
12697          * accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"perLengthBuild")
12698          * accounting_annuityFactor_transferDistance(indicator,linksModelToCalc,transfer_techs,vintage,link_types) )
12699   
12700      + sum ((transfer_techs,vintage)
12701                  $(transfer_usedTech(linksModelToCalc,yearsSel,transfer_techs,vintage)),
12702          transfer_linksDecom(linksModelToCalc,yearsSel,transfer_techs,vintage)
12703          * accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"perLinkDecom")
12704   
12705          + transfer_linksTotal(linksModelToCalc,yearsSel,transfer_techs,vintage)
12706          * accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"perLinkTotal")
12707   
12708          + sum (link_types,
12709              transfer_linksDecom(linksModelToCalc,yearsSel,transfer_techs,vintage)
12710              * transfer_lengthParam(linksModelToCalc,link_types,"length")
12711              * accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"perLengthDecom")
12712   
12713              + transfer_linksTotal(linksModelToCalc,yearsSel,transfer_techs,vintage)
12714              * transfer_lengthParam(linksModelToCalc,link_types,"length")
12715              * accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"perLengthTotal"))
12716   
12717          + sum (timeModelSel,
12718              transfer_flowAlong(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
12719              * timeLength(timeModelSel)
12720              * ( accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"perFlow")
12721                  + accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"perFlowAlong"))
12722   
12723              + transfer_flowAgainst(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
12724              * timeLength(timeModelSel)
12725              * ( accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"perFlow")
12726                  + accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"perFlowAgainst")))
12727   
12728          + sum ((timeModelSel, link_types),
12729              transfer_flowAlong(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
12730              * timeLength(timeModelSel)
12731              * transfer_lengthParam(linksModelToCalc,link_types,"length")
12732              * (accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"perFlow")
12733                  + accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"perFlowAlong"))
12734   
12735              + transfer_flowAgainst(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
12736              * timeLength(timeModelSel)
12737              * transfer_lengthParam(linksModelToCalc,link_types,"length")
12738              * (accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"perFlow")
12739                  + accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"perFlowAgainst")))
12740          );
12741   
12742  * // ### Accounting Objective
12743  * // Calculates the indicators for the objective.
12744  * // {Eq_accounting_objective}
12745  Eq_accounting_objective
12746      ..
12747      accounting_objective
12748      =e=
12749      sum ((accNodesModel,accYears,indicator)
12750              $(accounting_indicatorBounds(accNodesModel,accYears,indicator,"obj") <> 0 ),
12751          accounting_indicator(accNodesModel,accYears,indicator) )
12752   
12753   
12754  * ==== model definition ====
12755   
12756  Model M_accounting
12757  /
12758  Eq_accounting_indicatorCalc_links
12759  Eq_accounting_indicatorCalc
12760  Eq_accounting_objective
12761  /;
INCLUDE    C:\Local\REMix\framework\remix\framework\model\source\optiframe.gms
12763  * SPDX-FileCopyrightText: Copyright (c) 2023 German Aerospace Center (DLR)
12764  * SPDX-License-Identifier: BSD-3-Clause
12765   
12766  * ==== optimization frames ====
12768   
12769  * mapping from optimization frame to years
12771  set optiframe / of1 * of2 /;
12772  set optiframeToCalc(optiframe);
12773   
12775  set map_optiframe(optiframe,years) / of1 . #yearsToCalc /;
12777   
12779   
12780  option optiframeToCalc < map_optiframe;
12781   
12782  Model remix /
12783    M_converter
12784    M_storage
12785    M_transfer
12786    M_sourcesink
12787    M_balance
12788    M_accounting
12789  /;
12790   
12791   
12792  * ==== include methods  ====
12793   
12794  * check if the method is valid
12800   
12801   
12802  * if method is pips write the checkanno tool
INCLUDE    C:\Local\REMix\framework\remix\framework\model\source\methods\checkanno.gms
12804  * SPDX-FileCopyrightText: Copyright (c) 2023 German Aerospace Center (DLR)
12805  * SPDX-License-Identifier: BSD-3-Clause
12806   
12809   
12812   
12813  * if method is pips generate the annotated gdx file
INCLUDE    C:\Local\REMix\framework\remix\framework\model\source\methods\pips.gms
12815  * SPDX-FileCopyrightText: Copyright (c) 2023 German Aerospace Center (DLR)
12816  * SPDX-License-Identifier: BSD-3-Clause
12817   
12821   
12822  * if method is solve run the model with commercial solvers
INCLUDE    C:\Local\REMix\framework\remix\framework\model\source\methods\solve.gms
12824  * SPDX-FileCopyrightText: Copyright (c) 2023 German Aerospace Center (DLR)
12825  * SPDX-License-Identifier: BSD-3-Clause
12826   
12829   
12831   
12832  * ==== global options ====
12839   
12840  * ==== general solver options ====
12850   
12851  * ==== cplex options ====
12860   
12861  * ==== copt options ====
12865   
12866  * ==== debug options ====
12869   
12870   
12871  * ==== setup optimization ====
12872  if ((sum(nodesModelToCalc, 1)>40 or sum(timeModelToCalc, 1)>50) and not 0,
12873     option limRow=0, limCol=0, solPrint=off;
12874  else
12875     option limRow=100000, limCol=100000, solPrint=on;
12876  );
12877   
12879   
12880  option mip = cplex;
12881  option reslim = 604800;
12882  option optcr = 1e-3;
12883  remix.threads=4;
12884  remix.optFile = 1;
12885  remix.solveLink = 0;
12886  remix.holdFixed = 1;
12887   
12888   
12889  * ==== configure optionfiles ====
12890   
12892  file opt / "cplex.opt" /;
12893  put opt;
12895  put "rerun no" /;
12896  put "iis 1" /;
12897  put "lpmethod 4" /;
12899  put "barorder 0" /;
12900  put "preind 1" /;
12901  put "scaind 0" /;
12902  put "predual -1" /;
12903  put "baralg 0" /;
12904  put "barstartalg 1" /;
12905  put "barepcomp 1e-6" /;
12906  put "solutiontype 2" /;
12907  put "startalg 4" /;
12908  put "epgap 1e-3" /;
12909  put "quality 1" /;
12910  put "barcolnz 0" /;
12911  put "threads 4" /;
12912  put "parallelmode 1" /;
12915  putclose;
12916   
12918   
12919   
12920  * ==== solve the problem ====
12921   
12922  loop ( optiframeToCalc,
12923      yearsSel(years) = no;
12924      yearsSel(years)$map_optiframe(optiframeToCalc,years) = yes;
12925      yearsToFix(years) = no;
12926      yearsToFix(years)$(years.val < smin(years_a$yearsSel(years_a), years_a.val)) = yes;
12927      accYearsSel(accYears) = no;
12928      accYearsSel("horizon") = yes;
12929      accYearsSel(accYears)$(sum(yearsSel$sameas(accYears,yearsSel), 1)) = yes;
12930      accYearsToFix(accYears) = no;
12931      accYearsToFix(accYears)$(sum(years$(sameas(years,accYears) and years.val < smin(years_a$yearsSel(years_a), years_a.val)), 1) > 0) = yes;
12932      timeModelSel(timeModel) = no;
12933      timeModelSel(timeModel)$timeModelToCalc(timeModel) = yes;
12934      nodesModelSel(nodesModel) = no;
12935      nodesModelSel(nodesModel)$nodesModelToCalc(nodesModel) = yes;
12936   
12937  * Fix decision for years previously optimized in case of myopic or foresight
12938      converter_unitsDelta(nodesModelToCalc,yearsToFix,converter_techs)
12939          $(sum(yearsToCalc$sameas(yearsToFix, yearsToCalc), 1))
12940          = sum(vintage, converter_unitsTotal.l(nodesModelToCalc,yearsToFix,converter_techs,vintage))
12941              - converter_capacityParam(nodesModelToCalc,yearsToFix,converter_techs,"unitsUpperLimit");
12942      converter_unitsDelta(nodesModelToCalc,yearsToFix,converter_techs)
12943          $(converter_unitsDelta(nodesModelToCalc,yearsToFix,converter_techs) < 0) = 0;
12944   
12945      converter_unitsBuild.l(nodesModelToCalc,yearsToFix,converter_techs,vintage)
12946          $converter_availTech(nodesModelToCalc,yearsToFix,converter_techs,vintage)
12947          = converter_unitsBuild.l(nodesModelToCalc,yearsToFix,converter_techs,vintage)
12948              - converter_unitsDelta(nodesModelToCalc,yearsToFix,converter_techs);
12949   
12950      converter_unitsBuild.l(nodesModelToCalc,yearsToFix,converter_techs,vintage)
12951          $(converter_unitsBuild.l(nodesModelToCalc,yearsToFix,converter_techs,vintage) < 0) = 0;
12952      converter_unitsBuild.fx(nodesModelToCalc,yearsToFix,converter_techs,vintage)
12953          = converter_unitsBuild.l(nodesModelToCalc,yearsToFix,converter_techs,vintage);
12954      converter_unitsDecom.l(nodesModelToCalc,yearsToFix,converter_techs,vintage)
12955          $(converter_unitsDecom.l(nodesModelToCalc,yearsToFix,converter_techs,vintage) < 0) = 0;
12956      converter_unitsDecom.fx(nodesModelToCalc,yearsToFix,converter_techs,vintage)
12957          = converter_unitsDecom.l(nodesModelToCalc,yearsToFix,converter_techs,vintage);
12958      converter_unitsTotal.fx(nodesModelToCalc,yearsToFix,converter_techs,vintage)
12959          = converter_unitsTotal.l(nodesModelToCalc,yearsToFix,converter_techs,vintage);
12960   
12961   
12962      storage_unitsDelta(nodesModelToCalc,yearsToFix,storage_techs)
12963          $(sum(yearsToCalc$sameas(yearsToFix, yearsToCalc), 1))
12964          = sum(vintage, storage_unitsTotal.l(nodesModelToCalc,yearsToFix,storage_techs,vintage))
12965              - storage_reservoirParam(nodesModelToCalc,yearsToFix,storage_techs,"unitsUpperLimit");
12966      storage_unitsDelta(nodesModelToCalc,yearsToFix,storage_techs)
12967          $(storage_unitsDelta(nodesModelToCalc,yearsToFix,storage_techs) < 0) = 0;
12968   
12969      storage_unitsBuild.l(nodesModelToCalc,yearsToFix,storage_techs,vintage)
12970          $storage_availTech(nodesModelToCalc,yearsToFix,storage_techs,vintage)
12971          = storage_unitsBuild.l(nodesModelToCalc,yearsToFix,storage_techs,vintage)
12972              - storage_unitsDelta(nodesModelToCalc,yearsToFix,storage_techs);
12973   
12974      storage_unitsBuild.l(nodesModelToCalc,yearsToFix,storage_techs,vintage)
12975          $(storage_unitsBuild.l(nodesModelToCalc,yearsToFix,storage_techs,vintage) < 0) = 0;
12976      storage_unitsBuild.fx(nodesModelToCalc,yearsToFix,storage_techs,vintage)
12977          = storage_unitsBuild.l(nodesModelToCalc,yearsToFix,storage_techs,vintage);
12978      storage_unitsDecom.l(nodesModelToCalc,yearsToFix,storage_techs,vintage)
12979          $(storage_unitsDecom.l(nodesModelToCalc,yearsToFix,storage_techs,vintage) < 0) = 0;
12980      storage_unitsDecom.fx(nodesModelToCalc,yearsToFix,storage_techs,vintage)
12981          = storage_unitsDecom.l(nodesModelToCalc,yearsToFix,storage_techs,vintage);
12982      storage_unitsTotal.fx(nodesModelToCalc,yearsToFix,storage_techs,vintage)
12983          = storage_unitsTotal.l(nodesModelToCalc,yearsToFix,storage_techs,vintage);
12984   
12985   
12986      transfer_linksDelta(linksModelToCalc,yearsToFix,transfer_techs)
12987          $(sum(yearsToCalc$sameas(yearsToFix, yearsToCalc), 1))
12988          = sum(vintage, transfer_linksTotal.l(linksModelToCalc,yearsToFix,transfer_techs,vintage))
12989              - transfer_linksParam(linksModelToCalc,yearsToFix,transfer_techs,"linksUpperLimit");
12990      transfer_linksDelta(linksModelToCalc,yearsToFix,transfer_techs)
12991          $(transfer_linksDelta(linksModelToCalc,yearsToFix,transfer_techs) < 0) = 0;
12992   
12993      transfer_linksBuild.l(linksModelToCalc,yearsToFix,transfer_techs,vintage)
12994          $transfer_availTech(linksModelToCalc,yearsToFix,transfer_techs,vintage)
12995          = transfer_linksBuild.l(linksModelToCalc,yearsToFix,transfer_techs,vintage)
12996              - transfer_linksDelta(linksModelToCalc,yearsToFix,transfer_techs);
12997   
12998      transfer_linksBuild.l(linksModelToCalc,yearsToFix,transfer_techs,vintage)
12999          $(transfer_linksBuild.l(linksModelToCalc,yearsToFix,transfer_techs,vintage) < 0) = 0;
13000      transfer_linksBuild.fx(linksModelToCalc,yearsToFix,transfer_techs,vintage)
13001          = transfer_linksBuild.l(linksModelToCalc,yearsToFix,transfer_techs,vintage);
13002      transfer_linksDecom.l(linksModelToCalc,yearsToFix,transfer_techs,vintage)
13003          $(transfer_linksDecom.l(linksModelToCalc,yearsToFix,transfer_techs,vintage) < 0) = 0;
13004      transfer_linksDecom.fx(linksModelToCalc,yearsToFix,transfer_techs,vintage)
13005          = transfer_linksDecom.l(linksModelToCalc,yearsToFix,transfer_techs,vintage);
13006      transfer_linksTotal.fx(linksModelToCalc,yearsToFix,transfer_techs,vintage)
13007          = transfer_linksTotal.l(linksModelToCalc,yearsToFix,transfer_techs,vintage);
13008   
13009      accounting_indicator.fx(accNodesModel,accYearsToFix,indicator)
13010          = accounting_indicator.l(accNodesModel,accYearsToFix,indicator);
13011   
13012  * Optimize and log values
13013      if (opti_sense < 0,
13014      solve remix minimizing accounting_objective using mip;
13015      else
13016      solve remix maximizing accounting_objective using mip;
13017      );
13018   
13019      put_utility 'log' / 'Model status ' remix.modelstat:0:0;
13020      put_utility 'log' / 'Objective value ' accounting_objective.l:0:3;
13021   
13022  );
13023   
13027   
13028  * if method is pareto solve the model once and afterwards run multiple points along the pareto front
INCLUDE    C:\Local\REMix\framework\remix\framework\model\source\methods\pareto.gms
13030  * SPDX-FileCopyrightText: Copyright (c) 2023 German Aerospace Center (DLR)
13031  * SPDX-License-Identifier: BSD-3-Clause
13032   
13036   
13037  * if method is mga solve the model once and afterwards maximize the length metric of indicators
INCLUDE    C:\Local\REMix\framework\remix\framework\model\source\methods\mga.gms
13039  * SPDX-FileCopyrightText: Copyright (c) 2023 German Aerospace Center (DLR)
13040  * SPDX-License-Identifier: BSD-3-Clause
13041   
13045   
13046  * if method is iternodes run the model by iterating through all nodesToCalc
INCLUDE    C:\Local\REMix\framework\remix\framework\model\source\methods\iternodes.gms
13048  * SPDX-FileCopyrightText: Copyright (c) 2023 German Aerospace Center (DLR)
13049  * SPDX-License-Identifier: BSD-3-Clause
13050   
13054   
13055  * if postcalc is one write the results gdx
INCLUDE    C:\Local\REMix\framework\remix\framework\model\source\postcalc\definition.gms
13057  * SPDX-FileCopyrightText: Copyright (c) 2023 German Aerospace Center (DLR)
13058  * SPDX-License-Identifier: BSD-3-Clause
13059   
13061   
13062  * ==== indicator accounting ====
13063   
13064  indicator_accounting_detailed(indicator,nodesModelToCalc,yearsToCalc,techs)
13065      =
13066  * == converters ==
13067      sum ((converter_techs(techs),vintage)
13068                  $(converter_availTech(nodesModelToCalc,yearsToCalc,converter_techs,vintage)
13069                      and accounting_converterUnits(indicator,nodesModelToCalc,converter_techs,vintage,"useAnnuity") = 0),
13070          converter_unitsBuild.l(nodesModelToCalc,yearsToCalc,converter_techs,vintage)
13071          * accounting_converterUnits(indicator,nodesModelToCalc,converter_techs,vintage,"perUnitBuild"))
13072   
13073      + sum ((years_a,converter_techs(techs),vintage)
13074                  $(converter_availTech(nodesModelToCalc,years_a,converter_techs,vintage)
13075                      and accounting_converterUnits(indicator,nodesModelToCalc,converter_techs,vintage,"useAnnuity") = 1
13076                      and years_a.val + accounting_converterUnits(indicator,nodesModelToCalc,converter_techs,vintage,"amorTime") > yearsToCalc.val
13077                      and years_a.val <= yearsToCalc.val ),
13078          converter_unitsBuild.l(nodesModelToCalc,years_a,converter_techs,vintage)
13079          * accounting_converterUnits(indicator,nodesModelToCalc,converter_techs,vintage,"perUnitBuild")
13080          * accounting_annuityFactor_converter(indicator,nodesModelToCalc,converter_techs,vintage) )
13081   
13082      + sum ((converter_techs(techs),vintage)
13083                  $converter_usedTech(nodesModelToCalc,yearsToCalc,converter_techs,vintage),
13084          converter_unitsDecom.l(nodesModelToCalc,yearsToCalc,converter_techs,vintage)
13085          * accounting_converterUnits(indicator,nodesModelToCalc,converter_techs,vintage,"perUnitDecom")
13086   
13087          + converter_unitsTotal.l(nodesModelToCalc,yearsToCalc,converter_techs,vintage)
13088          * accounting_converterUnits(indicator,nodesModelToCalc,converter_techs,vintage,"perUnitTotal") )
13089   
13090      + sum ((timeModelToCalc,converter_techs(techs),vintage,activity)
13091                  $converter_usedTechAct(nodesModelToCalc,yearsToCalc,converter_techs,vintage,activity),
13092          converter_activity.l(timeModelToCalc,nodesModelToCalc,yearsToCalc,converter_techs,vintage,activity)
13093          * timeLength(timeModelToCalc)
13094          * accounting_converterActivity(indicator,nodesModelToCalc,converter_techs,vintage,activity,"perActivity") )
13095   
13096      + sum ((timeModelToCalc,converter_techs(techs),vintage)
13097                  $converter_usedTech(nodesModelToCalc,yearsToCalc,converter_techs,vintage),
13098          converter_unitStartups.l(timeModelToCalc,nodesModelToCalc,yearsToCalc,converter_techs,vintage)
13099          * accounting_converterStartup(indicator,nodesModelToCalc,converter_techs,vintage,"perStartup") )
13100   
13101      + sum ((timeModelToCalc,converter_techs(techs),vintage)
13102                  $converter_usedTech(nodesModelToCalc,yearsToCalc,converter_techs,vintage),
13103          converter_rampPos.l(timeModelToCalc,nodesModelToCalc,yearsToCalc,converter_techs,vintage)
13104          * (accounting_converterStartup(indicator,nodesModelToCalc,converter_techs,vintage,"perRamp")
13105              + accounting_converterStartup(indicator,nodesModelToCalc,converter_techs,vintage,"perRampPos"))
13106   
13107          + converter_rampNeg.l(timeModelToCalc,nodesModelToCalc,yearsToCalc,converter_techs,vintage)
13108          * (accounting_converterStartup(indicator,nodesModelToCalc,converter_techs,vintage,"perRamp")
13109              + accounting_converterStartup(indicator,nodesModelToCalc,converter_techs,vintage,"perRampNeg")))
13110   
13111  * == storage ==
13112      + sum ((storage_techs(techs),vintage)
13113                  $(storage_availTech(nodesModelToCalc,yearsToCalc,storage_techs,vintage)
13114                      and accounting_storageUnits(indicator,nodesModelToCalc,storage_techs,vintage,"useAnnuity") = 0),
13115          storage_unitsBuild.l(nodesModelToCalc,yearsToCalc,storage_techs,vintage)
13116          * accounting_storageUnits(indicator,nodesModelToCalc,storage_techs,vintage,"perUnitBuild") )
13117   
13118      + sum ((years_a,storage_techs(techs),vintage)
13119                  $(storage_availTech(nodesModelToCalc,yearsToCalc,storage_techs,vintage)
13120                      and accounting_storageUnits(indicator,nodesModelToCalc,storage_techs,vintage,"useAnnuity") = 1
13121                      and years_a.val + accounting_storageUnits(indicator,nodesModelToCalc,storage_techs,vintage,"amorTime") > yearsToCalc.val
13122                      and years_a.val <= yearsToCalc.val ),
13123          storage_unitsBuild.l(nodesModelToCalc,years_a,storage_techs,vintage)
13124          * accounting_storageUnits(indicator,nodesModelToCalc,storage_techs,vintage,"perUnitBuild")
13125          * accounting_annuityFactor_storage(indicator,nodesModelToCalc,storage_techs,vintage) )
13126   
13127      + sum ((storage_techs(techs),vintage)
13128                  $storage_usedTech(nodesModelToCalc,yearsToCalc,storage_techs,vintage),
13129          storage_unitsDecom.l(nodesModelToCalc,yearsToCalc,storage_techs,vintage)
13130          * accounting_storageUnits(indicator,nodesModelToCalc,storage_techs,vintage,"perUnitDecom")
13131   
13132          + storage_unitsTotal.l(nodesModelToCalc,yearsToCalc,storage_techs,vintage)
13133          * accounting_storageUnits(indicator,nodesModelToCalc,storage_techs,vintage,"perUnitTotal") )
13134   
13135  * == transfer ==
13136      + sum ((linksModel,transfer_techs(techs),vintage)
13137                  $(transfer_availTech(linksModel,yearsToCalc,transfer_techs,vintage)
13138                      and linksModelToCalc(linksModel)
13139                      and transfer_incidenceModel(nodesModelToCalc,linksModel) <> 0
13140                      and accounting_transferLinks(indicator,linksModel,transfer_techs,vintage,"useAnnuity") = 0),
13141          0.5
13142          * transfer_linksBuild.l(linksModel,yearsToCalc,transfer_techs,vintage)
13143          * accounting_transferLinks(indicator,linksModel,transfer_techs,vintage,"perLinkBuild") )
13144   
13145      + sum ((linksModel,years_a,transfer_techs(techs),vintage)
13146                  $(transfer_availTech(linksModel,yearsToCalc,transfer_techs,vintage)
13147                      and linksModelToCalc(linksModel)
13148                      and transfer_incidenceModel(nodesModelToCalc,linksModel) <> 0
13149                      and accounting_transferLinks(indicator,linksModel,transfer_techs,vintage,"useAnnuity") = 1
13150                      and years_a.val + accounting_transferLinks(indicator,linksModel,transfer_techs,vintage,"amorTime") > yearsToCalc.val
13151                      and years_a.val <= yearsToCalc.val ),
13152          0.5
13153          * transfer_linksBuild.l(linksModel,years_a,transfer_techs,vintage)
13154          * accounting_transferLinks(indicator,linksModel,transfer_techs,vintage,"perLinkBuild")
13155          * accounting_annuityFactor_transferLink(indicator,linksModel,transfer_techs,vintage) )
13156   
13157      + sum ((linksModel,transfer_techs(techs),vintage,link_types)
13158                  $(transfer_availTech(linksModel,yearsToCalc,transfer_techs,vintage)
13159                      and linksModelToCalc(linksModel)
13160                      and transfer_incidenceModel(nodesModelToCalc,linksModel) <> 0
13161                      and accounting_transferPerLength(indicator,linksModel,transfer_techs,vintage,link_types,"useAnnuity") = 0 ),
13162          0.5
13163          * transfer_linksBuild.l(linksModel,yearsToCalc,transfer_techs,vintage)
13164          * transfer_lengthParam(linksModel,link_types,"length")
13165          * accounting_transferPerLength(indicator,linksModel,transfer_techs,vintage,link_types,"perLengthBuild") )
13166   
13167      + sum ((linksModel,years_a,transfer_techs(techs),vintage,link_types)
13168                  $(transfer_availTech(linksModel,yearsToCalc,transfer_techs,vintage)
13169                      and linksModelToCalc(linksModel)
13170                      and transfer_incidenceModel(nodesModelToCalc,linksModel) <> 0
13171                      and accounting_transferPerLength(indicator,linksModel,transfer_techs,vintage,link_types,"useAnnuity") = 1
13172                      and years_a.val + accounting_transferPerLength(indicator,linksModel,transfer_techs,vintage,link_types,"amorTime") > yearsToCalc.val
13173                      and years_a.val <= yearsToCalc.val ),
13174          0.5
13175          * transfer_linksBuild.l(linksModel,years_a,transfer_techs,vintage)
13176          * transfer_lengthParam(linksModel,link_types,"length")
13177          * accounting_transferPerLength(indicator,linksModel,transfer_techs,vintage,link_types,"perLengthBuild")
13178          * accounting_annuityFactor_transferDistance(indicator,linksModel,transfer_techs,vintage,link_types) )
13179   
13180      + sum ((linksModel,transfer_techs(techs),vintage)
13181                  $(transfer_usedTech(linksModel,yearsToCalc,transfer_techs,vintage)
13182                      and linksModelToCalc(linksModel)
13183                      and transfer_incidenceModel(nodesModelToCalc,linksModel) <> 0 ),
13184          0.5
13185          * transfer_linksDecom.l(linksModel,yearsToCalc,transfer_techs,vintage)
13186          * accounting_transferLinks(indicator,linksModel,transfer_techs,vintage,"perLinkDecom")
13187   
13188          + 0.5
13189          * transfer_linksTotal.l(linksModel,yearsToCalc,transfer_techs,vintage)
13190          * accounting_transferLinks(indicator,linksModel,transfer_techs,vintage,"perLinkTotal")
13191   
13192          + 0.5
13193          * sum (link_types,
13194              transfer_linksDecom.l(linksModel,yearsToCalc,transfer_techs,vintage)
13195              * transfer_lengthParam(linksModel,link_types,"length")
13196              * accounting_transferPerLength(indicator,linksModel,transfer_techs,vintage,link_types,"perLengthDecom")
13197   
13198              + transfer_linksTotal.l(linksModel,yearsToCalc,transfer_techs,vintage)
13199              * transfer_lengthParam(linksModel,link_types,"length")
13200              * accounting_transferPerLength(indicator,linksModel,transfer_techs,vintage,link_types,"perLengthTotal"))
13201   
13202          + 0.5
13203          * sum (timeModelToCalc,
13204              transfer_flowAlong.l(timeModelToCalc,linksModel,yearsToCalc,transfer_techs,vintage)
13205              * timeLength(timeModelToCalc)
13206              * ( accounting_transferLinks(indicator,linksModel,transfer_techs,vintage,"perFlow")
13207                  + accounting_transferLinks(indicator,linksModel,transfer_techs,vintage,"perFlowAlong"))
13208   
13209              + transfer_flowAgainst.l(timeModelToCalc,linksModel,yearsToCalc,transfer_techs,vintage)
13210              * timeLength(timeModelToCalc)
13211              * ( accounting_transferLinks(indicator,linksModel,transfer_techs,vintage,"perFlow")
13212                  + accounting_transferLinks(indicator,linksModel,transfer_techs,vintage,"perFlowAgainst")))
13213   
13214          + 0.5
13215          * sum ((timeModelToCalc, link_types),
13216              transfer_flowAlong.l(timeModelToCalc,linksModel,yearsToCalc,transfer_techs,vintage)
13217              * timeLength(timeModelToCalc)
13218              * transfer_lengthParam(linksModel,link_types,"length")
13219              * (accounting_transferPerLength(indicator,linksModel,transfer_techs,vintage,link_types,"perFlow")
13220                  + accounting_transferPerLength(indicator,linksModel,transfer_techs,vintage,link_types,"perFlowAlong"))
13221   
13222              + transfer_flowAgainst.l(timeModelToCalc,linksModel,yearsToCalc,transfer_techs,vintage)
13223              * timeLength(timeModelToCalc)
13224              * transfer_lengthParam(linksModel,link_types,"length")
13225              * (accounting_transferPerLength(indicator,linksModel,transfer_techs,vintage,link_types,"perFlow")
13226                  + accounting_transferPerLength(indicator,linksModel,transfer_techs,vintage,link_types,"perFlowAgainst"))))
13227   
13228   
13229  * == sources / sinks ==
13230      + sum ((timeModelToCalc,sourcesink_techs(techs),commodity)
13231              $sourcesink_enabled(nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity),
13232          sourcesink_flow.l(timeModelToCalc,nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity)
13233          * timeLength(timeModelToCalc)
13234          * accounting_sourcesinkFlow(indicator,nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity,"perFlow"))
13235      ;
13236   
13237   
13238  * ==== full set of main indicators ====
13239   
13240  indicator_accounting(accNodesModel,accYears,indicator)
13241      $sum((accNodesModel_a,accYears_a,indicator_a)
13242              $compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a), 1)
13243      =
13244      + sum((accNodesModel_a,accYears_a,indicator_a)
13245              $(compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
13246                  and variableIndicators(accNodesModel_a,accYears_a,indicator_a)),
13247          compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
13248          * accounting_indicator.l(accNodesModel_a,accYears_a,indicator_a))
13249   
13250      + sum((accNodesModel_a,accYears_a,indicator_a)
13251              $(compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)),
13252          compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
13253          * (sum((nodesModelToCalc,yearsToCalc,techs)
13254                  $(sameas(accNodesModel_a, nodesModelToCalc)
13255                      and sameas(accYears_a, yearsToCalc)),
13256                  indicator_accounting_detailed(indicator_a,nodesModelToCalc,yearsToCalc,techs))))
13257      ;
13258   
13259  indicator_accounting_comp(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
13260      $compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
13261      =
13262          compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
13263          * accounting_indicator.l(accNodesModel_a,accYears_a,indicator_a)
13264              $variableIndicators(accNodesModel_a,accYears_a,indicator_a)
13265   
13266          + compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
13267          * (sum((nodesModelToCalc,yearsToCalc,techs)
13268                  $(sameas(accNodesModel_a, nodesModelToCalc)
13269                      and sameas(accYears_a, yearsToCalc)),
13270                  indicator_accounting_detailed(indicator_a,nodesModelToCalc,yearsToCalc,techs)))
13271      ;
13272   
13273  indicator_accounting_ref(accNodesModel,accYears,indicator)
13274      $accounting_indicator.l(accNodesModel,accYears,indicator)
13275      = accounting_indicator.l(accNodesModel,accYears,indicator);
13276   
13277  * ==== link-specific indicator accounting ====
13278   
13279  indicator_accounting_links(indicator,nodesModelToCalc,nodesModelToCalc_a,linksModelToCalc,yearsToCalc,techs)
13280      $(transfer_incidenceModel(nodesModelToCalc,linksModelToCalc) < 0
13281          and transfer_incidenceModel(nodesModelToCalc_a,linksModelToCalc) > 0)
13282      =
13283      sum ((transfer_techs(techs),vintage)
13284                  $(transfer_availTech(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
13285                      and accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"useAnnuity") = 0),
13286          transfer_linksBuild.l(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
13287          * accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"perLinkBuild") )
13288   
13289      + sum ((years_a,transfer_techs(techs),vintage)
13290                  $(transfer_availTech(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
13291                      and accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"useAnnuity") = 1
13292                      and years_a.val + accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"amorTime") > yearsToCalc.val
13293                      and years_a.val <= yearsToCalc.val ),
13294          transfer_linksBuild.l(linksModelToCalc,years_a,transfer_techs,vintage)
13295          * accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"perLinkBuild")
13296          * accounting_annuityFactor_transferLink(indicator,linksModelToCalc,transfer_techs,vintage) )
13297   
13298      + sum ((transfer_techs(techs),vintage,link_types)
13299                  $(transfer_availTech(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
13300                      and accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"useAnnuity") = 0 ),
13301          transfer_linksBuild.l(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
13302          * transfer_lengthParam(linksModelToCalc,link_types,"length")
13303          * accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"perLengthBuild") )
13304   
13305      + sum ((years_a,transfer_techs(techs),vintage,link_types)
13306                  $(transfer_availTech(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
13307                      and accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"useAnnuity") = 1
13308                      and years_a.val + accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"amorTime") > yearsToCalc.val
13309                      and years_a.val <= yearsToCalc.val ),
13310          transfer_linksBuild.l(linksModelToCalc,years_a,transfer_techs,vintage)
13311          * transfer_lengthParam(linksModelToCalc,link_types,"length")
13312          * accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"perLengthBuild")
13313          * accounting_annuityFactor_transferDistance(indicator,linksModelToCalc,transfer_techs,vintage,link_types) )
13314   
13315      + sum ((transfer_techs(techs),vintage)
13316                  $(transfer_usedTech(linksModelToCalc,yearsToCalc,transfer_techs,vintage)),
13317          transfer_linksDecom.l(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
13318          * accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"perLinkDecom")
13319   
13320          + transfer_linksTotal.l(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
13321          * accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"perLinkTotal")
13322   
13323          + sum (link_types,
13324              transfer_linksDecom.l(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
13325              * transfer_lengthParam(linksModelToCalc,link_types,"length")
13326              * accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"perLengthDecom")
13327   
13328              + transfer_linksTotal.l(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
13329              * transfer_lengthParam(linksModelToCalc,link_types,"length")
13330              * accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"perLengthTotal"))
13331   
13332          + sum (timeModelToCalc,
13333              transfer_flowAlong.l(timeModelToCalc,linksModelToCalc,yearsToCalc,transfer_techs,vintage)
13334              * timeLength(timeModelToCalc)
13335              * ( accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"perFlow")
13336                  + accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"perFlowAlong"))
13337   
13338              + transfer_flowAgainst.l(timeModelToCalc,linksModelToCalc,yearsToCalc,transfer_techs,vintage)
13339              * timeLength(timeModelToCalc)
13340              * ( accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"perFlow")
13341                  + accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"perFlowAgainst")))
13342   
13343          + sum ((timeModelToCalc, link_types),
13344              transfer_flowAlong.l(timeModelToCalc,linksModelToCalc,yearsToCalc,transfer_techs,vintage)
13345              * timeLength(timeModelToCalc)
13346              * transfer_lengthParam(linksModelToCalc,link_types,"length")
13347              * (accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"perFlow")
13348                  + accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"perFlowAlong"))
13349   
13350              + transfer_flowAgainst.l(timeModelToCalc,linksModelToCalc,yearsToCalc,transfer_techs,vintage)
13351              * timeLength(timeModelToCalc)
13352              * transfer_lengthParam(linksModelToCalc,link_types,"length")
13353              * (accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"perFlow")
13354                  + accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"perFlowAgainst")))
13355      );
13356   
13357   
13358  * == converter capacities ==
13359   
13360  converter_ratedInput(converter_techs,vintage,commodity)
13361      $(converter_techParam(converter_techs,vintage,"lifeTime") > 0)
13362      = smin(activity$converter_usedAct(converter_techs,vintage,activity),
13363              converter_coefficient(converter_techs,vintage,activity,commodity,"coefficient"));
13364  converter_ratedInput(converter_techs,vintage,commodity)
13365      $(converter_ratedInput(converter_techs,vintage,commodity) > 0)
13366      = 0;
13367   
13368  converter_ratedOutput(converter_techs,vintage,commodity)
13369      $(converter_techParam(converter_techs,vintage,"lifeTime") > 0)
13370      = smax(activity$converter_usedAct(converter_techs,vintage,activity),
13371              converter_coefficient(converter_techs,vintage,activity,commodity,"coefficient"));
13372  converter_ratedOutput(converter_techs,vintage,commodity)
13373      $(converter_ratedOutput(converter_techs,vintage,commodity) < 0)
13374      = 0;
13375   
13376  converter_ratedOutput_min(nodesModelToCalc,years,converter_techs(techs),commodity)
13377      $sum(vintage$(converter_usedTech(nodesModelToCalc,years,converter_techs,vintage)
13378          and converter_ratedOutput(converter_techs,vintage,commodity)), 1)
13379      = smin(vintage$(converter_usedTech(nodesModelToCalc,years,converter_techs,vintage)
13380              and converter_ratedOutput(converter_techs,vintage,commodity)),
13381          converter_ratedOutput(converter_techs,vintage,commodity));
13382   
13383  converter_ratedOutput_max(nodesModelToCalc,years,converter_techs(techs),commodity)
13384      $sum(vintage$(converter_usedTech(nodesModelToCalc,years,converter_techs,vintage)
13385          and converter_ratedOutput(converter_techs,vintage,commodity)), 1)
13386      = smax(vintage$(converter_usedTech(nodesModelToCalc,years,converter_techs,vintage)
13387              and converter_ratedOutput(converter_techs,vintage,commodity)),
13388          converter_ratedOutput(converter_techs,vintage,commodity));
13389   
13390  converter_units_ext(map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,years),converter_techs(techs),vintage,"build")
13391      = converter_unitsBuild.l(nodesModelToCalc,years,converter_techs,vintage);
13392   
13393  converter_units_ext(map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,years),converter_techs(techs),vintage,"decom")
13394      = converter_unitsDecom.l(nodesModelToCalc,years,converter_techs,vintage);
13395   
13396  converter_units_ext(map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,years),converter_techs(techs),vintage,"total")
13397      = converter_unitsTotal.l(nodesModelToCalc,years,converter_techs,vintage);
13398   
13399  converter_caps_ext(map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,years),converter_techs(techs),vintage,commodity,capType)
13400      $(converter_ratedOutput(converter_techs,vintage,commodity))
13401      = converter_units_ext(accNodesModel,nodesModelToCalc,accYears,years,techs,vintage,capType)
13402          * converter_ratedOutput(converter_techs,vintage,commodity);
13403   
13404  converter_caps_ext(map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,years),converter_techs(techs),vintage,commodity,"lowerLimit")
13405      $(converter_usedTech(nodesModelToCalc,years,converter_techs,vintage)
13406          and converter_capacityParam(nodesModelToCalc,years,converter_techs,"unitsLowerLimit") > 0
13407          and converter_ratedOutput_min(nodesModelToCalc,years,converter_techs,commodity))
13408      = converter_capacityParam(nodesModelToCalc,years,converter_techs,"unitsLowerLimit")
13409          * converter_ratedOutput_min(nodesModelToCalc,years,converter_techs,commodity);
13410   
13411  converter_caps_ext(map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,years),converter_techs(techs),vintage,commodity,"upperLimit")
13412      $(converter_usedTech(nodesModelToCalc,years,converter_techs,vintage)
13413          and converter_capacityParam(nodesModelToCalc,years,converter_techs,"unitsUpperLimit") < inf
13414          and converter_ratedOutput_min(nodesModelToCalc,years,converter_techs,commodity))
13415      = converter_capacityParam(nodesModelToCalc,years,converter_techs,"unitsUpperLimit")
13416          * converter_ratedOutput_max(nodesModelToCalc,years,converter_techs,commodity);
13417   
13418  converter_caps(accNodesModel,accYears,converter_techs(techs),commodity,capType)
13419      = sum((nodesModelToCalc,years,vintage)
13420              $(map_accNodesPostCalc(accNodesModel,nodesModelToCalc)
13421                  and map_accYearsPostCalc(accYears,years)),
13422          converter_caps_ext(accNodesModel,nodesModelToCalc,accYears,years,converter_techs,vintage,commodity,capType));
13423  option clear = converter_caps_ext;
13424   
13425  converter_units(accNodesModel,accYears,converter_techs(techs),vintage,capType)
13426      = sum((nodesModelToCalc,years)
13427              $(map_accNodesPostCalc(accNodesModel,nodesModelToCalc)
13428                  and map_accYearsPostCalc(accYears,years)),
13429          converter_units_ext(accNodesModel,nodesModelToCalc,accYears,years,converter_techs,vintage,capType));
13430  option clear = converter_units_ext;
13431   
13432   
13433  * ==== transfer capacities ====
13434   
13435  max_transfer_coefficient(transfer_techs(techs),commodity)
13436          $(smax(vintage, transfer_coefficient(transfer_techs,vintage,commodity,"coefficient")) > 0)
13437          = smax(vintage, transfer_coefficient(transfer_techs,vintage,commodity,"coefficient"));
13438   
13439  min_transfer_coefficient(transfer_techs(techs),commodity)
13440          $(smin(vintage, transfer_coefficient(transfer_techs,vintage,commodity,"coefficient")) > 0)
13441          = smin(vintage, transfer_coefficient(transfer_techs,vintage,commodity,"coefficient"));
13442   
13443   
13444  transfer_links(linksModel,years,transfer_techs,vintage,"build")
13445      = transfer_linksBuild.l(linksModel,years,transfer_techs,vintage);
13446   
13447  transfer_links(linksModel,years,transfer_techs,vintage,"decom")
13448      = transfer_linksDecom.l(linksModel,years,transfer_techs,vintage);
13449   
13450  transfer_links(linksModel,years,transfer_techs,vintage,"total")
13451      = transfer_linksTotal.l(linksModel,years,transfer_techs,vintage);
13452   
13453  transfer_caps(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,years,transfer_techs(techs),commodity,capType)
13454      $(transfer_incidenceModel(nodesModelToCalc_start,linksModel) < 0
13455          and transfer_incidenceModel(nodesModelToCalc_end,linksModel) > 0)
13456      = sum(vintage,
13457          transfer_links(linksModel,years,transfer_techs,vintage,capType)
13458          * transfer_coefficient(transfer_techs,vintage,commodity,"coefficient"));
13459   
13460  transfer_caps(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,years,transfer_techs(techs),commodity,"lowerLimit")
13461      $(transfer_linksParam(linksModel,years,transfer_techs,'linksLowerLimit') > 0
13462          and transfer_incidenceModel(nodesModelToCalc_start,linksModel) < 0
13463          and transfer_incidenceModel(nodesModelToCalc_end,linksModel) > 0
13464          and sum(vintage$(transfer_usedTech(linksModel,years,transfer_techs,vintage)
13465                              and transfer_coefficient(transfer_techs,vintage,commodity,"coefficient")), 1))
13466      = transfer_linksParam(linksModel,years,transfer_techs,'linksLowerLimit')
13467          * min_transfer_coefficient(transfer_techs,commodity);
13468   
13469  transfer_caps(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,years,transfer_techs(techs),commodity,"upperLimit")
13470      $(transfer_linksParam(linksModel,years,transfer_techs,'linksUpperLimit') < inf
13471          and transfer_incidenceModel(nodesModelToCalc_start,linksModel) < 0
13472          and transfer_incidenceModel(nodesModelToCalc_end,linksModel) > 0
13473          and sum(vintage$(transfer_usedTech(linksModel,years,transfer_techs,vintage)
13474                              and transfer_coefficient(transfer_techs,vintage,commodity,"coefficient")), 1))
13475      = transfer_linksParam(linksModel,years,transfer_techs,'linksUpperLimit')
13476          * max_transfer_coefficient(transfer_techs,commodity);
13477   
13478   
13479  * ==== transfer flows ====
13480   
13481  transfer_flows(timeModelToCalc,nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs(techs),commodity)
13482      $(transfer_incidenceModel(nodesModelToCalc_start,linksModel) < 0
13483          and transfer_incidenceModel(nodesModelToCalc_end,linksModel) > 0)
13484      = sum(vintage,
13485          ( transfer_flowAlong.l(timeModelToCalc,linksModel,yearsToCalc,transfer_techs,vintage)
13486              - transfer_flowAgainst.l(timeModelToCalc,linksModel,yearsToCalc,transfer_techs,vintage) )
13487          * timeLength(timeModelToCalc)
13488          * transfer_coefficient(transfer_techs,vintage,commodity,"coefficient"));
13489   
13490  transfer_flows_annual(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs(techs),commodity,"netto")
13491      = sum(timeModelToCalc,
13492          transfer_flows(timeModelToCalc,nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs,commodity));
13493   
13494  transfer_flows_annual(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs(techs),commodity,"positive")
13495      = sum(timeModelToCalc
13496              $(transfer_flows(timeModelToCalc,nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs,commodity) > 0),
13497          transfer_flows(timeModelToCalc,nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs,commodity));
13498   
13499  transfer_flows_annual(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs(techs),commodity,"negative")
13500      = sum(timeModelToCalc
13501              $(transfer_flows(timeModelToCalc,nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs,commodity) < 0),
13502          transfer_flows(timeModelToCalc,nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs,commodity));
13503   
13504  transfer_flows_annual(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs(techs),commodity,"brutto")
13505      = transfer_flows_annual(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs,commodity,"positive")
13506          - transfer_flows_annual(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs,commodity,"negative");
13507   
13508  transfer_flows_annual(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs(techs),commodity,"flh")
13509      $(transfer_flows_annual(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs,commodity,"brutto") > 0
13510          and transfer_caps(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs,commodity,"total") > 0)
13511      = transfer_flows_annual(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs,commodity,"brutto")
13512          / transfer_caps(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs,commodity,"total");
13513   
13514  transfer_losses(timeModelToCalc,nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs(techs),commodity)
13515      $(transfer_incidenceModel(nodesModelToCalc_start,linksModel) < 0
13516          and transfer_incidenceModel(nodesModelToCalc_end,linksModel) > 0)
13517      = -1 * abs(sum(vintage,
13518          ( transfer_flowAlong.l(timeModelToCalc,linksModel,yearsToCalc,transfer_techs,vintage)
13519              - transfer_flowAgainst.l(timeModelToCalc,linksModel,yearsToCalc,transfer_techs,vintage) )
13520          * ( transfer_coefPerFlow(transfer_techs,vintage,commodity,"coefPerFlow")
13521              + sum(link_types,
13522                  transfer_coefPerLength(transfer_techs,vintage,commodity,link_types,"coefPerLength")
13523                  * transfer_lengthParam(linksModel,link_types,"length")))))
13524          * timeLength(timeModelToCalc);
13525   
13526  transfer_losses_annual(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs(techs),commodity,"netto")
13527      = sum(timeModelToCalc,
13528          transfer_losses(timeModelToCalc,nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs,commodity));
13529   
13530   
13531  * ==== storage capacities ====
13532   
13533  storage_size_max(nodesModelToCalc,years,storage_techs(techs),commodity)
13534      $sum(vintage$(storage_usedTech(nodesModelToCalc,years,storage_techs,vintage)
13535              and storage_usedCom(storage_techs,vintage,commodity)
13536              and storage_sizeParam(storage_techs,vintage,commodity,"size")), 1)
13537      = smax(vintage$(storage_usedTech(nodesModelToCalc,years,storage_techs,vintage)
13538              and storage_usedCom(storage_techs,vintage,commodity)
13539              and storage_sizeParam(storage_techs,vintage,commodity,"size")),
13540          storage_sizeParam(storage_techs,vintage,commodity,"size"));
13541   
13542  storage_size_min(nodesModelToCalc,years,storage_techs(techs),commodity)
13543      $sum(vintage$(storage_usedTech(nodesModelToCalc,years,storage_techs,vintage)
13544              and storage_usedCom(storage_techs,vintage,commodity)
13545              and storage_sizeParam(storage_techs,vintage,commodity,"size")), 1)
13546      = smin(vintage$(storage_usedTech(nodesModelToCalc,years,storage_techs,vintage)
13547              and storage_usedCom(storage_techs,vintage,commodity)
13548              and storage_sizeParam(storage_techs,vintage,commodity,"size")),
13549          storage_sizeParam(storage_techs,vintage,commodity,"size"));
13550   
13551  storage_units_ext(map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,years),storage_techs(techs),vintage,"build")
13552      $storage_usedTech(nodesModelToCalc,years,storage_techs,vintage)
13553      = storage_unitsBuild.l(nodesModelToCalc,years,storage_techs,vintage);
13554   
13555  storage_units_ext(map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,years),storage_techs(techs),vintage,"decom")
13556      $storage_usedTech(nodesModelToCalc,years,storage_techs,vintage)
13557      = storage_unitsDecom.l(nodesModelToCalc,years,storage_techs,vintage);
13558   
13559  storage_units_ext(map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,years),storage_techs(techs),vintage,"total")
13560      $storage_usedTech(nodesModelToCalc,years,storage_techs,vintage)
13561      = storage_unitsTotal.l(nodesModelToCalc,years,storage_techs,vintage);
13562   
13563  storage_caps_ext(map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,years),storage_techs(techs),vintage,commodity,capType)
13564      $storage_sizeParam(storage_techs,vintage,commodity,"size")
13565      = storage_units_ext(accNodesModel,nodesModelToCalc,accYears,years,storage_techs,vintage,capType)
13566          * storage_sizeParam(storage_techs,vintage,commodity,"size");
13567   
13568  storage_caps_ext(map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,years),storage_techs(techs),vintage,commodity,"lowerLimit")
13569      $(storage_usedTech(nodesModelToCalc,years,storage_techs,vintage)
13570          and storage_reservoirParam(nodesModelToCalc,years,storage_techs,"unitsLowerLimit") > 0
13571          and storage_size_min(nodesModelToCalc,years,storage_techs,commodity))
13572      = storage_reservoirParam(nodesModelToCalc,years,storage_techs,"unitsLowerLimit")
13573          * storage_size_min(nodesModelToCalc,years,storage_techs,commodity);
13574   
13575  storage_caps_ext(map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,years),storage_techs(techs),vintage,commodity,"upperLimit")
13576      $(storage_usedTech(nodesModelToCalc,years,storage_techs,vintage)
13577          and storage_reservoirParam(nodesModelToCalc,years,storage_techs,"unitsUpperLimit") < inf
13578          and storage_size_max(nodesModelToCalc,years,storage_techs,commodity))
13579      = storage_reservoirParam(nodesModelToCalc,years,storage_techs,"unitsUpperLimit")
13580          * storage_size_max(nodesModelToCalc,years,storage_techs,commodity);
13581   
13582  storage_caps_ext(map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,years),storage_techs(techs),vintage,commodity,"total_degraded")
13583      $(storage_usedCom(storage_techs,vintage,commodity)
13584          and (storage_techParam(storage_techs,vintage,"annualDegradation") > 0
13585               or storage_techParam(storage_techs,vintage,"usageDegradation")))
13586      = sum((degradation_states,yearsCom), (storage_degradationParam(storage_techs,vintage,degradation_states,"remainingCapacity")
13587                                      - (years.val - yearsCom.val) * storage_techParam(storage_techs,vintage,"annualDegradation"))
13588                                      * storage_unitsStateTracker.l(nodesModelToCalc,years,yearsCom,storage_techs,vintage,degradation_states)
13589                                      * storage_sizeParam(storage_techs,vintage,commodity,"size"));
13590   
13591  storage_caps(accNodesModel,accYears,storage_techs(techs),commodity,capType)
13592      = sum((nodesModelToCalc,years,vintage)
13593              $(map_accNodesPostCalc(accNodesModel,nodesModelToCalc)
13594                  and map_accYearsPostCalc(accYears,years)),
13595          storage_caps_ext(accNodesModel,nodesModelToCalc,accYears,years,storage_techs,vintage,commodity,capType));
13596  option clear = storage_caps_ext;
13597   
13598  storage_units(accNodesModel,accYears,storage_techs(techs),vintage,capType)
13599      = sum((nodesModelToCalc,years)
13600              $(map_accNodesPostCalc(accNodesModel,nodesModelToCalc)
13601                  and map_accYearsPostCalc(accYears,years)),
13602          storage_units_ext(accNodesModel,nodesModelToCalc,accYears,years,storage_techs,vintage,capType));
13603  option clear = storage_units_ext;
13604   
13605   
13606  * ==== storage levels and flows ====
13607   
13608  storage_flows_ext(timeModelToCalc,map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,yearsToCalc),storage_techs(techs),vintage,commodity)
13609      $(storage_usedTech(nodesModelToCalc,yearsToCalc,storage_techs,vintage) and balance_techComm(storage_techs,commodity))
13610      = storage_level.l(timeModelToCalc,nodesModelToCalc,yearsToCalc,storage_techs,vintage,commodity)
13611          - storage_level.l(timeModelToCalc--1,nodesModelToCalc,yearsToCalc,storage_techs,vintage,commodity)
13613      + storage_losses.l(timeModelToCalc,nodesModelToCalc,yearsToCalc,storage_techs,vintage,commodity)
13614          * timeLength(timeModelToCalc)
13616      ;
13617   
13618  storage_flows(timeModelToCalc,accNodesModel,accYears,storage_techs(techs),commodity)
13619      = sum((nodesModelToCalc,yearsToCalc,vintage)
13620              $(storage_usedTech(nodesModelToCalc,yearsToCalc,storage_techs,vintage) and balance_techComm(storage_techs,commodity)),
13621          storage_flows_ext(timeModelToCalc,accNodesModel,nodesModelToCalc,accYears,yearsToCalc,storage_techs,vintage,commodity));
13622  option clear = storage_flows_ext;
13623   
13624  storage_level_out_ext(timeModelToCalc,map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,yearsToCalc),storage_techs(techs),vintage,commodity)
13625      $(storage_usedTech(nodesModelToCalc,yearsToCalc,storage_techs,vintage) and balance_techComm(storage_techs,commodity))
13626      = storage_level.l(timeModelToCalc,nodesModelToCalc,yearsToCalc,storage_techs,vintage,commodity);
13627   
13628  storage_level_out(timeModelToCalc,accNodesModel,accYears,storage_techs(techs),commodity)
13629      = sum((nodesModelToCalc,yearsToCalc,vintage)
13630              $(storage_usedTech(nodesModelToCalc,yearsToCalc,storage_techs,vintage) and balance_techComm(storage_techs,commodity)),
13631          storage_level_out_ext(timeModelToCalc,accNodesModel,nodesModelToCalc,accYears,yearsToCalc,storage_techs,vintage,commodity));
13632  option clear = storage_level_out_ext;
13633   
13634  storage_flows_annual(accNodesModel,accYears,storage_techs(techs),commodity,"netto")
13635      = sum(timeModelToCalc,
13636          storage_flows(timeModelToCalc,accNodesModel,accYears,storage_techs,commodity));
13637   
13638  storage_flows_annual(accNodesModel,accYears,storage_techs(techs),commodity,"positive")
13639      = sum(timeModelToCalc
13640              $(storage_flows(timeModelToCalc,accNodesModel,accYears,storage_techs,commodity) > 0),
13641          storage_flows(timeModelToCalc,accNodesModel,accYears,storage_techs,commodity));
13642   
13643  storage_flows_annual(accNodesModel,accYears,storage_techs(techs),commodity,"negative")
13644      = sum(timeModelToCalc
13645              $(storage_flows(timeModelToCalc,accNodesModel,accYears,storage_techs,commodity) < 0),
13646          storage_flows(timeModelToCalc,accNodesModel,accYears,storage_techs,commodity));
13647   
13648  storage_flows_annual(accNodesModel,accYears,storage_techs(techs),commodity,"brutto")
13649      = storage_flows_annual(accNodesModel,accYears,storage_techs,commodity,"positive")
13650          + storage_flows_annual(accNodesModel,accYears,storage_techs,commodity,"negative");
13651   
13652  storage_flows_annual(accNodesModel,accYears,storage_techs(techs),commodity,"flh")
13653      $(storage_flows_annual(accNodesModel,accYears,storage_techs,commodity,"brutto") > 0
13654          and storage_caps(accNodesModel,accYears,storage_techs,commodity,"total") > 0)
13655      = storage_flows_annual(accNodesModel,accYears,storage_techs,commodity,"brutto")
13656          / storage_caps(accNodesModel,accYears,storage_techs,commodity,"total");
13657   
13658  storage_losses_out(timeModelToCalc,accNodesModel,accYears,storage_techs(techs),commodity)
13659      = sum((nodesModelToCalc,yearsToCalc,vintage)
13660              $(storage_losses.l(timeModelToCalc,nodesModelToCalc,yearsToCalc,storage_techs,vintage,commodity)
13661                  and map_accNodesPostCalc(accNodesModel,nodesModelToCalc)
13662                  and map_accYearsPostCalc(accYears,yearsToCalc)),
13663          storage_losses.l(timeModelToCalc,nodesModelToCalc,yearsToCalc,storage_techs,vintage,commodity)
13664          * timeLength(timeModelToCalc));
13665   
13666  storage_losses_annual(accNodesModel,accYears,storage_techs(techs),commodity,"netto")
13667      = sum(timeModelToCalc,
13668          storage_losses_out(timeModelToCalc,accNodesModel,accYears,storage_techs,commodity));
13669   
13670   
13671  * == commodity balance ==
13672   
13673  commodity_balance_ext(timeModelToCalc,map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,yearsToCalc),converter_techs(techs),vintage,commodity)
13674      $(converter_usedTech(nodesModelToCalc,yearsToCalc,converter_techs,vintage)
13675          and balance_usedConverter(nodesModelToCalc,yearsToCalc,commodity))
13676      = sum((activity)
13677              $(converter_coefficientProfile(timeModelToCalc,nodesModelToCalc,yearsToCalc,converter_techs,vintage,activity,commodity)),
13678          converter_activity.l(timeModelToCalc,nodesModelToCalc,yearsToCalc,converter_techs,vintage,activity)
13679              * timeLength(timeModelToCalc)
13680              * converter_coefficientProfile(timeModelToCalc,nodesModelToCalc,yearsToCalc,converter_techs,vintage,activity,commodity)
13681          + converter_unitsUsingActivity_MIP.l(timeModelToCalc,nodesModelToCalc,yearsToCalc,converter_techs,vintage,activity)
13682              * timeLength(timeModelToCalc)
13683              * converter_coefficient(converter_techs,vintage,activity,commodity,"constant"));
13684   
13685  commodity_balance_ext(timeModelToCalc,map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,yearsToCalc),storage_techs(techs),vintage,commodity)
13686      $(storage_usedTech(nodesModelToCalc,yearsToCalc,storage_techs,vintage)
13687          and storage_sizeParam(storage_techs,vintage,commodity,"size"))
13688      = commodity_balance_ext(timeModelToCalc,accNodesModel,nodesModelToCalc,accYears,yearsToCalc,storage_techs,vintage,commodity)
13689      + storage_level.l(timeModelToCalc--1,nodesModelToCalc,yearsToCalc,storage_techs,vintage,commodity)
13690          - storage_level.l(timeModelToCalc,nodesModelToCalc,yearsToCalc,storage_techs,vintage,commodity)
13691      - storage_losses.l(timeModelToCalc,nodesModelToCalc,yearsToCalc,storage_techs,vintage,commodity)
13692      * timeLength(timeModelToCalc);
13693   
13694  commodity_balance_ext(timeModelToCalc,map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,yearsToCalc),sourcesink_techs(techs),vintage,commodity)
13695      $(sourcesink_enabled(nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity)
13696          and sameas(yearsToCalc,vintage))
13697      = commodity_balance_ext(timeModelToCalc,accNodesModel,nodesModelToCalc,accYears,yearsToCalc,sourcesink_techs,vintage,commodity)
13698      + sourcesink_flow.l(timeModelToCalc,nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity)
13699      * timeLength(timeModelToCalc);
13700   
13701  commodity_balance_ext(timeModelToCalc,map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,yearsToCalc),transfer_techs(techs),vintage,commodity)
13702      $sum((linksModel)
13703          $(transfer_incidenceModel(nodesModelToCalc,linksModel)
13704                  and transfer_usedTech(linksModel,yearsToCalc,transfer_techs,vintage)
13705                  and transfer_coefficient(transfer_techs,vintage,commodity,"coefficient")), 1)
13706      = commodity_balance_ext(timeModelToCalc,accNodesModel,nodesModelToCalc,accYears,yearsToCalc,transfer_techs,vintage,commodity)
13707      + sum((linksModel)
13708              $(transfer_incidenceModel(nodesModelToCalc,linksModel)
13709                  and transfer_usedTech(linksModel,yearsToCalc,transfer_techs,vintage)
13710                  and transfer_coefficient(transfer_techs,vintage,commodity,"coefficient")),
13711   
13712              (transfer_flowAlong.l(timeModelToCalc,linksModel,yearsToCalc,transfer_techs,vintage)
13713                      $(transfer_incidenceModel(nodesModelToCalc,linksModel) > 0)
13714                + transfer_flowAgainst.l(timeModelToCalc,linksModel,yearsToCalc,transfer_techs,vintage)
13715                      $(transfer_incidenceModel(nodesModelToCalc,linksModel) < 0))
13716              * timeLength(timeModelToCalc)
13717              * transfer_coefficient(transfer_techs,vintage,commodity,"coefficient")
13718   
13719              - (transfer_flowAlong.l(timeModelToCalc,linksModel,yearsToCalc,transfer_techs,vintage)
13720                      $(transfer_incidenceModel(nodesModelToCalc,linksModel) < 0)
13721                + transfer_flowAgainst.l(timeModelToCalc,linksModel,yearsToCalc,transfer_techs,vintage)
13722                      $(transfer_incidenceModel(nodesModelToCalc,linksModel) > 0))
13723              * timeLength(timeModelToCalc)
13724              * transfer_coefficient(transfer_techs,vintage,commodity,"coefficient")
13725   
13726              + 0.5 * ((transfer_flowAlong.l(timeModelToCalc,linksModel,yearsToCalc,transfer_techs,vintage)
13727                          $(transfer_incidenceModel(nodesModelToCalc,linksModel) <> 0)
13728                      + transfer_flowAgainst.l(timeModelToCalc,linksModel,yearsToCalc,transfer_techs,vintage)
13729                          $(transfer_incidenceModel(nodesModelToCalc,linksModel) <> 0))
13730                      * timeLength(timeModelToCalc)
13731                      * ( transfer_coefPerFlow(transfer_techs,vintage,commodity,"coefPerFlow")
13732                          + sum(link_types,
13733                              transfer_coefPerLength(transfer_techs,vintage,commodity,link_types,"coefPerLength")
13734                              * transfer_lengthParam(linksModel,link_types,"length")))))
13735      ;
13736   
13737  commodity_balance(timeModelToCalc,accNodesModel,accYears,balance_techComm(techs,commodity))
13738      = sum((nodesModelToCalc,yearsToCalc,vintage)
13739              $(commodity_balance_ext(timeModelToCalc,accNodesModel,nodesModelToCalc,accYears,yearsToCalc,techs,vintage,commodity)
13740                  and map_accNodesPostCalc(accNodesModel,nodesModelToCalc)
13741                  and map_accYearsPostCalc(accYears,yearsToCalc)),
13742          commodity_balance_ext(timeModelToCalc,accNodesModel,nodesModelToCalc,accYears,yearsToCalc,techs,vintage,commodity));
13743  option clear = commodity_balance_ext;
13744   
13745   
13746  * ==== annual commodity sums ====
13747   
13748  commodity_balance_annual(accNodesModel,accYears,techs,commodity,"netto")
13749      = sum(timeModelToCalc,
13750          commodity_balance(timeModelToCalc,accNodesModel,accYears,techs,commodity));
13751   
13752  commodity_balance_annual(accNodesModel,accYears,techs,commodity,"positive")
13753      = sum(timeModelToCalc
13754              $(commodity_balance(timeModelToCalc,accNodesModel,accYears,techs,commodity) > 0),
13755          commodity_balance(timeModelToCalc,accNodesModel,accYears,techs,commodity));
13756   
13757  commodity_balance_annual(accNodesModel,accYears,techs,commodity,"negative")
13758      = sum(timeModelToCalc
13759              $(commodity_balance(timeModelToCalc,accNodesModel,accYears,techs,commodity) < 0),
13760          commodity_balance(timeModelToCalc,accNodesModel,accYears,techs,commodity));
13761   
13762  commodity_balance_annual(accNodesModel,accYears,techs,commodity,"brutto")
13763      = commodity_balance_annual(accNodesModel,accYears,techs,commodity,"positive")
13764          - commodity_balance_annual(accNodesModel,accYears,techs,commodity,"negative");
13765   
13766  commodity_balance_annual(accNodesModel,accYears,techs,commodity,"flh")
13767      $(commodity_balance_annual(accNodesModel,accYears,techs,commodity,"brutto") > 0
13768          and converter_caps(accNodesModel,accYears,techs,commodity,"total") > 0 )
13769      = commodity_balance_annual(accNodesModel,accYears,techs,commodity,"brutto")
13770          / converter_caps(accNodesModel,accYears,techs,commodity,"total");
13771   
13772   
13773  * ==== marginal information ====
13774   
13775  marginals_balance(timeModelToCalc,nodesModelToCalc,yearsToCalc,commodity)
13776    $balance_usedBalance(nodesModelToCalc,yearsToCalc,commodity)
13777    =
13778    Eq_balance_commodities.m(timeModelToCalc,nodesModelToCalc,yearsToCalc,commodity);
13779   
13780  marginals_sourcesink_profile(timeModelToCalc,nodesModelToCalc,yearsToCalc,sourcesink_techs(techs),commodity)
13781      $( sourcesink_flow.m(timeModelToCalc,nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity) <> 0 )
13782      =
13783      sourcesink_flow.m(timeModelToCalc,nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity);
13784   
13785  marginals_sourcesink_sum(nodesModelToCalc,yearsToCalc,sourcesink_techs(techs),commodity)
13786      $( ( Eq_sourcesink_useLowerSum.m(nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity)
13787          + Eq_sourcesink_useUpperSum.m(nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity)
13788          + Eq_sourcesink_useFixedSum.m(nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity) ) <> eps )
13789      =
13790      ( Eq_sourcesink_useLowerSum.m(nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity)
13791      + Eq_sourcesink_useUpperSum.m(nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity)
13792      + Eq_sourcesink_useFixedSum.m(nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity) );
13793   
13794  marginals_indicator_bounds(accNodesModel,accYears,indicator)
13795      $( accounting_indicator.m(accNodesModel,accYears,indicator) <> 0 )
13796      =
13797      accounting_indicator.m(accNodesModel,accYears,indicator);
13798   
13799   
13800  * ==== R2A postcalc information ====
13801   
13803   
13804   
13805  * ==== round profiles to reduce size of gdx ====
13806   
13808  commodity_balance(timeModelToCalc,accNodesModel,accYears,techs,commodity)
13809      $commodity_balance(timeModelToCalc,accNodesModel,accYears,techs,commodity)
13810      = round(commodity_balance(timeModelToCalc,accNodesModel,accYears,techs,commodity), 6);
13811   
13812  transfer_flows(timeModelToCalc,nodesModelToCalc,nodesModelToCalc_a,linksModel,yearsToCalc,transfer_techs,commodity)
13813      $transfer_flows(timeModelToCalc,nodesModelToCalc,nodesModelToCalc_a,linksModel,yearsToCalc,transfer_techs,commodity)
13814      = round(transfer_flows(timeModelToCalc,nodesModelToCalc,nodesModelToCalc_a,linksModel,yearsToCalc,transfer_techs,commodity), 6);
13815   
13816  transfer_losses(timeModelToCalc,nodesModelToCalc,nodesModelToCalc_a,linksModel,yearsToCalc,transfer_techs,commodity)
13817      $transfer_losses(timeModelToCalc,nodesModelToCalc,nodesModelToCalc_a,linksModel,yearsToCalc,transfer_techs,commodity)
13818      = round(transfer_losses(timeModelToCalc,nodesModelToCalc,nodesModelToCalc_a,linksModel,yearsToCalc,transfer_techs,commodity), 6);
13819   
13820  storage_flows(timeModelToCalc,accNodesModel,accYears,storage_techs,commodity)
13821      $storage_flows(timeModelToCalc,accNodesModel,accYears,storage_techs,commodity)
13822      = round(storage_flows(timeModelToCalc,accNodesModel,accYears,storage_techs,commodity), 6);
13823   
13824  storage_level_out(timeModelToCalc,accNodesModel,accYears,storage_techs,commodity)
13825      $storage_level_out(timeModelToCalc,accNodesModel,accYears,storage_techs,commodity)
13826      = round(storage_level_out(timeModelToCalc,accNodesModel,accYears,storage_techs,commodity), 6);
13827   
13828  marginals_balance(timeModelToCalc,nodesModelToCalc,yearsToCalc,commodity)
13829      $marginals_balance(timeModelToCalc,nodesModelToCalc,yearsToCalc,commodity)
13830      = round(marginals_balance(timeModelToCalc,nodesModelToCalc,yearsToCalc,commodity), 6);
13831   
13832  marginals_sourcesink_profile(timeModelToCalc,nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity)
13833      $marginals_sourcesink_profile(timeModelToCalc,nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity)
13834      = round(marginals_sourcesink_profile(timeModelToCalc,nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity), 6);
13836   
INCLUDE    C:\Local\REMix\framework\remix\framework\model\source\postcalc\writegdx.gms
13839  * SPDX-FileCopyrightText: Copyright (c) 2023 German Aerospace Center (DLR)
13840  * SPDX-License-Identifier: BSD-3-Clause
13841   
13844   
13845  execute_unload "C:\Local\REMix\remix_nz\output\nz-h2-stor_2020-2050\result\nz-h2-stor_2020-2050.gdx"
13846      metadata
13847      timeModel
13848      timeModelToCalc
13849      nodesModel
13850      linksModel
13851      indicator
13852      commodity
13853      techs
13854      accNodesModel
13855      accYears
13856   
13857      map_nodesModel
13858      map_linksModel
13859      map_nodesAccounting
13860   
13861      indicator_accounting
13862      indicator_accounting_ref
13863      indicator_accounting_comp
13864      indicator_accounting_detailed
13865      indicator_accounting_links
13866   
13867      converter_caps
13868      converter_units
13870   
13871      transfer_caps
13872      transfer_links
13873      transfer_flows
13874      transfer_flows_annual
13875      transfer_losses
13876      transfer_losses_annual
13877   
13878      storage_caps
13879      storage_units
13880      storage_flows
13881      storage_level_out
13882      storage_flows_annual
13883      storage_losses_out
13884      storage_losses_annual
13886   
13887      commodity_balance
13888      commodity_balance_annual
13889   
13890      marginals_balance
13891      marginals_sourcesink_profile
13892      marginals_sourcesink_sum
13893      marginals_indicator_bounds
13894   
13896      ;
GAMS 40.4.0  d540b52e Oct 3, 2022           WEX-WEI x86 64bit/MS Windows - 02/28/24 12:36:48 Page 2
G e n e r a l   A l g e b r a i c   M o d e l i n g   S y s t e m
Include File Summary


   SEQ   GLOBAL TYPE      PARENT   LOCAL  FILENAME

     1        1 INPUT          0       0  C:\Local\REMix\framework\remix\framework\model\run_remix.gms
     2       12 IF DEXIST      1      12  C:\Local\REMix\remix_nz\output\nz-h2-stor_2020-2050\data\
     3       15 INCLUDE        1      15  .C:\Local\REMix\framework\remix\framework\model\source\metadata.gms
     4       23 CALL           3       8  .printf "remix_version \"0.9.2\"\n" > c:\Local\REMix\remix_nz\process\225a\\metadata
     5       24 CALL           3       9  .printf "gams_version \"40.4.0\"\n" >> c:\Local\REMix\remix_nz\process\225a\\metadata
     6       25 CALL           3      10  .printf "timestamp \"02/28/24 12:36:48\"\n" >> c:\Local\REMix\remix_nz\process\225a\\metadata
     7       27 CALL           3      12  .printf "framework_path " >> c:\Local\REMix\remix_nz\process\225a\\metadata
     8       29 CALL           3      14  .cd C:\Local\REMix\framework\remix\framework\model\source && cd| sed "s/^/\"/;s/$/\"/" >> c:\Local\REMix\remix_nz\process\225a\\metadata
     9       31 CALL           3      18  .printf "\n" >> c:\Local\REMix\remix_nz\process\225a\\metadata
    10       32 CALL           3      19  .printf "framework_hash " >> c:\Local\REMix\remix_nz\process\225a\\metadata
    11       34 CALL           3      21  .cd C:\Local\REMix\framework\remix\framework\model\source && git rev-parse HEAD >nul 2>&1 && git rev-parse HEAD >> c:\Local\REMix\remix_nz\process\225a\\metadata
    12       36 CALL           3      25  .printf "\n" >> c:\Local\REMix\remix_nz\process\225a\\metadata
    13       37 CALL           3      26  .printf "framework_branch " >> c:\Local\REMix\remix_nz\process\225a\\metadata
    14       39 CALL           3      28  .cd C:\Local\REMix\framework\remix\framework\model\source && git rev-parse --abbrev-ref HEAD >nul 2>&1 && git rev-parse --abbrev-ref HEAD | sed "s/^/\"/;s/$/\"/" >> c:\Local\REMix\remix_nz\process\225a\\metadata
    15       41 CALL           3      32  .printf "\n" >> c:\Local\REMix\remix_nz\process\225a\\metadata
    16       43 CALL           3      34  .printf "project_path " >> c:\Local\REMix\remix_nz\process\225a\\metadata
    17       45 CALL           3      36  .cd C:\Local\REMix\remix_nz\output\nz-h2-stor_2020-2050\data\./ && cd| sed "s/^/\"/;s/$/\"/" >> c:\Local\REMix\remix_nz\process\225a\\metadata
    18       47 CALL           3      40  .printf "\n" >> c:\Local\REMix\remix_nz\process\225a\\metadata
    19       48 CALL           3      41  .printf "project_hash " >> c:\Local\REMix\remix_nz\process\225a\\metadata
    20       50 CALL           3      43  .cd C:\Local\REMix\remix_nz\output\nz-h2-stor_2020-2050\data\./ && git rev-parse HEAD >nul 2>&1 && git rev-parse HEAD | sed "s/^/\"/;s/$/\"/" >> c:\Local\REMix\remix_nz\process\225a\\metadata
    21       52 CALL           3      47  .printf "\n" >> c:\Local\REMix\remix_nz\process\225a\\metadata
    22       53 CALL           3      48  .printf "project_branch " >> c:\Local\REMix\remix_nz\process\225a\\metadata
    23       55 CALL           3      50  .cd C:\Local\REMix\remix_nz\output\nz-h2-stor_2020-2050\data\./ && git rev-parse --abbrev-ref HEAD >nul 2>&1 && git rev-parse --abbrev-ref HEAD | sed "s/^/\"/;s/$/\"/" >> c:\Local\REMix\remix_nz\process\225a\\metadata
    24       57 CALL           3      54  .printf "\n" >> c:\Local\REMix\remix_nz\process\225a\\metadata
    25       60 INCLUDE        3      57  ..c:\Local\REMix\remix_nz\process\225a\metadata
    26       77 INCLUDE        1      16  .C:\Local\REMix\framework\remix\framework\model\source\data_inheritance.gms
    27      119 INCLUDE        1      25  .C:\Local\REMix\framework\remix\framework\model\source\remix.gms
    28      140 INCLUDE       27      21  ..C:\Local\REMix\framework\remix\framework\model\source\sets.gms
    29      160 IF EXIST      28      20  ..c:\Local\REMix\remix_nz\process\225a\map_aggregatetimemodel.csv
    30      211 IF EXIST      28      97  ..c:\Local\REMix\remix_nz\process\225a\set_nodesmodel.csv
    31      211 INCLUDE       28      97  ...c:\Local\REMix\remix_nz\process\225a\set_nodesmodel.csv
    32      224 IF EXIST      28      99  ..c:\Local\REMix\remix_nz\process\225a\set_nodesmodel.csv
    33      231 IF EXIST      28     106  ..c:\Local\REMix\remix_nz\process\225a\set_nodesdata.csv
    34      231 INCLUDE       28     106  ...c:\Local\REMix\remix_nz\process\225a\set_nodesdata.csv
    35      244 IF EXIST      28     108  ..c:\Local\REMix\remix_nz\process\225a\set_nodesdata.csv
    36      250 IF EXIST      28     114  ..c:\Local\REMix\remix_nz\process\225a\set_nodesmodelsel.csv
    37      250 INCLUDE       28     114  ...c:\Local\REMix\remix_nz\process\225a\set_nodesmodelsel.csv
    38      263 IF EXIST      28     116  ..c:\Local\REMix\remix_nz\process\225a\set_nodesmodelsel.csv
    39      265 IF EXIST      28     118  ..c:\Local\REMix\remix_nz\process\225a\set_nodesmodelsel.csv
    40      278 IF EXIST      28     131  ..c:\Local\REMix\remix_nz\process\225a\map_aggregatenodesmodel.csv
    41      278 INCLUDE       28     131  ...c:\Local\REMix\remix_nz\process\225a\map_aggregatenodesmodel.csv
    42      291 IF EXIST      28     133  ..c:\Local\REMix\remix_nz\process\225a\map_aggregatenodesmodel.csv
    43      294 IF EXIST      28     136  ..c:\Local\REMix\remix_nz\process\225a\map_aggregatenodesmodel.csv
    44      317 IF EXIST      28     159  ..c:\Local\REMix\remix_nz\process\225a\set_years.csv
    45      317 INCLUDE       28     159  ...c:\Local\REMix\remix_nz\process\225a\set_years.csv
    46      439 IF EXIST      28     161  ..c:\Local\REMix\remix_nz\process\225a\set_years.csv
    47      448 IF EXIST      28     170  ..c:\Local\REMix\remix_nz\process\225a\set_years.csv
    48      448 INCLUDE       28     170  ...c:\Local\REMix\remix_nz\process\225a\set_years.csv
    49      570 IF EXIST      28     172  ..c:\Local\REMix\remix_nz\process\225a\set_years.csv
    50      576 IF EXIST      28     178  ..c:\Local\REMix\remix_nz\process\225a\set_yearssel.csv
    51      576 INCLUDE       28     178  ...c:\Local\REMix\remix_nz\process\225a\set_yearssel.csv
    52      580 IF EXIST      28     180  ..c:\Local\REMix\remix_nz\process\225a\set_yearssel.csv
    53      598 IF EXIST      28     198  ..c:\Local\REMix\remix_nz\process\225a\set_activities.csv
    54      598 INCLUDE       28     198  ...c:\Local\REMix\remix_nz\process\225a\set_activities.csv
    55      607 IF EXIST      28     200  ..c:\Local\REMix\remix_nz\process\225a\set_activities.csv
    56      615 IF EXIST      28     208  ..c:\Local\REMix\remix_nz\process\225a\set_gridsegments.csv
    57      617 IF EXIST      28     210  ..c:\Local\REMix\remix_nz\process\225a\set_gridsegments.csv
    58      625 IF EXIST      28     218  ..c:\Local\REMix\remix_nz\process\225a\set_linksdata.csv
    59      625 INCLUDE       28     218  ...c:\Local\REMix\remix_nz\process\225a\set_linksdata.csv
    60      639 IF EXIST      28     220  ..c:\Local\REMix\remix_nz\process\225a\set_linksdata.csv
    61      657 IF EXIST      28     238  ..c:\Local\REMix\remix_nz\process\225a\set_link_types.csv
    62      657 INCLUDE       28     238  ...c:\Local\REMix\remix_nz\process\225a\set_link_types.csv
    63      661 IF EXIST      28     240  ..c:\Local\REMix\remix_nz\process\225a\set_link_types.csv
    64      670 IF EXIST      28     249  ..c:\Local\REMix\remix_nz\process\225a\set_commodities.csv
    65      670 INCLUDE       28     249  ...c:\Local\REMix\remix_nz\process\225a\set_commodities.csv
    66      678 IF EXIST      28     251  ..c:\Local\REMix\remix_nz\process\225a\set_commodities.csv
    67      687 IF EXIST      28     260  ..c:\Local\REMix\remix_nz\process\225a\set_indicators.csv
    68      687 INCLUDE       28     260  ...c:\Local\REMix\remix_nz\process\225a\set_indicators.csv
    69      696 IF EXIST      28     262  ..c:\Local\REMix\remix_nz\process\225a\set_indicators.csv
    70      705 IF EXIST      28     271  ..c:\Local\REMix\remix_nz\process\225a\set_converter_techs.csv
    71      705 INCLUDE       28     271  ...c:\Local\REMix\remix_nz\process\225a\set_converter_techs.csv
    72      725 IF EXIST      28     274  ..c:\Local\REMix\remix_nz\process\225a\set_storage_techs.csv
    73      725 INCLUDE       28     274  ...c:\Local\REMix\remix_nz\process\225a\set_storage_techs.csv
    74      730 IF EXIST      28     277  ..c:\Local\REMix\remix_nz\process\225a\set_transfer_techs.csv
    75      730 INCLUDE       28     277  ...c:\Local\REMix\remix_nz\process\225a\set_transfer_techs.csv
    76      734 IF EXIST      28     280  ..c:\Local\REMix\remix_nz\process\225a\set_sourcesink_techs.csv
    77      734 INCLUDE       28     280  ...c:\Local\REMix\remix_nz\process\225a\set_sourcesink_techs.csv
    78      745 IF EXIST      28     285  ..c:\Local\REMix\remix_nz\process\225a\set_converter_techs.csv
    79      745 INCLUDE       28     285  ...c:\Local\REMix\remix_nz\process\225a\set_converter_techs.csv
    80      763 IF EXIST      28     286  ..c:\Local\REMix\remix_nz\process\225a\set_converter_techs.csv
    81      767 IF EXIST      28     290  ..c:\Local\REMix\remix_nz\process\225a\set_storage_techs.csv
    82      767 INCLUDE       28     290  ...c:\Local\REMix\remix_nz\process\225a\set_storage_techs.csv
    83      770 IF EXIST      28     291  ..c:\Local\REMix\remix_nz\process\225a\set_storage_techs.csv
    84      775 IF EXIST      28     296  ..c:\Local\REMix\remix_nz\process\225a\set_transfer_techs.csv
    85      775 INCLUDE       28     296  ...c:\Local\REMix\remix_nz\process\225a\set_transfer_techs.csv
    86      777 IF EXIST      28     297  ..c:\Local\REMix\remix_nz\process\225a\set_transfer_techs.csv
    87      781 IF EXIST      28     301  ..c:\Local\REMix\remix_nz\process\225a\set_sourcesink_techs.csv
    88      781 INCLUDE       28     301  ...c:\Local\REMix\remix_nz\process\225a\set_sourcesink_techs.csv
    89      788 IF EXIST      28     302  ..c:\Local\REMix\remix_nz\process\225a\set_sourcesink_techs.csv
    90      798 IF EXIST      28     312  ..c:\Local\REMix\remix_nz\process\225a\set_degradation_states.csv
    91      800 IF EXIST      28     314  ..c:\Local\REMix\remix_nz\process\225a\set_degradation_states.csv
    92      809 IF EXIST      28     323  ..c:\Local\REMix\remix_nz\process\225a\set_soc.csv
    93      811 IF EXIST      28     325  ..c:\Local\REMix\remix_nz\process\225a\set_soc.csv
    94      827 IF EXIST      28     341  ..c:\Local\REMix\remix_nz\process\225a\transfer_linkstartend.csv
    95      827 INCLUDE       28     341  ...c:\Local\REMix\remix_nz\process\225a\transfer_linkstartend.csv
    96      854 IF EXIST      28     343  ..c:\Local\REMix\remix_nz\process\225a\transfer_linkstartend.csv
    97      868 BATINCLUDE    28     357  ...C:\Local\REMix\framework\remix\framework\model\source\battools\aggregateNodes.gms
    98      977 IF EXIST      28     464  ..c:\Local\REMix\remix_nz\process\225a\set_accnodes.csv
    99      979 IF EXIST      28     466  ..c:\Local\REMix\remix_nz\process\225a\set_accnodes.csv
   100     1044 IF EXIST      28     531  ..c:\Local\REMix\remix_nz\process\225a\map_accnodes.csv
   101     1046 IF EXIST      28     533  ..c:\Local\REMix\remix_nz\process\225a\map_accnodes.csv
   102     1100 INCLUDE       27      22  ..C:\Local\REMix\framework\remix\framework\model\source\accounting\input.gms
   103     1132 IF EXIST     102      32  ..c:\Local\REMix\remix_nz\process\225a\accounting_converterunits.csv
   104     1132 INCLUDE      102      32  ...c:\Local\REMix\remix_nz\process\225a\accounting_converterunits.csv
   105     1237 IF EXIST     102      34  ..c:\Local\REMix\remix_nz\process\225a\accounting_converterunits.csv
   106     1251 IF EXIST     102      48  ..c:\Local\REMix\remix_nz\process\225a\accounting_converteractivity.csv
   107     1251 INCLUDE      102      48  ...c:\Local\REMix\remix_nz\process\225a\accounting_converteractivity.csv
   108     1278 IF EXIST     102      50  ..c:\Local\REMix\remix_nz\process\225a\accounting_converteractivity.csv
   109     1295 IF EXIST     102      67  ..c:\Local\REMix\remix_nz\process\225a\accounting_converterstartup.csv
   110     1297 IF EXIST     102      69  ..c:\Local\REMix\remix_nz\process\225a\accounting_converterstartup.csv
   111     1316 IF EXIST     102      88  ..c:\Local\REMix\remix_nz\process\225a\accounting_storageunits.csv
   112     1316 INCLUDE      102      88  ...c:\Local\REMix\remix_nz\process\225a\accounting_storageunits.csv
   113     1337 IF EXIST     102      90  ..c:\Local\REMix\remix_nz\process\225a\accounting_storageunits.csv
   114     1359 IF EXIST     102     112  ..c:\Local\REMix\remix_nz\process\225a\accounting_transferlinks.csv
   115     1359 INCLUDE      102     112  ...c:\Local\REMix\remix_nz\process\225a\accounting_transferlinks.csv
   116     1366 IF EXIST     102     114  ..c:\Local\REMix\remix_nz\process\225a\accounting_transferlinks.csv
   117     1388 IF EXIST     102     136  ..c:\Local\REMix\remix_nz\process\225a\accounting_transferperlength.csv
   118     1388 INCLUDE      102     136  ...c:\Local\REMix\remix_nz\process\225a\accounting_transferperlength.csv
   119     1399 IF EXIST     102     138  ..c:\Local\REMix\remix_nz\process\225a\accounting_transferperlength.csv
   120     1414 IF EXIST     102     153  ..c:\Local\REMix\remix_nz\process\225a\accounting_sourcesinkflow.csv
   121     1414 INCLUDE      102     153  ...c:\Local\REMix\remix_nz\process\225a\accounting_sourcesinkflow.csv
   122     1424 IF EXIST     102     155  ..c:\Local\REMix\remix_nz\process\225a\accounting_sourcesinkflow.csv
   123     1438 IF EXIST     102     169  ..c:\Local\REMix\remix_nz\process\225a\accounting_perindicator.csv
   124     1438 INCLUDE      102     169  ...c:\Local\REMix\remix_nz\process\225a\accounting_perindicator.csv
   125     1446 IF EXIST     102     171  ..c:\Local\REMix\remix_nz\process\225a\accounting_perindicator.csv
   126     1472 IF EXIST     102     197  ..c:\Local\REMix\remix_nz\process\225a\accounting_indicatorbounds.csv
   127     1472 INCLUDE      102     197  ...c:\Local\REMix\remix_nz\process\225a\accounting_indicatorbounds.csv
   128     1476 IF EXIST     102     199  ..c:\Local\REMix\remix_nz\process\225a\accounting_indicatorbounds.csv
   129     1495 IF EXIST     102     218  ..c:\Local\REMix\remix_nz\process\225a\accounting_indicatorbounds_links.csv
   130     1497 IF EXIST     102     220  ..c:\Local\REMix\remix_nz\process\225a\accounting_indicatorbounds_links.csv
   131     1503 BATINCLUDE   102     226  ...C:\Local\REMix\framework\remix\framework\model\source\battools\aggregateAccountingMean.gms
   132     1562 BATINCLUDE   102     227  ...C:\Local\REMix\framework\remix\framework\model\source\battools\aggregateAccountingMean.gms
   133     1605 BATINCLUDE   102     228  ...C:\Local\REMix\framework\remix\framework\model\source\battools\aggregateAccountingMean.gms
   134     1648 BATINCLUDE   102     229  ...C:\Local\REMix\framework\remix\framework\model\source\battools\aggregateAccountingMean.gms
   135     1707 BATINCLUDE   102     230  ...C:\Local\REMix\framework\remix\framework\model\source\battools\aggregateAccountingMean.gms
   136     1766 BATINCLUDE   102     231  ...C:\Local\REMix\framework\remix\framework\model\source\battools\aggregateAccountingMean.gms
   137     1825 BATINCLUDE   102     232  ...C:\Local\REMix\framework\remix\framework\model\source\battools\aggregateAccountingMean.gms
   138     2234 INCLUDE       27      23  ..C:\Local\REMix\framework\remix\framework\model\source\accounting\annuities.gms
   139     2306 INCLUDE       27      25  ..C:\Local\REMix\framework\remix\framework\model\source\methods\mga_pre.gms
   140     2312 INCLUDE       27      26  ..C:\Local\REMix\framework\remix\framework\model\source\methods\pareto_pre.gms
   141     2318 INCLUDE       27      27  ..C:\Local\REMix\framework\remix\framework\model\source\postcalc\declaration.gms
   142     2335 IF DEXIST    141      17  ..C:\Local\REMix\remix_nz\output\nz-h2-stor_2020-2050\result\
   143     2536 INCLUDE       27      28  ..C:\Local\REMix\framework\remix\framework\model\source\loadgdx.gms
   144     2545 INCLUDE       27      30  ..C:\Local\REMix\framework\remix\framework\model\source\core\converter.gms
   145     2648 IF EXIST     144     103  ..c:\Local\REMix\remix_nz\process\225a\converter_capacityparam.csv
   146     2648 INCLUDE      144     103  ...c:\Local\REMix\remix_nz\process\225a\converter_capacityparam.csv
   147     7907 IF EXIST     144     105  ..c:\Local\REMix\remix_nz\process\225a\converter_capacityparam.csv
   148     7915 BATINCLUDE   144     113  ...C:\Local\REMix\framework\remix\framework\model\source\battools\aggregateNodes.gms
   149     7926 BATINCLUDE   144     114  ...C:\Local\REMix\framework\remix\framework\model\source\battools\aggregateNodes.gms
   150     7959 IF EXIST     144     137  ..c:\Local\REMix\remix_nz\process\225a\converter_techparam.csv
   151     7959 INCLUDE      144     137  ...c:\Local\REMix\remix_nz\process\225a\converter_techparam.csv
   152     8013 IF EXIST     144     139  ..c:\Local\REMix\remix_nz\process\225a\converter_techparam.csv
   153     8035 IF EXIST     144     161  ..c:\Local\REMix\remix_nz\process\225a\converter_activityprofile.csv
   154     8035 INCLUDE      144     161  ...c:\Local\REMix\remix_nz\process\225a\converter_activityprofile.csv
   155     8313 IF EXIST     144     162  ..c:\Local\REMix\remix_nz\process\225a\converter_activityprofile.csv
   156     8315 IF EXIST     144     164  ..c:\Local\REMix\remix_nz\process\225a\converter_activityprofile.csv
   157     8335 IF EXIST     144     184  ..c:\Local\REMix\remix_nz\process\225a\converter_coefficient.csv
   158     8335 INCLUDE      144     184  ...c:\Local\REMix\remix_nz\process\225a\converter_coefficient.csv
   159     8501 IF EXIST     144     185  ..c:\Local\REMix\remix_nz\process\225a\converter_coefficient.csv
   160     8502 IF EXIST     144     186  ..c:\Local\REMix\remix_nz\process\225a\converter_coefficient.csv
   161     8504 IF EXIST     144     188  ..c:\Local\REMix\remix_nz\process\225a\converter_coefficient.csv
   162     8516 IF EXIST     144     200  ..c:\Local\REMix\remix_nz\process\225a\converter_coefficientprofile.csv
   163     8517 IF EXIST     144     201  ..c:\Local\REMix\remix_nz\process\225a\converter_coefficientprofile.csv
   164     8519 IF EXIST     144     203  ..c:\Local\REMix\remix_nz\process\225a\converter_coefficientprofile.csv
   165     9452 INCLUDE       27      31  ..C:\Local\REMix\framework\remix\framework\model\source\core\storage.gms
   166     9543 IF EXIST     165      91  ..c:\Local\REMix\remix_nz\process\225a\storage_reservoirparam.csv
   167     9543 INCLUDE      165      91  ...c:\Local\REMix\remix_nz\process\225a\storage_reservoirparam.csv
   168     9679 IF EXIST     165      93  ..c:\Local\REMix\remix_nz\process\225a\storage_reservoirparam.csv
   169     9683 BATINCLUDE   165      97  ...C:\Local\REMix\framework\remix\framework\model\source\battools\aggregateNodes.gms
   170     9694 BATINCLUDE   165      98  ...C:\Local\REMix\framework\remix\framework\model\source\battools\aggregateNodes.gms
   171     9730 IF EXIST     165     124  ..c:\Local\REMix\remix_nz\process\225a\storage_techparam.csv
   172     9730 INCLUDE      165     124  ...c:\Local\REMix\remix_nz\process\225a\storage_techparam.csv
   173     9742 IF EXIST     165     126  ..c:\Local\REMix\remix_nz\process\225a\storage_techparam.csv
   174     9763 IF EXIST     165     147  ..c:\Local\REMix\remix_nz\process\225a\storage_sizeparam.csv
   175     9763 INCLUDE      165     147  ...c:\Local\REMix\remix_nz\process\225a\storage_sizeparam.csv
   176     9775 IF EXIST     165     149  ..c:\Local\REMix\remix_nz\process\225a\storage_sizeparam.csv
   177     9792 IF EXIST     165     166  ..c:\Local\REMix\remix_nz\process\225a\storage_socparam.csv
   178     9794 IF EXIST     165     168  ..c:\Local\REMix\remix_nz\process\225a\storage_socparam.csv
   179     9813 IF EXIST     165     187  ..c:\Local\REMix\remix_nz\process\225a\storage_degradationparam.csv
   180     9815 IF EXIST     165     189  ..c:\Local\REMix\remix_nz\process\225a\storage_degradationparam.csv
   181     9844 IF EXIST     165     218  ..c:\Local\REMix\remix_nz\process\225a\storage_levelprofile.csv
   182     9845 IF EXIST     165     219  ..c:\Local\REMix\remix_nz\process\225a\storage_levelprofile.csv
   183     9847 IF EXIST     165     221  ..c:\Local\REMix\remix_nz\process\225a\storage_levelprofile.csv
   184    10667 INCLUDE       27      32  ..C:\Local\REMix\framework\remix\framework\model\source\core\transfer.gms
   185    10734 IF EXIST     184      73  ..c:\Local\REMix\remix_nz\process\225a\transfer_linksparam.csv
   186    10734 INCLUDE      184      73  ...c:\Local\REMix\remix_nz\process\225a\transfer_linksparam.csv
   187    10761 IF EXIST     184      75  ..c:\Local\REMix\remix_nz\process\225a\transfer_linksparam.csv
   188    10777 IF EXIST     184      91  ..c:\Local\REMix\remix_nz\process\225a\transfer_flowprofile.csv
   189    10779 IF EXIST     184      93  ..c:\Local\REMix\remix_nz\process\225a\transfer_flowprofile.csv
   190    10799 IF EXIST     184     113  ..c:\Local\REMix\remix_nz\process\225a\transfer_techparam.csv
   191    10799 INCLUDE      184     113  ...c:\Local\REMix\remix_nz\process\225a\transfer_techparam.csv
   192    10804 IF EXIST     184     115  ..c:\Local\REMix\remix_nz\process\225a\transfer_techparam.csv
   193    10818 IF EXIST     184     129  ..c:\Local\REMix\remix_nz\process\225a\transfer_coefficient.csv
   194    10818 INCLUDE      184     129  ...c:\Local\REMix\remix_nz\process\225a\transfer_coefficient.csv
   195    10823 IF EXIST     184     131  ..c:\Local\REMix\remix_nz\process\225a\transfer_coefficient.csv
   196    10837 IF EXIST     184     145  ..c:\Local\REMix\remix_nz\process\225a\transfer_coefperflow.csv
   197    10837 INCLUDE      184     145  ...c:\Local\REMix\remix_nz\process\225a\transfer_coefperflow.csv
   198    10842 IF EXIST     184     147  ..c:\Local\REMix\remix_nz\process\225a\transfer_coefperflow.csv
   199    10856 IF EXIST     184     161  ..c:\Local\REMix\remix_nz\process\225a\transfer_coefperlength.csv
   200    10856 INCLUDE      184     161  ...c:\Local\REMix\remix_nz\process\225a\transfer_coefperlength.csv
   201    10863 IF EXIST     184     163  ..c:\Local\REMix\remix_nz\process\225a\transfer_coefperlength.csv
   202    10877 IF EXIST     184     177  ..c:\Local\REMix\remix_nz\process\225a\transfer_reactperlength.csv
   203    10879 IF EXIST     184     179  ..c:\Local\REMix\remix_nz\process\225a\transfer_reactperlength.csv
   204    10893 IF EXIST     184     193  ..c:\Local\REMix\remix_nz\process\225a\transfer_lengthparam.csv
   205    10893 INCLUDE      184     193  ...c:\Local\REMix\remix_nz\process\225a\transfer_lengthparam.csv
   206    10920 IF EXIST     184     195  ..c:\Local\REMix\remix_nz\process\225a\transfer_lengthparam.csv
   207    10934 IF EXIST     184     209  ..c:\Local\REMix\remix_nz\process\225a\transfer_gridsegments.csv
   208    10936 IF EXIST     184     211  ..c:\Local\REMix\remix_nz\process\225a\transfer_gridsegments.csv
   209    11518 INCLUDE       27      33  ..C:\Local\REMix\framework\remix\framework\model\source\core\sourcesink.gms
   210    11556 IF EXIST     209      38  ..c:\Local\REMix\remix_nz\process\225a\sourcesink_config.csv
   211    11556 INCLUDE      209      38  ...c:\Local\REMix\remix_nz\process\225a\sourcesink_config.csv
   212    11771 IF EXIST     209      40  ..c:\Local\REMix\remix_nz\process\225a\sourcesink_config.csv
   213    11775 BATINCLUDE   209      44  ...C:\Local\REMix\framework\remix\framework\model\source\battools\aggregateNodes.gms
   214    11803 IF EXIST     209      62  ..c:\Local\REMix\remix_nz\process\225a\sourcesink_profile.csv
   215    11803 INCLUDE      209      62  ...c:\Local\REMix\remix_nz\process\225a\sourcesink_profile.csv
   216    11874 IF EXIST     209      63  ..c:\Local\REMix\remix_nz\process\225a\sourcesink_profile.csv
   217    11875 IF EXIST     209      64  ..c:\Local\REMix\remix_nz\process\225a\sourcesink_profile.csv
   218    11877 IF EXIST     209      66  ..c:\Local\REMix\remix_nz\process\225a\sourcesink_profile.csv
   219    11897 IF EXIST     209      86  ..c:\Local\REMix\remix_nz\process\225a\sourcesink_annualsum.csv
   220    11897 INCLUDE      209      86  ...c:\Local\REMix\remix_nz\process\225a\sourcesink_annualsum.csv
   221    12021 IF EXIST     209      88  ..c:\Local\REMix\remix_nz\process\225a\sourcesink_annualsum.csv
   222    12024 BATINCLUDE   209      91  ...C:\Local\REMix\framework\remix\framework\model\source\battools\aggregateNodes.gms
   223    12204 INCLUDE       27      34  ..C:\Local\REMix\framework\remix\framework\model\source\core\balance.gms
   224    12340 INCLUDE       27      36  ..C:\Local\REMix\framework\remix\framework\model\source\accounting\equations.gms
   225    12762 INCLUDE       27      37  ..C:\Local\REMix\framework\remix\framework\model\source\optiframe.gms
   226    12803 INCLUDE       27      71  ..C:\Local\REMix\framework\remix\framework\model\source\methods\checkanno.gms
   227    12814 INCLUDE       27      74  ..C:\Local\REMix\framework\remix\framework\model\source\methods\pips.gms
   228    12823 INCLUDE       27      77  ..C:\Local\REMix\framework\remix\framework\model\source\methods\solve.gms
   229    13029 INCLUDE       27      80  ..C:\Local\REMix\framework\remix\framework\model\source\methods\pareto.gms
   230    13038 INCLUDE       27      83  ..C:\Local\REMix\framework\remix\framework\model\source\methods\mga.gms
   231    13047 INCLUDE       27      86  ..C:\Local\REMix\framework\remix\framework\model\source\methods\iternodes.gms
   232    13056 INCLUDE       27      89  ..C:\Local\REMix\framework\remix\framework\model\source\postcalc\definition.gms
   233    13838 INCLUDE       27      90  ..C:\Local\REMix\framework\remix\framework\model\source\postcalc\writegdx.gms


COMPILATION TIME     =       14.094 SECONDS     83 MB  40.4.0 d540b52e WEX-WEI
GAMS 40.4.0  d540b52e Oct 3, 2022           WEX-WEI x86 64bit/MS Windows - 02/28/24 12:36:48 Page 3
G e n e r a l   A l g e b r a i c   M o d e l i n g   S y s t e m
Range Statistics    SOLVE remix Using MIP From line 13014


RANGE STATISTICS (ABSOLUTE NON-ZERO FINITE VALUES)

RHS       [min, max] : [ 2.000E-06, 1.165E+03] - Zero values observed as well
Bound     [min, max] : [        NA,        NA] - Zero values observed as well
Matrix    [min, max] : [ 1.000E-02, 1.857E+02]

GAMS 40.4.0  d540b52e Oct 3, 2022           WEX-WEI x86 64bit/MS Windows - 02/28/24 12:36:48 Page 4
G e n e r a l   A l g e b r a i c   M o d e l i n g   S y s t e m
Model Statistics    SOLVE remix Using MIP From line 13014


LOOPS                           optiframeToCalc   of1


MODEL STATISTICS

BLOCKS OF EQUATIONS          75     SINGLE EQUATIONS    7,166,369
BLOCKS OF VARIABLES          38     SINGLE VARIABLES    7,446,985
NON ZERO ELEMENTS    21,617,641


GENERATION TIME      =      141.578 SECONDS  6,766 MB  40.4.0 d540b52e WEX-WEI


EXECUTION TIME       =      210.359 SECONDS  6,766 MB  40.4.0 d540b52e WEX-WEI
               L O O P S         optiframeToCalc of1

GAMS 40.4.0  d540b52e Oct 3, 2022           WEX-WEI x86 64bit/MS Windows - 02/28/24 12:36:48 Page 5
G e n e r a l   A l g e b r a i c   M o d e l i n g   S y s t e m
Solution Report     SOLVE remix Using MIP From line 13014


               S O L V E      S U M M A R Y

     MODEL   remix               OBJECTIVE  accounting_objective
     TYPE    MIP                 DIRECTION  MINIMIZE
     SOLVER  CPLEX               FROM LINE  13014

**** SOLVER STATUS     1 Normal Completion
**** MODEL STATUS      1 Optimal
**** OBJECTIVE VALUE            20128.3829

 RESOURCE USAGE, LIMIT        537.062    604800.000
 ITERATION COUNT, LIMIT       266    2147483647
--- GAMS/Cplex Link licensed for continuous and discrete problems.

Reading parameter(s) from "c:\Local\REMix\remix_nz\process\cplex.opt"
>>  rerun no
>>  iis 1
>>  lpmethod 4
>>  barorder 0
>>  preind 1
>>  scaind 0
>>  predual -1
>>  baralg 0
>>  barstartalg 1
>>  barepcomp 1e-6
>>  solutiontype 2
>>  startalg 4
>>  epgap 1e-3
>>  quality 1
>>  barcolnz 0
>>  threads 4
>>  parallelmode 1
Finished reading from "c:\Local\REMix\remix_nz\process\cplex.opt"

--- GMO setup time: 0.00s
--- Space for names approximately 906.02 Mb
--- Use option 'names no' to turn use of names off
--- GMO memory 2663.44 Mb (peak 2720.25 Mb)
--- Dictionary memory 0.00 Mb
--- Cplex 22.1.0.0 link memory 224.05 Mb (peak 1526.34 Mb)
--- Starting Cplex


--- LP status (1): optimal.
--- Cplex Time: 525.11sec (det. 490065.43 ticks)


Optimal solution found
Objective:        20128.382947

Solution Quality Statistics:
                                   unscaled                scaled
                               max         sum         max         sum
primal infeasibility        1.668e-06   1.892e-01   1.668e-06   1.892e-01
dual infeasibility          1.054e-10   1.207e-09   1.054e-10   1.207e-09
primal residual             6.185e-11   1.310e-10   6.185e-11   1.310e-10
dual residual               1.855e-03   2.890e-03   1.855e-03   2.890e-03
primal solution vector      2.013e+04   1.248e+06   2.013e+04   1.248e+06
dual solution vector        1.631e+04   3.098e+06   1.631e+04   3.098e+06
slacks                      1.165e+03   7.071e+05   1.165e+03   7.071e+05
reduced costs               1.631e+04   2.443e+07   1.631e+04   2.443e+07
comp. slackness viol.       1.941e-05   1.896e-01




**** REPORT SUMMARY :        0     NONOPT
                             0 INFEASIBLE
                             0  UNBOUNDED
GAMS 40.4.0  d540b52e Oct 3, 2022           WEX-WEI x86 64bit/MS Windows - 02/28/24 12:36:48 Page 6
G e n e r a l   A l g e b r a i c   M o d e l i n g   S y s t e m
E x e c u t i o n


**** REPORT FILE SUMMARY

opt c:\Local\REMix\remix_nz\process\cplex.opt


EXECUTION TIME       =       79.578 SECONDS  6,056 MB  40.4.0 d540b52e WEX-WEI


USER: Medium MUD - 10 User License                   S220920|0002AO-GEN
      University of Canterbury, Civil Engineering Department    DC16319
      License for teaching and research at degree granting institutions


**** FILE SUMMARY

Input      C:\Local\REMix\framework\remix\framework\model\run_remix.gms
Output     c:\Local\REMix\remix_nz\process\run_remix.lst
