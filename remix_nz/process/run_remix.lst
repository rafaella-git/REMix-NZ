GAMS 40.4.0  d540b52e Oct 3, 2022           WEX-WEI x86 64bit/MS Windows - 10/05/23 16:01:13 Page 1
G e n e r a l   A l g e b r a i c   M o d e l i n g   S y s t e m
C o m p i l a t i o n


   1  * SPDX-FileCopyrightText: Copyright (c) 2023 German Aerospace Center (DLR)
   2  * SPDX-License-Identifier: BSD-3-Clause
   3   
   4  * ==== REMix version number ====
   6   
   7  * ==== global settings ====
  11   
  13   
  14  * ==== write metadata and inherit dataset ====
INCLUDE    C:\Local\REMix\framework\remix\framework\model\source\metadata.gms
  22   
  26   
  42   
  58   
  59  set metadata(*) /
INCLUDE    c:\Local\REMix\remix_nz\process\225a\metadata
  61  remix_version "0.9.2"
  62  gams_version "40.4.0"
  63  timestamp "10/05/23 16:01:13"
  64  framework_path "C:\Local\REMix\framework\remix\framework\model\source"
  65   
  66  framework_hash 96c2159997fb47c52b8300c49677756ddfb1ee40
  67   
  68  framework_branch "dev"
  69   
  70  project_path "C:\Local\REMix\remix_nz\output\nz_profile_11nodes_2040\data"
  71   
  72  project_hash "324f815deadfe925bdfe0250381c58a56eb7e076"
  73   
  74  project_branch "main"
  75   
  76  /;
INCLUDE    C:\Local\REMix\framework\remix\framework\model\source\data_inheritance.gms
  78  * SPDX-FileCopyrightText: Copyright (c) 2023 German Aerospace Center (DLR)
  79  * SPDX-License-Identifier: BSD-3-Clause
  80   
  83   
  88   
  89  * pandas based data inheritance reading in the dat files, merging them and writing csv files in the scrdir
 109  ;
 110   
 114   
 115  * ==== run remix ====
INCLUDE    C:\Local\REMix\framework\remix\framework\model\source\remix.gms
 120  * SPDX-FileCopyrightText: Copyright (c) 2023 German Aerospace Center (DLR)
 121  * SPDX-License-Identifier: BSD-3-Clause
 122   
 123  * ==== global settings ====
 130   
 133   
 135   
 138   
 139  * ==== include modules ====
INCLUDE    C:\Local\REMix\framework\remix\framework\model\source\sets.gms
 141  * SPDX-FileCopyrightText: Copyright (c) 2023 German Aerospace Center (DLR)
 142  * SPDX-License-Identifier: BSD-3-Clause
 143   
 144  * // # sets
 145  * // Sets are the indices of variables and parameters.
 146   
 147  * // ## Reference
 148  * // {special_table_sets}
 149   
 150  * // ## Input Files
 151  * // {special_table_set_input_files}
 789   
 790  map_accNodes(accNodesModel,accNodesModel_aggregation)
 791      $sum((nodesData, nodesModelToCalc)
 792              $( sameas(nodesModelToCalc,accNodesModel)
 793                  and map_accNodesLoad(nodesData,accNodesModel_aggregation)
 794                  and aggregateNodesModel(nodesData,nodesModelToCalc)), 1) = yes;
 795   
 796  map_accNodes(accNodesModel,"global")$sum(nodesModelToCalc$sameas(accNodesModel,nodesModelToCalc), 1) = yes;
 797  map_accNodes(accNodesModel,"global")$sum(accNodes$sameas(accNodesModel,accNodes), 1) = yes;
 798  map_accNodes(accNodesModel,accNodesModel) = yes;
 799  map_accLinks(accLinksModel,"global")$sum(linksModelToCalc$sameas(accLinksModel,linksModelToCalc), 1) = yes;
 800  map_accLinks(accLinksModel,accLinksModel) = yes;
 801  map_accYears(accYears,"horizon")$sum(yearsToCalc$sameas(accYears,yearsToCalc), 1)  = yes;
 802  map_accYears(accYears,accYears) = yes;
 803   
 804  map_accNodesToCalc(accNodesModel,nodesModelToCalc)
 805      $sum((nodesData)
 806              $( map_accNodesLoad(nodesData,accNodesModel)
 807                  and aggregateNodesModel(nodesData,nodesModelToCalc)), 1) = yes;
 808   
 809  map_accNodesToCalc("global",nodesModelToCalc) = yes;
 810  map_accNodesToCalc(accNodesModel,nodesModelToCalc)$sameas(accNodesModel,nodesModelToCalc) = yes;
 811  map_accLinksToCalc("global",linksModelToCalc) = yes;
 812  map_accLinksToCalc(accLinksModel,linksModelToCalc)$sameas(accLinksModel,linksModelToCalc) = yes;
 813  map_accYearsToCalc("horizon",yearsToCalc) = yes;
 814  map_accYearsToCalc(accYears,yearsToCalc)$sameas(accYears,yearsToCalc) = yes;
 815   
 816  * Duplicate sets for postcalc reporting without horizon and accYears
 817  map_accNodesPostCalc(accNodesModel,nodesModelToCalc) = map_accNodesToCalc(accNodesModel,nodesModelToCalc);
 818  map_accLinksPostCalc(accLinksModel,linksModelToCalc) = map_accLinksToCalc(accLinksModel,linksModelToCalc);
 819  map_accYearsPostCalc(accYears,yearsToCalc)$sameas(accYears,yearsToCalc) = yes;
 820  map_accYearsPostCalc(accYears,years)$(sameas(accYears,years) and years.val < sum(yearsToCalc$(ord(yearsToCalc) = 1), yearsToCalc.val)) = yes;
 821   
 822  set map_nodesAccounting(accNodesModel_aggregation,accNodesModel) "Map accounting nodes describes the mapping between model accounting nodes and data nodes." ;
 823  option map_nodesAccounting < map_accNodes;
 824   
 825  * ==== Generic sets  ====
 826  * These set names are repeated across different profile parameters.
 827  * they are not strictly related to each other and are not input data but
 828  * are needed for validation.
 829  ** // PROFILE: profileTypes | Profile Types | OEO_00140056:flow potential | set_profiletypes.csv
 830   
 831  ** // SET: scenario | Scenario | OEO_00000364:scenario | set_scenarios.csv
 832  * "Scenario indexes help to differentiate scenarios." /
 833   
 834  ** // SET: capType | Capacity Types | OEO_00030019:balance process attribute | set_captypes.csv
 835  * "Capacity types differentiate investment decisions." /
 836   
 837  ** // SET: balanceType | Balance Types | OEO_00030019:balance process attribute | set_balancetypes.csv
 838  * "Balance types differentiate types of balances." /
INCLUDE    C:\Local\REMix\framework\remix\framework\model\source\accounting\input.gms
 840  * SPDX-FileCopyrightText: Copyright (c) 2023 German Aerospace Center (DLR)
 841  * SPDX-License-Identifier: BSD-3-Clause
 842   
 843  * // # accounting_input
 844  * // The parameters in this file describe the accounting of indicators in the model.
 845   
 846  * // ## Variables
 847  * // {special_table_input_variables}
1153   
1154  * Aggregate accounting parameters
BATINCLUDE C:\Local\REMix\framework\remix\framework\model\source\battools\aggregateAccountingMean.gms
1156  * SPDX-FileCopyrightText: Copyright (c) 2023 German Aerospace Center (DLR)
1157  * SPDX-License-Identifier: BSD-3-Clause
1158   
1160   
1162   
1163  set accounting_converterUnitsNonzero(indicator,accnodesData,converter_techs,vintage);
1164  accounting_converterUnitsNonzero(indicator,accnodesData,converter_techs,vintage)
1165      $sum(pc_accounting_converterUnits$accounting_converterUnitsIn(indicator,accnodesData,converter_techs,vintage,pc_accounting_converterUnits), 1)
1166      = yes;
1167   
1169  set accounting_converterUnitsChk(indicator,nodesModel,converter_techs,vintage,pc_accounting_converterUnits);
1170  accounting_converterUnitsChk(indicator,nodesModel,converter_techs,vintage,"useAnnuity")
1171      $sum((nodesData,accnodesData)
1172              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1173                  and accounting_converterUnitsNonzero(indicator,accnodesData,converter_techs,vintage)), 1)
1174      = smax((nodesData,accnodesData)
1175              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1176                  and accounting_converterUnitsNonzero(indicator,accnodesData,converter_techs,vintage)),
1177          accounting_converterUnitsIn(indicator,accnodesData,converter_techs,vintage,"useAnnuity"))
1178      - smin((nodesData,accnodesData)
1179              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1180                  and accounting_converterUnitsNonzero(indicator,accnodesData,converter_techs,vintage)),
1181          accounting_converterUnitsIn(indicator,accnodesData,converter_techs,vintage,"useAnnuity"));
1182   
1183  abort$sum(accounting_converterUnitsChk(indicator,nodesModel,converter_techs,vintage,pc_accounting_converterUnits), 1) "Cannot aggregate technologies with different useAnnuity values."
1185   
1186  parameter accounting_converterUnitsAgg(indicator,nodesModel,converter_techs,vintage,pc_accounting_converterUnits);
1187  accounting_converterUnitsAgg(indicator,nodesModel,converter_techs,vintage,pc_accounting_converterUnits)
1188      $sum((nodesData,accnodesData)
1189              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1190                  and accounting_converterUnitsNonzero(indicator,accnodesData,converter_techs,vintage)), 1)
1191      = sum((nodesData,accnodesData)
1192              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1193                  and accounting_converterUnitsNonzero(indicator,accnodesData,converter_techs,vintage)),
1194          accounting_converterUnitsIn(indicator,accnodesData,converter_techs,vintage,pc_accounting_converterUnits))
1195      / sum((nodesData,accnodesData)
1196              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1197                  and accounting_converterUnitsNonzero(indicator,accnodesData,converter_techs,vintage)),
1198          1);
1199   
1200  parameter accounting_converterUnits(indicator,nodesModel,converter_techs,vintage,pc_accounting_converterUnits);
1201  loop(accnodes,
1202  accounting_converterUnits(indicator,nodesModel,converter_techs,vintage,pc_accounting_converterUnits)
1203      $sum(accnodesData$(map_accnodesToCalc(accnodes,nodesModel) and sameas(accnodes,accnodesData)
1204                              and accounting_converterUnitsIn(indicator,accnodesData,converter_techs,vintage,pc_accounting_converterUnits)), 1)
1205      = sum(accnodesData$(map_accnodesToCalc(accnodes,nodesModel) and sameas(accnodes,accnodesData)),
1206              accounting_converterUnitsIn(indicator,accnodesData,converter_techs,vintage,pc_accounting_converterUnits));
1207  );
1208   
1209  accounting_converterUnits(indicator,nodesModel,converter_techs,vintage,pc_accounting_converterUnits)
1210      $accounting_converterUnitsAgg(indicator,nodesModel,converter_techs,vintage,pc_accounting_converterUnits)
1211      = accounting_converterUnitsAgg(indicator,nodesModel,converter_techs,vintage,pc_accounting_converterUnits);
1212   
1213  * option kill %paramName%Nonzero %paramName%Chk %paramName%Agg
BATINCLUDE C:\Local\REMix\framework\remix\framework\model\source\battools\aggregateAccountingMean.gms
1215  * SPDX-FileCopyrightText: Copyright (c) 2023 German Aerospace Center (DLR)
1216  * SPDX-License-Identifier: BSD-3-Clause
1217   
1219   
1221   
1222  set accounting_converterActivityNonzero(indicator,accnodesData,converter_techs,vintage,activity);
1223  accounting_converterActivityNonzero(indicator,accnodesData,converter_techs,vintage,activity)
1224      $sum(pc_accounting_converterActivity$accounting_converterActivityIn(indicator,accnodesData,converter_techs,vintage,activity,pc_accounting_converterActivity), 1)
1225      = yes;
1226   
1228   
1229  parameter accounting_converterActivityAgg(indicator,nodesModel,converter_techs,vintage,activity,pc_accounting_converterActivity);
1230  accounting_converterActivityAgg(indicator,nodesModel,converter_techs,vintage,activity,pc_accounting_converterActivity)
1231      $sum((nodesData,accnodesData)
1232              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1233                  and accounting_converterActivityNonzero(indicator,accnodesData,converter_techs,vintage,activity)), 1)
1234      = sum((nodesData,accnodesData)
1235              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1236                  and accounting_converterActivityNonzero(indicator,accnodesData,converter_techs,vintage,activity)),
1237          accounting_converterActivityIn(indicator,accnodesData,converter_techs,vintage,activity,pc_accounting_converterActivity))
1238      / sum((nodesData,accnodesData)
1239              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1240                  and accounting_converterActivityNonzero(indicator,accnodesData,converter_techs,vintage,activity)),
1241          1);
1242   
1243  parameter accounting_converterActivity(indicator,nodesModel,converter_techs,vintage,activity,pc_accounting_converterActivity);
1244  loop(accnodes,
1245  accounting_converterActivity(indicator,nodesModel,converter_techs,vintage,activity,pc_accounting_converterActivity)
1246      $sum(accnodesData$(map_accnodesToCalc(accnodes,nodesModel) and sameas(accnodes,accnodesData)
1247                              and accounting_converterActivityIn(indicator,accnodesData,converter_techs,vintage,activity,pc_accounting_converterActivity)), 1)
1248      = sum(accnodesData$(map_accnodesToCalc(accnodes,nodesModel) and sameas(accnodes,accnodesData)),
1249              accounting_converterActivityIn(indicator,accnodesData,converter_techs,vintage,activity,pc_accounting_converterActivity));
1250  );
1251   
1252  accounting_converterActivity(indicator,nodesModel,converter_techs,vintage,activity,pc_accounting_converterActivity)
1253      $accounting_converterActivityAgg(indicator,nodesModel,converter_techs,vintage,activity,pc_accounting_converterActivity)
1254      = accounting_converterActivityAgg(indicator,nodesModel,converter_techs,vintage,activity,pc_accounting_converterActivity);
1255   
1256  * option kill %paramName%Nonzero %paramName%Chk %paramName%Agg
BATINCLUDE C:\Local\REMix\framework\remix\framework\model\source\battools\aggregateAccountingMean.gms
1258  * SPDX-FileCopyrightText: Copyright (c) 2023 German Aerospace Center (DLR)
1259  * SPDX-License-Identifier: BSD-3-Clause
1260   
1262   
1264   
1265  set accounting_converterStartupNonzero(indicator,accnodesData,converter_techs,vintage);
1266  accounting_converterStartupNonzero(indicator,accnodesData,converter_techs,vintage)
1267      $sum(pc_accounting_converterStartup$accounting_converterStartupIn(indicator,accnodesData,converter_techs,vintage,pc_accounting_converterStartup), 1)
1268      = yes;
1269   
1271   
1272  parameter accounting_converterStartupAgg(indicator,nodesModel,converter_techs,vintage,pc_accounting_converterStartup);
1273  accounting_converterStartupAgg(indicator,nodesModel,converter_techs,vintage,pc_accounting_converterStartup)
1274      $sum((nodesData,accnodesData)
1275              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1276                  and accounting_converterStartupNonzero(indicator,accnodesData,converter_techs,vintage)), 1)
1277      = sum((nodesData,accnodesData)
1278              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1279                  and accounting_converterStartupNonzero(indicator,accnodesData,converter_techs,vintage)),
1280          accounting_converterStartupIn(indicator,accnodesData,converter_techs,vintage,pc_accounting_converterStartup))
1281      / sum((nodesData,accnodesData)
1282              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1283                  and accounting_converterStartupNonzero(indicator,accnodesData,converter_techs,vintage)),
1284          1);
1285   
1286  parameter accounting_converterStartup(indicator,nodesModel,converter_techs,vintage,pc_accounting_converterStartup);
1287  loop(accnodes,
1288  accounting_converterStartup(indicator,nodesModel,converter_techs,vintage,pc_accounting_converterStartup)
1289      $sum(accnodesData$(map_accnodesToCalc(accnodes,nodesModel) and sameas(accnodes,accnodesData)
1290                              and accounting_converterStartupIn(indicator,accnodesData,converter_techs,vintage,pc_accounting_converterStartup)), 1)
1291      = sum(accnodesData$(map_accnodesToCalc(accnodes,nodesModel) and sameas(accnodes,accnodesData)),
1292              accounting_converterStartupIn(indicator,accnodesData,converter_techs,vintage,pc_accounting_converterStartup));
1293  );
1294   
1295  accounting_converterStartup(indicator,nodesModel,converter_techs,vintage,pc_accounting_converterStartup)
1296      $accounting_converterStartupAgg(indicator,nodesModel,converter_techs,vintage,pc_accounting_converterStartup)
1297      = accounting_converterStartupAgg(indicator,nodesModel,converter_techs,vintage,pc_accounting_converterStartup);
1298   
1299  * option kill %paramName%Nonzero %paramName%Chk %paramName%Agg
BATINCLUDE C:\Local\REMix\framework\remix\framework\model\source\battools\aggregateAccountingMean.gms
1301  * SPDX-FileCopyrightText: Copyright (c) 2023 German Aerospace Center (DLR)
1302  * SPDX-License-Identifier: BSD-3-Clause
1303   
1305   
1307   
1308  set accounting_storageUnitsNonzero(indicator,accnodesData,storage_techs,vintage);
1309  accounting_storageUnitsNonzero(indicator,accnodesData,storage_techs,vintage)
1310      $sum(pc_accounting_storageUnits$accounting_storageUnitsIn(indicator,accnodesData,storage_techs,vintage,pc_accounting_storageUnits), 1)
1311      = yes;
1312   
1314  set accounting_storageUnitsChk(indicator,nodesModel,storage_techs,vintage,pc_accounting_storageUnits);
1315  accounting_storageUnitsChk(indicator,nodesModel,storage_techs,vintage,"useAnnuity")
1316      $sum((nodesData,accnodesData)
1317              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1318                  and accounting_storageUnitsNonzero(indicator,accnodesData,storage_techs,vintage)), 1)
1319      = smax((nodesData,accnodesData)
1320              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1321                  and accounting_storageUnitsNonzero(indicator,accnodesData,storage_techs,vintage)),
1322          accounting_storageUnitsIn(indicator,accnodesData,storage_techs,vintage,"useAnnuity"))
1323      - smin((nodesData,accnodesData)
1324              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1325                  and accounting_storageUnitsNonzero(indicator,accnodesData,storage_techs,vintage)),
1326          accounting_storageUnitsIn(indicator,accnodesData,storage_techs,vintage,"useAnnuity"));
1327   
1328  abort$sum(accounting_storageUnitsChk(indicator,nodesModel,storage_techs,vintage,pc_accounting_storageUnits), 1) "Cannot aggregate technologies with different useAnnuity values."
1330   
1331  parameter accounting_storageUnitsAgg(indicator,nodesModel,storage_techs,vintage,pc_accounting_storageUnits);
1332  accounting_storageUnitsAgg(indicator,nodesModel,storage_techs,vintage,pc_accounting_storageUnits)
1333      $sum((nodesData,accnodesData)
1334              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1335                  and accounting_storageUnitsNonzero(indicator,accnodesData,storage_techs,vintage)), 1)
1336      = sum((nodesData,accnodesData)
1337              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1338                  and accounting_storageUnitsNonzero(indicator,accnodesData,storage_techs,vintage)),
1339          accounting_storageUnitsIn(indicator,accnodesData,storage_techs,vintage,pc_accounting_storageUnits))
1340      / sum((nodesData,accnodesData)
1341              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1342                  and accounting_storageUnitsNonzero(indicator,accnodesData,storage_techs,vintage)),
1343          1);
1344   
1345  parameter accounting_storageUnits(indicator,nodesModel,storage_techs,vintage,pc_accounting_storageUnits);
1346  loop(accnodes,
1347  accounting_storageUnits(indicator,nodesModel,storage_techs,vintage,pc_accounting_storageUnits)
1348      $sum(accnodesData$(map_accnodesToCalc(accnodes,nodesModel) and sameas(accnodes,accnodesData)
1349                              and accounting_storageUnitsIn(indicator,accnodesData,storage_techs,vintage,pc_accounting_storageUnits)), 1)
1350      = sum(accnodesData$(map_accnodesToCalc(accnodes,nodesModel) and sameas(accnodes,accnodesData)),
1351              accounting_storageUnitsIn(indicator,accnodesData,storage_techs,vintage,pc_accounting_storageUnits));
1352  );
1353   
1354  accounting_storageUnits(indicator,nodesModel,storage_techs,vintage,pc_accounting_storageUnits)
1355      $accounting_storageUnitsAgg(indicator,nodesModel,storage_techs,vintage,pc_accounting_storageUnits)
1356      = accounting_storageUnitsAgg(indicator,nodesModel,storage_techs,vintage,pc_accounting_storageUnits);
1357   
1358  * option kill %paramName%Nonzero %paramName%Chk %paramName%Agg
BATINCLUDE C:\Local\REMix\framework\remix\framework\model\source\battools\aggregateAccountingMean.gms
1360  * SPDX-FileCopyrightText: Copyright (c) 2023 German Aerospace Center (DLR)
1361  * SPDX-License-Identifier: BSD-3-Clause
1362   
1364   
1366   
1367  set accounting_transferLinksNonzero(indicator,acclinksData,transfer_techs,vintage);
1368  accounting_transferLinksNonzero(indicator,acclinksData,transfer_techs,vintage)
1369      $sum(pc_accounting_transferLinks$accounting_transferLinksIn(indicator,acclinksData,transfer_techs,vintage,pc_accounting_transferLinks), 1)
1370      = yes;
1371   
1373  set accounting_transferLinksChk(indicator,linksModel,transfer_techs,vintage,pc_accounting_transferLinks);
1374  accounting_transferLinksChk(indicator,linksModel,transfer_techs,vintage,"useAnnuity")
1375      $sum((linksData,acclinksData)
1376              $(aggregatelinksModel(linksData,linksModel) and sameas(linksData,acclinksData)
1377                  and accounting_transferLinksNonzero(indicator,acclinksData,transfer_techs,vintage)), 1)
1378      = smax((linksData,acclinksData)
1379              $(aggregatelinksModel(linksData,linksModel) and sameas(linksData,acclinksData)
1380                  and accounting_transferLinksNonzero(indicator,acclinksData,transfer_techs,vintage)),
1381          accounting_transferLinksIn(indicator,acclinksData,transfer_techs,vintage,"useAnnuity"))
1382      - smin((linksData,acclinksData)
1383              $(aggregatelinksModel(linksData,linksModel) and sameas(linksData,acclinksData)
1384                  and accounting_transferLinksNonzero(indicator,acclinksData,transfer_techs,vintage)),
1385          accounting_transferLinksIn(indicator,acclinksData,transfer_techs,vintage,"useAnnuity"));
1386   
1387  abort$sum(accounting_transferLinksChk(indicator,linksModel,transfer_techs,vintage,pc_accounting_transferLinks), 1) "Cannot aggregate technologies with different useAnnuity values."
1389   
1390  parameter accounting_transferLinksAgg(indicator,linksModel,transfer_techs,vintage,pc_accounting_transferLinks);
1391  accounting_transferLinksAgg(indicator,linksModel,transfer_techs,vintage,pc_accounting_transferLinks)
1392      $sum((linksData,acclinksData)
1393              $(aggregatelinksModel(linksData,linksModel) and sameas(linksData,acclinksData)
1394                  and accounting_transferLinksNonzero(indicator,acclinksData,transfer_techs,vintage)), 1)
1395      = sum((linksData,acclinksData)
1396              $(aggregatelinksModel(linksData,linksModel) and sameas(linksData,acclinksData)
1397                  and accounting_transferLinksNonzero(indicator,acclinksData,transfer_techs,vintage)),
1398          accounting_transferLinksIn(indicator,acclinksData,transfer_techs,vintage,pc_accounting_transferLinks))
1399      / sum((linksData,acclinksData)
1400              $(aggregatelinksModel(linksData,linksModel) and sameas(linksData,acclinksData)
1401                  and accounting_transferLinksNonzero(indicator,acclinksData,transfer_techs,vintage)),
1402          1);
1403   
1404  parameter accounting_transferLinks(indicator,linksModel,transfer_techs,vintage,pc_accounting_transferLinks);
1405  loop(acclinks,
1406  accounting_transferLinks(indicator,linksModel,transfer_techs,vintage,pc_accounting_transferLinks)
1407      $sum(acclinksData$(map_acclinksToCalc(acclinks,linksModel) and sameas(acclinks,acclinksData)
1408                              and accounting_transferLinksIn(indicator,acclinksData,transfer_techs,vintage,pc_accounting_transferLinks)), 1)
1409      = sum(acclinksData$(map_acclinksToCalc(acclinks,linksModel) and sameas(acclinks,acclinksData)),
1410              accounting_transferLinksIn(indicator,acclinksData,transfer_techs,vintage,pc_accounting_transferLinks));
1411  );
1412   
1413  accounting_transferLinks(indicator,linksModel,transfer_techs,vintage,pc_accounting_transferLinks)
1414      $accounting_transferLinksAgg(indicator,linksModel,transfer_techs,vintage,pc_accounting_transferLinks)
1415      = accounting_transferLinksAgg(indicator,linksModel,transfer_techs,vintage,pc_accounting_transferLinks);
1416   
1417  * option kill %paramName%Nonzero %paramName%Chk %paramName%Agg
BATINCLUDE C:\Local\REMix\framework\remix\framework\model\source\battools\aggregateAccountingMean.gms
1419  * SPDX-FileCopyrightText: Copyright (c) 2023 German Aerospace Center (DLR)
1420  * SPDX-License-Identifier: BSD-3-Clause
1421   
1423   
1425   
1426  set accounting_transferPerLengthNonzero(indicator,acclinksData,transfer_techs,vintage,link_types);
1427  accounting_transferPerLengthNonzero(indicator,acclinksData,transfer_techs,vintage,link_types)
1428      $sum(pc_accounting_transferPerLength$accounting_transferPerLengthIn(indicator,acclinksData,transfer_techs,vintage,link_types,pc_accounting_transferPerLength), 1)
1429      = yes;
1430   
1432  set accounting_transferPerLengthChk(indicator,linksModel,transfer_techs,vintage,link_types,pc_accounting_transferPerLength);
1433  accounting_transferPerLengthChk(indicator,linksModel,transfer_techs,vintage,link_types,"useAnnuity")
1434      $sum((linksData,acclinksData)
1435              $(aggregatelinksModel(linksData,linksModel) and sameas(linksData,acclinksData)
1436                  and accounting_transferPerLengthNonzero(indicator,acclinksData,transfer_techs,vintage,link_types)), 1)
1437      = smax((linksData,acclinksData)
1438              $(aggregatelinksModel(linksData,linksModel) and sameas(linksData,acclinksData)
1439                  and accounting_transferPerLengthNonzero(indicator,acclinksData,transfer_techs,vintage,link_types)),
1440          accounting_transferPerLengthIn(indicator,acclinksData,transfer_techs,vintage,link_types,"useAnnuity"))
1441      - smin((linksData,acclinksData)
1442              $(aggregatelinksModel(linksData,linksModel) and sameas(linksData,acclinksData)
1443                  and accounting_transferPerLengthNonzero(indicator,acclinksData,transfer_techs,vintage,link_types)),
1444          accounting_transferPerLengthIn(indicator,acclinksData,transfer_techs,vintage,link_types,"useAnnuity"));
1445   
1446  abort$sum(accounting_transferPerLengthChk(indicator,linksModel,transfer_techs,vintage,link_types,pc_accounting_transferPerLength), 1) "Cannot aggregate technologies with different useAnnuity values."
1448   
1449  parameter accounting_transferPerLengthAgg(indicator,linksModel,transfer_techs,vintage,link_types,pc_accounting_transferPerLength);
1450  accounting_transferPerLengthAgg(indicator,linksModel,transfer_techs,vintage,link_types,pc_accounting_transferPerLength)
1451      $sum((linksData,acclinksData)
1452              $(aggregatelinksModel(linksData,linksModel) and sameas(linksData,acclinksData)
1453                  and accounting_transferPerLengthNonzero(indicator,acclinksData,transfer_techs,vintage,link_types)), 1)
1454      = sum((linksData,acclinksData)
1455              $(aggregatelinksModel(linksData,linksModel) and sameas(linksData,acclinksData)
1456                  and accounting_transferPerLengthNonzero(indicator,acclinksData,transfer_techs,vintage,link_types)),
1457          accounting_transferPerLengthIn(indicator,acclinksData,transfer_techs,vintage,link_types,pc_accounting_transferPerLength))
1458      / sum((linksData,acclinksData)
1459              $(aggregatelinksModel(linksData,linksModel) and sameas(linksData,acclinksData)
1460                  and accounting_transferPerLengthNonzero(indicator,acclinksData,transfer_techs,vintage,link_types)),
1461          1);
1462   
1463  parameter accounting_transferPerLength(indicator,linksModel,transfer_techs,vintage,link_types,pc_accounting_transferPerLength);
1464  loop(acclinks,
1465  accounting_transferPerLength(indicator,linksModel,transfer_techs,vintage,link_types,pc_accounting_transferPerLength)
1466      $sum(acclinksData$(map_acclinksToCalc(acclinks,linksModel) and sameas(acclinks,acclinksData)
1467                              and accounting_transferPerLengthIn(indicator,acclinksData,transfer_techs,vintage,link_types,pc_accounting_transferPerLength)), 1)
1468      = sum(acclinksData$(map_acclinksToCalc(acclinks,linksModel) and sameas(acclinks,acclinksData)),
1469              accounting_transferPerLengthIn(indicator,acclinksData,transfer_techs,vintage,link_types,pc_accounting_transferPerLength));
1470  );
1471   
1472  accounting_transferPerLength(indicator,linksModel,transfer_techs,vintage,link_types,pc_accounting_transferPerLength)
1473      $accounting_transferPerLengthAgg(indicator,linksModel,transfer_techs,vintage,link_types,pc_accounting_transferPerLength)
1474      = accounting_transferPerLengthAgg(indicator,linksModel,transfer_techs,vintage,link_types,pc_accounting_transferPerLength);
1475   
1476  * option kill %paramName%Nonzero %paramName%Chk %paramName%Agg
BATINCLUDE C:\Local\REMix\framework\remix\framework\model\source\battools\aggregateAccountingMean.gms
1478  * SPDX-FileCopyrightText: Copyright (c) 2023 German Aerospace Center (DLR)
1479  * SPDX-License-Identifier: BSD-3-Clause
1480   
1482   
1484   
1485  set accounting_sourcesinkFlowNonzero(indicator,accnodesData,years,sourcesink_techs,commodity);
1486  accounting_sourcesinkFlowNonzero(indicator,accnodesData,years,sourcesink_techs,commodity)
1487      $sum(pc_accounting_sourcesinkFlow$accounting_sourcesinkFlowIn(indicator,accnodesData,years,sourcesink_techs,commodity,pc_accounting_sourcesinkFlow), 1)
1488      = yes;
1489   
1491   
1492  parameter accounting_sourcesinkFlowAgg(indicator,nodesModel,years,sourcesink_techs,commodity,pc_accounting_sourcesinkFlow);
1493  accounting_sourcesinkFlowAgg(indicator,nodesModel,years,sourcesink_techs,commodity,pc_accounting_sourcesinkFlow)
1494      $sum((nodesData,accnodesData)
1495              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1496                  and accounting_sourcesinkFlowNonzero(indicator,accnodesData,years,sourcesink_techs,commodity)), 1)
1497      = sum((nodesData,accnodesData)
1498              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1499                  and accounting_sourcesinkFlowNonzero(indicator,accnodesData,years,sourcesink_techs,commodity)),
1500          accounting_sourcesinkFlowIn(indicator,accnodesData,years,sourcesink_techs,commodity,pc_accounting_sourcesinkFlow))
1501      / sum((nodesData,accnodesData)
1502              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1503                  and accounting_sourcesinkFlowNonzero(indicator,accnodesData,years,sourcesink_techs,commodity)),
1504          1);
1505   
1506  parameter accounting_sourcesinkFlow(indicator,nodesModel,years,sourcesink_techs,commodity,pc_accounting_sourcesinkFlow);
1507  loop(accnodes,
1508  accounting_sourcesinkFlow(indicator,nodesModel,years,sourcesink_techs,commodity,pc_accounting_sourcesinkFlow)
1509      $sum(accnodesData$(map_accnodesToCalc(accnodes,nodesModel) and sameas(accnodes,accnodesData)
1510                              and accounting_sourcesinkFlowIn(indicator,accnodesData,years,sourcesink_techs,commodity,pc_accounting_sourcesinkFlow)), 1)
1511      = sum(accnodesData$(map_accnodesToCalc(accnodes,nodesModel) and sameas(accnodes,accnodesData)),
1512              accounting_sourcesinkFlowIn(indicator,accnodesData,years,sourcesink_techs,commodity,pc_accounting_sourcesinkFlow));
1513  );
1514   
1515  accounting_sourcesinkFlow(indicator,nodesModel,years,sourcesink_techs,commodity,pc_accounting_sourcesinkFlow)
1516      $accounting_sourcesinkFlowAgg(indicator,nodesModel,years,sourcesink_techs,commodity,pc_accounting_sourcesinkFlow)
1517      = accounting_sourcesinkFlowAgg(indicator,nodesModel,years,sourcesink_techs,commodity,pc_accounting_sourcesinkFlow);
1518   
1519  * option kill %paramName%Nonzero %paramName%Chk %paramName%Agg
1520   
1521  parameter accounting_indicatorBounds_links(linksModel,years,indicator,pc_accounting_indicatorBounds_links);
1522  accounting_indicatorBounds_links(linksModelToCalc,yearsToCalc,indicator,pc_accounting_indicatorBounds_links)
1523      = sum((linksData)$sameas(linksModelToCalc,linksData),
1524              accounting_indicatorBounds_linksIn(linksData,yearsToCalc,indicator,pc_accounting_indicatorBounds_links));
1525   
1526  accounting_indicatorBounds_links(linksModelToCalc,yearsToCalc,indicator,pc_accounting_indicatorBounds_links)
1527      = sum((linksData)$links_aggregate(linksModelToCalc,linksData),
1528              accounting_indicatorBounds_linksIn(linksData,yearsToCalc,indicator,pc_accounting_indicatorBounds_links));
1529   
1530  parameter accounting_indicatorBounds(accNodesModel,accYears,indicator,pc_accounting_indicatorBounds);
1531  accounting_indicatorBounds(accNodesModel,accYears,indicator,pc_accounting_indicatorBounds)
1532      = sum (accNodesData$sameas(accNodesModel,accNodesData),
1533          accounting_indicatorBoundsIn(accNodesData,accYears,indicator,pc_accounting_indicatorBounds));
1534   
1535  accounting_indicatorBounds(accNodesModel,accYears,indicator,pc_accounting_indicatorBounds)
1536      $(sum (nodesModel$sameas(accNodesModel,nodesModel), 1) > 0)
1537      = sum ((accNodesData,nodesData,nodesModel)
1538              $(aggregateNodesModel(nodesData,nodesModel) and sameas(accNodesModel,nodesModel) and sameas(accNodesData,nodesData)),
1539          accounting_indicatorBoundsIn(accNodesData,accYears,indicator,pc_accounting_indicatorBounds));
1540   
1541  set accounting_perIndicatorNonzero(indicator,indicator_a,accNodesData,accYears);
1542  accounting_perIndicatorNonzero(indicator,indicator_a,accNodesData,accYears)
1543      $sum(pc_accounting_perIndicator$accounting_perIndicatorIn(indicator,indicator_a,accNodesData,accYears,pc_accounting_perIndicator), 1)
1544      = yes;
1545   
1546  parameter accounting_perIndicatorAgg(indicator,indicator_a,nodesModel,accYears,pc_accounting_perIndicator);
1547  accounting_perIndicatorAgg(indicator,indicator_a,nodesModel,accYears,pc_accounting_perIndicator)
1548      $sum((nodesData,accnodesData)
1549              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1550                  and accounting_perIndicatorNonzero(indicator,indicator_a,accnodesData,accYears)), 1)
1551      = sum((nodesData,accnodesData)
1552              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1553                  and accounting_perIndicatorNonzero(indicator,indicator_a,accnodesData,accYears)),
1554          accounting_perIndicatorIn(indicator,indicator_a,accnodesData,accYears,pc_accounting_perIndicator))
1555      / sum((nodesData,accnodesData)
1556              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1557                  and accounting_perIndicatorNonzero(indicator,indicator_a,accnodesData,accYears)),
1558          1);
1559   
1560  parameter accounting_perIndicator(indicator,indicator_a,accNodesModel,accYears,pc_accounting_perIndicator);
1561   
1562  loop(accNodes,
1563  accounting_perIndicator(indicator,indicator_a,accNodesModel,accYears,pc_accounting_perIndicator)
1564      $(sum(accNodesData$(sameas(accNodes,accNodesData)
1565              and accounting_perIndicatorIn(indicator,indicator_a,accNodesData,"horizon",pc_accounting_perIndicator)), 1)
1566          and map_accNodes(accNodesModel,accNodes)
1567              )
1568      = sum(accNodesData$(sameas(accNodes,accNodesData)),
1569              accounting_perIndicatorIn(indicator,indicator_a,accNodesData,"horizon",pc_accounting_perIndicator));
1570   
1571  accounting_perIndicator(indicator,indicator_a,accNodesModel,accYears,pc_accounting_perIndicator)
1572      $(sum(accNodesData$(sameas(accNodes,accNodesData)
1573              and accounting_perIndicatorIn(indicator,indicator_a,accNodesData,accYears,pc_accounting_perIndicator)), 1)
1574          and map_accNodes(accNodesModel,accNodes)
1575          and not sameas(accYears, "horizon"))
1576      = sum(accNodesData$(sameas(accNodes,accNodesData)),
1577              accounting_perIndicatorIn(indicator,indicator_a,accNodesData,accYears,pc_accounting_perIndicator));
1578  );
1579   
1580  accounting_perIndicator(indicator,indicator_a,accNodesModel,accYears,pc_accounting_perIndicator)
1581      $sum(nodesModel$(accounting_perIndicatorAgg(indicator,indicator_a,nodesModel,"horizon",pc_accounting_perIndicator)
1582          and sameas(accNodesModel,nodesModel)), 1)
1583      = sum(nodesModel$sameas(accNodesModel,nodesModel),
1584          accounting_perIndicatorAgg(indicator,indicator_a,nodesModel,"horizon",pc_accounting_perIndicator));
1585   
1586  accounting_perIndicator(indicator,indicator_a,accNodesModel,accYears,pc_accounting_perIndicator)
1587      $sum(nodesModel$(accounting_perIndicatorAgg(indicator,indicator_a,nodesModel,accYears,pc_accounting_perIndicator)
1588          and sameas(accNodesModel,nodesModel) and not sameas(accYears, "horizon")), 1)
1589      = sum(nodesModel$sameas(accNodesModel,nodesModel),
1590          accounting_perIndicatorAgg(indicator,indicator_a,nodesModel,accYears,pc_accounting_perIndicator));
1591   
1592   
1593  * Make sure all required indicators end up in the model
1594  set activeIndicators(accNodesModel,accYears,indicator);
1595  activeIndicators(accNodesModel,accYears,indicator)
1596     $((accounting_indicatorBounds(accNodesModel,accYears,indicator,"obj") <> 0
1599        or accounting_indicatorBounds(accNodesModel,accYears,indicator,"useFixed") <> 0
1600        or accounting_indicatorBounds(accNodesModel,accYears,indicator,"useLower") <> 0
1601        or accounting_indicatorBounds(accNodesModel,accYears,indicator,"useUpper") <> 0 )
1602          and not accounting_indicatorBounds(accNodesModel,accYears,indicator,"isVariable"))
1603     = yes;
1604   
1605  set activeIndicators_links(linksModel,years,indicator);
1606  activeIndicators_links(linksModelToCalc,yearsToCalc,indicator)
1607     $(accounting_indicatorBounds_links(linksModelToCalc,yearsToCalc,indicator,"useFixed") <> 0
1608        or accounting_indicatorBounds_links(linksModelToCalc,yearsToCalc,indicator,"useLower") <> 0
1609        or accounting_indicatorBounds_links(linksModelToCalc,yearsToCalc,indicator,"useUpper") <> 0 )
1610     = yes;
1611   
1612  set variableIndicators(accNodesModel,accYears,indicator);
1613  variableIndicators(accNodesModel,accYears,indicator)
1614     $(accounting_indicatorBounds(accNodesModel,accYears,indicator,"obj") = 0
1615        and accounting_indicatorBounds(accNodesModel,accYears,indicator,"isVariable"))
1616     = yes;
1617   
1618  * Calculate length of years and discount rates per indicator
1619  parameter yearFactor(accNodesModel,accYears,indicator,accYears);
1620  yearFactor(accNodesModel,accYears,indicator,accYears_a)
1621      $(map_accYears(accYears_a,accYears)
1622          and sum(yearsToCalc$(sameas(yearsToCalc,accYears_a)), 1))
1623      = 1;
1624   
1625  yearFactor(accNodesModel,accYears,indicator,accYears_a)
1626      $(map_accYears(accYears_a,accYears)
1627          and sum(yearsToCalc$(sameas(yearsToCalc,accYears_a)), 1)
1628          and accounting_indicatorBounds(accNodesModel,accYears,indicator,"integral"))
1629      = sum(yearsToCalc$sameas(accYears_a,yearsToCalc), yearsLen(yearsToCalc));
1630   
1631  yearFactor(accNodesModel,accYears,indicator,accYears_a)
1632      $(map_accYears(accYears_a,accYears)
1633          and sum(yearsToCalc$(sameas(yearsToCalc,accYears_a)), 1)
1634          and accounting_indicatorBounds(accNodesModel,accYears,indicator,"integral")
1635          and accounting_indicatorBounds(accNodesModel,accYears,indicator,"endyear")
1636          and yearFactor(accNodesModel,accYears,indicator,accYears_a) = inf)
1637      = accounting_indicatorBounds(accNodesModel,accYears,indicator,"endyear");
1638   
1639  yearFactor(accNodesModel,accYears,indicator,accYears_a)
1640      $(map_accYears(accYears_a,accYears)
1641          and sum(yearsToCalc$(sameas(yearsToCalc,accYears_a)), 1)
1642          and accounting_indicatorBounds(accNodesModel,accYears,indicator,"integral")
1643          and accounting_indicatorBounds(accNodesModel,accYears,indicator,"discount"))
1644      = yearFactor(accNodesModel,accYears,indicator,accYears_a)
1645          * (1 - accounting_indicatorBounds(accNodesModel,accYears,indicator,"discount"))
1646                  ** (accYears_a.val - smin(yearsToCalc, yearsToCalc.val));
1647   
1648   
1649  * ==== calculate compound indicators for the optimization ====
1650  scalar compIndicators_pre;
1651  scalar compIndicators_post;
1652   
1653  parameter compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a);
1654  compoundIndicators(accNodesModel,accYears,indicator,accNodesModel,accYears,indicator)
1655      $activeIndicators(accNodesModel,accYears,indicator) = 1;
1656   
1657  set compoundIndicators_act(accNodesModel,accYears,indicator);
1658  option compoundIndicators_act < compoundIndicators;
1659   
1660  parameter compoundIndicatorsExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa);
1661  parameter compoundIndicatorsExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a);
1662  compoundIndicatorsExt(accNodesModel,accYears,indicator,accNodesModel,accYears,indicator,accNodesModel,accYears,indicator)
1663      $compoundIndicators_act(accNodesModel,accYears,indicator) = 1;
1664   
1665  compIndicators_pre = 0;
1666  compIndicators_post = 1;
1667   
1668  option sparseval = 1;
1669  while(compIndicators_pre < compIndicators_post,
1670      compIndicators_pre = sum((accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa)
1671          $compoundIndicatorsExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa), 1);
1672   
1673      compoundIndicatorsExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa)
1674          $(compoundIndicators_act(accNodesModel,accYears,indicator)
1675              and compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
1676              and not accounting_indicatorBounds(accNodesModel_a,accYears_a,indicator_a,"isVariable")
1677              and map_accNodes(accNodesModel_aa,accNodesModel_a)
1678              and map_accYears(accYears_aa,accYears_a))
1679          = compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
1680              * accounting_perIndicator(indicator_a,indicator_aa,accNodesModel_aa,accYears_aa,"perIndicator");
1681   
1682      option compoundIndicatorsExt_r < compoundIndicatorsExt;
1683   
1684      compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa)
1685          $(compoundIndicators_act(accNodesModel,accYears,indicator)
1686              and sum((accNodesModel_a,accYears_a,indicator_a)
1687                      $compoundIndicatorsExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a), 1) = 1)
1688          = sum((accNodesModel_a,accYears_a,indicator_a)
1689                  $(compoundIndicatorsExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a)),
1690              compoundIndicatorsExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a));
1691   
1692      compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa)
1693          $(compoundIndicators_act(accNodesModel,accYears,indicator)
1694              and sum((accNodesModel_a,accYears_a,indicator_a)
1695                      $compoundIndicatorsExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a), 1) > 1)
1696          = sum((accNodesModel_a,accYears_a,indicator_a)
1697                  $(compoundIndicatorsExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a)
1698                      and not (sameas(accNodesModel, accNodesModel_a) and sameas(accYears, accYears_a) and sameas(indicator, indicator_a))),
1699              compoundIndicatorsExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a))
1700          / sum((accNodesModel_a,accYears_a,indicator_a)
1701                  $(compoundIndicatorsExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a)
1702                      and not (sameas(accNodesModel, accNodesModel_a) and sameas(accYears, accYears_a) and sameas(indicator, indicator_a))), 1);
1703   
1704      option compoundIndicators_act < compoundIndicators;
1705      compIndicators_post = sum((accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa)
1706          $compoundIndicatorsExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa), 1);
1707  );
1708  option sparseval = 0;
1709   
1710  * map to sub-years and sub-nodes
1711  compoundIndicatorsExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_a)
1712      $(compoundIndicators_act(accNodesModel,accYears,indicator)
1713          and compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
1714          and map_accYears(accYears_aa,accYears_a)
1715          and map_accNodes(accNodesModel_aa,accNodesModel_a))
1716      = compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
1717          * yearFactor(accNodesModel,accYears,indicator,accYears_aa);
1718   
1719  * Remove all accounting regions and accounting years
1720  compoundIndicatorsExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa)
1721      $(compoundIndicatorsExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa)
1722          and not accounting_indicatorBounds(accNodesModel_aa,accYears_aa,indicator_aa,"isVariable")
1723          and sum(accNodes$(sameas(accNodes,accNodesModel_aa)), 1)
1724              or sameas("horizon",accYears_aa))
1725      = 0;
1726   
1727  * Map from extended parameter to final parameter
1728  option compoundIndicatorsExt_r < compoundIndicatorsExt;
1729  compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa)
1730      $(compoundIndicators_act(accNodesModel,accYears,indicator)
1731          and sum((accNodesModel_a,accYears_a,indicator_a)
1732                  $compoundIndicatorsExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a), 1) = 1)
1733      = sum((accNodesModel_a,accYears_a,indicator_a)
1734              $(compoundIndicatorsExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a)),
1735          compoundIndicatorsExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a));
1736   
1737  compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa)
1738      $(compoundIndicators_act(accNodesModel,accYears,indicator)
1739          and sum((accNodesModel_a,accYears_a,indicator_a)
1740                  $compoundIndicatorsExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a), 1) > 1)
1741      = sum((accNodesModel_a,accYears_a,indicator_a)
1742              $(compoundIndicatorsExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a)
1743                  and not (sameas(accNodesModel, accNodesModel_a) and sameas(accYears, accYears_a) and sameas(indicator, indicator_a))),
1744          compoundIndicatorsExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a))
1745      / sum((accNodesModel_a,accYears_a,indicator_a)
1746              $(compoundIndicatorsExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a)
1747                  and not (sameas(accNodesModel, accNodesModel_a) and sameas(accYears, accYears_a) and sameas(indicator, indicator_a))), 1);
1748   
1749  * Remove all accounting regions and accounting years
1750  compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
1751      $(compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
1752          and not accounting_indicatorBounds(accNodesModel_a,accYears_a,indicator_a,"isVariable")
1753          and (sum(accNodes$(sameas(accNodes,accNodesModel_a)), 1)
1754              or sameas("horizon",accYears_a)))
1755      = 0;
1756   
1757  * Remove all slack indicators except the ones declared in indicatorBounds
1758  compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
1759      $(compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
1760          and sum((accNodesModel_aa,accYears_aa)$accounting_indicatorBounds(accNodesModel_aa,accYears_aa,indicator_a,"isVariable"), 1)
1761          and not accounting_indicatorBounds(accNodesModel_a,accYears_a,indicator_a,"isVariable"))
1762      = 0;
1763   
1764  * ==== compound indicators for the post calculation ====
1765  parameter compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a);
1766  compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel,accYears,indicator)
1767      $(sum(nodesModelToCalc$map_accNodesToCalc(accNodesModel,nodesModelToCalc), 1)
1768          and sum(yearsToCalc$map_accYearsToCalc(accYears,yearsToCalc), 1)) = 1;
1769   
1770  set compoundIndicatorsFull_act(accNodesModel,accYears,indicator);
1771  option compoundIndicatorsFull_act < compoundIndicatorsFull;
1772   
1773  parameter compoundIndicatorsFullExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa);
1774  parameter compoundIndicatorsFullExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a);
1775  compoundIndicatorsFullExt(accNodesModel,accYears,indicator,accNodesModel,accYears,indicator,accNodesModel,accYears,indicator) = 1;
1776   
1777  compIndicators_pre = 0;
1778  compIndicators_post = 1;
1779   
1780  option sparseval = 1;
1781  while(compIndicators_pre < compIndicators_post,
1782      compIndicators_pre = sum((accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa)
1783          $compoundIndicatorsFullExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa), 1);
1784   
1785      compoundIndicatorsFullExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa)
1786          $(compoundIndicatorsFull_act(accNodesModel,accYears,indicator)
1787              and compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
1788              and not accounting_indicatorBounds(accNodesModel_a,accYears_a,indicator_a,"isVariable")
1789              and map_accNodes(accNodesModel_aa,accNodesModel_a)
1790              and map_accYears(accYears_aa,accYears_a))
1791          = compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
1792              * accounting_perIndicator(indicator_a,indicator_aa,accNodesModel_aa,accYears_aa,"perIndicator");
1793   
1794      option compoundIndicatorsFullExt_r < compoundIndicatorsFullExt;
1795   
1796      compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa)
1797          $(compoundIndicatorsFull_act(accNodesModel,accYears,indicator)
1798              and sum((accNodesModel_a,accYears_a,indicator_a)
1799                      $compoundIndicatorsFullExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a), 1) = 1)
1800          = sum((accNodesModel_a,accYears_a,indicator_a)
1801                  $(compoundIndicatorsFullExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a)),
1802              compoundIndicatorsFullExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a));
1803   
1804      compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa)
1805          $(compoundIndicatorsFull_act(accNodesModel,accYears,indicator)
1806              and sum((accNodesModel_a,accYears_a,indicator_a)
1807                      $compoundIndicatorsFullExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a), 1) > 1)
1808          = sum((accNodesModel_a,accYears_a,indicator_a)
1809                  $(compoundIndicatorsFullExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a)
1810                      and not (sameas(accNodesModel, accNodesModel_a) and sameas(accYears, accYears_a) and sameas(indicator, indicator_a))),
1811              compoundIndicatorsFullExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a))
1812          / sum((accNodesModel_a,accYears_a,indicator_a)
1813                  $(compoundIndicatorsFullExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a)
1814                      and not (sameas(accNodesModel, accNodesModel_a) and sameas(accYears, accYears_a) and sameas(indicator, indicator_a))), 1);
1815   
1816      option compoundIndicatorsFull_act < compoundIndicatorsFull;
1817      compIndicators_post = sum((accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa)
1818          $compoundIndicatorsFullExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa), 1);
1819  );
1820  option sparseval = 0;
1821   
1822  * map to sub-years and sub-nodes
1823  compoundIndicatorsFullExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_a)
1824      $(compoundIndicatorsFull_act(accNodesModel,accYears,indicator)
1825          and compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
1826          and map_accYears(accYears_aa,accYears_a)
1827          and map_accNodes(accNodesModel_aa,accNodesModel_a))
1828      = compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
1829          * yearFactor(accNodesModel,accYears,indicator,accYears_aa);
1830   
1831  * Remove all accounting regions and accounting years
1832  compoundIndicatorsFullExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa)
1833      $(compoundIndicatorsFullExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa)
1834          and not accounting_indicatorBounds(accNodesModel_aa,accYears_aa,indicator_aa,"isVariable")
1835          and sum(accNodes$(sameas(accNodes,accNodesModel_aa)), 1)
1836              or sameas("horizon",accYears_aa))
1837      = 0;
1838   
1839  * Map from extended parameter to final parameter
1840  option compoundIndicatorsFullExt_r < compoundIndicatorsFullExt;
1841  compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa)
1842      $(compoundIndicatorsFull_act(accNodesModel,accYears,indicator)
1843          and sum((accNodesModel_a,accYears_a,indicator_a)
1844                  $compoundIndicatorsFullExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a), 1) = 1)
1845      = sum((accNodesModel_a,accYears_a,indicator_a)
1846              $(compoundIndicatorsFullExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a)),
1847          compoundIndicatorsFullExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a));
1848   
1849  compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa)
1850      $(compoundIndicatorsFull_act(accNodesModel,accYears,indicator)
1851          and sum((accNodesModel_a,accYears_a,indicator_a)
1852                  $compoundIndicatorsFullExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a), 1) > 1)
1853      = sum((accNodesModel_a,accYears_a,indicator_a)
1854              $(compoundIndicatorsFullExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a)
1855                  and not (sameas(accNodesModel, accNodesModel_a) and sameas(accYears, accYears_a) and sameas(indicator, indicator_a))),
1856          compoundIndicatorsFullExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a))
1857      / sum((accNodesModel_a,accYears_a,indicator_a)
1858              $(compoundIndicatorsFullExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a)
1859                  and not (sameas(accNodesModel, accNodesModel_a) and sameas(accYears, accYears_a) and sameas(indicator, indicator_a))), 1);
1860   
1861  * Remove all accounting regions and accounting years
1862  compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
1863      $(compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
1864          and not accounting_indicatorBounds(accNodesModel_a,accYears_a,indicator_a,"isVariable")
1865          and (sum(accNodes$(sameas(accNodes,accNodesModel_a)), 1)
1866              or sameas("horizon",accYears_a)))
1867      = 0;
1868   
1869  * Remove all slack indicators except the ones declared in indicatorBounds
1870  compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
1871      $(compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
1872          and sum((accNodesModel_aa,accYears_aa)$accounting_indicatorBounds(accNodesModel_aa,accYears_aa,indicator_a,"isVariable"), 1)
1873          and not accounting_indicatorBounds(accNodesModel_a,accYears_a,indicator_a,"isVariable"))
1874      = 0;
1875   
1876  * Check if the objective value and optimization sense is set correctly
1877  scalar opti_values, opti_sense;
1878  opti_values = sum((accNodesModel,accYears,indicator)$(accounting_indicatorBounds(accNodesModel,accYears,indicator,"obj") <> 0), 1);
1879  opti_sense = sum((accNodesModel,accYears,indicator), accounting_indicatorBounds(accNodesModel,accYears,indicator,"obj"));
1880  abort$(opti_values < 1)
1881      "Accounting: No indicator specified as objective value"
1882  abort$(opti_values > 1)
1883      "Accounting: Too many indicators specified as objective value"
1884  abort$(opti_sense <> -1 and opti_sense <> 1)
1885      "Accounting: Optimization sense has to be either -1 or 1"
INCLUDE    C:\Local\REMix\framework\remix\framework\model\source\accounting\annuities.gms
1887  * SPDX-FileCopyrightText: Copyright (c) 2023 German Aerospace Center (DLR)
1888  * SPDX-License-Identifier: BSD-3-Clause
1889   
1890  * Calculation of annuities
1891   
1892  abort$(sum((indicator,nodesModelToCalc,converter_techs,vintage)
1893          $(accounting_converterUnits(indicator,nodesModelToCalc,converter_techs,vintage,"useAnnuity") = 1
1894          and accounting_converterUnits(indicator,nodesModelToCalc,converter_techs,vintage,"amorTime") < 1), 1) > 0 )
1895      "Accounting: Some converter technologies use annuities but have no amortization time"
1896   
1897  parameter accounting_annuityFactor_converter(indicator,nodesModel,converter_techs,vintage);
1898  accounting_annuityFactor_converter(indicator,nodesModelToCalc,converter_techs,vintage)
1899      $accounting_converterUnits(indicator,nodesModelToCalc,converter_techs,vintage,"useAnnuity")
1900      =
1901      accounting_converterUnits(indicator,nodesModelToCalc,converter_techs,vintage,"interest")
1902          * (1 + accounting_converterUnits(indicator,nodesModelToCalc,converter_techs,vintage,"interest"))
1903          ** accounting_converterUnits(indicator,nodesModelToCalc,converter_techs,vintage,"amorTime")
1904      / ((1 + accounting_converterUnits(indicator,nodesModelToCalc,converter_techs,vintage,"interest"))
1905          ** accounting_converterUnits(indicator,nodesModelToCalc,converter_techs,vintage,"amorTime") - 1);
1906   
1907   
1908  abort$(sum((indicator,nodesModelToCalc,storage_techs,vintage)
1909          $(accounting_storageUnits(indicator,nodesModelToCalc,storage_techs,vintage,"useAnnuity") = 1
1910          and accounting_storageUnits(indicator,nodesModelToCalc,storage_techs,vintage,"amorTime") < 1), 1) > 0 )
1911      "Accounting: Some storage technologies use annuities but have no amortization time"
1912   
1913  parameter accounting_annuityFactor_storage(indicator,nodesModel,storage_techs,vintage);
1914  accounting_annuityFactor_storage(indicator,nodesModelToCalc,storage_techs,vintage)
1915      $accounting_storageUnits(indicator,nodesModelToCalc,storage_techs,vintage,"useAnnuity")
1916      =
1917      accounting_storageUnits(indicator,nodesModelToCalc,storage_techs,vintage,"interest")
1918          * (1 + accounting_storageUnits(indicator,nodesModelToCalc,storage_techs,vintage,"interest"))
1919          ** accounting_storageUnits(indicator,nodesModelToCalc,storage_techs,vintage,"amorTime")
1920      / ((1 + accounting_storageUnits(indicator,nodesModelToCalc,storage_techs,vintage,"interest"))
1921          ** accounting_storageUnits(indicator,nodesModelToCalc,storage_techs,vintage,"amorTime") - 1);
1922   
1923   
1924  abort$(sum((indicator,linksModelToCalc,transfer_techs,vintage)
1925          $(accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"useAnnuity") = 1
1926          and accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"amorTime") < 1), 1) > 0 )
1927      "Accounting: Some transfer technologies use annuities but have no amortization time"
1928   
1929  parameter accounting_annuityFactor_transferLink(indicator,linksModel,transfer_techs,vintage);
1930  accounting_annuityFactor_transferLink(indicator,linksModelToCalc,transfer_techs,vintage)
1931      $accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"useAnnuity")
1932      =
1933      accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"interest")
1934          * (1 + accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"interest"))
1935          ** accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"amorTime")
1936      / ((1 + accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"interest"))
1937          ** accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"amorTime") - 1);
1938   
1939   
1940   
1941  abort$(sum((indicator,linksModelToCalc,transfer_techs,vintage,link_types)
1942          $(accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"useAnnuity") = 1
1943          and accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"amorTime") < 1), 1) > 0 )
1944      "Accounting: Some transfer-per-length technologies use annuities but have no amortization time"
1945   
1946  parameter accounting_annuityFactor_transferDistance(indicator,linksModel,transfer_techs,vintage,link_types);
1947  accounting_annuityFactor_transferDistance(indicator,linksModelToCalc,transfer_techs,vintage,link_types) = 1;
1948   
1949  accounting_annuityFactor_transferDistance(indicator,linksModelToCalc,transfer_techs,vintage,link_types)
1950      $accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"useAnnuity")
1951      =
1952      accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"interest")
1953          * (1 + accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"interest"))
1954          ** accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"amorTime")
1955      / ((1 + accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"interest"))
1956          ** accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"amorTime") - 1);
1957   
INCLUDE    C:\Local\REMix\framework\remix\framework\model\source\methods\mga_pre.gms
1959  * SPDX-FileCopyrightText: Copyright (c) 2023 German Aerospace Center (DLR)
1960  * SPDX-License-Identifier: BSD-3-Clause
1961   
INCLUDE    C:\Local\REMix\framework\remix\framework\model\source\methods\pareto_pre.gms
1965  * SPDX-FileCopyrightText: Copyright (c) 2023 German Aerospace Center (DLR)
1966  * SPDX-License-Identifier: BSD-3-Clause
1967   
INCLUDE    C:\Local\REMix\framework\remix\framework\model\source\postcalc\declaration.gms
1971  * SPDX-FileCopyrightText: Copyright (c) 2023 German Aerospace Center (DLR)
1972  * SPDX-License-Identifier: BSD-3-Clause
1973  * // # Output data
1974  * // This is the reference data model of the REMix output.
1975  * //
1976  * // ## Standard output
1979   
1986   
1988   
1989  set capType / "build", "decom", "total", "lowerLimit", "upperLimit", "total_degraded" /;
1990  set balanceType / "netto", "brutto", "positive", "negative", "flh" /;
1991  set profileType / "upper", "fixed", "lower" /;
1992  set r2a_has_converter_cost(indicator,nodesModel,years,techs,vintage,commodity);
1993   
1994  ** // OUTPUT: indicator_accounting | OEO_00000350:quantity value
1995  * // ### indicator_accounting
1996  * // Title: Accounting indicators Post-calculation
1997  parameter indicator_accounting(accNodesModel,accYears,indicator) "Post-calculation aggregated indicator accounting" ;
1998  * //
1999  ** // OUTPUT: indicator_accounting_ref | OEO_00000350:quantity value
2000  * // ### indicator_accounting_ref
2001  * // Title: Accounting indicators reference
2002  parameter indicator_accounting_ref(accNodesModel,accYears,indicator) "Indicator accounting optimization levels" ;
2003  * //
2004  ** // OUTPUT: indicator_accounting_comp | OEO_00000350:quantity value
2005  * // ### indicator_accounting_comp
2006  * // Title: Accounting indicators composition
2007  parameter indicator_accounting_comp(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a) "Indicator accounting with other indicator composition" ;
2008  * //
2009  ** // OUTPUT: indicator_accounting_detailed | OEO_00000350:quantity value
2010  * // ### indicator_accounting_detailed
2011  * // Title: Accounting indicators detail
2012  parameter indicator_accounting_detailed(indicator,nodesModel,years,techs) "Indicator accounting with technological composition" ;
2013  * //
2014  ** // OUTPUT: indicator_accounting_links | OEO_00000350:quantity value
2015  * // ### indicator_accounting_links
2016  * // Title: Accounting indicators per transfer link
2017  parameter indicator_accounting_links(indicator,nodesModel,nodesModel_a,linksModel,years,techs) "Indicator accounting of transfer technologies" ;
2018  * //
2019  parameter converter_ratedInput(techs,vintage,commodity);
2020  parameter converter_ratedOutput(techs,vintage,commodity);
2021  parameter converter_ratedOutput_min(nodesModel,years,techs,commodity);
2022  parameter converter_ratedOutput_max(nodesModel,years,techs,commodity);
2023   
2024  ** // OUTPUT: converter_caps | OEO_00010257:power capacity
2025  * // ### converter_caps
2026  * // Title: Coverter capacities post-calculation
2027  parameter converter_caps(accNodesModel,accYears,techs,commodity,capType) "Converter capacities, aggregated total" ;
2028  * //
2029  parameter converter_caps_ext(accNodesModel,nodesModel,accYears,years,techs,vintage,commodity,capType);
2030   
2031  ** // OUTPUT: converter_units | OEO_00000350:quantity value
2032  * // ### converter_units
2033  * // Title: Coverter units post-calculation
2034  parameter converter_units(accNodesModel,accYears,techs,vintage,capType) "Converter units" ;
2035  * //
2036  parameter converter_units_ext(accNodesModel,nodesModel,accYears,years,techs,vintage,capType);
2037   
2038  parameter max_transfer_coefficient(techs,commodity);
2039  parameter min_transfer_coefficient(techs,commodity);
2040  ** // OUTPUT: transfer_links | OEO_00000350:quantity value
2041  * // ### transfer_links
2042  * // Title: Transfer post-calculation
2043  parameter transfer_links(linksModel,years,techs,vintage,capType) "Transfer links" ;
2044  * //
2045  ** // OUTPUT: transfer_caps | OEO_00010257:power capacity
2046  * // ### transfer_caps
2047  * // Title: Transfer capacities post-calculation
2048  parameter transfer_caps(nodesModel_start,nodesModel_end,linksModel,years,techs,commodity,capType) "Transfer capacities, aggregated total" ;
2049  * //
2050  ** // OUTPUT: transfer_flows | OEO_00050019:energy amount value
2051  * // ### transfer_flows
2052  * // Title: Transfer hourly flows
2053  parameter transfer_flows(timeModel,nodesModel_start,nodesModel_end,linksModel,years,techs,commodity) "Hourly link flows" ;
2054  * //
2055  ** // OUTPUT: transfer_flows_annual | OEO_00050019:energy amount value
2056  * // ### transfer_flows_annual
2057  * // Title: Transfer annual flows
2058  parameter transfer_flows_annual(nodesModel_start,nodesModel_end,linksModel,years,techs,commodity,balanceType) "Annual link flows" ;
2059  * //
2060  ** // OUTPUT: transfer_losses | OEO_00050019:energy amount value
2061  * // ### transfer_losses
2062  * // Title: Transfer hourly losses
2063  parameter transfer_losses(timeModel,nodesModel_start,nodesModel_end,linksModel,years,techs,commodity) "Hourly link losses" ;
2064  * //
2065  ** // OUTPUT: transfer_losses_annual | OEO_00050019:energy amount value
2066  * // ### transfer_losses_annual
2067  * // Title: Transfer annual losses
2068  parameter transfer_losses_annual(nodesModel_start,nodesModel_end,linksModel,years,techs,commodity,balanceType) "Annual link losses" ;
2069  * //
2070  parameter storage_size_max(nodesModel,years,techs,commodity);
2071  parameter storage_size_min(nodesModel,years,techs,commodity);
2072  ** // OUTPUT: storage_units |  OEO_00000350:quantity value
2073  * // ### storage_units
2074  * // Title: Storage units post-calculation
2075  parameter storage_units(accNodesModel,accYears,techs,vintage,capType) "Storage units" ;
2076  * //
2077  parameter storage_units_ext(accNodesModel,nodesModel,accYears,years,techs,vintage,capType);
2078  ** // OUTPUT: storage_caps | OEO_00230000:energy storage capacity
2079  * // ### storage_caps
2080  * // Title: Storage capacities post-calculation
2081  parameter storage_caps(accNodesModel,accYears,techs,commodity,capType) "Storage capacities, aggregated total" ;
2082  * //
2083  parameter storage_caps_ext(accNodesModel,nodesModel,accYears,years,techs,vintage,commodity,capType);
2084  ** // OUTPUT: storage_level_out | OEO_00330012:energy storage content
2085  * // ### storage_level_out
2086  * // Title: Storage level
2087  parameter storage_level_out(timeModel,accNodesModel,accYears,techs,commodity) "Storage level per time step" ;
2088  * //
2089  parameter storage_level_out_ext(timeModel,accNodesModel,nodesModel,accYears,years,techs,vintage,commodity);
2090  ** // OUTPUT: storage_flows | OEO_00050019:energy amount value
2091  * // ### storage_flows
2092  * // Title: Storage hourly flows
2093  parameter storage_flows(timeModel,accNodesModel,accYears,techs,commodity) "Storage flows per time step" ;
2094  * //
2095  parameter storage_flows_ext(timeModel,accNodesModel,nodesModel,accYears,years,techs,vintage,commodity);
2096  ** // OUTPUT: storage_flows_annual | OEO_00050019:energy amount value
2097  * // ### storage_flows_annual
2098  * // Title: Storage annual flows
2099  parameter storage_flows_annual(accNodesModel,accYears,techs,commodity,balanceType) "Aggregated storage flows" ;
2100  * //
2101  ** // OUTPUT: storage_losses_out | OEO_00050019:energy amount value
2102  * // ### storage_losses_out
2103  * // Title: Storage hourly losses
2104  parameter storage_losses_out(timeModel,accNodesModel,accYears,techs,commodity) "Storage losses per time step" ;
2105  * //
2106  ** // OUTPUT: storage_losses_annual | OEO_00050019:energy amount value
2107  * // ### storage_losses_annual
2108  * // Title: Storage annual losses
2109  parameter storage_losses_annual(accNodesModel,accYears,techs,commodity,balanceType) "Aggregated storage losses" ;
2110  * //
2111  ** // OUTPUT: commodity_balance | OEO_00000350:quantity value
2112  * // ### commodity_balance
2113  * // Title: Hourly commodity balance
2114  parameter commodity_balance(timeModel,accNodesModel,accYears,techs,commodity) "Commodity balances per model hour" ;
2115  parameter commodity_balance_ext(timeModel,accNodesModel,nodesModel,accYears,years,techs,vintage,commodity);
2116  * //
2117  ** // OUTPUT: commodity_balance_annual | OEO_00000350:quantity value
2118  * // ### commodity_balance_annual
2119  * // Title: Annual commodity balance
2120  parameter commodity_balance_annual(accNodesModel,accYears,techs,commodity,balanceType) "Aggregated commodity balances" ;
2121  * //
2122  ** // OUTPUT: marginals_sourcesink_profile | OEO_00040008:marginal cost
2123  * // ### marginals_sourcesink_profile
2124  * // Title: Source-sink marginals
2125  parameter marginals_sourcesink_profile(timeModel,nodesModel,years,techs,commodity) "Source and sink flow marginal values" ;
2126  * //
2127  ** // OUTPUT: marginals_balance | OEO_00040008:marginal cost
2128  * // ### marginals_balance
2129  * // Title: Nodel balance marginals
2130  parameter marginals_balance(timeModel,nodesModel,years,commodity) "Nodal balance marginal values" ;
2131  * //
2132  ** // OUTPUT: marginals_sourcesink_sum | OEO_00040008:marginal cost
2133  * // ### marginals_sourcesink_sum
2134  * // Title: Source-sink annual marginals
2135  parameter marginals_sourcesink_sum(nodesModel,years,techs,commodity) "Annual source and sink flow marginal values" ;
2136  * //
2137  ** // OUTPUT: marginals_indicator_bounds | OEO_00040008:marginal cost
2138  * // ### marginals_indicator_bounds
2139  * // Title: Indicator bounds marginals
2140  parameter marginals_indicator_bounds(accNodesModel,accYears,indicator) "Accounting indicator marginals" ;
2141  * //
2142  * // ## REMix-AMIRIS interface output
2143  * //
2144  ** // OUTPUT: r2a_annuity_cost_converter | OEO_00040009:cost
2145  * // ### r2a_annuity_cost_converter
2146  * // Title: Converter annuity cost
2147  parameter r2a_annuity_cost_converter(indicator,accNodesModel,accYears,techs,vintage,commodity) "Annuity cost of converters" ;
2148  * //
2149  ** // OUTPUT: r2a_spec_cost_converter | OEO_00040009:cost
2150  * // ### r2a_spec_cost_converter
2151  * // Title: Converter specific cost
2152  parameter r2a_spec_cost_converter(indicator,accNodesModel,accYears,techs,vintage,commodity) "Specific cost of converters" ;
2153  * //
2154  ** // OUTPUT: r2a_spec_cost_fuel | OEO_00040009:cost
2155  * // ### r2a_spec_cost_fuel
2156  * // Title: Commodity specific cost
2157  parameter r2a_spec_cost_fuel(indicator,accNodesModel,accYears,techs,commodity) "Specific cost of commodities, used particularly for fuels" ;
2158  * //
2159  ** // OUTPUT: r2a_spec_cost_indicator | OEO_00040009:cost
2160  * // ### r2a_spec_cost_indicator
2161  * // Title: Indicator specific cost
2162  parameter r2a_spec_cost_indicator(indicator,indicator_a,accNodesModel,accYears) "Specific indicator cost" ;
2163  * //
2164  ** // OUTPUT: r2a_converter_efficiencies | OEO_00140050:efficiency value
2165  * // ### r2a_converter_efficiencies
2166  * // Title: Indicator specific cost
2167  parameter r2a_converter_efficiencies(techs,vintage,activity,commodity,commodity_a) "Converter-specific efficiency" ;
2168  * //
2169  ** // OUTPUT: r2a_converter_avail_factor | OEO_00000350:quantity value
2170  * // ### r2a_converter_avail_factor
2171  * // Title: Converter availability factor
2172  parameter r2a_converter_avail_factor(accNodesModel,accYears,techs,vintage) "Availability factor of converter technologies" ;
2173  parameter r2a_converter_avail_profile(timeModel,accNodesModel,accYears,techs,commodity,profileType) "Availability of converter technologies" ;
2174  parameter r2a_converter_avail_profile_ext(timeModel,accNodesModel,nodesModel,accYears,years,techs,vintage,commodity,profileType);
2175  * //
2176  ** // OUTPUT: r2a_storage_e2p | OEO_00000350:quantity value
2177  * // ### r2a_storage_e2p
2178  * // Title: E2P Storage
2179  parameter r2a_storage_e2p(accNodesModel,accYears,techs,vintage,commodity,capType) "Energy-to-power ratio" ;
2180  * //
2181  ** // OUTPUT: r2a_storage_selfdischarge | OEO_00000350:quantity value
2182  * // ### r2a_storage_selfdischarge
2183  * // Title: Storage self discharge rates
2184  parameter r2a_storage_selfdischarge(accNodesModel,accYears,techs,vintage,commodity);
2185   
INCLUDE    C:\Local\REMix\framework\remix\framework\model\source\loadgdx.gms
2189  * SPDX-FileCopyrightText: Copyright (c) 2023 German Aerospace Center (DLR)
2190  * SPDX-License-Identifier: BSD-3-Clause
2191   
2192  * ==== global settings ====
2194   
2196   
INCLUDE    C:\Local\REMix\framework\remix\framework\model\source\core\converter.gms
2198  * SPDX-FileCopyrightText: Copyright (c) 2023 German Aerospace Center (DLR)
2199  * SPDX-License-Identifier: BSD-3-Clause
2200   
2201  * // # core_converter
2202  * // The equations in this file describe the converters in the model.
2203   
2204  * // ## Advanced features
2205  * //
2206  * // You can find a more detailed explanation of the %curly_open%ref%curly_close%`MIP features <explanations_mip_label>`.
2207  ** // There is also a more detailed explanation on the modeling of outages at the %curly_open%ref%curly_close%`resilience section <explanations_resilience_label>`.
2208  * //
2209  * // In the following table you can see which modifications you have to make to your data to use the different features.
2210  * //
2211  * // | Feature | Modification |
2212  * // | ------ | ------ |
2213  * // | MIP expansion | The converter_tech_Parameter "mipUnits" has to be set to 1 in converter_techParam.dat for the technologies and years where descrete expansion is wanted |
2214  * // | Minimum up/downtime | The converter_tech_Parameters "minUptime" and/or "minDowntime" need to be set to the according amount of minimum time steps.Furthermore, the converter_tech_Parameter "mipDispatch" has to be set to 1 in converter_techParam.dat
2215  * // for the technologies and years where a minimum up- or downtime should be applied so that the units can be shut down. "mipUnits" will automatically be set to 1 |
2216  * // | Partial load | The converter_tech_Parameter "mipDispatch" has to be set to 1 in converter_techParam.dat for the technologies and years where you want to make use of the partial load feature. You also have to set a value to
2217  * // the converter_coefficient_parameters "minLoad" and/or "maxLoad" for the according technologies, vintages, activities and commodities. You can then for example set different "coefficient" values for each activity in converter_coefficient.dat |
2218  ** // | Outages | You have to include the converter_outageProfile.dat-file and while executing the model you have to set --method=resilience |
2219   
2220  * // ## %curly_open%ref%curly_close%`sets <remix_model_sets_label>`
2221  * //
2222  * // ### set_converter_techs.dat
2223  * // In this file all converter technologies are listed that can be used within your model.
2224  * //
2225  * // ### set_activities.dat
2226  * // All modes with which the converter technologies can be operated need to be added here.
2227  * // Examples: Charge (for the charging mode of a storage), Powergen (for the mode in which a converter produces electricity), Curtailment (for the mode in which a renewable power plant is shut down), …
2228  * // If you would like to use the partial load feature, all activity modes that should be available for this feature need to be defined here as well.
2229  * //
2230  * // ### set_commodities.dat
2231  * // In this file all commodities are listed that can be used and converted by the converter technologies.
2232  * // Examples: Electricity, Coal, Biomass, Hydrogen, …
2233   
2234  * // ## Variables
2235  * // {special_table_converter_variables}
3176   
3177  * ==== loading units from gdx file ====
3178   
3179  * Load units from gdx file
3181   
3182  * ==== calculation of mappings ====
3183   
3184  * Technologies with a lifeTime > 0 are available
3185  set converter_availTech(nodesModel,years,converter_techs,vintage);
3186  converter_availTech(nodesModel,years,converter_techs,vintage)
3187      $(vintage.val = smax(vintage_a$(vintage_a.val <= years.val
3188          and converter_techParam(converter_techs,vintage_a,"lifeTime") > 0), vintage_a.val)) = yes;
3189   
3190  * Technologies to optimize become unavailable if they have an unitsUpperLimit of 0
3191  converter_availTech(nodesModel,years,converter_techs,vintage)
3192      $(yearsToCalc(years) and converter_capacityParam(nodesModel,years,converter_techs,"unitsUpperLimit") = 0 ) = no;
3193   
3194  * Technologies already built become unavailable if they have an unitsBuild of 0
3195  converter_availTech(nodesModel,years,converter_techs,vintage)
3196      $( ( not yearsToCalc(years)) and converter_capacityParam(nodesModel,years,converter_techs,"unitsBuild") = 0 ) = no;
3197   
3198  * Used technologies are available technologies over their technical lifeTime
3199  set converter_usedTech(nodesModel,years,converter_techs,vintage);
3200  converter_usedTech(nodesModel,years,converter_techs,vintage)
3201      $(vintage.val <= years.val
3202          and years.val < smax(years_a$converter_availTech(nodesModel,years_a,converter_techs,vintage),
3203                                  years_a.val + converter_techParam(converter_techs,vintage,"lifeTime"))
3204          ) = yes;
3205   
3206  * Technologies have to be decomissioned in the interval of first avail + lifetime to last avail + lifetime
3207  set converter_decomTech(nodesModel,years,converter_techs,vintage);
3208  converter_decomTech(nodesModel,years,converter_techs,vintage)
3209    $(sum(years_a$converter_usedTech(nodesModel,years_a,converter_techs,vintage), 1)
3210      and sum(yearsToCalc
3211        $(sameas(years, yearsToCalc)
3212          and yearsToCalc.val >= smin(years_a$converter_availTech(nodesModel,years_a,converter_techs,vintage), years_a.val) + converter_techParam(converter_techs,vintage,"lifeTime")
3213          and yearsToCalc.val <= smax(years_a$converter_availTech(nodesModel,years_a,converter_techs,vintage), years_a.val) + converter_techParam(converter_techs,vintage,"lifeTime")), 1))
3214    = yes;
3215   
3216  * Extend the decom frame to the year after the last year of usedTech
3217  converter_decomTech(nodesModel,yearsToCalc,converter_techs,vintage)
3218    $(converter_usedTech(nodesModel,yearsToCalc-1,converter_techs,vintage)
3219      and converter_decomTech(nodesModel,yearsToCalc-1,converter_techs,vintage))
3220    = yes;
3221   
3222  * Mapping for used activities and commodities
3223  set converter_usedActCom(converter_techs,vintage,activity,commodity);
3224  option converter_usedActCom < converter_coefficient;
3225   
3226  set converter_usedAct(converter_techs,vintage,activity);
3227  option converter_usedAct < converter_usedActCom;
3228   
3229  set converter_usedCom(converter_techs,vintage,commodity);
3230  option converter_usedCom < converter_usedActCom;
3231   
3232  set converter_usedTechAct(nodesModel,years,converter_techs,vintage,activity);
3233  converter_usedTechAct(nodesModel,years,converter_techs,vintage,activity)
3234      $(converter_usedTech(nodesModel,years,converter_techs,vintage)
3235          and converter_usedAct(converter_techs,vintage,activity))
3236      = yes;
3237   
3238  set converter_useRampPos(nodesModel,years,converter_techs,vintage);
3239  converter_useRampPos(nodesModelToCalc,yearsToCalc,converter_techs,vintage)
3240    $(sum(indicator$accounting_converterStartup(indicator,nodesModelToCalc,converter_techs,vintage,"perRamp"), 1)
3241      or sum(indicator$accounting_converterStartup(indicator,nodesModelToCalc,converter_techs,vintage,"perRampPos"), 1))
3242    = 1;
3243   
3244  set converter_useRampNeg(nodesModel,years,converter_techs,vintage);
3245  converter_useRampNeg(nodesModelToCalc,yearsToCalc,converter_techs,vintage)
3246    $(sum(indicator$accounting_converterStartup(indicator,nodesModelToCalc,converter_techs,vintage,"perRamp"), 1)
3247      or sum(indicator$accounting_converterStartup(indicator,nodesModelToCalc,converter_techs,vintage,"perRampNeg"), 1))
3248    = 1;
3249   
3250   
3251  * ==== aggregation of profiles ====
3252   
3253  * derive upper and lower profiles then aggregate
3254  set converter_activity_hasProfileIn(nodesData,years,converter_techs,pc_converter_activityProfile);
3255  option converter_activity_hasProfileIn < converter_activityProfileIn;
3256   
3257  set converter_activity_hasProfile(nodesModel,years,converter_techs,pc_converter_activityProfile);
3258  converter_activity_hasProfile(nodesModelToCalc,yearsToCalc,converter_techs,pc_converter_activityProfile)
3259      = sum(nodesData$aggregateNodesModel(nodesData,nodesModelToCalc),
3260              converter_activity_hasProfileIn(nodesData,yearsToCalc,converter_techs,pc_converter_activityProfile));
3261   
3262  set converter_coefficient_hasProfileIn(nodesData,years,converter_techs,vintage,activity,commodity);
3263  option converter_coefficient_hasProfileIn < converter_coefficientProfileIn;
3264   
3265  set converter_coefficient_hasProfile(nodesModel,years,converter_techs,vintage,activity,commodity);
3266  converter_coefficient_hasProfile(nodesModelToCalc,yearsToCalc,converter_techs,vintage,activity,commodity)
3267      = sum(nodesData$aggregateNodesModel(nodesData,nodesModelToCalc),
3268              converter_coefficient_hasProfileIn(nodesData,yearsToCalc,converter_techs,vintage,activity,commodity));
3269   
3270  * aagregate time dimension
3271  parameter converter_activityProfileIn_aggTime(timeModel,nodesData,yearsToCalc,converter_techs,pc_converter_activityProfile);
3272  converter_activityProfileIn_aggTime(timeModelToCalc,nodesData,yearsToCalc,converter_techs,pc_converter_activityProfile)
3273    $converter_activity_hasProfileIn(nodesData,yearsToCalc,converter_techs,pc_converter_activityProfile)
3274    = sum(timeData$timeMapping(timeData,timeModelToCalc),
3275            converter_activityProfileIn(timeData,nodesData,yearsToCalc,converter_techs,pc_converter_activityProfile)
3276            / timeLength(timeModelToCalc));
3277  option clear = converter_activityProfileIn;
3278   
3279  * weighted average for a real sum of units upper limits, plain average if one region has an upper limit of inf
3280  parameter converter_activityProfile(timeModel,nodesModel,years,converter_techs,vintage,pc_converter_activityProfile);
3281  converter_activityProfile(timeModelToCalc,converter_usedTech(nodesModelToCalc,yearsToCalc,converter_techs,vintage),"upper")
3282      = converter_techParam(converter_techs,vintage,"activityUpperLimit");
3283  converter_activityProfile(timeModelToCalc,converter_usedTech(nodesModelToCalc,yearsToCalc,converter_techs,vintage),"lower")
3284      = converter_techParam(converter_techs,vintage,"activityLowerLimit");
3285   
3286   
3287  set converter_finiteUnitLimit(nodesModelToCalc,yearsToCalc,converter_techs);
3288  converter_finiteUnitLimit(nodesModelToCalc,yearsToCalc,converter_techs)
3289      = sum(nodesData$aggregateNodesModel(nodesData,nodesModelToCalc), converter_capacityParamIn(nodesData,yearsToCalc,converter_techs,"unitsUpperLimit")) > 0
3290          and sum(nodesData$aggregateNodesModel(nodesData,nodesModelToCalc), converter_capacityParamIn(nodesData,yearsToCalc,converter_techs,"unitsUpperLimit")) < inf;
3291   
3292  set converter_infiniteUnitLimit(nodesModelToCalc,yearsToCalc,converter_techs);
3293  converter_infiniteUnitLimit(nodesModelToCalc,yearsToCalc,converter_techs)
3294      = sum(nodesData$aggregateNodesModel(nodesData,nodesModelToCalc), converter_capacityParamIn(nodesData,yearsToCalc,converter_techs,"unitsUpperLimit")) = inf;
3295   
3296  converter_activityProfile(timeModelToCalc,converter_usedTech(nodesModelToCalc,yearsToCalc,converter_techs,vintage),pc_converter_activityProfile)
3297      $(converter_activity_hasProfile(nodesModelToCalc,yearsToCalc,converter_techs,pc_converter_activityProfile)
3298          and converter_finiteUnitLimit(nodesModelToCalc,yearsToCalc,converter_techs))
3299      = sum(nodesData$(aggregateNodesModel(nodesData,nodesModelToCalc)
3300                  and converter_capacityParamIn(nodesData,yearsToCalc,converter_techs,"unitsUpperLimit") < inf ),
3301                converter_activityProfileIn_aggTime(timeModelToCalc,nodesData,yearsToCalc,converter_techs,pc_converter_activityProfile)
3302                * converter_capacityParamIn(nodesData,yearsToCalc,converter_techs,"unitsUpperLimit"))
3303      / sum(nodesData$aggregateNodesModel(nodesData,nodesModelToCalc),
3304              converter_capacityParamIn(nodesData,yearsToCalc,converter_techs,"unitsUpperLimit"));
3305   
3306  converter_activityProfile(timeModelToCalc,converter_usedTech(nodesModelToCalc,yearsToCalc,converter_techs,vintage),pc_converter_activityProfile)
3307      $(converter_activity_hasProfile(nodesModelToCalc,yearsToCalc,converter_techs,pc_converter_activityProfile)
3308          and converter_infiniteUnitLimit(nodesModelToCalc,yearsToCalc,converter_techs))
3309      = sum(nodesData$(aggregateNodesModel(nodesData,nodesModelToCalc)
3310                  and converter_capacityParamIn(nodesData,yearsToCalc,converter_techs,"unitsUpperLimit") = inf),
3311                converter_activityProfileIn_aggTime(timeModelToCalc,nodesData,yearsToCalc,converter_techs,pc_converter_activityProfile)
3312                * converter_capacityParamIn(nodesData,yearsToCalc,converter_techs,"unitsUpperLimit"))
3313      / sum(nodesData$(aggregateNodesModel(nodesData,nodesModelToCalc)
3314                      and converter_capacityParamIn(nodesData,yearsToCalc,converter_techs,"unitsUpperLimit") = inf ),
3315              1);
3316  option clear = converter_activityProfileIn_aggTime;
3317   
3318  * for fixed profiles overwrite upper and lower profile
3319  converter_activityProfile(timeModelToCalc,nodesModelToCalc,yearsToCalc,converter_techs,vintage,"lower")
3320      $converter_activity_hasProfile(nodesModelToCalc,yearsToCalc,converter_techs,"fixed")
3321      = converter_activityProfile(timeModelToCalc,nodesModelToCalc,yearsToCalc,converter_techs,vintage,"fixed");
3322   
3323  converter_activityProfile(timeModelToCalc,nodesModelToCalc,yearsToCalc,converter_techs,vintage,"upper")
3324      $converter_activity_hasProfile(nodesModelToCalc,yearsToCalc,converter_techs,"fixed")
3325      = converter_activityProfile(timeModelToCalc,nodesModelToCalc,yearsToCalc,converter_techs,vintage,"fixed");
3326   
3327   
3328  * weighted average for a real sum of units upper limits, plain average if one region has an upper limit of inf
3329  parameter converter_coefficientProfile(timeModel,nodesModel,years,converter_techs,vintage,activity,commodity);
3330  converter_coefficientProfile(timeModelToCalc,converter_usedTechAct(nodesModelToCalc,yearsToCalc,converter_techs,vintage,activity),commodity)
3331      = converter_coefficient(converter_techs,vintage,activity,commodity,"coefficient");
3332   
3333  converter_coefficientProfile(timeModelToCalc,converter_usedTechAct(nodesModelToCalc,yearsToCalc,converter_techs,vintage,activity),commodity)
3334      $( converter_coefficient_hasProfile(nodesModelToCalc,yearsToCalc,converter_techs,vintage,activity,commodity)
3335          and converter_finiteUnitLimit(nodesModelToCalc,yearsToCalc,converter_techs) )
3336      = sum(nodesData$aggregateNodesModel(nodesData,nodesModelToCalc),
3337            sum(timeData$timeMapping(timeData,timeModelToCalc),
3338                    converter_coefficientProfileIn(timeData,nodesData,yearsToCalc,converter_techs,vintage,activity,commodity))
3339                / timeLength(timeModelToCalc)
3340              * converter_capacityParamIn(nodesData,yearsToCalc,converter_techs,"unitsUpperLimit") )
3341      / sum(nodesData$aggregateNodesModel(nodesData,nodesModelToCalc),
3342              converter_capacityParamIn(nodesData,yearsToCalc,converter_techs,"unitsUpperLimit"));
3343   
3344  converter_coefficientProfile(timeModelToCalc,converter_usedTechAct(nodesModelToCalc,yearsToCalc,converter_techs,vintage,activity),commodity)
3345      $( converter_coefficient_hasProfile(nodesModelToCalc,yearsToCalc,converter_techs,vintage,activity,commodity)
3346          and converter_infiniteUnitLimit(nodesModelToCalc,yearsToCalc,converter_techs))
3347      = sum(nodesData$(aggregateNodesModel(nodesData,nodesModelToCalc)
3348                      and converter_capacityParamIn(nodesData,yearsToCalc,converter_techs,"unitsUpperLimit") = inf ),
3349            sum(timeData$timeMapping(timeData,timeModelToCalc),
3350                    converter_coefficientProfileIn(timeData,nodesData,yearsToCalc,converter_techs,vintage,activity,commodity))
3351                / timeLength(timeModelToCalc))
3352      / sum(nodesData$(aggregateNodesModel(nodesData,nodesModelToCalc)
3353                      and converter_capacityParamIn(nodesData,yearsToCalc,converter_techs,"unitsUpperLimit") = inf ), 1);
3354   
3355  * ==== prepare partial load behavior parameters ====
3356   
3357  * set disabled max load requirements to 1 to avoid excessive logical expressions later on
3358  alias(commodity, com);
3359  converter_coefficient(converter_techs,vintage,activity,commodity,"maxLoad")
3360      $((converter_coefficient(converter_techs,vintage,activity,commodity,"maxLoad") = 0)
3361        and converter_usedAct(converter_techs,vintage,activity))
3362      = 1;
3363   
3364  * indicate that at least one activity of a technology makes use of partial load behavior
3365  set converter_hasMaxLoad(converter_techs,vintage);
3366  converter_hasMaxLoad(converter_techs,vintage)
3367    = smin((activity,commodity)$converter_usedAct(converter_techs,vintage,activity),
3368              converter_coefficient(converter_techs,vintage,activity,commodity,"maxLoad")) < 1;
3369   
3370  set converter_hasMinLoad(converter_techs,vintage);
3371  converter_hasMinLoad(converter_techs,vintage)
3372    = smax((activity,commodity)$converter_usedAct(converter_techs,vintage,activity),
3373              converter_coefficient(converter_techs,vintage,activity,commodity,"minLoad")) > 0;
3374   
3375  set converter_hasConstantFluxInActivity(converter_techs,vintage);
3376  converter_hasConstantFluxInActivity(converter_techs,vintage)
3377    = sum((activity,commodity)$converter_usedAct(converter_techs,vintage,activity),
3378                          abs(converter_coefficient(converter_techs,vintage,activity,commodity,"constant"))) > 0;
3379   
3380  * setting up a requirements parameter to avoid having to cycle through commodities in equations
3381  set pc_converter_activityRequirements
3382      /
3383      minLoad             "Lower profile for converter activity"
3384      maxLoad             "Upper profile for converter activity"
3385      /;
3386  parameter converter_activityRequirements(converter_techs,vintage,activity,pc_converter_activityRequirements);
3387  converter_activityRequirements(converter_techs,vintage,activity,"minLoad")
3388    = smax(commodity, converter_coefficient(converter_techs,vintage,activity,commodity,"minLoad"));
3389  converter_activityRequirements(converter_techs,vintage,activity,"maxLoad")
3390    = smin(commodity, converter_coefficient(converter_techs,vintage,activity,commodity,"maxLoad"));
3391   
3392  * ==== activate MIP units for MIP dispatch or partial load technologies ====
3393   
3394  set converter_hasMinUptime(converter_techs,vintage);
3395  converter_hasMinUptime(converter_techs,vintage)
3396    $(converter_techParam(converter_techs,vintage,"minUptime")
3397      and converter_techParam(converter_techs,vintage,"mipDispatch"))
3398    = yes;
3399   
3400  set converter_hasMinDowntime(converter_techs,vintage);
3401  converter_hasMinDowntime(converter_techs,vintage)
3402    $(converter_techParam(converter_techs,vintage,"minDowntime")
3403      and converter_techParam(converter_techs,vintage,"mipDispatch"))
3404    = yes;
3405   
3406  * require integer unit counts if online state is to be tracked
3407  converter_techParam(converter_techs,vintage,"mipUnits")
3408      $(converter_techParam(converter_techs,vintage,"mipDispatch")
3409        or converter_hasMinLoad(converter_techs, vintage)
3410        or converter_hasMaxLoad(converter_techs, vintage)
3411        or converter_hasConstantFluxInActivity(converter_techs,vintage))
3412      = 1;
3413   
3414  * ==== floor mip converter units to integer values ====
3415  converter_capacityParam(nodesModelToCalc,yearsToCalc,converter_techs,"unitsLowerLimit")
3416      $sum(vintage, converter_techParam(converter_techs,vintage,"mipUnits"))
3417      = floor(converter_capacityParam(nodesModelToCalc,yearsToCalc,converter_techs,"unitsLowerLimit"));
3418  converter_capacityParam(nodesModelToCalc,yearsToCalc,converter_techs,"unitsUpperLimit")
3419      $sum(vintage, converter_techParam(converter_techs,vintage,"mipUnits"))
3420      = ceil(converter_capacityParam(nodesModelToCalc,yearsToCalc,converter_techs,"unitsUpperLimit"));
3421   
3422  * ==== scalars and sets for minUptime and minDowntime ====
3423   
3424  scalar converter_maxUptimeReq;
3425  converter_maxUptimeReq = smax((converter_techs,vintage), converter_techParam(converter_techs,vintage,"minUptime"));
3426  set uptimeSearchRange(timeModelToCalc);
3427  uptimeSearchRange(timeModelToCalc) = ord(timeModelToCalc) <= converter_maxUptimeReq;
3428   
3429  scalar converter_maxDowntimeReq;
3430  converter_maxDowntimeReq = smax((converter_techs,vintage), converter_techParam(converter_techs,vintage,"minDowntime"));
3431  set downtimeSearchRange(timeModelToCalc);
3432  downtimeSearchRange(timeModelToCalc) = ord(timeModelToCalc) <= converter_maxDowntimeReq;
3433   
3434  * ==== definition of variables ====
3435   
3436  * Initialise variables for unitsBuild
3437  converter_unitsBuild.l(nodesModel,years,converter_techs,vintage)
3438      $converter_availTech(nodesModel,years,converter_techs,vintage)
3439      = converter_capacityParam(nodesModel,years,converter_techs,"unitsBuild");
3440  converter_unitsBuild.lo(nodesModel,yearsToCalc,converter_techs,vintage)
3441      $converter_availTech(nodesModel,yearsToCalc,converter_techs,vintage)
3442      = converter_unitsBuild.l(nodesModel,yearsToCalc,converter_techs,vintage);
3443  converter_unitsBuild.fx(nodesModel,years,converter_techs,vintage)
3444      $converter_capacityParam(nodesModel,years,converter_techs,"noExpansion")
3445      = converter_unitsBuild.l(nodesModel,years,converter_techs,vintage);
3446   
3447  * Initialise variables for unitsDecom
3448  converter_unitsDecom.l(nodesModel,years,converter_techs,vintage)
3449    $(converter_decomTech(nodesModel,years,converter_techs,vintage)
3450      and years.val < sum(yearsToCalc$(ord(yearsToCalc) = 1), yearsToCalc.val))
3451    = sum((years_a,years_aa)$(sameas(years-1, years_aa)
3452                        and years_a.val > years_aa.val - converter_techParam(converter_techs,vintage,'lifeTime')
3453                        and years_a.val <= years.val - converter_techParam(converter_techs,vintage,'lifeTime')
3454                        and converter_availTech(nodesModel,years_a,converter_techs,vintage)),
3455          converter_unitsBuild.l(nodesModel,years_a,converter_techs,vintage));
3456   
3457  converter_unitsDecom.l(nodesModel,yearsToCalc,converter_techs,vintage)
3458    $converter_decomTech(nodesModel,yearsToCalc,converter_techs,vintage)
3459    = sum(years$
3460          (years.val < sum(yearsToCalc_a$(ord(yearsToCalc_a) = 1), yearsToCalc_a.val)
3461            and converter_availTech(nodesModel,years,converter_techs,vintage)
3462            and years.val > sum(years_a$sameas(years_a, yearsToCalc-1), years_a.val) - converter_techParam(converter_techs,vintage,'lifeTime')
3463            and years.val <= yearsToCalc.val - converter_techParam(converter_techs,vintage,'lifeTime')),
3464        converter_unitsBuild.l(nodesModel,years,converter_techs,vintage))
3465      + sum(yearsToCalc_a$
3466          (yearsToCalc_a.val < sum(yearsToCalc_aa$(ord(yearsToCalc_aa) > 1), yearsToCalc_a.val)
3467            and converter_availTech(nodesModel,yearsToCalc_a,converter_techs,vintage)
3468            and yearsToCalc_a.val > sum(years_a$sameas(years_a, yearsToCalc-1), years_a.val) - converter_techParam(converter_techs,vintage,'lifeTime')
3469            and yearsToCalc_a.val <= yearsToCalc.val - converter_techParam(converter_techs,vintage,'lifeTime')),
3470        converter_unitsBuild.l(nodesModel,yearsToCalc_a,converter_techs,vintage));
3471        ;
3472   
3473  converter_unitsDecom.lo(nodesModel,yearsToCalc,converter_techs,vintage)
3474      $(converter_usedTech(nodesModel,yearsToCalc,converter_techs,vintage)
3475          and not converter_techParam(converter_techs,vintage,"freeDecom"))
3476      = converter_unitsDecom.l(nodesModel,yearsToCalc,converter_techs,vintage)
3477   
3478  * Calculate planned unit expansion
3479  parameter converter_unitsPlanned(nodesModel,years,converter_techs,vintage);
3480  converter_unitsPlanned(nodesModel,years,converter_techs,vintage) = 0;
3481  loop(years,
3482    converter_unitsPlanned(nodesModel,years,converter_techs,vintage)
3483      =
3484      converter_unitsPlanned(nodesModel,years-1,converter_techs,vintage)
3485          $converter_usedTech(nodesModel,years-1,converter_techs,vintage)
3486      + converter_unitsBuild.l(nodesModel,years,converter_techs,vintage)
3487          $converter_availTech(nodesModel,years,converter_techs,vintage)
3488      - converter_unitsDecom.l(nodesModel,years,converter_techs,vintage)
3489          $converter_usedTech(nodesModel,years,converter_techs,vintage);
3490  );
3491   
3492  * Set initial state for planned units
3493  converter_unitsTotal.l(nodesModel,years,converter_techs,vintage)
3494    = converter_unitsPlanned(nodesModel,years,converter_techs,vintage)
3495   
3496  * Calculate if planned unit expansion is bounded by upper and lower limits
3497  set converter_unitBoundsFixed(nodesModel,years,converter_techs);
3498  converter_unitBoundsFixed(nodesModel,years,converter_techs)
3499    $(sum(vintage$converter_usedTech(nodesModel,years,converter_techs,vintage),
3500          converter_unitsPlanned(nodesModel,years,converter_techs,vintage))
3501      = converter_capacityParam(nodesModel,years,converter_techs,"unitsUpperLimit")
3502    and sum(vintage$converter_usedTech(nodesModel,years,converter_techs,vintage),
3503          converter_unitsPlanned(nodesModel,years,converter_techs,vintage))
3504      = converter_capacityParam(nodesModel,years,converter_techs,"unitsLowerLimit"))
3505    = yes;
3506   
3507  * Fix unitsBuild, unitsDecom, unitsTotal if levels are predetermined by upper and lower limits
3508  converter_unitsBuild.fx(nodesModel,years,converter_techs,vintage)
3509    $(converter_availTech(nodesModel,years,converter_techs,vintage)
3510      and converter_unitBoundsFixed(nodesModel,years,converter_techs))
3511    = converter_unitsBuild.l(nodesModel,years,converter_techs,vintage);
3512  converter_unitsDecom.fx(nodesModel,years,converter_techs,vintage)
3513    $(converter_usedTech(nodesModel,years,converter_techs,vintage)
3514      and converter_unitBoundsFixed(nodesModel,years,converter_techs))
3515    = converter_unitsDecom.l(nodesModel,years,converter_techs,vintage);
3516  converter_unitsTotal.fx(nodesModel,years,converter_techs,vintage)
3517    $(converter_usedTech(nodesModel,years,converter_techs,vintage)
3518      and converter_unitBoundsFixed(nodesModel,years,converter_techs))
3519    = converter_unitsTotal.l(nodesModel,years,converter_techs,vintage);
3520   
3521  converter_unitsOnline_MIP.up(timeModelToCalc,nodesModel,years,converter_techs,vintage)
3522      $(converter_usedTech(nodesModel,years,converter_techs,vintage)
3523        and converter_techParam(converter_techs,vintage,"mipDispatch") = 1)
3524      = converter_capacityParam(nodesModel,years,converter_techs,"unitsUpperLimit");
3525   
3526  converter_unitsTotal_MIP.up(nodesModel,years,converter_techs,vintage)
3527      $(converter_usedTech(nodesModel,years,converter_techs,vintage)
3528        and converter_techParam(converter_techs,vintage,"mipUnits") = 1)
3529      = converter_capacityParam(nodesModel,years,converter_techs,"unitsUpperLimit");
3530   
3531  converter_unitsUsingActivity_MIP.up(timeModelToCalc,nodesModel,years,converter_techs,vintage,activity)
3532      $(converter_usedTech(nodesModel,years,converter_techs,vintage)
3533        and (converter_hasMinLoad(converter_techs, vintage)
3534              or converter_hasMaxLoad(converter_techs, vintage)))
3535      = converter_capacityParam(nodesModel,years,converter_techs,"unitsUpperLimit");
3536   
3537  * Add parameter for fixing capacities during myopic runs
3538  parameter converter_unitsDelta(nodesModel,years,converter_techs);
3539   
3540  * ==== declaration of equations ====
3541   
3542  equations
3543    Eq_converter_unitsBalance(nodesModel,years,converter_techs,vintage
3544      ) "Ensures the units balance over the planning period."
3545    Eq_converter_unitsFixedDecom(nodesModel,years,converter_techs,vintage
3546      ) "Restricts the fixed decommissioning of units over the planning period."
3547    Eq_converter_unitsFreeDecom(nodesModel,years,converter_techs,vintage
3548      ) "Restricts the free decommissioning of units over the planning period."
3549    Eq_converter_unitsUpperLimit(nodesModel,years,converter_techs
3550      ) "Upper bound for the total number of units."
3551    Eq_converter_unitsLowerLimit(nodesModel,years,converter_techs
3552      ) "Lower bound for the total number of units."
3553    Eq_converter_unitsFixedLimit(nodesModel,years,converter_techs
3554      ) "Fixed bound for the total number of units."
3555    Eq_converter_unitsTotalMIP(nodesModel,years,converter_techs,vintage
3556      ) "Fixes the total number of units to the corresponding integer variable."
3557    Eq_converter_unitsOnlineMIP(timeModel,nodesModel,years,converter_techs,vintage
3558      ) "Fixes the number of online units to the corresponding integer variable."
3559   
3560    Eq_converter_activityLowerLimit(timeModel,nodesModel,years,converter_techs,vintage
3561      ) "Lower limit on the activity."
3562    Eq_converter_activityUpperLimit(timeModel,nodesModel,years,converter_techs,vintage
3563      ) "Upper limit on the activity."
3564   
3565    Eq_converter_activityFixedLimit(timeModel,nodesModel,years,converter_techs,vintage
3566      ) "Fixed limit on the activity."
3567    Eq_converter_rampPos(timeModel,nodesModel,years,converter_techs,vintage
3568      ) "Positive ramping of unit activity."
3569    Eq_converter_rampNeg(timeModel,nodesModel,years,converter_techs,vintage
3570      ) "Negative ramping of unit activity."
3571    Eq_converter_rampLimit(timeModel,nodesModel,years,converter_techs,vintage
3572      ) "Restrict ramping up of unit activity."
3573   
3574    Eq_converter_unitsOnline(timeModel,nodesModel,years,converter_techs,vintage
3575      ) "Set online units to total number of operational units."
3576    Eq_converter_unitsOnlineUC(timeModel,nodesModel,years,converter_techs,vintage
3577      ) "Allow shutting down units."
3578    Eq_converter_activityStartups(timeModel,nodesModel,years,converter_techs,vintage
3579      ) "Variable counting the number of unit startups."
3580    Eq_converter_activityShutdowns(timeModel,nodesModel,years,converter_techs,vintage
3581      ) "Variable tracking the number of unit shutdowns."
3582    Eq_converter_limitStartups(nodesModel,years,converter_techs,vintage
3583      ) "Limit the number of startup cycles a unit can perform."
3584    Eq_converter_minUptime(timeModel,nodesModel,years,converter_techs,vintage
3585      ) "Require recently started units to remain online for their respective minimum uptime."
3586    Eq_converter_minDowntime(timeModel,nodesModel,years,converter_techs,vintage
3587      ) "Require recently shut down units to remain offline for their respective minimum downtime."
3588    Eq_converter_activityUpperLimitDetailedPartLoadMinReq(timeModel,nodesModel,years,converter_techs,vintage,activity
3589      ) "Limit activity coefficients of activities with a given load requirement or stricter to the number of units in such modes."
3590    Eq_converter_activityUpperLimitDetailedPartLoadMaxReq(timeModel,nodesModel,years,converter_techs,vintage,activity
3591      ) "Limit activity coefficients of activities with a given load requirement or stricter to the number of units in such modes."
3592    Eq_converter_activityLowerLimitDetailedPartLoadMinReq(timeModel,nodesModel,years,converter_techs,vintage,activity
3593      ) "Enforce sufficient activity coefficients of activities to justify all active modes."
3594    Eq_converter_noOnlineIdle(timeModel,nodesModel,years,converter_techs,vintage
3595      ) "Prevent the circumvention of requirements by keeping units online without using any modes."
3596    Eq_converter_noOnlineIdleDetailedPartLoad(timeModel,nodesModel,years,converter_techs,vintage
3597      ) "Prevent the circumvention of requirements by keeping units online without using any modes. Allow more than one mode activation per unit."
3598    Eq_converter_activityUpperLimitPartLoad(timeModel,nodesModel,years,converter_techs,vintage,activity
3599      ) "Limit usage of an activity to corresponding units."
3600    Eq_converter_activityLowerLimitPartLoad(timeModel,nodesModel,years,converter_techs,vintage,activity
3601      ) "Limit usage of an activity to corresponding units."
3602    Eq_converter_activityModeLimit(timeModel,nodesModel,years,converter_techs,vintage,activity
3603      ) "Limit the number of units in one particular mode to the number of operational units."
3604    ;
3605   
3606  * ==== equation definition ====
3607  * // ## Equations
3608  * // ### Converter Units Balance
3609  * // Ensures that the total units are consistent with the built and decommissioned units.
3610  * // {Eq_converter_unitsBalance}
3611  Eq_converter_unitsBalance(nodesModelSel,yearsSel,converter_techs,vintage)
3612      $((converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
3613            or sum(years$sameas(years,yearsSel), converter_usedTech(nodesModelSel,years-1,converter_techs,vintage)))
3614          and not converter_unitBoundsFixed(nodesModelSel,yearsSel,converter_techs))
3615      ..
3616      converter_unitsTotal(nodesModelSel,yearsSel,converter_techs,vintage)
3617      =e=
3618      sum(yearsToCalc$(ord(yearsToCalc) = 1 and sameas(yearsToCalc, yearsSel)),
3619        sum(years$sameas(years, yearsToCalc),
3620          converter_unitsTotal(nodesModelSel,years-1,converter_techs,vintage)
3621            $converter_usedTech(nodesModelSel,years-1,converter_techs,vintage)))
3622      + sum((yearsToCalc)$(ord(yearsToCalc) > 1 and sameas(yearsToCalc, yearsSel)),
3623        converter_unitsTotal(nodesModelSel,yearsToCalc-1,converter_techs,vintage)
3624          $converter_usedTech(nodesModelSel,yearsToCalc-1,converter_techs,vintage))
3625      + converter_unitsBuild(nodesModelSel,yearsSel,converter_techs,vintage)
3626          $converter_availTech(nodesModelSel,yearsSel,converter_techs,vintage)
3627      - converter_unitsDecom(nodesModelSel,yearsSel,converter_techs,vintage)
3628          $converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage);
3629   
3630  * // ### Converter Units Fixed Decommission
3631  * // Restricts the fixed decommissioning of units over the planning period.
3632  * // {Eq_converter_unitsFixedDecom}
3633  Eq_converter_unitsFixedDecom(nodesModelSel,yearsSel,converter_techs,vintage)
3634      $(converter_decomTech(nodesModelSel,yearsSel,converter_techs,vintage)
3635          and not converter_techParam(converter_techs,vintage,"freeDecom") = 1
3636          and not converter_unitBoundsFixed(nodesModelSel,yearsSel,converter_techs))
3637      ..
3638      converter_unitsDecom(nodesModelSel,yearsSel,converter_techs,vintage)
3639      =e=
3640      sum(years$
3641          (converter_availTech(nodesModelSel,years,converter_techs,vintage)
3642            and years.val > sum(yearsToCalc$sameas(yearsToCalc+1, yearsSel), yearsToCalc.val) - converter_techParam(converter_techs,vintage,'lifeTime')
3643            and years.val <= yearsSel.val - converter_techParam(converter_techs,vintage,'lifeTime')),
3644        converter_unitsBuild(nodesModelSel,years,converter_techs,vintage));
3645   
3646  * // ### Converter Units Free Decommission
3647  * // Restricts the free decommissioning of units over the planning period.
3648  * // {Eq_converter_unitsFreeDecom}
3649  Eq_converter_unitsFreeDecom(nodesModelSel,yearsSel,converter_techs,vintage)
3650      $((converter_decomTech(nodesModelSel,yearsSel,converter_techs,vintage)
3651          or converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage))
3652          and converter_techParam(converter_techs,vintage,"freeDecom") = 1)
3653      ..
3654      sum(years$
3655            ((converter_decomTech(nodesModelSel,years,converter_techs,vintage)
3656              or converter_usedTech(nodesModelSel,years,converter_techs,vintage))
3657              and years.val < sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)),
3658          converter_unitsDecom(nodesModelSel,years,converter_techs,vintage))
3659      + sum(yearsToCalc$
3660            ((converter_decomTech(nodesModelSel,yearsToCalc,converter_techs,vintage)
3661              or converter_usedTech(nodesModelSel,yearsToCalc,converter_techs,vintage))
3662              and yearsToCalc.val >= sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
3663              and yearsToCalc.val <= yearsSel.val),
3664          converter_unitsDecom(nodesModelSel,yearsToCalc,converter_techs,vintage))
3665      =g=
3666      sum(years$
3667            (converter_availTech(nodesModelSel,years,converter_techs,vintage)
3668              and years.val < sum(yearsToCalc$(ord(yearsToCalc)=1), yearsToCalc.val) - converter_techParam(converter_techs,vintage,'lifeTime')),
3669          converter_unitsBuild(nodesModelSel,years,converter_techs,vintage))
3670      + sum(yearsToCalc$
3671            (converter_availTech(nodesModelSel,yearsToCalc,converter_techs,vintage)
3672              and yearsToCalc.val >= sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
3673              and yearsToCalc.val <= yearsSel.val - converter_techParam(converter_techs,vintage,'lifeTime')),
3674          converter_unitsBuild(nodesModelSel,yearsToCalc,converter_techs,vintage));
3675   
3676  * // ### Converter Units Upper Limit
3677  * // Upper bound for the total number of units.
3678  * // {Eq_converter_unitsUpperLimit}
3679  Eq_converter_unitsUpperLimit(nodesModelSel,yearsSel,converter_techs)
3680      $(converter_capacityParam(nodesModelSel,yearsSel,converter_techs,'unitsUpperLimit') >= 0
3681          and converter_capacityParam(nodesModelSel,yearsSel,converter_techs,'unitsUpperLimit') < +inf
3682          and converter_capacityParam(nodesModelSel,yearsSel,converter_techs,'unitsUpperLimit')
3683              <> converter_capacityParam(nodesModelSel,yearsSel,converter_techs,'unitsLowerLimit'))
3684      ..
3685      sum(vintage$converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage),
3686          converter_unitsTotal(nodesModelSel,yearsSel,converter_techs,vintage))
3687      =l=
3688      converter_capacityParam(nodesModelSel,yearsSel,converter_techs,"unitsUpperLimit");
3689   
3690  * // ### Converter Units Lower Limit
3691  * // Lower bound for the total number of units.
3692  * // {Eq_converter_unitsLowerLimit}
3693  Eq_converter_unitsLowerLimit(nodesModelSel,yearsSel,converter_techs)
3694      $(converter_capacityParam(nodesModelSel,yearsSel,converter_techs,'unitsLowerLimit') > 0
3695          and converter_capacityParam(nodesModelSel,yearsSel,converter_techs,'unitsLowerLimit')
3696              <> converter_capacityParam(nodesModelSel,yearsSel,converter_techs,'unitsUpperLimit'))
3697      ..
3698      sum(vintage$converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage),
3699          converter_unitsTotal(nodesModelSel,yearsSel,converter_techs,vintage))
3700      =g=
3701      converter_capacityParam(nodesModelSel,yearsSel,converter_techs,"unitsLowerLimit");
3702   
3703  Eq_converter_unitsFixedLimit(nodesModelSel,yearsSel,converter_techs)
3704      $(converter_capacityParam(nodesModelSel,yearsSel,converter_techs,'unitsLowerLimit')
3705          = converter_capacityParam(nodesModelSel,yearsSel,converter_techs,'unitsUpperLimit'))
3706      ..
3707      sum(vintage$converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage),
3708          converter_unitsTotal(nodesModelSel,yearsSel,converter_techs,vintage))
3709      =e=
3710      converter_capacityParam(nodesModelSel,yearsSel,converter_techs,"unitsUpperLimit");
3711   
3712  * // ### Converter Units Total MIP
3713  * // Fixes the total number of units to the corresponding integer variable.
3714  * // {Eq_converter_unitsTotalMIP}
3715  Eq_converter_unitsTotalMIP(nodesModelSel,yearsSel,converter_techs,vintage)
3716      $( converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
3717          and converter_techParam(converter_techs,vintage,"mipUnits") = 1 )
3718      ..
3719      converter_unitsTotal(nodesModelSel,yearsSel,converter_techs,vintage)
3720      =e=
3721      converter_unitsTotal_MIP(nodesModelSel,yearsSel,converter_techs,vintage);
3722   
3723  * // ### Converter Units Online MIP
3724  * // Fixes the number of online units to the corresponding integer variable.
3725  * // {Eq_converter_unitsOnlineMIP}
3726  Eq_converter_unitsOnlineMIP(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
3727      $( converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
3728          and converter_techParam(converter_techs,vintage,"mipDispatch") = 1 )
3729      ..
3730      converter_unitsOnline(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
3731      =e=
3732      converter_unitsOnline_MIP(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage);
3733   
3734  * // ### Converter Activity Lower Limit
3735  * // Lower limit on the activity.
3736  * // {Eq_converter_activityLowerLimit}
3737  Eq_converter_activityLowerLimit(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
3738      $(converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
3739          and converter_activityProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,"lower") > 0
3740          and converter_activityProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,"lower")
3741               <> converter_activityProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,"upper")
3742          and not converter_hasMinLoad(converter_techs, vintage))
3743      ..
3744      sum(activity$converter_usedAct(converter_techs,vintage,activity),
3745          converter_activity(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity)
3746      )
3747      =g=
3748      converter_activityProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,"lower")
3750      * converter_unitsOnline(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage);
3752   
3753  * // ### Converter Activity Upper Limit
3754  * // Upper limit on the activity.
3755  * // {Eq_converter_activityUpperLimit}
3756  Eq_converter_activityUpperLimit(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
3757      $(converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
3758          and converter_activityProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,"upper") >= 0
3759          and converter_activityProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,"upper")
3760               <> converter_activityProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,"lower"))
3761      ..
3762      sum(activity$converter_usedAct(converter_techs,vintage,activity),
3763          converter_activity(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity)
3764      )
3765      =l=
3766      converter_activityProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,"upper")
3768      * converter_unitsOnline(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage);
3770   
3771  Eq_converter_activityFixedLimit(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
3772      $(converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
3773          and converter_activityProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,"lower")
3774               = converter_activityProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,"upper"))
3775      ..
3776      sum(activity$converter_usedAct(converter_techs,vintage,activity),
3777          converter_activity(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity)
3778      )
3779      =e=
3780      converter_activityProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,"upper")
3782      * converter_unitsOnline(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage);
3784   
3785  * // ### Converter Positive Ramping
3786  * // Positive ramping of unit activity.
3787  * // {Eq_converter_rampPos}
3788  Eq_converter_rampPos(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,converter_techs,vintage)
3789    $( converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
3790        and converter_useRampPos(nodesModelSel,yearsSel,converter_techs,vintage))
3791      ..
3792      converter_rampPos(timeModelToCalc,nodesModelSel,yearsSel,converter_techs,vintage)
3793      =g=
3794      sum(activity$converter_usedAct(converter_techs,vintage,activity),
3795              converter_activity(timeModelToCalc,nodesModelSel,yearsSel,converter_techs,vintage,activity)
3796              - converter_activity(timeModelToCalc--1,nodesModelSel,yearsSel,converter_techs,vintage,activity));
3797   
3798  * // ### Converter Negative Ramping
3799  * // Negative ramping of unit activity.
3800  * // {Eq_converter_rampNeg}
3801  Eq_converter_rampNeg(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,converter_techs,vintage)
3802    $( converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
3803        and converter_useRampNeg(nodesModelSel,yearsSel,converter_techs,vintage))
3804      ..
3805      converter_rampNeg(timeModelToCalc,nodesModelSel,yearsSel,converter_techs,vintage)
3806      =g=
3807      - sum(activity$converter_usedAct(converter_techs,vintage,activity),
3808              converter_activity(timeModelToCalc,nodesModelSel,yearsSel,converter_techs,vintage,activity)
3809              - converter_activity(timeModelToCalc--1,nodesModelSel,yearsSel,converter_techs,vintage,activity));
3810   
3811  * // ### Converter Ramping Limit
3812  * // Restrict ramping up of unit activity.
3813  * // {Eq_converter_rampLimit}
3814  Eq_converter_rampLimit(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,converter_techs,vintage)
3815    $( converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
3816          and converter_techParam(converter_techs,vintage,"activityRampLimit") > 0)
3817      ..
3818      sum(activity$converter_usedAct(converter_techs,vintage,activity),
3819              converter_activity(timeModelToCalc,nodesModelSel,yearsSel,converter_techs,vintage,activity)
3820              - converter_activity(timeModelToCalc--1,nodesModelSel,yearsSel,converter_techs,vintage,activity))
3821    =l=
3822    converter_techParam(converter_techs,vintage,"activityRampLimit")
3824      * converter_unitsOnline(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage);
3826   
3827   
3829   
3830  * // ### Converter MIP Units Online
3831  * // Restrict ramping up of unit activity.
3832  * // {Eq_converter_unitsOnline}
3833  Eq_converter_unitsOnline(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
3834      $( converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
3835          and converter_techParam(converter_techs,vintage,"mipDispatch") = 0 )
3836    ..
3837    converter_unitsOnline(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
3838    =e=
3839    converter_unitsTotal(nodesModelSel,yearsSel,converter_techs,vintage)
3840      ;
3841   
3842  * // ### Converter MIP Units Shutting Down
3843  * // Allow shutting down units.
3844  * // {Eq_converter_unitsOnlineUC}
3845  Eq_converter_unitsOnlineUC(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
3846      $( converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
3847          and converter_techParam(converter_techs,vintage,"mipDispatch") = 1 )
3848    ..
3849    converter_unitsOnline(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
3850    =l=
3851    converter_unitsTotal(nodesModelSel,yearsSel,converter_techs,vintage)
3852      ;
3854   
3855  * // ### Converter Activity Startups
3856  * // Variable counting the number of unit startups.
3857  * // {Eq_converter_activityStartups}
3858  Eq_converter_activityStartups(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,converter_techs,vintage)
3859    $( converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
3860          and converter_techParam(converter_techs,vintage,"mipDispatch") = 1 )
3861      ..
3862      converter_unitStartups(timeModelToCalc,nodesModelSel,yearsSel,converter_techs,vintage)
3863      =g=
3864          converter_unitsOnline(timeModelToCalc,nodesModelSel,yearsSel,converter_techs,vintage)
3865      - converter_unitsOnline(timeModelToCalc--1,nodesModelSel,yearsSel,converter_techs,vintage);
3866   
3867  * // ### Converter Activity Shutdowns
3868  * // Variable tracking the number of unit shutdowns.
3869  * // {Eq_converter_activityShutdowns}
3870  Eq_converter_activityShutdowns(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,converter_techs,vintage)
3871    $( converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
3872          and converter_techParam(converter_techs,vintage,"mipDispatch") = 1
3873          and converter_techParam(converter_techs,vintage,"minDowntime") > 0)
3874      ..
3875      converter_unitShutdowns(timeModelToCalc,nodesModelSel,yearsSel,converter_techs,vintage)
3876      =g=
3877          converter_unitsOnline(timeModelToCalc--1,nodesModelSel,yearsSel,converter_techs,vintage)
3878      - converter_unitsOnline(timeModelToCalc,nodesModelSel,yearsSel,converter_techs,vintage);
3879   
3880  * // ### Converter Activity Startup Limit
3881  * // Limit the number of startup cycles a unit can perform.
3882  * // {Eq_converter_limitStartups}
3883  Eq_converter_limitStartups(nodesModelSel,yearsSel,converter_techs,vintage)
3884    $( converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
3885          and converter_techParam(converter_techs,vintage,"mipDispatch") = 1
3886      and converter_techParam(converter_techs,vintage,"startupLimit") > 0)
3887      ..
3888      sum(timeModelToCalc, converter_unitStartups(timeModelToCalc,nodesModelSel,yearsSel,converter_techs,vintage))
3889    =l=
3890    converter_techParam(converter_techs,vintage,"startupLimit")
3891    * converter_unitsTotal(nodesModelSel,yearsSel,converter_techs,vintage);
3892   
3893  alias(timeModelToCalc,ttc);
3894   
3895  * // ### Converter Units Minimum Uptime
3896  * // Require recently started units to remain online for their respective minimum uptime.
3897  * // {Eq_converter_minUptime}
3898  Eq_converter_minUptime(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,converter_techs,vintage)
3899    $( converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
3900          and converter_techParam(converter_techs,vintage,"mipDispatch") = 1
3901      and converter_techParam(converter_techs,vintage,"minUptime") > 0)
3902      ..
3903      sum(ttc$[uptimeSearchRange(ttc) and ord(ttc)<=converter_techParam(converter_techs,vintage,"minUptime")],
3904          converter_unitStartups(ttc+[ord(timeModelToCalc)-converter_techParam(converter_techs,vintage,"minUptime")],
3905              nodesModelSel,yearsSel,converter_techs,vintage))
3906          =l=
3907          converter_unitsOnline(timeModelToCalc,nodesModelSel,yearsSel,converter_techs,vintage);
3908   
3909  * // ### Converter Units Minimum Downtime
3910  * // Require recently shut down units to remain offline for their respective minimum downtime.
3911  * // {Eq_converter_minDowntime}
3912  Eq_converter_minDowntime(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,converter_techs,vintage)
3913    $( converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
3914          and converter_techParam(converter_techs,vintage,"mipDispatch") = 1
3915      and converter_techParam(converter_techs,vintage,"minDowntime") > 0)
3916      ..
3917      sum(ttc$[downtimeSearchRange(ttc) and ord(ttc)<=converter_techParam(converter_techs,vintage,"minDowntime")],
3918          converter_unitShutdowns(ttc+[ord(timeModelToCalc)-converter_techParam(converter_techs,vintage,"minDowntime")],
3919              nodesModelSel,yearsSel,converter_techs,vintage))
3920          =l=
3921          converter_unitsTotal(nodesModelSel,yearsSel,converter_techs,vintage)
3922      - converter_unitsOnline(timeModelToCalc,nodesModelSel,yearsSel,converter_techs,vintage);
3923   
3924  * This equation is meant to cause the units to activate particular mode counters to gain access to the corresponding activities.
3925  * Activities are allowed to be used on units with stricter activity requirements but not the other way around.
3926  alias(activity, act);
3927   
3928  * // ### Converter MIP Units Activity Upper Limit Minimum Required Load
3929  * // Limit activity coefficients of activities with a given load requirement or stricter to the number of units in such modes.
3930  * // {Eq_converter_activityUpperLimitDetailedPartLoadMinReq}
3931  Eq_converter_activityUpperLimitDetailedPartLoadMinReq(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity)
3932    $( converter_usedTechAct(nodesModelSel,yearsSel,converter_techs,vintage,activity)
3933          and converter_hasMinLoad(converter_techs, vintage)
3934          and converter_techParam(converter_techs,vintage,"mipDetailedPartialLoad"))
3935      ..
3936      sum(act$(converter_activityRequirements(converter_techs,vintage,act,"minLoad")
3937                  >= converter_activityRequirements(converter_techs,vintage,activity,"minLoad")
3938               and converter_usedAct(converter_techs,vintage,act)),
3939      converter_activity(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,act))
3940    =l=
3941    converter_activityProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,"upper")
3942      * sum(act$(converter_activityRequirements(converter_techs,vintage,act,"minLoad")
3943                  >= converter_activityRequirements(converter_techs,vintage,activity,"minLoad")
3944                 and converter_usedAct(converter_techs,vintage,act)),
3945      converter_unitsUsingActivity_MIP(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,act));
3946   
3947  * // ### Converter MIP Units Activity Upper Limit Maximum Required Load
3948  * // Limit activity coefficients of activities with a given load requirement or stricter to the number of units in such modes.
3949  * // {Eq_converter_activityUpperLimitDetailedPartLoadMaxReq}
3950  Eq_converter_activityUpperLimitDetailedPartLoadMaxReq(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity)
3951    $( converter_usedTechAct(nodesModelSel,yearsSel,converter_techs,vintage,activity)
3952          and converter_hasMaxLoad(converter_techs,vintage)
3953          and converter_techParam(converter_techs,vintage,"mipDetailedPartialLoad"))
3954      ..
3955      sum(act$(converter_activityRequirements(converter_techs,vintage,act,"maxLoad")
3956                  <= converter_activityRequirements(converter_techs,vintage,activity,"maxLoad")
3957               and converter_usedAct(converter_techs,vintage,act)),
3958      converter_activity(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,act))
3959    =l=
3960      sum(act$(converter_activityRequirements(converter_techs,vintage,act,"maxLoad")
3961                  <= converter_activityRequirements(converter_techs,vintage,activity,"maxLoad")
3962               and converter_usedAct(converter_techs,vintage,act)),
3963      min(converter_activityRequirements(converter_techs,vintage,act,"maxLoad"),
3964            converter_activityProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,"upper"))
3965            * converter_unitsUsingActivity_MIP(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,act));
3966   
3967  * This equation is meant to enforce the lower limit requirements of activities in use.
3968  * Loads produced by activities with less strict requirements can contribute to the minimum load requirement of strict activities but not the other way around,
3969  * because these activities can only run on units in the respectively strict activation state.
3970   
3971  * // ### Converter MIP Units Activity Lower Limit Minimum Required Load
3972  * // Enforce sufficient activity coefficients of activities to justify all active modes.
3973  * // {Eq_converter_activityLowerLimitDetailedPartLoadMinReq}
3974  Eq_converter_activityLowerLimitDetailedPartLoadMinReq(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity)
3975    $( converter_usedTechAct(nodesModelSel,yearsSel,converter_techs,vintage,activity)
3976          and converter_hasMinLoad(converter_techs, vintage)
3977          and converter_techParam(converter_techs,vintage,"mipDetailedPartialLoad"))
3978      ..
3979      sum(act$(converter_activityRequirements(converter_techs,vintage,act,"minLoad")
3980                  <= converter_activityRequirements(converter_techs,vintage,activity,"minLoad")
3981               and converter_usedAct(converter_techs,vintage,act)),
3982      converter_activity(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,act))
3983    =g=
3984      sum(act$(converter_activityRequirements(converter_techs,vintage,act,"minLoad")
3985                  <= converter_activityRequirements(converter_techs,vintage,activity,"minLoad")
3986               and converter_usedAct(converter_techs,vintage,act)),
3987      max(converter_activityRequirements(converter_techs,vintage,act,"minLoad"),
3988            converter_activityProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,"lower"))
3989            * converter_unitsUsingActivity_MIP(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,act));
3990   
3991   
3992  * Simple one-activity-per-unit partial load equations
3993  * // ### Converter MIP Units Activity Upper Limit Partial Load Balance
3994  * // Enforce MIP units partial load upper limit.
3995  * // {Eq_converter_activityUpperLimitPartLoad}
3996  Eq_converter_activityUpperLimitPartLoad(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity)
3997    $( converter_usedTechAct(nodesModelSel,yearsSel,converter_techs,vintage,activity)
3998          and (converter_hasMinLoad(converter_techs, vintage)
3999                or converter_hasMaxLoad(converter_techs, vintage)
4000                or converter_hasConstantFluxInActivity(converter_techs, vintage))
4001          and not converter_techParam(converter_techs,vintage,"mipDetailedPartialLoad"))
4002      ..
4003      converter_activity(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity)
4004    =l=
4005    min(converter_activityRequirements(converter_techs,vintage,activity,"maxLoad"),
4006          converter_activityProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,"upper"))
4007          * converter_unitsUsingActivity_MIP(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity);
4008   
4009  * // ### Converter MIP Units Activity Lower Limit Partial Load Balance
4010  * // Enforce MIP units partial load lower limit.
4011  * // {Eq_converter_activityLowerLimitPartLoad}
4012  Eq_converter_activityLowerLimitPartLoad(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity)
4013    $( converter_usedTechAct(nodesModelSel,yearsSel,converter_techs,vintage,activity)
4014          and (converter_hasMinLoad(converter_techs, vintage)
4015                or converter_hasMaxLoad(converter_techs, vintage))
4016          and not converter_techParam(converter_techs,vintage,"mipDetailedPartialLoad"))
4017      ..
4018      converter_activity(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity)
4019    =g=
4020    max(converter_activityRequirements(converter_techs,vintage,activity,"minLoad"),
4021          converter_activityProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,"lower"))
4022          * converter_unitsUsingActivity_MIP(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity);
4023   
4024  * // ### Converter MIP Units Idle Online Units
4025  * // Counts idle online units at every time step
4026  * // {Eq_converter_noOnlineIdle}
4027  Eq_converter_noOnlineIdle(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
4028    $( converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
4029          and (converter_hasMinLoad(converter_techs, vintage)
4030              or converter_hasMaxLoad(converter_techs, vintage)
4031              or converter_hasConstantFluxInActivity(converter_techs,vintage))
4032          and not converter_techParam(converter_techs,vintage,"mipDetailedPartialLoad"))
4033      ..
4034      converter_unitsOnline(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
4035      =e=
4036      sum(activity$converter_usedAct(converter_techs,vintage,activity),
4037            converter_unitsUsingActivity_MIP(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity));
4038   
4039  * // ### Converter MIP Units Idle Online Units Partial load
4040  * // Counts idle online units at every time step
4041  * // {Eq_converter_noOnlineIdleDetailedPartLoad}
4042  Eq_converter_noOnlineIdleDetailedPartLoad(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
4043    $( converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
4044          and (converter_hasMinLoad(converter_techs, vintage)
4045                  or converter_hasMaxLoad(converter_techs, vintage))
4046          and converter_techParam(converter_techs,vintage,"mipDetailedPartialLoad"))
4047      ..
4048      converter_unitsOnline(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
4049      =l=
4050      sum(activity$converter_usedAct(converter_techs,vintage,activity),
4051            converter_unitsUsingActivity_MIP(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity));
4052   
4053  * // ### Converter MIP activity model limit
4054  * // Converter activity model limit
4055  * // {Eq_converter_activityModeLimit}
4056  Eq_converter_activityModeLimit(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity)
4057    $( converter_usedTechAct(nodesModelSel,yearsSel,converter_techs,vintage,activity)
4058          and (converter_hasMinLoad(converter_techs, vintage)
4059                or converter_hasMaxLoad(converter_techs, vintage))
4060          and converter_techParam(converter_techs,vintage,"mipDetailedPartialLoad"))
4061      ..
4062      converter_unitsOnline(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
4063      =g=
4064      converter_unitsUsingActivity_MIP(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity);
4065   
4066  * ==== model definition ====
4067   
4068  Model M_converter
4069  /
4070    Eq_converter_unitsBalance
4071    Eq_converter_unitsFixedDecom
4072    Eq_converter_unitsFreeDecom
4073    Eq_converter_unitsUpperLimit
4074    Eq_converter_unitsLowerLimit
4075    Eq_converter_unitsFixedLimit
4076    Eq_converter_unitsTotalMIP
4077    Eq_converter_unitsOnlineMIP
4078    Eq_converter_activityUpperLimit
4079    Eq_converter_activityLowerLimit
4080    Eq_converter_activityFixedLimit
4081    Eq_converter_rampPos
4082    Eq_converter_rampNeg
4083    Eq_converter_rampLimit
4085    Eq_converter_unitsOnline
4086    Eq_converter_unitsOnlineUC
4088    Eq_converter_activityStartups
4089    Eq_converter_activityShutdowns
4090    Eq_converter_limitStartups
4091    Eq_converter_minUptime
4092    Eq_converter_minDowntime
4093    Eq_converter_activityUpperLimitDetailedPartLoadMinReq
4094    Eq_converter_activityUpperLimitDetailedPartLoadMaxReq
4095    Eq_converter_activityLowerLimitDetailedPartLoadMinReq
4096    Eq_converter_activityUpperLimitPartLoad
4097    Eq_converter_activityLowerLimitPartLoad
4098    Eq_converter_noOnlineIdle
4099    Eq_converter_noOnlineIdleDetailedPartLoad
4100    Eq_converter_activityModeLimit
4101  /;
INCLUDE    C:\Local\REMix\framework\remix\framework\model\source\core\storage.gms
4103  * SPDX-FileCopyrightText: Copyright (c) 2023 German Aerospace Center (DLR)
4104  * SPDX-License-Identifier: BSD-3-Clause
4105   
4106  * // # core_storage
4107  * // The equations in this file describe the storages in the model.
4108   
4109  * // ## Variables
4110  * // {special_table_storage_variables}
4439   
4440   
4441  * === SoC mappings ===
4442  set storage_usedTechSoCState(storage_techs,vintage,soc_statesIn);
4443  storage_usedTechSoCState(storage_techs,vintage,soc_states(soc_statesIn))
4444      $(storage_SoCParam(storage_techs,vintage,soc_states,"eRate") > 0
4445        and storage_SoCParam(storage_techs,vintage,soc_states,"cRate") > 0)
4446      = yes;
4447   
4448  set storage_validSoCRange(storage_techs,vintage);
4449  storage_validSoCRange(storage_techs,vintage)
4450      = smax(soc_states$storage_usedTechSoCState(storage_techs,vintage,soc_states), storage_SoCParam(storage_techs,vintage,soc_states,"SoC")) = 1
4451        and smin(soc_states$storage_usedTechSoCState(storage_techs,vintage,soc_states), storage_SoCParam(storage_techs,vintage,soc_states,"SoC")) = 0;
4452   
4453  * === Translate SoC parameters to ordered SoC-set ===
4454  * set ordered_socs / soc1*soc20 /;
4455  * alias(soc_states, soc_states_c);
4456  * parameter storage_SoCParam_ordered(storage_techs,vintage,ordered_socs,pc_storage_SoCParam);
4457  * storage_SoCParam_ordered(storage_techs,vintage,ordered_socs,pc_storage_SoCParam)
4458  *     $storage_validSoCRange(storage_techs,vintage)
4459  *     = sum(soc_states$(ord(ordered_socs) = sum(soc_states_c$(storage_SoCParam(storage_techs,vintage,soc_states_c,"SoC") <= storage_SoCParam(storage_techs,vintage,soc_states,"SoC")
4460  *                                                            and storage_usedTechSoCState(storage_techs,vintage,soc_states_c)), 1)
4461  *                       and storage_usedTechSoCState(storage_techs,vintage,soc_states)),
4462  *           storage_SoCParam(storage_techs,vintage,soc_states,pc_storage_SoCParam));
4463  *
4464  * set storage_usedTechSoCStateOrdered(storage_techs,vintage,ordered_socs);
4465  * storage_usedTechSoCStateOrdered(storage_techs,vintage,ordered_socs)
4466  *     $(storage_SoCParam_ordered(storage_techs,vintage,ordered_socs,"eRate") > 0
4467  *       and storage_SoCParam_ordered(storage_techs,vintage,ordered_socs,"cRate") > 0)
4468  *     = yes;
4469   
4470  parameter storage_bigM(storage_techs,vintage);
4471  storage_bigM(storage_techs,vintage) = smax((nodesModel,years), storage_reservoirParam(nodesModel,years,storage_techs,"unitsUpperLimit"));
4472  storage_bigM(storage_techs,vintage)$(storage_bigM(storage_techs,vintage) = INF) = 10000;
4473  storage_bigM(storage_techs,vintage)$(storage_bigM(storage_techs,vintage) = 0) = 10000;
4474   
4475  * === calculate the number of years represented by single year to calc ===
4476  alias(yearsToCalc, yearsToCalc_a)
4477  parameter representedYears(years);
4478  representedYears(years) = 0.5 *(smin(yearsToCalc$(yearsToCalc.val > years.val or yearsToCalc.val = smax(yearsToCalc_a, yearsToCalc_a.val)), yearsToCalc.val)
4479                                  - smax(yearsToCalc$(yearsToCalc.val < years.val or yearsToCalc.val = smin(yearsToCalc_a, yearsToCalc_a.val)), yearsToCalc.val));
4480   
4481  * ==== calculation of mappings ====
4482   
4483  * Technologies with a lifeTime > 0 are available
4484  set storage_availTech(nodesModel,years,storage_techs,vintage);
4485  storage_availTech(nodesModel,years,storage_techs,vintage)
4486      $(vintage.val = smax(vintage_a$(vintage_a.val <= years.val
4487          and storage_techParam(storage_techs,vintage_a,"lifeTime") > 0), vintage_a.val)) = yes;
4488   
4489  * Technologies to optimize become unavailable if they have an unitsUpperLimit of 0
4490  storage_availTech(nodesModel,years,storage_techs,vintage)
4491      $(yearsToCalc(years) and storage_reservoirParam(nodesModel,years,storage_techs,"unitsUpperLimit") = 0 ) = no;
4492   
4493  * Technologies already built become unavailable if they have an unitsBuild of 0
4494  storage_availTech(nodesModel,years,storage_techs,vintage)
4495      $( ( not yearsToCalc(years)) and storage_reservoirParam(nodesModel,years,storage_techs,"unitsBuild") = 0 ) = no;
4496   
4497  * Used technologies are available technologies over their technical lifeTime
4498  set storage_usedTech(nodesModel,years,storage_techs,vintage);
4499  storage_usedTech(nodesModel,years,storage_techs,vintage)
4500      $(vintage.val <= years.val
4501          and years.val < smax(years_a$storage_availTech(nodesModel,years_a,storage_techs,vintage),
4502                                              years_a.val + storage_techParam(storage_techs,vintage,"lifeTime"))
4503          ) = yes;
4504   
4505  * Technologies have to be decomissioned in the interval of first avail + lifetime to last avail + lifetime
4506  set storage_decomTech(nodesModel,years,storage_techs,vintage);
4507  storage_decomTech(nodesModel,years,storage_techs,vintage)
4508    $(sum(years_a$storage_usedTech(nodesModel,years_a,storage_techs,vintage), 1)
4509      and sum(yearsToCalc
4510        $(sameas(years, yearsToCalc)
4511          and yearsToCalc.val >= smin(years_a$storage_availTech(nodesModel,years_a,storage_techs,vintage), years_a.val) + storage_techParam(storage_techs,vintage,"lifeTime")
4512          and yearsToCalc.val <= smax(years_a$storage_availTech(nodesModel,years_a,storage_techs,vintage), years_a.val) + storage_techParam(storage_techs,vintage,"lifeTime")), 1))
4513    = yes;
4514   
4515  * Extend the decom frame to the year after the last year of usedTech
4516  storage_decomTech(nodesModel,yearsToCalc,storage_techs,vintage)
4517    $(storage_usedTech(nodesModel,yearsToCalc-1,storage_techs,vintage)
4518      and storage_decomTech(nodesModel,yearsToCalc-1,storage_techs,vintage))
4519    = yes;
4520   
4521  * Mapping for used commodities
4522  set storage_usedCom(storage_techs,vintage,commodity);
4523  option storage_usedCom < storage_sizeParam;
4524   
4525  set storage_usedTechCom(nodesModel,years,storage_techs,vintage,commodity);
4526  storage_usedTechCom(nodesModel,years,storage_techs,vintage,commodity)
4527      $(storage_usedTech(nodesModel,years,storage_techs,vintage)
4528          and storage_usedCom(storage_techs,vintage,commodity))
4529      = yes;
4530   
4531   
4532  * // ## Load units from gdx file
4534   
4535  * ==== aggregation of profiles ====
4536  * derive upper and lower profiles then aggregate
4537  set storage_level_hasProfileIn(nodesData,years,storage_techs,pc_storage_levelProfile);
4538  option storage_level_hasProfileIn < storage_levelProfileIn;
4539   
4540  set storage_level_hasProfile(nodesModel,years,storage_techs,pc_storage_levelProfile);
4541  storage_level_hasProfile(nodesModelToCalc,yearsToCalc,storage_techs,pc_storage_levelProfile)
4542      = sum(nodesData$aggregateNodesModel(nodesData,nodesModelToCalc),
4543              storage_level_hasProfileIn(nodesData,yearsToCalc,storage_techs,pc_storage_levelProfile));
4544   
4545  * weighted average for a real sum of units upper limits, plain average if one region has an upper limit of inf
4546  parameter storage_levelProfile(timeModel,nodesModel,years,storage_techs,vintage,pc_storage_levelProfile);
4547  storage_levelProfile(timeModelToCalc,storage_usedTech(nodesModelToCalc,yearsToCalc,storage_techs,vintage),"upper")
4548      = storage_techParam(storage_techs,vintage,"levelUpperLimit");
4549  storage_levelProfile(timeModelToCalc,storage_usedTech(nodesModelToCalc,yearsToCalc,storage_techs,vintage),"lower")
4550      = storage_techParam(storage_techs,vintage,"levelLowerLimit");
4551   
4552  set storage_finiteUnitLimit(nodesModelToCalc,yearsToCalc,storage_techs);
4553  storage_finiteUnitLimit(nodesModelToCalc,yearsToCalc,storage_techs) = sum(nodesData$aggregateNodesModel(nodesData,nodesModelToCalc), storage_reservoirParamIn(nodesData,yearsToCalc,storage_techs,"unitsUpperLimit")) > 0
4554                                                   and sum(nodesData$aggregateNodesModel(nodesData,nodesModelToCalc), storage_reservoirParamIn(nodesData,yearsToCalc,storage_techs,"unitsUpperLimit")) < inf;
4555   
4556  storage_levelProfile(timeModelToCalc,storage_usedTech(nodesModelToCalc,yearsToCalc,storage_techs,vintage),pc_storage_levelProfile)
4557      $( storage_level_hasProfile(nodesModelToCalc,yearsToCalc,storage_techs,pc_storage_levelProfile)
4558          and storage_finiteUnitLimit(nodesModelToCalc,yearsToCalc,storage_techs))
4559      = sum(nodesData$aggregateNodesModel(nodesData,nodesModelToCalc),
4560              sum(timeData$timeMapping(timeData,timeModelToCalc),
4561                    storage_levelProfileIn(timeData,nodesData,yearsToCalc,storage_techs,pc_storage_levelProfile))
4562                / timeLength(timeModelToCalc)
4563              * storage_reservoirParamIn(nodesData,yearsToCalc,storage_techs,"unitsUpperLimit"))
4564      / sum(nodesData$aggregateNodesModel(nodesData,nodesModelToCalc),
4565              storage_reservoirParamIn(nodesData,yearsToCalc,storage_techs,"unitsUpperLimit"));
4566   
4567  storage_levelProfile(timeModelToCalc,storage_usedTech(nodesModelToCalc,yearsToCalc,storage_techs,vintage),pc_storage_levelProfile)
4568      $( storage_level_hasProfile(nodesModelToCalc,yearsToCalc,storage_techs,pc_storage_levelProfile)
4569          and sum(nodesData$aggregateNodesModel(nodesData,nodesModelToCalc),
4570                      storage_reservoirParamIn(nodesData,yearsToCalc,storage_techs,"unitsUpperLimit")) = inf )
4571      = sum(nodesData$(aggregateNodesModel(nodesData,nodesModelToCalc)
4572                      and storage_reservoirParamIn(nodesData,yearsToCalc,storage_techs,"unitsUpperLimit") = inf ),
4573              sum(timeData$timeMapping(timeData,timeModelToCalc),
4574                    storage_levelProfileIn(timeData,nodesData,yearsToCalc,storage_techs,pc_storage_levelProfile))
4575                / timeLength(timeModelToCalc))
4576      / sum(nodesData$(aggregateNodesModel(nodesData,nodesModelToCalc)
4577                      and storage_reservoirParamIn(nodesData,yearsToCalc,storage_techs,"unitsUpperLimit") = inf ), 1);
4578   
4579  * for fixed profiles overwrite upper and lower profile
4580  storage_levelProfile(timeModelToCalc,nodesModelToCalc,yearsToCalc,storage_techs,vintage,"lower")
4581      $storage_level_hasProfile(nodesModelToCalc,yearsToCalc,storage_techs,"fixed")
4582      = storage_levelProfile(timeModelToCalc,nodesModelToCalc,yearsToCalc,storage_techs,vintage,"fixed");
4583   
4584  storage_levelProfile(timeModelToCalc,nodesModelToCalc,yearsToCalc,storage_techs,vintage,"upper")
4585      $storage_level_hasProfile(nodesModelToCalc,yearsToCalc,storage_techs,"fixed")
4586      = storage_levelProfile(timeModelToCalc,nodesModelToCalc,yearsToCalc,storage_techs,vintage,"fixed");
4587   
4588   
4589  * ==== parameter modifications ====
4590  storage_reservoirParam(nodesModel,years,storage_techs,"unitsLowerLimit")
4591          $sum(vintage, storage_techParam(storage_techs,vintage,"mipUnits"))
4592      = floor(storage_reservoirParam(nodesModel,years,storage_techs,"unitsLowerLimit"));
4593  storage_reservoirParam(nodesModel,years,storage_techs,"unitsUpperLimit")
4594          $sum(vintage, storage_techParam(storage_techs,vintage,"mipUnits"))
4595      = ceil(storage_reservoirParam(nodesModel,years,storage_techs,"unitsUpperLimit"));
4596   
4597   
4598  * ==== definition of variables ====
4599   
4600  * Initialise variables for unitsBuild
4601  storage_unitsBuild.l(nodesModel,years,storage_techs,vintage)
4602      $storage_availTech(nodesModel,years,storage_techs,vintage)
4603      = storage_reservoirParam(nodesModel,years,storage_techs,"unitsBuild");
4604  storage_unitsBuild.lo(nodesModel,yearsToCalc,storage_techs,vintage)
4605      $storage_availTech(nodesModel,yearsToCalc,storage_techs,vintage)
4606      = storage_unitsBuild.l(nodesModel,yearsToCalc,storage_techs,vintage);
4607  storage_unitsBuild.fx(nodesModel,years,storage_techs,vintage)
4608      $storage_reservoirParam(nodesModel,years,storage_techs,"noExpansion")
4609      = storage_unitsBuild.l(nodesModel,years,storage_techs,vintage);
4610   
4611  * Initialise variables for unitsDecom
4612  storage_unitsDecom.l(nodesModel,years,storage_techs,vintage)
4613      $(storage_decomTech(nodesModel,years,storage_techs,vintage)
4614        and years.val < sum(yearsToCalc$(ord(yearsToCalc) = 1), yearsToCalc.val))
4615      = sum((years_a,years_aa)$(sameas(years-1, years_aa)
4616                        and years_a.val > years_aa.val - storage_techParam(storage_techs,vintage,'lifeTime')
4617                        and years_a.val <= years.val - storage_techParam(storage_techs,vintage,'lifeTime')
4618                        and storage_availTech(nodesModel,years_a,storage_techs,vintage)),
4619          storage_unitsBuild.l(nodesModel,years_a,storage_techs,vintage));
4620   
4621  storage_unitsDecom.l(nodesModel,yearsToCalc,storage_techs,vintage)
4622    $storage_decomTech(nodesModel,yearsToCalc,storage_techs,vintage)
4623    = sum(years$
4624          (years.val < sum(yearsToCalc_a$(ord(yearsToCalc_a) = 1), yearsToCalc_a.val)
4625            and storage_availTech(nodesModel,years,storage_techs,vintage)
4626            and years.val > sum(years_a$sameas(years_a, yearsToCalc-1), years_a.val) - storage_techParam(storage_techs,vintage,'lifeTime')
4627            and years.val <= yearsToCalc.val - storage_techParam(storage_techs,vintage,'lifeTime')),
4628        storage_unitsBuild.l(nodesModel,years,storage_techs,vintage))
4629      + sum(yearsToCalc_a$
4630          (yearsToCalc_a.val < sum(yearsToCalc_aa$(ord(yearsToCalc_aa) > 1), yearsToCalc_a.val)
4631            and storage_availTech(nodesModel,yearsToCalc_a,storage_techs,vintage)
4632            and yearsToCalc_a.val > sum(years_a$sameas(years_a, yearsToCalc-1), years_a.val) - storage_techParam(storage_techs,vintage,'lifeTime')
4633            and yearsToCalc_a.val <= yearsToCalc.val - storage_techParam(storage_techs,vintage,'lifeTime')),
4634        storage_unitsBuild.l(nodesModel,yearsToCalc_a,storage_techs,vintage));
4635        ;
4636   
4637  storage_unitsDecom.lo(nodesModel,yearsToCalc,storage_techs,vintage)
4638      $(storage_usedTech(nodesModel,yearsToCalc,storage_techs,vintage)
4639        and not storage_techParam(storage_techs,vintage,"freeDecom"))
4640      = storage_unitsDecom.l(nodesModel,yearsToCalc,storage_techs,vintage)
4641   
4642  * Calculate planned unit expansion
4643  parameter storage_unitsPlanned(nodesModel,years,storage_techs,vintage);
4644  storage_unitsPlanned(nodesModel,years,storage_techs,vintage) = 0;
4645  loop(years,
4646    storage_unitsPlanned(nodesModel,years,storage_techs,vintage)
4647      =
4648      storage_unitsPlanned(nodesModel,years-1,storage_techs,vintage)
4649          $storage_usedTech(nodesModel,years-1,storage_techs,vintage)
4650      + storage_unitsBuild.l(nodesModel,years,storage_techs,vintage)
4651          $storage_availTech(nodesModel,years,storage_techs,vintage)
4652      - storage_unitsDecom.l(nodesModel,years,storage_techs,vintage)
4653          $storage_usedTech(nodesModel,years,storage_techs,vintage);
4654  );
4655   
4656  * Set initial state for planned units
4657  storage_unitsTotal.l(nodesModel,years,storage_techs,vintage)
4658    = storage_unitsPlanned(nodesModel,years,storage_techs,vintage)
4659   
4660  * Calculate if planned unit expansion is bounded by upper and lower limits
4661  set storage_unitBoundsFixed(nodesModel,years,storage_techs);
4662  storage_unitBoundsFixed(nodesModel,years,storage_techs)
4663    $(sum(vintage$storage_usedTech(nodesModel,years,storage_techs,vintage),
4664          storage_unitsPlanned(nodesModel,years,storage_techs,vintage))
4665      = storage_reservoirParam(nodesModel,years,storage_techs,"unitsUpperLimit")
4666    and sum(vintage$storage_usedTech(nodesModel,years,storage_techs,vintage),
4667          storage_unitsPlanned(nodesModel,years,storage_techs,vintage))
4668      = storage_reservoirParam(nodesModel,years,storage_techs,"unitsLowerLimit"))
4669    = yes;
4670   
4671  * Fix unitsBuild, unitsDecom, unitsTotal if levels are predetermined by upper and lower limits
4672  storage_unitsBuild.fx(nodesModel,years,storage_techs,vintage)
4673    $(storage_availTech(nodesModel,years,storage_techs,vintage)
4674      and storage_unitBoundsFixed(nodesModel,years,storage_techs))
4675    = storage_unitsBuild.l(nodesModel,years,storage_techs,vintage);
4676  storage_unitsDecom.fx(nodesModel,years,storage_techs,vintage)
4677    $(storage_usedTech(nodesModel,years,storage_techs,vintage)
4678      and storage_unitBoundsFixed(nodesModel,years,storage_techs))
4679    = storage_unitsDecom.l(nodesModel,years,storage_techs,vintage);
4680  storage_unitsTotal.fx(nodesModel,years,storage_techs,vintage)
4681    $(storage_usedTech(nodesModel,years,storage_techs,vintage)
4682      and storage_unitBoundsFixed(nodesModel,years,storage_techs))
4683    = storage_unitsTotal.l(nodesModel,years,storage_techs,vintage);
4684   
4685  storage_unitsTotal_MIP.up(nodesModel,years,storage_techs,vintage)
4686      $(storage_usedTech(nodesModel,years,storage_techs,vintage)
4687        and storage_techParam(storage_techs,vintage,"mipUnits") = 1)
4688      = storage_reservoirParam(nodesModel,years,storage_techs,"unitsUpperLimit");
4689   
4690  * Add parameter for fixing capacities during myopic runs
4691  parameter storage_unitsDelta(nodesModel,years,storage_techs);
4692   
4693   
4694  * ==== declaration of equations ====
4695   
4696  equations
4697    Eq_storage_unitsBalance(nodesModel,years,storage_techs,vintage
4698      ) "Ensures the units balance over the planning period."
4699    Eq_storage_unitsFixedDecom(nodesModel,years,storage_techs,vintage
4700      ) "Restricts the fixed decommissioning of units over the planning period."
4701    Eq_storage_unitsFreeDecom(nodesModel,years,storage_techs,vintage
4702      ) "Restricts the free decommissioning of units over the planning period."
4703    Eq_storage_unitsUpperLimit(nodesModel,years,storage_techs
4704      ) "Upper bound for the total number of units."
4705    Eq_storage_unitsLowerLimit(nodesModel,years,storage_techs
4706      ) "Lower bound for the total number of units."
4707    Eq_storage_unitsTotalMIP(nodesModel,years,storage_techs,vintage
4708      ) "Fixes the total number of units to the corresponding integer variable."
4709   
4710    Eq_storage_levelUpperLimit(timeModel,nodesModel,years,storage_techs,vintage,commodity
4711      ) "Upper bound for the total number of units."
4712    Eq_storage_levelUpperLimit_degradation(timeModel,nodesModel,years,storage_techs,vintage,commodity
4713      ) "Upper bound for the total number of units if the storage technology accounts for degradation."
4714    Eq_storage_levelLowerLimit(timeModel,nodesModel,years,storage_techs,vintage,commodity
4715      ) "Lower bound for the total number of units."
4716    Eq_storage_losses(timeModel,nodesModel,years,storage_techs,vintage,commodity
4717      ) "Stored commodities lost due to self discharge."
4718    Eq_storage_unitsBalanceStates(nodesModel,years,storage_techs,vintage
4719      ) "Currently available units must have been built at some point in time and have some state of degradation."
4720    Eq_storage_unitsUpperLimitPerState(nodesModel,years,yearsCom,storage_techs,vintage
4721      ) "There cannot be more units from a certain year than the amount built in that year."
4722    Eq_storage_unitsStatesNoRecovery(nodesModel,years,yearsCom,storage_techs,vintage,degradation_states
4723      ) "There is no recovery."
4724    Eq_storage_cRateLimit(timeModel,nodesModel,years,storage_techs,vintage,commodity
4725      ) "Limit charging rate based on unit capacity."
4726    Eq_storage_eRateLimit(timeModel,nodesModel,years,storage_techs,vintage,commodity
4727      ) "Limit discharging rate based on unit capacity."
4728    Eq_storage_charge(timeModel,nodesModel,years,storage_techs,vintage,commodity
4729      ) "Positive change in state of charge is influx."
4730    Eq_storage_discharge(timeModel,nodesModel,years,storage_techs,vintage,commodity
4731      ) "Negative change in state of charge is outflux."
4732   
4733    Eq_storage_levelStateSum(timeModel,nodesModel,years,storage_techs,vintage,commodity
4734      ) "Sum of degradation class storage levels is the global level."
4735    Eq_storage_levelUpperLimitPerAge(timeModel,nodesModel,years,yearsCom,storage_techs,vintage,commodity
4736      ) "Upper bound for units of a certain state."
4737    Eq_storage_chargingPerAge(timeModel,nodesModel,years,yearsCom,storage_techs,vintage,commodity
4738      ) "Positive change in state of charge is influx for each degradation class."
4739    Eq_storage_chargeBasedDegradationDistribution(nodesModel,years,yearsCom,storage_techs,vintage,commodity
4740      ) "Determine degradation states of storage units."
4741    Eq_storage_unitsDecomStateSum(nodesModel,years,storage_techs,vintage
4742      ) "All decomminsioned units must have a degradation state."
4743    Eq_storage_unitsDegradation(nodesModel,years,yearsCom,storage_techs,vintage,degradation_states
4744      ) "Only allow one range of degradation states per year and age group."
4745    Eq_storage_unitsDegradation_onlyOneRange(nodesModel,years,yearsCom,storage_techs,vintage
4746      ) "Limit usable degradation states to one range, i.e., two neighboring states."
4747   
4748    Eq_storage_unitsSoC_sum(timeModel,nodesModel,years,storage_techs,vintage
4749      ) "Every unit has a state of charge."
4750    Eq_storage_levelSoC(timeModel,nodesModel,years,storage_techs,vintage,commodity
4751      ) "Every unit has a state of charge."
4752    Eq_storage_unitsSoC(timeModel,nodesModel,years,storage_techs,vintage,soc_statesIn
4753      ) "Number of units in particular SoC."
4754    Eq_storage_unitsSoC_onlyOneRange(timeModel,nodesModel,years,storage_techs,vintage
4755      ) "Limit usable SoC states to one range, i.e., two neighboring states."
4756   
4757    Eq_storage_cRateLimit_SoC(timeModel,nodesModel,years,storage_techs,vintage,commodity
4758      ) "Limit charging rate based on unit capacity."
4759    Eq_storage_eRateLimit_SoC(timeModel,nodesModel,years,storage_techs,vintage,commodity
4760      ) "Limit discharging rate based on unit capacity."
4761    ;
4762   
4763  * ==== equation definition ====
4764  * // ## Equations
4765  * // ### Storage Units Balance
4766  * // Ensures that the total units are consistent with the built and decommissioned units.
4767  * // {Eq_storage_unitsBalance}
4768  Eq_storage_unitsBalance(nodesModelSel,yearsSel,storage_techs,vintage)
4769      $((storage_usedTech(nodesModelSel,yearsSel,storage_techs,vintage)
4770            or sum(years$sameas(years,yearsSel), storage_usedTech(nodesModelSel,years-1,storage_techs,vintage)))
4771          and not storage_unitBoundsFixed(nodesModelSel,yearsSel,storage_techs))
4772      ..
4773      storage_unitsTotal(nodesModelSel,yearsSel,storage_techs,vintage)
4774      =e=
4775          sum(yearsToCalc$(ord(yearsToCalc) = 1 and sameas(yearsToCalc, yearsSel)),
4776        sum(years$sameas(years, yearsToCalc),
4777          storage_unitsTotal(nodesModelSel,years-1,storage_techs,vintage)
4778            $storage_usedTech(nodesModelSel,years-1,storage_techs,vintage)))
4779      + sum((yearsToCalc)$(ord(yearsToCalc) > 1 and sameas(yearsToCalc, yearsSel)),
4780        storage_unitsTotal(nodesModelSel,yearsToCalc-1,storage_techs,vintage)
4781          $storage_usedTech(nodesModelSel,yearsToCalc-1,storage_techs,vintage))
4782      + storage_unitsBuild(nodesModelSel,yearsSel,storage_techs,vintage)
4783          $storage_availTech(nodesModelSel,yearsSel,storage_techs,vintage)
4784      - storage_unitsDecom(nodesModelSel,yearsSel,storage_techs,vintage)
4785          $storage_usedTech(nodesModelSel,yearsSel,storage_techs,vintage);
4786   
4787  * // ### Storage Units Fixed Decommission
4788  * // Restricts the fixed decommissioning of storage units over the planning period.
4789  * // {Eq_storage_unitsFixedDecom}
4790  Eq_storage_unitsFixedDecom(nodesModelSel,yearsSel,storage_techs,vintage)
4791      $(storage_decomTech(nodesModelSel,yearsSel,storage_techs,vintage)
4792          and not storage_techParam(storage_techs,vintage,"freeDecom") = 1
4793          and not storage_unitBoundsFixed(nodesModelSel,yearsSel,storage_techs))
4794      ..
4795      storage_unitsDecom(nodesModelSel,yearsSel,storage_techs,vintage)
4796      =e=
4797      sum(years$
4798          (storage_availTech(nodesModelSel,years,storage_techs,vintage)
4799            and years.val > sum(yearsToCalc$sameas(yearsToCalc+1, yearsSel), yearsToCalc.val) - storage_techParam(storage_techs,vintage,'lifeTime')
4800            and years.val <= yearsSel.val - storage_techParam(storage_techs,vintage,'lifeTime')),
4801        storage_unitsBuild(nodesModelSel,years,storage_techs,vintage));
4802   
4803  * // ### Storage Units Free Decomission
4804  * // Restricts the free decommissioning of storage units over the planning period.
4805  * // {Eq_storage_unitsFreeDecom}
4806  Eq_storage_unitsFreeDecom(nodesModelSel,yearsSel,storage_techs,vintage)
4807      $((storage_decomTech(nodesModelSel,yearsSel,storage_techs,vintage)
4808          or storage_usedTech(nodesModelSel,yearsSel,storage_techs,vintage))
4809          and storage_techParam(storage_techs,vintage,"freeDecom") = 1)
4810      ..
4811      sum(years$
4812            ((storage_decomTech(nodesModelSel,years,storage_techs,vintage)
4813              or storage_usedTech(nodesModelSel,years,storage_techs,vintage))
4814              and years.val < sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)),
4815          storage_unitsDecom(nodesModelSel,years,storage_techs,vintage))
4816      + sum(yearsToCalc$
4817            ((storage_decomTech(nodesModelSel,yearsToCalc,storage_techs,vintage)
4818              or storage_usedTech(nodesModelSel,yearsToCalc,storage_techs,vintage))
4819              and yearsToCalc.val >= sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
4820              and yearsToCalc.val <= yearsSel.val),
4821          storage_unitsDecom(nodesModelSel,yearsToCalc,storage_techs,vintage))
4822      =g=
4823      sum(years$
4824            (storage_availTech(nodesModelSel,years,storage_techs,vintage)
4825              and years.val < sum(yearsToCalc$(ord(yearsToCalc)=1), yearsToCalc.val) - storage_techParam(storage_techs,vintage,'lifeTime')),
4826          storage_unitsBuild(nodesModelSel,years,storage_techs,vintage))
4827      + sum(yearsToCalc$
4828            (storage_availTech(nodesModelSel,yearsToCalc,storage_techs,vintage)
4829              and yearsToCalc.val >= sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
4830              and yearsToCalc.val <= yearsSel.val - storage_techParam(storage_techs,vintage,'lifeTime')),
4831          storage_unitsBuild(nodesModelSel,yearsToCalc,storage_techs,vintage));
4832   
4833  * // ### Storage Units Lower Limit
4834  * // Lower bound for the total number of storage units.
4835  * // {Eq_storage_unitsLowerLimit}
4836  Eq_storage_unitsLowerLimit(nodesModelSel,yearsSel,storage_techs)
4837      $(storage_reservoirParam(nodesModelSel,yearsSel,storage_techs,'unitsLowerLimit') > 0 )
4838      ..
4839      sum(vintage$storage_usedTech(nodesModelSel,yearsSel,storage_techs,vintage),
4840          storage_unitsTotal(nodesModelSel,yearsSel,storage_techs,vintage))
4841      =g=
4842      storage_reservoirParam(nodesModelSel,yearsSel,storage_techs,"unitsLowerLimit");
4843   
4844  * // ### Storage Units Upper Limit
4845  * // Upper bound for the total number of storage units.
4846  * // {Eq_storage_unitsUpperLimit}
4847  Eq_storage_unitsUpperLimit(nodesModelSel,yearsSel,storage_techs)
4848      $(storage_reservoirParam(nodesModelSel,yearsSel,storage_techs,'unitsUpperLimit') >= 0
4849          and storage_reservoirParam(nodesModelSel,yearsSel,storage_techs,'unitsUpperLimit') < +inf )
4850      ..
4851      sum(vintage$storage_usedTech(nodesModelSel,yearsSel,storage_techs,vintage),
4852          storage_unitsTotal(nodesModelSel,yearsSel,storage_techs,vintage))
4853      =l=
4854      storage_reservoirParam(nodesModelSel,yearsSel,storage_techs,"unitsUpperLimit");
4855   
4856  * // ### Storage Units Total MIP
4857  * // Fixes the total number of storage units to the corresponding integer variable.
4858  * // {Eq_storage_unitsTotalMIP}
4859  Eq_storage_unitsTotalMIP(nodesModelSel,yearsSel,storage_techs,vintage)
4860      $( storage_usedTech(nodesModelSel,yearsSel,storage_techs,vintage)
4861          and storage_techParam(storage_techs,vintage,"mipUnits") = 1 )
4862      ..
4863      storage_unitsTotal(nodesModelSel,yearsSel,storage_techs,vintage)
4864      =e=
4865      storage_unitsTotal_MIP(nodesModelSel,yearsSel,storage_techs,vintage);
4866   
4867  * // ### Storage Level Lower Limit
4868  * // Lower limit on the storage level.
4869  * // {Eq_storage_levelLowerLimit}
4870  Eq_storage_levelLowerLimit(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
4871      $(storage_usedTechCom(nodesModelSel,yearsSel,storage_techs,vintage,commodity)
4872          and storage_levelProfile(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,"lower") > 0)
4873      ..
4874      storage_level(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
4875      =g=
4876      storage_levelProfile(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,"lower")
4877      * storage_sizeParam(storage_techs,vintage,commodity,"size")
4878      * storage_unitsTotal(nodesModelSel,yearsSel,storage_techs,vintage);
4879   
4880  * // ### Storage Level Upper Limit
4881  * // Upper limit on the storage level.
4882  * // {Eq_storage_levelUpperLimit}
4883  Eq_storage_levelUpperLimit(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
4884      $(storage_usedTechCom(nodesModelSel,yearsSel,storage_techs,vintage,commodity)
4885          and not storage_hasDegradation(storage_techs,vintage)
4886          and storage_levelProfile(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,"upper") >= 0)
4887      ..
4888      storage_level(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
4889      =l=
4890      storage_levelProfile(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,"upper")
4891      * storage_sizeParam(storage_techs,vintage,commodity,"size")
4892      * storage_unitsTotal(nodesModelSel,yearsSel,storage_techs,vintage);
4893   
4894  * // ### Storage Level Upper Limit (degradation)
4895  * // Upper limit on the storage level if the storage technology accounts for degradation.
4896  * // {Eq_storage_levelUpperLimit_degradation}
4897  Eq_storage_levelUpperLimit_degradation(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
4898      $(storage_usedTechCom(nodesModelSel,yearsSel,storage_techs,vintage,commodity)
4899          and storage_hasDegradation(storage_techs,vintage)
4900          and storage_levelProfile(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,"upper") >= 0)
4901      ..
4902      storage_level(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
4903      =l=
4904      storage_levelProfile(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,"upper")
4905      * storage_sizeParam(storage_techs,vintage,commodity,"size")
4906      * sum((degradation_states,yearsCom)$storage_usedDegradation(storage_techs,vintage,degradation_states),
4907              (storage_degradationParam(storage_techs,vintage,degradation_states,"remainingCapacity")
4908                - (yearsSel.val - yearsCom.val) * storage_techParam(storage_techs,vintage,"annualDegradation"))
4909                * storage_unitsStateTracker(nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,degradation_states));
4910   
4911  * // ### Storage Unit States Sum (degradation)
4912  * // The number of units in all degradation state must match the total unit number.
4913  * // {Eq_storage_unitsBalanceStates}
4914  Eq_storage_unitsBalanceStates(nodesModelSel,yearsSel,storage_techs,vintage)
4915      $(storage_usedTech(nodesModelSel,yearsSel,storage_techs,vintage)
4916        and storage_hasDegradation(storage_techs,vintage))
4917      ..
4918      storage_unitsTotal(nodesModelSel,yearsSel,storage_techs,vintage)
4919      =e=
4920      sum((yearsCom,degradation_states)$storage_usedDegradation(storage_techs,vintage,degradation_states),
4921            storage_unitsStateTracker(nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,degradation_states));
4922   
4923  * // ### Storage Unit States Upper Limit(degradation)
4924  * // The states of all commissioned units in one year (unitsBuilt) must either still be tracked or have been decommissioned.
4925  * // {Eq_storage_unitsUpperLimitPerState}
4926  Eq_storage_unitsUpperLimitPerState(nodesModelSel,yearsSel,yearsCom,storage_techs,vintage)
4927      $(storage_usedTech(nodesModelSel,yearsSel,storage_techs,vintage)
4928          and storage_hasDegradation(storage_techs,vintage))
4929      ..
4930      sum(degradation_states$storage_usedDegradation(storage_techs,vintage,degradation_states),
4931            storage_unitsStateTracker(nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,degradation_states)
4932            + sum(years$(years.val <= yearsSel.val),
4933                  storage_unitsStateTrackerDecom(nodesModelSel,years,yearsCom,storage_techs,vintage,degradation_states)))
4934      =e=
4935      storage_unitsBuild(nodesModelSel,yearsCom,storage_techs,vintage)$(yearsCom.val <= yearsSel.val);
4936   
4937  * // ### Storage Unit States Progression (degradation)
4938  * // Unit recovery by reassigning the storage cycles to other units is disabled. Therefore, the number of units in a particular degradation state can only increase if the number in a less degraded state is decreased by at least the same amount.
4939  * // {Eq_storage_unitsStatesNoRecovery}
4940  alias(degradation_states, dc_states);
4941  Eq_storage_unitsStatesNoRecovery(nodesModelSel,yearsSel(yearsToCalc),yearsCom,storage_techs,vintage,degradation_states)
4942      $(storage_usedTech(nodesModelSel,yearsSel,storage_techs,vintage)
4943        and yearsToCalc.val > yearsCom.val
4944        and storage_usedDegradation(storage_techs,vintage,degradation_states))
4945      ..
4946      sum(dc_states$(storage_usedDegradation(storage_techs,vintage,dc_states)
4947                and storage_degradationParam(storage_techs,vintage,dc_states,"maxFullCycles") <= storage_degradationParam(storage_techs,vintage,degradation_states,"maxFullCycles")),
4948              storage_unitsStateTracker(nodesModelSel,yearsToCalc,yearsCom,storage_techs,vintage,dc_states)
4949              + sum(years$(years.val <= yearsToCalc.val), storage_unitsStateTrackerDecom(nodesModelSel,years,yearsCom,storage_techs,vintage,dc_states)))
4950      =l=
4951      sum(dc_states$(storage_usedDegradation(storage_techs,vintage,dc_states)
4952                      and storage_degradationParam(storage_techs,vintage,dc_states,"maxFullCycles") <= storage_degradationParam(storage_techs,vintage,degradation_states,"maxFullCycles")),
4953              storage_unitsStateTracker(nodesModelSel,yearsToCalc-1,yearsCom,storage_techs,vintage,dc_states)
4954              + sum(years$(years.val < yearsToCalc.val), storage_unitsStateTrackerDecom(nodesModelSel,years,yearsCom,storage_techs,vintage,dc_states)));
4955   
4956  * // ### Storage Losses
4957  * // Accumulation of storage losses.
4958  * // {Eq_storage_losses}
4959  Eq_storage_losses(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,storage_techs,vintage,commodity)
4960      $storage_usedTechCom(nodesModelSel,yearsSel,storage_techs,vintage,commodity)
4961      ..
4962      storage_losses(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
4963      =e=
4964      - storage_level(timeModelToCalc--1,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
4965        * storage_sizeParam(storage_techs,vintage,commodity,"selfdischarge")
4966      + storage_sizeParam(storage_techs,vintage,commodity,"selfdischargeAbs")
4967      + (storage_techParam(storage_techs,vintage,"chargingLoss")
4968          /(1 - storage_techParam(storage_techs,vintage,"chargingLoss")))
4969        * storage_charge(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
4970          $(storage_techParam(storage_techs,vintage,"chargingLoss") > 0)
4971      + storage_techParam(storage_techs,vintage,"dischargingLoss")
4972        * storage_discharge(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
4973          $(storage_techParam(storage_techs,vintage,"dischargingLoss") > 0)
4974      - storage_sizeParam(storage_techs,vintage,commodity,"size")
4975        * sum(soc_states$(storage_usedTechSoCState(storage_techs,vintage,soc_states)
4976                          and storage_validSoCRange(storage_techs,vintage)),
4977              storage_unitsSoC(timeModelToCalc--1,nodesModelSel,yearsSel,storage_techs,vintage,soc_states)
4978              * storage_SoCParam(storage_techs,vintage,soc_states,"SoC")
4979              * storage_SoCParam(storage_techs,vintage,soc_states,"selfdischarge"));
4980   
4981  * // ### C-Rate Limit
4982  * // The increase in storage level per time step, i.e., the charging rate, is limited relative to the storage capacity.
4983  * // {Eq_storage_cRateLimit}
4984  Eq_storage_cRateLimit(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,storage_techs,vintage,commodity)
4985      $(storage_usedTechCom(nodesModelSel,yearsSel,storage_techs,vintage,commodity)
4986        and storage_techParam(storage_techs,vintage,"maxCRate") > 0)
4987      ..
4988      storage_level(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
4989      - storage_level(timeModelToCalc--1,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
4990      =l=
4991      storage_techParam(storage_techs,vintage,"maxCRate")
4992      * storage_sizeParam(storage_techs,vintage,commodity,"size")
4993      * storage_unitsTotal(nodesModelSel,yearsSel,storage_techs,vintage);
4994   
4995  * // ### E-Rate Limit
4996  * // The decrease in storage level per time step, i.e., the discharging rate, is limited relative to the storage capacity.
4997  * // {Eq_storage_eRateLimit}
4998  Eq_storage_eRateLimit(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,storage_techs,vintage,commodity)
4999      $(storage_usedTechCom(nodesModelSel,yearsSel,storage_techs,vintage,commodity)
5000        and storage_techParam(storage_techs,vintage,"maxERate") > 0)
5001      ..
5002      storage_level(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
5003      - storage_level(timeModelToCalc--1,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
5004      =g=
5005      - storage_techParam(storage_techs,vintage,"maxERate")
5006      * storage_sizeParam(storage_techs,vintage,commodity,"size")
5007      * storage_unitsTotal(nodesModelSel,yearsSel,storage_techs,vintage);
5008   
5009  * // ### Storage Charging
5010  * // Increases in storage levels are accounted as charging amounts.
5011  * // {Eq_storage_charge}
5012  Eq_storage_charge(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,storage_techs,vintage,commodity)
5013      $(storage_usedTechCom(nodesModelSel,yearsSel,storage_techs,vintage,commodity)
5014        and storage_techParam(storage_techs,vintage,"chargingLoss") > 0)
5015      ..
5016      storage_charge(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
5017      =g=
5018      storage_level(timeModelToCalc,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
5019      - storage_level(timeModelToCalc--1,nodesModelSel,yearsSel,storage_techs,vintage,commodity);
5020   
5021  * // ### Storage Discharging
5022  * // Decreases in storage levels are accounted as discharging amounts.
5023  * // {Eq_storage_discharge}
5024  Eq_storage_discharge(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,storage_techs,vintage,commodity)
5025      $(storage_usedTechCom(nodesModelSel,yearsSel,storage_techs,vintage,commodity)
5026        and storage_techParam(storage_techs,vintage,"dischargingLoss") > 0)
5027      ..
5028      storage_discharge(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
5029      =g=
5030      storage_level(timeModelToCalc--1,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
5031      - storage_level(timeModelToCalc,nodesModelSel,yearsSel,storage_techs,vintage,commodity);
5032   
5033  * // ### Storage Level Sum (degradation)
5034  * // The storage level is accounted individually by commissioning year in the case of degradation in order to prohibit the model to assign pre-existing storage cycles to newly built storage reservoirs and thereby avoiding degradation. All those storage levels represent the total storage level.
5035  * // {Eq_storage_levelStateSum}
5036  Eq_storage_levelStateSum(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
5037      $(storage_usedTechCom(nodesModelSel,yearsSel,storage_techs,vintage,commodity)
5038        and storage_techParam(storage_techs,vintage,"usageDegradation"))
5039      ..
5040      storage_level(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
5041      =e=
5042      sum(yearsCom, storage_levelPerAge(timeModelSel,nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,commodity));
5043   
5044  * // ### Storage Level Upper Limit per Age Group (degradation)
5045  * // Upper limit on the storage level per commissioning year if the storage technology accounts for degradation.
5046  * // {Eq_storage_levelUpperLimitPerAge}
5047  Eq_storage_levelUpperLimitPerAge(timeModelSel,nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,commodity)
5048      $(storage_usedTechCom(nodesModelSel,yearsSel,storage_techs,vintage,commodity)
5049        and storage_techParam(storage_techs,vintage,"usageDegradation"))
5050      ..
5051      storage_levelPerAge(timeModelSel,nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,commodity)
5052      =l=
5053      storage_techParam(storage_techs,vintage,"levelUpperLimit")
5054      * storage_sizeParam(storage_techs,vintage,commodity,"size")
5055      * sum(degradation_states,
5056              (storage_degradationParam(storage_techs,vintage,degradation_states,"remainingCapacity")
5057                - (yearsSel.val - yearsCom.val) * storage_techParam(storage_techs,vintage,"annualDegradation"))
5058                * storage_unitsStateTracker(nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,degradation_states));
5059   
5060  * // ### Storage Cycle Distribution to Degradation States per Commissioning Year (degradation)
5061  * // The charging amounts are converted to equivalent full cycles which then must be represented by an adequate distribution of degradation states.
5062  * // {Eq_storage_chargeBasedDegradationDistribution}
5063  alias(years, prev_years);
5064  Eq_storage_chargeBasedDegradationDistribution(nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,commodity)
5065      $(storage_usedTechCom(nodesModelSel,yearsSel,storage_techs,vintage,commodity)
5066        and storage_techParam(storage_techs,vintage,"usageDegradation"))
5067      ..
5068      sum(prev_years$(prev_years.val <= yearsSel.val), representedYears(prev_years)
5069          * sum(timeModel, storage_chargePerAge(timeModel,nodesModelSel,prev_years,yearsCom,storage_techs,vintage,commodity)))
5070      =l=
5071      storage_sizeParam(storage_techs,vintage,commodity,"size")
5072      * sum(dc_states$storage_usedDegradation(storage_techs,vintage,dc_states),
5073          storage_degradationParam(storage_techs,vintage,dc_states,"maxFullCycles")
5074          * (storage_unitsStateTracker(nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,dc_states)
5075             + sum(prev_years$(prev_years.val <= yearsSel.val), storage_unitsStateTrackerDecom(nodesModelSel,prev_years,yearsCom,storage_techs,vintage,dc_states))));
5076   
5077  * // ### Storage Charging per Commissioning Year (degradation)
5078  * // Increases in storage levels are accounted as charging amounts.
5079  * // {Eq_storage_chargingPerAge}
5080  Eq_storage_chargingPerAge(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,commodity)
5081      $(storage_usedTechCom(nodesModelSel,yearsSel,storage_techs,vintage,commodity)
5082        and storage_techParam(storage_techs,vintage,"usageDegradation"))
5083      ..
5084      storage_chargePerAge(timeModelSel,nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,commodity)
5085      =g=
5086      storage_levelPerAge(timeModelToCalc,nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,commodity)
5087      - storage_levelPerAge(timeModelToCalc--1,nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,commodity);
5088   
5089  * // ### Storage Unit Decommissioning States Sum (degradation)
5090  * // The number of decommissioned units in all degradation state must match the total decommissioning unit number.
5091  * // {Eq_storage_unitsDecomStateSum}
5092  Eq_storage_unitsDecomStateSum(nodesModelSel,yearsSel,storage_techs,vintage)
5093      $(storage_techParam(storage_techs,vintage,"usageDegradation"))
5094      ..
5095      storage_unitsDecom(nodesModelSel,yearsSel,storage_techs,vintage)
5096      =e=
5097      sum((yearsCom,degradation_states)$storage_usedDegradation(storage_techs,vintage,degradation_states),
5098          storage_unitsStateTrackerDecom(nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,degradation_states));
5099   
5100  * // ### Storage Unit Sequential Degradation (degradation)
5101  * // Only active degradation ranges, i.e., two neighboring degradation states, can be used.
5102  * // {Eq_storage_unitsDegradation}
5103  alias(degradation_states, degradation_states_a, degradation_states_b);
5104  Eq_storage_unitsDegradation(nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,degradation_states)
5105      $(storage_techParam(storage_techs,vintage,"usageDegradation")
5106        and storage_techParam(storage_techs,vintage,"sequentialDegradationStates"))
5107      ..
5108      sum(degradation_states_a$((storage_degradationParam(storage_techs,vintage,degradation_states_a,"maxFullCycles") = storage_degradationParam(storage_techs,vintage,degradation_states,"maxFullCycles")
5109                        or storage_degradationParam(storage_techs,vintage,degradation_states_a,"maxFullCycles")
5110                                         = smax(degradation_states_b$(storage_degradationParam(storage_techs,vintage,degradation_states_b,"maxFullCycles") < storage_degradationParam(storage_techs,vintage,degradation_states,"maxFullCycles")
5111                                                              and storage_usedDegradation(storage_techs,vintage,degradation_states_b)),
5112                                                              storage_degradationParam(storage_techs,vintage,degradation_states_b,"maxFullCycles")))
5113                        and storage_usedDegradation(storage_techs,vintage,degradation_states_a)),
5114          storage_unitsStateTracker_activeRange(nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,degradation_states_a))
5115      * storage_bigM(storage_techs,vintage)
5116      =g=
5117      storage_unitsStateTracker(nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,degradation_states);
5118   
5119  * // ### Storage Unit Sequential Degradation Range (degradation)
5120  * // Only one degradation range can be active.
5121  * // {Eq_storage_unitsDegradation_onlyOneRange}
5122  Eq_storage_unitsDegradation_onlyOneRange(nodesModelSel,yearsSel,yearsCom,storage_techs,vintage)
5123      $(storage_techParam(storage_techs,vintage,"usageDegradation") and storage_techParam(storage_techs,vintage,"sequentialDegradationStates"))
5124      ..
5125      sum(degradation_states$storage_usedDegradation(storage_techs,vintage,degradation_states),
5126            storage_unitsStateTracker_activeRange(nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,degradation_states))
5127      =e= 1;
5128   
5129  * // ### Storage Unit Sequential State of Charge (SoC)
5130  * // Only active state of charge ranges, i.e., two neighboring states of charge, can be used.
5131  * // {Eq_storage_unitsSoC}
5132  alias(soc_states, soc_states_a, soc_states_b);
5133  Eq_storage_unitsSoC(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,storage_techs,vintage,soc_states)
5134      $(storage_validSoCRange(storage_techs,vintage) and storage_techParam(storage_techs,vintage,"sequentialSoC"))
5135      ..
5136      sum(soc_states_a$((storage_SoCParam(storage_techs,vintage,soc_states_a,"SoC") = storage_SoCParam(storage_techs,vintage,soc_states,"SoC")
5137                        or storage_SoCParam(storage_techs,vintage,soc_states_a,"SoC")
5138                                         = smax(soc_states_b$(storage_SoCParam(storage_techs,vintage,soc_states_b,"SoC") < storage_SoCParam(storage_techs,vintage,soc_states,"SoC")
5139                                                              and storage_usedTechSoCState(storage_techs,vintage,soc_states_b)),
5140                                                              storage_SoCParam(storage_techs,vintage,soc_states_b,"SoC")))
5141                        and storage_usedTechSoCState(storage_techs,vintage,soc_states_a)),
5142          storage_unitsSoC_activeRange(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,soc_states_a))
5143      * storage_bigM(storage_techs,vintage)
5144      =g=
5145      storage_unitsSoC(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,soc_states);
5146   
5147  * // ### Storage Unit Sequential State of Charge Range (SoC)
5148  * // Only one state of charge range can be active.
5149  * // {Eq_storage_unitsSoC_onlyOneRange}
5150  Eq_storage_unitsSoC_onlyOneRange(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,storage_techs,vintage)
5151      $(storage_validSoCRange(storage_techs,vintage) and storage_techParam(storage_techs,vintage,"sequentialSoC"))
5152      ..
5153      sum(soc_states$storage_usedTechSoCState(storage_techs,vintage,soc_states),
5154            storage_unitsSoC_activeRange(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,soc_states)) =e= 1;
5155   
5156  * // ### Storage Unit State of Charge Sum (SoC)
5157  * // Each storage unit must have one state of charge.
5158  * // {Eq_storage_unitsSoC_sum}
5159  Eq_storage_unitsSoC_sum(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,storage_techs,vintage)
5160      $storage_validSoCRange(storage_techs,vintage)
5161      ..
5162      storage_unitsTotal(nodesModelSel,yearsSel,storage_techs,vintage)
5163      =e=
5164      sum(soc_states$storage_usedTechSoCState(storage_techs,vintage,soc_states),
5165            storage_unitsSoC(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,soc_states));
5166   
5167  * // ### Storage Level State of Charge Sum (SoC)
5168  * // The total storage level must be represented by units in their specific states of charge.
5169  * // {Eq_storage_levelSoC}
5170  Eq_storage_levelSoC(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,storage_techs,vintage,commodity)
5171      $(storage_validSoCRange(storage_techs,vintage) and storage_usedTechCom(nodesModelSel,yearsSel,storage_techs,vintage,commodity))
5172      ..
5173      storage_level(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
5174      =e=
5175      storage_sizeParam(storage_techs,vintage,commodity,"size")
5176      * sum(soc_states$storage_usedTechSoCState(storage_techs,vintage,soc_states),
5177              storage_unitsSoC(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,soc_states)
5178              * storage_SoCParam(storage_techs,vintage,soc_states,"SoC"));
5179   
5180  * // ### C-Rate Limit (SoC)
5181  * // The increase in storage level per time step, i.e., the charging rate, is limited relative to the storage capacity. The coefficients can vary between states of charge.
5182  * // {Eq_storage_cRateLimit_SoC}
5183  Eq_storage_cRateLimit_SoC(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,storage_techs,vintage,commodity)
5184      $(storage_usedTechCom(nodesModelSel,yearsSel,storage_techs,vintage,commodity)
5185        and storage_validSoCRange(storage_techs,vintage)
5186        and sum(soc_states, storage_SoCParam(storage_techs,vintage,soc_states,"cRate")) < inf)
5187      ..
5188      storage_level(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
5189      - storage_level(timeModelToCalc--1,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
5190      =l=
5191      storage_sizeParam(storage_techs,vintage,commodity,"size")
5192      * sum(soc_states$storage_usedTechSoCState(storage_techs,vintage,soc_states),
5193                      storage_SoCParam(storage_techs,vintage,soc_states,"cRate")
5194                      * storage_unitsSoC(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,soc_states));
5195   
5196  * // ### E-Rate Limit (SoC)
5197  * // The decrease in storage level per time step, i.e., the discharging rate, is limited relative to the storage capacity. The coefficients can vary between states of charge.
5198  * // {Eq_storage_cRateLimit_SoC}
5199  Eq_storage_eRateLimit_SoC(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,storage_techs,vintage,commodity)
5200      $(storage_usedTechCom(nodesModelSel,yearsSel,storage_techs,vintage,commodity)
5201        and storage_validSoCRange(storage_techs,vintage)
5202        and sum(soc_states, storage_SoCParam(storage_techs,vintage,soc_states,"eRate")) < inf)
5203      ..
5204      storage_level(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
5205      - storage_level(timeModelToCalc--1,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
5206      =g=
5207      - storage_sizeParam(storage_techs,vintage,commodity,"size")
5208      * sum(soc_states$storage_usedTechSoCState(storage_techs,vintage,soc_states),
5209                      storage_SoCParam(storage_techs,vintage,soc_states,"eRate")
5210                      * storage_unitsSoC(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,soc_states));
5211   
5212   
5213  * ==== model definition ====
5214   
5215  Model M_storage
5216  /
5217    Eq_storage_unitsBalance
5218    Eq_storage_unitsFixedDecom
5219    Eq_storage_unitsFreeDecom
5220    Eq_storage_unitsLowerLimit
5221    Eq_storage_unitsUpperLimit
5222    Eq_storage_levelUpperLimit_degradation
5223    Eq_storage_unitsTotalMIP
5224    Eq_storage_levelLowerLimit
5225    Eq_storage_levelUpperLimit
5227    Eq_storage_losses
5229    Eq_storage_unitsBalanceStates
5230    Eq_storage_unitsUpperLimitPerState
5231    Eq_storage_unitsStatesNoRecovery
5232    Eq_storage_cRateLimit
5233    Eq_storage_eRateLimit
5234    Eq_storage_charge
5235    Eq_storage_discharge
5236    Eq_storage_levelStateSum
5237    Eq_storage_levelUpperLimitPerAge
5238    Eq_storage_chargeBasedDegradationDistribution
5239    Eq_storage_chargingPerAge
5240    Eq_storage_unitsDecomStateSum
5241    Eq_storage_unitsDegradation
5242    Eq_storage_unitsDegradation_onlyOneRange
5243   
5244    Eq_storage_unitsSoC
5245    Eq_storage_unitsSoC_sum
5246    Eq_storage_unitsSoC_onlyOneRange
5247    Eq_storage_levelSoC
5248    Eq_storage_cRateLimit_SoC
5249    Eq_storage_eRateLimit_SoC
5250  /;
INCLUDE    C:\Local\REMix\framework\remix\framework\model\source\core\transfer.gms
5252  * SPDX-FileCopyrightText: Copyright (c) 2023 German Aerospace Center (DLR)
5253  * SPDX-License-Identifier: BSD-3-Clause
5254   
5255  * // # core_transfer
5256  * // The equations in this file describe the commodity transfer in the model.
5257   
5258  * // ## Variables
5259  * // {special_table_transfer_variables}
5262   
5267   
5510   
5511  parameter transfer_linksParam(linksModel,years,transfer_techs,pc_transfer_linksParam);
5512  transfer_linksParam(linksModelToCalc,years,transfer_techs,pc_transfer_linksParam)
5513      = sum(linksData$links_aggregate(linksModelToCalc,linksData), transfer_linksParamIn(linksData,years,transfer_techs,pc_transfer_linksParam));
5514   
5515  * // ## Load links from gdx file
5517   
5518   
5519  set transfer_hasflowProfileIn(linksData,years,transfer_techs,pc_transfer_flowProfile);
5520  option transfer_hasflowProfileIn < transfer_flowProfileIn;
5521   
5522  * === modify transfer_flowProfileIn vector to fill with default values, in case profile is not specified ===
5523  transfer_linksParamIn(linksData,years,transfer_techs,"flowAlongLimit")
5524      $(not transfer_linksParamIn(linksData,years,transfer_techs,"limitFlows"))
5525      = 1;
5526   
5527  transfer_linksParamIn(linksData,years,transfer_techs,"flowAgainstLimit")
5528      $(not transfer_linksParamIn(linksData,years,transfer_techs,"limitFlows"))
5529      = 1;
5530   
5531  transfer_flowProfileIn(timeData,linksData,years,transfer_techs,"along")
5532      $(not transfer_hasflowProfileIn(linksData,years,transfer_techs,"along"))
5533      = transfer_linksParamIn(linksData,years,transfer_techs,"flowAlongLimit");
5534   
5535  transfer_flowProfileIn(timeData,linksData,years,transfer_techs,"against")
5536      $(not transfer_hasflowProfileIn(linksData,years,transfer_techs,"against"))
5537      = transfer_linksParamIn(linksData,years,transfer_techs,"flowAgainstLimit");
5538   
5539  * aggregate time dimension
5540  parameter transfer_flowProfileIn_aggTime(timeModel,linksData,yearsToCalc,transfer_techs,pc_transfer_flowProfile);
5541  transfer_flowProfileIn_aggTime(timeModelToCalc,linksData,yearsToCalc,transfer_techs,pc_transfer_flowProfile)
5542    = sum(timeData$timeMapping(timeData,timeModelToCalc),
5543            transfer_flowProfileIn(timeData,linksData,yearsToCalc,transfer_techs,pc_transfer_flowProfile)
5544            / timeLength(timeModelToCalc));
5545  option clear = transfer_flowProfileIn;
5546   
5547   
5548  set transfer_finiteLinkLimit(linksModel,years,transfer_techs);
5549  transfer_finiteLinkLimit(linksModelToCalc,yearsToCalc,transfer_techs)
5550      = sum(linksData$links_aggregate(linksModelToCalc,linksData), transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"linksUpperLimit")) > 0
5551          and sum(linksData$links_aggregate(linksModelToCalc,linksData), transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"linksUpperLimit")) < inf;
5552   
5553  set transfer_infiniteLinkLimit(linksModel,years,transfer_techs);
5554  transfer_infiniteLinkLimit(linksModelToCalc,yearsToCalc,transfer_techs)
5555      = sum(linksData$links_aggregate(linksModelToCalc,linksData), transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"linksUpperLimit")) = inf;
5557   
5558  parameter transfer_lengthParam(linksModel,link_types,pc_transfer_lengthParam);
5559  transfer_lengthParam(linksModelToCalc,link_types,pc_transfer_lengthParam)
5560      = sum(linksData$links_aggregate(linksModelToCalc,linksData), transfer_lengthParamIn(linksData,link_types,pc_transfer_lengthParam))
5561          / sum(linksData$links_aggregate(linksModelToCalc,linksData), 1);
5562   
5563  parameter transfer_gridSegments(linksModel,transfer_techs,gridSegments,pc_transfer_gridSegments);
5564  transfer_gridSegments(linksModelToCalc,transfer_techs,gridSegments,pc_transfer_gridSegments)
5565      = smax(linksData$links_aggregate(linksModelToCalc,linksData), transfer_gridSegmentsIn(linksData,transfer_techs,gridSegments,pc_transfer_gridSegments));
5566   
5567  parameter transfer_dcopf_Xtech(linksModel,years,transfer_techs,vintage,gridSegments);
5568  transfer_dcopf_Xtech(linksModelToCalc,yearsToCalc,transfer_techs,vintage,gridSegments)
5569      $(transfer_gridSegments(linksModelToCalc,transfer_techs,gridSegments,"useDCopf")
5570          and transfer_linksParam(linksModelToCalc,yearsToCalc,transfer_techs,"circuits") > 0
5571          and sum(link_types, transfer_reactPerLength(transfer_techs,vintage,link_types,"reactPerLength")) > 0 )
5572      = (1 / sum(linksData
5573                  $links_aggregate(linksModelToCalc,linksData),
5574              1 / ( sum(link_types,
5575                          transfer_lengthParamIn(linksData,link_types,"length")
5576                          * transfer_reactPerLength(transfer_techs,vintage,link_types,"reactPerLength"))
5577                      / transfer_linksParam(linksModelToCalc,yearsToCalc,transfer_techs,"circuits"))));
5578   
5579  set transfer_hasflowProfile(linksModel,years,transfer_techs,pc_transfer_flowProfile);
5580  transfer_hasflowProfile(linksModelToCalc,yearsToCalc,transfer_techs,pc_transfer_flowProfile)
5581      = sum(linksData$links_aggregate(linksModelToCalc,linksData),
5582              transfer_hasflowProfileIn(linksData,yearsToCalc,transfer_techs,pc_transfer_flowProfile));
5583   
5584  * ==== parameter modifications ====
5585  transfer_linksParam(linksModelToCalc,yearsToCalc,transfer_techs,"linksLowerLimit")
5586      $sum(vintage, transfer_techParam(transfer_techs,vintage,"mipLinks"))
5587      = floor(transfer_linksParam(linksModelToCalc,yearsToCalc,transfer_techs,"linksLowerLimit"));
5588  transfer_linksParam(linksModelToCalc,yearsToCalc,transfer_techs,"linksUpperLimit")
5589      $sum(vintage, transfer_techParam(transfer_techs,vintage,"mipLinks"))
5590      = ceil(transfer_linksParam(linksModelToCalc,yearsToCalc,transfer_techs,"linksUpperLimit"));
5591   
5592   
5593  * ==== calculation of mappings ====
5594   
5595  * Technologies with a lifeTime > 0 are available
5596  set transfer_availTech(linksModel,years,transfer_techs,vintage);
5597  transfer_availTech(linksModel,years,transfer_techs,vintage)
5598      $(vintage.val = smax(vintage_a$(vintage_a.val <= years.val
5599          and transfer_techParam(transfer_techs,vintage_a,"lifeTime") > 0), vintage_a.val)) = yes;
5600   
5601  * Technologies to optimize become unavailable if they have an linksUpperLimit of 0
5602  transfer_availTech(linksModelToCalc,years,transfer_techs,vintage)
5603      $(yearsToCalc(years) and transfer_linksParam(linksModelToCalc,years,transfer_techs,"linksUpperLimit") = 0 ) = no;
5604   
5605  * Technologies already built become unavailable if they have an linksBuild of 0
5606  transfer_availTech(linksModelToCalc,years,transfer_techs,vintage)
5607      $( ( not yearsToCalc(years)) and transfer_linksParam(linksModelToCalc,years,transfer_techs,"linksBuild") = 0 ) = no;
5608   
5609  * Used technologies are available technologies over their technical lifeTime
5610  set transfer_usedTech(linksModel,years,transfer_techs,vintage);
5611  transfer_usedTech(linksModelToCalc,years,transfer_techs,vintage)
5612      $(vintage.val <= years.val
5613          and years.val < smax(years_a$transfer_availTech(linksModelToCalc,years_a,transfer_techs,vintage),
5614                                  years_a.val + transfer_techParam(transfer_techs,vintage,"lifeTime"))
5615          ) = yes;
5616   
5617  * Technologies have to be decomissioned in the interval of first avail + lifetime to last avail + lifetime
5618  set transfer_decomTech(linksModel,years,transfer_techs,vintage);
5619  transfer_decomTech(linksModel,years,transfer_techs,vintage)
5620    $(sum(years_a$transfer_usedTech(linksModel,years_a,transfer_techs,vintage), 1)
5621      and sum(yearsToCalc
5622        $(sameas(years, yearsToCalc)
5623          and yearsToCalc.val >= smin(years_a$transfer_availTech(linksModel,years_a,transfer_techs,vintage), years_a.val) + transfer_techParam(transfer_techs,vintage,"lifeTime")
5624          and yearsToCalc.val <= smax(years_a$transfer_availTech(linksModel,years_a,transfer_techs,vintage), years_a.val) + transfer_techParam(transfer_techs,vintage,"lifeTime")), 1))
5625    = yes;
5626   
5627  * Extend the decom frame to the year after the last year of usedTech
5628  transfer_decomTech(linksModel,yearsToCalc,transfer_techs,vintage)
5629    $(transfer_usedTech(linksModel,yearsToCalc-1,transfer_techs,vintage)
5630      and transfer_decomTech(linksModel,yearsToCalc-1,transfer_techs,vintage))
5631    = yes;
5632   
5633  parameter transfer_flowProfile(timeModel,linksModel,years,transfer_techs,vintage,pc_transfer_flowProfile);
5634   
5635  transfer_flowProfile(timeModelToCalc,linksModelToCalc,yearsToCalc,transfer_techs,vintage,"along")
5636      $transfer_finiteLinkLimit(linksModelToCalc,yearsToCalc,transfer_techs)
5637      = (sum(linksData$(links_aggregate(linksModelToCalc,linksData)
5638                       and transfer_incidenceData_flip(linksData) = 1),
5639              transfer_flowProfileIn_aggTime(timeModelToCalc,linksData,yearsToCalc,transfer_techs,"along")
5640              * transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"linksUpperLimit"))
5641          + sum(linksData$(links_aggregate(linksModelToCalc,linksData)
5642                          and transfer_incidenceData_flip(linksData) = -1),
5643              transfer_flowProfileIn_aggTime(timeModelToCalc,linksData,yearsToCalc,transfer_techs,"against")
5644              * transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"linksUpperLimit")))
5645      / sum(linksData$links_aggregate(linksModelToCalc,linksData),
5646              transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"linksUpperLimit"));
5647   
5648  transfer_flowProfile(timeModelToCalc,linksModelToCalc,yearsToCalc,transfer_techs,vintage,"against")
5649      $transfer_finiteLinkLimit(linksModelToCalc,yearsToCalc,transfer_techs)
5650      = (sum(linksData$(links_aggregate(linksModelToCalc,linksData)
5651                       and transfer_incidenceData_flip(linksData) = 1),
5652              transfer_flowProfileIn_aggTime(timeModelToCalc,linksData,yearsToCalc,transfer_techs,"against")
5653              * transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"linksUpperLimit"))
5654          + sum(linksData$(links_aggregate(linksModelToCalc,linksData)
5655                          and transfer_incidenceData_flip(linksData) = -1),
5656              transfer_flowProfileIn_aggTime(timeModelToCalc,linksData,yearsToCalc,transfer_techs,"along")
5657              * transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"linksUpperLimit")))
5658      / sum(linksData$links_aggregate(linksModelToCalc,linksData),
5659              transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"linksUpperLimit"));
5660   
5661  transfer_flowProfile(timeModelToCalc,linksModelToCalc,yearsToCalc,transfer_techs,vintage,"along")
5662      $transfer_infiniteLinkLimit(linksModelToCalc,yearsToCalc,transfer_techs)
5663      = (sum(linksData$(links_aggregate(linksModelToCalc,linksData)
5664                       and transfer_incidenceData_flip(linksData) = 1
5665                       and transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"linksUpperLimit") = inf ),
5666              transfer_flowProfileIn_aggTime(timeModelToCalc,linksData,yearsToCalc,transfer_techs,"along"))
5667          + sum(linksData$(links_aggregate(linksModelToCalc,linksData)
5668                          and transfer_incidenceData_flip(linksData) = -1
5669                          and transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"linksUpperLimit") = inf ),
5670              transfer_flowProfileIn_aggTime(timeModelToCalc,linksData,yearsToCalc,transfer_techs,"against")))
5671      / sum(linksData$(links_aggregate(linksModelToCalc,linksData)
5672                      and transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"linksUpperLimit") = inf ),
5673              1);
5674   
5675  transfer_flowProfile(timeModelToCalc,linksModelToCalc,yearsToCalc,transfer_techs,vintage,"against")
5676      $transfer_infiniteLinkLimit(linksModelToCalc,yearsToCalc,transfer_techs)
5677      = (sum(linksData$(links_aggregate(linksModelToCalc,linksData)
5678                       and transfer_incidenceData_flip(linksData) = 1
5679                       and transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"linksUpperLimit") = inf ),
5680              transfer_flowProfileIn_aggTime(timeModelToCalc,linksData,yearsToCalc,transfer_techs,"against"))
5681          + sum(linksData$(links_aggregate(linksModelToCalc,linksData)
5682                          and transfer_incidenceData_flip(linksData) = -1
5683                          and transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"linksUpperLimit") = inf ),
5684              transfer_flowProfileIn_aggTime(timeModelToCalc,linksData,yearsToCalc,transfer_techs,"along")))
5685      / sum(linksData$(links_aggregate(linksModelToCalc,linksData)
5686                      and transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"linksUpperLimit") = inf ),
5687              1);
5688  option clear = transfer_flowProfileIn_aggTime;
5689   
5690  * Orientation of links affects the flowAlongLimit/flowAgainstLimit
5691   
5692  transfer_linksParam(linksModelToCalc,years,transfer_techs,"flowAlongLimit")
5693      $transfer_finiteLinkLimit(linksModelToCalc,years,transfer_techs)
5694      = (sum(linksData$(links_aggregate(linksModelToCalc,linksData)
5695                       and transfer_incidenceData_flip(linksData) = 1),
5696              transfer_linksParamIn(linksData,years,transfer_techs,"flowAlongLimit")
5697              * transfer_linksParamIn(linksData,years,transfer_techs,"linksUpperLimit"))
5698          + sum(linksData$(links_aggregate(linksModelToCalc,linksData)
5699                          and transfer_incidenceData_flip(linksData) = -1),
5700              transfer_linksParamIn(linksData,years,transfer_techs,"flowAgainstLimit")
5701              * transfer_linksParamIn(linksData,years,transfer_techs,"linksUpperLimit")))
5702      / sum(linksData$links_aggregate(linksModelToCalc,linksData),
5703              transfer_linksParamIn(linksData,years,transfer_techs,"linksUpperLimit"));
5704   
5705  transfer_linksParam(linksModelToCalc,years,transfer_techs,"flowAgainstLimit")
5706      $transfer_finiteLinkLimit(linksModelToCalc,years,transfer_techs)
5707      = (sum(linksData$(links_aggregate(linksModelToCalc,linksData)
5708                       and transfer_incidenceData_flip(linksData) = -1),
5709              transfer_linksParamIn(linksData,years,transfer_techs,"flowAlongLimit")
5710              * transfer_linksParamIn(linksData,years,transfer_techs,"linksUpperLimit"))
5711          + sum(linksData$(links_aggregate(linksModelToCalc,linksData)
5712                          and transfer_incidenceData_flip(linksData) = 1),
5713              transfer_linksParamIn(linksData,years,transfer_techs,"flowAgainstLimit")
5714              * transfer_linksParamIn(linksData,years,transfer_techs,"linksUpperLimit")))
5715      / sum(linksData$links_aggregate(linksModelToCalc,linksData),
5716              transfer_linksParamIn(linksData,years,transfer_techs,"linksUpperLimit"));
5717   
5718  transfer_linksParam(linksModelToCalc,years,transfer_techs,"flowAlongLimit")
5719      $transfer_infiniteLinkLimit(linksModelToCalc,years,transfer_techs)
5720      = (sum(linksData$(links_aggregate(linksModelToCalc,linksData)
5721                       and transfer_incidenceData_flip(linksData) = 1
5722                       and transfer_linksParamIn(linksData,years,transfer_techs,"linksUpperLimit") = inf),
5723              transfer_linksParamIn(linksData,years,transfer_techs,"flowAlongLimit"))
5724          + sum(linksData$(links_aggregate(linksModelToCalc,linksData)
5725                          and transfer_incidenceData_flip(linksData) = -1
5726                          and transfer_linksParamIn(linksData,years,transfer_techs,"linksUpperLimit") = inf),
5727              transfer_linksParamIn(linksData,years,transfer_techs,"flowAgainstLimit")))
5728      / sum(linksData$(links_aggregate(linksModelToCalc,linksData)
5729                      and transfer_linksParamIn(linksData,years,transfer_techs,"linksUpperLimit") = inf ),
5730              1);
5731   
5732  transfer_linksParam(linksModelToCalc,years,transfer_techs,"flowAgainstLimit")
5733      $transfer_infiniteLinkLimit(linksModelToCalc,years,transfer_techs)
5734      = (sum(linksData$(links_aggregate(linksModelToCalc,linksData)
5735                       and transfer_incidenceData_flip(linksData) = -1
5736                       and transfer_linksParamIn(linksData,years,transfer_techs,"linksUpperLimit") = inf),
5737              transfer_linksParamIn(linksData,years,transfer_techs,"flowAlongLimit"))
5738          + sum(linksData$(links_aggregate(linksModelToCalc,linksData)
5739                          and transfer_incidenceData_flip(linksData) = 1
5740                          and transfer_linksParamIn(linksData,years,transfer_techs,"linksUpperLimit") = inf),
5741              transfer_linksParamIn(linksData,years,transfer_techs,"flowAgainstLimit")))
5742      / sum(linksData$(links_aggregate(linksModelToCalc,linksData)
5743                      and transfer_linksParamIn(linksData,years,transfer_techs,"linksUpperLimit") = inf ),
5744              1);
5745   
5746  * Mapping for grid segments using DC optimal power flow
5747  set gridSegments_dcopf(linksModel,transfer_techs,gridSegments);
5748  gridSegments_dcopf(linksModelToCalc,transfer_techs,gridSegments)
5749      $transfer_gridSegments(linksModelToCalc,transfer_techs,gridSegments,"useDCopf")
5751      = yes;
5753   
5754  * Ensure each grid segment uses exactly one commodity
5755  parameter checkGridSegmentCommodities(gridSegments);
5756  checkGridSegmentCommodities(gridSegments)
5757      = sum (commodity$(sum((linksModelToCalc,transfer_techs,vintage)
5758                              $( transfer_coefficient(transfer_techs,vintage,commodity,"coefficient") > 0
5759                                  and gridSegments_dcopf(linksModelToCalc,transfer_techs,gridSegments)) , 1) > 0), 1);
5760   
5761  parameter transfer_incidenceSegments(nodesModel,linksModel,years,gridSegments);
5762  transfer_incidenceSegments(nodesModelToCalc,linksModelToCalc,yearsToCalc,gridSegments)
5763      $(sum((transfer_techs,vintage)$(transfer_usedTech(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
5764                                          and gridSegments_dcopf(linksModelToCalc,transfer_techs,gridSegments)
5765                                          and transfer_incidenceModel(nodesModelToCalc,linksModelToCalc) <> 0), 1) > 0)
5766      = transfer_incidenceModel(nodesModelToCalc,linksModelToCalc);
5767   
5768   
5772   
5773  scalar transfer_enableMIP;
5774  transfer_enableMIP = sum(transfer_usedTech(linksModelToCalc,yearsToCalc,transfer_techs,vintage)$transfer_techParam(transfer_techs,vintage,"mipLinks"), 1 );
5775   
5776   
5777  * ==== definition of variables ====
5778   
5779  * Initialise variables for linksBuild
5780  transfer_linksBuild.l(linksModel,years,transfer_techs,vintage)
5781      $transfer_availTech(linksModel,years,transfer_techs,vintage)
5782      = transfer_linksParam(linksModel,years,transfer_techs,"linksBuild");
5783  transfer_linksBuild.lo(linksModel,yearsToCalc,transfer_techs,vintage)
5784      $transfer_availTech(linksModel,yearsToCalc,transfer_techs,vintage)
5785      = transfer_linksBuild.l(linksModel,yearsToCalc,transfer_techs,vintage);
5786  transfer_linksBuild.fx(linksModel,years,transfer_techs,vintage)
5787      $transfer_linksParam(linksModel,years,transfer_techs,"noExpansion")
5788      = transfer_linksBuild.l(linksModel,years,transfer_techs,vintage);
5789   
5790  * Initialise variables for linksDecom
5791  transfer_linksDecom.l(linksModel,years,transfer_techs,vintage)
5792      $(transfer_decomTech(linksModel,years,transfer_techs,vintage)
5793        and years.val < sum(yearsToCalc$(ord(yearsToCalc) = 1), yearsToCalc.val))
5794      = sum((years_a,years_aa)$(sameas(years-1, years_aa)
5795                        and years_a.val > years_aa.val - transfer_techParam(transfer_techs,vintage,'lifeTime')
5796                        and years_a.val <= years.val - transfer_techParam(transfer_techs,vintage,'lifeTime')
5797                        and transfer_availTech(linksModel,years_a,transfer_techs,vintage)),
5798          transfer_linksBuild.l(linksModel,years_a,transfer_techs,vintage));
5799   
5800  transfer_linksDecom.l(linksModel,yearsToCalc,transfer_techs,vintage)
5801    $transfer_decomTech(linksModel,yearsToCalc,transfer_techs,vintage)
5802    = sum(years$
5803          (years.val < sum(yearsToCalc_a$(ord(yearsToCalc_a) = 1), yearsToCalc_a.val)
5804            and transfer_availTech(linksModel,years,transfer_techs,vintage)
5805            and years.val > sum(years_a$sameas(years_a, yearsToCalc-1), years_a.val) - transfer_techParam(transfer_techs,vintage,'lifeTime')
5806            and years.val <= yearsToCalc.val - transfer_techParam(transfer_techs,vintage,'lifeTime')),
5807        transfer_linksBuild.l(linksModel,years,transfer_techs,vintage))
5808      + sum(yearsToCalc_a$
5809          (yearsToCalc_a.val < sum(yearsToCalc_aa$(ord(yearsToCalc_aa) > 1), yearsToCalc_a.val)
5810            and transfer_availTech(linksModel,yearsToCalc_a,transfer_techs,vintage)
5811            and yearsToCalc_a.val > sum(years_a$sameas(years_a, yearsToCalc-1), years_a.val) - transfer_techParam(transfer_techs,vintage,'lifeTime')
5812            and yearsToCalc_a.val <= yearsToCalc.val - transfer_techParam(transfer_techs,vintage,'lifeTime')),
5813        transfer_linksBuild.l(linksModel,yearsToCalc_a,transfer_techs,vintage));
5814        ;
5815   
5816  transfer_linksDecom.lo(linksModel,yearsToCalc,transfer_techs,vintage)
5817      $(transfer_usedTech(linksModel,yearsToCalc,transfer_techs,vintage)
5818          and not transfer_techParam(transfer_techs,vintage,"freeDecom"))
5819      = transfer_linksDecom.l(linksModel,yearsToCalc,transfer_techs,vintage)
5820   
5821  * Calculate planned transfer links expansion
5822  parameter transfer_linksPlanned(linksModel,years,transfer_techs,vintage);
5823  transfer_linksPlanned(linksModel,years,transfer_techs,vintage) = 0;
5824  loop(years,
5825    transfer_linksPlanned(linksModel,years,transfer_techs,vintage)
5826      =
5827      transfer_linksPlanned(linksModel,years-1,transfer_techs,vintage)
5828          $transfer_usedTech(linksModel,years-1,transfer_techs,vintage)
5829      + transfer_linksBuild.l(linksModel,years,transfer_techs,vintage)
5830          $transfer_availTech(linksModel,years,transfer_techs,vintage)
5831      - transfer_linksDecom.l(linksModel,years,transfer_techs,vintage)
5832          $transfer_usedTech(linksModel,years,transfer_techs,vintage);
5833  );
5834   
5835  * Set initial state for planned units
5836  transfer_linksTotal.l(linksModel,years,transfer_techs,vintage)
5837    = transfer_linksPlanned(linksModel,years,transfer_techs,vintage)
5838   
5839  * Calculate if planned links expansion is bound by upper and lower limits
5840  set transfer_linkBoundsFixed(linksModel,years,transfer_techs);
5841  transfer_linkBoundsFixed(linksModel,years,transfer_techs)
5842    $(sum(vintage$transfer_usedTech(linksModel,years,transfer_techs,vintage),
5843          transfer_linksPlanned(linksModel,years,transfer_techs,vintage))
5844      = transfer_linksParam(linksModel,years,transfer_techs,"linksUpperLimit")
5845    and sum(vintage$transfer_usedTech(linksModel,years,transfer_techs,vintage),
5846          transfer_linksPlanned(linksModel,years,transfer_techs,vintage))
5847      = transfer_linksParam(linksModel,years,transfer_techs,"linksLowerLimit"))
5848    = yes;
5849   
5850  * Fix linksBuild, linksDecom, linksTotal if levels are predetermined by upper and lower limits
5851  transfer_linksBuild.fx(linksModel,years,transfer_techs,vintage)
5852    $(transfer_availTech(linksModel,years,transfer_techs,vintage)
5853      and transfer_linkBoundsFixed(linksModel,years,transfer_techs))
5854    = transfer_linksBuild.l(linksModel,years,transfer_techs,vintage);
5855  transfer_linksDecom.fx(linksModel,years,transfer_techs,vintage)
5856    $(transfer_usedTech(linksModel,years,transfer_techs,vintage)
5857      and transfer_linkBoundsFixed(linksModel,years,transfer_techs))
5858    = transfer_linksDecom.l(linksModel,years,transfer_techs,vintage);
5859  transfer_linksTotal.fx(linksModel,years,transfer_techs,vintage)
5860    $(transfer_usedTech(linksModel,years,transfer_techs,vintage)
5861      and transfer_linkBoundsFixed(linksModel,years,transfer_techs))
5862    = transfer_linksTotal.l(linksModel,years,transfer_techs,vintage);
5863   
5864  transfer_linksTotal_MIP.up(linksModel,years,transfer_techs,vintage)
5865      $(transfer_usedTech(linksModel,years,transfer_techs,vintage)
5866        and transfer_techParam(transfer_techs,vintage,"miplinks") = 1)
5867      = transfer_linksParam(linksModel,years,transfer_techs,"linksUpperLimit");
5868   
5869  * Add parameter for fixing capacities during myopic runs
5870  parameter transfer_linksDelta(linksModel,years,transfer_techs);
5871   
5872   
5873  * ==== declaration of equations ====
5874   
5875  equations
5876    Eq_transfer_linksBalance(linksModel,years,transfer_techs,vintage
5877      ) "Ensures the links balance over the planning period."
5878    Eq_transfer_linksFixedDecom(linksModel,years,transfer_techs,vintage
5879      ) "Restricts the fixed decommissioning of links over the planning period."
5880    Eq_transfer_linksFreeDecom(linksModel,years,transfer_techs,vintage
5881      ) "Restricts the free decommissioning of links over the planning period."
5882    Eq_transfer_linksUpperLimit(linksModel,years,transfer_techs
5883      ) "Upper bound for the total number of links."
5884    Eq_transfer_linksLowerLimit(linksModel,years,transfer_techs
5885      ) "Lower bound for the total number of links."
5886    Eq_transfer_linksTotalMIP(linksModel,years,transfer_techs,vintage
5887      ) "Fixes the total number of links to the corresponding integer variable."
5888   
5889    Eq_transfer_flowAlongUpperLimit(timeModel,linksModel,years,transfer_techs,vintage
5890      ) "Upper bound for the flow along the transfer links."
5891    Eq_transfer_flowAgainstUpperLimit(timeModel,linksModel,years,transfer_techs,vintage
5892      ) "Upper bound for the flow against the transfer links."
5893    Eq_transfer_dcopf_angleFlows(timeModel,linksModel,years,gridSegments
5894      )
5895    Eq_transfer_dcopf_cycleFlows(timeModel,years,cycles,gridSegments
5896      )
5897    ;
5898   
5899   
5900  * ==== equation definition ====
5901  * // ## Equations
5902  * // ### Transfer Links Balance
5903  * // Ensures that the transfer between nodes is balanced.
5904  * // {Eq_transfer_linksBalance}
5905  Eq_transfer_linksBalance(linksModelToCalc,yearsSel,transfer_techs,vintage)
5906      $((transfer_usedTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
5907            or sum(years$sameas(years,yearsSel), transfer_usedTech(linksModelToCalc,years-1,transfer_techs,vintage)))
5908          and not transfer_linkBoundsFixed(linksModelToCalc,yearsSel,transfer_techs))
5909      ..
5910      transfer_linksTotal(linksModelToCalc,yearsSel,transfer_techs,vintage)
5911      =e=
5912      sum(yearsToCalc$(ord(yearsToCalc) = 1 and sameas(yearsToCalc, yearsSel)),
5913        sum(years$sameas(years, yearsToCalc),
5914          transfer_linksTotal(linksModelToCalc,years-1,transfer_techs,vintage)
5915            $transfer_usedTech(linksModelToCalc,years-1,transfer_techs,vintage)))
5916      + sum((yearsToCalc)$(ord(yearsToCalc) > 1 and sameas(yearsToCalc, yearsSel)),
5917        transfer_linksTotal(linksModelToCalc,yearsToCalc-1,transfer_techs,vintage)
5918          $transfer_usedTech(linksModelToCalc,yearsToCalc-1,transfer_techs,vintage))
5919      + transfer_linksBuild(linksModelToCalc,yearsSel,transfer_techs,vintage)
5920          $transfer_availTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
5921      - transfer_linksDecom(linksModelToCalc,yearsSel,transfer_techs,vintage)
5922          $transfer_usedTech(linksModelToCalc,yearsSel,transfer_techs,vintage);
5923   
5924  * // ### Transfer Links Fixed Decommissioning
5925  * // Balances fixed link decommissioning.
5926  * // {Eq_transfer_linksFixedDecom}
5927  Eq_transfer_linksFixedDecom(linksModelToCalc,yearsSel,transfer_techs,vintage)
5928      $(transfer_decomTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
5929          and not transfer_techParam(transfer_techs,vintage,"freeDecom") = 1
5930          and not transfer_linkBoundsFixed(linksModelToCalc,yearsSel,transfer_techs))
5931      ..
5932      transfer_linksDecom(linksModelToCalc,yearsSel,transfer_techs,vintage)
5933      =e=
5934      sum(years$
5935          (transfer_availTech(linksModelToCalc,years,transfer_techs,vintage)
5936              and years.val > sum(yearsToCalc$sameas(yearsToCalc+1, yearsSel), yearsToCalc.val) - transfer_techParam(transfer_techs,vintage,'lifeTime')
5937              and years.val <= yearsSel.val - transfer_techParam(transfer_techs,vintage,'lifeTime')),
5938          transfer_linksBuild(linksModelToCalc,years,transfer_techs,vintage));
5939   
5940  * // ### Transfer Links Free Decommissioning
5941  * // Balances free link decommissioning.
5942  * // {Eq_transfer_linksFreeDecom}
5943  Eq_transfer_linksFreeDecom(linksModelToCalc,yearsSel,transfer_techs,vintage)
5944      $((transfer_decomTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
5945          or transfer_usedTech(linksModelToCalc,yearsSel,transfer_techs,vintage))
5946          and transfer_techParam(transfer_techs,vintage,"freeDecom") = 1)
5947      ..
5948      sum(years$
5949            ((transfer_decomTech(linksModelToCalc,years,transfer_techs,vintage)
5950              or transfer_usedTech(linksModelToCalc,years,transfer_techs,vintage))
5951              and years.val < sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)),
5952          transfer_linksDecom(linksModelToCalc,years,transfer_techs,vintage))
5953      + sum(yearsToCalc$
5954            ((transfer_decomTech(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
5955              or transfer_usedTech(linksModelToCalc,yearsToCalc,transfer_techs,vintage))
5956              and yearsToCalc.val >= sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
5957              and yearsToCalc.val <= yearsSel.val),
5958          transfer_linksDecom(linksModelToCalc,yearsToCalc,transfer_techs,vintage))
5959      =g=
5960      sum(years$
5961            (transfer_availTech(linksModelToCalc,years,transfer_techs,vintage)
5962              and years.val < sum(yearsToCalc$(ord(yearsToCalc)=1), yearsToCalc.val) - transfer_techParam(transfer_techs,vintage,'lifeTime')),
5963          transfer_linksBuild(linksModelToCalc,years,transfer_techs,vintage))
5964      + sum(yearsToCalc$
5965            (transfer_availTech(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
5966              and yearsToCalc.val >= sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
5967              and yearsToCalc.val <= yearsSel.val - transfer_techParam(transfer_techs,vintage,'lifeTime')),
5968          transfer_linksBuild(linksModelToCalc,yearsToCalc,transfer_techs,vintage));
5969   
5970  * // ### Transfer Links Lower Limit
5971  * // Ensures link capacity lower limits.
5972  * // {Eq_transfer_linksLowerLimit}
5973  Eq_transfer_linksLowerLimit(linksModelToCalc,yearsSel,transfer_techs)
5974      $(transfer_linksParam(linksModelToCalc,yearsSel,transfer_techs,'linksLowerLimit') > 0 )
5975      ..
5976      sum(vintage$transfer_usedTech(linksModelToCalc,yearsSel,transfer_techs,vintage),
5977          transfer_linksTotal(linksModelToCalc,yearsSel,transfer_techs,vintage))
5978      =g=
5979      transfer_linksParam(linksModelToCalc,yearsSel,transfer_techs,"linksLowerLimit");
5980   
5981  * // ### Transfer Links Upper Limit
5982  * // Ensures link capacity upper limits.
5983  * // {Eq_transfer_linksUpperLimit}
5984  Eq_transfer_linksUpperLimit(linksModelToCalc,yearsSel,transfer_techs)
5985      $(transfer_linksParam(linksModelToCalc,yearsSel,transfer_techs,'linksUpperLimit') >= 0
5986          and transfer_linksParam(linksModelToCalc,yearsSel,transfer_techs,'linksUpperLimit') < +inf )
5987      ..
5988      sum(vintage$transfer_usedTech(linksModelToCalc,yearsSel,transfer_techs,vintage),
5989          transfer_linksTotal(linksModelToCalc,yearsSel,transfer_techs,vintage))
5990      =l=
5991      transfer_linksParam(linksModelToCalc,yearsSel,transfer_techs,"linksUpperLimit");
5992   
5993  * // ### Transfer Links Total MIP
5994  * // Ensures number of MIP links.
5995  * // {Eq_transfer_linksTotalMIP}
5996  Eq_transfer_linksTotalMIP(linksModelToCalc,yearsSel,transfer_techs,vintage)
5997      $(transfer_usedTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
5998          and transfer_techParam(transfer_techs,vintage,"mipLinks"))
5999      ..
6000      transfer_linksTotal(linksModelToCalc,yearsSel,transfer_techs,vintage)
6001      =e=
6002      transfer_linksTotal_MIP(linksModelToCalc,yearsSel,transfer_techs,vintage);
6003   
6004  * // ### Transfer Links Flow Along Upper Limit
6005  * // Ensures links flow along upper limit.
6006  * // {Eq_transfer_flowAlongUpperLimit}
6007  Eq_transfer_flowAlongUpperLimit(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
6008      $transfer_usedTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
6009      ..
6010      transfer_flowAlong(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
6011      =l=
6012      transfer_flowProfile(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage,"along")
6013      * transfer_linksTotal(linksModelToCalc,yearsSel,transfer_techs,vintage)
6014      * transfer_techParam(transfer_techs,vintage,"flowUpperLimit")
6015      ;
6016   
6017  * // ### Transfer Links Flow Against Upper Limit
6018  * // Ensures links flow against upper limit.
6019  * // {Eq_transfer_flowAgainstUpperLimit}
6020  Eq_transfer_flowAgainstUpperLimit(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
6021      $transfer_usedTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
6022      ..
6023      transfer_flowAgainst(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
6024      =l=
6025      transfer_flowProfile(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage,"against")
6026      * transfer_linksTotal(linksModelToCalc,yearsSel,transfer_techs,vintage)
6027      * transfer_techParam(transfer_techs,vintage,"flowUpperLimit")
6028      ;
6029   
6030  set transfer_usedOpf(linksModel,years,gridSegments,transfer_techs,vintage);
6031  transfer_usedOpf(linksModel,yearsToCalc,gridSegments,transfer_techs,vintage)
6032      $(transfer_usedTech(linksModel,yearsToCalc,transfer_techs,vintage)
6033          and gridSegments_dcopf(linksModel,transfer_techs,gridSegments))
6034      = yes;
6035   
6036  set transfer_usedOpfLinks(linksModel,years,gridSegments);
6037  option transfer_usedOpfLinks < transfer_usedOpf;
6038   
6039  set transfer_usedOpfSegments(years,gridSegments);
6040  option transfer_usedOpfSegments < transfer_usedOpf;
6041   
6045  * // ### Transfer DC optimal flow angle flows
6046  * // Angle flows.
6047  * // {Eq_transfer_dcopf_cycleFlows}
6048  Eq_transfer_dcopf_angleFlows(timeModelSel,linksModelToCalc,yearsSel,gridSegments)
6049      $transfer_usedOpfLinks(linksModelToCalc,yearsSel,gridSegments)
6050      ..
6051      sum ((transfer_techs,vintage)
6052              $transfer_usedOpf(linksModelToCalc,yearsSel,gridSegments,transfer_techs,vintage),
6053          ( transfer_flowAlong(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
6054              - transfer_flowAgainst(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage) )
6055          * transfer_dcopf_Xtech(linksModelToCalc,yearsSel,transfer_techs,vintage,gridSegments) )
6056      =e=
6057      sum ( nodesModelSel,
6058          - transfer_incidenceModel(nodesModelSel,linksModelToCalc)
6059          * transfer_dcopf_voltageAngle(timeModelSel,nodesModelSel,yearsSel,gridSegments));
6063   
6064   
6065  * ==== model definition ====
6066   
6067  Model M_transfer
6068  /
6069    Eq_transfer_linksBalance
6070    Eq_transfer_linksFixedDecom
6071    Eq_transfer_linksFreeDecom
6072    Eq_transfer_linksLowerLimit
6073    Eq_transfer_linksUpperLimit
6074    Eq_transfer_linksTotalMIP
6075    Eq_transfer_flowAlongUpperLimit
6076    Eq_transfer_flowAgainstUpperLimit
6080    Eq_transfer_dcopf_angleFlows
6084  /;
INCLUDE    C:\Local\REMix\framework\remix\framework\model\source\core\sourcesink.gms
6086  * SPDX-FileCopyrightText: Copyright (c) 2023 German Aerospace Center (DLR)
6087  * SPDX-License-Identifier: BSD-3-Clause
6088   
6089  * // # core_sourcesink
6090  * // The equations in this file describe the sources and sinks in the model.
6091   
6092  * // ## Variables
6093  * // {special_table_sourcesink_variables}
6401   
6402  * // ## Aggregation of profiles
6403  * // Profiles are rescaled based on the annual sum.
6404   
6405  set sourcesink_usesProfileScaling(nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile);
6406  sourcesink_usesProfileScaling(nodesData,years,sourcesink_techs,commodity,"fixed")
6407      $sourcesink_configIn(nodesData,years,sourcesink_techs,commodity,"scaleFixProfileWithFixSum") = yes;
6408  sourcesink_usesProfileScaling(nodesData,years,sourcesink_techs,commodity,"lower")
6409      $sourcesink_configIn(nodesData,years,sourcesink_techs,commodity,"scaleLowProfileWithLowSum") = yes;
6410  sourcesink_usesProfileScaling(nodesData,years,sourcesink_techs,commodity,"upper")
6411      $sourcesink_configIn(nodesData,years,sourcesink_techs,commodity,"scaleUpProfileWithUpSum") = yes;
6412   
6413  parameter sourcesink_ProfileSum(nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile);
6414  sourcesink_ProfileSum(nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile)
6415      $sourcesink_usesProfileScaling(nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile)
6416      = sum(timeData, sourcesink_profileIn(timeData,nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile));
6417   
6418  parameter sourcesink_ProfileAbsSum(nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile);
6419  sourcesink_ProfileAbsSum(nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile)
6420      $sourcesink_usesProfileScaling(nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile)
6421      = sum(timeData, abs(sourcesink_profileIn(timeData,nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile)));
6422   
6423  set sourcesink_ProfileScaleError(nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile);
6424  sourcesink_ProfileScaleError(nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile)
6425      $(sourcesink_usesProfileScaling(nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile)
6426          and sourcesink_ProfileSum(nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile) = 0
6427          and sourcesink_ProfileAbsSum(nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile) > 0)
6428      = yes;
6429   
6430  abort$sum((nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile),
6431              sourcesink_ProfileScaleError(nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile)) "One or more profiles cannot be rescaled as their annual sum equals zero!"
6432   
6433  * calculate scaling factor for each type
6434  parameter sourcesink_scalingFactor(nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile);
6435  sourcesink_scalingFactor(nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile)
6436      $(sourcesink_ProfileSum(nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile)
6437          and sourcesink_usesProfileScaling(nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile))
6438      = sum(pc_sourcesink_annualSum$sameas(pc_sourcesink_profile,pc_sourcesink_annualSum),
6439          sourcesink_annualSumIn(nodesData,years,sourcesink_techs,commodity,pc_sourcesink_annualSum)
6440              / sourcesink_ProfileSum(nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile));
6441   
6442  * rescale profiles
6443  sourcesink_profileIn(timeData,nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile)
6444      $sourcesink_usesProfileScaling(nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile)
6445      = sourcesink_profileIn(timeData,nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile)
6446          * sourcesink_scalingFactor(nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile)
6447   
6448  * // ## Aggregation of profiles
6449  * // Profiles are aggregated based on the mapping from data nodes to model nodes.
6450   
6451  * ==== aggregation of profiles ====
6452  set sourcesink_usesProfileIn(nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile);
6453  option sourcesink_usesProfileIn < sourcesink_profileIn
6454   
6455  set sourcesink_usesProfile(nodesModel,years,sourcesink_techs,commodity,pc_sourcesink_profile);
6456  sourcesink_usesProfile(nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity,pc_sourcesink_profile)
6457      $sum(nodesData$(aggregateNodesModel(nodesData,nodesModelToCalc)
6458          and sourcesink_usesProfileIn(nodesData,yearsToCalc,sourcesink_techs,commodity,pc_sourcesink_profile)), 1)
6459      = yes;
6460   
6461  * aagregate time dimension
6462  parameter sourcesink_profileIn_aggTime(timeModel,nodesData,yearsToCalc,sourcesink_techs,commodity,pc_sourcesink_profile);
6463  sourcesink_profileIn_aggTime(timeModelToCalc,nodesData,yearsToCalc,sourcesink_techs,commodity,pc_sourcesink_profile)
6464    $sourcesink_usesProfileIn(nodesData,yearsToCalc,sourcesink_techs,commodity,pc_sourcesink_profile)
6465    = sum(timeData$timeMapping(timeData,timeModelToCalc),
6466            sourcesink_profileIn(timeData,nodesData,yearsToCalc,sourcesink_techs,commodity,pc_sourcesink_profile)
6467            / timeLength(timeModelToCalc));
6468  option clear = sourcesink_profileIn;
6469   
6470  * sum up absolute profiles
6471  parameter sourcesink_profile(timeModel,nodesModel,years,sourcesink_techs,commodity,pc_sourcesink_profile);
6472  sourcesink_profile(timeModelToCalc,nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity,pc_sourcesink_profile)
6473      $sourcesink_usesProfile(nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity,pc_sourcesink_profile)
6474      = sum(nodesData$aggregateNodesModel(nodesData,nodesModelToCalc),
6475              sourcesink_profileIn_aggTime(timeModelToCalc,nodesData,yearsToCalc,sourcesink_techs,commodity,pc_sourcesink_profile));
6476  option clear = sourcesink_profileIn_aggTime;
6477   
6478  set sourcesink_enabled(nodesModel,years,sourcesink_techs,commodity);
6479  option sourcesink_enabled < sourcesink_config;
6480   
6481   
6482  * ==== declaration of variables ====
6483  * // ## Bounding of variables
6484  * // Source-sink variables with either a lower, fixed, or upper profile are bounded to their respective profiles given by the input parameters.
6485   
6486  sourcesink_flow.lo(timeModelToCalc,nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity)
6487      $( sourcesink_enabled(nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity)
6488          and sourcesink_config(nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity,"usesLowerProfile") = 1
6489          and sourcesink_profile(timeModelToCalc,nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity,"lower") > -inf )
6490      = sourcesink_profile(timeModelToCalc,nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity,"lower");
6491   
6492  sourcesink_flow.up(timeModelToCalc,nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity)
6493      $( sourcesink_enabled(nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity)
6494          and sourcesink_config(nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity,"usesUpperProfile") = 1
6495          and sourcesink_profile(timeModelToCalc,nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity,"upper") < inf )
6496      = sourcesink_profile(timeModelToCalc,nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity,"upper");
6497   
6498  sourcesink_flow.fx(timeModelToCalc,nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity)
6499      $( sourcesink_enabled(nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity)
6500          and sourcesink_config(nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity,"usesFixedProfile") = 1 )
6501      = sourcesink_profile(timeModelToCalc,nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity,"fixed");
6502   
6503  option clear = sourcesink_profile;
6504   
6505   
6506  * ==== equation definition ====
6507  * // ## Equations
6508  equations
6509  Eq_sourcesink_useFixedSum(nodesModel,years,sourcesink_techs,commodity
6510      ) "Fixes the annual sum from sources / to sinks"
6511  Eq_sourcesink_useLowerSum(nodesModel,years,sourcesink_techs,commodity
6512      ) "Limits the lower sum from sources / to sinks"
6513  Eq_sourcesink_useUpperSum(nodesModel,years,sourcesink_techs,commodity
6514      ) "Limits the upper sum from sources / to sinks"
6515    ;
6516   
6517  * // ### Fixed annual sums for sources and sinks
6518  * // Ensures that the sources and sinks with annual sums given as fixed limits are balanced.
6519  * // {Eq_sourcesink_useFixedSum}
6520  Eq_sourcesink_useFixedSum(nodesModelSel,yearsSel,sourcesink_techs,commodity)
6521      $( sourcesink_enabled(nodesModelSel,yearsSel,sourcesink_techs,commodity)
6522          and sourcesink_config(nodesModelSel,yearsSel,sourcesink_techs,commodity,"usesFixedSum") = 1 )
6523      ..
6524      sum(timeModelSel,
6525          sourcesink_flow(timeModelSel,nodesModelSel,yearsSel,sourcesink_techs,commodity))
6526      =e=
6527      sourcesink_annualSum(nodesModelSel,yearsSel,sourcesink_techs,commodity,"fixed")
6528      ;
6529   
6530  * // ### Lower annual sums for sources and sinks
6531  * // Ensures that the sources and sinks with annual sums given as lower limits are balanced.
6532  * // {Eq_sourcesink_useLowerSum}
6533  Eq_sourcesink_useLowerSum(nodesModelSel,yearsSel,sourcesink_techs,commodity)
6534      $( sourcesink_enabled(nodesModelSel,yearsSel,sourcesink_techs,commodity)
6535          and sourcesink_config(nodesModelSel,yearsSel,sourcesink_techs,commodity,"usesLowerSum") = 1
6536          and sourcesink_annualSum(nodesModelSel,yearsSel,sourcesink_techs,commodity,"lower") > -inf )
6537      ..
6538      sum(timeModelSel,
6539          sourcesink_flow(timeModelSel,nodesModelSel,yearsSel,sourcesink_techs,commodity))
6540      =g=
6541      sourcesink_annualSum(nodesModelSel,yearsSel,sourcesink_techs,commodity,"lower")
6542      ;
6543   
6544  * // ### Upper annual sums for sources and sinks
6545  * // Ensures that the sources and sinks with annual sums given as upper limits are balanced.
6546  * // {Eq_sourcesink_useUpperSum}
6547  Eq_sourcesink_useUpperSum(nodesModelSel,yearsSel,sourcesink_techs,commodity)
6548      $( sourcesink_enabled(nodesModelSel,yearsSel,sourcesink_techs,commodity)
6549          and sourcesink_config(nodesModelSel,yearsSel,sourcesink_techs,commodity,"usesUpperSum") = 1
6550          and sourcesink_annualSum(nodesModelSel,yearsSel,sourcesink_techs,commodity,"upper") < inf )
6551      ..
6552      sum(timeModelSel,
6553          sourcesink_flow(timeModelSel,nodesModelSel,yearsSel,sourcesink_techs,commodity))
6554      =l=
6555      sourcesink_annualSum(nodesModelSel,yearsSel,sourcesink_techs,commodity,"upper")
6556      ;
6557   
6558   
6559  * ==== model definition ====
6560   
6561  Model M_sourcesink
6562  /
6563    Eq_sourcesink_useFixedSum
6564    Eq_sourcesink_useLowerSum
6565    Eq_sourcesink_useUpperSum
6566  /;
INCLUDE    C:\Local\REMix\framework\remix\framework\model\source\core\balance.gms
6568  * SPDX-FileCopyrightText: Copyright (c) 2023 German Aerospace Center (DLR)
6569  * SPDX-License-Identifier: BSD-3-Clause
6570   
6571  * // # balance
6572  * // The equations in this file describe the commodity balancing in the model.
6573   
6574  Equations
6575    Eq_balance_commodities(timeModel,nodesModel,years,commodity
6576      ) "Balance for each commodity used in each time step, region, and year";
6577   
6578   
6579  * ==== calculation of mappings ====
6580   
6581  set balance_techComm(techs,commodity);
6582  balance_techComm(converter_techs(techs),commodity)
6583      $sum((vintage,activity)$converter_coefficient(converter_techs,vintage,activity,commodity,"coefficient"), 1) = yes;
6584  balance_techComm(storage_techs(techs),commodity)
6585      $sum((vintage)$storage_sizeParam(storage_techs,vintage,commodity,"size"), 1) = yes;
6586  balance_techComm(transfer_techs(techs),commodity)
6587      $sum((vintage)$transfer_coefficient(transfer_techs,vintage,commodity,"coefficient"), 1) = yes;
6588  balance_techComm(sourcesink_techs(techs),commodity)
6589      $sum((nodesModelToCalc,yearsToCalc)$sourcesink_enabled(nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity), 1) = yes;
6590   
6591  set balance_usedConverter(nodesModel,years,commodity);
6592  set balance_usedStorage(nodesModel,years,commodity);
6593  set balance_usedTransfer(nodesModel,years,commodity);
6594  set balance_usedSourceSink(nodesModel,years,commodity);
6595  set balance_usedBalance(nodesModel,years,commodity);
6596   
6597  balance_usedConverter(nodesModel,years,commodity)
6598      = sum ((converter_techs,vintage,activity)
6599              $( converter_coefficient(converter_techs,vintage,activity,commodity,"coefficient") <> 0
6600                  and converter_usedTech(nodesModel,years,converter_techs,vintage) ), 1);
6601   
6602  balance_usedStorage(nodesModel,years,commodity)
6603      = sum ((storage_techs,vintage,activity)
6604              $(storage_sizeParam(storage_techs,vintage,commodity,"size") <> 0
6605                  and storage_usedTech(nodesModel,years,storage_techs,vintage) ), 1);
6606   
6607  balance_usedTransfer(nodesModel,years,commodity)
6608      = sum ((linksModel,transfer_techs,vintage)
6609              $(transfer_coefficient(transfer_techs,vintage,commodity,"coefficient") <> 0
6610                  and transfer_incidenceModel(nodesModel,linksModel) <> 0), 1);
6611   
6612  option balance_usedSourceSink < sourcesink_enabled;
6613   
6614  balance_usedBalance(nodesModel,years,commodity)
6615      $(balance_usedConverter(nodesModel,years,commodity)
6616          or balance_usedStorage(nodesModel,years,commodity)
6617          or balance_usedTransfer(nodesModel,years,commodity)
6618          or balance_usedSourceSink(nodesModel,years,commodity) )
6619      = yes;
6620   
6621   
6622  * ==== equation definition ====
6623   
6624  * // ### Balance commodities
6625  * // Balancing of commodities for all model regions, time steps, and years
6626  * // {Eq_balance_commodities}
6627  Eq_balance_commodities(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,commodity)
6628      $balance_usedBalance(nodesModelSel,yearsSel,commodity)
6629      ..
6630  * converter
6631      sum((converter_techs,vintage,activity)
6632              $( converter_coefficientProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity,commodity) <> 0
6633                  AND converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage) ),
6634          converter_activity(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity)
6635              * converter_coefficientProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity,commodity)
6636              * timeLength(timeModelSel)
6637          + converter_unitsUsingActivity_MIP(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity)
6638              * converter_coefficient(converter_techs,vintage,activity,commodity,"constant")
6639              * timeLength(timeModelSel))
6640   
6641  * storages
6642      + sum((storage_techs,vintage)
6643              $( storage_sizeParam(storage_techs,vintage,commodity,"size") <> 0
6644                  and storage_usedTech(nodesModelSel,yearsSel,storage_techs,vintage) ),
6645          storage_level(timeModelToCalc--1,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
6646          - storage_level(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
6648          - storage_losses(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
6649          * timeLength(timeModelSel)
6651          )
6652   
6653  * transfer
6654      + sum((linksModel,transfer_techs,vintage)
6655              $(transfer_usedTech(linksModel,yearsSel,transfer_techs,vintage)
6656                  and linksModelToCalc(linksModel)),
6657          (   transfer_flowAlong(timeModelSel,linksModel,yearsSel,transfer_techs,vintage)
6658                  $(transfer_incidenceModel(nodesModelSel,linksModel) > 0)
6659            + transfer_flowAgainst(timeModelSel,linksModel,yearsSel,transfer_techs,vintage)
6660                  $(transfer_incidenceModel(nodesModelSel,linksModel) < 0) )
6661          * transfer_coefficient(transfer_techs,vintage,commodity,"coefficient")
6662          * timeLength(timeModelSel))
6663   
6664      - sum((linksModel,transfer_techs,vintage)
6665              $(transfer_usedTech(linksModel,yearsSel,transfer_techs,vintage)
6666                  and linksModelToCalc(linksModel)),
6667          (   transfer_flowAlong(timeModelSel,linksModel,yearsSel,transfer_techs,vintage)
6668                  $(transfer_incidenceModel(nodesModelSel,linksModel) < 0)
6669            + transfer_flowAgainst(timeModelSel,linksModel,yearsSel,transfer_techs,vintage)
6670                  $(transfer_incidenceModel(nodesModelSel,linksModel) > 0) )
6671          * transfer_coefficient(transfer_techs,vintage,commodity,"coefficient")
6672          * timeLength(timeModelSel))
6673   
6674      + 0.5 * sum((linksModel,transfer_techs,vintage)
6675              $(transfer_usedTech(linksModel,yearsSel,transfer_techs,vintage)
6676                  AND linksModelToCalc(linksModel)),
6677          (   transfer_flowAlong(timeModelSel,linksModel,yearsSel,transfer_techs,vintage)
6678                  $(transfer_incidenceModel(nodesModelSel,linksModel) <> 0)
6679            + transfer_flowAgainst(timeModelSel,linksModel,yearsSel,transfer_techs,vintage)
6680                  $(transfer_incidenceModel(nodesModelSel,linksModel) <> 0) )
6681          * timeLength(timeModelSel)
6682          * ( transfer_coefPerFlow(transfer_techs,vintage,commodity,"coefPerFlow")
6683              + sum(link_types,
6684                  transfer_coefPerLength(transfer_techs,vintage,commodity,link_types,"coefPerLength")
6685                  * transfer_lengthParam(linksModel,link_types,"length"))))
6686   
6687  * sourcesink
6688      + sum((sourcesink_techs)
6689              $sourcesink_enabled(nodesModelSel,yearsSel,sourcesink_techs,commodity),
6690          sourcesink_flow(timeModelSel,nodesModelSel,yearsSel,sourcesink_techs,commodity)
6691          * timeLength(timeModelSel))
6692      =e=
6693      0;
6694   
6695   
6696  * ==== model definition ====
6697   
6698  Model M_balance
6699  /
6700    Eq_balance_commodities
6701  /;
6702   
INCLUDE    C:\Local\REMix\framework\remix\framework\model\source\accounting\equations.gms
6704  * SPDX-FileCopyrightText: Copyright (c) 2023 German Aerospace Center (DLR)
6705  * SPDX-License-Identifier: BSD-3-Clause
6706   
6707  * // # accounting_equations
6708   
6709  * ==== declaration of variables ====
6710   
6711  variables
6712  accounting_indicator(accNodesModel,accYears,indicator)
6713  accounting_indicator_links(linksModel,years,indicator)
6714  accounting_objective
6715    ;
6716   
6717   
6718  * ==== definition of variables ====
6719   
6720  * set the variable levels to be fixed for years before the optimization years
6721  accounting_indicator.l(accNodesModel,accYears,indicator)
6722      $activeIndicators(accNodesModel,accYears,indicator)
6723      = 0;
6724   
6725  accounting_indicator.lo(accNodesModel,accYears,indicator)
6726      $(accounting_indicatorBounds(accNodesModel,accYears,indicator,"useLower") <> 0 )
6727      = accounting_indicatorBounds(accNodesModel,accYears,indicator,"lowerValue");
6728   
6729  accounting_indicator.up(accNodesModel,accYears,indicator)
6730      $(accounting_indicatorBounds(accNodesModel,accYears,indicator,"useUpper") <> 0 )
6731      = accounting_indicatorBounds(accNodesModel,accYears,indicator,"upperValue");
6732   
6733  accounting_indicator.fx(accNodesModel,accYears,indicator)
6734      $(accounting_indicatorBounds(accNodesModel,accYears,indicator,"useFixed") <> 0 )
6735      = accounting_indicatorBounds(accNodesModel,accYears,indicator,"fixedValue");
6736   
6737   
6738  accounting_indicator_links.lo(linksModelToCalc,yearsToCalc,indicator)
6739      $(accounting_indicatorBounds_links(linksModelToCalc,yearsToCalc,indicator,"useLower") <> 0 )
6740      = accounting_indicatorBounds_links(linksModelToCalc,yearsToCalc,indicator,"lowerValue");
6741   
6742  accounting_indicator_links.up(linksModelToCalc,yearsToCalc,indicator)
6743      $(accounting_indicatorBounds_links(linksModelToCalc,yearsToCalc,indicator,"useUpper") <> 0 )
6744      = accounting_indicatorBounds_links(linksModelToCalc,yearsToCalc,indicator,"upperValue");
6745   
6746  accounting_indicator_links.fx(linksModelToCalc,yearsToCalc,indicator)
6747      $(accounting_indicatorBounds_links(linksModelToCalc,yearsToCalc,indicator,"useFixed") <> 0 )
6748      = accounting_indicatorBounds_links(linksModelToCalc,yearsToCalc,indicator,"fixedValue");
6749   
6750   
6751  * ==== declaration of equations ====
6752   
6753  equations
6754  Eq_accounting_indicatorCalc(accNodesModel,accYears,indicator
6755      ) "Calculates the level of an indicator per accounting region"
6756  Eq_accounting_indicatorCalc_links(linksModel,years,indicator
6757      ) "Calculates the level of an indicator per model link"
6758  Eq_accounting_objective "Calculates the objective value based on the specified indicator"
6759    ;
6760   
6761   
6762  * ==== equations definition ====
6763  * // ## Equations
6764  * // ### Accounting Indicator Calculation
6765  * // Calculates the indicators for each model node for converters, sources and sinks, transfer, storage and variable indicators.
6766  * // {Eq_accounting_indicatorCalc}
6767  Eq_accounting_indicatorCalc(accNodesModel,accYearsSel(accYears),indicator)
6768      $activeIndicators(accNodesModel,accYears,indicator)
6769      ..
6770      accounting_indicator(accNodesModel,accYears,indicator)
6771      =e=
6772   
6773  * == variable indicators ==
6774      sum((accNodesModel_a,accYears_a,indicator_a)
6775          $(compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
6776              and variableIndicators(accNodesModel_a,accYears_a,indicator_a)),
6777          compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
6778          * accounting_indicator(accNodesModel_a,accYears_a,indicator_a))
6779   
6780  * == converters ==
6781      + sum ((accNodesModel_a,nodesModelSel,accYears_a,yearsSel,indicator_a)
6782              $( compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
6783                  and sameas(nodesModelSel,accNodesModel_a) and sameas(yearsSel,accYears_a)),
6784          compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
6785          *
6786          ( sum ((converter_techs,vintage)
6787                      $(converter_availTech(nodesModelSel,yearsSel,converter_techs,vintage)
6788                          and accounting_converterUnits(indicator_a,nodesModelSel,converter_techs,vintage,"useAnnuity") = 0),
6789              converter_unitsBuild(nodesModelSel,yearsSel,converter_techs,vintage)
6790              * accounting_converterUnits(indicator_a,nodesModelSel,converter_techs,vintage,"perUnitBuild"))
6791   
6792          + sum ((years_a,converter_techs,vintage)
6793                      $(converter_availTech(nodesModelSel,years_a,converter_techs,vintage)
6794                          and years_a.val < sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
6795                          and accounting_converterUnits(indicator_a,nodesModelSel,converter_techs,vintage,"useAnnuity") = 1
6796                          and years_a.val + accounting_converterUnits(indicator_a,nodesModelSel,converter_techs,vintage,"amorTime") > yearsSel.val
6797                          and years_a.val <= yearsSel.val ),
6798              converter_unitsBuild(nodesModelSel,years_a,converter_techs,vintage)
6799              * accounting_converterUnits(indicator_a,nodesModelSel,converter_techs,vintage,"perUnitBuild")
6800              * accounting_annuityFactor_converter(indicator_a,nodesModelSel,converter_techs,vintage) )
6801   
6802          + sum ((yearsToCalc,converter_techs,vintage)
6803                      $(converter_availTech(nodesModelSel,yearsToCalc,converter_techs,vintage)
6804                          and yearsToCalc.val >= sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
6805                          and accounting_converterUnits(indicator_a,nodesModelSel,converter_techs,vintage,"useAnnuity") = 1
6806                          and yearsToCalc.val + accounting_converterUnits(indicator_a,nodesModelSel,converter_techs,vintage,"amorTime") > yearsSel.val
6807                          and yearsToCalc.val <= yearsSel.val ),
6808              converter_unitsBuild(nodesModelSel,yearsToCalc,converter_techs,vintage)
6809              * accounting_converterUnits(indicator_a,nodesModelSel,converter_techs,vintage,"perUnitBuild")
6810              * accounting_annuityFactor_converter(indicator_a,nodesModelSel,converter_techs,vintage) )
6811   
6812          + sum ((converter_techs,vintage)
6813                      $converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage),
6814              converter_unitsDecom(nodesModelSel,yearsSel,converter_techs,vintage)
6815              * accounting_converterUnits(indicator_a,nodesModelSel,converter_techs,vintage,"perUnitDecom")
6816   
6817              + converter_unitsTotal(nodesModelSel,yearsSel,converter_techs,vintage)
6818              * accounting_converterUnits(indicator_a,nodesModelSel,converter_techs,vintage,"perUnitTotal") )
6819   
6820          + sum ((timeModelSel,converter_techs,vintage,activity)
6821                      $converter_usedTechAct(nodesModelSel,yearsSel,converter_techs,vintage,activity),
6822              converter_activity(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity)
6823              * timeLength(timeModelSel)
6824              * accounting_converterActivity(indicator_a,nodesModelSel,converter_techs,vintage,activity,"perActivity") )
6825   
6826          + sum ((timeModelSel,converter_techs,vintage)
6827                      $converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage),
6828              converter_unitStartups(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
6829              * accounting_converterStartup(indicator_a,nodesModelSel,converter_techs,vintage,"perStartup") )
6830   
6831          + sum ((timeModelSel,converter_techs,vintage)
6832                      $converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage),
6833              converter_rampPos(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
6834              * (accounting_converterStartup(indicator_a,nodesModelSel,converter_techs,vintage,"perRamp")
6835                 + accounting_converterStartup(indicator_a,nodesModelSel,converter_techs,vintage,"perRampPos"))
6836   
6837              + converter_rampNeg(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
6838              * (accounting_converterStartup(indicator_a,nodesModelSel,converter_techs,vintage,"perRamp")
6839                 + accounting_converterStartup(indicator_a,nodesModelSel,converter_techs,vintage,"perRampNeg")))
6840          )
6841      )
6842   
6843  * == storage ==
6844      + sum ((accNodesModel_a,nodesModelSel,accYears_a,yearsSel,indicator_a)
6845              $( compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
6846                  and sameas(nodesModelSel,accNodesModel_a) and sameas(yearsSel,accYears_a)),
6847          compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
6848          *
6849          ( sum ((storage_techs,vintage)
6850                      $(storage_availTech(nodesModelSel,yearsSel,storage_techs,vintage)
6851                          and accounting_storageUnits(indicator_a,nodesModelSel,storage_techs,vintage,"useAnnuity") = 0),
6852              storage_unitsBuild(nodesModelSel,yearsSel,storage_techs,vintage)
6853              * accounting_storageUnits(indicator_a,nodesModelSel,storage_techs,vintage,"perUnitBuild") )
6854   
6855          + sum ((years_a,storage_techs,vintage)
6856                      $(storage_availTech(nodesModelSel,years_a,storage_techs,vintage)
6857                          and years_a.val < sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
6858                          and accounting_storageUnits(indicator_a,nodesModelSel,storage_techs,vintage,"useAnnuity") = 1
6859                          and years_a.val + accounting_storageUnits(indicator_a,nodesModelSel,storage_techs,vintage,"amorTime") > yearsSel.val
6860                          and years_a.val <= yearsSel.val ),
6861              storage_unitsBuild(nodesModelSel,years_a,storage_techs,vintage)
6862              * accounting_storageUnits(indicator_a,nodesModelSel,storage_techs,vintage,"perUnitBuild")
6863              * accounting_annuityFactor_storage(indicator_a,nodesModelSel,storage_techs,vintage) )
6864   
6865          + sum ((yearsToCalc,storage_techs,vintage)
6866                      $(storage_availTech(nodesModelSel,yearsToCalc,storage_techs,vintage)
6867                          and yearsToCalc.val >= sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
6868                          and accounting_storageUnits(indicator_a,nodesModelSel,storage_techs,vintage,"useAnnuity") = 1
6869                          and yearsToCalc.val + accounting_storageUnits(indicator_a,nodesModelSel,storage_techs,vintage,"amorTime") > yearsSel.val
6870                          and yearsToCalc.val <= yearsSel.val ),
6871              storage_unitsBuild(nodesModelSel,yearsToCalc,storage_techs,vintage)
6872              * accounting_storageUnits(indicator_a,nodesModelSel,storage_techs,vintage,"perUnitBuild")
6873              * accounting_annuityFactor_storage(indicator_a,nodesModelSel,storage_techs,vintage) )
6874   
6875          + sum ((storage_techs,vintage)
6876                      $storage_usedTech(nodesModelSel,yearsSel,storage_techs,vintage),
6877              storage_unitsDecom(nodesModelSel,yearsSel,storage_techs,vintage)
6878              * accounting_storageUnits(indicator_a,nodesModelSel,storage_techs,vintage,"perUnitDecom")
6879   
6880              + storage_unitsTotal(nodesModelSel,yearsSel,storage_techs,vintage)
6881              * accounting_storageUnits(indicator_a,nodesModelSel,storage_techs,vintage,"perUnitTotal") )
6882          )
6883      )
6884   
6885   
6886  * == transfer ==
6887      + sum ((accNodesModel_a,nodesModelSel,accYears_a,yearsSel,indicator_a)
6888              $( compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
6889                  and sameas(nodesModelSel,accNodesModel_a) and sameas(yearsSel,accYears_a)),
6890          compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
6891          *
6892          ( sum ((linksModelToCalc,transfer_techs,vintage)
6893                      $(transfer_availTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
6894                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0
6895                          and accounting_transferLinks(indicator_a,linksModelToCalc,transfer_techs,vintage,"useAnnuity") = 0),
6896              0.5
6897              * transfer_linksBuild(linksModelToCalc,yearsSel,transfer_techs,vintage)
6898              * accounting_transferLinks(indicator_a,linksModelToCalc,transfer_techs,vintage,"perLinkBuild") )
6899   
6900          + sum ((linksModelToCalc,years_a,transfer_techs,vintage)
6901                      $(transfer_availTech(linksModelToCalc,years_a,transfer_techs,vintage)
6902                          and years_a.val < sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
6903                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0
6904                          and accounting_transferLinks(indicator_a,linksModelToCalc,transfer_techs,vintage,"useAnnuity") = 1
6905                          and years_a.val + accounting_transferLinks(indicator_a,linksModelToCalc,transfer_techs,vintage,"amorTime") > yearsSel.val
6906                          and years_a.val <= yearsSel.val ),
6907              0.5
6908              * transfer_linksBuild(linksModelToCalc,years_a,transfer_techs,vintage)
6909              * accounting_transferLinks(indicator_a,linksModelToCalc,transfer_techs,vintage,"perLinkBuild")
6910              * accounting_annuityFactor_transferLink(indicator_a,linksModelToCalc,transfer_techs,vintage) )
6911   
6912          + sum ((linksModelToCalc,yearsToCalc,transfer_techs,vintage)
6913                      $(transfer_availTech(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
6914                          and yearsToCalc.val >= sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
6915                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0
6916                          and accounting_transferLinks(indicator_a,linksModelToCalc,transfer_techs,vintage,"useAnnuity") = 1
6917                          and yearsToCalc.val + accounting_transferLinks(indicator_a,linksModelToCalc,transfer_techs,vintage,"amorTime") > yearsSel.val
6918                          and yearsToCalc.val <= yearsSel.val ),
6919              0.5
6920              * transfer_linksBuild(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
6921              * accounting_transferLinks(indicator_a,linksModelToCalc,transfer_techs,vintage,"perLinkBuild")
6922              * accounting_annuityFactor_transferLink(indicator_a,linksModelToCalc,transfer_techs,vintage) )
6923   
6924          + sum ((linksModelToCalc,transfer_techs,vintage,link_types)
6925                      $(transfer_availTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
6926                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0
6927                          and accounting_transferPerLength(indicator_a,linksModelToCalc,transfer_techs,vintage,link_types,"useAnnuity") = 0 ),
6928              0.5
6929              * transfer_linksBuild(linksModelToCalc,yearsSel,transfer_techs,vintage)
6930              * transfer_lengthParam(linksModelToCalc,link_types,"length")
6931              * accounting_transferPerLength(indicator_a,linksModelToCalc,transfer_techs,vintage,link_types,"perLengthBuild") )
6932   
6933          + sum ((linksModelToCalc,years_a,transfer_techs,vintage,link_types)
6934                      $(transfer_availTech(linksModelToCalc,years_a,transfer_techs,vintage)
6935                          and years_a.val < sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
6936                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0
6937                          and accounting_transferPerLength(indicator_a,linksModelToCalc,transfer_techs,vintage,link_types,"useAnnuity") = 1
6938                          and years_a.val + accounting_transferPerLength(indicator_a,linksModelToCalc,transfer_techs,vintage,link_types,"amorTime") > yearsSel.val
6939                          and years_a.val <= yearsSel.val ),
6940              0.5
6941              * transfer_linksBuild(linksModelToCalc,years_a,transfer_techs,vintage)
6942              * transfer_lengthParam(linksModelToCalc,link_types,"length")
6943              * accounting_transferPerLength(indicator_a,linksModelToCalc,transfer_techs,vintage,link_types,"perLengthBuild")
6944              * accounting_annuityFactor_transferDistance(indicator_a,linksModelToCalc,transfer_techs,vintage,link_types) )
6945   
6946          + sum ((linksModelToCalc,yearsToCalc,transfer_techs,vintage,link_types)
6947                      $(transfer_availTech(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
6948                          and yearsToCalc.val >= sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
6949                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0
6950                          and accounting_transferPerLength(indicator_a,linksModelToCalc,transfer_techs,vintage,link_types,"useAnnuity") = 1
6951                          and yearsToCalc.val + accounting_transferPerLength(indicator_a,linksModelToCalc,transfer_techs,vintage,link_types,"amorTime") > yearsSel.val
6952                          and yearsToCalc.val <= yearsSel.val ),
6953              0.5
6954              * transfer_linksBuild(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
6955              * transfer_lengthParam(linksModelToCalc,link_types,"length")
6956              * accounting_transferPerLength(indicator_a,linksModelToCalc,transfer_techs,vintage,link_types,"perLengthBuild")
6957              * accounting_annuityFactor_transferDistance(indicator_a,linksModelToCalc,transfer_techs,vintage,link_types) )
6958   
6959          + sum ((linksModelToCalc,transfer_techs,vintage)
6960                      $(transfer_usedTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
6961                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0 ),
6962              0.5
6963              * transfer_linksDecom(linksModelToCalc,yearsSel,transfer_techs,vintage)
6964              * accounting_transferLinks(indicator_a,linksModelToCalc,transfer_techs,vintage,"perLinkDecom")
6965   
6966              + 0.5
6967              * transfer_linksTotal(linksModelToCalc,yearsSel,transfer_techs,vintage)
6968              * accounting_transferLinks(indicator_a,linksModelToCalc,transfer_techs,vintage,"perLinkTotal")
6969   
6970              + 0.5
6971              * sum (link_types,
6972                  transfer_linksDecom(linksModelToCalc,yearsSel,transfer_techs,vintage)
6973                  * transfer_lengthParam(linksModelToCalc,link_types,"length")
6974                  * accounting_transferPerLength(indicator_a,linksModelToCalc,transfer_techs,vintage,link_types,"perLengthDecom")
6975   
6976                  + transfer_linksTotal(linksModelToCalc,yearsSel,transfer_techs,vintage)
6977                  * transfer_lengthParam(linksModelToCalc,link_types,"length")
6978                  * accounting_transferPerLength(indicator_a,linksModelToCalc,transfer_techs,vintage,link_types,"perLengthTotal"))
6979   
6980              + 0.5
6981              * sum (timeModelSel,
6982                  transfer_flowAlong(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
6983                  * timeLength(timeModelSel)
6984                  * ( accounting_transferLinks(indicator_a,linksModelToCalc,transfer_techs,vintage,"perFlow")
6985                      + accounting_transferLinks(indicator_a,linksModelToCalc,transfer_techs,vintage,"perFlowAlong"))
6986   
6987                  + transfer_flowAgainst(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
6988                  * timeLength(timeModelSel)
6989                  * ( accounting_transferLinks(indicator_a,linksModelToCalc,transfer_techs,vintage,"perFlow")
6990                      + accounting_transferLinks(indicator_a,linksModelToCalc,transfer_techs,vintage,"perFlowAgainst")))
6991   
6992              + 0.5
6993              * sum ((timeModelSel, link_types),
6994                  transfer_flowAlong(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
6995                  * timeLength(timeModelSel)
6996                  * transfer_lengthParam(linksModelToCalc,link_types,"length")
6997                  * (accounting_transferPerLength(indicator_a,linksModelToCalc,transfer_techs,vintage,link_types,"perFlow")
6998                      + accounting_transferPerLength(indicator_a,linksModelToCalc,transfer_techs,vintage,link_types,"perFlowAlong"))
6999   
7000                  + transfer_flowAgainst(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
7001                  * timeLength(timeModelSel)
7002                  * transfer_lengthParam(linksModelToCalc,link_types,"length")
7003                  * (accounting_transferPerLength(indicator_a,linksModelToCalc,transfer_techs,vintage,link_types,"perFlow")
7004                      + accounting_transferPerLength(indicator_a,linksModelToCalc,transfer_techs,vintage,link_types,"perFlowAgainst")))
7005              )
7006          )
7007      )
7008   
7009   
7010  * == sources / sinks ==
7011      + sum ((accNodesModel_a,nodesModelSel,accYears_a,yearsSel,indicator_a)
7012              $( compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
7013                  and sameas(nodesModelSel,accNodesModel_a) and sameas(yearsSel,accYears_a)),
7014          compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
7015          *
7016          sum ((timeModelSel,sourcesink_techs,commodity)
7017                  $sourcesink_enabled(nodesModelSel,yearsSel,sourcesink_techs,commodity),
7018              sourcesink_flow(timeModelSel,nodesModelSel,yearsSel,sourcesink_techs,commodity)
7019              * timeLength(timeModelSel)
7020              * accounting_sourcesinkFlow(indicator_a,nodesModelSel,yearsSel,sourcesink_techs,commodity,"perFlow") )
7021      );
7022   
7023  * // ### Accounting Indicator Calculation Links
7024  * // Calculates the indicators for each transfer for converters, sources and sinks, transfer, storage and variable indicators.
7025  * // {Eq_accounting_indicatorCalc_links}
7026  Eq_accounting_indicatorCalc_links(linksModelToCalc,yearsSel,indicator)
7027      $activeIndicators_links(linksModelToCalc,yearsSel,indicator)
7028      ..
7029      accounting_indicator_links(linksModelToCalc,yearsSel,indicator)
7030      =e=
7031      sum ((transfer_techs,vintage)
7032                  $(transfer_availTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
7033                      and accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"useAnnuity") = 0),
7034          transfer_linksBuild(linksModelToCalc,yearsSel,transfer_techs,vintage)
7035          * accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"perLinkBuild") )
7036   
7037      + sum ((years_a,transfer_techs,vintage)
7038                  $(transfer_availTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
7039                      and accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"useAnnuity") = 1
7040                      and years_a.val + accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"amorTime") > yearsSel.val
7041                      and years_a.val <= yearsSel.val ),
7042          transfer_linksBuild(linksModelToCalc,years_a,transfer_techs,vintage)
7043          * accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"perLinkBuild")
7044          * accounting_annuityFactor_transferLink(indicator,linksModelToCalc,transfer_techs,vintage) )
7045   
7046      + sum ((transfer_techs,vintage,link_types)
7047                  $(transfer_availTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
7048                      and accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"useAnnuity") = 0 ),
7049          transfer_linksBuild(linksModelToCalc,yearsSel,transfer_techs,vintage)
7050          * transfer_lengthParam(linksModelToCalc,link_types,"length")
7051          * accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"perLengthBuild") )
7052   
7053      + sum ((years_a,transfer_techs,vintage,link_types)
7054                  $(transfer_availTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
7055                      and accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"useAnnuity") = 1
7056                      and years_a.val + accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"amorTime") > yearsSel.val
7057                      and years_a.val <= yearsSel.val ),
7058          transfer_linksBuild(linksModelToCalc,years_a,transfer_techs,vintage)
7059          * transfer_lengthParam(linksModelToCalc,link_types,"length")
7060          * accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"perLengthBuild")
7061          * accounting_annuityFactor_transferDistance(indicator,linksModelToCalc,transfer_techs,vintage,link_types) )
7062   
7063      + sum ((transfer_techs,vintage)
7064                  $(transfer_usedTech(linksModelToCalc,yearsSel,transfer_techs,vintage)),
7065          transfer_linksDecom(linksModelToCalc,yearsSel,transfer_techs,vintage)
7066          * accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"perLinkDecom")
7067   
7068          + transfer_linksTotal(linksModelToCalc,yearsSel,transfer_techs,vintage)
7069          * accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"perLinkTotal")
7070   
7071          + sum (link_types,
7072              transfer_linksDecom(linksModelToCalc,yearsSel,transfer_techs,vintage)
7073              * transfer_lengthParam(linksModelToCalc,link_types,"length")
7074              * accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"perLengthDecom")
7075   
7076              + transfer_linksTotal(linksModelToCalc,yearsSel,transfer_techs,vintage)
7077              * transfer_lengthParam(linksModelToCalc,link_types,"length")
7078              * accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"perLengthTotal"))
7079   
7080          + sum (timeModelSel,
7081              transfer_flowAlong(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
7082              * timeLength(timeModelSel)
7083              * ( accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"perFlow")
7084                  + accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"perFlowAlong"))
7085   
7086              + transfer_flowAgainst(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
7087              * timeLength(timeModelSel)
7088              * ( accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"perFlow")
7089                  + accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"perFlowAgainst")))
7090   
7091          + sum ((timeModelSel, link_types),
7092              transfer_flowAlong(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
7093              * timeLength(timeModelSel)
7094              * transfer_lengthParam(linksModelToCalc,link_types,"length")
7095              * (accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"perFlow")
7096                  + accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"perFlowAlong"))
7097   
7098              + transfer_flowAgainst(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
7099              * timeLength(timeModelSel)
7100              * transfer_lengthParam(linksModelToCalc,link_types,"length")
7101              * (accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"perFlow")
7102                  + accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"perFlowAgainst")))
7103          );
7104   
7105  * // ### Accounting Objective
7106  * // Calculates the indicators for the objective.
7107  * // {Eq_accounting_objective}
7108  Eq_accounting_objective
7109      ..
7110      accounting_objective
7111      =e=
7112      sum ((accNodesModel,accYears,indicator)
7113              $(accounting_indicatorBounds(accNodesModel,accYears,indicator,"obj") <> 0 ),
7114          accounting_indicator(accNodesModel,accYears,indicator) )
7115   
7116   
7117  * ==== model definition ====
7118   
7119  Model M_accounting
7120  /
7121  Eq_accounting_indicatorCalc_links
7122  Eq_accounting_indicatorCalc
7123  Eq_accounting_objective
7124  /;
INCLUDE    C:\Local\REMix\framework\remix\framework\model\source\optiframe.gms
7126  * SPDX-FileCopyrightText: Copyright (c) 2023 German Aerospace Center (DLR)
7127  * SPDX-License-Identifier: BSD-3-Clause
7128   
7129  * ==== optimization frames ====
7131   
7132  * mapping from optimization frame to years
7134  set optiframe / of1 * of1 /;
7135  set optiframeToCalc(optiframe);
7136   
7138  set map_optiframe(optiframe,years) / of1 . #yearsToCalc /;
7140   
7142   
7143  option optiframeToCalc < map_optiframe;
7144   
7145  Model remix /
7146    M_converter
7147    M_storage
7148    M_transfer
7149    M_sourcesink
7150    M_balance
7151    M_accounting
7152  /;
7153   
7154   
7155  * ==== include methods  ====
7156   
7157  * check if the method is valid
7163   
7164   
7165  * if method is pips write the checkanno tool
INCLUDE    C:\Local\REMix\framework\remix\framework\model\source\methods\checkanno.gms
7167  * SPDX-FileCopyrightText: Copyright (c) 2023 German Aerospace Center (DLR)
7168  * SPDX-License-Identifier: BSD-3-Clause
7169   
7172   
7175   
7176  * if method is pips generate the annotated gdx file
INCLUDE    C:\Local\REMix\framework\remix\framework\model\source\methods\pips.gms
7178  * SPDX-FileCopyrightText: Copyright (c) 2023 German Aerospace Center (DLR)
7179  * SPDX-License-Identifier: BSD-3-Clause
7180   
7184   
7185  * if method is solve run the model with commercial solvers
INCLUDE    C:\Local\REMix\framework\remix\framework\model\source\methods\solve.gms
7187  * SPDX-FileCopyrightText: Copyright (c) 2023 German Aerospace Center (DLR)
7188  * SPDX-License-Identifier: BSD-3-Clause
7189   
7192   
7194   
7195  * ==== global options ====
7202   
7203  * ==== general solver options ====
7213   
7214  * ==== cplex options ====
7223   
7224  * ==== copt options ====
7228   
7229  * ==== debug options ====
7232   
7233   
7234  * ==== setup optimization ====
7235  if ((sum(nodesModelToCalc, 1)>40 or sum(timeModelToCalc, 1)>50) and not 0,
7236     option limRow=0, limCol=0, solPrint=off;
7237  else
7238     option limRow=100000, limCol=100000, solPrint=on;
7239  );
7240   
7242   
7243  option mip = cplex;
7244  option reslim = 604800;
7245  option optcr = 1e-3;
7246  remix.threads=4;
7247  remix.optFile = 1;
7248  remix.solveLink = 0;
7249  remix.holdFixed = 1;
7250   
7251   
7252  * ==== configure optionfiles ====
7253   
7255  file opt / "cplex.opt" /;
7256  put opt;
7258  put "rerun no" /;
7260  put "lpmethod 4" /;
7262  put "barorder 0" /;
7263  put "preind 1" /;
7264  put "scaind 0" /;
7265  put "predual -1" /;
7266  put "baralg 0" /;
7267  put "barstartalg 1" /;
7268  put "barepcomp 1e-6" /;
7269  put "solutiontype 2" /;
7270  put "startalg 4" /;
7271  put "epgap 1e-3" /;
7272  put "quality 1" /;
7273  put "barcolnz 0" /;
7274  put "threads 4" /;
7275  put "parallelmode 1" /;
7278  putclose;
7279   
7281   
7282   
7283  * ==== solve the problem ====
7284   
7285  loop ( optiframeToCalc,
7286      yearsSel(years) = no;
7287      yearsSel(years)$map_optiframe(optiframeToCalc,years) = yes;
7288      yearsToFix(years) = no;
7289      yearsToFix(years)$(years.val < smin(years_a$yearsSel(years_a), years_a.val)) = yes;
7290      accYearsSel(accYears) = no;
7291      accYearsSel("horizon") = yes;
7292      accYearsSel(accYears)$(sum(yearsSel$sameas(accYears,yearsSel), 1)) = yes;
7293      accYearsToFix(accYears) = no;
7294      accYearsToFix(accYears)$(sum(years$(sameas(years,accYears) and years.val < smin(years_a$yearsSel(years_a), years_a.val)), 1) > 0) = yes;
7295      timeModelSel(timeModel) = no;
7296      timeModelSel(timeModel)$timeModelToCalc(timeModel) = yes;
7297      nodesModelSel(nodesModel) = no;
7298      nodesModelSel(nodesModel)$nodesModelToCalc(nodesModel) = yes;
7299   
7300  * Fix decision for years previously optimized in case of myopic or foresight
7301      converter_unitsDelta(nodesModelToCalc,yearsToFix,converter_techs)
7302          $(sum(yearsToCalc$sameas(yearsToFix, yearsToCalc), 1))
7303          = sum(vintage, converter_unitsTotal.l(nodesModelToCalc,yearsToFix,converter_techs,vintage))
7304              - converter_capacityParam(nodesModelToCalc,yearsToFix,converter_techs,"unitsUpperLimit");
7305      converter_unitsDelta(nodesModelToCalc,yearsToFix,converter_techs)
7306          $(converter_unitsDelta(nodesModelToCalc,yearsToFix,converter_techs) < 0) = 0;
7307   
7308      converter_unitsBuild.l(nodesModelToCalc,yearsToFix,converter_techs,vintage)
7309          $converter_availTech(nodesModelToCalc,yearsToFix,converter_techs,vintage)
7310          = converter_unitsBuild.l(nodesModelToCalc,yearsToFix,converter_techs,vintage)
7311              - converter_unitsDelta(nodesModelToCalc,yearsToFix,converter_techs);
7312   
7313      converter_unitsBuild.l(nodesModelToCalc,yearsToFix,converter_techs,vintage)
7314          $(converter_unitsBuild.l(nodesModelToCalc,yearsToFix,converter_techs,vintage) < 0) = 0;
7315      converter_unitsBuild.fx(nodesModelToCalc,yearsToFix,converter_techs,vintage)
7316          = converter_unitsBuild.l(nodesModelToCalc,yearsToFix,converter_techs,vintage);
7317      converter_unitsDecom.l(nodesModelToCalc,yearsToFix,converter_techs,vintage)
7318          $(converter_unitsDecom.l(nodesModelToCalc,yearsToFix,converter_techs,vintage) < 0) = 0;
7319      converter_unitsDecom.fx(nodesModelToCalc,yearsToFix,converter_techs,vintage)
7320          = converter_unitsDecom.l(nodesModelToCalc,yearsToFix,converter_techs,vintage);
7321      converter_unitsTotal.fx(nodesModelToCalc,yearsToFix,converter_techs,vintage)
7322          = converter_unitsTotal.l(nodesModelToCalc,yearsToFix,converter_techs,vintage);
7323   
7324   
7325      storage_unitsDelta(nodesModelToCalc,yearsToFix,storage_techs)
7326          $(sum(yearsToCalc$sameas(yearsToFix, yearsToCalc), 1))
7327          = sum(vintage, storage_unitsTotal.l(nodesModelToCalc,yearsToFix,storage_techs,vintage))
7328              - storage_reservoirParam(nodesModelToCalc,yearsToFix,storage_techs,"unitsUpperLimit");
7329      storage_unitsDelta(nodesModelToCalc,yearsToFix,storage_techs)
7330          $(storage_unitsDelta(nodesModelToCalc,yearsToFix,storage_techs) < 0) = 0;
7331   
7332      storage_unitsBuild.l(nodesModelToCalc,yearsToFix,storage_techs,vintage)
7333          $storage_availTech(nodesModelToCalc,yearsToFix,storage_techs,vintage)
7334          = storage_unitsBuild.l(nodesModelToCalc,yearsToFix,storage_techs,vintage)
7335              - storage_unitsDelta(nodesModelToCalc,yearsToFix,storage_techs);
7336   
7337      storage_unitsBuild.l(nodesModelToCalc,yearsToFix,storage_techs,vintage)
7338          $(storage_unitsBuild.l(nodesModelToCalc,yearsToFix,storage_techs,vintage) < 0) = 0;
7339      storage_unitsBuild.fx(nodesModelToCalc,yearsToFix,storage_techs,vintage)
7340          = storage_unitsBuild.l(nodesModelToCalc,yearsToFix,storage_techs,vintage);
7341      storage_unitsDecom.l(nodesModelToCalc,yearsToFix,storage_techs,vintage)
7342          $(storage_unitsDecom.l(nodesModelToCalc,yearsToFix,storage_techs,vintage) < 0) = 0;
7343      storage_unitsDecom.fx(nodesModelToCalc,yearsToFix,storage_techs,vintage)
7344          = storage_unitsDecom.l(nodesModelToCalc,yearsToFix,storage_techs,vintage);
7345      storage_unitsTotal.fx(nodesModelToCalc,yearsToFix,storage_techs,vintage)
7346          = storage_unitsTotal.l(nodesModelToCalc,yearsToFix,storage_techs,vintage);
7347   
7348   
7349      transfer_linksDelta(linksModelToCalc,yearsToFix,transfer_techs)
7350          $(sum(yearsToCalc$sameas(yearsToFix, yearsToCalc), 1))
7351          = sum(vintage, transfer_linksTotal.l(linksModelToCalc,yearsToFix,transfer_techs,vintage))
7352              - transfer_linksParam(linksModelToCalc,yearsToFix,transfer_techs,"linksUpperLimit");
7353      transfer_linksDelta(linksModelToCalc,yearsToFix,transfer_techs)
7354          $(transfer_linksDelta(linksModelToCalc,yearsToFix,transfer_techs) < 0) = 0;
7355   
7356      transfer_linksBuild.l(linksModelToCalc,yearsToFix,transfer_techs,vintage)
7357          $transfer_availTech(linksModelToCalc,yearsToFix,transfer_techs,vintage)
7358          = transfer_linksBuild.l(linksModelToCalc,yearsToFix,transfer_techs,vintage)
7359              - transfer_linksDelta(linksModelToCalc,yearsToFix,transfer_techs);
7360   
7361      transfer_linksBuild.l(linksModelToCalc,yearsToFix,transfer_techs,vintage)
7362          $(transfer_linksBuild.l(linksModelToCalc,yearsToFix,transfer_techs,vintage) < 0) = 0;
7363      transfer_linksBuild.fx(linksModelToCalc,yearsToFix,transfer_techs,vintage)
7364          = transfer_linksBuild.l(linksModelToCalc,yearsToFix,transfer_techs,vintage);
7365      transfer_linksDecom.l(linksModelToCalc,yearsToFix,transfer_techs,vintage)
7366          $(transfer_linksDecom.l(linksModelToCalc,yearsToFix,transfer_techs,vintage) < 0) = 0;
7367      transfer_linksDecom.fx(linksModelToCalc,yearsToFix,transfer_techs,vintage)
7368          = transfer_linksDecom.l(linksModelToCalc,yearsToFix,transfer_techs,vintage);
7369      transfer_linksTotal.fx(linksModelToCalc,yearsToFix,transfer_techs,vintage)
7370          = transfer_linksTotal.l(linksModelToCalc,yearsToFix,transfer_techs,vintage);
7371   
7372      accounting_indicator.fx(accNodesModel,accYearsToFix,indicator)
7373          = accounting_indicator.l(accNodesModel,accYearsToFix,indicator);
7374   
7375  * Optimize and log values
7376      if (opti_sense < 0,
7377      solve remix minimizing accounting_objective using mip;
7378      else
7379      solve remix maximizing accounting_objective using mip;
7380      );
7381   
7382      put_utility 'log' / 'Model status ' remix.modelstat:0:0;
7383      put_utility 'log' / 'Objective value ' accounting_objective.l:0:3;
7384   
7385  );
7386   
7390   
7391  * if method is pareto solve the model once and afterwards run multiple points along the pareto front
INCLUDE    C:\Local\REMix\framework\remix\framework\model\source\methods\pareto.gms
7393  * SPDX-FileCopyrightText: Copyright (c) 2023 German Aerospace Center (DLR)
7394  * SPDX-License-Identifier: BSD-3-Clause
7395   
7399   
7400  * if method is mga solve the model once and afterwards maximize the length metric of indicators
INCLUDE    C:\Local\REMix\framework\remix\framework\model\source\methods\mga.gms
7402  * SPDX-FileCopyrightText: Copyright (c) 2023 German Aerospace Center (DLR)
7403  * SPDX-License-Identifier: BSD-3-Clause
7404   
7408   
7409  * if method is iternodes run the model by iterating through all nodesToCalc
INCLUDE    C:\Local\REMix\framework\remix\framework\model\source\methods\iternodes.gms
7411  * SPDX-FileCopyrightText: Copyright (c) 2023 German Aerospace Center (DLR)
7412  * SPDX-License-Identifier: BSD-3-Clause
7413   
7417   
7418  * if postcalc is one write the results gdx
INCLUDE    C:\Local\REMix\framework\remix\framework\model\source\postcalc\definition.gms
7420  * SPDX-FileCopyrightText: Copyright (c) 2023 German Aerospace Center (DLR)
7421  * SPDX-License-Identifier: BSD-3-Clause
7422   
7424   
7425  * ==== indicator accounting ====
7426   
7427  indicator_accounting_detailed(indicator,nodesModelToCalc,yearsToCalc,techs)
7428      =
7429  * == converters ==
7430      sum ((converter_techs(techs),vintage)
7431                  $(converter_availTech(nodesModelToCalc,yearsToCalc,converter_techs,vintage)
7432                      and accounting_converterUnits(indicator,nodesModelToCalc,converter_techs,vintage,"useAnnuity") = 0),
7433          converter_unitsBuild.l(nodesModelToCalc,yearsToCalc,converter_techs,vintage)
7434          * accounting_converterUnits(indicator,nodesModelToCalc,converter_techs,vintage,"perUnitBuild"))
7435   
7436      + sum ((years_a,converter_techs(techs),vintage)
7437                  $(converter_availTech(nodesModelToCalc,years_a,converter_techs,vintage)
7438                      and accounting_converterUnits(indicator,nodesModelToCalc,converter_techs,vintage,"useAnnuity") = 1
7439                      and years_a.val + accounting_converterUnits(indicator,nodesModelToCalc,converter_techs,vintage,"amorTime") > yearsToCalc.val
7440                      and years_a.val <= yearsToCalc.val ),
7441          converter_unitsBuild.l(nodesModelToCalc,years_a,converter_techs,vintage)
7442          * accounting_converterUnits(indicator,nodesModelToCalc,converter_techs,vintage,"perUnitBuild")
7443          * accounting_annuityFactor_converter(indicator,nodesModelToCalc,converter_techs,vintage) )
7444   
7445      + sum ((converter_techs(techs),vintage)
7446                  $converter_usedTech(nodesModelToCalc,yearsToCalc,converter_techs,vintage),
7447          converter_unitsDecom.l(nodesModelToCalc,yearsToCalc,converter_techs,vintage)
7448          * accounting_converterUnits(indicator,nodesModelToCalc,converter_techs,vintage,"perUnitDecom")
7449   
7450          + converter_unitsTotal.l(nodesModelToCalc,yearsToCalc,converter_techs,vintage)
7451          * accounting_converterUnits(indicator,nodesModelToCalc,converter_techs,vintage,"perUnitTotal") )
7452   
7453      + sum ((timeModelToCalc,converter_techs(techs),vintage,activity)
7454                  $converter_usedTechAct(nodesModelToCalc,yearsToCalc,converter_techs,vintage,activity),
7455          converter_activity.l(timeModelToCalc,nodesModelToCalc,yearsToCalc,converter_techs,vintage,activity)
7456          * timeLength(timeModelToCalc)
7457          * accounting_converterActivity(indicator,nodesModelToCalc,converter_techs,vintage,activity,"perActivity") )
7458   
7459      + sum ((timeModelToCalc,converter_techs(techs),vintage)
7460                  $converter_usedTech(nodesModelToCalc,yearsToCalc,converter_techs,vintage),
7461          converter_unitStartups.l(timeModelToCalc,nodesModelToCalc,yearsToCalc,converter_techs,vintage)
7462          * accounting_converterStartup(indicator,nodesModelToCalc,converter_techs,vintage,"perStartup") )
7463   
7464      + sum ((timeModelToCalc,converter_techs(techs),vintage)
7465                  $converter_usedTech(nodesModelToCalc,yearsToCalc,converter_techs,vintage),
7466          converter_rampPos.l(timeModelToCalc,nodesModelToCalc,yearsToCalc,converter_techs,vintage)
7467          * (accounting_converterStartup(indicator,nodesModelToCalc,converter_techs,vintage,"perRamp")
7468              + accounting_converterStartup(indicator,nodesModelToCalc,converter_techs,vintage,"perRampPos"))
7469   
7470          + converter_rampNeg.l(timeModelToCalc,nodesModelToCalc,yearsToCalc,converter_techs,vintage)
7471          * (accounting_converterStartup(indicator,nodesModelToCalc,converter_techs,vintage,"perRamp")
7472              + accounting_converterStartup(indicator,nodesModelToCalc,converter_techs,vintage,"perRampNeg")))
7473   
7474  * == storage ==
7475      + sum ((storage_techs(techs),vintage)
7476                  $(storage_availTech(nodesModelToCalc,yearsToCalc,storage_techs,vintage)
7477                      and accounting_storageUnits(indicator,nodesModelToCalc,storage_techs,vintage,"useAnnuity") = 0),
7478          storage_unitsBuild.l(nodesModelToCalc,yearsToCalc,storage_techs,vintage)
7479          * accounting_storageUnits(indicator,nodesModelToCalc,storage_techs,vintage,"perUnitBuild") )
7480   
7481      + sum ((years_a,storage_techs(techs),vintage)
7482                  $(storage_availTech(nodesModelToCalc,yearsToCalc,storage_techs,vintage)
7483                      and accounting_storageUnits(indicator,nodesModelToCalc,storage_techs,vintage,"useAnnuity") = 1
7484                      and years_a.val + accounting_storageUnits(indicator,nodesModelToCalc,storage_techs,vintage,"amorTime") > yearsToCalc.val
7485                      and years_a.val <= yearsToCalc.val ),
7486          storage_unitsBuild.l(nodesModelToCalc,years_a,storage_techs,vintage)
7487          * accounting_storageUnits(indicator,nodesModelToCalc,storage_techs,vintage,"perUnitBuild")
7488          * accounting_annuityFactor_storage(indicator,nodesModelToCalc,storage_techs,vintage) )
7489   
7490      + sum ((storage_techs(techs),vintage)
7491                  $storage_usedTech(nodesModelToCalc,yearsToCalc,storage_techs,vintage),
7492          storage_unitsDecom.l(nodesModelToCalc,yearsToCalc,storage_techs,vintage)
7493          * accounting_storageUnits(indicator,nodesModelToCalc,storage_techs,vintage,"perUnitDecom")
7494   
7495          + storage_unitsTotal.l(nodesModelToCalc,yearsToCalc,storage_techs,vintage)
7496          * accounting_storageUnits(indicator,nodesModelToCalc,storage_techs,vintage,"perUnitTotal") )
7497   
7498  * == transfer ==
7499      + sum ((linksModel,transfer_techs(techs),vintage)
7500                  $(transfer_availTech(linksModel,yearsToCalc,transfer_techs,vintage)
7501                      and linksModelToCalc(linksModel)
7502                      and transfer_incidenceModel(nodesModelToCalc,linksModel) <> 0
7503                      and accounting_transferLinks(indicator,linksModel,transfer_techs,vintage,"useAnnuity") = 0),
7504          0.5
7505          * transfer_linksBuild.l(linksModel,yearsToCalc,transfer_techs,vintage)
7506          * accounting_transferLinks(indicator,linksModel,transfer_techs,vintage,"perLinkBuild") )
7507   
7508      + sum ((linksModel,years_a,transfer_techs(techs),vintage)
7509                  $(transfer_availTech(linksModel,yearsToCalc,transfer_techs,vintage)
7510                      and linksModelToCalc(linksModel)
7511                      and transfer_incidenceModel(nodesModelToCalc,linksModel) <> 0
7512                      and accounting_transferLinks(indicator,linksModel,transfer_techs,vintage,"useAnnuity") = 1
7513                      and years_a.val + accounting_transferLinks(indicator,linksModel,transfer_techs,vintage,"amorTime") > yearsToCalc.val
7514                      and years_a.val <= yearsToCalc.val ),
7515          0.5
7516          * transfer_linksBuild.l(linksModel,years_a,transfer_techs,vintage)
7517          * accounting_transferLinks(indicator,linksModel,transfer_techs,vintage,"perLinkBuild")
7518          * accounting_annuityFactor_transferLink(indicator,linksModel,transfer_techs,vintage) )
7519   
7520      + sum ((linksModel,transfer_techs(techs),vintage,link_types)
7521                  $(transfer_availTech(linksModel,yearsToCalc,transfer_techs,vintage)
7522                      and linksModelToCalc(linksModel)
7523                      and transfer_incidenceModel(nodesModelToCalc,linksModel) <> 0
7524                      and accounting_transferPerLength(indicator,linksModel,transfer_techs,vintage,link_types,"useAnnuity") = 0 ),
7525          0.5
7526          * transfer_linksBuild.l(linksModel,yearsToCalc,transfer_techs,vintage)
7527          * transfer_lengthParam(linksModel,link_types,"length")
7528          * accounting_transferPerLength(indicator,linksModel,transfer_techs,vintage,link_types,"perLengthBuild") )
7529   
7530      + sum ((linksModel,years_a,transfer_techs(techs),vintage,link_types)
7531                  $(transfer_availTech(linksModel,yearsToCalc,transfer_techs,vintage)
7532                      and linksModelToCalc(linksModel)
7533                      and transfer_incidenceModel(nodesModelToCalc,linksModel) <> 0
7534                      and accounting_transferPerLength(indicator,linksModel,transfer_techs,vintage,link_types,"useAnnuity") = 1
7535                      and years_a.val + accounting_transferPerLength(indicator,linksModel,transfer_techs,vintage,link_types,"amorTime") > yearsToCalc.val
7536                      and years_a.val <= yearsToCalc.val ),
7537          0.5
7538          * transfer_linksBuild.l(linksModel,years_a,transfer_techs,vintage)
7539          * transfer_lengthParam(linksModel,link_types,"length")
7540          * accounting_transferPerLength(indicator,linksModel,transfer_techs,vintage,link_types,"perLengthBuild")
7541          * accounting_annuityFactor_transferDistance(indicator,linksModel,transfer_techs,vintage,link_types) )
7542   
7543      + sum ((linksModel,transfer_techs(techs),vintage)
7544                  $(transfer_usedTech(linksModel,yearsToCalc,transfer_techs,vintage)
7545                      and linksModelToCalc(linksModel)
7546                      and transfer_incidenceModel(nodesModelToCalc,linksModel) <> 0 ),
7547          0.5
7548          * transfer_linksDecom.l(linksModel,yearsToCalc,transfer_techs,vintage)
7549          * accounting_transferLinks(indicator,linksModel,transfer_techs,vintage,"perLinkDecom")
7550   
7551          + 0.5
7552          * transfer_linksTotal.l(linksModel,yearsToCalc,transfer_techs,vintage)
7553          * accounting_transferLinks(indicator,linksModel,transfer_techs,vintage,"perLinkTotal")
7554   
7555          + 0.5
7556          * sum (link_types,
7557              transfer_linksDecom.l(linksModel,yearsToCalc,transfer_techs,vintage)
7558              * transfer_lengthParam(linksModel,link_types,"length")
7559              * accounting_transferPerLength(indicator,linksModel,transfer_techs,vintage,link_types,"perLengthDecom")
7560   
7561              + transfer_linksTotal.l(linksModel,yearsToCalc,transfer_techs,vintage)
7562              * transfer_lengthParam(linksModel,link_types,"length")
7563              * accounting_transferPerLength(indicator,linksModel,transfer_techs,vintage,link_types,"perLengthTotal"))
7564   
7565          + 0.5
7566          * sum (timeModelToCalc,
7567              transfer_flowAlong.l(timeModelToCalc,linksModel,yearsToCalc,transfer_techs,vintage)
7568              * timeLength(timeModelToCalc)
7569              * ( accounting_transferLinks(indicator,linksModel,transfer_techs,vintage,"perFlow")
7570                  + accounting_transferLinks(indicator,linksModel,transfer_techs,vintage,"perFlowAlong"))
7571   
7572              + transfer_flowAgainst.l(timeModelToCalc,linksModel,yearsToCalc,transfer_techs,vintage)
7573              * timeLength(timeModelToCalc)
7574              * ( accounting_transferLinks(indicator,linksModel,transfer_techs,vintage,"perFlow")
7575                  + accounting_transferLinks(indicator,linksModel,transfer_techs,vintage,"perFlowAgainst")))
7576   
7577          + 0.5
7578          * sum ((timeModelToCalc, link_types),
7579              transfer_flowAlong.l(timeModelToCalc,linksModel,yearsToCalc,transfer_techs,vintage)
7580              * timeLength(timeModelToCalc)
7581              * transfer_lengthParam(linksModel,link_types,"length")
7582              * (accounting_transferPerLength(indicator,linksModel,transfer_techs,vintage,link_types,"perFlow")
7583                  + accounting_transferPerLength(indicator,linksModel,transfer_techs,vintage,link_types,"perFlowAlong"))
7584   
7585              + transfer_flowAgainst.l(timeModelToCalc,linksModel,yearsToCalc,transfer_techs,vintage)
7586              * timeLength(timeModelToCalc)
7587              * transfer_lengthParam(linksModel,link_types,"length")
7588              * (accounting_transferPerLength(indicator,linksModel,transfer_techs,vintage,link_types,"perFlow")
7589                  + accounting_transferPerLength(indicator,linksModel,transfer_techs,vintage,link_types,"perFlowAgainst"))))
7590   
7591   
7592  * == sources / sinks ==
7593      + sum ((timeModelToCalc,sourcesink_techs(techs),commodity)
7594              $sourcesink_enabled(nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity),
7595          sourcesink_flow.l(timeModelToCalc,nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity)
7596          * timeLength(timeModelToCalc)
7597          * accounting_sourcesinkFlow(indicator,nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity,"perFlow"))
7598      ;
7599   
7600   
7601  * ==== full set of main indicators ====
7602   
7603  indicator_accounting(accNodesModel,accYears,indicator)
7604      $sum((accNodesModel_a,accYears_a,indicator_a)
7605              $compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a), 1)
7606      =
7607      + sum((accNodesModel_a,accYears_a,indicator_a)
7608              $(compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
7609                  and variableIndicators(accNodesModel_a,accYears_a,indicator_a)),
7610          compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
7611          * accounting_indicator.l(accNodesModel_a,accYears_a,indicator_a))
7612   
7613      + sum((accNodesModel_a,accYears_a,indicator_a)
7614              $(compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)),
7615          compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
7616          * (sum((nodesModelToCalc,yearsToCalc,techs)
7617                  $(sameas(accNodesModel_a, nodesModelToCalc)
7618                      and sameas(accYears_a, yearsToCalc)),
7619                  indicator_accounting_detailed(indicator_a,nodesModelToCalc,yearsToCalc,techs))))
7620      ;
7621   
7622  indicator_accounting_comp(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
7623      $compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
7624      =
7625          compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
7626          * accounting_indicator.l(accNodesModel_a,accYears_a,indicator_a)
7627              $variableIndicators(accNodesModel_a,accYears_a,indicator_a)
7628   
7629          + compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
7630          * (sum((nodesModelToCalc,yearsToCalc,techs)
7631                  $(sameas(accNodesModel_a, nodesModelToCalc)
7632                      and sameas(accYears_a, yearsToCalc)),
7633                  indicator_accounting_detailed(indicator_a,nodesModelToCalc,yearsToCalc,techs)))
7634      ;
7635   
7636  indicator_accounting_ref(accNodesModel,accYears,indicator)
7637      $accounting_indicator.l(accNodesModel,accYears,indicator)
7638      = accounting_indicator.l(accNodesModel,accYears,indicator);
7639   
7640  * ==== link-specific indicator accounting ====
7641   
7642  indicator_accounting_links(indicator,nodesModelToCalc,nodesModelToCalc_a,linksModelToCalc,yearsToCalc,techs)
7643      $(transfer_incidenceModel(nodesModelToCalc,linksModelToCalc) < 0
7644          and transfer_incidenceModel(nodesModelToCalc_a,linksModelToCalc) > 0)
7645      =
7646      sum ((transfer_techs(techs),vintage)
7647                  $(transfer_availTech(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
7648                      and accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"useAnnuity") = 0),
7649          transfer_linksBuild.l(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
7650          * accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"perLinkBuild") )
7651   
7652      + sum ((years_a,transfer_techs(techs),vintage)
7653                  $(transfer_availTech(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
7654                      and accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"useAnnuity") = 1
7655                      and years_a.val + accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"amorTime") > yearsToCalc.val
7656                      and years_a.val <= yearsToCalc.val ),
7657          transfer_linksBuild.l(linksModelToCalc,years_a,transfer_techs,vintage)
7658          * accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"perLinkBuild")
7659          * accounting_annuityFactor_transferLink(indicator,linksModelToCalc,transfer_techs,vintage) )
7660   
7661      + sum ((transfer_techs(techs),vintage,link_types)
7662                  $(transfer_availTech(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
7663                      and accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"useAnnuity") = 0 ),
7664          transfer_linksBuild.l(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
7665          * transfer_lengthParam(linksModelToCalc,link_types,"length")
7666          * accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"perLengthBuild") )
7667   
7668      + sum ((years_a,transfer_techs(techs),vintage,link_types)
7669                  $(transfer_availTech(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
7670                      and accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"useAnnuity") = 1
7671                      and years_a.val + accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"amorTime") > yearsToCalc.val
7672                      and years_a.val <= yearsToCalc.val ),
7673          transfer_linksBuild.l(linksModelToCalc,years_a,transfer_techs,vintage)
7674          * transfer_lengthParam(linksModelToCalc,link_types,"length")
7675          * accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"perLengthBuild")
7676          * accounting_annuityFactor_transferDistance(indicator,linksModelToCalc,transfer_techs,vintage,link_types) )
7677   
7678      + sum ((transfer_techs(techs),vintage)
7679                  $(transfer_usedTech(linksModelToCalc,yearsToCalc,transfer_techs,vintage)),
7680          transfer_linksDecom.l(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
7681          * accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"perLinkDecom")
7682   
7683          + transfer_linksTotal.l(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
7684          * accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"perLinkTotal")
7685   
7686          + sum (link_types,
7687              transfer_linksDecom.l(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
7688              * transfer_lengthParam(linksModelToCalc,link_types,"length")
7689              * accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"perLengthDecom")
7690   
7691              + transfer_linksTotal.l(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
7692              * transfer_lengthParam(linksModelToCalc,link_types,"length")
7693              * accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"perLengthTotal"))
7694   
7695          + sum (timeModelToCalc,
7696              transfer_flowAlong.l(timeModelToCalc,linksModelToCalc,yearsToCalc,transfer_techs,vintage)
7697              * timeLength(timeModelToCalc)
7698              * ( accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"perFlow")
7699                  + accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"perFlowAlong"))
7700   
7701              + transfer_flowAgainst.l(timeModelToCalc,linksModelToCalc,yearsToCalc,transfer_techs,vintage)
7702              * timeLength(timeModelToCalc)
7703              * ( accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"perFlow")
7704                  + accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"perFlowAgainst")))
7705   
7706          + sum ((timeModelToCalc, link_types),
7707              transfer_flowAlong.l(timeModelToCalc,linksModelToCalc,yearsToCalc,transfer_techs,vintage)
7708              * timeLength(timeModelToCalc)
7709              * transfer_lengthParam(linksModelToCalc,link_types,"length")
7710              * (accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"perFlow")
7711                  + accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"perFlowAlong"))
7712   
7713              + transfer_flowAgainst.l(timeModelToCalc,linksModelToCalc,yearsToCalc,transfer_techs,vintage)
7714              * timeLength(timeModelToCalc)
7715              * transfer_lengthParam(linksModelToCalc,link_types,"length")
7716              * (accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"perFlow")
7717                  + accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"perFlowAgainst")))
7718      );
7719   
7720   
7721  * == converter capacities ==
7722   
7723  converter_ratedInput(converter_techs,vintage,commodity)
7724      $(converter_techParam(converter_techs,vintage,"lifeTime") > 0)
7725      = smin(activity$converter_usedAct(converter_techs,vintage,activity),
7726              converter_coefficient(converter_techs,vintage,activity,commodity,"coefficient"));
7727  converter_ratedInput(converter_techs,vintage,commodity)
7728      $(converter_ratedInput(converter_techs,vintage,commodity) > 0)
7729      = 0;
7730   
7731  converter_ratedOutput(converter_techs,vintage,commodity)
7732      $(converter_techParam(converter_techs,vintage,"lifeTime") > 0)
7733      = smax(activity$converter_usedAct(converter_techs,vintage,activity),
7734              converter_coefficient(converter_techs,vintage,activity,commodity,"coefficient"));
7735  converter_ratedOutput(converter_techs,vintage,commodity)
7736      $(converter_ratedOutput(converter_techs,vintage,commodity) < 0)
7737      = 0;
7738   
7739  converter_ratedOutput_min(nodesModelToCalc,years,converter_techs(techs),commodity)
7740      $sum(vintage$(converter_usedTech(nodesModelToCalc,years,converter_techs,vintage)
7741          and converter_ratedOutput(converter_techs,vintage,commodity)), 1)
7742      = smin(vintage$(converter_usedTech(nodesModelToCalc,years,converter_techs,vintage)
7743              and converter_ratedOutput(converter_techs,vintage,commodity)),
7744          converter_ratedOutput(converter_techs,vintage,commodity));
7745   
7746  converter_ratedOutput_max(nodesModelToCalc,years,converter_techs(techs),commodity)
7747      $sum(vintage$(converter_usedTech(nodesModelToCalc,years,converter_techs,vintage)
7748          and converter_ratedOutput(converter_techs,vintage,commodity)), 1)
7749      = smax(vintage$(converter_usedTech(nodesModelToCalc,years,converter_techs,vintage)
7750              and converter_ratedOutput(converter_techs,vintage,commodity)),
7751          converter_ratedOutput(converter_techs,vintage,commodity));
7752   
7753  converter_units_ext(map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,years),converter_techs(techs),vintage,"build")
7754      = converter_unitsBuild.l(nodesModelToCalc,years,converter_techs,vintage);
7755   
7756  converter_units_ext(map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,years),converter_techs(techs),vintage,"decom")
7757      = converter_unitsDecom.l(nodesModelToCalc,years,converter_techs,vintage);
7758   
7759  converter_units_ext(map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,years),converter_techs(techs),vintage,"total")
7760      = converter_unitsTotal.l(nodesModelToCalc,years,converter_techs,vintage);
7761   
7762  converter_caps_ext(map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,years),converter_techs(techs),vintage,commodity,capType)
7763      $(converter_ratedOutput(converter_techs,vintage,commodity))
7764      = converter_units_ext(accNodesModel,nodesModelToCalc,accYears,years,techs,vintage,capType)
7765          * converter_ratedOutput(converter_techs,vintage,commodity);
7766   
7767  converter_caps_ext(map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,years),converter_techs(techs),vintage,commodity,"lowerLimit")
7768      $(converter_usedTech(nodesModelToCalc,years,converter_techs,vintage)
7769          and converter_capacityParam(nodesModelToCalc,years,converter_techs,"unitsLowerLimit") > 0
7770          and converter_ratedOutput_min(nodesModelToCalc,years,converter_techs,commodity))
7771      = converter_capacityParam(nodesModelToCalc,years,converter_techs,"unitsLowerLimit")
7772          * converter_ratedOutput_min(nodesModelToCalc,years,converter_techs,commodity);
7773   
7774  converter_caps_ext(map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,years),converter_techs(techs),vintage,commodity,"upperLimit")
7775      $(converter_usedTech(nodesModelToCalc,years,converter_techs,vintage)
7776          and converter_capacityParam(nodesModelToCalc,years,converter_techs,"unitsUpperLimit") < inf
7777          and converter_ratedOutput_min(nodesModelToCalc,years,converter_techs,commodity))
7778      = converter_capacityParam(nodesModelToCalc,years,converter_techs,"unitsUpperLimit")
7779          * converter_ratedOutput_max(nodesModelToCalc,years,converter_techs,commodity);
7780   
7781  converter_caps(accNodesModel,accYears,converter_techs(techs),commodity,capType)
7782      = sum((nodesModelToCalc,years,vintage)
7783              $(map_accNodesPostCalc(accNodesModel,nodesModelToCalc)
7784                  and map_accYearsPostCalc(accYears,years)),
7785          converter_caps_ext(accNodesModel,nodesModelToCalc,accYears,years,converter_techs,vintage,commodity,capType));
7786  option clear = converter_caps_ext;
7787   
7788  converter_units(accNodesModel,accYears,converter_techs(techs),vintage,capType)
7789      = sum((nodesModelToCalc,years)
7790              $(map_accNodesPostCalc(accNodesModel,nodesModelToCalc)
7791                  and map_accYearsPostCalc(accYears,years)),
7792          converter_units_ext(accNodesModel,nodesModelToCalc,accYears,years,converter_techs,vintage,capType));
7793  option clear = converter_units_ext;
7794   
7795   
7796  * ==== transfer capacities ====
7797   
7798  max_transfer_coefficient(transfer_techs(techs),commodity)
7799          $(smax(vintage, transfer_coefficient(transfer_techs,vintage,commodity,"coefficient")) > 0)
7800          = smax(vintage, transfer_coefficient(transfer_techs,vintage,commodity,"coefficient"));
7801   
7802  min_transfer_coefficient(transfer_techs(techs),commodity)
7803          $(smin(vintage, transfer_coefficient(transfer_techs,vintage,commodity,"coefficient")) > 0)
7804          = smin(vintage, transfer_coefficient(transfer_techs,vintage,commodity,"coefficient"));
7805   
7806   
7807  transfer_links(linksModel,years,transfer_techs,vintage,"build")
7808      = transfer_linksBuild.l(linksModel,years,transfer_techs,vintage);
7809   
7810  transfer_links(linksModel,years,transfer_techs,vintage,"decom")
7811      = transfer_linksDecom.l(linksModel,years,transfer_techs,vintage);
7812   
7813  transfer_links(linksModel,years,transfer_techs,vintage,"total")
7814      = transfer_linksTotal.l(linksModel,years,transfer_techs,vintage);
7815   
7816  transfer_caps(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,years,transfer_techs(techs),commodity,capType)
7817      $(transfer_incidenceModel(nodesModelToCalc_start,linksModel) < 0
7818          and transfer_incidenceModel(nodesModelToCalc_end,linksModel) > 0)
7819      = sum(vintage,
7820          transfer_links(linksModel,years,transfer_techs,vintage,capType)
7821          * transfer_coefficient(transfer_techs,vintage,commodity,"coefficient"));
7822   
7823  transfer_caps(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,years,transfer_techs(techs),commodity,"lowerLimit")
7824      $(transfer_linksParam(linksModel,years,transfer_techs,'linksLowerLimit') > 0
7825          and transfer_incidenceModel(nodesModelToCalc_start,linksModel) < 0
7826          and transfer_incidenceModel(nodesModelToCalc_end,linksModel) > 0
7827          and sum(vintage$(transfer_usedTech(linksModel,years,transfer_techs,vintage)
7828                              and transfer_coefficient(transfer_techs,vintage,commodity,"coefficient")), 1))
7829      = transfer_linksParam(linksModel,years,transfer_techs,'linksLowerLimit')
7830          * min_transfer_coefficient(transfer_techs,commodity);
7831   
7832  transfer_caps(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,years,transfer_techs(techs),commodity,"upperLimit")
7833      $(transfer_linksParam(linksModel,years,transfer_techs,'linksUpperLimit') < inf
7834          and transfer_incidenceModel(nodesModelToCalc_start,linksModel) < 0
7835          and transfer_incidenceModel(nodesModelToCalc_end,linksModel) > 0
7836          and sum(vintage$(transfer_usedTech(linksModel,years,transfer_techs,vintage)
7837                              and transfer_coefficient(transfer_techs,vintage,commodity,"coefficient")), 1))
7838      = transfer_linksParam(linksModel,years,transfer_techs,'linksUpperLimit')
7839          * max_transfer_coefficient(transfer_techs,commodity);
7840   
7841   
7842  * ==== transfer flows ====
7843   
7844  transfer_flows(timeModelToCalc,nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs(techs),commodity)
7845      $(transfer_incidenceModel(nodesModelToCalc_start,linksModel) < 0
7846          and transfer_incidenceModel(nodesModelToCalc_end,linksModel) > 0)
7847      = sum(vintage,
7848          ( transfer_flowAlong.l(timeModelToCalc,linksModel,yearsToCalc,transfer_techs,vintage)
7849              - transfer_flowAgainst.l(timeModelToCalc,linksModel,yearsToCalc,transfer_techs,vintage) )
7850          * timeLength(timeModelToCalc)
7851          * transfer_coefficient(transfer_techs,vintage,commodity,"coefficient"));
7852   
7853  transfer_flows_annual(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs(techs),commodity,"netto")
7854      = sum(timeModelToCalc,
7855          transfer_flows(timeModelToCalc,nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs,commodity));
7856   
7857  transfer_flows_annual(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs(techs),commodity,"positive")
7858      = sum(timeModelToCalc
7859              $(transfer_flows(timeModelToCalc,nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs,commodity) > 0),
7860          transfer_flows(timeModelToCalc,nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs,commodity));
7861   
7862  transfer_flows_annual(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs(techs),commodity,"negative")
7863      = sum(timeModelToCalc
7864              $(transfer_flows(timeModelToCalc,nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs,commodity) < 0),
7865          transfer_flows(timeModelToCalc,nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs,commodity));
7866   
7867  transfer_flows_annual(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs(techs),commodity,"brutto")
7868      = transfer_flows_annual(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs,commodity,"positive")
7869          - transfer_flows_annual(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs,commodity,"negative");
7870   
7871  transfer_flows_annual(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs(techs),commodity,"flh")
7872      $(transfer_flows_annual(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs,commodity,"brutto") > 0
7873          and transfer_caps(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs,commodity,"total") > 0)
7874      = transfer_flows_annual(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs,commodity,"brutto")
7875          / transfer_caps(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs,commodity,"total");
7876   
7877  transfer_losses(timeModelToCalc,nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs(techs),commodity)
7878      $(transfer_incidenceModel(nodesModelToCalc_start,linksModel) < 0
7879          and transfer_incidenceModel(nodesModelToCalc_end,linksModel) > 0)
7880      = -1 * abs(sum(vintage,
7881          ( transfer_flowAlong.l(timeModelToCalc,linksModel,yearsToCalc,transfer_techs,vintage)
7882              - transfer_flowAgainst.l(timeModelToCalc,linksModel,yearsToCalc,transfer_techs,vintage) )
7883          * ( transfer_coefPerFlow(transfer_techs,vintage,commodity,"coefPerFlow")
7884              + sum(link_types,
7885                  transfer_coefPerLength(transfer_techs,vintage,commodity,link_types,"coefPerLength")
7886                  * transfer_lengthParam(linksModel,link_types,"length")))))
7887          * timeLength(timeModelToCalc);
7888   
7889  transfer_losses_annual(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs(techs),commodity,"netto")
7890      = sum(timeModelToCalc,
7891          transfer_losses(timeModelToCalc,nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs,commodity));
7892   
7893   
7894  * ==== storage capacities ====
7895   
7896  storage_size_max(nodesModelToCalc,years,storage_techs(techs),commodity)
7897      $sum(vintage$(storage_usedTech(nodesModelToCalc,years,storage_techs,vintage)
7898              and storage_usedCom(storage_techs,vintage,commodity)
7899              and storage_sizeParam(storage_techs,vintage,commodity,"size")), 1)
7900      = smax(vintage$(storage_usedTech(nodesModelToCalc,years,storage_techs,vintage)
7901              and storage_usedCom(storage_techs,vintage,commodity)
7902              and storage_sizeParam(storage_techs,vintage,commodity,"size")),
7903          storage_sizeParam(storage_techs,vintage,commodity,"size"));
7904   
7905  storage_size_min(nodesModelToCalc,years,storage_techs(techs),commodity)
7906      $sum(vintage$(storage_usedTech(nodesModelToCalc,years,storage_techs,vintage)
7907              and storage_usedCom(storage_techs,vintage,commodity)
7908              and storage_sizeParam(storage_techs,vintage,commodity,"size")), 1)
7909      = smin(vintage$(storage_usedTech(nodesModelToCalc,years,storage_techs,vintage)
7910              and storage_usedCom(storage_techs,vintage,commodity)
7911              and storage_sizeParam(storage_techs,vintage,commodity,"size")),
7912          storage_sizeParam(storage_techs,vintage,commodity,"size"));
7913   
7914  storage_units_ext(map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,years),storage_techs(techs),vintage,"build")
7915      $storage_usedTech(nodesModelToCalc,years,storage_techs,vintage)
7916      = storage_unitsBuild.l(nodesModelToCalc,years,storage_techs,vintage);
7917   
7918  storage_units_ext(map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,years),storage_techs(techs),vintage,"decom")
7919      $storage_usedTech(nodesModelToCalc,years,storage_techs,vintage)
7920      = storage_unitsDecom.l(nodesModelToCalc,years,storage_techs,vintage);
7921   
7922  storage_units_ext(map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,years),storage_techs(techs),vintage,"total")
7923      $storage_usedTech(nodesModelToCalc,years,storage_techs,vintage)
7924      = storage_unitsTotal.l(nodesModelToCalc,years,storage_techs,vintage);
7925   
7926  storage_caps_ext(map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,years),storage_techs(techs),vintage,commodity,capType)
7927      $storage_sizeParam(storage_techs,vintage,commodity,"size")
7928      = storage_units_ext(accNodesModel,nodesModelToCalc,accYears,years,storage_techs,vintage,capType)
7929          * storage_sizeParam(storage_techs,vintage,commodity,"size");
7930   
7931  storage_caps_ext(map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,years),storage_techs(techs),vintage,commodity,"lowerLimit")
7932      $(storage_usedTech(nodesModelToCalc,years,storage_techs,vintage)
7933          and storage_reservoirParam(nodesModelToCalc,years,storage_techs,"unitsLowerLimit") > 0
7934          and storage_size_min(nodesModelToCalc,years,storage_techs,commodity))
7935      = storage_reservoirParam(nodesModelToCalc,years,storage_techs,"unitsLowerLimit")
7936          * storage_size_min(nodesModelToCalc,years,storage_techs,commodity);
7937   
7938  storage_caps_ext(map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,years),storage_techs(techs),vintage,commodity,"upperLimit")
7939      $(storage_usedTech(nodesModelToCalc,years,storage_techs,vintage)
7940          and storage_reservoirParam(nodesModelToCalc,years,storage_techs,"unitsUpperLimit") < inf
7941          and storage_size_max(nodesModelToCalc,years,storage_techs,commodity))
7942      = storage_reservoirParam(nodesModelToCalc,years,storage_techs,"unitsUpperLimit")
7943          * storage_size_max(nodesModelToCalc,years,storage_techs,commodity);
7944   
7945  storage_caps_ext(map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,years),storage_techs(techs),vintage,commodity,"total_degraded")
7946      $(storage_usedCom(storage_techs,vintage,commodity)
7947          and (storage_techParam(storage_techs,vintage,"annualDegradation") > 0
7948               or storage_techParam(storage_techs,vintage,"usageDegradation")))
7949      = sum((degradation_states,yearsCom), (storage_degradationParam(storage_techs,vintage,degradation_states,"remainingCapacity")
7950                                      - (years.val - yearsCom.val) * storage_techParam(storage_techs,vintage,"annualDegradation"))
7951                                      * storage_unitsStateTracker.l(nodesModelToCalc,years,yearsCom,storage_techs,vintage,degradation_states)
7952                                      * storage_sizeParam(storage_techs,vintage,commodity,"size"));
7953   
7954  storage_caps(accNodesModel,accYears,storage_techs(techs),commodity,capType)
7955      = sum((nodesModelToCalc,years,vintage)
7956              $(map_accNodesPostCalc(accNodesModel,nodesModelToCalc)
7957                  and map_accYearsPostCalc(accYears,years)),
7958          storage_caps_ext(accNodesModel,nodesModelToCalc,accYears,years,storage_techs,vintage,commodity,capType));
7959  option clear = storage_caps_ext;
7960   
7961  storage_units(accNodesModel,accYears,storage_techs(techs),vintage,capType)
7962      = sum((nodesModelToCalc,years)
7963              $(map_accNodesPostCalc(accNodesModel,nodesModelToCalc)
7964                  and map_accYearsPostCalc(accYears,years)),
7965          storage_units_ext(accNodesModel,nodesModelToCalc,accYears,years,storage_techs,vintage,capType));
7966  option clear = storage_units_ext;
7967   
7968   
7969  * ==== storage levels and flows ====
7970   
7971  storage_flows_ext(timeModelToCalc,map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,yearsToCalc),storage_techs(techs),vintage,commodity)
7972      $(storage_usedTech(nodesModelToCalc,yearsToCalc,storage_techs,vintage) and balance_techComm(storage_techs,commodity))
7973      = storage_level.l(timeModelToCalc,nodesModelToCalc,yearsToCalc,storage_techs,vintage,commodity)
7974          - storage_level.l(timeModelToCalc--1,nodesModelToCalc,yearsToCalc,storage_techs,vintage,commodity)
7976      + storage_losses.l(timeModelToCalc,nodesModelToCalc,yearsToCalc,storage_techs,vintage,commodity)
7977          * timeLength(timeModelToCalc)
7979      ;
7980   
7981  storage_flows(timeModelToCalc,accNodesModel,accYears,storage_techs(techs),commodity)
7982      = sum((nodesModelToCalc,yearsToCalc,vintage)
7983              $(storage_usedTech(nodesModelToCalc,yearsToCalc,storage_techs,vintage) and balance_techComm(storage_techs,commodity)),
7984          storage_flows_ext(timeModelToCalc,accNodesModel,nodesModelToCalc,accYears,yearsToCalc,storage_techs,vintage,commodity));
7985  option clear = storage_flows_ext;
7986   
7987  storage_level_out_ext(timeModelToCalc,map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,yearsToCalc),storage_techs(techs),vintage,commodity)
7988      $(storage_usedTech(nodesModelToCalc,yearsToCalc,storage_techs,vintage) and balance_techComm(storage_techs,commodity))
7989      = storage_level.l(timeModelToCalc,nodesModelToCalc,yearsToCalc,storage_techs,vintage,commodity);
7990   
7991  storage_level_out(timeModelToCalc,accNodesModel,accYears,storage_techs(techs),commodity)
7992      = sum((nodesModelToCalc,yearsToCalc,vintage)
7993              $(storage_usedTech(nodesModelToCalc,yearsToCalc,storage_techs,vintage) and balance_techComm(storage_techs,commodity)),
7994          storage_level_out_ext(timeModelToCalc,accNodesModel,nodesModelToCalc,accYears,yearsToCalc,storage_techs,vintage,commodity));
7995  option clear = storage_level_out_ext;
7996   
7997  storage_flows_annual(accNodesModel,accYears,storage_techs(techs),commodity,"netto")
7998      = sum(timeModelToCalc,
7999          storage_flows(timeModelToCalc,accNodesModel,accYears,storage_techs,commodity));
8000   
8001  storage_flows_annual(accNodesModel,accYears,storage_techs(techs),commodity,"positive")
8002      = sum(timeModelToCalc
8003              $(storage_flows(timeModelToCalc,accNodesModel,accYears,storage_techs,commodity) > 0),
8004          storage_flows(timeModelToCalc,accNodesModel,accYears,storage_techs,commodity));
8005   
8006  storage_flows_annual(accNodesModel,accYears,storage_techs(techs),commodity,"negative")
8007      = sum(timeModelToCalc
8008              $(storage_flows(timeModelToCalc,accNodesModel,accYears,storage_techs,commodity) < 0),
8009          storage_flows(timeModelToCalc,accNodesModel,accYears,storage_techs,commodity));
8010   
8011  storage_flows_annual(accNodesModel,accYears,storage_techs(techs),commodity,"brutto")
8012      = storage_flows_annual(accNodesModel,accYears,storage_techs,commodity,"positive")
8013          + storage_flows_annual(accNodesModel,accYears,storage_techs,commodity,"negative");
8014   
8015  storage_flows_annual(accNodesModel,accYears,storage_techs(techs),commodity,"flh")
8016      $(storage_flows_annual(accNodesModel,accYears,storage_techs,commodity,"brutto") > 0
8017          and storage_caps(accNodesModel,accYears,storage_techs,commodity,"total") > 0)
8018      = storage_flows_annual(accNodesModel,accYears,storage_techs,commodity,"brutto")
8019          / storage_caps(accNodesModel,accYears,storage_techs,commodity,"total");
8020   
8021  storage_losses_out(timeModelToCalc,accNodesModel,accYears,storage_techs(techs),commodity)
8022      = sum((nodesModelToCalc,yearsToCalc,vintage)
8023              $(storage_losses.l(timeModelToCalc,nodesModelToCalc,yearsToCalc,storage_techs,vintage,commodity)
8024                  and map_accNodesPostCalc(accNodesModel,nodesModelToCalc)
8025                  and map_accYearsPostCalc(accYears,yearsToCalc)),
8026          storage_losses.l(timeModelToCalc,nodesModelToCalc,yearsToCalc,storage_techs,vintage,commodity)
8027          * timeLength(timeModelToCalc));
8028   
8029  storage_losses_annual(accNodesModel,accYears,storage_techs(techs),commodity,"netto")
8030      = sum(timeModelToCalc,
8031          storage_losses_out(timeModelToCalc,accNodesModel,accYears,storage_techs,commodity));
8032   
8033   
8034  * == commodity balance ==
8035   
8036  commodity_balance_ext(timeModelToCalc,map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,yearsToCalc),converter_techs(techs),vintage,commodity)
8037      $(converter_usedTech(nodesModelToCalc,yearsToCalc,converter_techs,vintage)
8038          and balance_usedConverter(nodesModelToCalc,yearsToCalc,commodity))
8039      = sum((activity)
8040              $(converter_coefficientProfile(timeModelToCalc,nodesModelToCalc,yearsToCalc,converter_techs,vintage,activity,commodity)),
8041          converter_activity.l(timeModelToCalc,nodesModelToCalc,yearsToCalc,converter_techs,vintage,activity)
8042              * timeLength(timeModelToCalc)
8043              * converter_coefficientProfile(timeModelToCalc,nodesModelToCalc,yearsToCalc,converter_techs,vintage,activity,commodity)
8044          + converter_unitsUsingActivity_MIP.l(timeModelToCalc,nodesModelToCalc,yearsToCalc,converter_techs,vintage,activity)
8045              * timeLength(timeModelToCalc)
8046              * converter_coefficient(converter_techs,vintage,activity,commodity,"constant"));
8047   
8048  commodity_balance_ext(timeModelToCalc,map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,yearsToCalc),storage_techs(techs),vintage,commodity)
8049      $(storage_usedTech(nodesModelToCalc,yearsToCalc,storage_techs,vintage)
8050          and storage_sizeParam(storage_techs,vintage,commodity,"size"))
8051      = commodity_balance_ext(timeModelToCalc,accNodesModel,nodesModelToCalc,accYears,yearsToCalc,storage_techs,vintage,commodity)
8052      + storage_level.l(timeModelToCalc--1,nodesModelToCalc,yearsToCalc,storage_techs,vintage,commodity)
8053          - storage_level.l(timeModelToCalc,nodesModelToCalc,yearsToCalc,storage_techs,vintage,commodity)
8054      - storage_losses.l(timeModelToCalc,nodesModelToCalc,yearsToCalc,storage_techs,vintage,commodity)
8055      * timeLength(timeModelToCalc);
8056   
8057  commodity_balance_ext(timeModelToCalc,map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,yearsToCalc),sourcesink_techs(techs),vintage,commodity)
8058      $(sourcesink_enabled(nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity)
8059          and sameas(yearsToCalc,vintage))
8060      = commodity_balance_ext(timeModelToCalc,accNodesModel,nodesModelToCalc,accYears,yearsToCalc,sourcesink_techs,vintage,commodity)
8061      + sourcesink_flow.l(timeModelToCalc,nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity)
8062      * timeLength(timeModelToCalc);
8063   
8064  commodity_balance_ext(timeModelToCalc,map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,yearsToCalc),transfer_techs(techs),vintage,commodity)
8065      $sum((linksModel)
8066          $(transfer_incidenceModel(nodesModelToCalc,linksModel)
8067                  and transfer_usedTech(linksModel,yearsToCalc,transfer_techs,vintage)
8068                  and transfer_coefficient(transfer_techs,vintage,commodity,"coefficient")), 1)
8069      = commodity_balance_ext(timeModelToCalc,accNodesModel,nodesModelToCalc,accYears,yearsToCalc,transfer_techs,vintage,commodity)
8070      + sum((linksModel)
8071              $(transfer_incidenceModel(nodesModelToCalc,linksModel)
8072                  and transfer_usedTech(linksModel,yearsToCalc,transfer_techs,vintage)
8073                  and transfer_coefficient(transfer_techs,vintage,commodity,"coefficient")),
8074   
8075              (transfer_flowAlong.l(timeModelToCalc,linksModel,yearsToCalc,transfer_techs,vintage)
8076                      $(transfer_incidenceModel(nodesModelToCalc,linksModel) > 0)
8077                + transfer_flowAgainst.l(timeModelToCalc,linksModel,yearsToCalc,transfer_techs,vintage)
8078                      $(transfer_incidenceModel(nodesModelToCalc,linksModel) < 0))
8079              * timeLength(timeModelToCalc)
8080              * transfer_coefficient(transfer_techs,vintage,commodity,"coefficient")
8081   
8082              - (transfer_flowAlong.l(timeModelToCalc,linksModel,yearsToCalc,transfer_techs,vintage)
8083                      $(transfer_incidenceModel(nodesModelToCalc,linksModel) < 0)
8084                + transfer_flowAgainst.l(timeModelToCalc,linksModel,yearsToCalc,transfer_techs,vintage)
8085                      $(transfer_incidenceModel(nodesModelToCalc,linksModel) > 0))
8086              * timeLength(timeModelToCalc)
8087              * transfer_coefficient(transfer_techs,vintage,commodity,"coefficient")
8088   
8089              + 0.5 * ((transfer_flowAlong.l(timeModelToCalc,linksModel,yearsToCalc,transfer_techs,vintage)
8090                          $(transfer_incidenceModel(nodesModelToCalc,linksModel) <> 0)
8091                      + transfer_flowAgainst.l(timeModelToCalc,linksModel,yearsToCalc,transfer_techs,vintage)
8092                          $(transfer_incidenceModel(nodesModelToCalc,linksModel) <> 0))
8093                      * timeLength(timeModelToCalc)
8094                      * ( transfer_coefPerFlow(transfer_techs,vintage,commodity,"coefPerFlow")
8095                          + sum(link_types,
8096                              transfer_coefPerLength(transfer_techs,vintage,commodity,link_types,"coefPerLength")
8097                              * transfer_lengthParam(linksModel,link_types,"length")))))
8098      ;
8099   
8100  commodity_balance(timeModelToCalc,accNodesModel,accYears,balance_techComm(techs,commodity))
8101      = sum((nodesModelToCalc,yearsToCalc,vintage)
8102              $(commodity_balance_ext(timeModelToCalc,accNodesModel,nodesModelToCalc,accYears,yearsToCalc,techs,vintage,commodity)
8103                  and map_accNodesPostCalc(accNodesModel,nodesModelToCalc)
8104                  and map_accYearsPostCalc(accYears,yearsToCalc)),
8105          commodity_balance_ext(timeModelToCalc,accNodesModel,nodesModelToCalc,accYears,yearsToCalc,techs,vintage,commodity));
8106  option clear = commodity_balance_ext;
8107   
8108   
8109  * ==== annual commodity sums ====
8110   
8111  commodity_balance_annual(accNodesModel,accYears,techs,commodity,"netto")
8112      = sum(timeModelToCalc,
8113          commodity_balance(timeModelToCalc,accNodesModel,accYears,techs,commodity));
8114   
8115  commodity_balance_annual(accNodesModel,accYears,techs,commodity,"positive")
8116      = sum(timeModelToCalc
8117              $(commodity_balance(timeModelToCalc,accNodesModel,accYears,techs,commodity) > 0),
8118          commodity_balance(timeModelToCalc,accNodesModel,accYears,techs,commodity));
8119   
8120  commodity_balance_annual(accNodesModel,accYears,techs,commodity,"negative")
8121      = sum(timeModelToCalc
8122              $(commodity_balance(timeModelToCalc,accNodesModel,accYears,techs,commodity) < 0),
8123          commodity_balance(timeModelToCalc,accNodesModel,accYears,techs,commodity));
8124   
8125  commodity_balance_annual(accNodesModel,accYears,techs,commodity,"brutto")
8126      = commodity_balance_annual(accNodesModel,accYears,techs,commodity,"positive")
8127          - commodity_balance_annual(accNodesModel,accYears,techs,commodity,"negative");
8128   
8129  commodity_balance_annual(accNodesModel,accYears,techs,commodity,"flh")
8130      $(commodity_balance_annual(accNodesModel,accYears,techs,commodity,"brutto") > 0
8131          and converter_caps(accNodesModel,accYears,techs,commodity,"total") > 0 )
8132      = commodity_balance_annual(accNodesModel,accYears,techs,commodity,"brutto")
8133          / converter_caps(accNodesModel,accYears,techs,commodity,"total");
8134   
8135   
8136  * ==== marginal information ====
8137   
8138  marginals_balance(timeModelToCalc,nodesModelToCalc,yearsToCalc,commodity)
8139    $balance_usedBalance(nodesModelToCalc,yearsToCalc,commodity)
8140    =
8141    Eq_balance_commodities.m(timeModelToCalc,nodesModelToCalc,yearsToCalc,commodity);
8142   
8143  marginals_sourcesink_profile(timeModelToCalc,nodesModelToCalc,yearsToCalc,sourcesink_techs(techs),commodity)
8144      $( sourcesink_flow.m(timeModelToCalc,nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity) <> 0 )
8145      =
8146      sourcesink_flow.m(timeModelToCalc,nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity);
8147   
8148  marginals_sourcesink_sum(nodesModelToCalc,yearsToCalc,sourcesink_techs(techs),commodity)
8149      $( ( Eq_sourcesink_useLowerSum.m(nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity)
8150          + Eq_sourcesink_useUpperSum.m(nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity)
8151          + Eq_sourcesink_useFixedSum.m(nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity) ) <> eps )
8152      =
8153      ( Eq_sourcesink_useLowerSum.m(nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity)
8154      + Eq_sourcesink_useUpperSum.m(nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity)
8155      + Eq_sourcesink_useFixedSum.m(nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity) );
8156   
8157  marginals_indicator_bounds(accNodesModel,accYears,indicator)
8158      $( accounting_indicator.m(accNodesModel,accYears,indicator) <> 0 )
8159      =
8160      accounting_indicator.m(accNodesModel,accYears,indicator);
8161   
8162   
8163  * ==== R2A postcalc information ====
8164   
8166   
8167   
8168  * ==== round profiles to reduce size of gdx ====
8169   
8171  commodity_balance(timeModelToCalc,accNodesModel,accYears,techs,commodity)
8172      $commodity_balance(timeModelToCalc,accNodesModel,accYears,techs,commodity)
8173      = round(commodity_balance(timeModelToCalc,accNodesModel,accYears,techs,commodity), 6);
8174   
8175  transfer_flows(timeModelToCalc,nodesModelToCalc,nodesModelToCalc_a,linksModel,yearsToCalc,transfer_techs,commodity)
8176      $transfer_flows(timeModelToCalc,nodesModelToCalc,nodesModelToCalc_a,linksModel,yearsToCalc,transfer_techs,commodity)
8177      = round(transfer_flows(timeModelToCalc,nodesModelToCalc,nodesModelToCalc_a,linksModel,yearsToCalc,transfer_techs,commodity), 6);
8178   
8179  transfer_losses(timeModelToCalc,nodesModelToCalc,nodesModelToCalc_a,linksModel,yearsToCalc,transfer_techs,commodity)
8180      $transfer_losses(timeModelToCalc,nodesModelToCalc,nodesModelToCalc_a,linksModel,yearsToCalc,transfer_techs,commodity)
8181      = round(transfer_losses(timeModelToCalc,nodesModelToCalc,nodesModelToCalc_a,linksModel,yearsToCalc,transfer_techs,commodity), 6);
8182   
8183  storage_flows(timeModelToCalc,accNodesModel,accYears,storage_techs,commodity)
8184      $storage_flows(timeModelToCalc,accNodesModel,accYears,storage_techs,commodity)
8185      = round(storage_flows(timeModelToCalc,accNodesModel,accYears,storage_techs,commodity), 6);
8186   
8187  storage_level_out(timeModelToCalc,accNodesModel,accYears,storage_techs,commodity)
8188      $storage_level_out(timeModelToCalc,accNodesModel,accYears,storage_techs,commodity)
8189      = round(storage_level_out(timeModelToCalc,accNodesModel,accYears,storage_techs,commodity), 6);
8190   
8191  marginals_balance(timeModelToCalc,nodesModelToCalc,yearsToCalc,commodity)
8192      $marginals_balance(timeModelToCalc,nodesModelToCalc,yearsToCalc,commodity)
8193      = round(marginals_balance(timeModelToCalc,nodesModelToCalc,yearsToCalc,commodity), 6);
8194   
8195  marginals_sourcesink_profile(timeModelToCalc,nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity)
8196      $marginals_sourcesink_profile(timeModelToCalc,nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity)
8197      = round(marginals_sourcesink_profile(timeModelToCalc,nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity), 6);
8199   
INCLUDE    C:\Local\REMix\framework\remix\framework\model\source\postcalc\writegdx.gms
8202  * SPDX-FileCopyrightText: Copyright (c) 2023 German Aerospace Center (DLR)
8203  * SPDX-License-Identifier: BSD-3-Clause
8204   
8207   
8208  execute_unload "C:\Local\REMix\remix_nz\output\nz_profile_11nodes_2040\result\nz_profile_11nodes_2040_test_re.gdx"
8209      metadata
8210      timeModel
8211      timeModelToCalc
8212      nodesModel
8213      linksModel
8214      indicator
8215      commodity
8216      techs
8217      accNodesModel
8218      accYears
8219   
8220      map_nodesModel
8221      map_linksModel
8222      map_nodesAccounting
8223   
8224      indicator_accounting
8225      indicator_accounting_ref
8226      indicator_accounting_comp
8227      indicator_accounting_detailed
8228      indicator_accounting_links
8229   
8230      converter_caps
8231      converter_units
8233   
8234      transfer_caps
8235      transfer_links
8236      transfer_flows
8237      transfer_flows_annual
8238      transfer_losses
8239      transfer_losses_annual
8240   
8241      storage_caps
8242      storage_units
8243      storage_flows
8244      storage_level_out
8245      storage_flows_annual
8246      storage_losses_out
8247      storage_losses_annual
8249   
8250      commodity_balance
8251      commodity_balance_annual
8252   
8253      marginals_balance
8254      marginals_sourcesink_profile
8255      marginals_sourcesink_sum
8256      marginals_indicator_bounds
8257   
8259      ;
GAMS 40.4.0  d540b52e Oct 3, 2022           WEX-WEI x86 64bit/MS Windows - 10/05/23 16:01:13 Page 2
G e n e r a l   A l g e b r a i c   M o d e l i n g   S y s t e m
Include File Summary


   SEQ   GLOBAL TYPE      PARENT   LOCAL  FILENAME

     1        1 INPUT          0       0  C:\Local\REMix\framework\remix\framework\model\run_remix.gms
     2       12 IF DEXIST      1      12  C:\Local\REMix\remix_nz\output\nz_profile_11nodes_2040\data\
     3       15 INCLUDE        1      15  .C:\Local\REMix\framework\remix\framework\model\source\metadata.gms
     4       23 CALL           3       8  .printf "remix_version \"0.9.2\"\n" > c:\Local\REMix\remix_nz\process\225a\\metadata
     5       24 CALL           3       9  .printf "gams_version \"40.4.0\"\n" >> c:\Local\REMix\remix_nz\process\225a\\metadata
     6       25 CALL           3      10  .printf "timestamp \"10/05/23 16:01:13\"\n" >> c:\Local\REMix\remix_nz\process\225a\\metadata
     7       27 CALL           3      12  .printf "framework_path " >> c:\Local\REMix\remix_nz\process\225a\\metadata
     8       29 CALL           3      14  .cd C:\Local\REMix\framework\remix\framework\model\source && cd| sed "s/^/\"/;s/$/\"/" >> c:\Local\REMix\remix_nz\process\225a\\metadata
     9       31 CALL           3      18  .printf "\n" >> c:\Local\REMix\remix_nz\process\225a\\metadata
    10       32 CALL           3      19  .printf "framework_hash " >> c:\Local\REMix\remix_nz\process\225a\\metadata
    11       34 CALL           3      21  .cd C:\Local\REMix\framework\remix\framework\model\source && git rev-parse HEAD >nul 2>&1 && git rev-parse HEAD >> c:\Local\REMix\remix_nz\process\225a\\metadata
    12       36 CALL           3      25  .printf "\n" >> c:\Local\REMix\remix_nz\process\225a\\metadata
    13       37 CALL           3      26  .printf "framework_branch " >> c:\Local\REMix\remix_nz\process\225a\\metadata
    14       39 CALL           3      28  .cd C:\Local\REMix\framework\remix\framework\model\source && git rev-parse --abbrev-ref HEAD >nul 2>&1 && git rev-parse --abbrev-ref HEAD | sed "s/^/\"/;s/$/\"/" >> c:\Local\REMix\remix_nz\process\225a\\metadata
    15       41 CALL           3      32  .printf "\n" >> c:\Local\REMix\remix_nz\process\225a\\metadata
    16       43 CALL           3      34  .printf "project_path " >> c:\Local\REMix\remix_nz\process\225a\\metadata
    17       45 CALL           3      36  .cd C:\Local\REMix\remix_nz\output\nz_profile_11nodes_2040\data\./ && cd| sed "s/^/\"/;s/$/\"/" >> c:\Local\REMix\remix_nz\process\225a\\metadata
    18       47 CALL           3      40  .printf "\n" >> c:\Local\REMix\remix_nz\process\225a\\metadata
    19       48 CALL           3      41  .printf "project_hash " >> c:\Local\REMix\remix_nz\process\225a\\metadata
    20       50 CALL           3      43  .cd C:\Local\REMix\remix_nz\output\nz_profile_11nodes_2040\data\./ && git rev-parse HEAD >nul 2>&1 && git rev-parse HEAD | sed "s/^/\"/;s/$/\"/" >> c:\Local\REMix\remix_nz\process\225a\\metadata
    21       52 CALL           3      47  .printf "\n" >> c:\Local\REMix\remix_nz\process\225a\\metadata
    22       53 CALL           3      48  .printf "project_branch " >> c:\Local\REMix\remix_nz\process\225a\\metadata
    23       55 CALL           3      50  .cd C:\Local\REMix\remix_nz\output\nz_profile_11nodes_2040\data\./ && git rev-parse --abbrev-ref HEAD >nul 2>&1 && git rev-parse --abbrev-ref HEAD | sed "s/^/\"/;s/$/\"/" >> c:\Local\REMix\remix_nz\process\225a\\metadata
    24       57 CALL           3      54  .printf "\n" >> c:\Local\REMix\remix_nz\process\225a\\metadata
    25       60 INCLUDE        3      57  ..c:\Local\REMix\remix_nz\process\225a\metadata
    26       77 INCLUDE        1      16  .C:\Local\REMix\framework\remix\framework\model\source\data_inheritance.gms
    27      119 INCLUDE        1      25  .C:\Local\REMix\framework\remix\framework\model\source\remix.gms
    28      140 INCLUDE       27      21  ..C:\Local\REMix\framework\remix\framework\model\source\sets.gms
    29      160 IF EXIST      28      20  ..c:\Local\REMix\remix_nz\process\225a\map_aggregatetimemodel.csv
    30      211 IF EXIST      28      97  ..c:\Local\REMix\remix_nz\process\225a\set_nodesmodel.csv
    31      211 INCLUDE       28      97  ...c:\Local\REMix\remix_nz\process\225a\set_nodesmodel.csv
    32      224 IF EXIST      28      99  ..c:\Local\REMix\remix_nz\process\225a\set_nodesmodel.csv
    33      231 IF EXIST      28     106  ..c:\Local\REMix\remix_nz\process\225a\set_nodesdata.csv
    34      231 INCLUDE       28     106  ...c:\Local\REMix\remix_nz\process\225a\set_nodesdata.csv
    35      244 IF EXIST      28     108  ..c:\Local\REMix\remix_nz\process\225a\set_nodesdata.csv
    36      250 IF EXIST      28     114  ..c:\Local\REMix\remix_nz\process\225a\set_nodesmodelsel.csv
    37      250 INCLUDE       28     114  ...c:\Local\REMix\remix_nz\process\225a\set_nodesmodelsel.csv
    38      263 IF EXIST      28     116  ..c:\Local\REMix\remix_nz\process\225a\set_nodesmodelsel.csv
    39      265 IF EXIST      28     118  ..c:\Local\REMix\remix_nz\process\225a\set_nodesmodelsel.csv
    40      278 IF EXIST      28     131  ..c:\Local\REMix\remix_nz\process\225a\map_aggregatenodesmodel.csv
    41      278 INCLUDE       28     131  ...c:\Local\REMix\remix_nz\process\225a\map_aggregatenodesmodel.csv
    42      291 IF EXIST      28     133  ..c:\Local\REMix\remix_nz\process\225a\map_aggregatenodesmodel.csv
    43      294 IF EXIST      28     136  ..c:\Local\REMix\remix_nz\process\225a\map_aggregatenodesmodel.csv
    44      317 IF EXIST      28     159  ..c:\Local\REMix\remix_nz\process\225a\set_years.csv
    45      317 INCLUDE       28     159  ...c:\Local\REMix\remix_nz\process\225a\set_years.csv
    46      326 IF EXIST      28     161  ..c:\Local\REMix\remix_nz\process\225a\set_years.csv
    47      335 IF EXIST      28     170  ..c:\Local\REMix\remix_nz\process\225a\set_years.csv
    48      335 INCLUDE       28     170  ...c:\Local\REMix\remix_nz\process\225a\set_years.csv
    49      344 IF EXIST      28     172  ..c:\Local\REMix\remix_nz\process\225a\set_years.csv
    50      350 IF EXIST      28     178  ..c:\Local\REMix\remix_nz\process\225a\set_yearssel.csv
    51      350 INCLUDE       28     178  ...c:\Local\REMix\remix_nz\process\225a\set_yearssel.csv
    52      353 IF EXIST      28     180  ..c:\Local\REMix\remix_nz\process\225a\set_yearssel.csv
    53      371 IF EXIST      28     198  ..c:\Local\REMix\remix_nz\process\225a\set_activities.csv
    54      371 INCLUDE       28     198  ...c:\Local\REMix\remix_nz\process\225a\set_activities.csv
    55      377 IF EXIST      28     200  ..c:\Local\REMix\remix_nz\process\225a\set_activities.csv
    56      385 IF EXIST      28     208  ..c:\Local\REMix\remix_nz\process\225a\set_gridsegments.csv
    57      387 IF EXIST      28     210  ..c:\Local\REMix\remix_nz\process\225a\set_gridsegments.csv
    58      395 IF EXIST      28     218  ..c:\Local\REMix\remix_nz\process\225a\set_linksdata.csv
    59      395 INCLUDE       28     218  ...c:\Local\REMix\remix_nz\process\225a\set_linksdata.csv
    60      409 IF EXIST      28     220  ..c:\Local\REMix\remix_nz\process\225a\set_linksdata.csv
    61      427 IF EXIST      28     238  ..c:\Local\REMix\remix_nz\process\225a\set_link_types.csv
    62      427 INCLUDE       28     238  ...c:\Local\REMix\remix_nz\process\225a\set_link_types.csv
    63      431 IF EXIST      28     240  ..c:\Local\REMix\remix_nz\process\225a\set_link_types.csv
    64      440 IF EXIST      28     249  ..c:\Local\REMix\remix_nz\process\225a\set_commodities.csv
    65      440 INCLUDE       28     249  ...c:\Local\REMix\remix_nz\process\225a\set_commodities.csv
    66      446 IF EXIST      28     251  ..c:\Local\REMix\remix_nz\process\225a\set_commodities.csv
    67      455 IF EXIST      28     260  ..c:\Local\REMix\remix_nz\process\225a\set_indicators.csv
    68      455 INCLUDE       28     260  ...c:\Local\REMix\remix_nz\process\225a\set_indicators.csv
    69      463 IF EXIST      28     262  ..c:\Local\REMix\remix_nz\process\225a\set_indicators.csv
    70      472 IF EXIST      28     271  ..c:\Local\REMix\remix_nz\process\225a\set_converter_techs.csv
    71      472 INCLUDE       28     271  ...c:\Local\REMix\remix_nz\process\225a\set_converter_techs.csv
    72      482 IF EXIST      28     274  ..c:\Local\REMix\remix_nz\process\225a\set_storage_techs.csv
    73      482 INCLUDE       28     274  ...c:\Local\REMix\remix_nz\process\225a\set_storage_techs.csv
    74      486 IF EXIST      28     277  ..c:\Local\REMix\remix_nz\process\225a\set_transfer_techs.csv
    75      486 INCLUDE       28     277  ...c:\Local\REMix\remix_nz\process\225a\set_transfer_techs.csv
    76      490 IF EXIST      28     280  ..c:\Local\REMix\remix_nz\process\225a\set_sourcesink_techs.csv
    77      490 INCLUDE       28     280  ...c:\Local\REMix\remix_nz\process\225a\set_sourcesink_techs.csv
    78      498 IF EXIST      28     285  ..c:\Local\REMix\remix_nz\process\225a\set_converter_techs.csv
    79      498 INCLUDE       28     285  ...c:\Local\REMix\remix_nz\process\225a\set_converter_techs.csv
    80      506 IF EXIST      28     286  ..c:\Local\REMix\remix_nz\process\225a\set_converter_techs.csv
    81      510 IF EXIST      28     290  ..c:\Local\REMix\remix_nz\process\225a\set_storage_techs.csv
    82      510 INCLUDE       28     290  ...c:\Local\REMix\remix_nz\process\225a\set_storage_techs.csv
    83      512 IF EXIST      28     291  ..c:\Local\REMix\remix_nz\process\225a\set_storage_techs.csv
    84      517 IF EXIST      28     296  ..c:\Local\REMix\remix_nz\process\225a\set_transfer_techs.csv
    85      517 INCLUDE       28     296  ...c:\Local\REMix\remix_nz\process\225a\set_transfer_techs.csv
    86      519 IF EXIST      28     297  ..c:\Local\REMix\remix_nz\process\225a\set_transfer_techs.csv
    87      523 IF EXIST      28     301  ..c:\Local\REMix\remix_nz\process\225a\set_sourcesink_techs.csv
    88      523 INCLUDE       28     301  ...c:\Local\REMix\remix_nz\process\225a\set_sourcesink_techs.csv
    89      527 IF EXIST      28     302  ..c:\Local\REMix\remix_nz\process\225a\set_sourcesink_techs.csv
    90      537 IF EXIST      28     312  ..c:\Local\REMix\remix_nz\process\225a\set_degradation_states.csv
    91      539 IF EXIST      28     314  ..c:\Local\REMix\remix_nz\process\225a\set_degradation_states.csv
    92      548 IF EXIST      28     323  ..c:\Local\REMix\remix_nz\process\225a\set_soc.csv
    93      550 IF EXIST      28     325  ..c:\Local\REMix\remix_nz\process\225a\set_soc.csv
    94      566 IF EXIST      28     341  ..c:\Local\REMix\remix_nz\process\225a\transfer_linkstartend.csv
    95      566 INCLUDE       28     341  ...c:\Local\REMix\remix_nz\process\225a\transfer_linkstartend.csv
    96      593 IF EXIST      28     343  ..c:\Local\REMix\remix_nz\process\225a\transfer_linkstartend.csv
    97      607 BATINCLUDE    28     357  ...C:\Local\REMix\framework\remix\framework\model\source\battools\aggregateNodes.gms
    98      716 IF EXIST      28     464  ..c:\Local\REMix\remix_nz\process\225a\set_accnodes.csv
    99      718 IF EXIST      28     466  ..c:\Local\REMix\remix_nz\process\225a\set_accnodes.csv
   100      783 IF EXIST      28     531  ..c:\Local\REMix\remix_nz\process\225a\map_accnodes.csv
   101      785 IF EXIST      28     533  ..c:\Local\REMix\remix_nz\process\225a\map_accnodes.csv
   102      839 INCLUDE       27      22  ..C:\Local\REMix\framework\remix\framework\model\source\accounting\input.gms
   103      871 IF EXIST     102      32  ..c:\Local\REMix\remix_nz\process\225a\accounting_converterunits.csv
   104      871 INCLUDE      102      32  ...c:\Local\REMix\remix_nz\process\225a\accounting_converterunits.csv
   105      930 IF EXIST     102      34  ..c:\Local\REMix\remix_nz\process\225a\accounting_converterunits.csv
   106      944 IF EXIST     102      48  ..c:\Local\REMix\remix_nz\process\225a\accounting_converteractivity.csv
   107      946 IF EXIST     102      50  ..c:\Local\REMix\remix_nz\process\225a\accounting_converteractivity.csv
   108      963 IF EXIST     102      67  ..c:\Local\REMix\remix_nz\process\225a\accounting_converterstartup.csv
   109      965 IF EXIST     102      69  ..c:\Local\REMix\remix_nz\process\225a\accounting_converterstartup.csv
   110      984 IF EXIST     102      88  ..c:\Local\REMix\remix_nz\process\225a\accounting_storageunits.csv
   111      984 INCLUDE      102      88  ...c:\Local\REMix\remix_nz\process\225a\accounting_storageunits.csv
   112      995 IF EXIST     102      90  ..c:\Local\REMix\remix_nz\process\225a\accounting_storageunits.csv
   113     1017 IF EXIST     102     112  ..c:\Local\REMix\remix_nz\process\225a\accounting_transferlinks.csv
   114     1017 INCLUDE      102     112  ...c:\Local\REMix\remix_nz\process\225a\accounting_transferlinks.csv
   115     1022 IF EXIST     102     114  ..c:\Local\REMix\remix_nz\process\225a\accounting_transferlinks.csv
   116     1044 IF EXIST     102     136  ..c:\Local\REMix\remix_nz\process\225a\accounting_transferperlength.csv
   117     1044 INCLUDE      102     136  ...c:\Local\REMix\remix_nz\process\225a\accounting_transferperlength.csv
   118     1051 IF EXIST     102     138  ..c:\Local\REMix\remix_nz\process\225a\accounting_transferperlength.csv
   119     1066 IF EXIST     102     153  ..c:\Local\REMix\remix_nz\process\225a\accounting_sourcesinkflow.csv
   120     1066 INCLUDE      102     153  ...c:\Local\REMix\remix_nz\process\225a\accounting_sourcesinkflow.csv
   121     1076 IF EXIST     102     155  ..c:\Local\REMix\remix_nz\process\225a\accounting_sourcesinkflow.csv
   122     1090 IF EXIST     102     169  ..c:\Local\REMix\remix_nz\process\225a\accounting_perindicator.csv
   123     1090 INCLUDE      102     169  ...c:\Local\REMix\remix_nz\process\225a\accounting_perindicator.csv
   124     1098 IF EXIST     102     171  ..c:\Local\REMix\remix_nz\process\225a\accounting_perindicator.csv
   125     1124 IF EXIST     102     197  ..c:\Local\REMix\remix_nz\process\225a\accounting_indicatorbounds.csv
   126     1124 INCLUDE      102     197  ...c:\Local\REMix\remix_nz\process\225a\accounting_indicatorbounds.csv
   127     1128 IF EXIST     102     199  ..c:\Local\REMix\remix_nz\process\225a\accounting_indicatorbounds.csv
   128     1147 IF EXIST     102     218  ..c:\Local\REMix\remix_nz\process\225a\accounting_indicatorbounds_links.csv
   129     1149 IF EXIST     102     220  ..c:\Local\REMix\remix_nz\process\225a\accounting_indicatorbounds_links.csv
   130     1155 BATINCLUDE   102     226  ...C:\Local\REMix\framework\remix\framework\model\source\battools\aggregateAccountingMean.gms
   131     1214 BATINCLUDE   102     227  ...C:\Local\REMix\framework\remix\framework\model\source\battools\aggregateAccountingMean.gms
   132     1257 BATINCLUDE   102     228  ...C:\Local\REMix\framework\remix\framework\model\source\battools\aggregateAccountingMean.gms
   133     1300 BATINCLUDE   102     229  ...C:\Local\REMix\framework\remix\framework\model\source\battools\aggregateAccountingMean.gms
   134     1359 BATINCLUDE   102     230  ...C:\Local\REMix\framework\remix\framework\model\source\battools\aggregateAccountingMean.gms
   135     1418 BATINCLUDE   102     231  ...C:\Local\REMix\framework\remix\framework\model\source\battools\aggregateAccountingMean.gms
   136     1477 BATINCLUDE   102     232  ...C:\Local\REMix\framework\remix\framework\model\source\battools\aggregateAccountingMean.gms
   137     1886 INCLUDE       27      23  ..C:\Local\REMix\framework\remix\framework\model\source\accounting\annuities.gms
   138     1958 INCLUDE       27      25  ..C:\Local\REMix\framework\remix\framework\model\source\methods\mga_pre.gms
   139     1964 INCLUDE       27      26  ..C:\Local\REMix\framework\remix\framework\model\source\methods\pareto_pre.gms
   140     1970 INCLUDE       27      27  ..C:\Local\REMix\framework\remix\framework\model\source\postcalc\declaration.gms
   141     1987 IF DEXIST    140      17  ..C:\Local\REMix\remix_nz\output\nz_profile_11nodes_2040\result\
   142     2188 INCLUDE       27      28  ..C:\Local\REMix\framework\remix\framework\model\source\loadgdx.gms
   143     2197 INCLUDE       27      30  ..C:\Local\REMix\framework\remix\framework\model\source\core\converter.gms
   144     2300 IF EXIST     143     103  ..c:\Local\REMix\remix_nz\process\225a\converter_capacityparam.csv
   145     2300 INCLUDE      143     103  ...c:\Local\REMix\remix_nz\process\225a\converter_capacityparam.csv
   146     2842 IF EXIST     143     105  ..c:\Local\REMix\remix_nz\process\225a\converter_capacityparam.csv
   147     2850 BATINCLUDE   143     113  ...C:\Local\REMix\framework\remix\framework\model\source\battools\aggregateNodes.gms
   148     2861 BATINCLUDE   143     114  ...C:\Local\REMix\framework\remix\framework\model\source\battools\aggregateNodes.gms
   149     2894 IF EXIST     143     137  ..c:\Local\REMix\remix_nz\process\225a\converter_techparam.csv
   150     2894 INCLUDE      143     137  ...c:\Local\REMix\remix_nz\process\225a\converter_techparam.csv
   151     2925 IF EXIST     143     139  ..c:\Local\REMix\remix_nz\process\225a\converter_techparam.csv
   152     2947 IF EXIST     143     161  ..c:\Local\REMix\remix_nz\process\225a\converter_activityprofile.csv
   153     2947 INCLUDE      143     161  ...c:\Local\REMix\remix_nz\process\225a\converter_activityprofile.csv
   154     3015 IF EXIST     143     162  ..c:\Local\REMix\remix_nz\process\225a\converter_activityprofile.csv
   155     3017 IF EXIST     143     164  ..c:\Local\REMix\remix_nz\process\225a\converter_activityprofile.csv
   156     3037 IF EXIST     143     184  ..c:\Local\REMix\remix_nz\process\225a\converter_coefficient.csv
   157     3037 INCLUDE      143     184  ...c:\Local\REMix\remix_nz\process\225a\converter_coefficient.csv
   158     3151 IF EXIST     143     185  ..c:\Local\REMix\remix_nz\process\225a\converter_coefficient.csv
   159     3152 IF EXIST     143     186  ..c:\Local\REMix\remix_nz\process\225a\converter_coefficient.csv
   160     3154 IF EXIST     143     188  ..c:\Local\REMix\remix_nz\process\225a\converter_coefficient.csv
   161     3166 IF EXIST     143     200  ..c:\Local\REMix\remix_nz\process\225a\converter_coefficientprofile.csv
   162     3167 IF EXIST     143     201  ..c:\Local\REMix\remix_nz\process\225a\converter_coefficientprofile.csv
   163     3169 IF EXIST     143     203  ..c:\Local\REMix\remix_nz\process\225a\converter_coefficientprofile.csv
   164     4102 INCLUDE       27      31  ..C:\Local\REMix\framework\remix\framework\model\source\core\storage.gms
   165     4193 IF EXIST     164      91  ..c:\Local\REMix\remix_nz\process\225a\storage_reservoirparam.csv
   166     4193 INCLUDE      164      91  ...c:\Local\REMix\remix_nz\process\225a\storage_reservoirparam.csv
   167     4273 IF EXIST     164      93  ..c:\Local\REMix\remix_nz\process\225a\storage_reservoirparam.csv
   168     4277 BATINCLUDE   164      97  ...C:\Local\REMix\framework\remix\framework\model\source\battools\aggregateNodes.gms
   169     4288 BATINCLUDE   164      98  ...C:\Local\REMix\framework\remix\framework\model\source\battools\aggregateNodes.gms
   170     4324 IF EXIST     164     124  ..c:\Local\REMix\remix_nz\process\225a\storage_techparam.csv
   171     4324 INCLUDE      164     124  ...c:\Local\REMix\remix_nz\process\225a\storage_techparam.csv
   172     4331 IF EXIST     164     126  ..c:\Local\REMix\remix_nz\process\225a\storage_techparam.csv
   173     4352 IF EXIST     164     147  ..c:\Local\REMix\remix_nz\process\225a\storage_sizeparam.csv
   174     4352 INCLUDE      164     147  ...c:\Local\REMix\remix_nz\process\225a\storage_sizeparam.csv
   175     4359 IF EXIST     164     149  ..c:\Local\REMix\remix_nz\process\225a\storage_sizeparam.csv
   176     4376 IF EXIST     164     166  ..c:\Local\REMix\remix_nz\process\225a\storage_socparam.csv
   177     4378 IF EXIST     164     168  ..c:\Local\REMix\remix_nz\process\225a\storage_socparam.csv
   178     4397 IF EXIST     164     187  ..c:\Local\REMix\remix_nz\process\225a\storage_degradationparam.csv
   179     4399 IF EXIST     164     189  ..c:\Local\REMix\remix_nz\process\225a\storage_degradationparam.csv
   180     4428 IF EXIST     164     218  ..c:\Local\REMix\remix_nz\process\225a\storage_levelprofile.csv
   181     4429 IF EXIST     164     219  ..c:\Local\REMix\remix_nz\process\225a\storage_levelprofile.csv
   182     4431 IF EXIST     164     221  ..c:\Local\REMix\remix_nz\process\225a\storage_levelprofile.csv
   183     5251 INCLUDE       27      32  ..C:\Local\REMix\framework\remix\framework\model\source\core\transfer.gms
   184     5318 IF EXIST     183      73  ..c:\Local\REMix\remix_nz\process\225a\transfer_linksparam.csv
   185     5318 INCLUDE      183      73  ...c:\Local\REMix\remix_nz\process\225a\transfer_linksparam.csv
   186     5333 IF EXIST     183      75  ..c:\Local\REMix\remix_nz\process\225a\transfer_linksparam.csv
   187     5349 IF EXIST     183      91  ..c:\Local\REMix\remix_nz\process\225a\transfer_flowprofile.csv
   188     5351 IF EXIST     183      93  ..c:\Local\REMix\remix_nz\process\225a\transfer_flowprofile.csv
   189     5371 IF EXIST     183     113  ..c:\Local\REMix\remix_nz\process\225a\transfer_techparam.csv
   190     5371 INCLUDE      183     113  ...c:\Local\REMix\remix_nz\process\225a\transfer_techparam.csv
   191     5375 IF EXIST     183     115  ..c:\Local\REMix\remix_nz\process\225a\transfer_techparam.csv
   192     5389 IF EXIST     183     129  ..c:\Local\REMix\remix_nz\process\225a\transfer_coefficient.csv
   193     5389 INCLUDE      183     129  ...c:\Local\REMix\remix_nz\process\225a\transfer_coefficient.csv
   194     5393 IF EXIST     183     131  ..c:\Local\REMix\remix_nz\process\225a\transfer_coefficient.csv
   195     5407 IF EXIST     183     145  ..c:\Local\REMix\remix_nz\process\225a\transfer_coefperflow.csv
   196     5407 INCLUDE      183     145  ...c:\Local\REMix\remix_nz\process\225a\transfer_coefperflow.csv
   197     5411 IF EXIST     183     147  ..c:\Local\REMix\remix_nz\process\225a\transfer_coefperflow.csv
   198     5425 IF EXIST     183     161  ..c:\Local\REMix\remix_nz\process\225a\transfer_coefperlength.csv
   199     5425 INCLUDE      183     161  ...c:\Local\REMix\remix_nz\process\225a\transfer_coefperlength.csv
   200     5430 IF EXIST     183     163  ..c:\Local\REMix\remix_nz\process\225a\transfer_coefperlength.csv
   201     5444 IF EXIST     183     177  ..c:\Local\REMix\remix_nz\process\225a\transfer_reactperlength.csv
   202     5446 IF EXIST     183     179  ..c:\Local\REMix\remix_nz\process\225a\transfer_reactperlength.csv
   203     5460 IF EXIST     183     193  ..c:\Local\REMix\remix_nz\process\225a\transfer_lengthparam.csv
   204     5460 INCLUDE      183     193  ...c:\Local\REMix\remix_nz\process\225a\transfer_lengthparam.csv
   205     5487 IF EXIST     183     195  ..c:\Local\REMix\remix_nz\process\225a\transfer_lengthparam.csv
   206     5501 IF EXIST     183     209  ..c:\Local\REMix\remix_nz\process\225a\transfer_gridsegments.csv
   207     5503 IF EXIST     183     211  ..c:\Local\REMix\remix_nz\process\225a\transfer_gridsegments.csv
   208     6085 INCLUDE       27      33  ..C:\Local\REMix\framework\remix\framework\model\source\core\sourcesink.gms
   209     6123 IF EXIST     208      38  ..c:\Local\REMix\remix_nz\process\225a\sourcesink_config.csv
   210     6123 INCLUDE      208      38  ...c:\Local\REMix\remix_nz\process\225a\sourcesink_config.csv
   211     6225 IF EXIST     208      40  ..c:\Local\REMix\remix_nz\process\225a\sourcesink_config.csv
   212     6229 BATINCLUDE   208      44  ...C:\Local\REMix\framework\remix\framework\model\source\battools\aggregateNodes.gms
   213     6257 IF EXIST     208      62  ..c:\Local\REMix\remix_nz\process\225a\sourcesink_profile.csv
   214     6257 INCLUDE      208      62  ...c:\Local\REMix\remix_nz\process\225a\sourcesink_profile.csv
   215     6314 IF EXIST     208      63  ..c:\Local\REMix\remix_nz\process\225a\sourcesink_profile.csv
   216     6315 IF EXIST     208      64  ..c:\Local\REMix\remix_nz\process\225a\sourcesink_profile.csv
   217     6317 IF EXIST     208      66  ..c:\Local\REMix\remix_nz\process\225a\sourcesink_profile.csv
   218     6337 IF EXIST     208      86  ..c:\Local\REMix\remix_nz\process\225a\sourcesink_annualsum.csv
   219     6337 INCLUDE      208      86  ...c:\Local\REMix\remix_nz\process\225a\sourcesink_annualsum.csv
   220     6384 IF EXIST     208      88  ..c:\Local\REMix\remix_nz\process\225a\sourcesink_annualsum.csv
   221     6387 BATINCLUDE   208      91  ...C:\Local\REMix\framework\remix\framework\model\source\battools\aggregateNodes.gms
   222     6567 INCLUDE       27      34  ..C:\Local\REMix\framework\remix\framework\model\source\core\balance.gms
   223     6703 INCLUDE       27      36  ..C:\Local\REMix\framework\remix\framework\model\source\accounting\equations.gms
   224     7125 INCLUDE       27      37  ..C:\Local\REMix\framework\remix\framework\model\source\optiframe.gms
   225     7166 INCLUDE       27      71  ..C:\Local\REMix\framework\remix\framework\model\source\methods\checkanno.gms
   226     7177 INCLUDE       27      74  ..C:\Local\REMix\framework\remix\framework\model\source\methods\pips.gms
   227     7186 INCLUDE       27      77  ..C:\Local\REMix\framework\remix\framework\model\source\methods\solve.gms
   228     7392 INCLUDE       27      80  ..C:\Local\REMix\framework\remix\framework\model\source\methods\pareto.gms
   229     7401 INCLUDE       27      83  ..C:\Local\REMix\framework\remix\framework\model\source\methods\mga.gms
   230     7410 INCLUDE       27      86  ..C:\Local\REMix\framework\remix\framework\model\source\methods\iternodes.gms
   231     7419 INCLUDE       27      89  ..C:\Local\REMix\framework\remix\framework\model\source\postcalc\definition.gms
   232     8201 INCLUDE       27      90  ..C:\Local\REMix\framework\remix\framework\model\source\postcalc\writegdx.gms


COMPILATION TIME     =        4.453 SECONDS     36 MB  40.4.0 d540b52e WEX-WEI
GAMS 40.4.0  d540b52e Oct 3, 2022           WEX-WEI x86 64bit/MS Windows - 10/05/23 16:01:13 Page 3
G e n e r a l   A l g e b r a i c   M o d e l i n g   S y s t e m
Range Statistics    SOLVE remix Using MIP From line 7377


RANGE STATISTICS (ABSOLUTE NON-ZERO FINITE VALUES)

RHS       [min, max] : [ 1.170E-01, 1.165E+03] - Zero values observed as well
Bound     [min, max] : [        NA,        NA] - Zero values observed as well
Matrix    [min, max] : [ 1.000E-02, 1.890E+02]

GAMS 40.4.0  d540b52e Oct 3, 2022           WEX-WEI x86 64bit/MS Windows - 10/05/23 16:01:13 Page 4
G e n e r a l   A l g e b r a i c   M o d e l i n g   S y s t e m
Model Statistics    SOLVE remix Using MIP From line 7377


LOOPS                           optiframeToCalc   of1


MODEL STATISTICS

BLOCKS OF EQUATIONS          75     SINGLE EQUATIONS    1,944,922
BLOCKS OF VARIABLES          38     SINGLE VARIABLES    1,945,022
NON ZERO ELEMENTS     5,205,394


GENERATION TIME      =       12.110 SECONDS  1,198 MB  40.4.0 d540b52e WEX-WEI


EXECUTION TIME       =       19.891 SECONDS  1,198 MB  40.4.0 d540b52e WEX-WEI
               L O O P S         optiframeToCalc of1

GAMS 40.4.0  d540b52e Oct 3, 2022           WEX-WEI x86 64bit/MS Windows - 10/05/23 16:01:13 Page 5
G e n e r a l   A l g e b r a i c   M o d e l i n g   S y s t e m
Solution Report     SOLVE remix Using MIP From line 7377


               S O L V E      S U M M A R Y

     MODEL   remix               OBJECTIVE  accounting_objective
     TYPE    MIP                 DIRECTION  MINIMIZE
     SOLVER  CPLEX               FROM LINE  7377

**** SOLVER STATUS     13 System Failure
**** MODEL STATUS      13 Error No Solution
**** OBJECTIVE VALUE               NA

 RESOURCE USAGE, LIMIT         NA        604800.000
 ITERATION COUNT, LIMIT        NA    2147483647
--- GAMS/Cplex Link licensed for continuous and discrete problems.

Reading parameter(s) from "c:\Local\REMix\remix_nz\process\cplex.opt"
>>  rerun no
>>  lpmethod 4
>>  barorder 0
>>  preind 1
>>  scaind 0
>>  predual -1
>>  baralg 0
>>  barstartalg 1
>>  barepcomp 1e-6
>>  solutiontype 2
>>  startalg 4
>>  epgap 1e-3
>>  quality 1
>>  barcolnz 0
>>  threads 4
>>  parallelmode 1
Finished reading from "c:\Local\REMix\remix_nz\process\cplex.opt"

--- GMO setup time: 0.00s
--- Space for names approximately 262.70 Mb
--- Use option 'names no' to turn use of names off
--- GMO memory 683.67 Mb (peak 698.51 Mb)
--- Dictionary memory 0.00 Mb
--- Cplex 22.1.0.0 link memory 59.36 Mb (peak 420.58 Mb)
--- Starting Cplex


--- LP status (1): optimal.
--- Cplex Time: 79.80s

No solution returned
GAMS 40.4.0  d540b52e Oct 3, 2022           WEX-WEI x86 64bit/MS Windows - 10/05/23 16:01:13 Page 6
G e n e r a l   A l g e b r a i c   M o d e l i n g   S y s t e m
Solution Report     SOLVE remix Using MIP From line 7377


**** SOLVER STATUS FILE LISTED BELOW
=1
=2
=0IBM ILOG CPLEX   40.4.0 d540b52e Oct 3, 2022           WEI x86 64bit/MS Window
=1
--- GAMS/Cplex Link licensed for continuous and discrete problems.
=2
=C
=1
=CReading parameter(s) from "c:\Local\REMix\remix_nz\process\cplex.opt"
=C>>  rerun no
=C>>  lpmethod 4
=C>>  barorder 0
=C>>  preind 1
=C>>  scaind 0
=C>>  predual -1
=C>>  baralg 0
=C>>  barstartalg 1
=C>>  barepcomp 1e-6
=C>>  solutiontype 2
=C>>  startalg 4
=C>>  epgap 1e-3
=C>>  quality 1
=C>>  barcolnz 0
=C>>  threads 4
=C>>  parallelmode 1
=CFinished reading from "c:\Local\REMix\remix_nz\process\cplex.opt"
=2
=C
=1
--- GMO setup time: 0.00s
=2
=1
--- Space for names approximately 262.70 Mb
=2
=1
--- Use option 'names no' to turn use of names off
=2
=1
--- GMO memory 683.67 Mb (peak 698.51 Mb)
=2
=1
--- Dictionary memory 0.00 Mb
=2
=1
--- Cplex 22.1.0.0 link memory 59.36 Mb (peak 420.58 Mb)
=2
=1
--- Starting Cplex
=2
=C
Version identifier: 22.1.0.0 | 2022-03-09 | 1a383f8ce
CPXPARAM_Advance                                 0
CPXPARAM_Preprocessing_Dual                      -1
CPXPARAM_LPMethod                                4
CPXPARAM_Threads                                 4
CPXPARAM_Parallel                                1
CPXPARAM_SolutionType                            2
CPXPARAM_MIP_Display                             4
CPXPARAM_MIP_Strategy_StartAlgorithm             4
CPXPARAM_MIP_Pool_Capacity                       0
CPXPARAM_TimeLimit                               604800
CPXPARAM_MIP_Tolerances_AbsMIPGap                0
CPXPARAM_MIP_Tolerances_MIPGap                   0.001
CPXPARAM_Barrier_ConvergeTol                     9.9999999999999995e-07
Tried aggregator 1 time.
LP Presolve eliminated 426563 rows and 426564 columns.
Aggregator did 509519 substitutions.
Reduced LP has 1008839 rows, 1008939 columns, and 3236757 nonzeros.
Presolve time = 6.42 sec. (6041.76 ticks)
Parallel mode: using up to 4 threads for barrier.

***NOTE: Found 100 dense columns.

Number of nonzeros in lower triangle of A*A' = 1516919
Using Approximate Minimum Degree ordering
Total time for automatic ordering = 0.45 sec. (203.48 ticks)
Summary statistics for Cholesky factor:
  Threads                   = 4
  Rows in Factor            = 1008939
  Integer space required    = 3544319
  Total non-zeros in factor = 11624402
  Total FP ops to factor    = 556840698
 Itn      Primal Obj        Dual Obj  Prim Inf Upper Inf  Dual Inf Inf Ratio
   0   2.9510575e+05  -1.2538042e+04  1.52e+06  1.59e+01  1.73e+06  1.00e+00
   1   2.2932801e+05  -1.1706940e+04  1.20e+06  1.25e+01  9.71e+05  1.70e+00
   2   2.1466382e+05  -9.0310143e+03  1.12e+06  1.17e+01  5.70e+05  2.58e+00
   3   1.5024924e+05  -8.1586994e+03  7.95e+05  8.32e+00  3.33e+05  3.75e+00
   4   1.0239009e+05  -6.1160383e+03  5.48e+05  5.73e+00  1.88e+05  5.74e+00
   5   6.5325456e+04  -2.4496034e+03  3.48e+05  3.65e+00  8.48e+04  1.05e+01
   6   3.9167605e+04  -8.0046758e+02  2.03e+05  2.13e+00  5.60e+04  1.48e+01
   7   2.7854398e+04   5.7984090e+02  1.39e+05  1.46e+00  3.74e+04  2.12e+01
   8   2.0506392e+04   1.2002028e+03  9.79e+04  1.02e+00  2.81e+04  2.78e+01
   9   1.5945140e+04   1.5924077e+03  7.20e+04  7.54e-01  2.28e+04  3.43e+01
  10   1.3105462e+04   1.8960726e+03  5.54e+04  5.80e-01  1.94e+04  4.06e+01
  11   1.0829714e+04   2.4650839e+03  4.18e+04  4.38e-01  1.37e+04  5.78e+01
  12   9.4765761e+03   2.7374544e+03  3.39e+04  3.55e-01  1.06e+04  7.57e+01
  13   8.3805271e+03   2.8439369e+03  2.77e+04  2.90e-01  9.15e+03  8.80e+01
  14   7.9487827e+03   2.8884823e+03  2.52e+04  2.63e-01  8.61e+03  9.39e+01
  15   7.4069875e+03   2.9792689e+03  2.20e+04  2.30e-01  7.55e+03  1.08e+02
  16   6.8037483e+03   3.0610412e+03  1.85e+04  1.93e-01  6.62e+03  1.24e+02
  17   6.4676140e+03   3.1991406e+03  1.65e+04  1.72e-01  5.20e+03  1.61e+02
  18   5.9640085e+03   3.3003590e+03  1.35e+04  1.42e-01  4.01e+03  2.12e+02
  19   5.6076002e+03   3.3462447e+03  1.14e+04  1.20e-01  3.52e+03  2.44e+02
  20   5.4851890e+03   3.3895722e+03  1.07e+04  1.12e-01  3.12e+03  2.78e+02
  21   5.3530429e+03   3.4134672e+03  9.89e+03  1.04e-01  2.89e+03  3.02e+02
  22   5.2534279e+03   3.4413472e+03  9.29e+03  9.72e-02  2.62e+03  3.34e+02
  23   5.1620928e+03   3.4689744e+03  8.74e+03  9.15e-02  2.34e+03  3.75e+02
  24   5.0526523e+03   3.4803391e+03  8.10e+03  8.48e-02  2.21e+03  4.00e+02
  25   4.9692704e+03   3.4873716e+03  7.60e+03  7.96e-02  2.14e+03  4.14e+02
  26   4.8323489e+03   3.5045672e+03  6.79e+03  7.11e-02  1.95e+03  4.56e+02
  27   4.7890562e+03   3.5155157e+03  6.54e+03  6.85e-02  1.81e+03  4.92e+02
  28   4.7208129e+03   3.5281157e+03  6.16e+03  6.45e-02  1.61e+03  5.57e+02
  29   4.6260614e+03   3.5336726e+03  5.64e+03  5.90e-02  1.48e+03  6.07e+02
  30   4.4931900e+03   3.5421841e+03  4.92e+03  5.15e-02  1.24e+03  7.31e+02
  31   4.3278111e+03   3.5484651e+03  4.02e+03  4.21e-02  1.05e+03  8.70e+02
  32   4.2588546e+03   3.5505024e+03  3.65e+03  3.83e-02  9.71e+02  9.43e+02
  33   4.2439850e+03   3.5516138e+03  3.57e+03  3.74e-02  9.40e+02  9.74e+02
  34   4.2278013e+03   3.5522433e+03  3.49e+03  3.65e-02  9.20e+02  9.97e+02
  35   4.1599496e+03   3.5562727e+03  3.12e+03  3.27e-02  8.05e+02  1.15e+03
  36   4.1581129e+03   3.5564055e+03  3.11e+03  3.25e-02  8.03e+02  1.15e+03
  37   4.1406655e+03   3.5571255e+03  3.01e+03  3.16e-02  7.78e+02  1.19e+03
  38   4.0390479e+03   3.5606312e+03  2.47e+03  2.58e-02  6.72e+02  1.38e+03
  39   4.0198486e+03   3.5644003e+03  2.36e+03  2.47e-02  5.88e+02  1.59e+03
  40   3.9365068e+03   3.5668730e+03  1.91e+03  2.00e-02  5.23e+02  1.80e+03
  41   3.8880643e+03   3.5726533e+03  1.63e+03  1.71e-02  4.32e+02  2.20e+03
  42   3.8761202e+03   3.5749753e+03  1.56e+03  1.64e-02  4.01e+02  2.38e+03
  43   3.8402816e+03   3.5759824e+03  1.35e+03  1.42e-02  3.89e+02  2.45e+03
  44   3.8059444e+03   3.5775951e+03  1.16e+03  1.21e-02  3.66e+02  2.61e+03
  45   3.7930981e+03   3.5788322e+03  1.08e+03  1.13e-02  3.53e+02  2.71e+03
  46   3.7750050e+03   3.5833902e+03  9.72e+02  1.02e-02  3.07e+02  3.16e+03
  47   3.7683736e+03   3.5860014e+03  9.34e+02  9.78e-03  2.72e+02  3.60e+03
  48   3.7512362e+03   3.5865528e+03  8.37e+02  8.76e-03  2.64e+02  3.71e+03
  49   3.7304516e+03   3.5894973e+03  7.16e+02  7.50e-03  2.25e+02  4.39e+03
  50   3.7191680e+03   3.5912536e+03  6.51e+02  6.81e-03  2.02e+02  4.92e+03
  51   3.7092450e+03   3.5934671e+03  5.94e+02  6.22e-03  1.71e+02  5.89e+03
  52   3.6997084e+03   3.5947369e+03  5.41e+02  5.66e-03  1.48e+02  6.87e+03
  53   3.6808855e+03   3.5952465e+03  4.37e+02  4.58e-03  1.37e+02  7.44e+03
  54   3.6739018e+03   3.5953747e+03  3.97e+02  4.15e-03  1.35e+02  7.54e+03
  55   3.6647737e+03   3.5964108e+03  3.45e+02  3.61e-03  1.19e+02  8.59e+03
  56   3.6568356e+03   3.5970748e+03  3.00e+02  3.14e-03  1.08e+02  9.52e+03
  57   3.6547645e+03   3.5974401e+03  2.88e+02  3.02e-03  1.02e+02  1.01e+04
  58   3.6449936e+03   3.5979757e+03  2.34e+02  2.45e-03  9.28e+01  1.12e+04
  59   3.6385256e+03   3.5981735e+03  1.97e+02  2.06e-03  8.98e+01  1.16e+04
  60   3.6367402e+03   3.5989602e+03  1.86e+02  1.95e-03  7.91e+01  1.33e+04
  61   3.6341267e+03   3.5991259e+03  1.72e+02  1.80e-03  7.58e+01  1.40e+04
  62   3.6297494e+03   3.5992861e+03  1.48e+02  1.55e-03  7.26e+01  1.46e+04
  63   3.6283391e+03   3.5994382e+03  1.40e+02  1.46e-03  7.01e+01  1.52e+04
  64   3.6266581e+03   3.5996373e+03  1.30e+02  1.36e-03  6.71e+01  1.59e+04
  65   3.6231040e+03   3.6002530e+03  1.10e+02  1.15e-03  5.76e+01  1.88e+04
  66   3.6211011e+03   3.6003968e+03  9.86e+01  1.03e-03  5.48e+01  1.99e+04
  67   3.6207140e+03   3.6006583e+03  9.62e+01  1.01e-03  5.18e+01  2.11e+04
  68   3.6188729e+03   3.6007749e+03  8.61e+01  9.02e-04  4.93e+01  2.23e+04
  69   3.6165573e+03   3.6009843e+03  7.34e+01  7.69e-04  4.50e+01  2.46e+04
  70   3.6157318e+03   3.6010447e+03  6.89e+01  7.22e-04  4.37e+01  2.54e+04
  71   3.6144074e+03   3.6011403e+03  6.16e+01  6.45e-04  4.19e+01  2.66e+04
  72   3.6129526e+03   3.6013234e+03  5.35e+01  5.60e-04  3.83e+01  2.93e+04
  73   3.6112354e+03   3.6014212e+03  4.44e+01  4.64e-04  3.59e+01  3.15e+04
  74   3.6101449e+03   3.6015235e+03  3.83e+01  4.01e-04  3.39e+01  3.36e+04
  75   3.6099357e+03   3.6015283e+03  3.73e+01  3.91e-04  3.37e+01  3.38e+04
  76   3.6092474e+03   3.6015830e+03  3.38e+01  3.54e-04  3.19e+01  3.59e+04
  77   3.6084185e+03   3.6016292e+03  2.97e+01  3.10e-04  3.03e+01  3.80e+04
  78   3.6079802e+03   3.6017024e+03  2.74e+01  2.87e-04  2.80e+01  4.15e+04
  79   3.6078133e+03   3.6017253e+03  2.67e+01  2.79e-04  2.64e+01  4.43e+04
  80   3.6070149e+03   3.6017702e+03  2.29e+01  2.40e-04  2.36e+01  5.02e+04
  81   3.6065358e+03   3.6017648e+03  2.09e+01  2.18e-04  2.25e+01  5.29e+04
  82   3.6064249e+03   3.6017634e+03  2.04e+01  2.13e-04  2.08e+01  5.78e+04
  83   3.6060530e+03   3.6017447e+03  1.88e+01  1.97e-04  1.91e+01  6.35e+04
  84   3.6055705e+03   3.6016977e+03  1.69e+01  1.77e-04  1.70e+01  7.22e+04
  85   3.6050584e+03   3.6016602e+03  1.49e+01  1.56e-04  1.58e+01  7.82e+04
  86   3.6045432e+03   3.6016039e+03  1.30e+01  1.36e-04  1.41e+01  8.83e+04
  87   3.6042291e+03   3.6015862e+03  1.18e+01  1.24e-04  1.37e+01  9.14e+04
  88   3.6038946e+03   3.6015579e+03  1.06e+01  1.11e-04  1.29e+01  9.74e+04
  89   3.6035797e+03   3.6014950e+03  9.38e+00  9.82e-05  1.12e+01  1.14e+05
  90   3.6034276e+03   3.6014117e+03  8.86e+00  9.28e-05  9.80e+00  1.32e+05
  91   3.6033622e+03   3.6013791e+03  8.65e+00  9.06e-05  9.35e+00  1.39e+05
  92   3.6033511e+03   3.6013581e+03  8.61e+00  9.02e-05  9.12e+00  1.42e+05
  93   3.6030936e+03   3.6011831e+03  7.79e+00  8.15e-05  6.80e+00  1.96e+05
  94   3.6028142e+03   3.6011164e+03  6.96e+00  7.29e-05  6.17e+00  2.18e+05
  95   3.6027093e+03   3.6010942e+03  6.67e+00  6.99e-05  6.01e+00  2.24e+05
  96   3.6024423e+03   3.6010374e+03  5.89e+00  6.17e-05  5.49e+00  2.46e+05
  97   3.6022485e+03   3.6008699e+03  5.33e+00  5.58e-05  4.02e+00  3.43e+05
  98   3.6020417e+03   3.6007762e+03  4.76e+00  4.99e-05  3.36e+00  4.14e+05
  99   3.6019642e+03   3.6006880e+03  4.55e+00  4.76e-05  2.72e+00  5.12e+05
 100   3.6017323e+03   3.6006588e+03  3.94e+00  4.12e-05  2.55e+00  5.47e+05
 101   3.6014272e+03   3.6006242e+03  3.13e+00  3.28e-05  2.33e+00  5.96e+05
 102   3.6014079e+03   3.6006145e+03  3.08e+00  3.22e-05  2.27e+00  6.14e+05
 103   3.6013363e+03   3.6006042e+03  2.88e+00  3.02e-05  2.20e+00  6.35e+05
 104   3.6012814e+03   3.6005994e+03  2.73e+00  2.86e-05  2.16e+00  6.45e+05
 105   3.6012137e+03   3.6005773e+03  2.55e+00  2.67e-05  2.01e+00  6.95e+05
 106   3.6010020e+03   3.6005201e+03  1.96e+00  2.06e-05  1.62e+00  8.71e+05
 107   3.6009744e+03   3.6004895e+03  1.89e+00  1.98e-05  1.41e+00  1.00e+06
 108   3.6009518e+03   3.6004703e+03  1.83e+00  1.91e-05  1.29e+00  1.10e+06
 109   3.6009002e+03   3.6004673e+03  1.70e+00  1.78e-05  1.27e+00  1.12e+06
 110   3.6007373e+03   3.6004451e+03  1.26e+00  1.32e-05  1.13e+00  1.26e+06
 111   3.6007145e+03   3.6004405e+03  1.20e+00  1.25e-05  1.10e+00  1.30e+06
 112   3.6006569e+03   3.6004316e+03  1.04e+00  1.09e-05  1.04e+00  1.38e+06
 113   3.6006141e+03   3.6003845e+03  9.18e-01  9.61e-06  7.00e-01  2.09e+06
 114   3.6005116e+03   3.6003473e+03  6.51e-01  6.82e-06  4.88e-01  3.02e+06
 115   3.6004631e+03   3.6003359e+03  5.25e-01  5.50e-06  4.24e-01  3.48e+06
 116   3.6004584e+03   3.6003284e+03  5.13e-01  5.38e-06  3.82e-01  3.87e+06
 117   3.6003986e+03   3.6003133e+03  3.59e-01  3.76e-06  2.99e-01  4.96e+06
 118   3.6003545e+03   3.6002920e+03  2.45e-01  2.56e-06  1.79e-01  8.35e+06
 119   3.6003170e+03   3.6002804e+03  1.50e-01  1.57e-06  1.18e-01  1.27e+07
 120   3.6003005e+03   3.6002731e+03  1.07e-01  1.12e-06  7.73e-02  1.94e+07
 121   3.6002984e+03   3.6002719e+03  1.02e-01  1.06e-06  7.10e-02  2.11e+07
 122   3.6002939e+03   3.6002713e+03  9.02e-02  9.43e-07  6.74e-02  2.23e+07
 123   3.6002854e+03   3.6002629e+03  6.84e-02  7.15e-07  2.15e-02  7.03e+07
 124   3.6002744e+03   3.6002598e+03  4.28e-02  4.48e-07  1.19e-02  1.09e+08
 125   3.6002681e+03   3.6002596e+03  2.73e-02  2.80e-07  1.09e-02  1.17e+08
Barrier time = 79.80 sec. (73602.57 ticks)

Total time on 4 threads = 79.80 sec. (73602.57 ticks)
=C
=1
--- LP status (1): optimal.
=2
=1
--- Cplex Time: 79.80s
**** SOLVER STATUS FILE LISTED ABOVE
GAMS 40.4.0  d540b52e Oct 3, 2022           WEX-WEI x86 64bit/MS Windows - 10/05/23 16:01:13 Page 7
G e n e r a l   A l g e b r a i c   M o d e l i n g   S y s t e m
E x e c u t i o n


**** REPORT FILE SUMMARY

opt c:\Local\REMix\remix_nz\process\cplex.opt


EXECUTION TIME       =        2.016 SECONDS    540 MB  40.4.0 d540b52e WEX-WEI


USER: Medium MUD - 10 User License                   S220920|0002AO-GEN
      University of Canterbury, Civil Engineering Department    DC16319
      License for teaching and research at degree granting institutions


**** FILE SUMMARY

Input      C:\Local\REMix\framework\remix\framework\model\run_remix.gms
Output     c:\Local\REMix\remix_nz\process\run_remix.lst
