GAMS 40.4.0  d540b52e Oct 3, 2022           WEX-WEI x86 64bit/MS Windows - 03/22/24 15:20:01 Page 1
G e n e r a l   A l g e b r a i c   M o d e l i n g   S y s t e m
C o m p i l a t i o n


   1  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
   2  * SPDX-License-Identifier: BSD-3-Clause
   3   
   4  * ==== REMix version number ====
   6   
   7  * ==== global settings ====
  12   
  14   
  15  * ==== write metadata and inherit dataset ====
INCLUDE    C:\Local\REMix\framework\remix\framework\model\source\metadata.gms
  24   
  28   
  44   
  60   
  61  set metadata(*) /
INCLUDE    C:\Local\REMix\remix_nz\process\225c\metadata
  63  remix_version "0.9.7"
  64  gams_version "40.4.0"
  65  timestamp "03/22/24 15:20:01"
  66  framework_path "C:\Local\REMix\framework\remix\framework\model\source"
  67   
  68  framework_hash 3bb1a3d3d3965bc640cea682a02cc3da05cd542b
  69   
  70  framework_branch "main"
  71   
  72  project_path "C:\Local\REMix\remix_nz\output\will\00-test-elec_2020-2035-2050\data"
  73   
  74  project_hash "3bb1a3d3d3965bc640cea682a02cc3da05cd542b"
  75   
  76  project_branch "main"
  77   
  78  /;
INCLUDE    C:\Local\REMix\framework\remix\framework\model\source\data_inheritance.gms
  80  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
  81  * SPDX-License-Identifier: BSD-3-Clause
  82   
  85   
  90   
  91  * pandas based data inheritance reading in the dat files, merging them and writing csv files in the scrdir
 113  ;
 114   
 118   
 119  * ==== run remix ====
INCLUDE    C:\Local\REMix\framework\remix\framework\model\source\remix.gms
 124  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
 125  * SPDX-License-Identifier: BSD-3-Clause
 126   
 127  * ==== global settings ====
 135   
 138   
 140   
 143   
 144  * ==== include modules ====
INCLUDE    C:\Local\REMix\framework\remix\framework\model\source\sets.gms
 146  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
 147  * SPDX-License-Identifier: BSD-3-Clause
 148   
 149  * // # sets
 150  * // Sets are the indices of variables and parameters.
 151   
 152  * // ## Reference
 153  * // {special_table_sets}
 154   
 155  * // ## Input Files
 156  * // {special_table_set_input_files}
 881   
 882  map_accNodes(accNodesModel,accNodesModel_aggregation)
 883      $sum((nodesData, nodesModelToCalc)
 884              $( sameas(nodesModelToCalc,accNodesModel)
 885                  and map_accNodesLoad(nodesData,accNodesModel_aggregation)
 886                  and aggregateNodesModel(nodesData,nodesModelToCalc)), 1) = yes;
 887   
 888  map_accNodes(accNodesModel,"global")$sum(nodesModelToCalc$sameas(accNodesModel,nodesModelToCalc), 1) = yes;
 889  map_accNodes(accNodesModel,"global")$sum(accNodes$sameas(accNodesModel,accNodes), 1) = yes;
 890  map_accNodes(accNodesModel,accNodesModel) = yes;
 891  map_accLinks(accLinksModel,"global")$sum(linksModelToCalc$sameas(accLinksModel,linksModelToCalc), 1) = yes;
 892  map_accLinks(accLinksModel,accLinksModel) = yes;
 893  map_accYears(accYears,"horizon")$sum(yearsToCalc$sameas(accYears,yearsToCalc), 1)  = yes;
 894  map_accYears(accYears,accYears) = yes;
 895   
 896  map_accNodesToCalc(accNodesModel,nodesModelToCalc)
 897      $sum((nodesData)
 898              $( map_accNodesLoad(nodesData,accNodesModel)
 899                  and aggregateNodesModel(nodesData,nodesModelToCalc)), 1) = yes;
 900   
 901  map_accNodesToCalc("global",nodesModelToCalc) = yes;
 902  map_accNodesToCalc(accNodesModel,nodesModelToCalc)$sameas(accNodesModel,nodesModelToCalc) = yes;
 903  map_accLinksToCalc("global",linksModelToCalc) = yes;
 904  map_accLinksToCalc(accLinksModel,linksModelToCalc)$sameas(accLinksModel,linksModelToCalc) = yes;
 905  map_accYearsToCalc("horizon",yearsToCalc) = yes;
 906  map_accYearsToCalc(accYears,yearsToCalc)$sameas(accYears,yearsToCalc) = yes;
 907   
 908  * Duplicate sets for postcalc reporting without horizon and accYears
 909  map_accNodesPostCalc(accNodesModel,nodesModelToCalc) = map_accNodesToCalc(accNodesModel,nodesModelToCalc);
 910  map_accLinksPostCalc(accLinksModel,linksModelToCalc) = map_accLinksToCalc(accLinksModel,linksModelToCalc);
 911  map_accYearsPostCalc(accYears,yearsToCalc)$sameas(accYears,yearsToCalc) = yes;
 912  map_accYearsPostCalc(accYears,years)$(sameas(accYears,years) and years.val < sum(yearsToCalc$(ord(yearsToCalc) = 1), yearsToCalc.val)) = yes;
 913   
 914  set map_nodesAccounting(accNodesModel_aggregation,accNodesModel) "Map accounting nodes describes the mapping between model accounting nodes and data nodes." ;
 915  option map_nodesAccounting < map_accNodes;
 916   
 917  * ==== Generic sets  ====
 918  * These set names are repeated across different profile parameters.
 919  * they are not strictly related to each other and are not input data but
 920  * are needed for validation.
 921  ** // PROFILE: profileTypes | Profile Types | OEO_00140056:flow potential | set_profiletypes.csv
 922   
 923  ** // SET: scenario | Scenario | OEO_00000364:scenario | set_scenarios.csv
 924  * "Scenario indexes help to differentiate scenarios." /
 925   
 926  ** // SET: capType | Capacity Types | OEO_00030019:balance process attribute | set_captypes.csv
 927  * "Capacity types differentiate investment decisions." /
 928   
 929  ** // SET: balanceType | Balance Types | OEO_00030019:balance process attribute | set_balancetypes.csv
 930  * "Balance types differentiate types of balances." /
INCLUDE    C:\Local\REMix\framework\remix\framework\model\source\accounting\input.gms
 932  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
 933  * SPDX-License-Identifier: BSD-3-Clause
 934   
 935  * // # accounting_input
 936  * // The parameters in this file describe the accounting of indicators in the model.
 937   
 938  * // ## Variables
 939  * // {special_table_input_variables}
1268   
1269  * Aggregate accounting parameters
BATINCLUDE C:\Local\REMix\framework\remix\framework\model\source\battools\aggregateAccountingMean.gms
1271  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
1272  * SPDX-License-Identifier: BSD-3-Clause
1273   
1275   
1277   
1278  set accounting_converterUnitsNonzero(indicator,accnodesData,converter_techs,vintage);
1279  accounting_converterUnitsNonzero(indicator,accnodesData,converter_techs,vintage)
1280      $sum(pc_accounting_converterUnits$accounting_converterUnitsIn(indicator,accnodesData,converter_techs,vintage,pc_accounting_converterUnits), 1)
1281      = yes;
1282   
1284  set accounting_converterUnitsChk(indicator,nodesModel,converter_techs,vintage,pc_accounting_converterUnits);
1285  accounting_converterUnitsChk(indicator,nodesModel,converter_techs,vintage,"useAnnuity")
1286      $sum((nodesData,accnodesData)
1287              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1288                  and accounting_converterUnitsNonzero(indicator,accnodesData,converter_techs,vintage)), 1)
1289      = smax((nodesData,accnodesData)
1290              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1291                  and accounting_converterUnitsNonzero(indicator,accnodesData,converter_techs,vintage)),
1292          accounting_converterUnitsIn(indicator,accnodesData,converter_techs,vintage,"useAnnuity"))
1293      - smin((nodesData,accnodesData)
1294              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1295                  and accounting_converterUnitsNonzero(indicator,accnodesData,converter_techs,vintage)),
1296          accounting_converterUnitsIn(indicator,accnodesData,converter_techs,vintage,"useAnnuity"));
1297   
1298  abort$sum(accounting_converterUnitsChk(indicator,nodesModel,converter_techs,vintage,pc_accounting_converterUnits), 1) "Cannot aggregate technologies with different useAnnuity values."
1300   
1301  parameter accounting_converterUnitsAgg(indicator,nodesModel,converter_techs,vintage,pc_accounting_converterUnits);
1302  accounting_converterUnitsAgg(indicator,nodesModel,converter_techs,vintage,pc_accounting_converterUnits)
1303      $sum((nodesData,accnodesData)
1304              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1305                  and accounting_converterUnitsNonzero(indicator,accnodesData,converter_techs,vintage)), 1)
1306      = sum((nodesData,accnodesData)
1307              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1308                  and accounting_converterUnitsNonzero(indicator,accnodesData,converter_techs,vintage)),
1309          accounting_converterUnitsIn(indicator,accnodesData,converter_techs,vintage,pc_accounting_converterUnits))
1310      / sum((nodesData,accnodesData)
1311              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1312                  and accounting_converterUnitsNonzero(indicator,accnodesData,converter_techs,vintage)),
1313          1);
1314   
1315  parameter accounting_converterUnits(indicator,nodesModel,converter_techs,vintage,pc_accounting_converterUnits);
1316  loop(accnodes,
1317  accounting_converterUnits(indicator,nodesModel,converter_techs,vintage,pc_accounting_converterUnits)
1318      $sum(accnodesData$(map_accnodesToCalc(accnodes,nodesModel) and sameas(accnodes,accnodesData)
1319                              and accounting_converterUnitsIn(indicator,accnodesData,converter_techs,vintage,pc_accounting_converterUnits)), 1)
1320      = sum(accnodesData$(map_accnodesToCalc(accnodes,nodesModel) and sameas(accnodes,accnodesData)),
1321              accounting_converterUnitsIn(indicator,accnodesData,converter_techs,vintage,pc_accounting_converterUnits));
1322  );
1323   
1324  accounting_converterUnits(indicator,nodesModel,converter_techs,vintage,pc_accounting_converterUnits)
1325      $accounting_converterUnitsAgg(indicator,nodesModel,converter_techs,vintage,pc_accounting_converterUnits)
1326      = accounting_converterUnitsAgg(indicator,nodesModel,converter_techs,vintage,pc_accounting_converterUnits);
1327   
1328  * option kill %paramName%Nonzero %paramName%Chk %paramName%Agg
BATINCLUDE C:\Local\REMix\framework\remix\framework\model\source\battools\aggregateAccountingMean.gms
1330  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
1331  * SPDX-License-Identifier: BSD-3-Clause
1332   
1334   
1336   
1337  set accounting_converterActivityNonzero(indicator,accnodesData,converter_techs,vintage,activity);
1338  accounting_converterActivityNonzero(indicator,accnodesData,converter_techs,vintage,activity)
1339      $sum(pc_accounting_converterActivity$accounting_converterActivityIn(indicator,accnodesData,converter_techs,vintage,activity,pc_accounting_converterActivity), 1)
1340      = yes;
1341   
1343   
1344  parameter accounting_converterActivityAgg(indicator,nodesModel,converter_techs,vintage,activity,pc_accounting_converterActivity);
1345  accounting_converterActivityAgg(indicator,nodesModel,converter_techs,vintage,activity,pc_accounting_converterActivity)
1346      $sum((nodesData,accnodesData)
1347              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1348                  and accounting_converterActivityNonzero(indicator,accnodesData,converter_techs,vintage,activity)), 1)
1349      = sum((nodesData,accnodesData)
1350              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1351                  and accounting_converterActivityNonzero(indicator,accnodesData,converter_techs,vintage,activity)),
1352          accounting_converterActivityIn(indicator,accnodesData,converter_techs,vintage,activity,pc_accounting_converterActivity))
1353      / sum((nodesData,accnodesData)
1354              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1355                  and accounting_converterActivityNonzero(indicator,accnodesData,converter_techs,vintage,activity)),
1356          1);
1357   
1358  parameter accounting_converterActivity(indicator,nodesModel,converter_techs,vintage,activity,pc_accounting_converterActivity);
1359  loop(accnodes,
1360  accounting_converterActivity(indicator,nodesModel,converter_techs,vintage,activity,pc_accounting_converterActivity)
1361      $sum(accnodesData$(map_accnodesToCalc(accnodes,nodesModel) and sameas(accnodes,accnodesData)
1362                              and accounting_converterActivityIn(indicator,accnodesData,converter_techs,vintage,activity,pc_accounting_converterActivity)), 1)
1363      = sum(accnodesData$(map_accnodesToCalc(accnodes,nodesModel) and sameas(accnodes,accnodesData)),
1364              accounting_converterActivityIn(indicator,accnodesData,converter_techs,vintage,activity,pc_accounting_converterActivity));
1365  );
1366   
1367  accounting_converterActivity(indicator,nodesModel,converter_techs,vintage,activity,pc_accounting_converterActivity)
1368      $accounting_converterActivityAgg(indicator,nodesModel,converter_techs,vintage,activity,pc_accounting_converterActivity)
1369      = accounting_converterActivityAgg(indicator,nodesModel,converter_techs,vintage,activity,pc_accounting_converterActivity);
1370   
1371  * option kill %paramName%Nonzero %paramName%Chk %paramName%Agg
BATINCLUDE C:\Local\REMix\framework\remix\framework\model\source\battools\aggregateAccountingMean.gms
1373  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
1374  * SPDX-License-Identifier: BSD-3-Clause
1375   
1377   
1379   
1380  set accounting_converterStartupNonzero(indicator,accnodesData,converter_techs,vintage);
1381  accounting_converterStartupNonzero(indicator,accnodesData,converter_techs,vintage)
1382      $sum(pc_accounting_converterStartup$accounting_converterStartupIn(indicator,accnodesData,converter_techs,vintage,pc_accounting_converterStartup), 1)
1383      = yes;
1384   
1386   
1387  parameter accounting_converterStartupAgg(indicator,nodesModel,converter_techs,vintage,pc_accounting_converterStartup);
1388  accounting_converterStartupAgg(indicator,nodesModel,converter_techs,vintage,pc_accounting_converterStartup)
1389      $sum((nodesData,accnodesData)
1390              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1391                  and accounting_converterStartupNonzero(indicator,accnodesData,converter_techs,vintage)), 1)
1392      = sum((nodesData,accnodesData)
1393              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1394                  and accounting_converterStartupNonzero(indicator,accnodesData,converter_techs,vintage)),
1395          accounting_converterStartupIn(indicator,accnodesData,converter_techs,vintage,pc_accounting_converterStartup))
1396      / sum((nodesData,accnodesData)
1397              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1398                  and accounting_converterStartupNonzero(indicator,accnodesData,converter_techs,vintage)),
1399          1);
1400   
1401  parameter accounting_converterStartup(indicator,nodesModel,converter_techs,vintage,pc_accounting_converterStartup);
1402  loop(accnodes,
1403  accounting_converterStartup(indicator,nodesModel,converter_techs,vintage,pc_accounting_converterStartup)
1404      $sum(accnodesData$(map_accnodesToCalc(accnodes,nodesModel) and sameas(accnodes,accnodesData)
1405                              and accounting_converterStartupIn(indicator,accnodesData,converter_techs,vintage,pc_accounting_converterStartup)), 1)
1406      = sum(accnodesData$(map_accnodesToCalc(accnodes,nodesModel) and sameas(accnodes,accnodesData)),
1407              accounting_converterStartupIn(indicator,accnodesData,converter_techs,vintage,pc_accounting_converterStartup));
1408  );
1409   
1410  accounting_converterStartup(indicator,nodesModel,converter_techs,vintage,pc_accounting_converterStartup)
1411      $accounting_converterStartupAgg(indicator,nodesModel,converter_techs,vintage,pc_accounting_converterStartup)
1412      = accounting_converterStartupAgg(indicator,nodesModel,converter_techs,vintage,pc_accounting_converterStartup);
1413   
1414  * option kill %paramName%Nonzero %paramName%Chk %paramName%Agg
BATINCLUDE C:\Local\REMix\framework\remix\framework\model\source\battools\aggregateAccountingMean.gms
1416  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
1417  * SPDX-License-Identifier: BSD-3-Clause
1418   
1420   
1422   
1423  set accounting_storageUnitsNonzero(indicator,accnodesData,storage_techs,vintage);
1424  accounting_storageUnitsNonzero(indicator,accnodesData,storage_techs,vintage)
1425      $sum(pc_accounting_storageUnits$accounting_storageUnitsIn(indicator,accnodesData,storage_techs,vintage,pc_accounting_storageUnits), 1)
1426      = yes;
1427   
1429  set accounting_storageUnitsChk(indicator,nodesModel,storage_techs,vintage,pc_accounting_storageUnits);
1430  accounting_storageUnitsChk(indicator,nodesModel,storage_techs,vintage,"useAnnuity")
1431      $sum((nodesData,accnodesData)
1432              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1433                  and accounting_storageUnitsNonzero(indicator,accnodesData,storage_techs,vintage)), 1)
1434      = smax((nodesData,accnodesData)
1435              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1436                  and accounting_storageUnitsNonzero(indicator,accnodesData,storage_techs,vintage)),
1437          accounting_storageUnitsIn(indicator,accnodesData,storage_techs,vintage,"useAnnuity"))
1438      - smin((nodesData,accnodesData)
1439              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1440                  and accounting_storageUnitsNonzero(indicator,accnodesData,storage_techs,vintage)),
1441          accounting_storageUnitsIn(indicator,accnodesData,storage_techs,vintage,"useAnnuity"));
1442   
1443  abort$sum(accounting_storageUnitsChk(indicator,nodesModel,storage_techs,vintage,pc_accounting_storageUnits), 1) "Cannot aggregate technologies with different useAnnuity values."
1445   
1446  parameter accounting_storageUnitsAgg(indicator,nodesModel,storage_techs,vintage,pc_accounting_storageUnits);
1447  accounting_storageUnitsAgg(indicator,nodesModel,storage_techs,vintage,pc_accounting_storageUnits)
1448      $sum((nodesData,accnodesData)
1449              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1450                  and accounting_storageUnitsNonzero(indicator,accnodesData,storage_techs,vintage)), 1)
1451      = sum((nodesData,accnodesData)
1452              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1453                  and accounting_storageUnitsNonzero(indicator,accnodesData,storage_techs,vintage)),
1454          accounting_storageUnitsIn(indicator,accnodesData,storage_techs,vintage,pc_accounting_storageUnits))
1455      / sum((nodesData,accnodesData)
1456              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1457                  and accounting_storageUnitsNonzero(indicator,accnodesData,storage_techs,vintage)),
1458          1);
1459   
1460  parameter accounting_storageUnits(indicator,nodesModel,storage_techs,vintage,pc_accounting_storageUnits);
1461  loop(accnodes,
1462  accounting_storageUnits(indicator,nodesModel,storage_techs,vintage,pc_accounting_storageUnits)
1463      $sum(accnodesData$(map_accnodesToCalc(accnodes,nodesModel) and sameas(accnodes,accnodesData)
1464                              and accounting_storageUnitsIn(indicator,accnodesData,storage_techs,vintage,pc_accounting_storageUnits)), 1)
1465      = sum(accnodesData$(map_accnodesToCalc(accnodes,nodesModel) and sameas(accnodes,accnodesData)),
1466              accounting_storageUnitsIn(indicator,accnodesData,storage_techs,vintage,pc_accounting_storageUnits));
1467  );
1468   
1469  accounting_storageUnits(indicator,nodesModel,storage_techs,vintage,pc_accounting_storageUnits)
1470      $accounting_storageUnitsAgg(indicator,nodesModel,storage_techs,vintage,pc_accounting_storageUnits)
1471      = accounting_storageUnitsAgg(indicator,nodesModel,storage_techs,vintage,pc_accounting_storageUnits);
1472   
1473  * option kill %paramName%Nonzero %paramName%Chk %paramName%Agg
BATINCLUDE C:\Local\REMix\framework\remix\framework\model\source\battools\aggregateAccountingMean.gms
1475  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
1476  * SPDX-License-Identifier: BSD-3-Clause
1477   
1479   
1481   
1482  set accounting_transferLinksNonzero(indicator,acclinksData,transfer_techs,vintage);
1483  accounting_transferLinksNonzero(indicator,acclinksData,transfer_techs,vintage)
1484      $sum(pc_accounting_transferLinks$accounting_transferLinksIn(indicator,acclinksData,transfer_techs,vintage,pc_accounting_transferLinks), 1)
1485      = yes;
1486   
1488  set accounting_transferLinksChk(indicator,linksModel,transfer_techs,vintage,pc_accounting_transferLinks);
1489  accounting_transferLinksChk(indicator,linksModel,transfer_techs,vintage,"useAnnuity")
1490      $sum((linksData,acclinksData)
1491              $(aggregatelinksModel(linksData,linksModel) and sameas(linksData,acclinksData)
1492                  and accounting_transferLinksNonzero(indicator,acclinksData,transfer_techs,vintage)), 1)
1493      = smax((linksData,acclinksData)
1494              $(aggregatelinksModel(linksData,linksModel) and sameas(linksData,acclinksData)
1495                  and accounting_transferLinksNonzero(indicator,acclinksData,transfer_techs,vintage)),
1496          accounting_transferLinksIn(indicator,acclinksData,transfer_techs,vintage,"useAnnuity"))
1497      - smin((linksData,acclinksData)
1498              $(aggregatelinksModel(linksData,linksModel) and sameas(linksData,acclinksData)
1499                  and accounting_transferLinksNonzero(indicator,acclinksData,transfer_techs,vintage)),
1500          accounting_transferLinksIn(indicator,acclinksData,transfer_techs,vintage,"useAnnuity"));
1501   
1502  abort$sum(accounting_transferLinksChk(indicator,linksModel,transfer_techs,vintage,pc_accounting_transferLinks), 1) "Cannot aggregate technologies with different useAnnuity values."
1504   
1505  parameter accounting_transferLinksAgg(indicator,linksModel,transfer_techs,vintage,pc_accounting_transferLinks);
1506  accounting_transferLinksAgg(indicator,linksModel,transfer_techs,vintage,pc_accounting_transferLinks)
1507      $sum((linksData,acclinksData)
1508              $(aggregatelinksModel(linksData,linksModel) and sameas(linksData,acclinksData)
1509                  and accounting_transferLinksNonzero(indicator,acclinksData,transfer_techs,vintage)), 1)
1510      = sum((linksData,acclinksData)
1511              $(aggregatelinksModel(linksData,linksModel) and sameas(linksData,acclinksData)
1512                  and accounting_transferLinksNonzero(indicator,acclinksData,transfer_techs,vintage)),
1513          accounting_transferLinksIn(indicator,acclinksData,transfer_techs,vintage,pc_accounting_transferLinks))
1514      / sum((linksData,acclinksData)
1515              $(aggregatelinksModel(linksData,linksModel) and sameas(linksData,acclinksData)
1516                  and accounting_transferLinksNonzero(indicator,acclinksData,transfer_techs,vintage)),
1517          1);
1518   
1519  parameter accounting_transferLinks(indicator,linksModel,transfer_techs,vintage,pc_accounting_transferLinks);
1520  loop(acclinks,
1521  accounting_transferLinks(indicator,linksModel,transfer_techs,vintage,pc_accounting_transferLinks)
1522      $sum(acclinksData$(map_acclinksToCalc(acclinks,linksModel) and sameas(acclinks,acclinksData)
1523                              and accounting_transferLinksIn(indicator,acclinksData,transfer_techs,vintage,pc_accounting_transferLinks)), 1)
1524      = sum(acclinksData$(map_acclinksToCalc(acclinks,linksModel) and sameas(acclinks,acclinksData)),
1525              accounting_transferLinksIn(indicator,acclinksData,transfer_techs,vintage,pc_accounting_transferLinks));
1526  );
1527   
1528  accounting_transferLinks(indicator,linksModel,transfer_techs,vintage,pc_accounting_transferLinks)
1529      $accounting_transferLinksAgg(indicator,linksModel,transfer_techs,vintage,pc_accounting_transferLinks)
1530      = accounting_transferLinksAgg(indicator,linksModel,transfer_techs,vintage,pc_accounting_transferLinks);
1531   
1532  * option kill %paramName%Nonzero %paramName%Chk %paramName%Agg
BATINCLUDE C:\Local\REMix\framework\remix\framework\model\source\battools\aggregateAccountingMean.gms
1534  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
1535  * SPDX-License-Identifier: BSD-3-Clause
1536   
1538   
1540   
1541  set accounting_transferPerLengthNonzero(indicator,acclinksData,transfer_techs,vintage,link_types);
1542  accounting_transferPerLengthNonzero(indicator,acclinksData,transfer_techs,vintage,link_types)
1543      $sum(pc_accounting_transferPerLength$accounting_transferPerLengthIn(indicator,acclinksData,transfer_techs,vintage,link_types,pc_accounting_transferPerLength), 1)
1544      = yes;
1545   
1547  set accounting_transferPerLengthChk(indicator,linksModel,transfer_techs,vintage,link_types,pc_accounting_transferPerLength);
1548  accounting_transferPerLengthChk(indicator,linksModel,transfer_techs,vintage,link_types,"useAnnuity")
1549      $sum((linksData,acclinksData)
1550              $(aggregatelinksModel(linksData,linksModel) and sameas(linksData,acclinksData)
1551                  and accounting_transferPerLengthNonzero(indicator,acclinksData,transfer_techs,vintage,link_types)), 1)
1552      = smax((linksData,acclinksData)
1553              $(aggregatelinksModel(linksData,linksModel) and sameas(linksData,acclinksData)
1554                  and accounting_transferPerLengthNonzero(indicator,acclinksData,transfer_techs,vintage,link_types)),
1555          accounting_transferPerLengthIn(indicator,acclinksData,transfer_techs,vintage,link_types,"useAnnuity"))
1556      - smin((linksData,acclinksData)
1557              $(aggregatelinksModel(linksData,linksModel) and sameas(linksData,acclinksData)
1558                  and accounting_transferPerLengthNonzero(indicator,acclinksData,transfer_techs,vintage,link_types)),
1559          accounting_transferPerLengthIn(indicator,acclinksData,transfer_techs,vintage,link_types,"useAnnuity"));
1560   
1561  abort$sum(accounting_transferPerLengthChk(indicator,linksModel,transfer_techs,vintage,link_types,pc_accounting_transferPerLength), 1) "Cannot aggregate technologies with different useAnnuity values."
1563   
1564  parameter accounting_transferPerLengthAgg(indicator,linksModel,transfer_techs,vintage,link_types,pc_accounting_transferPerLength);
1565  accounting_transferPerLengthAgg(indicator,linksModel,transfer_techs,vintage,link_types,pc_accounting_transferPerLength)
1566      $sum((linksData,acclinksData)
1567              $(aggregatelinksModel(linksData,linksModel) and sameas(linksData,acclinksData)
1568                  and accounting_transferPerLengthNonzero(indicator,acclinksData,transfer_techs,vintage,link_types)), 1)
1569      = sum((linksData,acclinksData)
1570              $(aggregatelinksModel(linksData,linksModel) and sameas(linksData,acclinksData)
1571                  and accounting_transferPerLengthNonzero(indicator,acclinksData,transfer_techs,vintage,link_types)),
1572          accounting_transferPerLengthIn(indicator,acclinksData,transfer_techs,vintage,link_types,pc_accounting_transferPerLength))
1573      / sum((linksData,acclinksData)
1574              $(aggregatelinksModel(linksData,linksModel) and sameas(linksData,acclinksData)
1575                  and accounting_transferPerLengthNonzero(indicator,acclinksData,transfer_techs,vintage,link_types)),
1576          1);
1577   
1578  parameter accounting_transferPerLength(indicator,linksModel,transfer_techs,vintage,link_types,pc_accounting_transferPerLength);
1579  loop(acclinks,
1580  accounting_transferPerLength(indicator,linksModel,transfer_techs,vintage,link_types,pc_accounting_transferPerLength)
1581      $sum(acclinksData$(map_acclinksToCalc(acclinks,linksModel) and sameas(acclinks,acclinksData)
1582                              and accounting_transferPerLengthIn(indicator,acclinksData,transfer_techs,vintage,link_types,pc_accounting_transferPerLength)), 1)
1583      = sum(acclinksData$(map_acclinksToCalc(acclinks,linksModel) and sameas(acclinks,acclinksData)),
1584              accounting_transferPerLengthIn(indicator,acclinksData,transfer_techs,vintage,link_types,pc_accounting_transferPerLength));
1585  );
1586   
1587  accounting_transferPerLength(indicator,linksModel,transfer_techs,vintage,link_types,pc_accounting_transferPerLength)
1588      $accounting_transferPerLengthAgg(indicator,linksModel,transfer_techs,vintage,link_types,pc_accounting_transferPerLength)
1589      = accounting_transferPerLengthAgg(indicator,linksModel,transfer_techs,vintage,link_types,pc_accounting_transferPerLength);
1590   
1591  * option kill %paramName%Nonzero %paramName%Chk %paramName%Agg
BATINCLUDE C:\Local\REMix\framework\remix\framework\model\source\battools\aggregateAccountingMean.gms
1593  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
1594  * SPDX-License-Identifier: BSD-3-Clause
1595   
1597   
1599   
1600  set accounting_sourcesinkFlowNonzero(indicator,accnodesData,years,sourcesink_techs,commodity);
1601  accounting_sourcesinkFlowNonzero(indicator,accnodesData,years,sourcesink_techs,commodity)
1602      $sum(pc_accounting_sourcesinkFlow$accounting_sourcesinkFlowIn(indicator,accnodesData,years,sourcesink_techs,commodity,pc_accounting_sourcesinkFlow), 1)
1603      = yes;
1604   
1606   
1607  parameter accounting_sourcesinkFlowAgg(indicator,nodesModel,years,sourcesink_techs,commodity,pc_accounting_sourcesinkFlow);
1608  accounting_sourcesinkFlowAgg(indicator,nodesModel,years,sourcesink_techs,commodity,pc_accounting_sourcesinkFlow)
1609      $sum((nodesData,accnodesData)
1610              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1611                  and accounting_sourcesinkFlowNonzero(indicator,accnodesData,years,sourcesink_techs,commodity)), 1)
1612      = sum((nodesData,accnodesData)
1613              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1614                  and accounting_sourcesinkFlowNonzero(indicator,accnodesData,years,sourcesink_techs,commodity)),
1615          accounting_sourcesinkFlowIn(indicator,accnodesData,years,sourcesink_techs,commodity,pc_accounting_sourcesinkFlow))
1616      / sum((nodesData,accnodesData)
1617              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1618                  and accounting_sourcesinkFlowNonzero(indicator,accnodesData,years,sourcesink_techs,commodity)),
1619          1);
1620   
1621  parameter accounting_sourcesinkFlow(indicator,nodesModel,years,sourcesink_techs,commodity,pc_accounting_sourcesinkFlow);
1622  loop(accnodes,
1623  accounting_sourcesinkFlow(indicator,nodesModel,years,sourcesink_techs,commodity,pc_accounting_sourcesinkFlow)
1624      $sum(accnodesData$(map_accnodesToCalc(accnodes,nodesModel) and sameas(accnodes,accnodesData)
1625                              and accounting_sourcesinkFlowIn(indicator,accnodesData,years,sourcesink_techs,commodity,pc_accounting_sourcesinkFlow)), 1)
1626      = sum(accnodesData$(map_accnodesToCalc(accnodes,nodesModel) and sameas(accnodes,accnodesData)),
1627              accounting_sourcesinkFlowIn(indicator,accnodesData,years,sourcesink_techs,commodity,pc_accounting_sourcesinkFlow));
1628  );
1629   
1630  accounting_sourcesinkFlow(indicator,nodesModel,years,sourcesink_techs,commodity,pc_accounting_sourcesinkFlow)
1631      $accounting_sourcesinkFlowAgg(indicator,nodesModel,years,sourcesink_techs,commodity,pc_accounting_sourcesinkFlow)
1632      = accounting_sourcesinkFlowAgg(indicator,nodesModel,years,sourcesink_techs,commodity,pc_accounting_sourcesinkFlow);
1633   
1634  * option kill %paramName%Nonzero %paramName%Chk %paramName%Agg
1635   
1636  parameter accounting_indicatorBounds_links(linksModel,years,indicator,pc_accounting_indicatorBounds_links);
1637  accounting_indicatorBounds_links(linksModelToCalc,yearsToCalc,indicator,pc_accounting_indicatorBounds_links)
1638      = sum((linksData)$sameas(linksModelToCalc,linksData),
1639              accounting_indicatorBounds_linksIn(linksData,yearsToCalc,indicator,pc_accounting_indicatorBounds_links));
1640   
1641  accounting_indicatorBounds_links(linksModelToCalc,yearsToCalc,indicator,pc_accounting_indicatorBounds_links)
1642      = sum((linksData)$links_aggregate(linksModelToCalc,linksData),
1643              accounting_indicatorBounds_linksIn(linksData,yearsToCalc,indicator,pc_accounting_indicatorBounds_links));
1644   
1645  parameter accounting_indicatorBounds(accNodesModel,accYears,indicator,pc_accounting_indicatorBounds);
1646  accounting_indicatorBounds(accNodesModel,accYears,indicator,pc_accounting_indicatorBounds)
1647      = sum (accNodesData$sameas(accNodesModel,accNodesData),
1648          accounting_indicatorBoundsIn(accNodesData,accYears,indicator,pc_accounting_indicatorBounds));
1649   
1650  accounting_indicatorBounds(accNodesModel,accYears,indicator,pc_accounting_indicatorBounds)
1651      $(sum (nodesModel$sameas(accNodesModel,nodesModel), 1) > 0)
1652      = sum ((accNodesData,nodesData,nodesModel)
1653              $(aggregateNodesModel(nodesData,nodesModel) and sameas(accNodesModel,nodesModel) and sameas(accNodesData,nodesData)),
1654          accounting_indicatorBoundsIn(accNodesData,accYears,indicator,pc_accounting_indicatorBounds));
1655   
1656  set accounting_perIndicatorNonzero(indicator,indicator_a,accNodesData,accYears);
1657  accounting_perIndicatorNonzero(indicator,indicator_a,accNodesData,accYears)
1658      $sum(pc_accounting_perIndicator$accounting_perIndicatorIn(indicator,indicator_a,accNodesData,accYears,pc_accounting_perIndicator), 1)
1659      = yes;
1660   
1661  parameter accounting_perIndicatorAgg(indicator,indicator_a,nodesModel,accYears,pc_accounting_perIndicator);
1662  accounting_perIndicatorAgg(indicator,indicator_a,nodesModel,accYears,pc_accounting_perIndicator)
1663      $sum((nodesData,accnodesData)
1664              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1665                  and accounting_perIndicatorNonzero(indicator,indicator_a,accnodesData,accYears)), 1)
1666      = sum((nodesData,accnodesData)
1667              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1668                  and accounting_perIndicatorNonzero(indicator,indicator_a,accnodesData,accYears)),
1669          accounting_perIndicatorIn(indicator,indicator_a,accnodesData,accYears,pc_accounting_perIndicator))
1670      / sum((nodesData,accnodesData)
1671              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1672                  and accounting_perIndicatorNonzero(indicator,indicator_a,accnodesData,accYears)),
1673          1);
1674   
1675  parameter accounting_perIndicator(indicator,indicator_a,accNodesModel,accYears,pc_accounting_perIndicator);
1676   
1677  loop(accNodes,
1678  accounting_perIndicator(indicator,indicator_a,accNodesModel,accYears,pc_accounting_perIndicator)
1679      $(sum(accNodesData$(sameas(accNodes,accNodesData)
1680              and accounting_perIndicatorIn(indicator,indicator_a,accNodesData,"horizon",pc_accounting_perIndicator)), 1)
1681          and map_accNodes(accNodesModel,accNodes)
1682              )
1683      = sum(accNodesData$(sameas(accNodes,accNodesData)),
1684              accounting_perIndicatorIn(indicator,indicator_a,accNodesData,"horizon",pc_accounting_perIndicator));
1685   
1686  accounting_perIndicator(indicator,indicator_a,accNodesModel,accYears,pc_accounting_perIndicator)
1687      $(sum(accNodesData$(sameas(accNodes,accNodesData)
1688              and accounting_perIndicatorIn(indicator,indicator_a,accNodesData,accYears,pc_accounting_perIndicator)), 1)
1689          and map_accNodes(accNodesModel,accNodes)
1690          and not sameas(accYears, "horizon"))
1691      = sum(accNodesData$(sameas(accNodes,accNodesData)),
1692              accounting_perIndicatorIn(indicator,indicator_a,accNodesData,accYears,pc_accounting_perIndicator));
1693  );
1694   
1695  accounting_perIndicator(indicator,indicator_a,accNodesModel,accYears,pc_accounting_perIndicator)
1696      $sum(nodesModel$(accounting_perIndicatorAgg(indicator,indicator_a,nodesModel,"horizon",pc_accounting_perIndicator)
1697          and sameas(accNodesModel,nodesModel)), 1)
1698      = sum(nodesModel$sameas(accNodesModel,nodesModel),
1699          accounting_perIndicatorAgg(indicator,indicator_a,nodesModel,"horizon",pc_accounting_perIndicator));
1700   
1701  accounting_perIndicator(indicator,indicator_a,accNodesModel,accYears,pc_accounting_perIndicator)
1702      $sum(nodesModel$(accounting_perIndicatorAgg(indicator,indicator_a,nodesModel,accYears,pc_accounting_perIndicator)
1703          and sameas(accNodesModel,nodesModel) and not sameas(accYears, "horizon")), 1)
1704      = sum(nodesModel$sameas(accNodesModel,nodesModel),
1705          accounting_perIndicatorAgg(indicator,indicator_a,nodesModel,accYears,pc_accounting_perIndicator));
1706   
1707   
1708  * Make sure all required indicators end up in the model
1709  set activeIndicators(accNodesModel,accYears,indicator);
1710  activeIndicators(accNodesModel,accYears,indicator)
1711     $((accounting_indicatorBounds(accNodesModel,accYears,indicator,"obj") <> 0
1714        or accounting_indicatorBounds(accNodesModel,accYears,indicator,"useFixed") <> 0
1715        or accounting_indicatorBounds(accNodesModel,accYears,indicator,"useLower") <> 0
1716        or accounting_indicatorBounds(accNodesModel,accYears,indicator,"useUpper") <> 0 )
1717          and not accounting_indicatorBounds(accNodesModel,accYears,indicator,"isVariable"))
1718     = yes;
1719   
1720  set activeIndicators_links(linksModel,years,indicator);
1721  activeIndicators_links(linksModelToCalc,yearsToCalc,indicator)
1722     $(accounting_indicatorBounds_links(linksModelToCalc,yearsToCalc,indicator,"useFixed") <> 0
1723        or accounting_indicatorBounds_links(linksModelToCalc,yearsToCalc,indicator,"useLower") <> 0
1724        or accounting_indicatorBounds_links(linksModelToCalc,yearsToCalc,indicator,"useUpper") <> 0 )
1725     = yes;
1726   
1727  set variableIndicators(accNodesModel,accYears,indicator);
1728  variableIndicators(accNodesModel,accYears,indicator)
1729     $(accounting_indicatorBounds(accNodesModel,accYears,indicator,"obj") = 0
1730        and accounting_indicatorBounds(accNodesModel,accYears,indicator,"isVariable"))
1731     = yes;
1732   
1733  * Calculate length of years and discount rates per indicator
1734  parameter yearFactor(accNodesModel,accYears,indicator,accYears);
1735  yearFactor(accNodesModel,accYears,indicator,accYears_a)
1736      $(map_accYears(accYears_a,accYears)
1737          and sum(yearsToCalc$(sameas(yearsToCalc,accYears_a)), 1))
1738      = 1;
1739   
1740  yearFactor(accNodesModel,accYears,indicator,accYears_a)
1741      $(map_accYears(accYears_a,accYears)
1742          and sum(yearsToCalc$(sameas(yearsToCalc,accYears_a)), 1)
1743          and accounting_indicatorBounds(accNodesModel,accYears,indicator,"integral"))
1744      = sum(yearsToCalc$sameas(accYears_a,yearsToCalc), yearsLen(yearsToCalc));
1745   
1746  yearFactor(accNodesModel,accYears,indicator,accYears_a)
1747      $(map_accYears(accYears_a,accYears)
1748          and sum(yearsToCalc$(sameas(yearsToCalc,accYears_a)), 1)
1749          and accounting_indicatorBounds(accNodesModel,accYears,indicator,"integral")
1750          and accounting_indicatorBounds(accNodesModel,accYears,indicator,"endyear")
1751          and yearFactor(accNodesModel,accYears,indicator,accYears_a) = inf)
1752      = accounting_indicatorBounds(accNodesModel,accYears,indicator,"endyear");
1753   
1754  yearFactor(accNodesModel,accYears,indicator,accYears_a)
1755      $(map_accYears(accYears_a,accYears)
1756          and sum(yearsToCalc$(sameas(yearsToCalc,accYears_a)), 1)
1757          and accounting_indicatorBounds(accNodesModel,accYears,indicator,"integral")
1758          and accounting_indicatorBounds(accNodesModel,accYears,indicator,"discount"))
1759      = yearFactor(accNodesModel,accYears,indicator,accYears_a)
1760          * (1 - accounting_indicatorBounds(accNodesModel,accYears,indicator,"discount"))
1761                  ** (accYears_a.val - smin(yearsToCalc, yearsToCalc.val));
1762   
1763   
1764  * ==== calculate compound indicators for the optimization ====
1765  scalar compIndicators_pre;
1766  scalar compIndicators_post;
1767   
1768  parameter compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a);
1769  compoundIndicators(accNodesModel,accYears,indicator,accNodesModel,accYears,indicator)
1770      $activeIndicators(accNodesModel,accYears,indicator) = 1;
1771   
1772  set compoundIndicators_act(accNodesModel,accYears,indicator);
1773  option compoundIndicators_act < compoundIndicators;
1774   
1775  parameter compoundIndicatorsExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa);
1776  parameter compoundIndicatorsExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a);
1777  compoundIndicatorsExt(accNodesModel,accYears,indicator,accNodesModel,accYears,indicator,accNodesModel,accYears,indicator)
1778      $compoundIndicators_act(accNodesModel,accYears,indicator) = 1;
1779   
1780  compIndicators_pre = 0;
1781  compIndicators_post = 1;
1782   
1783  option sparseval = 1;
1784  while(compIndicators_pre < compIndicators_post,
1785      compIndicators_pre = sum((accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa)
1786          $compoundIndicatorsExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa), 1);
1787   
1788      compoundIndicatorsExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa)
1789          $(compoundIndicators_act(accNodesModel,accYears,indicator)
1790              and compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
1791              and not accounting_indicatorBounds(accNodesModel_a,accYears_a,indicator_a,"isVariable")
1792              and map_accNodes(accNodesModel_aa,accNodesModel_a)
1793              and map_accYears(accYears_aa,accYears_a))
1794          = compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
1795              * accounting_perIndicator(indicator_a,indicator_aa,accNodesModel_aa,accYears_aa,"perIndicator");
1796   
1797      option compoundIndicatorsExt_r < compoundIndicatorsExt;
1798   
1799      compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa)
1800          $(compoundIndicators_act(accNodesModel,accYears,indicator)
1801              and sum((accNodesModel_a,accYears_a,indicator_a)
1802                      $compoundIndicatorsExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a), 1) = 1)
1803          = sum((accNodesModel_a,accYears_a,indicator_a)
1804                  $(compoundIndicatorsExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a)),
1805              compoundIndicatorsExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a));
1806   
1807      compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa)
1808          $(compoundIndicators_act(accNodesModel,accYears,indicator)
1809              and sum((accNodesModel_a,accYears_a,indicator_a)
1810                      $compoundIndicatorsExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a), 1) > 1)
1811          = sum((accNodesModel_a,accYears_a,indicator_a)
1812                  $(compoundIndicatorsExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a)
1813                      and not (sameas(accNodesModel, accNodesModel_a) and sameas(accYears, accYears_a) and sameas(indicator, indicator_a))),
1814              compoundIndicatorsExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a))
1815          / sum((accNodesModel_a,accYears_a,indicator_a)
1816                  $(compoundIndicatorsExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a)
1817                      and not (sameas(accNodesModel, accNodesModel_a) and sameas(accYears, accYears_a) and sameas(indicator, indicator_a))), 1);
1818   
1819      option compoundIndicators_act < compoundIndicators;
1820      compIndicators_post = sum((accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa)
1821          $compoundIndicatorsExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa), 1);
1822  );
1823  option sparseval = 0;
1824   
1825  * map to sub-years and sub-nodes
1826  compoundIndicatorsExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_a)
1827      $(compoundIndicators_act(accNodesModel,accYears,indicator)
1828          and compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
1829          and map_accYears(accYears_aa,accYears_a)
1830          and map_accNodes(accNodesModel_aa,accNodesModel_a))
1831      = compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
1832          * yearFactor(accNodesModel,accYears,indicator,accYears_aa);
1833   
1834  * Remove all accounting regions and accounting years
1835  compoundIndicatorsExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa)
1836      $(compoundIndicatorsExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa)
1837          and not accounting_indicatorBounds(accNodesModel_aa,accYears_aa,indicator_aa,"isVariable")
1838          and sum(accNodes$(sameas(accNodes,accNodesModel_aa)), 1)
1839              or sameas("horizon",accYears_aa))
1840      = 0;
1841   
1842  * Map from extended parameter to final parameter
1843  option compoundIndicatorsExt_r < compoundIndicatorsExt;
1844  compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa)
1845      $(compoundIndicators_act(accNodesModel,accYears,indicator)
1846          and sum((accNodesModel_a,accYears_a,indicator_a)
1847                  $compoundIndicatorsExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a), 1) = 1)
1848      = sum((accNodesModel_a,accYears_a,indicator_a)
1849              $(compoundIndicatorsExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a)),
1850          compoundIndicatorsExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a));
1851   
1852  compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa)
1853      $(compoundIndicators_act(accNodesModel,accYears,indicator)
1854          and sum((accNodesModel_a,accYears_a,indicator_a)
1855                  $compoundIndicatorsExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a), 1) > 1)
1856      = sum((accNodesModel_a,accYears_a,indicator_a)
1857              $(compoundIndicatorsExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a)
1858                  and not (sameas(accNodesModel, accNodesModel_a) and sameas(accYears, accYears_a) and sameas(indicator, indicator_a))),
1859          compoundIndicatorsExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a))
1860      / sum((accNodesModel_a,accYears_a,indicator_a)
1861              $(compoundIndicatorsExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a)
1862                  and not (sameas(accNodesModel, accNodesModel_a) and sameas(accYears, accYears_a) and sameas(indicator, indicator_a))), 1);
1863   
1864  * Remove all accounting regions and accounting years
1865  compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
1866      $(compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
1867          and not accounting_indicatorBounds(accNodesModel_a,accYears_a,indicator_a,"isVariable")
1868          and (sum(accNodes$(sameas(accNodes,accNodesModel_a)), 1)
1869              or sameas("horizon",accYears_a)))
1870      = 0;
1871   
1872  * Remove all slack indicators except the ones declared in indicatorBounds
1873  compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
1874      $(compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
1875          and sum((accNodesModel_aa,accYears_aa)$accounting_indicatorBounds(accNodesModel_aa,accYears_aa,indicator_a,"isVariable"), 1)
1876          and not accounting_indicatorBounds(accNodesModel_a,accYears_a,indicator_a,"isVariable"))
1877      = 0;
1878   
1879  * ==== compound indicators for the post calculation ====
1880  parameter compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a);
1881  compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel,accYears,indicator)
1882      $(sum(nodesModelToCalc$map_accNodesToCalc(accNodesModel,nodesModelToCalc), 1)
1883          and sum(yearsToCalc$map_accYearsToCalc(accYears,yearsToCalc), 1)) = 1;
1884   
1885  set compoundIndicatorsFull_act(accNodesModel,accYears,indicator);
1886  option compoundIndicatorsFull_act < compoundIndicatorsFull;
1887   
1888  parameter compoundIndicatorsFullExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa);
1889  parameter compoundIndicatorsFullExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a);
1890  compoundIndicatorsFullExt(accNodesModel,accYears,indicator,accNodesModel,accYears,indicator,accNodesModel,accYears,indicator) = 1;
1891   
1892  compIndicators_pre = 0;
1893  compIndicators_post = 1;
1894   
1895  option sparseval = 1;
1896  while(compIndicators_pre < compIndicators_post,
1897      compIndicators_pre = sum((accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa)
1898          $compoundIndicatorsFullExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa), 1);
1899   
1900      compoundIndicatorsFullExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa)
1901          $(compoundIndicatorsFull_act(accNodesModel,accYears,indicator)
1902              and compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
1903              and not accounting_indicatorBounds(accNodesModel_a,accYears_a,indicator_a,"isVariable")
1904              and map_accNodes(accNodesModel_aa,accNodesModel_a)
1905              and map_accYears(accYears_aa,accYears_a))
1906          = compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
1907              * accounting_perIndicator(indicator_a,indicator_aa,accNodesModel_aa,accYears_aa,"perIndicator");
1908   
1909      option compoundIndicatorsFullExt_r < compoundIndicatorsFullExt;
1910   
1911      compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa)
1912          $(compoundIndicatorsFull_act(accNodesModel,accYears,indicator)
1913              and sum((accNodesModel_a,accYears_a,indicator_a)
1914                      $compoundIndicatorsFullExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a), 1) = 1)
1915          = sum((accNodesModel_a,accYears_a,indicator_a)
1916                  $(compoundIndicatorsFullExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a)),
1917              compoundIndicatorsFullExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a));
1918   
1919      compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa)
1920          $(compoundIndicatorsFull_act(accNodesModel,accYears,indicator)
1921              and sum((accNodesModel_a,accYears_a,indicator_a)
1922                      $compoundIndicatorsFullExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a), 1) > 1)
1923          = sum((accNodesModel_a,accYears_a,indicator_a)
1924                  $(compoundIndicatorsFullExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a)
1925                      and not (sameas(accNodesModel, accNodesModel_a) and sameas(accYears, accYears_a) and sameas(indicator, indicator_a))),
1926              compoundIndicatorsFullExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a))
1927          / sum((accNodesModel_a,accYears_a,indicator_a)
1928                  $(compoundIndicatorsFullExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a)
1929                      and not (sameas(accNodesModel, accNodesModel_a) and sameas(accYears, accYears_a) and sameas(indicator, indicator_a))), 1);
1930   
1931      option compoundIndicatorsFull_act < compoundIndicatorsFull;
1932      compIndicators_post = sum((accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa)
1933          $compoundIndicatorsFullExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa), 1);
1934  );
1935  option sparseval = 0;
1936   
1937  * map to sub-years and sub-nodes
1938  compoundIndicatorsFullExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_a)
1939      $(compoundIndicatorsFull_act(accNodesModel,accYears,indicator)
1940          and compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
1941          and map_accYears(accYears_aa,accYears_a)
1942          and map_accNodes(accNodesModel_aa,accNodesModel_a))
1943      = compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
1944          * yearFactor(accNodesModel,accYears,indicator,accYears_aa);
1945   
1946  * Remove all accounting regions and accounting years
1947  compoundIndicatorsFullExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa)
1948      $(compoundIndicatorsFullExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa)
1949          and not accounting_indicatorBounds(accNodesModel_aa,accYears_aa,indicator_aa,"isVariable")
1950          and sum(accNodes$(sameas(accNodes,accNodesModel_aa)), 1)
1951              or sameas("horizon",accYears_aa))
1952      = 0;
1953   
1954  * Map from extended parameter to final parameter
1955  option compoundIndicatorsFullExt_r < compoundIndicatorsFullExt;
1956  compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa)
1957      $(compoundIndicatorsFull_act(accNodesModel,accYears,indicator)
1958          and sum((accNodesModel_a,accYears_a,indicator_a)
1959                  $compoundIndicatorsFullExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a), 1) = 1)
1960      = sum((accNodesModel_a,accYears_a,indicator_a)
1961              $(compoundIndicatorsFullExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a)),
1962          compoundIndicatorsFullExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a));
1963   
1964  compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa)
1965      $(compoundIndicatorsFull_act(accNodesModel,accYears,indicator)
1966          and sum((accNodesModel_a,accYears_a,indicator_a)
1967                  $compoundIndicatorsFullExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a), 1) > 1)
1968      = sum((accNodesModel_a,accYears_a,indicator_a)
1969              $(compoundIndicatorsFullExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a)
1970                  and not (sameas(accNodesModel, accNodesModel_a) and sameas(accYears, accYears_a) and sameas(indicator, indicator_a))),
1971          compoundIndicatorsFullExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a))
1972      / sum((accNodesModel_a,accYears_a,indicator_a)
1973              $(compoundIndicatorsFullExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a)
1974                  and not (sameas(accNodesModel, accNodesModel_a) and sameas(accYears, accYears_a) and sameas(indicator, indicator_a))), 1);
1975   
1976  * Remove all accounting regions and accounting years
1977  compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
1978      $(compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
1979          and not accounting_indicatorBounds(accNodesModel_a,accYears_a,indicator_a,"isVariable")
1980          and (sum(accNodes$(sameas(accNodes,accNodesModel_a)), 1)
1981              or sameas("horizon",accYears_a)))
1982      = 0;
1983   
1984  * Remove all slack indicators except the ones declared in indicatorBounds
1985  compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
1986      $(compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
1987          and sum((accNodesModel_aa,accYears_aa)$accounting_indicatorBounds(accNodesModel_aa,accYears_aa,indicator_a,"isVariable"), 1)
1988          and not accounting_indicatorBounds(accNodesModel_a,accYears_a,indicator_a,"isVariable"))
1989      = 0;
1990   
1991  * Check if the objective value and optimization sense is set correctly
1992  scalar opti_values, opti_sense;
1993  opti_values = sum((accNodesModel,accYears,indicator)$(accounting_indicatorBounds(accNodesModel,accYears,indicator,"obj") <> 0), 1);
1994  opti_sense = sum((accNodesModel,accYears,indicator), accounting_indicatorBounds(accNodesModel,accYears,indicator,"obj"));
1995  abort$(opti_values < 1)
1996      "Accounting: No indicator specified as objective value"
1997  abort$(opti_values > 1)
1998      "Accounting: Too many indicators specified as objective value"
1999  abort$(opti_sense <> -1 and opti_sense <> 1)
2000      "Accounting: Optimization sense has to be either -1 or 1"
INCLUDE    C:\Local\REMix\framework\remix\framework\model\source\accounting\annuities.gms
2002  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
2003  * SPDX-License-Identifier: BSD-3-Clause
2004   
2005  * Calculation of annuities
2006   
2007  abort$(sum((indicator,nodesModelToCalc,converter_techs,vintage)
2008          $(accounting_converterUnits(indicator,nodesModelToCalc,converter_techs,vintage,"useAnnuity") = 1
2009          and accounting_converterUnits(indicator,nodesModelToCalc,converter_techs,vintage,"amorTime") < 1), 1) > 0 )
2010      "Accounting: Some converter technologies use annuities but have no amortization time"
2011   
2012  parameter accounting_annuityFactor_converter(indicator,nodesModel,converter_techs,vintage);
2013  accounting_annuityFactor_converter(indicator,nodesModelToCalc,converter_techs,vintage)
2014      $accounting_converterUnits(indicator,nodesModelToCalc,converter_techs,vintage,"useAnnuity")
2015      =
2016      accounting_converterUnits(indicator,nodesModelToCalc,converter_techs,vintage,"interest")
2017          * (1 + accounting_converterUnits(indicator,nodesModelToCalc,converter_techs,vintage,"interest"))
2018          ** accounting_converterUnits(indicator,nodesModelToCalc,converter_techs,vintage,"amorTime")
2019      / ((1 + accounting_converterUnits(indicator,nodesModelToCalc,converter_techs,vintage,"interest"))
2020          ** accounting_converterUnits(indicator,nodesModelToCalc,converter_techs,vintage,"amorTime") - 1);
2021   
2022   
2023  abort$(sum((indicator,nodesModelToCalc,storage_techs,vintage)
2024          $(accounting_storageUnits(indicator,nodesModelToCalc,storage_techs,vintage,"useAnnuity") = 1
2025          and accounting_storageUnits(indicator,nodesModelToCalc,storage_techs,vintage,"amorTime") < 1), 1) > 0 )
2026      "Accounting: Some storage technologies use annuities but have no amortization time"
2027   
2028  parameter accounting_annuityFactor_storage(indicator,nodesModel,storage_techs,vintage);
2029  accounting_annuityFactor_storage(indicator,nodesModelToCalc,storage_techs,vintage)
2030      $accounting_storageUnits(indicator,nodesModelToCalc,storage_techs,vintage,"useAnnuity")
2031      =
2032      accounting_storageUnits(indicator,nodesModelToCalc,storage_techs,vintage,"interest")
2033          * (1 + accounting_storageUnits(indicator,nodesModelToCalc,storage_techs,vintage,"interest"))
2034          ** accounting_storageUnits(indicator,nodesModelToCalc,storage_techs,vintage,"amorTime")
2035      / ((1 + accounting_storageUnits(indicator,nodesModelToCalc,storage_techs,vintage,"interest"))
2036          ** accounting_storageUnits(indicator,nodesModelToCalc,storage_techs,vintage,"amorTime") - 1);
2037   
2038   
2039  abort$(sum((indicator,linksModelToCalc,transfer_techs,vintage)
2040          $(accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"useAnnuity") = 1
2041          and accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"amorTime") < 1), 1) > 0 )
2042      "Accounting: Some transfer technologies use annuities but have no amortization time"
2043   
2044  parameter accounting_annuityFactor_transferLink(indicator,linksModel,transfer_techs,vintage);
2045  accounting_annuityFactor_transferLink(indicator,linksModelToCalc,transfer_techs,vintage)
2046      $accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"useAnnuity")
2047      =
2048      accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"interest")
2049          * (1 + accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"interest"))
2050          ** accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"amorTime")
2051      / ((1 + accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"interest"))
2052          ** accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"amorTime") - 1);
2053   
2054   
2055   
2056  abort$(sum((indicator,linksModelToCalc,transfer_techs,vintage,link_types)
2057          $(accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"useAnnuity") = 1
2058          and accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"amorTime") < 1), 1) > 0 )
2059      "Accounting: Some transfer-per-length technologies use annuities but have no amortization time"
2060   
2061  parameter accounting_annuityFactor_transferPerLength(indicator,linksModel,transfer_techs,vintage,link_types);
2062  accounting_annuityFactor_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types) = 1;
2063   
2064  accounting_annuityFactor_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types)
2065      $accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"useAnnuity")
2066      =
2067      accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"interest")
2068          * (1 + accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"interest"))
2069          ** accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"amorTime")
2070      / ((1 + accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"interest"))
2071          ** accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"amorTime") - 1);
2072   
2074   
INCLUDE    C:\Local\REMix\framework\remix\framework\model\source\methods\mga_pre.gms
2076  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
2077  * SPDX-License-Identifier: BSD-3-Clause
2078   
INCLUDE    C:\Local\REMix\framework\remix\framework\model\source\methods\pareto_pre.gms
2082  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
2083  * SPDX-License-Identifier: BSD-3-Clause
2084   
INCLUDE    C:\Local\REMix\framework\remix\framework\model\source\postcalc\declaration.gms
2088  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
2089  * SPDX-License-Identifier: BSD-3-Clause
2090  * // # Output data
2091  * // This is the reference data model of the REMix output.
2092  * //
2093  * // ## Standard output
2096   
2103   
2105   
2106  set capType / "build", "decom", "total", "lowerLimit", "upperLimit", "total_degraded" /;
2107  set balanceType / "netto", "brutto", "positive", "negative", "flh" /;
2108  set profileType / "upper", "fixed", "lower" /;
2109  set r2a_has_converter_cost(indicator,nodesModel,years,techs,vintage,commodity);
2110   
2111  ** // OUTPUT: indicator_accounting | OEO_00000350:quantity value
2112  * // ### indicator_accounting
2113  * // Title: Accounting indicators Post-calculation
2114  parameter indicator_accounting(accNodesModel,accYears,indicator) "Post-calculation aggregated indicator accounting" ;
2115  * //
2116  ** // OUTPUT: indicator_accounting_ref | OEO_00000350:quantity value
2117  * // ### indicator_accounting_ref
2118  * // Title: Accounting indicators reference
2119  parameter indicator_accounting_ref(accNodesModel,accYears,indicator) "Indicator accounting optimization levels" ;
2120  * //
2121  ** // OUTPUT: indicator_accounting_comp | OEO_00000350:quantity value
2122  * // ### indicator_accounting_comp
2123  * // Title: Accounting indicators composition
2124  parameter indicator_accounting_comp(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a) "Indicator accounting with other indicator composition" ;
2125  * //
2126  ** // OUTPUT: indicator_accounting_detailed | OEO_00000350:quantity value
2127  * // ### indicator_accounting_detailed
2128  * // Title: Accounting indicators detail
2129  parameter indicator_accounting_detailed(indicator,nodesModel,years,techs) "Indicator accounting with technological composition" ;
2130  * //
2131  ** // OUTPUT: indicator_accounting_links | OEO_00000350:quantity value
2132  * // ### indicator_accounting_links
2133  * // Title: Accounting indicators per transfer link
2134  parameter indicator_accounting_links(indicator,nodesModel,nodesModel_a,linksModel,years,techs) "Indicator accounting of transfer technologies" ;
2135  * //
2136  parameter converter_ratedInput(techs,vintage,commodity);
2137  parameter converter_ratedOutput(techs,vintage,commodity);
2138  parameter converter_ratedOutput_min(nodesModel,years,techs,commodity);
2139  parameter converter_ratedOutput_max(nodesModel,years,techs,commodity);
2140   
2141  ** // OUTPUT: converter_caps | OEO_00010257:power capacity
2142  * // ### converter_caps
2143  * // Title: Coverter capacities post-calculation
2144  parameter converter_caps(accNodesModel,accYears,techs,commodity,capType) "Converter capacities, aggregated total" ;
2145  * //
2146  parameter converter_caps_ext(accNodesModel,nodesModel,accYears,years,techs,vintage,commodity,capType);
2147   
2148  ** // OUTPUT: converter_units | OEO_00000350:quantity value
2149  * // ### converter_units
2150  * // Title: Coverter units post-calculation
2151  parameter converter_units(accNodesModel,accYears,techs,vintage,capType) "Converter units" ;
2152  * //
2153  parameter converter_units_ext(accNodesModel,nodesModel,accYears,years,techs,vintage,capType);
2154   
2155  set transfer_usedStartEnd(nodesModel,nodesModel,linksModel,years,techs);
2156  parameter max_transfer_coefficient(techs,commodity);
2157  parameter min_transfer_coefficient(techs,commodity);
2158  ** // OUTPUT: transfer_links | OEO_00000350:quantity value
2159  * // ### transfer_links
2160  * // Title: Transfer post-calculation
2161  parameter transfer_links(linksModel,years,techs,vintage,capType) "Transfer links" ;
2162  * //
2163  ** // OUTPUT: transfer_caps | OEO_00010257:power capacity
2164  * // ### transfer_caps
2165  * // Title: Transfer capacities post-calculation
2166  parameter transfer_caps(nodesModel_start,nodesModel_end,linksModel,years,techs,commodity,capType) "Transfer capacities, aggregated total" ;
2167  * //
2168  ** // OUTPUT: transfer_flows | OEO_00050019:energy amount value
2169  * // ### transfer_flows
2170  * // Title: Transfer hourly flows
2171  parameter transfer_flows(timeModel,nodesModel_start,nodesModel_end,linksModel,years,techs,commodity) "Hourly link flows" ;
2172  * //
2173  ** // OUTPUT: transfer_flows_annual | OEO_00050019:energy amount value
2174  * // ### transfer_flows_annual
2175  * // Title: Transfer annual flows
2176  parameter transfer_flows_annual(nodesModel_start,nodesModel_end,linksModel,years,techs,commodity,balanceType) "Annual link flows" ;
2177  * //
2178  ** // OUTPUT: transfer_losses | OEO_00050019:energy amount value
2179  * // ### transfer_losses
2180  * // Title: Transfer hourly losses
2181  parameter transfer_losses(timeModel,nodesModel_start,nodesModel_end,linksModel,years,techs,commodity) "Hourly link losses" ;
2182  * //
2183  ** // OUTPUT: transfer_losses_annual | OEO_00050019:energy amount value
2184  * // ### transfer_losses_annual
2185  * // Title: Transfer annual losses
2186  parameter transfer_losses_annual(nodesModel_start,nodesModel_end,linksModel,years,techs,commodity,balanceType) "Annual link losses" ;
2187  * //
2188  parameter storage_size_max(nodesModel,years,techs,commodity);
2189  parameter storage_size_min(nodesModel,years,techs,commodity);
2190  ** // OUTPUT: storage_units |  OEO_00000350:quantity value
2191  * // ### storage_units
2192  * // Title: Storage units post-calculation
2193  parameter storage_units(accNodesModel,accYears,techs,vintage,capType) "Storage units" ;
2194  * //
2195  parameter storage_units_ext(accNodesModel,nodesModel,accYears,years,techs,vintage,capType);
2196  ** // OUTPUT: storage_caps | OEO_00230000:energy storage capacity
2197  * // ### storage_caps
2198  * // Title: Storage capacities post-calculation
2199  parameter storage_caps(accNodesModel,accYears,techs,commodity,capType) "Storage capacities, aggregated total" ;
2200  * //
2201  parameter storage_caps_ext(accNodesModel,nodesModel,accYears,years,techs,vintage,commodity,capType);
2202  ** // OUTPUT: storage_level_out | OEO_00330012:energy storage content
2203  * // ### storage_level_out
2204  * // Title: Storage level
2205  parameter storage_level_out(timeModel,accNodesModel,accYears,techs,commodity) "Storage level per time step" ;
2206  * //
2207  parameter storage_level_out_ext(timeModel,accNodesModel,nodesModel,accYears,years,techs,vintage,commodity);
2208  ** // OUTPUT: storage_flows | OEO_00050019:energy amount value
2209  * // ### storage_flows
2210  * // Title: Storage hourly flows
2211  parameter storage_flows(timeModel,accNodesModel,accYears,techs,commodity) "Storage flows per time step" ;
2212  * //
2213  parameter storage_flows_ext(timeModel,accNodesModel,nodesModel,accYears,years,techs,vintage,commodity);
2214  ** // OUTPUT: storage_flows_annual | OEO_00050019:energy amount value
2215  * // ### storage_flows_annual
2216  * // Title: Storage annual flows
2217  parameter storage_flows_annual(accNodesModel,accYears,techs,commodity,balanceType) "Aggregated storage flows" ;
2218  * //
2219  ** // OUTPUT: storage_losses_out | OEO_00050019:energy amount value
2220  * // ### storage_losses_out
2221  * // Title: Storage hourly losses
2222  parameter storage_losses_out(timeModel,accNodesModel,accYears,techs,commodity) "Storage losses per time step" ;
2223  * //
2224  ** // OUTPUT: storage_losses_annual | OEO_00050019:energy amount value
2225  * // ### storage_losses_annual
2226  * // Title: Storage annual losses
2227  parameter storage_losses_annual(accNodesModel,accYears,techs,commodity,balanceType) "Aggregated storage losses" ;
2228  * //
2229  ** // OUTPUT: commodity_balance | OEO_00000350:quantity value
2230  * // ### commodity_balance
2231  * // Title: Hourly commodity balance
2232  parameter commodity_balance(timeModel,accNodesModel,accYears,techs,commodity) "Commodity balances per model hour" ;
2233  parameter commodity_balance_ext(timeModel,accNodesModel,nodesModel,accYears,years,techs,vintage,commodity);
2234  * //
2235  ** // OUTPUT: commodity_balance_annual | OEO_00000350:quantity value
2236  * // ### commodity_balance_annual
2237  * // Title: Annual commodity balance
2238  parameter commodity_balance_annual(accNodesModel,accYears,techs,commodity,balanceType) "Aggregated commodity balances" ;
2239  * //
2240  ** // OUTPUT: marginals_sourcesink_profile | OEO_00040008:marginal cost
2241  * // ### marginals_sourcesink_profile
2242  * // Title: Source-sink marginals
2243  parameter marginals_sourcesink_profile(timeModel,nodesModel,years,techs,commodity) "Source and sink flow marginal values" ;
2244  * //
2245  ** // OUTPUT: marginals_balance | OEO_00040008:marginal cost
2246  * // ### marginals_balance
2247  * // Title: Nodel balance marginals
2248  parameter marginals_balance(timeModel,nodesModel,years,commodity) "Nodal balance marginal values" ;
2249  * //
2250  ** // OUTPUT: marginals_sourcesink_sum | OEO_00040008:marginal cost
2251  * // ### marginals_sourcesink_sum
2252  * // Title: Source-sink annual marginals
2253  parameter marginals_sourcesink_sum(nodesModel,years,techs,commodity) "Annual source and sink flow marginal values" ;
2254  * //
2255  ** // OUTPUT: marginals_indicator_bounds | OEO_00040008:marginal cost
2256  * // ### marginals_indicator_bounds
2257  * // Title: Indicator bounds marginals
2258  parameter marginals_indicator_bounds(accNodesModel,accYears,indicator) "Accounting indicator marginals" ;
2259  * //
2260  * // ## REMix-AMIRIS interface output
2261  * //
2262  ** // OUTPUT: r2a_annuity_cost_converter | OEO_00040009:cost
2263  * // ### r2a_annuity_cost_converter
2264  * // Title: Converter annuity cost
2265  parameter r2a_annuity_cost_converter(indicator,accNodesModel,accYears,techs,vintage,commodity) "Annuity cost of converters" ;
2266  * //
2267  ** // OUTPUT: r2a_spec_cost_converter | OEO_00040009:cost
2268  * // ### r2a_spec_cost_converter
2269  * // Title: Converter specific cost
2270  parameter r2a_spec_cost_converter(indicator,accNodesModel,accYears,techs,vintage,commodity) "Specific cost of converters" ;
2271  * //
2272  ** // OUTPUT: r2a_spec_cost_fuel | OEO_00040009:cost
2273  * // ### r2a_spec_cost_fuel
2274  * // Title: Commodity specific cost
2275  parameter r2a_spec_cost_fuel(indicator,accNodesModel,accYears,techs,commodity) "Specific cost of commodities, used particularly for fuels" ;
2276  * //
2277  ** // OUTPUT: r2a_spec_cost_indicator | OEO_00040009:cost
2278  * // ### r2a_spec_cost_indicator
2279  * // Title: Indicator specific cost
2280  parameter r2a_spec_cost_indicator(indicator,indicator_a,accNodesModel,accYears) "Specific indicator cost" ;
2281  * //
2282  ** // OUTPUT: r2a_converter_efficiencies | OEO_00140050:efficiency value
2283  * // ### r2a_converter_efficiencies
2284  * // Title: Indicator specific cost
2285  parameter r2a_converter_efficiencies(techs,vintage,activity,commodity,commodity_a) "Converter-specific efficiency" ;
2286  * //
2287  ** // OUTPUT: r2a_converter_avail_factor | OEO_00000350:quantity value
2288  * // ### r2a_converter_avail_factor
2289  * // Title: Converter availability factor
2290  parameter r2a_converter_avail_factor(accNodesModel,accYears,techs,vintage) "Availability factor of converter technologies" ;
2291  parameter r2a_converter_avail_profile(timeModel,accNodesModel,accYears,techs,commodity,profileType) "Availability of converter technologies" ;
2292  parameter r2a_converter_avail_profile_ext(timeModel,accNodesModel,nodesModel,accYears,years,techs,vintage,commodity,profileType);
2293  * //
2294  ** // OUTPUT: r2a_storage_e2p | OEO_00000350:quantity value
2295  * // ### r2a_storage_e2p
2296  * // Title: E2P Storage
2297  parameter r2a_storage_e2p(accNodesModel,accYears,techs,vintage,commodity,capType) "Energy-to-power ratio" ;
2298  * //
2299  ** // OUTPUT: r2a_storage_selfdischarge | OEO_00000350:quantity value
2300  * // ### r2a_storage_selfdischarge
2301  * // Title: Storage self discharge rates
2302  parameter r2a_storage_selfdischarge(accNodesModel,accYears,techs,vintage,commodity);
2303   
INCLUDE    C:\Local\REMix\framework\remix\framework\model\source\loadgdx.gms
2307  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
2308  * SPDX-License-Identifier: BSD-3-Clause
2309   
2310  * ==== global settings ====
2312   
2314   
INCLUDE    C:\Local\REMix\framework\remix\framework\model\source\core\converter.gms
2316  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
2317  * SPDX-License-Identifier: BSD-3-Clause
2318   
2319  * // # core_converter
2320  * // The equations in this file describe the converters in the model.
2321   
2322  * // ## Advanced features
2323  * //
2324  * // You can find a more detailed explanation of the %curly_open%ref%curly_close%`MIP features <explanations_mip_label>`.
2325  ** // There is also a more detailed explanation on the modeling of outages at the %curly_open%ref%curly_close%`resilience section <explanations_resilience_label>`.
2326  * //
2327  * // In the following table you can see which modifications you have to make to your data to use the different features.
2328  * //
2329  * // | Feature | Modification |
2330  * // | ------ | ------ |
2331  * // | MIP expansion | The converter_tech_Parameter "mipUnits" has to be set to 1 in converter_techParam.dat for the technologies and years where descrete expansion is wanted |
2332  * // | Minimum up/downtime | The converter_tech_Parameters "minUptime" and/or "minDowntime" need to be set to the according amount of minimum time steps.Furthermore, the converter_tech_Parameter "mipDispatch" has to be set to 1 in converter_techParam.dat
2333  * // for the technologies and years where a minimum up- or downtime should be applied so that the units can be shut down. "mipUnits" will automatically be set to 1 |
2334  * // | Partial load | The converter_tech_Parameter "mipDispatch" has to be set to 1 in converter_techParam.dat for the technologies and years where you want to make use of the partial load feature. You also have to set a value to
2335  * // the converter_coefficient_parameters "minLoad" and/or "maxLoad" for the according technologies, vintages, activities and commodities. You can then for example set different "coefficient" values for each activity in converter_coefficient.dat |
2336  ** // | Outages | You have to include the converter_outageProfile.dat-file and while executing the model you have to set --method=resilience |
2337   
2338  * // ## %curly_open%ref%curly_close%`sets <remix_model_sets_label>`
2339  * //
2340  * // ### set_converter_techs.dat
2341  * // In this file all converter technologies are listed that can be used within your model.
2342  * //
2343  * // ### set_activities.dat
2344  * // All modes with which the converter technologies can be operated need to be added here.
2345  * // Examples: Charge (for the charging mode of a storage), Powergen (for the mode in which a converter produces electricity), Curtailment (for the mode in which a renewable power plant is shut down), …
2346  * // If you would like to use the partial load feature, all activity modes that should be available for this feature need to be defined here as well.
2347  * //
2348  * // ### set_commodities.dat
2349  * // In this file all commodities are listed that can be used and converted by the converter technologies.
2350  * // Examples: Electricity, Coal, Biomass, Hydrogen, …
2351   
2352  * // ## Variables
2353  * // {special_table_converter_variables}
----   3571 Data Decla converter_activityProfileLoad    0.609    14.391 SECS    102 MB  2970953
4235   
4236  * ==== loading units from gdx file ====
4237   
4238  * Load units from gdx file
4240   
4241  * ==== calculation of mappings ====
4242   
4243  * Technologies with a lifeTime > 0 are available
4244  set converter_availTech(nodesModel,years,converter_techs,vintage);
4245  converter_availTech(nodesModel,years,converter_techs,vintage)
4246      $(vintage.val = smax(vintage_a$(vintage_a.val <= years.val
4247          and converter_techParam(converter_techs,vintage_a,"lifeTime") > 0), vintage_a.val)) = yes;
4248   
4249  * Technologies to optimize become unavailable if they have an unitsUpperLimit of 0
4250  converter_availTech(nodesModel,years,converter_techs,vintage)
4251      $(yearsToCalc(years) and converter_capacityParam(nodesModel,years,converter_techs,"unitsUpperLimit") = 0 ) = no;
4252   
4253  * Technologies already built become unavailable if they have an unitsBuild of 0
4254  converter_availTech(nodesModel,years,converter_techs,vintage)
4255      $( ( not yearsToCalc(years)) and converter_capacityParam(nodesModel,years,converter_techs,"unitsBuild") = 0 ) = no;
4256   
4257  * Used technologies are available technologies over their technical lifeTime
4258  set converter_usedTech(nodesModel,years,converter_techs,vintage);
4259  converter_usedTech(nodesModel,years,converter_techs,vintage)
4260      $(vintage.val <= years.val
4261          and years.val < smax(years_a$converter_availTech(nodesModel,years_a,converter_techs,vintage),
4262                                  years_a.val + converter_techParam(converter_techs,vintage,"lifeTime"))
4263          ) = yes;
4264   
4265  * Technologies have to be decomissioned in the interval of first avail + lifetime to last avail + lifetime
4266  set converter_decomTech(nodesModel,years,converter_techs,vintage);
4267  converter_decomTech(nodesModel,years,converter_techs,vintage)
4268    $(sum(years_a$converter_usedTech(nodesModel,years_a,converter_techs,vintage), 1)
4269      and sum(yearsToCalc
4270        $(sameas(years, yearsToCalc)
4271          and yearsToCalc.val >= smin(years_a$converter_availTech(nodesModel,years_a,converter_techs,vintage), years_a.val) + converter_techParam(converter_techs,vintage,"lifeTime")
4272          and yearsToCalc.val <= smax(years_a$converter_availTech(nodesModel,years_a,converter_techs,vintage), years_a.val) + converter_techParam(converter_techs,vintage,"lifeTime")), 1))
4273    = yes;
4274   
4275  * Extend the decom frame to the year after the last year of usedTech
4276  converter_decomTech(nodesModel,yearsToCalc,converter_techs,vintage)
4277    $(converter_usedTech(nodesModel,yearsToCalc-1,converter_techs,vintage)
4278      and converter_decomTech(nodesModel,yearsToCalc-1,converter_techs,vintage))
4279    = yes;
4280   
4281  * Mapping for used activities and commodities
4282  set converter_usedActCom(converter_techs,vintage,activity,commodity);
4283  option converter_usedActCom < converter_coefficient;
4284   
4285  set converter_usedAct(converter_techs,vintage,activity);
4286  option converter_usedAct < converter_usedActCom;
4287   
4288  set converter_usedCom(converter_techs,vintage,commodity);
4289  option converter_usedCom < converter_usedActCom;
4290   
4291  set converter_usedTechAct(nodesModel,years,converter_techs,vintage,activity);
4292  converter_usedTechAct(nodesModel,years,converter_techs,vintage,activity)
4293      $(converter_usedTech(nodesModel,years,converter_techs,vintage)
4294          and converter_usedAct(converter_techs,vintage,activity))
4295      = yes;
4296   
4297  set converter_useRampPos(nodesModel,years,converter_techs,vintage);
4298  converter_useRampPos(nodesModelToCalc,yearsToCalc,converter_techs,vintage)
4299    $(sum(indicator$accounting_converterStartup(indicator,nodesModelToCalc,converter_techs,vintage,"perRamp"), 1)
4300      or sum(indicator$accounting_converterStartup(indicator,nodesModelToCalc,converter_techs,vintage,"perRampPos"), 1))
4301    = 1;
4302   
4303  set converter_useRampNeg(nodesModel,years,converter_techs,vintage);
4304  converter_useRampNeg(nodesModelToCalc,yearsToCalc,converter_techs,vintage)
4305    $(sum(indicator$accounting_converterStartup(indicator,nodesModelToCalc,converter_techs,vintage,"perRamp"), 1)
4306      or sum(indicator$accounting_converterStartup(indicator,nodesModelToCalc,converter_techs,vintage,"perRampNeg"), 1))
4307    = 1;
4308   
4309   
4310  * ==== aggregation of profiles ====
4311   
4312  * derive upper and lower profiles then aggregate
4313  set converter_activity_hasProfileIn(nodesData,years,converter_techs,pc_converter_activityProfile);
4314  option converter_activity_hasProfileIn < converter_activityProfileIn;
4315   
4316  set converter_activity_hasProfile(nodesModel,years,converter_techs,pc_converter_activityProfile);
4317  converter_activity_hasProfile(nodesModelToCalc,yearsToCalc,converter_techs,pc_converter_activityProfile)
4318      = sum(nodesData$aggregateNodesModel(nodesData,nodesModelToCalc),
4319              converter_activity_hasProfileIn(nodesData,yearsToCalc,converter_techs,pc_converter_activityProfile));
4320   
4321  set converter_coefficient_hasProfileIn(nodesData,years,converter_techs,vintage,activity,commodity);
4322  option converter_coefficient_hasProfileIn < converter_coefficientProfileIn;
4323   
4324  set converter_coefficient_hasProfile(nodesModel,years,converter_techs,vintage,activity,commodity);
4325  converter_coefficient_hasProfile(nodesModelToCalc,yearsToCalc,converter_techs,vintage,activity,commodity)
4326      = sum(nodesData$aggregateNodesModel(nodesData,nodesModelToCalc),
4327              converter_coefficient_hasProfileIn(nodesData,yearsToCalc,converter_techs,vintage,activity,commodity));
4328   
4329  * aagregate time dimension
4330  parameter converter_activityProfileIn_aggTime(timeModel,nodesData,yearsToCalc,converter_techs,pc_converter_activityProfile);
4331  converter_activityProfileIn_aggTime(timeModelToCalc,nodesData,yearsToCalc,converter_techs,pc_converter_activityProfile)
4332    $converter_activity_hasProfileIn(nodesData,yearsToCalc,converter_techs,pc_converter_activityProfile)
4333    = sum(timeData$timeMapping(timeData,timeModelToCalc),
4334            converter_activityProfileIn(timeData,nodesData,yearsToCalc,converter_techs,pc_converter_activityProfile)
4335            / timeLength(timeModelToCalc));
4336  option clear = converter_activityProfileIn;
4337   
4338  * weighted average for a real sum of units upper limits, plain average if one region has an upper limit of inf
4339  parameter converter_activityProfile(timeModel,nodesModel,years,converter_techs,vintage,pc_converter_activityProfile);
4340  converter_activityProfile(timeModelToCalc,converter_usedTech(nodesModelToCalc,yearsToCalc,converter_techs,vintage),"upper")
4341      = converter_techParam(converter_techs,vintage,"activityUpperLimit");
4342  converter_activityProfile(timeModelToCalc,converter_usedTech(nodesModelToCalc,yearsToCalc,converter_techs,vintage),"lower")
4343      = converter_techParam(converter_techs,vintage,"activityLowerLimit");
4344   
4345   
4346  set converter_finiteUnitLimit(nodesModelToCalc,yearsToCalc,converter_techs);
4347  converter_finiteUnitLimit(nodesModelToCalc,yearsToCalc,converter_techs)
4348      = sum(nodesData$aggregateNodesModel(nodesData,nodesModelToCalc), converter_capacityParamIn(nodesData,yearsToCalc,converter_techs,"unitsUpperLimit")) > 0
4349          and sum(nodesData$aggregateNodesModel(nodesData,nodesModelToCalc), converter_capacityParamIn(nodesData,yearsToCalc,converter_techs,"unitsUpperLimit")) < inf;
4350   
4351  set converter_infiniteUnitLimit(nodesModelToCalc,yearsToCalc,converter_techs);
4352  converter_infiniteUnitLimit(nodesModelToCalc,yearsToCalc,converter_techs)
4353      = sum(nodesData$aggregateNodesModel(nodesData,nodesModelToCalc), converter_capacityParamIn(nodesData,yearsToCalc,converter_techs,"unitsUpperLimit")) = inf;
4354   
4355  converter_activityProfile(timeModelToCalc,converter_usedTech(nodesModelToCalc,yearsToCalc,converter_techs,vintage),pc_converter_activityProfile)
4356      $(converter_activity_hasProfile(nodesModelToCalc,yearsToCalc,converter_techs,pc_converter_activityProfile)
4357          and converter_finiteUnitLimit(nodesModelToCalc,yearsToCalc,converter_techs))
4358      = sum(nodesData$(aggregateNodesModel(nodesData,nodesModelToCalc)
4359                  and converter_capacityParamIn(nodesData,yearsToCalc,converter_techs,"unitsUpperLimit") < inf ),
4360                converter_activityProfileIn_aggTime(timeModelToCalc,nodesData,yearsToCalc,converter_techs,pc_converter_activityProfile)
4361                * converter_capacityParamIn(nodesData,yearsToCalc,converter_techs,"unitsUpperLimit"))
4362      / sum(nodesData$aggregateNodesModel(nodesData,nodesModelToCalc),
4363              converter_capacityParamIn(nodesData,yearsToCalc,converter_techs,"unitsUpperLimit"));
4364   
4365  converter_activityProfile(timeModelToCalc,converter_usedTech(nodesModelToCalc,yearsToCalc,converter_techs,vintage),pc_converter_activityProfile)
4366      $(converter_activity_hasProfile(nodesModelToCalc,yearsToCalc,converter_techs,pc_converter_activityProfile)
4367          and converter_infiniteUnitLimit(nodesModelToCalc,yearsToCalc,converter_techs))
4368      = sum(nodesData$(aggregateNodesModel(nodesData,nodesModelToCalc)
4369                  and converter_capacityParamIn(nodesData,yearsToCalc,converter_techs,"unitsUpperLimit") = inf),
4370                converter_activityProfileIn_aggTime(timeModelToCalc,nodesData,yearsToCalc,converter_techs,pc_converter_activityProfile)
4371                * converter_capacityParamIn(nodesData,yearsToCalc,converter_techs,"unitsUpperLimit"))
4372      / sum(nodesData$(aggregateNodesModel(nodesData,nodesModelToCalc)
4373                      and converter_capacityParamIn(nodesData,yearsToCalc,converter_techs,"unitsUpperLimit") = inf ),
4374              1);
4375  option clear = converter_activityProfileIn_aggTime;
4376   
4377  * for fixed profiles overwrite upper and lower profile
4378  converter_activityProfile(timeModelToCalc,nodesModelToCalc,yearsToCalc,converter_techs,vintage,"lower")
4379      $converter_activity_hasProfile(nodesModelToCalc,yearsToCalc,converter_techs,"fixed")
4380      = converter_activityProfile(timeModelToCalc,nodesModelToCalc,yearsToCalc,converter_techs,vintage,"fixed");
4381   
4382  converter_activityProfile(timeModelToCalc,nodesModelToCalc,yearsToCalc,converter_techs,vintage,"upper")
4383      $converter_activity_hasProfile(nodesModelToCalc,yearsToCalc,converter_techs,"fixed")
4384      = converter_activityProfile(timeModelToCalc,nodesModelToCalc,yearsToCalc,converter_techs,vintage,"fixed");
4385   
4387   
4388  * weighted average for a real sum of units upper limits, plain average if one region has an upper limit of inf
4389  parameter converter_coefficientProfile(timeModel,nodesModel,years,converter_techs,vintage,activity,commodity);
4390  converter_coefficientProfile(timeModelToCalc,converter_usedTechAct(nodesModelToCalc,yearsToCalc,converter_techs,vintage,activity),commodity)
4391      = converter_coefficient(converter_techs,vintage,activity,commodity,"coefficient");
4392   
4393  converter_coefficientProfile(timeModelToCalc,converter_usedTechAct(nodesModelToCalc,yearsToCalc,converter_techs,vintage,activity),commodity)
4394      $( converter_coefficient_hasProfile(nodesModelToCalc,yearsToCalc,converter_techs,vintage,activity,commodity)
4395          and converter_finiteUnitLimit(nodesModelToCalc,yearsToCalc,converter_techs) )
4396      = sum(nodesData$aggregateNodesModel(nodesData,nodesModelToCalc),
4397            sum(timeData$timeMapping(timeData,timeModelToCalc),
4398                    converter_coefficientProfileIn(timeData,nodesData,yearsToCalc,converter_techs,vintage,activity,commodity))
4399                / timeLength(timeModelToCalc)
4400              * converter_capacityParamIn(nodesData,yearsToCalc,converter_techs,"unitsUpperLimit") )
4401      / sum(nodesData$aggregateNodesModel(nodesData,nodesModelToCalc),
4402              converter_capacityParamIn(nodesData,yearsToCalc,converter_techs,"unitsUpperLimit"));
4403   
4404  converter_coefficientProfile(timeModelToCalc,converter_usedTechAct(nodesModelToCalc,yearsToCalc,converter_techs,vintage,activity),commodity)
4405      $( converter_coefficient_hasProfile(nodesModelToCalc,yearsToCalc,converter_techs,vintage,activity,commodity)
4406          and converter_infiniteUnitLimit(nodesModelToCalc,yearsToCalc,converter_techs))
4407      = sum(nodesData$(aggregateNodesModel(nodesData,nodesModelToCalc)
4408                      and converter_capacityParamIn(nodesData,yearsToCalc,converter_techs,"unitsUpperLimit") = inf ),
4409            sum(timeData$timeMapping(timeData,timeModelToCalc),
4410                    converter_coefficientProfileIn(timeData,nodesData,yearsToCalc,converter_techs,vintage,activity,commodity))
4411                / timeLength(timeModelToCalc))
4412      / sum(nodesData$(aggregateNodesModel(nodesData,nodesModelToCalc)
4413                      and converter_capacityParamIn(nodesData,yearsToCalc,converter_techs,"unitsUpperLimit") = inf ), 1);
4414   
4416   
4417  * ==== prepare partial load behavior parameters ====
4418   
4419  * set disabled max load requirements to 1 to avoid excessive logical expressions later on
4420  alias(commodity, com);
4421  converter_coefficient(converter_techs,vintage,activity,commodity,"maxLoad")
4422      $((converter_coefficient(converter_techs,vintage,activity,commodity,"maxLoad") = 0)
4423        and converter_usedAct(converter_techs,vintage,activity))
4424      = 1;
4425   
4426  * indicate that at least one activity of a technology makes use of partial load behavior
4427  set converter_hasMaxLoad(converter_techs,vintage);
4428  converter_hasMaxLoad(converter_techs,vintage)
4429    = smin((activity,commodity)$converter_usedAct(converter_techs,vintage,activity),
4430              converter_coefficient(converter_techs,vintage,activity,commodity,"maxLoad")) < 1;
4431   
4432  set converter_hasMinLoad(converter_techs,vintage);
4433  converter_hasMinLoad(converter_techs,vintage)
4434    = smax((activity,commodity)$converter_usedAct(converter_techs,vintage,activity),
4435              converter_coefficient(converter_techs,vintage,activity,commodity,"minLoad")) > 0;
4436   
4437  set converter_hasConstantFluxInActivity(converter_techs,vintage);
4438  converter_hasConstantFluxInActivity(converter_techs,vintage)
4439    = sum((activity,commodity)$converter_usedAct(converter_techs,vintage,activity),
4440                          abs(converter_coefficient(converter_techs,vintage,activity,commodity,"constant"))) > 0;
4441   
4442  * setting up a requirements parameter to avoid having to cycle through commodities in equations
4443  set pc_converter_activityRequirements
4444      /
4445      minLoad             "Lower profile for converter activity"
4446      maxLoad             "Upper profile for converter activity"
4447      /;
4448  parameter converter_activityRequirements(converter_techs,vintage,activity,pc_converter_activityRequirements);
4449  converter_activityRequirements(converter_techs,vintage,activity,"minLoad")
4450    = smax(commodity, converter_coefficient(converter_techs,vintage,activity,commodity,"minLoad"));
4451  converter_activityRequirements(converter_techs,vintage,activity,"maxLoad")
4452    = smin(commodity, converter_coefficient(converter_techs,vintage,activity,commodity,"maxLoad"));
4453   
4454  * ==== activate MIP units for MIP dispatch or partial load technologies ====
4455   
4456  set converter_hasMinUptime(converter_techs,vintage);
4457  converter_hasMinUptime(converter_techs,vintage)
4458    $(converter_techParam(converter_techs,vintage,"minUptime")
4459      and converter_techParam(converter_techs,vintage,"mipDispatch"))
4460    = yes;
4461   
4462  set converter_hasMinDowntime(converter_techs,vintage);
4463  converter_hasMinDowntime(converter_techs,vintage)
4464    $(converter_techParam(converter_techs,vintage,"minDowntime")
4465      and converter_techParam(converter_techs,vintage,"mipDispatch"))
4466    = yes;
4467   
4468  * require integer unit counts if online state is to be tracked
4469  converter_techParam(converter_techs,vintage,"mipUnits")
4470      $(converter_techParam(converter_techs,vintage,"mipDispatch")
4471        or converter_hasMinLoad(converter_techs, vintage)
4472        or converter_hasMaxLoad(converter_techs, vintage)
4473        or converter_hasConstantFluxInActivity(converter_techs,vintage))
4474      = 1;
4475   
4476  * ==== floor mip converter units to integer values ====
4477  converter_capacityParam(nodesModelToCalc,yearsToCalc,converter_techs,"unitsLowerLimit")
4478      $sum(vintage, converter_techParam(converter_techs,vintage,"mipUnits"))
4479      = floor(converter_capacityParam(nodesModelToCalc,yearsToCalc,converter_techs,"unitsLowerLimit"));
4480  converter_capacityParam(nodesModelToCalc,yearsToCalc,converter_techs,"unitsUpperLimit")
4481      $sum(vintage, converter_techParam(converter_techs,vintage,"mipUnits"))
4482      = ceil(converter_capacityParam(nodesModelToCalc,yearsToCalc,converter_techs,"unitsUpperLimit"));
4483   
4484  * ==== scalars and sets for minUptime and minDowntime ====
4485   
4486  scalar converter_maxUptimeReq;
4487  converter_maxUptimeReq = smax((converter_techs,vintage), converter_techParam(converter_techs,vintage,"minUptime"));
4488  set uptimeSearchRange(timeModelToCalc);
4489  uptimeSearchRange(timeModelToCalc) = ord(timeModelToCalc) <= converter_maxUptimeReq;
4490   
4491  scalar converter_maxDowntimeReq;
4492  converter_maxDowntimeReq = smax((converter_techs,vintage), converter_techParam(converter_techs,vintage,"minDowntime"));
4493  set downtimeSearchRange(timeModelToCalc);
4494  downtimeSearchRange(timeModelToCalc) = ord(timeModelToCalc) <= converter_maxDowntimeReq;
4495   
4496  * ==== definition of variables ====
4497   
4498  * Initialise variables for unitsBuild
4499  converter_unitsBuild.l(nodesModel,years,converter_techs,vintage)
4500      $converter_availTech(nodesModel,years,converter_techs,vintage)
4501      = converter_capacityParam(nodesModel,years,converter_techs,"unitsBuild");
4502  converter_unitsBuild.lo(nodesModel,yearsToCalc,converter_techs,vintage)
4503      $converter_availTech(nodesModel,yearsToCalc,converter_techs,vintage)
4504      = converter_unitsBuild.l(nodesModel,yearsToCalc,converter_techs,vintage);
4505  converter_unitsBuild.fx(nodesModel,years,converter_techs,vintage)
4506      $converter_capacityParam(nodesModel,years,converter_techs,"noExpansion")
4507      = converter_unitsBuild.l(nodesModel,years,converter_techs,vintage);
4508   
4509  * Initialise variables for unitsDecom
4510  converter_unitsDecom.l(nodesModel,years,converter_techs,vintage)
4511    $(converter_decomTech(nodesModel,years,converter_techs,vintage)
4512      and years.val < sum(yearsToCalc$(ord(yearsToCalc) = 1), yearsToCalc.val))
4513    = sum((years_a,years_aa)$(sameas(years-1, years_aa)
4514                        and years_a.val > years_aa.val - converter_techParam(converter_techs,vintage,'lifeTime')
4515                        and years_a.val <= years.val - converter_techParam(converter_techs,vintage,'lifeTime')
4516                        and converter_availTech(nodesModel,years_a,converter_techs,vintage)),
4517          converter_unitsBuild.l(nodesModel,years_a,converter_techs,vintage));
4518   
4519  converter_unitsDecom.l(nodesModel,yearsToCalc,converter_techs,vintage)
4520    $converter_decomTech(nodesModel,yearsToCalc,converter_techs,vintage)
4521    = sum(years$
4522          (years.val < sum(yearsToCalc_a$(ord(yearsToCalc_a) = 1), yearsToCalc_a.val)
4523            and converter_availTech(nodesModel,years,converter_techs,vintage)
4524            and years.val > sum(years_a$sameas(years_a, yearsToCalc-1), years_a.val) - converter_techParam(converter_techs,vintage,'lifeTime')
4525            and years.val <= yearsToCalc.val - converter_techParam(converter_techs,vintage,'lifeTime')),
4526        converter_unitsBuild.l(nodesModel,years,converter_techs,vintage))
4527      + sum(yearsToCalc_a$
4528          (yearsToCalc_a.val < sum(yearsToCalc_aa$(ord(yearsToCalc_aa) > 1), yearsToCalc_a.val)
4529            and converter_availTech(nodesModel,yearsToCalc_a,converter_techs,vintage)
4530            and yearsToCalc_a.val > sum(years_a$sameas(years_a, yearsToCalc-1), years_a.val) - converter_techParam(converter_techs,vintage,'lifeTime')
4531            and yearsToCalc_a.val <= yearsToCalc.val - converter_techParam(converter_techs,vintage,'lifeTime')),
4532        converter_unitsBuild.l(nodesModel,yearsToCalc_a,converter_techs,vintage));
4533        ;
4534   
4535  converter_unitsDecom.lo(nodesModel,yearsToCalc,converter_techs,vintage)
4536      $(converter_usedTech(nodesModel,yearsToCalc,converter_techs,vintage)
4537          and not converter_techParam(converter_techs,vintage,"freeDecom"))
4538      = converter_unitsDecom.l(nodesModel,yearsToCalc,converter_techs,vintage)
4539   
4540  * Calculate planned unit expansion
4541  parameter converter_unitsPlanned(nodesModel,years,converter_techs,vintage);
4542  converter_unitsPlanned(nodesModel,years,converter_techs,vintage) = 0;
4543  loop(years,
4544    converter_unitsPlanned(nodesModel,years,converter_techs,vintage)
4545      =
4546      converter_unitsPlanned(nodesModel,years-1,converter_techs,vintage)
4547          $converter_usedTech(nodesModel,years-1,converter_techs,vintage)
4548      + converter_unitsBuild.l(nodesModel,years,converter_techs,vintage)
4549          $converter_availTech(nodesModel,years,converter_techs,vintage)
4550      - converter_unitsDecom.l(nodesModel,years,converter_techs,vintage)
4551          $converter_usedTech(nodesModel,years,converter_techs,vintage);
4552  );
4553   
4554  * Set initial state for planned units
4555  converter_unitsTotal.l(nodesModel,years,converter_techs,vintage)
4556    = converter_unitsPlanned(nodesModel,years,converter_techs,vintage)
4557   
4558  * Calculate if planned unit expansion is bounded by upper and lower limits
4559  set converter_unitBoundsFixed(nodesModel,years,converter_techs);
4560  converter_unitBoundsFixed(nodesModel,years,converter_techs)
4561    $(sum(vintage$converter_usedTech(nodesModel,years,converter_techs,vintage),
4562          converter_unitsPlanned(nodesModel,years,converter_techs,vintage))
4563      = converter_capacityParam(nodesModel,years,converter_techs,"unitsUpperLimit")
4564    and sum(vintage$converter_usedTech(nodesModel,years,converter_techs,vintage),
4565          converter_unitsPlanned(nodesModel,years,converter_techs,vintage))
4566      = converter_capacityParam(nodesModel,years,converter_techs,"unitsLowerLimit"))
4567    = yes;
4568   
4569  * Fix unitsBuild, unitsDecom, unitsTotal if levels are predetermined by upper and lower limits
4570  converter_unitsBuild.fx(nodesModel,years,converter_techs,vintage)
4571    $(converter_availTech(nodesModel,years,converter_techs,vintage)
4572      and converter_unitBoundsFixed(nodesModel,years,converter_techs))
4573    = converter_unitsBuild.l(nodesModel,years,converter_techs,vintage);
4574  converter_unitsDecom.fx(nodesModel,years,converter_techs,vintage)
4575    $(converter_usedTech(nodesModel,years,converter_techs,vintage)
4576      and converter_unitBoundsFixed(nodesModel,years,converter_techs))
4577    = converter_unitsDecom.l(nodesModel,years,converter_techs,vintage);
4578  converter_unitsTotal.fx(nodesModel,years,converter_techs,vintage)
4579    $(converter_usedTech(nodesModel,years,converter_techs,vintage)
4580      and converter_unitBoundsFixed(nodesModel,years,converter_techs))
4581    = converter_unitsTotal.l(nodesModel,years,converter_techs,vintage);
4582   
4583  converter_unitsOnline_MIP.up(timeModelToCalc,nodesModel,years,converter_techs,vintage)
4584      $(converter_usedTech(nodesModel,years,converter_techs,vintage)
4585        and converter_techParam(converter_techs,vintage,"mipDispatch") = 1)
4586      = converter_capacityParam(nodesModel,years,converter_techs,"unitsUpperLimit");
4587   
4588  converter_unitsTotal_MIP.up(nodesModel,years,converter_techs,vintage)
4589      $(converter_usedTech(nodesModel,years,converter_techs,vintage)
4590        and converter_techParam(converter_techs,vintage,"mipUnits") = 1)
4591      = converter_capacityParam(nodesModel,years,converter_techs,"unitsUpperLimit");
4592   
4593  converter_unitsUsingActivity_MIP.up(timeModelToCalc,nodesModel,years,converter_techs,vintage,activity)
4594      $(converter_usedTech(nodesModel,years,converter_techs,vintage)
4595        and (converter_hasMinLoad(converter_techs, vintage)
4596              or converter_hasMaxLoad(converter_techs, vintage)))
4597      = converter_capacityParam(nodesModel,years,converter_techs,"unitsUpperLimit");
4598   
4599  * Add parameter for fixing capacities during myopic runs
4600  parameter converter_unitsDelta(nodesModel,years,converter_techs);
4601   
4602  * ==== declaration of equations ====
4603   
4604  equations
4605    Eq_converter_unitsBalance(nodesModel,years,converter_techs,vintage
4606      ) "Ensures the units balance over the planning period."
4607    Eq_converter_unitsFixedDecom(nodesModel,years,converter_techs,vintage
4608      ) "Restricts the fixed decommissioning of units over the planning period."
4609    Eq_converter_unitsFreeDecom(nodesModel,years,converter_techs,vintage
4610      ) "Restricts the free decommissioning of units over the planning period."
4611    Eq_converter_unitsUpperLimit(nodesModel,years,converter_techs
4612      ) "Upper bound for the total number of units."
4613    Eq_converter_unitsLowerLimit(nodesModel,years,converter_techs
4614      ) "Lower bound for the total number of units."
4615    Eq_converter_unitsFixedLimit(nodesModel,years,converter_techs
4616      ) "Fixed bound for the total number of units."
4617    Eq_converter_unitsTotalMIP(nodesModel,years,converter_techs,vintage
4618      ) "Fixes the total number of units to the corresponding integer variable."
4619    Eq_converter_unitsOnlineMIP(timeModel,nodesModel,years,converter_techs,vintage
4620      ) "Fixes the number of online units to the corresponding integer variable."
4621   
4622    Eq_converter_activityLowerLimit(timeModel,nodesModel,years,converter_techs,vintage
4623      ) "Lower limit on the activity."
4624    Eq_converter_activityUpperLimit(timeModel,nodesModel,years,converter_techs,vintage
4625      ) "Upper limit on the activity."
4626   
4627    Eq_converter_activityFixedLimit(timeModel,nodesModel,years,converter_techs,vintage
4628      ) "Fixed limit on the activity."
4629    Eq_converter_rampPos(timeModel,nodesModel,years,converter_techs,vintage
4630      ) "Positive ramping of unit activity."
4631    Eq_converter_rampNeg(timeModel,nodesModel,years,converter_techs,vintage
4632      ) "Negative ramping of unit activity."
4633    Eq_converter_rampLimit(timeModel,nodesModel,years,converter_techs,vintage
4634      ) "Restrict ramping up of unit activity."
4635   
4636    Eq_converter_unitsOnline(timeModel,nodesModel,years,converter_techs,vintage
4637      ) "Set online units to total number of operational units."
4638    Eq_converter_unitsOnlineUC(timeModel,nodesModel,years,converter_techs,vintage
4639      ) "Allow shutting down units."
4640    Eq_converter_activityStartups(timeModel,nodesModel,years,converter_techs,vintage
4641      ) "Variable counting the number of unit startups."
4642    Eq_converter_activityShutdowns(timeModel,nodesModel,years,converter_techs,vintage
4643      ) "Variable tracking the number of unit shutdowns."
4644    Eq_converter_limitStartups(nodesModel,years,converter_techs,vintage
4645      ) "Limit the number of startup cycles a unit can perform."
4646    Eq_converter_minUptime(timeModel,nodesModel,years,converter_techs,vintage
4647      ) "Require recently started units to remain online for their respective minimum uptime."
4648    Eq_converter_minDowntime(timeModel,nodesModel,years,converter_techs,vintage
4649      ) "Require recently shut down units to remain offline for their respective minimum downtime."
4650    Eq_converter_activityUpperLimitDetailedPartLoadMinReq(timeModel,nodesModel,years,converter_techs,vintage,activity
4651      ) "Limit activity coefficients of activities with a given load requirement or stricter to the number of units in such modes."
4652    Eq_converter_activityUpperLimitDetailedPartLoadMaxReq(timeModel,nodesModel,years,converter_techs,vintage,activity
4653      ) "Limit activity coefficients of activities with a given load requirement or stricter to the number of units in such modes."
4654    Eq_converter_activityLowerLimitDetailedPartLoadMinReq(timeModel,nodesModel,years,converter_techs,vintage,activity
4655      ) "Enforce sufficient activity coefficients of activities to justify all active modes."
4656    Eq_converter_noOnlineIdle(timeModel,nodesModel,years,converter_techs,vintage
4657      ) "Prevent the circumvention of requirements by keeping units online without using any modes."
4658    Eq_converter_noOnlineIdleDetailedPartLoad(timeModel,nodesModel,years,converter_techs,vintage
4659      ) "Prevent the circumvention of requirements by keeping units online without using any modes. Allow more than one mode activation per unit."
4660    Eq_converter_activityUpperLimitPartLoad(timeModel,nodesModel,years,converter_techs,vintage,activity
4661      ) "Limit usage of an activity to corresponding units."
4662    Eq_converter_activityLowerLimitPartLoad(timeModel,nodesModel,years,converter_techs,vintage,activity
4663      ) "Limit usage of an activity to corresponding units."
4664    Eq_converter_activityModeLimit(timeModel,nodesModel,years,converter_techs,vintage,activity
4665      ) "Limit the number of units in one particular mode to the number of operational units."
4666    ;
4667   
4668  * ==== equation definition ====
4669  * // ## Equations
4670  * // ### Converter Units Balance
4671  * // Ensures that the total units are consistent with the built and decommissioned units.
4672  * // {Eq_converter_unitsBalance}
4673  Eq_converter_unitsBalance(nodesModelSel,yearsSel,converter_techs,vintage)
4674      $((converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
4675            or sum(years$sameas(years,yearsSel), converter_usedTech(nodesModelSel,years-1,converter_techs,vintage)))
4676          and not converter_unitBoundsFixed(nodesModelSel,yearsSel,converter_techs))
4677      ..
4678      converter_unitsTotal(nodesModelSel,yearsSel,converter_techs,vintage)
4679      =e=
4680      sum(yearsToCalc$(ord(yearsToCalc) = 1 and sameas(yearsToCalc, yearsSel)),
4681        sum(years$sameas(years, yearsToCalc),
4682          converter_unitsTotal(nodesModelSel,years-1,converter_techs,vintage)
4683            $converter_usedTech(nodesModelSel,years-1,converter_techs,vintage)))
4684      + sum((yearsToCalc)$(ord(yearsToCalc) > 1 and sameas(yearsToCalc, yearsSel)),
4685        converter_unitsTotal(nodesModelSel,yearsToCalc-1,converter_techs,vintage)
4686          $converter_usedTech(nodesModelSel,yearsToCalc-1,converter_techs,vintage))
4687      + converter_unitsBuild(nodesModelSel,yearsSel,converter_techs,vintage)
4688          $converter_availTech(nodesModelSel,yearsSel,converter_techs,vintage)
4689      - converter_unitsDecom(nodesModelSel,yearsSel,converter_techs,vintage)
4690          $converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage);
4691   
4692  * // ### Converter Units Fixed Decommission
4693  * // Restricts the fixed decommissioning of units over the planning period.
4694  * // {Eq_converter_unitsFixedDecom}
4695  Eq_converter_unitsFixedDecom(nodesModelSel,yearsSel,converter_techs,vintage)
4696      $(converter_decomTech(nodesModelSel,yearsSel,converter_techs,vintage)
4697          and not converter_techParam(converter_techs,vintage,"freeDecom") = 1
4698          and not converter_unitBoundsFixed(nodesModelSel,yearsSel,converter_techs))
4699      ..
4700      converter_unitsDecom(nodesModelSel,yearsSel,converter_techs,vintage)
4701      =e=
4702      sum(years$
4703          (converter_availTech(nodesModelSel,years,converter_techs,vintage)
4704            and years.val > sum(yearsToCalc$sameas(yearsToCalc+1, yearsSel), yearsToCalc.val) - converter_techParam(converter_techs,vintage,'lifeTime')
4705            and years.val <= yearsSel.val - converter_techParam(converter_techs,vintage,'lifeTime')),
4706        converter_unitsBuild(nodesModelSel,years,converter_techs,vintage));
4707   
4708  * // ### Converter Units Free Decommission
4709  * // Restricts the free decommissioning of units over the planning period.
4710  * // {Eq_converter_unitsFreeDecom}
4711  Eq_converter_unitsFreeDecom(nodesModelSel,yearsSel,converter_techs,vintage)
4712      $((converter_decomTech(nodesModelSel,yearsSel,converter_techs,vintage)
4713          or converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage))
4714          and converter_techParam(converter_techs,vintage,"freeDecom") = 1)
4715      ..
4716      sum(years$
4717            ((converter_decomTech(nodesModelSel,years,converter_techs,vintage)
4718              or converter_usedTech(nodesModelSel,years,converter_techs,vintage))
4719              and years.val < sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)),
4720          converter_unitsDecom(nodesModelSel,years,converter_techs,vintage))
4721      + sum(yearsToCalc$
4722            ((converter_decomTech(nodesModelSel,yearsToCalc,converter_techs,vintage)
4723              or converter_usedTech(nodesModelSel,yearsToCalc,converter_techs,vintage))
4724              and yearsToCalc.val >= sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
4725              and yearsToCalc.val <= yearsSel.val),
4726          converter_unitsDecom(nodesModelSel,yearsToCalc,converter_techs,vintage))
4727      =g=
4728      sum(years$
4729            (converter_availTech(nodesModelSel,years,converter_techs,vintage)
4730              and years.val < sum(yearsToCalc$(ord(yearsToCalc)=1), yearsToCalc.val) - converter_techParam(converter_techs,vintage,'lifeTime')),
4731          converter_unitsBuild(nodesModelSel,years,converter_techs,vintage))
4732      + sum(yearsToCalc$
4733            (converter_availTech(nodesModelSel,yearsToCalc,converter_techs,vintage)
4734              and yearsToCalc.val >= sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
4735              and yearsToCalc.val <= yearsSel.val - converter_techParam(converter_techs,vintage,'lifeTime')),
4736          converter_unitsBuild(nodesModelSel,yearsToCalc,converter_techs,vintage));
4737   
4738  * // ### Converter Units Upper Limit
4739  * // Upper bound for the total number of units.
4740  * // {Eq_converter_unitsUpperLimit}
4741  Eq_converter_unitsUpperLimit(nodesModelSel,yearsSel,converter_techs)
4742      $(converter_capacityParam(nodesModelSel,yearsSel,converter_techs,'unitsUpperLimit') >= 0
4743          and converter_capacityParam(nodesModelSel,yearsSel,converter_techs,'unitsUpperLimit') < +inf
4744          and converter_capacityParam(nodesModelSel,yearsSel,converter_techs,'unitsUpperLimit')
4745              <> converter_capacityParam(nodesModelSel,yearsSel,converter_techs,'unitsLowerLimit'))
4746      ..
4747      sum(vintage$converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage),
4748          converter_unitsTotal(nodesModelSel,yearsSel,converter_techs,vintage))
4749      =l=
4750      converter_capacityParam(nodesModelSel,yearsSel,converter_techs,"unitsUpperLimit");
4751   
4752  * // ### Converter Units Lower Limit
4753  * // Lower bound for the total number of units.
4754  * // {Eq_converter_unitsLowerLimit}
4755  Eq_converter_unitsLowerLimit(nodesModelSel,yearsSel,converter_techs)
4756      $(converter_capacityParam(nodesModelSel,yearsSel,converter_techs,'unitsLowerLimit') > 0
4757          and converter_capacityParam(nodesModelSel,yearsSel,converter_techs,'unitsLowerLimit')
4758              <> converter_capacityParam(nodesModelSel,yearsSel,converter_techs,'unitsUpperLimit'))
4759      ..
4760      sum(vintage$converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage),
4761          converter_unitsTotal(nodesModelSel,yearsSel,converter_techs,vintage))
4762      =g=
4763      converter_capacityParam(nodesModelSel,yearsSel,converter_techs,"unitsLowerLimit");
4764   
4765  Eq_converter_unitsFixedLimit(nodesModelSel,yearsSel,converter_techs)
4766      $(converter_capacityParam(nodesModelSel,yearsSel,converter_techs,'unitsLowerLimit')
4767          = converter_capacityParam(nodesModelSel,yearsSel,converter_techs,'unitsUpperLimit'))
4768      ..
4769      sum(vintage$converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage),
4770          converter_unitsTotal(nodesModelSel,yearsSel,converter_techs,vintage))
4771      =e=
4772      converter_capacityParam(nodesModelSel,yearsSel,converter_techs,"unitsUpperLimit");
4773   
4774  * // ### Converter Units Total MIP
4775  * // Fixes the total number of units to the corresponding integer variable.
4776  * // {Eq_converter_unitsTotalMIP}
4777  Eq_converter_unitsTotalMIP(nodesModelSel,yearsSel,converter_techs,vintage)
4778      $( converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
4779          and converter_techParam(converter_techs,vintage,"mipUnits") = 1 )
4780      ..
4781      converter_unitsTotal(nodesModelSel,yearsSel,converter_techs,vintage)
4782      =e=
4783      converter_unitsTotal_MIP(nodesModelSel,yearsSel,converter_techs,vintage);
4784   
4785  * // ### Converter Units Online MIP
4786  * // Fixes the number of online units to the corresponding integer variable.
4787  * // {Eq_converter_unitsOnlineMIP}
4788  Eq_converter_unitsOnlineMIP(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
4789      $( converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
4790          and converter_techParam(converter_techs,vintage,"mipDispatch") = 1 )
4791      ..
4792      converter_unitsOnline(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
4793      =e=
4794      converter_unitsOnline_MIP(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage);
4795   
4796  * // ### Converter Activity Lower Limit
4797  * // Lower limit on the activity.
4798  * // {Eq_converter_activityLowerLimit}
4799  Eq_converter_activityLowerLimit(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
4800      $(converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
4801          and converter_activityProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,"lower") > 0
4802          and converter_activityProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,"lower")
4803               <> converter_activityProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,"upper")
4804          and not converter_hasMinLoad(converter_techs, vintage))
4805      ..
4806      sum(activity$converter_usedAct(converter_techs,vintage,activity),
4807          converter_activity(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity)
4808      )
4809      =g=
4810      converter_activityProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,"lower")
4812      * converter_unitsOnline(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage);
4814   
4815  * // ### Converter Activity Upper Limit
4816  * // Upper limit on the activity.
4817  * // {Eq_converter_activityUpperLimit}
4818  Eq_converter_activityUpperLimit(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
4819      $(converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
4820          and converter_activityProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,"upper") >= 0
4821          and converter_activityProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,"upper")
4822               <> converter_activityProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,"lower"))
4823      ..
4824      sum(activity$converter_usedAct(converter_techs,vintage,activity),
4825          converter_activity(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity)
4826      )
4827      =l=
4828      converter_activityProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,"upper")
4830      * converter_unitsOnline(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage);
4832   
4833  Eq_converter_activityFixedLimit(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
4834      $(converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
4835          and converter_activityProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,"lower")
4836               = converter_activityProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,"upper"))
4837      ..
4838      sum(activity$converter_usedAct(converter_techs,vintage,activity),
4839          converter_activity(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity)
4840      )
4841      =e=
4842      converter_activityProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,"upper")
4844      * converter_unitsOnline(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage);
4846   
4847  * // ### Converter Positive Ramping
4848  * // Positive ramping of unit activity.
4849  * // {Eq_converter_rampPos}
4850  Eq_converter_rampPos(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,converter_techs,vintage)
4851    $( converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
4852        and converter_useRampPos(nodesModelSel,yearsSel,converter_techs,vintage))
4853      ..
4854      converter_rampPos(timeModelToCalc,nodesModelSel,yearsSel,converter_techs,vintage)
4855      =g=
4856      sum(activity$converter_usedAct(converter_techs,vintage,activity),
4857              converter_activity(timeModelToCalc,nodesModelSel,yearsSel,converter_techs,vintage,activity)
4858              - converter_activity(timeModelToCalc--1,nodesModelSel,yearsSel,converter_techs,vintage,activity));
4859   
4860  * // ### Converter Negative Ramping
4861  * // Negative ramping of unit activity.
4862  * // {Eq_converter_rampNeg}
4863  Eq_converter_rampNeg(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,converter_techs,vintage)
4864    $( converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
4865        and converter_useRampNeg(nodesModelSel,yearsSel,converter_techs,vintage))
4866      ..
4867      converter_rampNeg(timeModelToCalc,nodesModelSel,yearsSel,converter_techs,vintage)
4868      =g=
4869      - sum(activity$converter_usedAct(converter_techs,vintage,activity),
4870              converter_activity(timeModelToCalc,nodesModelSel,yearsSel,converter_techs,vintage,activity)
4871              - converter_activity(timeModelToCalc--1,nodesModelSel,yearsSel,converter_techs,vintage,activity));
4872   
4873  * // ### Converter Ramping Limit
4874  * // Restrict ramping up of unit activity.
4875  * // {Eq_converter_rampLimit}
4876  Eq_converter_rampLimit(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,converter_techs,vintage)
4877    $( converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
4878          and converter_techParam(converter_techs,vintage,"activityRampLimit") > 0)
4879      ..
4880      sum(activity$converter_usedAct(converter_techs,vintage,activity),
4881              converter_activity(timeModelToCalc,nodesModelSel,yearsSel,converter_techs,vintage,activity)
4882              - converter_activity(timeModelToCalc--1,nodesModelSel,yearsSel,converter_techs,vintage,activity))
4883    =l=
4884    converter_techParam(converter_techs,vintage,"activityRampLimit")
4886      * converter_unitsOnline(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage);
4888   
4889   
4891   
4892  * // ### Converter MIP Units Online
4893  * // Restrict ramping up of unit activity.
4894  * // {Eq_converter_unitsOnline}
4895  Eq_converter_unitsOnline(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
4896      $( converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
4897          and converter_techParam(converter_techs,vintage,"mipDispatch") = 0 )
4898    ..
4899    converter_unitsOnline(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
4900    =e=
4901    converter_unitsTotal(nodesModelSel,yearsSel,converter_techs,vintage)
4902      ;
4903   
4904  * // ### Converter MIP Units Shutting Down
4905  * // Allow shutting down units.
4906  * // {Eq_converter_unitsOnlineUC}
4907  Eq_converter_unitsOnlineUC(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
4908      $( converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
4909          and converter_techParam(converter_techs,vintage,"mipDispatch") = 1 )
4910    ..
4911    converter_unitsOnline(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
4912    =l=
4913    converter_unitsTotal(nodesModelSel,yearsSel,converter_techs,vintage)
4914      ;
4916   
4917  * // ### Converter Activity Startups
4918  * // Variable counting the number of unit startups.
4919  * // {Eq_converter_activityStartups}
4920  Eq_converter_activityStartups(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,converter_techs,vintage)
4921    $( converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
4922          and converter_techParam(converter_techs,vintage,"mipDispatch") = 1 )
4923      ..
4924      converter_unitStartups(timeModelToCalc,nodesModelSel,yearsSel,converter_techs,vintage)
4925      =g=
4926          converter_unitsOnline(timeModelToCalc,nodesModelSel,yearsSel,converter_techs,vintage)
4927      - converter_unitsOnline(timeModelToCalc--1,nodesModelSel,yearsSel,converter_techs,vintage);
4928   
4929  * // ### Converter Activity Shutdowns
4930  * // Variable tracking the number of unit shutdowns.
4931  * // {Eq_converter_activityShutdowns}
4932  Eq_converter_activityShutdowns(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,converter_techs,vintage)
4933    $( converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
4934          and converter_techParam(converter_techs,vintage,"mipDispatch") = 1
4935          and converter_techParam(converter_techs,vintage,"minDowntime") > 0)
4936      ..
4937      converter_unitShutdowns(timeModelToCalc,nodesModelSel,yearsSel,converter_techs,vintage)
4938      =g=
4939          converter_unitsOnline(timeModelToCalc--1,nodesModelSel,yearsSel,converter_techs,vintage)
4940      - converter_unitsOnline(timeModelToCalc,nodesModelSel,yearsSel,converter_techs,vintage);
4941   
4942  * // ### Converter Activity Startup Limit
4943  * // Limit the number of startup cycles a unit can perform.
4944  * // {Eq_converter_limitStartups}
4945  Eq_converter_limitStartups(nodesModelSel,yearsSel,converter_techs,vintage)
4946    $( converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
4947          and converter_techParam(converter_techs,vintage,"mipDispatch") = 1
4948      and converter_techParam(converter_techs,vintage,"startupLimit") > 0)
4949      ..
4950      sum(timeModelToCalc, converter_unitStartups(timeModelToCalc,nodesModelSel,yearsSel,converter_techs,vintage))
4951    =l=
4952    converter_techParam(converter_techs,vintage,"startupLimit")
4953    * converter_unitsTotal(nodesModelSel,yearsSel,converter_techs,vintage);
4954   
4955  alias(timeModelToCalc,ttc);
4956   
4957  * // ### Converter Units Minimum Uptime
4958  * // Require recently started units to remain online for their respective minimum uptime.
4959  * // {Eq_converter_minUptime}
4960  Eq_converter_minUptime(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,converter_techs,vintage)
4961    $( converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
4962          and converter_techParam(converter_techs,vintage,"mipDispatch") = 1
4963      and converter_techParam(converter_techs,vintage,"minUptime") > 0)
4964      ..
4965      sum(ttc$[uptimeSearchRange(ttc) and ord(ttc)<=converter_techParam(converter_techs,vintage,"minUptime")],
4966          converter_unitStartups(ttc+[ord(timeModelToCalc)-converter_techParam(converter_techs,vintage,"minUptime")],
4967              nodesModelSel,yearsSel,converter_techs,vintage))
4968          =l=
4969          converter_unitsOnline(timeModelToCalc,nodesModelSel,yearsSel,converter_techs,vintage);
4970   
4971  * // ### Converter Units Minimum Downtime
4972  * // Require recently shut down units to remain offline for their respective minimum downtime.
4973  * // {Eq_converter_minDowntime}
4974  Eq_converter_minDowntime(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,converter_techs,vintage)
4975    $( converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
4976          and converter_techParam(converter_techs,vintage,"mipDispatch") = 1
4977      and converter_techParam(converter_techs,vintage,"minDowntime") > 0)
4978      ..
4979      sum(ttc$[downtimeSearchRange(ttc) and ord(ttc)<=converter_techParam(converter_techs,vintage,"minDowntime")],
4980          converter_unitShutdowns(ttc+[ord(timeModelToCalc)-converter_techParam(converter_techs,vintage,"minDowntime")],
4981              nodesModelSel,yearsSel,converter_techs,vintage))
4982          =l=
4983          converter_unitsTotal(nodesModelSel,yearsSel,converter_techs,vintage)
4984      - converter_unitsOnline(timeModelToCalc,nodesModelSel,yearsSel,converter_techs,vintage);
4985   
4986  * This equation is meant to cause the units to activate particular mode counters to gain access to the corresponding activities.
4987  * Activities are allowed to be used on units with stricter activity requirements but not the other way around.
4988  alias(activity, act);
4989   
4990  * // ### Converter MIP Units Activity Upper Limit Minimum Required Load
4991  * // Limit activity coefficients of activities with a given load requirement or stricter to the number of units in such modes.
4992  * // {Eq_converter_activityUpperLimitDetailedPartLoadMinReq}
4993  Eq_converter_activityUpperLimitDetailedPartLoadMinReq(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity)
4994    $( converter_usedTechAct(nodesModelSel,yearsSel,converter_techs,vintage,activity)
4995          and converter_hasMinLoad(converter_techs, vintage)
4996          and converter_techParam(converter_techs,vintage,"mipDetailedPartialLoad"))
4997      ..
4998      sum(act$(converter_activityRequirements(converter_techs,vintage,act,"minLoad")
4999                  >= converter_activityRequirements(converter_techs,vintage,activity,"minLoad")
5000               and converter_usedAct(converter_techs,vintage,act)),
5001      converter_activity(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,act))
5002    =l=
5003    converter_activityProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,"upper")
5004      * sum(act$(converter_activityRequirements(converter_techs,vintage,act,"minLoad")
5005                  >= converter_activityRequirements(converter_techs,vintage,activity,"minLoad")
5006                 and converter_usedAct(converter_techs,vintage,act)),
5007      converter_unitsUsingActivity_MIP(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,act));
5008   
5009  * // ### Converter MIP Units Activity Upper Limit Maximum Required Load
5010  * // Limit activity coefficients of activities with a given load requirement or stricter to the number of units in such modes.
5011  * // {Eq_converter_activityUpperLimitDetailedPartLoadMaxReq}
5012  Eq_converter_activityUpperLimitDetailedPartLoadMaxReq(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity)
5013    $( converter_usedTechAct(nodesModelSel,yearsSel,converter_techs,vintage,activity)
5014          and converter_hasMaxLoad(converter_techs,vintage)
5015          and converter_techParam(converter_techs,vintage,"mipDetailedPartialLoad"))
5016      ..
5017      sum(act$(converter_activityRequirements(converter_techs,vintage,act,"maxLoad")
5018                  <= converter_activityRequirements(converter_techs,vintage,activity,"maxLoad")
5019               and converter_usedAct(converter_techs,vintage,act)),
5020      converter_activity(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,act))
5021    =l=
5022      sum(act$(converter_activityRequirements(converter_techs,vintage,act,"maxLoad")
5023                  <= converter_activityRequirements(converter_techs,vintage,activity,"maxLoad")
5024               and converter_usedAct(converter_techs,vintage,act)),
5025      min(converter_activityRequirements(converter_techs,vintage,act,"maxLoad"),
5026            converter_activityProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,"upper"))
5027            * converter_unitsUsingActivity_MIP(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,act));
5028   
5029  * This equation is meant to enforce the lower limit requirements of activities in use.
5030  * Loads produced by activities with less strict requirements can contribute to the minimum load requirement of strict activities but not the other way around,
5031  * because these activities can only run on units in the respectively strict activation state.
5032   
5033  * // ### Converter MIP Units Activity Lower Limit Minimum Required Load
5034  * // Enforce sufficient activity coefficients of activities to justify all active modes.
5035  * // {Eq_converter_activityLowerLimitDetailedPartLoadMinReq}
5036  Eq_converter_activityLowerLimitDetailedPartLoadMinReq(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity)
5037    $( converter_usedTechAct(nodesModelSel,yearsSel,converter_techs,vintage,activity)
5038          and converter_hasMinLoad(converter_techs, vintage)
5039          and converter_techParam(converter_techs,vintage,"mipDetailedPartialLoad"))
5040      ..
5041      sum(act$(converter_activityRequirements(converter_techs,vintage,act,"minLoad")
5042                  <= converter_activityRequirements(converter_techs,vintage,activity,"minLoad")
5043               and converter_usedAct(converter_techs,vintage,act)),
5044      converter_activity(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,act))
5045    =g=
5046      sum(act$(converter_activityRequirements(converter_techs,vintage,act,"minLoad")
5047                  <= converter_activityRequirements(converter_techs,vintage,activity,"minLoad")
5048               and converter_usedAct(converter_techs,vintage,act)),
5049      max(converter_activityRequirements(converter_techs,vintage,act,"minLoad"),
5050            converter_activityProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,"lower"))
5051            * converter_unitsUsingActivity_MIP(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,act));
5052   
5053   
5054  * Simple one-activity-per-unit partial load equations
5055  * // ### Converter MIP Units Activity Upper Limit Partial Load Balance
5056  * // Enforce MIP units partial load upper limit.
5057  * // {Eq_converter_activityUpperLimitPartLoad}
5058  Eq_converter_activityUpperLimitPartLoad(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity)
5059    $( converter_usedTechAct(nodesModelSel,yearsSel,converter_techs,vintage,activity)
5060          and (converter_hasMinLoad(converter_techs, vintage)
5061                or converter_hasMaxLoad(converter_techs, vintage)
5062                or converter_hasConstantFluxInActivity(converter_techs, vintage))
5063          and not converter_techParam(converter_techs,vintage,"mipDetailedPartialLoad"))
5064      ..
5065      converter_activity(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity)
5066    =l=
5067    min(converter_activityRequirements(converter_techs,vintage,activity,"maxLoad"),
5068          converter_activityProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,"upper"))
5069          * converter_unitsUsingActivity_MIP(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity);
5070   
5071  * // ### Converter MIP Units Activity Lower Limit Partial Load Balance
5072  * // Enforce MIP units partial load lower limit.
5073  * // {Eq_converter_activityLowerLimitPartLoad}
5074  Eq_converter_activityLowerLimitPartLoad(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity)
5075    $( converter_usedTechAct(nodesModelSel,yearsSel,converter_techs,vintage,activity)
5076          and (converter_hasMinLoad(converter_techs, vintage)
5077                or converter_hasMaxLoad(converter_techs, vintage))
5078          and not converter_techParam(converter_techs,vintage,"mipDetailedPartialLoad"))
5079      ..
5080      converter_activity(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity)
5081    =g=
5082    max(converter_activityRequirements(converter_techs,vintage,activity,"minLoad"),
5083          converter_activityProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,"lower"))
5084          * converter_unitsUsingActivity_MIP(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity);
5085   
5086  * // ### Converter MIP Units Idle Online Units
5087  * // Counts idle online units at every time step
5088  * // {Eq_converter_noOnlineIdle}
5089  Eq_converter_noOnlineIdle(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
5090    $( converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
5091          and (converter_hasMinLoad(converter_techs, vintage)
5092              or converter_hasMaxLoad(converter_techs, vintage)
5093              or converter_hasConstantFluxInActivity(converter_techs,vintage))
5094          and not converter_techParam(converter_techs,vintage,"mipDetailedPartialLoad"))
5095      ..
5096      converter_unitsOnline(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
5097      =e=
5098      sum(activity$converter_usedAct(converter_techs,vintage,activity),
5099            converter_unitsUsingActivity_MIP(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity));
5100   
5101  * // ### Converter MIP Units Idle Online Units Partial load
5102  * // Counts idle online units at every time step
5103  * // {Eq_converter_noOnlineIdleDetailedPartLoad}
5104  Eq_converter_noOnlineIdleDetailedPartLoad(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
5105    $( converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
5106          and (converter_hasMinLoad(converter_techs, vintage)
5107                  or converter_hasMaxLoad(converter_techs, vintage))
5108          and converter_techParam(converter_techs,vintage,"mipDetailedPartialLoad"))
5109      ..
5110      converter_unitsOnline(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
5111      =l=
5112      sum(activity$converter_usedAct(converter_techs,vintage,activity),
5113            converter_unitsUsingActivity_MIP(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity));
5114   
5115  * // ### Converter MIP activity model limit
5116  * // Converter activity model limit
5117  * // {Eq_converter_activityModeLimit}
5118  Eq_converter_activityModeLimit(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity)
5119    $( converter_usedTechAct(nodesModelSel,yearsSel,converter_techs,vintage,activity)
5120          and (converter_hasMinLoad(converter_techs, vintage)
5121                or converter_hasMaxLoad(converter_techs, vintage))
5122          and converter_techParam(converter_techs,vintage,"mipDetailedPartialLoad"))
5123      ..
5124      converter_unitsOnline(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
5125      =g=
5126      converter_unitsUsingActivity_MIP(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity);
5127   
5128  * ==== model definition ====
5129   
5130  Model M_converter
5131  /
5132    Eq_converter_unitsBalance
5133    Eq_converter_unitsFixedDecom
5134    Eq_converter_unitsFreeDecom
5135    Eq_converter_unitsUpperLimit
5136    Eq_converter_unitsLowerLimit
5137    Eq_converter_unitsFixedLimit
5138    Eq_converter_unitsTotalMIP
5139    Eq_converter_unitsOnlineMIP
5140    Eq_converter_activityUpperLimit
5141    Eq_converter_activityLowerLimit
5142    Eq_converter_activityFixedLimit
5143    Eq_converter_rampPos
5144    Eq_converter_rampNeg
5145    Eq_converter_rampLimit
5147    Eq_converter_unitsOnline
5148    Eq_converter_unitsOnlineUC
5150    Eq_converter_activityStartups
5151    Eq_converter_activityShutdowns
5152    Eq_converter_limitStartups
5153    Eq_converter_minUptime
5154    Eq_converter_minDowntime
5155    Eq_converter_activityUpperLimitDetailedPartLoadMinReq
5156    Eq_converter_activityUpperLimitDetailedPartLoadMaxReq
5157    Eq_converter_activityLowerLimitDetailedPartLoadMinReq
5158    Eq_converter_activityUpperLimitPartLoad
5159    Eq_converter_activityLowerLimitPartLoad
5160    Eq_converter_noOnlineIdle
5161    Eq_converter_noOnlineIdleDetailedPartLoad
5162    Eq_converter_activityModeLimit
5163  /;
INCLUDE    C:\Local\REMix\framework\remix\framework\model\source\core\storage.gms
5165  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
5166  * SPDX-License-Identifier: BSD-3-Clause
5167   
5168  * // # core_storage
5169  * // The equations in this file describe the storages in the model.
5170   
5171  * // ## Variables
5172  * // {special_table_storage_variables}
5474   
5475   
5476  * === SoC mappings ===
5477  set storage_usedTechSoCState(storage_techs,vintage,soc_statesIn);
5478  storage_usedTechSoCState(storage_techs,vintage,soc_states(soc_statesIn))
5479      $(storage_SoCParam(storage_techs,vintage,soc_states,"eRate") > 0
5480        and storage_SoCParam(storage_techs,vintage,soc_states,"cRate") > 0)
5481      = yes;
5482   
5483  set storage_validSoCRange(storage_techs,vintage);
5484  storage_validSoCRange(storage_techs,vintage)
5485      = smax(soc_states$storage_usedTechSoCState(storage_techs,vintage,soc_states), storage_SoCParam(storage_techs,vintage,soc_states,"SoC")) = 1
5486        and smin(soc_states$storage_usedTechSoCState(storage_techs,vintage,soc_states), storage_SoCParam(storage_techs,vintage,soc_states,"SoC")) = 0;
5487   
5488  * === Translate SoC parameters to ordered SoC-set ===
5489  * set ordered_socs / soc1*soc20 /;
5490  * alias(soc_states, soc_states_c);
5491  * parameter storage_SoCParam_ordered(storage_techs,vintage,ordered_socs,pc_storage_SoCParam);
5492  * storage_SoCParam_ordered(storage_techs,vintage,ordered_socs,pc_storage_SoCParam)
5493  *     $storage_validSoCRange(storage_techs,vintage)
5494  *     = sum(soc_states$(ord(ordered_socs) = sum(soc_states_c$(storage_SoCParam(storage_techs,vintage,soc_states_c,"SoC") <= storage_SoCParam(storage_techs,vintage,soc_states,"SoC")
5495  *                                                            and storage_usedTechSoCState(storage_techs,vintage,soc_states_c)), 1)
5496  *                       and storage_usedTechSoCState(storage_techs,vintage,soc_states)),
5497  *           storage_SoCParam(storage_techs,vintage,soc_states,pc_storage_SoCParam));
5498  *
5499  * set storage_usedTechSoCStateOrdered(storage_techs,vintage,ordered_socs);
5500  * storage_usedTechSoCStateOrdered(storage_techs,vintage,ordered_socs)
5501  *     $(storage_SoCParam_ordered(storage_techs,vintage,ordered_socs,"eRate") > 0
5502  *       and storage_SoCParam_ordered(storage_techs,vintage,ordered_socs,"cRate") > 0)
5503  *     = yes;
5504   
5505  parameter storage_bigM(storage_techs,vintage);
5506  storage_bigM(storage_techs,vintage) = smax((nodesModel,years), storage_reservoirParam(nodesModel,years,storage_techs,"unitsUpperLimit"));
5507  storage_bigM(storage_techs,vintage)$(storage_bigM(storage_techs,vintage) = INF) = 10000;
5508  storage_bigM(storage_techs,vintage)$(storage_bigM(storage_techs,vintage) = 0) = 10000;
5509   
5510  * === calculate the number of years represented by single year to calc ===
5511  alias(yearsToCalc, yearsToCalc_a)
5512  parameter representedYears(years);
5513  representedYears(years) = 0.5 *(smin(yearsToCalc$(yearsToCalc.val > years.val or yearsToCalc.val = smax(yearsToCalc_a, yearsToCalc_a.val)), yearsToCalc.val)
5514                                  - smax(yearsToCalc$(yearsToCalc.val < years.val or yearsToCalc.val = smin(yearsToCalc_a, yearsToCalc_a.val)), yearsToCalc.val));
5515   
5516  * ==== calculation of mappings ====
5517   
5518  * Technologies with a lifeTime > 0 are available
5519  set storage_availTech(nodesModel,years,storage_techs,vintage);
5520  storage_availTech(nodesModel,years,storage_techs,vintage)
5521      $(vintage.val = smax(vintage_a$(vintage_a.val <= years.val
5522          and storage_techParam(storage_techs,vintage_a,"lifeTime") > 0), vintage_a.val)) = yes;
5523   
5524  * Technologies to optimize become unavailable if they have an unitsUpperLimit of 0
5525  storage_availTech(nodesModel,years,storage_techs,vintage)
5526      $(yearsToCalc(years) and storage_reservoirParam(nodesModel,years,storage_techs,"unitsUpperLimit") = 0 ) = no;
5527   
5528  * Technologies already built become unavailable if they have an unitsBuild of 0
5529  storage_availTech(nodesModel,years,storage_techs,vintage)
5530      $( ( not yearsToCalc(years)) and storage_reservoirParam(nodesModel,years,storage_techs,"unitsBuild") = 0 ) = no;
5531   
5532  * Used technologies are available technologies over their technical lifeTime
5533  set storage_usedTech(nodesModel,years,storage_techs,vintage);
5534  storage_usedTech(nodesModel,years,storage_techs,vintage)
5535      $(vintage.val <= years.val
5536          and years.val < smax(years_a$storage_availTech(nodesModel,years_a,storage_techs,vintage),
5537                                              years_a.val + storage_techParam(storage_techs,vintage,"lifeTime"))
5538          ) = yes;
5539   
5540  * Technologies have to be decomissioned in the interval of first avail + lifetime to last avail + lifetime
5541  set storage_decomTech(nodesModel,years,storage_techs,vintage);
5542  storage_decomTech(nodesModel,years,storage_techs,vintage)
5543    $(sum(years_a$storage_usedTech(nodesModel,years_a,storage_techs,vintage), 1)
5544      and sum(yearsToCalc
5545        $(sameas(years, yearsToCalc)
5546          and yearsToCalc.val >= smin(years_a$storage_availTech(nodesModel,years_a,storage_techs,vintage), years_a.val) + storage_techParam(storage_techs,vintage,"lifeTime")
5547          and yearsToCalc.val <= smax(years_a$storage_availTech(nodesModel,years_a,storage_techs,vintage), years_a.val) + storage_techParam(storage_techs,vintage,"lifeTime")), 1))
5548    = yes;
5549   
5550  * Extend the decom frame to the year after the last year of usedTech
5551  storage_decomTech(nodesModel,yearsToCalc,storage_techs,vintage)
5552    $(storage_usedTech(nodesModel,yearsToCalc-1,storage_techs,vintage)
5553      and storage_decomTech(nodesModel,yearsToCalc-1,storage_techs,vintage))
5554    = yes;
5555   
5556  * Mapping for used commodities
5557  set storage_usedCom(storage_techs,vintage,commodity);
5558  option storage_usedCom < storage_sizeParam;
5559   
5560  set storage_usedTechCom(nodesModel,years,storage_techs,vintage,commodity);
5561  storage_usedTechCom(nodesModel,years,storage_techs,vintage,commodity)
5562      $(storage_usedTech(nodesModel,years,storage_techs,vintage)
5563          and storage_usedCom(storage_techs,vintage,commodity))
5564      = yes;
5565   
5566   
5567  * // ## Load units from gdx file
5569   
5570  * ==== aggregation of profiles ====
5571  * derive upper and lower profiles then aggregate
5572  set storage_level_hasProfileIn(nodesData,years,storage_techs,pc_storage_levelProfile);
5573  option storage_level_hasProfileIn < storage_levelProfileIn;
5574   
5575  set storage_level_hasProfile(nodesModel,years,storage_techs,pc_storage_levelProfile);
5576  storage_level_hasProfile(nodesModelToCalc,yearsToCalc,storage_techs,pc_storage_levelProfile)
5577      = sum(nodesData$aggregateNodesModel(nodesData,nodesModelToCalc),
5578              storage_level_hasProfileIn(nodesData,yearsToCalc,storage_techs,pc_storage_levelProfile));
5579   
5580  * weighted average for a real sum of units upper limits, plain average if one region has an upper limit of inf
5581  parameter storage_levelProfile(timeModel,nodesModel,years,storage_techs,vintage,pc_storage_levelProfile);
5582  storage_levelProfile(timeModelToCalc,storage_usedTech(nodesModelToCalc,yearsToCalc,storage_techs,vintage),"upper")
5583      = storage_techParam(storage_techs,vintage,"levelUpperLimit");
5584  storage_levelProfile(timeModelToCalc,storage_usedTech(nodesModelToCalc,yearsToCalc,storage_techs,vintage),"lower")
5585      = storage_techParam(storage_techs,vintage,"levelLowerLimit");
5586   
5587  set storage_finiteUnitLimit(nodesModelToCalc,yearsToCalc,storage_techs);
5588  storage_finiteUnitLimit(nodesModelToCalc,yearsToCalc,storage_techs) = sum(nodesData$aggregateNodesModel(nodesData,nodesModelToCalc), storage_reservoirParamIn(nodesData,yearsToCalc,storage_techs,"unitsUpperLimit")) > 0
5589                                                   and sum(nodesData$aggregateNodesModel(nodesData,nodesModelToCalc), storage_reservoirParamIn(nodesData,yearsToCalc,storage_techs,"unitsUpperLimit")) < inf;
5590   
5591  storage_levelProfile(timeModelToCalc,storage_usedTech(nodesModelToCalc,yearsToCalc,storage_techs,vintage),pc_storage_levelProfile)
5592      $( storage_level_hasProfile(nodesModelToCalc,yearsToCalc,storage_techs,pc_storage_levelProfile)
5593          and storage_finiteUnitLimit(nodesModelToCalc,yearsToCalc,storage_techs))
5594      = sum(nodesData$aggregateNodesModel(nodesData,nodesModelToCalc),
5595              sum(timeData$timeMapping(timeData,timeModelToCalc),
5596                    storage_levelProfileIn(timeData,nodesData,yearsToCalc,storage_techs,pc_storage_levelProfile))
5597                / timeLength(timeModelToCalc)
5598              * storage_reservoirParamIn(nodesData,yearsToCalc,storage_techs,"unitsUpperLimit"))
5599      / sum(nodesData$aggregateNodesModel(nodesData,nodesModelToCalc),
5600              storage_reservoirParamIn(nodesData,yearsToCalc,storage_techs,"unitsUpperLimit"));
5601   
5602  storage_levelProfile(timeModelToCalc,storage_usedTech(nodesModelToCalc,yearsToCalc,storage_techs,vintage),pc_storage_levelProfile)
5603      $( storage_level_hasProfile(nodesModelToCalc,yearsToCalc,storage_techs,pc_storage_levelProfile)
5604          and sum(nodesData$aggregateNodesModel(nodesData,nodesModelToCalc),
5605                      storage_reservoirParamIn(nodesData,yearsToCalc,storage_techs,"unitsUpperLimit")) = inf )
5606      = sum(nodesData$(aggregateNodesModel(nodesData,nodesModelToCalc)
5607                      and storage_reservoirParamIn(nodesData,yearsToCalc,storage_techs,"unitsUpperLimit") = inf ),
5608              sum(timeData$timeMapping(timeData,timeModelToCalc),
5609                    storage_levelProfileIn(timeData,nodesData,yearsToCalc,storage_techs,pc_storage_levelProfile))
5610                / timeLength(timeModelToCalc))
5611      / sum(nodesData$(aggregateNodesModel(nodesData,nodesModelToCalc)
5612                      and storage_reservoirParamIn(nodesData,yearsToCalc,storage_techs,"unitsUpperLimit") = inf ), 1);
5613   
5614  * for fixed profiles overwrite upper and lower profile
5615  storage_levelProfile(timeModelToCalc,nodesModelToCalc,yearsToCalc,storage_techs,vintage,"lower")
5616      $storage_level_hasProfile(nodesModelToCalc,yearsToCalc,storage_techs,"fixed")
5617      = storage_levelProfile(timeModelToCalc,nodesModelToCalc,yearsToCalc,storage_techs,vintage,"fixed");
5618   
5619  storage_levelProfile(timeModelToCalc,nodesModelToCalc,yearsToCalc,storage_techs,vintage,"upper")
5620      $storage_level_hasProfile(nodesModelToCalc,yearsToCalc,storage_techs,"fixed")
5621      = storage_levelProfile(timeModelToCalc,nodesModelToCalc,yearsToCalc,storage_techs,vintage,"fixed");
5622   
5623   
5624  * ==== parameter modifications ====
5625  storage_reservoirParam(nodesModel,years,storage_techs,"unitsLowerLimit")
5626          $sum(vintage, storage_techParam(storage_techs,vintage,"mipUnits"))
5627      = floor(storage_reservoirParam(nodesModel,years,storage_techs,"unitsLowerLimit"));
5628  storage_reservoirParam(nodesModel,years,storage_techs,"unitsUpperLimit")
5629          $sum(vintage, storage_techParam(storage_techs,vintage,"mipUnits"))
5630      = ceil(storage_reservoirParam(nodesModel,years,storage_techs,"unitsUpperLimit"));
5631   
5632   
5633  * ==== definition of variables ====
5634   
5635  * Initialise variables for unitsBuild
5636  storage_unitsBuild.l(nodesModel,years,storage_techs,vintage)
5637      $storage_availTech(nodesModel,years,storage_techs,vintage)
5638      = storage_reservoirParam(nodesModel,years,storage_techs,"unitsBuild");
5639  storage_unitsBuild.lo(nodesModel,yearsToCalc,storage_techs,vintage)
5640      $storage_availTech(nodesModel,yearsToCalc,storage_techs,vintage)
5641      = storage_unitsBuild.l(nodesModel,yearsToCalc,storage_techs,vintage);
5642  storage_unitsBuild.fx(nodesModel,years,storage_techs,vintage)
5643      $storage_reservoirParam(nodesModel,years,storage_techs,"noExpansion")
5644      = storage_unitsBuild.l(nodesModel,years,storage_techs,vintage);
5645   
5646  * Initialise variables for unitsDecom
5647  storage_unitsDecom.l(nodesModel,years,storage_techs,vintage)
5648      $(storage_decomTech(nodesModel,years,storage_techs,vintage)
5649        and years.val < sum(yearsToCalc$(ord(yearsToCalc) = 1), yearsToCalc.val))
5650      = sum((years_a,years_aa)$(sameas(years-1, years_aa)
5651                        and years_a.val > years_aa.val - storage_techParam(storage_techs,vintage,'lifeTime')
5652                        and years_a.val <= years.val - storage_techParam(storage_techs,vintage,'lifeTime')
5653                        and storage_availTech(nodesModel,years_a,storage_techs,vintage)),
5654          storage_unitsBuild.l(nodesModel,years_a,storage_techs,vintage));
5655   
5656  storage_unitsDecom.l(nodesModel,yearsToCalc,storage_techs,vintage)
5657    $storage_decomTech(nodesModel,yearsToCalc,storage_techs,vintage)
5658    = sum(years$
5659          (years.val < sum(yearsToCalc_a$(ord(yearsToCalc_a) = 1), yearsToCalc_a.val)
5660            and storage_availTech(nodesModel,years,storage_techs,vintage)
5661            and years.val > sum(years_a$sameas(years_a, yearsToCalc-1), years_a.val) - storage_techParam(storage_techs,vintage,'lifeTime')
5662            and years.val <= yearsToCalc.val - storage_techParam(storage_techs,vintage,'lifeTime')),
5663        storage_unitsBuild.l(nodesModel,years,storage_techs,vintage))
5664      + sum(yearsToCalc_a$
5665          (yearsToCalc_a.val < sum(yearsToCalc_aa$(ord(yearsToCalc_aa) > 1), yearsToCalc_a.val)
5666            and storage_availTech(nodesModel,yearsToCalc_a,storage_techs,vintage)
5667            and yearsToCalc_a.val > sum(years_a$sameas(years_a, yearsToCalc-1), years_a.val) - storage_techParam(storage_techs,vintage,'lifeTime')
5668            and yearsToCalc_a.val <= yearsToCalc.val - storage_techParam(storage_techs,vintage,'lifeTime')),
5669        storage_unitsBuild.l(nodesModel,yearsToCalc_a,storage_techs,vintage));
5670        ;
5671   
5672  storage_unitsDecom.lo(nodesModel,yearsToCalc,storage_techs,vintage)
5673      $(storage_usedTech(nodesModel,yearsToCalc,storage_techs,vintage)
5674        and not storage_techParam(storage_techs,vintage,"freeDecom"))
5675      = storage_unitsDecom.l(nodesModel,yearsToCalc,storage_techs,vintage)
5676   
5677  * Calculate planned unit expansion
5678  parameter storage_unitsPlanned(nodesModel,years,storage_techs,vintage);
5679  storage_unitsPlanned(nodesModel,years,storage_techs,vintage) = 0;
5680  loop(years,
5681    storage_unitsPlanned(nodesModel,years,storage_techs,vintage)
5682      =
5683      storage_unitsPlanned(nodesModel,years-1,storage_techs,vintage)
5684          $storage_usedTech(nodesModel,years-1,storage_techs,vintage)
5685      + storage_unitsBuild.l(nodesModel,years,storage_techs,vintage)
5686          $storage_availTech(nodesModel,years,storage_techs,vintage)
5687      - storage_unitsDecom.l(nodesModel,years,storage_techs,vintage)
5688          $storage_usedTech(nodesModel,years,storage_techs,vintage);
5689  );
5690   
5691  * Set initial state for planned units
5692  storage_unitsTotal.l(nodesModel,years,storage_techs,vintage)
5693    = storage_unitsPlanned(nodesModel,years,storage_techs,vintage)
5694   
5695  * Calculate if planned unit expansion is bounded by upper and lower limits
5696  set storage_unitBoundsFixed(nodesModel,years,storage_techs);
5697  storage_unitBoundsFixed(nodesModel,years,storage_techs)
5698    $(sum(vintage$storage_usedTech(nodesModel,years,storage_techs,vintage),
5699          storage_unitsPlanned(nodesModel,years,storage_techs,vintage))
5700      = storage_reservoirParam(nodesModel,years,storage_techs,"unitsUpperLimit")
5701    and sum(vintage$storage_usedTech(nodesModel,years,storage_techs,vintage),
5702          storage_unitsPlanned(nodesModel,years,storage_techs,vintage))
5703      = storage_reservoirParam(nodesModel,years,storage_techs,"unitsLowerLimit"))
5704    = yes;
5705   
5706  * Fix unitsBuild, unitsDecom, unitsTotal if levels are predetermined by upper and lower limits
5707  storage_unitsBuild.fx(nodesModel,years,storage_techs,vintage)
5708    $(storage_availTech(nodesModel,years,storage_techs,vintage)
5709      and storage_unitBoundsFixed(nodesModel,years,storage_techs))
5710    = storage_unitsBuild.l(nodesModel,years,storage_techs,vintage);
5711  storage_unitsDecom.fx(nodesModel,years,storage_techs,vintage)
5712    $(storage_usedTech(nodesModel,years,storage_techs,vintage)
5713      and storage_unitBoundsFixed(nodesModel,years,storage_techs))
5714    = storage_unitsDecom.l(nodesModel,years,storage_techs,vintage);
5715  storage_unitsTotal.fx(nodesModel,years,storage_techs,vintage)
5716    $(storage_usedTech(nodesModel,years,storage_techs,vintage)
5717      and storage_unitBoundsFixed(nodesModel,years,storage_techs))
5718    = storage_unitsTotal.l(nodesModel,years,storage_techs,vintage);
5719   
5720  storage_unitsTotal_MIP.up(nodesModel,years,storage_techs,vintage)
5721      $(storage_usedTech(nodesModel,years,storage_techs,vintage)
5722        and storage_techParam(storage_techs,vintage,"mipUnits") = 1)
5723      = storage_reservoirParam(nodesModel,years,storage_techs,"unitsUpperLimit");
5724   
5725  * Add parameter for fixing capacities during myopic runs
5726  parameter storage_unitsDelta(nodesModel,years,storage_techs);
5727   
5728   
5729  * ==== declaration of equations ====
5730   
5731  equations
5732    Eq_storage_unitsBalance(nodesModel,years,storage_techs,vintage
5733      ) "Ensures the units balance over the planning period."
5734    Eq_storage_unitsFixedDecom(nodesModel,years,storage_techs,vintage
5735      ) "Restricts the fixed decommissioning of units over the planning period."
5736    Eq_storage_unitsFreeDecom(nodesModel,years,storage_techs,vintage
5737      ) "Restricts the free decommissioning of units over the planning period."
5738    Eq_storage_unitsUpperLimit(nodesModel,years,storage_techs
5739      ) "Upper bound for the total number of units."
5740    Eq_storage_unitsLowerLimit(nodesModel,years,storage_techs
5741      ) "Lower bound for the total number of units."
5742    Eq_storage_unitsTotalMIP(nodesModel,years,storage_techs,vintage
5743      ) "Fixes the total number of units to the corresponding integer variable."
5744   
5745    Eq_storage_levelUpperLimit(timeModel,nodesModel,years,storage_techs,vintage,commodity
5746      ) "Upper bound for the total number of units."
5747    Eq_storage_levelUpperLimit_degradation(timeModel,nodesModel,years,storage_techs,vintage,commodity
5748      ) "Upper bound for the total number of units if the storage technology accounts for degradation."
5749    Eq_storage_levelLowerLimit(timeModel,nodesModel,years,storage_techs,vintage,commodity
5750      ) "Lower bound for the total number of units."
5751    Eq_storage_losses(timeModel,nodesModel,years,storage_techs,vintage,commodity
5752      ) "Stored commodities lost due to self discharge."
5753    Eq_storage_unitsBalanceStates(nodesModel,years,storage_techs,vintage
5754      ) "Currently available units must have been built at some point in time and have some state of degradation."
5755    Eq_storage_unitsUpperLimitPerState(nodesModel,years,yearsCom,storage_techs,vintage
5756      ) "There cannot be more units from a certain year than the amount built in that year."
5757    Eq_storage_unitsStatesNoRecovery(nodesModel,years,yearsCom,storage_techs,vintage,degradation_states
5758      ) "There is no recovery."
5759    Eq_storage_cRateLimit(timeModel,nodesModel,years,storage_techs,vintage,commodity
5760      ) "Limit charging rate based on unit capacity."
5761    Eq_storage_eRateLimit(timeModel,nodesModel,years,storage_techs,vintage,commodity
5762      ) "Limit discharging rate based on unit capacity."
5763    Eq_storage_charge(timeModel,nodesModel,years,storage_techs,vintage,commodity
5764      ) "Positive change in state of charge is influx."
5765    Eq_storage_discharge(timeModel,nodesModel,years,storage_techs,vintage,commodity
5766      ) "Negative change in state of charge is outflux."
5767   
5768    Eq_storage_levelStateSum(timeModel,nodesModel,years,storage_techs,vintage,commodity
5769      ) "Sum of degradation class storage levels is the global level."
5770    Eq_storage_levelUpperLimitPerAge(timeModel,nodesModel,years,yearsCom,storage_techs,vintage,commodity
5771      ) "Upper bound for units of a certain state."
5772    Eq_storage_chargingPerAge(timeModel,nodesModel,years,yearsCom,storage_techs,vintage,commodity
5773      ) "Positive change in state of charge is influx for each degradation class."
5774    Eq_storage_chargeBasedDegradationDistribution(nodesModel,years,yearsCom,storage_techs,vintage,commodity
5775      ) "Determine degradation states of storage units."
5776    Eq_storage_unitsDecomStateSum(nodesModel,years,storage_techs,vintage
5777      ) "All decomminsioned units must have a degradation state."
5778    Eq_storage_unitsDegradation(nodesModel,years,yearsCom,storage_techs,vintage,degradation_states
5779      ) "Only allow one range of degradation states per year and age group."
5780    Eq_storage_unitsDegradation_onlyOneRange(nodesModel,years,yearsCom,storage_techs,vintage
5781      ) "Limit usable degradation states to one range, i.e., two neighboring states."
5782   
5783    Eq_storage_unitsSoC_sum(timeModel,nodesModel,years,storage_techs,vintage
5784      ) "Every unit has a state of charge."
5785    Eq_storage_levelSoC(timeModel,nodesModel,years,storage_techs,vintage,commodity
5786      ) "Every unit has a state of charge."
5787    Eq_storage_unitsSoC(timeModel,nodesModel,years,storage_techs,vintage,soc_statesIn
5788      ) "Number of units in particular SoC."
5789    Eq_storage_unitsSoC_onlyOneRange(timeModel,nodesModel,years,storage_techs,vintage
5790      ) "Limit usable SoC states to one range, i.e., two neighboring states."
5791   
5792    Eq_storage_cRateLimit_SoC(timeModel,nodesModel,years,storage_techs,vintage,commodity
5793      ) "Limit charging rate based on unit capacity."
5794    Eq_storage_eRateLimit_SoC(timeModel,nodesModel,years,storage_techs,vintage,commodity
5795      ) "Limit discharging rate based on unit capacity."
5796    ;
5797   
5798  * ==== equation definition ====
5799  * // ## Equations
5800  * // ### Storage Units Balance
5801  * // Ensures that the total units are consistent with the built and decommissioned units.
5802  * // {Eq_storage_unitsBalance}
5803  Eq_storage_unitsBalance(nodesModelSel,yearsSel,storage_techs,vintage)
5804      $((storage_usedTech(nodesModelSel,yearsSel,storage_techs,vintage)
5805            or sum(years$sameas(years,yearsSel), storage_usedTech(nodesModelSel,years-1,storage_techs,vintage)))
5806          and not storage_unitBoundsFixed(nodesModelSel,yearsSel,storage_techs))
5807      ..
5808      storage_unitsTotal(nodesModelSel,yearsSel,storage_techs,vintage)
5809      =e=
5810          sum(yearsToCalc$(ord(yearsToCalc) = 1 and sameas(yearsToCalc, yearsSel)),
5811        sum(years$sameas(years, yearsToCalc),
5812          storage_unitsTotal(nodesModelSel,years-1,storage_techs,vintage)
5813            $storage_usedTech(nodesModelSel,years-1,storage_techs,vintage)))
5814      + sum((yearsToCalc)$(ord(yearsToCalc) > 1 and sameas(yearsToCalc, yearsSel)),
5815        storage_unitsTotal(nodesModelSel,yearsToCalc-1,storage_techs,vintage)
5816          $storage_usedTech(nodesModelSel,yearsToCalc-1,storage_techs,vintage))
5817      + storage_unitsBuild(nodesModelSel,yearsSel,storage_techs,vintage)
5818          $storage_availTech(nodesModelSel,yearsSel,storage_techs,vintage)
5819      - storage_unitsDecom(nodesModelSel,yearsSel,storage_techs,vintage)
5820          $storage_usedTech(nodesModelSel,yearsSel,storage_techs,vintage);
5821   
5822  * // ### Storage Units Fixed Decommission
5823  * // Restricts the fixed decommissioning of storage units over the planning period.
5824  * // {Eq_storage_unitsFixedDecom}
5825  Eq_storage_unitsFixedDecom(nodesModelSel,yearsSel,storage_techs,vintage)
5826      $(storage_decomTech(nodesModelSel,yearsSel,storage_techs,vintage)
5827          and not storage_techParam(storage_techs,vintage,"freeDecom") = 1
5828          and not storage_unitBoundsFixed(nodesModelSel,yearsSel,storage_techs))
5829      ..
5830      storage_unitsDecom(nodesModelSel,yearsSel,storage_techs,vintage)
5831      =e=
5832      sum(years$
5833          (storage_availTech(nodesModelSel,years,storage_techs,vintage)
5834            and years.val > sum(yearsToCalc$sameas(yearsToCalc+1, yearsSel), yearsToCalc.val) - storage_techParam(storage_techs,vintage,'lifeTime')
5835            and years.val <= yearsSel.val - storage_techParam(storage_techs,vintage,'lifeTime')),
5836        storage_unitsBuild(nodesModelSel,years,storage_techs,vintage));
5837   
5838  * // ### Storage Units Free Decomission
5839  * // Restricts the free decommissioning of storage units over the planning period.
5840  * // {Eq_storage_unitsFreeDecom}
5841  Eq_storage_unitsFreeDecom(nodesModelSel,yearsSel,storage_techs,vintage)
5842      $((storage_decomTech(nodesModelSel,yearsSel,storage_techs,vintage)
5843          or storage_usedTech(nodesModelSel,yearsSel,storage_techs,vintage))
5844          and storage_techParam(storage_techs,vintage,"freeDecom") = 1)
5845      ..
5846      sum(years$
5847            ((storage_decomTech(nodesModelSel,years,storage_techs,vintage)
5848              or storage_usedTech(nodesModelSel,years,storage_techs,vintage))
5849              and years.val < sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)),
5850          storage_unitsDecom(nodesModelSel,years,storage_techs,vintage))
5851      + sum(yearsToCalc$
5852            ((storage_decomTech(nodesModelSel,yearsToCalc,storage_techs,vintage)
5853              or storage_usedTech(nodesModelSel,yearsToCalc,storage_techs,vintage))
5854              and yearsToCalc.val >= sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
5855              and yearsToCalc.val <= yearsSel.val),
5856          storage_unitsDecom(nodesModelSel,yearsToCalc,storage_techs,vintage))
5857      =g=
5858      sum(years$
5859            (storage_availTech(nodesModelSel,years,storage_techs,vintage)
5860              and years.val < sum(yearsToCalc$(ord(yearsToCalc)=1), yearsToCalc.val) - storage_techParam(storage_techs,vintage,'lifeTime')),
5861          storage_unitsBuild(nodesModelSel,years,storage_techs,vintage))
5862      + sum(yearsToCalc$
5863            (storage_availTech(nodesModelSel,yearsToCalc,storage_techs,vintage)
5864              and yearsToCalc.val >= sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
5865              and yearsToCalc.val <= yearsSel.val - storage_techParam(storage_techs,vintage,'lifeTime')),
5866          storage_unitsBuild(nodesModelSel,yearsToCalc,storage_techs,vintage));
5867   
5868  * // ### Storage Units Lower Limit
5869  * // Lower bound for the total number of storage units.
5870  * // {Eq_storage_unitsLowerLimit}
5871  Eq_storage_unitsLowerLimit(nodesModelSel,yearsSel,storage_techs)
5872      $(storage_reservoirParam(nodesModelSel,yearsSel,storage_techs,'unitsLowerLimit') > 0 )
5873      ..
5874      sum(vintage$storage_usedTech(nodesModelSel,yearsSel,storage_techs,vintage),
5875          storage_unitsTotal(nodesModelSel,yearsSel,storage_techs,vintage))
5876      =g=
5877      storage_reservoirParam(nodesModelSel,yearsSel,storage_techs,"unitsLowerLimit");
5878   
5879  * // ### Storage Units Upper Limit
5880  * // Upper bound for the total number of storage units.
5881  * // {Eq_storage_unitsUpperLimit}
5882  Eq_storage_unitsUpperLimit(nodesModelSel,yearsSel,storage_techs)
5883      $(storage_reservoirParam(nodesModelSel,yearsSel,storage_techs,'unitsUpperLimit') >= 0
5884          and storage_reservoirParam(nodesModelSel,yearsSel,storage_techs,'unitsUpperLimit') < +inf )
5885      ..
5886      sum(vintage$storage_usedTech(nodesModelSel,yearsSel,storage_techs,vintage),
5887          storage_unitsTotal(nodesModelSel,yearsSel,storage_techs,vintage))
5888      =l=
5889      storage_reservoirParam(nodesModelSel,yearsSel,storage_techs,"unitsUpperLimit");
5890   
5891  * // ### Storage Units Total MIP
5892  * // Fixes the total number of storage units to the corresponding integer variable.
5893  * // {Eq_storage_unitsTotalMIP}
5894  Eq_storage_unitsTotalMIP(nodesModelSel,yearsSel,storage_techs,vintage)
5895      $( storage_usedTech(nodesModelSel,yearsSel,storage_techs,vintage)
5896          and storage_techParam(storage_techs,vintage,"mipUnits") = 1 )
5897      ..
5898      storage_unitsTotal(nodesModelSel,yearsSel,storage_techs,vintage)
5899      =e=
5900      storage_unitsTotal_MIP(nodesModelSel,yearsSel,storage_techs,vintage);
5901   
5902  * // ### Storage Level Lower Limit
5903  * // Lower limit on the storage level.
5904  * // {Eq_storage_levelLowerLimit}
5905  Eq_storage_levelLowerLimit(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
5906      $(storage_usedTechCom(nodesModelSel,yearsSel,storage_techs,vintage,commodity)
5907          and storage_levelProfile(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,"lower") > 0)
5908      ..
5909      storage_level(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
5910      =g=
5911      storage_levelProfile(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,"lower")
5912      * storage_sizeParam(storage_techs,vintage,commodity,"size")
5913      * storage_unitsTotal(nodesModelSel,yearsSel,storage_techs,vintage);
5914   
5915  * // ### Storage Level Upper Limit
5916  * // Upper limit on the storage level.
5917  * // {Eq_storage_levelUpperLimit}
5918  Eq_storage_levelUpperLimit(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
5919      $(storage_usedTechCom(nodesModelSel,yearsSel,storage_techs,vintage,commodity)
5920          and not storage_hasDegradation(storage_techs,vintage)
5921          and storage_levelProfile(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,"upper") >= 0)
5922      ..
5923      storage_level(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
5924      =l=
5925      storage_levelProfile(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,"upper")
5926      * storage_sizeParam(storage_techs,vintage,commodity,"size")
5927      * storage_unitsTotal(nodesModelSel,yearsSel,storage_techs,vintage);
5928   
5929  * // ### Storage Level Upper Limit (degradation)
5930  * // Upper limit on the storage level if the storage technology accounts for degradation.
5931  * // {Eq_storage_levelUpperLimit_degradation}
5932  Eq_storage_levelUpperLimit_degradation(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
5933      $(storage_usedTechCom(nodesModelSel,yearsSel,storage_techs,vintage,commodity)
5934          and storage_hasDegradation(storage_techs,vintage)
5935          and storage_levelProfile(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,"upper") >= 0)
5936      ..
5937      storage_level(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
5938      =l=
5939      storage_levelProfile(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,"upper")
5940      * storage_sizeParam(storage_techs,vintage,commodity,"size")
5941      * sum((degradation_states,yearsCom)$storage_usedDegradation(storage_techs,vintage,degradation_states),
5942              (storage_degradationParam(storage_techs,vintage,degradation_states,"remainingCapacity")
5943                - (yearsSel.val - yearsCom.val) * storage_techParam(storage_techs,vintage,"annualDegradation"))
5944                * storage_unitsStateTracker(nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,degradation_states));
5945   
5946  * // ### Storage Unit States Sum (degradation)
5947  * // The number of units in all degradation state must match the total unit number.
5948  * // {Eq_storage_unitsBalanceStates}
5949  Eq_storage_unitsBalanceStates(nodesModelSel,yearsSel,storage_techs,vintage)
5950      $(storage_usedTech(nodesModelSel,yearsSel,storage_techs,vintage)
5951        and storage_hasDegradation(storage_techs,vintage))
5952      ..
5953      storage_unitsTotal(nodesModelSel,yearsSel,storage_techs,vintage)
5954      =e=
5955      sum((yearsCom,degradation_states)$storage_usedDegradation(storage_techs,vintage,degradation_states),
5956            storage_unitsStateTracker(nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,degradation_states));
5957   
5958  * // ### Storage Unit States Upper Limit(degradation)
5959  * // The states of all commissioned units in one year (unitsBuilt) must either still be tracked or have been decommissioned.
5960  * // {Eq_storage_unitsUpperLimitPerState}
5961  Eq_storage_unitsUpperLimitPerState(nodesModelSel,yearsSel,yearsCom,storage_techs,vintage)
5962      $(storage_usedTech(nodesModelSel,yearsSel,storage_techs,vintage)
5963          and storage_hasDegradation(storage_techs,vintage))
5964      ..
5965      sum(degradation_states$storage_usedDegradation(storage_techs,vintage,degradation_states),
5966            storage_unitsStateTracker(nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,degradation_states)
5967            + sum(years$(years.val <= yearsSel.val),
5968                  storage_unitsStateTrackerDecom(nodesModelSel,years,yearsCom,storage_techs,vintage,degradation_states)))
5969      =e=
5970      storage_unitsBuild(nodesModelSel,yearsCom,storage_techs,vintage)$(yearsCom.val <= yearsSel.val);
5971   
5972  * // ### Storage Unit States Progression (degradation)
5973  * // Unit recovery by reassigning the storage cycles to other units is disabled. Therefore, the number of units in a particular degradation state can only increase if the number in a less degraded state is decreased by at least the same amount.
5974  * // {Eq_storage_unitsStatesNoRecovery}
5975  alias(degradation_states, dc_states);
5976  Eq_storage_unitsStatesNoRecovery(nodesModelSel,yearsSel(yearsToCalc),yearsCom,storage_techs,vintage,degradation_states)
5977      $(storage_usedTech(nodesModelSel,yearsSel,storage_techs,vintage)
5978        and yearsToCalc.val > yearsCom.val
5979        and storage_usedDegradation(storage_techs,vintage,degradation_states))
5980      ..
5981      sum(dc_states$(storage_usedDegradation(storage_techs,vintage,dc_states)
5982                and storage_degradationParam(storage_techs,vintage,dc_states,"maxFullCycles") <= storage_degradationParam(storage_techs,vintage,degradation_states,"maxFullCycles")),
5983              storage_unitsStateTracker(nodesModelSel,yearsToCalc,yearsCom,storage_techs,vintage,dc_states)
5984              + sum(years$(years.val <= yearsToCalc.val), storage_unitsStateTrackerDecom(nodesModelSel,years,yearsCom,storage_techs,vintage,dc_states)))
5985      =l=
5986      sum(dc_states$(storage_usedDegradation(storage_techs,vintage,dc_states)
5987                      and storage_degradationParam(storage_techs,vintage,dc_states,"maxFullCycles") <= storage_degradationParam(storage_techs,vintage,degradation_states,"maxFullCycles")),
5988              storage_unitsStateTracker(nodesModelSel,yearsToCalc-1,yearsCom,storage_techs,vintage,dc_states)
5989              + sum(years$(years.val < yearsToCalc.val), storage_unitsStateTrackerDecom(nodesModelSel,years,yearsCom,storage_techs,vintage,dc_states)));
5990   
5991  * // ### Storage Losses
5992  * // Accumulation of storage losses.
5993  * // {Eq_storage_losses}
5994  Eq_storage_losses(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,storage_techs,vintage,commodity)
5995      $storage_usedTechCom(nodesModelSel,yearsSel,storage_techs,vintage,commodity)
5996      ..
5997      storage_losses(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
5998      =e=
5999      - storage_level(timeModelToCalc--1,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
6000        * storage_sizeParam(storage_techs,vintage,commodity,"selfdischarge")
6001      + storage_sizeParam(storage_techs,vintage,commodity,"selfdischargeAbs")
6002      + (storage_techParam(storage_techs,vintage,"chargingLoss")
6003          /(1 - storage_techParam(storage_techs,vintage,"chargingLoss")))
6004        * storage_charge(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
6005          $(storage_techParam(storage_techs,vintage,"chargingLoss") > 0)
6006      + storage_techParam(storage_techs,vintage,"dischargingLoss")
6007        * storage_discharge(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
6008          $(storage_techParam(storage_techs,vintage,"dischargingLoss") > 0)
6009      - storage_sizeParam(storage_techs,vintage,commodity,"size")
6010        * sum(soc_states$(storage_usedTechSoCState(storage_techs,vintage,soc_states)
6011                          and storage_validSoCRange(storage_techs,vintage)),
6012              storage_unitsSoC(timeModelToCalc--1,nodesModelSel,yearsSel,storage_techs,vintage,soc_states)
6013              * storage_SoCParam(storage_techs,vintage,soc_states,"SoC")
6014              * storage_SoCParam(storage_techs,vintage,soc_states,"selfdischarge"));
6015   
6016  * // ### C-Rate Limit
6017  * // The increase in storage level per time step, i.e., the charging rate, is limited relative to the storage capacity.
6018  * // {Eq_storage_cRateLimit}
6019  Eq_storage_cRateLimit(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,storage_techs,vintage,commodity)
6020      $(storage_usedTechCom(nodesModelSel,yearsSel,storage_techs,vintage,commodity)
6021        and storage_techParam(storage_techs,vintage,"maxCRate") > 0)
6022      ..
6023      storage_level(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
6024      - storage_level(timeModelToCalc--1,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
6025      =l=
6026      storage_techParam(storage_techs,vintage,"maxCRate")
6027      * storage_sizeParam(storage_techs,vintage,commodity,"size")
6028      * storage_unitsTotal(nodesModelSel,yearsSel,storage_techs,vintage);
6029   
6030  * // ### E-Rate Limit
6031  * // The decrease in storage level per time step, i.e., the discharging rate, is limited relative to the storage capacity.
6032  * // {Eq_storage_eRateLimit}
6033  Eq_storage_eRateLimit(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,storage_techs,vintage,commodity)
6034      $(storage_usedTechCom(nodesModelSel,yearsSel,storage_techs,vintage,commodity)
6035        and storage_techParam(storage_techs,vintage,"maxERate") > 0)
6036      ..
6037      storage_level(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
6038      - storage_level(timeModelToCalc--1,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
6039      =g=
6040      - storage_techParam(storage_techs,vintage,"maxERate")
6041      * storage_sizeParam(storage_techs,vintage,commodity,"size")
6042      * storage_unitsTotal(nodesModelSel,yearsSel,storage_techs,vintage);
6043   
6044  * // ### Storage Charging
6045  * // Increases in storage levels are accounted as charging amounts.
6046  * // {Eq_storage_charge}
6047  Eq_storage_charge(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,storage_techs,vintage,commodity)
6048      $(storage_usedTechCom(nodesModelSel,yearsSel,storage_techs,vintage,commodity)
6049        and storage_techParam(storage_techs,vintage,"chargingLoss") > 0)
6050      ..
6051      storage_charge(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
6052      =g=
6053      storage_level(timeModelToCalc,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
6054      - storage_level(timeModelToCalc--1,nodesModelSel,yearsSel,storage_techs,vintage,commodity);
6055   
6056  * // ### Storage Discharging
6057  * // Decreases in storage levels are accounted as discharging amounts.
6058  * // {Eq_storage_discharge}
6059  Eq_storage_discharge(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,storage_techs,vintage,commodity)
6060      $(storage_usedTechCom(nodesModelSel,yearsSel,storage_techs,vintage,commodity)
6061        and storage_techParam(storage_techs,vintage,"dischargingLoss") > 0)
6062      ..
6063      storage_discharge(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
6064      =g=
6065      storage_level(timeModelToCalc--1,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
6066      - storage_level(timeModelToCalc,nodesModelSel,yearsSel,storage_techs,vintage,commodity);
6067   
6068  * // ### Storage Level Sum (degradation)
6069  * // The storage level is accounted individually by commissioning year in the case of degradation in order to prohibit the model to assign pre-existing storage cycles to newly built storage reservoirs and thereby avoiding degradation. All those storage levels represent the total storage level.
6070  * // {Eq_storage_levelStateSum}
6071  Eq_storage_levelStateSum(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
6072      $(storage_usedTechCom(nodesModelSel,yearsSel,storage_techs,vintage,commodity)
6073        and storage_techParam(storage_techs,vintage,"usageDegradation"))
6074      ..
6075      storage_level(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
6076      =e=
6077      sum(yearsCom, storage_levelPerAge(timeModelSel,nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,commodity));
6078   
6079  * // ### Storage Level Upper Limit per Age Group (degradation)
6080  * // Upper limit on the storage level per commissioning year if the storage technology accounts for degradation.
6081  * // {Eq_storage_levelUpperLimitPerAge}
6082  Eq_storage_levelUpperLimitPerAge(timeModelSel,nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,commodity)
6083      $(storage_usedTechCom(nodesModelSel,yearsSel,storage_techs,vintage,commodity)
6084        and storage_techParam(storage_techs,vintage,"usageDegradation"))
6085      ..
6086      storage_levelPerAge(timeModelSel,nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,commodity)
6087      =l=
6088      storage_techParam(storage_techs,vintage,"levelUpperLimit")
6089      * storage_sizeParam(storage_techs,vintage,commodity,"size")
6090      * sum(degradation_states,
6091              (storage_degradationParam(storage_techs,vintage,degradation_states,"remainingCapacity")
6092                - (yearsSel.val - yearsCom.val) * storage_techParam(storage_techs,vintage,"annualDegradation"))
6093                * storage_unitsStateTracker(nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,degradation_states));
6094   
6095  * // ### Storage Cycle Distribution to Degradation States per Commissioning Year (degradation)
6096  * // The charging amounts are converted to equivalent full cycles which then must be represented by an adequate distribution of degradation states.
6097  * // {Eq_storage_chargeBasedDegradationDistribution}
6098  alias(years, prev_years);
6099  Eq_storage_chargeBasedDegradationDistribution(nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,commodity)
6100      $(storage_usedTechCom(nodesModelSel,yearsSel,storage_techs,vintage,commodity)
6101        and storage_techParam(storage_techs,vintage,"usageDegradation"))
6102      ..
6103      sum(prev_years$(prev_years.val <= yearsSel.val), representedYears(prev_years)
6104          * sum(timeModel, storage_chargePerAge(timeModel,nodesModelSel,prev_years,yearsCom,storage_techs,vintage,commodity)))
6105      =l=
6106      storage_sizeParam(storage_techs,vintage,commodity,"size")
6107      * sum(dc_states$storage_usedDegradation(storage_techs,vintage,dc_states),
6108          storage_degradationParam(storage_techs,vintage,dc_states,"maxFullCycles")
6109          * (storage_unitsStateTracker(nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,dc_states)
6110             + sum(prev_years$(prev_years.val <= yearsSel.val), storage_unitsStateTrackerDecom(nodesModelSel,prev_years,yearsCom,storage_techs,vintage,dc_states))));
6111   
6112  * // ### Storage Charging per Commissioning Year (degradation)
6113  * // Increases in storage levels are accounted as charging amounts.
6114  * // {Eq_storage_chargingPerAge}
6115  Eq_storage_chargingPerAge(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,commodity)
6116      $(storage_usedTechCom(nodesModelSel,yearsSel,storage_techs,vintage,commodity)
6117        and storage_techParam(storage_techs,vintage,"usageDegradation"))
6118      ..
6119      storage_chargePerAge(timeModelSel,nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,commodity)
6120      =g=
6121      storage_levelPerAge(timeModelToCalc,nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,commodity)
6122      - storage_levelPerAge(timeModelToCalc--1,nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,commodity);
6123   
6124  * // ### Storage Unit Decommissioning States Sum (degradation)
6125  * // The number of decommissioned units in all degradation state must match the total decommissioning unit number.
6126  * // {Eq_storage_unitsDecomStateSum}
6127  Eq_storage_unitsDecomStateSum(nodesModelSel,yearsSel,storage_techs,vintage)
6128      $(storage_techParam(storage_techs,vintage,"usageDegradation"))
6129      ..
6130      storage_unitsDecom(nodesModelSel,yearsSel,storage_techs,vintage)
6131      =e=
6132      sum((yearsCom,degradation_states)$storage_usedDegradation(storage_techs,vintage,degradation_states),
6133          storage_unitsStateTrackerDecom(nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,degradation_states));
6134   
6135  * // ### Storage Unit Sequential Degradation (degradation)
6136  * // Only active degradation ranges, i.e., two neighboring degradation states, can be used.
6137  * // {Eq_storage_unitsDegradation}
6138  alias(degradation_states, degradation_states_a, degradation_states_b);
6139  Eq_storage_unitsDegradation(nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,degradation_states)
6140      $(storage_techParam(storage_techs,vintage,"usageDegradation")
6141        and storage_techParam(storage_techs,vintage,"sequentialDegradationStates"))
6142      ..
6143      sum(degradation_states_a$((storage_degradationParam(storage_techs,vintage,degradation_states_a,"maxFullCycles") = storage_degradationParam(storage_techs,vintage,degradation_states,"maxFullCycles")
6144                        or storage_degradationParam(storage_techs,vintage,degradation_states_a,"maxFullCycles")
6145                                         = smax(degradation_states_b$(storage_degradationParam(storage_techs,vintage,degradation_states_b,"maxFullCycles") < storage_degradationParam(storage_techs,vintage,degradation_states,"maxFullCycles")
6146                                                              and storage_usedDegradation(storage_techs,vintage,degradation_states_b)),
6147                                                              storage_degradationParam(storage_techs,vintage,degradation_states_b,"maxFullCycles")))
6148                        and storage_usedDegradation(storage_techs,vintage,degradation_states_a)),
6149          storage_unitsStateTracker_activeRange(nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,degradation_states_a))
6150      * storage_bigM(storage_techs,vintage)
6151      =g=
6152      storage_unitsStateTracker(nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,degradation_states);
6153   
6154  * // ### Storage Unit Sequential Degradation Range (degradation)
6155  * // Only one degradation range can be active.
6156  * // {Eq_storage_unitsDegradation_onlyOneRange}
6157  Eq_storage_unitsDegradation_onlyOneRange(nodesModelSel,yearsSel,yearsCom,storage_techs,vintage)
6158      $(storage_techParam(storage_techs,vintage,"usageDegradation") and storage_techParam(storage_techs,vintage,"sequentialDegradationStates"))
6159      ..
6160      sum(degradation_states$storage_usedDegradation(storage_techs,vintage,degradation_states),
6161            storage_unitsStateTracker_activeRange(nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,degradation_states))
6162      =e= 1;
6163   
6164  * // ### Storage Unit Sequential State of Charge (SoC)
6165  * // Only active state of charge ranges, i.e., two neighboring states of charge, can be used.
6166  * // {Eq_storage_unitsSoC}
6167  alias(soc_states, soc_states_a, soc_states_b);
6168  Eq_storage_unitsSoC(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,storage_techs,vintage,soc_states)
6169      $(storage_validSoCRange(storage_techs,vintage) and storage_techParam(storage_techs,vintage,"sequentialSoC"))
6170      ..
6171      sum(soc_states_a$((storage_SoCParam(storage_techs,vintage,soc_states_a,"SoC") = storage_SoCParam(storage_techs,vintage,soc_states,"SoC")
6172                        or storage_SoCParam(storage_techs,vintage,soc_states_a,"SoC")
6173                                         = smax(soc_states_b$(storage_SoCParam(storage_techs,vintage,soc_states_b,"SoC") < storage_SoCParam(storage_techs,vintage,soc_states,"SoC")
6174                                                              and storage_usedTechSoCState(storage_techs,vintage,soc_states_b)),
6175                                                              storage_SoCParam(storage_techs,vintage,soc_states_b,"SoC")))
6176                        and storage_usedTechSoCState(storage_techs,vintage,soc_states_a)),
6177          storage_unitsSoC_activeRange(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,soc_states_a))
6178      * storage_bigM(storage_techs,vintage)
6179      =g=
6180      storage_unitsSoC(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,soc_states);
6181   
6182  * // ### Storage Unit Sequential State of Charge Range (SoC)
6183  * // Only one state of charge range can be active.
6184  * // {Eq_storage_unitsSoC_onlyOneRange}
6185  Eq_storage_unitsSoC_onlyOneRange(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,storage_techs,vintage)
6186      $(storage_validSoCRange(storage_techs,vintage) and storage_techParam(storage_techs,vintage,"sequentialSoC"))
6187      ..
6188      sum(soc_states$storage_usedTechSoCState(storage_techs,vintage,soc_states),
6189            storage_unitsSoC_activeRange(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,soc_states)) =e= 1;
6190   
6191  * // ### Storage Unit State of Charge Sum (SoC)
6192  * // Each storage unit must have one state of charge.
6193  * // {Eq_storage_unitsSoC_sum}
6194  Eq_storage_unitsSoC_sum(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,storage_techs,vintage)
6195      $storage_validSoCRange(storage_techs,vintage)
6196      ..
6197      storage_unitsTotal(nodesModelSel,yearsSel,storage_techs,vintage)
6198      =e=
6199      sum(soc_states$storage_usedTechSoCState(storage_techs,vintage,soc_states),
6200            storage_unitsSoC(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,soc_states));
6201   
6202  * // ### Storage Level State of Charge Sum (SoC)
6203  * // The total storage level must be represented by units in their specific states of charge.
6204  * // {Eq_storage_levelSoC}
6205  Eq_storage_levelSoC(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,storage_techs,vintage,commodity)
6206      $(storage_validSoCRange(storage_techs,vintage) and storage_usedTechCom(nodesModelSel,yearsSel,storage_techs,vintage,commodity))
6207      ..
6208      storage_level(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
6209      =e=
6210      storage_sizeParam(storage_techs,vintage,commodity,"size")
6211      * sum(soc_states$storage_usedTechSoCState(storage_techs,vintage,soc_states),
6212              storage_unitsSoC(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,soc_states)
6213              * storage_SoCParam(storage_techs,vintage,soc_states,"SoC"));
6214   
6215  * // ### C-Rate Limit (SoC)
6216  * // The increase in storage level per time step, i.e., the charging rate, is limited relative to the storage capacity. The coefficients can vary between states of charge.
6217  * // {Eq_storage_cRateLimit_SoC}
6218  Eq_storage_cRateLimit_SoC(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,storage_techs,vintage,commodity)
6219      $(storage_usedTechCom(nodesModelSel,yearsSel,storage_techs,vintage,commodity)
6220        and storage_validSoCRange(storage_techs,vintage)
6221        and sum(soc_states, storage_SoCParam(storage_techs,vintage,soc_states,"cRate")) < inf)
6222      ..
6223      storage_level(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
6224      - storage_level(timeModelToCalc--1,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
6225      =l=
6226      storage_sizeParam(storage_techs,vintage,commodity,"size")
6227      * sum(soc_states$storage_usedTechSoCState(storage_techs,vintage,soc_states),
6228                      storage_SoCParam(storage_techs,vintage,soc_states,"cRate")
6229                      * storage_unitsSoC(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,soc_states));
6230   
6231  * // ### E-Rate Limit (SoC)
6232  * // The decrease in storage level per time step, i.e., the discharging rate, is limited relative to the storage capacity. The coefficients can vary between states of charge.
6233  * // {Eq_storage_cRateLimit_SoC}
6234  Eq_storage_eRateLimit_SoC(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,storage_techs,vintage,commodity)
6235      $(storage_usedTechCom(nodesModelSel,yearsSel,storage_techs,vintage,commodity)
6236        and storage_validSoCRange(storage_techs,vintage)
6237        and sum(soc_states, storage_SoCParam(storage_techs,vintage,soc_states,"eRate")) < inf)
6238      ..
6239      storage_level(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
6240      - storage_level(timeModelToCalc--1,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
6241      =g=
6242      - storage_sizeParam(storage_techs,vintage,commodity,"size")
6243      * sum(soc_states$storage_usedTechSoCState(storage_techs,vintage,soc_states),
6244                      storage_SoCParam(storage_techs,vintage,soc_states,"eRate")
6245                      * storage_unitsSoC(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,soc_states));
6246   
6247   
6248  * ==== model definition ====
6249   
6250  Model M_storage
6251  /
6252    Eq_storage_unitsBalance
6253    Eq_storage_unitsFixedDecom
6254    Eq_storage_unitsFreeDecom
6255    Eq_storage_unitsLowerLimit
6256    Eq_storage_unitsUpperLimit
6257    Eq_storage_levelUpperLimit_degradation
6258    Eq_storage_unitsTotalMIP
6259    Eq_storage_levelLowerLimit
6260    Eq_storage_levelUpperLimit
6262    Eq_storage_losses
6264    Eq_storage_unitsBalanceStates
6265    Eq_storage_unitsUpperLimitPerState
6266    Eq_storage_unitsStatesNoRecovery
6267    Eq_storage_cRateLimit
6268    Eq_storage_eRateLimit
6269    Eq_storage_charge
6270    Eq_storage_discharge
6271    Eq_storage_levelStateSum
6272    Eq_storage_levelUpperLimitPerAge
6273    Eq_storage_chargeBasedDegradationDistribution
6274    Eq_storage_chargingPerAge
6275    Eq_storage_unitsDecomStateSum
6276    Eq_storage_unitsDegradation
6277    Eq_storage_unitsDegradation_onlyOneRange
6278   
6279    Eq_storage_unitsSoC
6280    Eq_storage_unitsSoC_sum
6281    Eq_storage_unitsSoC_onlyOneRange
6282    Eq_storage_levelSoC
6283    Eq_storage_cRateLimit_SoC
6284    Eq_storage_eRateLimit_SoC
6285  /;
INCLUDE    C:\Local\REMix\framework\remix\framework\model\source\core\transfer.gms
6287  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
6288  * SPDX-License-Identifier: BSD-3-Clause
6289   
6290  * // # core_transfer
6291  * // The equations in this file describe the commodity transfer in the model.
6292   
6293  * // ## Variables
6294  * // {special_table_transfer_variables}
6297   
6302   
6579   
6580  parameter transfer_linksParam(linksModel,years,transfer_techs,pc_transfer_linksParam);
6581  transfer_linksParam(linksModelToCalc,years,transfer_techs,pc_transfer_linksParam)
6582      = sum(linksData$links_aggregate(linksModelToCalc,linksData), transfer_linksParamIn(linksData,years,transfer_techs,pc_transfer_linksParam));
6583   
6584  * // ## Load links from gdx file
6586   
6587   
6588  set transfer_hasflowProfileIn(linksData,years,transfer_techs,pc_transfer_flowProfile);
6589  option transfer_hasflowProfileIn < transfer_flowProfileIn;
6590   
6591  * === modify transfer_flowProfileIn vector to fill with default values, in case profile is not specified ===
6592  transfer_linksParamIn(linksData,years,transfer_techs,"flowAlongLimit")
6593      $(not transfer_linksParamIn(linksData,years,transfer_techs,"limitFlows"))
6594      = 1;
6595   
6596  transfer_linksParamIn(linksData,years,transfer_techs,"flowAgainstLimit")
6597      $(not transfer_linksParamIn(linksData,years,transfer_techs,"limitFlows"))
6598      = 1;
6599   
6600  transfer_flowProfileIn(timeData,linksData,years,transfer_techs,"along")
6601      $(not transfer_hasflowProfileIn(linksData,years,transfer_techs,"along"))
6602      = transfer_linksParamIn(linksData,years,transfer_techs,"flowAlongLimit");
6603   
6604  transfer_flowProfileIn(timeData,linksData,years,transfer_techs,"against")
6605      $(not transfer_hasflowProfileIn(linksData,years,transfer_techs,"against"))
6606      = transfer_linksParamIn(linksData,years,transfer_techs,"flowAgainstLimit");
6607   
6608  * aggregate time dimension
6609  parameter transfer_flowProfileIn_aggTime(timeModel,linksData,yearsToCalc,transfer_techs,pc_transfer_flowProfile);
6610  transfer_flowProfileIn_aggTime(timeModelToCalc,linksData,yearsToCalc,transfer_techs,pc_transfer_flowProfile)
6611      $transfer_hasflowProfileIn(linksData,yearsToCalc,transfer_techs,pc_transfer_flowProfile)
6612      = sum(timeData$timeMapping(timeData,timeModelToCalc),
6613            transfer_flowProfileIn(timeData,linksData,yearsToCalc,transfer_techs,pc_transfer_flowProfile)
6614            / timeLength(timeModelToCalc));
6615  option clear = transfer_flowProfileIn;
6616   
6617  transfer_flowProfileIn_aggTime(timeModelToCalc,linksData,yearsToCalc,transfer_techs,pc_transfer_flowProfile)
6618      $(not transfer_hasflowProfileIn(linksData,yearsToCalc,transfer_techs,pc_transfer_flowProfile) and
6619        not transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"limitFlows"))
6620      = 1;
6621   
6622  transfer_flowProfileIn_aggTime(timeModelToCalc,linksData,yearsToCalc,transfer_techs,"along")
6623      $(not transfer_hasflowProfileIn(linksData,yearsToCalc,transfer_techs,"along") and
6624        transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"limitFlows"))
6625      = transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"flowAlongLimit");
6626   
6627  transfer_flowProfileIn_aggTime(timeModelToCalc,linksData,yearsToCalc,transfer_techs,"against")
6628      $(not transfer_hasflowProfileIn(linksData,yearsToCalc,transfer_techs,"against") and
6629        transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"limitFlows"))
6630      = transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"flowAgainstLimit");
6631   
6632  set transfer_finiteLinkLimit(linksModel,years,transfer_techs);
6633  transfer_finiteLinkLimit(linksModelToCalc,yearsToCalc,transfer_techs)
6634      = sum(linksData$links_aggregate(linksModelToCalc,linksData), transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"linksUpperLimit")) > 0
6635          and sum(linksData$links_aggregate(linksModelToCalc,linksData), transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"linksUpperLimit")) < inf;
6636   
6637  set transfer_infiniteLinkLimit(linksModel,years,transfer_techs);
6638  transfer_infiniteLinkLimit(linksModelToCalc,yearsToCalc,transfer_techs)
6639      = sum(linksData$links_aggregate(linksModelToCalc,linksData), transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"linksUpperLimit")) = inf;
6641   
6642  parameter transfer_lengthParam(linksModel,link_types,pc_transfer_lengthParam);
6643  transfer_lengthParam(linksModelToCalc,link_types,pc_transfer_lengthParam)
6644      = sum(linksData$links_aggregate(linksModelToCalc,linksData), transfer_lengthParamIn(linksData,link_types,pc_transfer_lengthParam))
6645          / sum(linksData$links_aggregate(linksModelToCalc,linksData), 1);
6646   
6647  parameter transfer_gridSegments(linksModel,transfer_techs,gridSegments,pc_transfer_gridSegments);
6648  transfer_gridSegments(linksModelToCalc,transfer_techs,gridSegments,pc_transfer_gridSegments)
6649      = smax(linksData$links_aggregate(linksModelToCalc,linksData), transfer_gridSegmentsIn(linksData,transfer_techs,gridSegments,pc_transfer_gridSegments));
6650   
6651  parameter transfer_dcopf_Xtech(linksModel,years,transfer_techs,vintage,gridSegments);
6652  transfer_dcopf_Xtech(linksModelToCalc,yearsToCalc,transfer_techs,vintage,gridSegments)
6653      $(transfer_gridSegments(linksModelToCalc,transfer_techs,gridSegments,"useDCopf")
6654          and transfer_linksParam(linksModelToCalc,yearsToCalc,transfer_techs,"circuits") > 0
6655          and sum(link_types, transfer_reactPerLength(transfer_techs,vintage,link_types,"reactPerLength")) > 0 )
6656      = (1 / sum(linksData
6657                  $links_aggregate(linksModelToCalc,linksData),
6658              1 / ( sum(link_types,
6659                          transfer_lengthParamIn(linksData,link_types,"length")
6660                          * transfer_reactPerLength(transfer_techs,vintage,link_types,"reactPerLength"))
6661                      / transfer_linksParam(linksModelToCalc,yearsToCalc,transfer_techs,"circuits"))));
6662   
6663  set transfer_hasflowProfile(linksModel,years,transfer_techs,pc_transfer_flowProfile);
6664  transfer_hasflowProfile(linksModelToCalc,yearsToCalc,transfer_techs,pc_transfer_flowProfile)
6665      = sum(linksData$links_aggregate(linksModelToCalc,linksData),
6666              transfer_hasflowProfileIn(linksData,yearsToCalc,transfer_techs,pc_transfer_flowProfile));
6667   
6668  * ==== parameter modifications ====
6669  transfer_linksParam(linksModelToCalc,yearsToCalc,transfer_techs,"linksLowerLimit")
6670      $sum(vintage, transfer_techParam(transfer_techs,vintage,"mipLinks"))
6671      = floor(transfer_linksParam(linksModelToCalc,yearsToCalc,transfer_techs,"linksLowerLimit"));
6672  transfer_linksParam(linksModelToCalc,yearsToCalc,transfer_techs,"linksUpperLimit")
6673      $sum(vintage, transfer_techParam(transfer_techs,vintage,"mipLinks"))
6674      = ceil(transfer_linksParam(linksModelToCalc,yearsToCalc,transfer_techs,"linksUpperLimit"));
6675   
6676   
6677  * ==== calculation of mappings ====
6678   
6679  * Technologies with a lifeTime > 0 are available
6680  set transfer_availTech(linksModel,years,transfer_techs,vintage);
6681  transfer_availTech(linksModel,years,transfer_techs,vintage)
6682      $(vintage.val = smax(vintage_a$(vintage_a.val <= years.val
6683          and transfer_techParam(transfer_techs,vintage_a,"lifeTime") > 0), vintage_a.val)) = yes;
6684   
6685  * Technologies to optimize become unavailable if they have an linksUpperLimit of 0
6686  transfer_availTech(linksModelToCalc,years,transfer_techs,vintage)
6687      $(yearsToCalc(years) and transfer_linksParam(linksModelToCalc,years,transfer_techs,"linksUpperLimit") = 0 ) = no;
6688   
6689  * Technologies already built become unavailable if they have an linksBuild of 0
6690  transfer_availTech(linksModelToCalc,years,transfer_techs,vintage)
6691      $( ( not yearsToCalc(years)) and transfer_linksParam(linksModelToCalc,years,transfer_techs,"linksBuild") = 0 ) = no;
6692   
6693  * Used technologies are available technologies over their technical lifeTime
6694  set transfer_usedTech(linksModel,years,transfer_techs,vintage);
6695  transfer_usedTech(linksModelToCalc,years,transfer_techs,vintage)
6696      $(vintage.val <= years.val
6697          and years.val < smax(years_a$transfer_availTech(linksModelToCalc,years_a,transfer_techs,vintage),
6698                                  years_a.val + transfer_techParam(transfer_techs,vintage,"lifeTime"))
6699          ) = yes;
6700   
6701  * Technologies have to be decomissioned in the interval of first avail + lifetime to last avail + lifetime
6702  set transfer_decomTech(linksModel,years,transfer_techs,vintage);
6703  transfer_decomTech(linksModel,years,transfer_techs,vintage)
6704    $(sum(years_a$transfer_usedTech(linksModel,years_a,transfer_techs,vintage), 1)
6705      and sum(yearsToCalc
6706        $(sameas(years, yearsToCalc)
6707          and yearsToCalc.val >= smin(years_a$transfer_availTech(linksModel,years_a,transfer_techs,vintage), years_a.val) + transfer_techParam(transfer_techs,vintage,"lifeTime")
6708          and yearsToCalc.val <= smax(years_a$transfer_availTech(linksModel,years_a,transfer_techs,vintage), years_a.val) + transfer_techParam(transfer_techs,vintage,"lifeTime")), 1))
6709    = yes;
6710   
6711  * Extend the decom frame to the year after the last year of usedTech
6712  transfer_decomTech(linksModel,yearsToCalc,transfer_techs,vintage)
6713    $(transfer_usedTech(linksModel,yearsToCalc-1,transfer_techs,vintage)
6714      and transfer_decomTech(linksModel,yearsToCalc-1,transfer_techs,vintage))
6715    = yes;
6716   
6717  parameter transfer_flowProfile(timeModel,linksModel,years,transfer_techs,vintage,pc_transfer_flowProfile);
6718   
6719  transfer_flowProfile(timeModelToCalc,linksModelToCalc,yearsToCalc,transfer_techs,vintage,"along")
6720      $transfer_finiteLinkLimit(linksModelToCalc,yearsToCalc,transfer_techs)
6721      = (sum(linksData$(links_aggregate(linksModelToCalc,linksData)
6722                       and transfer_incidenceData_flip(linksData) = 1),
6723              transfer_flowProfileIn_aggTime(timeModelToCalc,linksData,yearsToCalc,transfer_techs,"along")
6724              * transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"linksUpperLimit"))
6725          + sum(linksData$(links_aggregate(linksModelToCalc,linksData)
6726                          and transfer_incidenceData_flip(linksData) = -1),
6727              transfer_flowProfileIn_aggTime(timeModelToCalc,linksData,yearsToCalc,transfer_techs,"against")
6728              * transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"linksUpperLimit")))
6729      / sum(linksData$links_aggregate(linksModelToCalc,linksData),
6730              transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"linksUpperLimit"));
6731   
6732  transfer_flowProfile(timeModelToCalc,linksModelToCalc,yearsToCalc,transfer_techs,vintage,"against")
6733      $transfer_finiteLinkLimit(linksModelToCalc,yearsToCalc,transfer_techs)
6734      = (sum(linksData$(links_aggregate(linksModelToCalc,linksData)
6735                       and transfer_incidenceData_flip(linksData) = 1),
6736              transfer_flowProfileIn_aggTime(timeModelToCalc,linksData,yearsToCalc,transfer_techs,"against")
6737              * transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"linksUpperLimit"))
6738          + sum(linksData$(links_aggregate(linksModelToCalc,linksData)
6739                          and transfer_incidenceData_flip(linksData) = -1),
6740              transfer_flowProfileIn_aggTime(timeModelToCalc,linksData,yearsToCalc,transfer_techs,"along")
6741              * transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"linksUpperLimit")))
6742      / sum(linksData$links_aggregate(linksModelToCalc,linksData),
6743              transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"linksUpperLimit"));
6744   
6745  transfer_flowProfile(timeModelToCalc,linksModelToCalc,yearsToCalc,transfer_techs,vintage,"along")
6746      $transfer_infiniteLinkLimit(linksModelToCalc,yearsToCalc,transfer_techs)
6747      = (sum(linksData$(links_aggregate(linksModelToCalc,linksData)
6748                       and transfer_incidenceData_flip(linksData) = 1
6749                       and transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"linksUpperLimit") = inf ),
6750              transfer_flowProfileIn_aggTime(timeModelToCalc,linksData,yearsToCalc,transfer_techs,"along"))
6751          + sum(linksData$(links_aggregate(linksModelToCalc,linksData)
6752                          and transfer_incidenceData_flip(linksData) = -1
6753                          and transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"linksUpperLimit") = inf ),
6754              transfer_flowProfileIn_aggTime(timeModelToCalc,linksData,yearsToCalc,transfer_techs,"against")))
6755      / sum(linksData$(links_aggregate(linksModelToCalc,linksData)
6756                      and transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"linksUpperLimit") = inf ),
6757              1);
6758   
6759  transfer_flowProfile(timeModelToCalc,linksModelToCalc,yearsToCalc,transfer_techs,vintage,"against")
6760      $transfer_infiniteLinkLimit(linksModelToCalc,yearsToCalc,transfer_techs)
6761      = (sum(linksData$(links_aggregate(linksModelToCalc,linksData)
6762                       and transfer_incidenceData_flip(linksData) = 1
6763                       and transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"linksUpperLimit") = inf ),
6764              transfer_flowProfileIn_aggTime(timeModelToCalc,linksData,yearsToCalc,transfer_techs,"against"))
6765          + sum(linksData$(links_aggregate(linksModelToCalc,linksData)
6766                          and transfer_incidenceData_flip(linksData) = -1
6767                          and transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"linksUpperLimit") = inf ),
6768              transfer_flowProfileIn_aggTime(timeModelToCalc,linksData,yearsToCalc,transfer_techs,"along")))
6769      / sum(linksData$(links_aggregate(linksModelToCalc,linksData)
6770                      and transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"linksUpperLimit") = inf ),
6771              1);
6772  option clear = transfer_flowProfileIn_aggTime;
6773   
6774  * Orientation of links affects the flowAlongLimit/flowAgainstLimit
6775   
6776  transfer_linksParam(linksModelToCalc,years,transfer_techs,"flowAlongLimit")
6777      $transfer_finiteLinkLimit(linksModelToCalc,years,transfer_techs)
6778      = (sum(linksData$(links_aggregate(linksModelToCalc,linksData)
6779                       and transfer_incidenceData_flip(linksData) = 1),
6780              transfer_linksParamIn(linksData,years,transfer_techs,"flowAlongLimit")
6781              * transfer_linksParamIn(linksData,years,transfer_techs,"linksUpperLimit"))
6782          + sum(linksData$(links_aggregate(linksModelToCalc,linksData)
6783                          and transfer_incidenceData_flip(linksData) = -1),
6784              transfer_linksParamIn(linksData,years,transfer_techs,"flowAgainstLimit")
6785              * transfer_linksParamIn(linksData,years,transfer_techs,"linksUpperLimit")))
6786      / sum(linksData$links_aggregate(linksModelToCalc,linksData),
6787              transfer_linksParamIn(linksData,years,transfer_techs,"linksUpperLimit"));
6788   
6789  transfer_linksParam(linksModelToCalc,years,transfer_techs,"flowAgainstLimit")
6790      $transfer_finiteLinkLimit(linksModelToCalc,years,transfer_techs)
6791      = (sum(linksData$(links_aggregate(linksModelToCalc,linksData)
6792                       and transfer_incidenceData_flip(linksData) = -1),
6793              transfer_linksParamIn(linksData,years,transfer_techs,"flowAlongLimit")
6794              * transfer_linksParamIn(linksData,years,transfer_techs,"linksUpperLimit"))
6795          + sum(linksData$(links_aggregate(linksModelToCalc,linksData)
6796                          and transfer_incidenceData_flip(linksData) = 1),
6797              transfer_linksParamIn(linksData,years,transfer_techs,"flowAgainstLimit")
6798              * transfer_linksParamIn(linksData,years,transfer_techs,"linksUpperLimit")))
6799      / sum(linksData$links_aggregate(linksModelToCalc,linksData),
6800              transfer_linksParamIn(linksData,years,transfer_techs,"linksUpperLimit"));
6801   
6802  transfer_linksParam(linksModelToCalc,years,transfer_techs,"flowAlongLimit")
6803      $transfer_infiniteLinkLimit(linksModelToCalc,years,transfer_techs)
6804      = (sum(linksData$(links_aggregate(linksModelToCalc,linksData)
6805                       and transfer_incidenceData_flip(linksData) = 1
6806                       and transfer_linksParamIn(linksData,years,transfer_techs,"linksUpperLimit") = inf),
6807              transfer_linksParamIn(linksData,years,transfer_techs,"flowAlongLimit"))
6808          + sum(linksData$(links_aggregate(linksModelToCalc,linksData)
6809                          and transfer_incidenceData_flip(linksData) = -1
6810                          and transfer_linksParamIn(linksData,years,transfer_techs,"linksUpperLimit") = inf),
6811              transfer_linksParamIn(linksData,years,transfer_techs,"flowAgainstLimit")))
6812      / sum(linksData$(links_aggregate(linksModelToCalc,linksData)
6813                      and transfer_linksParamIn(linksData,years,transfer_techs,"linksUpperLimit") = inf ),
6814              1);
6815   
6816  transfer_linksParam(linksModelToCalc,years,transfer_techs,"flowAgainstLimit")
6817      $transfer_infiniteLinkLimit(linksModelToCalc,years,transfer_techs)
6818      = (sum(linksData$(links_aggregate(linksModelToCalc,linksData)
6819                       and transfer_incidenceData_flip(linksData) = -1
6820                       and transfer_linksParamIn(linksData,years,transfer_techs,"linksUpperLimit") = inf),
6821              transfer_linksParamIn(linksData,years,transfer_techs,"flowAlongLimit"))
6822          + sum(linksData$(links_aggregate(linksModelToCalc,linksData)
6823                          and transfer_incidenceData_flip(linksData) = 1
6824                          and transfer_linksParamIn(linksData,years,transfer_techs,"linksUpperLimit") = inf),
6825              transfer_linksParamIn(linksData,years,transfer_techs,"flowAgainstLimit")))
6826      / sum(linksData$(links_aggregate(linksModelToCalc,linksData)
6827                      and transfer_linksParamIn(linksData,years,transfer_techs,"linksUpperLimit") = inf ),
6828              1);
6829   
6830  * Mapping for grid segments using DC optimal power flow
6831  set gridSegments_dcopf(linksModel,transfer_techs,gridSegments);
6832  gridSegments_dcopf(linksModelToCalc,transfer_techs,gridSegments)
6833      $transfer_gridSegments(linksModelToCalc,transfer_techs,gridSegments,"useDCopf")
6835      = yes;
6837   
6838  * Ensure each grid segment uses exactly one commodity
6839  parameter checkGridSegmentCommodities(gridSegments);
6840  checkGridSegmentCommodities(gridSegments)
6841      = sum (commodity$(sum((linksModelToCalc,transfer_techs,vintage)
6842                              $( transfer_coefficient(transfer_techs,vintage,commodity,"coefficient") > 0
6843                                  and gridSegments_dcopf(linksModelToCalc,transfer_techs,gridSegments)) , 1) > 0), 1);
6844   
6845  parameter transfer_incidenceSegments(nodesModel,linksModel,years,gridSegments);
6846  transfer_incidenceSegments(nodesModelToCalc,linksModelToCalc,yearsToCalc,gridSegments)
6847      $(sum((transfer_techs,vintage)$(transfer_usedTech(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
6848                                          and gridSegments_dcopf(linksModelToCalc,transfer_techs,gridSegments)
6849                                          and transfer_incidenceModel(nodesModelToCalc,linksModelToCalc) <> 0), 1) > 0)
6850      = transfer_incidenceModel(nodesModelToCalc,linksModelToCalc);
6851   
6852   
6856   
6857  scalar transfer_enableMIP;
6858  transfer_enableMIP = sum(transfer_usedTech(linksModelToCalc,yearsToCalc,transfer_techs,vintage)$transfer_techParam(transfer_techs,vintage,"mipLinks"), 1 );
6859   
6860   
6861  * ==== definition of variables ====
6862   
6863  * Initialise variables for linksBuild
6864  transfer_linksBuild.l(linksModel,years,transfer_techs,vintage)
6865      $transfer_availTech(linksModel,years,transfer_techs,vintage)
6866      = transfer_linksParam(linksModel,years,transfer_techs,"linksBuild");
6867  transfer_linksBuild.lo(linksModel,yearsToCalc,transfer_techs,vintage)
6868      $transfer_availTech(linksModel,yearsToCalc,transfer_techs,vintage)
6869      = transfer_linksBuild.l(linksModel,yearsToCalc,transfer_techs,vintage);
6870  transfer_linksBuild.fx(linksModel,years,transfer_techs,vintage)
6871      $transfer_linksParam(linksModel,years,transfer_techs,"noExpansion")
6872      = transfer_linksBuild.l(linksModel,years,transfer_techs,vintage);
6873   
6874  * Initialise variables for linksDecom
6875  transfer_linksDecom.l(linksModel,years,transfer_techs,vintage)
6876      $(transfer_decomTech(linksModel,years,transfer_techs,vintage)
6877        and years.val < sum(yearsToCalc$(ord(yearsToCalc) = 1), yearsToCalc.val))
6878      = sum((years_a,years_aa)$(sameas(years-1, years_aa)
6879                        and years_a.val > years_aa.val - transfer_techParam(transfer_techs,vintage,'lifeTime')
6880                        and years_a.val <= years.val - transfer_techParam(transfer_techs,vintage,'lifeTime')
6881                        and transfer_availTech(linksModel,years_a,transfer_techs,vintage)),
6882          transfer_linksBuild.l(linksModel,years_a,transfer_techs,vintage));
6883   
6884  transfer_linksDecom.l(linksModel,yearsToCalc,transfer_techs,vintage)
6885    $transfer_decomTech(linksModel,yearsToCalc,transfer_techs,vintage)
6886    = sum(years$
6887          (years.val < sum(yearsToCalc_a$(ord(yearsToCalc_a) = 1), yearsToCalc_a.val)
6888            and transfer_availTech(linksModel,years,transfer_techs,vintage)
6889            and years.val > sum(years_a$sameas(years_a, yearsToCalc-1), years_a.val) - transfer_techParam(transfer_techs,vintage,'lifeTime')
6890            and years.val <= yearsToCalc.val - transfer_techParam(transfer_techs,vintage,'lifeTime')),
6891        transfer_linksBuild.l(linksModel,years,transfer_techs,vintage))
6892      + sum(yearsToCalc_a$
6893          (yearsToCalc_a.val < sum(yearsToCalc_aa$(ord(yearsToCalc_aa) > 1), yearsToCalc_a.val)
6894            and transfer_availTech(linksModel,yearsToCalc_a,transfer_techs,vintage)
6895            and yearsToCalc_a.val > sum(years_a$sameas(years_a, yearsToCalc-1), years_a.val) - transfer_techParam(transfer_techs,vintage,'lifeTime')
6896            and yearsToCalc_a.val <= yearsToCalc.val - transfer_techParam(transfer_techs,vintage,'lifeTime')),
6897        transfer_linksBuild.l(linksModel,yearsToCalc_a,transfer_techs,vintage));
6898        ;
6899   
6900  transfer_linksDecom.lo(linksModel,yearsToCalc,transfer_techs,vintage)
6901      $(transfer_usedTech(linksModel,yearsToCalc,transfer_techs,vintage)
6902          and not transfer_techParam(transfer_techs,vintage,"freeDecom"))
6903      = transfer_linksDecom.l(linksModel,yearsToCalc,transfer_techs,vintage)
6904   
6905  * Calculate planned transfer links expansion
6906  parameter transfer_linksPlanned(linksModel,years,transfer_techs,vintage);
6907  transfer_linksPlanned(linksModel,years,transfer_techs,vintage) = 0;
6908  loop(years,
6909    transfer_linksPlanned(linksModel,years,transfer_techs,vintage)
6910      =
6911      transfer_linksPlanned(linksModel,years-1,transfer_techs,vintage)
6912          $transfer_usedTech(linksModel,years-1,transfer_techs,vintage)
6913      + transfer_linksBuild.l(linksModel,years,transfer_techs,vintage)
6914          $transfer_availTech(linksModel,years,transfer_techs,vintage)
6915      - transfer_linksDecom.l(linksModel,years,transfer_techs,vintage)
6916          $transfer_usedTech(linksModel,years,transfer_techs,vintage);
6917  );
6918   
6919  * Set initial state for planned units
6920  transfer_linksTotal.l(linksModel,years,transfer_techs,vintage)
6921    = transfer_linksPlanned(linksModel,years,transfer_techs,vintage)
6922   
6923  * Calculate if planned links expansion is bound by upper and lower limits
6924  set transfer_linkBoundsFixed(linksModel,years,transfer_techs);
6925  transfer_linkBoundsFixed(linksModel,years,transfer_techs)
6926    $(sum(vintage$transfer_usedTech(linksModel,years,transfer_techs,vintage),
6927          transfer_linksPlanned(linksModel,years,transfer_techs,vintage))
6928      = transfer_linksParam(linksModel,years,transfer_techs,"linksUpperLimit")
6929    and sum(vintage$transfer_usedTech(linksModel,years,transfer_techs,vintage),
6930          transfer_linksPlanned(linksModel,years,transfer_techs,vintage))
6931      = transfer_linksParam(linksModel,years,transfer_techs,"linksLowerLimit"))
6932    = yes;
6933   
6934  * Fix linksBuild, linksDecom, linksTotal if levels are predetermined by upper and lower limits
6935  transfer_linksBuild.fx(linksModel,years,transfer_techs,vintage)
6936    $(transfer_availTech(linksModel,years,transfer_techs,vintage)
6937      and transfer_linkBoundsFixed(linksModel,years,transfer_techs))
6938    = transfer_linksBuild.l(linksModel,years,transfer_techs,vintage);
6939  transfer_linksDecom.fx(linksModel,years,transfer_techs,vintage)
6940    $(transfer_usedTech(linksModel,years,transfer_techs,vintage)
6941      and transfer_linkBoundsFixed(linksModel,years,transfer_techs))
6942    = transfer_linksDecom.l(linksModel,years,transfer_techs,vintage);
6943  transfer_linksTotal.fx(linksModel,years,transfer_techs,vintage)
6944    $(transfer_usedTech(linksModel,years,transfer_techs,vintage)
6945      and transfer_linkBoundsFixed(linksModel,years,transfer_techs))
6946    = transfer_linksTotal.l(linksModel,years,transfer_techs,vintage);
6947   
6948  transfer_linksTotal_MIP.up(linksModel,years,transfer_techs,vintage)
6949      $(transfer_usedTech(linksModel,years,transfer_techs,vintage)
6950        and transfer_techParam(transfer_techs,vintage,"miplinks") = 1)
6951      = transfer_linksParam(linksModel,years,transfer_techs,"linksUpperLimit");
6952   
6953  * Add parameter for fixing capacities during myopic runs
6954  parameter transfer_linksDelta(linksModel,years,transfer_techs);
6955   
6956   
6957  * ==== declaration of equations ====
6958   
6959  equations
6960    Eq_transfer_linksBalance(linksModel,years,transfer_techs,vintage
6961      ) "Ensures the links balance over the planning period."
6962    Eq_transfer_linksFixedDecom(linksModel,years,transfer_techs,vintage
6963      ) "Restricts the fixed decommissioning of links over the planning period."
6964    Eq_transfer_linksFreeDecom(linksModel,years,transfer_techs,vintage
6965      ) "Restricts the free decommissioning of links over the planning period."
6966    Eq_transfer_linksUpperLimit(linksModel,years,transfer_techs
6967      ) "Upper bound for the total number of links."
6968    Eq_transfer_linksLowerLimit(linksModel,years,transfer_techs
6969      ) "Lower bound for the total number of links."
6970    Eq_transfer_linksTotalMIP(linksModel,years,transfer_techs,vintage
6971      ) "Fixes the total number of links to the corresponding integer variable."
6972   
6973    Eq_transfer_flowAlongUpperLimit(timeModel,linksModel,years,transfer_techs,vintage
6974      ) "Upper bound for the flow along the transfer links."
6975    Eq_transfer_flowAgainstUpperLimit(timeModel,linksModel,years,transfer_techs,vintage
6976      ) "Upper bound for the flow against the transfer links."
6977    Eq_transfer_dcopf_angleFlows(timeModel,linksModel,years,gridSegments
6978      )
6979    Eq_transfer_dcopf_cycleFlows(timeModel,years,cycles,gridSegments
6980      )
6981    ;
6982   
6983   
6984  * ==== equation definition ====
6985  * // ## Equations
6986  * // ### Transfer Links Balance
6987  * // Ensures that the transfer between nodes is balanced.
6988  * // {Eq_transfer_linksBalance}
6989  Eq_transfer_linksBalance(linksModelToCalc,yearsSel,transfer_techs,vintage)
6990      $((transfer_usedTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
6991            or sum(years$sameas(years,yearsSel), transfer_usedTech(linksModelToCalc,years-1,transfer_techs,vintage)))
6992          and not transfer_linkBoundsFixed(linksModelToCalc,yearsSel,transfer_techs))
6993      ..
6994      transfer_linksTotal(linksModelToCalc,yearsSel,transfer_techs,vintage)
6995      =e=
6996      sum(yearsToCalc$(ord(yearsToCalc) = 1 and sameas(yearsToCalc, yearsSel)),
6997        sum(years$sameas(years, yearsToCalc),
6998          transfer_linksTotal(linksModelToCalc,years-1,transfer_techs,vintage)
6999            $transfer_usedTech(linksModelToCalc,years-1,transfer_techs,vintage)))
7000      + sum((yearsToCalc)$(ord(yearsToCalc) > 1 and sameas(yearsToCalc, yearsSel)),
7001        transfer_linksTotal(linksModelToCalc,yearsToCalc-1,transfer_techs,vintage)
7002          $transfer_usedTech(linksModelToCalc,yearsToCalc-1,transfer_techs,vintage))
7003      + transfer_linksBuild(linksModelToCalc,yearsSel,transfer_techs,vintage)
7004          $transfer_availTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
7005      - transfer_linksDecom(linksModelToCalc,yearsSel,transfer_techs,vintage)
7006          $transfer_usedTech(linksModelToCalc,yearsSel,transfer_techs,vintage);
7007   
7008  * // ### Transfer Links Fixed Decommissioning
7009  * // Balances fixed link decommissioning.
7010  * // {Eq_transfer_linksFixedDecom}
7011  Eq_transfer_linksFixedDecom(linksModelToCalc,yearsSel,transfer_techs,vintage)
7012      $(transfer_decomTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
7013          and not transfer_techParam(transfer_techs,vintage,"freeDecom") = 1
7014          and not transfer_linkBoundsFixed(linksModelToCalc,yearsSel,transfer_techs))
7015      ..
7016      transfer_linksDecom(linksModelToCalc,yearsSel,transfer_techs,vintage)
7017      =e=
7018      sum(years$
7019          (transfer_availTech(linksModelToCalc,years,transfer_techs,vintage)
7020              and years.val > sum(yearsToCalc$sameas(yearsToCalc+1, yearsSel), yearsToCalc.val) - transfer_techParam(transfer_techs,vintage,'lifeTime')
7021              and years.val <= yearsSel.val - transfer_techParam(transfer_techs,vintage,'lifeTime')),
7022          transfer_linksBuild(linksModelToCalc,years,transfer_techs,vintage));
7023   
7024  * // ### Transfer Links Free Decommissioning
7025  * // Balances free link decommissioning.
7026  * // {Eq_transfer_linksFreeDecom}
7027  Eq_transfer_linksFreeDecom(linksModelToCalc,yearsSel,transfer_techs,vintage)
7028      $((transfer_decomTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
7029          or transfer_usedTech(linksModelToCalc,yearsSel,transfer_techs,vintage))
7030          and transfer_techParam(transfer_techs,vintage,"freeDecom") = 1)
7031      ..
7032      sum(years$
7033            ((transfer_decomTech(linksModelToCalc,years,transfer_techs,vintage)
7034              or transfer_usedTech(linksModelToCalc,years,transfer_techs,vintage))
7035              and years.val < sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)),
7036          transfer_linksDecom(linksModelToCalc,years,transfer_techs,vintage))
7037      + sum(yearsToCalc$
7038            ((transfer_decomTech(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
7039              or transfer_usedTech(linksModelToCalc,yearsToCalc,transfer_techs,vintage))
7040              and yearsToCalc.val >= sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
7041              and yearsToCalc.val <= yearsSel.val),
7042          transfer_linksDecom(linksModelToCalc,yearsToCalc,transfer_techs,vintage))
7043      =g=
7044      sum(years$
7045            (transfer_availTech(linksModelToCalc,years,transfer_techs,vintage)
7046              and years.val < sum(yearsToCalc$(ord(yearsToCalc)=1), yearsToCalc.val) - transfer_techParam(transfer_techs,vintage,'lifeTime')),
7047          transfer_linksBuild(linksModelToCalc,years,transfer_techs,vintage))
7048      + sum(yearsToCalc$
7049            (transfer_availTech(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
7050              and yearsToCalc.val >= sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
7051              and yearsToCalc.val <= yearsSel.val - transfer_techParam(transfer_techs,vintage,'lifeTime')),
7052          transfer_linksBuild(linksModelToCalc,yearsToCalc,transfer_techs,vintage));
7053   
7054  * // ### Transfer Links Lower Limit
7055  * // Ensures link capacity lower limits.
7056  * // {Eq_transfer_linksLowerLimit}
7057  Eq_transfer_linksLowerLimit(linksModelToCalc,yearsSel,transfer_techs)
7058      $(transfer_linksParam(linksModelToCalc,yearsSel,transfer_techs,'linksLowerLimit') > 0 )
7059      ..
7060      sum(vintage$transfer_usedTech(linksModelToCalc,yearsSel,transfer_techs,vintage),
7061          transfer_linksTotal(linksModelToCalc,yearsSel,transfer_techs,vintage))
7062      =g=
7063      transfer_linksParam(linksModelToCalc,yearsSel,transfer_techs,"linksLowerLimit");
7064   
7065  * // ### Transfer Links Upper Limit
7066  * // Ensures link capacity upper limits.
7067  * // {Eq_transfer_linksUpperLimit}
7068  Eq_transfer_linksUpperLimit(linksModelToCalc,yearsSel,transfer_techs)
7069      $(transfer_linksParam(linksModelToCalc,yearsSel,transfer_techs,'linksUpperLimit') >= 0
7070          and transfer_linksParam(linksModelToCalc,yearsSel,transfer_techs,'linksUpperLimit') < +inf )
7071      ..
7072      sum(vintage$transfer_usedTech(linksModelToCalc,yearsSel,transfer_techs,vintage),
7073          transfer_linksTotal(linksModelToCalc,yearsSel,transfer_techs,vintage))
7074      =l=
7075      transfer_linksParam(linksModelToCalc,yearsSel,transfer_techs,"linksUpperLimit");
7076   
7077  * // ### Transfer Links Total MIP
7078  * // Ensures number of MIP links.
7079  * // {Eq_transfer_linksTotalMIP}
7080  Eq_transfer_linksTotalMIP(linksModelToCalc,yearsSel,transfer_techs,vintage)
7081      $(transfer_usedTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
7082          and transfer_techParam(transfer_techs,vintage,"mipLinks"))
7083      ..
7084      transfer_linksTotal(linksModelToCalc,yearsSel,transfer_techs,vintage)
7085      =e=
7086      transfer_linksTotal_MIP(linksModelToCalc,yearsSel,transfer_techs,vintage);
7087   
7088  * // ### Transfer Links Flow Along Upper Limit
7089  * // Ensures links flow along upper limit.
7090  * // {Eq_transfer_flowAlongUpperLimit}
7091  Eq_transfer_flowAlongUpperLimit(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
7092      $transfer_usedTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
7093      ..
7094      transfer_flowAlong(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
7095      =l=
7096      transfer_flowProfile(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage,"along")
7097      * transfer_linksTotal(linksModelToCalc,yearsSel,transfer_techs,vintage)
7098      * transfer_techParam(transfer_techs,vintage,"flowUpperLimit")
7099      ;
7100   
7101  * // ### Transfer Links Flow Against Upper Limit
7102  * // Ensures links flow against upper limit.
7103  * // {Eq_transfer_flowAgainstUpperLimit}
7104  Eq_transfer_flowAgainstUpperLimit(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
7105      $transfer_usedTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
7106      ..
7107      transfer_flowAgainst(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
7108      =l=
7109      transfer_flowProfile(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage,"against")
7110      * transfer_linksTotal(linksModelToCalc,yearsSel,transfer_techs,vintage)
7111      * transfer_techParam(transfer_techs,vintage,"flowUpperLimit")
7112      ;
7113   
7114  set transfer_usedOpf(linksModel,years,gridSegments,transfer_techs,vintage);
7115  transfer_usedOpf(linksModel,yearsToCalc,gridSegments,transfer_techs,vintage)
7116      $(transfer_usedTech(linksModel,yearsToCalc,transfer_techs,vintage)
7117          and gridSegments_dcopf(linksModel,transfer_techs,gridSegments))
7118      = yes;
7119   
7120  set transfer_usedOpfLinks(linksModel,years,gridSegments);
7121  option transfer_usedOpfLinks < transfer_usedOpf;
7122   
7123  set transfer_usedOpfSegments(years,gridSegments);
7124  option transfer_usedOpfSegments < transfer_usedOpf;
7125   
7129  * // ### Transfer DC optimal flow angle flows
7130  * // Angle flows.
7131  * // {Eq_transfer_dcopf_cycleFlows}
7132  Eq_transfer_dcopf_angleFlows(timeModelSel,linksModelToCalc,yearsSel,gridSegments)
7133      $transfer_usedOpfLinks(linksModelToCalc,yearsSel,gridSegments)
7134      ..
7135      sum ((transfer_techs,vintage)
7136              $transfer_usedOpf(linksModelToCalc,yearsSel,gridSegments,transfer_techs,vintage),
7137          ( transfer_flowAlong(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
7138              - transfer_flowAgainst(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage) )
7139          * transfer_dcopf_Xtech(linksModelToCalc,yearsSel,transfer_techs,vintage,gridSegments) )
7140      =e=
7141      sum ( nodesModelSel,
7142          - transfer_incidenceModel(nodesModelSel,linksModelToCalc)
7143          * transfer_dcopf_voltageAngle(timeModelSel,nodesModelSel,yearsSel,gridSegments));
7147   
7148   
7149  * ==== model definition ====
7150   
7151  Model M_transfer
7152  /
7153    Eq_transfer_linksBalance
7154    Eq_transfer_linksFixedDecom
7155    Eq_transfer_linksFreeDecom
7156    Eq_transfer_linksLowerLimit
7157    Eq_transfer_linksUpperLimit
7158    Eq_transfer_linksTotalMIP
7159    Eq_transfer_flowAlongUpperLimit
7160    Eq_transfer_flowAgainstUpperLimit
7164    Eq_transfer_dcopf_angleFlows
7168  /;
INCLUDE    C:\Local\REMix\framework\remix\framework\model\source\core\sourcesink.gms
7170  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
7171  * SPDX-License-Identifier: BSD-3-Clause
7172   
7173  * // # core_sourcesink
7174  * // The equations in this file describe the sources and sinks in the model.
7175   
7176  * // ## Variables
7177  * // {special_table_sourcesink_variables}
----   7415 Data Decla sourcesink_profileLoad    0.140    14.547 SECS    123 MB  665592
7604   
7605  * // ## Aggregation of profiles
7606  * // Profiles are rescaled based on the annual sum.
7607   
7608  set sourcesink_usesProfileScaling(nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile);
7609  sourcesink_usesProfileScaling(nodesData,years,sourcesink_techs,commodity,"fixed")
7610      $sourcesink_configIn(nodesData,years,sourcesink_techs,commodity,"scaleFixProfileWithFixSum") = yes;
7611  sourcesink_usesProfileScaling(nodesData,years,sourcesink_techs,commodity,"lower")
7612      $sourcesink_configIn(nodesData,years,sourcesink_techs,commodity,"scaleLowProfileWithLowSum") = yes;
7613  sourcesink_usesProfileScaling(nodesData,years,sourcesink_techs,commodity,"upper")
7614      $sourcesink_configIn(nodesData,years,sourcesink_techs,commodity,"scaleUpProfileWithUpSum") = yes;
7615   
7616  parameter sourcesink_ProfileSum(nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile);
7617  sourcesink_ProfileSum(nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile)
7618      $sourcesink_usesProfileScaling(nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile)
7619      = sum(timeData, sourcesink_profileIn(timeData,nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile));
7620   
7621  parameter sourcesink_ProfileAbsSum(nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile);
7622  sourcesink_ProfileAbsSum(nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile)
7623      $sourcesink_usesProfileScaling(nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile)
7624      = sum(timeData, abs(sourcesink_profileIn(timeData,nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile)));
7625   
7626  set sourcesink_ProfileScaleError(nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile);
7627  sourcesink_ProfileScaleError(nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile)
7628      $(sourcesink_usesProfileScaling(nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile)
7629          and sourcesink_ProfileSum(nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile) = 0
7630          and sourcesink_ProfileAbsSum(nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile) > 0)
7631      = yes;
7632   
7633  abort$sum((nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile),
7634              sourcesink_ProfileScaleError(nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile)) "One or more profiles cannot be rescaled as their annual sum equals zero!"
7635   
7636  * calculate scaling factor for each type
7637  parameter sourcesink_scalingFactor(nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile);
7638  sourcesink_scalingFactor(nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile)
7639      $(sourcesink_ProfileSum(nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile)
7640          and sourcesink_usesProfileScaling(nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile))
7641      = sum(pc_sourcesink_annualSum$sameas(pc_sourcesink_profile,pc_sourcesink_annualSum),
7642          sourcesink_annualSumIn(nodesData,years,sourcesink_techs,commodity,pc_sourcesink_annualSum)
7643              / sourcesink_ProfileSum(nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile));
7644   
7645  * rescale profiles
7646  sourcesink_profileIn(timeData,nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile)
7647      $sourcesink_usesProfileScaling(nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile)
7648      = sourcesink_profileIn(timeData,nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile)
7649          * sourcesink_scalingFactor(nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile)
7650   
7651  * // ## Aggregation of profiles
7652  * // Profiles are aggregated based on the mapping from data nodes to model nodes.
7653   
7654  * ==== aggregation of profiles ====
7655  set sourcesink_usesProfileIn(nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile);
7656  option sourcesink_usesProfileIn < sourcesink_profileIn
7657   
7658  set sourcesink_usesProfile(nodesModel,years,sourcesink_techs,commodity,pc_sourcesink_profile);
7659  sourcesink_usesProfile(nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity,pc_sourcesink_profile)
7660      $sum(nodesData$(aggregateNodesModel(nodesData,nodesModelToCalc)
7661          and sourcesink_usesProfileIn(nodesData,yearsToCalc,sourcesink_techs,commodity,pc_sourcesink_profile)), 1)
7662      = yes;
7663   
7664  * aagregate time dimension
7665  parameter sourcesink_profileIn_aggTime(timeModel,nodesData,yearsToCalc,sourcesink_techs,commodity,pc_sourcesink_profile);
7666  sourcesink_profileIn_aggTime(timeModelToCalc,nodesData,yearsToCalc,sourcesink_techs,commodity,pc_sourcesink_profile)
7667    $sourcesink_usesProfileIn(nodesData,yearsToCalc,sourcesink_techs,commodity,pc_sourcesink_profile)
7668    = sum(timeData$timeMapping(timeData,timeModelToCalc),
7669            sourcesink_profileIn(timeData,nodesData,yearsToCalc,sourcesink_techs,commodity,pc_sourcesink_profile)
7670            / timeLength(timeModelToCalc));
7671  option clear = sourcesink_profileIn;
7672   
7673  * sum up absolute profiles
7674  parameter sourcesink_profile(timeModel,nodesModel,years,sourcesink_techs,commodity,pc_sourcesink_profile);
7675  sourcesink_profile(timeModelToCalc,nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity,pc_sourcesink_profile)
7676      $sourcesink_usesProfile(nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity,pc_sourcesink_profile)
7677      = sum(nodesData$aggregateNodesModel(nodesData,nodesModelToCalc),
7678              sourcesink_profileIn_aggTime(timeModelToCalc,nodesData,yearsToCalc,sourcesink_techs,commodity,pc_sourcesink_profile));
7679  option clear = sourcesink_profileIn_aggTime;
7680   
7681  set sourcesink_enabled(nodesModel,years,sourcesink_techs,commodity);
7682  option sourcesink_enabled < sourcesink_config;
7683   
7685   
7686  * ==== declaration of variables ====
7687  * // ## Bounding of variables
7688  * // Source-sink variables with either a lower, fixed, or upper profile are bounded to their respective profiles given by the input parameters.
7689   
7690  sourcesink_flow.lo(timeModelToCalc,nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity)
7691      $( sourcesink_enabled(nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity)
7692          and sourcesink_config(nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity,"usesLowerProfile") = 1
7693          and sourcesink_profile(timeModelToCalc,nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity,"lower") > -inf )
7694      = sourcesink_profile(timeModelToCalc,nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity,"lower");
7695   
7696  sourcesink_flow.up(timeModelToCalc,nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity)
7697      $( sourcesink_enabled(nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity)
7698          and sourcesink_config(nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity,"usesUpperProfile") = 1
7699          and sourcesink_profile(timeModelToCalc,nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity,"upper") < inf )
7700      = sourcesink_profile(timeModelToCalc,nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity,"upper");
7701   
7702  sourcesink_flow.fx(timeModelToCalc,nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity)
7703      $( sourcesink_enabled(nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity)
7704          and sourcesink_config(nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity,"usesFixedProfile") = 1 )
7705      = sourcesink_profile(timeModelToCalc,nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity,"fixed");
7706   
7707  option clear = sourcesink_profile;
7708   
7709   
7710  * ==== equation definition ====
7711  * // ## Equations
7712  equations
7713  Eq_sourcesink_useFixedSum(nodesModel,years,sourcesink_techs,commodity
7714      ) "Fixes the annual sum from sources / to sinks"
7715  Eq_sourcesink_useLowerSum(nodesModel,years,sourcesink_techs,commodity
7716      ) "Limits the lower sum from sources / to sinks"
7717  Eq_sourcesink_useUpperSum(nodesModel,years,sourcesink_techs,commodity
7718      ) "Limits the upper sum from sources / to sinks"
7719    ;
7720   
7721  * // ### Fixed annual sums for sources and sinks
7722  * // Ensures that the sources and sinks with annual sums given as fixed limits are balanced.
7723  * // {Eq_sourcesink_useFixedSum}
7724  Eq_sourcesink_useFixedSum(nodesModelSel,yearsSel,sourcesink_techs,commodity)
7725      $( sourcesink_enabled(nodesModelSel,yearsSel,sourcesink_techs,commodity)
7726          and sourcesink_config(nodesModelSel,yearsSel,sourcesink_techs,commodity,"usesFixedSum") = 1 )
7727      ..
7728      sum(timeModelSel,
7729          sourcesink_flow(timeModelSel,nodesModelSel,yearsSel,sourcesink_techs,commodity))
7730      =e=
7731      sourcesink_annualSum(nodesModelSel,yearsSel,sourcesink_techs,commodity,"fixed")
7732      ;
7733   
7734  * // ### Lower annual sums for sources and sinks
7735  * // Ensures that the sources and sinks with annual sums given as lower limits are balanced.
7736  * // {Eq_sourcesink_useLowerSum}
7737  Eq_sourcesink_useLowerSum(nodesModelSel,yearsSel,sourcesink_techs,commodity)
7738      $( sourcesink_enabled(nodesModelSel,yearsSel,sourcesink_techs,commodity)
7739          and sourcesink_config(nodesModelSel,yearsSel,sourcesink_techs,commodity,"usesLowerSum") = 1
7740          and sourcesink_annualSum(nodesModelSel,yearsSel,sourcesink_techs,commodity,"lower") > -inf )
7741      ..
7742      sum(timeModelSel,
7743          sourcesink_flow(timeModelSel,nodesModelSel,yearsSel,sourcesink_techs,commodity))
7744      =g=
7745      sourcesink_annualSum(nodesModelSel,yearsSel,sourcesink_techs,commodity,"lower")
7746      ;
7747   
7748  * // ### Upper annual sums for sources and sinks
7749  * // Ensures that the sources and sinks with annual sums given as upper limits are balanced.
7750  * // {Eq_sourcesink_useUpperSum}
7751  Eq_sourcesink_useUpperSum(nodesModelSel,yearsSel,sourcesink_techs,commodity)
7752      $( sourcesink_enabled(nodesModelSel,yearsSel,sourcesink_techs,commodity)
7753          and sourcesink_config(nodesModelSel,yearsSel,sourcesink_techs,commodity,"usesUpperSum") = 1
7754          and sourcesink_annualSum(nodesModelSel,yearsSel,sourcesink_techs,commodity,"upper") < inf )
7755      ..
7756      sum(timeModelSel,
7757          sourcesink_flow(timeModelSel,nodesModelSel,yearsSel,sourcesink_techs,commodity))
7758      =l=
7759      sourcesink_annualSum(nodesModelSel,yearsSel,sourcesink_techs,commodity,"upper")
7760      ;
7761   
7762   
7763  * ==== model definition ====
7764   
7765  Model M_sourcesink
7766  /
7767    Eq_sourcesink_useFixedSum
7768    Eq_sourcesink_useLowerSum
7769    Eq_sourcesink_useUpperSum
7770  /;
INCLUDE    C:\Local\REMix\framework\remix\framework\model\source\core\balance.gms
7772  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
7773  * SPDX-License-Identifier: BSD-3-Clause
7774   
7775  * // # balance
7776  * // The equations in this file describe the commodity balancing in the model.
7777   
7778  Equations
7779    Eq_balance_commodities(timeModel,nodesModel,years,commodity
7780      ) "Balance for each commodity used in each time step, region, and year";
7781   
7782   
7783  * ==== calculation of mappings ====
7784   
7785  set balance_techComm(techs,commodity);
7786  balance_techComm(converter_techs(techs),commodity)
7787      $sum((vintage,activity)$converter_coefficient(converter_techs,vintage,activity,commodity,"coefficient"), 1) = yes;
7788  balance_techComm(storage_techs(techs),commodity)
7789      $sum((vintage)$storage_sizeParam(storage_techs,vintage,commodity,"size"), 1) = yes;
7790  balance_techComm(transfer_techs(techs),commodity)
7791      $sum((vintage)$transfer_coefficient(transfer_techs,vintage,commodity,"coefficient"), 1) = yes;
7792  balance_techComm(sourcesink_techs(techs),commodity)
7793      $sum((nodesModelToCalc,yearsToCalc)$sourcesink_enabled(nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity), 1) = yes;
7794   
7795  set balance_usedConverter(nodesModel,years,commodity);
7796  set balance_usedStorage(nodesModel,years,commodity);
7797  set balance_usedTransfer(nodesModel,years,commodity);
7798  set balance_usedSourceSink(nodesModel,years,commodity);
7799  set balance_usedBalance(nodesModel,years,commodity);
7800   
7801  balance_usedConverter(nodesModel,years,commodity)
7802      = sum ((converter_techs,vintage,activity)
7803              $( converter_coefficient(converter_techs,vintage,activity,commodity,"coefficient") <> 0
7804                  and converter_usedTech(nodesModel,years,converter_techs,vintage) ), 1);
7805   
7806  balance_usedStorage(nodesModel,years,commodity)
7807      = sum ((storage_techs,vintage,activity)
7808              $(storage_sizeParam(storage_techs,vintage,commodity,"size") <> 0
7809                  and storage_usedTech(nodesModel,years,storage_techs,vintage) ), 1);
7810   
7811  balance_usedTransfer(nodesModel,years,commodity)
7812      = sum ((linksModel,transfer_techs,vintage)
7813              $(transfer_coefficient(transfer_techs,vintage,commodity,"coefficient") <> 0
7814                  and transfer_incidenceModel(nodesModel,linksModel) <> 0), 1);
7815   
7816  option balance_usedSourceSink < sourcesink_enabled;
7817   
7818  balance_usedBalance(nodesModel,years,commodity)
7819      $(balance_usedConverter(nodesModel,years,commodity)
7820          or balance_usedStorage(nodesModel,years,commodity)
7821          or balance_usedTransfer(nodesModel,years,commodity)
7822          or balance_usedSourceSink(nodesModel,years,commodity) )
7823      = yes;
7824   
7825   
7826  * ==== equation definition ====
7827   
7828  * // ### Balance commodities
7829  * // Balancing of commodities for all model regions, time steps, and years
7830  * // {Eq_balance_commodities}
7831  Eq_balance_commodities(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,commodity)
7832      $balance_usedBalance(nodesModelSel,yearsSel,commodity)
7833      ..
7834  * converter
7835      sum((converter_techs,vintage,activity)
7836              $( converter_coefficientProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity,commodity) <> 0
7837                  AND converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage) ),
7838          converter_activity(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity)
7839              * converter_coefficientProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity,commodity)
7840              * timeLength(timeModelSel)
7841          + converter_unitsUsingActivity_MIP(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity)
7842              * converter_coefficient(converter_techs,vintage,activity,commodity,"constant")
7843              * timeLength(timeModelSel))
7844   
7845  * storages
7846      + sum((storage_techs,vintage)
7847              $( storage_sizeParam(storage_techs,vintage,commodity,"size") <> 0
7848                  and storage_usedTech(nodesModelSel,yearsSel,storage_techs,vintage) ),
7849          storage_level(timeModelToCalc--1,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
7850          - storage_level(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
7852          - storage_losses(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
7853          * timeLength(timeModelSel)
7855          )
7856   
7857  * transfer
7858      + sum((linksModel,transfer_techs,vintage)
7859              $(transfer_usedTech(linksModel,yearsSel,transfer_techs,vintage)
7860                  and linksModelToCalc(linksModel)),
7861          (   transfer_flowAlong(timeModelSel,linksModel,yearsSel,transfer_techs,vintage)
7862                  $(transfer_incidenceModel(nodesModelSel,linksModel) > 0)
7863            + transfer_flowAgainst(timeModelSel,linksModel,yearsSel,transfer_techs,vintage)
7864                  $(transfer_incidenceModel(nodesModelSel,linksModel) < 0) )
7865          * transfer_coefficient(transfer_techs,vintage,commodity,"coefficient")
7866          * timeLength(timeModelSel))
7867   
7868      - sum((linksModel,transfer_techs,vintage)
7869              $(transfer_usedTech(linksModel,yearsSel,transfer_techs,vintage)
7870                  and linksModelToCalc(linksModel)),
7871          (   transfer_flowAlong(timeModelSel,linksModel,yearsSel,transfer_techs,vintage)
7872                  $(transfer_incidenceModel(nodesModelSel,linksModel) < 0)
7873            + transfer_flowAgainst(timeModelSel,linksModel,yearsSel,transfer_techs,vintage)
7874                  $(transfer_incidenceModel(nodesModelSel,linksModel) > 0) )
7875          * transfer_coefficient(transfer_techs,vintage,commodity,"coefficient")
7876          * timeLength(timeModelSel))
7877   
7878      + 0.5 * sum((linksModel,transfer_techs,vintage)
7879              $(transfer_usedTech(linksModel,yearsSel,transfer_techs,vintage)
7880                  AND linksModelToCalc(linksModel)),
7881          (   transfer_flowAlong(timeModelSel,linksModel,yearsSel,transfer_techs,vintage)
7882                  $(transfer_incidenceModel(nodesModelSel,linksModel) <> 0)
7883            + transfer_flowAgainst(timeModelSel,linksModel,yearsSel,transfer_techs,vintage)
7884                  $(transfer_incidenceModel(nodesModelSel,linksModel) <> 0) )
7885          * timeLength(timeModelSel)
7886          * ( transfer_coefPerFlow(transfer_techs,vintage,commodity,"coefPerFlow")
7887              + sum(link_types,
7888                  transfer_coefPerLength(transfer_techs,vintage,commodity,link_types,"coefPerLength")
7889                  * transfer_lengthParam(linksModel,link_types,"length"))))
7890   
7891  * sourcesink
7892      + sum((sourcesink_techs)
7893              $sourcesink_enabled(nodesModelSel,yearsSel,sourcesink_techs,commodity),
7894          sourcesink_flow(timeModelSel,nodesModelSel,yearsSel,sourcesink_techs,commodity)
7895          * timeLength(timeModelSel))
7896      =e=
7897      0;
7898   
7899   
7900  * ==== model definition ====
7901   
7902  Model M_balance
7903  /
7904    Eq_balance_commodities
7905  /;
7906   
INCLUDE    C:\Local\REMix\framework\remix\framework\model\source\accounting\equations.gms
7908  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
7909  * SPDX-License-Identifier: BSD-3-Clause
7910   
7911  * // # accounting_equations
7912   
7913  * ==== declaration of variables ====
7914   
7915  variables
7916  accounting_indicator(accNodesModel,accYears,indicator)
7917  accounting_indicator_links(linksModel,years,indicator)
7918  accounting_objective
7919    ;
7920   
7921   
7922  * ==== definition of variables ====
7923   
7924  * set the variable levels to be fixed for years before the optimization years
7925  accounting_indicator.l(accNodesModel,accYears,indicator)
7926      $activeIndicators(accNodesModel,accYears,indicator)
7927      = 0;
7928   
7929  accounting_indicator.lo(accNodesModel,accYears,indicator)
7930      $(accounting_indicatorBounds(accNodesModel,accYears,indicator,"useLower") <> 0 )
7931      = accounting_indicatorBounds(accNodesModel,accYears,indicator,"lowerValue");
7932   
7933  accounting_indicator.up(accNodesModel,accYears,indicator)
7934      $(accounting_indicatorBounds(accNodesModel,accYears,indicator,"useUpper") <> 0 )
7935      = accounting_indicatorBounds(accNodesModel,accYears,indicator,"upperValue");
7936   
7937  accounting_indicator.fx(accNodesModel,accYears,indicator)
7938      $(accounting_indicatorBounds(accNodesModel,accYears,indicator,"useFixed") <> 0 )
7939      = accounting_indicatorBounds(accNodesModel,accYears,indicator,"fixedValue");
7940   
7941   
7942  accounting_indicator_links.lo(linksModelToCalc,yearsToCalc,indicator)
7943      $(accounting_indicatorBounds_links(linksModelToCalc,yearsToCalc,indicator,"useLower") <> 0 )
7944      = accounting_indicatorBounds_links(linksModelToCalc,yearsToCalc,indicator,"lowerValue");
7945   
7946  accounting_indicator_links.up(linksModelToCalc,yearsToCalc,indicator)
7947      $(accounting_indicatorBounds_links(linksModelToCalc,yearsToCalc,indicator,"useUpper") <> 0 )
7948      = accounting_indicatorBounds_links(linksModelToCalc,yearsToCalc,indicator,"upperValue");
7949   
7950  accounting_indicator_links.fx(linksModelToCalc,yearsToCalc,indicator)
7951      $(accounting_indicatorBounds_links(linksModelToCalc,yearsToCalc,indicator,"useFixed") <> 0 )
7952      = accounting_indicatorBounds_links(linksModelToCalc,yearsToCalc,indicator,"fixedValue");
7953   
7954   
7955  * ==== declaration of equations ====
7956   
7957  equations
7958  Eq_accounting_indicatorCalc(accNodesModel,accYears,indicator
7959      ) "Calculates the level of an indicator per accounting region"
7960  Eq_accounting_indicatorCalc_links(linksModel,years,indicator
7961      ) "Calculates the level of an indicator per model link"
7962  Eq_accounting_objective "Calculates the objective value based on the specified indicator"
7963    ;
7964   
7965   
7966  * ==== equations definition ====
7967  * // ## Equations
7968  * // ### Accounting Indicator Calculation
7969  * // Calculates the indicators for each model node for converters, sources and sinks, transfer, storage and variable indicators.
7970  * // {Eq_accounting_indicatorCalc}
7971  Eq_accounting_indicatorCalc(accNodesModel,accYearsSel(accYears),indicator)
7972      $activeIndicators(accNodesModel,accYears,indicator)
7973      ..
7974      accounting_indicator(accNodesModel,accYears,indicator)
7975      =e=
7976   
7977  * == variable indicators ==
7978      sum((accNodesModel_a,accYears_a,indicator_a)
7979          $(compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
7980              and variableIndicators(accNodesModel_a,accYears_a,indicator_a)),
7981          compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
7982          * accounting_indicator(accNodesModel_a,accYears_a,indicator_a))
7983   
7984  * == converters ==
7985      + sum ((accNodesModel_a,nodesModelSel,accYears_a,yearsSel,indicator_a)
7986              $( compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
7987                  and sameas(nodesModelSel,accNodesModel_a) and sameas(yearsSel,accYears_a)),
7988          compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
7989          *
7990          ( sum ((converter_techs,vintage)
7991                      $(converter_availTech(nodesModelSel,yearsSel,converter_techs,vintage)
7992                          and accounting_converterUnits(indicator_a,nodesModelSel,converter_techs,vintage,"useAnnuity") = 0),
7993              converter_unitsBuild(nodesModelSel,yearsSel,converter_techs,vintage)
7994              * accounting_converterUnits(indicator_a,nodesModelSel,converter_techs,vintage,"perUnitBuild"))
7995   
7996          + sum ((years_a,converter_techs,vintage)
7997                      $(converter_availTech(nodesModelSel,years_a,converter_techs,vintage)
7998                          and years_a.val < sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
7999                          and accounting_converterUnits(indicator_a,nodesModelSel,converter_techs,vintage,"useAnnuity") = 1
8000                          and years_a.val + accounting_converterUnits(indicator_a,nodesModelSel,converter_techs,vintage,"amorTime") > yearsSel.val
8001                          and years_a.val <= yearsSel.val ),
8002              converter_unitsBuild(nodesModelSel,years_a,converter_techs,vintage)
8003              * accounting_converterUnits(indicator_a,nodesModelSel,converter_techs,vintage,"perUnitBuild")
8004              * accounting_annuityFactor_converter(indicator_a,nodesModelSel,converter_techs,vintage) )
8005   
8006          + sum ((yearsToCalc,converter_techs,vintage)
8007                      $(converter_availTech(nodesModelSel,yearsToCalc,converter_techs,vintage)
8008                          and yearsToCalc.val >= sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
8009                          and accounting_converterUnits(indicator_a,nodesModelSel,converter_techs,vintage,"useAnnuity") = 1
8010                          and yearsToCalc.val + accounting_converterUnits(indicator_a,nodesModelSel,converter_techs,vintage,"amorTime") > yearsSel.val
8011                          and yearsToCalc.val <= yearsSel.val ),
8012              converter_unitsBuild(nodesModelSel,yearsToCalc,converter_techs,vintage)
8013              * accounting_converterUnits(indicator_a,nodesModelSel,converter_techs,vintage,"perUnitBuild")
8014              * accounting_annuityFactor_converter(indicator_a,nodesModelSel,converter_techs,vintage) )
8015   
8016          + sum ((converter_techs,vintage)
8017                      $converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage),
8018              converter_unitsDecom(nodesModelSel,yearsSel,converter_techs,vintage)
8019              * accounting_converterUnits(indicator_a,nodesModelSel,converter_techs,vintage,"perUnitDecom")
8020   
8021              + converter_unitsTotal(nodesModelSel,yearsSel,converter_techs,vintage)
8022              * accounting_converterUnits(indicator_a,nodesModelSel,converter_techs,vintage,"perUnitTotal") )
8023   
8024          + sum ((timeModelSel,converter_techs,vintage,activity)
8025                      $converter_usedTechAct(nodesModelSel,yearsSel,converter_techs,vintage,activity),
8026              converter_activity(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity)
8027              * timeLength(timeModelSel)
8028              * accounting_converterActivity(indicator_a,nodesModelSel,converter_techs,vintage,activity,"perActivity") )
8029   
8030          + sum ((timeModelSel,converter_techs,vintage)
8031                      $converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage),
8032              converter_unitStartups(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
8033              * accounting_converterStartup(indicator_a,nodesModelSel,converter_techs,vintage,"perStartup") )
8034   
8035          + sum ((timeModelSel,converter_techs,vintage)
8036                      $converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage),
8037              converter_rampPos(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
8038              * (accounting_converterStartup(indicator_a,nodesModelSel,converter_techs,vintage,"perRamp")
8039                 + accounting_converterStartup(indicator_a,nodesModelSel,converter_techs,vintage,"perRampPos"))
8040   
8041              + converter_rampNeg(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
8042              * (accounting_converterStartup(indicator_a,nodesModelSel,converter_techs,vintage,"perRamp")
8043                 + accounting_converterStartup(indicator_a,nodesModelSel,converter_techs,vintage,"perRampNeg")))
8044          )
8045      )
8046   
8047  * == storage ==
8048      + sum ((accNodesModel_a,nodesModelSel,accYears_a,yearsSel,indicator_a)
8049              $( compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
8050                  and sameas(nodesModelSel,accNodesModel_a) and sameas(yearsSel,accYears_a)),
8051          compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
8052          *
8053          ( sum ((storage_techs,vintage)
8054                      $(storage_availTech(nodesModelSel,yearsSel,storage_techs,vintage)
8055                          and accounting_storageUnits(indicator_a,nodesModelSel,storage_techs,vintage,"useAnnuity") = 0),
8056              storage_unitsBuild(nodesModelSel,yearsSel,storage_techs,vintage)
8057              * accounting_storageUnits(indicator_a,nodesModelSel,storage_techs,vintage,"perUnitBuild") )
8058   
8059          + sum ((years_a,storage_techs,vintage)
8060                      $(storage_availTech(nodesModelSel,years_a,storage_techs,vintage)
8061                          and years_a.val < sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
8062                          and accounting_storageUnits(indicator_a,nodesModelSel,storage_techs,vintage,"useAnnuity") = 1
8063                          and years_a.val + accounting_storageUnits(indicator_a,nodesModelSel,storage_techs,vintage,"amorTime") > yearsSel.val
8064                          and years_a.val <= yearsSel.val ),
8065              storage_unitsBuild(nodesModelSel,years_a,storage_techs,vintage)
8066              * accounting_storageUnits(indicator_a,nodesModelSel,storage_techs,vintage,"perUnitBuild")
8067              * accounting_annuityFactor_storage(indicator_a,nodesModelSel,storage_techs,vintage) )
8068   
8069          + sum ((yearsToCalc,storage_techs,vintage)
8070                      $(storage_availTech(nodesModelSel,yearsToCalc,storage_techs,vintage)
8071                          and yearsToCalc.val >= sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
8072                          and accounting_storageUnits(indicator_a,nodesModelSel,storage_techs,vintage,"useAnnuity") = 1
8073                          and yearsToCalc.val + accounting_storageUnits(indicator_a,nodesModelSel,storage_techs,vintage,"amorTime") > yearsSel.val
8074                          and yearsToCalc.val <= yearsSel.val ),
8075              storage_unitsBuild(nodesModelSel,yearsToCalc,storage_techs,vintage)
8076              * accounting_storageUnits(indicator_a,nodesModelSel,storage_techs,vintage,"perUnitBuild")
8077              * accounting_annuityFactor_storage(indicator_a,nodesModelSel,storage_techs,vintage) )
8078   
8079          + sum ((storage_techs,vintage)
8080                      $storage_usedTech(nodesModelSel,yearsSel,storage_techs,vintage),
8081              storage_unitsDecom(nodesModelSel,yearsSel,storage_techs,vintage)
8082              * accounting_storageUnits(indicator_a,nodesModelSel,storage_techs,vintage,"perUnitDecom")
8083   
8084              + storage_unitsTotal(nodesModelSel,yearsSel,storage_techs,vintage)
8085              * accounting_storageUnits(indicator_a,nodesModelSel,storage_techs,vintage,"perUnitTotal") )
8086          )
8087      )
8088   
8089   
8090  * == transfer ==
8091      + sum ((accNodesModel_a,nodesModelSel,accYears_a,yearsSel,indicator_a)
8092              $( compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
8093                  and sameas(nodesModelSel,accNodesModel_a) and sameas(yearsSel,accYears_a)),
8094          compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
8095          *
8096          ( sum ((linksModelToCalc,transfer_techs,vintage)
8097                      $(transfer_availTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
8098                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0
8099                          and accounting_transferLinks(indicator_a,linksModelToCalc,transfer_techs,vintage,"useAnnuity") = 0),
8100              0.5
8101              * transfer_linksBuild(linksModelToCalc,yearsSel,transfer_techs,vintage)
8102              * accounting_transferLinks(indicator_a,linksModelToCalc,transfer_techs,vintage,"perLinkBuild") )
8103   
8104          + sum ((linksModelToCalc,years_a,transfer_techs,vintage)
8105                      $(transfer_availTech(linksModelToCalc,years_a,transfer_techs,vintage)
8106                          and years_a.val < sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
8107                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0
8108                          and accounting_transferLinks(indicator_a,linksModelToCalc,transfer_techs,vintage,"useAnnuity") = 1
8109                          and years_a.val + accounting_transferLinks(indicator_a,linksModelToCalc,transfer_techs,vintage,"amorTime") > yearsSel.val
8110                          and years_a.val <= yearsSel.val ),
8111              0.5
8112              * transfer_linksBuild(linksModelToCalc,years_a,transfer_techs,vintage)
8113              * accounting_transferLinks(indicator_a,linksModelToCalc,transfer_techs,vintage,"perLinkBuild")
8114              * accounting_annuityFactor_transferLink(indicator_a,linksModelToCalc,transfer_techs,vintage) )
8115   
8116          + sum ((linksModelToCalc,yearsToCalc,transfer_techs,vintage)
8117                      $(transfer_availTech(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
8118                          and yearsToCalc.val >= sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
8119                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0
8120                          and accounting_transferLinks(indicator_a,linksModelToCalc,transfer_techs,vintage,"useAnnuity") = 1
8121                          and yearsToCalc.val + accounting_transferLinks(indicator_a,linksModelToCalc,transfer_techs,vintage,"amorTime") > yearsSel.val
8122                          and yearsToCalc.val <= yearsSel.val ),
8123              0.5
8124              * transfer_linksBuild(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
8125              * accounting_transferLinks(indicator_a,linksModelToCalc,transfer_techs,vintage,"perLinkBuild")
8126              * accounting_annuityFactor_transferLink(indicator_a,linksModelToCalc,transfer_techs,vintage) )
8127   
8128          + sum ((linksModelToCalc,transfer_techs,vintage,link_types)
8129                      $(transfer_availTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
8130                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0
8131                          and accounting_transferPerLength(indicator_a,linksModelToCalc,transfer_techs,vintage,link_types,"useAnnuity") = 0 ),
8132              0.5
8133              * transfer_linksBuild(linksModelToCalc,yearsSel,transfer_techs,vintage)
8134              * transfer_lengthParam(linksModelToCalc,link_types,"length")
8135              * accounting_transferPerLength(indicator_a,linksModelToCalc,transfer_techs,vintage,link_types,"perLengthBuild") )
8136   
8137          + sum ((linksModelToCalc,years_a,transfer_techs,vintage,link_types)
8138                      $(transfer_availTech(linksModelToCalc,years_a,transfer_techs,vintage)
8139                          and years_a.val < sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
8140                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0
8141                          and accounting_transferPerLength(indicator_a,linksModelToCalc,transfer_techs,vintage,link_types,"useAnnuity") = 1
8142                          and years_a.val + accounting_transferPerLength(indicator_a,linksModelToCalc,transfer_techs,vintage,link_types,"amorTime") > yearsSel.val
8143                          and years_a.val <= yearsSel.val ),
8144              0.5
8145              * transfer_linksBuild(linksModelToCalc,years_a,transfer_techs,vintage)
8146              * transfer_lengthParam(linksModelToCalc,link_types,"length")
8147              * accounting_transferPerLength(indicator_a,linksModelToCalc,transfer_techs,vintage,link_types,"perLengthBuild")
8148              * accounting_annuityFactor_transferPerLength(indicator_a,linksModelToCalc,transfer_techs,vintage,link_types) )
8149   
8150          + sum ((linksModelToCalc,yearsToCalc,transfer_techs,vintage,link_types)
8151                      $(transfer_availTech(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
8152                          and yearsToCalc.val >= sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
8153                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0
8154                          and accounting_transferPerLength(indicator_a,linksModelToCalc,transfer_techs,vintage,link_types,"useAnnuity") = 1
8155                          and yearsToCalc.val + accounting_transferPerLength(indicator_a,linksModelToCalc,transfer_techs,vintage,link_types,"amorTime") > yearsSel.val
8156                          and yearsToCalc.val <= yearsSel.val ),
8157              0.5
8158              * transfer_linksBuild(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
8159              * transfer_lengthParam(linksModelToCalc,link_types,"length")
8160              * accounting_transferPerLength(indicator_a,linksModelToCalc,transfer_techs,vintage,link_types,"perLengthBuild")
8161              * accounting_annuityFactor_transferPerLength(indicator_a,linksModelToCalc,transfer_techs,vintage,link_types) )
8162   
8163          + sum ((linksModelToCalc,transfer_techs,vintage)
8164                      $(transfer_usedTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
8165                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0 ),
8166              0.5
8167              * transfer_linksDecom(linksModelToCalc,yearsSel,transfer_techs,vintage)
8168              * accounting_transferLinks(indicator_a,linksModelToCalc,transfer_techs,vintage,"perLinkDecom")
8169   
8170              + 0.5
8171              * transfer_linksTotal(linksModelToCalc,yearsSel,transfer_techs,vintage)
8172              * accounting_transferLinks(indicator_a,linksModelToCalc,transfer_techs,vintage,"perLinkTotal")
8173   
8174              + 0.5
8175              * sum (link_types,
8176                  transfer_linksDecom(linksModelToCalc,yearsSel,transfer_techs,vintage)
8177                  * transfer_lengthParam(linksModelToCalc,link_types,"length")
8178                  * accounting_transferPerLength(indicator_a,linksModelToCalc,transfer_techs,vintage,link_types,"perLengthDecom")
8179   
8180                  + transfer_linksTotal(linksModelToCalc,yearsSel,transfer_techs,vintage)
8181                  * transfer_lengthParam(linksModelToCalc,link_types,"length")
8182                  * accounting_transferPerLength(indicator_a,linksModelToCalc,transfer_techs,vintage,link_types,"perLengthTotal"))
8183   
8184              + 0.5
8185              * sum (timeModelSel,
8186                  transfer_flowAlong(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
8187                  * timeLength(timeModelSel)
8188                  * ( accounting_transferLinks(indicator_a,linksModelToCalc,transfer_techs,vintage,"perFlow")
8189                      + accounting_transferLinks(indicator_a,linksModelToCalc,transfer_techs,vintage,"perFlowAlong"))
8190   
8191                  + transfer_flowAgainst(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
8192                  * timeLength(timeModelSel)
8193                  * ( accounting_transferLinks(indicator_a,linksModelToCalc,transfer_techs,vintage,"perFlow")
8194                      + accounting_transferLinks(indicator_a,linksModelToCalc,transfer_techs,vintage,"perFlowAgainst")))
8195   
8196              + 0.5
8197              * sum ((timeModelSel, link_types),
8198                  transfer_flowAlong(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
8199                  * timeLength(timeModelSel)
8200                  * transfer_lengthParam(linksModelToCalc,link_types,"length")
8201                  * (accounting_transferPerLength(indicator_a,linksModelToCalc,transfer_techs,vintage,link_types,"perFlow")
8202                      + accounting_transferPerLength(indicator_a,linksModelToCalc,transfer_techs,vintage,link_types,"perFlowAlong"))
8203   
8204                  + transfer_flowAgainst(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
8205                  * timeLength(timeModelSel)
8206                  * transfer_lengthParam(linksModelToCalc,link_types,"length")
8207                  * (accounting_transferPerLength(indicator_a,linksModelToCalc,transfer_techs,vintage,link_types,"perFlow")
8208                      + accounting_transferPerLength(indicator_a,linksModelToCalc,transfer_techs,vintage,link_types,"perFlowAgainst")))
8209              )
8210          )
8211      )
8212   
8213   
8214  * == sources / sinks ==
8215      + sum ((accNodesModel_a,nodesModelSel,accYears_a,yearsSel,indicator_a)
8216              $( compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
8217                  and sameas(nodesModelSel,accNodesModel_a) and sameas(yearsSel,accYears_a)),
8218          compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
8219          *
8220          sum ((timeModelSel,sourcesink_techs,commodity)
8221                  $sourcesink_enabled(nodesModelSel,yearsSel,sourcesink_techs,commodity),
8222              sourcesink_flow(timeModelSel,nodesModelSel,yearsSel,sourcesink_techs,commodity)
8223              * timeLength(timeModelSel)
8224              * accounting_sourcesinkFlow(indicator_a,nodesModelSel,yearsSel,sourcesink_techs,commodity,"perFlow") )
8225      );
8226   
8227  * // ### Accounting Indicator Calculation Links
8228  * // Calculates the indicators for each transfer for converters, sources and sinks, transfer, storage and variable indicators.
8229  * // {Eq_accounting_indicatorCalc_links}
8230  Eq_accounting_indicatorCalc_links(linksModelToCalc,yearsSel,indicator)
8231      $activeIndicators_links(linksModelToCalc,yearsSel,indicator)
8232      ..
8233      accounting_indicator_links(linksModelToCalc,yearsSel,indicator)
8234      =e=
8235      sum ((transfer_techs,vintage)
8236                  $(transfer_availTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
8237                      and accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"useAnnuity") = 0),
8238          transfer_linksBuild(linksModelToCalc,yearsSel,transfer_techs,vintage)
8239          * accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"perLinkBuild") )
8240   
8241      + sum ((years_a,transfer_techs,vintage)
8242                  $(transfer_availTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
8243                      and accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"useAnnuity") = 1
8244                      and years_a.val + accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"amorTime") > yearsSel.val
8245                      and years_a.val <= yearsSel.val ),
8246          transfer_linksBuild(linksModelToCalc,years_a,transfer_techs,vintage)
8247          * accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"perLinkBuild")
8248          * accounting_annuityFactor_transferLink(indicator,linksModelToCalc,transfer_techs,vintage) )
8249   
8250      + sum ((transfer_techs,vintage,link_types)
8251                  $(transfer_availTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
8252                      and accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"useAnnuity") = 0 ),
8253          transfer_linksBuild(linksModelToCalc,yearsSel,transfer_techs,vintage)
8254          * transfer_lengthParam(linksModelToCalc,link_types,"length")
8255          * accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"perLengthBuild") )
8256   
8257      + sum ((years_a,transfer_techs,vintage,link_types)
8258                  $(transfer_availTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
8259                      and accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"useAnnuity") = 1
8260                      and years_a.val + accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"amorTime") > yearsSel.val
8261                      and years_a.val <= yearsSel.val ),
8262          transfer_linksBuild(linksModelToCalc,years_a,transfer_techs,vintage)
8263          * transfer_lengthParam(linksModelToCalc,link_types,"length")
8264          * accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"perLengthBuild")
8265          * accounting_annuityFactor_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types) )
8266   
8267      + sum ((transfer_techs,vintage)
8268                  $(transfer_usedTech(linksModelToCalc,yearsSel,transfer_techs,vintage)),
8269          transfer_linksDecom(linksModelToCalc,yearsSel,transfer_techs,vintage)
8270          * accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"perLinkDecom")
8271   
8272          + transfer_linksTotal(linksModelToCalc,yearsSel,transfer_techs,vintage)
8273          * accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"perLinkTotal")
8274   
8275          + sum (link_types,
8276              transfer_linksDecom(linksModelToCalc,yearsSel,transfer_techs,vintage)
8277              * transfer_lengthParam(linksModelToCalc,link_types,"length")
8278              * accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"perLengthDecom")
8279   
8280              + transfer_linksTotal(linksModelToCalc,yearsSel,transfer_techs,vintage)
8281              * transfer_lengthParam(linksModelToCalc,link_types,"length")
8282              * accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"perLengthTotal"))
8283   
8284          + sum (timeModelSel,
8285              transfer_flowAlong(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
8286              * timeLength(timeModelSel)
8287              * ( accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"perFlow")
8288                  + accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"perFlowAlong"))
8289   
8290              + transfer_flowAgainst(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
8291              * timeLength(timeModelSel)
8292              * ( accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"perFlow")
8293                  + accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"perFlowAgainst")))
8294   
8295          + sum ((timeModelSel, link_types),
8296              transfer_flowAlong(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
8297              * timeLength(timeModelSel)
8298              * transfer_lengthParam(linksModelToCalc,link_types,"length")
8299              * (accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"perFlow")
8300                  + accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"perFlowAlong"))
8301   
8302              + transfer_flowAgainst(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
8303              * timeLength(timeModelSel)
8304              * transfer_lengthParam(linksModelToCalc,link_types,"length")
8305              * (accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"perFlow")
8306                  + accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"perFlowAgainst")))
8307          );
8308   
8309  * // ### Accounting Objective
8310  * // Calculates the indicators for the objective.
8311  * // {Eq_accounting_objective}
8312  Eq_accounting_objective
8313      ..
8314      accounting_objective
8315      =e=
8316      sum ((accNodesModel,accYears,indicator)
8317              $(accounting_indicatorBounds(accNodesModel,accYears,indicator,"obj") <> 0 ),
8318          accounting_indicator(accNodesModel,accYears,indicator) )
8319   
8320   
8321  * ==== model definition ====
8322   
8323  Model M_accounting
8324  /
8325  Eq_accounting_indicatorCalc_links
8326  Eq_accounting_indicatorCalc
8327  Eq_accounting_objective
8328  /;
INCLUDE    C:\Local\REMix\framework\remix\framework\model\source\optiframe.gms
8330  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
8331  * SPDX-License-Identifier: BSD-3-Clause
8332   
8333  * ==== optimization frames ====
8335   
8336  * mapping from optimization frame to years
8338  set optiframe / of1 * of3 /;
8339  set optiframeToCalc(optiframe);
8340   
8342  set map_optiframe(optiframe,years) / #optiframe : #yearsToCalc /;
8344   
8346   
8347  option optiframeToCalc < map_optiframe;
8348   
8349  Model remix /
8350    M_converter
8351    M_storage
8352    M_transfer
8353    M_sourcesink
8354    M_balance
8355    M_accounting
8356  /;
8357   
8358   
8359  * ==== include methods  ====
8360   
8361  * check if the method is valid
8367   
8368   
8369  * if method is pips write the checkanno tool
INCLUDE    C:\Local\REMix\framework\remix\framework\model\source\methods\checkanno.gms
8371  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
8372  * SPDX-License-Identifier: BSD-3-Clause
8373   
8376   
8379   
8380  * if method is pips generate the annotated gdx file
INCLUDE    C:\Local\REMix\framework\remix\framework\model\source\methods\pips.gms
8382  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
8383  * SPDX-License-Identifier: BSD-3-Clause
8384   
8388   
8389  * if method is solve run the model with commercial solvers
INCLUDE    C:\Local\REMix\framework\remix\framework\model\source\methods\solve.gms
8391  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
8392  * SPDX-License-Identifier: BSD-3-Clause
8393   
8396   
8398   
8399  * ==== global options ====
8406   
8407  * ==== general solver options ====
8417   
8418  * ==== cplex options ====
8427   
8428  * ==== gurobi options ====
8429   
8430   
8431  * ==== copt options ====
8435   
8436  * ==== debug options ====
8439   
8440   
8441  * ==== setup optimization ====
8442  if ((sum(nodesModelToCalc, 1)>40 or sum(timeModelToCalc, 1)>50) and not 0,
8443     option limRow=0, limCol=0, solPrint=off;
8444  else
8445     option limRow=100000, limCol=100000, solPrint=on;
8446  );
8447   
8449   
8450  option mip = cplex;
8451  option reslim = 1209600;
8452  option optcr = 1e-3;
8453  remix.threads = 4;
8454  remix.optFile = 1;
8455  remix.solveLink = 0;
8456  remix.holdFixed = 1;
8457   
8458   
8459  * ==== configure option files ====
8460   
8463   
8464  file opt / "cplex.opt" /;
8465  put opt;
8467  put "rerun no" /;
8468  put "iis 1" /;
8469  put "lpmethod 4" /;
8471  put "barorder 3 /;" /;
8472  put "preind 1" /;
8473  put "scaind 0" /;
8474  put "predual -1" /;
8475  put "baralg 0" /;
8476  put "barstartalg 1" /;
8477  put "barepcomp 1e-6" /;
8478  put "solutiontype 2" /;
8480  put "startalg 4" /;
8481  put "epgap 1e-3" /;
8482  put "quality 1" /;
8483  put "barcolnz 0" /;
8484  put "threads 4" /;
8485  put "parallelmode 1" /;
8488  putclose;
8489   
8491   
8492   
8493  * ==== solve the problem ====
8494   
8495  loop ( optiframeToCalc,
8496      yearsSel(years) = no;
8497      yearsSel(years)$map_optiframe(optiframeToCalc,years) = yes;
8498      yearsToFix(years) = no;
8499      yearsToFix(years)$(years.val < smin(years_a$yearsSel(years_a), years_a.val)) = yes;
8500      accYearsSel(accYears) = no;
8501      accYearsSel("horizon") = yes;
8502      accYearsSel(accYears)$(sum(yearsSel$sameas(accYears,yearsSel), 1)) = yes;
8503      accYearsToFix(accYears) = no;
8504      accYearsToFix(accYears)$(sum(years$(sameas(years,accYears) and years.val < smin(years_a$yearsSel(years_a), years_a.val)), 1) > 0) = yes;
8505      timeModelSel(timeModel) = no;
8506      timeModelSel(timeModel)$timeModelToCalc(timeModel) = yes;
8507      nodesModelSel(nodesModel) = no;
8508      nodesModelSel(nodesModel)$nodesModelToCalc(nodesModel) = yes;
8509   
8510  * Fix decision for years previously optimized in case of myopic or foresight
8511      converter_unitsDelta(nodesModelToCalc,yearsToFix,converter_techs)
8512          $(sum(yearsToCalc$sameas(yearsToFix, yearsToCalc), 1))
8513          = sum(vintage, converter_unitsTotal.l(nodesModelToCalc,yearsToFix,converter_techs,vintage))
8514              - converter_capacityParam(nodesModelToCalc,yearsToFix,converter_techs,"unitsUpperLimit");
8515      converter_unitsDelta(nodesModelToCalc,yearsToFix,converter_techs)
8516          $(converter_unitsDelta(nodesModelToCalc,yearsToFix,converter_techs) < 0) = 0;
8517   
8518      converter_unitsBuild.l(nodesModelToCalc,yearsToFix,converter_techs,vintage)
8519          $converter_availTech(nodesModelToCalc,yearsToFix,converter_techs,vintage)
8520          = converter_unitsBuild.l(nodesModelToCalc,yearsToFix,converter_techs,vintage)
8521              - converter_unitsDelta(nodesModelToCalc,yearsToFix,converter_techs);
8522   
8523      converter_unitsBuild.l(nodesModelToCalc,yearsToFix,converter_techs,vintage)
8524          $(converter_unitsBuild.l(nodesModelToCalc,yearsToFix,converter_techs,vintage) < 0) = 0;
8525      converter_unitsBuild.fx(nodesModelToCalc,yearsToFix,converter_techs,vintage)
8526          = converter_unitsBuild.l(nodesModelToCalc,yearsToFix,converter_techs,vintage);
8527      converter_unitsDecom.l(nodesModelToCalc,yearsToFix,converter_techs,vintage)
8528          $(converter_unitsDecom.l(nodesModelToCalc,yearsToFix,converter_techs,vintage) < 0) = 0;
8529      converter_unitsDecom.fx(nodesModelToCalc,yearsToFix,converter_techs,vintage)
8530          = converter_unitsDecom.l(nodesModelToCalc,yearsToFix,converter_techs,vintage);
8531      converter_unitsTotal.fx(nodesModelToCalc,yearsToFix,converter_techs,vintage)
8532          = converter_unitsTotal.l(nodesModelToCalc,yearsToFix,converter_techs,vintage);
8533   
8534   
8535      storage_unitsDelta(nodesModelToCalc,yearsToFix,storage_techs)
8536          $(sum(yearsToCalc$sameas(yearsToFix, yearsToCalc), 1))
8537          = sum(vintage, storage_unitsTotal.l(nodesModelToCalc,yearsToFix,storage_techs,vintage))
8538              - storage_reservoirParam(nodesModelToCalc,yearsToFix,storage_techs,"unitsUpperLimit");
8539      storage_unitsDelta(nodesModelToCalc,yearsToFix,storage_techs)
8540          $(storage_unitsDelta(nodesModelToCalc,yearsToFix,storage_techs) < 0) = 0;
8541   
8542      storage_unitsBuild.l(nodesModelToCalc,yearsToFix,storage_techs,vintage)
8543          $storage_availTech(nodesModelToCalc,yearsToFix,storage_techs,vintage)
8544          = storage_unitsBuild.l(nodesModelToCalc,yearsToFix,storage_techs,vintage)
8545              - storage_unitsDelta(nodesModelToCalc,yearsToFix,storage_techs);
8546   
8547      storage_unitsBuild.l(nodesModelToCalc,yearsToFix,storage_techs,vintage)
8548          $(storage_unitsBuild.l(nodesModelToCalc,yearsToFix,storage_techs,vintage) < 0) = 0;
8549      storage_unitsBuild.fx(nodesModelToCalc,yearsToFix,storage_techs,vintage)
8550          = storage_unitsBuild.l(nodesModelToCalc,yearsToFix,storage_techs,vintage);
8551      storage_unitsDecom.l(nodesModelToCalc,yearsToFix,storage_techs,vintage)
8552          $(storage_unitsDecom.l(nodesModelToCalc,yearsToFix,storage_techs,vintage) < 0) = 0;
8553      storage_unitsDecom.fx(nodesModelToCalc,yearsToFix,storage_techs,vintage)
8554          = storage_unitsDecom.l(nodesModelToCalc,yearsToFix,storage_techs,vintage);
8555      storage_unitsTotal.fx(nodesModelToCalc,yearsToFix,storage_techs,vintage)
8556          = storage_unitsTotal.l(nodesModelToCalc,yearsToFix,storage_techs,vintage);
8557   
8558   
8559      transfer_linksDelta(linksModelToCalc,yearsToFix,transfer_techs)
8560          $(sum(yearsToCalc$sameas(yearsToFix, yearsToCalc), 1))
8561          = sum(vintage, transfer_linksTotal.l(linksModelToCalc,yearsToFix,transfer_techs,vintage))
8562              - transfer_linksParam(linksModelToCalc,yearsToFix,transfer_techs,"linksUpperLimit");
8563      transfer_linksDelta(linksModelToCalc,yearsToFix,transfer_techs)
8564          $(transfer_linksDelta(linksModelToCalc,yearsToFix,transfer_techs) < 0) = 0;
8565   
8566      transfer_linksBuild.l(linksModelToCalc,yearsToFix,transfer_techs,vintage)
8567          $transfer_availTech(linksModelToCalc,yearsToFix,transfer_techs,vintage)
8568          = transfer_linksBuild.l(linksModelToCalc,yearsToFix,transfer_techs,vintage)
8569              - transfer_linksDelta(linksModelToCalc,yearsToFix,transfer_techs);
8570   
8571      transfer_linksBuild.l(linksModelToCalc,yearsToFix,transfer_techs,vintage)
8572          $(transfer_linksBuild.l(linksModelToCalc,yearsToFix,transfer_techs,vintage) < 0) = 0;
8573      transfer_linksBuild.fx(linksModelToCalc,yearsToFix,transfer_techs,vintage)
8574          = transfer_linksBuild.l(linksModelToCalc,yearsToFix,transfer_techs,vintage);
8575      transfer_linksDecom.l(linksModelToCalc,yearsToFix,transfer_techs,vintage)
8576          $(transfer_linksDecom.l(linksModelToCalc,yearsToFix,transfer_techs,vintage) < 0) = 0;
8577      transfer_linksDecom.fx(linksModelToCalc,yearsToFix,transfer_techs,vintage)
8578          = transfer_linksDecom.l(linksModelToCalc,yearsToFix,transfer_techs,vintage);
8579      transfer_linksTotal.fx(linksModelToCalc,yearsToFix,transfer_techs,vintage)
8580          = transfer_linksTotal.l(linksModelToCalc,yearsToFix,transfer_techs,vintage);
8581   
8582      accounting_indicator.fx(accNodesModel,accYearsToFix,indicator)
8583          = accounting_indicator.l(accNodesModel,accYearsToFix,indicator);
8584   
8585  * Optimize and log values
8586      if (opti_sense < 0,
8587      solve remix minimizing accounting_objective using mip;
8588      else
8589      solve remix maximizing accounting_objective using mip;
8590      );
8591   
8592      put_utility 'log' / 'Model status ' remix.modelstat:0:0;
8593      put_utility 'log' / 'Objective value ' accounting_objective.l:0:3;
8594   
8595  );
8596   
8600   
8601  * if method is pareto solve the model once and afterwards run multiple points along the pareto front
INCLUDE    C:\Local\REMix\framework\remix\framework\model\source\methods\pareto.gms
8603  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
8604  * SPDX-License-Identifier: BSD-3-Clause
8605   
8609   
8610  * if method is mga solve the model once and afterwards maximize the length metric of indicators
INCLUDE    C:\Local\REMix\framework\remix\framework\model\source\methods\mga.gms
8612  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
8613  * SPDX-License-Identifier: BSD-3-Clause
8614   
8618   
8619  * if method is iternodes run the model by iterating through all nodesToCalc
INCLUDE    C:\Local\REMix\framework\remix\framework\model\source\methods\iternodes.gms
8621  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
8622  * SPDX-License-Identifier: BSD-3-Clause
8623   
8627   
8628  * if postcalc is one write the results gdx
INCLUDE    C:\Local\REMix\framework\remix\framework\model\source\postcalc\definition.gms
8630  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
8631  * SPDX-License-Identifier: BSD-3-Clause
8632   
8634   
8635  * ==== indicator accounting ====
8636   
8637  indicator_accounting_detailed(indicator,nodesModelToCalc,yearsToCalc,techs)
8638      =
8639  * == converters ==
8640      sum ((converter_techs(techs),vintage)
8641                  $(converter_availTech(nodesModelToCalc,yearsToCalc,converter_techs,vintage)
8642                      and accounting_converterUnits(indicator,nodesModelToCalc,converter_techs,vintage,"useAnnuity") = 0),
8643          converter_unitsBuild.l(nodesModelToCalc,yearsToCalc,converter_techs,vintage)
8644          * accounting_converterUnits(indicator,nodesModelToCalc,converter_techs,vintage,"perUnitBuild"))
8645   
8646      + sum ((years_a,converter_techs(techs),vintage)
8647                  $(converter_availTech(nodesModelToCalc,years_a,converter_techs,vintage)
8648                      and accounting_converterUnits(indicator,nodesModelToCalc,converter_techs,vintage,"useAnnuity") = 1
8649                      and years_a.val + accounting_converterUnits(indicator,nodesModelToCalc,converter_techs,vintage,"amorTime") > yearsToCalc.val
8650                      and years_a.val <= yearsToCalc.val ),
8651          converter_unitsBuild.l(nodesModelToCalc,years_a,converter_techs,vintage)
8652          * accounting_converterUnits(indicator,nodesModelToCalc,converter_techs,vintage,"perUnitBuild")
8653          * accounting_annuityFactor_converter(indicator,nodesModelToCalc,converter_techs,vintage) )
8654   
8655      + sum ((converter_techs(techs),vintage)
8656                  $converter_usedTech(nodesModelToCalc,yearsToCalc,converter_techs,vintage),
8657          converter_unitsDecom.l(nodesModelToCalc,yearsToCalc,converter_techs,vintage)
8658          * accounting_converterUnits(indicator,nodesModelToCalc,converter_techs,vintage,"perUnitDecom")
8659   
8660          + converter_unitsTotal.l(nodesModelToCalc,yearsToCalc,converter_techs,vintage)
8661          * accounting_converterUnits(indicator,nodesModelToCalc,converter_techs,vintage,"perUnitTotal") )
8662   
8663      + sum ((timeModelToCalc,converter_techs(techs),vintage,activity)
8664                  $converter_usedTechAct(nodesModelToCalc,yearsToCalc,converter_techs,vintage,activity),
8665          converter_activity.l(timeModelToCalc,nodesModelToCalc,yearsToCalc,converter_techs,vintage,activity)
8666          * timeLength(timeModelToCalc)
8667          * accounting_converterActivity(indicator,nodesModelToCalc,converter_techs,vintage,activity,"perActivity") )
8668   
8669      + sum ((timeModelToCalc,converter_techs(techs),vintage)
8670                  $converter_usedTech(nodesModelToCalc,yearsToCalc,converter_techs,vintage),
8671          converter_unitStartups.l(timeModelToCalc,nodesModelToCalc,yearsToCalc,converter_techs,vintage)
8672          * accounting_converterStartup(indicator,nodesModelToCalc,converter_techs,vintage,"perStartup") )
8673   
8674      + sum ((timeModelToCalc,converter_techs(techs),vintage)
8675                  $converter_usedTech(nodesModelToCalc,yearsToCalc,converter_techs,vintage),
8676          converter_rampPos.l(timeModelToCalc,nodesModelToCalc,yearsToCalc,converter_techs,vintage)
8677          * (accounting_converterStartup(indicator,nodesModelToCalc,converter_techs,vintage,"perRamp")
8678              + accounting_converterStartup(indicator,nodesModelToCalc,converter_techs,vintage,"perRampPos"))
8679   
8680          + converter_rampNeg.l(timeModelToCalc,nodesModelToCalc,yearsToCalc,converter_techs,vintage)
8681          * (accounting_converterStartup(indicator,nodesModelToCalc,converter_techs,vintage,"perRamp")
8682              + accounting_converterStartup(indicator,nodesModelToCalc,converter_techs,vintage,"perRampNeg")))
8683   
8684  * == storage ==
8685      + sum ((storage_techs(techs),vintage)
8686                  $(storage_availTech(nodesModelToCalc,yearsToCalc,storage_techs,vintage)
8687                      and accounting_storageUnits(indicator,nodesModelToCalc,storage_techs,vintage,"useAnnuity") = 0),
8688          storage_unitsBuild.l(nodesModelToCalc,yearsToCalc,storage_techs,vintage)
8689          * accounting_storageUnits(indicator,nodesModelToCalc,storage_techs,vintage,"perUnitBuild") )
8690   
8691      + sum ((years_a,storage_techs(techs),vintage)
8692                  $(storage_availTech(nodesModelToCalc,yearsToCalc,storage_techs,vintage)
8693                      and accounting_storageUnits(indicator,nodesModelToCalc,storage_techs,vintage,"useAnnuity") = 1
8694                      and years_a.val + accounting_storageUnits(indicator,nodesModelToCalc,storage_techs,vintage,"amorTime") > yearsToCalc.val
8695                      and years_a.val <= yearsToCalc.val ),
8696          storage_unitsBuild.l(nodesModelToCalc,years_a,storage_techs,vintage)
8697          * accounting_storageUnits(indicator,nodesModelToCalc,storage_techs,vintage,"perUnitBuild")
8698          * accounting_annuityFactor_storage(indicator,nodesModelToCalc,storage_techs,vintage) )
8699   
8700      + sum ((storage_techs(techs),vintage)
8701                  $storage_usedTech(nodesModelToCalc,yearsToCalc,storage_techs,vintage),
8702          storage_unitsDecom.l(nodesModelToCalc,yearsToCalc,storage_techs,vintage)
8703          * accounting_storageUnits(indicator,nodesModelToCalc,storage_techs,vintage,"perUnitDecom")
8704   
8705          + storage_unitsTotal.l(nodesModelToCalc,yearsToCalc,storage_techs,vintage)
8706          * accounting_storageUnits(indicator,nodesModelToCalc,storage_techs,vintage,"perUnitTotal") )
8707   
8708  * == transfer ==
8709      + sum ((linksModel,transfer_techs(techs),vintage)
8710                  $(transfer_availTech(linksModel,yearsToCalc,transfer_techs,vintage)
8711                      and linksModelToCalc(linksModel)
8712                      and transfer_incidenceModel(nodesModelToCalc,linksModel) <> 0
8713                      and accounting_transferLinks(indicator,linksModel,transfer_techs,vintage,"useAnnuity") = 0),
8714          0.5
8715          * transfer_linksBuild.l(linksModel,yearsToCalc,transfer_techs,vintage)
8716          * accounting_transferLinks(indicator,linksModel,transfer_techs,vintage,"perLinkBuild") )
8717   
8718      + sum ((linksModel,years_a,transfer_techs(techs),vintage)
8719                  $(transfer_availTech(linksModel,yearsToCalc,transfer_techs,vintage)
8720                      and linksModelToCalc(linksModel)
8721                      and transfer_incidenceModel(nodesModelToCalc,linksModel) <> 0
8722                      and accounting_transferLinks(indicator,linksModel,transfer_techs,vintage,"useAnnuity") = 1
8723                      and years_a.val + accounting_transferLinks(indicator,linksModel,transfer_techs,vintage,"amorTime") > yearsToCalc.val
8724                      and years_a.val <= yearsToCalc.val ),
8725          0.5
8726          * transfer_linksBuild.l(linksModel,years_a,transfer_techs,vintage)
8727          * accounting_transferLinks(indicator,linksModel,transfer_techs,vintage,"perLinkBuild")
8728          * accounting_annuityFactor_transferLink(indicator,linksModel,transfer_techs,vintage) )
8729   
8730      + sum ((linksModel,transfer_techs(techs),vintage,link_types)
8731                  $(transfer_availTech(linksModel,yearsToCalc,transfer_techs,vintage)
8732                      and linksModelToCalc(linksModel)
8733                      and transfer_incidenceModel(nodesModelToCalc,linksModel) <> 0
8734                      and accounting_transferPerLength(indicator,linksModel,transfer_techs,vintage,link_types,"useAnnuity") = 0 ),
8735          0.5
8736          * transfer_linksBuild.l(linksModel,yearsToCalc,transfer_techs,vintage)
8737          * transfer_lengthParam(linksModel,link_types,"length")
8738          * accounting_transferPerLength(indicator,linksModel,transfer_techs,vintage,link_types,"perLengthBuild") )
8739   
8740      + sum ((linksModel,years_a,transfer_techs(techs),vintage,link_types)
8741                  $(transfer_availTech(linksModel,yearsToCalc,transfer_techs,vintage)
8742                      and linksModelToCalc(linksModel)
8743                      and transfer_incidenceModel(nodesModelToCalc,linksModel) <> 0
8744                      and accounting_transferPerLength(indicator,linksModel,transfer_techs,vintage,link_types,"useAnnuity") = 1
8745                      and years_a.val + accounting_transferPerLength(indicator,linksModel,transfer_techs,vintage,link_types,"amorTime") > yearsToCalc.val
8746                      and years_a.val <= yearsToCalc.val ),
8747          0.5
8748          * transfer_linksBuild.l(linksModel,years_a,transfer_techs,vintage)
8749          * transfer_lengthParam(linksModel,link_types,"length")
8750          * accounting_transferPerLength(indicator,linksModel,transfer_techs,vintage,link_types,"perLengthBuild")
8751          * accounting_annuityFactor_transferPerLength(indicator,linksModel,transfer_techs,vintage,link_types) )
8752   
8753      + sum ((linksModel,transfer_techs(techs),vintage)
8754                  $(transfer_usedTech(linksModel,yearsToCalc,transfer_techs,vintage)
8755                      and linksModelToCalc(linksModel)
8756                      and transfer_incidenceModel(nodesModelToCalc,linksModel) <> 0 ),
8757          0.5
8758          * transfer_linksDecom.l(linksModel,yearsToCalc,transfer_techs,vintage)
8759          * accounting_transferLinks(indicator,linksModel,transfer_techs,vintage,"perLinkDecom")
8760   
8761          + 0.5
8762          * transfer_linksTotal.l(linksModel,yearsToCalc,transfer_techs,vintage)
8763          * accounting_transferLinks(indicator,linksModel,transfer_techs,vintage,"perLinkTotal")
8764   
8765          + 0.5
8766          * sum (link_types,
8767              transfer_linksDecom.l(linksModel,yearsToCalc,transfer_techs,vintage)
8768              * transfer_lengthParam(linksModel,link_types,"length")
8769              * accounting_transferPerLength(indicator,linksModel,transfer_techs,vintage,link_types,"perLengthDecom")
8770   
8771              + transfer_linksTotal.l(linksModel,yearsToCalc,transfer_techs,vintage)
8772              * transfer_lengthParam(linksModel,link_types,"length")
8773              * accounting_transferPerLength(indicator,linksModel,transfer_techs,vintage,link_types,"perLengthTotal"))
8774   
8775          + 0.5
8776          * sum (timeModelToCalc,
8777              transfer_flowAlong.l(timeModelToCalc,linksModel,yearsToCalc,transfer_techs,vintage)
8778              * timeLength(timeModelToCalc)
8779              * ( accounting_transferLinks(indicator,linksModel,transfer_techs,vintage,"perFlow")
8780                  + accounting_transferLinks(indicator,linksModel,transfer_techs,vintage,"perFlowAlong"))
8781   
8782              + transfer_flowAgainst.l(timeModelToCalc,linksModel,yearsToCalc,transfer_techs,vintage)
8783              * timeLength(timeModelToCalc)
8784              * ( accounting_transferLinks(indicator,linksModel,transfer_techs,vintage,"perFlow")
8785                  + accounting_transferLinks(indicator,linksModel,transfer_techs,vintage,"perFlowAgainst")))
8786   
8787          + 0.5
8788          * sum ((timeModelToCalc, link_types),
8789              transfer_flowAlong.l(timeModelToCalc,linksModel,yearsToCalc,transfer_techs,vintage)
8790              * timeLength(timeModelToCalc)
8791              * transfer_lengthParam(linksModel,link_types,"length")
8792              * (accounting_transferPerLength(indicator,linksModel,transfer_techs,vintage,link_types,"perFlow")
8793                  + accounting_transferPerLength(indicator,linksModel,transfer_techs,vintage,link_types,"perFlowAlong"))
8794   
8795              + transfer_flowAgainst.l(timeModelToCalc,linksModel,yearsToCalc,transfer_techs,vintage)
8796              * timeLength(timeModelToCalc)
8797              * transfer_lengthParam(linksModel,link_types,"length")
8798              * (accounting_transferPerLength(indicator,linksModel,transfer_techs,vintage,link_types,"perFlow")
8799                  + accounting_transferPerLength(indicator,linksModel,transfer_techs,vintage,link_types,"perFlowAgainst"))))
8800   
8801   
8802  * == sources / sinks ==
8803      + sum ((timeModelToCalc,sourcesink_techs(techs),commodity)
8804              $sourcesink_enabled(nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity),
8805          sourcesink_flow.l(timeModelToCalc,nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity)
8806          * timeLength(timeModelToCalc)
8807          * accounting_sourcesinkFlow(indicator,nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity,"perFlow"))
8808      ;
8809   
8810   
8811  * ==== full set of main indicators ====
8812   
8813  indicator_accounting(accNodesModel,accYears,indicator)
8814      $sum((accNodesModel_a,accYears_a,indicator_a)
8815              $compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a), 1)
8816      =
8817      + sum((accNodesModel_a,accYears_a,indicator_a)
8818              $(compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
8819                  and variableIndicators(accNodesModel_a,accYears_a,indicator_a)),
8820          compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
8821          * accounting_indicator.l(accNodesModel_a,accYears_a,indicator_a))
8822   
8823      + sum((accNodesModel_a,accYears_a,indicator_a)
8824              $(compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)),
8825          compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
8826          * (sum((nodesModelToCalc,yearsToCalc,techs)
8827                  $(sameas(accNodesModel_a, nodesModelToCalc)
8828                      and sameas(accYears_a, yearsToCalc)),
8829                  indicator_accounting_detailed(indicator_a,nodesModelToCalc,yearsToCalc,techs))))
8830      ;
8831   
8832  indicator_accounting_comp(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
8833      $compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
8834      =
8835          compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
8836          * accounting_indicator.l(accNodesModel_a,accYears_a,indicator_a)
8837              $variableIndicators(accNodesModel_a,accYears_a,indicator_a)
8838   
8839          + compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
8840          * (sum((nodesModelToCalc,yearsToCalc,techs)
8841                  $(sameas(accNodesModel_a, nodesModelToCalc)
8842                      and sameas(accYears_a, yearsToCalc)),
8843                  indicator_accounting_detailed(indicator_a,nodesModelToCalc,yearsToCalc,techs)))
8844      ;
8845   
8846  indicator_accounting_ref(accNodesModel,accYears,indicator)
8847      $accounting_indicator.l(accNodesModel,accYears,indicator)
8848      = accounting_indicator.l(accNodesModel,accYears,indicator);
8849   
8850  * ==== link-specific indicator accounting ====
8851   
8852  indicator_accounting_links(indicator,nodesModelToCalc,nodesModelToCalc_a,linksModelToCalc,yearsToCalc,techs)
8853      $(transfer_incidenceModel(nodesModelToCalc,linksModelToCalc) < 0
8854          and transfer_incidenceModel(nodesModelToCalc_a,linksModelToCalc) > 0)
8855      =
8856      sum ((transfer_techs(techs),vintage)
8857                  $(transfer_availTech(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
8858                      and accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"useAnnuity") = 0),
8859          transfer_linksBuild.l(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
8860          * accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"perLinkBuild") )
8861   
8862      + sum ((years_a,transfer_techs(techs),vintage)
8863                  $(transfer_availTech(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
8864                      and accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"useAnnuity") = 1
8865                      and years_a.val + accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"amorTime") > yearsToCalc.val
8866                      and years_a.val <= yearsToCalc.val ),
8867          transfer_linksBuild.l(linksModelToCalc,years_a,transfer_techs,vintage)
8868          * accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"perLinkBuild")
8869          * accounting_annuityFactor_transferLink(indicator,linksModelToCalc,transfer_techs,vintage) )
8870   
8871      + sum ((transfer_techs(techs),vintage,link_types)
8872                  $(transfer_availTech(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
8873                      and accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"useAnnuity") = 0 ),
8874          transfer_linksBuild.l(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
8875          * transfer_lengthParam(linksModelToCalc,link_types,"length")
8876          * accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"perLengthBuild") )
8877   
8878      + sum ((years_a,transfer_techs(techs),vintage,link_types)
8879                  $(transfer_availTech(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
8880                      and accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"useAnnuity") = 1
8881                      and years_a.val + accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"amorTime") > yearsToCalc.val
8882                      and years_a.val <= yearsToCalc.val ),
8883          transfer_linksBuild.l(linksModelToCalc,years_a,transfer_techs,vintage)
8884          * transfer_lengthParam(linksModelToCalc,link_types,"length")
8885          * accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"perLengthBuild")
8886          * accounting_annuityFactor_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types) )
8887   
8888      + sum ((transfer_techs(techs),vintage)
8889                  $(transfer_usedTech(linksModelToCalc,yearsToCalc,transfer_techs,vintage)),
8890          transfer_linksDecom.l(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
8891          * accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"perLinkDecom")
8892   
8893          + transfer_linksTotal.l(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
8894          * accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"perLinkTotal")
8895   
8896          + sum (link_types,
8897              transfer_linksDecom.l(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
8898              * transfer_lengthParam(linksModelToCalc,link_types,"length")
8899              * accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"perLengthDecom")
8900   
8901              + transfer_linksTotal.l(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
8902              * transfer_lengthParam(linksModelToCalc,link_types,"length")
8903              * accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"perLengthTotal"))
8904   
8905          + sum (timeModelToCalc,
8906              transfer_flowAlong.l(timeModelToCalc,linksModelToCalc,yearsToCalc,transfer_techs,vintage)
8907              * timeLength(timeModelToCalc)
8908              * ( accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"perFlow")
8909                  + accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"perFlowAlong"))
8910   
8911              + transfer_flowAgainst.l(timeModelToCalc,linksModelToCalc,yearsToCalc,transfer_techs,vintage)
8912              * timeLength(timeModelToCalc)
8913              * ( accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"perFlow")
8914                  + accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"perFlowAgainst")))
8915   
8916          + sum ((timeModelToCalc, link_types),
8917              transfer_flowAlong.l(timeModelToCalc,linksModelToCalc,yearsToCalc,transfer_techs,vintage)
8918              * timeLength(timeModelToCalc)
8919              * transfer_lengthParam(linksModelToCalc,link_types,"length")
8920              * (accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"perFlow")
8921                  + accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"perFlowAlong"))
8922   
8923              + transfer_flowAgainst.l(timeModelToCalc,linksModelToCalc,yearsToCalc,transfer_techs,vintage)
8924              * timeLength(timeModelToCalc)
8925              * transfer_lengthParam(linksModelToCalc,link_types,"length")
8926              * (accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"perFlow")
8927                  + accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"perFlowAgainst")))
8928      );
8929   
8930   
8931  * == converter capacities ==
8932   
8933  converter_ratedInput(converter_techs,vintage,commodity)
8934      $(converter_techParam(converter_techs,vintage,"lifeTime") > 0)
8935      = smin(activity$converter_usedAct(converter_techs,vintage,activity),
8936              converter_coefficient(converter_techs,vintage,activity,commodity,"coefficient"));
8937  converter_ratedInput(converter_techs,vintage,commodity)
8938      $(converter_ratedInput(converter_techs,vintage,commodity) > 0)
8939      = 0;
8940   
8941  converter_ratedOutput(converter_techs,vintage,commodity)
8942      $(converter_techParam(converter_techs,vintage,"lifeTime") > 0)
8943      = smax(activity$converter_usedAct(converter_techs,vintage,activity),
8944              converter_coefficient(converter_techs,vintage,activity,commodity,"coefficient"));
8945  converter_ratedOutput(converter_techs,vintage,commodity)
8946      $(converter_ratedOutput(converter_techs,vintage,commodity) < 0)
8947      = 0;
8948   
8949  converter_ratedOutput_min(nodesModelToCalc,years,converter_techs(techs),commodity)
8950      $sum(vintage$(converter_usedTech(nodesModelToCalc,years,converter_techs,vintage)
8951          and converter_ratedOutput(converter_techs,vintage,commodity)), 1)
8952      = smin(vintage$(converter_usedTech(nodesModelToCalc,years,converter_techs,vintage)
8953              and converter_ratedOutput(converter_techs,vintage,commodity)),
8954          converter_ratedOutput(converter_techs,vintage,commodity));
8955   
8956  converter_ratedOutput_max(nodesModelToCalc,years,converter_techs(techs),commodity)
8957      $sum(vintage$(converter_usedTech(nodesModelToCalc,years,converter_techs,vintage)
8958          and converter_ratedOutput(converter_techs,vintage,commodity)), 1)
8959      = smax(vintage$(converter_usedTech(nodesModelToCalc,years,converter_techs,vintage)
8960              and converter_ratedOutput(converter_techs,vintage,commodity)),
8961          converter_ratedOutput(converter_techs,vintage,commodity));
8962   
8963  converter_units_ext(map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,years),converter_techs(techs),vintage,"build")
8964      = converter_unitsBuild.l(nodesModelToCalc,years,converter_techs,vintage);
8965   
8966  converter_units_ext(map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,years),converter_techs(techs),vintage,"decom")
8967      = converter_unitsDecom.l(nodesModelToCalc,years,converter_techs,vintage);
8968   
8969  converter_units_ext(map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,years),converter_techs(techs),vintage,"total")
8970      = converter_unitsTotal.l(nodesModelToCalc,years,converter_techs,vintage);
8971   
8972  converter_caps_ext(map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,years),converter_techs(techs),vintage,commodity,capType)
8973      $(converter_ratedOutput(converter_techs,vintage,commodity))
8974      = converter_units_ext(accNodesModel,nodesModelToCalc,accYears,years,techs,vintage,capType)
8975          * converter_ratedOutput(converter_techs,vintage,commodity);
8976   
8977  converter_caps_ext(map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,years),converter_techs(techs),vintage,commodity,"lowerLimit")
8978      $(converter_usedTech(nodesModelToCalc,years,converter_techs,vintage)
8979          and converter_capacityParam(nodesModelToCalc,years,converter_techs,"unitsLowerLimit") > 0
8980          and converter_ratedOutput_min(nodesModelToCalc,years,converter_techs,commodity))
8981      = converter_capacityParam(nodesModelToCalc,years,converter_techs,"unitsLowerLimit")
8982          * converter_ratedOutput_min(nodesModelToCalc,years,converter_techs,commodity);
8983   
8984  converter_caps_ext(map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,years),converter_techs(techs),vintage,commodity,"upperLimit")
8985      $(converter_usedTech(nodesModelToCalc,years,converter_techs,vintage)
8986          and converter_capacityParam(nodesModelToCalc,years,converter_techs,"unitsUpperLimit") < inf
8987          and converter_ratedOutput_min(nodesModelToCalc,years,converter_techs,commodity))
8988      = converter_capacityParam(nodesModelToCalc,years,converter_techs,"unitsUpperLimit")
8989          * converter_ratedOutput_max(nodesModelToCalc,years,converter_techs,commodity);
8990   
8991  converter_caps(accNodesModel,accYears,converter_techs(techs),commodity,capType)
8992      = sum((nodesModelToCalc,years,vintage)
8993              $(map_accNodesPostCalc(accNodesModel,nodesModelToCalc)
8994                  and map_accYearsPostCalc(accYears,years)),
8995          converter_caps_ext(accNodesModel,nodesModelToCalc,accYears,years,converter_techs,vintage,commodity,capType));
8996  option clear = converter_caps_ext;
8997   
8998  converter_units(accNodesModel,accYears,converter_techs(techs),vintage,capType)
8999      = sum((nodesModelToCalc,years)
9000              $(map_accNodesPostCalc(accNodesModel,nodesModelToCalc)
9001                  and map_accYearsPostCalc(accYears,years)),
9002          converter_units_ext(accNodesModel,nodesModelToCalc,accYears,years,converter_techs,vintage,capType));
9003  option clear = converter_units_ext;
9004   
9005   
9006  * ==== transfer capacities ====
9007   
9008  max_transfer_coefficient(transfer_techs(techs),commodity)
9009          $(smax(vintage, transfer_coefficient(transfer_techs,vintage,commodity,"coefficient")) > 0)
9010          = smax(vintage, transfer_coefficient(transfer_techs,vintage,commodity,"coefficient"));
9011   
9012  min_transfer_coefficient(transfer_techs(techs),commodity)
9013          $(smin(vintage, transfer_coefficient(transfer_techs,vintage,commodity,"coefficient")) > 0)
9014          = smin(vintage, transfer_coefficient(transfer_techs,vintage,commodity,"coefficient"));
9015   
9016  transfer_usedStartEnd(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,years,transfer_techs)
9017      $(transfer_incidenceModel(nodesModelToCalc_start,linksModel) < 0
9018          and transfer_incidenceModel(nodesModelToCalc_end,linksModel) > 0
9019          and sum(vintage$transfer_usedTech(linksModel,years,transfer_techs,vintage), 1))
9020      = yes;
9021   
9022  transfer_links(linksModel,years,transfer_techs,vintage,"build")
9023      = transfer_linksBuild.l(linksModel,years,transfer_techs,vintage);
9024   
9025  transfer_links(linksModel,years,transfer_techs,vintage,"decom")
9026      = transfer_linksDecom.l(linksModel,years,transfer_techs,vintage);
9027   
9028  transfer_links(linksModel,years,transfer_techs,vintage,"total")
9029      = transfer_linksTotal.l(linksModel,years,transfer_techs,vintage);
9030   
9031  transfer_caps(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,years,transfer_techs(techs),commodity,capType)
9032      $(transfer_usedStartEnd(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,years,transfer_techs)
9033          and sum(vintage$(transfer_usedTech(linksModel,years,transfer_techs,vintage)
9034                              and transfer_coefficient(transfer_techs,vintage,commodity,"coefficient")), 1))
9035      = sum(vintage,
9036          transfer_links(linksModel,years,transfer_techs,vintage,capType)
9037          * transfer_coefficient(transfer_techs,vintage,commodity,"coefficient"));
9038   
9039  transfer_caps(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,years,transfer_techs(techs),commodity,"lowerLimit")
9040      $(transfer_usedStartEnd(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,years,transfer_techs)
9041          and sum(vintage$(transfer_usedTech(linksModel,years,transfer_techs,vintage)
9042                              and transfer_coefficient(transfer_techs,vintage,commodity,"coefficient")), 1))
9043      = transfer_linksParam(linksModel,years,transfer_techs,'linksLowerLimit')
9044          * min_transfer_coefficient(transfer_techs,commodity);
9045   
9046  transfer_caps(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,years,transfer_techs(techs),commodity,"upperLimit")
9047      $(transfer_usedStartEnd(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,years,transfer_techs)
9048          and sum(vintage$(transfer_usedTech(linksModel,years,transfer_techs,vintage)
9049                              and transfer_coefficient(transfer_techs,vintage,commodity,"coefficient")), 1))
9050      = transfer_linksParam(linksModel,years,transfer_techs,'linksUpperLimit')
9051          * max_transfer_coefficient(transfer_techs,commodity);
9052   
9053   
9054  * ==== transfer flows ====
9055   
9056  transfer_flows(timeModelToCalc,nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs(techs),commodity)
9057      $transfer_usedStartEnd(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs)
9058      = sum(vintage,
9059          ( transfer_flowAlong.l(timeModelToCalc,linksModel,yearsToCalc,transfer_techs,vintage)
9060              - transfer_flowAgainst.l(timeModelToCalc,linksModel,yearsToCalc,transfer_techs,vintage) )
9061          * timeLength(timeModelToCalc)
9062          * transfer_coefficient(transfer_techs,vintage,commodity,"coefficient"));
9063   
9064  transfer_flows_annual(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs(techs),commodity,"netto")
9065      $transfer_usedStartEnd(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs)
9066      = sum(timeModelToCalc,
9067          transfer_flows(timeModelToCalc,nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs,commodity));
9068   
9069  transfer_flows_annual(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs(techs),commodity,"positive")
9070      $transfer_usedStartEnd(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs)
9071      = sum(timeModelToCalc
9072              $(transfer_flows(timeModelToCalc,nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs,commodity) > 0),
9073          transfer_flows(timeModelToCalc,nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs,commodity));
9074   
9075  transfer_flows_annual(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs(techs),commodity,"negative")
9076      $transfer_usedStartEnd(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs)
9077      = sum(timeModelToCalc
9078              $(transfer_flows(timeModelToCalc,nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs,commodity) < 0),
9079          transfer_flows(timeModelToCalc,nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs,commodity));
9080   
9081  transfer_flows_annual(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs(techs),commodity,"brutto")
9082      $transfer_usedStartEnd(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs)
9083      = transfer_flows_annual(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs,commodity,"positive")
9084          - transfer_flows_annual(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs,commodity,"negative");
9085   
9086  transfer_flows_annual(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs(techs),commodity,"flh")
9087      $(transfer_usedStartEnd(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs)
9088          and transfer_flows_annual(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs,commodity,"brutto") > 0
9089          and transfer_caps(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs,commodity,"total") > 0)
9090      = transfer_flows_annual(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs,commodity,"brutto")
9091          / transfer_caps(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs,commodity,"total");
9092   
9093  transfer_losses(timeModelToCalc,nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs(techs),commodity)
9094      $(transfer_usedStartEnd(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs)
9095          and (sum(vintage$transfer_coefPerFlow(transfer_techs,vintage,commodity,"coefPerFlow"), 1)
9096              or sum((vintage, link_types)$transfer_coefPerLength(transfer_techs,vintage,commodity,link_types,"coefPerLength"), 1)))
9097      = -1 * abs(sum(vintage,
9098          ( transfer_flowAlong.l(timeModelToCalc,linksModel,yearsToCalc,transfer_techs,vintage)
9099              - transfer_flowAgainst.l(timeModelToCalc,linksModel,yearsToCalc,transfer_techs,vintage) )
9100          * ( transfer_coefPerFlow(transfer_techs,vintage,commodity,"coefPerFlow")
9101              + sum(link_types,
9102                  transfer_coefPerLength(transfer_techs,vintage,commodity,link_types,"coefPerLength")
9103                  * transfer_lengthParam(linksModel,link_types,"length")))))
9104          * timeLength(timeModelToCalc);
9105   
9106  transfer_losses_annual(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs(techs),commodity,"netto")
9107      $(transfer_usedStartEnd(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs)
9108          and (sum(vintage$transfer_coefPerFlow(transfer_techs,vintage,commodity,"coefPerFlow"), 1)
9109              or sum((vintage, link_types)$transfer_coefPerLength(transfer_techs,vintage,commodity,link_types,"coefPerLength"), 1)))
9110      = sum(timeModelToCalc,
9111          transfer_losses(timeModelToCalc,nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs,commodity));
9112   
9113   
9114  * ==== storage capacities ====
9115   
9116  storage_size_max(nodesModelToCalc,years,storage_techs(techs),commodity)
9117      $sum(vintage$(storage_usedTech(nodesModelToCalc,years,storage_techs,vintage)
9118              and storage_usedCom(storage_techs,vintage,commodity)
9119              and storage_sizeParam(storage_techs,vintage,commodity,"size")), 1)
9120      = smax(vintage$(storage_usedTech(nodesModelToCalc,years,storage_techs,vintage)
9121              and storage_usedCom(storage_techs,vintage,commodity)
9122              and storage_sizeParam(storage_techs,vintage,commodity,"size")),
9123          storage_sizeParam(storage_techs,vintage,commodity,"size"));
9124   
9125  storage_size_min(nodesModelToCalc,years,storage_techs(techs),commodity)
9126      $sum(vintage$(storage_usedTech(nodesModelToCalc,years,storage_techs,vintage)
9127              and storage_usedCom(storage_techs,vintage,commodity)
9128              and storage_sizeParam(storage_techs,vintage,commodity,"size")), 1)
9129      = smin(vintage$(storage_usedTech(nodesModelToCalc,years,storage_techs,vintage)
9130              and storage_usedCom(storage_techs,vintage,commodity)
9131              and storage_sizeParam(storage_techs,vintage,commodity,"size")),
9132          storage_sizeParam(storage_techs,vintage,commodity,"size"));
9133   
9134  storage_units_ext(map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,years),storage_techs(techs),vintage,"build")
9135      $storage_usedTech(nodesModelToCalc,years,storage_techs,vintage)
9136      = storage_unitsBuild.l(nodesModelToCalc,years,storage_techs,vintage);
9137   
9138  storage_units_ext(map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,years),storage_techs(techs),vintage,"decom")
9139      $storage_usedTech(nodesModelToCalc,years,storage_techs,vintage)
9140      = storage_unitsDecom.l(nodesModelToCalc,years,storage_techs,vintage);
9141   
9142  storage_units_ext(map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,years),storage_techs(techs),vintage,"total")
9143      $storage_usedTech(nodesModelToCalc,years,storage_techs,vintage)
9144      = storage_unitsTotal.l(nodesModelToCalc,years,storage_techs,vintage);
9145   
9146  storage_caps_ext(map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,years),storage_techs(techs),vintage,commodity,capType)
9147      $storage_sizeParam(storage_techs,vintage,commodity,"size")
9148      = storage_units_ext(accNodesModel,nodesModelToCalc,accYears,years,storage_techs,vintage,capType)
9149          * storage_sizeParam(storage_techs,vintage,commodity,"size");
9150   
9151  storage_caps_ext(map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,years),storage_techs(techs),vintage,commodity,"lowerLimit")
9152      $(storage_usedTech(nodesModelToCalc,years,storage_techs,vintage)
9153          and storage_reservoirParam(nodesModelToCalc,years,storage_techs,"unitsLowerLimit") > 0
9154          and storage_size_min(nodesModelToCalc,years,storage_techs,commodity))
9155      = storage_reservoirParam(nodesModelToCalc,years,storage_techs,"unitsLowerLimit")
9156          * storage_size_min(nodesModelToCalc,years,storage_techs,commodity);
9157   
9158  storage_caps_ext(map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,years),storage_techs(techs),vintage,commodity,"upperLimit")
9159      $(storage_usedTech(nodesModelToCalc,years,storage_techs,vintage)
9160          and storage_reservoirParam(nodesModelToCalc,years,storage_techs,"unitsUpperLimit") < inf
9161          and storage_size_max(nodesModelToCalc,years,storage_techs,commodity))
9162      = storage_reservoirParam(nodesModelToCalc,years,storage_techs,"unitsUpperLimit")
9163          * storage_size_max(nodesModelToCalc,years,storage_techs,commodity);
9164   
9165  storage_caps_ext(map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,years),storage_techs(techs),vintage,commodity,"total_degraded")
9166      $(storage_usedCom(storage_techs,vintage,commodity)
9167          and (storage_techParam(storage_techs,vintage,"annualDegradation") > 0
9168               or storage_techParam(storage_techs,vintage,"usageDegradation")))
9169      = sum((degradation_states,yearsCom), (storage_degradationParam(storage_techs,vintage,degradation_states,"remainingCapacity")
9170                                      - (years.val - yearsCom.val) * storage_techParam(storage_techs,vintage,"annualDegradation"))
9171                                      * storage_unitsStateTracker.l(nodesModelToCalc,years,yearsCom,storage_techs,vintage,degradation_states)
9172                                      * storage_sizeParam(storage_techs,vintage,commodity,"size"));
9173   
9174  storage_caps(accNodesModel,accYears,storage_techs(techs),commodity,capType)
9175      = sum((nodesModelToCalc,years,vintage)
9176              $(map_accNodesPostCalc(accNodesModel,nodesModelToCalc)
9177                  and map_accYearsPostCalc(accYears,years)),
9178          storage_caps_ext(accNodesModel,nodesModelToCalc,accYears,years,storage_techs,vintage,commodity,capType));
9179  option clear = storage_caps_ext;
9180   
9181  storage_units(accNodesModel,accYears,storage_techs(techs),vintage,capType)
9182      = sum((nodesModelToCalc,years)
9183              $(map_accNodesPostCalc(accNodesModel,nodesModelToCalc)
9184                  and map_accYearsPostCalc(accYears,years)),
9185          storage_units_ext(accNodesModel,nodesModelToCalc,accYears,years,storage_techs,vintage,capType));
9186  option clear = storage_units_ext;
9187   
9188   
9189  * ==== storage levels and flows ====
9190   
9191  storage_flows_ext(timeModelToCalc,map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,yearsToCalc),storage_techs(techs),vintage,commodity)
9192      $(storage_usedTech(nodesModelToCalc,yearsToCalc,storage_techs,vintage) and balance_techComm(storage_techs,commodity))
9193      = storage_level.l(timeModelToCalc,nodesModelToCalc,yearsToCalc,storage_techs,vintage,commodity)
9194          - storage_level.l(timeModelToCalc--1,nodesModelToCalc,yearsToCalc,storage_techs,vintage,commodity)
9196      + storage_losses.l(timeModelToCalc,nodesModelToCalc,yearsToCalc,storage_techs,vintage,commodity)
9197          * timeLength(timeModelToCalc)
9199      ;
9200   
9201  storage_flows(timeModelToCalc,accNodesModel,accYears,storage_techs(techs),commodity)
9202      = sum((nodesModelToCalc,yearsToCalc,vintage)
9203              $(storage_usedTech(nodesModelToCalc,yearsToCalc,storage_techs,vintage) and balance_techComm(storage_techs,commodity)),
9204          storage_flows_ext(timeModelToCalc,accNodesModel,nodesModelToCalc,accYears,yearsToCalc,storage_techs,vintage,commodity));
9205  option clear = storage_flows_ext;
9206   
9207  storage_level_out_ext(timeModelToCalc,map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,yearsToCalc),storage_techs(techs),vintage,commodity)
9208      $(storage_usedTech(nodesModelToCalc,yearsToCalc,storage_techs,vintage) and balance_techComm(storage_techs,commodity))
9209      = storage_level.l(timeModelToCalc,nodesModelToCalc,yearsToCalc,storage_techs,vintage,commodity);
9210   
9211  storage_level_out(timeModelToCalc,accNodesModel,accYears,storage_techs(techs),commodity)
9212      = sum((nodesModelToCalc,yearsToCalc,vintage)
9213              $(storage_usedTech(nodesModelToCalc,yearsToCalc,storage_techs,vintage) and balance_techComm(storage_techs,commodity)),
9214          storage_level_out_ext(timeModelToCalc,accNodesModel,nodesModelToCalc,accYears,yearsToCalc,storage_techs,vintage,commodity));
9215  option clear = storage_level_out_ext;
9216   
9217  storage_flows_annual(accNodesModel,accYears,storage_techs(techs),commodity,"netto")
9218      = sum(timeModelToCalc,
9219          storage_flows(timeModelToCalc,accNodesModel,accYears,storage_techs,commodity));
9220   
9221  storage_flows_annual(accNodesModel,accYears,storage_techs(techs),commodity,"positive")
9222      = sum(timeModelToCalc
9223              $(storage_flows(timeModelToCalc,accNodesModel,accYears,storage_techs,commodity) > 0),
9224          storage_flows(timeModelToCalc,accNodesModel,accYears,storage_techs,commodity));
9225   
9226  storage_flows_annual(accNodesModel,accYears,storage_techs(techs),commodity,"negative")
9227      = sum(timeModelToCalc
9228              $(storage_flows(timeModelToCalc,accNodesModel,accYears,storage_techs,commodity) < 0),
9229          storage_flows(timeModelToCalc,accNodesModel,accYears,storage_techs,commodity));
9230   
9231  storage_flows_annual(accNodesModel,accYears,storage_techs(techs),commodity,"brutto")
9232      = storage_flows_annual(accNodesModel,accYears,storage_techs,commodity,"positive")
9233          + storage_flows_annual(accNodesModel,accYears,storage_techs,commodity,"negative");
9234   
9235  storage_flows_annual(accNodesModel,accYears,storage_techs(techs),commodity,"flh")
9236      $(storage_flows_annual(accNodesModel,accYears,storage_techs,commodity,"brutto") > 0
9237          and storage_caps(accNodesModel,accYears,storage_techs,commodity,"total") > 0)
9238      = storage_flows_annual(accNodesModel,accYears,storage_techs,commodity,"brutto")
9239          / storage_caps(accNodesModel,accYears,storage_techs,commodity,"total");
9240   
9241  storage_losses_out(timeModelToCalc,accNodesModel,accYears,storage_techs(techs),commodity)
9242      = sum((nodesModelToCalc,yearsToCalc,vintage)
9243              $(storage_losses.l(timeModelToCalc,nodesModelToCalc,yearsToCalc,storage_techs,vintage,commodity)
9244                  and map_accNodesPostCalc(accNodesModel,nodesModelToCalc)
9245                  and map_accYearsPostCalc(accYears,yearsToCalc)),
9246          storage_losses.l(timeModelToCalc,nodesModelToCalc,yearsToCalc,storage_techs,vintage,commodity)
9247          * timeLength(timeModelToCalc));
9248   
9249  storage_losses_annual(accNodesModel,accYears,storage_techs(techs),commodity,"netto")
9250      = sum(timeModelToCalc,
9251          storage_losses_out(timeModelToCalc,accNodesModel,accYears,storage_techs,commodity));
9252   
9253   
9254  * == commodity balance ==
9255   
9256  commodity_balance_ext(timeModelToCalc,map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,yearsToCalc),converter_techs(techs),vintage,commodity)
9257      $(converter_usedTech(nodesModelToCalc,yearsToCalc,converter_techs,vintage)
9258          and balance_usedConverter(nodesModelToCalc,yearsToCalc,commodity))
9259      = sum((activity)
9260              $(converter_coefficientProfile(timeModelToCalc,nodesModelToCalc,yearsToCalc,converter_techs,vintage,activity,commodity)),
9261          converter_activity.l(timeModelToCalc,nodesModelToCalc,yearsToCalc,converter_techs,vintage,activity)
9262              * timeLength(timeModelToCalc)
9263              * converter_coefficientProfile(timeModelToCalc,nodesModelToCalc,yearsToCalc,converter_techs,vintage,activity,commodity)
9264          + converter_unitsUsingActivity_MIP.l(timeModelToCalc,nodesModelToCalc,yearsToCalc,converter_techs,vintage,activity)
9265              * timeLength(timeModelToCalc)
9266              * converter_coefficient(converter_techs,vintage,activity,commodity,"constant"));
9267   
9268  commodity_balance_ext(timeModelToCalc,map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,yearsToCalc),storage_techs(techs),vintage,commodity)
9269      $(storage_usedTech(nodesModelToCalc,yearsToCalc,storage_techs,vintage)
9270          and storage_sizeParam(storage_techs,vintage,commodity,"size"))
9271      = commodity_balance_ext(timeModelToCalc,accNodesModel,nodesModelToCalc,accYears,yearsToCalc,storage_techs,vintage,commodity)
9272      + storage_level.l(timeModelToCalc--1,nodesModelToCalc,yearsToCalc,storage_techs,vintage,commodity)
9273          - storage_level.l(timeModelToCalc,nodesModelToCalc,yearsToCalc,storage_techs,vintage,commodity)
9274      - storage_losses.l(timeModelToCalc,nodesModelToCalc,yearsToCalc,storage_techs,vintage,commodity)
9275      * timeLength(timeModelToCalc);
9276   
9277  commodity_balance_ext(timeModelToCalc,map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,yearsToCalc),sourcesink_techs(techs),vintage,commodity)
9278      $(sourcesink_enabled(nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity)
9279          and sameas(yearsToCalc,vintage))
9280      = commodity_balance_ext(timeModelToCalc,accNodesModel,nodesModelToCalc,accYears,yearsToCalc,sourcesink_techs,vintage,commodity)
9281      + sourcesink_flow.l(timeModelToCalc,nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity)
9282      * timeLength(timeModelToCalc);
9283   
9284  commodity_balance_ext(timeModelToCalc,map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,yearsToCalc),transfer_techs(techs),vintage,commodity)
9285      $sum((linksModel)
9286          $(transfer_incidenceModel(nodesModelToCalc,linksModel)
9287                  and transfer_usedTech(linksModel,yearsToCalc,transfer_techs,vintage)
9288                  and transfer_coefficient(transfer_techs,vintage,commodity,"coefficient")), 1)
9289      = commodity_balance_ext(timeModelToCalc,accNodesModel,nodesModelToCalc,accYears,yearsToCalc,transfer_techs,vintage,commodity)
9290      + sum((linksModel)
9291              $(transfer_incidenceModel(nodesModelToCalc,linksModel)
9292                  and transfer_usedTech(linksModel,yearsToCalc,transfer_techs,vintage)
9293                  and transfer_coefficient(transfer_techs,vintage,commodity,"coefficient")),
9294   
9295              (transfer_flowAlong.l(timeModelToCalc,linksModel,yearsToCalc,transfer_techs,vintage)
9296                      $(transfer_incidenceModel(nodesModelToCalc,linksModel) > 0)
9297                + transfer_flowAgainst.l(timeModelToCalc,linksModel,yearsToCalc,transfer_techs,vintage)
9298                      $(transfer_incidenceModel(nodesModelToCalc,linksModel) < 0))
9299              * timeLength(timeModelToCalc)
9300              * transfer_coefficient(transfer_techs,vintage,commodity,"coefficient")
9301   
9302              - (transfer_flowAlong.l(timeModelToCalc,linksModel,yearsToCalc,transfer_techs,vintage)
9303                      $(transfer_incidenceModel(nodesModelToCalc,linksModel) < 0)
9304                + transfer_flowAgainst.l(timeModelToCalc,linksModel,yearsToCalc,transfer_techs,vintage)
9305                      $(transfer_incidenceModel(nodesModelToCalc,linksModel) > 0))
9306              * timeLength(timeModelToCalc)
9307              * transfer_coefficient(transfer_techs,vintage,commodity,"coefficient")
9308   
9309              + 0.5 * ((transfer_flowAlong.l(timeModelToCalc,linksModel,yearsToCalc,transfer_techs,vintage)
9310                          $(transfer_incidenceModel(nodesModelToCalc,linksModel) <> 0)
9311                      + transfer_flowAgainst.l(timeModelToCalc,linksModel,yearsToCalc,transfer_techs,vintage)
9312                          $(transfer_incidenceModel(nodesModelToCalc,linksModel) <> 0))
9313                      * timeLength(timeModelToCalc)
9314                      * ( transfer_coefPerFlow(transfer_techs,vintage,commodity,"coefPerFlow")
9315                          + sum(link_types,
9316                              transfer_coefPerLength(transfer_techs,vintage,commodity,link_types,"coefPerLength")
9317                              * transfer_lengthParam(linksModel,link_types,"length")))))
9318      ;
9319   
9320  commodity_balance(timeModelToCalc,accNodesModel,accYears,balance_techComm(techs,commodity))
9321      = sum((nodesModelToCalc,yearsToCalc,vintage)
9322              $(commodity_balance_ext(timeModelToCalc,accNodesModel,nodesModelToCalc,accYears,yearsToCalc,techs,vintage,commodity)
9323                  and map_accNodesPostCalc(accNodesModel,nodesModelToCalc)
9324                  and map_accYearsPostCalc(accYears,yearsToCalc)),
9325          commodity_balance_ext(timeModelToCalc,accNodesModel,nodesModelToCalc,accYears,yearsToCalc,techs,vintage,commodity));
9326  option clear = commodity_balance_ext;
9327   
9328   
9329  * ==== annual commodity sums ====
9330   
9331  commodity_balance_annual(accNodesModel,accYears,techs,commodity,"netto")
9332      = sum(timeModelToCalc,
9333          commodity_balance(timeModelToCalc,accNodesModel,accYears,techs,commodity));
9334   
9335  commodity_balance_annual(accNodesModel,accYears,techs,commodity,"positive")
9336      = sum(timeModelToCalc
9337              $(commodity_balance(timeModelToCalc,accNodesModel,accYears,techs,commodity) > 0),
9338          commodity_balance(timeModelToCalc,accNodesModel,accYears,techs,commodity));
9339   
9340  commodity_balance_annual(accNodesModel,accYears,techs,commodity,"negative")
9341      = sum(timeModelToCalc
9342              $(commodity_balance(timeModelToCalc,accNodesModel,accYears,techs,commodity) < 0),
9343          commodity_balance(timeModelToCalc,accNodesModel,accYears,techs,commodity));
9344   
9345  commodity_balance_annual(accNodesModel,accYears,techs,commodity,"brutto")
9346      = commodity_balance_annual(accNodesModel,accYears,techs,commodity,"positive")
9347          - commodity_balance_annual(accNodesModel,accYears,techs,commodity,"negative");
9348   
9349  commodity_balance_annual(accNodesModel,accYears,techs,commodity,"flh")
9350      $(commodity_balance_annual(accNodesModel,accYears,techs,commodity,"brutto") > 0
9351          and converter_caps(accNodesModel,accYears,techs,commodity,"total") > 0 )
9352      = commodity_balance_annual(accNodesModel,accYears,techs,commodity,"brutto")
9353          / converter_caps(accNodesModel,accYears,techs,commodity,"total");
9354   
9355   
9356  * ==== marginal information ====
9357   
9358  marginals_balance(timeModelToCalc,nodesModelToCalc,yearsToCalc,commodity)
9359    $balance_usedBalance(nodesModelToCalc,yearsToCalc,commodity)
9360    =
9361    Eq_balance_commodities.m(timeModelToCalc,nodesModelToCalc,yearsToCalc,commodity);
9362   
9363  marginals_sourcesink_profile(timeModelToCalc,nodesModelToCalc,yearsToCalc,sourcesink_techs(techs),commodity)
9364      $( sourcesink_flow.m(timeModelToCalc,nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity) <> 0 )
9365      =
9366      sourcesink_flow.m(timeModelToCalc,nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity);
9367   
9368  marginals_sourcesink_sum(nodesModelToCalc,yearsToCalc,sourcesink_techs(techs),commodity)
9369      $( ( Eq_sourcesink_useLowerSum.m(nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity)
9370          + Eq_sourcesink_useUpperSum.m(nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity)
9371          + Eq_sourcesink_useFixedSum.m(nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity) ) <> eps )
9372      =
9373      ( Eq_sourcesink_useLowerSum.m(nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity)
9374      + Eq_sourcesink_useUpperSum.m(nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity)
9375      + Eq_sourcesink_useFixedSum.m(nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity) );
9376   
9377  marginals_indicator_bounds(accNodesModel,accYears,indicator)
9378      $( accounting_indicator.m(accNodesModel,accYears,indicator) <> 0 )
9379      =
9380      accounting_indicator.m(accNodesModel,accYears,indicator);
9381   
9382   
9383  * ==== R2A postcalc information ====
9384   
9386   
9387   
9388  * ==== round profiles to reduce size of gdx ====
9389   
9391  commodity_balance(timeModelToCalc,accNodesModel,accYears,techs,commodity)
9392      $commodity_balance(timeModelToCalc,accNodesModel,accYears,techs,commodity)
9393      = round(commodity_balance(timeModelToCalc,accNodesModel,accYears,techs,commodity), 6);
9394   
9395  transfer_flows(timeModelToCalc,nodesModelToCalc,nodesModelToCalc_a,linksModel,yearsToCalc,transfer_techs,commodity)
9396      $transfer_flows(timeModelToCalc,nodesModelToCalc,nodesModelToCalc_a,linksModel,yearsToCalc,transfer_techs,commodity)
9397      = round(transfer_flows(timeModelToCalc,nodesModelToCalc,nodesModelToCalc_a,linksModel,yearsToCalc,transfer_techs,commodity), 6);
9398   
9399  transfer_losses(timeModelToCalc,nodesModelToCalc,nodesModelToCalc_a,linksModel,yearsToCalc,transfer_techs,commodity)
9400      $transfer_losses(timeModelToCalc,nodesModelToCalc,nodesModelToCalc_a,linksModel,yearsToCalc,transfer_techs,commodity)
9401      = round(transfer_losses(timeModelToCalc,nodesModelToCalc,nodesModelToCalc_a,linksModel,yearsToCalc,transfer_techs,commodity), 6);
9402   
9403  storage_flows(timeModelToCalc,accNodesModel,accYears,storage_techs,commodity)
9404      $storage_flows(timeModelToCalc,accNodesModel,accYears,storage_techs,commodity)
9405      = round(storage_flows(timeModelToCalc,accNodesModel,accYears,storage_techs,commodity), 6);
9406   
9407  storage_level_out(timeModelToCalc,accNodesModel,accYears,storage_techs,commodity)
9408      $storage_level_out(timeModelToCalc,accNodesModel,accYears,storage_techs,commodity)
9409      = round(storage_level_out(timeModelToCalc,accNodesModel,accYears,storage_techs,commodity), 6);
9410   
9411  marginals_balance(timeModelToCalc,nodesModelToCalc,yearsToCalc,commodity)
9412      $marginals_balance(timeModelToCalc,nodesModelToCalc,yearsToCalc,commodity)
9413      = round(marginals_balance(timeModelToCalc,nodesModelToCalc,yearsToCalc,commodity), 6);
9414   
9415  marginals_sourcesink_profile(timeModelToCalc,nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity)
9416      $marginals_sourcesink_profile(timeModelToCalc,nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity)
9417      = round(marginals_sourcesink_profile(timeModelToCalc,nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity), 6);
9419   
INCLUDE    C:\Local\REMix\framework\remix\framework\model\source\postcalc\writegdx.gms
9422  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
9423  * SPDX-License-Identifier: BSD-3-Clause
9424   
9427   
9428  execute_unload "C:\Local\REMix\remix_nz\output\will\00-test-elec_2020-2035-2050\result\00-test-elec_2020-2035-2050.gdx"
9429      metadata
9430      timeModel
9431      timeModelToCalc
9432      nodesModel
9433      linksModel
9434      indicator
9435      commodity
9436      techs
9437      accNodesModel
9438      accYears
9439   
9440      map_nodesModel
9441      map_linksModel
9442      map_nodesAccounting
9443   
9444      indicator_accounting
9445      indicator_accounting_ref
9446      indicator_accounting_comp
9447      indicator_accounting_detailed
9448      indicator_accounting_links
9449   
9450      converter_caps
9451      converter_units
9453   
9454      transfer_caps
9455      transfer_links
9456      transfer_flows
9457      transfer_flows_annual
9458      transfer_losses
9459      transfer_losses_annual
9460   
9461      storage_caps
9462      storage_units
9463      storage_flows
9464      storage_level_out
9465      storage_flows_annual
9466      storage_losses_out
9467      storage_losses_annual
9469   
9470      commodity_balance
9471      commodity_balance_annual
9472   
9473      marginals_balance
9474      marginals_sourcesink_profile
9475      marginals_sourcesink_sum
9476      marginals_indicator_bounds
9477   
9479      ;
GAMS 40.4.0  d540b52e Oct 3, 2022           WEX-WEI x86 64bit/MS Windows - 03/22/24 15:20:01 Page 2
G e n e r a l   A l g e b r a i c   M o d e l i n g   S y s t e m
Include File Summary


   SEQ   GLOBAL TYPE      PARENT   LOCAL  FILENAME

     1        1 INPUT          0       0  C:\Local\REMix\framework\remix\framework\model\run_remix.gms
     2       13 IF DEXIST      1      13  C:\Local\REMix\remix_nz\output\will\00-test-elec_2020-2035-2050\data\
     3       16 INCLUDE        1      16  .C:\Local\REMix\framework\remix\framework\model\source\metadata.gms
     4       25 CALL           3       9  .printf "remix_version \"0.9.7\"\n" > C:\Local\REMix\remix_nz\process\225c\\metadata
     5       26 CALL           3      10  .printf "gams_version \"40.4.0\"\n" >> C:\Local\REMix\remix_nz\process\225c\\metadata
     6       27 CALL           3      11  .printf "timestamp \"03/22/24 15:20:01\"\n" >> C:\Local\REMix\remix_nz\process\225c\\metadata
     7       29 CALL           3      13  .printf "framework_path " >> C:\Local\REMix\remix_nz\process\225c\\metadata
     8       31 CALL           3      15  .cd C:\Local\REMix\framework\remix\framework\model\source && cd| sed "s/^/\"/;s/$/\"/" >> C:\Local\REMix\remix_nz\process\225c\\metadata
     9       33 CALL           3      19  .printf "\n" >> C:\Local\REMix\remix_nz\process\225c\\metadata
    10       34 CALL           3      20  .printf "framework_hash " >> C:\Local\REMix\remix_nz\process\225c\\metadata
    11       36 CALL           3      22  .cd C:\Local\REMix\framework\remix\framework\model\source && git rev-parse HEAD >nul 2>&1 && git rev-parse HEAD >> C:\Local\REMix\remix_nz\process\225c\\metadata
    12       38 CALL           3      26  .printf "\n" >> C:\Local\REMix\remix_nz\process\225c\\metadata
    13       39 CALL           3      27  .printf "framework_branch " >> C:\Local\REMix\remix_nz\process\225c\\metadata
    14       41 CALL           3      29  .cd C:\Local\REMix\framework\remix\framework\model\source && git rev-parse --abbrev-ref HEAD >nul 2>&1 && git rev-parse --abbrev-ref HEAD | sed "s/^/\"/;s/$/\"/" >> C:\Local\REMix\remix_nz\process\225c\\metadata
    15       43 CALL           3      33  .printf "\n" >> C:\Local\REMix\remix_nz\process\225c\\metadata
    16       45 CALL           3      35  .printf "project_path " >> C:\Local\REMix\remix_nz\process\225c\\metadata
    17       47 CALL           3      37  .cd C:\Local\REMix\remix_nz\output\will\00-test-elec_2020-2035-2050\data\./ && cd| sed "s/^/\"/;s/$/\"/" >> C:\Local\REMix\remix_nz\process\225c\\metadata
    18       49 CALL           3      41  .printf "\n" >> C:\Local\REMix\remix_nz\process\225c\\metadata
    19       50 CALL           3      42  .printf "project_hash " >> C:\Local\REMix\remix_nz\process\225c\\metadata
    20       52 CALL           3      44  .cd C:\Local\REMix\remix_nz\output\will\00-test-elec_2020-2035-2050\data\./ && git rev-parse HEAD >nul 2>&1 && git rev-parse HEAD | sed "s/^/\"/;s/$/\"/" >> C:\Local\REMix\remix_nz\process\225c\\metadata
    21       54 CALL           3      48  .printf "\n" >> C:\Local\REMix\remix_nz\process\225c\\metadata
    22       55 CALL           3      49  .printf "project_branch " >> C:\Local\REMix\remix_nz\process\225c\\metadata
    23       57 CALL           3      51  .cd C:\Local\REMix\remix_nz\output\will\00-test-elec_2020-2035-2050\data\./ && git rev-parse --abbrev-ref HEAD >nul 2>&1 && git rev-parse --abbrev-ref HEAD | sed "s/^/\"/;s/$/\"/" >> C:\Local\REMix\remix_nz\process\225c\\metadata
    24       59 CALL           3      55  .printf "\n" >> C:\Local\REMix\remix_nz\process\225c\\metadata
    25       62 INCLUDE        3      58  ..C:\Local\REMix\remix_nz\process\225c\metadata
    26       79 INCLUDE        1      17  .C:\Local\REMix\framework\remix\framework\model\source\data_inheritance.gms
    27      123 INCLUDE        1      26  .C:\Local\REMix\framework\remix\framework\model\source\remix.gms
    28      145 INCLUDE       27      22  ..C:\Local\REMix\framework\remix\framework\model\source\sets.gms
    29      165 IF EXIST      28      20  ..C:\Local\REMix\remix_nz\process\225c\map_aggregatetimemodel.csv
    30      216 IF EXIST      28      97  ..C:\Local\REMix\remix_nz\process\225c\set_nodesmodel.csv
    31      216 INCLUDE       28      97  ...C:\Local\REMix\remix_nz\process\225c\set_nodesmodel.csv
    32      229 IF EXIST      28      99  ..C:\Local\REMix\remix_nz\process\225c\set_nodesmodel.csv
    33      236 IF EXIST      28     106  ..C:\Local\REMix\remix_nz\process\225c\set_nodesdata.csv
    34      236 INCLUDE       28     106  ...C:\Local\REMix\remix_nz\process\225c\set_nodesdata.csv
    35      249 IF EXIST      28     108  ..C:\Local\REMix\remix_nz\process\225c\set_nodesdata.csv
    36      255 IF EXIST      28     114  ..C:\Local\REMix\remix_nz\process\225c\set_nodesmodelsel.csv
    37      255 INCLUDE       28     114  ...C:\Local\REMix\remix_nz\process\225c\set_nodesmodelsel.csv
    38      268 IF EXIST      28     116  ..C:\Local\REMix\remix_nz\process\225c\set_nodesmodelsel.csv
    39      270 IF EXIST      28     118  ..C:\Local\REMix\remix_nz\process\225c\set_nodesmodelsel.csv
    40      283 IF EXIST      28     131  ..C:\Local\REMix\remix_nz\process\225c\map_aggregatenodesmodel.csv
    41      283 INCLUDE       28     131  ...C:\Local\REMix\remix_nz\process\225c\map_aggregatenodesmodel.csv
    42      296 IF EXIST      28     133  ..C:\Local\REMix\remix_nz\process\225c\map_aggregatenodesmodel.csv
    43      299 IF EXIST      28     136  ..C:\Local\REMix\remix_nz\process\225c\map_aggregatenodesmodel.csv
    44      322 IF EXIST      28     159  ..C:\Local\REMix\remix_nz\process\225c\set_years.csv
    45      322 INCLUDE       28     159  ...C:\Local\REMix\remix_nz\process\225c\set_years.csv
    46      357 IF EXIST      28     161  ..C:\Local\REMix\remix_nz\process\225c\set_years.csv
    47      366 IF EXIST      28     170  ..C:\Local\REMix\remix_nz\process\225c\set_years.csv
    48      366 INCLUDE       28     170  ...C:\Local\REMix\remix_nz\process\225c\set_years.csv
    49      401 IF EXIST      28     172  ..C:\Local\REMix\remix_nz\process\225c\set_years.csv
    50      407 IF EXIST      28     178  ..C:\Local\REMix\remix_nz\process\225c\set_yearssel.csv
    51      407 INCLUDE       28     178  ...C:\Local\REMix\remix_nz\process\225c\set_yearssel.csv
    52      412 IF EXIST      28     180  ..C:\Local\REMix\remix_nz\process\225c\set_yearssel.csv
    53      430 IF EXIST      28     198  ..C:\Local\REMix\remix_nz\process\225c\set_activities.csv
    54      430 INCLUDE       28     198  ...C:\Local\REMix\remix_nz\process\225c\set_activities.csv
    55      438 IF EXIST      28     200  ..C:\Local\REMix\remix_nz\process\225c\set_activities.csv
    56      446 IF EXIST      28     208  ..C:\Local\REMix\remix_nz\process\225c\set_gridsegments.csv
    57      448 IF EXIST      28     210  ..C:\Local\REMix\remix_nz\process\225c\set_gridsegments.csv
    58      456 IF EXIST      28     218  ..C:\Local\REMix\remix_nz\process\225c\set_linksdata.csv
    59      456 INCLUDE       28     218  ...C:\Local\REMix\remix_nz\process\225c\set_linksdata.csv
    60      470 IF EXIST      28     220  ..C:\Local\REMix\remix_nz\process\225c\set_linksdata.csv
    61      488 IF EXIST      28     238  ..C:\Local\REMix\remix_nz\process\225c\set_link_types.csv
    62      488 INCLUDE       28     238  ...C:\Local\REMix\remix_nz\process\225c\set_link_types.csv
    63      492 IF EXIST      28     240  ..C:\Local\REMix\remix_nz\process\225c\set_link_types.csv
    64      501 IF EXIST      28     249  ..C:\Local\REMix\remix_nz\process\225c\set_commodities.csv
    65      501 INCLUDE       28     249  ...C:\Local\REMix\remix_nz\process\225c\set_commodities.csv
    66      509 IF EXIST      28     251  ..C:\Local\REMix\remix_nz\process\225c\set_commodities.csv
    67      518 IF EXIST      28     260  ..C:\Local\REMix\remix_nz\process\225c\set_indicators.csv
    68      518 INCLUDE       28     260  ...C:\Local\REMix\remix_nz\process\225c\set_indicators.csv
    69      527 IF EXIST      28     262  ..C:\Local\REMix\remix_nz\process\225c\set_indicators.csv
    70      536 IF EXIST      28     271  ..C:\Local\REMix\remix_nz\process\225c\set_converter_techs.csv
    71      536 INCLUDE       28     271  ...C:\Local\REMix\remix_nz\process\225c\set_converter_techs.csv
    72      555 IF EXIST      28     274  ..C:\Local\REMix\remix_nz\process\225c\set_storage_techs.csv
    73      555 INCLUDE       28     274  ...C:\Local\REMix\remix_nz\process\225c\set_storage_techs.csv
    74      560 IF EXIST      28     277  ..C:\Local\REMix\remix_nz\process\225c\set_transfer_techs.csv
    75      560 INCLUDE       28     277  ...C:\Local\REMix\remix_nz\process\225c\set_transfer_techs.csv
    76      564 IF EXIST      28     280  ..C:\Local\REMix\remix_nz\process\225c\set_sourcesink_techs.csv
    77      564 INCLUDE       28     280  ...C:\Local\REMix\remix_nz\process\225c\set_sourcesink_techs.csv
    78      575 IF EXIST      28     285  ..C:\Local\REMix\remix_nz\process\225c\set_converter_techs.csv
    79      575 INCLUDE       28     285  ...C:\Local\REMix\remix_nz\process\225c\set_converter_techs.csv
    80      592 IF EXIST      28     286  ..C:\Local\REMix\remix_nz\process\225c\set_converter_techs.csv
    81      596 IF EXIST      28     290  ..C:\Local\REMix\remix_nz\process\225c\set_storage_techs.csv
    82      596 INCLUDE       28     290  ...C:\Local\REMix\remix_nz\process\225c\set_storage_techs.csv
    83      599 IF EXIST      28     291  ..C:\Local\REMix\remix_nz\process\225c\set_storage_techs.csv
    84      604 IF EXIST      28     296  ..C:\Local\REMix\remix_nz\process\225c\set_transfer_techs.csv
    85      604 INCLUDE       28     296  ...C:\Local\REMix\remix_nz\process\225c\set_transfer_techs.csv
    86      606 IF EXIST      28     297  ..C:\Local\REMix\remix_nz\process\225c\set_transfer_techs.csv
    87      610 IF EXIST      28     301  ..C:\Local\REMix\remix_nz\process\225c\set_sourcesink_techs.csv
    88      610 INCLUDE       28     301  ...C:\Local\REMix\remix_nz\process\225c\set_sourcesink_techs.csv
    89      617 IF EXIST      28     302  ..C:\Local\REMix\remix_nz\process\225c\set_sourcesink_techs.csv
    90      627 IF EXIST      28     312  ..C:\Local\REMix\remix_nz\process\225c\set_degradation_states.csv
    91      629 IF EXIST      28     314  ..C:\Local\REMix\remix_nz\process\225c\set_degradation_states.csv
    92      638 IF EXIST      28     323  ..C:\Local\REMix\remix_nz\process\225c\set_soc.csv
    93      640 IF EXIST      28     325  ..C:\Local\REMix\remix_nz\process\225c\set_soc.csv
    94      656 IF EXIST      28     341  ..C:\Local\REMix\remix_nz\process\225c\transfer_linkstartend.csv
    95      656 INCLUDE       28     341  ...C:\Local\REMix\remix_nz\process\225c\transfer_linkstartend.csv
    96      683 IF EXIST      28     343  ..C:\Local\REMix\remix_nz\process\225c\transfer_linkstartend.csv
    97      697 BATINCLUDE    28     357  ...C:\Local\REMix\framework\remix\framework\model\source\battools\aggregateNodes.gms
    98      808 IF EXIST      28     466  ..C:\Local\REMix\remix_nz\process\225c\set_accnodes.csv
    99      810 IF EXIST      28     468  ..C:\Local\REMix\remix_nz\process\225c\set_accnodes.csv
   100      875 IF EXIST      28     533  ..C:\Local\REMix\remix_nz\process\225c\map_accnodes.csv
   101      877 IF EXIST      28     535  ..C:\Local\REMix\remix_nz\process\225c\map_accnodes.csv
   102      931 INCLUDE       27      23  ..C:\Local\REMix\framework\remix\framework\model\source\accounting\input.gms
   103      963 IF EXIST     102      32  ..C:\Local\REMix\remix_nz\process\225c\accounting_converterunits.csv
   104      963 INCLUDE      102      32  ...C:\Local\REMix\remix_nz\process\225c\accounting_converterunits.csv
   105     1010 IF EXIST     102      34  ..C:\Local\REMix\remix_nz\process\225c\accounting_converterunits.csv
   106     1024 IF EXIST     102      48  ..C:\Local\REMix\remix_nz\process\225c\accounting_converteractivity.csv
   107     1024 INCLUDE      102      48  ...C:\Local\REMix\remix_nz\process\225c\accounting_converteractivity.csv
   108     1045 IF EXIST     102      50  ..C:\Local\REMix\remix_nz\process\225c\accounting_converteractivity.csv
   109     1062 IF EXIST     102      67  ..C:\Local\REMix\remix_nz\process\225c\accounting_converterstartup.csv
   110     1064 IF EXIST     102      69  ..C:\Local\REMix\remix_nz\process\225c\accounting_converterstartup.csv
   111     1083 IF EXIST     102      88  ..C:\Local\REMix\remix_nz\process\225c\accounting_storageunits.csv
   112     1083 INCLUDE      102      88  ...C:\Local\REMix\remix_nz\process\225c\accounting_storageunits.csv
   113     1098 IF EXIST     102      90  ..C:\Local\REMix\remix_nz\process\225c\accounting_storageunits.csv
   114     1120 IF EXIST     102     112  ..C:\Local\REMix\remix_nz\process\225c\accounting_transferlinks.csv
   115     1120 INCLUDE      102     112  ...C:\Local\REMix\remix_nz\process\225c\accounting_transferlinks.csv
   116     1129 IF EXIST     102     114  ..C:\Local\REMix\remix_nz\process\225c\accounting_transferlinks.csv
   117     1151 IF EXIST     102     136  ..C:\Local\REMix\remix_nz\process\225c\accounting_transferperlength.csv
   118     1151 INCLUDE      102     136  ...C:\Local\REMix\remix_nz\process\225c\accounting_transferperlength.csv
   119     1166 IF EXIST     102     138  ..C:\Local\REMix\remix_nz\process\225c\accounting_transferperlength.csv
   120     1181 IF EXIST     102     153  ..C:\Local\REMix\remix_nz\process\225c\accounting_sourcesinkflow.csv
   121     1181 INCLUDE      102     153  ...C:\Local\REMix\remix_nz\process\225c\accounting_sourcesinkflow.csv
   122     1191 IF EXIST     102     155  ..C:\Local\REMix\remix_nz\process\225c\accounting_sourcesinkflow.csv
   123     1205 IF EXIST     102     169  ..C:\Local\REMix\remix_nz\process\225c\accounting_perindicator.csv
   124     1205 INCLUDE      102     169  ...C:\Local\REMix\remix_nz\process\225c\accounting_perindicator.csv
   125     1213 IF EXIST     102     171  ..C:\Local\REMix\remix_nz\process\225c\accounting_perindicator.csv
   126     1239 IF EXIST     102     197  ..C:\Local\REMix\remix_nz\process\225c\accounting_indicatorbounds.csv
   127     1239 INCLUDE      102     197  ...C:\Local\REMix\remix_nz\process\225c\accounting_indicatorbounds.csv
   128     1243 IF EXIST     102     199  ..C:\Local\REMix\remix_nz\process\225c\accounting_indicatorbounds.csv
   129     1262 IF EXIST     102     218  ..C:\Local\REMix\remix_nz\process\225c\accounting_indicatorbounds_links.csv
   130     1264 IF EXIST     102     220  ..C:\Local\REMix\remix_nz\process\225c\accounting_indicatorbounds_links.csv
   131     1270 BATINCLUDE   102     226  ...C:\Local\REMix\framework\remix\framework\model\source\battools\aggregateAccountingMean.gms
   132     1329 BATINCLUDE   102     227  ...C:\Local\REMix\framework\remix\framework\model\source\battools\aggregateAccountingMean.gms
   133     1372 BATINCLUDE   102     228  ...C:\Local\REMix\framework\remix\framework\model\source\battools\aggregateAccountingMean.gms
   134     1415 BATINCLUDE   102     229  ...C:\Local\REMix\framework\remix\framework\model\source\battools\aggregateAccountingMean.gms
   135     1474 BATINCLUDE   102     230  ...C:\Local\REMix\framework\remix\framework\model\source\battools\aggregateAccountingMean.gms
   136     1533 BATINCLUDE   102     231  ...C:\Local\REMix\framework\remix\framework\model\source\battools\aggregateAccountingMean.gms
   137     1592 BATINCLUDE   102     232  ...C:\Local\REMix\framework\remix\framework\model\source\battools\aggregateAccountingMean.gms
   138     2001 INCLUDE       27      24  ..C:\Local\REMix\framework\remix\framework\model\source\accounting\annuities.gms
   139     2075 INCLUDE       27      26  ..C:\Local\REMix\framework\remix\framework\model\source\methods\mga_pre.gms
   140     2081 INCLUDE       27      27  ..C:\Local\REMix\framework\remix\framework\model\source\methods\pareto_pre.gms
   141     2087 INCLUDE       27      28  ..C:\Local\REMix\framework\remix\framework\model\source\postcalc\declaration.gms
   142     2104 IF DEXIST    141      17  ..C:\Local\REMix\remix_nz\output\will\00-test-elec_2020-2035-2050\result\
   143     2306 INCLUDE       27      29  ..C:\Local\REMix\framework\remix\framework\model\source\loadgdx.gms
   144     2315 INCLUDE       27      31  ..C:\Local\REMix\framework\remix\framework\model\source\core\converter.gms
   145     2418 IF EXIST     144     103  ..C:\Local\REMix\remix_nz\process\225c\converter_capacityparam.csv
   146     2418 INCLUDE      144     103  ...C:\Local\REMix\remix_nz\process\225c\converter_capacityparam.csv
   147     3474 IF EXIST     144     105  ..C:\Local\REMix\remix_nz\process\225c\converter_capacityparam.csv
   148     3482 BATINCLUDE   144     113  ...C:\Local\REMix\framework\remix\framework\model\source\battools\aggregateNodes.gms
   149     3493 BATINCLUDE   144     114  ...C:\Local\REMix\framework\remix\framework\model\source\battools\aggregateNodes.gms
   150     3526 IF EXIST     144     137  ..C:\Local\REMix\remix_nz\process\225c\converter_techparam.csv
   151     3526 INCLUDE      144     137  ...C:\Local\REMix\remix_nz\process\225c\converter_techparam.csv
   152     3551 IF EXIST     144     139  ..C:\Local\REMix\remix_nz\process\225c\converter_techparam.csv
   153     3573 IF EXIST     144     161  ..C:\Local\REMix\remix_nz\process\225c\converter_activityprofile.csv
   154     3573 INCLUDE      144     161  ...C:\Local\REMix\remix_nz\process\225c\converter_activityprofile.csv
   155     4046 IF EXIST     144     162  ..C:\Local\REMix\remix_nz\process\225c\converter_activityprofile.csv
   156     4048 IF EXIST     144     164  ..C:\Local\REMix\remix_nz\process\225c\converter_activityprofile.csv
   157     4068 IF EXIST     144     184  ..C:\Local\REMix\remix_nz\process\225c\converter_coefficient.csv
   158     4068 INCLUDE      144     184  ...C:\Local\REMix\remix_nz\process\225c\converter_coefficient.csv
   159     4210 IF EXIST     144     185  ..C:\Local\REMix\remix_nz\process\225c\converter_coefficient.csv
   160     4211 IF EXIST     144     186  ..C:\Local\REMix\remix_nz\process\225c\converter_coefficient.csv
   161     4213 IF EXIST     144     188  ..C:\Local\REMix\remix_nz\process\225c\converter_coefficient.csv
   162     4225 IF EXIST     144     200  ..C:\Local\REMix\remix_nz\process\225c\converter_coefficientprofile.csv
   163     4226 IF EXIST     144     201  ..C:\Local\REMix\remix_nz\process\225c\converter_coefficientprofile.csv
   164     4228 IF EXIST     144     203  ..C:\Local\REMix\remix_nz\process\225c\converter_coefficientprofile.csv
   165     5164 INCLUDE       27      32  ..C:\Local\REMix\framework\remix\framework\model\source\core\storage.gms
   166     5255 IF EXIST     165      91  ..C:\Local\REMix\remix_nz\process\225c\storage_reservoirparam.csv
   167     5255 INCLUDE      165      91  ...C:\Local\REMix\remix_nz\process\225c\storage_reservoirparam.csv
   168     5304 IF EXIST     165      93  ..C:\Local\REMix\remix_nz\process\225c\storage_reservoirparam.csv
   169     5308 BATINCLUDE   165      97  ...C:\Local\REMix\framework\remix\framework\model\source\battools\aggregateNodes.gms
   170     5319 BATINCLUDE   165      98  ...C:\Local\REMix\framework\remix\framework\model\source\battools\aggregateNodes.gms
   171     5355 IF EXIST     165     124  ..C:\Local\REMix\remix_nz\process\225c\storage_techparam.csv
   172     5355 INCLUDE      165     124  ...C:\Local\REMix\remix_nz\process\225c\storage_techparam.csv
   173     5364 IF EXIST     165     126  ..C:\Local\REMix\remix_nz\process\225c\storage_techparam.csv
   174     5385 IF EXIST     165     147  ..C:\Local\REMix\remix_nz\process\225c\storage_sizeparam.csv
   175     5385 INCLUDE      165     147  ...C:\Local\REMix\remix_nz\process\225c\storage_sizeparam.csv
   176     5394 IF EXIST     165     149  ..C:\Local\REMix\remix_nz\process\225c\storage_sizeparam.csv
   177     5411 IF EXIST     165     166  ..C:\Local\REMix\remix_nz\process\225c\storage_socparam.csv
   178     5413 IF EXIST     165     168  ..C:\Local\REMix\remix_nz\process\225c\storage_socparam.csv
   179     5432 IF EXIST     165     187  ..C:\Local\REMix\remix_nz\process\225c\storage_degradationparam.csv
   180     5434 IF EXIST     165     189  ..C:\Local\REMix\remix_nz\process\225c\storage_degradationparam.csv
   181     5463 IF EXIST     165     218  ..C:\Local\REMix\remix_nz\process\225c\storage_levelprofile.csv
   182     5464 IF EXIST     165     219  ..C:\Local\REMix\remix_nz\process\225c\storage_levelprofile.csv
   183     5466 IF EXIST     165     221  ..C:\Local\REMix\remix_nz\process\225c\storage_levelprofile.csv
   184     6286 INCLUDE       27      33  ..C:\Local\REMix\framework\remix\framework\model\source\core\transfer.gms
   185     6353 IF EXIST     184      73  ..C:\Local\REMix\remix_nz\process\225c\transfer_linksparam.csv
   186     6353 INCLUDE      184      73  ...C:\Local\REMix\remix_nz\process\225c\transfer_linksparam.csv
   187     6392 IF EXIST     184      75  ..C:\Local\REMix\remix_nz\process\225c\transfer_linksparam.csv
   188     6408 IF EXIST     184      91  ..C:\Local\REMix\remix_nz\process\225c\transfer_flowprofile.csv
   189     6410 IF EXIST     184      93  ..C:\Local\REMix\remix_nz\process\225c\transfer_flowprofile.csv
   190     6430 IF EXIST     184     113  ..C:\Local\REMix\remix_nz\process\225c\transfer_techparam.csv
   191     6430 INCLUDE      184     113  ...C:\Local\REMix\remix_nz\process\225c\transfer_techparam.csv
   192     6436 IF EXIST     184     115  ..C:\Local\REMix\remix_nz\process\225c\transfer_techparam.csv
   193     6450 IF EXIST     184     129  ..C:\Local\REMix\remix_nz\process\225c\transfer_coefficient.csv
   194     6450 INCLUDE      184     129  ...C:\Local\REMix\remix_nz\process\225c\transfer_coefficient.csv
   195     6456 IF EXIST     184     131  ..C:\Local\REMix\remix_nz\process\225c\transfer_coefficient.csv
   196     6470 IF EXIST     184     145  ..C:\Local\REMix\remix_nz\process\225c\transfer_coefperflow.csv
   197     6470 INCLUDE      184     145  ...C:\Local\REMix\remix_nz\process\225c\transfer_coefperflow.csv
   198     6476 IF EXIST     184     147  ..C:\Local\REMix\remix_nz\process\225c\transfer_coefperflow.csv
   199     6490 IF EXIST     184     161  ..C:\Local\REMix\remix_nz\process\225c\transfer_coefperlength.csv
   200     6490 INCLUDE      184     161  ...C:\Local\REMix\remix_nz\process\225c\transfer_coefperlength.csv
   201     6499 IF EXIST     184     163  ..C:\Local\REMix\remix_nz\process\225c\transfer_coefperlength.csv
   202     6513 IF EXIST     184     177  ..C:\Local\REMix\remix_nz\process\225c\transfer_reactperlength.csv
   203     6515 IF EXIST     184     179  ..C:\Local\REMix\remix_nz\process\225c\transfer_reactperlength.csv
   204     6529 IF EXIST     184     193  ..C:\Local\REMix\remix_nz\process\225c\transfer_lengthparam.csv
   205     6529 INCLUDE      184     193  ...C:\Local\REMix\remix_nz\process\225c\transfer_lengthparam.csv
   206     6556 IF EXIST     184     195  ..C:\Local\REMix\remix_nz\process\225c\transfer_lengthparam.csv
   207     6570 IF EXIST     184     209  ..C:\Local\REMix\remix_nz\process\225c\transfer_gridsegments.csv
   208     6572 IF EXIST     184     211  ..C:\Local\REMix\remix_nz\process\225c\transfer_gridsegments.csv
   209     7169 INCLUDE       27      34  ..C:\Local\REMix\framework\remix\framework\model\source\core\sourcesink.gms
   210     7207 IF EXIST     209      38  ..C:\Local\REMix\remix_nz\process\225c\sourcesink_config.csv
   211     7207 INCLUDE      209      38  ...C:\Local\REMix\remix_nz\process\225c\sourcesink_config.csv
   212     7385 IF EXIST     209      40  ..C:\Local\REMix\remix_nz\process\225c\sourcesink_config.csv
   213     7389 BATINCLUDE   209      44  ...C:\Local\REMix\framework\remix\framework\model\source\battools\aggregateNodes.gms
   214     7417 IF EXIST     209      62  ..C:\Local\REMix\remix_nz\process\225c\sourcesink_profile.csv
   215     7417 INCLUDE      209      62  ...C:\Local\REMix\remix_nz\process\225c\sourcesink_profile.csv
   216     7495 IF EXIST     209      63  ..C:\Local\REMix\remix_nz\process\225c\sourcesink_profile.csv
   217     7496 IF EXIST     209      64  ..C:\Local\REMix\remix_nz\process\225c\sourcesink_profile.csv
   218     7498 IF EXIST     209      66  ..C:\Local\REMix\remix_nz\process\225c\sourcesink_profile.csv
   219     7518 IF EXIST     209      86  ..C:\Local\REMix\remix_nz\process\225c\sourcesink_annualsum.csv
   220     7518 INCLUDE      209      86  ...C:\Local\REMix\remix_nz\process\225c\sourcesink_annualsum.csv
   221     7587 IF EXIST     209      88  ..C:\Local\REMix\remix_nz\process\225c\sourcesink_annualsum.csv
   222     7590 BATINCLUDE   209      91  ...C:\Local\REMix\framework\remix\framework\model\source\battools\aggregateNodes.gms
   223     7771 INCLUDE       27      35  ..C:\Local\REMix\framework\remix\framework\model\source\core\balance.gms
   224     7907 INCLUDE       27      37  ..C:\Local\REMix\framework\remix\framework\model\source\accounting\equations.gms
   225     8329 INCLUDE       27      38  ..C:\Local\REMix\framework\remix\framework\model\source\optiframe.gms
   226     8370 INCLUDE       27      72  ..C:\Local\REMix\framework\remix\framework\model\source\methods\checkanno.gms
   227     8381 INCLUDE       27      75  ..C:\Local\REMix\framework\remix\framework\model\source\methods\pips.gms
   228     8390 INCLUDE       27      78  ..C:\Local\REMix\framework\remix\framework\model\source\methods\solve.gms
   229     8602 INCLUDE       27      81  ..C:\Local\REMix\framework\remix\framework\model\source\methods\pareto.gms
   230     8611 INCLUDE       27      84  ..C:\Local\REMix\framework\remix\framework\model\source\methods\mga.gms
   231     8620 INCLUDE       27      87  ..C:\Local\REMix\framework\remix\framework\model\source\methods\iternodes.gms
   232     8629 INCLUDE       27      90  ..C:\Local\REMix\framework\remix\framework\model\source\postcalc\definition.gms
   233     9421 INCLUDE       27      91  ..C:\Local\REMix\framework\remix\framework\model\source\postcalc\writegdx.gms


COMPILATION TIME     =       14.563 SECONDS    124 MB  40.4.0 d540b52e WEX-WEI
----      1 InitE                    0.000     0.000 SECS    124 MB 
GAMS 40.4.0  d540b52e Oct 3, 2022           WEX-WEI x86 64bit/MS Windows - 03/22/24 15:20:01 Page 3
G e n e r a l   A l g e b r a i c   M o d e l i n g   S y s t e m
E x e c u t i o n


----      1 ExecInit                 0.000     0.000 SECS    124 MB 
----    183 Other                    0.000     0.000 SECS    125 MB 
----    185 Other                    0.000     0.000 SECS    125 MB 
----    187 Other                    0.000     0.000 SECS    125 MB 
----    196 Other                    0.000     0.000 SECS    125 MB 
----    203 Assignment timeLength    0.015     0.015 SECS    126 MB   8760
----    301 Other                    0.000     0.015 SECS    126 MB 
----    305 Assignment validate_nodesModelToCalc    0.000     0.015 SECS    126 MB     11
----    307 Assignment validate_nodesModelToCalc    0.000     0.015 SECS    126 MB      0
----    310 Display                  0.000     0.015 SECS    126 MB 
----    311 Display                  0.000     0.015 SECS    126 MB 
----    312 Other                    0.000     0.015 SECS    126 MB 
----    422 Assignment yearsLen      0.000     0.015 SECS    126 MB      3
----    686 Other                    0.000     0.015 SECS    126 MB 
----    689 Assignment check_linkStartEnd    0.000     0.015 SECS    126 MB      0
----    694 Other                    0.000     0.015 SECS    126 MB 
----    706 Assignment transfer_linkStartEnd    0.000     0.015 SECS    126 MB     24
----    711 Assignment transfer_incidenceData    0.000     0.015 SECS    126 MB     12
----    718 Assignment transfer_incidenceData    0.000     0.015 SECS    126 MB     24
----    727 Assignment transfer_incidenceData_flip    0.000     0.015 SECS    126 MB     12
----    728 Assignment transfer_incidenceData_flip    0.000     0.015 SECS    126 MB     12
----    740 Other                    0.000     0.015 SECS    126 MB 
----    744 Assignment map_linksDataToNodes    0.000     0.015 SECS    126 MB     12
----    753 Assignment linkOrdNodesNodes    0.000     0.015 SECS    126 MB     24
----    760 Assignment map_linksModelToNodes    0.000     0.015 SECS    126 MB     24
----    767 Assignment links_aggregateTemp    0.000     0.015 SECS    126 MB     12
----    773 Other                    0.000     0.015 SECS    126 MB 
----    782 Other                    0.000     0.015 SECS    126 MB 
----    785 Assignment transfer_incidenceModel    0.000     0.015 SECS    126 MB     24
----    790 Assignment transfer_incidenceModel    0.000     0.015 SECS    126 MB     24
----    794 Assignment transfer_incidenceModel    0.000     0.015 SECS    126 MB     24
----    799 Other                    0.000     0.015 SECS    126 MB 
----    882 Assignment map_accNodes    0.000     0.015 SECS    126 MB      0
----    888 Assignment map_accNodes    0.000     0.015 SECS    127 MB     11
----    889 Assignment map_accNodes    0.000     0.015 SECS    126 MB     12
----    890 Assignment map_accNodes    0.000     0.015 SECS    126 MB     23
----    891 Assignment map_accLinks    0.000     0.015 SECS    127 MB     12
----    892 Assignment map_accLinks    0.000     0.015 SECS    126 MB     25
----    893 Assignment map_accYears    0.000     0.015 SECS    127 MB      3
----    894 Assignment map_accYears    0.000     0.015 SECS    126 MB     37
----    896 Assignment map_accNodesToCalc    0.000     0.015 SECS    126 MB      0
----    901 Assignment map_accNodesToCalc    0.000     0.015 SECS    126 MB     11
----    902 Assignment map_accNodesToCalc    0.000     0.015 SECS    127 MB     22
----    903 Assignment map_accLinksToCalc    0.000     0.015 SECS    126 MB     12
----    904 Assignment map_accLinksToCalc    0.000     0.015 SECS    127 MB     24
----    905 Assignment map_accYearsToCalc    0.000     0.015 SECS    126 MB      3
----    906 Assignment map_accYearsToCalc    0.000     0.015 SECS    127 MB      6
----    909 Assignment map_accNodesPostCalc    0.000     0.015 SECS    126 MB     22
----    910 Assignment map_accLinksPostCalc    0.000     0.015 SECS    126 MB     24
----    911 Assignment map_accYearsPostCalc    0.000     0.015 SECS    127 MB      3
----    912 Assignment map_accYearsPostCalc    0.000     0.015 SECS    127 MB     29
----    915 Other                    0.000     0.015 SECS    126 MB 
----   1279 Assignment accounting_converterUnitsNonzero    0.000     0.015 SECS    126 MB     22
----   1285 Assignment accounting_converterUnitsChk    0.000     0.015 SECS    127 MB      0
----   1298 Other                    0.000     0.015 SECS    126 MB 
----   1302 Assignment accounting_converterUnitsAgg    0.000     0.015 SECS    127 MB      0
----   1316 Loop                     0.016     0.031 SECS    126 MB 
----   1324 Assignment accounting_converterUnits    0.000     0.031 SECS    126 MB    968
----   1338 Assignment accounting_converterActivityNonzero    0.000     0.031 SECS    126 MB     18
----   1345 Assignment accounting_converterActivityAgg    0.016     0.047 SECS    127 MB      0
----   1359 Loop                     0.015     0.062 SECS    126 MB 
----   1367 Assignment accounting_converterActivity    0.000     0.062 SECS    126 MB    198
----   1381 Assignment accounting_converterStartupNonzero    0.000     0.062 SECS    126 MB      0
----   1388 Assignment accounting_converterStartupAgg    0.000     0.062 SECS    127 MB      0
----   1402 Loop                     0.000     0.062 SECS    126 MB 
----   1410 Assignment accounting_converterStartup    0.000     0.062 SECS    126 MB      0
----   1424 Assignment accounting_storageUnitsNonzero    0.000     0.062 SECS    126 MB      6
----   1430 Assignment accounting_storageUnitsChk    0.000     0.062 SECS    127 MB      0
----   1443 Other                    0.000     0.062 SECS    126 MB 
----   1447 Assignment accounting_storageUnitsAgg    0.000     0.062 SECS    127 MB      0
----   1461 Loop                     0.000     0.062 SECS    126 MB 
----   1469 Assignment accounting_storageUnits    0.000     0.062 SECS    126 MB    264
----   1483 Assignment accounting_transferLinksNonzero    0.000     0.062 SECS    126 MB      6
----   1489 Assignment accounting_transferLinksChk    0.000     0.062 SECS    127 MB      0
----   1502 Other                    0.000     0.062 SECS    126 MB 
----   1506 Assignment accounting_transferLinksAgg    0.016     0.078 SECS    127 MB      0
----   1520 Loop                     0.000     0.078 SECS    126 MB 
----   1528 Assignment accounting_transferLinks    0.000     0.078 SECS    126 MB    180
----   1542 Assignment accounting_transferPerLengthNonzero    0.000     0.078 SECS    126 MB     12
----   1548 Assignment accounting_transferPerLengthChk    0.000     0.078 SECS    127 MB      0
----   1561 Other                    0.000     0.078 SECS    126 MB 
----   1565 Assignment accounting_transferPerLengthAgg    0.000     0.078 SECS    127 MB      0
----   1579 Loop                     0.000     0.078 SECS    126 MB 
----   1587 Assignment accounting_transferPerLength    0.000     0.078 SECS    126 MB    360
----   1601 Assignment accounting_sourcesinkFlowNonzero    0.000     0.078 SECS    126 MB      7
----   1608 Assignment accounting_sourcesinkFlowAgg    0.016     0.094 SECS    127 MB      0
----   1622 Loop                     0.000     0.094 SECS    126 MB 
----   1630 Assignment accounting_sourcesinkFlow    0.000     0.094 SECS    126 MB     77
----   1637 Assignment accounting_indicatorBounds_links    0.000     0.094 SECS    127 MB      0
----   1641 Assignment accounting_indicatorBounds_links    0.000     0.094 SECS    126 MB      0
----   1646 Assignment accounting_indicatorBounds    0.015     0.109 SECS    127 MB      2
----   1650 Assignment accounting_indicatorBounds    0.000     0.109 SECS    127 MB      2
----   1657 Assignment accounting_perIndicatorNonzero    0.000     0.109 SECS    126 MB      5
----   1662 Assignment accounting_perIndicatorAgg    0.000     0.109 SECS    127 MB      0
----   1677 Loop                     0.000     0.109 SECS    126 MB 
----   1695 Assignment accounting_perIndicator    0.000     0.109 SECS    127 MB   2040
----   1701 Assignment accounting_perIndicator    0.000     0.109 SECS    127 MB   2040
----   1710 Assignment activeIndicators    0.000     0.109 SECS    126 MB      1
----   1721 Assignment activeIndicators_links    0.000     0.109 SECS    126 MB      0
----   1728 Assignment variableIndicators    0.000     0.109 SECS    126 MB      0
----   1735 Assignment yearFactor    0.016     0.125 SECS    126 MB    504
----   1740 Assignment yearFactor    0.000     0.125 SECS    127 MB    504
----   1746 Assignment yearFactor    0.000     0.125 SECS    126 MB    504
----   1754 Assignment yearFactor    0.000     0.125 SECS    126 MB    504
----   1769 Assignment compoundIndicators    0.000     0.125 SECS    126 MB      1
----   1773 Other                    0.000     0.125 SECS    126 MB 
----   1777 Assignment compoundIndicatorsExt    0.000     0.125 SECS    126 MB      1
----   1780 Assignment compIndicators_pre    0.000     0.125 SECS    126 MB      1
----   1781 Assignment compIndicators_post    0.000     0.125 SECS    126 MB      1
----   1783 Other                    0.000     0.125 SECS    126 MB 
----   1784 While-Loop               0.000     0.125 SECS    126 MB 
----   1823 Other                    0.000     0.125 SECS    126 MB 
----   1826 Assignment compoundIndicatorsExt    0.000     0.125 SECS    126 MB    966
----   1835 Assignment compoundIndicatorsExt    0.000     0.125 SECS    126 MB    858
----   1843 Other                    0.000     0.125 SECS    126 MB 
----   1844 Assignment compoundIndicators    0.000     0.125 SECS    126 MB    274
----   1852 Assignment compoundIndicators    0.000     0.125 SECS    127 MB    274
----   1865 Assignment compoundIndicators    0.000     0.125 SECS    126 MB    198
----   1873 Assignment compoundIndicators    0.000     0.125 SECS    126 MB    198
----   1881 Assignment compoundIndicatorsFull    0.000     0.125 SECS    126 MB    336
----   1886 Other                    0.000     0.125 SECS    126 MB 
----   1890 Assignment compoundIndicatorsFullExt    0.000     0.125 SECS    127 MB   2856
----   1892 Assignment compIndicators_pre    0.000     0.125 SECS    127 MB      1
----   1893 Assignment compIndicators_post    0.000     0.125 SECS    127 MB      1
----   1895 Other                    0.000     0.125 SECS    127 MB 
----   1896 While-Loop               0.015     0.140 SECS    128 MB 
----   1935 Other                    0.000     0.140 SECS    128 MB 
----   1938 Assignment compoundIndicatorsFullExt    0.000     0.140 SECS    128 MB   5821
----   1947 Assignment compoundIndicatorsFullExt    0.000     0.140 SECS    128 MB   5379
----   1955 Other                    0.000     0.140 SECS    128 MB 
----   1956 Assignment compoundIndicatorsFull    0.000     0.140 SECS    128 MB   1834
----   1964 Assignment compoundIndicatorsFull    0.110     0.250 SECS    128 MB   1834
----   1977 Assignment compoundIndicatorsFull    0.000     0.250 SECS    128 MB   1584
----   1985 Assignment compoundIndicatorsFull    0.000     0.250 SECS    128 MB   1584
----   1993 Assignment opti_values    0.000     0.250 SECS    128 MB      1
----   1994 Assignment opti_sense    0.000     0.250 SECS    128 MB      1
----   1995 Other                    0.000     0.250 SECS    128 MB 
----   1997 Other                    0.000     0.250 SECS    128 MB 
----   1999 Other                    0.000     0.250 SECS    128 MB 
----   2007 Other                    0.000     0.250 SECS    128 MB 
----   2013 Assignment accounting_annuityFactor_converter    0.000     0.250 SECS    128 MB    242
----   2023 Other                    0.000     0.250 SECS    128 MB 
----   2029 Assignment accounting_annuityFactor_storage    0.000     0.250 SECS    128 MB     66
----   2039 Other                    0.000     0.250 SECS    128 MB 
----   2045 Assignment accounting_annuityFactor_transferLink    0.000     0.250 SECS    128 MB     36
----   2056 Other                    0.000     0.250 SECS    128 MB 
----   2062 Assignment accounting_annuityFactor_transferPerLength    0.000     0.250 SECS    128 MB   5544
----   2064 Assignment accounting_annuityFactor_transferPerLength    0.000     0.250 SECS    128 MB   5544
----   3491 Assignment converter_capacityParam    0.015     0.265 SECS    128 MB   1298
----   3502 Assignment converter_capacityParam    0.000     0.265 SECS    128 MB   1298
----   4051 Other                    0.516     0.781 SECS    313 MB 
----   4052 Clear      converter_activityProfileLoad    0.016     0.797 SECS    313 MB 
----   4231 Other                    0.000     0.797 SECS    313 MB 
----   4245 Assignment converter_availTech    0.078     0.875 SECS    313 MB   5159
----   4250 Assignment converter_availTech    0.000     0.875 SECS    313 MB   5101
----   4254 Assignment converter_availTech    0.000     0.875 SECS    313 MB    506
----   4259 Assignment converter_usedTech    0.047     0.922 SECS    313 MB   4855
----   4267 Assignment converter_decomTech    0.047     0.969 SECS    313 MB    125
----   4276 Assignment converter_decomTech    0.000     0.969 SECS    313 MB    125
----   4283 Other                    0.000     0.969 SECS    313 MB 
----   4286 Other                    0.000     0.969 SECS    313 MB 
----   4289 Other                    0.000     0.969 SECS    313 MB 
----   4292 Assignment converter_usedTechAct    0.000     0.969 SECS    313 MB   5123
----   4298 Assignment converter_useRampPos    0.015     0.984 SECS    313 MB      0
----   4304 Assignment converter_useRampNeg    0.000     0.984 SECS    313 MB      0
----   4314 Other                    0.063     1.047 SECS    313 MB 
----   4317 Assignment converter_activity_hasProfile    0.000     1.047 SECS    313 MB    207
----   4322 Other                    0.000     1.047 SECS    313 MB 
----   4325 Assignment converter_coefficient_hasProfile    0.078     1.125 SECS    313 MB      0
----   4331 Assignment converter_activityProfileIn_aggTime    7.015     8.140 SECS    387 MB  1318317
----   4336 Clear      converter_activityProfileIn    0.032     8.172 SECS    387 MB 
----   4340 Assignment converter_activityProfile    1.281     9.453 SECS    387 MB  2847000
----   4342 Assignment converter_activityProfile    0.891    10.344 SECS    387 MB  2847000
----   4347 Assignment converter_finiteUnitLimit    0.000    10.344 SECS    387 MB    416
----   4352 Assignment converter_infiniteUnitLimit    0.015    10.359 SECS    387 MB     21
----   4355 Assignment converter_activityProfile    3.578    13.937 SECS    442 MB  4086477
----   4365 Assignment converter_activityProfile    0.078    14.015 SECS    442 MB  4086477
----   4375 Clear      converter_activityProfileIn_aggTime    0.000    14.015 SECS    442 MB 
----   4378 Assignment converter_activityProfile    0.016    14.031 SECS    442 MB  4086477
----   4382 Assignment converter_activityProfile    0.000    14.031 SECS    442 MB  4086477
----   4390 Assignment converter_coefficientProfile    3.313    17.344 SECS    931 MB  7367160
----   4393 Assignment converter_coefficientProfile    0.000    17.344 SECS    931 MB  7367160
----   4404 Assignment converter_coefficientProfile    0.000    17.344 SECS    931 MB  7367160
----   4421 Assignment converter_coefficient    0.000    17.344 SECS    931 MB    339
----   4428 Assignment converter_hasMaxLoad    0.000    17.344 SECS    931 MB      0
----   4433 Assignment converter_hasMinLoad    0.000    17.344 SECS    931 MB      0
----   4438 Assignment converter_hasConstantFluxInActivity    0.000    17.344 SECS    931 MB      0
----   4449 Assignment converter_activityRequirements    0.000    17.344 SECS    931 MB      0
----   4451 Assignment converter_activityRequirements    0.015    17.359 SECS    931 MB     46
----   4457 Assignment converter_hasMinUptime    0.000    17.359 SECS    931 MB      0
----   4463 Assignment converter_hasMinDowntime    0.000    17.359 SECS    931 MB      0
----   4469 Assignment converter_techParam    0.000    17.359 SECS    931 MB     38
----   4477 Assignment converter_capacityParam    0.000    17.359 SECS    931 MB   1298
----   4480 Assignment converter_capacityParam    0.000    17.359 SECS    931 MB   1298
----   4487 Assignment converter_maxUptimeReq    0.000    17.359 SECS    931 MB      1
----   4489 Assignment uptimeSearchRange    0.000    17.359 SECS    931 MB      0
----   4492 Assignment converter_maxDowntimeReq    0.000    17.359 SECS    931 MB      1
----   4494 Assignment downtimeSearchRange    0.000    17.359 SECS    931 MB      0
----   4499 Assignment converter_unitsBuild    0.000    17.359 SECS    931 MB     72
----   4502 Assignment converter_unitsBuild    0.000    17.359 SECS    931 MB     72
----   4505 Assignment converter_unitsBuild    0.000    17.359 SECS    932 MB   6266
----   4510 Assignment converter_unitsDecom    0.000    17.359 SECS    932 MB      0
----   4519 Assignment converter_unitsDecom    0.000    17.359 SECS    932 MB     34
----   4535 Assignment converter_unitsDecom    0.000    17.359 SECS    932 MB     34
----   4542 Clear      converter_unitsPlanned    0.000    17.359 SECS    932 MB 
----   4543 Loop                     0.016    17.375 SECS    932 MB 
----   4555 Assignment converter_unitsTotal    0.000    17.375 SECS    932 MB    711
----   4560 Assignment converter_unitBoundsFixed    0.000    17.375 SECS    932 MB   4265
----   4570 Assignment converter_unitsBuild    0.000    17.375 SECS    932 MB   6266
----   4574 Assignment converter_unitsDecom    0.000    17.375 SECS    932 MB   3137
----   4578 Assignment converter_unitsTotal    0.015    17.390 SECS    933 MB   3814
----   4583 Assignment converter_unitsOnline_MIP    7.641    25.031 SECS    933 MB      0
----   4588 Assignment converter_unitsTotal_MIP    0.000    25.031 SECS    933 MB      0
----   4593 Assignment converter_unitsUsingActivity_MIP    0.453    25.484 SECS    933 MB      0
----   5317 Assignment storage_reservoirParam    0.000    25.484 SECS    933 MB     96
----   5328 Assignment storage_reservoirParam    0.000    25.484 SECS    933 MB     96
----   5367 Assignment storage_hasDegradation    0.000    25.484 SECS    933 MB      0
----   5417 Assignment soc_states    0.000    25.484 SECS    933 MB      0
----   5438 Assignment storage_degradationParam    0.000    25.484 SECS    933 MB      0
----   5440 Assignment storage_degradationParam    0.000    25.484 SECS    933 MB      0
----   5442 Assignment storage_degradationParam    0.000    25.484 SECS    933 MB      0
----   5448 Other                    0.000    25.484 SECS    933 MB 
----   5469 Other                    0.000    25.484 SECS    933 MB 
----   5470 Clear      storage_levelProfileLoad    0.000    25.484 SECS    933 MB 
----   5478 Assignment storage_usedTechSoCState    0.000    25.484 SECS    933 MB      0
----   5484 Assignment storage_validSoCRange    0.000    25.484 SECS    933 MB      0
----   5506 Assignment storage_bigM    0.000    25.484 SECS    933 MB     66
----   5507 Assignment storage_bigM    0.000    25.484 SECS    933 MB     66
----   5508 Assignment storage_bigM    0.000    25.484 SECS    933 MB     66
----   5513 Assignment representedYears    0.000    25.484 SECS    933 MB      7
----   5520 Assignment storage_availTech    0.016    25.500 SECS    933 MB    440
----   5525 Assignment storage_availTech    0.000    25.500 SECS    933 MB    406
----   5529 Assignment storage_availTech    0.000    25.500 SECS    933 MB     36
----   5534 Assignment storage_usedTech    0.015    25.515 SECS    933 MB    208
----   5542 Assignment storage_decomTech    0.000    25.515 SECS    933 MB      0
----   5551 Assignment storage_decomTech    0.000    25.515 SECS    933 MB      0
----   5558 Other                    0.000    25.515 SECS    933 MB 
----   5561 Assignment storage_usedTechCom    0.000    25.515 SECS    933 MB    208
----   5573 Other                    0.000    25.515 SECS    933 MB 
----   5576 Assignment storage_level_hasProfile    0.000    25.515 SECS    933 MB      0
----   5582 Assignment storage_levelProfile    0.235    25.750 SECS    988 MB  665760
----   5584 Assignment storage_levelProfile    0.125    25.875 SECS    988 MB  665760
----   5588 Assignment storage_finiteUnitLimit    0.000    25.875 SECS    988 MB     32
----   5591 Assignment storage_levelProfile    0.000    25.875 SECS    988 MB  665760
----   5602 Assignment storage_levelProfile    0.000    25.875 SECS    988 MB  665760
----   5615 Assignment storage_levelProfile    0.000    25.875 SECS    988 MB  665760
----   5619 Assignment storage_levelProfile    0.000    25.875 SECS    988 MB  665760
----   5625 Assignment storage_reservoirParam    0.000    25.875 SECS    988 MB     96
----   5628 Assignment storage_reservoirParam    0.000    25.875 SECS    988 MB     96
----   5636 Assignment storage_unitsBuild    0.000    25.875 SECS    988 MB      4
----   5639 Assignment storage_unitsBuild    0.000    25.875 SECS    988 MB      4
----   5642 Assignment storage_unitsBuild    0.000    25.875 SECS    988 MB   1518
----   5647 Assignment storage_unitsDecom    0.000    25.875 SECS    988 MB      0
----   5656 Assignment storage_unitsDecom    0.000    25.875 SECS    988 MB      0
----   5672 Assignment storage_unitsDecom    0.000    25.875 SECS    988 MB      0
----   5679 Clear      storage_unitsPlanned    0.000    25.875 SECS    988 MB 
----   5680 Loop                     0.000    25.875 SECS    988 MB 
----   5692 Assignment storage_unitsTotal    0.000    25.875 SECS    988 MB     80
----   5697 Assignment storage_unitBoundsFixed    0.000    25.875 SECS    988 MB    616
----   5707 Assignment storage_unitsBuild    0.000    25.875 SECS    988 MB   1518
----   5711 Assignment storage_unitsDecom    0.000    25.875 SECS    988 MB     51
----   5715 Assignment storage_unitsTotal    0.000    25.875 SECS    988 MB    131
----   5720 Assignment storage_unitsTotal_MIP    0.000    25.875 SECS    988 MB      0
----   6413 Other                    0.000    25.875 SECS    988 MB 
----   6414 Clear      transfer_flowProfileLoad    0.000    25.875 SECS    988 MB 
----   6575 Other                    0.000    25.875 SECS    988 MB 
----   6581 Assignment transfer_linksParam    0.015    25.890 SECS    988 MB     36
----   6589 Other                    0.000    25.890 SECS    988 MB 
----   6592 Assignment transfer_linksParamIn    0.000    25.890 SECS    988 MB    432
----   6596 Assignment transfer_linksParamIn    0.000    25.890 SECS    988 MB    828
----   6600 Assignment transfer_flowProfileIn    0.688    26.578 SECS  1,268 MB  3468960
----   6604 Assignment transfer_flowProfileIn    0.625    27.203 SECS  1,379 MB  6937920
----   6610 Assignment transfer_flowProfileIn_aggTime    0.000    27.203 SECS  1,379 MB      0
----   6615 Clear      transfer_flowProfileIn    0.062    27.265 SECS  1,379 MB 
----   6617 Assignment transfer_flowProfileIn_aggTime    0.110    27.375 SECS  1,379 MB  630720
----   6622 Assignment transfer_flowProfileIn_aggTime    0.000    27.375 SECS  1,379 MB  630720
----   6627 Assignment transfer_flowProfileIn_aggTime    0.000    27.375 SECS  1,379 MB  630720
----   6633 Assignment transfer_finiteLinkLimit    0.000    27.375 SECS  1,379 MB     36
----   6638 Assignment transfer_infiniteLinkLimit    0.000    27.375 SECS  1,379 MB      0
----   6643 Assignment transfer_lengthParam    0.000    27.375 SECS  1,379 MB     12
----   6648 Assignment transfer_gridSegments    0.000    27.375 SECS  1,379 MB      0
----   6652 Assignment transfer_dcopf_Xtech    0.000    27.375 SECS  1,379 MB      0
----   6664 Assignment transfer_hasflowProfile    0.000    27.375 SECS  1,379 MB      0
----   6669 Assignment transfer_linksParam    0.000    27.375 SECS  1,379 MB     36
----   6672 Assignment transfer_linksParam    0.000    27.375 SECS  1,379 MB     36
----   6681 Assignment transfer_availTech    0.015    27.390 SECS  1,379 MB     84
----   6686 Assignment transfer_availTech    0.000    27.390 SECS  1,379 MB     84
----   6690 Assignment transfer_availTech    0.000    27.390 SECS  1,379 MB     36
----   6695 Assignment transfer_usedTech    0.000    27.390 SECS  1,379 MB    144
----   6703 Assignment transfer_decomTech    0.016    27.406 SECS  1,379 MB      0
----   6712 Assignment transfer_decomTech    0.000    27.406 SECS  1,379 MB      0
----   6719 Assignment transfer_flowProfile    8.281    35.687 SECS  1,626 MB  10406880
----   6732 Assignment transfer_flowProfile    8.250    43.937 SECS  1,959 MB  20813760
----   6745 Assignment transfer_flowProfile    0.000    43.937 SECS  1,959 MB  20813760
----   6759 Assignment transfer_flowProfile    0.000    43.937 SECS  1,959 MB  20813760
----   6772 Clear      transfer_flowProfileIn_aggTime    0.016    43.953 SECS  1,959 MB 
----   6776 Assignment transfer_linksParam    0.000    43.953 SECS  1,959 MB     72
----   6789 Assignment transfer_linksParam    0.000    43.953 SECS  1,959 MB    108
----   6802 Assignment transfer_linksParam    0.000    43.953 SECS  1,959 MB    108
----   6816 Assignment transfer_linksParam    0.000    43.953 SECS  1,959 MB    108
----   6832 Assignment gridSegments_dcopf    0.000    43.953 SECS  1,959 MB      0
----   6840 Assignment checkGridSegmentCommodities    0.000    43.953 SECS  1,959 MB      0
----   6846 Assignment transfer_incidenceSegments    0.000    43.953 SECS  1,959 MB      0
----   6858 Assignment transfer_enableMIP    0.000    43.953 SECS  1,959 MB      1
----   6864 Assignment transfer_linksBuild    0.000    43.953 SECS  1,959 MB      0
----   6867 Assignment transfer_linksBuild    0.000    43.953 SECS  1,959 MB      0
----   6870 Assignment transfer_linksBuild    0.000    43.953 SECS  1,959 MB      0
----   6875 Assignment transfer_linksDecom    0.000    43.953 SECS  1,959 MB      0
----   6884 Assignment transfer_linksDecom    0.000    43.953 SECS  1,960 MB      0
----   6900 Assignment transfer_linksDecom    0.000    43.953 SECS  1,959 MB      0
----   6907 Clear      transfer_linksPlanned    0.000    43.953 SECS  1,959 MB 
----   6908 Loop                     0.000    43.953 SECS  1,959 MB 
----   6920 Assignment transfer_linksTotal    0.000    43.953 SECS  1,959 MB      0
----   6925 Assignment transfer_linkBoundsFixed    0.000    43.953 SECS  1,959 MB    360
----   6935 Assignment transfer_linksBuild    0.000    43.953 SECS  1,959 MB      0
----   6939 Assignment transfer_linksDecom    0.000    43.953 SECS  1,959 MB     72
----   6943 Assignment transfer_linksTotal    0.000    43.953 SECS  1,959 MB     72
----   6948 Assignment transfer_linksTotal_MIP    0.000    43.953 SECS  1,959 MB      0
----   7115 Assignment transfer_usedOpf    0.000    43.953 SECS  1,959 MB      0
----   7121 Other                    0.000    43.953 SECS  1,959 MB 
----   7124 Other                    0.000    43.953 SECS  1,959 MB 
----   7398 Assignment sourcesink_config    0.031    43.984 SECS  1,959 MB    241
----   7502 Other                    0.110    44.094 SECS  1,985 MB 
----   7503 Clear      sourcesink_profileLoad    0.015    44.109 SECS  1,985 MB 
----   7599 Assignment sourcesink_annualSum    0.000    44.109 SECS  1,985 MB     33
----   7609 Assignment sourcesink_usesProfileScaling    0.000    44.109 SECS  1,985 MB      0
----   7611 Assignment sourcesink_usesProfileScaling    0.000    44.109 SECS  1,985 MB      0
----   7613 Assignment sourcesink_usesProfileScaling    0.000    44.109 SECS  1,985 MB      0
----   7617 Assignment sourcesink_ProfileSum    0.000    44.109 SECS  1,985 MB      0
----   7622 Assignment sourcesink_ProfileAbsSum    0.000    44.109 SECS  1,985 MB      0
----   7627 Assignment sourcesink_ProfileScaleError    0.000    44.109 SECS  1,985 MB      0
----   7633 Other                    0.000    44.109 SECS  1,985 MB 
----   7638 Assignment sourcesink_scalingFactor    0.000    44.109 SECS  1,985 MB      0
----   7646 Assignment sourcesink_profileIn    0.016    44.125 SECS  1,985 MB  665592
----   7656 Other                    0.015    44.140 SECS  1,985 MB 
----   7659 Assignment sourcesink_usesProfile    0.000    44.140 SECS  1,985 MB     76
----   7666 Assignment sourcesink_profileIn_aggTime    3.360    47.500 SECS  2,042 MB  665592
----   7671 Clear      sourcesink_profileIn    0.015    47.515 SECS  2,042 MB 
----   7675 Assignment sourcesink_profile    0.688    48.203 SECS  2,048 MB  665592
----   7679 Clear      sourcesink_profileIn_aggTime    0.016    48.219 SECS  2,047 MB 
----   7682 Other                    0.000    48.219 SECS  2,047 MB 
----   7690 Assignment sourcesink_flow    1.625    49.844 SECS  2,059 MB  289080
----   7696 Assignment sourcesink_flow    1.578    51.422 SECS  2,082 MB  867240
----   7702 Assignment sourcesink_flow    0.453    51.875 SECS  2,113 MB  1533000
----   7707 Clear      sourcesink_profile    0.015    51.890 SECS  2,113 MB 
----   7786 Assignment balance_techComm    0.000    51.890 SECS  2,113 MB     18
----   7788 Assignment balance_techComm    0.000    51.890 SECS  2,113 MB     19
----   7790 Assignment balance_techComm    0.000    51.890 SECS  2,113 MB     20
----   7792 Assignment balance_techComm    0.000    51.890 SECS  2,113 MB     26
----   7801 Assignment balance_usedConverter    0.000    51.890 SECS  2,113 MB    687
----   7806 Assignment balance_usedStorage    0.000    51.890 SECS  2,113 MB    145
----   7811 Assignment balance_usedTransfer    0.000    51.890 SECS  2,113 MB    363
----   7816 Other                    0.000    51.890 SECS  2,113 MB 
----   7818 Assignment balance_usedBalance    0.000    51.890 SECS  2,113 MB    732
----   7925 Assignment accounting_indicator    0.000    51.890 SECS  2,113 MB      0
----   7929 Assignment accounting_indicator    0.000    51.890 SECS  2,113 MB      0
----   7933 Assignment accounting_indicator    0.000    51.890 SECS  2,113 MB      0
----   7937 Assignment accounting_indicator    0.000    51.890 SECS  2,113 MB      0
----   7942 Assignment accounting_indicator_links    0.000    51.890 SECS  2,113 MB      0
----   7946 Assignment accounting_indicator_links    0.000    51.890 SECS  2,113 MB      0
----   7950 Assignment accounting_indicator_links    0.000    51.890 SECS  2,113 MB      0
----   8347 Other                    0.000    51.890 SECS  2,113 MB 
----   8442 IF-ELSE                  0.000    51.890 SECS  2,113 MB 
----   8450 Other                    0.000    51.890 SECS  2,113 MB 
----   8451 Other                    0.000    51.890 SECS  2,113 MB 
----   8452 Other                    0.000    51.890 SECS  2,113 MB 
----   8453 Assignment remix         0.000    51.890 SECS  2,113 MB     75
----   8454 Assignment remix         0.000    51.890 SECS  2,113 MB     75
----   8455 Assignment remix         0.000    51.890 SECS  2,113 MB     75
----   8456 Assignment remix         0.000    51.890 SECS  2,113 MB     75
----   8465 Put                      0.000    51.890 SECS  2,113 MB 
----   8467 Put                      0.000    51.890 SECS  2,113 MB 
----   8468 Put                      0.000    51.890 SECS  2,113 MB 
----   8469 Put                      0.000    51.890 SECS  2,113 MB 
----   8471 Put                      0.000    51.890 SECS  2,113 MB 
----   8472 Put                      0.000    51.890 SECS  2,113 MB 
----   8473 Put                      0.000    51.890 SECS  2,113 MB 
----   8474 Put                      0.000    51.890 SECS  2,113 MB 
----   8475 Put                      0.000    51.890 SECS  2,113 MB 
----   8476 Put                      0.000    51.890 SECS  2,113 MB 
----   8477 Put                      0.000    51.890 SECS  2,113 MB 
----   8478 Put                      0.000    51.890 SECS  2,113 MB 
----   8480 Put                      0.000    51.890 SECS  2,113 MB 
----   8481 Put                      0.000    51.890 SECS  2,113 MB 
----   8482 Put                      0.000    51.890 SECS  2,113 MB 
----   8483 Put                      0.000    51.890 SECS  2,113 MB 
----   8484 Put                      0.000    51.890 SECS  2,113 MB 
----   8485 Put                      0.000    51.890 SECS  2,113 MB 
----   8488 Put                      0.000    51.890 SECS  2,113 MB 
GAMS 40.4.0  d540b52e Oct 3, 2022           WEX-WEI x86 64bit/MS Windows - 03/22/24 15:20:01 Page 4
G e n e r a l   A l g e b r a i c   M o d e l i n g   S y s t e m
Model Analysis      SOLVE remix Using MIP From line 8587


----   8587 Solve Init remix         0.000    51.937 SECS  2,134 MB 
----   4673 Equation   Eq_converter_unitsBalance    0.000    51.937 SECS  2,134 MB    160
----   4695 Equation   Eq_converter_unitsFixedDecom    0.000    51.937 SECS  2,134 MB      4
----   4711 Equation   Eq_converter_unitsFreeDecom    0.000    51.937 SECS  2,134 MB      0
----   4741 Equation   Eq_converter_unitsUpperLimit    0.000    51.937 SECS  2,134 MB    146
----   4755 Equation   Eq_converter_unitsLowerLimit    0.000    51.937 SECS  2,134 MB      0
----   4765 Equation   Eq_converter_unitsFixedLimit    0.000    51.937 SECS  2,134 MB      0
----   4777 Equation   Eq_converter_unitsTotalMIP    0.000    51.937 SECS  2,134 MB      0
----   4788 Equation   Eq_converter_unitsOnlineMIP    0.297    52.234 SECS  2,134 MB      0
----   4818 Equation   Eq_converter_activityUpperLimit    2.391    54.625 SECS  2,908 MB  1236599
----   4799 Equation   Eq_converter_activityLowerLimit    0.500    55.125 SECS  2,908 MB      0
----   4833 Equation   Eq_converter_activityFixedLimit    1.047    56.172 SECS  2,921 MB  165001
----   4850 Equation   Eq_converter_rampPos    0.000    56.172 SECS  2,921 MB      0
----   4863 Equation   Eq_converter_rampNeg    0.000    56.172 SECS  2,921 MB      0
----   4876 Equation   Eq_converter_rampLimit    0.484    56.656 SECS  2,921 MB      0
----   4895 Equation   Eq_converter_unitsOnline    2.063    58.719 SECS  3,437 MB  1401600
----   4907 Equation   Eq_converter_unitsOnlineUC    0.296    59.015 SECS  3,437 MB      0
----   4920 Equation   Eq_converter_activityStartups    0.344    59.359 SECS  3,437 MB      0
----   4932 Equation   Eq_converter_activityShutdowns    0.313    59.672 SECS  3,437 MB      0
----   4945 Equation   Eq_converter_limitStartups    0.000    59.672 SECS  3,437 MB      0
----   4960 Equation   Eq_converter_minUptime    0.328    60.000 SECS  3,437 MB      0
----   4974 Equation   Eq_converter_minDowntime    0.359    60.359 SECS  3,437 MB      0
----   4993 Equation   Eq_converter_activityUpperLimitDetailedPartLoadMinReq    0.047    60.406 SECS  3,437 MB      0
----   5012 Equation   Eq_converter_activityUpperLimitDetailedPartLoadMaxReq    0.047    60.453 SECS  3,437 MB      0
----   5036 Equation   Eq_converter_activityLowerLimitDetailedPartLoadMinReq    0.047    60.500 SECS  3,437 MB      0
----   5058 Equation   Eq_converter_activityUpperLimitPartLoad    0.031    60.531 SECS  3,437 MB      0
----   5074 Equation   Eq_converter_activityLowerLimitPartLoad    0.016    60.547 SECS  3,437 MB      0
----   5089 Equation   Eq_converter_noOnlineIdle    0.031    60.578 SECS  3,437 MB      0
----   5104 Equation   Eq_converter_noOnlineIdleDetailedPartLoad    0.016    60.594 SECS  3,437 MB      0
----   5118 Equation   Eq_converter_activityModeLimit    0.015    60.609 SECS  3,437 MB      0
----   5803 Equation   Eq_storage_unitsBalance    0.016    60.625 SECS  3,437 MB     22
----   5825 Equation   Eq_storage_unitsFixedDecom    0.000    60.625 SECS  3,437 MB      0
----   5841 Equation   Eq_storage_unitsFreeDecom    0.000    60.625 SECS  3,437 MB      0
----   5871 Equation   Eq_storage_unitsLowerLimit    0.000    60.625 SECS  3,437 MB      0
----   5882 Equation   Eq_storage_unitsUpperLimit    0.000    60.625 SECS  3,437 MB     18
----   5932 Equation   Eq_storage_levelUpperLimit_degradation    0.015    60.640 SECS  3,437 MB      0
----   5894 Equation   Eq_storage_unitsTotalMIP    0.000    60.640 SECS  3,437 MB      0
----   5905 Equation   Eq_storage_levelLowerLimit    0.047    60.687 SECS  3,437 MB      0
----   5918 Equation   Eq_storage_levelUpperLimit    0.438    61.125 SECS  3,437 MB  192720
----   5994 Equation   Eq_storage_losses    0.515    61.640 SECS  3,437 MB  192720
----   5949 Equation   Eq_storage_unitsBalanceStates    0.000    61.640 SECS  3,437 MB      0
----   5961 Equation   Eq_storage_unitsUpperLimitPerState    0.000    61.640 SECS  3,437 MB      0
----   5976 Equation   Eq_storage_unitsStatesNoRecovery    0.000    61.640 SECS  3,437 MB      0
----   6019 Equation   Eq_storage_cRateLimit    0.063    61.703 SECS  3,437 MB      0
----   6033 Equation   Eq_storage_eRateLimit    0.062    61.765 SECS  3,437 MB      0
----   6047 Equation   Eq_storage_charge    0.063    61.828 SECS  3,437 MB      0
----   6059 Equation   Eq_storage_discharge    0.062    61.890 SECS  3,437 MB      0
----   6071 Equation   Eq_storage_levelStateSum    0.063    61.953 SECS  3,437 MB      0
----   6082 Equation   Eq_storage_levelUpperLimitPerAge    1.937    63.890 SECS  3,437 MB      0
----   6099 Equation   Eq_storage_chargeBasedDegradationDistribution    0.000    63.890 SECS  3,437 MB      0
----   6115 Equation   Eq_storage_chargingPerAge    1.735    65.625 SECS  3,437 MB      0
----   6127 Equation   Eq_storage_unitsDecomStateSum    0.000    65.625 SECS  3,437 MB      0
----   6139 Equation   Eq_storage_unitsDegradation    0.000    65.625 SECS  3,437 MB      0
----   6157 Equation   Eq_storage_unitsDegradation_onlyOneRange    0.000    65.625 SECS  3,437 MB      0
----   6168 Equation   Eq_storage_unitsSoC    0.015    65.640 SECS  3,437 MB      0
----   6194 Equation   Eq_storage_unitsSoC_sum    0.000    65.640 SECS  3,437 MB      0
----   6185 Equation   Eq_storage_unitsSoC_onlyOneRange    0.016    65.656 SECS  3,437 MB      0
----   6205 Equation   Eq_storage_levelSoC    0.016    65.672 SECS  3,437 MB      0
----   6218 Equation   Eq_storage_cRateLimit_SoC    5.953    71.625 SECS  3,437 MB      0
----   6234 Equation   Eq_storage_eRateLimit_SoC    5.937    77.562 SECS  3,437 MB      0
----   6989 Equation   Eq_transfer_linksBalance    0.000    77.562 SECS  3,437 MB     12
----   7011 Equation   Eq_transfer_linksFixedDecom    0.000    77.562 SECS  3,437 MB      0
----   7027 Equation   Eq_transfer_linksFreeDecom    0.000    77.562 SECS  3,437 MB      0
----   7057 Equation   Eq_transfer_linksLowerLimit    0.000    77.562 SECS  3,437 MB      0
----   7068 Equation   Eq_transfer_linksUpperLimit    0.000    77.562 SECS  3,437 MB     12
----   7080 Equation   Eq_transfer_linksTotalMIP    0.000    77.562 SECS  3,437 MB      0
----   7091 Equation   Eq_transfer_flowAlongUpperLimit    0.360    77.922 SECS  3,437 MB  105120
----   7104 Equation   Eq_transfer_flowAgainstUpperLimit    0.328    78.250 SECS  3,437 MB  105120
----   7132 Equation   Eq_transfer_dcopf_angleFlows    0.000    78.250 SECS  3,437 MB      0
----   7724 Equation   Eq_sourcesink_useFixedSum    0.000    78.250 SECS  3,437 MB      0
----   7737 Equation   Eq_sourcesink_useLowerSum    0.000    78.250 SECS  3,437 MB      0
----   7751 Equation   Eq_sourcesink_useUpperSum    0.156    78.406 SECS  3,437 MB     11
----   7831 Equation   Eq_balance_commodities   10.109    88.515 SECS  3,716 MB  446760
----   8230 Equation   Eq_accounting_indicatorCalc_links    0.000    88.515 SECS  3,716 MB      0
----   7971 Equation   Eq_accounting_indicatorCalc    1.250    89.765 SECS  3,733 MB      1
----   8312 Equation   Eq_accounting_objective    0.000    89.765 SECS  3,733 MB      1
GAMS 40.4.0  d540b52e Oct 3, 2022           WEX-WEI x86 64bit/MS Windows - 03/22/24 15:20:01 Page 5
G e n e r a l   A l g e b r a i c   M o d e l i n g   S y s t e m
Range Statistics    SOLVE remix Using MIP From line 8587


RANGE STATISTICS (ABSOLUTE NON-ZERO FINITE VALUES)

RHS       [min, max] : [ 6.000E-04, 3.000E+03] - Zero values observed as well
Bound     [min, max] : [ 8.450E-03, 7.500E-01] - Zero values observed as well
Matrix    [min, max] : [ 1.000E-02, 1.000E+02]

GAMS 40.4.0  d540b52e Oct 3, 2022           WEX-WEI x86 64bit/MS Windows - 03/22/24 15:20:01 Page 6
G e n e r a l   A l g e b r a i c   M o d e l i n g   S y s t e m
Model Statistics    SOLVE remix Using MIP From line 8587


LOOPS                           optiframeToCalc   of1


MODEL STATISTICS

BLOCKS OF EQUATIONS          75     SINGLE EQUATIONS    3,846,027
BLOCKS OF VARIABLES          38     SINGLE VARIABLES    3,907,373
NON ZERO ELEMENTS    10,899,512


----   8587 Solve Fini remix         6.547    96.312 SECS  3,753 MB  10899512
GENERATION TIME      =       44.375 SECONDS  3,753 MB  40.4.0 d540b52e WEX-WEI


EXECUTION TIME       =       96.312 SECONDS  3,753 MB  40.4.0 d540b52e WEX-WEI
----   8587 GAMS Fini                3.578     3.578 SECS  3,753 MB 
----      1 InitE                    0.313     0.313 SECS  2,578 MB 
----      1 ExecInit                 0.000     0.313 SECS  2,578 MB 
----   8587 Solve Alg  remix         0.000     0.313 SECS  2,578 MB 
               L O O P S         optiframeToCalc of1

GAMS 40.4.0  d540b52e Oct 3, 2022           WEX-WEI x86 64bit/MS Windows - 03/22/24 15:20:01 Page 7
G e n e r a l   A l g e b r a i c   M o d e l i n g   S y s t e m
Solution Report     SOLVE remix Using MIP From line 8587


               S O L V E      S U M M A R Y

     MODEL   remix               OBJECTIVE  accounting_objective
     TYPE    MIP                 DIRECTION  MINIMIZE
     SOLVER  CPLEX               FROM LINE  8587

**** SOLVER STATUS     1 Normal Completion
**** MODEL STATUS      1 Optimal
**** OBJECTIVE VALUE             2339.6893

 RESOURCE USAGE, LIMIT         32.125   1209600.000
 ITERATION COUNT, LIMIT        63    2147483647
--- GAMS/Cplex Link licensed for continuous and discrete problems.

Reading parameter(s) from "C:\Local\REMix\remix_nz\process\cplex.opt"
>>  rerun no
>>  iis 1
>>  lpmethod 4
>>  barorder 3 /;
*** Value Error line 4: Integer expected, for option "barorder" saw "3 /;"
*** Value Error line 4:    Option ignored
>>  preind 1
>>  scaind 0
>>  predual -1
>>  baralg 0
>>  barstartalg 1
>>  barepcomp 1e-6
>>  solutiontype 2
>>  startalg 4
>>  epgap 1e-3
>>  quality 1
>>  barcolnz 0
>>  threads 4
>>  parallelmode 1
Finished reading from "C:\Local\REMix\remix_nz\process\cplex.opt"

--- GMO setup time: 0.00s
--- Space for names approximately 490.16 Mb
--- Use option 'names no' to turn use of names off
--- GMO memory 1386.54 Mb (peak 1416.35 Mb)
--- Dictionary memory 0.00 Mb
--- Cplex 22.1.0.0 link memory 118.54 Mb (peak 811.63 Mb)
--- Starting Cplex


--- LP status (1): optimal.
--- Cplex Time: 24.91sec (det. 21530.27 ticks)


Optimal solution found
Objective:         2339.689302

Solution Quality Statistics:
                                   unscaled                scaled
                               max         sum         max         sum
primal infeasibility        7.086e-06   1.061e-02   7.086e-06   1.061e-02
dual infeasibility          2.235e-09   5.550e-05   2.235e-09   5.550e-05
primal residual             9.331e-10   1.273e-09   9.331e-10   1.273e-09
dual residual               2.998e-09   1.129e-03   2.998e-09   1.129e-03
primal solution vector      2.517e+03   1.831e+07   2.517e+03   1.831e+07
dual solution vector        2.889e+03   4.370e+05   2.889e+03   4.370e+05
slacks                      3.000e+03   1.692e+07   3.000e+03   1.692e+07
reduced costs               2.889e+03   5.484e+06   2.889e+03   5.484e+06
comp. slackness viol.       1.926e-05   9.542e-04




**** REPORT SUMMARY :        0     NONOPT
                             0 INFEASIBLE
                             0  UNBOUNDED
----   8587 Solve Read remix         1.000     1.313 SECS  2,986 MB 
GAMS 40.4.0  d540b52e Oct 3, 2022           WEX-WEI x86 64bit/MS Windows - 03/22/24 15:20:01 Page 8
G e n e r a l   A l g e b r a i c   M o d e l i n g   S y s t e m
Model Analysis      SOLVE remix Using MIP From line 8587


----   8587 Solve Init remix         0.000     1.375 SECS  2,989 MB 
----   4673 Equation   Eq_converter_unitsBalance    0.000     1.375 SECS  2,989 MB    189
----   4695 Equation   Eq_converter_unitsFixedDecom    0.000     1.375 SECS  2,989 MB     22
----   4711 Equation   Eq_converter_unitsFreeDecom    0.000     1.375 SECS  2,989 MB      0
----   4741 Equation   Eq_converter_unitsUpperLimit    0.000     1.375 SECS  2,989 MB    135
----   4755 Equation   Eq_converter_unitsLowerLimit    0.000     1.375 SECS  2,989 MB      0
----   4765 Equation   Eq_converter_unitsFixedLimit    0.000     1.375 SECS  2,989 MB      0
----   4777 Equation   Eq_converter_unitsTotalMIP    0.000     1.375 SECS  2,989 MB      0
----   4788 Equation   Eq_converter_unitsOnlineMIP    0.328     1.703 SECS  2,989 MB      0
----   4818 Equation   Eq_converter_activityUpperLimit    2.828     4.531 SECS  3,902 MB  1586999
----   4799 Equation   Eq_converter_activityLowerLimit    0.454     4.985 SECS  3,902 MB      0
----   4833 Equation   Eq_converter_activityFixedLimit    1.046     6.031 SECS  3,915 MB  165001
----   4850 Equation   Eq_converter_rampPos    0.000     6.031 SECS  3,915 MB      0
----   4863 Equation   Eq_converter_rampNeg    0.016     6.047 SECS  3,915 MB      0
----   4876 Equation   Eq_converter_rampLimit    0.453     6.500 SECS  3,915 MB      0
----   4895 Equation   Eq_converter_unitsOnline    2.422     8.922 SECS  4,496 MB  1752000
----   4907 Equation   Eq_converter_unitsOnlineUC    0.328     9.250 SECS  4,496 MB      0
----   4920 Equation   Eq_converter_activityStartups    0.375     9.625 SECS  4,496 MB      0
----   4932 Equation   Eq_converter_activityShutdowns    0.297     9.922 SECS  4,496 MB      0
----   4945 Equation   Eq_converter_limitStartups    0.000     9.922 SECS  4,496 MB      0
----   4960 Equation   Eq_converter_minUptime    0.313    10.235 SECS  4,496 MB      0
----   4974 Equation   Eq_converter_minDowntime    0.328    10.563 SECS  4,496 MB      0
----   4993 Equation   Eq_converter_activityUpperLimitDetailedPartLoadMinReq    0.047    10.610 SECS  4,496 MB      0
----   5012 Equation   Eq_converter_activityUpperLimitDetailedPartLoadMaxReq    0.062    10.672 SECS  4,496 MB      0
----   5036 Equation   Eq_converter_activityLowerLimitDetailedPartLoadMinReq    0.047    10.719 SECS  4,496 MB      0
----   5058 Equation   Eq_converter_activityUpperLimitPartLoad    0.031    10.750 SECS  4,496 MB      0
----   5074 Equation   Eq_converter_activityLowerLimitPartLoad    0.016    10.766 SECS  4,496 MB      0
----   5089 Equation   Eq_converter_noOnlineIdle    0.015    10.781 SECS  4,496 MB      0
----   5104 Equation   Eq_converter_noOnlineIdleDetailedPartLoad    0.016    10.797 SECS  4,496 MB      0
----   5118 Equation   Eq_converter_activityModeLimit    0.031    10.828 SECS  4,496 MB      0
----   5803 Equation   Eq_storage_unitsBalance    0.000    10.828 SECS  4,496 MB     18
----   5825 Equation   Eq_storage_unitsFixedDecom    0.000    10.828 SECS  4,496 MB      0
----   5841 Equation   Eq_storage_unitsFreeDecom    0.000    10.828 SECS  4,496 MB      0
----   5871 Equation   Eq_storage_unitsLowerLimit    0.000    10.828 SECS  4,496 MB      0
----   5882 Equation   Eq_storage_unitsUpperLimit    0.000    10.828 SECS  4,496 MB      7
----   5932 Equation   Eq_storage_levelUpperLimit_degradation    0.016    10.844 SECS  4,496 MB      0
----   5894 Equation   Eq_storage_unitsTotalMIP    0.000    10.844 SECS  4,496 MB      0
----   5905 Equation   Eq_storage_levelLowerLimit    0.047    10.891 SECS  4,496 MB      0
----   5918 Equation   Eq_storage_levelUpperLimit    0.515    11.406 SECS  4,496 MB  254040
----   5994 Equation   Eq_storage_losses    0.657    12.063 SECS  4,496 MB  254040
----   5949 Equation   Eq_storage_unitsBalanceStates    0.000    12.063 SECS  4,496 MB      0
----   5961 Equation   Eq_storage_unitsUpperLimitPerState    0.000    12.063 SECS  4,496 MB      0
----   5976 Equation   Eq_storage_unitsStatesNoRecovery    0.000    12.063 SECS  4,496 MB      0
----   6019 Equation   Eq_storage_cRateLimit    0.047    12.110 SECS  4,496 MB      0
----   6033 Equation   Eq_storage_eRateLimit    0.046    12.156 SECS  4,496 MB      0
----   6047 Equation   Eq_storage_charge    0.047    12.203 SECS  4,496 MB      0
----   6059 Equation   Eq_storage_discharge    0.047    12.250 SECS  4,496 MB      0
----   6071 Equation   Eq_storage_levelStateSum    0.047    12.297 SECS  4,496 MB      0
----   6082 Equation   Eq_storage_levelUpperLimitPerAge    1.719    14.016 SECS  4,496 MB      0
----   6099 Equation   Eq_storage_chargeBasedDegradationDistribution    0.000    14.016 SECS  4,496 MB      0
----   6115 Equation   Eq_storage_chargingPerAge    1.453    15.469 SECS  4,496 MB      0
----   6127 Equation   Eq_storage_unitsDecomStateSum    0.000    15.469 SECS  4,496 MB      0
----   6139 Equation   Eq_storage_unitsDegradation    0.000    15.469 SECS  4,496 MB      0
----   6157 Equation   Eq_storage_unitsDegradation_onlyOneRange    0.000    15.469 SECS  4,496 MB      0
----   6168 Equation   Eq_storage_unitsSoC    0.016    15.485 SECS  4,496 MB      0
----   6194 Equation   Eq_storage_unitsSoC_sum    0.015    15.500 SECS  4,496 MB      0
----   6185 Equation   Eq_storage_unitsSoC_onlyOneRange    0.016    15.516 SECS  4,496 MB      0
----   6205 Equation   Eq_storage_levelSoC    0.015    15.531 SECS  4,496 MB      0
----   6218 Equation   Eq_storage_cRateLimit_SoC    5.766    21.297 SECS  4,496 MB      0
----   6234 Equation   Eq_storage_eRateLimit_SoC    5.781    27.078 SECS  4,496 MB      0
----   6989 Equation   Eq_transfer_linksBalance    0.000    27.078 SECS  4,496 MB     24
----   7011 Equation   Eq_transfer_linksFixedDecom    0.000    27.078 SECS  4,496 MB      0
----   7027 Equation   Eq_transfer_linksFreeDecom    0.000    27.078 SECS  4,496 MB      0
----   7057 Equation   Eq_transfer_linksLowerLimit    0.000    27.078 SECS  4,496 MB      0
----   7068 Equation   Eq_transfer_linksUpperLimit    0.000    27.078 SECS  4,496 MB     12
----   7080 Equation   Eq_transfer_linksTotalMIP    0.000    27.078 SECS  4,496 MB      0
----   7091 Equation   Eq_transfer_flowAlongUpperLimit    0.469    27.547 SECS  4,496 MB  210240
----   7104 Equation   Eq_transfer_flowAgainstUpperLimit    0.469    28.016 SECS  4,496 MB  210240
----   7132 Equation   Eq_transfer_dcopf_angleFlows    0.000    28.016 SECS  4,496 MB      0
----   7724 Equation   Eq_sourcesink_useFixedSum    0.000    28.016 SECS  4,496 MB      0
----   7737 Equation   Eq_sourcesink_useLowerSum    0.000    28.016 SECS  4,496 MB      0
----   7751 Equation   Eq_sourcesink_useUpperSum    0.109    28.125 SECS  4,496 MB     11
----   7831 Equation   Eq_balance_commodities   10.203    38.328 SECS  4,845 MB  446760
----   8230 Equation   Eq_accounting_indicatorCalc_links    0.000    38.328 SECS  4,845 MB      0
----   7971 Equation   Eq_accounting_indicatorCalc    1.813    40.141 SECS  4,873 MB      1
----   8312 Equation   Eq_accounting_objective    0.000    40.141 SECS  4,873 MB      1
GAMS 40.4.0  d540b52e Oct 3, 2022           WEX-WEI x86 64bit/MS Windows - 03/22/24 15:20:01 Page 9
G e n e r a l   A l g e b r a i c   M o d e l i n g   S y s t e m
Range Statistics    SOLVE remix Using MIP From line 8587


RANGE STATISTICS (ABSOLUTE NON-ZERO FINITE VALUES)

RHS       [min, max] : [ 6.000E-04, 3.000E+03] - Zero values observed as well
Bound     [min, max] : [ 6.000E-04, 3.770E-01] - Zero values observed as well
Matrix    [min, max] : [ 1.000E-02, 1.926E+02]

GAMS 40.4.0  d540b52e Oct 3, 2022           WEX-WEI x86 64bit/MS Windows - 03/22/24 15:20:01 Page 10
G e n e r a l   A l g e b r a i c   M o d e l i n g   S y s t e m
Model Statistics    SOLVE remix Using MIP From line 8587


LOOPS                           optiframeToCalc   of2


MODEL STATISTICS

BLOCKS OF EQUATIONS          75     SINGLE EQUATIONS    4,879,740
BLOCKS OF VARIABLES          38     SINGLE VARIABLES    5,002,568
NON ZERO ELEMENTS    14,263,728


----   8587 Solve Fini remix         7.953    48.094 SECS  4,882 MB  14263728
GENERATION TIME      =       46.719 SECONDS  4,882 MB  40.4.0 d540b52e WEX-WEI


EXECUTION TIME       =       48.094 SECONDS  4,882 MB  40.4.0 d540b52e WEX-WEI
----   8587 GAMS Fini                4.641     4.641 SECS  4,882 MB 
----      1 InitE                    0.406     0.406 SECS  3,406 MB 
----      1 ExecInit                 0.000     0.406 SECS  3,406 MB 
----   8587 Solve Alg  remix         0.000     0.406 SECS  3,406 MB 
               L O O P S         optiframeToCalc of2

GAMS 40.4.0  d540b52e Oct 3, 2022           WEX-WEI x86 64bit/MS Windows - 03/22/24 15:20:01 Page 11
G e n e r a l   A l g e b r a i c   M o d e l i n g   S y s t e m
Solution Report     SOLVE remix Using MIP From line 8587


               S O L V E      S U M M A R Y

     MODEL   remix               OBJECTIVE  accounting_objective
     TYPE    MIP                 DIRECTION  MINIMIZE
     SOLVER  CPLEX               FROM LINE  8587

**** SOLVER STATUS     1 Normal Completion
**** MODEL STATUS      1 Optimal
**** OBJECTIVE VALUE             2588.6055

 RESOURCE USAGE, LIMIT        219.313   1209600.000
 ITERATION COUNT, LIMIT       153    2147483647
--- GAMS/Cplex Link licensed for continuous and discrete problems.

Reading parameter(s) from "C:\Local\REMix\remix_nz\process\cplex.opt"
>>  rerun no
>>  iis 1
>>  lpmethod 4
>>  barorder 3 /;
*** Value Error line 4: Integer expected, for option "barorder" saw "3 /;"
*** Value Error line 4:    Option ignored
>>  preind 1
>>  scaind 0
>>  predual -1
>>  baralg 0
>>  barstartalg 1
>>  barepcomp 1e-6
>>  solutiontype 2
>>  startalg 4
>>  epgap 1e-3
>>  quality 1
>>  barcolnz 0
>>  threads 4
>>  parallelmode 1
Finished reading from "C:\Local\REMix\remix_nz\process\cplex.opt"

--- GMO setup time: 0.00s
--- Space for names approximately 617.53 Mb
--- Use option 'names no' to turn use of names off
--- GMO memory 1784.41 Mb (peak 1822.58 Mb)
--- Dictionary memory 0.00 Mb
--- Cplex 22.1.0.0 link memory 151.26 Mb (peak 1032.10 Mb)
--- Starting Cplex


--- LP status (1): optimal.
--- Cplex Time: 210.25sec (det. 162309.53 ticks)


Optimal solution found
Objective:         2588.605541

Solution Quality Statistics:
                                   unscaled                scaled
                               max         sum         max         sum
primal infeasibility        1.251e-06   6.374e-03   1.251e-06   6.374e-03
dual infeasibility          2.371e-11   3.074e-10   2.371e-11   3.074e-10
primal residual             1.211e-09   1.535e-09   1.211e-09   1.535e-09
dual residual               2.162e-08   3.802e-05   2.162e-08   3.802e-05
primal solution vector      2.589e+03   1.891e+07   2.589e+03   1.891e+07
dual solution vector        6.047e+02   1.298e+05   6.047e+02   1.298e+05
slacks                      3.000e+03   1.664e+07   3.000e+03   1.664e+07
reduced costs               1.053e+03   2.160e+06   1.053e+03   2.160e+06
comp. slackness viol.       1.326e-07   2.491e-03




**** REPORT SUMMARY :        0     NONOPT
                             0 INFEASIBLE
                             0  UNBOUNDED
----   8587 Solve Read remix         1.344     1.750 SECS  3,893 MB 
GAMS 40.4.0  d540b52e Oct 3, 2022           WEX-WEI x86 64bit/MS Windows - 03/22/24 15:20:01 Page 12
G e n e r a l   A l g e b r a i c   M o d e l i n g   S y s t e m
Model Analysis      SOLVE remix Using MIP From line 8587


----   8587 Solve Init remix         0.000     1.828 SECS  3,896 MB 
----   4673 Equation   Eq_converter_unitsBalance    0.000     1.828 SECS  3,896 MB    196
----   4695 Equation   Eq_converter_unitsFixedDecom    0.000     1.828 SECS  3,896 MB     99
----   4711 Equation   Eq_converter_unitsFreeDecom    0.000     1.828 SECS  3,896 MB      0
----   4741 Equation   Eq_converter_unitsUpperLimit    0.000     1.828 SECS  3,896 MB    135
----   4755 Equation   Eq_converter_unitsLowerLimit    0.000     1.828 SECS  3,896 MB      0
----   4765 Equation   Eq_converter_unitsFixedLimit    0.000     1.828 SECS  3,896 MB      0
----   4777 Equation   Eq_converter_unitsTotalMIP    0.000     1.828 SECS  3,896 MB      0
----   4788 Equation   Eq_converter_unitsOnlineMIP    0.297     2.125 SECS  3,896 MB      0
----   4818 Equation   Eq_converter_activityUpperLimit    2.391     4.516 SECS  4,575 MB  1262879
----   4799 Equation   Eq_converter_activityLowerLimit    0.437     4.953 SECS  4,575 MB      0
----   4833 Equation   Eq_converter_activityFixedLimit    0.969     5.922 SECS  4,589 MB  165001
----   4850 Equation   Eq_converter_rampPos    0.000     5.922 SECS  4,589 MB      0
----   4863 Equation   Eq_converter_rampNeg    0.000     5.922 SECS  4,589 MB      0
----   4876 Equation   Eq_converter_rampLimit    0.437     6.359 SECS  4,589 MB      0
----   4895 Equation   Eq_converter_unitsOnline    1.953     8.312 SECS  5,105 MB  1427880
----   4907 Equation   Eq_converter_unitsOnlineUC    0.297     8.609 SECS  5,105 MB      0
----   4920 Equation   Eq_converter_activityStartups    0.328     8.937 SECS  5,105 MB      0
----   4932 Equation   Eq_converter_activityShutdowns    0.297     9.234 SECS  5,105 MB      0
----   4945 Equation   Eq_converter_limitStartups    0.000     9.234 SECS  5,105 MB      0
----   4960 Equation   Eq_converter_minUptime    0.297     9.531 SECS  5,105 MB      0
----   4974 Equation   Eq_converter_minDowntime    0.297     9.828 SECS  5,105 MB      0
----   4993 Equation   Eq_converter_activityUpperLimitDetailedPartLoadMinReq    0.063     9.891 SECS  5,105 MB      0
----   5012 Equation   Eq_converter_activityUpperLimitDetailedPartLoadMaxReq    0.078     9.969 SECS  5,105 MB      0
----   5036 Equation   Eq_converter_activityLowerLimitDetailedPartLoadMinReq    0.062    10.031 SECS  5,105 MB      0
----   5058 Equation   Eq_converter_activityUpperLimitPartLoad    0.016    10.047 SECS  5,105 MB      0
----   5074 Equation   Eq_converter_activityLowerLimitPartLoad    0.015    10.062 SECS  5,105 MB      0
----   5089 Equation   Eq_converter_noOnlineIdle    0.016    10.078 SECS  5,105 MB      0
----   5104 Equation   Eq_converter_noOnlineIdleDetailedPartLoad    0.031    10.109 SECS  5,105 MB      0
----   5118 Equation   Eq_converter_activityModeLimit    0.016    10.125 SECS  5,105 MB      0
----   5803 Equation   Eq_storage_unitsBalance    0.000    10.125 SECS  5,105 MB     25
----   5825 Equation   Eq_storage_unitsFixedDecom    0.000    10.125 SECS  5,105 MB      0
----   5841 Equation   Eq_storage_unitsFreeDecom    0.000    10.125 SECS  5,105 MB      0
----   5871 Equation   Eq_storage_unitsLowerLimit    0.000    10.125 SECS  5,105 MB      0
----   5882 Equation   Eq_storage_unitsUpperLimit    0.000    10.125 SECS  5,105 MB      7
----   5932 Equation   Eq_storage_levelUpperLimit_degradation    0.016    10.141 SECS  5,105 MB      0
----   5894 Equation   Eq_storage_unitsTotalMIP    0.000    10.141 SECS  5,105 MB      0
----   5905 Equation   Eq_storage_levelLowerLimit    0.031    10.172 SECS  5,105 MB      0
----   5918 Equation   Eq_storage_levelUpperLimit    0.469    10.641 SECS  5,105 MB  219000
----   5994 Equation   Eq_storage_losses    0.531    11.172 SECS  5,105 MB  219000
----   5949 Equation   Eq_storage_unitsBalanceStates    0.000    11.172 SECS  5,105 MB      0
----   5961 Equation   Eq_storage_unitsUpperLimitPerState    0.000    11.172 SECS  5,105 MB      0
----   5976 Equation   Eq_storage_unitsStatesNoRecovery    0.000    11.172 SECS  5,105 MB      0
----   6019 Equation   Eq_storage_cRateLimit    0.015    11.187 SECS  5,105 MB      0
----   6033 Equation   Eq_storage_eRateLimit    0.016    11.203 SECS  5,105 MB      0
----   6047 Equation   Eq_storage_charge    0.031    11.234 SECS  5,105 MB      0
----   6059 Equation   Eq_storage_discharge    0.016    11.250 SECS  5,105 MB      0
----   6071 Equation   Eq_storage_levelStateSum    0.016    11.266 SECS  5,105 MB      0
----   6082 Equation   Eq_storage_levelUpperLimitPerAge    0.656    11.922 SECS  5,105 MB      0
----   6099 Equation   Eq_storage_chargeBasedDegradationDistribution    0.000    11.922 SECS  5,105 MB      0
----   6115 Equation   Eq_storage_chargingPerAge    0.547    12.469 SECS  5,105 MB      0
----   6127 Equation   Eq_storage_unitsDecomStateSum    0.000    12.469 SECS  5,105 MB      0
----   6139 Equation   Eq_storage_unitsDegradation    0.000    12.469 SECS  5,105 MB      0
----   6157 Equation   Eq_storage_unitsDegradation_onlyOneRange    0.000    12.469 SECS  5,105 MB      0
----   6168 Equation   Eq_storage_unitsSoC    0.015    12.484 SECS  5,105 MB      0
----   6194 Equation   Eq_storage_unitsSoC_sum    0.016    12.500 SECS  5,105 MB      0
----   6185 Equation   Eq_storage_unitsSoC_onlyOneRange    0.000    12.500 SECS  5,105 MB      0
----   6205 Equation   Eq_storage_levelSoC    0.016    12.516 SECS  5,105 MB      0
----   6218 Equation   Eq_storage_cRateLimit_SoC    5.640    18.156 SECS  5,105 MB      0
----   6234 Equation   Eq_storage_eRateLimit_SoC    5.672    23.828 SECS  5,105 MB      0
----   6989 Equation   Eq_transfer_linksBalance    0.000    23.828 SECS  5,105 MB     36
----   7011 Equation   Eq_transfer_linksFixedDecom    0.000    23.828 SECS  5,105 MB      0
----   7027 Equation   Eq_transfer_linksFreeDecom    0.000    23.828 SECS  5,105 MB      0
----   7057 Equation   Eq_transfer_linksLowerLimit    0.000    23.828 SECS  5,105 MB      0
----   7068 Equation   Eq_transfer_linksUpperLimit    0.000    23.828 SECS  5,105 MB     12
----   7080 Equation   Eq_transfer_linksTotalMIP    0.000    23.828 SECS  5,105 MB      0
----   7091 Equation   Eq_transfer_flowAlongUpperLimit    0.609    24.437 SECS  5,105 MB  315360
----   7104 Equation   Eq_transfer_flowAgainstUpperLimit    0.641    25.078 SECS  5,129 MB  315360
----   7132 Equation   Eq_transfer_dcopf_angleFlows    0.000    25.078 SECS  5,129 MB      0
----   7724 Equation   Eq_sourcesink_useFixedSum    0.000    25.078 SECS  5,129 MB      0
----   7737 Equation   Eq_sourcesink_useLowerSum    0.000    25.078 SECS  5,129 MB      0
----   7751 Equation   Eq_sourcesink_useUpperSum    0.109    25.187 SECS  5,129 MB     11
----   7831 Equation   Eq_balance_commodities    8.735    33.922 SECS  5,479 MB  350400
----   8230 Equation   Eq_accounting_indicatorCalc_links    0.000    33.922 SECS  5,479 MB      0
----   7971 Equation   Eq_accounting_indicatorCalc    1.750    35.672 SECS  5,500 MB      1
----   8312 Equation   Eq_accounting_objective    0.000    35.672 SECS  5,500 MB      1
GAMS 40.4.0  d540b52e Oct 3, 2022           WEX-WEI x86 64bit/MS Windows - 03/22/24 15:20:01 Page 13
G e n e r a l   A l g e b r a i c   M o d e l i n g   S y s t e m
Range Statistics    SOLVE remix Using MIP From line 8587


RANGE STATISTICS (ABSOLUTE NON-ZERO FINITE VALUES)

RHS       [min, max] : [ 5.111E-08, 3.000E+03] - Zero values observed as well
Bound     [min, max] : [ 2.410E-03, 2.699E-01] - Zero values observed as well
Matrix    [min, max] : [ 1.000E-02, 1.926E+02]

GAMS 40.4.0  d540b52e Oct 3, 2022           WEX-WEI x86 64bit/MS Windows - 03/22/24 15:20:01 Page 14
G e n e r a l   A l g e b r a i c   M o d e l i n g   S y s t e m
Model Statistics    SOLVE remix Using MIP From line 8587


LOOPS                           optiframeToCalc   of3


MODEL STATISTICS

BLOCKS OF EQUATIONS          75     SINGLE EQUATIONS    4,275,403
BLOCKS OF VARIABLES          38     SINGLE VARIABLES    4,459,500  2 projected
NON ZERO ELEMENTS    13,098,742


----   8587 Solve Fini remix         6.906    42.578 SECS  5,500 MB  13098742
GENERATION TIME      =       40.750 SECONDS  5,500 MB  40.4.0 d540b52e WEX-WEI


EXECUTION TIME       =       42.578 SECONDS  5,500 MB  40.4.0 d540b52e WEX-WEI
----   8587 GAMS Fini                5.953     5.953 SECS  5,500 MB 
----      1 InitE                    0.485     0.485 SECS  4,208 MB 
----      1 ExecInit                 0.000     0.485 SECS  4,208 MB 
----   8587 Solve Alg  remix         0.000     0.485 SECS  4,208 MB 
               L O O P S         optiframeToCalc of3

GAMS 40.4.0  d540b52e Oct 3, 2022           WEX-WEI x86 64bit/MS Windows - 03/22/24 15:20:01 Page 15
G e n e r a l   A l g e b r a i c   M o d e l i n g   S y s t e m
Solution Report     SOLVE remix Using MIP From line 8587


               S O L V E      S U M M A R Y

     MODEL   remix               OBJECTIVE  accounting_objective
     TYPE    MIP                 DIRECTION  MINIMIZE
     SOLVER  CPLEX               FROM LINE  8587

**** SOLVER STATUS     1 Normal Completion
**** MODEL STATUS      1 Optimal
**** OBJECTIVE VALUE             5450.5168

 RESOURCE USAGE, LIMIT        275.109   1209600.000
 ITERATION COUNT, LIMIT       103    2147483647
--- GAMS/Cplex Link licensed for continuous and discrete problems.

Reading parameter(s) from "C:\Local\REMix\remix_nz\process\cplex.opt"
>>  rerun no
>>  iis 1
>>  lpmethod 4
>>  barorder 3 /;
*** Value Error line 4: Integer expected, for option "barorder" saw "3 /;"
*** Value Error line 4:    Option ignored
>>  preind 1
>>  scaind 0
>>  predual -1
>>  baralg 0
>>  barstartalg 1
>>  barepcomp 1e-6
>>  solutiontype 2
>>  startalg 4
>>  epgap 1e-3
>>  quality 1
>>  barcolnz 0
>>  threads 4
>>  parallelmode 1
Finished reading from "C:\Local\REMix\remix_nz\process\cplex.opt"

--- GMO setup time: 0.00s
--- Space for names approximately 549.65 Mb
--- Use option 'names no' to turn use of names off
--- GMO memory 1600.33 Mb (peak 1634.36 Mb)
--- Dictionary memory 0.00 Mb
--- Cplex 22.1.0.0 link memory 133.99 Mb (peak 922.68 Mb)
--- Starting Cplex


--- LP status (1): optimal.
--- Cplex Time: 267.17sec (det. 272084.99 ticks)


Optimal solution found
Objective:         5450.516772

Solution Quality Statistics:
                                   unscaled                scaled
                               max         sum         max         sum
primal infeasibility        4.481e-07   1.740e-04   4.481e-07   1.740e-04
dual infeasibility          6.965e-10   8.459e-09   6.965e-10   8.459e-09
primal residual             8.316e-08   8.353e-08   8.316e-08   8.353e-08
dual residual               4.186e-07   1.045e-03   4.186e-07   1.045e-03
primal solution vector      5.451e+03   1.737e+07   5.451e+03   1.737e+07
dual solution vector        7.135e+02   1.386e+05   7.135e+02   1.386e+05
slacks                      3.000e+03   1.855e+07   3.000e+03   1.855e+07
reduced costs               1.053e+03   2.064e+06   1.053e+03   2.064e+06
comp. slackness viol.       7.164e-07   7.491e-03




**** REPORT SUMMARY :        0     NONOPT
                             0 INFEASIBLE
                             0  UNBOUNDED
----   8587 Solve Read remix         1.297     1.782 SECS  4,632 MB 
GAMS 40.4.0  d540b52e Oct 3, 2022           WEX-WEI x86 64bit/MS Windows - 03/22/24 15:20:01 Page 16
G e n e r a l   A l g e b r a i c   M o d e l i n g   S y s t e m
E x e c u t i o n


----   8637 Assignment indicator_accounting_detailed    7.062     8.844 SECS  4,934 MB    716
----   8813 Assignment indicator_accounting    0.078     8.922 SECS  4,933 MB    284
----   8832 Assignment indicator_accounting_comp    0.000     8.922 SECS  4,933 MB   1164
----   8846 Assignment indicator_accounting_ref    0.000     8.922 SECS  4,933 MB      1
----   8852 Assignment indicator_accounting_links    0.985     9.907 SECS  4,934 MB     72
----   8933 Assignment converter_ratedInput    0.015     9.922 SECS  4,933 MB     28
----   8937 Assignment converter_ratedInput    0.000     9.922 SECS  4,933 MB      7
----   8941 Assignment converter_ratedOutput    0.000     9.922 SECS  4,933 MB     33
----   8945 Assignment converter_ratedOutput    0.000     9.922 SECS  4,933 MB     28
----   8949 Assignment converter_ratedOutput_min    0.000     9.922 SECS  4,933 MB   4823
----   8956 Assignment converter_ratedOutput_max    0.016     9.938 SECS  4,933 MB   4823
----   8963 Assignment converter_units_ext    0.047     9.985 SECS  4,933 MB    694
----   8966 Assignment converter_units_ext    0.031    10.016 SECS  4,933 MB    902
----   8969 Assignment converter_units_ext    0.047    10.063 SECS  4,933 MB   2634
----   8972 Assignment converter_caps_ext    0.000    10.063 SECS  4,933 MB   2916
----   8977 Assignment converter_caps_ext    0.000    10.063 SECS  4,933 MB   2916
----   8984 Assignment converter_caps_ext    0.062    10.125 SECS  4,933 MB   3836
----   8991 Assignment converter_caps    0.016    10.141 SECS  4,933 MB   2232
----   8996 Clear      converter_caps_ext    0.000    10.141 SECS  4,933 MB 
----   8998 Assignment converter_units    0.000    10.141 SECS  4,933 MB   1622
----   9003 Clear      converter_units_ext    0.000    10.141 SECS  4,933 MB 
----   9008 Assignment max_transfer_coefficient    0.000    10.141 SECS  4,933 MB      1
----   9012 Assignment min_transfer_coefficient    0.000    10.141 SECS  4,933 MB      0
----   9016 Assignment transfer_usedStartEnd    0.000    10.141 SECS  4,933 MB     84
----   9022 Assignment transfer_links    0.000    10.141 SECS  4,933 MB     36
----   9025 Assignment transfer_links    0.000    10.141 SECS  4,933 MB     60
----   9028 Assignment transfer_links    0.000    10.141 SECS  4,933 MB    132
----   9031 Assignment transfer_caps    0.000    10.141 SECS  4,933 MB     84
----   9039 Assignment transfer_caps    0.000    10.141 SECS  4,933 MB     84
----   9046 Assignment transfer_caps    0.000    10.141 SECS  4,933 MB    120
----   9056 Assignment transfer_flows    0.672    10.813 SECS  4,933 MB  315360
----   9064 Assignment transfer_flows_annual    0.109    10.922 SECS  4,933 MB     36
----   9069 Assignment transfer_flows_annual    0.125    11.047 SECS  4,933 MB     69
----   9075 Assignment transfer_flows_annual    0.141    11.188 SECS  4,933 MB    102
----   9081 Assignment transfer_flows_annual    0.000    11.188 SECS  4,933 MB    138
----   9086 Assignment transfer_flows_annual    0.000    11.188 SECS  4,933 MB    174
----   9093 Assignment transfer_losses    1.250    12.438 SECS  4,933 MB  315360
----   9106 Assignment transfer_losses_annual    0.109    12.547 SECS  4,933 MB     36
----   9116 Assignment storage_size_max    0.000    12.547 SECS  4,933 MB    145
----   9125 Assignment storage_size_min    0.000    12.547 SECS  4,933 MB    145
----   9134 Assignment storage_units_ext    0.000    12.547 SECS  4,933 MB      8
----   9138 Assignment storage_units_ext    0.000    12.547 SECS  4,933 MB      8
----   9142 Assignment storage_units_ext    0.000    12.547 SECS  4,933 MB    136
----   9146 Assignment storage_caps_ext    0.000    12.547 SECS  4,933 MB    136
----   9151 Assignment storage_caps_ext    0.000    12.547 SECS  4,933 MB    136
----   9158 Assignment storage_caps_ext    0.000    12.547 SECS  4,933 MB    274
----   9165 Assignment storage_caps_ext    0.000    12.547 SECS  4,933 MB    274
----   9174 Assignment storage_caps    0.000    12.547 SECS  4,933 MB    126
----   9179 Clear      storage_caps_ext    0.000    12.547 SECS  4,933 MB 
----   9181 Assignment storage_units    0.016    12.563 SECS  4,933 MB     85
----   9186 Clear      storage_units_ext    0.000    12.563 SECS  4,933 MB 
----   9191 Assignment storage_flows_ext    1.453    14.016 SECS  4,933 MB  210240
----   9201 Assignment storage_flows    0.328    14.344 SECS  4,933 MB  131400
----   9205 Clear      storage_flows_ext    0.016    14.360 SECS  4,933 MB 
----   9207 Assignment storage_level_out_ext    1.453    15.813 SECS  4,933 MB  210240
----   9211 Assignment storage_level_out    0.344    16.157 SECS  4,933 MB  131400
----   9215 Clear      storage_level_out_ext    0.015    16.172 SECS  4,933 MB 
----   9217 Assignment storage_flows_annual    0.031    16.203 SECS  4,933 MB     13
----   9221 Assignment storage_flows_annual    0.032    16.235 SECS  4,933 MB     28
----   9226 Assignment storage_flows_annual    0.047    16.282 SECS  4,933 MB     43
----   9231 Assignment storage_flows_annual    0.000    16.282 SECS  4,933 MB     57
----   9235 Assignment storage_flows_annual    0.000    16.282 SECS  4,933 MB     65
----   9241 Assignment storage_losses_out    5.421    21.703 SECS  4,933 MB      0
----   9249 Assignment storage_losses_annual    0.000    21.703 SECS  4,933 MB      0
----   9256 Assignment commodity_balance_ext   20.032    41.735 SECS  5,547 MB  5833748
----   9268 Assignment commodity_balance_ext    1.828    43.563 SECS  5,548 MB  6043988
----   9277 Assignment commodity_balance_ext    3.187    46.750 SECS  5,566 MB  8321252
----   9284 Assignment commodity_balance_ext    7.938    54.688 SECS  5,576 MB  9477572
----   9320 Assignment commodity_balance   14.937    69.625 SECS  6,460 MB  4954729
----   9326 Clear      commodity_balance_ext    0.360    69.985 SECS  6,460 MB 
----   9331 Assignment commodity_balance_annual    2.609    72.594 SECS  6,460 MB    620
----   9335 Assignment commodity_balance_annual    2.922    75.516 SECS  6,460 MB   1116
----   9340 Assignment commodity_balance_annual    2.875    78.391 SECS  6,460 MB   1292
----   9345 Assignment commodity_balance_annual    0.031    78.422 SECS  6,460 MB   1914
----   9349 Assignment commodity_balance_annual    0.000    78.422 SECS  6,460 MB   2317
----   9358 Assignment marginals_balance    0.250    78.672 SECS  6,460 MB  1243920
----   9363 Assignment marginals_sourcesink_profile    0.578    79.250 SECS  6,460 MB  289080
----   9368 Assignment marginals_sourcesink_sum    0.000    79.250 SECS  6,460 MB      0
----   9377 Assignment marginals_indicator_bounds    0.000    79.250 SECS  6,460 MB      0
----   9391 Assignment commodity_balance    1.188    80.438 SECS  6,460 MB  2638161
----   9395 Assignment transfer_flows    0.125    80.563 SECS  6,460 MB  295295
----   9399 Assignment transfer_losses    0.125    80.688 SECS  6,460 MB  285985
----   9403 Assignment storage_flows    0.047    80.735 SECS  6,460 MB  131400
----   9407 Assignment storage_level_out    0.047    80.782 SECS  6,460 MB  131397
----   9411 Assignment marginals_balance    0.218    81.000 SECS  6,460 MB  422674
----   9415 Assignment marginals_sourcesink_profile    0.110    81.110 SECS  6,460 MB  289067
----   9428 Unload                   2.015    83.125 SECS  6,460 MB 

**** REPORT FILE SUMMARY

opt C:\Local\REMix\remix_nz\process\cplex.opt


EXECUTION TIME       =       83.125 SECONDS  6,460 MB  40.4.0 d540b52e WEX-WEI


USER: Medium MUD - 10 User License                   S220920|0002AO-GEN
      University of Canterbury, Civil Engineering Department    DC16319
      License for teaching and research at degree granting institutions


**** FILE SUMMARY

Input      C:\Local\REMix\framework\remix\framework\model\run_remix.gms
Output     C:\Local\REMix\remix_nz\process\run_remix.lst
----   9428 GAMS Fini               22.750    22.750 SECS  6,460 MB 
 
---- Profile Summary (726 records processed)
    22.750   6.460GB      9428 GAMS Fini   
    20.032   5.547GB      9256 Assignment commodity_balance_ext (5833748)
    14.937   6.460GB      9320 Assignment commodity_balance (4954729)
    10.203   4.845GB      7831 Equation   Eq_balance_commodities (446760)
    10.109   3.716GB      7831 Equation   Eq_balance_commodities (446760)
     8.735   5.479GB      7831 Equation   Eq_balance_commodities (350400)
     8.281   1.626GB      6719 Assignment transfer_flowProfile (10406880)
     8.250   1.959GB      6732 Assignment transfer_flowProfile (20813760)
     7.953   4.882GB      8587 Solve Fini remix (14263728)
     7.938   5.576GB      9284 Assignment commodity_balance_ext (9477572)
