GAMS 40.4.0  d540b52e Oct 3, 2022           WEX-WEI x86 64bit/MS Windows - 02/27/24 13:28:36 Page 1
G e n e r a l   A l g e b r a i c   M o d e l i n g   S y s t e m
C o m p i l a t i o n


   1  * SPDX-FileCopyrightText: Copyright (c) 2023 German Aerospace Center (DLR)
   2  * SPDX-License-Identifier: BSD-3-Clause
   3   
   4  * ==== REMix version number ====
   6   
   7  * ==== global settings ====
  11   
  13   
  14  * ==== write metadata and inherit dataset ====
INCLUDE    C:\Local\REMix\framework\remix\framework\model\source\metadata.gms
  22   
  26   
  42   
  58   
  59  set metadata(*) /
INCLUDE    c:\Local\REMix\remix_nz\process\225a\metadata
  61  remix_version "0.9.2"
  62  gams_version "40.4.0"
  63  timestamp "02/27/24 13:28:36"
  64  framework_path "C:\Local\REMix\framework\remix\framework\model\source"
  65   
  66  framework_hash 96c2159997fb47c52b8300c49677756ddfb1ee40
  67   
  68  framework_branch "dev"
  69   
  70  project_path "C:\Local\REMix\remix_nz\output\nz-h2-stor_2020-2050\data"
  71   
  72  project_hash "1b355bd6aad08700ecd73697a172cae2cca3942d"
  73   
  74  project_branch "main"
  75   
  76  /;
INCLUDE    C:\Local\REMix\framework\remix\framework\model\source\data_inheritance.gms
  78  * SPDX-FileCopyrightText: Copyright (c) 2023 German Aerospace Center (DLR)
  79  * SPDX-License-Identifier: BSD-3-Clause
  80   
  83   
  88   
  89  * pandas based data inheritance reading in the dat files, merging them and writing csv files in the scrdir
 109  ;
 110   
 114   
 115  * ==== run remix ====
INCLUDE    C:\Local\REMix\framework\remix\framework\model\source\remix.gms
 120  * SPDX-FileCopyrightText: Copyright (c) 2023 German Aerospace Center (DLR)
 121  * SPDX-License-Identifier: BSD-3-Clause
 122   
 123  * ==== global settings ====
 130   
 133   
 135   
 138   
 139  * ==== include modules ====
INCLUDE    C:\Local\REMix\framework\remix\framework\model\source\sets.gms
 141  * SPDX-FileCopyrightText: Copyright (c) 2023 German Aerospace Center (DLR)
 142  * SPDX-License-Identifier: BSD-3-Clause
 143   
 144  * // # sets
 145  * // Sets are the indices of variables and parameters.
 146   
 147  * // ## Reference
 148  * // {special_table_sets}
 149   
 150  * // ## Input Files
 151  * // {special_table_set_input_files}
1055   
1056  map_accNodes(accNodesModel,accNodesModel_aggregation)
1057      $sum((nodesData, nodesModelToCalc)
1058              $( sameas(nodesModelToCalc,accNodesModel)
1059                  and map_accNodesLoad(nodesData,accNodesModel_aggregation)
1060                  and aggregateNodesModel(nodesData,nodesModelToCalc)), 1) = yes;
1061   
1062  map_accNodes(accNodesModel,"global")$sum(nodesModelToCalc$sameas(accNodesModel,nodesModelToCalc), 1) = yes;
1063  map_accNodes(accNodesModel,"global")$sum(accNodes$sameas(accNodesModel,accNodes), 1) = yes;
1064  map_accNodes(accNodesModel,accNodesModel) = yes;
1065  map_accLinks(accLinksModel,"global")$sum(linksModelToCalc$sameas(accLinksModel,linksModelToCalc), 1) = yes;
1066  map_accLinks(accLinksModel,accLinksModel) = yes;
1067  map_accYears(accYears,"horizon")$sum(yearsToCalc$sameas(accYears,yearsToCalc), 1)  = yes;
1068  map_accYears(accYears,accYears) = yes;
1069   
1070  map_accNodesToCalc(accNodesModel,nodesModelToCalc)
1071      $sum((nodesData)
1072              $( map_accNodesLoad(nodesData,accNodesModel)
1073                  and aggregateNodesModel(nodesData,nodesModelToCalc)), 1) = yes;
1074   
1075  map_accNodesToCalc("global",nodesModelToCalc) = yes;
1076  map_accNodesToCalc(accNodesModel,nodesModelToCalc)$sameas(accNodesModel,nodesModelToCalc) = yes;
1077  map_accLinksToCalc("global",linksModelToCalc) = yes;
1078  map_accLinksToCalc(accLinksModel,linksModelToCalc)$sameas(accLinksModel,linksModelToCalc) = yes;
1079  map_accYearsToCalc("horizon",yearsToCalc) = yes;
1080  map_accYearsToCalc(accYears,yearsToCalc)$sameas(accYears,yearsToCalc) = yes;
1081   
1082  * Duplicate sets for postcalc reporting without horizon and accYears
1083  map_accNodesPostCalc(accNodesModel,nodesModelToCalc) = map_accNodesToCalc(accNodesModel,nodesModelToCalc);
1084  map_accLinksPostCalc(accLinksModel,linksModelToCalc) = map_accLinksToCalc(accLinksModel,linksModelToCalc);
1085  map_accYearsPostCalc(accYears,yearsToCalc)$sameas(accYears,yearsToCalc) = yes;
1086  map_accYearsPostCalc(accYears,years)$(sameas(accYears,years) and years.val < sum(yearsToCalc$(ord(yearsToCalc) = 1), yearsToCalc.val)) = yes;
1087   
1088  set map_nodesAccounting(accNodesModel_aggregation,accNodesModel) "Map accounting nodes describes the mapping between model accounting nodes and data nodes." ;
1089  option map_nodesAccounting < map_accNodes;
1090   
1091  * ==== Generic sets  ====
1092  * These set names are repeated across different profile parameters.
1093  * they are not strictly related to each other and are not input data but
1094  * are needed for validation.
1095  ** // PROFILE: profileTypes | Profile Types | OEO_00140056:flow potential | set_profiletypes.csv
1096   
1097  ** // SET: scenario | Scenario | OEO_00000364:scenario | set_scenarios.csv
1098  * "Scenario indexes help to differentiate scenarios." /
1099   
1100  ** // SET: capType | Capacity Types | OEO_00030019:balance process attribute | set_captypes.csv
1101  * "Capacity types differentiate investment decisions." /
1102   
1103  ** // SET: balanceType | Balance Types | OEO_00030019:balance process attribute | set_balancetypes.csv
1104  * "Balance types differentiate types of balances." /
INCLUDE    C:\Local\REMix\framework\remix\framework\model\source\accounting\input.gms
1106  * SPDX-FileCopyrightText: Copyright (c) 2023 German Aerospace Center (DLR)
1107  * SPDX-License-Identifier: BSD-3-Clause
1108   
1109  * // # accounting_input
1110  * // The parameters in this file describe the accounting of indicators in the model.
1111   
1112  * // ## Variables
1113  * // {special_table_input_variables}
1522   
1523  * Aggregate accounting parameters
BATINCLUDE C:\Local\REMix\framework\remix\framework\model\source\battools\aggregateAccountingMean.gms
1525  * SPDX-FileCopyrightText: Copyright (c) 2023 German Aerospace Center (DLR)
1526  * SPDX-License-Identifier: BSD-3-Clause
1527   
1529   
1531   
1532  set accounting_converterUnitsNonzero(indicator,accnodesData,converter_techs,vintage);
1533  accounting_converterUnitsNonzero(indicator,accnodesData,converter_techs,vintage)
1534      $sum(pc_accounting_converterUnits$accounting_converterUnitsIn(indicator,accnodesData,converter_techs,vintage,pc_accounting_converterUnits), 1)
1535      = yes;
1536   
1538  set accounting_converterUnitsChk(indicator,nodesModel,converter_techs,vintage,pc_accounting_converterUnits);
1539  accounting_converterUnitsChk(indicator,nodesModel,converter_techs,vintage,"useAnnuity")
1540      $sum((nodesData,accnodesData)
1541              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1542                  and accounting_converterUnitsNonzero(indicator,accnodesData,converter_techs,vintage)), 1)
1543      = smax((nodesData,accnodesData)
1544              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1545                  and accounting_converterUnitsNonzero(indicator,accnodesData,converter_techs,vintage)),
1546          accounting_converterUnitsIn(indicator,accnodesData,converter_techs,vintage,"useAnnuity"))
1547      - smin((nodesData,accnodesData)
1548              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1549                  and accounting_converterUnitsNonzero(indicator,accnodesData,converter_techs,vintage)),
1550          accounting_converterUnitsIn(indicator,accnodesData,converter_techs,vintage,"useAnnuity"));
1551   
1552  abort$sum(accounting_converterUnitsChk(indicator,nodesModel,converter_techs,vintage,pc_accounting_converterUnits), 1) "Cannot aggregate technologies with different useAnnuity values."
1554   
1555  parameter accounting_converterUnitsAgg(indicator,nodesModel,converter_techs,vintage,pc_accounting_converterUnits);
1556  accounting_converterUnitsAgg(indicator,nodesModel,converter_techs,vintage,pc_accounting_converterUnits)
1557      $sum((nodesData,accnodesData)
1558              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1559                  and accounting_converterUnitsNonzero(indicator,accnodesData,converter_techs,vintage)), 1)
1560      = sum((nodesData,accnodesData)
1561              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1562                  and accounting_converterUnitsNonzero(indicator,accnodesData,converter_techs,vintage)),
1563          accounting_converterUnitsIn(indicator,accnodesData,converter_techs,vintage,pc_accounting_converterUnits))
1564      / sum((nodesData,accnodesData)
1565              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1566                  and accounting_converterUnitsNonzero(indicator,accnodesData,converter_techs,vintage)),
1567          1);
1568   
1569  parameter accounting_converterUnits(indicator,nodesModel,converter_techs,vintage,pc_accounting_converterUnits);
1570  loop(accnodes,
1571  accounting_converterUnits(indicator,nodesModel,converter_techs,vintage,pc_accounting_converterUnits)
1572      $sum(accnodesData$(map_accnodesToCalc(accnodes,nodesModel) and sameas(accnodes,accnodesData)
1573                              and accounting_converterUnitsIn(indicator,accnodesData,converter_techs,vintage,pc_accounting_converterUnits)), 1)
1574      = sum(accnodesData$(map_accnodesToCalc(accnodes,nodesModel) and sameas(accnodes,accnodesData)),
1575              accounting_converterUnitsIn(indicator,accnodesData,converter_techs,vintage,pc_accounting_converterUnits));
1576  );
1577   
1578  accounting_converterUnits(indicator,nodesModel,converter_techs,vintage,pc_accounting_converterUnits)
1579      $accounting_converterUnitsAgg(indicator,nodesModel,converter_techs,vintage,pc_accounting_converterUnits)
1580      = accounting_converterUnitsAgg(indicator,nodesModel,converter_techs,vintage,pc_accounting_converterUnits);
1581   
1582  * option kill %paramName%Nonzero %paramName%Chk %paramName%Agg
BATINCLUDE C:\Local\REMix\framework\remix\framework\model\source\battools\aggregateAccountingMean.gms
1584  * SPDX-FileCopyrightText: Copyright (c) 2023 German Aerospace Center (DLR)
1585  * SPDX-License-Identifier: BSD-3-Clause
1586   
1588   
1590   
1591  set accounting_converterActivityNonzero(indicator,accnodesData,converter_techs,vintage,activity);
1592  accounting_converterActivityNonzero(indicator,accnodesData,converter_techs,vintage,activity)
1593      $sum(pc_accounting_converterActivity$accounting_converterActivityIn(indicator,accnodesData,converter_techs,vintage,activity,pc_accounting_converterActivity), 1)
1594      = yes;
1595   
1597   
1598  parameter accounting_converterActivityAgg(indicator,nodesModel,converter_techs,vintage,activity,pc_accounting_converterActivity);
1599  accounting_converterActivityAgg(indicator,nodesModel,converter_techs,vintage,activity,pc_accounting_converterActivity)
1600      $sum((nodesData,accnodesData)
1601              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1602                  and accounting_converterActivityNonzero(indicator,accnodesData,converter_techs,vintage,activity)), 1)
1603      = sum((nodesData,accnodesData)
1604              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1605                  and accounting_converterActivityNonzero(indicator,accnodesData,converter_techs,vintage,activity)),
1606          accounting_converterActivityIn(indicator,accnodesData,converter_techs,vintage,activity,pc_accounting_converterActivity))
1607      / sum((nodesData,accnodesData)
1608              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1609                  and accounting_converterActivityNonzero(indicator,accnodesData,converter_techs,vintage,activity)),
1610          1);
1611   
1612  parameter accounting_converterActivity(indicator,nodesModel,converter_techs,vintage,activity,pc_accounting_converterActivity);
1613  loop(accnodes,
1614  accounting_converterActivity(indicator,nodesModel,converter_techs,vintage,activity,pc_accounting_converterActivity)
1615      $sum(accnodesData$(map_accnodesToCalc(accnodes,nodesModel) and sameas(accnodes,accnodesData)
1616                              and accounting_converterActivityIn(indicator,accnodesData,converter_techs,vintage,activity,pc_accounting_converterActivity)), 1)
1617      = sum(accnodesData$(map_accnodesToCalc(accnodes,nodesModel) and sameas(accnodes,accnodesData)),
1618              accounting_converterActivityIn(indicator,accnodesData,converter_techs,vintage,activity,pc_accounting_converterActivity));
1619  );
1620   
1621  accounting_converterActivity(indicator,nodesModel,converter_techs,vintage,activity,pc_accounting_converterActivity)
1622      $accounting_converterActivityAgg(indicator,nodesModel,converter_techs,vintage,activity,pc_accounting_converterActivity)
1623      = accounting_converterActivityAgg(indicator,nodesModel,converter_techs,vintage,activity,pc_accounting_converterActivity);
1624   
1625  * option kill %paramName%Nonzero %paramName%Chk %paramName%Agg
BATINCLUDE C:\Local\REMix\framework\remix\framework\model\source\battools\aggregateAccountingMean.gms
1627  * SPDX-FileCopyrightText: Copyright (c) 2023 German Aerospace Center (DLR)
1628  * SPDX-License-Identifier: BSD-3-Clause
1629   
1631   
1633   
1634  set accounting_converterStartupNonzero(indicator,accnodesData,converter_techs,vintage);
1635  accounting_converterStartupNonzero(indicator,accnodesData,converter_techs,vintage)
1636      $sum(pc_accounting_converterStartup$accounting_converterStartupIn(indicator,accnodesData,converter_techs,vintage,pc_accounting_converterStartup), 1)
1637      = yes;
1638   
1640   
1641  parameter accounting_converterStartupAgg(indicator,nodesModel,converter_techs,vintage,pc_accounting_converterStartup);
1642  accounting_converterStartupAgg(indicator,nodesModel,converter_techs,vintage,pc_accounting_converterStartup)
1643      $sum((nodesData,accnodesData)
1644              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1645                  and accounting_converterStartupNonzero(indicator,accnodesData,converter_techs,vintage)), 1)
1646      = sum((nodesData,accnodesData)
1647              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1648                  and accounting_converterStartupNonzero(indicator,accnodesData,converter_techs,vintage)),
1649          accounting_converterStartupIn(indicator,accnodesData,converter_techs,vintage,pc_accounting_converterStartup))
1650      / sum((nodesData,accnodesData)
1651              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1652                  and accounting_converterStartupNonzero(indicator,accnodesData,converter_techs,vintage)),
1653          1);
1654   
1655  parameter accounting_converterStartup(indicator,nodesModel,converter_techs,vintage,pc_accounting_converterStartup);
1656  loop(accnodes,
1657  accounting_converterStartup(indicator,nodesModel,converter_techs,vintage,pc_accounting_converterStartup)
1658      $sum(accnodesData$(map_accnodesToCalc(accnodes,nodesModel) and sameas(accnodes,accnodesData)
1659                              and accounting_converterStartupIn(indicator,accnodesData,converter_techs,vintage,pc_accounting_converterStartup)), 1)
1660      = sum(accnodesData$(map_accnodesToCalc(accnodes,nodesModel) and sameas(accnodes,accnodesData)),
1661              accounting_converterStartupIn(indicator,accnodesData,converter_techs,vintage,pc_accounting_converterStartup));
1662  );
1663   
1664  accounting_converterStartup(indicator,nodesModel,converter_techs,vintage,pc_accounting_converterStartup)
1665      $accounting_converterStartupAgg(indicator,nodesModel,converter_techs,vintage,pc_accounting_converterStartup)
1666      = accounting_converterStartupAgg(indicator,nodesModel,converter_techs,vintage,pc_accounting_converterStartup);
1667   
1668  * option kill %paramName%Nonzero %paramName%Chk %paramName%Agg
BATINCLUDE C:\Local\REMix\framework\remix\framework\model\source\battools\aggregateAccountingMean.gms
1670  * SPDX-FileCopyrightText: Copyright (c) 2023 German Aerospace Center (DLR)
1671  * SPDX-License-Identifier: BSD-3-Clause
1672   
1674   
1676   
1677  set accounting_storageUnitsNonzero(indicator,accnodesData,storage_techs,vintage);
1678  accounting_storageUnitsNonzero(indicator,accnodesData,storage_techs,vintage)
1679      $sum(pc_accounting_storageUnits$accounting_storageUnitsIn(indicator,accnodesData,storage_techs,vintage,pc_accounting_storageUnits), 1)
1680      = yes;
1681   
1683  set accounting_storageUnitsChk(indicator,nodesModel,storage_techs,vintage,pc_accounting_storageUnits);
1684  accounting_storageUnitsChk(indicator,nodesModel,storage_techs,vintage,"useAnnuity")
1685      $sum((nodesData,accnodesData)
1686              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1687                  and accounting_storageUnitsNonzero(indicator,accnodesData,storage_techs,vintage)), 1)
1688      = smax((nodesData,accnodesData)
1689              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1690                  and accounting_storageUnitsNonzero(indicator,accnodesData,storage_techs,vintage)),
1691          accounting_storageUnitsIn(indicator,accnodesData,storage_techs,vintage,"useAnnuity"))
1692      - smin((nodesData,accnodesData)
1693              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1694                  and accounting_storageUnitsNonzero(indicator,accnodesData,storage_techs,vintage)),
1695          accounting_storageUnitsIn(indicator,accnodesData,storage_techs,vintage,"useAnnuity"));
1696   
1697  abort$sum(accounting_storageUnitsChk(indicator,nodesModel,storage_techs,vintage,pc_accounting_storageUnits), 1) "Cannot aggregate technologies with different useAnnuity values."
1699   
1700  parameter accounting_storageUnitsAgg(indicator,nodesModel,storage_techs,vintage,pc_accounting_storageUnits);
1701  accounting_storageUnitsAgg(indicator,nodesModel,storage_techs,vintage,pc_accounting_storageUnits)
1702      $sum((nodesData,accnodesData)
1703              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1704                  and accounting_storageUnitsNonzero(indicator,accnodesData,storage_techs,vintage)), 1)
1705      = sum((nodesData,accnodesData)
1706              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1707                  and accounting_storageUnitsNonzero(indicator,accnodesData,storage_techs,vintage)),
1708          accounting_storageUnitsIn(indicator,accnodesData,storage_techs,vintage,pc_accounting_storageUnits))
1709      / sum((nodesData,accnodesData)
1710              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1711                  and accounting_storageUnitsNonzero(indicator,accnodesData,storage_techs,vintage)),
1712          1);
1713   
1714  parameter accounting_storageUnits(indicator,nodesModel,storage_techs,vintage,pc_accounting_storageUnits);
1715  loop(accnodes,
1716  accounting_storageUnits(indicator,nodesModel,storage_techs,vintage,pc_accounting_storageUnits)
1717      $sum(accnodesData$(map_accnodesToCalc(accnodes,nodesModel) and sameas(accnodes,accnodesData)
1718                              and accounting_storageUnitsIn(indicator,accnodesData,storage_techs,vintage,pc_accounting_storageUnits)), 1)
1719      = sum(accnodesData$(map_accnodesToCalc(accnodes,nodesModel) and sameas(accnodes,accnodesData)),
1720              accounting_storageUnitsIn(indicator,accnodesData,storage_techs,vintage,pc_accounting_storageUnits));
1721  );
1722   
1723  accounting_storageUnits(indicator,nodesModel,storage_techs,vintage,pc_accounting_storageUnits)
1724      $accounting_storageUnitsAgg(indicator,nodesModel,storage_techs,vintage,pc_accounting_storageUnits)
1725      = accounting_storageUnitsAgg(indicator,nodesModel,storage_techs,vintage,pc_accounting_storageUnits);
1726   
1727  * option kill %paramName%Nonzero %paramName%Chk %paramName%Agg
BATINCLUDE C:\Local\REMix\framework\remix\framework\model\source\battools\aggregateAccountingMean.gms
1729  * SPDX-FileCopyrightText: Copyright (c) 2023 German Aerospace Center (DLR)
1730  * SPDX-License-Identifier: BSD-3-Clause
1731   
1733   
1735   
1736  set accounting_transferLinksNonzero(indicator,acclinksData,transfer_techs,vintage);
1737  accounting_transferLinksNonzero(indicator,acclinksData,transfer_techs,vintage)
1738      $sum(pc_accounting_transferLinks$accounting_transferLinksIn(indicator,acclinksData,transfer_techs,vintage,pc_accounting_transferLinks), 1)
1739      = yes;
1740   
1742  set accounting_transferLinksChk(indicator,linksModel,transfer_techs,vintage,pc_accounting_transferLinks);
1743  accounting_transferLinksChk(indicator,linksModel,transfer_techs,vintage,"useAnnuity")
1744      $sum((linksData,acclinksData)
1745              $(aggregatelinksModel(linksData,linksModel) and sameas(linksData,acclinksData)
1746                  and accounting_transferLinksNonzero(indicator,acclinksData,transfer_techs,vintage)), 1)
1747      = smax((linksData,acclinksData)
1748              $(aggregatelinksModel(linksData,linksModel) and sameas(linksData,acclinksData)
1749                  and accounting_transferLinksNonzero(indicator,acclinksData,transfer_techs,vintage)),
1750          accounting_transferLinksIn(indicator,acclinksData,transfer_techs,vintage,"useAnnuity"))
1751      - smin((linksData,acclinksData)
1752              $(aggregatelinksModel(linksData,linksModel) and sameas(linksData,acclinksData)
1753                  and accounting_transferLinksNonzero(indicator,acclinksData,transfer_techs,vintage)),
1754          accounting_transferLinksIn(indicator,acclinksData,transfer_techs,vintage,"useAnnuity"));
1755   
1756  abort$sum(accounting_transferLinksChk(indicator,linksModel,transfer_techs,vintage,pc_accounting_transferLinks), 1) "Cannot aggregate technologies with different useAnnuity values."
1758   
1759  parameter accounting_transferLinksAgg(indicator,linksModel,transfer_techs,vintage,pc_accounting_transferLinks);
1760  accounting_transferLinksAgg(indicator,linksModel,transfer_techs,vintage,pc_accounting_transferLinks)
1761      $sum((linksData,acclinksData)
1762              $(aggregatelinksModel(linksData,linksModel) and sameas(linksData,acclinksData)
1763                  and accounting_transferLinksNonzero(indicator,acclinksData,transfer_techs,vintage)), 1)
1764      = sum((linksData,acclinksData)
1765              $(aggregatelinksModel(linksData,linksModel) and sameas(linksData,acclinksData)
1766                  and accounting_transferLinksNonzero(indicator,acclinksData,transfer_techs,vintage)),
1767          accounting_transferLinksIn(indicator,acclinksData,transfer_techs,vintage,pc_accounting_transferLinks))
1768      / sum((linksData,acclinksData)
1769              $(aggregatelinksModel(linksData,linksModel) and sameas(linksData,acclinksData)
1770                  and accounting_transferLinksNonzero(indicator,acclinksData,transfer_techs,vintage)),
1771          1);
1772   
1773  parameter accounting_transferLinks(indicator,linksModel,transfer_techs,vintage,pc_accounting_transferLinks);
1774  loop(acclinks,
1775  accounting_transferLinks(indicator,linksModel,transfer_techs,vintage,pc_accounting_transferLinks)
1776      $sum(acclinksData$(map_acclinksToCalc(acclinks,linksModel) and sameas(acclinks,acclinksData)
1777                              and accounting_transferLinksIn(indicator,acclinksData,transfer_techs,vintage,pc_accounting_transferLinks)), 1)
1778      = sum(acclinksData$(map_acclinksToCalc(acclinks,linksModel) and sameas(acclinks,acclinksData)),
1779              accounting_transferLinksIn(indicator,acclinksData,transfer_techs,vintage,pc_accounting_transferLinks));
1780  );
1781   
1782  accounting_transferLinks(indicator,linksModel,transfer_techs,vintage,pc_accounting_transferLinks)
1783      $accounting_transferLinksAgg(indicator,linksModel,transfer_techs,vintage,pc_accounting_transferLinks)
1784      = accounting_transferLinksAgg(indicator,linksModel,transfer_techs,vintage,pc_accounting_transferLinks);
1785   
1786  * option kill %paramName%Nonzero %paramName%Chk %paramName%Agg
BATINCLUDE C:\Local\REMix\framework\remix\framework\model\source\battools\aggregateAccountingMean.gms
1788  * SPDX-FileCopyrightText: Copyright (c) 2023 German Aerospace Center (DLR)
1789  * SPDX-License-Identifier: BSD-3-Clause
1790   
1792   
1794   
1795  set accounting_transferPerLengthNonzero(indicator,acclinksData,transfer_techs,vintage,link_types);
1796  accounting_transferPerLengthNonzero(indicator,acclinksData,transfer_techs,vintage,link_types)
1797      $sum(pc_accounting_transferPerLength$accounting_transferPerLengthIn(indicator,acclinksData,transfer_techs,vintage,link_types,pc_accounting_transferPerLength), 1)
1798      = yes;
1799   
1801  set accounting_transferPerLengthChk(indicator,linksModel,transfer_techs,vintage,link_types,pc_accounting_transferPerLength);
1802  accounting_transferPerLengthChk(indicator,linksModel,transfer_techs,vintage,link_types,"useAnnuity")
1803      $sum((linksData,acclinksData)
1804              $(aggregatelinksModel(linksData,linksModel) and sameas(linksData,acclinksData)
1805                  and accounting_transferPerLengthNonzero(indicator,acclinksData,transfer_techs,vintage,link_types)), 1)
1806      = smax((linksData,acclinksData)
1807              $(aggregatelinksModel(linksData,linksModel) and sameas(linksData,acclinksData)
1808                  and accounting_transferPerLengthNonzero(indicator,acclinksData,transfer_techs,vintage,link_types)),
1809          accounting_transferPerLengthIn(indicator,acclinksData,transfer_techs,vintage,link_types,"useAnnuity"))
1810      - smin((linksData,acclinksData)
1811              $(aggregatelinksModel(linksData,linksModel) and sameas(linksData,acclinksData)
1812                  and accounting_transferPerLengthNonzero(indicator,acclinksData,transfer_techs,vintage,link_types)),
1813          accounting_transferPerLengthIn(indicator,acclinksData,transfer_techs,vintage,link_types,"useAnnuity"));
1814   
1815  abort$sum(accounting_transferPerLengthChk(indicator,linksModel,transfer_techs,vintage,link_types,pc_accounting_transferPerLength), 1) "Cannot aggregate technologies with different useAnnuity values."
1817   
1818  parameter accounting_transferPerLengthAgg(indicator,linksModel,transfer_techs,vintage,link_types,pc_accounting_transferPerLength);
1819  accounting_transferPerLengthAgg(indicator,linksModel,transfer_techs,vintage,link_types,pc_accounting_transferPerLength)
1820      $sum((linksData,acclinksData)
1821              $(aggregatelinksModel(linksData,linksModel) and sameas(linksData,acclinksData)
1822                  and accounting_transferPerLengthNonzero(indicator,acclinksData,transfer_techs,vintage,link_types)), 1)
1823      = sum((linksData,acclinksData)
1824              $(aggregatelinksModel(linksData,linksModel) and sameas(linksData,acclinksData)
1825                  and accounting_transferPerLengthNonzero(indicator,acclinksData,transfer_techs,vintage,link_types)),
1826          accounting_transferPerLengthIn(indicator,acclinksData,transfer_techs,vintage,link_types,pc_accounting_transferPerLength))
1827      / sum((linksData,acclinksData)
1828              $(aggregatelinksModel(linksData,linksModel) and sameas(linksData,acclinksData)
1829                  and accounting_transferPerLengthNonzero(indicator,acclinksData,transfer_techs,vintage,link_types)),
1830          1);
1831   
1832  parameter accounting_transferPerLength(indicator,linksModel,transfer_techs,vintage,link_types,pc_accounting_transferPerLength);
1833  loop(acclinks,
1834  accounting_transferPerLength(indicator,linksModel,transfer_techs,vintage,link_types,pc_accounting_transferPerLength)
1835      $sum(acclinksData$(map_acclinksToCalc(acclinks,linksModel) and sameas(acclinks,acclinksData)
1836                              and accounting_transferPerLengthIn(indicator,acclinksData,transfer_techs,vintage,link_types,pc_accounting_transferPerLength)), 1)
1837      = sum(acclinksData$(map_acclinksToCalc(acclinks,linksModel) and sameas(acclinks,acclinksData)),
1838              accounting_transferPerLengthIn(indicator,acclinksData,transfer_techs,vintage,link_types,pc_accounting_transferPerLength));
1839  );
1840   
1841  accounting_transferPerLength(indicator,linksModel,transfer_techs,vintage,link_types,pc_accounting_transferPerLength)
1842      $accounting_transferPerLengthAgg(indicator,linksModel,transfer_techs,vintage,link_types,pc_accounting_transferPerLength)
1843      = accounting_transferPerLengthAgg(indicator,linksModel,transfer_techs,vintage,link_types,pc_accounting_transferPerLength);
1844   
1845  * option kill %paramName%Nonzero %paramName%Chk %paramName%Agg
BATINCLUDE C:\Local\REMix\framework\remix\framework\model\source\battools\aggregateAccountingMean.gms
1847  * SPDX-FileCopyrightText: Copyright (c) 2023 German Aerospace Center (DLR)
1848  * SPDX-License-Identifier: BSD-3-Clause
1849   
1851   
1853   
1854  set accounting_sourcesinkFlowNonzero(indicator,accnodesData,years,sourcesink_techs,commodity);
1855  accounting_sourcesinkFlowNonzero(indicator,accnodesData,years,sourcesink_techs,commodity)
1856      $sum(pc_accounting_sourcesinkFlow$accounting_sourcesinkFlowIn(indicator,accnodesData,years,sourcesink_techs,commodity,pc_accounting_sourcesinkFlow), 1)
1857      = yes;
1858   
1860   
1861  parameter accounting_sourcesinkFlowAgg(indicator,nodesModel,years,sourcesink_techs,commodity,pc_accounting_sourcesinkFlow);
1862  accounting_sourcesinkFlowAgg(indicator,nodesModel,years,sourcesink_techs,commodity,pc_accounting_sourcesinkFlow)
1863      $sum((nodesData,accnodesData)
1864              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1865                  and accounting_sourcesinkFlowNonzero(indicator,accnodesData,years,sourcesink_techs,commodity)), 1)
1866      = sum((nodesData,accnodesData)
1867              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1868                  and accounting_sourcesinkFlowNonzero(indicator,accnodesData,years,sourcesink_techs,commodity)),
1869          accounting_sourcesinkFlowIn(indicator,accnodesData,years,sourcesink_techs,commodity,pc_accounting_sourcesinkFlow))
1870      / sum((nodesData,accnodesData)
1871              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1872                  and accounting_sourcesinkFlowNonzero(indicator,accnodesData,years,sourcesink_techs,commodity)),
1873          1);
1874   
1875  parameter accounting_sourcesinkFlow(indicator,nodesModel,years,sourcesink_techs,commodity,pc_accounting_sourcesinkFlow);
1876  loop(accnodes,
1877  accounting_sourcesinkFlow(indicator,nodesModel,years,sourcesink_techs,commodity,pc_accounting_sourcesinkFlow)
1878      $sum(accnodesData$(map_accnodesToCalc(accnodes,nodesModel) and sameas(accnodes,accnodesData)
1879                              and accounting_sourcesinkFlowIn(indicator,accnodesData,years,sourcesink_techs,commodity,pc_accounting_sourcesinkFlow)), 1)
1880      = sum(accnodesData$(map_accnodesToCalc(accnodes,nodesModel) and sameas(accnodes,accnodesData)),
1881              accounting_sourcesinkFlowIn(indicator,accnodesData,years,sourcesink_techs,commodity,pc_accounting_sourcesinkFlow));
1882  );
1883   
1884  accounting_sourcesinkFlow(indicator,nodesModel,years,sourcesink_techs,commodity,pc_accounting_sourcesinkFlow)
1885      $accounting_sourcesinkFlowAgg(indicator,nodesModel,years,sourcesink_techs,commodity,pc_accounting_sourcesinkFlow)
1886      = accounting_sourcesinkFlowAgg(indicator,nodesModel,years,sourcesink_techs,commodity,pc_accounting_sourcesinkFlow);
1887   
1888  * option kill %paramName%Nonzero %paramName%Chk %paramName%Agg
1889   
1890  parameter accounting_indicatorBounds_links(linksModel,years,indicator,pc_accounting_indicatorBounds_links);
1891  accounting_indicatorBounds_links(linksModelToCalc,yearsToCalc,indicator,pc_accounting_indicatorBounds_links)
1892      = sum((linksData)$sameas(linksModelToCalc,linksData),
1893              accounting_indicatorBounds_linksIn(linksData,yearsToCalc,indicator,pc_accounting_indicatorBounds_links));
1894   
1895  accounting_indicatorBounds_links(linksModelToCalc,yearsToCalc,indicator,pc_accounting_indicatorBounds_links)
1896      = sum((linksData)$links_aggregate(linksModelToCalc,linksData),
1897              accounting_indicatorBounds_linksIn(linksData,yearsToCalc,indicator,pc_accounting_indicatorBounds_links));
1898   
1899  parameter accounting_indicatorBounds(accNodesModel,accYears,indicator,pc_accounting_indicatorBounds);
1900  accounting_indicatorBounds(accNodesModel,accYears,indicator,pc_accounting_indicatorBounds)
1901      = sum (accNodesData$sameas(accNodesModel,accNodesData),
1902          accounting_indicatorBoundsIn(accNodesData,accYears,indicator,pc_accounting_indicatorBounds));
1903   
1904  accounting_indicatorBounds(accNodesModel,accYears,indicator,pc_accounting_indicatorBounds)
1905      $(sum (nodesModel$sameas(accNodesModel,nodesModel), 1) > 0)
1906      = sum ((accNodesData,nodesData,nodesModel)
1907              $(aggregateNodesModel(nodesData,nodesModel) and sameas(accNodesModel,nodesModel) and sameas(accNodesData,nodesData)),
1908          accounting_indicatorBoundsIn(accNodesData,accYears,indicator,pc_accounting_indicatorBounds));
1909   
1910  set accounting_perIndicatorNonzero(indicator,indicator_a,accNodesData,accYears);
1911  accounting_perIndicatorNonzero(indicator,indicator_a,accNodesData,accYears)
1912      $sum(pc_accounting_perIndicator$accounting_perIndicatorIn(indicator,indicator_a,accNodesData,accYears,pc_accounting_perIndicator), 1)
1913      = yes;
1914   
1915  parameter accounting_perIndicatorAgg(indicator,indicator_a,nodesModel,accYears,pc_accounting_perIndicator);
1916  accounting_perIndicatorAgg(indicator,indicator_a,nodesModel,accYears,pc_accounting_perIndicator)
1917      $sum((nodesData,accnodesData)
1918              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1919                  and accounting_perIndicatorNonzero(indicator,indicator_a,accnodesData,accYears)), 1)
1920      = sum((nodesData,accnodesData)
1921              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1922                  and accounting_perIndicatorNonzero(indicator,indicator_a,accnodesData,accYears)),
1923          accounting_perIndicatorIn(indicator,indicator_a,accnodesData,accYears,pc_accounting_perIndicator))
1924      / sum((nodesData,accnodesData)
1925              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1926                  and accounting_perIndicatorNonzero(indicator,indicator_a,accnodesData,accYears)),
1927          1);
1928   
1929  parameter accounting_perIndicator(indicator,indicator_a,accNodesModel,accYears,pc_accounting_perIndicator);
1930   
1931  loop(accNodes,
1932  accounting_perIndicator(indicator,indicator_a,accNodesModel,accYears,pc_accounting_perIndicator)
1933      $(sum(accNodesData$(sameas(accNodes,accNodesData)
1934              and accounting_perIndicatorIn(indicator,indicator_a,accNodesData,"horizon",pc_accounting_perIndicator)), 1)
1935          and map_accNodes(accNodesModel,accNodes)
1936              )
1937      = sum(accNodesData$(sameas(accNodes,accNodesData)),
1938              accounting_perIndicatorIn(indicator,indicator_a,accNodesData,"horizon",pc_accounting_perIndicator));
1939   
1940  accounting_perIndicator(indicator,indicator_a,accNodesModel,accYears,pc_accounting_perIndicator)
1941      $(sum(accNodesData$(sameas(accNodes,accNodesData)
1942              and accounting_perIndicatorIn(indicator,indicator_a,accNodesData,accYears,pc_accounting_perIndicator)), 1)
1943          and map_accNodes(accNodesModel,accNodes)
1944          and not sameas(accYears, "horizon"))
1945      = sum(accNodesData$(sameas(accNodes,accNodesData)),
1946              accounting_perIndicatorIn(indicator,indicator_a,accNodesData,accYears,pc_accounting_perIndicator));
1947  );
1948   
1949  accounting_perIndicator(indicator,indicator_a,accNodesModel,accYears,pc_accounting_perIndicator)
1950      $sum(nodesModel$(accounting_perIndicatorAgg(indicator,indicator_a,nodesModel,"horizon",pc_accounting_perIndicator)
1951          and sameas(accNodesModel,nodesModel)), 1)
1952      = sum(nodesModel$sameas(accNodesModel,nodesModel),
1953          accounting_perIndicatorAgg(indicator,indicator_a,nodesModel,"horizon",pc_accounting_perIndicator));
1954   
1955  accounting_perIndicator(indicator,indicator_a,accNodesModel,accYears,pc_accounting_perIndicator)
1956      $sum(nodesModel$(accounting_perIndicatorAgg(indicator,indicator_a,nodesModel,accYears,pc_accounting_perIndicator)
1957          and sameas(accNodesModel,nodesModel) and not sameas(accYears, "horizon")), 1)
1958      = sum(nodesModel$sameas(accNodesModel,nodesModel),
1959          accounting_perIndicatorAgg(indicator,indicator_a,nodesModel,accYears,pc_accounting_perIndicator));
1960   
1961   
1962  * Make sure all required indicators end up in the model
1963  set activeIndicators(accNodesModel,accYears,indicator);
1964  activeIndicators(accNodesModel,accYears,indicator)
1965     $((accounting_indicatorBounds(accNodesModel,accYears,indicator,"obj") <> 0
1968        or accounting_indicatorBounds(accNodesModel,accYears,indicator,"useFixed") <> 0
1969        or accounting_indicatorBounds(accNodesModel,accYears,indicator,"useLower") <> 0
1970        or accounting_indicatorBounds(accNodesModel,accYears,indicator,"useUpper") <> 0 )
1971          and not accounting_indicatorBounds(accNodesModel,accYears,indicator,"isVariable"))
1972     = yes;
1973   
1974  set activeIndicators_links(linksModel,years,indicator);
1975  activeIndicators_links(linksModelToCalc,yearsToCalc,indicator)
1976     $(accounting_indicatorBounds_links(linksModelToCalc,yearsToCalc,indicator,"useFixed") <> 0
1977        or accounting_indicatorBounds_links(linksModelToCalc,yearsToCalc,indicator,"useLower") <> 0
1978        or accounting_indicatorBounds_links(linksModelToCalc,yearsToCalc,indicator,"useUpper") <> 0 )
1979     = yes;
1980   
1981  set variableIndicators(accNodesModel,accYears,indicator);
1982  variableIndicators(accNodesModel,accYears,indicator)
1983     $(accounting_indicatorBounds(accNodesModel,accYears,indicator,"obj") = 0
1984        and accounting_indicatorBounds(accNodesModel,accYears,indicator,"isVariable"))
1985     = yes;
1986   
1987  * Calculate length of years and discount rates per indicator
1988  parameter yearFactor(accNodesModel,accYears,indicator,accYears);
1989  yearFactor(accNodesModel,accYears,indicator,accYears_a)
1990      $(map_accYears(accYears_a,accYears)
1991          and sum(yearsToCalc$(sameas(yearsToCalc,accYears_a)), 1))
1992      = 1;
1993   
1994  yearFactor(accNodesModel,accYears,indicator,accYears_a)
1995      $(map_accYears(accYears_a,accYears)
1996          and sum(yearsToCalc$(sameas(yearsToCalc,accYears_a)), 1)
1997          and accounting_indicatorBounds(accNodesModel,accYears,indicator,"integral"))
1998      = sum(yearsToCalc$sameas(accYears_a,yearsToCalc), yearsLen(yearsToCalc));
1999   
2000  yearFactor(accNodesModel,accYears,indicator,accYears_a)
2001      $(map_accYears(accYears_a,accYears)
2002          and sum(yearsToCalc$(sameas(yearsToCalc,accYears_a)), 1)
2003          and accounting_indicatorBounds(accNodesModel,accYears,indicator,"integral")
2004          and accounting_indicatorBounds(accNodesModel,accYears,indicator,"endyear")
2005          and yearFactor(accNodesModel,accYears,indicator,accYears_a) = inf)
2006      = accounting_indicatorBounds(accNodesModel,accYears,indicator,"endyear");
2007   
2008  yearFactor(accNodesModel,accYears,indicator,accYears_a)
2009      $(map_accYears(accYears_a,accYears)
2010          and sum(yearsToCalc$(sameas(yearsToCalc,accYears_a)), 1)
2011          and accounting_indicatorBounds(accNodesModel,accYears,indicator,"integral")
2012          and accounting_indicatorBounds(accNodesModel,accYears,indicator,"discount"))
2013      = yearFactor(accNodesModel,accYears,indicator,accYears_a)
2014          * (1 - accounting_indicatorBounds(accNodesModel,accYears,indicator,"discount"))
2015                  ** (accYears_a.val - smin(yearsToCalc, yearsToCalc.val));
2016   
2017   
2018  * ==== calculate compound indicators for the optimization ====
2019  scalar compIndicators_pre;
2020  scalar compIndicators_post;
2021   
2022  parameter compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a);
2023  compoundIndicators(accNodesModel,accYears,indicator,accNodesModel,accYears,indicator)
2024      $activeIndicators(accNodesModel,accYears,indicator) = 1;
2025   
2026  set compoundIndicators_act(accNodesModel,accYears,indicator);
2027  option compoundIndicators_act < compoundIndicators;
2028   
2029  parameter compoundIndicatorsExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa);
2030  parameter compoundIndicatorsExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a);
2031  compoundIndicatorsExt(accNodesModel,accYears,indicator,accNodesModel,accYears,indicator,accNodesModel,accYears,indicator)
2032      $compoundIndicators_act(accNodesModel,accYears,indicator) = 1;
2033   
2034  compIndicators_pre = 0;
2035  compIndicators_post = 1;
2036   
2037  option sparseval = 1;
2038  while(compIndicators_pre < compIndicators_post,
2039      compIndicators_pre = sum((accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa)
2040          $compoundIndicatorsExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa), 1);
2041   
2042      compoundIndicatorsExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa)
2043          $(compoundIndicators_act(accNodesModel,accYears,indicator)
2044              and compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
2045              and not accounting_indicatorBounds(accNodesModel_a,accYears_a,indicator_a,"isVariable")
2046              and map_accNodes(accNodesModel_aa,accNodesModel_a)
2047              and map_accYears(accYears_aa,accYears_a))
2048          = compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
2049              * accounting_perIndicator(indicator_a,indicator_aa,accNodesModel_aa,accYears_aa,"perIndicator");
2050   
2051      option compoundIndicatorsExt_r < compoundIndicatorsExt;
2052   
2053      compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa)
2054          $(compoundIndicators_act(accNodesModel,accYears,indicator)
2055              and sum((accNodesModel_a,accYears_a,indicator_a)
2056                      $compoundIndicatorsExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a), 1) = 1)
2057          = sum((accNodesModel_a,accYears_a,indicator_a)
2058                  $(compoundIndicatorsExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a)),
2059              compoundIndicatorsExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a));
2060   
2061      compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa)
2062          $(compoundIndicators_act(accNodesModel,accYears,indicator)
2063              and sum((accNodesModel_a,accYears_a,indicator_a)
2064                      $compoundIndicatorsExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a), 1) > 1)
2065          = sum((accNodesModel_a,accYears_a,indicator_a)
2066                  $(compoundIndicatorsExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a)
2067                      and not (sameas(accNodesModel, accNodesModel_a) and sameas(accYears, accYears_a) and sameas(indicator, indicator_a))),
2068              compoundIndicatorsExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a))
2069          / sum((accNodesModel_a,accYears_a,indicator_a)
2070                  $(compoundIndicatorsExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a)
2071                      and not (sameas(accNodesModel, accNodesModel_a) and sameas(accYears, accYears_a) and sameas(indicator, indicator_a))), 1);
2072   
2073      option compoundIndicators_act < compoundIndicators;
2074      compIndicators_post = sum((accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa)
2075          $compoundIndicatorsExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa), 1);
2076  );
2077  option sparseval = 0;
2078   
2079  * map to sub-years and sub-nodes
2080  compoundIndicatorsExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_a)
2081      $(compoundIndicators_act(accNodesModel,accYears,indicator)
2082          and compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
2083          and map_accYears(accYears_aa,accYears_a)
2084          and map_accNodes(accNodesModel_aa,accNodesModel_a))
2085      = compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
2086          * yearFactor(accNodesModel,accYears,indicator,accYears_aa);
2087   
2088  * Remove all accounting regions and accounting years
2089  compoundIndicatorsExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa)
2090      $(compoundIndicatorsExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa)
2091          and not accounting_indicatorBounds(accNodesModel_aa,accYears_aa,indicator_aa,"isVariable")
2092          and sum(accNodes$(sameas(accNodes,accNodesModel_aa)), 1)
2093              or sameas("horizon",accYears_aa))
2094      = 0;
2095   
2096  * Map from extended parameter to final parameter
2097  option compoundIndicatorsExt_r < compoundIndicatorsExt;
2098  compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa)
2099      $(compoundIndicators_act(accNodesModel,accYears,indicator)
2100          and sum((accNodesModel_a,accYears_a,indicator_a)
2101                  $compoundIndicatorsExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a), 1) = 1)
2102      = sum((accNodesModel_a,accYears_a,indicator_a)
2103              $(compoundIndicatorsExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a)),
2104          compoundIndicatorsExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a));
2105   
2106  compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa)
2107      $(compoundIndicators_act(accNodesModel,accYears,indicator)
2108          and sum((accNodesModel_a,accYears_a,indicator_a)
2109                  $compoundIndicatorsExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a), 1) > 1)
2110      = sum((accNodesModel_a,accYears_a,indicator_a)
2111              $(compoundIndicatorsExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a)
2112                  and not (sameas(accNodesModel, accNodesModel_a) and sameas(accYears, accYears_a) and sameas(indicator, indicator_a))),
2113          compoundIndicatorsExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a))
2114      / sum((accNodesModel_a,accYears_a,indicator_a)
2115              $(compoundIndicatorsExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a)
2116                  and not (sameas(accNodesModel, accNodesModel_a) and sameas(accYears, accYears_a) and sameas(indicator, indicator_a))), 1);
2117   
2118  * Remove all accounting regions and accounting years
2119  compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
2120      $(compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
2121          and not accounting_indicatorBounds(accNodesModel_a,accYears_a,indicator_a,"isVariable")
2122          and (sum(accNodes$(sameas(accNodes,accNodesModel_a)), 1)
2123              or sameas("horizon",accYears_a)))
2124      = 0;
2125   
2126  * Remove all slack indicators except the ones declared in indicatorBounds
2127  compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
2128      $(compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
2129          and sum((accNodesModel_aa,accYears_aa)$accounting_indicatorBounds(accNodesModel_aa,accYears_aa,indicator_a,"isVariable"), 1)
2130          and not accounting_indicatorBounds(accNodesModel_a,accYears_a,indicator_a,"isVariable"))
2131      = 0;
2132   
2133  * ==== compound indicators for the post calculation ====
2134  parameter compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a);
2135  compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel,accYears,indicator)
2136      $(sum(nodesModelToCalc$map_accNodesToCalc(accNodesModel,nodesModelToCalc), 1)
2137          and sum(yearsToCalc$map_accYearsToCalc(accYears,yearsToCalc), 1)) = 1;
2138   
2139  set compoundIndicatorsFull_act(accNodesModel,accYears,indicator);
2140  option compoundIndicatorsFull_act < compoundIndicatorsFull;
2141   
2142  parameter compoundIndicatorsFullExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa);
2143  parameter compoundIndicatorsFullExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a);
2144  compoundIndicatorsFullExt(accNodesModel,accYears,indicator,accNodesModel,accYears,indicator,accNodesModel,accYears,indicator) = 1;
2145   
2146  compIndicators_pre = 0;
2147  compIndicators_post = 1;
2148   
2149  option sparseval = 1;
2150  while(compIndicators_pre < compIndicators_post,
2151      compIndicators_pre = sum((accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa)
2152          $compoundIndicatorsFullExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa), 1);
2153   
2154      compoundIndicatorsFullExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa)
2155          $(compoundIndicatorsFull_act(accNodesModel,accYears,indicator)
2156              and compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
2157              and not accounting_indicatorBounds(accNodesModel_a,accYears_a,indicator_a,"isVariable")
2158              and map_accNodes(accNodesModel_aa,accNodesModel_a)
2159              and map_accYears(accYears_aa,accYears_a))
2160          = compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
2161              * accounting_perIndicator(indicator_a,indicator_aa,accNodesModel_aa,accYears_aa,"perIndicator");
2162   
2163      option compoundIndicatorsFullExt_r < compoundIndicatorsFullExt;
2164   
2165      compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa)
2166          $(compoundIndicatorsFull_act(accNodesModel,accYears,indicator)
2167              and sum((accNodesModel_a,accYears_a,indicator_a)
2168                      $compoundIndicatorsFullExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a), 1) = 1)
2169          = sum((accNodesModel_a,accYears_a,indicator_a)
2170                  $(compoundIndicatorsFullExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a)),
2171              compoundIndicatorsFullExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a));
2172   
2173      compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa)
2174          $(compoundIndicatorsFull_act(accNodesModel,accYears,indicator)
2175              and sum((accNodesModel_a,accYears_a,indicator_a)
2176                      $compoundIndicatorsFullExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a), 1) > 1)
2177          = sum((accNodesModel_a,accYears_a,indicator_a)
2178                  $(compoundIndicatorsFullExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a)
2179                      and not (sameas(accNodesModel, accNodesModel_a) and sameas(accYears, accYears_a) and sameas(indicator, indicator_a))),
2180              compoundIndicatorsFullExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a))
2181          / sum((accNodesModel_a,accYears_a,indicator_a)
2182                  $(compoundIndicatorsFullExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a)
2183                      and not (sameas(accNodesModel, accNodesModel_a) and sameas(accYears, accYears_a) and sameas(indicator, indicator_a))), 1);
2184   
2185      option compoundIndicatorsFull_act < compoundIndicatorsFull;
2186      compIndicators_post = sum((accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa)
2187          $compoundIndicatorsFullExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa), 1);
2188  );
2189  option sparseval = 0;
2190   
2191  * map to sub-years and sub-nodes
2192  compoundIndicatorsFullExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_a)
2193      $(compoundIndicatorsFull_act(accNodesModel,accYears,indicator)
2194          and compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
2195          and map_accYears(accYears_aa,accYears_a)
2196          and map_accNodes(accNodesModel_aa,accNodesModel_a))
2197      = compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
2198          * yearFactor(accNodesModel,accYears,indicator,accYears_aa);
2199   
2200  * Remove all accounting regions and accounting years
2201  compoundIndicatorsFullExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa)
2202      $(compoundIndicatorsFullExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa)
2203          and not accounting_indicatorBounds(accNodesModel_aa,accYears_aa,indicator_aa,"isVariable")
2204          and sum(accNodes$(sameas(accNodes,accNodesModel_aa)), 1)
2205              or sameas("horizon",accYears_aa))
2206      = 0;
2207   
2208  * Map from extended parameter to final parameter
2209  option compoundIndicatorsFullExt_r < compoundIndicatorsFullExt;
2210  compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa)
2211      $(compoundIndicatorsFull_act(accNodesModel,accYears,indicator)
2212          and sum((accNodesModel_a,accYears_a,indicator_a)
2213                  $compoundIndicatorsFullExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a), 1) = 1)
2214      = sum((accNodesModel_a,accYears_a,indicator_a)
2215              $(compoundIndicatorsFullExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a)),
2216          compoundIndicatorsFullExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a));
2217   
2218  compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa)
2219      $(compoundIndicatorsFull_act(accNodesModel,accYears,indicator)
2220          and sum((accNodesModel_a,accYears_a,indicator_a)
2221                  $compoundIndicatorsFullExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a), 1) > 1)
2222      = sum((accNodesModel_a,accYears_a,indicator_a)
2223              $(compoundIndicatorsFullExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a)
2224                  and not (sameas(accNodesModel, accNodesModel_a) and sameas(accYears, accYears_a) and sameas(indicator, indicator_a))),
2225          compoundIndicatorsFullExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a))
2226      / sum((accNodesModel_a,accYears_a,indicator_a)
2227              $(compoundIndicatorsFullExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a)
2228                  and not (sameas(accNodesModel, accNodesModel_a) and sameas(accYears, accYears_a) and sameas(indicator, indicator_a))), 1);
2229   
2230  * Remove all accounting regions and accounting years
2231  compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
2232      $(compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
2233          and not accounting_indicatorBounds(accNodesModel_a,accYears_a,indicator_a,"isVariable")
2234          and (sum(accNodes$(sameas(accNodes,accNodesModel_a)), 1)
2235              or sameas("horizon",accYears_a)))
2236      = 0;
2237   
2238  * Remove all slack indicators except the ones declared in indicatorBounds
2239  compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
2240      $(compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
2241          and sum((accNodesModel_aa,accYears_aa)$accounting_indicatorBounds(accNodesModel_aa,accYears_aa,indicator_a,"isVariable"), 1)
2242          and not accounting_indicatorBounds(accNodesModel_a,accYears_a,indicator_a,"isVariable"))
2243      = 0;
2244   
2245  * Check if the objective value and optimization sense is set correctly
2246  scalar opti_values, opti_sense;
2247  opti_values = sum((accNodesModel,accYears,indicator)$(accounting_indicatorBounds(accNodesModel,accYears,indicator,"obj") <> 0), 1);
2248  opti_sense = sum((accNodesModel,accYears,indicator), accounting_indicatorBounds(accNodesModel,accYears,indicator,"obj"));
2249  abort$(opti_values < 1)
2250      "Accounting: No indicator specified as objective value"
2251  abort$(opti_values > 1)
2252      "Accounting: Too many indicators specified as objective value"
2253  abort$(opti_sense <> -1 and opti_sense <> 1)
2254      "Accounting: Optimization sense has to be either -1 or 1"
INCLUDE    C:\Local\REMix\framework\remix\framework\model\source\accounting\annuities.gms
2256  * SPDX-FileCopyrightText: Copyright (c) 2023 German Aerospace Center (DLR)
2257  * SPDX-License-Identifier: BSD-3-Clause
2258   
2259  * Calculation of annuities
2260   
2261  abort$(sum((indicator,nodesModelToCalc,converter_techs,vintage)
2262          $(accounting_converterUnits(indicator,nodesModelToCalc,converter_techs,vintage,"useAnnuity") = 1
2263          and accounting_converterUnits(indicator,nodesModelToCalc,converter_techs,vintage,"amorTime") < 1), 1) > 0 )
2264      "Accounting: Some converter technologies use annuities but have no amortization time"
2265   
2266  parameter accounting_annuityFactor_converter(indicator,nodesModel,converter_techs,vintage);
2267  accounting_annuityFactor_converter(indicator,nodesModelToCalc,converter_techs,vintage)
2268      $accounting_converterUnits(indicator,nodesModelToCalc,converter_techs,vintage,"useAnnuity")
2269      =
2270      accounting_converterUnits(indicator,nodesModelToCalc,converter_techs,vintage,"interest")
2271          * (1 + accounting_converterUnits(indicator,nodesModelToCalc,converter_techs,vintage,"interest"))
2272          ** accounting_converterUnits(indicator,nodesModelToCalc,converter_techs,vintage,"amorTime")
2273      / ((1 + accounting_converterUnits(indicator,nodesModelToCalc,converter_techs,vintage,"interest"))
2274          ** accounting_converterUnits(indicator,nodesModelToCalc,converter_techs,vintage,"amorTime") - 1);
2275   
2276   
2277  abort$(sum((indicator,nodesModelToCalc,storage_techs,vintage)
2278          $(accounting_storageUnits(indicator,nodesModelToCalc,storage_techs,vintage,"useAnnuity") = 1
2279          and accounting_storageUnits(indicator,nodesModelToCalc,storage_techs,vintage,"amorTime") < 1), 1) > 0 )
2280      "Accounting: Some storage technologies use annuities but have no amortization time"
2281   
2282  parameter accounting_annuityFactor_storage(indicator,nodesModel,storage_techs,vintage);
2283  accounting_annuityFactor_storage(indicator,nodesModelToCalc,storage_techs,vintage)
2284      $accounting_storageUnits(indicator,nodesModelToCalc,storage_techs,vintage,"useAnnuity")
2285      =
2286      accounting_storageUnits(indicator,nodesModelToCalc,storage_techs,vintage,"interest")
2287          * (1 + accounting_storageUnits(indicator,nodesModelToCalc,storage_techs,vintage,"interest"))
2288          ** accounting_storageUnits(indicator,nodesModelToCalc,storage_techs,vintage,"amorTime")
2289      / ((1 + accounting_storageUnits(indicator,nodesModelToCalc,storage_techs,vintage,"interest"))
2290          ** accounting_storageUnits(indicator,nodesModelToCalc,storage_techs,vintage,"amorTime") - 1);
2291   
2292   
2293  abort$(sum((indicator,linksModelToCalc,transfer_techs,vintage)
2294          $(accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"useAnnuity") = 1
2295          and accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"amorTime") < 1), 1) > 0 )
2296      "Accounting: Some transfer technologies use annuities but have no amortization time"
2297   
2298  parameter accounting_annuityFactor_transferLink(indicator,linksModel,transfer_techs,vintage);
2299  accounting_annuityFactor_transferLink(indicator,linksModelToCalc,transfer_techs,vintage)
2300      $accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"useAnnuity")
2301      =
2302      accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"interest")
2303          * (1 + accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"interest"))
2304          ** accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"amorTime")
2305      / ((1 + accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"interest"))
2306          ** accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"amorTime") - 1);
2307   
2308   
2309   
2310  abort$(sum((indicator,linksModelToCalc,transfer_techs,vintage,link_types)
2311          $(accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"useAnnuity") = 1
2312          and accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"amorTime") < 1), 1) > 0 )
2313      "Accounting: Some transfer-per-length technologies use annuities but have no amortization time"
2314   
2315  parameter accounting_annuityFactor_transferDistance(indicator,linksModel,transfer_techs,vintage,link_types);
2316  accounting_annuityFactor_transferDistance(indicator,linksModelToCalc,transfer_techs,vintage,link_types) = 1;
2317   
2318  accounting_annuityFactor_transferDistance(indicator,linksModelToCalc,transfer_techs,vintage,link_types)
2319      $accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"useAnnuity")
2320      =
2321      accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"interest")
2322          * (1 + accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"interest"))
2323          ** accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"amorTime")
2324      / ((1 + accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"interest"))
2325          ** accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"amorTime") - 1);
2326   
INCLUDE    C:\Local\REMix\framework\remix\framework\model\source\methods\mga_pre.gms
2328  * SPDX-FileCopyrightText: Copyright (c) 2023 German Aerospace Center (DLR)
2329  * SPDX-License-Identifier: BSD-3-Clause
2330   
INCLUDE    C:\Local\REMix\framework\remix\framework\model\source\methods\pareto_pre.gms
2334  * SPDX-FileCopyrightText: Copyright (c) 2023 German Aerospace Center (DLR)
2335  * SPDX-License-Identifier: BSD-3-Clause
2336   
INCLUDE    C:\Local\REMix\framework\remix\framework\model\source\postcalc\declaration.gms
2340  * SPDX-FileCopyrightText: Copyright (c) 2023 German Aerospace Center (DLR)
2341  * SPDX-License-Identifier: BSD-3-Clause
2342  * // # Output data
2343  * // This is the reference data model of the REMix output.
2344  * //
2345  * // ## Standard output
2348   
2355   
2357   
2358  set capType / "build", "decom", "total", "lowerLimit", "upperLimit", "total_degraded" /;
2359  set balanceType / "netto", "brutto", "positive", "negative", "flh" /;
2360  set profileType / "upper", "fixed", "lower" /;
2361  set r2a_has_converter_cost(indicator,nodesModel,years,techs,vintage,commodity);
2362   
2363  ** // OUTPUT: indicator_accounting | OEO_00000350:quantity value
2364  * // ### indicator_accounting
2365  * // Title: Accounting indicators Post-calculation
2366  parameter indicator_accounting(accNodesModel,accYears,indicator) "Post-calculation aggregated indicator accounting" ;
2367  * //
2368  ** // OUTPUT: indicator_accounting_ref | OEO_00000350:quantity value
2369  * // ### indicator_accounting_ref
2370  * // Title: Accounting indicators reference
2371  parameter indicator_accounting_ref(accNodesModel,accYears,indicator) "Indicator accounting optimization levels" ;
2372  * //
2373  ** // OUTPUT: indicator_accounting_comp | OEO_00000350:quantity value
2374  * // ### indicator_accounting_comp
2375  * // Title: Accounting indicators composition
2376  parameter indicator_accounting_comp(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a) "Indicator accounting with other indicator composition" ;
2377  * //
2378  ** // OUTPUT: indicator_accounting_detailed | OEO_00000350:quantity value
2379  * // ### indicator_accounting_detailed
2380  * // Title: Accounting indicators detail
2381  parameter indicator_accounting_detailed(indicator,nodesModel,years,techs) "Indicator accounting with technological composition" ;
2382  * //
2383  ** // OUTPUT: indicator_accounting_links | OEO_00000350:quantity value
2384  * // ### indicator_accounting_links
2385  * // Title: Accounting indicators per transfer link
2386  parameter indicator_accounting_links(indicator,nodesModel,nodesModel_a,linksModel,years,techs) "Indicator accounting of transfer technologies" ;
2387  * //
2388  parameter converter_ratedInput(techs,vintage,commodity);
2389  parameter converter_ratedOutput(techs,vintage,commodity);
2390  parameter converter_ratedOutput_min(nodesModel,years,techs,commodity);
2391  parameter converter_ratedOutput_max(nodesModel,years,techs,commodity);
2392   
2393  ** // OUTPUT: converter_caps | OEO_00010257:power capacity
2394  * // ### converter_caps
2395  * // Title: Coverter capacities post-calculation
2396  parameter converter_caps(accNodesModel,accYears,techs,commodity,capType) "Converter capacities, aggregated total" ;
2397  * //
2398  parameter converter_caps_ext(accNodesModel,nodesModel,accYears,years,techs,vintage,commodity,capType);
2399   
2400  ** // OUTPUT: converter_units | OEO_00000350:quantity value
2401  * // ### converter_units
2402  * // Title: Coverter units post-calculation
2403  parameter converter_units(accNodesModel,accYears,techs,vintage,capType) "Converter units" ;
2404  * //
2405  parameter converter_units_ext(accNodesModel,nodesModel,accYears,years,techs,vintage,capType);
2406   
2407  parameter max_transfer_coefficient(techs,commodity);
2408  parameter min_transfer_coefficient(techs,commodity);
2409  ** // OUTPUT: transfer_links | OEO_00000350:quantity value
2410  * // ### transfer_links
2411  * // Title: Transfer post-calculation
2412  parameter transfer_links(linksModel,years,techs,vintage,capType) "Transfer links" ;
2413  * //
2414  ** // OUTPUT: transfer_caps | OEO_00010257:power capacity
2415  * // ### transfer_caps
2416  * // Title: Transfer capacities post-calculation
2417  parameter transfer_caps(nodesModel_start,nodesModel_end,linksModel,years,techs,commodity,capType) "Transfer capacities, aggregated total" ;
2418  * //
2419  ** // OUTPUT: transfer_flows | OEO_00050019:energy amount value
2420  * // ### transfer_flows
2421  * // Title: Transfer hourly flows
2422  parameter transfer_flows(timeModel,nodesModel_start,nodesModel_end,linksModel,years,techs,commodity) "Hourly link flows" ;
2423  * //
2424  ** // OUTPUT: transfer_flows_annual | OEO_00050019:energy amount value
2425  * // ### transfer_flows_annual
2426  * // Title: Transfer annual flows
2427  parameter transfer_flows_annual(nodesModel_start,nodesModel_end,linksModel,years,techs,commodity,balanceType) "Annual link flows" ;
2428  * //
2429  ** // OUTPUT: transfer_losses | OEO_00050019:energy amount value
2430  * // ### transfer_losses
2431  * // Title: Transfer hourly losses
2432  parameter transfer_losses(timeModel,nodesModel_start,nodesModel_end,linksModel,years,techs,commodity) "Hourly link losses" ;
2433  * //
2434  ** // OUTPUT: transfer_losses_annual | OEO_00050019:energy amount value
2435  * // ### transfer_losses_annual
2436  * // Title: Transfer annual losses
2437  parameter transfer_losses_annual(nodesModel_start,nodesModel_end,linksModel,years,techs,commodity,balanceType) "Annual link losses" ;
2438  * //
2439  parameter storage_size_max(nodesModel,years,techs,commodity);
2440  parameter storage_size_min(nodesModel,years,techs,commodity);
2441  ** // OUTPUT: storage_units |  OEO_00000350:quantity value
2442  * // ### storage_units
2443  * // Title: Storage units post-calculation
2444  parameter storage_units(accNodesModel,accYears,techs,vintage,capType) "Storage units" ;
2445  * //
2446  parameter storage_units_ext(accNodesModel,nodesModel,accYears,years,techs,vintage,capType);
2447  ** // OUTPUT: storage_caps | OEO_00230000:energy storage capacity
2448  * // ### storage_caps
2449  * // Title: Storage capacities post-calculation
2450  parameter storage_caps(accNodesModel,accYears,techs,commodity,capType) "Storage capacities, aggregated total" ;
2451  * //
2452  parameter storage_caps_ext(accNodesModel,nodesModel,accYears,years,techs,vintage,commodity,capType);
2453  ** // OUTPUT: storage_level_out | OEO_00330012:energy storage content
2454  * // ### storage_level_out
2455  * // Title: Storage level
2456  parameter storage_level_out(timeModel,accNodesModel,accYears,techs,commodity) "Storage level per time step" ;
2457  * //
2458  parameter storage_level_out_ext(timeModel,accNodesModel,nodesModel,accYears,years,techs,vintage,commodity);
2459  ** // OUTPUT: storage_flows | OEO_00050019:energy amount value
2460  * // ### storage_flows
2461  * // Title: Storage hourly flows
2462  parameter storage_flows(timeModel,accNodesModel,accYears,techs,commodity) "Storage flows per time step" ;
2463  * //
2464  parameter storage_flows_ext(timeModel,accNodesModel,nodesModel,accYears,years,techs,vintage,commodity);
2465  ** // OUTPUT: storage_flows_annual | OEO_00050019:energy amount value
2466  * // ### storage_flows_annual
2467  * // Title: Storage annual flows
2468  parameter storage_flows_annual(accNodesModel,accYears,techs,commodity,balanceType) "Aggregated storage flows" ;
2469  * //
2470  ** // OUTPUT: storage_losses_out | OEO_00050019:energy amount value
2471  * // ### storage_losses_out
2472  * // Title: Storage hourly losses
2473  parameter storage_losses_out(timeModel,accNodesModel,accYears,techs,commodity) "Storage losses per time step" ;
2474  * //
2475  ** // OUTPUT: storage_losses_annual | OEO_00050019:energy amount value
2476  * // ### storage_losses_annual
2477  * // Title: Storage annual losses
2478  parameter storage_losses_annual(accNodesModel,accYears,techs,commodity,balanceType) "Aggregated storage losses" ;
2479  * //
2480  ** // OUTPUT: commodity_balance | OEO_00000350:quantity value
2481  * // ### commodity_balance
2482  * // Title: Hourly commodity balance
2483  parameter commodity_balance(timeModel,accNodesModel,accYears,techs,commodity) "Commodity balances per model hour" ;
2484  parameter commodity_balance_ext(timeModel,accNodesModel,nodesModel,accYears,years,techs,vintage,commodity);
2485  * //
2486  ** // OUTPUT: commodity_balance_annual | OEO_00000350:quantity value
2487  * // ### commodity_balance_annual
2488  * // Title: Annual commodity balance
2489  parameter commodity_balance_annual(accNodesModel,accYears,techs,commodity,balanceType) "Aggregated commodity balances" ;
2490  * //
2491  ** // OUTPUT: marginals_sourcesink_profile | OEO_00040008:marginal cost
2492  * // ### marginals_sourcesink_profile
2493  * // Title: Source-sink marginals
2494  parameter marginals_sourcesink_profile(timeModel,nodesModel,years,techs,commodity) "Source and sink flow marginal values" ;
2495  * //
2496  ** // OUTPUT: marginals_balance | OEO_00040008:marginal cost
2497  * // ### marginals_balance
2498  * // Title: Nodel balance marginals
2499  parameter marginals_balance(timeModel,nodesModel,years,commodity) "Nodal balance marginal values" ;
2500  * //
2501  ** // OUTPUT: marginals_sourcesink_sum | OEO_00040008:marginal cost
2502  * // ### marginals_sourcesink_sum
2503  * // Title: Source-sink annual marginals
2504  parameter marginals_sourcesink_sum(nodesModel,years,techs,commodity) "Annual source and sink flow marginal values" ;
2505  * //
2506  ** // OUTPUT: marginals_indicator_bounds | OEO_00040008:marginal cost
2507  * // ### marginals_indicator_bounds
2508  * // Title: Indicator bounds marginals
2509  parameter marginals_indicator_bounds(accNodesModel,accYears,indicator) "Accounting indicator marginals" ;
2510  * //
2511  * // ## REMix-AMIRIS interface output
2512  * //
2513  ** // OUTPUT: r2a_annuity_cost_converter | OEO_00040009:cost
2514  * // ### r2a_annuity_cost_converter
2515  * // Title: Converter annuity cost
2516  parameter r2a_annuity_cost_converter(indicator,accNodesModel,accYears,techs,vintage,commodity) "Annuity cost of converters" ;
2517  * //
2518  ** // OUTPUT: r2a_spec_cost_converter | OEO_00040009:cost
2519  * // ### r2a_spec_cost_converter
2520  * // Title: Converter specific cost
2521  parameter r2a_spec_cost_converter(indicator,accNodesModel,accYears,techs,vintage,commodity) "Specific cost of converters" ;
2522  * //
2523  ** // OUTPUT: r2a_spec_cost_fuel | OEO_00040009:cost
2524  * // ### r2a_spec_cost_fuel
2525  * // Title: Commodity specific cost
2526  parameter r2a_spec_cost_fuel(indicator,accNodesModel,accYears,techs,commodity) "Specific cost of commodities, used particularly for fuels" ;
2527  * //
2528  ** // OUTPUT: r2a_spec_cost_indicator | OEO_00040009:cost
2529  * // ### r2a_spec_cost_indicator
2530  * // Title: Indicator specific cost
2531  parameter r2a_spec_cost_indicator(indicator,indicator_a,accNodesModel,accYears) "Specific indicator cost" ;
2532  * //
2533  ** // OUTPUT: r2a_converter_efficiencies | OEO_00140050:efficiency value
2534  * // ### r2a_converter_efficiencies
2535  * // Title: Indicator specific cost
2536  parameter r2a_converter_efficiencies(techs,vintage,activity,commodity,commodity_a) "Converter-specific efficiency" ;
2537  * //
2538  ** // OUTPUT: r2a_converter_avail_factor | OEO_00000350:quantity value
2539  * // ### r2a_converter_avail_factor
2540  * // Title: Converter availability factor
2541  parameter r2a_converter_avail_factor(accNodesModel,accYears,techs,vintage) "Availability factor of converter technologies" ;
2542  parameter r2a_converter_avail_profile(timeModel,accNodesModel,accYears,techs,commodity,profileType) "Availability of converter technologies" ;
2543  parameter r2a_converter_avail_profile_ext(timeModel,accNodesModel,nodesModel,accYears,years,techs,vintage,commodity,profileType);
2544  * //
2545  ** // OUTPUT: r2a_storage_e2p | OEO_00000350:quantity value
2546  * // ### r2a_storage_e2p
2547  * // Title: E2P Storage
2548  parameter r2a_storage_e2p(accNodesModel,accYears,techs,vintage,commodity,capType) "Energy-to-power ratio" ;
2549  * //
2550  ** // OUTPUT: r2a_storage_selfdischarge | OEO_00000350:quantity value
2551  * // ### r2a_storage_selfdischarge
2552  * // Title: Storage self discharge rates
2553  parameter r2a_storage_selfdischarge(accNodesModel,accYears,techs,vintage,commodity);
2554   
INCLUDE    C:\Local\REMix\framework\remix\framework\model\source\loadgdx.gms
2558  * SPDX-FileCopyrightText: Copyright (c) 2023 German Aerospace Center (DLR)
2559  * SPDX-License-Identifier: BSD-3-Clause
2560   
2561  * ==== global settings ====
2563   
2565   
INCLUDE    C:\Local\REMix\framework\remix\framework\model\source\core\converter.gms
2567  * SPDX-FileCopyrightText: Copyright (c) 2023 German Aerospace Center (DLR)
2568  * SPDX-License-Identifier: BSD-3-Clause
2569   
2570  * // # core_converter
2571  * // The equations in this file describe the converters in the model.
2572   
2573  * // ## Advanced features
2574  * //
2575  * // You can find a more detailed explanation of the %curly_open%ref%curly_close%`MIP features <explanations_mip_label>`.
2576  ** // There is also a more detailed explanation on the modeling of outages at the %curly_open%ref%curly_close%`resilience section <explanations_resilience_label>`.
2577  * //
2578  * // In the following table you can see which modifications you have to make to your data to use the different features.
2579  * //
2580  * // | Feature | Modification |
2581  * // | ------ | ------ |
2582  * // | MIP expansion | The converter_tech_Parameter "mipUnits" has to be set to 1 in converter_techParam.dat for the technologies and years where descrete expansion is wanted |
2583  * // | Minimum up/downtime | The converter_tech_Parameters "minUptime" and/or "minDowntime" need to be set to the according amount of minimum time steps.Furthermore, the converter_tech_Parameter "mipDispatch" has to be set to 1 in converter_techParam.dat
2584  * // for the technologies and years where a minimum up- or downtime should be applied so that the units can be shut down. "mipUnits" will automatically be set to 1 |
2585  * // | Partial load | The converter_tech_Parameter "mipDispatch" has to be set to 1 in converter_techParam.dat for the technologies and years where you want to make use of the partial load feature. You also have to set a value to
2586  * // the converter_coefficient_parameters "minLoad" and/or "maxLoad" for the according technologies, vintages, activities and commodities. You can then for example set different "coefficient" values for each activity in converter_coefficient.dat |
2587  ** // | Outages | You have to include the converter_outageProfile.dat-file and while executing the model you have to set --method=resilience |
2588   
2589  * // ## %curly_open%ref%curly_close%`sets <remix_model_sets_label>`
2590  * //
2591  * // ### set_converter_techs.dat
2592  * // In this file all converter technologies are listed that can be used within your model.
2593  * //
2594  * // ### set_activities.dat
2595  * // All modes with which the converter technologies can be operated need to be added here.
2596  * // Examples: Charge (for the charging mode of a storage), Powergen (for the mode in which a converter produces electricity), Curtailment (for the mode in which a renewable power plant is shut down), …
2597  * // If you would like to use the partial load feature, all activity modes that should be available for this feature need to be defined here as well.
2598  * //
2599  * // ### set_commodities.dat
2600  * // In this file all commodities are listed that can be used and converted by the converter technologies.
2601  * // Examples: Electricity, Coal, Biomass, Hydrogen, …
2602   
2603  * // ## Variables
2604  * // {special_table_converter_variables}
8644   
8645  * ==== loading units from gdx file ====
8646   
8647  * Load units from gdx file
8649   
8650  * ==== calculation of mappings ====
8651   
8652  * Technologies with a lifeTime > 0 are available
8653  set converter_availTech(nodesModel,years,converter_techs,vintage);
8654  converter_availTech(nodesModel,years,converter_techs,vintage)
8655      $(vintage.val = smax(vintage_a$(vintage_a.val <= years.val
8656          and converter_techParam(converter_techs,vintage_a,"lifeTime") > 0), vintage_a.val)) = yes;
8657   
8658  * Technologies to optimize become unavailable if they have an unitsUpperLimit of 0
8659  converter_availTech(nodesModel,years,converter_techs,vintage)
8660      $(yearsToCalc(years) and converter_capacityParam(nodesModel,years,converter_techs,"unitsUpperLimit") = 0 ) = no;
8661   
8662  * Technologies already built become unavailable if they have an unitsBuild of 0
8663  converter_availTech(nodesModel,years,converter_techs,vintage)
8664      $( ( not yearsToCalc(years)) and converter_capacityParam(nodesModel,years,converter_techs,"unitsBuild") = 0 ) = no;
8665   
8666  * Used technologies are available technologies over their technical lifeTime
8667  set converter_usedTech(nodesModel,years,converter_techs,vintage);
8668  converter_usedTech(nodesModel,years,converter_techs,vintage)
8669      $(vintage.val <= years.val
8670          and years.val < smax(years_a$converter_availTech(nodesModel,years_a,converter_techs,vintage),
8671                                  years_a.val + converter_techParam(converter_techs,vintage,"lifeTime"))
8672          ) = yes;
8673   
8674  * Technologies have to be decomissioned in the interval of first avail + lifetime to last avail + lifetime
8675  set converter_decomTech(nodesModel,years,converter_techs,vintage);
8676  converter_decomTech(nodesModel,years,converter_techs,vintage)
8677    $(sum(years_a$converter_usedTech(nodesModel,years_a,converter_techs,vintage), 1)
8678      and sum(yearsToCalc
8679        $(sameas(years, yearsToCalc)
8680          and yearsToCalc.val >= smin(years_a$converter_availTech(nodesModel,years_a,converter_techs,vintage), years_a.val) + converter_techParam(converter_techs,vintage,"lifeTime")
8681          and yearsToCalc.val <= smax(years_a$converter_availTech(nodesModel,years_a,converter_techs,vintage), years_a.val) + converter_techParam(converter_techs,vintage,"lifeTime")), 1))
8682    = yes;
8683   
8684  * Extend the decom frame to the year after the last year of usedTech
8685  converter_decomTech(nodesModel,yearsToCalc,converter_techs,vintage)
8686    $(converter_usedTech(nodesModel,yearsToCalc-1,converter_techs,vintage)
8687      and converter_decomTech(nodesModel,yearsToCalc-1,converter_techs,vintage))
8688    = yes;
8689   
8690  * Mapping for used activities and commodities
8691  set converter_usedActCom(converter_techs,vintage,activity,commodity);
8692  option converter_usedActCom < converter_coefficient;
8693   
8694  set converter_usedAct(converter_techs,vintage,activity);
8695  option converter_usedAct < converter_usedActCom;
8696   
8697  set converter_usedCom(converter_techs,vintage,commodity);
8698  option converter_usedCom < converter_usedActCom;
8699   
8700  set converter_usedTechAct(nodesModel,years,converter_techs,vintage,activity);
8701  converter_usedTechAct(nodesModel,years,converter_techs,vintage,activity)
8702      $(converter_usedTech(nodesModel,years,converter_techs,vintage)
8703          and converter_usedAct(converter_techs,vintage,activity))
8704      = yes;
8705   
8706  set converter_useRampPos(nodesModel,years,converter_techs,vintage);
8707  converter_useRampPos(nodesModelToCalc,yearsToCalc,converter_techs,vintage)
8708    $(sum(indicator$accounting_converterStartup(indicator,nodesModelToCalc,converter_techs,vintage,"perRamp"), 1)
8709      or sum(indicator$accounting_converterStartup(indicator,nodesModelToCalc,converter_techs,vintage,"perRampPos"), 1))
8710    = 1;
8711   
8712  set converter_useRampNeg(nodesModel,years,converter_techs,vintage);
8713  converter_useRampNeg(nodesModelToCalc,yearsToCalc,converter_techs,vintage)
8714    $(sum(indicator$accounting_converterStartup(indicator,nodesModelToCalc,converter_techs,vintage,"perRamp"), 1)
8715      or sum(indicator$accounting_converterStartup(indicator,nodesModelToCalc,converter_techs,vintage,"perRampNeg"), 1))
8716    = 1;
8717   
8718   
8719  * ==== aggregation of profiles ====
8720   
8721  * derive upper and lower profiles then aggregate
8722  set converter_activity_hasProfileIn(nodesData,years,converter_techs,pc_converter_activityProfile);
8723  option converter_activity_hasProfileIn < converter_activityProfileIn;
8724   
8725  set converter_activity_hasProfile(nodesModel,years,converter_techs,pc_converter_activityProfile);
8726  converter_activity_hasProfile(nodesModelToCalc,yearsToCalc,converter_techs,pc_converter_activityProfile)
8727      = sum(nodesData$aggregateNodesModel(nodesData,nodesModelToCalc),
8728              converter_activity_hasProfileIn(nodesData,yearsToCalc,converter_techs,pc_converter_activityProfile));
8729   
8730  set converter_coefficient_hasProfileIn(nodesData,years,converter_techs,vintage,activity,commodity);
8731  option converter_coefficient_hasProfileIn < converter_coefficientProfileIn;
8732   
8733  set converter_coefficient_hasProfile(nodesModel,years,converter_techs,vintage,activity,commodity);
8734  converter_coefficient_hasProfile(nodesModelToCalc,yearsToCalc,converter_techs,vintage,activity,commodity)
8735      = sum(nodesData$aggregateNodesModel(nodesData,nodesModelToCalc),
8736              converter_coefficient_hasProfileIn(nodesData,yearsToCalc,converter_techs,vintage,activity,commodity));
8737   
8738  * aagregate time dimension
8739  parameter converter_activityProfileIn_aggTime(timeModel,nodesData,yearsToCalc,converter_techs,pc_converter_activityProfile);
8740  converter_activityProfileIn_aggTime(timeModelToCalc,nodesData,yearsToCalc,converter_techs,pc_converter_activityProfile)
8741    $converter_activity_hasProfileIn(nodesData,yearsToCalc,converter_techs,pc_converter_activityProfile)
8742    = sum(timeData$timeMapping(timeData,timeModelToCalc),
8743            converter_activityProfileIn(timeData,nodesData,yearsToCalc,converter_techs,pc_converter_activityProfile)
8744            / timeLength(timeModelToCalc));
8745  option clear = converter_activityProfileIn;
8746   
8747  * weighted average for a real sum of units upper limits, plain average if one region has an upper limit of inf
8748  parameter converter_activityProfile(timeModel,nodesModel,years,converter_techs,vintage,pc_converter_activityProfile);
8749  converter_activityProfile(timeModelToCalc,converter_usedTech(nodesModelToCalc,yearsToCalc,converter_techs,vintage),"upper")
8750      = converter_techParam(converter_techs,vintage,"activityUpperLimit");
8751  converter_activityProfile(timeModelToCalc,converter_usedTech(nodesModelToCalc,yearsToCalc,converter_techs,vintage),"lower")
8752      = converter_techParam(converter_techs,vintage,"activityLowerLimit");
8753   
8754   
8755  set converter_finiteUnitLimit(nodesModelToCalc,yearsToCalc,converter_techs);
8756  converter_finiteUnitLimit(nodesModelToCalc,yearsToCalc,converter_techs)
8757      = sum(nodesData$aggregateNodesModel(nodesData,nodesModelToCalc), converter_capacityParamIn(nodesData,yearsToCalc,converter_techs,"unitsUpperLimit")) > 0
8758          and sum(nodesData$aggregateNodesModel(nodesData,nodesModelToCalc), converter_capacityParamIn(nodesData,yearsToCalc,converter_techs,"unitsUpperLimit")) < inf;
8759   
8760  set converter_infiniteUnitLimit(nodesModelToCalc,yearsToCalc,converter_techs);
8761  converter_infiniteUnitLimit(nodesModelToCalc,yearsToCalc,converter_techs)
8762      = sum(nodesData$aggregateNodesModel(nodesData,nodesModelToCalc), converter_capacityParamIn(nodesData,yearsToCalc,converter_techs,"unitsUpperLimit")) = inf;
8763   
8764  converter_activityProfile(timeModelToCalc,converter_usedTech(nodesModelToCalc,yearsToCalc,converter_techs,vintage),pc_converter_activityProfile)
8765      $(converter_activity_hasProfile(nodesModelToCalc,yearsToCalc,converter_techs,pc_converter_activityProfile)
8766          and converter_finiteUnitLimit(nodesModelToCalc,yearsToCalc,converter_techs))
8767      = sum(nodesData$(aggregateNodesModel(nodesData,nodesModelToCalc)
8768                  and converter_capacityParamIn(nodesData,yearsToCalc,converter_techs,"unitsUpperLimit") < inf ),
8769                converter_activityProfileIn_aggTime(timeModelToCalc,nodesData,yearsToCalc,converter_techs,pc_converter_activityProfile)
8770                * converter_capacityParamIn(nodesData,yearsToCalc,converter_techs,"unitsUpperLimit"))
8771      / sum(nodesData$aggregateNodesModel(nodesData,nodesModelToCalc),
8772              converter_capacityParamIn(nodesData,yearsToCalc,converter_techs,"unitsUpperLimit"));
8773   
8774  converter_activityProfile(timeModelToCalc,converter_usedTech(nodesModelToCalc,yearsToCalc,converter_techs,vintage),pc_converter_activityProfile)
8775      $(converter_activity_hasProfile(nodesModelToCalc,yearsToCalc,converter_techs,pc_converter_activityProfile)
8776          and converter_infiniteUnitLimit(nodesModelToCalc,yearsToCalc,converter_techs))
8777      = sum(nodesData$(aggregateNodesModel(nodesData,nodesModelToCalc)
8778                  and converter_capacityParamIn(nodesData,yearsToCalc,converter_techs,"unitsUpperLimit") = inf),
8779                converter_activityProfileIn_aggTime(timeModelToCalc,nodesData,yearsToCalc,converter_techs,pc_converter_activityProfile)
8780                * converter_capacityParamIn(nodesData,yearsToCalc,converter_techs,"unitsUpperLimit"))
8781      / sum(nodesData$(aggregateNodesModel(nodesData,nodesModelToCalc)
8782                      and converter_capacityParamIn(nodesData,yearsToCalc,converter_techs,"unitsUpperLimit") = inf ),
8783              1);
8784  option clear = converter_activityProfileIn_aggTime;
8785   
8786  * for fixed profiles overwrite upper and lower profile
8787  converter_activityProfile(timeModelToCalc,nodesModelToCalc,yearsToCalc,converter_techs,vintage,"lower")
8788      $converter_activity_hasProfile(nodesModelToCalc,yearsToCalc,converter_techs,"fixed")
8789      = converter_activityProfile(timeModelToCalc,nodesModelToCalc,yearsToCalc,converter_techs,vintage,"fixed");
8790   
8791  converter_activityProfile(timeModelToCalc,nodesModelToCalc,yearsToCalc,converter_techs,vintage,"upper")
8792      $converter_activity_hasProfile(nodesModelToCalc,yearsToCalc,converter_techs,"fixed")
8793      = converter_activityProfile(timeModelToCalc,nodesModelToCalc,yearsToCalc,converter_techs,vintage,"fixed");
8794   
8795   
8796  * weighted average for a real sum of units upper limits, plain average if one region has an upper limit of inf
8797  parameter converter_coefficientProfile(timeModel,nodesModel,years,converter_techs,vintage,activity,commodity);
8798  converter_coefficientProfile(timeModelToCalc,converter_usedTechAct(nodesModelToCalc,yearsToCalc,converter_techs,vintage,activity),commodity)
8799      = converter_coefficient(converter_techs,vintage,activity,commodity,"coefficient");
8800   
8801  converter_coefficientProfile(timeModelToCalc,converter_usedTechAct(nodesModelToCalc,yearsToCalc,converter_techs,vintage,activity),commodity)
8802      $( converter_coefficient_hasProfile(nodesModelToCalc,yearsToCalc,converter_techs,vintage,activity,commodity)
8803          and converter_finiteUnitLimit(nodesModelToCalc,yearsToCalc,converter_techs) )
8804      = sum(nodesData$aggregateNodesModel(nodesData,nodesModelToCalc),
8805            sum(timeData$timeMapping(timeData,timeModelToCalc),
8806                    converter_coefficientProfileIn(timeData,nodesData,yearsToCalc,converter_techs,vintage,activity,commodity))
8807                / timeLength(timeModelToCalc)
8808              * converter_capacityParamIn(nodesData,yearsToCalc,converter_techs,"unitsUpperLimit") )
8809      / sum(nodesData$aggregateNodesModel(nodesData,nodesModelToCalc),
8810              converter_capacityParamIn(nodesData,yearsToCalc,converter_techs,"unitsUpperLimit"));
8811   
8812  converter_coefficientProfile(timeModelToCalc,converter_usedTechAct(nodesModelToCalc,yearsToCalc,converter_techs,vintage,activity),commodity)
8813      $( converter_coefficient_hasProfile(nodesModelToCalc,yearsToCalc,converter_techs,vintage,activity,commodity)
8814          and converter_infiniteUnitLimit(nodesModelToCalc,yearsToCalc,converter_techs))
8815      = sum(nodesData$(aggregateNodesModel(nodesData,nodesModelToCalc)
8816                      and converter_capacityParamIn(nodesData,yearsToCalc,converter_techs,"unitsUpperLimit") = inf ),
8817            sum(timeData$timeMapping(timeData,timeModelToCalc),
8818                    converter_coefficientProfileIn(timeData,nodesData,yearsToCalc,converter_techs,vintage,activity,commodity))
8819                / timeLength(timeModelToCalc))
8820      / sum(nodesData$(aggregateNodesModel(nodesData,nodesModelToCalc)
8821                      and converter_capacityParamIn(nodesData,yearsToCalc,converter_techs,"unitsUpperLimit") = inf ), 1);
8822   
8823  * ==== prepare partial load behavior parameters ====
8824   
8825  * set disabled max load requirements to 1 to avoid excessive logical expressions later on
8826  alias(commodity, com);
8827  converter_coefficient(converter_techs,vintage,activity,commodity,"maxLoad")
8828      $((converter_coefficient(converter_techs,vintage,activity,commodity,"maxLoad") = 0)
8829        and converter_usedAct(converter_techs,vintage,activity))
8830      = 1;
8831   
8832  * indicate that at least one activity of a technology makes use of partial load behavior
8833  set converter_hasMaxLoad(converter_techs,vintage);
8834  converter_hasMaxLoad(converter_techs,vintage)
8835    = smin((activity,commodity)$converter_usedAct(converter_techs,vintage,activity),
8836              converter_coefficient(converter_techs,vintage,activity,commodity,"maxLoad")) < 1;
8837   
8838  set converter_hasMinLoad(converter_techs,vintage);
8839  converter_hasMinLoad(converter_techs,vintage)
8840    = smax((activity,commodity)$converter_usedAct(converter_techs,vintage,activity),
8841              converter_coefficient(converter_techs,vintage,activity,commodity,"minLoad")) > 0;
8842   
8843  set converter_hasConstantFluxInActivity(converter_techs,vintage);
8844  converter_hasConstantFluxInActivity(converter_techs,vintage)
8845    = sum((activity,commodity)$converter_usedAct(converter_techs,vintage,activity),
8846                          abs(converter_coefficient(converter_techs,vintage,activity,commodity,"constant"))) > 0;
8847   
8848  * setting up a requirements parameter to avoid having to cycle through commodities in equations
8849  set pc_converter_activityRequirements
8850      /
8851      minLoad             "Lower profile for converter activity"
8852      maxLoad             "Upper profile for converter activity"
8853      /;
8854  parameter converter_activityRequirements(converter_techs,vintage,activity,pc_converter_activityRequirements);
8855  converter_activityRequirements(converter_techs,vintage,activity,"minLoad")
8856    = smax(commodity, converter_coefficient(converter_techs,vintage,activity,commodity,"minLoad"));
8857  converter_activityRequirements(converter_techs,vintage,activity,"maxLoad")
8858    = smin(commodity, converter_coefficient(converter_techs,vintage,activity,commodity,"maxLoad"));
8859   
8860  * ==== activate MIP units for MIP dispatch or partial load technologies ====
8861   
8862  set converter_hasMinUptime(converter_techs,vintage);
8863  converter_hasMinUptime(converter_techs,vintage)
8864    $(converter_techParam(converter_techs,vintage,"minUptime")
8865      and converter_techParam(converter_techs,vintage,"mipDispatch"))
8866    = yes;
8867   
8868  set converter_hasMinDowntime(converter_techs,vintage);
8869  converter_hasMinDowntime(converter_techs,vintage)
8870    $(converter_techParam(converter_techs,vintage,"minDowntime")
8871      and converter_techParam(converter_techs,vintage,"mipDispatch"))
8872    = yes;
8873   
8874  * require integer unit counts if online state is to be tracked
8875  converter_techParam(converter_techs,vintage,"mipUnits")
8876      $(converter_techParam(converter_techs,vintage,"mipDispatch")
8877        or converter_hasMinLoad(converter_techs, vintage)
8878        or converter_hasMaxLoad(converter_techs, vintage)
8879        or converter_hasConstantFluxInActivity(converter_techs,vintage))
8880      = 1;
8881   
8882  * ==== floor mip converter units to integer values ====
8883  converter_capacityParam(nodesModelToCalc,yearsToCalc,converter_techs,"unitsLowerLimit")
8884      $sum(vintage, converter_techParam(converter_techs,vintage,"mipUnits"))
8885      = floor(converter_capacityParam(nodesModelToCalc,yearsToCalc,converter_techs,"unitsLowerLimit"));
8886  converter_capacityParam(nodesModelToCalc,yearsToCalc,converter_techs,"unitsUpperLimit")
8887      $sum(vintage, converter_techParam(converter_techs,vintage,"mipUnits"))
8888      = ceil(converter_capacityParam(nodesModelToCalc,yearsToCalc,converter_techs,"unitsUpperLimit"));
8889   
8890  * ==== scalars and sets for minUptime and minDowntime ====
8891   
8892  scalar converter_maxUptimeReq;
8893  converter_maxUptimeReq = smax((converter_techs,vintage), converter_techParam(converter_techs,vintage,"minUptime"));
8894  set uptimeSearchRange(timeModelToCalc);
8895  uptimeSearchRange(timeModelToCalc) = ord(timeModelToCalc) <= converter_maxUptimeReq;
8896   
8897  scalar converter_maxDowntimeReq;
8898  converter_maxDowntimeReq = smax((converter_techs,vintage), converter_techParam(converter_techs,vintage,"minDowntime"));
8899  set downtimeSearchRange(timeModelToCalc);
8900  downtimeSearchRange(timeModelToCalc) = ord(timeModelToCalc) <= converter_maxDowntimeReq;
8901   
8902  * ==== definition of variables ====
8903   
8904  * Initialise variables for unitsBuild
8905  converter_unitsBuild.l(nodesModel,years,converter_techs,vintage)
8906      $converter_availTech(nodesModel,years,converter_techs,vintage)
8907      = converter_capacityParam(nodesModel,years,converter_techs,"unitsBuild");
8908  converter_unitsBuild.lo(nodesModel,yearsToCalc,converter_techs,vintage)
8909      $converter_availTech(nodesModel,yearsToCalc,converter_techs,vintage)
8910      = converter_unitsBuild.l(nodesModel,yearsToCalc,converter_techs,vintage);
8911  converter_unitsBuild.fx(nodesModel,years,converter_techs,vintage)
8912      $converter_capacityParam(nodesModel,years,converter_techs,"noExpansion")
8913      = converter_unitsBuild.l(nodesModel,years,converter_techs,vintage);
8914   
8915  * Initialise variables for unitsDecom
8916  converter_unitsDecom.l(nodesModel,years,converter_techs,vintage)
8917    $(converter_decomTech(nodesModel,years,converter_techs,vintage)
8918      and years.val < sum(yearsToCalc$(ord(yearsToCalc) = 1), yearsToCalc.val))
8919    = sum((years_a,years_aa)$(sameas(years-1, years_aa)
8920                        and years_a.val > years_aa.val - converter_techParam(converter_techs,vintage,'lifeTime')
8921                        and years_a.val <= years.val - converter_techParam(converter_techs,vintage,'lifeTime')
8922                        and converter_availTech(nodesModel,years_a,converter_techs,vintage)),
8923          converter_unitsBuild.l(nodesModel,years_a,converter_techs,vintage));
8924   
8925  converter_unitsDecom.l(nodesModel,yearsToCalc,converter_techs,vintage)
8926    $converter_decomTech(nodesModel,yearsToCalc,converter_techs,vintage)
8927    = sum(years$
8928          (years.val < sum(yearsToCalc_a$(ord(yearsToCalc_a) = 1), yearsToCalc_a.val)
8929            and converter_availTech(nodesModel,years,converter_techs,vintage)
8930            and years.val > sum(years_a$sameas(years_a, yearsToCalc-1), years_a.val) - converter_techParam(converter_techs,vintage,'lifeTime')
8931            and years.val <= yearsToCalc.val - converter_techParam(converter_techs,vintage,'lifeTime')),
8932        converter_unitsBuild.l(nodesModel,years,converter_techs,vintage))
8933      + sum(yearsToCalc_a$
8934          (yearsToCalc_a.val < sum(yearsToCalc_aa$(ord(yearsToCalc_aa) > 1), yearsToCalc_a.val)
8935            and converter_availTech(nodesModel,yearsToCalc_a,converter_techs,vintage)
8936            and yearsToCalc_a.val > sum(years_a$sameas(years_a, yearsToCalc-1), years_a.val) - converter_techParam(converter_techs,vintage,'lifeTime')
8937            and yearsToCalc_a.val <= yearsToCalc.val - converter_techParam(converter_techs,vintage,'lifeTime')),
8938        converter_unitsBuild.l(nodesModel,yearsToCalc_a,converter_techs,vintage));
8939        ;
8940   
8941  converter_unitsDecom.lo(nodesModel,yearsToCalc,converter_techs,vintage)
8942      $(converter_usedTech(nodesModel,yearsToCalc,converter_techs,vintage)
8943          and not converter_techParam(converter_techs,vintage,"freeDecom"))
8944      = converter_unitsDecom.l(nodesModel,yearsToCalc,converter_techs,vintage)
8945   
8946  * Calculate planned unit expansion
8947  parameter converter_unitsPlanned(nodesModel,years,converter_techs,vintage);
8948  converter_unitsPlanned(nodesModel,years,converter_techs,vintage) = 0;
8949  loop(years,
8950    converter_unitsPlanned(nodesModel,years,converter_techs,vintage)
8951      =
8952      converter_unitsPlanned(nodesModel,years-1,converter_techs,vintage)
8953          $converter_usedTech(nodesModel,years-1,converter_techs,vintage)
8954      + converter_unitsBuild.l(nodesModel,years,converter_techs,vintage)
8955          $converter_availTech(nodesModel,years,converter_techs,vintage)
8956      - converter_unitsDecom.l(nodesModel,years,converter_techs,vintage)
8957          $converter_usedTech(nodesModel,years,converter_techs,vintage);
8958  );
8959   
8960  * Set initial state for planned units
8961  converter_unitsTotal.l(nodesModel,years,converter_techs,vintage)
8962    = converter_unitsPlanned(nodesModel,years,converter_techs,vintage)
8963   
8964  * Calculate if planned unit expansion is bounded by upper and lower limits
8965  set converter_unitBoundsFixed(nodesModel,years,converter_techs);
8966  converter_unitBoundsFixed(nodesModel,years,converter_techs)
8967    $(sum(vintage$converter_usedTech(nodesModel,years,converter_techs,vintage),
8968          converter_unitsPlanned(nodesModel,years,converter_techs,vintage))
8969      = converter_capacityParam(nodesModel,years,converter_techs,"unitsUpperLimit")
8970    and sum(vintage$converter_usedTech(nodesModel,years,converter_techs,vintage),
8971          converter_unitsPlanned(nodesModel,years,converter_techs,vintage))
8972      = converter_capacityParam(nodesModel,years,converter_techs,"unitsLowerLimit"))
8973    = yes;
8974   
8975  * Fix unitsBuild, unitsDecom, unitsTotal if levels are predetermined by upper and lower limits
8976  converter_unitsBuild.fx(nodesModel,years,converter_techs,vintage)
8977    $(converter_availTech(nodesModel,years,converter_techs,vintage)
8978      and converter_unitBoundsFixed(nodesModel,years,converter_techs))
8979    = converter_unitsBuild.l(nodesModel,years,converter_techs,vintage);
8980  converter_unitsDecom.fx(nodesModel,years,converter_techs,vintage)
8981    $(converter_usedTech(nodesModel,years,converter_techs,vintage)
8982      and converter_unitBoundsFixed(nodesModel,years,converter_techs))
8983    = converter_unitsDecom.l(nodesModel,years,converter_techs,vintage);
8984  converter_unitsTotal.fx(nodesModel,years,converter_techs,vintage)
8985    $(converter_usedTech(nodesModel,years,converter_techs,vintage)
8986      and converter_unitBoundsFixed(nodesModel,years,converter_techs))
8987    = converter_unitsTotal.l(nodesModel,years,converter_techs,vintage);
8988   
8989  converter_unitsOnline_MIP.up(timeModelToCalc,nodesModel,years,converter_techs,vintage)
8990      $(converter_usedTech(nodesModel,years,converter_techs,vintage)
8991        and converter_techParam(converter_techs,vintage,"mipDispatch") = 1)
8992      = converter_capacityParam(nodesModel,years,converter_techs,"unitsUpperLimit");
8993   
8994  converter_unitsTotal_MIP.up(nodesModel,years,converter_techs,vintage)
8995      $(converter_usedTech(nodesModel,years,converter_techs,vintage)
8996        and converter_techParam(converter_techs,vintage,"mipUnits") = 1)
8997      = converter_capacityParam(nodesModel,years,converter_techs,"unitsUpperLimit");
8998   
8999  converter_unitsUsingActivity_MIP.up(timeModelToCalc,nodesModel,years,converter_techs,vintage,activity)
9000      $(converter_usedTech(nodesModel,years,converter_techs,vintage)
9001        and (converter_hasMinLoad(converter_techs, vintage)
9002              or converter_hasMaxLoad(converter_techs, vintage)))
9003      = converter_capacityParam(nodesModel,years,converter_techs,"unitsUpperLimit");
9004   
9005  * Add parameter for fixing capacities during myopic runs
9006  parameter converter_unitsDelta(nodesModel,years,converter_techs);
9007   
9008  * ==== declaration of equations ====
9009   
9010  equations
9011    Eq_converter_unitsBalance(nodesModel,years,converter_techs,vintage
9012      ) "Ensures the units balance over the planning period."
9013    Eq_converter_unitsFixedDecom(nodesModel,years,converter_techs,vintage
9014      ) "Restricts the fixed decommissioning of units over the planning period."
9015    Eq_converter_unitsFreeDecom(nodesModel,years,converter_techs,vintage
9016      ) "Restricts the free decommissioning of units over the planning period."
9017    Eq_converter_unitsUpperLimit(nodesModel,years,converter_techs
9018      ) "Upper bound for the total number of units."
9019    Eq_converter_unitsLowerLimit(nodesModel,years,converter_techs
9020      ) "Lower bound for the total number of units."
9021    Eq_converter_unitsFixedLimit(nodesModel,years,converter_techs
9022      ) "Fixed bound for the total number of units."
9023    Eq_converter_unitsTotalMIP(nodesModel,years,converter_techs,vintage
9024      ) "Fixes the total number of units to the corresponding integer variable."
9025    Eq_converter_unitsOnlineMIP(timeModel,nodesModel,years,converter_techs,vintage
9026      ) "Fixes the number of online units to the corresponding integer variable."
9027   
9028    Eq_converter_activityLowerLimit(timeModel,nodesModel,years,converter_techs,vintage
9029      ) "Lower limit on the activity."
9030    Eq_converter_activityUpperLimit(timeModel,nodesModel,years,converter_techs,vintage
9031      ) "Upper limit on the activity."
9032   
9033    Eq_converter_activityFixedLimit(timeModel,nodesModel,years,converter_techs,vintage
9034      ) "Fixed limit on the activity."
9035    Eq_converter_rampPos(timeModel,nodesModel,years,converter_techs,vintage
9036      ) "Positive ramping of unit activity."
9037    Eq_converter_rampNeg(timeModel,nodesModel,years,converter_techs,vintage
9038      ) "Negative ramping of unit activity."
9039    Eq_converter_rampLimit(timeModel,nodesModel,years,converter_techs,vintage
9040      ) "Restrict ramping up of unit activity."
9041   
9042    Eq_converter_unitsOnline(timeModel,nodesModel,years,converter_techs,vintage
9043      ) "Set online units to total number of operational units."
9044    Eq_converter_unitsOnlineUC(timeModel,nodesModel,years,converter_techs,vintage
9045      ) "Allow shutting down units."
9046    Eq_converter_activityStartups(timeModel,nodesModel,years,converter_techs,vintage
9047      ) "Variable counting the number of unit startups."
9048    Eq_converter_activityShutdowns(timeModel,nodesModel,years,converter_techs,vintage
9049      ) "Variable tracking the number of unit shutdowns."
9050    Eq_converter_limitStartups(nodesModel,years,converter_techs,vintage
9051      ) "Limit the number of startup cycles a unit can perform."
9052    Eq_converter_minUptime(timeModel,nodesModel,years,converter_techs,vintage
9053      ) "Require recently started units to remain online for their respective minimum uptime."
9054    Eq_converter_minDowntime(timeModel,nodesModel,years,converter_techs,vintage
9055      ) "Require recently shut down units to remain offline for their respective minimum downtime."
9056    Eq_converter_activityUpperLimitDetailedPartLoadMinReq(timeModel,nodesModel,years,converter_techs,vintage,activity
9057      ) "Limit activity coefficients of activities with a given load requirement or stricter to the number of units in such modes."
9058    Eq_converter_activityUpperLimitDetailedPartLoadMaxReq(timeModel,nodesModel,years,converter_techs,vintage,activity
9059      ) "Limit activity coefficients of activities with a given load requirement or stricter to the number of units in such modes."
9060    Eq_converter_activityLowerLimitDetailedPartLoadMinReq(timeModel,nodesModel,years,converter_techs,vintage,activity
9061      ) "Enforce sufficient activity coefficients of activities to justify all active modes."
9062    Eq_converter_noOnlineIdle(timeModel,nodesModel,years,converter_techs,vintage
9063      ) "Prevent the circumvention of requirements by keeping units online without using any modes."
9064    Eq_converter_noOnlineIdleDetailedPartLoad(timeModel,nodesModel,years,converter_techs,vintage
9065      ) "Prevent the circumvention of requirements by keeping units online without using any modes. Allow more than one mode activation per unit."
9066    Eq_converter_activityUpperLimitPartLoad(timeModel,nodesModel,years,converter_techs,vintage,activity
9067      ) "Limit usage of an activity to corresponding units."
9068    Eq_converter_activityLowerLimitPartLoad(timeModel,nodesModel,years,converter_techs,vintage,activity
9069      ) "Limit usage of an activity to corresponding units."
9070    Eq_converter_activityModeLimit(timeModel,nodesModel,years,converter_techs,vintage,activity
9071      ) "Limit the number of units in one particular mode to the number of operational units."
9072    ;
9073   
9074  * ==== equation definition ====
9075  * // ## Equations
9076  * // ### Converter Units Balance
9077  * // Ensures that the total units are consistent with the built and decommissioned units.
9078  * // {Eq_converter_unitsBalance}
9079  Eq_converter_unitsBalance(nodesModelSel,yearsSel,converter_techs,vintage)
9080      $((converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
9081            or sum(years$sameas(years,yearsSel), converter_usedTech(nodesModelSel,years-1,converter_techs,vintage)))
9082          and not converter_unitBoundsFixed(nodesModelSel,yearsSel,converter_techs))
9083      ..
9084      converter_unitsTotal(nodesModelSel,yearsSel,converter_techs,vintage)
9085      =e=
9086      sum(yearsToCalc$(ord(yearsToCalc) = 1 and sameas(yearsToCalc, yearsSel)),
9087        sum(years$sameas(years, yearsToCalc),
9088          converter_unitsTotal(nodesModelSel,years-1,converter_techs,vintage)
9089            $converter_usedTech(nodesModelSel,years-1,converter_techs,vintage)))
9090      + sum((yearsToCalc)$(ord(yearsToCalc) > 1 and sameas(yearsToCalc, yearsSel)),
9091        converter_unitsTotal(nodesModelSel,yearsToCalc-1,converter_techs,vintage)
9092          $converter_usedTech(nodesModelSel,yearsToCalc-1,converter_techs,vintage))
9093      + converter_unitsBuild(nodesModelSel,yearsSel,converter_techs,vintage)
9094          $converter_availTech(nodesModelSel,yearsSel,converter_techs,vintage)
9095      - converter_unitsDecom(nodesModelSel,yearsSel,converter_techs,vintage)
9096          $converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage);
9097   
9098  * // ### Converter Units Fixed Decommission
9099  * // Restricts the fixed decommissioning of units over the planning period.
9100  * // {Eq_converter_unitsFixedDecom}
9101  Eq_converter_unitsFixedDecom(nodesModelSel,yearsSel,converter_techs,vintage)
9102      $(converter_decomTech(nodesModelSel,yearsSel,converter_techs,vintage)
9103          and not converter_techParam(converter_techs,vintage,"freeDecom") = 1
9104          and not converter_unitBoundsFixed(nodesModelSel,yearsSel,converter_techs))
9105      ..
9106      converter_unitsDecom(nodesModelSel,yearsSel,converter_techs,vintage)
9107      =e=
9108      sum(years$
9109          (converter_availTech(nodesModelSel,years,converter_techs,vintage)
9110            and years.val > sum(yearsToCalc$sameas(yearsToCalc+1, yearsSel), yearsToCalc.val) - converter_techParam(converter_techs,vintage,'lifeTime')
9111            and years.val <= yearsSel.val - converter_techParam(converter_techs,vintage,'lifeTime')),
9112        converter_unitsBuild(nodesModelSel,years,converter_techs,vintage));
9113   
9114  * // ### Converter Units Free Decommission
9115  * // Restricts the free decommissioning of units over the planning period.
9116  * // {Eq_converter_unitsFreeDecom}
9117  Eq_converter_unitsFreeDecom(nodesModelSel,yearsSel,converter_techs,vintage)
9118      $((converter_decomTech(nodesModelSel,yearsSel,converter_techs,vintage)
9119          or converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage))
9120          and converter_techParam(converter_techs,vintage,"freeDecom") = 1)
9121      ..
9122      sum(years$
9123            ((converter_decomTech(nodesModelSel,years,converter_techs,vintage)
9124              or converter_usedTech(nodesModelSel,years,converter_techs,vintage))
9125              and years.val < sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)),
9126          converter_unitsDecom(nodesModelSel,years,converter_techs,vintage))
9127      + sum(yearsToCalc$
9128            ((converter_decomTech(nodesModelSel,yearsToCalc,converter_techs,vintage)
9129              or converter_usedTech(nodesModelSel,yearsToCalc,converter_techs,vintage))
9130              and yearsToCalc.val >= sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
9131              and yearsToCalc.val <= yearsSel.val),
9132          converter_unitsDecom(nodesModelSel,yearsToCalc,converter_techs,vintage))
9133      =g=
9134      sum(years$
9135            (converter_availTech(nodesModelSel,years,converter_techs,vintage)
9136              and years.val < sum(yearsToCalc$(ord(yearsToCalc)=1), yearsToCalc.val) - converter_techParam(converter_techs,vintage,'lifeTime')),
9137          converter_unitsBuild(nodesModelSel,years,converter_techs,vintage))
9138      + sum(yearsToCalc$
9139            (converter_availTech(nodesModelSel,yearsToCalc,converter_techs,vintage)
9140              and yearsToCalc.val >= sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
9141              and yearsToCalc.val <= yearsSel.val - converter_techParam(converter_techs,vintage,'lifeTime')),
9142          converter_unitsBuild(nodesModelSel,yearsToCalc,converter_techs,vintage));
9143   
9144  * // ### Converter Units Upper Limit
9145  * // Upper bound for the total number of units.
9146  * // {Eq_converter_unitsUpperLimit}
9147  Eq_converter_unitsUpperLimit(nodesModelSel,yearsSel,converter_techs)
9148      $(converter_capacityParam(nodesModelSel,yearsSel,converter_techs,'unitsUpperLimit') >= 0
9149          and converter_capacityParam(nodesModelSel,yearsSel,converter_techs,'unitsUpperLimit') < +inf
9150          and converter_capacityParam(nodesModelSel,yearsSel,converter_techs,'unitsUpperLimit')
9151              <> converter_capacityParam(nodesModelSel,yearsSel,converter_techs,'unitsLowerLimit'))
9152      ..
9153      sum(vintage$converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage),
9154          converter_unitsTotal(nodesModelSel,yearsSel,converter_techs,vintage))
9155      =l=
9156      converter_capacityParam(nodesModelSel,yearsSel,converter_techs,"unitsUpperLimit");
9157   
9158  * // ### Converter Units Lower Limit
9159  * // Lower bound for the total number of units.
9160  * // {Eq_converter_unitsLowerLimit}
9161  Eq_converter_unitsLowerLimit(nodesModelSel,yearsSel,converter_techs)
9162      $(converter_capacityParam(nodesModelSel,yearsSel,converter_techs,'unitsLowerLimit') > 0
9163          and converter_capacityParam(nodesModelSel,yearsSel,converter_techs,'unitsLowerLimit')
9164              <> converter_capacityParam(nodesModelSel,yearsSel,converter_techs,'unitsUpperLimit'))
9165      ..
9166      sum(vintage$converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage),
9167          converter_unitsTotal(nodesModelSel,yearsSel,converter_techs,vintage))
9168      =g=
9169      converter_capacityParam(nodesModelSel,yearsSel,converter_techs,"unitsLowerLimit");
9170   
9171  Eq_converter_unitsFixedLimit(nodesModelSel,yearsSel,converter_techs)
9172      $(converter_capacityParam(nodesModelSel,yearsSel,converter_techs,'unitsLowerLimit')
9173          = converter_capacityParam(nodesModelSel,yearsSel,converter_techs,'unitsUpperLimit'))
9174      ..
9175      sum(vintage$converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage),
9176          converter_unitsTotal(nodesModelSel,yearsSel,converter_techs,vintage))
9177      =e=
9178      converter_capacityParam(nodesModelSel,yearsSel,converter_techs,"unitsUpperLimit");
9179   
9180  * // ### Converter Units Total MIP
9181  * // Fixes the total number of units to the corresponding integer variable.
9182  * // {Eq_converter_unitsTotalMIP}
9183  Eq_converter_unitsTotalMIP(nodesModelSel,yearsSel,converter_techs,vintage)
9184      $( converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
9185          and converter_techParam(converter_techs,vintage,"mipUnits") = 1 )
9186      ..
9187      converter_unitsTotal(nodesModelSel,yearsSel,converter_techs,vintage)
9188      =e=
9189      converter_unitsTotal_MIP(nodesModelSel,yearsSel,converter_techs,vintage);
9190   
9191  * // ### Converter Units Online MIP
9192  * // Fixes the number of online units to the corresponding integer variable.
9193  * // {Eq_converter_unitsOnlineMIP}
9194  Eq_converter_unitsOnlineMIP(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
9195      $( converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
9196          and converter_techParam(converter_techs,vintage,"mipDispatch") = 1 )
9197      ..
9198      converter_unitsOnline(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
9199      =e=
9200      converter_unitsOnline_MIP(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage);
9201   
9202  * // ### Converter Activity Lower Limit
9203  * // Lower limit on the activity.
9204  * // {Eq_converter_activityLowerLimit}
9205  Eq_converter_activityLowerLimit(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
9206      $(converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
9207          and converter_activityProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,"lower") > 0
9208          and converter_activityProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,"lower")
9209               <> converter_activityProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,"upper")
9210          and not converter_hasMinLoad(converter_techs, vintage))
9211      ..
9212      sum(activity$converter_usedAct(converter_techs,vintage,activity),
9213          converter_activity(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity)
9214      )
9215      =g=
9216      converter_activityProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,"lower")
9218      * converter_unitsOnline(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage);
9220   
9221  * // ### Converter Activity Upper Limit
9222  * // Upper limit on the activity.
9223  * // {Eq_converter_activityUpperLimit}
9224  Eq_converter_activityUpperLimit(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
9225      $(converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
9226          and converter_activityProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,"upper") >= 0
9227          and converter_activityProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,"upper")
9228               <> converter_activityProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,"lower"))
9229      ..
9230      sum(activity$converter_usedAct(converter_techs,vintage,activity),
9231          converter_activity(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity)
9232      )
9233      =l=
9234      converter_activityProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,"upper")
9236      * converter_unitsOnline(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage);
9238   
9239  Eq_converter_activityFixedLimit(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
9240      $(converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
9241          and converter_activityProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,"lower")
9242               = converter_activityProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,"upper"))
9243      ..
9244      sum(activity$converter_usedAct(converter_techs,vintage,activity),
9245          converter_activity(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity)
9246      )
9247      =e=
9248      converter_activityProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,"upper")
9250      * converter_unitsOnline(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage);
9252   
9253  * // ### Converter Positive Ramping
9254  * // Positive ramping of unit activity.
9255  * // {Eq_converter_rampPos}
9256  Eq_converter_rampPos(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,converter_techs,vintage)
9257    $( converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
9258        and converter_useRampPos(nodesModelSel,yearsSel,converter_techs,vintage))
9259      ..
9260      converter_rampPos(timeModelToCalc,nodesModelSel,yearsSel,converter_techs,vintage)
9261      =g=
9262      sum(activity$converter_usedAct(converter_techs,vintage,activity),
9263              converter_activity(timeModelToCalc,nodesModelSel,yearsSel,converter_techs,vintage,activity)
9264              - converter_activity(timeModelToCalc--1,nodesModelSel,yearsSel,converter_techs,vintage,activity));
9265   
9266  * // ### Converter Negative Ramping
9267  * // Negative ramping of unit activity.
9268  * // {Eq_converter_rampNeg}
9269  Eq_converter_rampNeg(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,converter_techs,vintage)
9270    $( converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
9271        and converter_useRampNeg(nodesModelSel,yearsSel,converter_techs,vintage))
9272      ..
9273      converter_rampNeg(timeModelToCalc,nodesModelSel,yearsSel,converter_techs,vintage)
9274      =g=
9275      - sum(activity$converter_usedAct(converter_techs,vintage,activity),
9276              converter_activity(timeModelToCalc,nodesModelSel,yearsSel,converter_techs,vintage,activity)
9277              - converter_activity(timeModelToCalc--1,nodesModelSel,yearsSel,converter_techs,vintage,activity));
9278   
9279  * // ### Converter Ramping Limit
9280  * // Restrict ramping up of unit activity.
9281  * // {Eq_converter_rampLimit}
9282  Eq_converter_rampLimit(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,converter_techs,vintage)
9283    $( converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
9284          and converter_techParam(converter_techs,vintage,"activityRampLimit") > 0)
9285      ..
9286      sum(activity$converter_usedAct(converter_techs,vintage,activity),
9287              converter_activity(timeModelToCalc,nodesModelSel,yearsSel,converter_techs,vintage,activity)
9288              - converter_activity(timeModelToCalc--1,nodesModelSel,yearsSel,converter_techs,vintage,activity))
9289    =l=
9290    converter_techParam(converter_techs,vintage,"activityRampLimit")
9292      * converter_unitsOnline(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage);
9294   
9295   
9297   
9298  * // ### Converter MIP Units Online
9299  * // Restrict ramping up of unit activity.
9300  * // {Eq_converter_unitsOnline}
9301  Eq_converter_unitsOnline(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
9302      $( converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
9303          and converter_techParam(converter_techs,vintage,"mipDispatch") = 0 )
9304    ..
9305    converter_unitsOnline(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
9306    =e=
9307    converter_unitsTotal(nodesModelSel,yearsSel,converter_techs,vintage)
9308      ;
9309   
9310  * // ### Converter MIP Units Shutting Down
9311  * // Allow shutting down units.
9312  * // {Eq_converter_unitsOnlineUC}
9313  Eq_converter_unitsOnlineUC(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
9314      $( converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
9315          and converter_techParam(converter_techs,vintage,"mipDispatch") = 1 )
9316    ..
9317    converter_unitsOnline(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
9318    =l=
9319    converter_unitsTotal(nodesModelSel,yearsSel,converter_techs,vintage)
9320      ;
9322   
9323  * // ### Converter Activity Startups
9324  * // Variable counting the number of unit startups.
9325  * // {Eq_converter_activityStartups}
9326  Eq_converter_activityStartups(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,converter_techs,vintage)
9327    $( converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
9328          and converter_techParam(converter_techs,vintage,"mipDispatch") = 1 )
9329      ..
9330      converter_unitStartups(timeModelToCalc,nodesModelSel,yearsSel,converter_techs,vintage)
9331      =g=
9332          converter_unitsOnline(timeModelToCalc,nodesModelSel,yearsSel,converter_techs,vintage)
9333      - converter_unitsOnline(timeModelToCalc--1,nodesModelSel,yearsSel,converter_techs,vintage);
9334   
9335  * // ### Converter Activity Shutdowns
9336  * // Variable tracking the number of unit shutdowns.
9337  * // {Eq_converter_activityShutdowns}
9338  Eq_converter_activityShutdowns(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,converter_techs,vintage)
9339    $( converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
9340          and converter_techParam(converter_techs,vintage,"mipDispatch") = 1
9341          and converter_techParam(converter_techs,vintage,"minDowntime") > 0)
9342      ..
9343      converter_unitShutdowns(timeModelToCalc,nodesModelSel,yearsSel,converter_techs,vintage)
9344      =g=
9345          converter_unitsOnline(timeModelToCalc--1,nodesModelSel,yearsSel,converter_techs,vintage)
9346      - converter_unitsOnline(timeModelToCalc,nodesModelSel,yearsSel,converter_techs,vintage);
9347   
9348  * // ### Converter Activity Startup Limit
9349  * // Limit the number of startup cycles a unit can perform.
9350  * // {Eq_converter_limitStartups}
9351  Eq_converter_limitStartups(nodesModelSel,yearsSel,converter_techs,vintage)
9352    $( converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
9353          and converter_techParam(converter_techs,vintage,"mipDispatch") = 1
9354      and converter_techParam(converter_techs,vintage,"startupLimit") > 0)
9355      ..
9356      sum(timeModelToCalc, converter_unitStartups(timeModelToCalc,nodesModelSel,yearsSel,converter_techs,vintage))
9357    =l=
9358    converter_techParam(converter_techs,vintage,"startupLimit")
9359    * converter_unitsTotal(nodesModelSel,yearsSel,converter_techs,vintage);
9360   
9361  alias(timeModelToCalc,ttc);
9362   
9363  * // ### Converter Units Minimum Uptime
9364  * // Require recently started units to remain online for their respective minimum uptime.
9365  * // {Eq_converter_minUptime}
9366  Eq_converter_minUptime(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,converter_techs,vintage)
9367    $( converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
9368          and converter_techParam(converter_techs,vintage,"mipDispatch") = 1
9369      and converter_techParam(converter_techs,vintage,"minUptime") > 0)
9370      ..
9371      sum(ttc$[uptimeSearchRange(ttc) and ord(ttc)<=converter_techParam(converter_techs,vintage,"minUptime")],
9372          converter_unitStartups(ttc+[ord(timeModelToCalc)-converter_techParam(converter_techs,vintage,"minUptime")],
9373              nodesModelSel,yearsSel,converter_techs,vintage))
9374          =l=
9375          converter_unitsOnline(timeModelToCalc,nodesModelSel,yearsSel,converter_techs,vintage);
9376   
9377  * // ### Converter Units Minimum Downtime
9378  * // Require recently shut down units to remain offline for their respective minimum downtime.
9379  * // {Eq_converter_minDowntime}
9380  Eq_converter_minDowntime(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,converter_techs,vintage)
9381    $( converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
9382          and converter_techParam(converter_techs,vintage,"mipDispatch") = 1
9383      and converter_techParam(converter_techs,vintage,"minDowntime") > 0)
9384      ..
9385      sum(ttc$[downtimeSearchRange(ttc) and ord(ttc)<=converter_techParam(converter_techs,vintage,"minDowntime")],
9386          converter_unitShutdowns(ttc+[ord(timeModelToCalc)-converter_techParam(converter_techs,vintage,"minDowntime")],
9387              nodesModelSel,yearsSel,converter_techs,vintage))
9388          =l=
9389          converter_unitsTotal(nodesModelSel,yearsSel,converter_techs,vintage)
9390      - converter_unitsOnline(timeModelToCalc,nodesModelSel,yearsSel,converter_techs,vintage);
9391   
9392  * This equation is meant to cause the units to activate particular mode counters to gain access to the corresponding activities.
9393  * Activities are allowed to be used on units with stricter activity requirements but not the other way around.
9394  alias(activity, act);
9395   
9396  * // ### Converter MIP Units Activity Upper Limit Minimum Required Load
9397  * // Limit activity coefficients of activities with a given load requirement or stricter to the number of units in such modes.
9398  * // {Eq_converter_activityUpperLimitDetailedPartLoadMinReq}
9399  Eq_converter_activityUpperLimitDetailedPartLoadMinReq(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity)
9400    $( converter_usedTechAct(nodesModelSel,yearsSel,converter_techs,vintage,activity)
9401          and converter_hasMinLoad(converter_techs, vintage)
9402          and converter_techParam(converter_techs,vintage,"mipDetailedPartialLoad"))
9403      ..
9404      sum(act$(converter_activityRequirements(converter_techs,vintage,act,"minLoad")
9405                  >= converter_activityRequirements(converter_techs,vintage,activity,"minLoad")
9406               and converter_usedAct(converter_techs,vintage,act)),
9407      converter_activity(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,act))
9408    =l=
9409    converter_activityProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,"upper")
9410      * sum(act$(converter_activityRequirements(converter_techs,vintage,act,"minLoad")
9411                  >= converter_activityRequirements(converter_techs,vintage,activity,"minLoad")
9412                 and converter_usedAct(converter_techs,vintage,act)),
9413      converter_unitsUsingActivity_MIP(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,act));
9414   
9415  * // ### Converter MIP Units Activity Upper Limit Maximum Required Load
9416  * // Limit activity coefficients of activities with a given load requirement or stricter to the number of units in such modes.
9417  * // {Eq_converter_activityUpperLimitDetailedPartLoadMaxReq}
9418  Eq_converter_activityUpperLimitDetailedPartLoadMaxReq(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity)
9419    $( converter_usedTechAct(nodesModelSel,yearsSel,converter_techs,vintage,activity)
9420          and converter_hasMaxLoad(converter_techs,vintage)
9421          and converter_techParam(converter_techs,vintage,"mipDetailedPartialLoad"))
9422      ..
9423      sum(act$(converter_activityRequirements(converter_techs,vintage,act,"maxLoad")
9424                  <= converter_activityRequirements(converter_techs,vintage,activity,"maxLoad")
9425               and converter_usedAct(converter_techs,vintage,act)),
9426      converter_activity(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,act))
9427    =l=
9428      sum(act$(converter_activityRequirements(converter_techs,vintage,act,"maxLoad")
9429                  <= converter_activityRequirements(converter_techs,vintage,activity,"maxLoad")
9430               and converter_usedAct(converter_techs,vintage,act)),
9431      min(converter_activityRequirements(converter_techs,vintage,act,"maxLoad"),
9432            converter_activityProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,"upper"))
9433            * converter_unitsUsingActivity_MIP(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,act));
9434   
9435  * This equation is meant to enforce the lower limit requirements of activities in use.
9436  * Loads produced by activities with less strict requirements can contribute to the minimum load requirement of strict activities but not the other way around,
9437  * because these activities can only run on units in the respectively strict activation state.
9438   
9439  * // ### Converter MIP Units Activity Lower Limit Minimum Required Load
9440  * // Enforce sufficient activity coefficients of activities to justify all active modes.
9441  * // {Eq_converter_activityLowerLimitDetailedPartLoadMinReq}
9442  Eq_converter_activityLowerLimitDetailedPartLoadMinReq(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity)
9443    $( converter_usedTechAct(nodesModelSel,yearsSel,converter_techs,vintage,activity)
9444          and converter_hasMinLoad(converter_techs, vintage)
9445          and converter_techParam(converter_techs,vintage,"mipDetailedPartialLoad"))
9446      ..
9447      sum(act$(converter_activityRequirements(converter_techs,vintage,act,"minLoad")
9448                  <= converter_activityRequirements(converter_techs,vintage,activity,"minLoad")
9449               and converter_usedAct(converter_techs,vintage,act)),
9450      converter_activity(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,act))
9451    =g=
9452      sum(act$(converter_activityRequirements(converter_techs,vintage,act,"minLoad")
9453                  <= converter_activityRequirements(converter_techs,vintage,activity,"minLoad")
9454               and converter_usedAct(converter_techs,vintage,act)),
9455      max(converter_activityRequirements(converter_techs,vintage,act,"minLoad"),
9456            converter_activityProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,"lower"))
9457            * converter_unitsUsingActivity_MIP(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,act));
9458   
9459   
9460  * Simple one-activity-per-unit partial load equations
9461  * // ### Converter MIP Units Activity Upper Limit Partial Load Balance
9462  * // Enforce MIP units partial load upper limit.
9463  * // {Eq_converter_activityUpperLimitPartLoad}
9464  Eq_converter_activityUpperLimitPartLoad(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity)
9465    $( converter_usedTechAct(nodesModelSel,yearsSel,converter_techs,vintage,activity)
9466          and (converter_hasMinLoad(converter_techs, vintage)
9467                or converter_hasMaxLoad(converter_techs, vintage)
9468                or converter_hasConstantFluxInActivity(converter_techs, vintage))
9469          and not converter_techParam(converter_techs,vintage,"mipDetailedPartialLoad"))
9470      ..
9471      converter_activity(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity)
9472    =l=
9473    min(converter_activityRequirements(converter_techs,vintage,activity,"maxLoad"),
9474          converter_activityProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,"upper"))
9475          * converter_unitsUsingActivity_MIP(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity);
9476   
9477  * // ### Converter MIP Units Activity Lower Limit Partial Load Balance
9478  * // Enforce MIP units partial load lower limit.
9479  * // {Eq_converter_activityLowerLimitPartLoad}
9480  Eq_converter_activityLowerLimitPartLoad(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity)
9481    $( converter_usedTechAct(nodesModelSel,yearsSel,converter_techs,vintage,activity)
9482          and (converter_hasMinLoad(converter_techs, vintage)
9483                or converter_hasMaxLoad(converter_techs, vintage))
9484          and not converter_techParam(converter_techs,vintage,"mipDetailedPartialLoad"))
9485      ..
9486      converter_activity(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity)
9487    =g=
9488    max(converter_activityRequirements(converter_techs,vintage,activity,"minLoad"),
9489          converter_activityProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,"lower"))
9490          * converter_unitsUsingActivity_MIP(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity);
9491   
9492  * // ### Converter MIP Units Idle Online Units
9493  * // Counts idle online units at every time step
9494  * // {Eq_converter_noOnlineIdle}
9495  Eq_converter_noOnlineIdle(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
9496    $( converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
9497          and (converter_hasMinLoad(converter_techs, vintage)
9498              or converter_hasMaxLoad(converter_techs, vintage)
9499              or converter_hasConstantFluxInActivity(converter_techs,vintage))
9500          and not converter_techParam(converter_techs,vintage,"mipDetailedPartialLoad"))
9501      ..
9502      converter_unitsOnline(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
9503      =e=
9504      sum(activity$converter_usedAct(converter_techs,vintage,activity),
9505            converter_unitsUsingActivity_MIP(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity));
9506   
9507  * // ### Converter MIP Units Idle Online Units Partial load
9508  * // Counts idle online units at every time step
9509  * // {Eq_converter_noOnlineIdleDetailedPartLoad}
9510  Eq_converter_noOnlineIdleDetailedPartLoad(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
9511    $( converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
9512          and (converter_hasMinLoad(converter_techs, vintage)
9513                  or converter_hasMaxLoad(converter_techs, vintage))
9514          and converter_techParam(converter_techs,vintage,"mipDetailedPartialLoad"))
9515      ..
9516      converter_unitsOnline(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
9517      =l=
9518      sum(activity$converter_usedAct(converter_techs,vintage,activity),
9519            converter_unitsUsingActivity_MIP(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity));
9520   
9521  * // ### Converter MIP activity model limit
9522  * // Converter activity model limit
9523  * // {Eq_converter_activityModeLimit}
9524  Eq_converter_activityModeLimit(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity)
9525    $( converter_usedTechAct(nodesModelSel,yearsSel,converter_techs,vintage,activity)
9526          and (converter_hasMinLoad(converter_techs, vintage)
9527                or converter_hasMaxLoad(converter_techs, vintage))
9528          and converter_techParam(converter_techs,vintage,"mipDetailedPartialLoad"))
9529      ..
9530      converter_unitsOnline(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
9531      =g=
9532      converter_unitsUsingActivity_MIP(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity);
9533   
9534  * ==== model definition ====
9535   
9536  Model M_converter
9537  /
9538    Eq_converter_unitsBalance
9539    Eq_converter_unitsFixedDecom
9540    Eq_converter_unitsFreeDecom
9541    Eq_converter_unitsUpperLimit
9542    Eq_converter_unitsLowerLimit
9543    Eq_converter_unitsFixedLimit
9544    Eq_converter_unitsTotalMIP
9545    Eq_converter_unitsOnlineMIP
9546    Eq_converter_activityUpperLimit
9547    Eq_converter_activityLowerLimit
9548    Eq_converter_activityFixedLimit
9549    Eq_converter_rampPos
9550    Eq_converter_rampNeg
9551    Eq_converter_rampLimit
9553    Eq_converter_unitsOnline
9554    Eq_converter_unitsOnlineUC
9556    Eq_converter_activityStartups
9557    Eq_converter_activityShutdowns
9558    Eq_converter_limitStartups
9559    Eq_converter_minUptime
9560    Eq_converter_minDowntime
9561    Eq_converter_activityUpperLimitDetailedPartLoadMinReq
9562    Eq_converter_activityUpperLimitDetailedPartLoadMaxReq
9563    Eq_converter_activityLowerLimitDetailedPartLoadMinReq
9564    Eq_converter_activityUpperLimitPartLoad
9565    Eq_converter_activityLowerLimitPartLoad
9566    Eq_converter_noOnlineIdle
9567    Eq_converter_noOnlineIdleDetailedPartLoad
9568    Eq_converter_activityModeLimit
9569  /;
INCLUDE    C:\Local\REMix\framework\remix\framework\model\source\core\storage.gms
9571  * SPDX-FileCopyrightText: Copyright (c) 2023 German Aerospace Center (DLR)
9572  * SPDX-License-Identifier: BSD-3-Clause
9573   
9574  * // # core_storage
9575  * // The equations in this file describe the storages in the model.
9576   
9577  * // ## Variables
9578  * // {special_table_storage_variables}
10058   
10059   
10060  * === SoC mappings ===
10061  set storage_usedTechSoCState(storage_techs,vintage,soc_statesIn);
10062  storage_usedTechSoCState(storage_techs,vintage,soc_states(soc_statesIn))
10063      $(storage_SoCParam(storage_techs,vintage,soc_states,"eRate") > 0
10064        and storage_SoCParam(storage_techs,vintage,soc_states,"cRate") > 0)
10065      = yes;
10066   
10067  set storage_validSoCRange(storage_techs,vintage);
10068  storage_validSoCRange(storage_techs,vintage)
10069      = smax(soc_states$storage_usedTechSoCState(storage_techs,vintage,soc_states), storage_SoCParam(storage_techs,vintage,soc_states,"SoC")) = 1
10070        and smin(soc_states$storage_usedTechSoCState(storage_techs,vintage,soc_states), storage_SoCParam(storage_techs,vintage,soc_states,"SoC")) = 0;
10071   
10072  * === Translate SoC parameters to ordered SoC-set ===
10073  * set ordered_socs / soc1*soc20 /;
10074  * alias(soc_states, soc_states_c);
10075  * parameter storage_SoCParam_ordered(storage_techs,vintage,ordered_socs,pc_storage_SoCParam);
10076  * storage_SoCParam_ordered(storage_techs,vintage,ordered_socs,pc_storage_SoCParam)
10077  *     $storage_validSoCRange(storage_techs,vintage)
10078  *     = sum(soc_states$(ord(ordered_socs) = sum(soc_states_c$(storage_SoCParam(storage_techs,vintage,soc_states_c,"SoC") <= storage_SoCParam(storage_techs,vintage,soc_states,"SoC")
10079  *                                                            and storage_usedTechSoCState(storage_techs,vintage,soc_states_c)), 1)
10080  *                       and storage_usedTechSoCState(storage_techs,vintage,soc_states)),
10081  *           storage_SoCParam(storage_techs,vintage,soc_states,pc_storage_SoCParam));
10082  *
10083  * set storage_usedTechSoCStateOrdered(storage_techs,vintage,ordered_socs);
10084  * storage_usedTechSoCStateOrdered(storage_techs,vintage,ordered_socs)
10085  *     $(storage_SoCParam_ordered(storage_techs,vintage,ordered_socs,"eRate") > 0
10086  *       and storage_SoCParam_ordered(storage_techs,vintage,ordered_socs,"cRate") > 0)
10087  *     = yes;
10088   
10089  parameter storage_bigM(storage_techs,vintage);
10090  storage_bigM(storage_techs,vintage) = smax((nodesModel,years), storage_reservoirParam(nodesModel,years,storage_techs,"unitsUpperLimit"));
10091  storage_bigM(storage_techs,vintage)$(storage_bigM(storage_techs,vintage) = INF) = 10000;
10092  storage_bigM(storage_techs,vintage)$(storage_bigM(storage_techs,vintage) = 0) = 10000;
10093   
10094  * === calculate the number of years represented by single year to calc ===
10095  alias(yearsToCalc, yearsToCalc_a)
10096  parameter representedYears(years);
10097  representedYears(years) = 0.5 *(smin(yearsToCalc$(yearsToCalc.val > years.val or yearsToCalc.val = smax(yearsToCalc_a, yearsToCalc_a.val)), yearsToCalc.val)
10098                                  - smax(yearsToCalc$(yearsToCalc.val < years.val or yearsToCalc.val = smin(yearsToCalc_a, yearsToCalc_a.val)), yearsToCalc.val));
10099   
10100  * ==== calculation of mappings ====
10101   
10102  * Technologies with a lifeTime > 0 are available
10103  set storage_availTech(nodesModel,years,storage_techs,vintage);
10104  storage_availTech(nodesModel,years,storage_techs,vintage)
10105      $(vintage.val = smax(vintage_a$(vintage_a.val <= years.val
10106          and storage_techParam(storage_techs,vintage_a,"lifeTime") > 0), vintage_a.val)) = yes;
10107   
10108  * Technologies to optimize become unavailable if they have an unitsUpperLimit of 0
10109  storage_availTech(nodesModel,years,storage_techs,vintage)
10110      $(yearsToCalc(years) and storage_reservoirParam(nodesModel,years,storage_techs,"unitsUpperLimit") = 0 ) = no;
10111   
10112  * Technologies already built become unavailable if they have an unitsBuild of 0
10113  storage_availTech(nodesModel,years,storage_techs,vintage)
10114      $( ( not yearsToCalc(years)) and storage_reservoirParam(nodesModel,years,storage_techs,"unitsBuild") = 0 ) = no;
10115   
10116  * Used technologies are available technologies over their technical lifeTime
10117  set storage_usedTech(nodesModel,years,storage_techs,vintage);
10118  storage_usedTech(nodesModel,years,storage_techs,vintage)
10119      $(vintage.val <= years.val
10120          and years.val < smax(years_a$storage_availTech(nodesModel,years_a,storage_techs,vintage),
10121                                              years_a.val + storage_techParam(storage_techs,vintage,"lifeTime"))
10122          ) = yes;
10123   
10124  * Technologies have to be decomissioned in the interval of first avail + lifetime to last avail + lifetime
10125  set storage_decomTech(nodesModel,years,storage_techs,vintage);
10126  storage_decomTech(nodesModel,years,storage_techs,vintage)
10127    $(sum(years_a$storage_usedTech(nodesModel,years_a,storage_techs,vintage), 1)
10128      and sum(yearsToCalc
10129        $(sameas(years, yearsToCalc)
10130          and yearsToCalc.val >= smin(years_a$storage_availTech(nodesModel,years_a,storage_techs,vintage), years_a.val) + storage_techParam(storage_techs,vintage,"lifeTime")
10131          and yearsToCalc.val <= smax(years_a$storage_availTech(nodesModel,years_a,storage_techs,vintage), years_a.val) + storage_techParam(storage_techs,vintage,"lifeTime")), 1))
10132    = yes;
10133   
10134  * Extend the decom frame to the year after the last year of usedTech
10135  storage_decomTech(nodesModel,yearsToCalc,storage_techs,vintage)
10136    $(storage_usedTech(nodesModel,yearsToCalc-1,storage_techs,vintage)
10137      and storage_decomTech(nodesModel,yearsToCalc-1,storage_techs,vintage))
10138    = yes;
10139   
10140  * Mapping for used commodities
10141  set storage_usedCom(storage_techs,vintage,commodity);
10142  option storage_usedCom < storage_sizeParam;
10143   
10144  set storage_usedTechCom(nodesModel,years,storage_techs,vintage,commodity);
10145  storage_usedTechCom(nodesModel,years,storage_techs,vintage,commodity)
10146      $(storage_usedTech(nodesModel,years,storage_techs,vintage)
10147          and storage_usedCom(storage_techs,vintage,commodity))
10148      = yes;
10149   
10150   
10151  * // ## Load units from gdx file
10153   
10154  * ==== aggregation of profiles ====
10155  * derive upper and lower profiles then aggregate
10156  set storage_level_hasProfileIn(nodesData,years,storage_techs,pc_storage_levelProfile);
10157  option storage_level_hasProfileIn < storage_levelProfileIn;
10158   
10159  set storage_level_hasProfile(nodesModel,years,storage_techs,pc_storage_levelProfile);
10160  storage_level_hasProfile(nodesModelToCalc,yearsToCalc,storage_techs,pc_storage_levelProfile)
10161      = sum(nodesData$aggregateNodesModel(nodesData,nodesModelToCalc),
10162              storage_level_hasProfileIn(nodesData,yearsToCalc,storage_techs,pc_storage_levelProfile));
10163   
10164  * weighted average for a real sum of units upper limits, plain average if one region has an upper limit of inf
10165  parameter storage_levelProfile(timeModel,nodesModel,years,storage_techs,vintage,pc_storage_levelProfile);
10166  storage_levelProfile(timeModelToCalc,storage_usedTech(nodesModelToCalc,yearsToCalc,storage_techs,vintage),"upper")
10167      = storage_techParam(storage_techs,vintage,"levelUpperLimit");
10168  storage_levelProfile(timeModelToCalc,storage_usedTech(nodesModelToCalc,yearsToCalc,storage_techs,vintage),"lower")
10169      = storage_techParam(storage_techs,vintage,"levelLowerLimit");
10170   
10171  set storage_finiteUnitLimit(nodesModelToCalc,yearsToCalc,storage_techs);
10172  storage_finiteUnitLimit(nodesModelToCalc,yearsToCalc,storage_techs) = sum(nodesData$aggregateNodesModel(nodesData,nodesModelToCalc), storage_reservoirParamIn(nodesData,yearsToCalc,storage_techs,"unitsUpperLimit")) > 0
10173                                                   and sum(nodesData$aggregateNodesModel(nodesData,nodesModelToCalc), storage_reservoirParamIn(nodesData,yearsToCalc,storage_techs,"unitsUpperLimit")) < inf;
10174   
10175  storage_levelProfile(timeModelToCalc,storage_usedTech(nodesModelToCalc,yearsToCalc,storage_techs,vintage),pc_storage_levelProfile)
10176      $( storage_level_hasProfile(nodesModelToCalc,yearsToCalc,storage_techs,pc_storage_levelProfile)
10177          and storage_finiteUnitLimit(nodesModelToCalc,yearsToCalc,storage_techs))
10178      = sum(nodesData$aggregateNodesModel(nodesData,nodesModelToCalc),
10179              sum(timeData$timeMapping(timeData,timeModelToCalc),
10180                    storage_levelProfileIn(timeData,nodesData,yearsToCalc,storage_techs,pc_storage_levelProfile))
10181                / timeLength(timeModelToCalc)
10182              * storage_reservoirParamIn(nodesData,yearsToCalc,storage_techs,"unitsUpperLimit"))
10183      / sum(nodesData$aggregateNodesModel(nodesData,nodesModelToCalc),
10184              storage_reservoirParamIn(nodesData,yearsToCalc,storage_techs,"unitsUpperLimit"));
10185   
10186  storage_levelProfile(timeModelToCalc,storage_usedTech(nodesModelToCalc,yearsToCalc,storage_techs,vintage),pc_storage_levelProfile)
10187      $( storage_level_hasProfile(nodesModelToCalc,yearsToCalc,storage_techs,pc_storage_levelProfile)
10188          and sum(nodesData$aggregateNodesModel(nodesData,nodesModelToCalc),
10189                      storage_reservoirParamIn(nodesData,yearsToCalc,storage_techs,"unitsUpperLimit")) = inf )
10190      = sum(nodesData$(aggregateNodesModel(nodesData,nodesModelToCalc)
10191                      and storage_reservoirParamIn(nodesData,yearsToCalc,storage_techs,"unitsUpperLimit") = inf ),
10192              sum(timeData$timeMapping(timeData,timeModelToCalc),
10193                    storage_levelProfileIn(timeData,nodesData,yearsToCalc,storage_techs,pc_storage_levelProfile))
10194                / timeLength(timeModelToCalc))
10195      / sum(nodesData$(aggregateNodesModel(nodesData,nodesModelToCalc)
10196                      and storage_reservoirParamIn(nodesData,yearsToCalc,storage_techs,"unitsUpperLimit") = inf ), 1);
10197   
10198  * for fixed profiles overwrite upper and lower profile
10199  storage_levelProfile(timeModelToCalc,nodesModelToCalc,yearsToCalc,storage_techs,vintage,"lower")
10200      $storage_level_hasProfile(nodesModelToCalc,yearsToCalc,storage_techs,"fixed")
10201      = storage_levelProfile(timeModelToCalc,nodesModelToCalc,yearsToCalc,storage_techs,vintage,"fixed");
10202   
10203  storage_levelProfile(timeModelToCalc,nodesModelToCalc,yearsToCalc,storage_techs,vintage,"upper")
10204      $storage_level_hasProfile(nodesModelToCalc,yearsToCalc,storage_techs,"fixed")
10205      = storage_levelProfile(timeModelToCalc,nodesModelToCalc,yearsToCalc,storage_techs,vintage,"fixed");
10206   
10207   
10208  * ==== parameter modifications ====
10209  storage_reservoirParam(nodesModel,years,storage_techs,"unitsLowerLimit")
10210          $sum(vintage, storage_techParam(storage_techs,vintage,"mipUnits"))
10211      = floor(storage_reservoirParam(nodesModel,years,storage_techs,"unitsLowerLimit"));
10212  storage_reservoirParam(nodesModel,years,storage_techs,"unitsUpperLimit")
10213          $sum(vintage, storage_techParam(storage_techs,vintage,"mipUnits"))
10214      = ceil(storage_reservoirParam(nodesModel,years,storage_techs,"unitsUpperLimit"));
10215   
10216   
10217  * ==== definition of variables ====
10218   
10219  * Initialise variables for unitsBuild
10220  storage_unitsBuild.l(nodesModel,years,storage_techs,vintage)
10221      $storage_availTech(nodesModel,years,storage_techs,vintage)
10222      = storage_reservoirParam(nodesModel,years,storage_techs,"unitsBuild");
10223  storage_unitsBuild.lo(nodesModel,yearsToCalc,storage_techs,vintage)
10224      $storage_availTech(nodesModel,yearsToCalc,storage_techs,vintage)
10225      = storage_unitsBuild.l(nodesModel,yearsToCalc,storage_techs,vintage);
10226  storage_unitsBuild.fx(nodesModel,years,storage_techs,vintage)
10227      $storage_reservoirParam(nodesModel,years,storage_techs,"noExpansion")
10228      = storage_unitsBuild.l(nodesModel,years,storage_techs,vintage);
10229   
10230  * Initialise variables for unitsDecom
10231  storage_unitsDecom.l(nodesModel,years,storage_techs,vintage)
10232      $(storage_decomTech(nodesModel,years,storage_techs,vintage)
10233        and years.val < sum(yearsToCalc$(ord(yearsToCalc) = 1), yearsToCalc.val))
10234      = sum((years_a,years_aa)$(sameas(years-1, years_aa)
10235                        and years_a.val > years_aa.val - storage_techParam(storage_techs,vintage,'lifeTime')
10236                        and years_a.val <= years.val - storage_techParam(storage_techs,vintage,'lifeTime')
10237                        and storage_availTech(nodesModel,years_a,storage_techs,vintage)),
10238          storage_unitsBuild.l(nodesModel,years_a,storage_techs,vintage));
10239   
10240  storage_unitsDecom.l(nodesModel,yearsToCalc,storage_techs,vintage)
10241    $storage_decomTech(nodesModel,yearsToCalc,storage_techs,vintage)
10242    = sum(years$
10243          (years.val < sum(yearsToCalc_a$(ord(yearsToCalc_a) = 1), yearsToCalc_a.val)
10244            and storage_availTech(nodesModel,years,storage_techs,vintage)
10245            and years.val > sum(years_a$sameas(years_a, yearsToCalc-1), years_a.val) - storage_techParam(storage_techs,vintage,'lifeTime')
10246            and years.val <= yearsToCalc.val - storage_techParam(storage_techs,vintage,'lifeTime')),
10247        storage_unitsBuild.l(nodesModel,years,storage_techs,vintage))
10248      + sum(yearsToCalc_a$
10249          (yearsToCalc_a.val < sum(yearsToCalc_aa$(ord(yearsToCalc_aa) > 1), yearsToCalc_a.val)
10250            and storage_availTech(nodesModel,yearsToCalc_a,storage_techs,vintage)
10251            and yearsToCalc_a.val > sum(years_a$sameas(years_a, yearsToCalc-1), years_a.val) - storage_techParam(storage_techs,vintage,'lifeTime')
10252            and yearsToCalc_a.val <= yearsToCalc.val - storage_techParam(storage_techs,vintage,'lifeTime')),
10253        storage_unitsBuild.l(nodesModel,yearsToCalc_a,storage_techs,vintage));
10254        ;
10255   
10256  storage_unitsDecom.lo(nodesModel,yearsToCalc,storage_techs,vintage)
10257      $(storage_usedTech(nodesModel,yearsToCalc,storage_techs,vintage)
10258        and not storage_techParam(storage_techs,vintage,"freeDecom"))
10259      = storage_unitsDecom.l(nodesModel,yearsToCalc,storage_techs,vintage)
10260   
10261  * Calculate planned unit expansion
10262  parameter storage_unitsPlanned(nodesModel,years,storage_techs,vintage);
10263  storage_unitsPlanned(nodesModel,years,storage_techs,vintage) = 0;
10264  loop(years,
10265    storage_unitsPlanned(nodesModel,years,storage_techs,vintage)
10266      =
10267      storage_unitsPlanned(nodesModel,years-1,storage_techs,vintage)
10268          $storage_usedTech(nodesModel,years-1,storage_techs,vintage)
10269      + storage_unitsBuild.l(nodesModel,years,storage_techs,vintage)
10270          $storage_availTech(nodesModel,years,storage_techs,vintage)
10271      - storage_unitsDecom.l(nodesModel,years,storage_techs,vintage)
10272          $storage_usedTech(nodesModel,years,storage_techs,vintage);
10273  );
10274   
10275  * Set initial state for planned units
10276  storage_unitsTotal.l(nodesModel,years,storage_techs,vintage)
10277    = storage_unitsPlanned(nodesModel,years,storage_techs,vintage)
10278   
10279  * Calculate if planned unit expansion is bounded by upper and lower limits
10280  set storage_unitBoundsFixed(nodesModel,years,storage_techs);
10281  storage_unitBoundsFixed(nodesModel,years,storage_techs)
10282    $(sum(vintage$storage_usedTech(nodesModel,years,storage_techs,vintage),
10283          storage_unitsPlanned(nodesModel,years,storage_techs,vintage))
10284      = storage_reservoirParam(nodesModel,years,storage_techs,"unitsUpperLimit")
10285    and sum(vintage$storage_usedTech(nodesModel,years,storage_techs,vintage),
10286          storage_unitsPlanned(nodesModel,years,storage_techs,vintage))
10287      = storage_reservoirParam(nodesModel,years,storage_techs,"unitsLowerLimit"))
10288    = yes;
10289   
10290  * Fix unitsBuild, unitsDecom, unitsTotal if levels are predetermined by upper and lower limits
10291  storage_unitsBuild.fx(nodesModel,years,storage_techs,vintage)
10292    $(storage_availTech(nodesModel,years,storage_techs,vintage)
10293      and storage_unitBoundsFixed(nodesModel,years,storage_techs))
10294    = storage_unitsBuild.l(nodesModel,years,storage_techs,vintage);
10295  storage_unitsDecom.fx(nodesModel,years,storage_techs,vintage)
10296    $(storage_usedTech(nodesModel,years,storage_techs,vintage)
10297      and storage_unitBoundsFixed(nodesModel,years,storage_techs))
10298    = storage_unitsDecom.l(nodesModel,years,storage_techs,vintage);
10299  storage_unitsTotal.fx(nodesModel,years,storage_techs,vintage)
10300    $(storage_usedTech(nodesModel,years,storage_techs,vintage)
10301      and storage_unitBoundsFixed(nodesModel,years,storage_techs))
10302    = storage_unitsTotal.l(nodesModel,years,storage_techs,vintage);
10303   
10304  storage_unitsTotal_MIP.up(nodesModel,years,storage_techs,vintage)
10305      $(storage_usedTech(nodesModel,years,storage_techs,vintage)
10306        and storage_techParam(storage_techs,vintage,"mipUnits") = 1)
10307      = storage_reservoirParam(nodesModel,years,storage_techs,"unitsUpperLimit");
10308   
10309  * Add parameter for fixing capacities during myopic runs
10310  parameter storage_unitsDelta(nodesModel,years,storage_techs);
10311   
10312   
10313  * ==== declaration of equations ====
10314   
10315  equations
10316    Eq_storage_unitsBalance(nodesModel,years,storage_techs,vintage
10317      ) "Ensures the units balance over the planning period."
10318    Eq_storage_unitsFixedDecom(nodesModel,years,storage_techs,vintage
10319      ) "Restricts the fixed decommissioning of units over the planning period."
10320    Eq_storage_unitsFreeDecom(nodesModel,years,storage_techs,vintage
10321      ) "Restricts the free decommissioning of units over the planning period."
10322    Eq_storage_unitsUpperLimit(nodesModel,years,storage_techs
10323      ) "Upper bound for the total number of units."
10324    Eq_storage_unitsLowerLimit(nodesModel,years,storage_techs
10325      ) "Lower bound for the total number of units."
10326    Eq_storage_unitsTotalMIP(nodesModel,years,storage_techs,vintage
10327      ) "Fixes the total number of units to the corresponding integer variable."
10328   
10329    Eq_storage_levelUpperLimit(timeModel,nodesModel,years,storage_techs,vintage,commodity
10330      ) "Upper bound for the total number of units."
10331    Eq_storage_levelUpperLimit_degradation(timeModel,nodesModel,years,storage_techs,vintage,commodity
10332      ) "Upper bound for the total number of units if the storage technology accounts for degradation."
10333    Eq_storage_levelLowerLimit(timeModel,nodesModel,years,storage_techs,vintage,commodity
10334      ) "Lower bound for the total number of units."
10335    Eq_storage_losses(timeModel,nodesModel,years,storage_techs,vintage,commodity
10336      ) "Stored commodities lost due to self discharge."
10337    Eq_storage_unitsBalanceStates(nodesModel,years,storage_techs,vintage
10338      ) "Currently available units must have been built at some point in time and have some state of degradation."
10339    Eq_storage_unitsUpperLimitPerState(nodesModel,years,yearsCom,storage_techs,vintage
10340      ) "There cannot be more units from a certain year than the amount built in that year."
10341    Eq_storage_unitsStatesNoRecovery(nodesModel,years,yearsCom,storage_techs,vintage,degradation_states
10342      ) "There is no recovery."
10343    Eq_storage_cRateLimit(timeModel,nodesModel,years,storage_techs,vintage,commodity
10344      ) "Limit charging rate based on unit capacity."
10345    Eq_storage_eRateLimit(timeModel,nodesModel,years,storage_techs,vintage,commodity
10346      ) "Limit discharging rate based on unit capacity."
10347    Eq_storage_charge(timeModel,nodesModel,years,storage_techs,vintage,commodity
10348      ) "Positive change in state of charge is influx."
10349    Eq_storage_discharge(timeModel,nodesModel,years,storage_techs,vintage,commodity
10350      ) "Negative change in state of charge is outflux."
10351   
10352    Eq_storage_levelStateSum(timeModel,nodesModel,years,storage_techs,vintage,commodity
10353      ) "Sum of degradation class storage levels is the global level."
10354    Eq_storage_levelUpperLimitPerAge(timeModel,nodesModel,years,yearsCom,storage_techs,vintage,commodity
10355      ) "Upper bound for units of a certain state."
10356    Eq_storage_chargingPerAge(timeModel,nodesModel,years,yearsCom,storage_techs,vintage,commodity
10357      ) "Positive change in state of charge is influx for each degradation class."
10358    Eq_storage_chargeBasedDegradationDistribution(nodesModel,years,yearsCom,storage_techs,vintage,commodity
10359      ) "Determine degradation states of storage units."
10360    Eq_storage_unitsDecomStateSum(nodesModel,years,storage_techs,vintage
10361      ) "All decomminsioned units must have a degradation state."
10362    Eq_storage_unitsDegradation(nodesModel,years,yearsCom,storage_techs,vintage,degradation_states
10363      ) "Only allow one range of degradation states per year and age group."
10364    Eq_storage_unitsDegradation_onlyOneRange(nodesModel,years,yearsCom,storage_techs,vintage
10365      ) "Limit usable degradation states to one range, i.e., two neighboring states."
10366   
10367    Eq_storage_unitsSoC_sum(timeModel,nodesModel,years,storage_techs,vintage
10368      ) "Every unit has a state of charge."
10369    Eq_storage_levelSoC(timeModel,nodesModel,years,storage_techs,vintage,commodity
10370      ) "Every unit has a state of charge."
10371    Eq_storage_unitsSoC(timeModel,nodesModel,years,storage_techs,vintage,soc_statesIn
10372      ) "Number of units in particular SoC."
10373    Eq_storage_unitsSoC_onlyOneRange(timeModel,nodesModel,years,storage_techs,vintage
10374      ) "Limit usable SoC states to one range, i.e., two neighboring states."
10375   
10376    Eq_storage_cRateLimit_SoC(timeModel,nodesModel,years,storage_techs,vintage,commodity
10377      ) "Limit charging rate based on unit capacity."
10378    Eq_storage_eRateLimit_SoC(timeModel,nodesModel,years,storage_techs,vintage,commodity
10379      ) "Limit discharging rate based on unit capacity."
10380    ;
10381   
10382  * ==== equation definition ====
10383  * // ## Equations
10384  * // ### Storage Units Balance
10385  * // Ensures that the total units are consistent with the built and decommissioned units.
10386  * // {Eq_storage_unitsBalance}
10387  Eq_storage_unitsBalance(nodesModelSel,yearsSel,storage_techs,vintage)
10388      $((storage_usedTech(nodesModelSel,yearsSel,storage_techs,vintage)
10389            or sum(years$sameas(years,yearsSel), storage_usedTech(nodesModelSel,years-1,storage_techs,vintage)))
10390          and not storage_unitBoundsFixed(nodesModelSel,yearsSel,storage_techs))
10391      ..
10392      storage_unitsTotal(nodesModelSel,yearsSel,storage_techs,vintage)
10393      =e=
10394          sum(yearsToCalc$(ord(yearsToCalc) = 1 and sameas(yearsToCalc, yearsSel)),
10395        sum(years$sameas(years, yearsToCalc),
10396          storage_unitsTotal(nodesModelSel,years-1,storage_techs,vintage)
10397            $storage_usedTech(nodesModelSel,years-1,storage_techs,vintage)))
10398      + sum((yearsToCalc)$(ord(yearsToCalc) > 1 and sameas(yearsToCalc, yearsSel)),
10399        storage_unitsTotal(nodesModelSel,yearsToCalc-1,storage_techs,vintage)
10400          $storage_usedTech(nodesModelSel,yearsToCalc-1,storage_techs,vintage))
10401      + storage_unitsBuild(nodesModelSel,yearsSel,storage_techs,vintage)
10402          $storage_availTech(nodesModelSel,yearsSel,storage_techs,vintage)
10403      - storage_unitsDecom(nodesModelSel,yearsSel,storage_techs,vintage)
10404          $storage_usedTech(nodesModelSel,yearsSel,storage_techs,vintage);
10405   
10406  * // ### Storage Units Fixed Decommission
10407  * // Restricts the fixed decommissioning of storage units over the planning period.
10408  * // {Eq_storage_unitsFixedDecom}
10409  Eq_storage_unitsFixedDecom(nodesModelSel,yearsSel,storage_techs,vintage)
10410      $(storage_decomTech(nodesModelSel,yearsSel,storage_techs,vintage)
10411          and not storage_techParam(storage_techs,vintage,"freeDecom") = 1
10412          and not storage_unitBoundsFixed(nodesModelSel,yearsSel,storage_techs))
10413      ..
10414      storage_unitsDecom(nodesModelSel,yearsSel,storage_techs,vintage)
10415      =e=
10416      sum(years$
10417          (storage_availTech(nodesModelSel,years,storage_techs,vintage)
10418            and years.val > sum(yearsToCalc$sameas(yearsToCalc+1, yearsSel), yearsToCalc.val) - storage_techParam(storage_techs,vintage,'lifeTime')
10419            and years.val <= yearsSel.val - storage_techParam(storage_techs,vintage,'lifeTime')),
10420        storage_unitsBuild(nodesModelSel,years,storage_techs,vintage));
10421   
10422  * // ### Storage Units Free Decomission
10423  * // Restricts the free decommissioning of storage units over the planning period.
10424  * // {Eq_storage_unitsFreeDecom}
10425  Eq_storage_unitsFreeDecom(nodesModelSel,yearsSel,storage_techs,vintage)
10426      $((storage_decomTech(nodesModelSel,yearsSel,storage_techs,vintage)
10427          or storage_usedTech(nodesModelSel,yearsSel,storage_techs,vintage))
10428          and storage_techParam(storage_techs,vintage,"freeDecom") = 1)
10429      ..
10430      sum(years$
10431            ((storage_decomTech(nodesModelSel,years,storage_techs,vintage)
10432              or storage_usedTech(nodesModelSel,years,storage_techs,vintage))
10433              and years.val < sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)),
10434          storage_unitsDecom(nodesModelSel,years,storage_techs,vintage))
10435      + sum(yearsToCalc$
10436            ((storage_decomTech(nodesModelSel,yearsToCalc,storage_techs,vintage)
10437              or storage_usedTech(nodesModelSel,yearsToCalc,storage_techs,vintage))
10438              and yearsToCalc.val >= sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
10439              and yearsToCalc.val <= yearsSel.val),
10440          storage_unitsDecom(nodesModelSel,yearsToCalc,storage_techs,vintage))
10441      =g=
10442      sum(years$
10443            (storage_availTech(nodesModelSel,years,storage_techs,vintage)
10444              and years.val < sum(yearsToCalc$(ord(yearsToCalc)=1), yearsToCalc.val) - storage_techParam(storage_techs,vintage,'lifeTime')),
10445          storage_unitsBuild(nodesModelSel,years,storage_techs,vintage))
10446      + sum(yearsToCalc$
10447            (storage_availTech(nodesModelSel,yearsToCalc,storage_techs,vintage)
10448              and yearsToCalc.val >= sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
10449              and yearsToCalc.val <= yearsSel.val - storage_techParam(storage_techs,vintage,'lifeTime')),
10450          storage_unitsBuild(nodesModelSel,yearsToCalc,storage_techs,vintage));
10451   
10452  * // ### Storage Units Lower Limit
10453  * // Lower bound for the total number of storage units.
10454  * // {Eq_storage_unitsLowerLimit}
10455  Eq_storage_unitsLowerLimit(nodesModelSel,yearsSel,storage_techs)
10456      $(storage_reservoirParam(nodesModelSel,yearsSel,storage_techs,'unitsLowerLimit') > 0 )
10457      ..
10458      sum(vintage$storage_usedTech(nodesModelSel,yearsSel,storage_techs,vintage),
10459          storage_unitsTotal(nodesModelSel,yearsSel,storage_techs,vintage))
10460      =g=
10461      storage_reservoirParam(nodesModelSel,yearsSel,storage_techs,"unitsLowerLimit");
10462   
10463  * // ### Storage Units Upper Limit
10464  * // Upper bound for the total number of storage units.
10465  * // {Eq_storage_unitsUpperLimit}
10466  Eq_storage_unitsUpperLimit(nodesModelSel,yearsSel,storage_techs)
10467      $(storage_reservoirParam(nodesModelSel,yearsSel,storage_techs,'unitsUpperLimit') >= 0
10468          and storage_reservoirParam(nodesModelSel,yearsSel,storage_techs,'unitsUpperLimit') < +inf )
10469      ..
10470      sum(vintage$storage_usedTech(nodesModelSel,yearsSel,storage_techs,vintage),
10471          storage_unitsTotal(nodesModelSel,yearsSel,storage_techs,vintage))
10472      =l=
10473      storage_reservoirParam(nodesModelSel,yearsSel,storage_techs,"unitsUpperLimit");
10474   
10475  * // ### Storage Units Total MIP
10476  * // Fixes the total number of storage units to the corresponding integer variable.
10477  * // {Eq_storage_unitsTotalMIP}
10478  Eq_storage_unitsTotalMIP(nodesModelSel,yearsSel,storage_techs,vintage)
10479      $( storage_usedTech(nodesModelSel,yearsSel,storage_techs,vintage)
10480          and storage_techParam(storage_techs,vintage,"mipUnits") = 1 )
10481      ..
10482      storage_unitsTotal(nodesModelSel,yearsSel,storage_techs,vintage)
10483      =e=
10484      storage_unitsTotal_MIP(nodesModelSel,yearsSel,storage_techs,vintage);
10485   
10486  * // ### Storage Level Lower Limit
10487  * // Lower limit on the storage level.
10488  * // {Eq_storage_levelLowerLimit}
10489  Eq_storage_levelLowerLimit(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
10490      $(storage_usedTechCom(nodesModelSel,yearsSel,storage_techs,vintage,commodity)
10491          and storage_levelProfile(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,"lower") > 0)
10492      ..
10493      storage_level(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
10494      =g=
10495      storage_levelProfile(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,"lower")
10496      * storage_sizeParam(storage_techs,vintage,commodity,"size")
10497      * storage_unitsTotal(nodesModelSel,yearsSel,storage_techs,vintage);
10498   
10499  * // ### Storage Level Upper Limit
10500  * // Upper limit on the storage level.
10501  * // {Eq_storage_levelUpperLimit}
10502  Eq_storage_levelUpperLimit(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
10503      $(storage_usedTechCom(nodesModelSel,yearsSel,storage_techs,vintage,commodity)
10504          and not storage_hasDegradation(storage_techs,vintage)
10505          and storage_levelProfile(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,"upper") >= 0)
10506      ..
10507      storage_level(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
10508      =l=
10509      storage_levelProfile(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,"upper")
10510      * storage_sizeParam(storage_techs,vintage,commodity,"size")
10511      * storage_unitsTotal(nodesModelSel,yearsSel,storage_techs,vintage);
10512   
10513  * // ### Storage Level Upper Limit (degradation)
10514  * // Upper limit on the storage level if the storage technology accounts for degradation.
10515  * // {Eq_storage_levelUpperLimit_degradation}
10516  Eq_storage_levelUpperLimit_degradation(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
10517      $(storage_usedTechCom(nodesModelSel,yearsSel,storage_techs,vintage,commodity)
10518          and storage_hasDegradation(storage_techs,vintage)
10519          and storage_levelProfile(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,"upper") >= 0)
10520      ..
10521      storage_level(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
10522      =l=
10523      storage_levelProfile(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,"upper")
10524      * storage_sizeParam(storage_techs,vintage,commodity,"size")
10525      * sum((degradation_states,yearsCom)$storage_usedDegradation(storage_techs,vintage,degradation_states),
10526              (storage_degradationParam(storage_techs,vintage,degradation_states,"remainingCapacity")
10527                - (yearsSel.val - yearsCom.val) * storage_techParam(storage_techs,vintage,"annualDegradation"))
10528                * storage_unitsStateTracker(nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,degradation_states));
10529   
10530  * // ### Storage Unit States Sum (degradation)
10531  * // The number of units in all degradation state must match the total unit number.
10532  * // {Eq_storage_unitsBalanceStates}
10533  Eq_storage_unitsBalanceStates(nodesModelSel,yearsSel,storage_techs,vintage)
10534      $(storage_usedTech(nodesModelSel,yearsSel,storage_techs,vintage)
10535        and storage_hasDegradation(storage_techs,vintage))
10536      ..
10537      storage_unitsTotal(nodesModelSel,yearsSel,storage_techs,vintage)
10538      =e=
10539      sum((yearsCom,degradation_states)$storage_usedDegradation(storage_techs,vintage,degradation_states),
10540            storage_unitsStateTracker(nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,degradation_states));
10541   
10542  * // ### Storage Unit States Upper Limit(degradation)
10543  * // The states of all commissioned units in one year (unitsBuilt) must either still be tracked or have been decommissioned.
10544  * // {Eq_storage_unitsUpperLimitPerState}
10545  Eq_storage_unitsUpperLimitPerState(nodesModelSel,yearsSel,yearsCom,storage_techs,vintage)
10546      $(storage_usedTech(nodesModelSel,yearsSel,storage_techs,vintage)
10547          and storage_hasDegradation(storage_techs,vintage))
10548      ..
10549      sum(degradation_states$storage_usedDegradation(storage_techs,vintage,degradation_states),
10550            storage_unitsStateTracker(nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,degradation_states)
10551            + sum(years$(years.val <= yearsSel.val),
10552                  storage_unitsStateTrackerDecom(nodesModelSel,years,yearsCom,storage_techs,vintage,degradation_states)))
10553      =e=
10554      storage_unitsBuild(nodesModelSel,yearsCom,storage_techs,vintage)$(yearsCom.val <= yearsSel.val);
10555   
10556  * // ### Storage Unit States Progression (degradation)
10557  * // Unit recovery by reassigning the storage cycles to other units is disabled. Therefore, the number of units in a particular degradation state can only increase if the number in a less degraded state is decreased by at least the same amount.
10558  * // {Eq_storage_unitsStatesNoRecovery}
10559  alias(degradation_states, dc_states);
10560  Eq_storage_unitsStatesNoRecovery(nodesModelSel,yearsSel(yearsToCalc),yearsCom,storage_techs,vintage,degradation_states)
10561      $(storage_usedTech(nodesModelSel,yearsSel,storage_techs,vintage)
10562        and yearsToCalc.val > yearsCom.val
10563        and storage_usedDegradation(storage_techs,vintage,degradation_states))
10564      ..
10565      sum(dc_states$(storage_usedDegradation(storage_techs,vintage,dc_states)
10566                and storage_degradationParam(storage_techs,vintage,dc_states,"maxFullCycles") <= storage_degradationParam(storage_techs,vintage,degradation_states,"maxFullCycles")),
10567              storage_unitsStateTracker(nodesModelSel,yearsToCalc,yearsCom,storage_techs,vintage,dc_states)
10568              + sum(years$(years.val <= yearsToCalc.val), storage_unitsStateTrackerDecom(nodesModelSel,years,yearsCom,storage_techs,vintage,dc_states)))
10569      =l=
10570      sum(dc_states$(storage_usedDegradation(storage_techs,vintage,dc_states)
10571                      and storage_degradationParam(storage_techs,vintage,dc_states,"maxFullCycles") <= storage_degradationParam(storage_techs,vintage,degradation_states,"maxFullCycles")),
10572              storage_unitsStateTracker(nodesModelSel,yearsToCalc-1,yearsCom,storage_techs,vintage,dc_states)
10573              + sum(years$(years.val < yearsToCalc.val), storage_unitsStateTrackerDecom(nodesModelSel,years,yearsCom,storage_techs,vintage,dc_states)));
10574   
10575  * // ### Storage Losses
10576  * // Accumulation of storage losses.
10577  * // {Eq_storage_losses}
10578  Eq_storage_losses(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,storage_techs,vintage,commodity)
10579      $storage_usedTechCom(nodesModelSel,yearsSel,storage_techs,vintage,commodity)
10580      ..
10581      storage_losses(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
10582      =e=
10583      - storage_level(timeModelToCalc--1,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
10584        * storage_sizeParam(storage_techs,vintage,commodity,"selfdischarge")
10585      + storage_sizeParam(storage_techs,vintage,commodity,"selfdischargeAbs")
10586      + (storage_techParam(storage_techs,vintage,"chargingLoss")
10587          /(1 - storage_techParam(storage_techs,vintage,"chargingLoss")))
10588        * storage_charge(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
10589          $(storage_techParam(storage_techs,vintage,"chargingLoss") > 0)
10590      + storage_techParam(storage_techs,vintage,"dischargingLoss")
10591        * storage_discharge(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
10592          $(storage_techParam(storage_techs,vintage,"dischargingLoss") > 0)
10593      - storage_sizeParam(storage_techs,vintage,commodity,"size")
10594        * sum(soc_states$(storage_usedTechSoCState(storage_techs,vintage,soc_states)
10595                          and storage_validSoCRange(storage_techs,vintage)),
10596              storage_unitsSoC(timeModelToCalc--1,nodesModelSel,yearsSel,storage_techs,vintage,soc_states)
10597              * storage_SoCParam(storage_techs,vintage,soc_states,"SoC")
10598              * storage_SoCParam(storage_techs,vintage,soc_states,"selfdischarge"));
10599   
10600  * // ### C-Rate Limit
10601  * // The increase in storage level per time step, i.e., the charging rate, is limited relative to the storage capacity.
10602  * // {Eq_storage_cRateLimit}
10603  Eq_storage_cRateLimit(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,storage_techs,vintage,commodity)
10604      $(storage_usedTechCom(nodesModelSel,yearsSel,storage_techs,vintage,commodity)
10605        and storage_techParam(storage_techs,vintage,"maxCRate") > 0)
10606      ..
10607      storage_level(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
10608      - storage_level(timeModelToCalc--1,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
10609      =l=
10610      storage_techParam(storage_techs,vintage,"maxCRate")
10611      * storage_sizeParam(storage_techs,vintage,commodity,"size")
10612      * storage_unitsTotal(nodesModelSel,yearsSel,storage_techs,vintage);
10613   
10614  * // ### E-Rate Limit
10615  * // The decrease in storage level per time step, i.e., the discharging rate, is limited relative to the storage capacity.
10616  * // {Eq_storage_eRateLimit}
10617  Eq_storage_eRateLimit(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,storage_techs,vintage,commodity)
10618      $(storage_usedTechCom(nodesModelSel,yearsSel,storage_techs,vintage,commodity)
10619        and storage_techParam(storage_techs,vintage,"maxERate") > 0)
10620      ..
10621      storage_level(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
10622      - storage_level(timeModelToCalc--1,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
10623      =g=
10624      - storage_techParam(storage_techs,vintage,"maxERate")
10625      * storage_sizeParam(storage_techs,vintage,commodity,"size")
10626      * storage_unitsTotal(nodesModelSel,yearsSel,storage_techs,vintage);
10627   
10628  * // ### Storage Charging
10629  * // Increases in storage levels are accounted as charging amounts.
10630  * // {Eq_storage_charge}
10631  Eq_storage_charge(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,storage_techs,vintage,commodity)
10632      $(storage_usedTechCom(nodesModelSel,yearsSel,storage_techs,vintage,commodity)
10633        and storage_techParam(storage_techs,vintage,"chargingLoss") > 0)
10634      ..
10635      storage_charge(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
10636      =g=
10637      storage_level(timeModelToCalc,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
10638      - storage_level(timeModelToCalc--1,nodesModelSel,yearsSel,storage_techs,vintage,commodity);
10639   
10640  * // ### Storage Discharging
10641  * // Decreases in storage levels are accounted as discharging amounts.
10642  * // {Eq_storage_discharge}
10643  Eq_storage_discharge(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,storage_techs,vintage,commodity)
10644      $(storage_usedTechCom(nodesModelSel,yearsSel,storage_techs,vintage,commodity)
10645        and storage_techParam(storage_techs,vintage,"dischargingLoss") > 0)
10646      ..
10647      storage_discharge(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
10648      =g=
10649      storage_level(timeModelToCalc--1,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
10650      - storage_level(timeModelToCalc,nodesModelSel,yearsSel,storage_techs,vintage,commodity);
10651   
10652  * // ### Storage Level Sum (degradation)
10653  * // The storage level is accounted individually by commissioning year in the case of degradation in order to prohibit the model to assign pre-existing storage cycles to newly built storage reservoirs and thereby avoiding degradation. All those storage levels represent the total storage level.
10654  * // {Eq_storage_levelStateSum}
10655  Eq_storage_levelStateSum(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
10656      $(storage_usedTechCom(nodesModelSel,yearsSel,storage_techs,vintage,commodity)
10657        and storage_techParam(storage_techs,vintage,"usageDegradation"))
10658      ..
10659      storage_level(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
10660      =e=
10661      sum(yearsCom, storage_levelPerAge(timeModelSel,nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,commodity));
10662   
10663  * // ### Storage Level Upper Limit per Age Group (degradation)
10664  * // Upper limit on the storage level per commissioning year if the storage technology accounts for degradation.
10665  * // {Eq_storage_levelUpperLimitPerAge}
10666  Eq_storage_levelUpperLimitPerAge(timeModelSel,nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,commodity)
10667      $(storage_usedTechCom(nodesModelSel,yearsSel,storage_techs,vintage,commodity)
10668        and storage_techParam(storage_techs,vintage,"usageDegradation"))
10669      ..
10670      storage_levelPerAge(timeModelSel,nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,commodity)
10671      =l=
10672      storage_techParam(storage_techs,vintage,"levelUpperLimit")
10673      * storage_sizeParam(storage_techs,vintage,commodity,"size")
10674      * sum(degradation_states,
10675              (storage_degradationParam(storage_techs,vintage,degradation_states,"remainingCapacity")
10676                - (yearsSel.val - yearsCom.val) * storage_techParam(storage_techs,vintage,"annualDegradation"))
10677                * storage_unitsStateTracker(nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,degradation_states));
10678   
10679  * // ### Storage Cycle Distribution to Degradation States per Commissioning Year (degradation)
10680  * // The charging amounts are converted to equivalent full cycles which then must be represented by an adequate distribution of degradation states.
10681  * // {Eq_storage_chargeBasedDegradationDistribution}
10682  alias(years, prev_years);
10683  Eq_storage_chargeBasedDegradationDistribution(nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,commodity)
10684      $(storage_usedTechCom(nodesModelSel,yearsSel,storage_techs,vintage,commodity)
10685        and storage_techParam(storage_techs,vintage,"usageDegradation"))
10686      ..
10687      sum(prev_years$(prev_years.val <= yearsSel.val), representedYears(prev_years)
10688          * sum(timeModel, storage_chargePerAge(timeModel,nodesModelSel,prev_years,yearsCom,storage_techs,vintage,commodity)))
10689      =l=
10690      storage_sizeParam(storage_techs,vintage,commodity,"size")
10691      * sum(dc_states$storage_usedDegradation(storage_techs,vintage,dc_states),
10692          storage_degradationParam(storage_techs,vintage,dc_states,"maxFullCycles")
10693          * (storage_unitsStateTracker(nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,dc_states)
10694             + sum(prev_years$(prev_years.val <= yearsSel.val), storage_unitsStateTrackerDecom(nodesModelSel,prev_years,yearsCom,storage_techs,vintage,dc_states))));
10695   
10696  * // ### Storage Charging per Commissioning Year (degradation)
10697  * // Increases in storage levels are accounted as charging amounts.
10698  * // {Eq_storage_chargingPerAge}
10699  Eq_storage_chargingPerAge(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,commodity)
10700      $(storage_usedTechCom(nodesModelSel,yearsSel,storage_techs,vintage,commodity)
10701        and storage_techParam(storage_techs,vintage,"usageDegradation"))
10702      ..
10703      storage_chargePerAge(timeModelSel,nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,commodity)
10704      =g=
10705      storage_levelPerAge(timeModelToCalc,nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,commodity)
10706      - storage_levelPerAge(timeModelToCalc--1,nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,commodity);
10707   
10708  * // ### Storage Unit Decommissioning States Sum (degradation)
10709  * // The number of decommissioned units in all degradation state must match the total decommissioning unit number.
10710  * // {Eq_storage_unitsDecomStateSum}
10711  Eq_storage_unitsDecomStateSum(nodesModelSel,yearsSel,storage_techs,vintage)
10712      $(storage_techParam(storage_techs,vintage,"usageDegradation"))
10713      ..
10714      storage_unitsDecom(nodesModelSel,yearsSel,storage_techs,vintage)
10715      =e=
10716      sum((yearsCom,degradation_states)$storage_usedDegradation(storage_techs,vintage,degradation_states),
10717          storage_unitsStateTrackerDecom(nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,degradation_states));
10718   
10719  * // ### Storage Unit Sequential Degradation (degradation)
10720  * // Only active degradation ranges, i.e., two neighboring degradation states, can be used.
10721  * // {Eq_storage_unitsDegradation}
10722  alias(degradation_states, degradation_states_a, degradation_states_b);
10723  Eq_storage_unitsDegradation(nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,degradation_states)
10724      $(storage_techParam(storage_techs,vintage,"usageDegradation")
10725        and storage_techParam(storage_techs,vintage,"sequentialDegradationStates"))
10726      ..
10727      sum(degradation_states_a$((storage_degradationParam(storage_techs,vintage,degradation_states_a,"maxFullCycles") = storage_degradationParam(storage_techs,vintage,degradation_states,"maxFullCycles")
10728                        or storage_degradationParam(storage_techs,vintage,degradation_states_a,"maxFullCycles")
10729                                         = smax(degradation_states_b$(storage_degradationParam(storage_techs,vintage,degradation_states_b,"maxFullCycles") < storage_degradationParam(storage_techs,vintage,degradation_states,"maxFullCycles")
10730                                                              and storage_usedDegradation(storage_techs,vintage,degradation_states_b)),
10731                                                              storage_degradationParam(storage_techs,vintage,degradation_states_b,"maxFullCycles")))
10732                        and storage_usedDegradation(storage_techs,vintage,degradation_states_a)),
10733          storage_unitsStateTracker_activeRange(nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,degradation_states_a))
10734      * storage_bigM(storage_techs,vintage)
10735      =g=
10736      storage_unitsStateTracker(nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,degradation_states);
10737   
10738  * // ### Storage Unit Sequential Degradation Range (degradation)
10739  * // Only one degradation range can be active.
10740  * // {Eq_storage_unitsDegradation_onlyOneRange}
10741  Eq_storage_unitsDegradation_onlyOneRange(nodesModelSel,yearsSel,yearsCom,storage_techs,vintage)
10742      $(storage_techParam(storage_techs,vintage,"usageDegradation") and storage_techParam(storage_techs,vintage,"sequentialDegradationStates"))
10743      ..
10744      sum(degradation_states$storage_usedDegradation(storage_techs,vintage,degradation_states),
10745            storage_unitsStateTracker_activeRange(nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,degradation_states))
10746      =e= 1;
10747   
10748  * // ### Storage Unit Sequential State of Charge (SoC)
10749  * // Only active state of charge ranges, i.e., two neighboring states of charge, can be used.
10750  * // {Eq_storage_unitsSoC}
10751  alias(soc_states, soc_states_a, soc_states_b);
10752  Eq_storage_unitsSoC(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,storage_techs,vintage,soc_states)
10753      $(storage_validSoCRange(storage_techs,vintage) and storage_techParam(storage_techs,vintage,"sequentialSoC"))
10754      ..
10755      sum(soc_states_a$((storage_SoCParam(storage_techs,vintage,soc_states_a,"SoC") = storage_SoCParam(storage_techs,vintage,soc_states,"SoC")
10756                        or storage_SoCParam(storage_techs,vintage,soc_states_a,"SoC")
10757                                         = smax(soc_states_b$(storage_SoCParam(storage_techs,vintage,soc_states_b,"SoC") < storage_SoCParam(storage_techs,vintage,soc_states,"SoC")
10758                                                              and storage_usedTechSoCState(storage_techs,vintage,soc_states_b)),
10759                                                              storage_SoCParam(storage_techs,vintage,soc_states_b,"SoC")))
10760                        and storage_usedTechSoCState(storage_techs,vintage,soc_states_a)),
10761          storage_unitsSoC_activeRange(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,soc_states_a))
10762      * storage_bigM(storage_techs,vintage)
10763      =g=
10764      storage_unitsSoC(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,soc_states);
10765   
10766  * // ### Storage Unit Sequential State of Charge Range (SoC)
10767  * // Only one state of charge range can be active.
10768  * // {Eq_storage_unitsSoC_onlyOneRange}
10769  Eq_storage_unitsSoC_onlyOneRange(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,storage_techs,vintage)
10770      $(storage_validSoCRange(storage_techs,vintage) and storage_techParam(storage_techs,vintage,"sequentialSoC"))
10771      ..
10772      sum(soc_states$storage_usedTechSoCState(storage_techs,vintage,soc_states),
10773            storage_unitsSoC_activeRange(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,soc_states)) =e= 1;
10774   
10775  * // ### Storage Unit State of Charge Sum (SoC)
10776  * // Each storage unit must have one state of charge.
10777  * // {Eq_storage_unitsSoC_sum}
10778  Eq_storage_unitsSoC_sum(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,storage_techs,vintage)
10779      $storage_validSoCRange(storage_techs,vintage)
10780      ..
10781      storage_unitsTotal(nodesModelSel,yearsSel,storage_techs,vintage)
10782      =e=
10783      sum(soc_states$storage_usedTechSoCState(storage_techs,vintage,soc_states),
10784            storage_unitsSoC(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,soc_states));
10785   
10786  * // ### Storage Level State of Charge Sum (SoC)
10787  * // The total storage level must be represented by units in their specific states of charge.
10788  * // {Eq_storage_levelSoC}
10789  Eq_storage_levelSoC(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,storage_techs,vintage,commodity)
10790      $(storage_validSoCRange(storage_techs,vintage) and storage_usedTechCom(nodesModelSel,yearsSel,storage_techs,vintage,commodity))
10791      ..
10792      storage_level(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
10793      =e=
10794      storage_sizeParam(storage_techs,vintage,commodity,"size")
10795      * sum(soc_states$storage_usedTechSoCState(storage_techs,vintage,soc_states),
10796              storage_unitsSoC(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,soc_states)
10797              * storage_SoCParam(storage_techs,vintage,soc_states,"SoC"));
10798   
10799  * // ### C-Rate Limit (SoC)
10800  * // The increase in storage level per time step, i.e., the charging rate, is limited relative to the storage capacity. The coefficients can vary between states of charge.
10801  * // {Eq_storage_cRateLimit_SoC}
10802  Eq_storage_cRateLimit_SoC(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,storage_techs,vintage,commodity)
10803      $(storage_usedTechCom(nodesModelSel,yearsSel,storage_techs,vintage,commodity)
10804        and storage_validSoCRange(storage_techs,vintage)
10805        and sum(soc_states, storage_SoCParam(storage_techs,vintage,soc_states,"cRate")) < inf)
10806      ..
10807      storage_level(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
10808      - storage_level(timeModelToCalc--1,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
10809      =l=
10810      storage_sizeParam(storage_techs,vintage,commodity,"size")
10811      * sum(soc_states$storage_usedTechSoCState(storage_techs,vintage,soc_states),
10812                      storage_SoCParam(storage_techs,vintage,soc_states,"cRate")
10813                      * storage_unitsSoC(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,soc_states));
10814   
10815  * // ### E-Rate Limit (SoC)
10816  * // The decrease in storage level per time step, i.e., the discharging rate, is limited relative to the storage capacity. The coefficients can vary between states of charge.
10817  * // {Eq_storage_cRateLimit_SoC}
10818  Eq_storage_eRateLimit_SoC(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,storage_techs,vintage,commodity)
10819      $(storage_usedTechCom(nodesModelSel,yearsSel,storage_techs,vintage,commodity)
10820        and storage_validSoCRange(storage_techs,vintage)
10821        and sum(soc_states, storage_SoCParam(storage_techs,vintage,soc_states,"eRate")) < inf)
10822      ..
10823      storage_level(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
10824      - storage_level(timeModelToCalc--1,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
10825      =g=
10826      - storage_sizeParam(storage_techs,vintage,commodity,"size")
10827      * sum(soc_states$storage_usedTechSoCState(storage_techs,vintage,soc_states),
10828                      storage_SoCParam(storage_techs,vintage,soc_states,"eRate")
10829                      * storage_unitsSoC(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,soc_states));
10830   
10831   
10832  * ==== model definition ====
10833   
10834  Model M_storage
10835  /
10836    Eq_storage_unitsBalance
10837    Eq_storage_unitsFixedDecom
10838    Eq_storage_unitsFreeDecom
10839    Eq_storage_unitsLowerLimit
10840    Eq_storage_unitsUpperLimit
10841    Eq_storage_levelUpperLimit_degradation
10842    Eq_storage_unitsTotalMIP
10843    Eq_storage_levelLowerLimit
10844    Eq_storage_levelUpperLimit
10846    Eq_storage_losses
10848    Eq_storage_unitsBalanceStates
10849    Eq_storage_unitsUpperLimitPerState
10850    Eq_storage_unitsStatesNoRecovery
10851    Eq_storage_cRateLimit
10852    Eq_storage_eRateLimit
10853    Eq_storage_charge
10854    Eq_storage_discharge
10855    Eq_storage_levelStateSum
10856    Eq_storage_levelUpperLimitPerAge
10857    Eq_storage_chargeBasedDegradationDistribution
10858    Eq_storage_chargingPerAge
10859    Eq_storage_unitsDecomStateSum
10860    Eq_storage_unitsDegradation
10861    Eq_storage_unitsDegradation_onlyOneRange
10862   
10863    Eq_storage_unitsSoC
10864    Eq_storage_unitsSoC_sum
10865    Eq_storage_unitsSoC_onlyOneRange
10866    Eq_storage_levelSoC
10867    Eq_storage_cRateLimit_SoC
10868    Eq_storage_eRateLimit_SoC
10869  /;
INCLUDE    C:\Local\REMix\framework\remix\framework\model\source\core\transfer.gms
10871  * SPDX-FileCopyrightText: Copyright (c) 2023 German Aerospace Center (DLR)
10872  * SPDX-License-Identifier: BSD-3-Clause
10873   
10874  * // # core_transfer
10875  * // The equations in this file describe the commodity transfer in the model.
10876   
10877  * // ## Variables
10878  * // {special_table_transfer_variables}
10881   
10886   
11146   
11147  parameter transfer_linksParam(linksModel,years,transfer_techs,pc_transfer_linksParam);
11148  transfer_linksParam(linksModelToCalc,years,transfer_techs,pc_transfer_linksParam)
11149      = sum(linksData$links_aggregate(linksModelToCalc,linksData), transfer_linksParamIn(linksData,years,transfer_techs,pc_transfer_linksParam));
11150   
11151  * // ## Load links from gdx file
11153   
11154   
11155  set transfer_hasflowProfileIn(linksData,years,transfer_techs,pc_transfer_flowProfile);
11156  option transfer_hasflowProfileIn < transfer_flowProfileIn;
11157   
11158  * === modify transfer_flowProfileIn vector to fill with default values, in case profile is not specified ===
11159  transfer_linksParamIn(linksData,years,transfer_techs,"flowAlongLimit")
11160      $(not transfer_linksParamIn(linksData,years,transfer_techs,"limitFlows"))
11161      = 1;
11162   
11163  transfer_linksParamIn(linksData,years,transfer_techs,"flowAgainstLimit")
11164      $(not transfer_linksParamIn(linksData,years,transfer_techs,"limitFlows"))
11165      = 1;
11166   
11167  transfer_flowProfileIn(timeData,linksData,years,transfer_techs,"along")
11168      $(not transfer_hasflowProfileIn(linksData,years,transfer_techs,"along"))
11169      = transfer_linksParamIn(linksData,years,transfer_techs,"flowAlongLimit");
11170   
11171  transfer_flowProfileIn(timeData,linksData,years,transfer_techs,"against")
11172      $(not transfer_hasflowProfileIn(linksData,years,transfer_techs,"against"))
11173      = transfer_linksParamIn(linksData,years,transfer_techs,"flowAgainstLimit");
11174   
11175  * aggregate time dimension
11176  parameter transfer_flowProfileIn_aggTime(timeModel,linksData,yearsToCalc,transfer_techs,pc_transfer_flowProfile);
11177  transfer_flowProfileIn_aggTime(timeModelToCalc,linksData,yearsToCalc,transfer_techs,pc_transfer_flowProfile)
11178    = sum(timeData$timeMapping(timeData,timeModelToCalc),
11179            transfer_flowProfileIn(timeData,linksData,yearsToCalc,transfer_techs,pc_transfer_flowProfile)
11180            / timeLength(timeModelToCalc));
11181  option clear = transfer_flowProfileIn;
11182   
11183   
11184  set transfer_finiteLinkLimit(linksModel,years,transfer_techs);
11185  transfer_finiteLinkLimit(linksModelToCalc,yearsToCalc,transfer_techs)
11186      = sum(linksData$links_aggregate(linksModelToCalc,linksData), transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"linksUpperLimit")) > 0
11187          and sum(linksData$links_aggregate(linksModelToCalc,linksData), transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"linksUpperLimit")) < inf;
11188   
11189  set transfer_infiniteLinkLimit(linksModel,years,transfer_techs);
11190  transfer_infiniteLinkLimit(linksModelToCalc,yearsToCalc,transfer_techs)
11191      = sum(linksData$links_aggregate(linksModelToCalc,linksData), transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"linksUpperLimit")) = inf;
11193   
11194  parameter transfer_lengthParam(linksModel,link_types,pc_transfer_lengthParam);
11195  transfer_lengthParam(linksModelToCalc,link_types,pc_transfer_lengthParam)
11196      = sum(linksData$links_aggregate(linksModelToCalc,linksData), transfer_lengthParamIn(linksData,link_types,pc_transfer_lengthParam))
11197          / sum(linksData$links_aggregate(linksModelToCalc,linksData), 1);
11198   
11199  parameter transfer_gridSegments(linksModel,transfer_techs,gridSegments,pc_transfer_gridSegments);
11200  transfer_gridSegments(linksModelToCalc,transfer_techs,gridSegments,pc_transfer_gridSegments)
11201      = smax(linksData$links_aggregate(linksModelToCalc,linksData), transfer_gridSegmentsIn(linksData,transfer_techs,gridSegments,pc_transfer_gridSegments));
11202   
11203  parameter transfer_dcopf_Xtech(linksModel,years,transfer_techs,vintage,gridSegments);
11204  transfer_dcopf_Xtech(linksModelToCalc,yearsToCalc,transfer_techs,vintage,gridSegments)
11205      $(transfer_gridSegments(linksModelToCalc,transfer_techs,gridSegments,"useDCopf")
11206          and transfer_linksParam(linksModelToCalc,yearsToCalc,transfer_techs,"circuits") > 0
11207          and sum(link_types, transfer_reactPerLength(transfer_techs,vintage,link_types,"reactPerLength")) > 0 )
11208      = (1 / sum(linksData
11209                  $links_aggregate(linksModelToCalc,linksData),
11210              1 / ( sum(link_types,
11211                          transfer_lengthParamIn(linksData,link_types,"length")
11212                          * transfer_reactPerLength(transfer_techs,vintage,link_types,"reactPerLength"))
11213                      / transfer_linksParam(linksModelToCalc,yearsToCalc,transfer_techs,"circuits"))));
11214   
11215  set transfer_hasflowProfile(linksModel,years,transfer_techs,pc_transfer_flowProfile);
11216  transfer_hasflowProfile(linksModelToCalc,yearsToCalc,transfer_techs,pc_transfer_flowProfile)
11217      = sum(linksData$links_aggregate(linksModelToCalc,linksData),
11218              transfer_hasflowProfileIn(linksData,yearsToCalc,transfer_techs,pc_transfer_flowProfile));
11219   
11220  * ==== parameter modifications ====
11221  transfer_linksParam(linksModelToCalc,yearsToCalc,transfer_techs,"linksLowerLimit")
11222      $sum(vintage, transfer_techParam(transfer_techs,vintage,"mipLinks"))
11223      = floor(transfer_linksParam(linksModelToCalc,yearsToCalc,transfer_techs,"linksLowerLimit"));
11224  transfer_linksParam(linksModelToCalc,yearsToCalc,transfer_techs,"linksUpperLimit")
11225      $sum(vintage, transfer_techParam(transfer_techs,vintage,"mipLinks"))
11226      = ceil(transfer_linksParam(linksModelToCalc,yearsToCalc,transfer_techs,"linksUpperLimit"));
11227   
11228   
11229  * ==== calculation of mappings ====
11230   
11231  * Technologies with a lifeTime > 0 are available
11232  set transfer_availTech(linksModel,years,transfer_techs,vintage);
11233  transfer_availTech(linksModel,years,transfer_techs,vintage)
11234      $(vintage.val = smax(vintage_a$(vintage_a.val <= years.val
11235          and transfer_techParam(transfer_techs,vintage_a,"lifeTime") > 0), vintage_a.val)) = yes;
11236   
11237  * Technologies to optimize become unavailable if they have an linksUpperLimit of 0
11238  transfer_availTech(linksModelToCalc,years,transfer_techs,vintage)
11239      $(yearsToCalc(years) and transfer_linksParam(linksModelToCalc,years,transfer_techs,"linksUpperLimit") = 0 ) = no;
11240   
11241  * Technologies already built become unavailable if they have an linksBuild of 0
11242  transfer_availTech(linksModelToCalc,years,transfer_techs,vintage)
11243      $( ( not yearsToCalc(years)) and transfer_linksParam(linksModelToCalc,years,transfer_techs,"linksBuild") = 0 ) = no;
11244   
11245  * Used technologies are available technologies over their technical lifeTime
11246  set transfer_usedTech(linksModel,years,transfer_techs,vintage);
11247  transfer_usedTech(linksModelToCalc,years,transfer_techs,vintage)
11248      $(vintage.val <= years.val
11249          and years.val < smax(years_a$transfer_availTech(linksModelToCalc,years_a,transfer_techs,vintage),
11250                                  years_a.val + transfer_techParam(transfer_techs,vintage,"lifeTime"))
11251          ) = yes;
11252   
11253  * Technologies have to be decomissioned in the interval of first avail + lifetime to last avail + lifetime
11254  set transfer_decomTech(linksModel,years,transfer_techs,vintage);
11255  transfer_decomTech(linksModel,years,transfer_techs,vintage)
11256    $(sum(years_a$transfer_usedTech(linksModel,years_a,transfer_techs,vintage), 1)
11257      and sum(yearsToCalc
11258        $(sameas(years, yearsToCalc)
11259          and yearsToCalc.val >= smin(years_a$transfer_availTech(linksModel,years_a,transfer_techs,vintage), years_a.val) + transfer_techParam(transfer_techs,vintage,"lifeTime")
11260          and yearsToCalc.val <= smax(years_a$transfer_availTech(linksModel,years_a,transfer_techs,vintage), years_a.val) + transfer_techParam(transfer_techs,vintage,"lifeTime")), 1))
11261    = yes;
11262   
11263  * Extend the decom frame to the year after the last year of usedTech
11264  transfer_decomTech(linksModel,yearsToCalc,transfer_techs,vintage)
11265    $(transfer_usedTech(linksModel,yearsToCalc-1,transfer_techs,vintage)
11266      and transfer_decomTech(linksModel,yearsToCalc-1,transfer_techs,vintage))
11267    = yes;
11268   
11269  parameter transfer_flowProfile(timeModel,linksModel,years,transfer_techs,vintage,pc_transfer_flowProfile);
11270   
11271  transfer_flowProfile(timeModelToCalc,linksModelToCalc,yearsToCalc,transfer_techs,vintage,"along")
11272      $transfer_finiteLinkLimit(linksModelToCalc,yearsToCalc,transfer_techs)
11273      = (sum(linksData$(links_aggregate(linksModelToCalc,linksData)
11274                       and transfer_incidenceData_flip(linksData) = 1),
11275              transfer_flowProfileIn_aggTime(timeModelToCalc,linksData,yearsToCalc,transfer_techs,"along")
11276              * transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"linksUpperLimit"))
11277          + sum(linksData$(links_aggregate(linksModelToCalc,linksData)
11278                          and transfer_incidenceData_flip(linksData) = -1),
11279              transfer_flowProfileIn_aggTime(timeModelToCalc,linksData,yearsToCalc,transfer_techs,"against")
11280              * transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"linksUpperLimit")))
11281      / sum(linksData$links_aggregate(linksModelToCalc,linksData),
11282              transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"linksUpperLimit"));
11283   
11284  transfer_flowProfile(timeModelToCalc,linksModelToCalc,yearsToCalc,transfer_techs,vintage,"against")
11285      $transfer_finiteLinkLimit(linksModelToCalc,yearsToCalc,transfer_techs)
11286      = (sum(linksData$(links_aggregate(linksModelToCalc,linksData)
11287                       and transfer_incidenceData_flip(linksData) = 1),
11288              transfer_flowProfileIn_aggTime(timeModelToCalc,linksData,yearsToCalc,transfer_techs,"against")
11289              * transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"linksUpperLimit"))
11290          + sum(linksData$(links_aggregate(linksModelToCalc,linksData)
11291                          and transfer_incidenceData_flip(linksData) = -1),
11292              transfer_flowProfileIn_aggTime(timeModelToCalc,linksData,yearsToCalc,transfer_techs,"along")
11293              * transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"linksUpperLimit")))
11294      / sum(linksData$links_aggregate(linksModelToCalc,linksData),
11295              transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"linksUpperLimit"));
11296   
11297  transfer_flowProfile(timeModelToCalc,linksModelToCalc,yearsToCalc,transfer_techs,vintage,"along")
11298      $transfer_infiniteLinkLimit(linksModelToCalc,yearsToCalc,transfer_techs)
11299      = (sum(linksData$(links_aggregate(linksModelToCalc,linksData)
11300                       and transfer_incidenceData_flip(linksData) = 1
11301                       and transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"linksUpperLimit") = inf ),
11302              transfer_flowProfileIn_aggTime(timeModelToCalc,linksData,yearsToCalc,transfer_techs,"along"))
11303          + sum(linksData$(links_aggregate(linksModelToCalc,linksData)
11304                          and transfer_incidenceData_flip(linksData) = -1
11305                          and transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"linksUpperLimit") = inf ),
11306              transfer_flowProfileIn_aggTime(timeModelToCalc,linksData,yearsToCalc,transfer_techs,"against")))
11307      / sum(linksData$(links_aggregate(linksModelToCalc,linksData)
11308                      and transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"linksUpperLimit") = inf ),
11309              1);
11310   
11311  transfer_flowProfile(timeModelToCalc,linksModelToCalc,yearsToCalc,transfer_techs,vintage,"against")
11312      $transfer_infiniteLinkLimit(linksModelToCalc,yearsToCalc,transfer_techs)
11313      = (sum(linksData$(links_aggregate(linksModelToCalc,linksData)
11314                       and transfer_incidenceData_flip(linksData) = 1
11315                       and transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"linksUpperLimit") = inf ),
11316              transfer_flowProfileIn_aggTime(timeModelToCalc,linksData,yearsToCalc,transfer_techs,"against"))
11317          + sum(linksData$(links_aggregate(linksModelToCalc,linksData)
11318                          and transfer_incidenceData_flip(linksData) = -1
11319                          and transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"linksUpperLimit") = inf ),
11320              transfer_flowProfileIn_aggTime(timeModelToCalc,linksData,yearsToCalc,transfer_techs,"along")))
11321      / sum(linksData$(links_aggregate(linksModelToCalc,linksData)
11322                      and transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"linksUpperLimit") = inf ),
11323              1);
11324  option clear = transfer_flowProfileIn_aggTime;
11325   
11326  * Orientation of links affects the flowAlongLimit/flowAgainstLimit
11327   
11328  transfer_linksParam(linksModelToCalc,years,transfer_techs,"flowAlongLimit")
11329      $transfer_finiteLinkLimit(linksModelToCalc,years,transfer_techs)
11330      = (sum(linksData$(links_aggregate(linksModelToCalc,linksData)
11331                       and transfer_incidenceData_flip(linksData) = 1),
11332              transfer_linksParamIn(linksData,years,transfer_techs,"flowAlongLimit")
11333              * transfer_linksParamIn(linksData,years,transfer_techs,"linksUpperLimit"))
11334          + sum(linksData$(links_aggregate(linksModelToCalc,linksData)
11335                          and transfer_incidenceData_flip(linksData) = -1),
11336              transfer_linksParamIn(linksData,years,transfer_techs,"flowAgainstLimit")
11337              * transfer_linksParamIn(linksData,years,transfer_techs,"linksUpperLimit")))
11338      / sum(linksData$links_aggregate(linksModelToCalc,linksData),
11339              transfer_linksParamIn(linksData,years,transfer_techs,"linksUpperLimit"));
11340   
11341  transfer_linksParam(linksModelToCalc,years,transfer_techs,"flowAgainstLimit")
11342      $transfer_finiteLinkLimit(linksModelToCalc,years,transfer_techs)
11343      = (sum(linksData$(links_aggregate(linksModelToCalc,linksData)
11344                       and transfer_incidenceData_flip(linksData) = -1),
11345              transfer_linksParamIn(linksData,years,transfer_techs,"flowAlongLimit")
11346              * transfer_linksParamIn(linksData,years,transfer_techs,"linksUpperLimit"))
11347          + sum(linksData$(links_aggregate(linksModelToCalc,linksData)
11348                          and transfer_incidenceData_flip(linksData) = 1),
11349              transfer_linksParamIn(linksData,years,transfer_techs,"flowAgainstLimit")
11350              * transfer_linksParamIn(linksData,years,transfer_techs,"linksUpperLimit")))
11351      / sum(linksData$links_aggregate(linksModelToCalc,linksData),
11352              transfer_linksParamIn(linksData,years,transfer_techs,"linksUpperLimit"));
11353   
11354  transfer_linksParam(linksModelToCalc,years,transfer_techs,"flowAlongLimit")
11355      $transfer_infiniteLinkLimit(linksModelToCalc,years,transfer_techs)
11356      = (sum(linksData$(links_aggregate(linksModelToCalc,linksData)
11357                       and transfer_incidenceData_flip(linksData) = 1
11358                       and transfer_linksParamIn(linksData,years,transfer_techs,"linksUpperLimit") = inf),
11359              transfer_linksParamIn(linksData,years,transfer_techs,"flowAlongLimit"))
11360          + sum(linksData$(links_aggregate(linksModelToCalc,linksData)
11361                          and transfer_incidenceData_flip(linksData) = -1
11362                          and transfer_linksParamIn(linksData,years,transfer_techs,"linksUpperLimit") = inf),
11363              transfer_linksParamIn(linksData,years,transfer_techs,"flowAgainstLimit")))
11364      / sum(linksData$(links_aggregate(linksModelToCalc,linksData)
11365                      and transfer_linksParamIn(linksData,years,transfer_techs,"linksUpperLimit") = inf ),
11366              1);
11367   
11368  transfer_linksParam(linksModelToCalc,years,transfer_techs,"flowAgainstLimit")
11369      $transfer_infiniteLinkLimit(linksModelToCalc,years,transfer_techs)
11370      = (sum(linksData$(links_aggregate(linksModelToCalc,linksData)
11371                       and transfer_incidenceData_flip(linksData) = -1
11372                       and transfer_linksParamIn(linksData,years,transfer_techs,"linksUpperLimit") = inf),
11373              transfer_linksParamIn(linksData,years,transfer_techs,"flowAlongLimit"))
11374          + sum(linksData$(links_aggregate(linksModelToCalc,linksData)
11375                          and transfer_incidenceData_flip(linksData) = 1
11376                          and transfer_linksParamIn(linksData,years,transfer_techs,"linksUpperLimit") = inf),
11377              transfer_linksParamIn(linksData,years,transfer_techs,"flowAgainstLimit")))
11378      / sum(linksData$(links_aggregate(linksModelToCalc,linksData)
11379                      and transfer_linksParamIn(linksData,years,transfer_techs,"linksUpperLimit") = inf ),
11380              1);
11381   
11382  * Mapping for grid segments using DC optimal power flow
11383  set gridSegments_dcopf(linksModel,transfer_techs,gridSegments);
11384  gridSegments_dcopf(linksModelToCalc,transfer_techs,gridSegments)
11385      $transfer_gridSegments(linksModelToCalc,transfer_techs,gridSegments,"useDCopf")
11387      = yes;
11389   
11390  * Ensure each grid segment uses exactly one commodity
11391  parameter checkGridSegmentCommodities(gridSegments);
11392  checkGridSegmentCommodities(gridSegments)
11393      = sum (commodity$(sum((linksModelToCalc,transfer_techs,vintage)
11394                              $( transfer_coefficient(transfer_techs,vintage,commodity,"coefficient") > 0
11395                                  and gridSegments_dcopf(linksModelToCalc,transfer_techs,gridSegments)) , 1) > 0), 1);
11396   
11397  parameter transfer_incidenceSegments(nodesModel,linksModel,years,gridSegments);
11398  transfer_incidenceSegments(nodesModelToCalc,linksModelToCalc,yearsToCalc,gridSegments)
11399      $(sum((transfer_techs,vintage)$(transfer_usedTech(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
11400                                          and gridSegments_dcopf(linksModelToCalc,transfer_techs,gridSegments)
11401                                          and transfer_incidenceModel(nodesModelToCalc,linksModelToCalc) <> 0), 1) > 0)
11402      = transfer_incidenceModel(nodesModelToCalc,linksModelToCalc);
11403   
11404   
11408   
11409  scalar transfer_enableMIP;
11410  transfer_enableMIP = sum(transfer_usedTech(linksModelToCalc,yearsToCalc,transfer_techs,vintage)$transfer_techParam(transfer_techs,vintage,"mipLinks"), 1 );
11411   
11412   
11413  * ==== definition of variables ====
11414   
11415  * Initialise variables for linksBuild
11416  transfer_linksBuild.l(linksModel,years,transfer_techs,vintage)
11417      $transfer_availTech(linksModel,years,transfer_techs,vintage)
11418      = transfer_linksParam(linksModel,years,transfer_techs,"linksBuild");
11419  transfer_linksBuild.lo(linksModel,yearsToCalc,transfer_techs,vintage)
11420      $transfer_availTech(linksModel,yearsToCalc,transfer_techs,vintage)
11421      = transfer_linksBuild.l(linksModel,yearsToCalc,transfer_techs,vintage);
11422  transfer_linksBuild.fx(linksModel,years,transfer_techs,vintage)
11423      $transfer_linksParam(linksModel,years,transfer_techs,"noExpansion")
11424      = transfer_linksBuild.l(linksModel,years,transfer_techs,vintage);
11425   
11426  * Initialise variables for linksDecom
11427  transfer_linksDecom.l(linksModel,years,transfer_techs,vintage)
11428      $(transfer_decomTech(linksModel,years,transfer_techs,vintage)
11429        and years.val < sum(yearsToCalc$(ord(yearsToCalc) = 1), yearsToCalc.val))
11430      = sum((years_a,years_aa)$(sameas(years-1, years_aa)
11431                        and years_a.val > years_aa.val - transfer_techParam(transfer_techs,vintage,'lifeTime')
11432                        and years_a.val <= years.val - transfer_techParam(transfer_techs,vintage,'lifeTime')
11433                        and transfer_availTech(linksModel,years_a,transfer_techs,vintage)),
11434          transfer_linksBuild.l(linksModel,years_a,transfer_techs,vintage));
11435   
11436  transfer_linksDecom.l(linksModel,yearsToCalc,transfer_techs,vintage)
11437    $transfer_decomTech(linksModel,yearsToCalc,transfer_techs,vintage)
11438    = sum(years$
11439          (years.val < sum(yearsToCalc_a$(ord(yearsToCalc_a) = 1), yearsToCalc_a.val)
11440            and transfer_availTech(linksModel,years,transfer_techs,vintage)
11441            and years.val > sum(years_a$sameas(years_a, yearsToCalc-1), years_a.val) - transfer_techParam(transfer_techs,vintage,'lifeTime')
11442            and years.val <= yearsToCalc.val - transfer_techParam(transfer_techs,vintage,'lifeTime')),
11443        transfer_linksBuild.l(linksModel,years,transfer_techs,vintage))
11444      + sum(yearsToCalc_a$
11445          (yearsToCalc_a.val < sum(yearsToCalc_aa$(ord(yearsToCalc_aa) > 1), yearsToCalc_a.val)
11446            and transfer_availTech(linksModel,yearsToCalc_a,transfer_techs,vintage)
11447            and yearsToCalc_a.val > sum(years_a$sameas(years_a, yearsToCalc-1), years_a.val) - transfer_techParam(transfer_techs,vintage,'lifeTime')
11448            and yearsToCalc_a.val <= yearsToCalc.val - transfer_techParam(transfer_techs,vintage,'lifeTime')),
11449        transfer_linksBuild.l(linksModel,yearsToCalc_a,transfer_techs,vintage));
11450        ;
11451   
11452  transfer_linksDecom.lo(linksModel,yearsToCalc,transfer_techs,vintage)
11453      $(transfer_usedTech(linksModel,yearsToCalc,transfer_techs,vintage)
11454          and not transfer_techParam(transfer_techs,vintage,"freeDecom"))
11455      = transfer_linksDecom.l(linksModel,yearsToCalc,transfer_techs,vintage)
11456   
11457  * Calculate planned transfer links expansion
11458  parameter transfer_linksPlanned(linksModel,years,transfer_techs,vintage);
11459  transfer_linksPlanned(linksModel,years,transfer_techs,vintage) = 0;
11460  loop(years,
11461    transfer_linksPlanned(linksModel,years,transfer_techs,vintage)
11462      =
11463      transfer_linksPlanned(linksModel,years-1,transfer_techs,vintage)
11464          $transfer_usedTech(linksModel,years-1,transfer_techs,vintage)
11465      + transfer_linksBuild.l(linksModel,years,transfer_techs,vintage)
11466          $transfer_availTech(linksModel,years,transfer_techs,vintage)
11467      - transfer_linksDecom.l(linksModel,years,transfer_techs,vintage)
11468          $transfer_usedTech(linksModel,years,transfer_techs,vintage);
11469  );
11470   
11471  * Set initial state for planned units
11472  transfer_linksTotal.l(linksModel,years,transfer_techs,vintage)
11473    = transfer_linksPlanned(linksModel,years,transfer_techs,vintage)
11474   
11475  * Calculate if planned links expansion is bound by upper and lower limits
11476  set transfer_linkBoundsFixed(linksModel,years,transfer_techs);
11477  transfer_linkBoundsFixed(linksModel,years,transfer_techs)
11478    $(sum(vintage$transfer_usedTech(linksModel,years,transfer_techs,vintage),
11479          transfer_linksPlanned(linksModel,years,transfer_techs,vintage))
11480      = transfer_linksParam(linksModel,years,transfer_techs,"linksUpperLimit")
11481    and sum(vintage$transfer_usedTech(linksModel,years,transfer_techs,vintage),
11482          transfer_linksPlanned(linksModel,years,transfer_techs,vintage))
11483      = transfer_linksParam(linksModel,years,transfer_techs,"linksLowerLimit"))
11484    = yes;
11485   
11486  * Fix linksBuild, linksDecom, linksTotal if levels are predetermined by upper and lower limits
11487  transfer_linksBuild.fx(linksModel,years,transfer_techs,vintage)
11488    $(transfer_availTech(linksModel,years,transfer_techs,vintage)
11489      and transfer_linkBoundsFixed(linksModel,years,transfer_techs))
11490    = transfer_linksBuild.l(linksModel,years,transfer_techs,vintage);
11491  transfer_linksDecom.fx(linksModel,years,transfer_techs,vintage)
11492    $(transfer_usedTech(linksModel,years,transfer_techs,vintage)
11493      and transfer_linkBoundsFixed(linksModel,years,transfer_techs))
11494    = transfer_linksDecom.l(linksModel,years,transfer_techs,vintage);
11495  transfer_linksTotal.fx(linksModel,years,transfer_techs,vintage)
11496    $(transfer_usedTech(linksModel,years,transfer_techs,vintage)
11497      and transfer_linkBoundsFixed(linksModel,years,transfer_techs))
11498    = transfer_linksTotal.l(linksModel,years,transfer_techs,vintage);
11499   
11500  transfer_linksTotal_MIP.up(linksModel,years,transfer_techs,vintage)
11501      $(transfer_usedTech(linksModel,years,transfer_techs,vintage)
11502        and transfer_techParam(transfer_techs,vintage,"miplinks") = 1)
11503      = transfer_linksParam(linksModel,years,transfer_techs,"linksUpperLimit");
11504   
11505  * Add parameter for fixing capacities during myopic runs
11506  parameter transfer_linksDelta(linksModel,years,transfer_techs);
11507   
11508   
11509  * ==== declaration of equations ====
11510   
11511  equations
11512    Eq_transfer_linksBalance(linksModel,years,transfer_techs,vintage
11513      ) "Ensures the links balance over the planning period."
11514    Eq_transfer_linksFixedDecom(linksModel,years,transfer_techs,vintage
11515      ) "Restricts the fixed decommissioning of links over the planning period."
11516    Eq_transfer_linksFreeDecom(linksModel,years,transfer_techs,vintage
11517      ) "Restricts the free decommissioning of links over the planning period."
11518    Eq_transfer_linksUpperLimit(linksModel,years,transfer_techs
11519      ) "Upper bound for the total number of links."
11520    Eq_transfer_linksLowerLimit(linksModel,years,transfer_techs
11521      ) "Lower bound for the total number of links."
11522    Eq_transfer_linksTotalMIP(linksModel,years,transfer_techs,vintage
11523      ) "Fixes the total number of links to the corresponding integer variable."
11524   
11525    Eq_transfer_flowAlongUpperLimit(timeModel,linksModel,years,transfer_techs,vintage
11526      ) "Upper bound for the flow along the transfer links."
11527    Eq_transfer_flowAgainstUpperLimit(timeModel,linksModel,years,transfer_techs,vintage
11528      ) "Upper bound for the flow against the transfer links."
11529    Eq_transfer_dcopf_angleFlows(timeModel,linksModel,years,gridSegments
11530      )
11531    Eq_transfer_dcopf_cycleFlows(timeModel,years,cycles,gridSegments
11532      )
11533    ;
11534   
11535   
11536  * ==== equation definition ====
11537  * // ## Equations
11538  * // ### Transfer Links Balance
11539  * // Ensures that the transfer between nodes is balanced.
11540  * // {Eq_transfer_linksBalance}
11541  Eq_transfer_linksBalance(linksModelToCalc,yearsSel,transfer_techs,vintage)
11542      $((transfer_usedTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
11543            or sum(years$sameas(years,yearsSel), transfer_usedTech(linksModelToCalc,years-1,transfer_techs,vintage)))
11544          and not transfer_linkBoundsFixed(linksModelToCalc,yearsSel,transfer_techs))
11545      ..
11546      transfer_linksTotal(linksModelToCalc,yearsSel,transfer_techs,vintage)
11547      =e=
11548      sum(yearsToCalc$(ord(yearsToCalc) = 1 and sameas(yearsToCalc, yearsSel)),
11549        sum(years$sameas(years, yearsToCalc),
11550          transfer_linksTotal(linksModelToCalc,years-1,transfer_techs,vintage)
11551            $transfer_usedTech(linksModelToCalc,years-1,transfer_techs,vintage)))
11552      + sum((yearsToCalc)$(ord(yearsToCalc) > 1 and sameas(yearsToCalc, yearsSel)),
11553        transfer_linksTotal(linksModelToCalc,yearsToCalc-1,transfer_techs,vintage)
11554          $transfer_usedTech(linksModelToCalc,yearsToCalc-1,transfer_techs,vintage))
11555      + transfer_linksBuild(linksModelToCalc,yearsSel,transfer_techs,vintage)
11556          $transfer_availTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
11557      - transfer_linksDecom(linksModelToCalc,yearsSel,transfer_techs,vintage)
11558          $transfer_usedTech(linksModelToCalc,yearsSel,transfer_techs,vintage);
11559   
11560  * // ### Transfer Links Fixed Decommissioning
11561  * // Balances fixed link decommissioning.
11562  * // {Eq_transfer_linksFixedDecom}
11563  Eq_transfer_linksFixedDecom(linksModelToCalc,yearsSel,transfer_techs,vintage)
11564      $(transfer_decomTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
11565          and not transfer_techParam(transfer_techs,vintage,"freeDecom") = 1
11566          and not transfer_linkBoundsFixed(linksModelToCalc,yearsSel,transfer_techs))
11567      ..
11568      transfer_linksDecom(linksModelToCalc,yearsSel,transfer_techs,vintage)
11569      =e=
11570      sum(years$
11571          (transfer_availTech(linksModelToCalc,years,transfer_techs,vintage)
11572              and years.val > sum(yearsToCalc$sameas(yearsToCalc+1, yearsSel), yearsToCalc.val) - transfer_techParam(transfer_techs,vintage,'lifeTime')
11573              and years.val <= yearsSel.val - transfer_techParam(transfer_techs,vintage,'lifeTime')),
11574          transfer_linksBuild(linksModelToCalc,years,transfer_techs,vintage));
11575   
11576  * // ### Transfer Links Free Decommissioning
11577  * // Balances free link decommissioning.
11578  * // {Eq_transfer_linksFreeDecom}
11579  Eq_transfer_linksFreeDecom(linksModelToCalc,yearsSel,transfer_techs,vintage)
11580      $((transfer_decomTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
11581          or transfer_usedTech(linksModelToCalc,yearsSel,transfer_techs,vintage))
11582          and transfer_techParam(transfer_techs,vintage,"freeDecom") = 1)
11583      ..
11584      sum(years$
11585            ((transfer_decomTech(linksModelToCalc,years,transfer_techs,vintage)
11586              or transfer_usedTech(linksModelToCalc,years,transfer_techs,vintage))
11587              and years.val < sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)),
11588          transfer_linksDecom(linksModelToCalc,years,transfer_techs,vintage))
11589      + sum(yearsToCalc$
11590            ((transfer_decomTech(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
11591              or transfer_usedTech(linksModelToCalc,yearsToCalc,transfer_techs,vintage))
11592              and yearsToCalc.val >= sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
11593              and yearsToCalc.val <= yearsSel.val),
11594          transfer_linksDecom(linksModelToCalc,yearsToCalc,transfer_techs,vintage))
11595      =g=
11596      sum(years$
11597            (transfer_availTech(linksModelToCalc,years,transfer_techs,vintage)
11598              and years.val < sum(yearsToCalc$(ord(yearsToCalc)=1), yearsToCalc.val) - transfer_techParam(transfer_techs,vintage,'lifeTime')),
11599          transfer_linksBuild(linksModelToCalc,years,transfer_techs,vintage))
11600      + sum(yearsToCalc$
11601            (transfer_availTech(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
11602              and yearsToCalc.val >= sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
11603              and yearsToCalc.val <= yearsSel.val - transfer_techParam(transfer_techs,vintage,'lifeTime')),
11604          transfer_linksBuild(linksModelToCalc,yearsToCalc,transfer_techs,vintage));
11605   
11606  * // ### Transfer Links Lower Limit
11607  * // Ensures link capacity lower limits.
11608  * // {Eq_transfer_linksLowerLimit}
11609  Eq_transfer_linksLowerLimit(linksModelToCalc,yearsSel,transfer_techs)
11610      $(transfer_linksParam(linksModelToCalc,yearsSel,transfer_techs,'linksLowerLimit') > 0 )
11611      ..
11612      sum(vintage$transfer_usedTech(linksModelToCalc,yearsSel,transfer_techs,vintage),
11613          transfer_linksTotal(linksModelToCalc,yearsSel,transfer_techs,vintage))
11614      =g=
11615      transfer_linksParam(linksModelToCalc,yearsSel,transfer_techs,"linksLowerLimit");
11616   
11617  * // ### Transfer Links Upper Limit
11618  * // Ensures link capacity upper limits.
11619  * // {Eq_transfer_linksUpperLimit}
11620  Eq_transfer_linksUpperLimit(linksModelToCalc,yearsSel,transfer_techs)
11621      $(transfer_linksParam(linksModelToCalc,yearsSel,transfer_techs,'linksUpperLimit') >= 0
11622          and transfer_linksParam(linksModelToCalc,yearsSel,transfer_techs,'linksUpperLimit') < +inf )
11623      ..
11624      sum(vintage$transfer_usedTech(linksModelToCalc,yearsSel,transfer_techs,vintage),
11625          transfer_linksTotal(linksModelToCalc,yearsSel,transfer_techs,vintage))
11626      =l=
11627      transfer_linksParam(linksModelToCalc,yearsSel,transfer_techs,"linksUpperLimit");
11628   
11629  * // ### Transfer Links Total MIP
11630  * // Ensures number of MIP links.
11631  * // {Eq_transfer_linksTotalMIP}
11632  Eq_transfer_linksTotalMIP(linksModelToCalc,yearsSel,transfer_techs,vintage)
11633      $(transfer_usedTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
11634          and transfer_techParam(transfer_techs,vintage,"mipLinks"))
11635      ..
11636      transfer_linksTotal(linksModelToCalc,yearsSel,transfer_techs,vintage)
11637      =e=
11638      transfer_linksTotal_MIP(linksModelToCalc,yearsSel,transfer_techs,vintage);
11639   
11640  * // ### Transfer Links Flow Along Upper Limit
11641  * // Ensures links flow along upper limit.
11642  * // {Eq_transfer_flowAlongUpperLimit}
11643  Eq_transfer_flowAlongUpperLimit(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
11644      $transfer_usedTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
11645      ..
11646      transfer_flowAlong(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
11647      =l=
11648      transfer_flowProfile(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage,"along")
11649      * transfer_linksTotal(linksModelToCalc,yearsSel,transfer_techs,vintage)
11650      * transfer_techParam(transfer_techs,vintage,"flowUpperLimit")
11651      ;
11652   
11653  * // ### Transfer Links Flow Against Upper Limit
11654  * // Ensures links flow against upper limit.
11655  * // {Eq_transfer_flowAgainstUpperLimit}
11656  Eq_transfer_flowAgainstUpperLimit(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
11657      $transfer_usedTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
11658      ..
11659      transfer_flowAgainst(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
11660      =l=
11661      transfer_flowProfile(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage,"against")
11662      * transfer_linksTotal(linksModelToCalc,yearsSel,transfer_techs,vintage)
11663      * transfer_techParam(transfer_techs,vintage,"flowUpperLimit")
11664      ;
11665   
11666  set transfer_usedOpf(linksModel,years,gridSegments,transfer_techs,vintage);
11667  transfer_usedOpf(linksModel,yearsToCalc,gridSegments,transfer_techs,vintage)
11668      $(transfer_usedTech(linksModel,yearsToCalc,transfer_techs,vintage)
11669          and gridSegments_dcopf(linksModel,transfer_techs,gridSegments))
11670      = yes;
11671   
11672  set transfer_usedOpfLinks(linksModel,years,gridSegments);
11673  option transfer_usedOpfLinks < transfer_usedOpf;
11674   
11675  set transfer_usedOpfSegments(years,gridSegments);
11676  option transfer_usedOpfSegments < transfer_usedOpf;
11677   
11681  * // ### Transfer DC optimal flow angle flows
11682  * // Angle flows.
11683  * // {Eq_transfer_dcopf_cycleFlows}
11684  Eq_transfer_dcopf_angleFlows(timeModelSel,linksModelToCalc,yearsSel,gridSegments)
11685      $transfer_usedOpfLinks(linksModelToCalc,yearsSel,gridSegments)
11686      ..
11687      sum ((transfer_techs,vintage)
11688              $transfer_usedOpf(linksModelToCalc,yearsSel,gridSegments,transfer_techs,vintage),
11689          ( transfer_flowAlong(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
11690              - transfer_flowAgainst(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage) )
11691          * transfer_dcopf_Xtech(linksModelToCalc,yearsSel,transfer_techs,vintage,gridSegments) )
11692      =e=
11693      sum ( nodesModelSel,
11694          - transfer_incidenceModel(nodesModelSel,linksModelToCalc)
11695          * transfer_dcopf_voltageAngle(timeModelSel,nodesModelSel,yearsSel,gridSegments));
11699   
11700   
11701  * ==== model definition ====
11702   
11703  Model M_transfer
11704  /
11705    Eq_transfer_linksBalance
11706    Eq_transfer_linksFixedDecom
11707    Eq_transfer_linksFreeDecom
11708    Eq_transfer_linksLowerLimit
11709    Eq_transfer_linksUpperLimit
11710    Eq_transfer_linksTotalMIP
11711    Eq_transfer_flowAlongUpperLimit
11712    Eq_transfer_flowAgainstUpperLimit
11716    Eq_transfer_dcopf_angleFlows
11720  /;
INCLUDE    C:\Local\REMix\framework\remix\framework\model\source\core\sourcesink.gms
11722  * SPDX-FileCopyrightText: Copyright (c) 2023 German Aerospace Center (DLR)
11723  * SPDX-License-Identifier: BSD-3-Clause
11724   
11725  * // # core_sourcesink
11726  * // The equations in this file describe the sources and sinks in the model.
11727   
11728  * // ## Variables
11729  * // {special_table_sourcesink_variables}
12241   
12242  * // ## Aggregation of profiles
12243  * // Profiles are rescaled based on the annual sum.
12244   
12245  set sourcesink_usesProfileScaling(nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile);
12246  sourcesink_usesProfileScaling(nodesData,years,sourcesink_techs,commodity,"fixed")
12247      $sourcesink_configIn(nodesData,years,sourcesink_techs,commodity,"scaleFixProfileWithFixSum") = yes;
12248  sourcesink_usesProfileScaling(nodesData,years,sourcesink_techs,commodity,"lower")
12249      $sourcesink_configIn(nodesData,years,sourcesink_techs,commodity,"scaleLowProfileWithLowSum") = yes;
12250  sourcesink_usesProfileScaling(nodesData,years,sourcesink_techs,commodity,"upper")
12251      $sourcesink_configIn(nodesData,years,sourcesink_techs,commodity,"scaleUpProfileWithUpSum") = yes;
12252   
12253  parameter sourcesink_ProfileSum(nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile);
12254  sourcesink_ProfileSum(nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile)
12255      $sourcesink_usesProfileScaling(nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile)
12256      = sum(timeData, sourcesink_profileIn(timeData,nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile));
12257   
12258  parameter sourcesink_ProfileAbsSum(nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile);
12259  sourcesink_ProfileAbsSum(nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile)
12260      $sourcesink_usesProfileScaling(nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile)
12261      = sum(timeData, abs(sourcesink_profileIn(timeData,nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile)));
12262   
12263  set sourcesink_ProfileScaleError(nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile);
12264  sourcesink_ProfileScaleError(nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile)
12265      $(sourcesink_usesProfileScaling(nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile)
12266          and sourcesink_ProfileSum(nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile) = 0
12267          and sourcesink_ProfileAbsSum(nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile) > 0)
12268      = yes;
12269   
12270  abort$sum((nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile),
12271              sourcesink_ProfileScaleError(nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile)) "One or more profiles cannot be rescaled as their annual sum equals zero!"
12272   
12273  * calculate scaling factor for each type
12274  parameter sourcesink_scalingFactor(nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile);
12275  sourcesink_scalingFactor(nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile)
12276      $(sourcesink_ProfileSum(nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile)
12277          and sourcesink_usesProfileScaling(nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile))
12278      = sum(pc_sourcesink_annualSum$sameas(pc_sourcesink_profile,pc_sourcesink_annualSum),
12279          sourcesink_annualSumIn(nodesData,years,sourcesink_techs,commodity,pc_sourcesink_annualSum)
12280              / sourcesink_ProfileSum(nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile));
12281   
12282  * rescale profiles
12283  sourcesink_profileIn(timeData,nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile)
12284      $sourcesink_usesProfileScaling(nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile)
12285      = sourcesink_profileIn(timeData,nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile)
12286          * sourcesink_scalingFactor(nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile)
12287   
12288  * // ## Aggregation of profiles
12289  * // Profiles are aggregated based on the mapping from data nodes to model nodes.
12290   
12291  * ==== aggregation of profiles ====
12292  set sourcesink_usesProfileIn(nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile);
12293  option sourcesink_usesProfileIn < sourcesink_profileIn
12294   
12295  set sourcesink_usesProfile(nodesModel,years,sourcesink_techs,commodity,pc_sourcesink_profile);
12296  sourcesink_usesProfile(nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity,pc_sourcesink_profile)
12297      $sum(nodesData$(aggregateNodesModel(nodesData,nodesModelToCalc)
12298          and sourcesink_usesProfileIn(nodesData,yearsToCalc,sourcesink_techs,commodity,pc_sourcesink_profile)), 1)
12299      = yes;
12300   
12301  * aagregate time dimension
12302  parameter sourcesink_profileIn_aggTime(timeModel,nodesData,yearsToCalc,sourcesink_techs,commodity,pc_sourcesink_profile);
12303  sourcesink_profileIn_aggTime(timeModelToCalc,nodesData,yearsToCalc,sourcesink_techs,commodity,pc_sourcesink_profile)
12304    $sourcesink_usesProfileIn(nodesData,yearsToCalc,sourcesink_techs,commodity,pc_sourcesink_profile)
12305    = sum(timeData$timeMapping(timeData,timeModelToCalc),
12306            sourcesink_profileIn(timeData,nodesData,yearsToCalc,sourcesink_techs,commodity,pc_sourcesink_profile)
12307            / timeLength(timeModelToCalc));
12308  option clear = sourcesink_profileIn;
12309   
12310  * sum up absolute profiles
12311  parameter sourcesink_profile(timeModel,nodesModel,years,sourcesink_techs,commodity,pc_sourcesink_profile);
12312  sourcesink_profile(timeModelToCalc,nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity,pc_sourcesink_profile)
12313      $sourcesink_usesProfile(nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity,pc_sourcesink_profile)
12314      = sum(nodesData$aggregateNodesModel(nodesData,nodesModelToCalc),
12315              sourcesink_profileIn_aggTime(timeModelToCalc,nodesData,yearsToCalc,sourcesink_techs,commodity,pc_sourcesink_profile));
12316  option clear = sourcesink_profileIn_aggTime;
12317   
12318  set sourcesink_enabled(nodesModel,years,sourcesink_techs,commodity);
12319  option sourcesink_enabled < sourcesink_config;
12320   
12321   
12322  * ==== declaration of variables ====
12323  * // ## Bounding of variables
12324  * // Source-sink variables with either a lower, fixed, or upper profile are bounded to their respective profiles given by the input parameters.
12325   
12326  sourcesink_flow.lo(timeModelToCalc,nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity)
12327      $( sourcesink_enabled(nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity)
12328          and sourcesink_config(nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity,"usesLowerProfile") = 1
12329          and sourcesink_profile(timeModelToCalc,nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity,"lower") > -inf )
12330      = sourcesink_profile(timeModelToCalc,nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity,"lower");
12331   
12332  sourcesink_flow.up(timeModelToCalc,nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity)
12333      $( sourcesink_enabled(nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity)
12334          and sourcesink_config(nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity,"usesUpperProfile") = 1
12335          and sourcesink_profile(timeModelToCalc,nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity,"upper") < inf )
12336      = sourcesink_profile(timeModelToCalc,nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity,"upper");
12337   
12338  sourcesink_flow.fx(timeModelToCalc,nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity)
12339      $( sourcesink_enabled(nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity)
12340          and sourcesink_config(nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity,"usesFixedProfile") = 1 )
12341      = sourcesink_profile(timeModelToCalc,nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity,"fixed");
12342   
12343  option clear = sourcesink_profile;
12344   
12345   
12346  * ==== equation definition ====
12347  * // ## Equations
12348  equations
12349  Eq_sourcesink_useFixedSum(nodesModel,years,sourcesink_techs,commodity
12350      ) "Fixes the annual sum from sources / to sinks"
12351  Eq_sourcesink_useLowerSum(nodesModel,years,sourcesink_techs,commodity
12352      ) "Limits the lower sum from sources / to sinks"
12353  Eq_sourcesink_useUpperSum(nodesModel,years,sourcesink_techs,commodity
12354      ) "Limits the upper sum from sources / to sinks"
12355    ;
12356   
12357  * // ### Fixed annual sums for sources and sinks
12358  * // Ensures that the sources and sinks with annual sums given as fixed limits are balanced.
12359  * // {Eq_sourcesink_useFixedSum}
12360  Eq_sourcesink_useFixedSum(nodesModelSel,yearsSel,sourcesink_techs,commodity)
12361      $( sourcesink_enabled(nodesModelSel,yearsSel,sourcesink_techs,commodity)
12362          and sourcesink_config(nodesModelSel,yearsSel,sourcesink_techs,commodity,"usesFixedSum") = 1 )
12363      ..
12364      sum(timeModelSel,
12365          sourcesink_flow(timeModelSel,nodesModelSel,yearsSel,sourcesink_techs,commodity))
12366      =e=
12367      sourcesink_annualSum(nodesModelSel,yearsSel,sourcesink_techs,commodity,"fixed")
12368      ;
12369   
12370  * // ### Lower annual sums for sources and sinks
12371  * // Ensures that the sources and sinks with annual sums given as lower limits are balanced.
12372  * // {Eq_sourcesink_useLowerSum}
12373  Eq_sourcesink_useLowerSum(nodesModelSel,yearsSel,sourcesink_techs,commodity)
12374      $( sourcesink_enabled(nodesModelSel,yearsSel,sourcesink_techs,commodity)
12375          and sourcesink_config(nodesModelSel,yearsSel,sourcesink_techs,commodity,"usesLowerSum") = 1
12376          and sourcesink_annualSum(nodesModelSel,yearsSel,sourcesink_techs,commodity,"lower") > -inf )
12377      ..
12378      sum(timeModelSel,
12379          sourcesink_flow(timeModelSel,nodesModelSel,yearsSel,sourcesink_techs,commodity))
12380      =g=
12381      sourcesink_annualSum(nodesModelSel,yearsSel,sourcesink_techs,commodity,"lower")
12382      ;
12383   
12384  * // ### Upper annual sums for sources and sinks
12385  * // Ensures that the sources and sinks with annual sums given as upper limits are balanced.
12386  * // {Eq_sourcesink_useUpperSum}
12387  Eq_sourcesink_useUpperSum(nodesModelSel,yearsSel,sourcesink_techs,commodity)
12388      $( sourcesink_enabled(nodesModelSel,yearsSel,sourcesink_techs,commodity)
12389          and sourcesink_config(nodesModelSel,yearsSel,sourcesink_techs,commodity,"usesUpperSum") = 1
12390          and sourcesink_annualSum(nodesModelSel,yearsSel,sourcesink_techs,commodity,"upper") < inf )
12391      ..
12392      sum(timeModelSel,
12393          sourcesink_flow(timeModelSel,nodesModelSel,yearsSel,sourcesink_techs,commodity))
12394      =l=
12395      sourcesink_annualSum(nodesModelSel,yearsSel,sourcesink_techs,commodity,"upper")
12396      ;
12397   
12398   
12399  * ==== model definition ====
12400   
12401  Model M_sourcesink
12402  /
12403    Eq_sourcesink_useFixedSum
12404    Eq_sourcesink_useLowerSum
12405    Eq_sourcesink_useUpperSum
12406  /;
INCLUDE    C:\Local\REMix\framework\remix\framework\model\source\core\balance.gms
12408  * SPDX-FileCopyrightText: Copyright (c) 2023 German Aerospace Center (DLR)
12409  * SPDX-License-Identifier: BSD-3-Clause
12410   
12411  * // # balance
12412  * // The equations in this file describe the commodity balancing in the model.
12413   
12414  Equations
12415    Eq_balance_commodities(timeModel,nodesModel,years,commodity
12416      ) "Balance for each commodity used in each time step, region, and year";
12417   
12418   
12419  * ==== calculation of mappings ====
12420   
12421  set balance_techComm(techs,commodity);
12422  balance_techComm(converter_techs(techs),commodity)
12423      $sum((vintage,activity)$converter_coefficient(converter_techs,vintage,activity,commodity,"coefficient"), 1) = yes;
12424  balance_techComm(storage_techs(techs),commodity)
12425      $sum((vintage)$storage_sizeParam(storage_techs,vintage,commodity,"size"), 1) = yes;
12426  balance_techComm(transfer_techs(techs),commodity)
12427      $sum((vintage)$transfer_coefficient(transfer_techs,vintage,commodity,"coefficient"), 1) = yes;
12428  balance_techComm(sourcesink_techs(techs),commodity)
12429      $sum((nodesModelToCalc,yearsToCalc)$sourcesink_enabled(nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity), 1) = yes;
12430   
12431  set balance_usedConverter(nodesModel,years,commodity);
12432  set balance_usedStorage(nodesModel,years,commodity);
12433  set balance_usedTransfer(nodesModel,years,commodity);
12434  set balance_usedSourceSink(nodesModel,years,commodity);
12435  set balance_usedBalance(nodesModel,years,commodity);
12436   
12437  balance_usedConverter(nodesModel,years,commodity)
12438      = sum ((converter_techs,vintage,activity)
12439              $( converter_coefficient(converter_techs,vintage,activity,commodity,"coefficient") <> 0
12440                  and converter_usedTech(nodesModel,years,converter_techs,vintage) ), 1);
12441   
12442  balance_usedStorage(nodesModel,years,commodity)
12443      = sum ((storage_techs,vintage,activity)
12444              $(storage_sizeParam(storage_techs,vintage,commodity,"size") <> 0
12445                  and storage_usedTech(nodesModel,years,storage_techs,vintage) ), 1);
12446   
12447  balance_usedTransfer(nodesModel,years,commodity)
12448      = sum ((linksModel,transfer_techs,vintage)
12449              $(transfer_coefficient(transfer_techs,vintage,commodity,"coefficient") <> 0
12450                  and transfer_incidenceModel(nodesModel,linksModel) <> 0), 1);
12451   
12452  option balance_usedSourceSink < sourcesink_enabled;
12453   
12454  balance_usedBalance(nodesModel,years,commodity)
12455      $(balance_usedConverter(nodesModel,years,commodity)
12456          or balance_usedStorage(nodesModel,years,commodity)
12457          or balance_usedTransfer(nodesModel,years,commodity)
12458          or balance_usedSourceSink(nodesModel,years,commodity) )
12459      = yes;
12460   
12461   
12462  * ==== equation definition ====
12463   
12464  * // ### Balance commodities
12465  * // Balancing of commodities for all model regions, time steps, and years
12466  * // {Eq_balance_commodities}
12467  Eq_balance_commodities(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,commodity)
12468      $balance_usedBalance(nodesModelSel,yearsSel,commodity)
12469      ..
12470  * converter
12471      sum((converter_techs,vintage,activity)
12472              $( converter_coefficientProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity,commodity) <> 0
12473                  AND converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage) ),
12474          converter_activity(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity)
12475              * converter_coefficientProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity,commodity)
12476              * timeLength(timeModelSel)
12477          + converter_unitsUsingActivity_MIP(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity)
12478              * converter_coefficient(converter_techs,vintage,activity,commodity,"constant")
12479              * timeLength(timeModelSel))
12480   
12481  * storages
12482      + sum((storage_techs,vintage)
12483              $( storage_sizeParam(storage_techs,vintage,commodity,"size") <> 0
12484                  and storage_usedTech(nodesModelSel,yearsSel,storage_techs,vintage) ),
12485          storage_level(timeModelToCalc--1,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
12486          - storage_level(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
12488          - storage_losses(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
12489          * timeLength(timeModelSel)
12491          )
12492   
12493  * transfer
12494      + sum((linksModel,transfer_techs,vintage)
12495              $(transfer_usedTech(linksModel,yearsSel,transfer_techs,vintage)
12496                  and linksModelToCalc(linksModel)),
12497          (   transfer_flowAlong(timeModelSel,linksModel,yearsSel,transfer_techs,vintage)
12498                  $(transfer_incidenceModel(nodesModelSel,linksModel) > 0)
12499            + transfer_flowAgainst(timeModelSel,linksModel,yearsSel,transfer_techs,vintage)
12500                  $(transfer_incidenceModel(nodesModelSel,linksModel) < 0) )
12501          * transfer_coefficient(transfer_techs,vintage,commodity,"coefficient")
12502          * timeLength(timeModelSel))
12503   
12504      - sum((linksModel,transfer_techs,vintage)
12505              $(transfer_usedTech(linksModel,yearsSel,transfer_techs,vintage)
12506                  and linksModelToCalc(linksModel)),
12507          (   transfer_flowAlong(timeModelSel,linksModel,yearsSel,transfer_techs,vintage)
12508                  $(transfer_incidenceModel(nodesModelSel,linksModel) < 0)
12509            + transfer_flowAgainst(timeModelSel,linksModel,yearsSel,transfer_techs,vintage)
12510                  $(transfer_incidenceModel(nodesModelSel,linksModel) > 0) )
12511          * transfer_coefficient(transfer_techs,vintage,commodity,"coefficient")
12512          * timeLength(timeModelSel))
12513   
12514      + 0.5 * sum((linksModel,transfer_techs,vintage)
12515              $(transfer_usedTech(linksModel,yearsSel,transfer_techs,vintage)
12516                  AND linksModelToCalc(linksModel)),
12517          (   transfer_flowAlong(timeModelSel,linksModel,yearsSel,transfer_techs,vintage)
12518                  $(transfer_incidenceModel(nodesModelSel,linksModel) <> 0)
12519            + transfer_flowAgainst(timeModelSel,linksModel,yearsSel,transfer_techs,vintage)
12520                  $(transfer_incidenceModel(nodesModelSel,linksModel) <> 0) )
12521          * timeLength(timeModelSel)
12522          * ( transfer_coefPerFlow(transfer_techs,vintage,commodity,"coefPerFlow")
12523              + sum(link_types,
12524                  transfer_coefPerLength(transfer_techs,vintage,commodity,link_types,"coefPerLength")
12525                  * transfer_lengthParam(linksModel,link_types,"length"))))
12526   
12527  * sourcesink
12528      + sum((sourcesink_techs)
12529              $sourcesink_enabled(nodesModelSel,yearsSel,sourcesink_techs,commodity),
12530          sourcesink_flow(timeModelSel,nodesModelSel,yearsSel,sourcesink_techs,commodity)
12531          * timeLength(timeModelSel))
12532      =e=
12533      0;
12534   
12535   
12536  * ==== model definition ====
12537   
12538  Model M_balance
12539  /
12540    Eq_balance_commodities
12541  /;
12542   
INCLUDE    C:\Local\REMix\framework\remix\framework\model\source\accounting\equations.gms
12544  * SPDX-FileCopyrightText: Copyright (c) 2023 German Aerospace Center (DLR)
12545  * SPDX-License-Identifier: BSD-3-Clause
12546   
12547  * // # accounting_equations
12548   
12549  * ==== declaration of variables ====
12550   
12551  variables
12552  accounting_indicator(accNodesModel,accYears,indicator)
12553  accounting_indicator_links(linksModel,years,indicator)
12554  accounting_objective
12555    ;
12556   
12557   
12558  * ==== definition of variables ====
12559   
12560  * set the variable levels to be fixed for years before the optimization years
12561  accounting_indicator.l(accNodesModel,accYears,indicator)
12562      $activeIndicators(accNodesModel,accYears,indicator)
12563      = 0;
12564   
12565  accounting_indicator.lo(accNodesModel,accYears,indicator)
12566      $(accounting_indicatorBounds(accNodesModel,accYears,indicator,"useLower") <> 0 )
12567      = accounting_indicatorBounds(accNodesModel,accYears,indicator,"lowerValue");
12568   
12569  accounting_indicator.up(accNodesModel,accYears,indicator)
12570      $(accounting_indicatorBounds(accNodesModel,accYears,indicator,"useUpper") <> 0 )
12571      = accounting_indicatorBounds(accNodesModel,accYears,indicator,"upperValue");
12572   
12573  accounting_indicator.fx(accNodesModel,accYears,indicator)
12574      $(accounting_indicatorBounds(accNodesModel,accYears,indicator,"useFixed") <> 0 )
12575      = accounting_indicatorBounds(accNodesModel,accYears,indicator,"fixedValue");
12576   
12577   
12578  accounting_indicator_links.lo(linksModelToCalc,yearsToCalc,indicator)
12579      $(accounting_indicatorBounds_links(linksModelToCalc,yearsToCalc,indicator,"useLower") <> 0 )
12580      = accounting_indicatorBounds_links(linksModelToCalc,yearsToCalc,indicator,"lowerValue");
12581   
12582  accounting_indicator_links.up(linksModelToCalc,yearsToCalc,indicator)
12583      $(accounting_indicatorBounds_links(linksModelToCalc,yearsToCalc,indicator,"useUpper") <> 0 )
12584      = accounting_indicatorBounds_links(linksModelToCalc,yearsToCalc,indicator,"upperValue");
12585   
12586  accounting_indicator_links.fx(linksModelToCalc,yearsToCalc,indicator)
12587      $(accounting_indicatorBounds_links(linksModelToCalc,yearsToCalc,indicator,"useFixed") <> 0 )
12588      = accounting_indicatorBounds_links(linksModelToCalc,yearsToCalc,indicator,"fixedValue");
12589   
12590   
12591  * ==== declaration of equations ====
12592   
12593  equations
12594  Eq_accounting_indicatorCalc(accNodesModel,accYears,indicator
12595      ) "Calculates the level of an indicator per accounting region"
12596  Eq_accounting_indicatorCalc_links(linksModel,years,indicator
12597      ) "Calculates the level of an indicator per model link"
12598  Eq_accounting_objective "Calculates the objective value based on the specified indicator"
12599    ;
12600   
12601   
12602  * ==== equations definition ====
12603  * // ## Equations
12604  * // ### Accounting Indicator Calculation
12605  * // Calculates the indicators for each model node for converters, sources and sinks, transfer, storage and variable indicators.
12606  * // {Eq_accounting_indicatorCalc}
12607  Eq_accounting_indicatorCalc(accNodesModel,accYearsSel(accYears),indicator)
12608      $activeIndicators(accNodesModel,accYears,indicator)
12609      ..
12610      accounting_indicator(accNodesModel,accYears,indicator)
12611      =e=
12612   
12613  * == variable indicators ==
12614      sum((accNodesModel_a,accYears_a,indicator_a)
12615          $(compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
12616              and variableIndicators(accNodesModel_a,accYears_a,indicator_a)),
12617          compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
12618          * accounting_indicator(accNodesModel_a,accYears_a,indicator_a))
12619   
12620  * == converters ==
12621      + sum ((accNodesModel_a,nodesModelSel,accYears_a,yearsSel,indicator_a)
12622              $( compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
12623                  and sameas(nodesModelSel,accNodesModel_a) and sameas(yearsSel,accYears_a)),
12624          compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
12625          *
12626          ( sum ((converter_techs,vintage)
12627                      $(converter_availTech(nodesModelSel,yearsSel,converter_techs,vintage)
12628                          and accounting_converterUnits(indicator_a,nodesModelSel,converter_techs,vintage,"useAnnuity") = 0),
12629              converter_unitsBuild(nodesModelSel,yearsSel,converter_techs,vintage)
12630              * accounting_converterUnits(indicator_a,nodesModelSel,converter_techs,vintage,"perUnitBuild"))
12631   
12632          + sum ((years_a,converter_techs,vintage)
12633                      $(converter_availTech(nodesModelSel,years_a,converter_techs,vintage)
12634                          and years_a.val < sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
12635                          and accounting_converterUnits(indicator_a,nodesModelSel,converter_techs,vintage,"useAnnuity") = 1
12636                          and years_a.val + accounting_converterUnits(indicator_a,nodesModelSel,converter_techs,vintage,"amorTime") > yearsSel.val
12637                          and years_a.val <= yearsSel.val ),
12638              converter_unitsBuild(nodesModelSel,years_a,converter_techs,vintage)
12639              * accounting_converterUnits(indicator_a,nodesModelSel,converter_techs,vintage,"perUnitBuild")
12640              * accounting_annuityFactor_converter(indicator_a,nodesModelSel,converter_techs,vintage) )
12641   
12642          + sum ((yearsToCalc,converter_techs,vintage)
12643                      $(converter_availTech(nodesModelSel,yearsToCalc,converter_techs,vintage)
12644                          and yearsToCalc.val >= sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
12645                          and accounting_converterUnits(indicator_a,nodesModelSel,converter_techs,vintage,"useAnnuity") = 1
12646                          and yearsToCalc.val + accounting_converterUnits(indicator_a,nodesModelSel,converter_techs,vintage,"amorTime") > yearsSel.val
12647                          and yearsToCalc.val <= yearsSel.val ),
12648              converter_unitsBuild(nodesModelSel,yearsToCalc,converter_techs,vintage)
12649              * accounting_converterUnits(indicator_a,nodesModelSel,converter_techs,vintage,"perUnitBuild")
12650              * accounting_annuityFactor_converter(indicator_a,nodesModelSel,converter_techs,vintage) )
12651   
12652          + sum ((converter_techs,vintage)
12653                      $converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage),
12654              converter_unitsDecom(nodesModelSel,yearsSel,converter_techs,vintage)
12655              * accounting_converterUnits(indicator_a,nodesModelSel,converter_techs,vintage,"perUnitDecom")
12656   
12657              + converter_unitsTotal(nodesModelSel,yearsSel,converter_techs,vintage)
12658              * accounting_converterUnits(indicator_a,nodesModelSel,converter_techs,vintage,"perUnitTotal") )
12659   
12660          + sum ((timeModelSel,converter_techs,vintage,activity)
12661                      $converter_usedTechAct(nodesModelSel,yearsSel,converter_techs,vintage,activity),
12662              converter_activity(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity)
12663              * timeLength(timeModelSel)
12664              * accounting_converterActivity(indicator_a,nodesModelSel,converter_techs,vintage,activity,"perActivity") )
12665   
12666          + sum ((timeModelSel,converter_techs,vintage)
12667                      $converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage),
12668              converter_unitStartups(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
12669              * accounting_converterStartup(indicator_a,nodesModelSel,converter_techs,vintage,"perStartup") )
12670   
12671          + sum ((timeModelSel,converter_techs,vintage)
12672                      $converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage),
12673              converter_rampPos(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
12674              * (accounting_converterStartup(indicator_a,nodesModelSel,converter_techs,vintage,"perRamp")
12675                 + accounting_converterStartup(indicator_a,nodesModelSel,converter_techs,vintage,"perRampPos"))
12676   
12677              + converter_rampNeg(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
12678              * (accounting_converterStartup(indicator_a,nodesModelSel,converter_techs,vintage,"perRamp")
12679                 + accounting_converterStartup(indicator_a,nodesModelSel,converter_techs,vintage,"perRampNeg")))
12680          )
12681      )
12682   
12683  * == storage ==
12684      + sum ((accNodesModel_a,nodesModelSel,accYears_a,yearsSel,indicator_a)
12685              $( compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
12686                  and sameas(nodesModelSel,accNodesModel_a) and sameas(yearsSel,accYears_a)),
12687          compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
12688          *
12689          ( sum ((storage_techs,vintage)
12690                      $(storage_availTech(nodesModelSel,yearsSel,storage_techs,vintage)
12691                          and accounting_storageUnits(indicator_a,nodesModelSel,storage_techs,vintage,"useAnnuity") = 0),
12692              storage_unitsBuild(nodesModelSel,yearsSel,storage_techs,vintage)
12693              * accounting_storageUnits(indicator_a,nodesModelSel,storage_techs,vintage,"perUnitBuild") )
12694   
12695          + sum ((years_a,storage_techs,vintage)
12696                      $(storage_availTech(nodesModelSel,years_a,storage_techs,vintage)
12697                          and years_a.val < sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
12698                          and accounting_storageUnits(indicator_a,nodesModelSel,storage_techs,vintage,"useAnnuity") = 1
12699                          and years_a.val + accounting_storageUnits(indicator_a,nodesModelSel,storage_techs,vintage,"amorTime") > yearsSel.val
12700                          and years_a.val <= yearsSel.val ),
12701              storage_unitsBuild(nodesModelSel,years_a,storage_techs,vintage)
12702              * accounting_storageUnits(indicator_a,nodesModelSel,storage_techs,vintage,"perUnitBuild")
12703              * accounting_annuityFactor_storage(indicator_a,nodesModelSel,storage_techs,vintage) )
12704   
12705          + sum ((yearsToCalc,storage_techs,vintage)
12706                      $(storage_availTech(nodesModelSel,yearsToCalc,storage_techs,vintage)
12707                          and yearsToCalc.val >= sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
12708                          and accounting_storageUnits(indicator_a,nodesModelSel,storage_techs,vintage,"useAnnuity") = 1
12709                          and yearsToCalc.val + accounting_storageUnits(indicator_a,nodesModelSel,storage_techs,vintage,"amorTime") > yearsSel.val
12710                          and yearsToCalc.val <= yearsSel.val ),
12711              storage_unitsBuild(nodesModelSel,yearsToCalc,storage_techs,vintage)
12712              * accounting_storageUnits(indicator_a,nodesModelSel,storage_techs,vintage,"perUnitBuild")
12713              * accounting_annuityFactor_storage(indicator_a,nodesModelSel,storage_techs,vintage) )
12714   
12715          + sum ((storage_techs,vintage)
12716                      $storage_usedTech(nodesModelSel,yearsSel,storage_techs,vintage),
12717              storage_unitsDecom(nodesModelSel,yearsSel,storage_techs,vintage)
12718              * accounting_storageUnits(indicator_a,nodesModelSel,storage_techs,vintage,"perUnitDecom")
12719   
12720              + storage_unitsTotal(nodesModelSel,yearsSel,storage_techs,vintage)
12721              * accounting_storageUnits(indicator_a,nodesModelSel,storage_techs,vintage,"perUnitTotal") )
12722          )
12723      )
12724   
12725   
12726  * == transfer ==
12727      + sum ((accNodesModel_a,nodesModelSel,accYears_a,yearsSel,indicator_a)
12728              $( compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
12729                  and sameas(nodesModelSel,accNodesModel_a) and sameas(yearsSel,accYears_a)),
12730          compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
12731          *
12732          ( sum ((linksModelToCalc,transfer_techs,vintage)
12733                      $(transfer_availTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
12734                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0
12735                          and accounting_transferLinks(indicator_a,linksModelToCalc,transfer_techs,vintage,"useAnnuity") = 0),
12736              0.5
12737              * transfer_linksBuild(linksModelToCalc,yearsSel,transfer_techs,vintage)
12738              * accounting_transferLinks(indicator_a,linksModelToCalc,transfer_techs,vintage,"perLinkBuild") )
12739   
12740          + sum ((linksModelToCalc,years_a,transfer_techs,vintage)
12741                      $(transfer_availTech(linksModelToCalc,years_a,transfer_techs,vintage)
12742                          and years_a.val < sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
12743                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0
12744                          and accounting_transferLinks(indicator_a,linksModelToCalc,transfer_techs,vintage,"useAnnuity") = 1
12745                          and years_a.val + accounting_transferLinks(indicator_a,linksModelToCalc,transfer_techs,vintage,"amorTime") > yearsSel.val
12746                          and years_a.val <= yearsSel.val ),
12747              0.5
12748              * transfer_linksBuild(linksModelToCalc,years_a,transfer_techs,vintage)
12749              * accounting_transferLinks(indicator_a,linksModelToCalc,transfer_techs,vintage,"perLinkBuild")
12750              * accounting_annuityFactor_transferLink(indicator_a,linksModelToCalc,transfer_techs,vintage) )
12751   
12752          + sum ((linksModelToCalc,yearsToCalc,transfer_techs,vintage)
12753                      $(transfer_availTech(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
12754                          and yearsToCalc.val >= sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
12755                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0
12756                          and accounting_transferLinks(indicator_a,linksModelToCalc,transfer_techs,vintage,"useAnnuity") = 1
12757                          and yearsToCalc.val + accounting_transferLinks(indicator_a,linksModelToCalc,transfer_techs,vintage,"amorTime") > yearsSel.val
12758                          and yearsToCalc.val <= yearsSel.val ),
12759              0.5
12760              * transfer_linksBuild(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
12761              * accounting_transferLinks(indicator_a,linksModelToCalc,transfer_techs,vintage,"perLinkBuild")
12762              * accounting_annuityFactor_transferLink(indicator_a,linksModelToCalc,transfer_techs,vintage) )
12763   
12764          + sum ((linksModelToCalc,transfer_techs,vintage,link_types)
12765                      $(transfer_availTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
12766                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0
12767                          and accounting_transferPerLength(indicator_a,linksModelToCalc,transfer_techs,vintage,link_types,"useAnnuity") = 0 ),
12768              0.5
12769              * transfer_linksBuild(linksModelToCalc,yearsSel,transfer_techs,vintage)
12770              * transfer_lengthParam(linksModelToCalc,link_types,"length")
12771              * accounting_transferPerLength(indicator_a,linksModelToCalc,transfer_techs,vintage,link_types,"perLengthBuild") )
12772   
12773          + sum ((linksModelToCalc,years_a,transfer_techs,vintage,link_types)
12774                      $(transfer_availTech(linksModelToCalc,years_a,transfer_techs,vintage)
12775                          and years_a.val < sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
12776                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0
12777                          and accounting_transferPerLength(indicator_a,linksModelToCalc,transfer_techs,vintage,link_types,"useAnnuity") = 1
12778                          and years_a.val + accounting_transferPerLength(indicator_a,linksModelToCalc,transfer_techs,vintage,link_types,"amorTime") > yearsSel.val
12779                          and years_a.val <= yearsSel.val ),
12780              0.5
12781              * transfer_linksBuild(linksModelToCalc,years_a,transfer_techs,vintage)
12782              * transfer_lengthParam(linksModelToCalc,link_types,"length")
12783              * accounting_transferPerLength(indicator_a,linksModelToCalc,transfer_techs,vintage,link_types,"perLengthBuild")
12784              * accounting_annuityFactor_transferDistance(indicator_a,linksModelToCalc,transfer_techs,vintage,link_types) )
12785   
12786          + sum ((linksModelToCalc,yearsToCalc,transfer_techs,vintage,link_types)
12787                      $(transfer_availTech(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
12788                          and yearsToCalc.val >= sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
12789                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0
12790                          and accounting_transferPerLength(indicator_a,linksModelToCalc,transfer_techs,vintage,link_types,"useAnnuity") = 1
12791                          and yearsToCalc.val + accounting_transferPerLength(indicator_a,linksModelToCalc,transfer_techs,vintage,link_types,"amorTime") > yearsSel.val
12792                          and yearsToCalc.val <= yearsSel.val ),
12793              0.5
12794              * transfer_linksBuild(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
12795              * transfer_lengthParam(linksModelToCalc,link_types,"length")
12796              * accounting_transferPerLength(indicator_a,linksModelToCalc,transfer_techs,vintage,link_types,"perLengthBuild")
12797              * accounting_annuityFactor_transferDistance(indicator_a,linksModelToCalc,transfer_techs,vintage,link_types) )
12798   
12799          + sum ((linksModelToCalc,transfer_techs,vintage)
12800                      $(transfer_usedTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
12801                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0 ),
12802              0.5
12803              * transfer_linksDecom(linksModelToCalc,yearsSel,transfer_techs,vintage)
12804              * accounting_transferLinks(indicator_a,linksModelToCalc,transfer_techs,vintage,"perLinkDecom")
12805   
12806              + 0.5
12807              * transfer_linksTotal(linksModelToCalc,yearsSel,transfer_techs,vintage)
12808              * accounting_transferLinks(indicator_a,linksModelToCalc,transfer_techs,vintage,"perLinkTotal")
12809   
12810              + 0.5
12811              * sum (link_types,
12812                  transfer_linksDecom(linksModelToCalc,yearsSel,transfer_techs,vintage)
12813                  * transfer_lengthParam(linksModelToCalc,link_types,"length")
12814                  * accounting_transferPerLength(indicator_a,linksModelToCalc,transfer_techs,vintage,link_types,"perLengthDecom")
12815   
12816                  + transfer_linksTotal(linksModelToCalc,yearsSel,transfer_techs,vintage)
12817                  * transfer_lengthParam(linksModelToCalc,link_types,"length")
12818                  * accounting_transferPerLength(indicator_a,linksModelToCalc,transfer_techs,vintage,link_types,"perLengthTotal"))
12819   
12820              + 0.5
12821              * sum (timeModelSel,
12822                  transfer_flowAlong(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
12823                  * timeLength(timeModelSel)
12824                  * ( accounting_transferLinks(indicator_a,linksModelToCalc,transfer_techs,vintage,"perFlow")
12825                      + accounting_transferLinks(indicator_a,linksModelToCalc,transfer_techs,vintage,"perFlowAlong"))
12826   
12827                  + transfer_flowAgainst(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
12828                  * timeLength(timeModelSel)
12829                  * ( accounting_transferLinks(indicator_a,linksModelToCalc,transfer_techs,vintage,"perFlow")
12830                      + accounting_transferLinks(indicator_a,linksModelToCalc,transfer_techs,vintage,"perFlowAgainst")))
12831   
12832              + 0.5
12833              * sum ((timeModelSel, link_types),
12834                  transfer_flowAlong(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
12835                  * timeLength(timeModelSel)
12836                  * transfer_lengthParam(linksModelToCalc,link_types,"length")
12837                  * (accounting_transferPerLength(indicator_a,linksModelToCalc,transfer_techs,vintage,link_types,"perFlow")
12838                      + accounting_transferPerLength(indicator_a,linksModelToCalc,transfer_techs,vintage,link_types,"perFlowAlong"))
12839   
12840                  + transfer_flowAgainst(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
12841                  * timeLength(timeModelSel)
12842                  * transfer_lengthParam(linksModelToCalc,link_types,"length")
12843                  * (accounting_transferPerLength(indicator_a,linksModelToCalc,transfer_techs,vintage,link_types,"perFlow")
12844                      + accounting_transferPerLength(indicator_a,linksModelToCalc,transfer_techs,vintage,link_types,"perFlowAgainst")))
12845              )
12846          )
12847      )
12848   
12849   
12850  * == sources / sinks ==
12851      + sum ((accNodesModel_a,nodesModelSel,accYears_a,yearsSel,indicator_a)
12852              $( compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
12853                  and sameas(nodesModelSel,accNodesModel_a) and sameas(yearsSel,accYears_a)),
12854          compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
12855          *
12856          sum ((timeModelSel,sourcesink_techs,commodity)
12857                  $sourcesink_enabled(nodesModelSel,yearsSel,sourcesink_techs,commodity),
12858              sourcesink_flow(timeModelSel,nodesModelSel,yearsSel,sourcesink_techs,commodity)
12859              * timeLength(timeModelSel)
12860              * accounting_sourcesinkFlow(indicator_a,nodesModelSel,yearsSel,sourcesink_techs,commodity,"perFlow") )
12861      );
12862   
12863  * // ### Accounting Indicator Calculation Links
12864  * // Calculates the indicators for each transfer for converters, sources and sinks, transfer, storage and variable indicators.
12865  * // {Eq_accounting_indicatorCalc_links}
12866  Eq_accounting_indicatorCalc_links(linksModelToCalc,yearsSel,indicator)
12867      $activeIndicators_links(linksModelToCalc,yearsSel,indicator)
12868      ..
12869      accounting_indicator_links(linksModelToCalc,yearsSel,indicator)
12870      =e=
12871      sum ((transfer_techs,vintage)
12872                  $(transfer_availTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
12873                      and accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"useAnnuity") = 0),
12874          transfer_linksBuild(linksModelToCalc,yearsSel,transfer_techs,vintage)
12875          * accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"perLinkBuild") )
12876   
12877      + sum ((years_a,transfer_techs,vintage)
12878                  $(transfer_availTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
12879                      and accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"useAnnuity") = 1
12880                      and years_a.val + accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"amorTime") > yearsSel.val
12881                      and years_a.val <= yearsSel.val ),
12882          transfer_linksBuild(linksModelToCalc,years_a,transfer_techs,vintage)
12883          * accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"perLinkBuild")
12884          * accounting_annuityFactor_transferLink(indicator,linksModelToCalc,transfer_techs,vintage) )
12885   
12886      + sum ((transfer_techs,vintage,link_types)
12887                  $(transfer_availTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
12888                      and accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"useAnnuity") = 0 ),
12889          transfer_linksBuild(linksModelToCalc,yearsSel,transfer_techs,vintage)
12890          * transfer_lengthParam(linksModelToCalc,link_types,"length")
12891          * accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"perLengthBuild") )
12892   
12893      + sum ((years_a,transfer_techs,vintage,link_types)
12894                  $(transfer_availTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
12895                      and accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"useAnnuity") = 1
12896                      and years_a.val + accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"amorTime") > yearsSel.val
12897                      and years_a.val <= yearsSel.val ),
12898          transfer_linksBuild(linksModelToCalc,years_a,transfer_techs,vintage)
12899          * transfer_lengthParam(linksModelToCalc,link_types,"length")
12900          * accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"perLengthBuild")
12901          * accounting_annuityFactor_transferDistance(indicator,linksModelToCalc,transfer_techs,vintage,link_types) )
12902   
12903      + sum ((transfer_techs,vintage)
12904                  $(transfer_usedTech(linksModelToCalc,yearsSel,transfer_techs,vintage)),
12905          transfer_linksDecom(linksModelToCalc,yearsSel,transfer_techs,vintage)
12906          * accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"perLinkDecom")
12907   
12908          + transfer_linksTotal(linksModelToCalc,yearsSel,transfer_techs,vintage)
12909          * accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"perLinkTotal")
12910   
12911          + sum (link_types,
12912              transfer_linksDecom(linksModelToCalc,yearsSel,transfer_techs,vintage)
12913              * transfer_lengthParam(linksModelToCalc,link_types,"length")
12914              * accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"perLengthDecom")
12915   
12916              + transfer_linksTotal(linksModelToCalc,yearsSel,transfer_techs,vintage)
12917              * transfer_lengthParam(linksModelToCalc,link_types,"length")
12918              * accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"perLengthTotal"))
12919   
12920          + sum (timeModelSel,
12921              transfer_flowAlong(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
12922              * timeLength(timeModelSel)
12923              * ( accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"perFlow")
12924                  + accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"perFlowAlong"))
12925   
12926              + transfer_flowAgainst(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
12927              * timeLength(timeModelSel)
12928              * ( accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"perFlow")
12929                  + accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"perFlowAgainst")))
12930   
12931          + sum ((timeModelSel, link_types),
12932              transfer_flowAlong(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
12933              * timeLength(timeModelSel)
12934              * transfer_lengthParam(linksModelToCalc,link_types,"length")
12935              * (accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"perFlow")
12936                  + accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"perFlowAlong"))
12937   
12938              + transfer_flowAgainst(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
12939              * timeLength(timeModelSel)
12940              * transfer_lengthParam(linksModelToCalc,link_types,"length")
12941              * (accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"perFlow")
12942                  + accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"perFlowAgainst")))
12943          );
12944   
12945  * // ### Accounting Objective
12946  * // Calculates the indicators for the objective.
12947  * // {Eq_accounting_objective}
12948  Eq_accounting_objective
12949      ..
12950      accounting_objective
12951      =e=
12952      sum ((accNodesModel,accYears,indicator)
12953              $(accounting_indicatorBounds(accNodesModel,accYears,indicator,"obj") <> 0 ),
12954          accounting_indicator(accNodesModel,accYears,indicator) )
12955   
12956   
12957  * ==== model definition ====
12958   
12959  Model M_accounting
12960  /
12961  Eq_accounting_indicatorCalc_links
12962  Eq_accounting_indicatorCalc
12963  Eq_accounting_objective
12964  /;
INCLUDE    C:\Local\REMix\framework\remix\framework\model\source\optiframe.gms
12966  * SPDX-FileCopyrightText: Copyright (c) 2023 German Aerospace Center (DLR)
12967  * SPDX-License-Identifier: BSD-3-Clause
12968   
12969  * ==== optimization frames ====
12971   
12972  * mapping from optimization frame to years
12974  set optiframe / of1 * of2 /;
12975  set optiframeToCalc(optiframe);
12976   
12978  set map_optiframe(optiframe,years) / of1 . #yearsToCalc /;
12980   
12982   
12983  option optiframeToCalc < map_optiframe;
12984   
12985  Model remix /
12986    M_converter
12987    M_storage
12988    M_transfer
12989    M_sourcesink
12990    M_balance
12991    M_accounting
12992  /;
12993   
12994   
12995  * ==== include methods  ====
12996   
12997  * check if the method is valid
13003   
13004   
13005  * if method is pips write the checkanno tool
INCLUDE    C:\Local\REMix\framework\remix\framework\model\source\methods\checkanno.gms
13007  * SPDX-FileCopyrightText: Copyright (c) 2023 German Aerospace Center (DLR)
13008  * SPDX-License-Identifier: BSD-3-Clause
13009   
13012   
13015   
13016  * if method is pips generate the annotated gdx file
INCLUDE    C:\Local\REMix\framework\remix\framework\model\source\methods\pips.gms
13018  * SPDX-FileCopyrightText: Copyright (c) 2023 German Aerospace Center (DLR)
13019  * SPDX-License-Identifier: BSD-3-Clause
13020   
13024   
13025  * if method is solve run the model with commercial solvers
INCLUDE    C:\Local\REMix\framework\remix\framework\model\source\methods\solve.gms
13027  * SPDX-FileCopyrightText: Copyright (c) 2023 German Aerospace Center (DLR)
13028  * SPDX-License-Identifier: BSD-3-Clause
13029   
13032   
13034   
13035  * ==== global options ====
13042   
13043  * ==== general solver options ====
13053   
13054  * ==== cplex options ====
13063   
13064  * ==== copt options ====
13068   
13069  * ==== debug options ====
13072   
13073   
13074  * ==== setup optimization ====
13075  if ((sum(nodesModelToCalc, 1)>40 or sum(timeModelToCalc, 1)>50) and not 0,
13076     option limRow=0, limCol=0, solPrint=off;
13077  else
13078     option limRow=100000, limCol=100000, solPrint=on;
13079  );
13080   
13082   
13083  option mip = cplex;
13084  option reslim = 604800;
13085  option optcr = 1e-3;
13086  remix.threads=4;
13087  remix.optFile = 1;
13088  remix.solveLink = 0;
13089  remix.holdFixed = 1;
13090   
13091   
13092  * ==== configure optionfiles ====
13093   
13095  file opt / "cplex.opt" /;
13096  put opt;
13098  put "rerun no" /;
13099  put "iis 1" /;
13100  put "lpmethod 4" /;
13102  put "barorder 0" /;
13103  put "preind 1" /;
13104  put "scaind 0" /;
13105  put "predual -1" /;
13106  put "baralg 0" /;
13107  put "barstartalg 1" /;
13108  put "barepcomp 1e-6" /;
13109  put "solutiontype 2" /;
13110  put "startalg 4" /;
13111  put "epgap 1e-3" /;
13112  put "quality 1" /;
13113  put "barcolnz 0" /;
13114  put "threads 4" /;
13115  put "parallelmode 1" /;
13118  putclose;
13119   
13121   
13122   
13123  * ==== solve the problem ====
13124   
13125  loop ( optiframeToCalc,
13126      yearsSel(years) = no;
13127      yearsSel(years)$map_optiframe(optiframeToCalc,years) = yes;
13128      yearsToFix(years) = no;
13129      yearsToFix(years)$(years.val < smin(years_a$yearsSel(years_a), years_a.val)) = yes;
13130      accYearsSel(accYears) = no;
13131      accYearsSel("horizon") = yes;
13132      accYearsSel(accYears)$(sum(yearsSel$sameas(accYears,yearsSel), 1)) = yes;
13133      accYearsToFix(accYears) = no;
13134      accYearsToFix(accYears)$(sum(years$(sameas(years,accYears) and years.val < smin(years_a$yearsSel(years_a), years_a.val)), 1) > 0) = yes;
13135      timeModelSel(timeModel) = no;
13136      timeModelSel(timeModel)$timeModelToCalc(timeModel) = yes;
13137      nodesModelSel(nodesModel) = no;
13138      nodesModelSel(nodesModel)$nodesModelToCalc(nodesModel) = yes;
13139   
13140  * Fix decision for years previously optimized in case of myopic or foresight
13141      converter_unitsDelta(nodesModelToCalc,yearsToFix,converter_techs)
13142          $(sum(yearsToCalc$sameas(yearsToFix, yearsToCalc), 1))
13143          = sum(vintage, converter_unitsTotal.l(nodesModelToCalc,yearsToFix,converter_techs,vintage))
13144              - converter_capacityParam(nodesModelToCalc,yearsToFix,converter_techs,"unitsUpperLimit");
13145      converter_unitsDelta(nodesModelToCalc,yearsToFix,converter_techs)
13146          $(converter_unitsDelta(nodesModelToCalc,yearsToFix,converter_techs) < 0) = 0;
13147   
13148      converter_unitsBuild.l(nodesModelToCalc,yearsToFix,converter_techs,vintage)
13149          $converter_availTech(nodesModelToCalc,yearsToFix,converter_techs,vintage)
13150          = converter_unitsBuild.l(nodesModelToCalc,yearsToFix,converter_techs,vintage)
13151              - converter_unitsDelta(nodesModelToCalc,yearsToFix,converter_techs);
13152   
13153      converter_unitsBuild.l(nodesModelToCalc,yearsToFix,converter_techs,vintage)
13154          $(converter_unitsBuild.l(nodesModelToCalc,yearsToFix,converter_techs,vintage) < 0) = 0;
13155      converter_unitsBuild.fx(nodesModelToCalc,yearsToFix,converter_techs,vintage)
13156          = converter_unitsBuild.l(nodesModelToCalc,yearsToFix,converter_techs,vintage);
13157      converter_unitsDecom.l(nodesModelToCalc,yearsToFix,converter_techs,vintage)
13158          $(converter_unitsDecom.l(nodesModelToCalc,yearsToFix,converter_techs,vintage) < 0) = 0;
13159      converter_unitsDecom.fx(nodesModelToCalc,yearsToFix,converter_techs,vintage)
13160          = converter_unitsDecom.l(nodesModelToCalc,yearsToFix,converter_techs,vintage);
13161      converter_unitsTotal.fx(nodesModelToCalc,yearsToFix,converter_techs,vintage)
13162          = converter_unitsTotal.l(nodesModelToCalc,yearsToFix,converter_techs,vintage);
13163   
13164   
13165      storage_unitsDelta(nodesModelToCalc,yearsToFix,storage_techs)
13166          $(sum(yearsToCalc$sameas(yearsToFix, yearsToCalc), 1))
13167          = sum(vintage, storage_unitsTotal.l(nodesModelToCalc,yearsToFix,storage_techs,vintage))
13168              - storage_reservoirParam(nodesModelToCalc,yearsToFix,storage_techs,"unitsUpperLimit");
13169      storage_unitsDelta(nodesModelToCalc,yearsToFix,storage_techs)
13170          $(storage_unitsDelta(nodesModelToCalc,yearsToFix,storage_techs) < 0) = 0;
13171   
13172      storage_unitsBuild.l(nodesModelToCalc,yearsToFix,storage_techs,vintage)
13173          $storage_availTech(nodesModelToCalc,yearsToFix,storage_techs,vintage)
13174          = storage_unitsBuild.l(nodesModelToCalc,yearsToFix,storage_techs,vintage)
13175              - storage_unitsDelta(nodesModelToCalc,yearsToFix,storage_techs);
13176   
13177      storage_unitsBuild.l(nodesModelToCalc,yearsToFix,storage_techs,vintage)
13178          $(storage_unitsBuild.l(nodesModelToCalc,yearsToFix,storage_techs,vintage) < 0) = 0;
13179      storage_unitsBuild.fx(nodesModelToCalc,yearsToFix,storage_techs,vintage)
13180          = storage_unitsBuild.l(nodesModelToCalc,yearsToFix,storage_techs,vintage);
13181      storage_unitsDecom.l(nodesModelToCalc,yearsToFix,storage_techs,vintage)
13182          $(storage_unitsDecom.l(nodesModelToCalc,yearsToFix,storage_techs,vintage) < 0) = 0;
13183      storage_unitsDecom.fx(nodesModelToCalc,yearsToFix,storage_techs,vintage)
13184          = storage_unitsDecom.l(nodesModelToCalc,yearsToFix,storage_techs,vintage);
13185      storage_unitsTotal.fx(nodesModelToCalc,yearsToFix,storage_techs,vintage)
13186          = storage_unitsTotal.l(nodesModelToCalc,yearsToFix,storage_techs,vintage);
13187   
13188   
13189      transfer_linksDelta(linksModelToCalc,yearsToFix,transfer_techs)
13190          $(sum(yearsToCalc$sameas(yearsToFix, yearsToCalc), 1))
13191          = sum(vintage, transfer_linksTotal.l(linksModelToCalc,yearsToFix,transfer_techs,vintage))
13192              - transfer_linksParam(linksModelToCalc,yearsToFix,transfer_techs,"linksUpperLimit");
13193      transfer_linksDelta(linksModelToCalc,yearsToFix,transfer_techs)
13194          $(transfer_linksDelta(linksModelToCalc,yearsToFix,transfer_techs) < 0) = 0;
13195   
13196      transfer_linksBuild.l(linksModelToCalc,yearsToFix,transfer_techs,vintage)
13197          $transfer_availTech(linksModelToCalc,yearsToFix,transfer_techs,vintage)
13198          = transfer_linksBuild.l(linksModelToCalc,yearsToFix,transfer_techs,vintage)
13199              - transfer_linksDelta(linksModelToCalc,yearsToFix,transfer_techs);
13200   
13201      transfer_linksBuild.l(linksModelToCalc,yearsToFix,transfer_techs,vintage)
13202          $(transfer_linksBuild.l(linksModelToCalc,yearsToFix,transfer_techs,vintage) < 0) = 0;
13203      transfer_linksBuild.fx(linksModelToCalc,yearsToFix,transfer_techs,vintage)
13204          = transfer_linksBuild.l(linksModelToCalc,yearsToFix,transfer_techs,vintage);
13205      transfer_linksDecom.l(linksModelToCalc,yearsToFix,transfer_techs,vintage)
13206          $(transfer_linksDecom.l(linksModelToCalc,yearsToFix,transfer_techs,vintage) < 0) = 0;
13207      transfer_linksDecom.fx(linksModelToCalc,yearsToFix,transfer_techs,vintage)
13208          = transfer_linksDecom.l(linksModelToCalc,yearsToFix,transfer_techs,vintage);
13209      transfer_linksTotal.fx(linksModelToCalc,yearsToFix,transfer_techs,vintage)
13210          = transfer_linksTotal.l(linksModelToCalc,yearsToFix,transfer_techs,vintage);
13211   
13212      accounting_indicator.fx(accNodesModel,accYearsToFix,indicator)
13213          = accounting_indicator.l(accNodesModel,accYearsToFix,indicator);
13214   
13215  * Optimize and log values
13216      if (opti_sense < 0,
13217      solve remix minimizing accounting_objective using mip;
13218      else
13219      solve remix maximizing accounting_objective using mip;
13220      );
13221   
13222      put_utility 'log' / 'Model status ' remix.modelstat:0:0;
13223      put_utility 'log' / 'Objective value ' accounting_objective.l:0:3;
13224   
13225  );
13226   
13230   
13231  * if method is pareto solve the model once and afterwards run multiple points along the pareto front
INCLUDE    C:\Local\REMix\framework\remix\framework\model\source\methods\pareto.gms
13233  * SPDX-FileCopyrightText: Copyright (c) 2023 German Aerospace Center (DLR)
13234  * SPDX-License-Identifier: BSD-3-Clause
13235   
13239   
13240  * if method is mga solve the model once and afterwards maximize the length metric of indicators
INCLUDE    C:\Local\REMix\framework\remix\framework\model\source\methods\mga.gms
13242  * SPDX-FileCopyrightText: Copyright (c) 2023 German Aerospace Center (DLR)
13243  * SPDX-License-Identifier: BSD-3-Clause
13244   
13248   
13249  * if method is iternodes run the model by iterating through all nodesToCalc
INCLUDE    C:\Local\REMix\framework\remix\framework\model\source\methods\iternodes.gms
13251  * SPDX-FileCopyrightText: Copyright (c) 2023 German Aerospace Center (DLR)
13252  * SPDX-License-Identifier: BSD-3-Clause
13253   
13257   
13258  * if postcalc is one write the results gdx
INCLUDE    C:\Local\REMix\framework\remix\framework\model\source\postcalc\definition.gms
13260  * SPDX-FileCopyrightText: Copyright (c) 2023 German Aerospace Center (DLR)
13261  * SPDX-License-Identifier: BSD-3-Clause
13262   
13264   
13265  * ==== indicator accounting ====
13266   
13267  indicator_accounting_detailed(indicator,nodesModelToCalc,yearsToCalc,techs)
13268      =
13269  * == converters ==
13270      sum ((converter_techs(techs),vintage)
13271                  $(converter_availTech(nodesModelToCalc,yearsToCalc,converter_techs,vintage)
13272                      and accounting_converterUnits(indicator,nodesModelToCalc,converter_techs,vintage,"useAnnuity") = 0),
13273          converter_unitsBuild.l(nodesModelToCalc,yearsToCalc,converter_techs,vintage)
13274          * accounting_converterUnits(indicator,nodesModelToCalc,converter_techs,vintage,"perUnitBuild"))
13275   
13276      + sum ((years_a,converter_techs(techs),vintage)
13277                  $(converter_availTech(nodesModelToCalc,years_a,converter_techs,vintage)
13278                      and accounting_converterUnits(indicator,nodesModelToCalc,converter_techs,vintage,"useAnnuity") = 1
13279                      and years_a.val + accounting_converterUnits(indicator,nodesModelToCalc,converter_techs,vintage,"amorTime") > yearsToCalc.val
13280                      and years_a.val <= yearsToCalc.val ),
13281          converter_unitsBuild.l(nodesModelToCalc,years_a,converter_techs,vintage)
13282          * accounting_converterUnits(indicator,nodesModelToCalc,converter_techs,vintage,"perUnitBuild")
13283          * accounting_annuityFactor_converter(indicator,nodesModelToCalc,converter_techs,vintage) )
13284   
13285      + sum ((converter_techs(techs),vintage)
13286                  $converter_usedTech(nodesModelToCalc,yearsToCalc,converter_techs,vintage),
13287          converter_unitsDecom.l(nodesModelToCalc,yearsToCalc,converter_techs,vintage)
13288          * accounting_converterUnits(indicator,nodesModelToCalc,converter_techs,vintage,"perUnitDecom")
13289   
13290          + converter_unitsTotal.l(nodesModelToCalc,yearsToCalc,converter_techs,vintage)
13291          * accounting_converterUnits(indicator,nodesModelToCalc,converter_techs,vintage,"perUnitTotal") )
13292   
13293      + sum ((timeModelToCalc,converter_techs(techs),vintage,activity)
13294                  $converter_usedTechAct(nodesModelToCalc,yearsToCalc,converter_techs,vintage,activity),
13295          converter_activity.l(timeModelToCalc,nodesModelToCalc,yearsToCalc,converter_techs,vintage,activity)
13296          * timeLength(timeModelToCalc)
13297          * accounting_converterActivity(indicator,nodesModelToCalc,converter_techs,vintage,activity,"perActivity") )
13298   
13299      + sum ((timeModelToCalc,converter_techs(techs),vintage)
13300                  $converter_usedTech(nodesModelToCalc,yearsToCalc,converter_techs,vintage),
13301          converter_unitStartups.l(timeModelToCalc,nodesModelToCalc,yearsToCalc,converter_techs,vintage)
13302          * accounting_converterStartup(indicator,nodesModelToCalc,converter_techs,vintage,"perStartup") )
13303   
13304      + sum ((timeModelToCalc,converter_techs(techs),vintage)
13305                  $converter_usedTech(nodesModelToCalc,yearsToCalc,converter_techs,vintage),
13306          converter_rampPos.l(timeModelToCalc,nodesModelToCalc,yearsToCalc,converter_techs,vintage)
13307          * (accounting_converterStartup(indicator,nodesModelToCalc,converter_techs,vintage,"perRamp")
13308              + accounting_converterStartup(indicator,nodesModelToCalc,converter_techs,vintage,"perRampPos"))
13309   
13310          + converter_rampNeg.l(timeModelToCalc,nodesModelToCalc,yearsToCalc,converter_techs,vintage)
13311          * (accounting_converterStartup(indicator,nodesModelToCalc,converter_techs,vintage,"perRamp")
13312              + accounting_converterStartup(indicator,nodesModelToCalc,converter_techs,vintage,"perRampNeg")))
13313   
13314  * == storage ==
13315      + sum ((storage_techs(techs),vintage)
13316                  $(storage_availTech(nodesModelToCalc,yearsToCalc,storage_techs,vintage)
13317                      and accounting_storageUnits(indicator,nodesModelToCalc,storage_techs,vintage,"useAnnuity") = 0),
13318          storage_unitsBuild.l(nodesModelToCalc,yearsToCalc,storage_techs,vintage)
13319          * accounting_storageUnits(indicator,nodesModelToCalc,storage_techs,vintage,"perUnitBuild") )
13320   
13321      + sum ((years_a,storage_techs(techs),vintage)
13322                  $(storage_availTech(nodesModelToCalc,yearsToCalc,storage_techs,vintage)
13323                      and accounting_storageUnits(indicator,nodesModelToCalc,storage_techs,vintage,"useAnnuity") = 1
13324                      and years_a.val + accounting_storageUnits(indicator,nodesModelToCalc,storage_techs,vintage,"amorTime") > yearsToCalc.val
13325                      and years_a.val <= yearsToCalc.val ),
13326          storage_unitsBuild.l(nodesModelToCalc,years_a,storage_techs,vintage)
13327          * accounting_storageUnits(indicator,nodesModelToCalc,storage_techs,vintage,"perUnitBuild")
13328          * accounting_annuityFactor_storage(indicator,nodesModelToCalc,storage_techs,vintage) )
13329   
13330      + sum ((storage_techs(techs),vintage)
13331                  $storage_usedTech(nodesModelToCalc,yearsToCalc,storage_techs,vintage),
13332          storage_unitsDecom.l(nodesModelToCalc,yearsToCalc,storage_techs,vintage)
13333          * accounting_storageUnits(indicator,nodesModelToCalc,storage_techs,vintage,"perUnitDecom")
13334   
13335          + storage_unitsTotal.l(nodesModelToCalc,yearsToCalc,storage_techs,vintage)
13336          * accounting_storageUnits(indicator,nodesModelToCalc,storage_techs,vintage,"perUnitTotal") )
13337   
13338  * == transfer ==
13339      + sum ((linksModel,transfer_techs(techs),vintage)
13340                  $(transfer_availTech(linksModel,yearsToCalc,transfer_techs,vintage)
13341                      and linksModelToCalc(linksModel)
13342                      and transfer_incidenceModel(nodesModelToCalc,linksModel) <> 0
13343                      and accounting_transferLinks(indicator,linksModel,transfer_techs,vintage,"useAnnuity") = 0),
13344          0.5
13345          * transfer_linksBuild.l(linksModel,yearsToCalc,transfer_techs,vintage)
13346          * accounting_transferLinks(indicator,linksModel,transfer_techs,vintage,"perLinkBuild") )
13347   
13348      + sum ((linksModel,years_a,transfer_techs(techs),vintage)
13349                  $(transfer_availTech(linksModel,yearsToCalc,transfer_techs,vintage)
13350                      and linksModelToCalc(linksModel)
13351                      and transfer_incidenceModel(nodesModelToCalc,linksModel) <> 0
13352                      and accounting_transferLinks(indicator,linksModel,transfer_techs,vintage,"useAnnuity") = 1
13353                      and years_a.val + accounting_transferLinks(indicator,linksModel,transfer_techs,vintage,"amorTime") > yearsToCalc.val
13354                      and years_a.val <= yearsToCalc.val ),
13355          0.5
13356          * transfer_linksBuild.l(linksModel,years_a,transfer_techs,vintage)
13357          * accounting_transferLinks(indicator,linksModel,transfer_techs,vintage,"perLinkBuild")
13358          * accounting_annuityFactor_transferLink(indicator,linksModel,transfer_techs,vintage) )
13359   
13360      + sum ((linksModel,transfer_techs(techs),vintage,link_types)
13361                  $(transfer_availTech(linksModel,yearsToCalc,transfer_techs,vintage)
13362                      and linksModelToCalc(linksModel)
13363                      and transfer_incidenceModel(nodesModelToCalc,linksModel) <> 0
13364                      and accounting_transferPerLength(indicator,linksModel,transfer_techs,vintage,link_types,"useAnnuity") = 0 ),
13365          0.5
13366          * transfer_linksBuild.l(linksModel,yearsToCalc,transfer_techs,vintage)
13367          * transfer_lengthParam(linksModel,link_types,"length")
13368          * accounting_transferPerLength(indicator,linksModel,transfer_techs,vintage,link_types,"perLengthBuild") )
13369   
13370      + sum ((linksModel,years_a,transfer_techs(techs),vintage,link_types)
13371                  $(transfer_availTech(linksModel,yearsToCalc,transfer_techs,vintage)
13372                      and linksModelToCalc(linksModel)
13373                      and transfer_incidenceModel(nodesModelToCalc,linksModel) <> 0
13374                      and accounting_transferPerLength(indicator,linksModel,transfer_techs,vintage,link_types,"useAnnuity") = 1
13375                      and years_a.val + accounting_transferPerLength(indicator,linksModel,transfer_techs,vintage,link_types,"amorTime") > yearsToCalc.val
13376                      and years_a.val <= yearsToCalc.val ),
13377          0.5
13378          * transfer_linksBuild.l(linksModel,years_a,transfer_techs,vintage)
13379          * transfer_lengthParam(linksModel,link_types,"length")
13380          * accounting_transferPerLength(indicator,linksModel,transfer_techs,vintage,link_types,"perLengthBuild")
13381          * accounting_annuityFactor_transferDistance(indicator,linksModel,transfer_techs,vintage,link_types) )
13382   
13383      + sum ((linksModel,transfer_techs(techs),vintage)
13384                  $(transfer_usedTech(linksModel,yearsToCalc,transfer_techs,vintage)
13385                      and linksModelToCalc(linksModel)
13386                      and transfer_incidenceModel(nodesModelToCalc,linksModel) <> 0 ),
13387          0.5
13388          * transfer_linksDecom.l(linksModel,yearsToCalc,transfer_techs,vintage)
13389          * accounting_transferLinks(indicator,linksModel,transfer_techs,vintage,"perLinkDecom")
13390   
13391          + 0.5
13392          * transfer_linksTotal.l(linksModel,yearsToCalc,transfer_techs,vintage)
13393          * accounting_transferLinks(indicator,linksModel,transfer_techs,vintage,"perLinkTotal")
13394   
13395          + 0.5
13396          * sum (link_types,
13397              transfer_linksDecom.l(linksModel,yearsToCalc,transfer_techs,vintage)
13398              * transfer_lengthParam(linksModel,link_types,"length")
13399              * accounting_transferPerLength(indicator,linksModel,transfer_techs,vintage,link_types,"perLengthDecom")
13400   
13401              + transfer_linksTotal.l(linksModel,yearsToCalc,transfer_techs,vintage)
13402              * transfer_lengthParam(linksModel,link_types,"length")
13403              * accounting_transferPerLength(indicator,linksModel,transfer_techs,vintage,link_types,"perLengthTotal"))
13404   
13405          + 0.5
13406          * sum (timeModelToCalc,
13407              transfer_flowAlong.l(timeModelToCalc,linksModel,yearsToCalc,transfer_techs,vintage)
13408              * timeLength(timeModelToCalc)
13409              * ( accounting_transferLinks(indicator,linksModel,transfer_techs,vintage,"perFlow")
13410                  + accounting_transferLinks(indicator,linksModel,transfer_techs,vintage,"perFlowAlong"))
13411   
13412              + transfer_flowAgainst.l(timeModelToCalc,linksModel,yearsToCalc,transfer_techs,vintage)
13413              * timeLength(timeModelToCalc)
13414              * ( accounting_transferLinks(indicator,linksModel,transfer_techs,vintage,"perFlow")
13415                  + accounting_transferLinks(indicator,linksModel,transfer_techs,vintage,"perFlowAgainst")))
13416   
13417          + 0.5
13418          * sum ((timeModelToCalc, link_types),
13419              transfer_flowAlong.l(timeModelToCalc,linksModel,yearsToCalc,transfer_techs,vintage)
13420              * timeLength(timeModelToCalc)
13421              * transfer_lengthParam(linksModel,link_types,"length")
13422              * (accounting_transferPerLength(indicator,linksModel,transfer_techs,vintage,link_types,"perFlow")
13423                  + accounting_transferPerLength(indicator,linksModel,transfer_techs,vintage,link_types,"perFlowAlong"))
13424   
13425              + transfer_flowAgainst.l(timeModelToCalc,linksModel,yearsToCalc,transfer_techs,vintage)
13426              * timeLength(timeModelToCalc)
13427              * transfer_lengthParam(linksModel,link_types,"length")
13428              * (accounting_transferPerLength(indicator,linksModel,transfer_techs,vintage,link_types,"perFlow")
13429                  + accounting_transferPerLength(indicator,linksModel,transfer_techs,vintage,link_types,"perFlowAgainst"))))
13430   
13431   
13432  * == sources / sinks ==
13433      + sum ((timeModelToCalc,sourcesink_techs(techs),commodity)
13434              $sourcesink_enabled(nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity),
13435          sourcesink_flow.l(timeModelToCalc,nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity)
13436          * timeLength(timeModelToCalc)
13437          * accounting_sourcesinkFlow(indicator,nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity,"perFlow"))
13438      ;
13439   
13440   
13441  * ==== full set of main indicators ====
13442   
13443  indicator_accounting(accNodesModel,accYears,indicator)
13444      $sum((accNodesModel_a,accYears_a,indicator_a)
13445              $compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a), 1)
13446      =
13447      + sum((accNodesModel_a,accYears_a,indicator_a)
13448              $(compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
13449                  and variableIndicators(accNodesModel_a,accYears_a,indicator_a)),
13450          compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
13451          * accounting_indicator.l(accNodesModel_a,accYears_a,indicator_a))
13452   
13453      + sum((accNodesModel_a,accYears_a,indicator_a)
13454              $(compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)),
13455          compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
13456          * (sum((nodesModelToCalc,yearsToCalc,techs)
13457                  $(sameas(accNodesModel_a, nodesModelToCalc)
13458                      and sameas(accYears_a, yearsToCalc)),
13459                  indicator_accounting_detailed(indicator_a,nodesModelToCalc,yearsToCalc,techs))))
13460      ;
13461   
13462  indicator_accounting_comp(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
13463      $compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
13464      =
13465          compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
13466          * accounting_indicator.l(accNodesModel_a,accYears_a,indicator_a)
13467              $variableIndicators(accNodesModel_a,accYears_a,indicator_a)
13468   
13469          + compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
13470          * (sum((nodesModelToCalc,yearsToCalc,techs)
13471                  $(sameas(accNodesModel_a, nodesModelToCalc)
13472                      and sameas(accYears_a, yearsToCalc)),
13473                  indicator_accounting_detailed(indicator_a,nodesModelToCalc,yearsToCalc,techs)))
13474      ;
13475   
13476  indicator_accounting_ref(accNodesModel,accYears,indicator)
13477      $accounting_indicator.l(accNodesModel,accYears,indicator)
13478      = accounting_indicator.l(accNodesModel,accYears,indicator);
13479   
13480  * ==== link-specific indicator accounting ====
13481   
13482  indicator_accounting_links(indicator,nodesModelToCalc,nodesModelToCalc_a,linksModelToCalc,yearsToCalc,techs)
13483      $(transfer_incidenceModel(nodesModelToCalc,linksModelToCalc) < 0
13484          and transfer_incidenceModel(nodesModelToCalc_a,linksModelToCalc) > 0)
13485      =
13486      sum ((transfer_techs(techs),vintage)
13487                  $(transfer_availTech(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
13488                      and accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"useAnnuity") = 0),
13489          transfer_linksBuild.l(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
13490          * accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"perLinkBuild") )
13491   
13492      + sum ((years_a,transfer_techs(techs),vintage)
13493                  $(transfer_availTech(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
13494                      and accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"useAnnuity") = 1
13495                      and years_a.val + accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"amorTime") > yearsToCalc.val
13496                      and years_a.val <= yearsToCalc.val ),
13497          transfer_linksBuild.l(linksModelToCalc,years_a,transfer_techs,vintage)
13498          * accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"perLinkBuild")
13499          * accounting_annuityFactor_transferLink(indicator,linksModelToCalc,transfer_techs,vintage) )
13500   
13501      + sum ((transfer_techs(techs),vintage,link_types)
13502                  $(transfer_availTech(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
13503                      and accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"useAnnuity") = 0 ),
13504          transfer_linksBuild.l(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
13505          * transfer_lengthParam(linksModelToCalc,link_types,"length")
13506          * accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"perLengthBuild") )
13507   
13508      + sum ((years_a,transfer_techs(techs),vintage,link_types)
13509                  $(transfer_availTech(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
13510                      and accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"useAnnuity") = 1
13511                      and years_a.val + accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"amorTime") > yearsToCalc.val
13512                      and years_a.val <= yearsToCalc.val ),
13513          transfer_linksBuild.l(linksModelToCalc,years_a,transfer_techs,vintage)
13514          * transfer_lengthParam(linksModelToCalc,link_types,"length")
13515          * accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"perLengthBuild")
13516          * accounting_annuityFactor_transferDistance(indicator,linksModelToCalc,transfer_techs,vintage,link_types) )
13517   
13518      + sum ((transfer_techs(techs),vintage)
13519                  $(transfer_usedTech(linksModelToCalc,yearsToCalc,transfer_techs,vintage)),
13520          transfer_linksDecom.l(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
13521          * accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"perLinkDecom")
13522   
13523          + transfer_linksTotal.l(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
13524          * accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"perLinkTotal")
13525   
13526          + sum (link_types,
13527              transfer_linksDecom.l(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
13528              * transfer_lengthParam(linksModelToCalc,link_types,"length")
13529              * accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"perLengthDecom")
13530   
13531              + transfer_linksTotal.l(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
13532              * transfer_lengthParam(linksModelToCalc,link_types,"length")
13533              * accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"perLengthTotal"))
13534   
13535          + sum (timeModelToCalc,
13536              transfer_flowAlong.l(timeModelToCalc,linksModelToCalc,yearsToCalc,transfer_techs,vintage)
13537              * timeLength(timeModelToCalc)
13538              * ( accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"perFlow")
13539                  + accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"perFlowAlong"))
13540   
13541              + transfer_flowAgainst.l(timeModelToCalc,linksModelToCalc,yearsToCalc,transfer_techs,vintage)
13542              * timeLength(timeModelToCalc)
13543              * ( accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"perFlow")
13544                  + accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"perFlowAgainst")))
13545   
13546          + sum ((timeModelToCalc, link_types),
13547              transfer_flowAlong.l(timeModelToCalc,linksModelToCalc,yearsToCalc,transfer_techs,vintage)
13548              * timeLength(timeModelToCalc)
13549              * transfer_lengthParam(linksModelToCalc,link_types,"length")
13550              * (accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"perFlow")
13551                  + accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"perFlowAlong"))
13552   
13553              + transfer_flowAgainst.l(timeModelToCalc,linksModelToCalc,yearsToCalc,transfer_techs,vintage)
13554              * timeLength(timeModelToCalc)
13555              * transfer_lengthParam(linksModelToCalc,link_types,"length")
13556              * (accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"perFlow")
13557                  + accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"perFlowAgainst")))
13558      );
13559   
13560   
13561  * == converter capacities ==
13562   
13563  converter_ratedInput(converter_techs,vintage,commodity)
13564      $(converter_techParam(converter_techs,vintage,"lifeTime") > 0)
13565      = smin(activity$converter_usedAct(converter_techs,vintage,activity),
13566              converter_coefficient(converter_techs,vintage,activity,commodity,"coefficient"));
13567  converter_ratedInput(converter_techs,vintage,commodity)
13568      $(converter_ratedInput(converter_techs,vintage,commodity) > 0)
13569      = 0;
13570   
13571  converter_ratedOutput(converter_techs,vintage,commodity)
13572      $(converter_techParam(converter_techs,vintage,"lifeTime") > 0)
13573      = smax(activity$converter_usedAct(converter_techs,vintage,activity),
13574              converter_coefficient(converter_techs,vintage,activity,commodity,"coefficient"));
13575  converter_ratedOutput(converter_techs,vintage,commodity)
13576      $(converter_ratedOutput(converter_techs,vintage,commodity) < 0)
13577      = 0;
13578   
13579  converter_ratedOutput_min(nodesModelToCalc,years,converter_techs(techs),commodity)
13580      $sum(vintage$(converter_usedTech(nodesModelToCalc,years,converter_techs,vintage)
13581          and converter_ratedOutput(converter_techs,vintage,commodity)), 1)
13582      = smin(vintage$(converter_usedTech(nodesModelToCalc,years,converter_techs,vintage)
13583              and converter_ratedOutput(converter_techs,vintage,commodity)),
13584          converter_ratedOutput(converter_techs,vintage,commodity));
13585   
13586  converter_ratedOutput_max(nodesModelToCalc,years,converter_techs(techs),commodity)
13587      $sum(vintage$(converter_usedTech(nodesModelToCalc,years,converter_techs,vintage)
13588          and converter_ratedOutput(converter_techs,vintage,commodity)), 1)
13589      = smax(vintage$(converter_usedTech(nodesModelToCalc,years,converter_techs,vintage)
13590              and converter_ratedOutput(converter_techs,vintage,commodity)),
13591          converter_ratedOutput(converter_techs,vintage,commodity));
13592   
13593  converter_units_ext(map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,years),converter_techs(techs),vintage,"build")
13594      = converter_unitsBuild.l(nodesModelToCalc,years,converter_techs,vintage);
13595   
13596  converter_units_ext(map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,years),converter_techs(techs),vintage,"decom")
13597      = converter_unitsDecom.l(nodesModelToCalc,years,converter_techs,vintage);
13598   
13599  converter_units_ext(map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,years),converter_techs(techs),vintage,"total")
13600      = converter_unitsTotal.l(nodesModelToCalc,years,converter_techs,vintage);
13601   
13602  converter_caps_ext(map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,years),converter_techs(techs),vintage,commodity,capType)
13603      $(converter_ratedOutput(converter_techs,vintage,commodity))
13604      = converter_units_ext(accNodesModel,nodesModelToCalc,accYears,years,techs,vintage,capType)
13605          * converter_ratedOutput(converter_techs,vintage,commodity);
13606   
13607  converter_caps_ext(map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,years),converter_techs(techs),vintage,commodity,"lowerLimit")
13608      $(converter_usedTech(nodesModelToCalc,years,converter_techs,vintage)
13609          and converter_capacityParam(nodesModelToCalc,years,converter_techs,"unitsLowerLimit") > 0
13610          and converter_ratedOutput_min(nodesModelToCalc,years,converter_techs,commodity))
13611      = converter_capacityParam(nodesModelToCalc,years,converter_techs,"unitsLowerLimit")
13612          * converter_ratedOutput_min(nodesModelToCalc,years,converter_techs,commodity);
13613   
13614  converter_caps_ext(map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,years),converter_techs(techs),vintage,commodity,"upperLimit")
13615      $(converter_usedTech(nodesModelToCalc,years,converter_techs,vintage)
13616          and converter_capacityParam(nodesModelToCalc,years,converter_techs,"unitsUpperLimit") < inf
13617          and converter_ratedOutput_min(nodesModelToCalc,years,converter_techs,commodity))
13618      = converter_capacityParam(nodesModelToCalc,years,converter_techs,"unitsUpperLimit")
13619          * converter_ratedOutput_max(nodesModelToCalc,years,converter_techs,commodity);
13620   
13621  converter_caps(accNodesModel,accYears,converter_techs(techs),commodity,capType)
13622      = sum((nodesModelToCalc,years,vintage)
13623              $(map_accNodesPostCalc(accNodesModel,nodesModelToCalc)
13624                  and map_accYearsPostCalc(accYears,years)),
13625          converter_caps_ext(accNodesModel,nodesModelToCalc,accYears,years,converter_techs,vintage,commodity,capType));
13626  option clear = converter_caps_ext;
13627   
13628  converter_units(accNodesModel,accYears,converter_techs(techs),vintage,capType)
13629      = sum((nodesModelToCalc,years)
13630              $(map_accNodesPostCalc(accNodesModel,nodesModelToCalc)
13631                  and map_accYearsPostCalc(accYears,years)),
13632          converter_units_ext(accNodesModel,nodesModelToCalc,accYears,years,converter_techs,vintage,capType));
13633  option clear = converter_units_ext;
13634   
13635   
13636  * ==== transfer capacities ====
13637   
13638  max_transfer_coefficient(transfer_techs(techs),commodity)
13639          $(smax(vintage, transfer_coefficient(transfer_techs,vintage,commodity,"coefficient")) > 0)
13640          = smax(vintage, transfer_coefficient(transfer_techs,vintage,commodity,"coefficient"));
13641   
13642  min_transfer_coefficient(transfer_techs(techs),commodity)
13643          $(smin(vintage, transfer_coefficient(transfer_techs,vintage,commodity,"coefficient")) > 0)
13644          = smin(vintage, transfer_coefficient(transfer_techs,vintage,commodity,"coefficient"));
13645   
13646   
13647  transfer_links(linksModel,years,transfer_techs,vintage,"build")
13648      = transfer_linksBuild.l(linksModel,years,transfer_techs,vintage);
13649   
13650  transfer_links(linksModel,years,transfer_techs,vintage,"decom")
13651      = transfer_linksDecom.l(linksModel,years,transfer_techs,vintage);
13652   
13653  transfer_links(linksModel,years,transfer_techs,vintage,"total")
13654      = transfer_linksTotal.l(linksModel,years,transfer_techs,vintage);
13655   
13656  transfer_caps(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,years,transfer_techs(techs),commodity,capType)
13657      $(transfer_incidenceModel(nodesModelToCalc_start,linksModel) < 0
13658          and transfer_incidenceModel(nodesModelToCalc_end,linksModel) > 0)
13659      = sum(vintage,
13660          transfer_links(linksModel,years,transfer_techs,vintage,capType)
13661          * transfer_coefficient(transfer_techs,vintage,commodity,"coefficient"));
13662   
13663  transfer_caps(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,years,transfer_techs(techs),commodity,"lowerLimit")
13664      $(transfer_linksParam(linksModel,years,transfer_techs,'linksLowerLimit') > 0
13665          and transfer_incidenceModel(nodesModelToCalc_start,linksModel) < 0
13666          and transfer_incidenceModel(nodesModelToCalc_end,linksModel) > 0
13667          and sum(vintage$(transfer_usedTech(linksModel,years,transfer_techs,vintage)
13668                              and transfer_coefficient(transfer_techs,vintage,commodity,"coefficient")), 1))
13669      = transfer_linksParam(linksModel,years,transfer_techs,'linksLowerLimit')
13670          * min_transfer_coefficient(transfer_techs,commodity);
13671   
13672  transfer_caps(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,years,transfer_techs(techs),commodity,"upperLimit")
13673      $(transfer_linksParam(linksModel,years,transfer_techs,'linksUpperLimit') < inf
13674          and transfer_incidenceModel(nodesModelToCalc_start,linksModel) < 0
13675          and transfer_incidenceModel(nodesModelToCalc_end,linksModel) > 0
13676          and sum(vintage$(transfer_usedTech(linksModel,years,transfer_techs,vintage)
13677                              and transfer_coefficient(transfer_techs,vintage,commodity,"coefficient")), 1))
13678      = transfer_linksParam(linksModel,years,transfer_techs,'linksUpperLimit')
13679          * max_transfer_coefficient(transfer_techs,commodity);
13680   
13681   
13682  * ==== transfer flows ====
13683   
13684  transfer_flows(timeModelToCalc,nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs(techs),commodity)
13685      $(transfer_incidenceModel(nodesModelToCalc_start,linksModel) < 0
13686          and transfer_incidenceModel(nodesModelToCalc_end,linksModel) > 0)
13687      = sum(vintage,
13688          ( transfer_flowAlong.l(timeModelToCalc,linksModel,yearsToCalc,transfer_techs,vintage)
13689              - transfer_flowAgainst.l(timeModelToCalc,linksModel,yearsToCalc,transfer_techs,vintage) )
13690          * timeLength(timeModelToCalc)
13691          * transfer_coefficient(transfer_techs,vintage,commodity,"coefficient"));
13692   
13693  transfer_flows_annual(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs(techs),commodity,"netto")
13694      = sum(timeModelToCalc,
13695          transfer_flows(timeModelToCalc,nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs,commodity));
13696   
13697  transfer_flows_annual(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs(techs),commodity,"positive")
13698      = sum(timeModelToCalc
13699              $(transfer_flows(timeModelToCalc,nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs,commodity) > 0),
13700          transfer_flows(timeModelToCalc,nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs,commodity));
13701   
13702  transfer_flows_annual(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs(techs),commodity,"negative")
13703      = sum(timeModelToCalc
13704              $(transfer_flows(timeModelToCalc,nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs,commodity) < 0),
13705          transfer_flows(timeModelToCalc,nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs,commodity));
13706   
13707  transfer_flows_annual(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs(techs),commodity,"brutto")
13708      = transfer_flows_annual(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs,commodity,"positive")
13709          - transfer_flows_annual(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs,commodity,"negative");
13710   
13711  transfer_flows_annual(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs(techs),commodity,"flh")
13712      $(transfer_flows_annual(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs,commodity,"brutto") > 0
13713          and transfer_caps(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs,commodity,"total") > 0)
13714      = transfer_flows_annual(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs,commodity,"brutto")
13715          / transfer_caps(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs,commodity,"total");
13716   
13717  transfer_losses(timeModelToCalc,nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs(techs),commodity)
13718      $(transfer_incidenceModel(nodesModelToCalc_start,linksModel) < 0
13719          and transfer_incidenceModel(nodesModelToCalc_end,linksModel) > 0)
13720      = -1 * abs(sum(vintage,
13721          ( transfer_flowAlong.l(timeModelToCalc,linksModel,yearsToCalc,transfer_techs,vintage)
13722              - transfer_flowAgainst.l(timeModelToCalc,linksModel,yearsToCalc,transfer_techs,vintage) )
13723          * ( transfer_coefPerFlow(transfer_techs,vintage,commodity,"coefPerFlow")
13724              + sum(link_types,
13725                  transfer_coefPerLength(transfer_techs,vintage,commodity,link_types,"coefPerLength")
13726                  * transfer_lengthParam(linksModel,link_types,"length")))))
13727          * timeLength(timeModelToCalc);
13728   
13729  transfer_losses_annual(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs(techs),commodity,"netto")
13730      = sum(timeModelToCalc,
13731          transfer_losses(timeModelToCalc,nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs,commodity));
13732   
13733   
13734  * ==== storage capacities ====
13735   
13736  storage_size_max(nodesModelToCalc,years,storage_techs(techs),commodity)
13737      $sum(vintage$(storage_usedTech(nodesModelToCalc,years,storage_techs,vintage)
13738              and storage_usedCom(storage_techs,vintage,commodity)
13739              and storage_sizeParam(storage_techs,vintage,commodity,"size")), 1)
13740      = smax(vintage$(storage_usedTech(nodesModelToCalc,years,storage_techs,vintage)
13741              and storage_usedCom(storage_techs,vintage,commodity)
13742              and storage_sizeParam(storage_techs,vintage,commodity,"size")),
13743          storage_sizeParam(storage_techs,vintage,commodity,"size"));
13744   
13745  storage_size_min(nodesModelToCalc,years,storage_techs(techs),commodity)
13746      $sum(vintage$(storage_usedTech(nodesModelToCalc,years,storage_techs,vintage)
13747              and storage_usedCom(storage_techs,vintage,commodity)
13748              and storage_sizeParam(storage_techs,vintage,commodity,"size")), 1)
13749      = smin(vintage$(storage_usedTech(nodesModelToCalc,years,storage_techs,vintage)
13750              and storage_usedCom(storage_techs,vintage,commodity)
13751              and storage_sizeParam(storage_techs,vintage,commodity,"size")),
13752          storage_sizeParam(storage_techs,vintage,commodity,"size"));
13753   
13754  storage_units_ext(map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,years),storage_techs(techs),vintage,"build")
13755      $storage_usedTech(nodesModelToCalc,years,storage_techs,vintage)
13756      = storage_unitsBuild.l(nodesModelToCalc,years,storage_techs,vintage);
13757   
13758  storage_units_ext(map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,years),storage_techs(techs),vintage,"decom")
13759      $storage_usedTech(nodesModelToCalc,years,storage_techs,vintage)
13760      = storage_unitsDecom.l(nodesModelToCalc,years,storage_techs,vintage);
13761   
13762  storage_units_ext(map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,years),storage_techs(techs),vintage,"total")
13763      $storage_usedTech(nodesModelToCalc,years,storage_techs,vintage)
13764      = storage_unitsTotal.l(nodesModelToCalc,years,storage_techs,vintage);
13765   
13766  storage_caps_ext(map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,years),storage_techs(techs),vintage,commodity,capType)
13767      $storage_sizeParam(storage_techs,vintage,commodity,"size")
13768      = storage_units_ext(accNodesModel,nodesModelToCalc,accYears,years,storage_techs,vintage,capType)
13769          * storage_sizeParam(storage_techs,vintage,commodity,"size");
13770   
13771  storage_caps_ext(map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,years),storage_techs(techs),vintage,commodity,"lowerLimit")
13772      $(storage_usedTech(nodesModelToCalc,years,storage_techs,vintage)
13773          and storage_reservoirParam(nodesModelToCalc,years,storage_techs,"unitsLowerLimit") > 0
13774          and storage_size_min(nodesModelToCalc,years,storage_techs,commodity))
13775      = storage_reservoirParam(nodesModelToCalc,years,storage_techs,"unitsLowerLimit")
13776          * storage_size_min(nodesModelToCalc,years,storage_techs,commodity);
13777   
13778  storage_caps_ext(map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,years),storage_techs(techs),vintage,commodity,"upperLimit")
13779      $(storage_usedTech(nodesModelToCalc,years,storage_techs,vintage)
13780          and storage_reservoirParam(nodesModelToCalc,years,storage_techs,"unitsUpperLimit") < inf
13781          and storage_size_max(nodesModelToCalc,years,storage_techs,commodity))
13782      = storage_reservoirParam(nodesModelToCalc,years,storage_techs,"unitsUpperLimit")
13783          * storage_size_max(nodesModelToCalc,years,storage_techs,commodity);
13784   
13785  storage_caps_ext(map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,years),storage_techs(techs),vintage,commodity,"total_degraded")
13786      $(storage_usedCom(storage_techs,vintage,commodity)
13787          and (storage_techParam(storage_techs,vintage,"annualDegradation") > 0
13788               or storage_techParam(storage_techs,vintage,"usageDegradation")))
13789      = sum((degradation_states,yearsCom), (storage_degradationParam(storage_techs,vintage,degradation_states,"remainingCapacity")
13790                                      - (years.val - yearsCom.val) * storage_techParam(storage_techs,vintage,"annualDegradation"))
13791                                      * storage_unitsStateTracker.l(nodesModelToCalc,years,yearsCom,storage_techs,vintage,degradation_states)
13792                                      * storage_sizeParam(storage_techs,vintage,commodity,"size"));
13793   
13794  storage_caps(accNodesModel,accYears,storage_techs(techs),commodity,capType)
13795      = sum((nodesModelToCalc,years,vintage)
13796              $(map_accNodesPostCalc(accNodesModel,nodesModelToCalc)
13797                  and map_accYearsPostCalc(accYears,years)),
13798          storage_caps_ext(accNodesModel,nodesModelToCalc,accYears,years,storage_techs,vintage,commodity,capType));
13799  option clear = storage_caps_ext;
13800   
13801  storage_units(accNodesModel,accYears,storage_techs(techs),vintage,capType)
13802      = sum((nodesModelToCalc,years)
13803              $(map_accNodesPostCalc(accNodesModel,nodesModelToCalc)
13804                  and map_accYearsPostCalc(accYears,years)),
13805          storage_units_ext(accNodesModel,nodesModelToCalc,accYears,years,storage_techs,vintage,capType));
13806  option clear = storage_units_ext;
13807   
13808   
13809  * ==== storage levels and flows ====
13810   
13811  storage_flows_ext(timeModelToCalc,map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,yearsToCalc),storage_techs(techs),vintage,commodity)
13812      $(storage_usedTech(nodesModelToCalc,yearsToCalc,storage_techs,vintage) and balance_techComm(storage_techs,commodity))
13813      = storage_level.l(timeModelToCalc,nodesModelToCalc,yearsToCalc,storage_techs,vintage,commodity)
13814          - storage_level.l(timeModelToCalc--1,nodesModelToCalc,yearsToCalc,storage_techs,vintage,commodity)
13816      + storage_losses.l(timeModelToCalc,nodesModelToCalc,yearsToCalc,storage_techs,vintage,commodity)
13817          * timeLength(timeModelToCalc)
13819      ;
13820   
13821  storage_flows(timeModelToCalc,accNodesModel,accYears,storage_techs(techs),commodity)
13822      = sum((nodesModelToCalc,yearsToCalc,vintage)
13823              $(storage_usedTech(nodesModelToCalc,yearsToCalc,storage_techs,vintage) and balance_techComm(storage_techs,commodity)),
13824          storage_flows_ext(timeModelToCalc,accNodesModel,nodesModelToCalc,accYears,yearsToCalc,storage_techs,vintage,commodity));
13825  option clear = storage_flows_ext;
13826   
13827  storage_level_out_ext(timeModelToCalc,map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,yearsToCalc),storage_techs(techs),vintage,commodity)
13828      $(storage_usedTech(nodesModelToCalc,yearsToCalc,storage_techs,vintage) and balance_techComm(storage_techs,commodity))
13829      = storage_level.l(timeModelToCalc,nodesModelToCalc,yearsToCalc,storage_techs,vintage,commodity);
13830   
13831  storage_level_out(timeModelToCalc,accNodesModel,accYears,storage_techs(techs),commodity)
13832      = sum((nodesModelToCalc,yearsToCalc,vintage)
13833              $(storage_usedTech(nodesModelToCalc,yearsToCalc,storage_techs,vintage) and balance_techComm(storage_techs,commodity)),
13834          storage_level_out_ext(timeModelToCalc,accNodesModel,nodesModelToCalc,accYears,yearsToCalc,storage_techs,vintage,commodity));
13835  option clear = storage_level_out_ext;
13836   
13837  storage_flows_annual(accNodesModel,accYears,storage_techs(techs),commodity,"netto")
13838      = sum(timeModelToCalc,
13839          storage_flows(timeModelToCalc,accNodesModel,accYears,storage_techs,commodity));
13840   
13841  storage_flows_annual(accNodesModel,accYears,storage_techs(techs),commodity,"positive")
13842      = sum(timeModelToCalc
13843              $(storage_flows(timeModelToCalc,accNodesModel,accYears,storage_techs,commodity) > 0),
13844          storage_flows(timeModelToCalc,accNodesModel,accYears,storage_techs,commodity));
13845   
13846  storage_flows_annual(accNodesModel,accYears,storage_techs(techs),commodity,"negative")
13847      = sum(timeModelToCalc
13848              $(storage_flows(timeModelToCalc,accNodesModel,accYears,storage_techs,commodity) < 0),
13849          storage_flows(timeModelToCalc,accNodesModel,accYears,storage_techs,commodity));
13850   
13851  storage_flows_annual(accNodesModel,accYears,storage_techs(techs),commodity,"brutto")
13852      = storage_flows_annual(accNodesModel,accYears,storage_techs,commodity,"positive")
13853          + storage_flows_annual(accNodesModel,accYears,storage_techs,commodity,"negative");
13854   
13855  storage_flows_annual(accNodesModel,accYears,storage_techs(techs),commodity,"flh")
13856      $(storage_flows_annual(accNodesModel,accYears,storage_techs,commodity,"brutto") > 0
13857          and storage_caps(accNodesModel,accYears,storage_techs,commodity,"total") > 0)
13858      = storage_flows_annual(accNodesModel,accYears,storage_techs,commodity,"brutto")
13859          / storage_caps(accNodesModel,accYears,storage_techs,commodity,"total");
13860   
13861  storage_losses_out(timeModelToCalc,accNodesModel,accYears,storage_techs(techs),commodity)
13862      = sum((nodesModelToCalc,yearsToCalc,vintage)
13863              $(storage_losses.l(timeModelToCalc,nodesModelToCalc,yearsToCalc,storage_techs,vintage,commodity)
13864                  and map_accNodesPostCalc(accNodesModel,nodesModelToCalc)
13865                  and map_accYearsPostCalc(accYears,yearsToCalc)),
13866          storage_losses.l(timeModelToCalc,nodesModelToCalc,yearsToCalc,storage_techs,vintage,commodity)
13867          * timeLength(timeModelToCalc));
13868   
13869  storage_losses_annual(accNodesModel,accYears,storage_techs(techs),commodity,"netto")
13870      = sum(timeModelToCalc,
13871          storage_losses_out(timeModelToCalc,accNodesModel,accYears,storage_techs,commodity));
13872   
13873   
13874  * == commodity balance ==
13875   
13876  commodity_balance_ext(timeModelToCalc,map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,yearsToCalc),converter_techs(techs),vintage,commodity)
13877      $(converter_usedTech(nodesModelToCalc,yearsToCalc,converter_techs,vintage)
13878          and balance_usedConverter(nodesModelToCalc,yearsToCalc,commodity))
13879      = sum((activity)
13880              $(converter_coefficientProfile(timeModelToCalc,nodesModelToCalc,yearsToCalc,converter_techs,vintage,activity,commodity)),
13881          converter_activity.l(timeModelToCalc,nodesModelToCalc,yearsToCalc,converter_techs,vintage,activity)
13882              * timeLength(timeModelToCalc)
13883              * converter_coefficientProfile(timeModelToCalc,nodesModelToCalc,yearsToCalc,converter_techs,vintage,activity,commodity)
13884          + converter_unitsUsingActivity_MIP.l(timeModelToCalc,nodesModelToCalc,yearsToCalc,converter_techs,vintage,activity)
13885              * timeLength(timeModelToCalc)
13886              * converter_coefficient(converter_techs,vintage,activity,commodity,"constant"));
13887   
13888  commodity_balance_ext(timeModelToCalc,map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,yearsToCalc),storage_techs(techs),vintage,commodity)
13889      $(storage_usedTech(nodesModelToCalc,yearsToCalc,storage_techs,vintage)
13890          and storage_sizeParam(storage_techs,vintage,commodity,"size"))
13891      = commodity_balance_ext(timeModelToCalc,accNodesModel,nodesModelToCalc,accYears,yearsToCalc,storage_techs,vintage,commodity)
13892      + storage_level.l(timeModelToCalc--1,nodesModelToCalc,yearsToCalc,storage_techs,vintage,commodity)
13893          - storage_level.l(timeModelToCalc,nodesModelToCalc,yearsToCalc,storage_techs,vintage,commodity)
13894      - storage_losses.l(timeModelToCalc,nodesModelToCalc,yearsToCalc,storage_techs,vintage,commodity)
13895      * timeLength(timeModelToCalc);
13896   
13897  commodity_balance_ext(timeModelToCalc,map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,yearsToCalc),sourcesink_techs(techs),vintage,commodity)
13898      $(sourcesink_enabled(nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity)
13899          and sameas(yearsToCalc,vintage))
13900      = commodity_balance_ext(timeModelToCalc,accNodesModel,nodesModelToCalc,accYears,yearsToCalc,sourcesink_techs,vintage,commodity)
13901      + sourcesink_flow.l(timeModelToCalc,nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity)
13902      * timeLength(timeModelToCalc);
13903   
13904  commodity_balance_ext(timeModelToCalc,map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,yearsToCalc),transfer_techs(techs),vintage,commodity)
13905      $sum((linksModel)
13906          $(transfer_incidenceModel(nodesModelToCalc,linksModel)
13907                  and transfer_usedTech(linksModel,yearsToCalc,transfer_techs,vintage)
13908                  and transfer_coefficient(transfer_techs,vintage,commodity,"coefficient")), 1)
13909      = commodity_balance_ext(timeModelToCalc,accNodesModel,nodesModelToCalc,accYears,yearsToCalc,transfer_techs,vintage,commodity)
13910      + sum((linksModel)
13911              $(transfer_incidenceModel(nodesModelToCalc,linksModel)
13912                  and transfer_usedTech(linksModel,yearsToCalc,transfer_techs,vintage)
13913                  and transfer_coefficient(transfer_techs,vintage,commodity,"coefficient")),
13914   
13915              (transfer_flowAlong.l(timeModelToCalc,linksModel,yearsToCalc,transfer_techs,vintage)
13916                      $(transfer_incidenceModel(nodesModelToCalc,linksModel) > 0)
13917                + transfer_flowAgainst.l(timeModelToCalc,linksModel,yearsToCalc,transfer_techs,vintage)
13918                      $(transfer_incidenceModel(nodesModelToCalc,linksModel) < 0))
13919              * timeLength(timeModelToCalc)
13920              * transfer_coefficient(transfer_techs,vintage,commodity,"coefficient")
13921   
13922              - (transfer_flowAlong.l(timeModelToCalc,linksModel,yearsToCalc,transfer_techs,vintage)
13923                      $(transfer_incidenceModel(nodesModelToCalc,linksModel) < 0)
13924                + transfer_flowAgainst.l(timeModelToCalc,linksModel,yearsToCalc,transfer_techs,vintage)
13925                      $(transfer_incidenceModel(nodesModelToCalc,linksModel) > 0))
13926              * timeLength(timeModelToCalc)
13927              * transfer_coefficient(transfer_techs,vintage,commodity,"coefficient")
13928   
13929              + 0.5 * ((transfer_flowAlong.l(timeModelToCalc,linksModel,yearsToCalc,transfer_techs,vintage)
13930                          $(transfer_incidenceModel(nodesModelToCalc,linksModel) <> 0)
13931                      + transfer_flowAgainst.l(timeModelToCalc,linksModel,yearsToCalc,transfer_techs,vintage)
13932                          $(transfer_incidenceModel(nodesModelToCalc,linksModel) <> 0))
13933                      * timeLength(timeModelToCalc)
13934                      * ( transfer_coefPerFlow(transfer_techs,vintage,commodity,"coefPerFlow")
13935                          + sum(link_types,
13936                              transfer_coefPerLength(transfer_techs,vintage,commodity,link_types,"coefPerLength")
13937                              * transfer_lengthParam(linksModel,link_types,"length")))))
13938      ;
13939   
13940  commodity_balance(timeModelToCalc,accNodesModel,accYears,balance_techComm(techs,commodity))
13941      = sum((nodesModelToCalc,yearsToCalc,vintage)
13942              $(commodity_balance_ext(timeModelToCalc,accNodesModel,nodesModelToCalc,accYears,yearsToCalc,techs,vintage,commodity)
13943                  and map_accNodesPostCalc(accNodesModel,nodesModelToCalc)
13944                  and map_accYearsPostCalc(accYears,yearsToCalc)),
13945          commodity_balance_ext(timeModelToCalc,accNodesModel,nodesModelToCalc,accYears,yearsToCalc,techs,vintage,commodity));
13946  option clear = commodity_balance_ext;
13947   
13948   
13949  * ==== annual commodity sums ====
13950   
13951  commodity_balance_annual(accNodesModel,accYears,techs,commodity,"netto")
13952      = sum(timeModelToCalc,
13953          commodity_balance(timeModelToCalc,accNodesModel,accYears,techs,commodity));
13954   
13955  commodity_balance_annual(accNodesModel,accYears,techs,commodity,"positive")
13956      = sum(timeModelToCalc
13957              $(commodity_balance(timeModelToCalc,accNodesModel,accYears,techs,commodity) > 0),
13958          commodity_balance(timeModelToCalc,accNodesModel,accYears,techs,commodity));
13959   
13960  commodity_balance_annual(accNodesModel,accYears,techs,commodity,"negative")
13961      = sum(timeModelToCalc
13962              $(commodity_balance(timeModelToCalc,accNodesModel,accYears,techs,commodity) < 0),
13963          commodity_balance(timeModelToCalc,accNodesModel,accYears,techs,commodity));
13964   
13965  commodity_balance_annual(accNodesModel,accYears,techs,commodity,"brutto")
13966      = commodity_balance_annual(accNodesModel,accYears,techs,commodity,"positive")
13967          - commodity_balance_annual(accNodesModel,accYears,techs,commodity,"negative");
13968   
13969  commodity_balance_annual(accNodesModel,accYears,techs,commodity,"flh")
13970      $(commodity_balance_annual(accNodesModel,accYears,techs,commodity,"brutto") > 0
13971          and converter_caps(accNodesModel,accYears,techs,commodity,"total") > 0 )
13972      = commodity_balance_annual(accNodesModel,accYears,techs,commodity,"brutto")
13973          / converter_caps(accNodesModel,accYears,techs,commodity,"total");
13974   
13975   
13976  * ==== marginal information ====
13977   
13978  marginals_balance(timeModelToCalc,nodesModelToCalc,yearsToCalc,commodity)
13979    $balance_usedBalance(nodesModelToCalc,yearsToCalc,commodity)
13980    =
13981    Eq_balance_commodities.m(timeModelToCalc,nodesModelToCalc,yearsToCalc,commodity);
13982   
13983  marginals_sourcesink_profile(timeModelToCalc,nodesModelToCalc,yearsToCalc,sourcesink_techs(techs),commodity)
13984      $( sourcesink_flow.m(timeModelToCalc,nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity) <> 0 )
13985      =
13986      sourcesink_flow.m(timeModelToCalc,nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity);
13987   
13988  marginals_sourcesink_sum(nodesModelToCalc,yearsToCalc,sourcesink_techs(techs),commodity)
13989      $( ( Eq_sourcesink_useLowerSum.m(nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity)
13990          + Eq_sourcesink_useUpperSum.m(nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity)
13991          + Eq_sourcesink_useFixedSum.m(nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity) ) <> eps )
13992      =
13993      ( Eq_sourcesink_useLowerSum.m(nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity)
13994      + Eq_sourcesink_useUpperSum.m(nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity)
13995      + Eq_sourcesink_useFixedSum.m(nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity) );
13996   
13997  marginals_indicator_bounds(accNodesModel,accYears,indicator)
13998      $( accounting_indicator.m(accNodesModel,accYears,indicator) <> 0 )
13999      =
14000      accounting_indicator.m(accNodesModel,accYears,indicator);
14001   
14002   
14003  * ==== R2A postcalc information ====
14004   
14006   
14007   
14008  * ==== round profiles to reduce size of gdx ====
14009   
14011  commodity_balance(timeModelToCalc,accNodesModel,accYears,techs,commodity)
14012      $commodity_balance(timeModelToCalc,accNodesModel,accYears,techs,commodity)
14013      = round(commodity_balance(timeModelToCalc,accNodesModel,accYears,techs,commodity), 6);
14014   
14015  transfer_flows(timeModelToCalc,nodesModelToCalc,nodesModelToCalc_a,linksModel,yearsToCalc,transfer_techs,commodity)
14016      $transfer_flows(timeModelToCalc,nodesModelToCalc,nodesModelToCalc_a,linksModel,yearsToCalc,transfer_techs,commodity)
14017      = round(transfer_flows(timeModelToCalc,nodesModelToCalc,nodesModelToCalc_a,linksModel,yearsToCalc,transfer_techs,commodity), 6);
14018   
14019  transfer_losses(timeModelToCalc,nodesModelToCalc,nodesModelToCalc_a,linksModel,yearsToCalc,transfer_techs,commodity)
14020      $transfer_losses(timeModelToCalc,nodesModelToCalc,nodesModelToCalc_a,linksModel,yearsToCalc,transfer_techs,commodity)
14021      = round(transfer_losses(timeModelToCalc,nodesModelToCalc,nodesModelToCalc_a,linksModel,yearsToCalc,transfer_techs,commodity), 6);
14022   
14023  storage_flows(timeModelToCalc,accNodesModel,accYears,storage_techs,commodity)
14024      $storage_flows(timeModelToCalc,accNodesModel,accYears,storage_techs,commodity)
14025      = round(storage_flows(timeModelToCalc,accNodesModel,accYears,storage_techs,commodity), 6);
14026   
14027  storage_level_out(timeModelToCalc,accNodesModel,accYears,storage_techs,commodity)
14028      $storage_level_out(timeModelToCalc,accNodesModel,accYears,storage_techs,commodity)
14029      = round(storage_level_out(timeModelToCalc,accNodesModel,accYears,storage_techs,commodity), 6);
14030   
14031  marginals_balance(timeModelToCalc,nodesModelToCalc,yearsToCalc,commodity)
14032      $marginals_balance(timeModelToCalc,nodesModelToCalc,yearsToCalc,commodity)
14033      = round(marginals_balance(timeModelToCalc,nodesModelToCalc,yearsToCalc,commodity), 6);
14034   
14035  marginals_sourcesink_profile(timeModelToCalc,nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity)
14036      $marginals_sourcesink_profile(timeModelToCalc,nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity)
14037      = round(marginals_sourcesink_profile(timeModelToCalc,nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity), 6);
14039   
INCLUDE    C:\Local\REMix\framework\remix\framework\model\source\postcalc\writegdx.gms
14042  * SPDX-FileCopyrightText: Copyright (c) 2023 German Aerospace Center (DLR)
14043  * SPDX-License-Identifier: BSD-3-Clause
14044   
14047   
14048  execute_unload "C:\Local\REMix\remix_nz\output\nz-h2-stor_2020-2050\result\nz-h2-stor_2020-2050.gdx"
14049      metadata
14050      timeModel
14051      timeModelToCalc
14052      nodesModel
14053      linksModel
14054      indicator
14055      commodity
14056      techs
14057      accNodesModel
14058      accYears
14059   
14060      map_nodesModel
14061      map_linksModel
14062      map_nodesAccounting
14063   
14064      indicator_accounting
14065      indicator_accounting_ref
14066      indicator_accounting_comp
14067      indicator_accounting_detailed
14068      indicator_accounting_links
14069   
14070      converter_caps
14071      converter_units
14073   
14074      transfer_caps
14075      transfer_links
14076      transfer_flows
14077      transfer_flows_annual
14078      transfer_losses
14079      transfer_losses_annual
14080   
14081      storage_caps
14082      storage_units
14083      storage_flows
14084      storage_level_out
14085      storage_flows_annual
14086      storage_losses_out
14087      storage_losses_annual
14089   
14090      commodity_balance
14091      commodity_balance_annual
14092   
14093      marginals_balance
14094      marginals_sourcesink_profile
14095      marginals_sourcesink_sum
14096      marginals_indicator_bounds
14097   
14099      ;
GAMS 40.4.0  d540b52e Oct 3, 2022           WEX-WEI x86 64bit/MS Windows - 02/27/24 13:28:36 Page 2
G e n e r a l   A l g e b r a i c   M o d e l i n g   S y s t e m
Include File Summary


   SEQ   GLOBAL TYPE      PARENT   LOCAL  FILENAME

     1        1 INPUT          0       0  C:\Local\REMix\framework\remix\framework\model\run_remix.gms
     2       12 IF DEXIST      1      12  C:\Local\REMix\remix_nz\output\nz-h2-stor_2020-2050\data\
     3       15 INCLUDE        1      15  .C:\Local\REMix\framework\remix\framework\model\source\metadata.gms
     4       23 CALL           3       8  .printf "remix_version \"0.9.2\"\n" > c:\Local\REMix\remix_nz\process\225a\\metadata
     5       24 CALL           3       9  .printf "gams_version \"40.4.0\"\n" >> c:\Local\REMix\remix_nz\process\225a\\metadata
     6       25 CALL           3      10  .printf "timestamp \"02/27/24 13:28:36\"\n" >> c:\Local\REMix\remix_nz\process\225a\\metadata
     7       27 CALL           3      12  .printf "framework_path " >> c:\Local\REMix\remix_nz\process\225a\\metadata
     8       29 CALL           3      14  .cd C:\Local\REMix\framework\remix\framework\model\source && cd| sed "s/^/\"/;s/$/\"/" >> c:\Local\REMix\remix_nz\process\225a\\metadata
     9       31 CALL           3      18  .printf "\n" >> c:\Local\REMix\remix_nz\process\225a\\metadata
    10       32 CALL           3      19  .printf "framework_hash " >> c:\Local\REMix\remix_nz\process\225a\\metadata
    11       34 CALL           3      21  .cd C:\Local\REMix\framework\remix\framework\model\source && git rev-parse HEAD >nul 2>&1 && git rev-parse HEAD >> c:\Local\REMix\remix_nz\process\225a\\metadata
    12       36 CALL           3      25  .printf "\n" >> c:\Local\REMix\remix_nz\process\225a\\metadata
    13       37 CALL           3      26  .printf "framework_branch " >> c:\Local\REMix\remix_nz\process\225a\\metadata
    14       39 CALL           3      28  .cd C:\Local\REMix\framework\remix\framework\model\source && git rev-parse --abbrev-ref HEAD >nul 2>&1 && git rev-parse --abbrev-ref HEAD | sed "s/^/\"/;s/$/\"/" >> c:\Local\REMix\remix_nz\process\225a\\metadata
    15       41 CALL           3      32  .printf "\n" >> c:\Local\REMix\remix_nz\process\225a\\metadata
    16       43 CALL           3      34  .printf "project_path " >> c:\Local\REMix\remix_nz\process\225a\\metadata
    17       45 CALL           3      36  .cd C:\Local\REMix\remix_nz\output\nz-h2-stor_2020-2050\data\./ && cd| sed "s/^/\"/;s/$/\"/" >> c:\Local\REMix\remix_nz\process\225a\\metadata
    18       47 CALL           3      40  .printf "\n" >> c:\Local\REMix\remix_nz\process\225a\\metadata
    19       48 CALL           3      41  .printf "project_hash " >> c:\Local\REMix\remix_nz\process\225a\\metadata
    20       50 CALL           3      43  .cd C:\Local\REMix\remix_nz\output\nz-h2-stor_2020-2050\data\./ && git rev-parse HEAD >nul 2>&1 && git rev-parse HEAD | sed "s/^/\"/;s/$/\"/" >> c:\Local\REMix\remix_nz\process\225a\\metadata
    21       52 CALL           3      47  .printf "\n" >> c:\Local\REMix\remix_nz\process\225a\\metadata
    22       53 CALL           3      48  .printf "project_branch " >> c:\Local\REMix\remix_nz\process\225a\\metadata
    23       55 CALL           3      50  .cd C:\Local\REMix\remix_nz\output\nz-h2-stor_2020-2050\data\./ && git rev-parse --abbrev-ref HEAD >nul 2>&1 && git rev-parse --abbrev-ref HEAD | sed "s/^/\"/;s/$/\"/" >> c:\Local\REMix\remix_nz\process\225a\\metadata
    24       57 CALL           3      54  .printf "\n" >> c:\Local\REMix\remix_nz\process\225a\\metadata
    25       60 INCLUDE        3      57  ..c:\Local\REMix\remix_nz\process\225a\metadata
    26       77 INCLUDE        1      16  .C:\Local\REMix\framework\remix\framework\model\source\data_inheritance.gms
    27      119 INCLUDE        1      25  .C:\Local\REMix\framework\remix\framework\model\source\remix.gms
    28      140 INCLUDE       27      21  ..C:\Local\REMix\framework\remix\framework\model\source\sets.gms
    29      160 IF EXIST      28      20  ..c:\Local\REMix\remix_nz\process\225a\map_aggregatetimemodel.csv
    30      211 IF EXIST      28      97  ..c:\Local\REMix\remix_nz\process\225a\set_nodesmodel.csv
    31      211 INCLUDE       28      97  ...c:\Local\REMix\remix_nz\process\225a\set_nodesmodel.csv
    32      224 IF EXIST      28      99  ..c:\Local\REMix\remix_nz\process\225a\set_nodesmodel.csv
    33      231 IF EXIST      28     106  ..c:\Local\REMix\remix_nz\process\225a\set_nodesdata.csv
    34      231 INCLUDE       28     106  ...c:\Local\REMix\remix_nz\process\225a\set_nodesdata.csv
    35      244 IF EXIST      28     108  ..c:\Local\REMix\remix_nz\process\225a\set_nodesdata.csv
    36      250 IF EXIST      28     114  ..c:\Local\REMix\remix_nz\process\225a\set_nodesmodelsel.csv
    37      250 INCLUDE       28     114  ...c:\Local\REMix\remix_nz\process\225a\set_nodesmodelsel.csv
    38      263 IF EXIST      28     116  ..c:\Local\REMix\remix_nz\process\225a\set_nodesmodelsel.csv
    39      265 IF EXIST      28     118  ..c:\Local\REMix\remix_nz\process\225a\set_nodesmodelsel.csv
    40      278 IF EXIST      28     131  ..c:\Local\REMix\remix_nz\process\225a\map_aggregatenodesmodel.csv
    41      278 INCLUDE       28     131  ...c:\Local\REMix\remix_nz\process\225a\map_aggregatenodesmodel.csv
    42      291 IF EXIST      28     133  ..c:\Local\REMix\remix_nz\process\225a\map_aggregatenodesmodel.csv
    43      294 IF EXIST      28     136  ..c:\Local\REMix\remix_nz\process\225a\map_aggregatenodesmodel.csv
    44      317 IF EXIST      28     159  ..c:\Local\REMix\remix_nz\process\225a\set_years.csv
    45      317 INCLUDE       28     159  ...c:\Local\REMix\remix_nz\process\225a\set_years.csv
    46      439 IF EXIST      28     161  ..c:\Local\REMix\remix_nz\process\225a\set_years.csv
    47      448 IF EXIST      28     170  ..c:\Local\REMix\remix_nz\process\225a\set_years.csv
    48      448 INCLUDE       28     170  ...c:\Local\REMix\remix_nz\process\225a\set_years.csv
    49      570 IF EXIST      28     172  ..c:\Local\REMix\remix_nz\process\225a\set_years.csv
    50      576 IF EXIST      28     178  ..c:\Local\REMix\remix_nz\process\225a\set_yearssel.csv
    51      576 INCLUDE       28     178  ...c:\Local\REMix\remix_nz\process\225a\set_yearssel.csv
    52      580 IF EXIST      28     180  ..c:\Local\REMix\remix_nz\process\225a\set_yearssel.csv
    53      598 IF EXIST      28     198  ..c:\Local\REMix\remix_nz\process\225a\set_activities.csv
    54      598 INCLUDE       28     198  ...c:\Local\REMix\remix_nz\process\225a\set_activities.csv
    55      607 IF EXIST      28     200  ..c:\Local\REMix\remix_nz\process\225a\set_activities.csv
    56      615 IF EXIST      28     208  ..c:\Local\REMix\remix_nz\process\225a\set_gridsegments.csv
    57      617 IF EXIST      28     210  ..c:\Local\REMix\remix_nz\process\225a\set_gridsegments.csv
    58      625 IF EXIST      28     218  ..c:\Local\REMix\remix_nz\process\225a\set_linksdata.csv
    59      625 INCLUDE       28     218  ...c:\Local\REMix\remix_nz\process\225a\set_linksdata.csv
    60      639 IF EXIST      28     220  ..c:\Local\REMix\remix_nz\process\225a\set_linksdata.csv
    61      657 IF EXIST      28     238  ..c:\Local\REMix\remix_nz\process\225a\set_link_types.csv
    62      657 INCLUDE       28     238  ...c:\Local\REMix\remix_nz\process\225a\set_link_types.csv
    63      661 IF EXIST      28     240  ..c:\Local\REMix\remix_nz\process\225a\set_link_types.csv
    64      670 IF EXIST      28     249  ..c:\Local\REMix\remix_nz\process\225a\set_commodities.csv
    65      670 INCLUDE       28     249  ...c:\Local\REMix\remix_nz\process\225a\set_commodities.csv
    66      679 IF EXIST      28     251  ..c:\Local\REMix\remix_nz\process\225a\set_commodities.csv
    67      688 IF EXIST      28     260  ..c:\Local\REMix\remix_nz\process\225a\set_indicators.csv
    68      688 INCLUDE       28     260  ...c:\Local\REMix\remix_nz\process\225a\set_indicators.csv
    69      697 IF EXIST      28     262  ..c:\Local\REMix\remix_nz\process\225a\set_indicators.csv
    70      706 IF EXIST      28     271  ..c:\Local\REMix\remix_nz\process\225a\set_converter_techs.csv
    71      706 INCLUDE       28     271  ...c:\Local\REMix\remix_nz\process\225a\set_converter_techs.csv
    72      727 IF EXIST      28     274  ..c:\Local\REMix\remix_nz\process\225a\set_storage_techs.csv
    73      727 INCLUDE       28     274  ...c:\Local\REMix\remix_nz\process\225a\set_storage_techs.csv
    74      733 IF EXIST      28     277  ..c:\Local\REMix\remix_nz\process\225a\set_transfer_techs.csv
    75      733 INCLUDE       28     277  ...c:\Local\REMix\remix_nz\process\225a\set_transfer_techs.csv
    76      737 IF EXIST      28     280  ..c:\Local\REMix\remix_nz\process\225a\set_sourcesink_techs.csv
    77      737 INCLUDE       28     280  ...c:\Local\REMix\remix_nz\process\225a\set_sourcesink_techs.csv
    78      748 IF EXIST      28     285  ..c:\Local\REMix\remix_nz\process\225a\set_converter_techs.csv
    79      748 INCLUDE       28     285  ...c:\Local\REMix\remix_nz\process\225a\set_converter_techs.csv
    80      767 IF EXIST      28     286  ..c:\Local\REMix\remix_nz\process\225a\set_converter_techs.csv
    81      771 IF EXIST      28     290  ..c:\Local\REMix\remix_nz\process\225a\set_storage_techs.csv
    82      771 INCLUDE       28     290  ...c:\Local\REMix\remix_nz\process\225a\set_storage_techs.csv
    83      775 IF EXIST      28     291  ..c:\Local\REMix\remix_nz\process\225a\set_storage_techs.csv
    84      780 IF EXIST      28     296  ..c:\Local\REMix\remix_nz\process\225a\set_transfer_techs.csv
    85      780 INCLUDE       28     296  ...c:\Local\REMix\remix_nz\process\225a\set_transfer_techs.csv
    86      782 IF EXIST      28     297  ..c:\Local\REMix\remix_nz\process\225a\set_transfer_techs.csv
    87      786 IF EXIST      28     301  ..c:\Local\REMix\remix_nz\process\225a\set_sourcesink_techs.csv
    88      786 INCLUDE       28     301  ...c:\Local\REMix\remix_nz\process\225a\set_sourcesink_techs.csv
    89      793 IF EXIST      28     302  ..c:\Local\REMix\remix_nz\process\225a\set_sourcesink_techs.csv
    90      803 IF EXIST      28     312  ..c:\Local\REMix\remix_nz\process\225a\set_degradation_states.csv
    91      805 IF EXIST      28     314  ..c:\Local\REMix\remix_nz\process\225a\set_degradation_states.csv
    92      814 IF EXIST      28     323  ..c:\Local\REMix\remix_nz\process\225a\set_soc.csv
    93      816 IF EXIST      28     325  ..c:\Local\REMix\remix_nz\process\225a\set_soc.csv
    94      832 IF EXIST      28     341  ..c:\Local\REMix\remix_nz\process\225a\transfer_linkstartend.csv
    95      832 INCLUDE       28     341  ...c:\Local\REMix\remix_nz\process\225a\transfer_linkstartend.csv
    96      859 IF EXIST      28     343  ..c:\Local\REMix\remix_nz\process\225a\transfer_linkstartend.csv
    97      873 BATINCLUDE    28     357  ...C:\Local\REMix\framework\remix\framework\model\source\battools\aggregateNodes.gms
    98      982 IF EXIST      28     464  ..c:\Local\REMix\remix_nz\process\225a\set_accnodes.csv
    99      984 IF EXIST      28     466  ..c:\Local\REMix\remix_nz\process\225a\set_accnodes.csv
   100     1049 IF EXIST      28     531  ..c:\Local\REMix\remix_nz\process\225a\map_accnodes.csv
   101     1051 IF EXIST      28     533  ..c:\Local\REMix\remix_nz\process\225a\map_accnodes.csv
   102     1105 INCLUDE       27      22  ..C:\Local\REMix\framework\remix\framework\model\source\accounting\input.gms
   103     1137 IF EXIST     102      32  ..c:\Local\REMix\remix_nz\process\225a\accounting_converterunits.csv
   104     1137 INCLUDE      102      32  ...c:\Local\REMix\remix_nz\process\225a\accounting_converterunits.csv
   105     1250 IF EXIST     102      34  ..c:\Local\REMix\remix_nz\process\225a\accounting_converterunits.csv
   106     1264 IF EXIST     102      48  ..c:\Local\REMix\remix_nz\process\225a\accounting_converteractivity.csv
   107     1264 INCLUDE      102      48  ...c:\Local\REMix\remix_nz\process\225a\accounting_converteractivity.csv
   108     1291 IF EXIST     102      50  ..c:\Local\REMix\remix_nz\process\225a\accounting_converteractivity.csv
   109     1308 IF EXIST     102      67  ..c:\Local\REMix\remix_nz\process\225a\accounting_converterstartup.csv
   110     1310 IF EXIST     102      69  ..c:\Local\REMix\remix_nz\process\225a\accounting_converterstartup.csv
   111     1329 IF EXIST     102      88  ..c:\Local\REMix\remix_nz\process\225a\accounting_storageunits.csv
   112     1329 INCLUDE      102      88  ...c:\Local\REMix\remix_nz\process\225a\accounting_storageunits.csv
   113     1358 IF EXIST     102      90  ..c:\Local\REMix\remix_nz\process\225a\accounting_storageunits.csv
   114     1380 IF EXIST     102     112  ..c:\Local\REMix\remix_nz\process\225a\accounting_transferlinks.csv
   115     1380 INCLUDE      102     112  ...c:\Local\REMix\remix_nz\process\225a\accounting_transferlinks.csv
   116     1387 IF EXIST     102     114  ..c:\Local\REMix\remix_nz\process\225a\accounting_transferlinks.csv
   117     1409 IF EXIST     102     136  ..c:\Local\REMix\remix_nz\process\225a\accounting_transferperlength.csv
   118     1409 INCLUDE      102     136  ...c:\Local\REMix\remix_nz\process\225a\accounting_transferperlength.csv
   119     1420 IF EXIST     102     138  ..c:\Local\REMix\remix_nz\process\225a\accounting_transferperlength.csv
   120     1435 IF EXIST     102     153  ..c:\Local\REMix\remix_nz\process\225a\accounting_sourcesinkflow.csv
   121     1435 INCLUDE      102     153  ...c:\Local\REMix\remix_nz\process\225a\accounting_sourcesinkflow.csv
   122     1445 IF EXIST     102     155  ..c:\Local\REMix\remix_nz\process\225a\accounting_sourcesinkflow.csv
   123     1459 IF EXIST     102     169  ..c:\Local\REMix\remix_nz\process\225a\accounting_perindicator.csv
   124     1459 INCLUDE      102     169  ...c:\Local\REMix\remix_nz\process\225a\accounting_perindicator.csv
   125     1467 IF EXIST     102     171  ..c:\Local\REMix\remix_nz\process\225a\accounting_perindicator.csv
   126     1493 IF EXIST     102     197  ..c:\Local\REMix\remix_nz\process\225a\accounting_indicatorbounds.csv
   127     1493 INCLUDE      102     197  ...c:\Local\REMix\remix_nz\process\225a\accounting_indicatorbounds.csv
   128     1497 IF EXIST     102     199  ..c:\Local\REMix\remix_nz\process\225a\accounting_indicatorbounds.csv
   129     1516 IF EXIST     102     218  ..c:\Local\REMix\remix_nz\process\225a\accounting_indicatorbounds_links.csv
   130     1518 IF EXIST     102     220  ..c:\Local\REMix\remix_nz\process\225a\accounting_indicatorbounds_links.csv
   131     1524 BATINCLUDE   102     226  ...C:\Local\REMix\framework\remix\framework\model\source\battools\aggregateAccountingMean.gms
   132     1583 BATINCLUDE   102     227  ...C:\Local\REMix\framework\remix\framework\model\source\battools\aggregateAccountingMean.gms
   133     1626 BATINCLUDE   102     228  ...C:\Local\REMix\framework\remix\framework\model\source\battools\aggregateAccountingMean.gms
   134     1669 BATINCLUDE   102     229  ...C:\Local\REMix\framework\remix\framework\model\source\battools\aggregateAccountingMean.gms
   135     1728 BATINCLUDE   102     230  ...C:\Local\REMix\framework\remix\framework\model\source\battools\aggregateAccountingMean.gms
   136     1787 BATINCLUDE   102     231  ...C:\Local\REMix\framework\remix\framework\model\source\battools\aggregateAccountingMean.gms
   137     1846 BATINCLUDE   102     232  ...C:\Local\REMix\framework\remix\framework\model\source\battools\aggregateAccountingMean.gms
   138     2255 INCLUDE       27      23  ..C:\Local\REMix\framework\remix\framework\model\source\accounting\annuities.gms
   139     2327 INCLUDE       27      25  ..C:\Local\REMix\framework\remix\framework\model\source\methods\mga_pre.gms
   140     2333 INCLUDE       27      26  ..C:\Local\REMix\framework\remix\framework\model\source\methods\pareto_pre.gms
   141     2339 INCLUDE       27      27  ..C:\Local\REMix\framework\remix\framework\model\source\postcalc\declaration.gms
   142     2356 IF DEXIST    141      17  ..C:\Local\REMix\remix_nz\output\nz-h2-stor_2020-2050\result\
   143     2557 INCLUDE       27      28  ..C:\Local\REMix\framework\remix\framework\model\source\loadgdx.gms
   144     2566 INCLUDE       27      30  ..C:\Local\REMix\framework\remix\framework\model\source\core\converter.gms
   145     2669 IF EXIST     144     103  ..c:\Local\REMix\remix_nz\process\225a\converter_capacityparam.csv
   146     2669 INCLUDE      144     103  ...c:\Local\REMix\remix_nz\process\225a\converter_capacityparam.csv
   147     8005 IF EXIST     144     105  ..c:\Local\REMix\remix_nz\process\225a\converter_capacityparam.csv
   148     8013 BATINCLUDE   144     113  ...C:\Local\REMix\framework\remix\framework\model\source\battools\aggregateNodes.gms
   149     8024 BATINCLUDE   144     114  ...C:\Local\REMix\framework\remix\framework\model\source\battools\aggregateNodes.gms
   150     8057 IF EXIST     144     137  ..c:\Local\REMix\remix_nz\process\225a\converter_techparam.csv
   151     8057 INCLUDE      144     137  ...c:\Local\REMix\remix_nz\process\225a\converter_techparam.csv
   152     8115 IF EXIST     144     139  ..c:\Local\REMix\remix_nz\process\225a\converter_techparam.csv
   153     8137 IF EXIST     144     161  ..c:\Local\REMix\remix_nz\process\225a\converter_activityprofile.csv
   154     8137 INCLUDE      144     161  ...c:\Local\REMix\remix_nz\process\225a\converter_activityprofile.csv
   155     8415 IF EXIST     144     162  ..c:\Local\REMix\remix_nz\process\225a\converter_activityprofile.csv
   156     8417 IF EXIST     144     164  ..c:\Local\REMix\remix_nz\process\225a\converter_activityprofile.csv
   157     8437 IF EXIST     144     184  ..c:\Local\REMix\remix_nz\process\225a\converter_coefficient.csv
   158     8437 INCLUDE      144     184  ...c:\Local\REMix\remix_nz\process\225a\converter_coefficient.csv
   159     8619 IF EXIST     144     185  ..c:\Local\REMix\remix_nz\process\225a\converter_coefficient.csv
   160     8620 IF EXIST     144     186  ..c:\Local\REMix\remix_nz\process\225a\converter_coefficient.csv
   161     8622 IF EXIST     144     188  ..c:\Local\REMix\remix_nz\process\225a\converter_coefficient.csv
   162     8634 IF EXIST     144     200  ..c:\Local\REMix\remix_nz\process\225a\converter_coefficientprofile.csv
   163     8635 IF EXIST     144     201  ..c:\Local\REMix\remix_nz\process\225a\converter_coefficientprofile.csv
   164     8637 IF EXIST     144     203  ..c:\Local\REMix\remix_nz\process\225a\converter_coefficientprofile.csv
   165     9570 INCLUDE       27      31  ..C:\Local\REMix\framework\remix\framework\model\source\core\storage.gms
   166     9661 IF EXIST     165      91  ..c:\Local\REMix\remix_nz\process\225a\storage_reservoirparam.csv
   167     9661 INCLUDE      165      91  ...c:\Local\REMix\remix_nz\process\225a\storage_reservoirparam.csv
   168     9874 IF EXIST     165      93  ..c:\Local\REMix\remix_nz\process\225a\storage_reservoirparam.csv
   169     9878 BATINCLUDE   165      97  ...C:\Local\REMix\framework\remix\framework\model\source\battools\aggregateNodes.gms
   170     9889 BATINCLUDE   165      98  ...C:\Local\REMix\framework\remix\framework\model\source\battools\aggregateNodes.gms
   171     9925 IF EXIST     165     124  ..c:\Local\REMix\remix_nz\process\225a\storage_techparam.csv
   172     9925 INCLUDE      165     124  ...c:\Local\REMix\remix_nz\process\225a\storage_techparam.csv
   173     9941 IF EXIST     165     126  ..c:\Local\REMix\remix_nz\process\225a\storage_techparam.csv
   174     9962 IF EXIST     165     147  ..c:\Local\REMix\remix_nz\process\225a\storage_sizeparam.csv
   175     9962 INCLUDE      165     147  ...c:\Local\REMix\remix_nz\process\225a\storage_sizeparam.csv
   176     9978 IF EXIST     165     149  ..c:\Local\REMix\remix_nz\process\225a\storage_sizeparam.csv
   177     9995 IF EXIST     165     166  ..c:\Local\REMix\remix_nz\process\225a\storage_socparam.csv
   178     9997 IF EXIST     165     168  ..c:\Local\REMix\remix_nz\process\225a\storage_socparam.csv
   179    10016 IF EXIST     165     187  ..c:\Local\REMix\remix_nz\process\225a\storage_degradationparam.csv
   180    10018 IF EXIST     165     189  ..c:\Local\REMix\remix_nz\process\225a\storage_degradationparam.csv
   181    10047 IF EXIST     165     218  ..c:\Local\REMix\remix_nz\process\225a\storage_levelprofile.csv
   182    10048 IF EXIST     165     219  ..c:\Local\REMix\remix_nz\process\225a\storage_levelprofile.csv
   183    10050 IF EXIST     165     221  ..c:\Local\REMix\remix_nz\process\225a\storage_levelprofile.csv
   184    10870 INCLUDE       27      32  ..C:\Local\REMix\framework\remix\framework\model\source\core\transfer.gms
   185    10937 IF EXIST     184      73  ..c:\Local\REMix\remix_nz\process\225a\transfer_linksparam.csv
   186    10937 INCLUDE      184      73  ...c:\Local\REMix\remix_nz\process\225a\transfer_linksparam.csv
   187    10964 IF EXIST     184      75  ..c:\Local\REMix\remix_nz\process\225a\transfer_linksparam.csv
   188    10980 IF EXIST     184      91  ..c:\Local\REMix\remix_nz\process\225a\transfer_flowprofile.csv
   189    10982 IF EXIST     184      93  ..c:\Local\REMix\remix_nz\process\225a\transfer_flowprofile.csv
   190    11002 IF EXIST     184     113  ..c:\Local\REMix\remix_nz\process\225a\transfer_techparam.csv
   191    11002 INCLUDE      184     113  ...c:\Local\REMix\remix_nz\process\225a\transfer_techparam.csv
   192    11007 IF EXIST     184     115  ..c:\Local\REMix\remix_nz\process\225a\transfer_techparam.csv
   193    11021 IF EXIST     184     129  ..c:\Local\REMix\remix_nz\process\225a\transfer_coefficient.csv
   194    11021 INCLUDE      184     129  ...c:\Local\REMix\remix_nz\process\225a\transfer_coefficient.csv
   195    11026 IF EXIST     184     131  ..c:\Local\REMix\remix_nz\process\225a\transfer_coefficient.csv
   196    11040 IF EXIST     184     145  ..c:\Local\REMix\remix_nz\process\225a\transfer_coefperflow.csv
   197    11040 INCLUDE      184     145  ...c:\Local\REMix\remix_nz\process\225a\transfer_coefperflow.csv
   198    11045 IF EXIST     184     147  ..c:\Local\REMix\remix_nz\process\225a\transfer_coefperflow.csv
   199    11059 IF EXIST     184     161  ..c:\Local\REMix\remix_nz\process\225a\transfer_coefperlength.csv
   200    11059 INCLUDE      184     161  ...c:\Local\REMix\remix_nz\process\225a\transfer_coefperlength.csv
   201    11066 IF EXIST     184     163  ..c:\Local\REMix\remix_nz\process\225a\transfer_coefperlength.csv
   202    11080 IF EXIST     184     177  ..c:\Local\REMix\remix_nz\process\225a\transfer_reactperlength.csv
   203    11082 IF EXIST     184     179  ..c:\Local\REMix\remix_nz\process\225a\transfer_reactperlength.csv
   204    11096 IF EXIST     184     193  ..c:\Local\REMix\remix_nz\process\225a\transfer_lengthparam.csv
   205    11096 INCLUDE      184     193  ...c:\Local\REMix\remix_nz\process\225a\transfer_lengthparam.csv
   206    11123 IF EXIST     184     195  ..c:\Local\REMix\remix_nz\process\225a\transfer_lengthparam.csv
   207    11137 IF EXIST     184     209  ..c:\Local\REMix\remix_nz\process\225a\transfer_gridsegments.csv
   208    11139 IF EXIST     184     211  ..c:\Local\REMix\remix_nz\process\225a\transfer_gridsegments.csv
   209    11721 INCLUDE       27      33  ..C:\Local\REMix\framework\remix\framework\model\source\core\sourcesink.gms
   210    11759 IF EXIST     209      38  ..c:\Local\REMix\remix_nz\process\225a\sourcesink_config.csv
   211    11759 INCLUDE      209      38  ...c:\Local\REMix\remix_nz\process\225a\sourcesink_config.csv
   212    11974 IF EXIST     209      40  ..c:\Local\REMix\remix_nz\process\225a\sourcesink_config.csv
   213    11978 BATINCLUDE   209      44  ...C:\Local\REMix\framework\remix\framework\model\source\battools\aggregateNodes.gms
   214    12006 IF EXIST     209      62  ..c:\Local\REMix\remix_nz\process\225a\sourcesink_profile.csv
   215    12006 INCLUDE      209      62  ...c:\Local\REMix\remix_nz\process\225a\sourcesink_profile.csv
   216    12077 IF EXIST     209      63  ..c:\Local\REMix\remix_nz\process\225a\sourcesink_profile.csv
   217    12078 IF EXIST     209      64  ..c:\Local\REMix\remix_nz\process\225a\sourcesink_profile.csv
   218    12080 IF EXIST     209      66  ..c:\Local\REMix\remix_nz\process\225a\sourcesink_profile.csv
   219    12100 IF EXIST     209      86  ..c:\Local\REMix\remix_nz\process\225a\sourcesink_annualsum.csv
   220    12100 INCLUDE      209      86  ...c:\Local\REMix\remix_nz\process\225a\sourcesink_annualsum.csv
   221    12224 IF EXIST     209      88  ..c:\Local\REMix\remix_nz\process\225a\sourcesink_annualsum.csv
   222    12227 BATINCLUDE   209      91  ...C:\Local\REMix\framework\remix\framework\model\source\battools\aggregateNodes.gms
   223    12407 INCLUDE       27      34  ..C:\Local\REMix\framework\remix\framework\model\source\core\balance.gms
   224    12543 INCLUDE       27      36  ..C:\Local\REMix\framework\remix\framework\model\source\accounting\equations.gms
   225    12965 INCLUDE       27      37  ..C:\Local\REMix\framework\remix\framework\model\source\optiframe.gms
   226    13006 INCLUDE       27      71  ..C:\Local\REMix\framework\remix\framework\model\source\methods\checkanno.gms
   227    13017 INCLUDE       27      74  ..C:\Local\REMix\framework\remix\framework\model\source\methods\pips.gms
   228    13026 INCLUDE       27      77  ..C:\Local\REMix\framework\remix\framework\model\source\methods\solve.gms
   229    13232 INCLUDE       27      80  ..C:\Local\REMix\framework\remix\framework\model\source\methods\pareto.gms
   230    13241 INCLUDE       27      83  ..C:\Local\REMix\framework\remix\framework\model\source\methods\mga.gms
   231    13250 INCLUDE       27      86  ..C:\Local\REMix\framework\remix\framework\model\source\methods\iternodes.gms
   232    13259 INCLUDE       27      89  ..C:\Local\REMix\framework\remix\framework\model\source\postcalc\definition.gms
   233    14041 INCLUDE       27      90  ..C:\Local\REMix\framework\remix\framework\model\source\postcalc\writegdx.gms


COMPILATION TIME     =       14.266 SECONDS     83 MB  40.4.0 d540b52e WEX-WEI
GAMS 40.4.0  d540b52e Oct 3, 2022           WEX-WEI x86 64bit/MS Windows - 02/27/24 13:28:36 Page 3
G e n e r a l   A l g e b r a i c   M o d e l i n g   S y s t e m
Range Statistics    SOLVE remix Using MIP From line 13217


RANGE STATISTICS (ABSOLUTE NON-ZERO FINITE VALUES)

RHS       [min, max] : [ 2.000E-06, 1.165E+03] - Zero values observed as well
Bound     [min, max] : [        NA,        NA] - Zero values observed as well
Matrix    [min, max] : [ 1.000E-02, 1.857E+02]

GAMS 40.4.0  d540b52e Oct 3, 2022           WEX-WEI x86 64bit/MS Windows - 02/27/24 13:28:36 Page 4
G e n e r a l   A l g e b r a i c   M o d e l i n g   S y s t e m
Model Statistics    SOLVE remix Using MIP From line 13217


LOOPS                           optiframeToCalc   of1


MODEL STATISTICS

BLOCKS OF EQUATIONS          75     SINGLE EQUATIONS    8,130,057
BLOCKS OF VARIABLES          38     SINGLE VARIABLES    8,410,706
NON ZERO ELEMENTS    24,508,639


GENERATION TIME      =      205.921 SECONDS  7,371 MB  40.4.0 d540b52e WEX-WEI


EXECUTION TIME       =      279.812 SECONDS  7,371 MB  40.4.0 d540b52e WEX-WEI
               L O O P S         optiframeToCalc of1

GAMS 40.4.0  d540b52e Oct 3, 2022           WEX-WEI x86 64bit/MS Windows - 02/27/24 13:28:36 Page 5
G e n e r a l   A l g e b r a i c   M o d e l i n g   S y s t e m
Solution Report     SOLVE remix Using MIP From line 13217


               S O L V E      S U M M A R Y

     MODEL   remix               OBJECTIVE  accounting_objective
     TYPE    MIP                 DIRECTION  MINIMIZE
     SOLVER  CPLEX               FROM LINE  13217

**** SOLVER STATUS     1 Normal Completion
**** MODEL STATUS      1 Optimal
**** OBJECTIVE VALUE            16971.3891

 RESOURCE USAGE, LIMIT        378.407    604800.000
 ITERATION COUNT, LIMIT       197    2147483647
--- GAMS/Cplex Link licensed for continuous and discrete problems.

Reading parameter(s) from "c:\Local\REMix\remix_nz\process\cplex.opt"
>>  rerun no
>>  iis 1
>>  lpmethod 4
>>  barorder 0
>>  preind 1
>>  scaind 0
>>  predual -1
>>  baralg 0
>>  barstartalg 1
>>  barepcomp 1e-6
>>  solutiontype 2
>>  startalg 4
>>  epgap 1e-3
>>  quality 1
>>  barcolnz 0
>>  threads 4
>>  parallelmode 1
Finished reading from "c:\Local\REMix\remix_nz\process\cplex.opt"

--- GMO setup time: 0.00s
--- Space for names approximately 1027.65 Mb
--- Use option 'names no' to turn use of names off
--- GMO memory 3016.01 Mb (peak 3080.18 Mb)
--- Dictionary memory 0.00 Mb
--- Cplex 22.1.0.0 link memory 253.46 Mb (peak 1729.77 Mb)
--- Starting Cplex


--- LP status (1): optimal.
--- Cplex Time: 364.64sec (det. 325806.75 ticks)


Optimal solution found
Objective:        16971.389068

Solution Quality Statistics:
                                   unscaled                scaled
                               max         sum         max         sum
primal infeasibility        1.002e-08   1.633e-03   1.002e-08   1.633e-03
dual infeasibility          2.373e-08   4.861e-03   2.373e-08   4.861e-03
primal residual             6.185e-10   7.004e-10   6.185e-10   7.004e-10
dual residual               5.275e-11   2.020e-09   5.275e-11   2.020e-09
primal solution vector      1.697e+04   1.986e+06   1.697e+04   1.986e+06
dual solution vector        1.593e+04   3.269e+06   1.593e+04   3.269e+06
slacks                      1.153e+03   1.151e+06   1.153e+03   1.151e+06
reduced costs               1.593e+04   2.397e+07   1.593e+04   2.397e+07
comp. slackness viol.       2.397e-05   5.992e-02




**** REPORT SUMMARY :        0     NONOPT
                             0 INFEASIBLE
                             0  UNBOUNDED
GAMS 40.4.0  d540b52e Oct 3, 2022           WEX-WEI x86 64bit/MS Windows - 02/27/24 13:28:36 Page 6
G e n e r a l   A l g e b r a i c   M o d e l i n g   S y s t e m
E x e c u t i o n


**** REPORT FILE SUMMARY

opt c:\Local\REMix\remix_nz\process\cplex.opt


EXECUTION TIME       =       89.266 SECONDS  6,422 MB  40.4.0 d540b52e WEX-WEI


USER: Medium MUD - 10 User License                   S220920|0002AO-GEN
      University of Canterbury, Civil Engineering Department    DC16319
      License for teaching and research at degree granting institutions


**** FILE SUMMARY

Input      C:\Local\REMix\framework\remix\framework\model\run_remix.gms
Output     c:\Local\REMix\remix_nz\process\run_remix.lst
