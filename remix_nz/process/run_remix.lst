GAMS 40.4.0  d540b52e Oct 3, 2022           WEX-WEI x86 64bit/MS Windows - 03/01/24 15:00:59 Page 1
G e n e r a l   A l g e b r a i c   M o d e l i n g   S y s t e m
C o m p i l a t i o n


   1  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
   2  * SPDX-License-Identifier: BSD-3-Clause
   3   
   4  * ==== REMix version number ====
   6   
   7  * ==== global settings ====
  12   
  14   
  15  * ==== write metadata and inherit dataset ====
INCLUDE    C:\Local\REMix\framework\remix\framework\model\source\metadata.gms
  24   
  28   
  44   
  60   
  61  set metadata(*) /
INCLUDE    c:\Local\REMix\remix_nz\process\225b\metadata
  63  remix_version "0.9.7"
  64  gams_version "40.4.0"
  65  timestamp "03/01/24 15:00:59"
  66  framework_path "C:\Local\REMix\framework\remix\framework\model\source"
  67   
  68  framework_hash 2d3501b9e4db1fe561e3b4063208feb49d75faff
  69   
  70  framework_branch "main"
  71   
  72  project_path "C:\Local\REMix\remix_nz\output\nz-h2-stor_2020-2050\data"
  73   
  74  project_hash "2d3501b9e4db1fe561e3b4063208feb49d75faff"
  75   
  76  project_branch "main"
  77   
  78  /;
INCLUDE    C:\Local\REMix\framework\remix\framework\model\source\data_inheritance.gms
  80  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
  81  * SPDX-License-Identifier: BSD-3-Clause
  82   
  85   
  90   
  91  * pandas based data inheritance reading in the dat files, merging them and writing csv files in the scrdir
 113  ;
 114   
 118   
 119  * ==== run remix ====
INCLUDE    C:\Local\REMix\framework\remix\framework\model\source\remix.gms
 124  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
 125  * SPDX-License-Identifier: BSD-3-Clause
 126   
 127  * ==== global settings ====
 135   
 138   
 140   
 143   
 144  * ==== include modules ====
INCLUDE    C:\Local\REMix\framework\remix\framework\model\source\sets.gms
 146  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
 147  * SPDX-License-Identifier: BSD-3-Clause
 148   
 149  * // # sets
 150  * // Sets are the indices of variables and parameters.
 151   
 152  * // ## Reference
 153  * // {special_table_sets}
 154   
 155  * // ## Input Files
 156  * // {special_table_set_input_files}
1062   
1063  map_accNodes(accNodesModel,accNodesModel_aggregation)
1064      $sum((nodesData, nodesModelToCalc)
1065              $( sameas(nodesModelToCalc,accNodesModel)
1066                  and map_accNodesLoad(nodesData,accNodesModel_aggregation)
1067                  and aggregateNodesModel(nodesData,nodesModelToCalc)), 1) = yes;
1068   
1069  map_accNodes(accNodesModel,"global")$sum(nodesModelToCalc$sameas(accNodesModel,nodesModelToCalc), 1) = yes;
1070  map_accNodes(accNodesModel,"global")$sum(accNodes$sameas(accNodesModel,accNodes), 1) = yes;
1071  map_accNodes(accNodesModel,accNodesModel) = yes;
1072  map_accLinks(accLinksModel,"global")$sum(linksModelToCalc$sameas(accLinksModel,linksModelToCalc), 1) = yes;
1073  map_accLinks(accLinksModel,accLinksModel) = yes;
1074  map_accYears(accYears,"horizon")$sum(yearsToCalc$sameas(accYears,yearsToCalc), 1)  = yes;
1075  map_accYears(accYears,accYears) = yes;
1076   
1077  map_accNodesToCalc(accNodesModel,nodesModelToCalc)
1078      $sum((nodesData)
1079              $( map_accNodesLoad(nodesData,accNodesModel)
1080                  and aggregateNodesModel(nodesData,nodesModelToCalc)), 1) = yes;
1081   
1082  map_accNodesToCalc("global",nodesModelToCalc) = yes;
1083  map_accNodesToCalc(accNodesModel,nodesModelToCalc)$sameas(accNodesModel,nodesModelToCalc) = yes;
1084  map_accLinksToCalc("global",linksModelToCalc) = yes;
1085  map_accLinksToCalc(accLinksModel,linksModelToCalc)$sameas(accLinksModel,linksModelToCalc) = yes;
1086  map_accYearsToCalc("horizon",yearsToCalc) = yes;
1087  map_accYearsToCalc(accYears,yearsToCalc)$sameas(accYears,yearsToCalc) = yes;
1088   
1089  * Duplicate sets for postcalc reporting without horizon and accYears
1090  map_accNodesPostCalc(accNodesModel,nodesModelToCalc) = map_accNodesToCalc(accNodesModel,nodesModelToCalc);
1091  map_accLinksPostCalc(accLinksModel,linksModelToCalc) = map_accLinksToCalc(accLinksModel,linksModelToCalc);
1092  map_accYearsPostCalc(accYears,yearsToCalc)$sameas(accYears,yearsToCalc) = yes;
1093  map_accYearsPostCalc(accYears,years)$(sameas(accYears,years) and years.val < sum(yearsToCalc$(ord(yearsToCalc) = 1), yearsToCalc.val)) = yes;
1094   
1095  set map_nodesAccounting(accNodesModel_aggregation,accNodesModel) "Map accounting nodes describes the mapping between model accounting nodes and data nodes." ;
1096  option map_nodesAccounting < map_accNodes;
1097   
1098  * ==== Generic sets  ====
1099  * These set names are repeated across different profile parameters.
1100  * they are not strictly related to each other and are not input data but
1101  * are needed for validation.
1102  ** // PROFILE: profileTypes | Profile Types | OEO_00140056:flow potential | set_profiletypes.csv
1103   
1104  ** // SET: scenario | Scenario | OEO_00000364:scenario | set_scenarios.csv
1105  * "Scenario indexes help to differentiate scenarios." /
1106   
1107  ** // SET: capType | Capacity Types | OEO_00030019:balance process attribute | set_captypes.csv
1108  * "Capacity types differentiate investment decisions." /
1109   
1110  ** // SET: balanceType | Balance Types | OEO_00030019:balance process attribute | set_balancetypes.csv
1111  * "Balance types differentiate types of balances." /
INCLUDE    C:\Local\REMix\framework\remix\framework\model\source\accounting\input.gms
1113  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
1114  * SPDX-License-Identifier: BSD-3-Clause
1115   
1116  * // # accounting_input
1117  * // The parameters in this file describe the accounting of indicators in the model.
1118   
1119  * // ## Variables
1120  * // {special_table_input_variables}
1529   
1530  * Aggregate accounting parameters
BATINCLUDE C:\Local\REMix\framework\remix\framework\model\source\battools\aggregateAccountingMean.gms
1532  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
1533  * SPDX-License-Identifier: BSD-3-Clause
1534   
1536   
1538   
1539  set accounting_converterUnitsNonzero(indicator,accnodesData,converter_techs,vintage);
1540  accounting_converterUnitsNonzero(indicator,accnodesData,converter_techs,vintage)
1541      $sum(pc_accounting_converterUnits$accounting_converterUnitsIn(indicator,accnodesData,converter_techs,vintage,pc_accounting_converterUnits), 1)
1542      = yes;
1543   
1545  set accounting_converterUnitsChk(indicator,nodesModel,converter_techs,vintage,pc_accounting_converterUnits);
1546  accounting_converterUnitsChk(indicator,nodesModel,converter_techs,vintage,"useAnnuity")
1547      $sum((nodesData,accnodesData)
1548              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1549                  and accounting_converterUnitsNonzero(indicator,accnodesData,converter_techs,vintage)), 1)
1550      = smax((nodesData,accnodesData)
1551              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1552                  and accounting_converterUnitsNonzero(indicator,accnodesData,converter_techs,vintage)),
1553          accounting_converterUnitsIn(indicator,accnodesData,converter_techs,vintage,"useAnnuity"))
1554      - smin((nodesData,accnodesData)
1555              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1556                  and accounting_converterUnitsNonzero(indicator,accnodesData,converter_techs,vintage)),
1557          accounting_converterUnitsIn(indicator,accnodesData,converter_techs,vintage,"useAnnuity"));
1558   
1559  abort$sum(accounting_converterUnitsChk(indicator,nodesModel,converter_techs,vintage,pc_accounting_converterUnits), 1) "Cannot aggregate technologies with different useAnnuity values."
1561   
1562  parameter accounting_converterUnitsAgg(indicator,nodesModel,converter_techs,vintage,pc_accounting_converterUnits);
1563  accounting_converterUnitsAgg(indicator,nodesModel,converter_techs,vintage,pc_accounting_converterUnits)
1564      $sum((nodesData,accnodesData)
1565              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1566                  and accounting_converterUnitsNonzero(indicator,accnodesData,converter_techs,vintage)), 1)
1567      = sum((nodesData,accnodesData)
1568              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1569                  and accounting_converterUnitsNonzero(indicator,accnodesData,converter_techs,vintage)),
1570          accounting_converterUnitsIn(indicator,accnodesData,converter_techs,vintage,pc_accounting_converterUnits))
1571      / sum((nodesData,accnodesData)
1572              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1573                  and accounting_converterUnitsNonzero(indicator,accnodesData,converter_techs,vintage)),
1574          1);
1575   
1576  parameter accounting_converterUnits(indicator,nodesModel,converter_techs,vintage,pc_accounting_converterUnits);
1577  loop(accnodes,
1578  accounting_converterUnits(indicator,nodesModel,converter_techs,vintage,pc_accounting_converterUnits)
1579      $sum(accnodesData$(map_accnodesToCalc(accnodes,nodesModel) and sameas(accnodes,accnodesData)
1580                              and accounting_converterUnitsIn(indicator,accnodesData,converter_techs,vintage,pc_accounting_converterUnits)), 1)
1581      = sum(accnodesData$(map_accnodesToCalc(accnodes,nodesModel) and sameas(accnodes,accnodesData)),
1582              accounting_converterUnitsIn(indicator,accnodesData,converter_techs,vintage,pc_accounting_converterUnits));
1583  );
1584   
1585  accounting_converterUnits(indicator,nodesModel,converter_techs,vintage,pc_accounting_converterUnits)
1586      $accounting_converterUnitsAgg(indicator,nodesModel,converter_techs,vintage,pc_accounting_converterUnits)
1587      = accounting_converterUnitsAgg(indicator,nodesModel,converter_techs,vintage,pc_accounting_converterUnits);
1588   
1589  * option kill %paramName%Nonzero %paramName%Chk %paramName%Agg
BATINCLUDE C:\Local\REMix\framework\remix\framework\model\source\battools\aggregateAccountingMean.gms
1591  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
1592  * SPDX-License-Identifier: BSD-3-Clause
1593   
1595   
1597   
1598  set accounting_converterActivityNonzero(indicator,accnodesData,converter_techs,vintage,activity);
1599  accounting_converterActivityNonzero(indicator,accnodesData,converter_techs,vintage,activity)
1600      $sum(pc_accounting_converterActivity$accounting_converterActivityIn(indicator,accnodesData,converter_techs,vintage,activity,pc_accounting_converterActivity), 1)
1601      = yes;
1602   
1604   
1605  parameter accounting_converterActivityAgg(indicator,nodesModel,converter_techs,vintage,activity,pc_accounting_converterActivity);
1606  accounting_converterActivityAgg(indicator,nodesModel,converter_techs,vintage,activity,pc_accounting_converterActivity)
1607      $sum((nodesData,accnodesData)
1608              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1609                  and accounting_converterActivityNonzero(indicator,accnodesData,converter_techs,vintage,activity)), 1)
1610      = sum((nodesData,accnodesData)
1611              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1612                  and accounting_converterActivityNonzero(indicator,accnodesData,converter_techs,vintage,activity)),
1613          accounting_converterActivityIn(indicator,accnodesData,converter_techs,vintage,activity,pc_accounting_converterActivity))
1614      / sum((nodesData,accnodesData)
1615              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1616                  and accounting_converterActivityNonzero(indicator,accnodesData,converter_techs,vintage,activity)),
1617          1);
1618   
1619  parameter accounting_converterActivity(indicator,nodesModel,converter_techs,vintage,activity,pc_accounting_converterActivity);
1620  loop(accnodes,
1621  accounting_converterActivity(indicator,nodesModel,converter_techs,vintage,activity,pc_accounting_converterActivity)
1622      $sum(accnodesData$(map_accnodesToCalc(accnodes,nodesModel) and sameas(accnodes,accnodesData)
1623                              and accounting_converterActivityIn(indicator,accnodesData,converter_techs,vintage,activity,pc_accounting_converterActivity)), 1)
1624      = sum(accnodesData$(map_accnodesToCalc(accnodes,nodesModel) and sameas(accnodes,accnodesData)),
1625              accounting_converterActivityIn(indicator,accnodesData,converter_techs,vintage,activity,pc_accounting_converterActivity));
1626  );
1627   
1628  accounting_converterActivity(indicator,nodesModel,converter_techs,vintage,activity,pc_accounting_converterActivity)
1629      $accounting_converterActivityAgg(indicator,nodesModel,converter_techs,vintage,activity,pc_accounting_converterActivity)
1630      = accounting_converterActivityAgg(indicator,nodesModel,converter_techs,vintage,activity,pc_accounting_converterActivity);
1631   
1632  * option kill %paramName%Nonzero %paramName%Chk %paramName%Agg
BATINCLUDE C:\Local\REMix\framework\remix\framework\model\source\battools\aggregateAccountingMean.gms
1634  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
1635  * SPDX-License-Identifier: BSD-3-Clause
1636   
1638   
1640   
1641  set accounting_converterStartupNonzero(indicator,accnodesData,converter_techs,vintage);
1642  accounting_converterStartupNonzero(indicator,accnodesData,converter_techs,vintage)
1643      $sum(pc_accounting_converterStartup$accounting_converterStartupIn(indicator,accnodesData,converter_techs,vintage,pc_accounting_converterStartup), 1)
1644      = yes;
1645   
1647   
1648  parameter accounting_converterStartupAgg(indicator,nodesModel,converter_techs,vintage,pc_accounting_converterStartup);
1649  accounting_converterStartupAgg(indicator,nodesModel,converter_techs,vintage,pc_accounting_converterStartup)
1650      $sum((nodesData,accnodesData)
1651              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1652                  and accounting_converterStartupNonzero(indicator,accnodesData,converter_techs,vintage)), 1)
1653      = sum((nodesData,accnodesData)
1654              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1655                  and accounting_converterStartupNonzero(indicator,accnodesData,converter_techs,vintage)),
1656          accounting_converterStartupIn(indicator,accnodesData,converter_techs,vintage,pc_accounting_converterStartup))
1657      / sum((nodesData,accnodesData)
1658              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1659                  and accounting_converterStartupNonzero(indicator,accnodesData,converter_techs,vintage)),
1660          1);
1661   
1662  parameter accounting_converterStartup(indicator,nodesModel,converter_techs,vintage,pc_accounting_converterStartup);
1663  loop(accnodes,
1664  accounting_converterStartup(indicator,nodesModel,converter_techs,vintage,pc_accounting_converterStartup)
1665      $sum(accnodesData$(map_accnodesToCalc(accnodes,nodesModel) and sameas(accnodes,accnodesData)
1666                              and accounting_converterStartupIn(indicator,accnodesData,converter_techs,vintage,pc_accounting_converterStartup)), 1)
1667      = sum(accnodesData$(map_accnodesToCalc(accnodes,nodesModel) and sameas(accnodes,accnodesData)),
1668              accounting_converterStartupIn(indicator,accnodesData,converter_techs,vintage,pc_accounting_converterStartup));
1669  );
1670   
1671  accounting_converterStartup(indicator,nodesModel,converter_techs,vintage,pc_accounting_converterStartup)
1672      $accounting_converterStartupAgg(indicator,nodesModel,converter_techs,vintage,pc_accounting_converterStartup)
1673      = accounting_converterStartupAgg(indicator,nodesModel,converter_techs,vintage,pc_accounting_converterStartup);
1674   
1675  * option kill %paramName%Nonzero %paramName%Chk %paramName%Agg
BATINCLUDE C:\Local\REMix\framework\remix\framework\model\source\battools\aggregateAccountingMean.gms
1677  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
1678  * SPDX-License-Identifier: BSD-3-Clause
1679   
1681   
1683   
1684  set accounting_storageUnitsNonzero(indicator,accnodesData,storage_techs,vintage);
1685  accounting_storageUnitsNonzero(indicator,accnodesData,storage_techs,vintage)
1686      $sum(pc_accounting_storageUnits$accounting_storageUnitsIn(indicator,accnodesData,storage_techs,vintage,pc_accounting_storageUnits), 1)
1687      = yes;
1688   
1690  set accounting_storageUnitsChk(indicator,nodesModel,storage_techs,vintage,pc_accounting_storageUnits);
1691  accounting_storageUnitsChk(indicator,nodesModel,storage_techs,vintage,"useAnnuity")
1692      $sum((nodesData,accnodesData)
1693              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1694                  and accounting_storageUnitsNonzero(indicator,accnodesData,storage_techs,vintage)), 1)
1695      = smax((nodesData,accnodesData)
1696              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1697                  and accounting_storageUnitsNonzero(indicator,accnodesData,storage_techs,vintage)),
1698          accounting_storageUnitsIn(indicator,accnodesData,storage_techs,vintage,"useAnnuity"))
1699      - smin((nodesData,accnodesData)
1700              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1701                  and accounting_storageUnitsNonzero(indicator,accnodesData,storage_techs,vintage)),
1702          accounting_storageUnitsIn(indicator,accnodesData,storage_techs,vintage,"useAnnuity"));
1703   
1704  abort$sum(accounting_storageUnitsChk(indicator,nodesModel,storage_techs,vintage,pc_accounting_storageUnits), 1) "Cannot aggregate technologies with different useAnnuity values."
1706   
1707  parameter accounting_storageUnitsAgg(indicator,nodesModel,storage_techs,vintage,pc_accounting_storageUnits);
1708  accounting_storageUnitsAgg(indicator,nodesModel,storage_techs,vintage,pc_accounting_storageUnits)
1709      $sum((nodesData,accnodesData)
1710              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1711                  and accounting_storageUnitsNonzero(indicator,accnodesData,storage_techs,vintage)), 1)
1712      = sum((nodesData,accnodesData)
1713              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1714                  and accounting_storageUnitsNonzero(indicator,accnodesData,storage_techs,vintage)),
1715          accounting_storageUnitsIn(indicator,accnodesData,storage_techs,vintage,pc_accounting_storageUnits))
1716      / sum((nodesData,accnodesData)
1717              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1718                  and accounting_storageUnitsNonzero(indicator,accnodesData,storage_techs,vintage)),
1719          1);
1720   
1721  parameter accounting_storageUnits(indicator,nodesModel,storage_techs,vintage,pc_accounting_storageUnits);
1722  loop(accnodes,
1723  accounting_storageUnits(indicator,nodesModel,storage_techs,vintage,pc_accounting_storageUnits)
1724      $sum(accnodesData$(map_accnodesToCalc(accnodes,nodesModel) and sameas(accnodes,accnodesData)
1725                              and accounting_storageUnitsIn(indicator,accnodesData,storage_techs,vintage,pc_accounting_storageUnits)), 1)
1726      = sum(accnodesData$(map_accnodesToCalc(accnodes,nodesModel) and sameas(accnodes,accnodesData)),
1727              accounting_storageUnitsIn(indicator,accnodesData,storage_techs,vintage,pc_accounting_storageUnits));
1728  );
1729   
1730  accounting_storageUnits(indicator,nodesModel,storage_techs,vintage,pc_accounting_storageUnits)
1731      $accounting_storageUnitsAgg(indicator,nodesModel,storage_techs,vintage,pc_accounting_storageUnits)
1732      = accounting_storageUnitsAgg(indicator,nodesModel,storage_techs,vintage,pc_accounting_storageUnits);
1733   
1734  * option kill %paramName%Nonzero %paramName%Chk %paramName%Agg
BATINCLUDE C:\Local\REMix\framework\remix\framework\model\source\battools\aggregateAccountingMean.gms
1736  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
1737  * SPDX-License-Identifier: BSD-3-Clause
1738   
1740   
1742   
1743  set accounting_transferLinksNonzero(indicator,acclinksData,transfer_techs,vintage);
1744  accounting_transferLinksNonzero(indicator,acclinksData,transfer_techs,vintage)
1745      $sum(pc_accounting_transferLinks$accounting_transferLinksIn(indicator,acclinksData,transfer_techs,vintage,pc_accounting_transferLinks), 1)
1746      = yes;
1747   
1749  set accounting_transferLinksChk(indicator,linksModel,transfer_techs,vintage,pc_accounting_transferLinks);
1750  accounting_transferLinksChk(indicator,linksModel,transfer_techs,vintage,"useAnnuity")
1751      $sum((linksData,acclinksData)
1752              $(aggregatelinksModel(linksData,linksModel) and sameas(linksData,acclinksData)
1753                  and accounting_transferLinksNonzero(indicator,acclinksData,transfer_techs,vintage)), 1)
1754      = smax((linksData,acclinksData)
1755              $(aggregatelinksModel(linksData,linksModel) and sameas(linksData,acclinksData)
1756                  and accounting_transferLinksNonzero(indicator,acclinksData,transfer_techs,vintage)),
1757          accounting_transferLinksIn(indicator,acclinksData,transfer_techs,vintage,"useAnnuity"))
1758      - smin((linksData,acclinksData)
1759              $(aggregatelinksModel(linksData,linksModel) and sameas(linksData,acclinksData)
1760                  and accounting_transferLinksNonzero(indicator,acclinksData,transfer_techs,vintage)),
1761          accounting_transferLinksIn(indicator,acclinksData,transfer_techs,vintage,"useAnnuity"));
1762   
1763  abort$sum(accounting_transferLinksChk(indicator,linksModel,transfer_techs,vintage,pc_accounting_transferLinks), 1) "Cannot aggregate technologies with different useAnnuity values."
1765   
1766  parameter accounting_transferLinksAgg(indicator,linksModel,transfer_techs,vintage,pc_accounting_transferLinks);
1767  accounting_transferLinksAgg(indicator,linksModel,transfer_techs,vintage,pc_accounting_transferLinks)
1768      $sum((linksData,acclinksData)
1769              $(aggregatelinksModel(linksData,linksModel) and sameas(linksData,acclinksData)
1770                  and accounting_transferLinksNonzero(indicator,acclinksData,transfer_techs,vintage)), 1)
1771      = sum((linksData,acclinksData)
1772              $(aggregatelinksModel(linksData,linksModel) and sameas(linksData,acclinksData)
1773                  and accounting_transferLinksNonzero(indicator,acclinksData,transfer_techs,vintage)),
1774          accounting_transferLinksIn(indicator,acclinksData,transfer_techs,vintage,pc_accounting_transferLinks))
1775      / sum((linksData,acclinksData)
1776              $(aggregatelinksModel(linksData,linksModel) and sameas(linksData,acclinksData)
1777                  and accounting_transferLinksNonzero(indicator,acclinksData,transfer_techs,vintage)),
1778          1);
1779   
1780  parameter accounting_transferLinks(indicator,linksModel,transfer_techs,vintage,pc_accounting_transferLinks);
1781  loop(acclinks,
1782  accounting_transferLinks(indicator,linksModel,transfer_techs,vintage,pc_accounting_transferLinks)
1783      $sum(acclinksData$(map_acclinksToCalc(acclinks,linksModel) and sameas(acclinks,acclinksData)
1784                              and accounting_transferLinksIn(indicator,acclinksData,transfer_techs,vintage,pc_accounting_transferLinks)), 1)
1785      = sum(acclinksData$(map_acclinksToCalc(acclinks,linksModel) and sameas(acclinks,acclinksData)),
1786              accounting_transferLinksIn(indicator,acclinksData,transfer_techs,vintage,pc_accounting_transferLinks));
1787  );
1788   
1789  accounting_transferLinks(indicator,linksModel,transfer_techs,vintage,pc_accounting_transferLinks)
1790      $accounting_transferLinksAgg(indicator,linksModel,transfer_techs,vintage,pc_accounting_transferLinks)
1791      = accounting_transferLinksAgg(indicator,linksModel,transfer_techs,vintage,pc_accounting_transferLinks);
1792   
1793  * option kill %paramName%Nonzero %paramName%Chk %paramName%Agg
BATINCLUDE C:\Local\REMix\framework\remix\framework\model\source\battools\aggregateAccountingMean.gms
1795  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
1796  * SPDX-License-Identifier: BSD-3-Clause
1797   
1799   
1801   
1802  set accounting_transferPerLengthNonzero(indicator,acclinksData,transfer_techs,vintage,link_types);
1803  accounting_transferPerLengthNonzero(indicator,acclinksData,transfer_techs,vintage,link_types)
1804      $sum(pc_accounting_transferPerLength$accounting_transferPerLengthIn(indicator,acclinksData,transfer_techs,vintage,link_types,pc_accounting_transferPerLength), 1)
1805      = yes;
1806   
1808  set accounting_transferPerLengthChk(indicator,linksModel,transfer_techs,vintage,link_types,pc_accounting_transferPerLength);
1809  accounting_transferPerLengthChk(indicator,linksModel,transfer_techs,vintage,link_types,"useAnnuity")
1810      $sum((linksData,acclinksData)
1811              $(aggregatelinksModel(linksData,linksModel) and sameas(linksData,acclinksData)
1812                  and accounting_transferPerLengthNonzero(indicator,acclinksData,transfer_techs,vintage,link_types)), 1)
1813      = smax((linksData,acclinksData)
1814              $(aggregatelinksModel(linksData,linksModel) and sameas(linksData,acclinksData)
1815                  and accounting_transferPerLengthNonzero(indicator,acclinksData,transfer_techs,vintage,link_types)),
1816          accounting_transferPerLengthIn(indicator,acclinksData,transfer_techs,vintage,link_types,"useAnnuity"))
1817      - smin((linksData,acclinksData)
1818              $(aggregatelinksModel(linksData,linksModel) and sameas(linksData,acclinksData)
1819                  and accounting_transferPerLengthNonzero(indicator,acclinksData,transfer_techs,vintage,link_types)),
1820          accounting_transferPerLengthIn(indicator,acclinksData,transfer_techs,vintage,link_types,"useAnnuity"));
1821   
1822  abort$sum(accounting_transferPerLengthChk(indicator,linksModel,transfer_techs,vintage,link_types,pc_accounting_transferPerLength), 1) "Cannot aggregate technologies with different useAnnuity values."
1824   
1825  parameter accounting_transferPerLengthAgg(indicator,linksModel,transfer_techs,vintage,link_types,pc_accounting_transferPerLength);
1826  accounting_transferPerLengthAgg(indicator,linksModel,transfer_techs,vintage,link_types,pc_accounting_transferPerLength)
1827      $sum((linksData,acclinksData)
1828              $(aggregatelinksModel(linksData,linksModel) and sameas(linksData,acclinksData)
1829                  and accounting_transferPerLengthNonzero(indicator,acclinksData,transfer_techs,vintage,link_types)), 1)
1830      = sum((linksData,acclinksData)
1831              $(aggregatelinksModel(linksData,linksModel) and sameas(linksData,acclinksData)
1832                  and accounting_transferPerLengthNonzero(indicator,acclinksData,transfer_techs,vintage,link_types)),
1833          accounting_transferPerLengthIn(indicator,acclinksData,transfer_techs,vintage,link_types,pc_accounting_transferPerLength))
1834      / sum((linksData,acclinksData)
1835              $(aggregatelinksModel(linksData,linksModel) and sameas(linksData,acclinksData)
1836                  and accounting_transferPerLengthNonzero(indicator,acclinksData,transfer_techs,vintage,link_types)),
1837          1);
1838   
1839  parameter accounting_transferPerLength(indicator,linksModel,transfer_techs,vintage,link_types,pc_accounting_transferPerLength);
1840  loop(acclinks,
1841  accounting_transferPerLength(indicator,linksModel,transfer_techs,vintage,link_types,pc_accounting_transferPerLength)
1842      $sum(acclinksData$(map_acclinksToCalc(acclinks,linksModel) and sameas(acclinks,acclinksData)
1843                              and accounting_transferPerLengthIn(indicator,acclinksData,transfer_techs,vintage,link_types,pc_accounting_transferPerLength)), 1)
1844      = sum(acclinksData$(map_acclinksToCalc(acclinks,linksModel) and sameas(acclinks,acclinksData)),
1845              accounting_transferPerLengthIn(indicator,acclinksData,transfer_techs,vintage,link_types,pc_accounting_transferPerLength));
1846  );
1847   
1848  accounting_transferPerLength(indicator,linksModel,transfer_techs,vintage,link_types,pc_accounting_transferPerLength)
1849      $accounting_transferPerLengthAgg(indicator,linksModel,transfer_techs,vintage,link_types,pc_accounting_transferPerLength)
1850      = accounting_transferPerLengthAgg(indicator,linksModel,transfer_techs,vintage,link_types,pc_accounting_transferPerLength);
1851   
1852  * option kill %paramName%Nonzero %paramName%Chk %paramName%Agg
BATINCLUDE C:\Local\REMix\framework\remix\framework\model\source\battools\aggregateAccountingMean.gms
1854  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
1855  * SPDX-License-Identifier: BSD-3-Clause
1856   
1858   
1860   
1861  set accounting_sourcesinkFlowNonzero(indicator,accnodesData,years,sourcesink_techs,commodity);
1862  accounting_sourcesinkFlowNonzero(indicator,accnodesData,years,sourcesink_techs,commodity)
1863      $sum(pc_accounting_sourcesinkFlow$accounting_sourcesinkFlowIn(indicator,accnodesData,years,sourcesink_techs,commodity,pc_accounting_sourcesinkFlow), 1)
1864      = yes;
1865   
1867   
1868  parameter accounting_sourcesinkFlowAgg(indicator,nodesModel,years,sourcesink_techs,commodity,pc_accounting_sourcesinkFlow);
1869  accounting_sourcesinkFlowAgg(indicator,nodesModel,years,sourcesink_techs,commodity,pc_accounting_sourcesinkFlow)
1870      $sum((nodesData,accnodesData)
1871              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1872                  and accounting_sourcesinkFlowNonzero(indicator,accnodesData,years,sourcesink_techs,commodity)), 1)
1873      = sum((nodesData,accnodesData)
1874              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1875                  and accounting_sourcesinkFlowNonzero(indicator,accnodesData,years,sourcesink_techs,commodity)),
1876          accounting_sourcesinkFlowIn(indicator,accnodesData,years,sourcesink_techs,commodity,pc_accounting_sourcesinkFlow))
1877      / sum((nodesData,accnodesData)
1878              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1879                  and accounting_sourcesinkFlowNonzero(indicator,accnodesData,years,sourcesink_techs,commodity)),
1880          1);
1881   
1882  parameter accounting_sourcesinkFlow(indicator,nodesModel,years,sourcesink_techs,commodity,pc_accounting_sourcesinkFlow);
1883  loop(accnodes,
1884  accounting_sourcesinkFlow(indicator,nodesModel,years,sourcesink_techs,commodity,pc_accounting_sourcesinkFlow)
1885      $sum(accnodesData$(map_accnodesToCalc(accnodes,nodesModel) and sameas(accnodes,accnodesData)
1886                              and accounting_sourcesinkFlowIn(indicator,accnodesData,years,sourcesink_techs,commodity,pc_accounting_sourcesinkFlow)), 1)
1887      = sum(accnodesData$(map_accnodesToCalc(accnodes,nodesModel) and sameas(accnodes,accnodesData)),
1888              accounting_sourcesinkFlowIn(indicator,accnodesData,years,sourcesink_techs,commodity,pc_accounting_sourcesinkFlow));
1889  );
1890   
1891  accounting_sourcesinkFlow(indicator,nodesModel,years,sourcesink_techs,commodity,pc_accounting_sourcesinkFlow)
1892      $accounting_sourcesinkFlowAgg(indicator,nodesModel,years,sourcesink_techs,commodity,pc_accounting_sourcesinkFlow)
1893      = accounting_sourcesinkFlowAgg(indicator,nodesModel,years,sourcesink_techs,commodity,pc_accounting_sourcesinkFlow);
1894   
1895  * option kill %paramName%Nonzero %paramName%Chk %paramName%Agg
1896   
1897  parameter accounting_indicatorBounds_links(linksModel,years,indicator,pc_accounting_indicatorBounds_links);
1898  accounting_indicatorBounds_links(linksModelToCalc,yearsToCalc,indicator,pc_accounting_indicatorBounds_links)
1899      = sum((linksData)$sameas(linksModelToCalc,linksData),
1900              accounting_indicatorBounds_linksIn(linksData,yearsToCalc,indicator,pc_accounting_indicatorBounds_links));
1901   
1902  accounting_indicatorBounds_links(linksModelToCalc,yearsToCalc,indicator,pc_accounting_indicatorBounds_links)
1903      = sum((linksData)$links_aggregate(linksModelToCalc,linksData),
1904              accounting_indicatorBounds_linksIn(linksData,yearsToCalc,indicator,pc_accounting_indicatorBounds_links));
1905   
1906  parameter accounting_indicatorBounds(accNodesModel,accYears,indicator,pc_accounting_indicatorBounds);
1907  accounting_indicatorBounds(accNodesModel,accYears,indicator,pc_accounting_indicatorBounds)
1908      = sum (accNodesData$sameas(accNodesModel,accNodesData),
1909          accounting_indicatorBoundsIn(accNodesData,accYears,indicator,pc_accounting_indicatorBounds));
1910   
1911  accounting_indicatorBounds(accNodesModel,accYears,indicator,pc_accounting_indicatorBounds)
1912      $(sum (nodesModel$sameas(accNodesModel,nodesModel), 1) > 0)
1913      = sum ((accNodesData,nodesData,nodesModel)
1914              $(aggregateNodesModel(nodesData,nodesModel) and sameas(accNodesModel,nodesModel) and sameas(accNodesData,nodesData)),
1915          accounting_indicatorBoundsIn(accNodesData,accYears,indicator,pc_accounting_indicatorBounds));
1916   
1917  set accounting_perIndicatorNonzero(indicator,indicator_a,accNodesData,accYears);
1918  accounting_perIndicatorNonzero(indicator,indicator_a,accNodesData,accYears)
1919      $sum(pc_accounting_perIndicator$accounting_perIndicatorIn(indicator,indicator_a,accNodesData,accYears,pc_accounting_perIndicator), 1)
1920      = yes;
1921   
1922  parameter accounting_perIndicatorAgg(indicator,indicator_a,nodesModel,accYears,pc_accounting_perIndicator);
1923  accounting_perIndicatorAgg(indicator,indicator_a,nodesModel,accYears,pc_accounting_perIndicator)
1924      $sum((nodesData,accnodesData)
1925              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1926                  and accounting_perIndicatorNonzero(indicator,indicator_a,accnodesData,accYears)), 1)
1927      = sum((nodesData,accnodesData)
1928              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1929                  and accounting_perIndicatorNonzero(indicator,indicator_a,accnodesData,accYears)),
1930          accounting_perIndicatorIn(indicator,indicator_a,accnodesData,accYears,pc_accounting_perIndicator))
1931      / sum((nodesData,accnodesData)
1932              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1933                  and accounting_perIndicatorNonzero(indicator,indicator_a,accnodesData,accYears)),
1934          1);
1935   
1936  parameter accounting_perIndicator(indicator,indicator_a,accNodesModel,accYears,pc_accounting_perIndicator);
1937   
1938  loop(accNodes,
1939  accounting_perIndicator(indicator,indicator_a,accNodesModel,accYears,pc_accounting_perIndicator)
1940      $(sum(accNodesData$(sameas(accNodes,accNodesData)
1941              and accounting_perIndicatorIn(indicator,indicator_a,accNodesData,"horizon",pc_accounting_perIndicator)), 1)
1942          and map_accNodes(accNodesModel,accNodes)
1943              )
1944      = sum(accNodesData$(sameas(accNodes,accNodesData)),
1945              accounting_perIndicatorIn(indicator,indicator_a,accNodesData,"horizon",pc_accounting_perIndicator));
1946   
1947  accounting_perIndicator(indicator,indicator_a,accNodesModel,accYears,pc_accounting_perIndicator)
1948      $(sum(accNodesData$(sameas(accNodes,accNodesData)
1949              and accounting_perIndicatorIn(indicator,indicator_a,accNodesData,accYears,pc_accounting_perIndicator)), 1)
1950          and map_accNodes(accNodesModel,accNodes)
1951          and not sameas(accYears, "horizon"))
1952      = sum(accNodesData$(sameas(accNodes,accNodesData)),
1953              accounting_perIndicatorIn(indicator,indicator_a,accNodesData,accYears,pc_accounting_perIndicator));
1954  );
1955   
1956  accounting_perIndicator(indicator,indicator_a,accNodesModel,accYears,pc_accounting_perIndicator)
1957      $sum(nodesModel$(accounting_perIndicatorAgg(indicator,indicator_a,nodesModel,"horizon",pc_accounting_perIndicator)
1958          and sameas(accNodesModel,nodesModel)), 1)
1959      = sum(nodesModel$sameas(accNodesModel,nodesModel),
1960          accounting_perIndicatorAgg(indicator,indicator_a,nodesModel,"horizon",pc_accounting_perIndicator));
1961   
1962  accounting_perIndicator(indicator,indicator_a,accNodesModel,accYears,pc_accounting_perIndicator)
1963      $sum(nodesModel$(accounting_perIndicatorAgg(indicator,indicator_a,nodesModel,accYears,pc_accounting_perIndicator)
1964          and sameas(accNodesModel,nodesModel) and not sameas(accYears, "horizon")), 1)
1965      = sum(nodesModel$sameas(accNodesModel,nodesModel),
1966          accounting_perIndicatorAgg(indicator,indicator_a,nodesModel,accYears,pc_accounting_perIndicator));
1967   
1968   
1969  * Make sure all required indicators end up in the model
1970  set activeIndicators(accNodesModel,accYears,indicator);
1971  activeIndicators(accNodesModel,accYears,indicator)
1972     $((accounting_indicatorBounds(accNodesModel,accYears,indicator,"obj") <> 0
1975        or accounting_indicatorBounds(accNodesModel,accYears,indicator,"useFixed") <> 0
1976        or accounting_indicatorBounds(accNodesModel,accYears,indicator,"useLower") <> 0
1977        or accounting_indicatorBounds(accNodesModel,accYears,indicator,"useUpper") <> 0 )
1978          and not accounting_indicatorBounds(accNodesModel,accYears,indicator,"isVariable"))
1979     = yes;
1980   
1981  set activeIndicators_links(linksModel,years,indicator);
1982  activeIndicators_links(linksModelToCalc,yearsToCalc,indicator)
1983     $(accounting_indicatorBounds_links(linksModelToCalc,yearsToCalc,indicator,"useFixed") <> 0
1984        or accounting_indicatorBounds_links(linksModelToCalc,yearsToCalc,indicator,"useLower") <> 0
1985        or accounting_indicatorBounds_links(linksModelToCalc,yearsToCalc,indicator,"useUpper") <> 0 )
1986     = yes;
1987   
1988  set variableIndicators(accNodesModel,accYears,indicator);
1989  variableIndicators(accNodesModel,accYears,indicator)
1990     $(accounting_indicatorBounds(accNodesModel,accYears,indicator,"obj") = 0
1991        and accounting_indicatorBounds(accNodesModel,accYears,indicator,"isVariable"))
1992     = yes;
1993   
1994  * Calculate length of years and discount rates per indicator
1995  parameter yearFactor(accNodesModel,accYears,indicator,accYears);
1996  yearFactor(accNodesModel,accYears,indicator,accYears_a)
1997      $(map_accYears(accYears_a,accYears)
1998          and sum(yearsToCalc$(sameas(yearsToCalc,accYears_a)), 1))
1999      = 1;
2000   
2001  yearFactor(accNodesModel,accYears,indicator,accYears_a)
2002      $(map_accYears(accYears_a,accYears)
2003          and sum(yearsToCalc$(sameas(yearsToCalc,accYears_a)), 1)
2004          and accounting_indicatorBounds(accNodesModel,accYears,indicator,"integral"))
2005      = sum(yearsToCalc$sameas(accYears_a,yearsToCalc), yearsLen(yearsToCalc));
2006   
2007  yearFactor(accNodesModel,accYears,indicator,accYears_a)
2008      $(map_accYears(accYears_a,accYears)
2009          and sum(yearsToCalc$(sameas(yearsToCalc,accYears_a)), 1)
2010          and accounting_indicatorBounds(accNodesModel,accYears,indicator,"integral")
2011          and accounting_indicatorBounds(accNodesModel,accYears,indicator,"endyear")
2012          and yearFactor(accNodesModel,accYears,indicator,accYears_a) = inf)
2013      = accounting_indicatorBounds(accNodesModel,accYears,indicator,"endyear");
2014   
2015  yearFactor(accNodesModel,accYears,indicator,accYears_a)
2016      $(map_accYears(accYears_a,accYears)
2017          and sum(yearsToCalc$(sameas(yearsToCalc,accYears_a)), 1)
2018          and accounting_indicatorBounds(accNodesModel,accYears,indicator,"integral")
2019          and accounting_indicatorBounds(accNodesModel,accYears,indicator,"discount"))
2020      = yearFactor(accNodesModel,accYears,indicator,accYears_a)
2021          * (1 - accounting_indicatorBounds(accNodesModel,accYears,indicator,"discount"))
2022                  ** (accYears_a.val - smin(yearsToCalc, yearsToCalc.val));
2023   
2024   
2025  * ==== calculate compound indicators for the optimization ====
2026  scalar compIndicators_pre;
2027  scalar compIndicators_post;
2028   
2029  parameter compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a);
2030  compoundIndicators(accNodesModel,accYears,indicator,accNodesModel,accYears,indicator)
2031      $activeIndicators(accNodesModel,accYears,indicator) = 1;
2032   
2033  set compoundIndicators_act(accNodesModel,accYears,indicator);
2034  option compoundIndicators_act < compoundIndicators;
2035   
2036  parameter compoundIndicatorsExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa);
2037  parameter compoundIndicatorsExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a);
2038  compoundIndicatorsExt(accNodesModel,accYears,indicator,accNodesModel,accYears,indicator,accNodesModel,accYears,indicator)
2039      $compoundIndicators_act(accNodesModel,accYears,indicator) = 1;
2040   
2041  compIndicators_pre = 0;
2042  compIndicators_post = 1;
2043   
2044  option sparseval = 1;
2045  while(compIndicators_pre < compIndicators_post,
2046      compIndicators_pre = sum((accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa)
2047          $compoundIndicatorsExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa), 1);
2048   
2049      compoundIndicatorsExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa)
2050          $(compoundIndicators_act(accNodesModel,accYears,indicator)
2051              and compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
2052              and not accounting_indicatorBounds(accNodesModel_a,accYears_a,indicator_a,"isVariable")
2053              and map_accNodes(accNodesModel_aa,accNodesModel_a)
2054              and map_accYears(accYears_aa,accYears_a))
2055          = compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
2056              * accounting_perIndicator(indicator_a,indicator_aa,accNodesModel_aa,accYears_aa,"perIndicator");
2057   
2058      option compoundIndicatorsExt_r < compoundIndicatorsExt;
2059   
2060      compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa)
2061          $(compoundIndicators_act(accNodesModel,accYears,indicator)
2062              and sum((accNodesModel_a,accYears_a,indicator_a)
2063                      $compoundIndicatorsExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a), 1) = 1)
2064          = sum((accNodesModel_a,accYears_a,indicator_a)
2065                  $(compoundIndicatorsExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a)),
2066              compoundIndicatorsExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a));
2067   
2068      compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa)
2069          $(compoundIndicators_act(accNodesModel,accYears,indicator)
2070              and sum((accNodesModel_a,accYears_a,indicator_a)
2071                      $compoundIndicatorsExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a), 1) > 1)
2072          = sum((accNodesModel_a,accYears_a,indicator_a)
2073                  $(compoundIndicatorsExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a)
2074                      and not (sameas(accNodesModel, accNodesModel_a) and sameas(accYears, accYears_a) and sameas(indicator, indicator_a))),
2075              compoundIndicatorsExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a))
2076          / sum((accNodesModel_a,accYears_a,indicator_a)
2077                  $(compoundIndicatorsExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a)
2078                      and not (sameas(accNodesModel, accNodesModel_a) and sameas(accYears, accYears_a) and sameas(indicator, indicator_a))), 1);
2079   
2080      option compoundIndicators_act < compoundIndicators;
2081      compIndicators_post = sum((accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa)
2082          $compoundIndicatorsExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa), 1);
2083  );
2084  option sparseval = 0;
2085   
2086  * map to sub-years and sub-nodes
2087  compoundIndicatorsExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_a)
2088      $(compoundIndicators_act(accNodesModel,accYears,indicator)
2089          and compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
2090          and map_accYears(accYears_aa,accYears_a)
2091          and map_accNodes(accNodesModel_aa,accNodesModel_a))
2092      = compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
2093          * yearFactor(accNodesModel,accYears,indicator,accYears_aa);
2094   
2095  * Remove all accounting regions and accounting years
2096  compoundIndicatorsExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa)
2097      $(compoundIndicatorsExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa)
2098          and not accounting_indicatorBounds(accNodesModel_aa,accYears_aa,indicator_aa,"isVariable")
2099          and sum(accNodes$(sameas(accNodes,accNodesModel_aa)), 1)
2100              or sameas("horizon",accYears_aa))
2101      = 0;
2102   
2103  * Map from extended parameter to final parameter
2104  option compoundIndicatorsExt_r < compoundIndicatorsExt;
2105  compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa)
2106      $(compoundIndicators_act(accNodesModel,accYears,indicator)
2107          and sum((accNodesModel_a,accYears_a,indicator_a)
2108                  $compoundIndicatorsExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a), 1) = 1)
2109      = sum((accNodesModel_a,accYears_a,indicator_a)
2110              $(compoundIndicatorsExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a)),
2111          compoundIndicatorsExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a));
2112   
2113  compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa)
2114      $(compoundIndicators_act(accNodesModel,accYears,indicator)
2115          and sum((accNodesModel_a,accYears_a,indicator_a)
2116                  $compoundIndicatorsExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a), 1) > 1)
2117      = sum((accNodesModel_a,accYears_a,indicator_a)
2118              $(compoundIndicatorsExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a)
2119                  and not (sameas(accNodesModel, accNodesModel_a) and sameas(accYears, accYears_a) and sameas(indicator, indicator_a))),
2120          compoundIndicatorsExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a))
2121      / sum((accNodesModel_a,accYears_a,indicator_a)
2122              $(compoundIndicatorsExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a)
2123                  and not (sameas(accNodesModel, accNodesModel_a) and sameas(accYears, accYears_a) and sameas(indicator, indicator_a))), 1);
2124   
2125  * Remove all accounting regions and accounting years
2126  compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
2127      $(compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
2128          and not accounting_indicatorBounds(accNodesModel_a,accYears_a,indicator_a,"isVariable")
2129          and (sum(accNodes$(sameas(accNodes,accNodesModel_a)), 1)
2130              or sameas("horizon",accYears_a)))
2131      = 0;
2132   
2133  * Remove all slack indicators except the ones declared in indicatorBounds
2134  compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
2135      $(compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
2136          and sum((accNodesModel_aa,accYears_aa)$accounting_indicatorBounds(accNodesModel_aa,accYears_aa,indicator_a,"isVariable"), 1)
2137          and not accounting_indicatorBounds(accNodesModel_a,accYears_a,indicator_a,"isVariable"))
2138      = 0;
2139   
2140  * ==== compound indicators for the post calculation ====
2141  parameter compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a);
2142  compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel,accYears,indicator)
2143      $(sum(nodesModelToCalc$map_accNodesToCalc(accNodesModel,nodesModelToCalc), 1)
2144          and sum(yearsToCalc$map_accYearsToCalc(accYears,yearsToCalc), 1)) = 1;
2145   
2146  set compoundIndicatorsFull_act(accNodesModel,accYears,indicator);
2147  option compoundIndicatorsFull_act < compoundIndicatorsFull;
2148   
2149  parameter compoundIndicatorsFullExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa);
2150  parameter compoundIndicatorsFullExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a);
2151  compoundIndicatorsFullExt(accNodesModel,accYears,indicator,accNodesModel,accYears,indicator,accNodesModel,accYears,indicator) = 1;
2152   
2153  compIndicators_pre = 0;
2154  compIndicators_post = 1;
2155   
2156  option sparseval = 1;
2157  while(compIndicators_pre < compIndicators_post,
2158      compIndicators_pre = sum((accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa)
2159          $compoundIndicatorsFullExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa), 1);
2160   
2161      compoundIndicatorsFullExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa)
2162          $(compoundIndicatorsFull_act(accNodesModel,accYears,indicator)
2163              and compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
2164              and not accounting_indicatorBounds(accNodesModel_a,accYears_a,indicator_a,"isVariable")
2165              and map_accNodes(accNodesModel_aa,accNodesModel_a)
2166              and map_accYears(accYears_aa,accYears_a))
2167          = compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
2168              * accounting_perIndicator(indicator_a,indicator_aa,accNodesModel_aa,accYears_aa,"perIndicator");
2169   
2170      option compoundIndicatorsFullExt_r < compoundIndicatorsFullExt;
2171   
2172      compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa)
2173          $(compoundIndicatorsFull_act(accNodesModel,accYears,indicator)
2174              and sum((accNodesModel_a,accYears_a,indicator_a)
2175                      $compoundIndicatorsFullExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a), 1) = 1)
2176          = sum((accNodesModel_a,accYears_a,indicator_a)
2177                  $(compoundIndicatorsFullExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a)),
2178              compoundIndicatorsFullExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a));
2179   
2180      compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa)
2181          $(compoundIndicatorsFull_act(accNodesModel,accYears,indicator)
2182              and sum((accNodesModel_a,accYears_a,indicator_a)
2183                      $compoundIndicatorsFullExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a), 1) > 1)
2184          = sum((accNodesModel_a,accYears_a,indicator_a)
2185                  $(compoundIndicatorsFullExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a)
2186                      and not (sameas(accNodesModel, accNodesModel_a) and sameas(accYears, accYears_a) and sameas(indicator, indicator_a))),
2187              compoundIndicatorsFullExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a))
2188          / sum((accNodesModel_a,accYears_a,indicator_a)
2189                  $(compoundIndicatorsFullExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a)
2190                      and not (sameas(accNodesModel, accNodesModel_a) and sameas(accYears, accYears_a) and sameas(indicator, indicator_a))), 1);
2191   
2192      option compoundIndicatorsFull_act < compoundIndicatorsFull;
2193      compIndicators_post = sum((accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa)
2194          $compoundIndicatorsFullExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa), 1);
2195  );
2196  option sparseval = 0;
2197   
2198  * map to sub-years and sub-nodes
2199  compoundIndicatorsFullExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_a)
2200      $(compoundIndicatorsFull_act(accNodesModel,accYears,indicator)
2201          and compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
2202          and map_accYears(accYears_aa,accYears_a)
2203          and map_accNodes(accNodesModel_aa,accNodesModel_a))
2204      = compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
2205          * yearFactor(accNodesModel,accYears,indicator,accYears_aa);
2206   
2207  * Remove all accounting regions and accounting years
2208  compoundIndicatorsFullExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa)
2209      $(compoundIndicatorsFullExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa)
2210          and not accounting_indicatorBounds(accNodesModel_aa,accYears_aa,indicator_aa,"isVariable")
2211          and sum(accNodes$(sameas(accNodes,accNodesModel_aa)), 1)
2212              or sameas("horizon",accYears_aa))
2213      = 0;
2214   
2215  * Map from extended parameter to final parameter
2216  option compoundIndicatorsFullExt_r < compoundIndicatorsFullExt;
2217  compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa)
2218      $(compoundIndicatorsFull_act(accNodesModel,accYears,indicator)
2219          and sum((accNodesModel_a,accYears_a,indicator_a)
2220                  $compoundIndicatorsFullExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a), 1) = 1)
2221      = sum((accNodesModel_a,accYears_a,indicator_a)
2222              $(compoundIndicatorsFullExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a)),
2223          compoundIndicatorsFullExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a));
2224   
2225  compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa)
2226      $(compoundIndicatorsFull_act(accNodesModel,accYears,indicator)
2227          and sum((accNodesModel_a,accYears_a,indicator_a)
2228                  $compoundIndicatorsFullExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a), 1) > 1)
2229      = sum((accNodesModel_a,accYears_a,indicator_a)
2230              $(compoundIndicatorsFullExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a)
2231                  and not (sameas(accNodesModel, accNodesModel_a) and sameas(accYears, accYears_a) and sameas(indicator, indicator_a))),
2232          compoundIndicatorsFullExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a))
2233      / sum((accNodesModel_a,accYears_a,indicator_a)
2234              $(compoundIndicatorsFullExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a)
2235                  and not (sameas(accNodesModel, accNodesModel_a) and sameas(accYears, accYears_a) and sameas(indicator, indicator_a))), 1);
2236   
2237  * Remove all accounting regions and accounting years
2238  compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
2239      $(compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
2240          and not accounting_indicatorBounds(accNodesModel_a,accYears_a,indicator_a,"isVariable")
2241          and (sum(accNodes$(sameas(accNodes,accNodesModel_a)), 1)
2242              or sameas("horizon",accYears_a)))
2243      = 0;
2244   
2245  * Remove all slack indicators except the ones declared in indicatorBounds
2246  compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
2247      $(compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
2248          and sum((accNodesModel_aa,accYears_aa)$accounting_indicatorBounds(accNodesModel_aa,accYears_aa,indicator_a,"isVariable"), 1)
2249          and not accounting_indicatorBounds(accNodesModel_a,accYears_a,indicator_a,"isVariable"))
2250      = 0;
2251   
2252  * Check if the objective value and optimization sense is set correctly
2253  scalar opti_values, opti_sense;
2254  opti_values = sum((accNodesModel,accYears,indicator)$(accounting_indicatorBounds(accNodesModel,accYears,indicator,"obj") <> 0), 1);
2255  opti_sense = sum((accNodesModel,accYears,indicator), accounting_indicatorBounds(accNodesModel,accYears,indicator,"obj"));
2256  abort$(opti_values < 1)
2257      "Accounting: No indicator specified as objective value"
2258  abort$(opti_values > 1)
2259      "Accounting: Too many indicators specified as objective value"
2260  abort$(opti_sense <> -1 and opti_sense <> 1)
2261      "Accounting: Optimization sense has to be either -1 or 1"
INCLUDE    C:\Local\REMix\framework\remix\framework\model\source\accounting\annuities.gms
2263  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
2264  * SPDX-License-Identifier: BSD-3-Clause
2265   
2266  * Calculation of annuities
2267   
2268  abort$(sum((indicator,nodesModelToCalc,converter_techs,vintage)
2269          $(accounting_converterUnits(indicator,nodesModelToCalc,converter_techs,vintage,"useAnnuity") = 1
2270          and accounting_converterUnits(indicator,nodesModelToCalc,converter_techs,vintage,"amorTime") < 1), 1) > 0 )
2271      "Accounting: Some converter technologies use annuities but have no amortization time"
2272   
2273  parameter accounting_annuityFactor_converter(indicator,nodesModel,converter_techs,vintage);
2274  accounting_annuityFactor_converter(indicator,nodesModelToCalc,converter_techs,vintage)
2275      $accounting_converterUnits(indicator,nodesModelToCalc,converter_techs,vintage,"useAnnuity")
2276      =
2277      accounting_converterUnits(indicator,nodesModelToCalc,converter_techs,vintage,"interest")
2278          * (1 + accounting_converterUnits(indicator,nodesModelToCalc,converter_techs,vintage,"interest"))
2279          ** accounting_converterUnits(indicator,nodesModelToCalc,converter_techs,vintage,"amorTime")
2280      / ((1 + accounting_converterUnits(indicator,nodesModelToCalc,converter_techs,vintage,"interest"))
2281          ** accounting_converterUnits(indicator,nodesModelToCalc,converter_techs,vintage,"amorTime") - 1);
2282   
2283   
2284  abort$(sum((indicator,nodesModelToCalc,storage_techs,vintage)
2285          $(accounting_storageUnits(indicator,nodesModelToCalc,storage_techs,vintage,"useAnnuity") = 1
2286          and accounting_storageUnits(indicator,nodesModelToCalc,storage_techs,vintage,"amorTime") < 1), 1) > 0 )
2287      "Accounting: Some storage technologies use annuities but have no amortization time"
2288   
2289  parameter accounting_annuityFactor_storage(indicator,nodesModel,storage_techs,vintage);
2290  accounting_annuityFactor_storage(indicator,nodesModelToCalc,storage_techs,vintage)
2291      $accounting_storageUnits(indicator,nodesModelToCalc,storage_techs,vintage,"useAnnuity")
2292      =
2293      accounting_storageUnits(indicator,nodesModelToCalc,storage_techs,vintage,"interest")
2294          * (1 + accounting_storageUnits(indicator,nodesModelToCalc,storage_techs,vintage,"interest"))
2295          ** accounting_storageUnits(indicator,nodesModelToCalc,storage_techs,vintage,"amorTime")
2296      / ((1 + accounting_storageUnits(indicator,nodesModelToCalc,storage_techs,vintage,"interest"))
2297          ** accounting_storageUnits(indicator,nodesModelToCalc,storage_techs,vintage,"amorTime") - 1);
2298   
2299   
2300  abort$(sum((indicator,linksModelToCalc,transfer_techs,vintage)
2301          $(accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"useAnnuity") = 1
2302          and accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"amorTime") < 1), 1) > 0 )
2303      "Accounting: Some transfer technologies use annuities but have no amortization time"
2304   
2305  parameter accounting_annuityFactor_transferLink(indicator,linksModel,transfer_techs,vintage);
2306  accounting_annuityFactor_transferLink(indicator,linksModelToCalc,transfer_techs,vintage)
2307      $accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"useAnnuity")
2308      =
2309      accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"interest")
2310          * (1 + accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"interest"))
2311          ** accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"amorTime")
2312      / ((1 + accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"interest"))
2313          ** accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"amorTime") - 1);
2314   
2315   
2316   
2317  abort$(sum((indicator,linksModelToCalc,transfer_techs,vintage,link_types)
2318          $(accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"useAnnuity") = 1
2319          and accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"amorTime") < 1), 1) > 0 )
2320      "Accounting: Some transfer-per-length technologies use annuities but have no amortization time"
2321   
2322  parameter accounting_annuityFactor_transferPerLength(indicator,linksModel,transfer_techs,vintage,link_types);
2323  accounting_annuityFactor_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types) = 1;
2324   
2325  accounting_annuityFactor_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types)
2326      $accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"useAnnuity")
2327      =
2328      accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"interest")
2329          * (1 + accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"interest"))
2330          ** accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"amorTime")
2331      / ((1 + accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"interest"))
2332          ** accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"amorTime") - 1);
2333   
2335   
INCLUDE    C:\Local\REMix\framework\remix\framework\model\source\methods\mga_pre.gms
2337  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
2338  * SPDX-License-Identifier: BSD-3-Clause
2339   
INCLUDE    C:\Local\REMix\framework\remix\framework\model\source\methods\pareto_pre.gms
2343  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
2344  * SPDX-License-Identifier: BSD-3-Clause
2345   
INCLUDE    C:\Local\REMix\framework\remix\framework\model\source\postcalc\declaration.gms
2349  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
2350  * SPDX-License-Identifier: BSD-3-Clause
2351  * // # Output data
2352  * // This is the reference data model of the REMix output.
2353  * //
2354  * // ## Standard output
2357   
2364   
2366   
2367  set capType / "build", "decom", "total", "lowerLimit", "upperLimit", "total_degraded" /;
2368  set balanceType / "netto", "brutto", "positive", "negative", "flh" /;
2369  set profileType / "upper", "fixed", "lower" /;
2370  set r2a_has_converter_cost(indicator,nodesModel,years,techs,vintage,commodity);
2371   
2372  ** // OUTPUT: indicator_accounting | OEO_00000350:quantity value
2373  * // ### indicator_accounting
2374  * // Title: Accounting indicators Post-calculation
2375  parameter indicator_accounting(accNodesModel,accYears,indicator) "Post-calculation aggregated indicator accounting" ;
2376  * //
2377  ** // OUTPUT: indicator_accounting_ref | OEO_00000350:quantity value
2378  * // ### indicator_accounting_ref
2379  * // Title: Accounting indicators reference
2380  parameter indicator_accounting_ref(accNodesModel,accYears,indicator) "Indicator accounting optimization levels" ;
2381  * //
2382  ** // OUTPUT: indicator_accounting_comp | OEO_00000350:quantity value
2383  * // ### indicator_accounting_comp
2384  * // Title: Accounting indicators composition
2385  parameter indicator_accounting_comp(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a) "Indicator accounting with other indicator composition" ;
2386  * //
2387  ** // OUTPUT: indicator_accounting_detailed | OEO_00000350:quantity value
2388  * // ### indicator_accounting_detailed
2389  * // Title: Accounting indicators detail
2390  parameter indicator_accounting_detailed(indicator,nodesModel,years,techs) "Indicator accounting with technological composition" ;
2391  * //
2392  ** // OUTPUT: indicator_accounting_links | OEO_00000350:quantity value
2393  * // ### indicator_accounting_links
2394  * // Title: Accounting indicators per transfer link
2395  parameter indicator_accounting_links(indicator,nodesModel,nodesModel_a,linksModel,years,techs) "Indicator accounting of transfer technologies" ;
2396  * //
2397  parameter converter_ratedInput(techs,vintage,commodity);
2398  parameter converter_ratedOutput(techs,vintage,commodity);
2399  parameter converter_ratedOutput_min(nodesModel,years,techs,commodity);
2400  parameter converter_ratedOutput_max(nodesModel,years,techs,commodity);
2401   
2402  ** // OUTPUT: converter_caps | OEO_00010257:power capacity
2403  * // ### converter_caps
2404  * // Title: Coverter capacities post-calculation
2405  parameter converter_caps(accNodesModel,accYears,techs,commodity,capType) "Converter capacities, aggregated total" ;
2406  * //
2407  parameter converter_caps_ext(accNodesModel,nodesModel,accYears,years,techs,vintage,commodity,capType);
2408   
2409  ** // OUTPUT: converter_units | OEO_00000350:quantity value
2410  * // ### converter_units
2411  * // Title: Coverter units post-calculation
2412  parameter converter_units(accNodesModel,accYears,techs,vintage,capType) "Converter units" ;
2413  * //
2414  parameter converter_units_ext(accNodesModel,nodesModel,accYears,years,techs,vintage,capType);
2415   
2416  set transfer_usedStartEnd(nodesModel,nodesModel,linksModel,years,techs);
2417  parameter max_transfer_coefficient(techs,commodity);
2418  parameter min_transfer_coefficient(techs,commodity);
2419  ** // OUTPUT: transfer_links | OEO_00000350:quantity value
2420  * // ### transfer_links
2421  * // Title: Transfer post-calculation
2422  parameter transfer_links(linksModel,years,techs,vintage,capType) "Transfer links" ;
2423  * //
2424  ** // OUTPUT: transfer_caps | OEO_00010257:power capacity
2425  * // ### transfer_caps
2426  * // Title: Transfer capacities post-calculation
2427  parameter transfer_caps(nodesModel_start,nodesModel_end,linksModel,years,techs,commodity,capType) "Transfer capacities, aggregated total" ;
2428  * //
2429  ** // OUTPUT: transfer_flows | OEO_00050019:energy amount value
2430  * // ### transfer_flows
2431  * // Title: Transfer hourly flows
2432  parameter transfer_flows(timeModel,nodesModel_start,nodesModel_end,linksModel,years,techs,commodity) "Hourly link flows" ;
2433  * //
2434  ** // OUTPUT: transfer_flows_annual | OEO_00050019:energy amount value
2435  * // ### transfer_flows_annual
2436  * // Title: Transfer annual flows
2437  parameter transfer_flows_annual(nodesModel_start,nodesModel_end,linksModel,years,techs,commodity,balanceType) "Annual link flows" ;
2438  * //
2439  ** // OUTPUT: transfer_losses | OEO_00050019:energy amount value
2440  * // ### transfer_losses
2441  * // Title: Transfer hourly losses
2442  parameter transfer_losses(timeModel,nodesModel_start,nodesModel_end,linksModel,years,techs,commodity) "Hourly link losses" ;
2443  * //
2444  ** // OUTPUT: transfer_losses_annual | OEO_00050019:energy amount value
2445  * // ### transfer_losses_annual
2446  * // Title: Transfer annual losses
2447  parameter transfer_losses_annual(nodesModel_start,nodesModel_end,linksModel,years,techs,commodity,balanceType) "Annual link losses" ;
2448  * //
2449  parameter storage_size_max(nodesModel,years,techs,commodity);
2450  parameter storage_size_min(nodesModel,years,techs,commodity);
2451  ** // OUTPUT: storage_units |  OEO_00000350:quantity value
2452  * // ### storage_units
2453  * // Title: Storage units post-calculation
2454  parameter storage_units(accNodesModel,accYears,techs,vintage,capType) "Storage units" ;
2455  * //
2456  parameter storage_units_ext(accNodesModel,nodesModel,accYears,years,techs,vintage,capType);
2457  ** // OUTPUT: storage_caps | OEO_00230000:energy storage capacity
2458  * // ### storage_caps
2459  * // Title: Storage capacities post-calculation
2460  parameter storage_caps(accNodesModel,accYears,techs,commodity,capType) "Storage capacities, aggregated total" ;
2461  * //
2462  parameter storage_caps_ext(accNodesModel,nodesModel,accYears,years,techs,vintage,commodity,capType);
2463  ** // OUTPUT: storage_level_out | OEO_00330012:energy storage content
2464  * // ### storage_level_out
2465  * // Title: Storage level
2466  parameter storage_level_out(timeModel,accNodesModel,accYears,techs,commodity) "Storage level per time step" ;
2467  * //
2468  parameter storage_level_out_ext(timeModel,accNodesModel,nodesModel,accYears,years,techs,vintage,commodity);
2469  ** // OUTPUT: storage_flows | OEO_00050019:energy amount value
2470  * // ### storage_flows
2471  * // Title: Storage hourly flows
2472  parameter storage_flows(timeModel,accNodesModel,accYears,techs,commodity) "Storage flows per time step" ;
2473  * //
2474  parameter storage_flows_ext(timeModel,accNodesModel,nodesModel,accYears,years,techs,vintage,commodity);
2475  ** // OUTPUT: storage_flows_annual | OEO_00050019:energy amount value
2476  * // ### storage_flows_annual
2477  * // Title: Storage annual flows
2478  parameter storage_flows_annual(accNodesModel,accYears,techs,commodity,balanceType) "Aggregated storage flows" ;
2479  * //
2480  ** // OUTPUT: storage_losses_out | OEO_00050019:energy amount value
2481  * // ### storage_losses_out
2482  * // Title: Storage hourly losses
2483  parameter storage_losses_out(timeModel,accNodesModel,accYears,techs,commodity) "Storage losses per time step" ;
2484  * //
2485  ** // OUTPUT: storage_losses_annual | OEO_00050019:energy amount value
2486  * // ### storage_losses_annual
2487  * // Title: Storage annual losses
2488  parameter storage_losses_annual(accNodesModel,accYears,techs,commodity,balanceType) "Aggregated storage losses" ;
2489  * //
2490  ** // OUTPUT: commodity_balance | OEO_00000350:quantity value
2491  * // ### commodity_balance
2492  * // Title: Hourly commodity balance
2493  parameter commodity_balance(timeModel,accNodesModel,accYears,techs,commodity) "Commodity balances per model hour" ;
2494  parameter commodity_balance_ext(timeModel,accNodesModel,nodesModel,accYears,years,techs,vintage,commodity);
2495  * //
2496  ** // OUTPUT: commodity_balance_annual | OEO_00000350:quantity value
2497  * // ### commodity_balance_annual
2498  * // Title: Annual commodity balance
2499  parameter commodity_balance_annual(accNodesModel,accYears,techs,commodity,balanceType) "Aggregated commodity balances" ;
2500  * //
2501  ** // OUTPUT: marginals_sourcesink_profile | OEO_00040008:marginal cost
2502  * // ### marginals_sourcesink_profile
2503  * // Title: Source-sink marginals
2504  parameter marginals_sourcesink_profile(timeModel,nodesModel,years,techs,commodity) "Source and sink flow marginal values" ;
2505  * //
2506  ** // OUTPUT: marginals_balance | OEO_00040008:marginal cost
2507  * // ### marginals_balance
2508  * // Title: Nodel balance marginals
2509  parameter marginals_balance(timeModel,nodesModel,years,commodity) "Nodal balance marginal values" ;
2510  * //
2511  ** // OUTPUT: marginals_sourcesink_sum | OEO_00040008:marginal cost
2512  * // ### marginals_sourcesink_sum
2513  * // Title: Source-sink annual marginals
2514  parameter marginals_sourcesink_sum(nodesModel,years,techs,commodity) "Annual source and sink flow marginal values" ;
2515  * //
2516  ** // OUTPUT: marginals_indicator_bounds | OEO_00040008:marginal cost
2517  * // ### marginals_indicator_bounds
2518  * // Title: Indicator bounds marginals
2519  parameter marginals_indicator_bounds(accNodesModel,accYears,indicator) "Accounting indicator marginals" ;
2520  * //
2521  * // ## REMix-AMIRIS interface output
2522  * //
2523  ** // OUTPUT: r2a_annuity_cost_converter | OEO_00040009:cost
2524  * // ### r2a_annuity_cost_converter
2525  * // Title: Converter annuity cost
2526  parameter r2a_annuity_cost_converter(indicator,accNodesModel,accYears,techs,vintage,commodity) "Annuity cost of converters" ;
2527  * //
2528  ** // OUTPUT: r2a_spec_cost_converter | OEO_00040009:cost
2529  * // ### r2a_spec_cost_converter
2530  * // Title: Converter specific cost
2531  parameter r2a_spec_cost_converter(indicator,accNodesModel,accYears,techs,vintage,commodity) "Specific cost of converters" ;
2532  * //
2533  ** // OUTPUT: r2a_spec_cost_fuel | OEO_00040009:cost
2534  * // ### r2a_spec_cost_fuel
2535  * // Title: Commodity specific cost
2536  parameter r2a_spec_cost_fuel(indicator,accNodesModel,accYears,techs,commodity) "Specific cost of commodities, used particularly for fuels" ;
2537  * //
2538  ** // OUTPUT: r2a_spec_cost_indicator | OEO_00040009:cost
2539  * // ### r2a_spec_cost_indicator
2540  * // Title: Indicator specific cost
2541  parameter r2a_spec_cost_indicator(indicator,indicator_a,accNodesModel,accYears) "Specific indicator cost" ;
2542  * //
2543  ** // OUTPUT: r2a_converter_efficiencies | OEO_00140050:efficiency value
2544  * // ### r2a_converter_efficiencies
2545  * // Title: Indicator specific cost
2546  parameter r2a_converter_efficiencies(techs,vintage,activity,commodity,commodity_a) "Converter-specific efficiency" ;
2547  * //
2548  ** // OUTPUT: r2a_converter_avail_factor | OEO_00000350:quantity value
2549  * // ### r2a_converter_avail_factor
2550  * // Title: Converter availability factor
2551  parameter r2a_converter_avail_factor(accNodesModel,accYears,techs,vintage) "Availability factor of converter technologies" ;
2552  parameter r2a_converter_avail_profile(timeModel,accNodesModel,accYears,techs,commodity,profileType) "Availability of converter technologies" ;
2553  parameter r2a_converter_avail_profile_ext(timeModel,accNodesModel,nodesModel,accYears,years,techs,vintage,commodity,profileType);
2554  * //
2555  ** // OUTPUT: r2a_storage_e2p | OEO_00000350:quantity value
2556  * // ### r2a_storage_e2p
2557  * // Title: E2P Storage
2558  parameter r2a_storage_e2p(accNodesModel,accYears,techs,vintage,commodity,capType) "Energy-to-power ratio" ;
2559  * //
2560  ** // OUTPUT: r2a_storage_selfdischarge | OEO_00000350:quantity value
2561  * // ### r2a_storage_selfdischarge
2562  * // Title: Storage self discharge rates
2563  parameter r2a_storage_selfdischarge(accNodesModel,accYears,techs,vintage,commodity);
2564   
INCLUDE    C:\Local\REMix\framework\remix\framework\model\source\loadgdx.gms
2568  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
2569  * SPDX-License-Identifier: BSD-3-Clause
2570   
2571  * ==== global settings ====
2573   
2575   
INCLUDE    C:\Local\REMix\framework\remix\framework\model\source\core\converter.gms
2577  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
2578  * SPDX-License-Identifier: BSD-3-Clause
2579   
2580  * // # core_converter
2581  * // The equations in this file describe the converters in the model.
2582   
2583  * // ## Advanced features
2584  * //
2585  * // You can find a more detailed explanation of the %curly_open%ref%curly_close%`MIP features <explanations_mip_label>`.
2586  ** // There is also a more detailed explanation on the modeling of outages at the %curly_open%ref%curly_close%`resilience section <explanations_resilience_label>`.
2587  * //
2588  * // In the following table you can see which modifications you have to make to your data to use the different features.
2589  * //
2590  * // | Feature | Modification |
2591  * // | ------ | ------ |
2592  * // | MIP expansion | The converter_tech_Parameter "mipUnits" has to be set to 1 in converter_techParam.dat for the technologies and years where descrete expansion is wanted |
2593  * // | Minimum up/downtime | The converter_tech_Parameters "minUptime" and/or "minDowntime" need to be set to the according amount of minimum time steps.Furthermore, the converter_tech_Parameter "mipDispatch" has to be set to 1 in converter_techParam.dat
2594  * // for the technologies and years where a minimum up- or downtime should be applied so that the units can be shut down. "mipUnits" will automatically be set to 1 |
2595  * // | Partial load | The converter_tech_Parameter "mipDispatch" has to be set to 1 in converter_techParam.dat for the technologies and years where you want to make use of the partial load feature. You also have to set a value to
2596  * // the converter_coefficient_parameters "minLoad" and/or "maxLoad" for the according technologies, vintages, activities and commodities. You can then for example set different "coefficient" values for each activity in converter_coefficient.dat |
2597  ** // | Outages | You have to include the converter_outageProfile.dat-file and while executing the model you have to set --method=resilience |
2598   
2599  * // ## %curly_open%ref%curly_close%`sets <remix_model_sets_label>`
2600  * //
2601  * // ### set_converter_techs.dat
2602  * // In this file all converter technologies are listed that can be used within your model.
2603  * //
2604  * // ### set_activities.dat
2605  * // All modes with which the converter technologies can be operated need to be added here.
2606  * // Examples: Charge (for the charging mode of a storage), Powergen (for the mode in which a converter produces electricity), Curtailment (for the mode in which a renewable power plant is shut down), …
2607  * // If you would like to use the partial load feature, all activity modes that should be available for this feature need to be defined here as well.
2608  * //
2609  * // ### set_commodities.dat
2610  * // In this file all commodities are listed that can be used and converted by the converter technologies.
2611  * // Examples: Electricity, Coal, Biomass, Hydrogen, …
2612   
2613  * // ## Variables
2614  * // {special_table_converter_variables}
8654   
8655  * ==== loading units from gdx file ====
8656   
8657  * Load units from gdx file
8659   
8660  * ==== calculation of mappings ====
8661   
8662  * Technologies with a lifeTime > 0 are available
8663  set converter_availTech(nodesModel,years,converter_techs,vintage);
8664  converter_availTech(nodesModel,years,converter_techs,vintage)
8665      $(vintage.val = smax(vintage_a$(vintage_a.val <= years.val
8666          and converter_techParam(converter_techs,vintage_a,"lifeTime") > 0), vintage_a.val)) = yes;
8667   
8668  * Technologies to optimize become unavailable if they have an unitsUpperLimit of 0
8669  converter_availTech(nodesModel,years,converter_techs,vintage)
8670      $(yearsToCalc(years) and converter_capacityParam(nodesModel,years,converter_techs,"unitsUpperLimit") = 0 ) = no;
8671   
8672  * Technologies already built become unavailable if they have an unitsBuild of 0
8673  converter_availTech(nodesModel,years,converter_techs,vintage)
8674      $( ( not yearsToCalc(years)) and converter_capacityParam(nodesModel,years,converter_techs,"unitsBuild") = 0 ) = no;
8675   
8676  * Used technologies are available technologies over their technical lifeTime
8677  set converter_usedTech(nodesModel,years,converter_techs,vintage);
8678  converter_usedTech(nodesModel,years,converter_techs,vintage)
8679      $(vintage.val <= years.val
8680          and years.val < smax(years_a$converter_availTech(nodesModel,years_a,converter_techs,vintage),
8681                                  years_a.val + converter_techParam(converter_techs,vintage,"lifeTime"))
8682          ) = yes;
8683   
8684  * Technologies have to be decomissioned in the interval of first avail + lifetime to last avail + lifetime
8685  set converter_decomTech(nodesModel,years,converter_techs,vintage);
8686  converter_decomTech(nodesModel,years,converter_techs,vintage)
8687    $(sum(years_a$converter_usedTech(nodesModel,years_a,converter_techs,vintage), 1)
8688      and sum(yearsToCalc
8689        $(sameas(years, yearsToCalc)
8690          and yearsToCalc.val >= smin(years_a$converter_availTech(nodesModel,years_a,converter_techs,vintage), years_a.val) + converter_techParam(converter_techs,vintage,"lifeTime")
8691          and yearsToCalc.val <= smax(years_a$converter_availTech(nodesModel,years_a,converter_techs,vintage), years_a.val) + converter_techParam(converter_techs,vintage,"lifeTime")), 1))
8692    = yes;
8693   
8694  * Extend the decom frame to the year after the last year of usedTech
8695  converter_decomTech(nodesModel,yearsToCalc,converter_techs,vintage)
8696    $(converter_usedTech(nodesModel,yearsToCalc-1,converter_techs,vintage)
8697      and converter_decomTech(nodesModel,yearsToCalc-1,converter_techs,vintage))
8698    = yes;
8699   
8700  * Mapping for used activities and commodities
8701  set converter_usedActCom(converter_techs,vintage,activity,commodity);
8702  option converter_usedActCom < converter_coefficient;
8703   
8704  set converter_usedAct(converter_techs,vintage,activity);
8705  option converter_usedAct < converter_usedActCom;
8706   
8707  set converter_usedCom(converter_techs,vintage,commodity);
8708  option converter_usedCom < converter_usedActCom;
8709   
8710  set converter_usedTechAct(nodesModel,years,converter_techs,vintage,activity);
8711  converter_usedTechAct(nodesModel,years,converter_techs,vintage,activity)
8712      $(converter_usedTech(nodesModel,years,converter_techs,vintage)
8713          and converter_usedAct(converter_techs,vintage,activity))
8714      = yes;
8715   
8716  set converter_useRampPos(nodesModel,years,converter_techs,vintage);
8717  converter_useRampPos(nodesModelToCalc,yearsToCalc,converter_techs,vintage)
8718    $(sum(indicator$accounting_converterStartup(indicator,nodesModelToCalc,converter_techs,vintage,"perRamp"), 1)
8719      or sum(indicator$accounting_converterStartup(indicator,nodesModelToCalc,converter_techs,vintage,"perRampPos"), 1))
8720    = 1;
8721   
8722  set converter_useRampNeg(nodesModel,years,converter_techs,vintage);
8723  converter_useRampNeg(nodesModelToCalc,yearsToCalc,converter_techs,vintage)
8724    $(sum(indicator$accounting_converterStartup(indicator,nodesModelToCalc,converter_techs,vintage,"perRamp"), 1)
8725      or sum(indicator$accounting_converterStartup(indicator,nodesModelToCalc,converter_techs,vintage,"perRampNeg"), 1))
8726    = 1;
8727   
8728   
8729  * ==== aggregation of profiles ====
8730   
8731  * derive upper and lower profiles then aggregate
8732  set converter_activity_hasProfileIn(nodesData,years,converter_techs,pc_converter_activityProfile);
8733  option converter_activity_hasProfileIn < converter_activityProfileIn;
8734   
8735  set converter_activity_hasProfile(nodesModel,years,converter_techs,pc_converter_activityProfile);
8736  converter_activity_hasProfile(nodesModelToCalc,yearsToCalc,converter_techs,pc_converter_activityProfile)
8737      = sum(nodesData$aggregateNodesModel(nodesData,nodesModelToCalc),
8738              converter_activity_hasProfileIn(nodesData,yearsToCalc,converter_techs,pc_converter_activityProfile));
8739   
8740  set converter_coefficient_hasProfileIn(nodesData,years,converter_techs,vintage,activity,commodity);
8741  option converter_coefficient_hasProfileIn < converter_coefficientProfileIn;
8742   
8743  set converter_coefficient_hasProfile(nodesModel,years,converter_techs,vintage,activity,commodity);
8744  converter_coefficient_hasProfile(nodesModelToCalc,yearsToCalc,converter_techs,vintage,activity,commodity)
8745      = sum(nodesData$aggregateNodesModel(nodesData,nodesModelToCalc),
8746              converter_coefficient_hasProfileIn(nodesData,yearsToCalc,converter_techs,vintage,activity,commodity));
8747   
8748  * aagregate time dimension
8749  parameter converter_activityProfileIn_aggTime(timeModel,nodesData,yearsToCalc,converter_techs,pc_converter_activityProfile);
8750  converter_activityProfileIn_aggTime(timeModelToCalc,nodesData,yearsToCalc,converter_techs,pc_converter_activityProfile)
8751    $converter_activity_hasProfileIn(nodesData,yearsToCalc,converter_techs,pc_converter_activityProfile)
8752    = sum(timeData$timeMapping(timeData,timeModelToCalc),
8753            converter_activityProfileIn(timeData,nodesData,yearsToCalc,converter_techs,pc_converter_activityProfile)
8754            / timeLength(timeModelToCalc));
8755  option clear = converter_activityProfileIn;
8756   
8757  * weighted average for a real sum of units upper limits, plain average if one region has an upper limit of inf
8758  parameter converter_activityProfile(timeModel,nodesModel,years,converter_techs,vintage,pc_converter_activityProfile);
8759  converter_activityProfile(timeModelToCalc,converter_usedTech(nodesModelToCalc,yearsToCalc,converter_techs,vintage),"upper")
8760      = converter_techParam(converter_techs,vintage,"activityUpperLimit");
8761  converter_activityProfile(timeModelToCalc,converter_usedTech(nodesModelToCalc,yearsToCalc,converter_techs,vintage),"lower")
8762      = converter_techParam(converter_techs,vintage,"activityLowerLimit");
8763   
8764   
8765  set converter_finiteUnitLimit(nodesModelToCalc,yearsToCalc,converter_techs);
8766  converter_finiteUnitLimit(nodesModelToCalc,yearsToCalc,converter_techs)
8767      = sum(nodesData$aggregateNodesModel(nodesData,nodesModelToCalc), converter_capacityParamIn(nodesData,yearsToCalc,converter_techs,"unitsUpperLimit")) > 0
8768          and sum(nodesData$aggregateNodesModel(nodesData,nodesModelToCalc), converter_capacityParamIn(nodesData,yearsToCalc,converter_techs,"unitsUpperLimit")) < inf;
8769   
8770  set converter_infiniteUnitLimit(nodesModelToCalc,yearsToCalc,converter_techs);
8771  converter_infiniteUnitLimit(nodesModelToCalc,yearsToCalc,converter_techs)
8772      = sum(nodesData$aggregateNodesModel(nodesData,nodesModelToCalc), converter_capacityParamIn(nodesData,yearsToCalc,converter_techs,"unitsUpperLimit")) = inf;
8773   
8774  converter_activityProfile(timeModelToCalc,converter_usedTech(nodesModelToCalc,yearsToCalc,converter_techs,vintage),pc_converter_activityProfile)
8775      $(converter_activity_hasProfile(nodesModelToCalc,yearsToCalc,converter_techs,pc_converter_activityProfile)
8776          and converter_finiteUnitLimit(nodesModelToCalc,yearsToCalc,converter_techs))
8777      = sum(nodesData$(aggregateNodesModel(nodesData,nodesModelToCalc)
8778                  and converter_capacityParamIn(nodesData,yearsToCalc,converter_techs,"unitsUpperLimit") < inf ),
8779                converter_activityProfileIn_aggTime(timeModelToCalc,nodesData,yearsToCalc,converter_techs,pc_converter_activityProfile)
8780                * converter_capacityParamIn(nodesData,yearsToCalc,converter_techs,"unitsUpperLimit"))
8781      / sum(nodesData$aggregateNodesModel(nodesData,nodesModelToCalc),
8782              converter_capacityParamIn(nodesData,yearsToCalc,converter_techs,"unitsUpperLimit"));
8783   
8784  converter_activityProfile(timeModelToCalc,converter_usedTech(nodesModelToCalc,yearsToCalc,converter_techs,vintage),pc_converter_activityProfile)
8785      $(converter_activity_hasProfile(nodesModelToCalc,yearsToCalc,converter_techs,pc_converter_activityProfile)
8786          and converter_infiniteUnitLimit(nodesModelToCalc,yearsToCalc,converter_techs))
8787      = sum(nodesData$(aggregateNodesModel(nodesData,nodesModelToCalc)
8788                  and converter_capacityParamIn(nodesData,yearsToCalc,converter_techs,"unitsUpperLimit") = inf),
8789                converter_activityProfileIn_aggTime(timeModelToCalc,nodesData,yearsToCalc,converter_techs,pc_converter_activityProfile)
8790                * converter_capacityParamIn(nodesData,yearsToCalc,converter_techs,"unitsUpperLimit"))
8791      / sum(nodesData$(aggregateNodesModel(nodesData,nodesModelToCalc)
8792                      and converter_capacityParamIn(nodesData,yearsToCalc,converter_techs,"unitsUpperLimit") = inf ),
8793              1);
8794  option clear = converter_activityProfileIn_aggTime;
8795   
8796  * for fixed profiles overwrite upper and lower profile
8797  converter_activityProfile(timeModelToCalc,nodesModelToCalc,yearsToCalc,converter_techs,vintage,"lower")
8798      $converter_activity_hasProfile(nodesModelToCalc,yearsToCalc,converter_techs,"fixed")
8799      = converter_activityProfile(timeModelToCalc,nodesModelToCalc,yearsToCalc,converter_techs,vintage,"fixed");
8800   
8801  converter_activityProfile(timeModelToCalc,nodesModelToCalc,yearsToCalc,converter_techs,vintage,"upper")
8802      $converter_activity_hasProfile(nodesModelToCalc,yearsToCalc,converter_techs,"fixed")
8803      = converter_activityProfile(timeModelToCalc,nodesModelToCalc,yearsToCalc,converter_techs,vintage,"fixed");
8804   
8806   
8807  * weighted average for a real sum of units upper limits, plain average if one region has an upper limit of inf
8808  parameter converter_coefficientProfile(timeModel,nodesModel,years,converter_techs,vintage,activity,commodity);
8809  converter_coefficientProfile(timeModelToCalc,converter_usedTechAct(nodesModelToCalc,yearsToCalc,converter_techs,vintage,activity),commodity)
8810      = converter_coefficient(converter_techs,vintage,activity,commodity,"coefficient");
8811   
8812  converter_coefficientProfile(timeModelToCalc,converter_usedTechAct(nodesModelToCalc,yearsToCalc,converter_techs,vintage,activity),commodity)
8813      $( converter_coefficient_hasProfile(nodesModelToCalc,yearsToCalc,converter_techs,vintage,activity,commodity)
8814          and converter_finiteUnitLimit(nodesModelToCalc,yearsToCalc,converter_techs) )
8815      = sum(nodesData$aggregateNodesModel(nodesData,nodesModelToCalc),
8816            sum(timeData$timeMapping(timeData,timeModelToCalc),
8817                    converter_coefficientProfileIn(timeData,nodesData,yearsToCalc,converter_techs,vintage,activity,commodity))
8818                / timeLength(timeModelToCalc)
8819              * converter_capacityParamIn(nodesData,yearsToCalc,converter_techs,"unitsUpperLimit") )
8820      / sum(nodesData$aggregateNodesModel(nodesData,nodesModelToCalc),
8821              converter_capacityParamIn(nodesData,yearsToCalc,converter_techs,"unitsUpperLimit"));
8822   
8823  converter_coefficientProfile(timeModelToCalc,converter_usedTechAct(nodesModelToCalc,yearsToCalc,converter_techs,vintage,activity),commodity)
8824      $( converter_coefficient_hasProfile(nodesModelToCalc,yearsToCalc,converter_techs,vintage,activity,commodity)
8825          and converter_infiniteUnitLimit(nodesModelToCalc,yearsToCalc,converter_techs))
8826      = sum(nodesData$(aggregateNodesModel(nodesData,nodesModelToCalc)
8827                      and converter_capacityParamIn(nodesData,yearsToCalc,converter_techs,"unitsUpperLimit") = inf ),
8828            sum(timeData$timeMapping(timeData,timeModelToCalc),
8829                    converter_coefficientProfileIn(timeData,nodesData,yearsToCalc,converter_techs,vintage,activity,commodity))
8830                / timeLength(timeModelToCalc))
8831      / sum(nodesData$(aggregateNodesModel(nodesData,nodesModelToCalc)
8832                      and converter_capacityParamIn(nodesData,yearsToCalc,converter_techs,"unitsUpperLimit") = inf ), 1);
8833   
8835   
8836  * ==== prepare partial load behavior parameters ====
8837   
8838  * set disabled max load requirements to 1 to avoid excessive logical expressions later on
8839  alias(commodity, com);
8840  converter_coefficient(converter_techs,vintage,activity,commodity,"maxLoad")
8841      $((converter_coefficient(converter_techs,vintage,activity,commodity,"maxLoad") = 0)
8842        and converter_usedAct(converter_techs,vintage,activity))
8843      = 1;
8844   
8845  * indicate that at least one activity of a technology makes use of partial load behavior
8846  set converter_hasMaxLoad(converter_techs,vintage);
8847  converter_hasMaxLoad(converter_techs,vintage)
8848    = smin((activity,commodity)$converter_usedAct(converter_techs,vintage,activity),
8849              converter_coefficient(converter_techs,vintage,activity,commodity,"maxLoad")) < 1;
8850   
8851  set converter_hasMinLoad(converter_techs,vintage);
8852  converter_hasMinLoad(converter_techs,vintage)
8853    = smax((activity,commodity)$converter_usedAct(converter_techs,vintage,activity),
8854              converter_coefficient(converter_techs,vintage,activity,commodity,"minLoad")) > 0;
8855   
8856  set converter_hasConstantFluxInActivity(converter_techs,vintage);
8857  converter_hasConstantFluxInActivity(converter_techs,vintage)
8858    = sum((activity,commodity)$converter_usedAct(converter_techs,vintage,activity),
8859                          abs(converter_coefficient(converter_techs,vintage,activity,commodity,"constant"))) > 0;
8860   
8861  * setting up a requirements parameter to avoid having to cycle through commodities in equations
8862  set pc_converter_activityRequirements
8863      /
8864      minLoad             "Lower profile for converter activity"
8865      maxLoad             "Upper profile for converter activity"
8866      /;
8867  parameter converter_activityRequirements(converter_techs,vintage,activity,pc_converter_activityRequirements);
8868  converter_activityRequirements(converter_techs,vintage,activity,"minLoad")
8869    = smax(commodity, converter_coefficient(converter_techs,vintage,activity,commodity,"minLoad"));
8870  converter_activityRequirements(converter_techs,vintage,activity,"maxLoad")
8871    = smin(commodity, converter_coefficient(converter_techs,vintage,activity,commodity,"maxLoad"));
8872   
8873  * ==== activate MIP units for MIP dispatch or partial load technologies ====
8874   
8875  set converter_hasMinUptime(converter_techs,vintage);
8876  converter_hasMinUptime(converter_techs,vintage)
8877    $(converter_techParam(converter_techs,vintage,"minUptime")
8878      and converter_techParam(converter_techs,vintage,"mipDispatch"))
8879    = yes;
8880   
8881  set converter_hasMinDowntime(converter_techs,vintage);
8882  converter_hasMinDowntime(converter_techs,vintage)
8883    $(converter_techParam(converter_techs,vintage,"minDowntime")
8884      and converter_techParam(converter_techs,vintage,"mipDispatch"))
8885    = yes;
8886   
8887  * require integer unit counts if online state is to be tracked
8888  converter_techParam(converter_techs,vintage,"mipUnits")
8889      $(converter_techParam(converter_techs,vintage,"mipDispatch")
8890        or converter_hasMinLoad(converter_techs, vintage)
8891        or converter_hasMaxLoad(converter_techs, vintage)
8892        or converter_hasConstantFluxInActivity(converter_techs,vintage))
8893      = 1;
8894   
8895  * ==== floor mip converter units to integer values ====
8896  converter_capacityParam(nodesModelToCalc,yearsToCalc,converter_techs,"unitsLowerLimit")
8897      $sum(vintage, converter_techParam(converter_techs,vintage,"mipUnits"))
8898      = floor(converter_capacityParam(nodesModelToCalc,yearsToCalc,converter_techs,"unitsLowerLimit"));
8899  converter_capacityParam(nodesModelToCalc,yearsToCalc,converter_techs,"unitsUpperLimit")
8900      $sum(vintage, converter_techParam(converter_techs,vintage,"mipUnits"))
8901      = ceil(converter_capacityParam(nodesModelToCalc,yearsToCalc,converter_techs,"unitsUpperLimit"));
8902   
8903  * ==== scalars and sets for minUptime and minDowntime ====
8904   
8905  scalar converter_maxUptimeReq;
8906  converter_maxUptimeReq = smax((converter_techs,vintage), converter_techParam(converter_techs,vintage,"minUptime"));
8907  set uptimeSearchRange(timeModelToCalc);
8908  uptimeSearchRange(timeModelToCalc) = ord(timeModelToCalc) <= converter_maxUptimeReq;
8909   
8910  scalar converter_maxDowntimeReq;
8911  converter_maxDowntimeReq = smax((converter_techs,vintage), converter_techParam(converter_techs,vintage,"minDowntime"));
8912  set downtimeSearchRange(timeModelToCalc);
8913  downtimeSearchRange(timeModelToCalc) = ord(timeModelToCalc) <= converter_maxDowntimeReq;
8914   
8915  * ==== definition of variables ====
8916   
8917  * Initialise variables for unitsBuild
8918  converter_unitsBuild.l(nodesModel,years,converter_techs,vintage)
8919      $converter_availTech(nodesModel,years,converter_techs,vintage)
8920      = converter_capacityParam(nodesModel,years,converter_techs,"unitsBuild");
8921  converter_unitsBuild.lo(nodesModel,yearsToCalc,converter_techs,vintage)
8922      $converter_availTech(nodesModel,yearsToCalc,converter_techs,vintage)
8923      = converter_unitsBuild.l(nodesModel,yearsToCalc,converter_techs,vintage);
8924  converter_unitsBuild.fx(nodesModel,years,converter_techs,vintage)
8925      $converter_capacityParam(nodesModel,years,converter_techs,"noExpansion")
8926      = converter_unitsBuild.l(nodesModel,years,converter_techs,vintage);
8927   
8928  * Initialise variables for unitsDecom
8929  converter_unitsDecom.l(nodesModel,years,converter_techs,vintage)
8930    $(converter_decomTech(nodesModel,years,converter_techs,vintage)
8931      and years.val < sum(yearsToCalc$(ord(yearsToCalc) = 1), yearsToCalc.val))
8932    = sum((years_a,years_aa)$(sameas(years-1, years_aa)
8933                        and years_a.val > years_aa.val - converter_techParam(converter_techs,vintage,'lifeTime')
8934                        and years_a.val <= years.val - converter_techParam(converter_techs,vintage,'lifeTime')
8935                        and converter_availTech(nodesModel,years_a,converter_techs,vintage)),
8936          converter_unitsBuild.l(nodesModel,years_a,converter_techs,vintage));
8937   
8938  converter_unitsDecom.l(nodesModel,yearsToCalc,converter_techs,vintage)
8939    $converter_decomTech(nodesModel,yearsToCalc,converter_techs,vintage)
8940    = sum(years$
8941          (years.val < sum(yearsToCalc_a$(ord(yearsToCalc_a) = 1), yearsToCalc_a.val)
8942            and converter_availTech(nodesModel,years,converter_techs,vintage)
8943            and years.val > sum(years_a$sameas(years_a, yearsToCalc-1), years_a.val) - converter_techParam(converter_techs,vintage,'lifeTime')
8944            and years.val <= yearsToCalc.val - converter_techParam(converter_techs,vintage,'lifeTime')),
8945        converter_unitsBuild.l(nodesModel,years,converter_techs,vintage))
8946      + sum(yearsToCalc_a$
8947          (yearsToCalc_a.val < sum(yearsToCalc_aa$(ord(yearsToCalc_aa) > 1), yearsToCalc_a.val)
8948            and converter_availTech(nodesModel,yearsToCalc_a,converter_techs,vintage)
8949            and yearsToCalc_a.val > sum(years_a$sameas(years_a, yearsToCalc-1), years_a.val) - converter_techParam(converter_techs,vintage,'lifeTime')
8950            and yearsToCalc_a.val <= yearsToCalc.val - converter_techParam(converter_techs,vintage,'lifeTime')),
8951        converter_unitsBuild.l(nodesModel,yearsToCalc_a,converter_techs,vintage));
8952        ;
8953   
8954  converter_unitsDecom.lo(nodesModel,yearsToCalc,converter_techs,vintage)
8955      $(converter_usedTech(nodesModel,yearsToCalc,converter_techs,vintage)
8956          and not converter_techParam(converter_techs,vintage,"freeDecom"))
8957      = converter_unitsDecom.l(nodesModel,yearsToCalc,converter_techs,vintage)
8958   
8959  * Calculate planned unit expansion
8960  parameter converter_unitsPlanned(nodesModel,years,converter_techs,vintage);
8961  converter_unitsPlanned(nodesModel,years,converter_techs,vintage) = 0;
8962  loop(years,
8963    converter_unitsPlanned(nodesModel,years,converter_techs,vintage)
8964      =
8965      converter_unitsPlanned(nodesModel,years-1,converter_techs,vintage)
8966          $converter_usedTech(nodesModel,years-1,converter_techs,vintage)
8967      + converter_unitsBuild.l(nodesModel,years,converter_techs,vintage)
8968          $converter_availTech(nodesModel,years,converter_techs,vintage)
8969      - converter_unitsDecom.l(nodesModel,years,converter_techs,vintage)
8970          $converter_usedTech(nodesModel,years,converter_techs,vintage);
8971  );
8972   
8973  * Set initial state for planned units
8974  converter_unitsTotal.l(nodesModel,years,converter_techs,vintage)
8975    = converter_unitsPlanned(nodesModel,years,converter_techs,vintage)
8976   
8977  * Calculate if planned unit expansion is bounded by upper and lower limits
8978  set converter_unitBoundsFixed(nodesModel,years,converter_techs);
8979  converter_unitBoundsFixed(nodesModel,years,converter_techs)
8980    $(sum(vintage$converter_usedTech(nodesModel,years,converter_techs,vintage),
8981          converter_unitsPlanned(nodesModel,years,converter_techs,vintage))
8982      = converter_capacityParam(nodesModel,years,converter_techs,"unitsUpperLimit")
8983    and sum(vintage$converter_usedTech(nodesModel,years,converter_techs,vintage),
8984          converter_unitsPlanned(nodesModel,years,converter_techs,vintage))
8985      = converter_capacityParam(nodesModel,years,converter_techs,"unitsLowerLimit"))
8986    = yes;
8987   
8988  * Fix unitsBuild, unitsDecom, unitsTotal if levels are predetermined by upper and lower limits
8989  converter_unitsBuild.fx(nodesModel,years,converter_techs,vintage)
8990    $(converter_availTech(nodesModel,years,converter_techs,vintage)
8991      and converter_unitBoundsFixed(nodesModel,years,converter_techs))
8992    = converter_unitsBuild.l(nodesModel,years,converter_techs,vintage);
8993  converter_unitsDecom.fx(nodesModel,years,converter_techs,vintage)
8994    $(converter_usedTech(nodesModel,years,converter_techs,vintage)
8995      and converter_unitBoundsFixed(nodesModel,years,converter_techs))
8996    = converter_unitsDecom.l(nodesModel,years,converter_techs,vintage);
8997  converter_unitsTotal.fx(nodesModel,years,converter_techs,vintage)
8998    $(converter_usedTech(nodesModel,years,converter_techs,vintage)
8999      and converter_unitBoundsFixed(nodesModel,years,converter_techs))
9000    = converter_unitsTotal.l(nodesModel,years,converter_techs,vintage);
9001   
9002  converter_unitsOnline_MIP.up(timeModelToCalc,nodesModel,years,converter_techs,vintage)
9003      $(converter_usedTech(nodesModel,years,converter_techs,vintage)
9004        and converter_techParam(converter_techs,vintage,"mipDispatch") = 1)
9005      = converter_capacityParam(nodesModel,years,converter_techs,"unitsUpperLimit");
9006   
9007  converter_unitsTotal_MIP.up(nodesModel,years,converter_techs,vintage)
9008      $(converter_usedTech(nodesModel,years,converter_techs,vintage)
9009        and converter_techParam(converter_techs,vintage,"mipUnits") = 1)
9010      = converter_capacityParam(nodesModel,years,converter_techs,"unitsUpperLimit");
9011   
9012  converter_unitsUsingActivity_MIP.up(timeModelToCalc,nodesModel,years,converter_techs,vintage,activity)
9013      $(converter_usedTech(nodesModel,years,converter_techs,vintage)
9014        and (converter_hasMinLoad(converter_techs, vintage)
9015              or converter_hasMaxLoad(converter_techs, vintage)))
9016      = converter_capacityParam(nodesModel,years,converter_techs,"unitsUpperLimit");
9017   
9018  * Add parameter for fixing capacities during myopic runs
9019  parameter converter_unitsDelta(nodesModel,years,converter_techs);
9020   
9021  * ==== declaration of equations ====
9022   
9023  equations
9024    Eq_converter_unitsBalance(nodesModel,years,converter_techs,vintage
9025      ) "Ensures the units balance over the planning period."
9026    Eq_converter_unitsFixedDecom(nodesModel,years,converter_techs,vintage
9027      ) "Restricts the fixed decommissioning of units over the planning period."
9028    Eq_converter_unitsFreeDecom(nodesModel,years,converter_techs,vintage
9029      ) "Restricts the free decommissioning of units over the planning period."
9030    Eq_converter_unitsUpperLimit(nodesModel,years,converter_techs
9031      ) "Upper bound for the total number of units."
9032    Eq_converter_unitsLowerLimit(nodesModel,years,converter_techs
9033      ) "Lower bound for the total number of units."
9034    Eq_converter_unitsFixedLimit(nodesModel,years,converter_techs
9035      ) "Fixed bound for the total number of units."
9036    Eq_converter_unitsTotalMIP(nodesModel,years,converter_techs,vintage
9037      ) "Fixes the total number of units to the corresponding integer variable."
9038    Eq_converter_unitsOnlineMIP(timeModel,nodesModel,years,converter_techs,vintage
9039      ) "Fixes the number of online units to the corresponding integer variable."
9040   
9041    Eq_converter_activityLowerLimit(timeModel,nodesModel,years,converter_techs,vintage
9042      ) "Lower limit on the activity."
9043    Eq_converter_activityUpperLimit(timeModel,nodesModel,years,converter_techs,vintage
9044      ) "Upper limit on the activity."
9045   
9046    Eq_converter_activityFixedLimit(timeModel,nodesModel,years,converter_techs,vintage
9047      ) "Fixed limit on the activity."
9048    Eq_converter_rampPos(timeModel,nodesModel,years,converter_techs,vintage
9049      ) "Positive ramping of unit activity."
9050    Eq_converter_rampNeg(timeModel,nodesModel,years,converter_techs,vintage
9051      ) "Negative ramping of unit activity."
9052    Eq_converter_rampLimit(timeModel,nodesModel,years,converter_techs,vintage
9053      ) "Restrict ramping up of unit activity."
9054   
9055    Eq_converter_unitsOnline(timeModel,nodesModel,years,converter_techs,vintage
9056      ) "Set online units to total number of operational units."
9057    Eq_converter_unitsOnlineUC(timeModel,nodesModel,years,converter_techs,vintage
9058      ) "Allow shutting down units."
9059    Eq_converter_activityStartups(timeModel,nodesModel,years,converter_techs,vintage
9060      ) "Variable counting the number of unit startups."
9061    Eq_converter_activityShutdowns(timeModel,nodesModel,years,converter_techs,vintage
9062      ) "Variable tracking the number of unit shutdowns."
9063    Eq_converter_limitStartups(nodesModel,years,converter_techs,vintage
9064      ) "Limit the number of startup cycles a unit can perform."
9065    Eq_converter_minUptime(timeModel,nodesModel,years,converter_techs,vintage
9066      ) "Require recently started units to remain online for their respective minimum uptime."
9067    Eq_converter_minDowntime(timeModel,nodesModel,years,converter_techs,vintage
9068      ) "Require recently shut down units to remain offline for their respective minimum downtime."
9069    Eq_converter_activityUpperLimitDetailedPartLoadMinReq(timeModel,nodesModel,years,converter_techs,vintage,activity
9070      ) "Limit activity coefficients of activities with a given load requirement or stricter to the number of units in such modes."
9071    Eq_converter_activityUpperLimitDetailedPartLoadMaxReq(timeModel,nodesModel,years,converter_techs,vintage,activity
9072      ) "Limit activity coefficients of activities with a given load requirement or stricter to the number of units in such modes."
9073    Eq_converter_activityLowerLimitDetailedPartLoadMinReq(timeModel,nodesModel,years,converter_techs,vintage,activity
9074      ) "Enforce sufficient activity coefficients of activities to justify all active modes."
9075    Eq_converter_noOnlineIdle(timeModel,nodesModel,years,converter_techs,vintage
9076      ) "Prevent the circumvention of requirements by keeping units online without using any modes."
9077    Eq_converter_noOnlineIdleDetailedPartLoad(timeModel,nodesModel,years,converter_techs,vintage
9078      ) "Prevent the circumvention of requirements by keeping units online without using any modes. Allow more than one mode activation per unit."
9079    Eq_converter_activityUpperLimitPartLoad(timeModel,nodesModel,years,converter_techs,vintage,activity
9080      ) "Limit usage of an activity to corresponding units."
9081    Eq_converter_activityLowerLimitPartLoad(timeModel,nodesModel,years,converter_techs,vintage,activity
9082      ) "Limit usage of an activity to corresponding units."
9083    Eq_converter_activityModeLimit(timeModel,nodesModel,years,converter_techs,vintage,activity
9084      ) "Limit the number of units in one particular mode to the number of operational units."
9085    ;
9086   
9087  * ==== equation definition ====
9088  * // ## Equations
9089  * // ### Converter Units Balance
9090  * // Ensures that the total units are consistent with the built and decommissioned units.
9091  * // {Eq_converter_unitsBalance}
9092  Eq_converter_unitsBalance(nodesModelSel,yearsSel,converter_techs,vintage)
9093      $((converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
9094            or sum(years$sameas(years,yearsSel), converter_usedTech(nodesModelSel,years-1,converter_techs,vintage)))
9095          and not converter_unitBoundsFixed(nodesModelSel,yearsSel,converter_techs))
9096      ..
9097      converter_unitsTotal(nodesModelSel,yearsSel,converter_techs,vintage)
9098      =e=
9099      sum(yearsToCalc$(ord(yearsToCalc) = 1 and sameas(yearsToCalc, yearsSel)),
9100        sum(years$sameas(years, yearsToCalc),
9101          converter_unitsTotal(nodesModelSel,years-1,converter_techs,vintage)
9102            $converter_usedTech(nodesModelSel,years-1,converter_techs,vintage)))
9103      + sum((yearsToCalc)$(ord(yearsToCalc) > 1 and sameas(yearsToCalc, yearsSel)),
9104        converter_unitsTotal(nodesModelSel,yearsToCalc-1,converter_techs,vintage)
9105          $converter_usedTech(nodesModelSel,yearsToCalc-1,converter_techs,vintage))
9106      + converter_unitsBuild(nodesModelSel,yearsSel,converter_techs,vintage)
9107          $converter_availTech(nodesModelSel,yearsSel,converter_techs,vintage)
9108      - converter_unitsDecom(nodesModelSel,yearsSel,converter_techs,vintage)
9109          $converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage);
9110   
9111  * // ### Converter Units Fixed Decommission
9112  * // Restricts the fixed decommissioning of units over the planning period.
9113  * // {Eq_converter_unitsFixedDecom}
9114  Eq_converter_unitsFixedDecom(nodesModelSel,yearsSel,converter_techs,vintage)
9115      $(converter_decomTech(nodesModelSel,yearsSel,converter_techs,vintage)
9116          and not converter_techParam(converter_techs,vintage,"freeDecom") = 1
9117          and not converter_unitBoundsFixed(nodesModelSel,yearsSel,converter_techs))
9118      ..
9119      converter_unitsDecom(nodesModelSel,yearsSel,converter_techs,vintage)
9120      =e=
9121      sum(years$
9122          (converter_availTech(nodesModelSel,years,converter_techs,vintage)
9123            and years.val > sum(yearsToCalc$sameas(yearsToCalc+1, yearsSel), yearsToCalc.val) - converter_techParam(converter_techs,vintage,'lifeTime')
9124            and years.val <= yearsSel.val - converter_techParam(converter_techs,vintage,'lifeTime')),
9125        converter_unitsBuild(nodesModelSel,years,converter_techs,vintage));
9126   
9127  * // ### Converter Units Free Decommission
9128  * // Restricts the free decommissioning of units over the planning period.
9129  * // {Eq_converter_unitsFreeDecom}
9130  Eq_converter_unitsFreeDecom(nodesModelSel,yearsSel,converter_techs,vintage)
9131      $((converter_decomTech(nodesModelSel,yearsSel,converter_techs,vintage)
9132          or converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage))
9133          and converter_techParam(converter_techs,vintage,"freeDecom") = 1)
9134      ..
9135      sum(years$
9136            ((converter_decomTech(nodesModelSel,years,converter_techs,vintage)
9137              or converter_usedTech(nodesModelSel,years,converter_techs,vintage))
9138              and years.val < sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)),
9139          converter_unitsDecom(nodesModelSel,years,converter_techs,vintage))
9140      + sum(yearsToCalc$
9141            ((converter_decomTech(nodesModelSel,yearsToCalc,converter_techs,vintage)
9142              or converter_usedTech(nodesModelSel,yearsToCalc,converter_techs,vintage))
9143              and yearsToCalc.val >= sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
9144              and yearsToCalc.val <= yearsSel.val),
9145          converter_unitsDecom(nodesModelSel,yearsToCalc,converter_techs,vintage))
9146      =g=
9147      sum(years$
9148            (converter_availTech(nodesModelSel,years,converter_techs,vintage)
9149              and years.val < sum(yearsToCalc$(ord(yearsToCalc)=1), yearsToCalc.val) - converter_techParam(converter_techs,vintage,'lifeTime')),
9150          converter_unitsBuild(nodesModelSel,years,converter_techs,vintage))
9151      + sum(yearsToCalc$
9152            (converter_availTech(nodesModelSel,yearsToCalc,converter_techs,vintage)
9153              and yearsToCalc.val >= sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
9154              and yearsToCalc.val <= yearsSel.val - converter_techParam(converter_techs,vintage,'lifeTime')),
9155          converter_unitsBuild(nodesModelSel,yearsToCalc,converter_techs,vintage));
9156   
9157  * // ### Converter Units Upper Limit
9158  * // Upper bound for the total number of units.
9159  * // {Eq_converter_unitsUpperLimit}
9160  Eq_converter_unitsUpperLimit(nodesModelSel,yearsSel,converter_techs)
9161      $(converter_capacityParam(nodesModelSel,yearsSel,converter_techs,'unitsUpperLimit') >= 0
9162          and converter_capacityParam(nodesModelSel,yearsSel,converter_techs,'unitsUpperLimit') < +inf
9163          and converter_capacityParam(nodesModelSel,yearsSel,converter_techs,'unitsUpperLimit')
9164              <> converter_capacityParam(nodesModelSel,yearsSel,converter_techs,'unitsLowerLimit'))
9165      ..
9166      sum(vintage$converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage),
9167          converter_unitsTotal(nodesModelSel,yearsSel,converter_techs,vintage))
9168      =l=
9169      converter_capacityParam(nodesModelSel,yearsSel,converter_techs,"unitsUpperLimit");
9170   
9171  * // ### Converter Units Lower Limit
9172  * // Lower bound for the total number of units.
9173  * // {Eq_converter_unitsLowerLimit}
9174  Eq_converter_unitsLowerLimit(nodesModelSel,yearsSel,converter_techs)
9175      $(converter_capacityParam(nodesModelSel,yearsSel,converter_techs,'unitsLowerLimit') > 0
9176          and converter_capacityParam(nodesModelSel,yearsSel,converter_techs,'unitsLowerLimit')
9177              <> converter_capacityParam(nodesModelSel,yearsSel,converter_techs,'unitsUpperLimit'))
9178      ..
9179      sum(vintage$converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage),
9180          converter_unitsTotal(nodesModelSel,yearsSel,converter_techs,vintage))
9181      =g=
9182      converter_capacityParam(nodesModelSel,yearsSel,converter_techs,"unitsLowerLimit");
9183   
9184  Eq_converter_unitsFixedLimit(nodesModelSel,yearsSel,converter_techs)
9185      $(converter_capacityParam(nodesModelSel,yearsSel,converter_techs,'unitsLowerLimit')
9186          = converter_capacityParam(nodesModelSel,yearsSel,converter_techs,'unitsUpperLimit'))
9187      ..
9188      sum(vintage$converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage),
9189          converter_unitsTotal(nodesModelSel,yearsSel,converter_techs,vintage))
9190      =e=
9191      converter_capacityParam(nodesModelSel,yearsSel,converter_techs,"unitsUpperLimit");
9192   
9193  * // ### Converter Units Total MIP
9194  * // Fixes the total number of units to the corresponding integer variable.
9195  * // {Eq_converter_unitsTotalMIP}
9196  Eq_converter_unitsTotalMIP(nodesModelSel,yearsSel,converter_techs,vintage)
9197      $( converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
9198          and converter_techParam(converter_techs,vintage,"mipUnits") = 1 )
9199      ..
9200      converter_unitsTotal(nodesModelSel,yearsSel,converter_techs,vintage)
9201      =e=
9202      converter_unitsTotal_MIP(nodesModelSel,yearsSel,converter_techs,vintage);
9203   
9204  * // ### Converter Units Online MIP
9205  * // Fixes the number of online units to the corresponding integer variable.
9206  * // {Eq_converter_unitsOnlineMIP}
9207  Eq_converter_unitsOnlineMIP(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
9208      $( converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
9209          and converter_techParam(converter_techs,vintage,"mipDispatch") = 1 )
9210      ..
9211      converter_unitsOnline(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
9212      =e=
9213      converter_unitsOnline_MIP(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage);
9214   
9215  * // ### Converter Activity Lower Limit
9216  * // Lower limit on the activity.
9217  * // {Eq_converter_activityLowerLimit}
9218  Eq_converter_activityLowerLimit(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
9219      $(converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
9220          and converter_activityProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,"lower") > 0
9221          and converter_activityProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,"lower")
9222               <> converter_activityProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,"upper")
9223          and not converter_hasMinLoad(converter_techs, vintage))
9224      ..
9225      sum(activity$converter_usedAct(converter_techs,vintage,activity),
9226          converter_activity(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity)
9227      )
9228      =g=
9229      converter_activityProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,"lower")
9231      * converter_unitsOnline(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage);
9233   
9234  * // ### Converter Activity Upper Limit
9235  * // Upper limit on the activity.
9236  * // {Eq_converter_activityUpperLimit}
9237  Eq_converter_activityUpperLimit(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
9238      $(converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
9239          and converter_activityProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,"upper") >= 0
9240          and converter_activityProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,"upper")
9241               <> converter_activityProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,"lower"))
9242      ..
9243      sum(activity$converter_usedAct(converter_techs,vintage,activity),
9244          converter_activity(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity)
9245      )
9246      =l=
9247      converter_activityProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,"upper")
9249      * converter_unitsOnline(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage);
9251   
9252  Eq_converter_activityFixedLimit(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
9253      $(converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
9254          and converter_activityProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,"lower")
9255               = converter_activityProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,"upper"))
9256      ..
9257      sum(activity$converter_usedAct(converter_techs,vintage,activity),
9258          converter_activity(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity)
9259      )
9260      =e=
9261      converter_activityProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,"upper")
9263      * converter_unitsOnline(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage);
9265   
9266  * // ### Converter Positive Ramping
9267  * // Positive ramping of unit activity.
9268  * // {Eq_converter_rampPos}
9269  Eq_converter_rampPos(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,converter_techs,vintage)
9270    $( converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
9271        and converter_useRampPos(nodesModelSel,yearsSel,converter_techs,vintage))
9272      ..
9273      converter_rampPos(timeModelToCalc,nodesModelSel,yearsSel,converter_techs,vintage)
9274      =g=
9275      sum(activity$converter_usedAct(converter_techs,vintage,activity),
9276              converter_activity(timeModelToCalc,nodesModelSel,yearsSel,converter_techs,vintage,activity)
9277              - converter_activity(timeModelToCalc--1,nodesModelSel,yearsSel,converter_techs,vintage,activity));
9278   
9279  * // ### Converter Negative Ramping
9280  * // Negative ramping of unit activity.
9281  * // {Eq_converter_rampNeg}
9282  Eq_converter_rampNeg(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,converter_techs,vintage)
9283    $( converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
9284        and converter_useRampNeg(nodesModelSel,yearsSel,converter_techs,vintage))
9285      ..
9286      converter_rampNeg(timeModelToCalc,nodesModelSel,yearsSel,converter_techs,vintage)
9287      =g=
9288      - sum(activity$converter_usedAct(converter_techs,vintage,activity),
9289              converter_activity(timeModelToCalc,nodesModelSel,yearsSel,converter_techs,vintage,activity)
9290              - converter_activity(timeModelToCalc--1,nodesModelSel,yearsSel,converter_techs,vintage,activity));
9291   
9292  * // ### Converter Ramping Limit
9293  * // Restrict ramping up of unit activity.
9294  * // {Eq_converter_rampLimit}
9295  Eq_converter_rampLimit(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,converter_techs,vintage)
9296    $( converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
9297          and converter_techParam(converter_techs,vintage,"activityRampLimit") > 0)
9298      ..
9299      sum(activity$converter_usedAct(converter_techs,vintage,activity),
9300              converter_activity(timeModelToCalc,nodesModelSel,yearsSel,converter_techs,vintage,activity)
9301              - converter_activity(timeModelToCalc--1,nodesModelSel,yearsSel,converter_techs,vintage,activity))
9302    =l=
9303    converter_techParam(converter_techs,vintage,"activityRampLimit")
9305      * converter_unitsOnline(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage);
9307   
9308   
9310   
9311  * // ### Converter MIP Units Online
9312  * // Restrict ramping up of unit activity.
9313  * // {Eq_converter_unitsOnline}
9314  Eq_converter_unitsOnline(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
9315      $( converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
9316          and converter_techParam(converter_techs,vintage,"mipDispatch") = 0 )
9317    ..
9318    converter_unitsOnline(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
9319    =e=
9320    converter_unitsTotal(nodesModelSel,yearsSel,converter_techs,vintage)
9321      ;
9322   
9323  * // ### Converter MIP Units Shutting Down
9324  * // Allow shutting down units.
9325  * // {Eq_converter_unitsOnlineUC}
9326  Eq_converter_unitsOnlineUC(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
9327      $( converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
9328          and converter_techParam(converter_techs,vintage,"mipDispatch") = 1 )
9329    ..
9330    converter_unitsOnline(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
9331    =l=
9332    converter_unitsTotal(nodesModelSel,yearsSel,converter_techs,vintage)
9333      ;
9335   
9336  * // ### Converter Activity Startups
9337  * // Variable counting the number of unit startups.
9338  * // {Eq_converter_activityStartups}
9339  Eq_converter_activityStartups(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,converter_techs,vintage)
9340    $( converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
9341          and converter_techParam(converter_techs,vintage,"mipDispatch") = 1 )
9342      ..
9343      converter_unitStartups(timeModelToCalc,nodesModelSel,yearsSel,converter_techs,vintage)
9344      =g=
9345          converter_unitsOnline(timeModelToCalc,nodesModelSel,yearsSel,converter_techs,vintage)
9346      - converter_unitsOnline(timeModelToCalc--1,nodesModelSel,yearsSel,converter_techs,vintage);
9347   
9348  * // ### Converter Activity Shutdowns
9349  * // Variable tracking the number of unit shutdowns.
9350  * // {Eq_converter_activityShutdowns}
9351  Eq_converter_activityShutdowns(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,converter_techs,vintage)
9352    $( converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
9353          and converter_techParam(converter_techs,vintage,"mipDispatch") = 1
9354          and converter_techParam(converter_techs,vintage,"minDowntime") > 0)
9355      ..
9356      converter_unitShutdowns(timeModelToCalc,nodesModelSel,yearsSel,converter_techs,vintage)
9357      =g=
9358          converter_unitsOnline(timeModelToCalc--1,nodesModelSel,yearsSel,converter_techs,vintage)
9359      - converter_unitsOnline(timeModelToCalc,nodesModelSel,yearsSel,converter_techs,vintage);
9360   
9361  * // ### Converter Activity Startup Limit
9362  * // Limit the number of startup cycles a unit can perform.
9363  * // {Eq_converter_limitStartups}
9364  Eq_converter_limitStartups(nodesModelSel,yearsSel,converter_techs,vintage)
9365    $( converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
9366          and converter_techParam(converter_techs,vintage,"mipDispatch") = 1
9367      and converter_techParam(converter_techs,vintage,"startupLimit") > 0)
9368      ..
9369      sum(timeModelToCalc, converter_unitStartups(timeModelToCalc,nodesModelSel,yearsSel,converter_techs,vintage))
9370    =l=
9371    converter_techParam(converter_techs,vintage,"startupLimit")
9372    * converter_unitsTotal(nodesModelSel,yearsSel,converter_techs,vintage);
9373   
9374  alias(timeModelToCalc,ttc);
9375   
9376  * // ### Converter Units Minimum Uptime
9377  * // Require recently started units to remain online for their respective minimum uptime.
9378  * // {Eq_converter_minUptime}
9379  Eq_converter_minUptime(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,converter_techs,vintage)
9380    $( converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
9381          and converter_techParam(converter_techs,vintage,"mipDispatch") = 1
9382      and converter_techParam(converter_techs,vintage,"minUptime") > 0)
9383      ..
9384      sum(ttc$[uptimeSearchRange(ttc) and ord(ttc)<=converter_techParam(converter_techs,vintage,"minUptime")],
9385          converter_unitStartups(ttc+[ord(timeModelToCalc)-converter_techParam(converter_techs,vintage,"minUptime")],
9386              nodesModelSel,yearsSel,converter_techs,vintage))
9387          =l=
9388          converter_unitsOnline(timeModelToCalc,nodesModelSel,yearsSel,converter_techs,vintage);
9389   
9390  * // ### Converter Units Minimum Downtime
9391  * // Require recently shut down units to remain offline for their respective minimum downtime.
9392  * // {Eq_converter_minDowntime}
9393  Eq_converter_minDowntime(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,converter_techs,vintage)
9394    $( converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
9395          and converter_techParam(converter_techs,vintage,"mipDispatch") = 1
9396      and converter_techParam(converter_techs,vintage,"minDowntime") > 0)
9397      ..
9398      sum(ttc$[downtimeSearchRange(ttc) and ord(ttc)<=converter_techParam(converter_techs,vintage,"minDowntime")],
9399          converter_unitShutdowns(ttc+[ord(timeModelToCalc)-converter_techParam(converter_techs,vintage,"minDowntime")],
9400              nodesModelSel,yearsSel,converter_techs,vintage))
9401          =l=
9402          converter_unitsTotal(nodesModelSel,yearsSel,converter_techs,vintage)
9403      - converter_unitsOnline(timeModelToCalc,nodesModelSel,yearsSel,converter_techs,vintage);
9404   
9405  * This equation is meant to cause the units to activate particular mode counters to gain access to the corresponding activities.
9406  * Activities are allowed to be used on units with stricter activity requirements but not the other way around.
9407  alias(activity, act);
9408   
9409  * // ### Converter MIP Units Activity Upper Limit Minimum Required Load
9410  * // Limit activity coefficients of activities with a given load requirement or stricter to the number of units in such modes.
9411  * // {Eq_converter_activityUpperLimitDetailedPartLoadMinReq}
9412  Eq_converter_activityUpperLimitDetailedPartLoadMinReq(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity)
9413    $( converter_usedTechAct(nodesModelSel,yearsSel,converter_techs,vintage,activity)
9414          and converter_hasMinLoad(converter_techs, vintage)
9415          and converter_techParam(converter_techs,vintage,"mipDetailedPartialLoad"))
9416      ..
9417      sum(act$(converter_activityRequirements(converter_techs,vintage,act,"minLoad")
9418                  >= converter_activityRequirements(converter_techs,vintage,activity,"minLoad")
9419               and converter_usedAct(converter_techs,vintage,act)),
9420      converter_activity(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,act))
9421    =l=
9422    converter_activityProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,"upper")
9423      * sum(act$(converter_activityRequirements(converter_techs,vintage,act,"minLoad")
9424                  >= converter_activityRequirements(converter_techs,vintage,activity,"minLoad")
9425                 and converter_usedAct(converter_techs,vintage,act)),
9426      converter_unitsUsingActivity_MIP(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,act));
9427   
9428  * // ### Converter MIP Units Activity Upper Limit Maximum Required Load
9429  * // Limit activity coefficients of activities with a given load requirement or stricter to the number of units in such modes.
9430  * // {Eq_converter_activityUpperLimitDetailedPartLoadMaxReq}
9431  Eq_converter_activityUpperLimitDetailedPartLoadMaxReq(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity)
9432    $( converter_usedTechAct(nodesModelSel,yearsSel,converter_techs,vintage,activity)
9433          and converter_hasMaxLoad(converter_techs,vintage)
9434          and converter_techParam(converter_techs,vintage,"mipDetailedPartialLoad"))
9435      ..
9436      sum(act$(converter_activityRequirements(converter_techs,vintage,act,"maxLoad")
9437                  <= converter_activityRequirements(converter_techs,vintage,activity,"maxLoad")
9438               and converter_usedAct(converter_techs,vintage,act)),
9439      converter_activity(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,act))
9440    =l=
9441      sum(act$(converter_activityRequirements(converter_techs,vintage,act,"maxLoad")
9442                  <= converter_activityRequirements(converter_techs,vintage,activity,"maxLoad")
9443               and converter_usedAct(converter_techs,vintage,act)),
9444      min(converter_activityRequirements(converter_techs,vintage,act,"maxLoad"),
9445            converter_activityProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,"upper"))
9446            * converter_unitsUsingActivity_MIP(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,act));
9447   
9448  * This equation is meant to enforce the lower limit requirements of activities in use.
9449  * Loads produced by activities with less strict requirements can contribute to the minimum load requirement of strict activities but not the other way around,
9450  * because these activities can only run on units in the respectively strict activation state.
9451   
9452  * // ### Converter MIP Units Activity Lower Limit Minimum Required Load
9453  * // Enforce sufficient activity coefficients of activities to justify all active modes.
9454  * // {Eq_converter_activityLowerLimitDetailedPartLoadMinReq}
9455  Eq_converter_activityLowerLimitDetailedPartLoadMinReq(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity)
9456    $( converter_usedTechAct(nodesModelSel,yearsSel,converter_techs,vintage,activity)
9457          and converter_hasMinLoad(converter_techs, vintage)
9458          and converter_techParam(converter_techs,vintage,"mipDetailedPartialLoad"))
9459      ..
9460      sum(act$(converter_activityRequirements(converter_techs,vintage,act,"minLoad")
9461                  <= converter_activityRequirements(converter_techs,vintage,activity,"minLoad")
9462               and converter_usedAct(converter_techs,vintage,act)),
9463      converter_activity(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,act))
9464    =g=
9465      sum(act$(converter_activityRequirements(converter_techs,vintage,act,"minLoad")
9466                  <= converter_activityRequirements(converter_techs,vintage,activity,"minLoad")
9467               and converter_usedAct(converter_techs,vintage,act)),
9468      max(converter_activityRequirements(converter_techs,vintage,act,"minLoad"),
9469            converter_activityProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,"lower"))
9470            * converter_unitsUsingActivity_MIP(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,act));
9471   
9472   
9473  * Simple one-activity-per-unit partial load equations
9474  * // ### Converter MIP Units Activity Upper Limit Partial Load Balance
9475  * // Enforce MIP units partial load upper limit.
9476  * // {Eq_converter_activityUpperLimitPartLoad}
9477  Eq_converter_activityUpperLimitPartLoad(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity)
9478    $( converter_usedTechAct(nodesModelSel,yearsSel,converter_techs,vintage,activity)
9479          and (converter_hasMinLoad(converter_techs, vintage)
9480                or converter_hasMaxLoad(converter_techs, vintage)
9481                or converter_hasConstantFluxInActivity(converter_techs, vintage))
9482          and not converter_techParam(converter_techs,vintage,"mipDetailedPartialLoad"))
9483      ..
9484      converter_activity(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity)
9485    =l=
9486    min(converter_activityRequirements(converter_techs,vintage,activity,"maxLoad"),
9487          converter_activityProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,"upper"))
9488          * converter_unitsUsingActivity_MIP(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity);
9489   
9490  * // ### Converter MIP Units Activity Lower Limit Partial Load Balance
9491  * // Enforce MIP units partial load lower limit.
9492  * // {Eq_converter_activityLowerLimitPartLoad}
9493  Eq_converter_activityLowerLimitPartLoad(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity)
9494    $( converter_usedTechAct(nodesModelSel,yearsSel,converter_techs,vintage,activity)
9495          and (converter_hasMinLoad(converter_techs, vintage)
9496                or converter_hasMaxLoad(converter_techs, vintage))
9497          and not converter_techParam(converter_techs,vintage,"mipDetailedPartialLoad"))
9498      ..
9499      converter_activity(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity)
9500    =g=
9501    max(converter_activityRequirements(converter_techs,vintage,activity,"minLoad"),
9502          converter_activityProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,"lower"))
9503          * converter_unitsUsingActivity_MIP(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity);
9504   
9505  * // ### Converter MIP Units Idle Online Units
9506  * // Counts idle online units at every time step
9507  * // {Eq_converter_noOnlineIdle}
9508  Eq_converter_noOnlineIdle(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
9509    $( converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
9510          and (converter_hasMinLoad(converter_techs, vintage)
9511              or converter_hasMaxLoad(converter_techs, vintage)
9512              or converter_hasConstantFluxInActivity(converter_techs,vintage))
9513          and not converter_techParam(converter_techs,vintage,"mipDetailedPartialLoad"))
9514      ..
9515      converter_unitsOnline(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
9516      =e=
9517      sum(activity$converter_usedAct(converter_techs,vintage,activity),
9518            converter_unitsUsingActivity_MIP(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity));
9519   
9520  * // ### Converter MIP Units Idle Online Units Partial load
9521  * // Counts idle online units at every time step
9522  * // {Eq_converter_noOnlineIdleDetailedPartLoad}
9523  Eq_converter_noOnlineIdleDetailedPartLoad(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
9524    $( converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
9525          and (converter_hasMinLoad(converter_techs, vintage)
9526                  or converter_hasMaxLoad(converter_techs, vintage))
9527          and converter_techParam(converter_techs,vintage,"mipDetailedPartialLoad"))
9528      ..
9529      converter_unitsOnline(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
9530      =l=
9531      sum(activity$converter_usedAct(converter_techs,vintage,activity),
9532            converter_unitsUsingActivity_MIP(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity));
9533   
9534  * // ### Converter MIP activity model limit
9535  * // Converter activity model limit
9536  * // {Eq_converter_activityModeLimit}
9537  Eq_converter_activityModeLimit(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity)
9538    $( converter_usedTechAct(nodesModelSel,yearsSel,converter_techs,vintage,activity)
9539          and (converter_hasMinLoad(converter_techs, vintage)
9540                or converter_hasMaxLoad(converter_techs, vintage))
9541          and converter_techParam(converter_techs,vintage,"mipDetailedPartialLoad"))
9542      ..
9543      converter_unitsOnline(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
9544      =g=
9545      converter_unitsUsingActivity_MIP(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity);
9546   
9547  * ==== model definition ====
9548   
9549  Model M_converter
9550  /
9551    Eq_converter_unitsBalance
9552    Eq_converter_unitsFixedDecom
9553    Eq_converter_unitsFreeDecom
9554    Eq_converter_unitsUpperLimit
9555    Eq_converter_unitsLowerLimit
9556    Eq_converter_unitsFixedLimit
9557    Eq_converter_unitsTotalMIP
9558    Eq_converter_unitsOnlineMIP
9559    Eq_converter_activityUpperLimit
9560    Eq_converter_activityLowerLimit
9561    Eq_converter_activityFixedLimit
9562    Eq_converter_rampPos
9563    Eq_converter_rampNeg
9564    Eq_converter_rampLimit
9566    Eq_converter_unitsOnline
9567    Eq_converter_unitsOnlineUC
9569    Eq_converter_activityStartups
9570    Eq_converter_activityShutdowns
9571    Eq_converter_limitStartups
9572    Eq_converter_minUptime
9573    Eq_converter_minDowntime
9574    Eq_converter_activityUpperLimitDetailedPartLoadMinReq
9575    Eq_converter_activityUpperLimitDetailedPartLoadMaxReq
9576    Eq_converter_activityLowerLimitDetailedPartLoadMinReq
9577    Eq_converter_activityUpperLimitPartLoad
9578    Eq_converter_activityLowerLimitPartLoad
9579    Eq_converter_noOnlineIdle
9580    Eq_converter_noOnlineIdleDetailedPartLoad
9581    Eq_converter_activityModeLimit
9582  /;
INCLUDE    C:\Local\REMix\framework\remix\framework\model\source\core\storage.gms
9584  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
9585  * SPDX-License-Identifier: BSD-3-Clause
9586   
9587  * // # core_storage
9588  * // The equations in this file describe the storages in the model.
9589   
9590  * // ## Variables
9591  * // {special_table_storage_variables}
10071   
10072   
10073  * === SoC mappings ===
10074  set storage_usedTechSoCState(storage_techs,vintage,soc_statesIn);
10075  storage_usedTechSoCState(storage_techs,vintage,soc_states(soc_statesIn))
10076      $(storage_SoCParam(storage_techs,vintage,soc_states,"eRate") > 0
10077        and storage_SoCParam(storage_techs,vintage,soc_states,"cRate") > 0)
10078      = yes;
10079   
10080  set storage_validSoCRange(storage_techs,vintage);
10081  storage_validSoCRange(storage_techs,vintage)
10082      = smax(soc_states$storage_usedTechSoCState(storage_techs,vintage,soc_states), storage_SoCParam(storage_techs,vintage,soc_states,"SoC")) = 1
10083        and smin(soc_states$storage_usedTechSoCState(storage_techs,vintage,soc_states), storage_SoCParam(storage_techs,vintage,soc_states,"SoC")) = 0;
10084   
10085  * === Translate SoC parameters to ordered SoC-set ===
10086  * set ordered_socs / soc1*soc20 /;
10087  * alias(soc_states, soc_states_c);
10088  * parameter storage_SoCParam_ordered(storage_techs,vintage,ordered_socs,pc_storage_SoCParam);
10089  * storage_SoCParam_ordered(storage_techs,vintage,ordered_socs,pc_storage_SoCParam)
10090  *     $storage_validSoCRange(storage_techs,vintage)
10091  *     = sum(soc_states$(ord(ordered_socs) = sum(soc_states_c$(storage_SoCParam(storage_techs,vintage,soc_states_c,"SoC") <= storage_SoCParam(storage_techs,vintage,soc_states,"SoC")
10092  *                                                            and storage_usedTechSoCState(storage_techs,vintage,soc_states_c)), 1)
10093  *                       and storage_usedTechSoCState(storage_techs,vintage,soc_states)),
10094  *           storage_SoCParam(storage_techs,vintage,soc_states,pc_storage_SoCParam));
10095  *
10096  * set storage_usedTechSoCStateOrdered(storage_techs,vintage,ordered_socs);
10097  * storage_usedTechSoCStateOrdered(storage_techs,vintage,ordered_socs)
10098  *     $(storage_SoCParam_ordered(storage_techs,vintage,ordered_socs,"eRate") > 0
10099  *       and storage_SoCParam_ordered(storage_techs,vintage,ordered_socs,"cRate") > 0)
10100  *     = yes;
10101   
10102  parameter storage_bigM(storage_techs,vintage);
10103  storage_bigM(storage_techs,vintage) = smax((nodesModel,years), storage_reservoirParam(nodesModel,years,storage_techs,"unitsUpperLimit"));
10104  storage_bigM(storage_techs,vintage)$(storage_bigM(storage_techs,vintage) = INF) = 10000;
10105  storage_bigM(storage_techs,vintage)$(storage_bigM(storage_techs,vintage) = 0) = 10000;
10106   
10107  * === calculate the number of years represented by single year to calc ===
10108  alias(yearsToCalc, yearsToCalc_a)
10109  parameter representedYears(years);
10110  representedYears(years) = 0.5 *(smin(yearsToCalc$(yearsToCalc.val > years.val or yearsToCalc.val = smax(yearsToCalc_a, yearsToCalc_a.val)), yearsToCalc.val)
10111                                  - smax(yearsToCalc$(yearsToCalc.val < years.val or yearsToCalc.val = smin(yearsToCalc_a, yearsToCalc_a.val)), yearsToCalc.val));
10112   
10113  * ==== calculation of mappings ====
10114   
10115  * Technologies with a lifeTime > 0 are available
10116  set storage_availTech(nodesModel,years,storage_techs,vintage);
10117  storage_availTech(nodesModel,years,storage_techs,vintage)
10118      $(vintage.val = smax(vintage_a$(vintage_a.val <= years.val
10119          and storage_techParam(storage_techs,vintage_a,"lifeTime") > 0), vintage_a.val)) = yes;
10120   
10121  * Technologies to optimize become unavailable if they have an unitsUpperLimit of 0
10122  storage_availTech(nodesModel,years,storage_techs,vintage)
10123      $(yearsToCalc(years) and storage_reservoirParam(nodesModel,years,storage_techs,"unitsUpperLimit") = 0 ) = no;
10124   
10125  * Technologies already built become unavailable if they have an unitsBuild of 0
10126  storage_availTech(nodesModel,years,storage_techs,vintage)
10127      $( ( not yearsToCalc(years)) and storage_reservoirParam(nodesModel,years,storage_techs,"unitsBuild") = 0 ) = no;
10128   
10129  * Used technologies are available technologies over their technical lifeTime
10130  set storage_usedTech(nodesModel,years,storage_techs,vintage);
10131  storage_usedTech(nodesModel,years,storage_techs,vintage)
10132      $(vintage.val <= years.val
10133          and years.val < smax(years_a$storage_availTech(nodesModel,years_a,storage_techs,vintage),
10134                                              years_a.val + storage_techParam(storage_techs,vintage,"lifeTime"))
10135          ) = yes;
10136   
10137  * Technologies have to be decomissioned in the interval of first avail + lifetime to last avail + lifetime
10138  set storage_decomTech(nodesModel,years,storage_techs,vintage);
10139  storage_decomTech(nodesModel,years,storage_techs,vintage)
10140    $(sum(years_a$storage_usedTech(nodesModel,years_a,storage_techs,vintage), 1)
10141      and sum(yearsToCalc
10142        $(sameas(years, yearsToCalc)
10143          and yearsToCalc.val >= smin(years_a$storage_availTech(nodesModel,years_a,storage_techs,vintage), years_a.val) + storage_techParam(storage_techs,vintage,"lifeTime")
10144          and yearsToCalc.val <= smax(years_a$storage_availTech(nodesModel,years_a,storage_techs,vintage), years_a.val) + storage_techParam(storage_techs,vintage,"lifeTime")), 1))
10145    = yes;
10146   
10147  * Extend the decom frame to the year after the last year of usedTech
10148  storage_decomTech(nodesModel,yearsToCalc,storage_techs,vintage)
10149    $(storage_usedTech(nodesModel,yearsToCalc-1,storage_techs,vintage)
10150      and storage_decomTech(nodesModel,yearsToCalc-1,storage_techs,vintage))
10151    = yes;
10152   
10153  * Mapping for used commodities
10154  set storage_usedCom(storage_techs,vintage,commodity);
10155  option storage_usedCom < storage_sizeParam;
10156   
10157  set storage_usedTechCom(nodesModel,years,storage_techs,vintage,commodity);
10158  storage_usedTechCom(nodesModel,years,storage_techs,vintage,commodity)
10159      $(storage_usedTech(nodesModel,years,storage_techs,vintage)
10160          and storage_usedCom(storage_techs,vintage,commodity))
10161      = yes;
10162   
10163   
10164  * // ## Load units from gdx file
10166   
10167  * ==== aggregation of profiles ====
10168  * derive upper and lower profiles then aggregate
10169  set storage_level_hasProfileIn(nodesData,years,storage_techs,pc_storage_levelProfile);
10170  option storage_level_hasProfileIn < storage_levelProfileIn;
10171   
10172  set storage_level_hasProfile(nodesModel,years,storage_techs,pc_storage_levelProfile);
10173  storage_level_hasProfile(nodesModelToCalc,yearsToCalc,storage_techs,pc_storage_levelProfile)
10174      = sum(nodesData$aggregateNodesModel(nodesData,nodesModelToCalc),
10175              storage_level_hasProfileIn(nodesData,yearsToCalc,storage_techs,pc_storage_levelProfile));
10176   
10177  * weighted average for a real sum of units upper limits, plain average if one region has an upper limit of inf
10178  parameter storage_levelProfile(timeModel,nodesModel,years,storage_techs,vintage,pc_storage_levelProfile);
10179  storage_levelProfile(timeModelToCalc,storage_usedTech(nodesModelToCalc,yearsToCalc,storage_techs,vintage),"upper")
10180      = storage_techParam(storage_techs,vintage,"levelUpperLimit");
10181  storage_levelProfile(timeModelToCalc,storage_usedTech(nodesModelToCalc,yearsToCalc,storage_techs,vintage),"lower")
10182      = storage_techParam(storage_techs,vintage,"levelLowerLimit");
10183   
10184  set storage_finiteUnitLimit(nodesModelToCalc,yearsToCalc,storage_techs);
10185  storage_finiteUnitLimit(nodesModelToCalc,yearsToCalc,storage_techs) = sum(nodesData$aggregateNodesModel(nodesData,nodesModelToCalc), storage_reservoirParamIn(nodesData,yearsToCalc,storage_techs,"unitsUpperLimit")) > 0
10186                                                   and sum(nodesData$aggregateNodesModel(nodesData,nodesModelToCalc), storage_reservoirParamIn(nodesData,yearsToCalc,storage_techs,"unitsUpperLimit")) < inf;
10187   
10188  storage_levelProfile(timeModelToCalc,storage_usedTech(nodesModelToCalc,yearsToCalc,storage_techs,vintage),pc_storage_levelProfile)
10189      $( storage_level_hasProfile(nodesModelToCalc,yearsToCalc,storage_techs,pc_storage_levelProfile)
10190          and storage_finiteUnitLimit(nodesModelToCalc,yearsToCalc,storage_techs))
10191      = sum(nodesData$aggregateNodesModel(nodesData,nodesModelToCalc),
10192              sum(timeData$timeMapping(timeData,timeModelToCalc),
10193                    storage_levelProfileIn(timeData,nodesData,yearsToCalc,storage_techs,pc_storage_levelProfile))
10194                / timeLength(timeModelToCalc)
10195              * storage_reservoirParamIn(nodesData,yearsToCalc,storage_techs,"unitsUpperLimit"))
10196      / sum(nodesData$aggregateNodesModel(nodesData,nodesModelToCalc),
10197              storage_reservoirParamIn(nodesData,yearsToCalc,storage_techs,"unitsUpperLimit"));
10198   
10199  storage_levelProfile(timeModelToCalc,storage_usedTech(nodesModelToCalc,yearsToCalc,storage_techs,vintage),pc_storage_levelProfile)
10200      $( storage_level_hasProfile(nodesModelToCalc,yearsToCalc,storage_techs,pc_storage_levelProfile)
10201          and sum(nodesData$aggregateNodesModel(nodesData,nodesModelToCalc),
10202                      storage_reservoirParamIn(nodesData,yearsToCalc,storage_techs,"unitsUpperLimit")) = inf )
10203      = sum(nodesData$(aggregateNodesModel(nodesData,nodesModelToCalc)
10204                      and storage_reservoirParamIn(nodesData,yearsToCalc,storage_techs,"unitsUpperLimit") = inf ),
10205              sum(timeData$timeMapping(timeData,timeModelToCalc),
10206                    storage_levelProfileIn(timeData,nodesData,yearsToCalc,storage_techs,pc_storage_levelProfile))
10207                / timeLength(timeModelToCalc))
10208      / sum(nodesData$(aggregateNodesModel(nodesData,nodesModelToCalc)
10209                      and storage_reservoirParamIn(nodesData,yearsToCalc,storage_techs,"unitsUpperLimit") = inf ), 1);
10210   
10211  * for fixed profiles overwrite upper and lower profile
10212  storage_levelProfile(timeModelToCalc,nodesModelToCalc,yearsToCalc,storage_techs,vintage,"lower")
10213      $storage_level_hasProfile(nodesModelToCalc,yearsToCalc,storage_techs,"fixed")
10214      = storage_levelProfile(timeModelToCalc,nodesModelToCalc,yearsToCalc,storage_techs,vintage,"fixed");
10215   
10216  storage_levelProfile(timeModelToCalc,nodesModelToCalc,yearsToCalc,storage_techs,vintage,"upper")
10217      $storage_level_hasProfile(nodesModelToCalc,yearsToCalc,storage_techs,"fixed")
10218      = storage_levelProfile(timeModelToCalc,nodesModelToCalc,yearsToCalc,storage_techs,vintage,"fixed");
10219   
10220   
10221  * ==== parameter modifications ====
10222  storage_reservoirParam(nodesModel,years,storage_techs,"unitsLowerLimit")
10223          $sum(vintage, storage_techParam(storage_techs,vintage,"mipUnits"))
10224      = floor(storage_reservoirParam(nodesModel,years,storage_techs,"unitsLowerLimit"));
10225  storage_reservoirParam(nodesModel,years,storage_techs,"unitsUpperLimit")
10226          $sum(vintage, storage_techParam(storage_techs,vintage,"mipUnits"))
10227      = ceil(storage_reservoirParam(nodesModel,years,storage_techs,"unitsUpperLimit"));
10228   
10229   
10230  * ==== definition of variables ====
10231   
10232  * Initialise variables for unitsBuild
10233  storage_unitsBuild.l(nodesModel,years,storage_techs,vintage)
10234      $storage_availTech(nodesModel,years,storage_techs,vintage)
10235      = storage_reservoirParam(nodesModel,years,storage_techs,"unitsBuild");
10236  storage_unitsBuild.lo(nodesModel,yearsToCalc,storage_techs,vintage)
10237      $storage_availTech(nodesModel,yearsToCalc,storage_techs,vintage)
10238      = storage_unitsBuild.l(nodesModel,yearsToCalc,storage_techs,vintage);
10239  storage_unitsBuild.fx(nodesModel,years,storage_techs,vintage)
10240      $storage_reservoirParam(nodesModel,years,storage_techs,"noExpansion")
10241      = storage_unitsBuild.l(nodesModel,years,storage_techs,vintage);
10242   
10243  * Initialise variables for unitsDecom
10244  storage_unitsDecom.l(nodesModel,years,storage_techs,vintage)
10245      $(storage_decomTech(nodesModel,years,storage_techs,vintage)
10246        and years.val < sum(yearsToCalc$(ord(yearsToCalc) = 1), yearsToCalc.val))
10247      = sum((years_a,years_aa)$(sameas(years-1, years_aa)
10248                        and years_a.val > years_aa.val - storage_techParam(storage_techs,vintage,'lifeTime')
10249                        and years_a.val <= years.val - storage_techParam(storage_techs,vintage,'lifeTime')
10250                        and storage_availTech(nodesModel,years_a,storage_techs,vintage)),
10251          storage_unitsBuild.l(nodesModel,years_a,storage_techs,vintage));
10252   
10253  storage_unitsDecom.l(nodesModel,yearsToCalc,storage_techs,vintage)
10254    $storage_decomTech(nodesModel,yearsToCalc,storage_techs,vintage)
10255    = sum(years$
10256          (years.val < sum(yearsToCalc_a$(ord(yearsToCalc_a) = 1), yearsToCalc_a.val)
10257            and storage_availTech(nodesModel,years,storage_techs,vintage)
10258            and years.val > sum(years_a$sameas(years_a, yearsToCalc-1), years_a.val) - storage_techParam(storage_techs,vintage,'lifeTime')
10259            and years.val <= yearsToCalc.val - storage_techParam(storage_techs,vintage,'lifeTime')),
10260        storage_unitsBuild.l(nodesModel,years,storage_techs,vintage))
10261      + sum(yearsToCalc_a$
10262          (yearsToCalc_a.val < sum(yearsToCalc_aa$(ord(yearsToCalc_aa) > 1), yearsToCalc_a.val)
10263            and storage_availTech(nodesModel,yearsToCalc_a,storage_techs,vintage)
10264            and yearsToCalc_a.val > sum(years_a$sameas(years_a, yearsToCalc-1), years_a.val) - storage_techParam(storage_techs,vintage,'lifeTime')
10265            and yearsToCalc_a.val <= yearsToCalc.val - storage_techParam(storage_techs,vintage,'lifeTime')),
10266        storage_unitsBuild.l(nodesModel,yearsToCalc_a,storage_techs,vintage));
10267        ;
10268   
10269  storage_unitsDecom.lo(nodesModel,yearsToCalc,storage_techs,vintage)
10270      $(storage_usedTech(nodesModel,yearsToCalc,storage_techs,vintage)
10271        and not storage_techParam(storage_techs,vintage,"freeDecom"))
10272      = storage_unitsDecom.l(nodesModel,yearsToCalc,storage_techs,vintage)
10273   
10274  * Calculate planned unit expansion
10275  parameter storage_unitsPlanned(nodesModel,years,storage_techs,vintage);
10276  storage_unitsPlanned(nodesModel,years,storage_techs,vintage) = 0;
10277  loop(years,
10278    storage_unitsPlanned(nodesModel,years,storage_techs,vintage)
10279      =
10280      storage_unitsPlanned(nodesModel,years-1,storage_techs,vintage)
10281          $storage_usedTech(nodesModel,years-1,storage_techs,vintage)
10282      + storage_unitsBuild.l(nodesModel,years,storage_techs,vintage)
10283          $storage_availTech(nodesModel,years,storage_techs,vintage)
10284      - storage_unitsDecom.l(nodesModel,years,storage_techs,vintage)
10285          $storage_usedTech(nodesModel,years,storage_techs,vintage);
10286  );
10287   
10288  * Set initial state for planned units
10289  storage_unitsTotal.l(nodesModel,years,storage_techs,vintage)
10290    = storage_unitsPlanned(nodesModel,years,storage_techs,vintage)
10291   
10292  * Calculate if planned unit expansion is bounded by upper and lower limits
10293  set storage_unitBoundsFixed(nodesModel,years,storage_techs);
10294  storage_unitBoundsFixed(nodesModel,years,storage_techs)
10295    $(sum(vintage$storage_usedTech(nodesModel,years,storage_techs,vintage),
10296          storage_unitsPlanned(nodesModel,years,storage_techs,vintage))
10297      = storage_reservoirParam(nodesModel,years,storage_techs,"unitsUpperLimit")
10298    and sum(vintage$storage_usedTech(nodesModel,years,storage_techs,vintage),
10299          storage_unitsPlanned(nodesModel,years,storage_techs,vintage))
10300      = storage_reservoirParam(nodesModel,years,storage_techs,"unitsLowerLimit"))
10301    = yes;
10302   
10303  * Fix unitsBuild, unitsDecom, unitsTotal if levels are predetermined by upper and lower limits
10304  storage_unitsBuild.fx(nodesModel,years,storage_techs,vintage)
10305    $(storage_availTech(nodesModel,years,storage_techs,vintage)
10306      and storage_unitBoundsFixed(nodesModel,years,storage_techs))
10307    = storage_unitsBuild.l(nodesModel,years,storage_techs,vintage);
10308  storage_unitsDecom.fx(nodesModel,years,storage_techs,vintage)
10309    $(storage_usedTech(nodesModel,years,storage_techs,vintage)
10310      and storage_unitBoundsFixed(nodesModel,years,storage_techs))
10311    = storage_unitsDecom.l(nodesModel,years,storage_techs,vintage);
10312  storage_unitsTotal.fx(nodesModel,years,storage_techs,vintage)
10313    $(storage_usedTech(nodesModel,years,storage_techs,vintage)
10314      and storage_unitBoundsFixed(nodesModel,years,storage_techs))
10315    = storage_unitsTotal.l(nodesModel,years,storage_techs,vintage);
10316   
10317  storage_unitsTotal_MIP.up(nodesModel,years,storage_techs,vintage)
10318      $(storage_usedTech(nodesModel,years,storage_techs,vintage)
10319        and storage_techParam(storage_techs,vintage,"mipUnits") = 1)
10320      = storage_reservoirParam(nodesModel,years,storage_techs,"unitsUpperLimit");
10321   
10322  * Add parameter for fixing capacities during myopic runs
10323  parameter storage_unitsDelta(nodesModel,years,storage_techs);
10324   
10325   
10326  * ==== declaration of equations ====
10327   
10328  equations
10329    Eq_storage_unitsBalance(nodesModel,years,storage_techs,vintage
10330      ) "Ensures the units balance over the planning period."
10331    Eq_storage_unitsFixedDecom(nodesModel,years,storage_techs,vintage
10332      ) "Restricts the fixed decommissioning of units over the planning period."
10333    Eq_storage_unitsFreeDecom(nodesModel,years,storage_techs,vintage
10334      ) "Restricts the free decommissioning of units over the planning period."
10335    Eq_storage_unitsUpperLimit(nodesModel,years,storage_techs
10336      ) "Upper bound for the total number of units."
10337    Eq_storage_unitsLowerLimit(nodesModel,years,storage_techs
10338      ) "Lower bound for the total number of units."
10339    Eq_storage_unitsTotalMIP(nodesModel,years,storage_techs,vintage
10340      ) "Fixes the total number of units to the corresponding integer variable."
10341   
10342    Eq_storage_levelUpperLimit(timeModel,nodesModel,years,storage_techs,vintage,commodity
10343      ) "Upper bound for the total number of units."
10344    Eq_storage_levelUpperLimit_degradation(timeModel,nodesModel,years,storage_techs,vintage,commodity
10345      ) "Upper bound for the total number of units if the storage technology accounts for degradation."
10346    Eq_storage_levelLowerLimit(timeModel,nodesModel,years,storage_techs,vintage,commodity
10347      ) "Lower bound for the total number of units."
10348    Eq_storage_losses(timeModel,nodesModel,years,storage_techs,vintage,commodity
10349      ) "Stored commodities lost due to self discharge."
10350    Eq_storage_unitsBalanceStates(nodesModel,years,storage_techs,vintage
10351      ) "Currently available units must have been built at some point in time and have some state of degradation."
10352    Eq_storage_unitsUpperLimitPerState(nodesModel,years,yearsCom,storage_techs,vintage
10353      ) "There cannot be more units from a certain year than the amount built in that year."
10354    Eq_storage_unitsStatesNoRecovery(nodesModel,years,yearsCom,storage_techs,vintage,degradation_states
10355      ) "There is no recovery."
10356    Eq_storage_cRateLimit(timeModel,nodesModel,years,storage_techs,vintage,commodity
10357      ) "Limit charging rate based on unit capacity."
10358    Eq_storage_eRateLimit(timeModel,nodesModel,years,storage_techs,vintage,commodity
10359      ) "Limit discharging rate based on unit capacity."
10360    Eq_storage_charge(timeModel,nodesModel,years,storage_techs,vintage,commodity
10361      ) "Positive change in state of charge is influx."
10362    Eq_storage_discharge(timeModel,nodesModel,years,storage_techs,vintage,commodity
10363      ) "Negative change in state of charge is outflux."
10364   
10365    Eq_storage_levelStateSum(timeModel,nodesModel,years,storage_techs,vintage,commodity
10366      ) "Sum of degradation class storage levels is the global level."
10367    Eq_storage_levelUpperLimitPerAge(timeModel,nodesModel,years,yearsCom,storage_techs,vintage,commodity
10368      ) "Upper bound for units of a certain state."
10369    Eq_storage_chargingPerAge(timeModel,nodesModel,years,yearsCom,storage_techs,vintage,commodity
10370      ) "Positive change in state of charge is influx for each degradation class."
10371    Eq_storage_chargeBasedDegradationDistribution(nodesModel,years,yearsCom,storage_techs,vintage,commodity
10372      ) "Determine degradation states of storage units."
10373    Eq_storage_unitsDecomStateSum(nodesModel,years,storage_techs,vintage
10374      ) "All decomminsioned units must have a degradation state."
10375    Eq_storage_unitsDegradation(nodesModel,years,yearsCom,storage_techs,vintage,degradation_states
10376      ) "Only allow one range of degradation states per year and age group."
10377    Eq_storage_unitsDegradation_onlyOneRange(nodesModel,years,yearsCom,storage_techs,vintage
10378      ) "Limit usable degradation states to one range, i.e., two neighboring states."
10379   
10380    Eq_storage_unitsSoC_sum(timeModel,nodesModel,years,storage_techs,vintage
10381      ) "Every unit has a state of charge."
10382    Eq_storage_levelSoC(timeModel,nodesModel,years,storage_techs,vintage,commodity
10383      ) "Every unit has a state of charge."
10384    Eq_storage_unitsSoC(timeModel,nodesModel,years,storage_techs,vintage,soc_statesIn
10385      ) "Number of units in particular SoC."
10386    Eq_storage_unitsSoC_onlyOneRange(timeModel,nodesModel,years,storage_techs,vintage
10387      ) "Limit usable SoC states to one range, i.e., two neighboring states."
10388   
10389    Eq_storage_cRateLimit_SoC(timeModel,nodesModel,years,storage_techs,vintage,commodity
10390      ) "Limit charging rate based on unit capacity."
10391    Eq_storage_eRateLimit_SoC(timeModel,nodesModel,years,storage_techs,vintage,commodity
10392      ) "Limit discharging rate based on unit capacity."
10393    ;
10394   
10395  * ==== equation definition ====
10396  * // ## Equations
10397  * // ### Storage Units Balance
10398  * // Ensures that the total units are consistent with the built and decommissioned units.
10399  * // {Eq_storage_unitsBalance}
10400  Eq_storage_unitsBalance(nodesModelSel,yearsSel,storage_techs,vintage)
10401      $((storage_usedTech(nodesModelSel,yearsSel,storage_techs,vintage)
10402            or sum(years$sameas(years,yearsSel), storage_usedTech(nodesModelSel,years-1,storage_techs,vintage)))
10403          and not storage_unitBoundsFixed(nodesModelSel,yearsSel,storage_techs))
10404      ..
10405      storage_unitsTotal(nodesModelSel,yearsSel,storage_techs,vintage)
10406      =e=
10407          sum(yearsToCalc$(ord(yearsToCalc) = 1 and sameas(yearsToCalc, yearsSel)),
10408        sum(years$sameas(years, yearsToCalc),
10409          storage_unitsTotal(nodesModelSel,years-1,storage_techs,vintage)
10410            $storage_usedTech(nodesModelSel,years-1,storage_techs,vintage)))
10411      + sum((yearsToCalc)$(ord(yearsToCalc) > 1 and sameas(yearsToCalc, yearsSel)),
10412        storage_unitsTotal(nodesModelSel,yearsToCalc-1,storage_techs,vintage)
10413          $storage_usedTech(nodesModelSel,yearsToCalc-1,storage_techs,vintage))
10414      + storage_unitsBuild(nodesModelSel,yearsSel,storage_techs,vintage)
10415          $storage_availTech(nodesModelSel,yearsSel,storage_techs,vintage)
10416      - storage_unitsDecom(nodesModelSel,yearsSel,storage_techs,vintage)
10417          $storage_usedTech(nodesModelSel,yearsSel,storage_techs,vintage);
10418   
10419  * // ### Storage Units Fixed Decommission
10420  * // Restricts the fixed decommissioning of storage units over the planning period.
10421  * // {Eq_storage_unitsFixedDecom}
10422  Eq_storage_unitsFixedDecom(nodesModelSel,yearsSel,storage_techs,vintage)
10423      $(storage_decomTech(nodesModelSel,yearsSel,storage_techs,vintage)
10424          and not storage_techParam(storage_techs,vintage,"freeDecom") = 1
10425          and not storage_unitBoundsFixed(nodesModelSel,yearsSel,storage_techs))
10426      ..
10427      storage_unitsDecom(nodesModelSel,yearsSel,storage_techs,vintage)
10428      =e=
10429      sum(years$
10430          (storage_availTech(nodesModelSel,years,storage_techs,vintage)
10431            and years.val > sum(yearsToCalc$sameas(yearsToCalc+1, yearsSel), yearsToCalc.val) - storage_techParam(storage_techs,vintage,'lifeTime')
10432            and years.val <= yearsSel.val - storage_techParam(storage_techs,vintage,'lifeTime')),
10433        storage_unitsBuild(nodesModelSel,years,storage_techs,vintage));
10434   
10435  * // ### Storage Units Free Decomission
10436  * // Restricts the free decommissioning of storage units over the planning period.
10437  * // {Eq_storage_unitsFreeDecom}
10438  Eq_storage_unitsFreeDecom(nodesModelSel,yearsSel,storage_techs,vintage)
10439      $((storage_decomTech(nodesModelSel,yearsSel,storage_techs,vintage)
10440          or storage_usedTech(nodesModelSel,yearsSel,storage_techs,vintage))
10441          and storage_techParam(storage_techs,vintage,"freeDecom") = 1)
10442      ..
10443      sum(years$
10444            ((storage_decomTech(nodesModelSel,years,storage_techs,vintage)
10445              or storage_usedTech(nodesModelSel,years,storage_techs,vintage))
10446              and years.val < sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)),
10447          storage_unitsDecom(nodesModelSel,years,storage_techs,vintage))
10448      + sum(yearsToCalc$
10449            ((storage_decomTech(nodesModelSel,yearsToCalc,storage_techs,vintage)
10450              or storage_usedTech(nodesModelSel,yearsToCalc,storage_techs,vintage))
10451              and yearsToCalc.val >= sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
10452              and yearsToCalc.val <= yearsSel.val),
10453          storage_unitsDecom(nodesModelSel,yearsToCalc,storage_techs,vintage))
10454      =g=
10455      sum(years$
10456            (storage_availTech(nodesModelSel,years,storage_techs,vintage)
10457              and years.val < sum(yearsToCalc$(ord(yearsToCalc)=1), yearsToCalc.val) - storage_techParam(storage_techs,vintage,'lifeTime')),
10458          storage_unitsBuild(nodesModelSel,years,storage_techs,vintage))
10459      + sum(yearsToCalc$
10460            (storage_availTech(nodesModelSel,yearsToCalc,storage_techs,vintage)
10461              and yearsToCalc.val >= sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
10462              and yearsToCalc.val <= yearsSel.val - storage_techParam(storage_techs,vintage,'lifeTime')),
10463          storage_unitsBuild(nodesModelSel,yearsToCalc,storage_techs,vintage));
10464   
10465  * // ### Storage Units Lower Limit
10466  * // Lower bound for the total number of storage units.
10467  * // {Eq_storage_unitsLowerLimit}
10468  Eq_storage_unitsLowerLimit(nodesModelSel,yearsSel,storage_techs)
10469      $(storage_reservoirParam(nodesModelSel,yearsSel,storage_techs,'unitsLowerLimit') > 0 )
10470      ..
10471      sum(vintage$storage_usedTech(nodesModelSel,yearsSel,storage_techs,vintage),
10472          storage_unitsTotal(nodesModelSel,yearsSel,storage_techs,vintage))
10473      =g=
10474      storage_reservoirParam(nodesModelSel,yearsSel,storage_techs,"unitsLowerLimit");
10475   
10476  * // ### Storage Units Upper Limit
10477  * // Upper bound for the total number of storage units.
10478  * // {Eq_storage_unitsUpperLimit}
10479  Eq_storage_unitsUpperLimit(nodesModelSel,yearsSel,storage_techs)
10480      $(storage_reservoirParam(nodesModelSel,yearsSel,storage_techs,'unitsUpperLimit') >= 0
10481          and storage_reservoirParam(nodesModelSel,yearsSel,storage_techs,'unitsUpperLimit') < +inf )
10482      ..
10483      sum(vintage$storage_usedTech(nodesModelSel,yearsSel,storage_techs,vintage),
10484          storage_unitsTotal(nodesModelSel,yearsSel,storage_techs,vintage))
10485      =l=
10486      storage_reservoirParam(nodesModelSel,yearsSel,storage_techs,"unitsUpperLimit");
10487   
10488  * // ### Storage Units Total MIP
10489  * // Fixes the total number of storage units to the corresponding integer variable.
10490  * // {Eq_storage_unitsTotalMIP}
10491  Eq_storage_unitsTotalMIP(nodesModelSel,yearsSel,storage_techs,vintage)
10492      $( storage_usedTech(nodesModelSel,yearsSel,storage_techs,vintage)
10493          and storage_techParam(storage_techs,vintage,"mipUnits") = 1 )
10494      ..
10495      storage_unitsTotal(nodesModelSel,yearsSel,storage_techs,vintage)
10496      =e=
10497      storage_unitsTotal_MIP(nodesModelSel,yearsSel,storage_techs,vintage);
10498   
10499  * // ### Storage Level Lower Limit
10500  * // Lower limit on the storage level.
10501  * // {Eq_storage_levelLowerLimit}
10502  Eq_storage_levelLowerLimit(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
10503      $(storage_usedTechCom(nodesModelSel,yearsSel,storage_techs,vintage,commodity)
10504          and storage_levelProfile(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,"lower") > 0)
10505      ..
10506      storage_level(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
10507      =g=
10508      storage_levelProfile(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,"lower")
10509      * storage_sizeParam(storage_techs,vintage,commodity,"size")
10510      * storage_unitsTotal(nodesModelSel,yearsSel,storage_techs,vintage);
10511   
10512  * // ### Storage Level Upper Limit
10513  * // Upper limit on the storage level.
10514  * // {Eq_storage_levelUpperLimit}
10515  Eq_storage_levelUpperLimit(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
10516      $(storage_usedTechCom(nodesModelSel,yearsSel,storage_techs,vintage,commodity)
10517          and not storage_hasDegradation(storage_techs,vintage)
10518          and storage_levelProfile(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,"upper") >= 0)
10519      ..
10520      storage_level(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
10521      =l=
10522      storage_levelProfile(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,"upper")
10523      * storage_sizeParam(storage_techs,vintage,commodity,"size")
10524      * storage_unitsTotal(nodesModelSel,yearsSel,storage_techs,vintage);
10525   
10526  * // ### Storage Level Upper Limit (degradation)
10527  * // Upper limit on the storage level if the storage technology accounts for degradation.
10528  * // {Eq_storage_levelUpperLimit_degradation}
10529  Eq_storage_levelUpperLimit_degradation(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
10530      $(storage_usedTechCom(nodesModelSel,yearsSel,storage_techs,vintage,commodity)
10531          and storage_hasDegradation(storage_techs,vintage)
10532          and storage_levelProfile(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,"upper") >= 0)
10533      ..
10534      storage_level(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
10535      =l=
10536      storage_levelProfile(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,"upper")
10537      * storage_sizeParam(storage_techs,vintage,commodity,"size")
10538      * sum((degradation_states,yearsCom)$storage_usedDegradation(storage_techs,vintage,degradation_states),
10539              (storage_degradationParam(storage_techs,vintage,degradation_states,"remainingCapacity")
10540                - (yearsSel.val - yearsCom.val) * storage_techParam(storage_techs,vintage,"annualDegradation"))
10541                * storage_unitsStateTracker(nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,degradation_states));
10542   
10543  * // ### Storage Unit States Sum (degradation)
10544  * // The number of units in all degradation state must match the total unit number.
10545  * // {Eq_storage_unitsBalanceStates}
10546  Eq_storage_unitsBalanceStates(nodesModelSel,yearsSel,storage_techs,vintage)
10547      $(storage_usedTech(nodesModelSel,yearsSel,storage_techs,vintage)
10548        and storage_hasDegradation(storage_techs,vintage))
10549      ..
10550      storage_unitsTotal(nodesModelSel,yearsSel,storage_techs,vintage)
10551      =e=
10552      sum((yearsCom,degradation_states)$storage_usedDegradation(storage_techs,vintage,degradation_states),
10553            storage_unitsStateTracker(nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,degradation_states));
10554   
10555  * // ### Storage Unit States Upper Limit(degradation)
10556  * // The states of all commissioned units in one year (unitsBuilt) must either still be tracked or have been decommissioned.
10557  * // {Eq_storage_unitsUpperLimitPerState}
10558  Eq_storage_unitsUpperLimitPerState(nodesModelSel,yearsSel,yearsCom,storage_techs,vintage)
10559      $(storage_usedTech(nodesModelSel,yearsSel,storage_techs,vintage)
10560          and storage_hasDegradation(storage_techs,vintage))
10561      ..
10562      sum(degradation_states$storage_usedDegradation(storage_techs,vintage,degradation_states),
10563            storage_unitsStateTracker(nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,degradation_states)
10564            + sum(years$(years.val <= yearsSel.val),
10565                  storage_unitsStateTrackerDecom(nodesModelSel,years,yearsCom,storage_techs,vintage,degradation_states)))
10566      =e=
10567      storage_unitsBuild(nodesModelSel,yearsCom,storage_techs,vintage)$(yearsCom.val <= yearsSel.val);
10568   
10569  * // ### Storage Unit States Progression (degradation)
10570  * // Unit recovery by reassigning the storage cycles to other units is disabled. Therefore, the number of units in a particular degradation state can only increase if the number in a less degraded state is decreased by at least the same amount.
10571  * // {Eq_storage_unitsStatesNoRecovery}
10572  alias(degradation_states, dc_states);
10573  Eq_storage_unitsStatesNoRecovery(nodesModelSel,yearsSel(yearsToCalc),yearsCom,storage_techs,vintage,degradation_states)
10574      $(storage_usedTech(nodesModelSel,yearsSel,storage_techs,vintage)
10575        and yearsToCalc.val > yearsCom.val
10576        and storage_usedDegradation(storage_techs,vintage,degradation_states))
10577      ..
10578      sum(dc_states$(storage_usedDegradation(storage_techs,vintage,dc_states)
10579                and storage_degradationParam(storage_techs,vintage,dc_states,"maxFullCycles") <= storage_degradationParam(storage_techs,vintage,degradation_states,"maxFullCycles")),
10580              storage_unitsStateTracker(nodesModelSel,yearsToCalc,yearsCom,storage_techs,vintage,dc_states)
10581              + sum(years$(years.val <= yearsToCalc.val), storage_unitsStateTrackerDecom(nodesModelSel,years,yearsCom,storage_techs,vintage,dc_states)))
10582      =l=
10583      sum(dc_states$(storage_usedDegradation(storage_techs,vintage,dc_states)
10584                      and storage_degradationParam(storage_techs,vintage,dc_states,"maxFullCycles") <= storage_degradationParam(storage_techs,vintage,degradation_states,"maxFullCycles")),
10585              storage_unitsStateTracker(nodesModelSel,yearsToCalc-1,yearsCom,storage_techs,vintage,dc_states)
10586              + sum(years$(years.val < yearsToCalc.val), storage_unitsStateTrackerDecom(nodesModelSel,years,yearsCom,storage_techs,vintage,dc_states)));
10587   
10588  * // ### Storage Losses
10589  * // Accumulation of storage losses.
10590  * // {Eq_storage_losses}
10591  Eq_storage_losses(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,storage_techs,vintage,commodity)
10592      $storage_usedTechCom(nodesModelSel,yearsSel,storage_techs,vintage,commodity)
10593      ..
10594      storage_losses(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
10595      =e=
10596      - storage_level(timeModelToCalc--1,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
10597        * storage_sizeParam(storage_techs,vintage,commodity,"selfdischarge")
10598      + storage_sizeParam(storage_techs,vintage,commodity,"selfdischargeAbs")
10599      + (storage_techParam(storage_techs,vintage,"chargingLoss")
10600          /(1 - storage_techParam(storage_techs,vintage,"chargingLoss")))
10601        * storage_charge(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
10602          $(storage_techParam(storage_techs,vintage,"chargingLoss") > 0)
10603      + storage_techParam(storage_techs,vintage,"dischargingLoss")
10604        * storage_discharge(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
10605          $(storage_techParam(storage_techs,vintage,"dischargingLoss") > 0)
10606      - storage_sizeParam(storage_techs,vintage,commodity,"size")
10607        * sum(soc_states$(storage_usedTechSoCState(storage_techs,vintage,soc_states)
10608                          and storage_validSoCRange(storage_techs,vintage)),
10609              storage_unitsSoC(timeModelToCalc--1,nodesModelSel,yearsSel,storage_techs,vintage,soc_states)
10610              * storage_SoCParam(storage_techs,vintage,soc_states,"SoC")
10611              * storage_SoCParam(storage_techs,vintage,soc_states,"selfdischarge"));
10612   
10613  * // ### C-Rate Limit
10614  * // The increase in storage level per time step, i.e., the charging rate, is limited relative to the storage capacity.
10615  * // {Eq_storage_cRateLimit}
10616  Eq_storage_cRateLimit(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,storage_techs,vintage,commodity)
10617      $(storage_usedTechCom(nodesModelSel,yearsSel,storage_techs,vintage,commodity)
10618        and storage_techParam(storage_techs,vintage,"maxCRate") > 0)
10619      ..
10620      storage_level(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
10621      - storage_level(timeModelToCalc--1,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
10622      =l=
10623      storage_techParam(storage_techs,vintage,"maxCRate")
10624      * storage_sizeParam(storage_techs,vintage,commodity,"size")
10625      * storage_unitsTotal(nodesModelSel,yearsSel,storage_techs,vintage);
10626   
10627  * // ### E-Rate Limit
10628  * // The decrease in storage level per time step, i.e., the discharging rate, is limited relative to the storage capacity.
10629  * // {Eq_storage_eRateLimit}
10630  Eq_storage_eRateLimit(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,storage_techs,vintage,commodity)
10631      $(storage_usedTechCom(nodesModelSel,yearsSel,storage_techs,vintage,commodity)
10632        and storage_techParam(storage_techs,vintage,"maxERate") > 0)
10633      ..
10634      storage_level(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
10635      - storage_level(timeModelToCalc--1,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
10636      =g=
10637      - storage_techParam(storage_techs,vintage,"maxERate")
10638      * storage_sizeParam(storage_techs,vintage,commodity,"size")
10639      * storage_unitsTotal(nodesModelSel,yearsSel,storage_techs,vintage);
10640   
10641  * // ### Storage Charging
10642  * // Increases in storage levels are accounted as charging amounts.
10643  * // {Eq_storage_charge}
10644  Eq_storage_charge(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,storage_techs,vintage,commodity)
10645      $(storage_usedTechCom(nodesModelSel,yearsSel,storage_techs,vintage,commodity)
10646        and storage_techParam(storage_techs,vintage,"chargingLoss") > 0)
10647      ..
10648      storage_charge(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
10649      =g=
10650      storage_level(timeModelToCalc,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
10651      - storage_level(timeModelToCalc--1,nodesModelSel,yearsSel,storage_techs,vintage,commodity);
10652   
10653  * // ### Storage Discharging
10654  * // Decreases in storage levels are accounted as discharging amounts.
10655  * // {Eq_storage_discharge}
10656  Eq_storage_discharge(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,storage_techs,vintage,commodity)
10657      $(storage_usedTechCom(nodesModelSel,yearsSel,storage_techs,vintage,commodity)
10658        and storage_techParam(storage_techs,vintage,"dischargingLoss") > 0)
10659      ..
10660      storage_discharge(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
10661      =g=
10662      storage_level(timeModelToCalc--1,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
10663      - storage_level(timeModelToCalc,nodesModelSel,yearsSel,storage_techs,vintage,commodity);
10664   
10665  * // ### Storage Level Sum (degradation)
10666  * // The storage level is accounted individually by commissioning year in the case of degradation in order to prohibit the model to assign pre-existing storage cycles to newly built storage reservoirs and thereby avoiding degradation. All those storage levels represent the total storage level.
10667  * // {Eq_storage_levelStateSum}
10668  Eq_storage_levelStateSum(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
10669      $(storage_usedTechCom(nodesModelSel,yearsSel,storage_techs,vintage,commodity)
10670        and storage_techParam(storage_techs,vintage,"usageDegradation"))
10671      ..
10672      storage_level(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
10673      =e=
10674      sum(yearsCom, storage_levelPerAge(timeModelSel,nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,commodity));
10675   
10676  * // ### Storage Level Upper Limit per Age Group (degradation)
10677  * // Upper limit on the storage level per commissioning year if the storage technology accounts for degradation.
10678  * // {Eq_storage_levelUpperLimitPerAge}
10679  Eq_storage_levelUpperLimitPerAge(timeModelSel,nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,commodity)
10680      $(storage_usedTechCom(nodesModelSel,yearsSel,storage_techs,vintage,commodity)
10681        and storage_techParam(storage_techs,vintage,"usageDegradation"))
10682      ..
10683      storage_levelPerAge(timeModelSel,nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,commodity)
10684      =l=
10685      storage_techParam(storage_techs,vintage,"levelUpperLimit")
10686      * storage_sizeParam(storage_techs,vintage,commodity,"size")
10687      * sum(degradation_states,
10688              (storage_degradationParam(storage_techs,vintage,degradation_states,"remainingCapacity")
10689                - (yearsSel.val - yearsCom.val) * storage_techParam(storage_techs,vintage,"annualDegradation"))
10690                * storage_unitsStateTracker(nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,degradation_states));
10691   
10692  * // ### Storage Cycle Distribution to Degradation States per Commissioning Year (degradation)
10693  * // The charging amounts are converted to equivalent full cycles which then must be represented by an adequate distribution of degradation states.
10694  * // {Eq_storage_chargeBasedDegradationDistribution}
10695  alias(years, prev_years);
10696  Eq_storage_chargeBasedDegradationDistribution(nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,commodity)
10697      $(storage_usedTechCom(nodesModelSel,yearsSel,storage_techs,vintage,commodity)
10698        and storage_techParam(storage_techs,vintage,"usageDegradation"))
10699      ..
10700      sum(prev_years$(prev_years.val <= yearsSel.val), representedYears(prev_years)
10701          * sum(timeModel, storage_chargePerAge(timeModel,nodesModelSel,prev_years,yearsCom,storage_techs,vintage,commodity)))
10702      =l=
10703      storage_sizeParam(storage_techs,vintage,commodity,"size")
10704      * sum(dc_states$storage_usedDegradation(storage_techs,vintage,dc_states),
10705          storage_degradationParam(storage_techs,vintage,dc_states,"maxFullCycles")
10706          * (storage_unitsStateTracker(nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,dc_states)
10707             + sum(prev_years$(prev_years.val <= yearsSel.val), storage_unitsStateTrackerDecom(nodesModelSel,prev_years,yearsCom,storage_techs,vintage,dc_states))));
10708   
10709  * // ### Storage Charging per Commissioning Year (degradation)
10710  * // Increases in storage levels are accounted as charging amounts.
10711  * // {Eq_storage_chargingPerAge}
10712  Eq_storage_chargingPerAge(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,commodity)
10713      $(storage_usedTechCom(nodesModelSel,yearsSel,storage_techs,vintage,commodity)
10714        and storage_techParam(storage_techs,vintage,"usageDegradation"))
10715      ..
10716      storage_chargePerAge(timeModelSel,nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,commodity)
10717      =g=
10718      storage_levelPerAge(timeModelToCalc,nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,commodity)
10719      - storage_levelPerAge(timeModelToCalc--1,nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,commodity);
10720   
10721  * // ### Storage Unit Decommissioning States Sum (degradation)
10722  * // The number of decommissioned units in all degradation state must match the total decommissioning unit number.
10723  * // {Eq_storage_unitsDecomStateSum}
10724  Eq_storage_unitsDecomStateSum(nodesModelSel,yearsSel,storage_techs,vintage)
10725      $(storage_techParam(storage_techs,vintage,"usageDegradation"))
10726      ..
10727      storage_unitsDecom(nodesModelSel,yearsSel,storage_techs,vintage)
10728      =e=
10729      sum((yearsCom,degradation_states)$storage_usedDegradation(storage_techs,vintage,degradation_states),
10730          storage_unitsStateTrackerDecom(nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,degradation_states));
10731   
10732  * // ### Storage Unit Sequential Degradation (degradation)
10733  * // Only active degradation ranges, i.e., two neighboring degradation states, can be used.
10734  * // {Eq_storage_unitsDegradation}
10735  alias(degradation_states, degradation_states_a, degradation_states_b);
10736  Eq_storage_unitsDegradation(nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,degradation_states)
10737      $(storage_techParam(storage_techs,vintage,"usageDegradation")
10738        and storage_techParam(storage_techs,vintage,"sequentialDegradationStates"))
10739      ..
10740      sum(degradation_states_a$((storage_degradationParam(storage_techs,vintage,degradation_states_a,"maxFullCycles") = storage_degradationParam(storage_techs,vintage,degradation_states,"maxFullCycles")
10741                        or storage_degradationParam(storage_techs,vintage,degradation_states_a,"maxFullCycles")
10742                                         = smax(degradation_states_b$(storage_degradationParam(storage_techs,vintage,degradation_states_b,"maxFullCycles") < storage_degradationParam(storage_techs,vintage,degradation_states,"maxFullCycles")
10743                                                              and storage_usedDegradation(storage_techs,vintage,degradation_states_b)),
10744                                                              storage_degradationParam(storage_techs,vintage,degradation_states_b,"maxFullCycles")))
10745                        and storage_usedDegradation(storage_techs,vintage,degradation_states_a)),
10746          storage_unitsStateTracker_activeRange(nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,degradation_states_a))
10747      * storage_bigM(storage_techs,vintage)
10748      =g=
10749      storage_unitsStateTracker(nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,degradation_states);
10750   
10751  * // ### Storage Unit Sequential Degradation Range (degradation)
10752  * // Only one degradation range can be active.
10753  * // {Eq_storage_unitsDegradation_onlyOneRange}
10754  Eq_storage_unitsDegradation_onlyOneRange(nodesModelSel,yearsSel,yearsCom,storage_techs,vintage)
10755      $(storage_techParam(storage_techs,vintage,"usageDegradation") and storage_techParam(storage_techs,vintage,"sequentialDegradationStates"))
10756      ..
10757      sum(degradation_states$storage_usedDegradation(storage_techs,vintage,degradation_states),
10758            storage_unitsStateTracker_activeRange(nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,degradation_states))
10759      =e= 1;
10760   
10761  * // ### Storage Unit Sequential State of Charge (SoC)
10762  * // Only active state of charge ranges, i.e., two neighboring states of charge, can be used.
10763  * // {Eq_storage_unitsSoC}
10764  alias(soc_states, soc_states_a, soc_states_b);
10765  Eq_storage_unitsSoC(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,storage_techs,vintage,soc_states)
10766      $(storage_validSoCRange(storage_techs,vintage) and storage_techParam(storage_techs,vintage,"sequentialSoC"))
10767      ..
10768      sum(soc_states_a$((storage_SoCParam(storage_techs,vintage,soc_states_a,"SoC") = storage_SoCParam(storage_techs,vintage,soc_states,"SoC")
10769                        or storage_SoCParam(storage_techs,vintage,soc_states_a,"SoC")
10770                                         = smax(soc_states_b$(storage_SoCParam(storage_techs,vintage,soc_states_b,"SoC") < storage_SoCParam(storage_techs,vintage,soc_states,"SoC")
10771                                                              and storage_usedTechSoCState(storage_techs,vintage,soc_states_b)),
10772                                                              storage_SoCParam(storage_techs,vintage,soc_states_b,"SoC")))
10773                        and storage_usedTechSoCState(storage_techs,vintage,soc_states_a)),
10774          storage_unitsSoC_activeRange(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,soc_states_a))
10775      * storage_bigM(storage_techs,vintage)
10776      =g=
10777      storage_unitsSoC(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,soc_states);
10778   
10779  * // ### Storage Unit Sequential State of Charge Range (SoC)
10780  * // Only one state of charge range can be active.
10781  * // {Eq_storage_unitsSoC_onlyOneRange}
10782  Eq_storage_unitsSoC_onlyOneRange(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,storage_techs,vintage)
10783      $(storage_validSoCRange(storage_techs,vintage) and storage_techParam(storage_techs,vintage,"sequentialSoC"))
10784      ..
10785      sum(soc_states$storage_usedTechSoCState(storage_techs,vintage,soc_states),
10786            storage_unitsSoC_activeRange(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,soc_states)) =e= 1;
10787   
10788  * // ### Storage Unit State of Charge Sum (SoC)
10789  * // Each storage unit must have one state of charge.
10790  * // {Eq_storage_unitsSoC_sum}
10791  Eq_storage_unitsSoC_sum(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,storage_techs,vintage)
10792      $storage_validSoCRange(storage_techs,vintage)
10793      ..
10794      storage_unitsTotal(nodesModelSel,yearsSel,storage_techs,vintage)
10795      =e=
10796      sum(soc_states$storage_usedTechSoCState(storage_techs,vintage,soc_states),
10797            storage_unitsSoC(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,soc_states));
10798   
10799  * // ### Storage Level State of Charge Sum (SoC)
10800  * // The total storage level must be represented by units in their specific states of charge.
10801  * // {Eq_storage_levelSoC}
10802  Eq_storage_levelSoC(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,storage_techs,vintage,commodity)
10803      $(storage_validSoCRange(storage_techs,vintage) and storage_usedTechCom(nodesModelSel,yearsSel,storage_techs,vintage,commodity))
10804      ..
10805      storage_level(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
10806      =e=
10807      storage_sizeParam(storage_techs,vintage,commodity,"size")
10808      * sum(soc_states$storage_usedTechSoCState(storage_techs,vintage,soc_states),
10809              storage_unitsSoC(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,soc_states)
10810              * storage_SoCParam(storage_techs,vintage,soc_states,"SoC"));
10811   
10812  * // ### C-Rate Limit (SoC)
10813  * // The increase in storage level per time step, i.e., the charging rate, is limited relative to the storage capacity. The coefficients can vary between states of charge.
10814  * // {Eq_storage_cRateLimit_SoC}
10815  Eq_storage_cRateLimit_SoC(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,storage_techs,vintage,commodity)
10816      $(storage_usedTechCom(nodesModelSel,yearsSel,storage_techs,vintage,commodity)
10817        and storage_validSoCRange(storage_techs,vintage)
10818        and sum(soc_states, storage_SoCParam(storage_techs,vintage,soc_states,"cRate")) < inf)
10819      ..
10820      storage_level(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
10821      - storage_level(timeModelToCalc--1,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
10822      =l=
10823      storage_sizeParam(storage_techs,vintage,commodity,"size")
10824      * sum(soc_states$storage_usedTechSoCState(storage_techs,vintage,soc_states),
10825                      storage_SoCParam(storage_techs,vintage,soc_states,"cRate")
10826                      * storage_unitsSoC(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,soc_states));
10827   
10828  * // ### E-Rate Limit (SoC)
10829  * // The decrease in storage level per time step, i.e., the discharging rate, is limited relative to the storage capacity. The coefficients can vary between states of charge.
10830  * // {Eq_storage_cRateLimit_SoC}
10831  Eq_storage_eRateLimit_SoC(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,storage_techs,vintage,commodity)
10832      $(storage_usedTechCom(nodesModelSel,yearsSel,storage_techs,vintage,commodity)
10833        and storage_validSoCRange(storage_techs,vintage)
10834        and sum(soc_states, storage_SoCParam(storage_techs,vintage,soc_states,"eRate")) < inf)
10835      ..
10836      storage_level(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
10837      - storage_level(timeModelToCalc--1,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
10838      =g=
10839      - storage_sizeParam(storage_techs,vintage,commodity,"size")
10840      * sum(soc_states$storage_usedTechSoCState(storage_techs,vintage,soc_states),
10841                      storage_SoCParam(storage_techs,vintage,soc_states,"eRate")
10842                      * storage_unitsSoC(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,soc_states));
10843   
10844   
10845  * ==== model definition ====
10846   
10847  Model M_storage
10848  /
10849    Eq_storage_unitsBalance
10850    Eq_storage_unitsFixedDecom
10851    Eq_storage_unitsFreeDecom
10852    Eq_storage_unitsLowerLimit
10853    Eq_storage_unitsUpperLimit
10854    Eq_storage_levelUpperLimit_degradation
10855    Eq_storage_unitsTotalMIP
10856    Eq_storage_levelLowerLimit
10857    Eq_storage_levelUpperLimit
10859    Eq_storage_losses
10861    Eq_storage_unitsBalanceStates
10862    Eq_storage_unitsUpperLimitPerState
10863    Eq_storage_unitsStatesNoRecovery
10864    Eq_storage_cRateLimit
10865    Eq_storage_eRateLimit
10866    Eq_storage_charge
10867    Eq_storage_discharge
10868    Eq_storage_levelStateSum
10869    Eq_storage_levelUpperLimitPerAge
10870    Eq_storage_chargeBasedDegradationDistribution
10871    Eq_storage_chargingPerAge
10872    Eq_storage_unitsDecomStateSum
10873    Eq_storage_unitsDegradation
10874    Eq_storage_unitsDegradation_onlyOneRange
10875   
10876    Eq_storage_unitsSoC
10877    Eq_storage_unitsSoC_sum
10878    Eq_storage_unitsSoC_onlyOneRange
10879    Eq_storage_levelSoC
10880    Eq_storage_cRateLimit_SoC
10881    Eq_storage_eRateLimit_SoC
10882  /;
INCLUDE    C:\Local\REMix\framework\remix\framework\model\source\core\transfer.gms
10884  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
10885  * SPDX-License-Identifier: BSD-3-Clause
10886   
10887  * // # core_transfer
10888  * // The equations in this file describe the commodity transfer in the model.
10889   
10890  * // ## Variables
10891  * // {special_table_transfer_variables}
10894   
10899   
11159   
11160  parameter transfer_linksParam(linksModel,years,transfer_techs,pc_transfer_linksParam);
11161  transfer_linksParam(linksModelToCalc,years,transfer_techs,pc_transfer_linksParam)
11162      = sum(linksData$links_aggregate(linksModelToCalc,linksData), transfer_linksParamIn(linksData,years,transfer_techs,pc_transfer_linksParam));
11163   
11164  * // ## Load links from gdx file
11166   
11167   
11168  set transfer_hasflowProfileIn(linksData,years,transfer_techs,pc_transfer_flowProfile);
11169  option transfer_hasflowProfileIn < transfer_flowProfileIn;
11170   
11171  * === modify transfer_flowProfileIn vector to fill with default values, in case profile is not specified ===
11172  transfer_linksParamIn(linksData,years,transfer_techs,"flowAlongLimit")
11173      $(not transfer_linksParamIn(linksData,years,transfer_techs,"limitFlows"))
11174      = 1;
11175   
11176  transfer_linksParamIn(linksData,years,transfer_techs,"flowAgainstLimit")
11177      $(not transfer_linksParamIn(linksData,years,transfer_techs,"limitFlows"))
11178      = 1;
11179   
11180  transfer_flowProfileIn(timeData,linksData,years,transfer_techs,"along")
11181      $(not transfer_hasflowProfileIn(linksData,years,transfer_techs,"along"))
11182      = transfer_linksParamIn(linksData,years,transfer_techs,"flowAlongLimit");
11183   
11184  transfer_flowProfileIn(timeData,linksData,years,transfer_techs,"against")
11185      $(not transfer_hasflowProfileIn(linksData,years,transfer_techs,"against"))
11186      = transfer_linksParamIn(linksData,years,transfer_techs,"flowAgainstLimit");
11187   
11188  * aggregate time dimension
11189  parameter transfer_flowProfileIn_aggTime(timeModel,linksData,yearsToCalc,transfer_techs,pc_transfer_flowProfile);
11190  transfer_flowProfileIn_aggTime(timeModelToCalc,linksData,yearsToCalc,transfer_techs,pc_transfer_flowProfile)
11191      $transfer_hasflowProfileIn(linksData,yearsToCalc,transfer_techs,pc_transfer_flowProfile)
11192      = sum(timeData$timeMapping(timeData,timeModelToCalc),
11193            transfer_flowProfileIn(timeData,linksData,yearsToCalc,transfer_techs,pc_transfer_flowProfile)
11194            / timeLength(timeModelToCalc));
11195  option clear = transfer_flowProfileIn;
11196   
11197  transfer_flowProfileIn_aggTime(timeModelToCalc,linksData,yearsToCalc,transfer_techs,pc_transfer_flowProfile)
11198      $(not transfer_hasflowProfileIn(linksData,yearsToCalc,transfer_techs,pc_transfer_flowProfile) and
11199        not transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"limitFlows"))
11200      = 1;
11201   
11202  transfer_flowProfileIn_aggTime(timeModelToCalc,linksData,yearsToCalc,transfer_techs,"along")
11203      $(not transfer_hasflowProfileIn(linksData,yearsToCalc,transfer_techs,"along") and
11204        transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"limitFlows"))
11205      = transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"flowAlongLimit");
11206   
11207  transfer_flowProfileIn_aggTime(timeModelToCalc,linksData,yearsToCalc,transfer_techs,"against")
11208      $(not transfer_hasflowProfileIn(linksData,yearsToCalc,transfer_techs,"against") and
11209        transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"limitFlows"))
11210      = transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"flowAgainstLimit");
11211   
11212  set transfer_finiteLinkLimit(linksModel,years,transfer_techs);
11213  transfer_finiteLinkLimit(linksModelToCalc,yearsToCalc,transfer_techs)
11214      = sum(linksData$links_aggregate(linksModelToCalc,linksData), transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"linksUpperLimit")) > 0
11215          and sum(linksData$links_aggregate(linksModelToCalc,linksData), transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"linksUpperLimit")) < inf;
11216   
11217  set transfer_infiniteLinkLimit(linksModel,years,transfer_techs);
11218  transfer_infiniteLinkLimit(linksModelToCalc,yearsToCalc,transfer_techs)
11219      = sum(linksData$links_aggregate(linksModelToCalc,linksData), transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"linksUpperLimit")) = inf;
11221   
11222  parameter transfer_lengthParam(linksModel,link_types,pc_transfer_lengthParam);
11223  transfer_lengthParam(linksModelToCalc,link_types,pc_transfer_lengthParam)
11224      = sum(linksData$links_aggregate(linksModelToCalc,linksData), transfer_lengthParamIn(linksData,link_types,pc_transfer_lengthParam))
11225          / sum(linksData$links_aggregate(linksModelToCalc,linksData), 1);
11226   
11227  parameter transfer_gridSegments(linksModel,transfer_techs,gridSegments,pc_transfer_gridSegments);
11228  transfer_gridSegments(linksModelToCalc,transfer_techs,gridSegments,pc_transfer_gridSegments)
11229      = smax(linksData$links_aggregate(linksModelToCalc,linksData), transfer_gridSegmentsIn(linksData,transfer_techs,gridSegments,pc_transfer_gridSegments));
11230   
11231  parameter transfer_dcopf_Xtech(linksModel,years,transfer_techs,vintage,gridSegments);
11232  transfer_dcopf_Xtech(linksModelToCalc,yearsToCalc,transfer_techs,vintage,gridSegments)
11233      $(transfer_gridSegments(linksModelToCalc,transfer_techs,gridSegments,"useDCopf")
11234          and transfer_linksParam(linksModelToCalc,yearsToCalc,transfer_techs,"circuits") > 0
11235          and sum(link_types, transfer_reactPerLength(transfer_techs,vintage,link_types,"reactPerLength")) > 0 )
11236      = (1 / sum(linksData
11237                  $links_aggregate(linksModelToCalc,linksData),
11238              1 / ( sum(link_types,
11239                          transfer_lengthParamIn(linksData,link_types,"length")
11240                          * transfer_reactPerLength(transfer_techs,vintage,link_types,"reactPerLength"))
11241                      / transfer_linksParam(linksModelToCalc,yearsToCalc,transfer_techs,"circuits"))));
11242   
11243  set transfer_hasflowProfile(linksModel,years,transfer_techs,pc_transfer_flowProfile);
11244  transfer_hasflowProfile(linksModelToCalc,yearsToCalc,transfer_techs,pc_transfer_flowProfile)
11245      = sum(linksData$links_aggregate(linksModelToCalc,linksData),
11246              transfer_hasflowProfileIn(linksData,yearsToCalc,transfer_techs,pc_transfer_flowProfile));
11247   
11248  * ==== parameter modifications ====
11249  transfer_linksParam(linksModelToCalc,yearsToCalc,transfer_techs,"linksLowerLimit")
11250      $sum(vintage, transfer_techParam(transfer_techs,vintage,"mipLinks"))
11251      = floor(transfer_linksParam(linksModelToCalc,yearsToCalc,transfer_techs,"linksLowerLimit"));
11252  transfer_linksParam(linksModelToCalc,yearsToCalc,transfer_techs,"linksUpperLimit")
11253      $sum(vintage, transfer_techParam(transfer_techs,vintage,"mipLinks"))
11254      = ceil(transfer_linksParam(linksModelToCalc,yearsToCalc,transfer_techs,"linksUpperLimit"));
11255   
11256   
11257  * ==== calculation of mappings ====
11258   
11259  * Technologies with a lifeTime > 0 are available
11260  set transfer_availTech(linksModel,years,transfer_techs,vintage);
11261  transfer_availTech(linksModel,years,transfer_techs,vintage)
11262      $(vintage.val = smax(vintage_a$(vintage_a.val <= years.val
11263          and transfer_techParam(transfer_techs,vintage_a,"lifeTime") > 0), vintage_a.val)) = yes;
11264   
11265  * Technologies to optimize become unavailable if they have an linksUpperLimit of 0
11266  transfer_availTech(linksModelToCalc,years,transfer_techs,vintage)
11267      $(yearsToCalc(years) and transfer_linksParam(linksModelToCalc,years,transfer_techs,"linksUpperLimit") = 0 ) = no;
11268   
11269  * Technologies already built become unavailable if they have an linksBuild of 0
11270  transfer_availTech(linksModelToCalc,years,transfer_techs,vintage)
11271      $( ( not yearsToCalc(years)) and transfer_linksParam(linksModelToCalc,years,transfer_techs,"linksBuild") = 0 ) = no;
11272   
11273  * Used technologies are available technologies over their technical lifeTime
11274  set transfer_usedTech(linksModel,years,transfer_techs,vintage);
11275  transfer_usedTech(linksModelToCalc,years,transfer_techs,vintage)
11276      $(vintage.val <= years.val
11277          and years.val < smax(years_a$transfer_availTech(linksModelToCalc,years_a,transfer_techs,vintage),
11278                                  years_a.val + transfer_techParam(transfer_techs,vintage,"lifeTime"))
11279          ) = yes;
11280   
11281  * Technologies have to be decomissioned in the interval of first avail + lifetime to last avail + lifetime
11282  set transfer_decomTech(linksModel,years,transfer_techs,vintage);
11283  transfer_decomTech(linksModel,years,transfer_techs,vintage)
11284    $(sum(years_a$transfer_usedTech(linksModel,years_a,transfer_techs,vintage), 1)
11285      and sum(yearsToCalc
11286        $(sameas(years, yearsToCalc)
11287          and yearsToCalc.val >= smin(years_a$transfer_availTech(linksModel,years_a,transfer_techs,vintage), years_a.val) + transfer_techParam(transfer_techs,vintage,"lifeTime")
11288          and yearsToCalc.val <= smax(years_a$transfer_availTech(linksModel,years_a,transfer_techs,vintage), years_a.val) + transfer_techParam(transfer_techs,vintage,"lifeTime")), 1))
11289    = yes;
11290   
11291  * Extend the decom frame to the year after the last year of usedTech
11292  transfer_decomTech(linksModel,yearsToCalc,transfer_techs,vintage)
11293    $(transfer_usedTech(linksModel,yearsToCalc-1,transfer_techs,vintage)
11294      and transfer_decomTech(linksModel,yearsToCalc-1,transfer_techs,vintage))
11295    = yes;
11296   
11297  parameter transfer_flowProfile(timeModel,linksModel,years,transfer_techs,vintage,pc_transfer_flowProfile);
11298   
11299  transfer_flowProfile(timeModelToCalc,linksModelToCalc,yearsToCalc,transfer_techs,vintage,"along")
11300      $transfer_finiteLinkLimit(linksModelToCalc,yearsToCalc,transfer_techs)
11301      = (sum(linksData$(links_aggregate(linksModelToCalc,linksData)
11302                       and transfer_incidenceData_flip(linksData) = 1),
11303              transfer_flowProfileIn_aggTime(timeModelToCalc,linksData,yearsToCalc,transfer_techs,"along")
11304              * transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"linksUpperLimit"))
11305          + sum(linksData$(links_aggregate(linksModelToCalc,linksData)
11306                          and transfer_incidenceData_flip(linksData) = -1),
11307              transfer_flowProfileIn_aggTime(timeModelToCalc,linksData,yearsToCalc,transfer_techs,"against")
11308              * transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"linksUpperLimit")))
11309      / sum(linksData$links_aggregate(linksModelToCalc,linksData),
11310              transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"linksUpperLimit"));
11311   
11312  transfer_flowProfile(timeModelToCalc,linksModelToCalc,yearsToCalc,transfer_techs,vintage,"against")
11313      $transfer_finiteLinkLimit(linksModelToCalc,yearsToCalc,transfer_techs)
11314      = (sum(linksData$(links_aggregate(linksModelToCalc,linksData)
11315                       and transfer_incidenceData_flip(linksData) = 1),
11316              transfer_flowProfileIn_aggTime(timeModelToCalc,linksData,yearsToCalc,transfer_techs,"against")
11317              * transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"linksUpperLimit"))
11318          + sum(linksData$(links_aggregate(linksModelToCalc,linksData)
11319                          and transfer_incidenceData_flip(linksData) = -1),
11320              transfer_flowProfileIn_aggTime(timeModelToCalc,linksData,yearsToCalc,transfer_techs,"along")
11321              * transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"linksUpperLimit")))
11322      / sum(linksData$links_aggregate(linksModelToCalc,linksData),
11323              transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"linksUpperLimit"));
11324   
11325  transfer_flowProfile(timeModelToCalc,linksModelToCalc,yearsToCalc,transfer_techs,vintage,"along")
11326      $transfer_infiniteLinkLimit(linksModelToCalc,yearsToCalc,transfer_techs)
11327      = (sum(linksData$(links_aggregate(linksModelToCalc,linksData)
11328                       and transfer_incidenceData_flip(linksData) = 1
11329                       and transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"linksUpperLimit") = inf ),
11330              transfer_flowProfileIn_aggTime(timeModelToCalc,linksData,yearsToCalc,transfer_techs,"along"))
11331          + sum(linksData$(links_aggregate(linksModelToCalc,linksData)
11332                          and transfer_incidenceData_flip(linksData) = -1
11333                          and transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"linksUpperLimit") = inf ),
11334              transfer_flowProfileIn_aggTime(timeModelToCalc,linksData,yearsToCalc,transfer_techs,"against")))
11335      / sum(linksData$(links_aggregate(linksModelToCalc,linksData)
11336                      and transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"linksUpperLimit") = inf ),
11337              1);
11338   
11339  transfer_flowProfile(timeModelToCalc,linksModelToCalc,yearsToCalc,transfer_techs,vintage,"against")
11340      $transfer_infiniteLinkLimit(linksModelToCalc,yearsToCalc,transfer_techs)
11341      = (sum(linksData$(links_aggregate(linksModelToCalc,linksData)
11342                       and transfer_incidenceData_flip(linksData) = 1
11343                       and transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"linksUpperLimit") = inf ),
11344              transfer_flowProfileIn_aggTime(timeModelToCalc,linksData,yearsToCalc,transfer_techs,"against"))
11345          + sum(linksData$(links_aggregate(linksModelToCalc,linksData)
11346                          and transfer_incidenceData_flip(linksData) = -1
11347                          and transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"linksUpperLimit") = inf ),
11348              transfer_flowProfileIn_aggTime(timeModelToCalc,linksData,yearsToCalc,transfer_techs,"along")))
11349      / sum(linksData$(links_aggregate(linksModelToCalc,linksData)
11350                      and transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"linksUpperLimit") = inf ),
11351              1);
11352  option clear = transfer_flowProfileIn_aggTime;
11353   
11354  * Orientation of links affects the flowAlongLimit/flowAgainstLimit
11355   
11356  transfer_linksParam(linksModelToCalc,years,transfer_techs,"flowAlongLimit")
11357      $transfer_finiteLinkLimit(linksModelToCalc,years,transfer_techs)
11358      = (sum(linksData$(links_aggregate(linksModelToCalc,linksData)
11359                       and transfer_incidenceData_flip(linksData) = 1),
11360              transfer_linksParamIn(linksData,years,transfer_techs,"flowAlongLimit")
11361              * transfer_linksParamIn(linksData,years,transfer_techs,"linksUpperLimit"))
11362          + sum(linksData$(links_aggregate(linksModelToCalc,linksData)
11363                          and transfer_incidenceData_flip(linksData) = -1),
11364              transfer_linksParamIn(linksData,years,transfer_techs,"flowAgainstLimit")
11365              * transfer_linksParamIn(linksData,years,transfer_techs,"linksUpperLimit")))
11366      / sum(linksData$links_aggregate(linksModelToCalc,linksData),
11367              transfer_linksParamIn(linksData,years,transfer_techs,"linksUpperLimit"));
11368   
11369  transfer_linksParam(linksModelToCalc,years,transfer_techs,"flowAgainstLimit")
11370      $transfer_finiteLinkLimit(linksModelToCalc,years,transfer_techs)
11371      = (sum(linksData$(links_aggregate(linksModelToCalc,linksData)
11372                       and transfer_incidenceData_flip(linksData) = -1),
11373              transfer_linksParamIn(linksData,years,transfer_techs,"flowAlongLimit")
11374              * transfer_linksParamIn(linksData,years,transfer_techs,"linksUpperLimit"))
11375          + sum(linksData$(links_aggregate(linksModelToCalc,linksData)
11376                          and transfer_incidenceData_flip(linksData) = 1),
11377              transfer_linksParamIn(linksData,years,transfer_techs,"flowAgainstLimit")
11378              * transfer_linksParamIn(linksData,years,transfer_techs,"linksUpperLimit")))
11379      / sum(linksData$links_aggregate(linksModelToCalc,linksData),
11380              transfer_linksParamIn(linksData,years,transfer_techs,"linksUpperLimit"));
11381   
11382  transfer_linksParam(linksModelToCalc,years,transfer_techs,"flowAlongLimit")
11383      $transfer_infiniteLinkLimit(linksModelToCalc,years,transfer_techs)
11384      = (sum(linksData$(links_aggregate(linksModelToCalc,linksData)
11385                       and transfer_incidenceData_flip(linksData) = 1
11386                       and transfer_linksParamIn(linksData,years,transfer_techs,"linksUpperLimit") = inf),
11387              transfer_linksParamIn(linksData,years,transfer_techs,"flowAlongLimit"))
11388          + sum(linksData$(links_aggregate(linksModelToCalc,linksData)
11389                          and transfer_incidenceData_flip(linksData) = -1
11390                          and transfer_linksParamIn(linksData,years,transfer_techs,"linksUpperLimit") = inf),
11391              transfer_linksParamIn(linksData,years,transfer_techs,"flowAgainstLimit")))
11392      / sum(linksData$(links_aggregate(linksModelToCalc,linksData)
11393                      and transfer_linksParamIn(linksData,years,transfer_techs,"linksUpperLimit") = inf ),
11394              1);
11395   
11396  transfer_linksParam(linksModelToCalc,years,transfer_techs,"flowAgainstLimit")
11397      $transfer_infiniteLinkLimit(linksModelToCalc,years,transfer_techs)
11398      = (sum(linksData$(links_aggregate(linksModelToCalc,linksData)
11399                       and transfer_incidenceData_flip(linksData) = -1
11400                       and transfer_linksParamIn(linksData,years,transfer_techs,"linksUpperLimit") = inf),
11401              transfer_linksParamIn(linksData,years,transfer_techs,"flowAlongLimit"))
11402          + sum(linksData$(links_aggregate(linksModelToCalc,linksData)
11403                          and transfer_incidenceData_flip(linksData) = 1
11404                          and transfer_linksParamIn(linksData,years,transfer_techs,"linksUpperLimit") = inf),
11405              transfer_linksParamIn(linksData,years,transfer_techs,"flowAgainstLimit")))
11406      / sum(linksData$(links_aggregate(linksModelToCalc,linksData)
11407                      and transfer_linksParamIn(linksData,years,transfer_techs,"linksUpperLimit") = inf ),
11408              1);
11409   
11410  * Mapping for grid segments using DC optimal power flow
11411  set gridSegments_dcopf(linksModel,transfer_techs,gridSegments);
11412  gridSegments_dcopf(linksModelToCalc,transfer_techs,gridSegments)
11413      $transfer_gridSegments(linksModelToCalc,transfer_techs,gridSegments,"useDCopf")
11415      = yes;
11417   
11418  * Ensure each grid segment uses exactly one commodity
11419  parameter checkGridSegmentCommodities(gridSegments);
11420  checkGridSegmentCommodities(gridSegments)
11421      = sum (commodity$(sum((linksModelToCalc,transfer_techs,vintage)
11422                              $( transfer_coefficient(transfer_techs,vintage,commodity,"coefficient") > 0
11423                                  and gridSegments_dcopf(linksModelToCalc,transfer_techs,gridSegments)) , 1) > 0), 1);
11424   
11425  parameter transfer_incidenceSegments(nodesModel,linksModel,years,gridSegments);
11426  transfer_incidenceSegments(nodesModelToCalc,linksModelToCalc,yearsToCalc,gridSegments)
11427      $(sum((transfer_techs,vintage)$(transfer_usedTech(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
11428                                          and gridSegments_dcopf(linksModelToCalc,transfer_techs,gridSegments)
11429                                          and transfer_incidenceModel(nodesModelToCalc,linksModelToCalc) <> 0), 1) > 0)
11430      = transfer_incidenceModel(nodesModelToCalc,linksModelToCalc);
11431   
11432   
11436   
11437  scalar transfer_enableMIP;
11438  transfer_enableMIP = sum(transfer_usedTech(linksModelToCalc,yearsToCalc,transfer_techs,vintage)$transfer_techParam(transfer_techs,vintage,"mipLinks"), 1 );
11439   
11440   
11441  * ==== definition of variables ====
11442   
11443  * Initialise variables for linksBuild
11444  transfer_linksBuild.l(linksModel,years,transfer_techs,vintage)
11445      $transfer_availTech(linksModel,years,transfer_techs,vintage)
11446      = transfer_linksParam(linksModel,years,transfer_techs,"linksBuild");
11447  transfer_linksBuild.lo(linksModel,yearsToCalc,transfer_techs,vintage)
11448      $transfer_availTech(linksModel,yearsToCalc,transfer_techs,vintage)
11449      = transfer_linksBuild.l(linksModel,yearsToCalc,transfer_techs,vintage);
11450  transfer_linksBuild.fx(linksModel,years,transfer_techs,vintage)
11451      $transfer_linksParam(linksModel,years,transfer_techs,"noExpansion")
11452      = transfer_linksBuild.l(linksModel,years,transfer_techs,vintage);
11453   
11454  * Initialise variables for linksDecom
11455  transfer_linksDecom.l(linksModel,years,transfer_techs,vintage)
11456      $(transfer_decomTech(linksModel,years,transfer_techs,vintage)
11457        and years.val < sum(yearsToCalc$(ord(yearsToCalc) = 1), yearsToCalc.val))
11458      = sum((years_a,years_aa)$(sameas(years-1, years_aa)
11459                        and years_a.val > years_aa.val - transfer_techParam(transfer_techs,vintage,'lifeTime')
11460                        and years_a.val <= years.val - transfer_techParam(transfer_techs,vintage,'lifeTime')
11461                        and transfer_availTech(linksModel,years_a,transfer_techs,vintage)),
11462          transfer_linksBuild.l(linksModel,years_a,transfer_techs,vintage));
11463   
11464  transfer_linksDecom.l(linksModel,yearsToCalc,transfer_techs,vintage)
11465    $transfer_decomTech(linksModel,yearsToCalc,transfer_techs,vintage)
11466    = sum(years$
11467          (years.val < sum(yearsToCalc_a$(ord(yearsToCalc_a) = 1), yearsToCalc_a.val)
11468            and transfer_availTech(linksModel,years,transfer_techs,vintage)
11469            and years.val > sum(years_a$sameas(years_a, yearsToCalc-1), years_a.val) - transfer_techParam(transfer_techs,vintage,'lifeTime')
11470            and years.val <= yearsToCalc.val - transfer_techParam(transfer_techs,vintage,'lifeTime')),
11471        transfer_linksBuild.l(linksModel,years,transfer_techs,vintage))
11472      + sum(yearsToCalc_a$
11473          (yearsToCalc_a.val < sum(yearsToCalc_aa$(ord(yearsToCalc_aa) > 1), yearsToCalc_a.val)
11474            and transfer_availTech(linksModel,yearsToCalc_a,transfer_techs,vintage)
11475            and yearsToCalc_a.val > sum(years_a$sameas(years_a, yearsToCalc-1), years_a.val) - transfer_techParam(transfer_techs,vintage,'lifeTime')
11476            and yearsToCalc_a.val <= yearsToCalc.val - transfer_techParam(transfer_techs,vintage,'lifeTime')),
11477        transfer_linksBuild.l(linksModel,yearsToCalc_a,transfer_techs,vintage));
11478        ;
11479   
11480  transfer_linksDecom.lo(linksModel,yearsToCalc,transfer_techs,vintage)
11481      $(transfer_usedTech(linksModel,yearsToCalc,transfer_techs,vintage)
11482          and not transfer_techParam(transfer_techs,vintage,"freeDecom"))
11483      = transfer_linksDecom.l(linksModel,yearsToCalc,transfer_techs,vintage)
11484   
11485  * Calculate planned transfer links expansion
11486  parameter transfer_linksPlanned(linksModel,years,transfer_techs,vintage);
11487  transfer_linksPlanned(linksModel,years,transfer_techs,vintage) = 0;
11488  loop(years,
11489    transfer_linksPlanned(linksModel,years,transfer_techs,vintage)
11490      =
11491      transfer_linksPlanned(linksModel,years-1,transfer_techs,vintage)
11492          $transfer_usedTech(linksModel,years-1,transfer_techs,vintage)
11493      + transfer_linksBuild.l(linksModel,years,transfer_techs,vintage)
11494          $transfer_availTech(linksModel,years,transfer_techs,vintage)
11495      - transfer_linksDecom.l(linksModel,years,transfer_techs,vintage)
11496          $transfer_usedTech(linksModel,years,transfer_techs,vintage);
11497  );
11498   
11499  * Set initial state for planned units
11500  transfer_linksTotal.l(linksModel,years,transfer_techs,vintage)
11501    = transfer_linksPlanned(linksModel,years,transfer_techs,vintage)
11502   
11503  * Calculate if planned links expansion is bound by upper and lower limits
11504  set transfer_linkBoundsFixed(linksModel,years,transfer_techs);
11505  transfer_linkBoundsFixed(linksModel,years,transfer_techs)
11506    $(sum(vintage$transfer_usedTech(linksModel,years,transfer_techs,vintage),
11507          transfer_linksPlanned(linksModel,years,transfer_techs,vintage))
11508      = transfer_linksParam(linksModel,years,transfer_techs,"linksUpperLimit")
11509    and sum(vintage$transfer_usedTech(linksModel,years,transfer_techs,vintage),
11510          transfer_linksPlanned(linksModel,years,transfer_techs,vintage))
11511      = transfer_linksParam(linksModel,years,transfer_techs,"linksLowerLimit"))
11512    = yes;
11513   
11514  * Fix linksBuild, linksDecom, linksTotal if levels are predetermined by upper and lower limits
11515  transfer_linksBuild.fx(linksModel,years,transfer_techs,vintage)
11516    $(transfer_availTech(linksModel,years,transfer_techs,vintage)
11517      and transfer_linkBoundsFixed(linksModel,years,transfer_techs))
11518    = transfer_linksBuild.l(linksModel,years,transfer_techs,vintage);
11519  transfer_linksDecom.fx(linksModel,years,transfer_techs,vintage)
11520    $(transfer_usedTech(linksModel,years,transfer_techs,vintage)
11521      and transfer_linkBoundsFixed(linksModel,years,transfer_techs))
11522    = transfer_linksDecom.l(linksModel,years,transfer_techs,vintage);
11523  transfer_linksTotal.fx(linksModel,years,transfer_techs,vintage)
11524    $(transfer_usedTech(linksModel,years,transfer_techs,vintage)
11525      and transfer_linkBoundsFixed(linksModel,years,transfer_techs))
11526    = transfer_linksTotal.l(linksModel,years,transfer_techs,vintage);
11527   
11528  transfer_linksTotal_MIP.up(linksModel,years,transfer_techs,vintage)
11529      $(transfer_usedTech(linksModel,years,transfer_techs,vintage)
11530        and transfer_techParam(transfer_techs,vintage,"miplinks") = 1)
11531      = transfer_linksParam(linksModel,years,transfer_techs,"linksUpperLimit");
11532   
11533  * Add parameter for fixing capacities during myopic runs
11534  parameter transfer_linksDelta(linksModel,years,transfer_techs);
11535   
11536   
11537  * ==== declaration of equations ====
11538   
11539  equations
11540    Eq_transfer_linksBalance(linksModel,years,transfer_techs,vintage
11541      ) "Ensures the links balance over the planning period."
11542    Eq_transfer_linksFixedDecom(linksModel,years,transfer_techs,vintage
11543      ) "Restricts the fixed decommissioning of links over the planning period."
11544    Eq_transfer_linksFreeDecom(linksModel,years,transfer_techs,vintage
11545      ) "Restricts the free decommissioning of links over the planning period."
11546    Eq_transfer_linksUpperLimit(linksModel,years,transfer_techs
11547      ) "Upper bound for the total number of links."
11548    Eq_transfer_linksLowerLimit(linksModel,years,transfer_techs
11549      ) "Lower bound for the total number of links."
11550    Eq_transfer_linksTotalMIP(linksModel,years,transfer_techs,vintage
11551      ) "Fixes the total number of links to the corresponding integer variable."
11552   
11553    Eq_transfer_flowAlongUpperLimit(timeModel,linksModel,years,transfer_techs,vintage
11554      ) "Upper bound for the flow along the transfer links."
11555    Eq_transfer_flowAgainstUpperLimit(timeModel,linksModel,years,transfer_techs,vintage
11556      ) "Upper bound for the flow against the transfer links."
11557    Eq_transfer_dcopf_angleFlows(timeModel,linksModel,years,gridSegments
11558      )
11559    Eq_transfer_dcopf_cycleFlows(timeModel,years,cycles,gridSegments
11560      )
11561    ;
11562   
11563   
11564  * ==== equation definition ====
11565  * // ## Equations
11566  * // ### Transfer Links Balance
11567  * // Ensures that the transfer between nodes is balanced.
11568  * // {Eq_transfer_linksBalance}
11569  Eq_transfer_linksBalance(linksModelToCalc,yearsSel,transfer_techs,vintage)
11570      $((transfer_usedTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
11571            or sum(years$sameas(years,yearsSel), transfer_usedTech(linksModelToCalc,years-1,transfer_techs,vintage)))
11572          and not transfer_linkBoundsFixed(linksModelToCalc,yearsSel,transfer_techs))
11573      ..
11574      transfer_linksTotal(linksModelToCalc,yearsSel,transfer_techs,vintage)
11575      =e=
11576      sum(yearsToCalc$(ord(yearsToCalc) = 1 and sameas(yearsToCalc, yearsSel)),
11577        sum(years$sameas(years, yearsToCalc),
11578          transfer_linksTotal(linksModelToCalc,years-1,transfer_techs,vintage)
11579            $transfer_usedTech(linksModelToCalc,years-1,transfer_techs,vintage)))
11580      + sum((yearsToCalc)$(ord(yearsToCalc) > 1 and sameas(yearsToCalc, yearsSel)),
11581        transfer_linksTotal(linksModelToCalc,yearsToCalc-1,transfer_techs,vintage)
11582          $transfer_usedTech(linksModelToCalc,yearsToCalc-1,transfer_techs,vintage))
11583      + transfer_linksBuild(linksModelToCalc,yearsSel,transfer_techs,vintage)
11584          $transfer_availTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
11585      - transfer_linksDecom(linksModelToCalc,yearsSel,transfer_techs,vintage)
11586          $transfer_usedTech(linksModelToCalc,yearsSel,transfer_techs,vintage);
11587   
11588  * // ### Transfer Links Fixed Decommissioning
11589  * // Balances fixed link decommissioning.
11590  * // {Eq_transfer_linksFixedDecom}
11591  Eq_transfer_linksFixedDecom(linksModelToCalc,yearsSel,transfer_techs,vintage)
11592      $(transfer_decomTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
11593          and not transfer_techParam(transfer_techs,vintage,"freeDecom") = 1
11594          and not transfer_linkBoundsFixed(linksModelToCalc,yearsSel,transfer_techs))
11595      ..
11596      transfer_linksDecom(linksModelToCalc,yearsSel,transfer_techs,vintage)
11597      =e=
11598      sum(years$
11599          (transfer_availTech(linksModelToCalc,years,transfer_techs,vintage)
11600              and years.val > sum(yearsToCalc$sameas(yearsToCalc+1, yearsSel), yearsToCalc.val) - transfer_techParam(transfer_techs,vintage,'lifeTime')
11601              and years.val <= yearsSel.val - transfer_techParam(transfer_techs,vintage,'lifeTime')),
11602          transfer_linksBuild(linksModelToCalc,years,transfer_techs,vintage));
11603   
11604  * // ### Transfer Links Free Decommissioning
11605  * // Balances free link decommissioning.
11606  * // {Eq_transfer_linksFreeDecom}
11607  Eq_transfer_linksFreeDecom(linksModelToCalc,yearsSel,transfer_techs,vintage)
11608      $((transfer_decomTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
11609          or transfer_usedTech(linksModelToCalc,yearsSel,transfer_techs,vintage))
11610          and transfer_techParam(transfer_techs,vintage,"freeDecom") = 1)
11611      ..
11612      sum(years$
11613            ((transfer_decomTech(linksModelToCalc,years,transfer_techs,vintage)
11614              or transfer_usedTech(linksModelToCalc,years,transfer_techs,vintage))
11615              and years.val < sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)),
11616          transfer_linksDecom(linksModelToCalc,years,transfer_techs,vintage))
11617      + sum(yearsToCalc$
11618            ((transfer_decomTech(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
11619              or transfer_usedTech(linksModelToCalc,yearsToCalc,transfer_techs,vintage))
11620              and yearsToCalc.val >= sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
11621              and yearsToCalc.val <= yearsSel.val),
11622          transfer_linksDecom(linksModelToCalc,yearsToCalc,transfer_techs,vintage))
11623      =g=
11624      sum(years$
11625            (transfer_availTech(linksModelToCalc,years,transfer_techs,vintage)
11626              and years.val < sum(yearsToCalc$(ord(yearsToCalc)=1), yearsToCalc.val) - transfer_techParam(transfer_techs,vintage,'lifeTime')),
11627          transfer_linksBuild(linksModelToCalc,years,transfer_techs,vintage))
11628      + sum(yearsToCalc$
11629            (transfer_availTech(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
11630              and yearsToCalc.val >= sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
11631              and yearsToCalc.val <= yearsSel.val - transfer_techParam(transfer_techs,vintage,'lifeTime')),
11632          transfer_linksBuild(linksModelToCalc,yearsToCalc,transfer_techs,vintage));
11633   
11634  * // ### Transfer Links Lower Limit
11635  * // Ensures link capacity lower limits.
11636  * // {Eq_transfer_linksLowerLimit}
11637  Eq_transfer_linksLowerLimit(linksModelToCalc,yearsSel,transfer_techs)
11638      $(transfer_linksParam(linksModelToCalc,yearsSel,transfer_techs,'linksLowerLimit') > 0 )
11639      ..
11640      sum(vintage$transfer_usedTech(linksModelToCalc,yearsSel,transfer_techs,vintage),
11641          transfer_linksTotal(linksModelToCalc,yearsSel,transfer_techs,vintage))
11642      =g=
11643      transfer_linksParam(linksModelToCalc,yearsSel,transfer_techs,"linksLowerLimit");
11644   
11645  * // ### Transfer Links Upper Limit
11646  * // Ensures link capacity upper limits.
11647  * // {Eq_transfer_linksUpperLimit}
11648  Eq_transfer_linksUpperLimit(linksModelToCalc,yearsSel,transfer_techs)
11649      $(transfer_linksParam(linksModelToCalc,yearsSel,transfer_techs,'linksUpperLimit') >= 0
11650          and transfer_linksParam(linksModelToCalc,yearsSel,transfer_techs,'linksUpperLimit') < +inf )
11651      ..
11652      sum(vintage$transfer_usedTech(linksModelToCalc,yearsSel,transfer_techs,vintage),
11653          transfer_linksTotal(linksModelToCalc,yearsSel,transfer_techs,vintage))
11654      =l=
11655      transfer_linksParam(linksModelToCalc,yearsSel,transfer_techs,"linksUpperLimit");
11656   
11657  * // ### Transfer Links Total MIP
11658  * // Ensures number of MIP links.
11659  * // {Eq_transfer_linksTotalMIP}
11660  Eq_transfer_linksTotalMIP(linksModelToCalc,yearsSel,transfer_techs,vintage)
11661      $(transfer_usedTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
11662          and transfer_techParam(transfer_techs,vintage,"mipLinks"))
11663      ..
11664      transfer_linksTotal(linksModelToCalc,yearsSel,transfer_techs,vintage)
11665      =e=
11666      transfer_linksTotal_MIP(linksModelToCalc,yearsSel,transfer_techs,vintage);
11667   
11668  * // ### Transfer Links Flow Along Upper Limit
11669  * // Ensures links flow along upper limit.
11670  * // {Eq_transfer_flowAlongUpperLimit}
11671  Eq_transfer_flowAlongUpperLimit(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
11672      $transfer_usedTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
11673      ..
11674      transfer_flowAlong(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
11675      =l=
11676      transfer_flowProfile(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage,"along")
11677      * transfer_linksTotal(linksModelToCalc,yearsSel,transfer_techs,vintage)
11678      * transfer_techParam(transfer_techs,vintage,"flowUpperLimit")
11679      ;
11680   
11681  * // ### Transfer Links Flow Against Upper Limit
11682  * // Ensures links flow against upper limit.
11683  * // {Eq_transfer_flowAgainstUpperLimit}
11684  Eq_transfer_flowAgainstUpperLimit(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
11685      $transfer_usedTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
11686      ..
11687      transfer_flowAgainst(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
11688      =l=
11689      transfer_flowProfile(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage,"against")
11690      * transfer_linksTotal(linksModelToCalc,yearsSel,transfer_techs,vintage)
11691      * transfer_techParam(transfer_techs,vintage,"flowUpperLimit")
11692      ;
11693   
11694  set transfer_usedOpf(linksModel,years,gridSegments,transfer_techs,vintage);
11695  transfer_usedOpf(linksModel,yearsToCalc,gridSegments,transfer_techs,vintage)
11696      $(transfer_usedTech(linksModel,yearsToCalc,transfer_techs,vintage)
11697          and gridSegments_dcopf(linksModel,transfer_techs,gridSegments))
11698      = yes;
11699   
11700  set transfer_usedOpfLinks(linksModel,years,gridSegments);
11701  option transfer_usedOpfLinks < transfer_usedOpf;
11702   
11703  set transfer_usedOpfSegments(years,gridSegments);
11704  option transfer_usedOpfSegments < transfer_usedOpf;
11705   
11709  * // ### Transfer DC optimal flow angle flows
11710  * // Angle flows.
11711  * // {Eq_transfer_dcopf_cycleFlows}
11712  Eq_transfer_dcopf_angleFlows(timeModelSel,linksModelToCalc,yearsSel,gridSegments)
11713      $transfer_usedOpfLinks(linksModelToCalc,yearsSel,gridSegments)
11714      ..
11715      sum ((transfer_techs,vintage)
11716              $transfer_usedOpf(linksModelToCalc,yearsSel,gridSegments,transfer_techs,vintage),
11717          ( transfer_flowAlong(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
11718              - transfer_flowAgainst(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage) )
11719          * transfer_dcopf_Xtech(linksModelToCalc,yearsSel,transfer_techs,vintage,gridSegments) )
11720      =e=
11721      sum ( nodesModelSel,
11722          - transfer_incidenceModel(nodesModelSel,linksModelToCalc)
11723          * transfer_dcopf_voltageAngle(timeModelSel,nodesModelSel,yearsSel,gridSegments));
11727   
11728   
11729  * ==== model definition ====
11730   
11731  Model M_transfer
11732  /
11733    Eq_transfer_linksBalance
11734    Eq_transfer_linksFixedDecom
11735    Eq_transfer_linksFreeDecom
11736    Eq_transfer_linksLowerLimit
11737    Eq_transfer_linksUpperLimit
11738    Eq_transfer_linksTotalMIP
11739    Eq_transfer_flowAlongUpperLimit
11740    Eq_transfer_flowAgainstUpperLimit
11744    Eq_transfer_dcopf_angleFlows
11748  /;
INCLUDE    C:\Local\REMix\framework\remix\framework\model\source\core\sourcesink.gms
11750  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
11751  * SPDX-License-Identifier: BSD-3-Clause
11752   
11753  * // # core_sourcesink
11754  * // The equations in this file describe the sources and sinks in the model.
11755   
11756  * // ## Variables
11757  * // {special_table_sourcesink_variables}
12269   
12270  * // ## Aggregation of profiles
12271  * // Profiles are rescaled based on the annual sum.
12272   
12273  set sourcesink_usesProfileScaling(nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile);
12274  sourcesink_usesProfileScaling(nodesData,years,sourcesink_techs,commodity,"fixed")
12275      $sourcesink_configIn(nodesData,years,sourcesink_techs,commodity,"scaleFixProfileWithFixSum") = yes;
12276  sourcesink_usesProfileScaling(nodesData,years,sourcesink_techs,commodity,"lower")
12277      $sourcesink_configIn(nodesData,years,sourcesink_techs,commodity,"scaleLowProfileWithLowSum") = yes;
12278  sourcesink_usesProfileScaling(nodesData,years,sourcesink_techs,commodity,"upper")
12279      $sourcesink_configIn(nodesData,years,sourcesink_techs,commodity,"scaleUpProfileWithUpSum") = yes;
12280   
12281  parameter sourcesink_ProfileSum(nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile);
12282  sourcesink_ProfileSum(nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile)
12283      $sourcesink_usesProfileScaling(nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile)
12284      = sum(timeData, sourcesink_profileIn(timeData,nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile));
12285   
12286  parameter sourcesink_ProfileAbsSum(nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile);
12287  sourcesink_ProfileAbsSum(nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile)
12288      $sourcesink_usesProfileScaling(nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile)
12289      = sum(timeData, abs(sourcesink_profileIn(timeData,nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile)));
12290   
12291  set sourcesink_ProfileScaleError(nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile);
12292  sourcesink_ProfileScaleError(nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile)
12293      $(sourcesink_usesProfileScaling(nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile)
12294          and sourcesink_ProfileSum(nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile) = 0
12295          and sourcesink_ProfileAbsSum(nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile) > 0)
12296      = yes;
12297   
12298  abort$sum((nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile),
12299              sourcesink_ProfileScaleError(nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile)) "One or more profiles cannot be rescaled as their annual sum equals zero!"
12300   
12301  * calculate scaling factor for each type
12302  parameter sourcesink_scalingFactor(nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile);
12303  sourcesink_scalingFactor(nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile)
12304      $(sourcesink_ProfileSum(nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile)
12305          and sourcesink_usesProfileScaling(nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile))
12306      = sum(pc_sourcesink_annualSum$sameas(pc_sourcesink_profile,pc_sourcesink_annualSum),
12307          sourcesink_annualSumIn(nodesData,years,sourcesink_techs,commodity,pc_sourcesink_annualSum)
12308              / sourcesink_ProfileSum(nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile));
12309   
12310  * rescale profiles
12311  sourcesink_profileIn(timeData,nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile)
12312      $sourcesink_usesProfileScaling(nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile)
12313      = sourcesink_profileIn(timeData,nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile)
12314          * sourcesink_scalingFactor(nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile)
12315   
12316  * // ## Aggregation of profiles
12317  * // Profiles are aggregated based on the mapping from data nodes to model nodes.
12318   
12319  * ==== aggregation of profiles ====
12320  set sourcesink_usesProfileIn(nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile);
12321  option sourcesink_usesProfileIn < sourcesink_profileIn
12322   
12323  set sourcesink_usesProfile(nodesModel,years,sourcesink_techs,commodity,pc_sourcesink_profile);
12324  sourcesink_usesProfile(nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity,pc_sourcesink_profile)
12325      $sum(nodesData$(aggregateNodesModel(nodesData,nodesModelToCalc)
12326          and sourcesink_usesProfileIn(nodesData,yearsToCalc,sourcesink_techs,commodity,pc_sourcesink_profile)), 1)
12327      = yes;
12328   
12329  * aagregate time dimension
12330  parameter sourcesink_profileIn_aggTime(timeModel,nodesData,yearsToCalc,sourcesink_techs,commodity,pc_sourcesink_profile);
12331  sourcesink_profileIn_aggTime(timeModelToCalc,nodesData,yearsToCalc,sourcesink_techs,commodity,pc_sourcesink_profile)
12332    $sourcesink_usesProfileIn(nodesData,yearsToCalc,sourcesink_techs,commodity,pc_sourcesink_profile)
12333    = sum(timeData$timeMapping(timeData,timeModelToCalc),
12334            sourcesink_profileIn(timeData,nodesData,yearsToCalc,sourcesink_techs,commodity,pc_sourcesink_profile)
12335            / timeLength(timeModelToCalc));
12336  option clear = sourcesink_profileIn;
12337   
12338  * sum up absolute profiles
12339  parameter sourcesink_profile(timeModel,nodesModel,years,sourcesink_techs,commodity,pc_sourcesink_profile);
12340  sourcesink_profile(timeModelToCalc,nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity,pc_sourcesink_profile)
12341      $sourcesink_usesProfile(nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity,pc_sourcesink_profile)
12342      = sum(nodesData$aggregateNodesModel(nodesData,nodesModelToCalc),
12343              sourcesink_profileIn_aggTime(timeModelToCalc,nodesData,yearsToCalc,sourcesink_techs,commodity,pc_sourcesink_profile));
12344  option clear = sourcesink_profileIn_aggTime;
12345   
12346  set sourcesink_enabled(nodesModel,years,sourcesink_techs,commodity);
12347  option sourcesink_enabled < sourcesink_config;
12348   
12350   
12351  * ==== declaration of variables ====
12352  * // ## Bounding of variables
12353  * // Source-sink variables with either a lower, fixed, or upper profile are bounded to their respective profiles given by the input parameters.
12354   
12355  sourcesink_flow.lo(timeModelToCalc,nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity)
12356      $( sourcesink_enabled(nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity)
12357          and sourcesink_config(nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity,"usesLowerProfile") = 1
12358          and sourcesink_profile(timeModelToCalc,nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity,"lower") > -inf )
12359      = sourcesink_profile(timeModelToCalc,nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity,"lower");
12360   
12361  sourcesink_flow.up(timeModelToCalc,nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity)
12362      $( sourcesink_enabled(nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity)
12363          and sourcesink_config(nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity,"usesUpperProfile") = 1
12364          and sourcesink_profile(timeModelToCalc,nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity,"upper") < inf )
12365      = sourcesink_profile(timeModelToCalc,nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity,"upper");
12366   
12367  sourcesink_flow.fx(timeModelToCalc,nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity)
12368      $( sourcesink_enabled(nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity)
12369          and sourcesink_config(nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity,"usesFixedProfile") = 1 )
12370      = sourcesink_profile(timeModelToCalc,nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity,"fixed");
12371   
12372  option clear = sourcesink_profile;
12373   
12374   
12375  * ==== equation definition ====
12376  * // ## Equations
12377  equations
12378  Eq_sourcesink_useFixedSum(nodesModel,years,sourcesink_techs,commodity
12379      ) "Fixes the annual sum from sources / to sinks"
12380  Eq_sourcesink_useLowerSum(nodesModel,years,sourcesink_techs,commodity
12381      ) "Limits the lower sum from sources / to sinks"
12382  Eq_sourcesink_useUpperSum(nodesModel,years,sourcesink_techs,commodity
12383      ) "Limits the upper sum from sources / to sinks"
12384    ;
12385   
12386  * // ### Fixed annual sums for sources and sinks
12387  * // Ensures that the sources and sinks with annual sums given as fixed limits are balanced.
12388  * // {Eq_sourcesink_useFixedSum}
12389  Eq_sourcesink_useFixedSum(nodesModelSel,yearsSel,sourcesink_techs,commodity)
12390      $( sourcesink_enabled(nodesModelSel,yearsSel,sourcesink_techs,commodity)
12391          and sourcesink_config(nodesModelSel,yearsSel,sourcesink_techs,commodity,"usesFixedSum") = 1 )
12392      ..
12393      sum(timeModelSel,
12394          sourcesink_flow(timeModelSel,nodesModelSel,yearsSel,sourcesink_techs,commodity))
12395      =e=
12396      sourcesink_annualSum(nodesModelSel,yearsSel,sourcesink_techs,commodity,"fixed")
12397      ;
12398   
12399  * // ### Lower annual sums for sources and sinks
12400  * // Ensures that the sources and sinks with annual sums given as lower limits are balanced.
12401  * // {Eq_sourcesink_useLowerSum}
12402  Eq_sourcesink_useLowerSum(nodesModelSel,yearsSel,sourcesink_techs,commodity)
12403      $( sourcesink_enabled(nodesModelSel,yearsSel,sourcesink_techs,commodity)
12404          and sourcesink_config(nodesModelSel,yearsSel,sourcesink_techs,commodity,"usesLowerSum") = 1
12405          and sourcesink_annualSum(nodesModelSel,yearsSel,sourcesink_techs,commodity,"lower") > -inf )
12406      ..
12407      sum(timeModelSel,
12408          sourcesink_flow(timeModelSel,nodesModelSel,yearsSel,sourcesink_techs,commodity))
12409      =g=
12410      sourcesink_annualSum(nodesModelSel,yearsSel,sourcesink_techs,commodity,"lower")
12411      ;
12412   
12413  * // ### Upper annual sums for sources and sinks
12414  * // Ensures that the sources and sinks with annual sums given as upper limits are balanced.
12415  * // {Eq_sourcesink_useUpperSum}
12416  Eq_sourcesink_useUpperSum(nodesModelSel,yearsSel,sourcesink_techs,commodity)
12417      $( sourcesink_enabled(nodesModelSel,yearsSel,sourcesink_techs,commodity)
12418          and sourcesink_config(nodesModelSel,yearsSel,sourcesink_techs,commodity,"usesUpperSum") = 1
12419          and sourcesink_annualSum(nodesModelSel,yearsSel,sourcesink_techs,commodity,"upper") < inf )
12420      ..
12421      sum(timeModelSel,
12422          sourcesink_flow(timeModelSel,nodesModelSel,yearsSel,sourcesink_techs,commodity))
12423      =l=
12424      sourcesink_annualSum(nodesModelSel,yearsSel,sourcesink_techs,commodity,"upper")
12425      ;
12426   
12427   
12428  * ==== model definition ====
12429   
12430  Model M_sourcesink
12431  /
12432    Eq_sourcesink_useFixedSum
12433    Eq_sourcesink_useLowerSum
12434    Eq_sourcesink_useUpperSum
12435  /;
INCLUDE    C:\Local\REMix\framework\remix\framework\model\source\core\balance.gms
12437  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
12438  * SPDX-License-Identifier: BSD-3-Clause
12439   
12440  * // # balance
12441  * // The equations in this file describe the commodity balancing in the model.
12442   
12443  Equations
12444    Eq_balance_commodities(timeModel,nodesModel,years,commodity
12445      ) "Balance for each commodity used in each time step, region, and year";
12446   
12447   
12448  * ==== calculation of mappings ====
12449   
12450  set balance_techComm(techs,commodity);
12451  balance_techComm(converter_techs(techs),commodity)
12452      $sum((vintage,activity)$converter_coefficient(converter_techs,vintage,activity,commodity,"coefficient"), 1) = yes;
12453  balance_techComm(storage_techs(techs),commodity)
12454      $sum((vintage)$storage_sizeParam(storage_techs,vintage,commodity,"size"), 1) = yes;
12455  balance_techComm(transfer_techs(techs),commodity)
12456      $sum((vintage)$transfer_coefficient(transfer_techs,vintage,commodity,"coefficient"), 1) = yes;
12457  balance_techComm(sourcesink_techs(techs),commodity)
12458      $sum((nodesModelToCalc,yearsToCalc)$sourcesink_enabled(nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity), 1) = yes;
12459   
12460  set balance_usedConverter(nodesModel,years,commodity);
12461  set balance_usedStorage(nodesModel,years,commodity);
12462  set balance_usedTransfer(nodesModel,years,commodity);
12463  set balance_usedSourceSink(nodesModel,years,commodity);
12464  set balance_usedBalance(nodesModel,years,commodity);
12465   
12466  balance_usedConverter(nodesModel,years,commodity)
12467      = sum ((converter_techs,vintage,activity)
12468              $( converter_coefficient(converter_techs,vintage,activity,commodity,"coefficient") <> 0
12469                  and converter_usedTech(nodesModel,years,converter_techs,vintage) ), 1);
12470   
12471  balance_usedStorage(nodesModel,years,commodity)
12472      = sum ((storage_techs,vintage,activity)
12473              $(storage_sizeParam(storage_techs,vintage,commodity,"size") <> 0
12474                  and storage_usedTech(nodesModel,years,storage_techs,vintage) ), 1);
12475   
12476  balance_usedTransfer(nodesModel,years,commodity)
12477      = sum ((linksModel,transfer_techs,vintage)
12478              $(transfer_coefficient(transfer_techs,vintage,commodity,"coefficient") <> 0
12479                  and transfer_incidenceModel(nodesModel,linksModel) <> 0), 1);
12480   
12481  option balance_usedSourceSink < sourcesink_enabled;
12482   
12483  balance_usedBalance(nodesModel,years,commodity)
12484      $(balance_usedConverter(nodesModel,years,commodity)
12485          or balance_usedStorage(nodesModel,years,commodity)
12486          or balance_usedTransfer(nodesModel,years,commodity)
12487          or balance_usedSourceSink(nodesModel,years,commodity) )
12488      = yes;
12489   
12490   
12491  * ==== equation definition ====
12492   
12493  * // ### Balance commodities
12494  * // Balancing of commodities for all model regions, time steps, and years
12495  * // {Eq_balance_commodities}
12496  Eq_balance_commodities(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,commodity)
12497      $balance_usedBalance(nodesModelSel,yearsSel,commodity)
12498      ..
12499  * converter
12500      sum((converter_techs,vintage,activity)
12501              $( converter_coefficientProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity,commodity) <> 0
12502                  AND converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage) ),
12503          converter_activity(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity)
12504              * converter_coefficientProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity,commodity)
12505              * timeLength(timeModelSel)
12506          + converter_unitsUsingActivity_MIP(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity)
12507              * converter_coefficient(converter_techs,vintage,activity,commodity,"constant")
12508              * timeLength(timeModelSel))
12509   
12510  * storages
12511      + sum((storage_techs,vintage)
12512              $( storage_sizeParam(storage_techs,vintage,commodity,"size") <> 0
12513                  and storage_usedTech(nodesModelSel,yearsSel,storage_techs,vintage) ),
12514          storage_level(timeModelToCalc--1,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
12515          - storage_level(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
12517          - storage_losses(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
12518          * timeLength(timeModelSel)
12520          )
12521   
12522  * transfer
12523      + sum((linksModel,transfer_techs,vintage)
12524              $(transfer_usedTech(linksModel,yearsSel,transfer_techs,vintage)
12525                  and linksModelToCalc(linksModel)),
12526          (   transfer_flowAlong(timeModelSel,linksModel,yearsSel,transfer_techs,vintage)
12527                  $(transfer_incidenceModel(nodesModelSel,linksModel) > 0)
12528            + transfer_flowAgainst(timeModelSel,linksModel,yearsSel,transfer_techs,vintage)
12529                  $(transfer_incidenceModel(nodesModelSel,linksModel) < 0) )
12530          * transfer_coefficient(transfer_techs,vintage,commodity,"coefficient")
12531          * timeLength(timeModelSel))
12532   
12533      - sum((linksModel,transfer_techs,vintage)
12534              $(transfer_usedTech(linksModel,yearsSel,transfer_techs,vintage)
12535                  and linksModelToCalc(linksModel)),
12536          (   transfer_flowAlong(timeModelSel,linksModel,yearsSel,transfer_techs,vintage)
12537                  $(transfer_incidenceModel(nodesModelSel,linksModel) < 0)
12538            + transfer_flowAgainst(timeModelSel,linksModel,yearsSel,transfer_techs,vintage)
12539                  $(transfer_incidenceModel(nodesModelSel,linksModel) > 0) )
12540          * transfer_coefficient(transfer_techs,vintage,commodity,"coefficient")
12541          * timeLength(timeModelSel))
12542   
12543      + 0.5 * sum((linksModel,transfer_techs,vintage)
12544              $(transfer_usedTech(linksModel,yearsSel,transfer_techs,vintage)
12545                  AND linksModelToCalc(linksModel)),
12546          (   transfer_flowAlong(timeModelSel,linksModel,yearsSel,transfer_techs,vintage)
12547                  $(transfer_incidenceModel(nodesModelSel,linksModel) <> 0)
12548            + transfer_flowAgainst(timeModelSel,linksModel,yearsSel,transfer_techs,vintage)
12549                  $(transfer_incidenceModel(nodesModelSel,linksModel) <> 0) )
12550          * timeLength(timeModelSel)
12551          * ( transfer_coefPerFlow(transfer_techs,vintage,commodity,"coefPerFlow")
12552              + sum(link_types,
12553                  transfer_coefPerLength(transfer_techs,vintage,commodity,link_types,"coefPerLength")
12554                  * transfer_lengthParam(linksModel,link_types,"length"))))
12555   
12556  * sourcesink
12557      + sum((sourcesink_techs)
12558              $sourcesink_enabled(nodesModelSel,yearsSel,sourcesink_techs,commodity),
12559          sourcesink_flow(timeModelSel,nodesModelSel,yearsSel,sourcesink_techs,commodity)
12560          * timeLength(timeModelSel))
12561      =e=
12562      0;
12563   
12564   
12565  * ==== model definition ====
12566   
12567  Model M_balance
12568  /
12569    Eq_balance_commodities
12570  /;
12571   
INCLUDE    C:\Local\REMix\framework\remix\framework\model\source\accounting\equations.gms
12573  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
12574  * SPDX-License-Identifier: BSD-3-Clause
12575   
12576  * // # accounting_equations
12577   
12578  * ==== declaration of variables ====
12579   
12580  variables
12581  accounting_indicator(accNodesModel,accYears,indicator)
12582  accounting_indicator_links(linksModel,years,indicator)
12583  accounting_objective
12584    ;
12585   
12586   
12587  * ==== definition of variables ====
12588   
12589  * set the variable levels to be fixed for years before the optimization years
12590  accounting_indicator.l(accNodesModel,accYears,indicator)
12591      $activeIndicators(accNodesModel,accYears,indicator)
12592      = 0;
12593   
12594  accounting_indicator.lo(accNodesModel,accYears,indicator)
12595      $(accounting_indicatorBounds(accNodesModel,accYears,indicator,"useLower") <> 0 )
12596      = accounting_indicatorBounds(accNodesModel,accYears,indicator,"lowerValue");
12597   
12598  accounting_indicator.up(accNodesModel,accYears,indicator)
12599      $(accounting_indicatorBounds(accNodesModel,accYears,indicator,"useUpper") <> 0 )
12600      = accounting_indicatorBounds(accNodesModel,accYears,indicator,"upperValue");
12601   
12602  accounting_indicator.fx(accNodesModel,accYears,indicator)
12603      $(accounting_indicatorBounds(accNodesModel,accYears,indicator,"useFixed") <> 0 )
12604      = accounting_indicatorBounds(accNodesModel,accYears,indicator,"fixedValue");
12605   
12606   
12607  accounting_indicator_links.lo(linksModelToCalc,yearsToCalc,indicator)
12608      $(accounting_indicatorBounds_links(linksModelToCalc,yearsToCalc,indicator,"useLower") <> 0 )
12609      = accounting_indicatorBounds_links(linksModelToCalc,yearsToCalc,indicator,"lowerValue");
12610   
12611  accounting_indicator_links.up(linksModelToCalc,yearsToCalc,indicator)
12612      $(accounting_indicatorBounds_links(linksModelToCalc,yearsToCalc,indicator,"useUpper") <> 0 )
12613      = accounting_indicatorBounds_links(linksModelToCalc,yearsToCalc,indicator,"upperValue");
12614   
12615  accounting_indicator_links.fx(linksModelToCalc,yearsToCalc,indicator)
12616      $(accounting_indicatorBounds_links(linksModelToCalc,yearsToCalc,indicator,"useFixed") <> 0 )
12617      = accounting_indicatorBounds_links(linksModelToCalc,yearsToCalc,indicator,"fixedValue");
12618   
12619   
12620  * ==== declaration of equations ====
12621   
12622  equations
12623  Eq_accounting_indicatorCalc(accNodesModel,accYears,indicator
12624      ) "Calculates the level of an indicator per accounting region"
12625  Eq_accounting_indicatorCalc_links(linksModel,years,indicator
12626      ) "Calculates the level of an indicator per model link"
12627  Eq_accounting_objective "Calculates the objective value based on the specified indicator"
12628    ;
12629   
12630   
12631  * ==== equations definition ====
12632  * // ## Equations
12633  * // ### Accounting Indicator Calculation
12634  * // Calculates the indicators for each model node for converters, sources and sinks, transfer, storage and variable indicators.
12635  * // {Eq_accounting_indicatorCalc}
12636  Eq_accounting_indicatorCalc(accNodesModel,accYearsSel(accYears),indicator)
12637      $activeIndicators(accNodesModel,accYears,indicator)
12638      ..
12639      accounting_indicator(accNodesModel,accYears,indicator)
12640      =e=
12641   
12642  * == variable indicators ==
12643      sum((accNodesModel_a,accYears_a,indicator_a)
12644          $(compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
12645              and variableIndicators(accNodesModel_a,accYears_a,indicator_a)),
12646          compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
12647          * accounting_indicator(accNodesModel_a,accYears_a,indicator_a))
12648   
12649  * == converters ==
12650      + sum ((accNodesModel_a,nodesModelSel,accYears_a,yearsSel,indicator_a)
12651              $( compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
12652                  and sameas(nodesModelSel,accNodesModel_a) and sameas(yearsSel,accYears_a)),
12653          compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
12654          *
12655          ( sum ((converter_techs,vintage)
12656                      $(converter_availTech(nodesModelSel,yearsSel,converter_techs,vintage)
12657                          and accounting_converterUnits(indicator_a,nodesModelSel,converter_techs,vintage,"useAnnuity") = 0),
12658              converter_unitsBuild(nodesModelSel,yearsSel,converter_techs,vintage)
12659              * accounting_converterUnits(indicator_a,nodesModelSel,converter_techs,vintage,"perUnitBuild"))
12660   
12661          + sum ((years_a,converter_techs,vintage)
12662                      $(converter_availTech(nodesModelSel,years_a,converter_techs,vintage)
12663                          and years_a.val < sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
12664                          and accounting_converterUnits(indicator_a,nodesModelSel,converter_techs,vintage,"useAnnuity") = 1
12665                          and years_a.val + accounting_converterUnits(indicator_a,nodesModelSel,converter_techs,vintage,"amorTime") > yearsSel.val
12666                          and years_a.val <= yearsSel.val ),
12667              converter_unitsBuild(nodesModelSel,years_a,converter_techs,vintage)
12668              * accounting_converterUnits(indicator_a,nodesModelSel,converter_techs,vintage,"perUnitBuild")
12669              * accounting_annuityFactor_converter(indicator_a,nodesModelSel,converter_techs,vintage) )
12670   
12671          + sum ((yearsToCalc,converter_techs,vintage)
12672                      $(converter_availTech(nodesModelSel,yearsToCalc,converter_techs,vintage)
12673                          and yearsToCalc.val >= sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
12674                          and accounting_converterUnits(indicator_a,nodesModelSel,converter_techs,vintage,"useAnnuity") = 1
12675                          and yearsToCalc.val + accounting_converterUnits(indicator_a,nodesModelSel,converter_techs,vintage,"amorTime") > yearsSel.val
12676                          and yearsToCalc.val <= yearsSel.val ),
12677              converter_unitsBuild(nodesModelSel,yearsToCalc,converter_techs,vintage)
12678              * accounting_converterUnits(indicator_a,nodesModelSel,converter_techs,vintage,"perUnitBuild")
12679              * accounting_annuityFactor_converter(indicator_a,nodesModelSel,converter_techs,vintage) )
12680   
12681          + sum ((converter_techs,vintage)
12682                      $converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage),
12683              converter_unitsDecom(nodesModelSel,yearsSel,converter_techs,vintage)
12684              * accounting_converterUnits(indicator_a,nodesModelSel,converter_techs,vintage,"perUnitDecom")
12685   
12686              + converter_unitsTotal(nodesModelSel,yearsSel,converter_techs,vintage)
12687              * accounting_converterUnits(indicator_a,nodesModelSel,converter_techs,vintage,"perUnitTotal") )
12688   
12689          + sum ((timeModelSel,converter_techs,vintage,activity)
12690                      $converter_usedTechAct(nodesModelSel,yearsSel,converter_techs,vintage,activity),
12691              converter_activity(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity)
12692              * timeLength(timeModelSel)
12693              * accounting_converterActivity(indicator_a,nodesModelSel,converter_techs,vintage,activity,"perActivity") )
12694   
12695          + sum ((timeModelSel,converter_techs,vintage)
12696                      $converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage),
12697              converter_unitStartups(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
12698              * accounting_converterStartup(indicator_a,nodesModelSel,converter_techs,vintage,"perStartup") )
12699   
12700          + sum ((timeModelSel,converter_techs,vintage)
12701                      $converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage),
12702              converter_rampPos(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
12703              * (accounting_converterStartup(indicator_a,nodesModelSel,converter_techs,vintage,"perRamp")
12704                 + accounting_converterStartup(indicator_a,nodesModelSel,converter_techs,vintage,"perRampPos"))
12705   
12706              + converter_rampNeg(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
12707              * (accounting_converterStartup(indicator_a,nodesModelSel,converter_techs,vintage,"perRamp")
12708                 + accounting_converterStartup(indicator_a,nodesModelSel,converter_techs,vintage,"perRampNeg")))
12709          )
12710      )
12711   
12712  * == storage ==
12713      + sum ((accNodesModel_a,nodesModelSel,accYears_a,yearsSel,indicator_a)
12714              $( compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
12715                  and sameas(nodesModelSel,accNodesModel_a) and sameas(yearsSel,accYears_a)),
12716          compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
12717          *
12718          ( sum ((storage_techs,vintage)
12719                      $(storage_availTech(nodesModelSel,yearsSel,storage_techs,vintage)
12720                          and accounting_storageUnits(indicator_a,nodesModelSel,storage_techs,vintage,"useAnnuity") = 0),
12721              storage_unitsBuild(nodesModelSel,yearsSel,storage_techs,vintage)
12722              * accounting_storageUnits(indicator_a,nodesModelSel,storage_techs,vintage,"perUnitBuild") )
12723   
12724          + sum ((years_a,storage_techs,vintage)
12725                      $(storage_availTech(nodesModelSel,years_a,storage_techs,vintage)
12726                          and years_a.val < sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
12727                          and accounting_storageUnits(indicator_a,nodesModelSel,storage_techs,vintage,"useAnnuity") = 1
12728                          and years_a.val + accounting_storageUnits(indicator_a,nodesModelSel,storage_techs,vintage,"amorTime") > yearsSel.val
12729                          and years_a.val <= yearsSel.val ),
12730              storage_unitsBuild(nodesModelSel,years_a,storage_techs,vintage)
12731              * accounting_storageUnits(indicator_a,nodesModelSel,storage_techs,vintage,"perUnitBuild")
12732              * accounting_annuityFactor_storage(indicator_a,nodesModelSel,storage_techs,vintage) )
12733   
12734          + sum ((yearsToCalc,storage_techs,vintage)
12735                      $(storage_availTech(nodesModelSel,yearsToCalc,storage_techs,vintage)
12736                          and yearsToCalc.val >= sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
12737                          and accounting_storageUnits(indicator_a,nodesModelSel,storage_techs,vintage,"useAnnuity") = 1
12738                          and yearsToCalc.val + accounting_storageUnits(indicator_a,nodesModelSel,storage_techs,vintage,"amorTime") > yearsSel.val
12739                          and yearsToCalc.val <= yearsSel.val ),
12740              storage_unitsBuild(nodesModelSel,yearsToCalc,storage_techs,vintage)
12741              * accounting_storageUnits(indicator_a,nodesModelSel,storage_techs,vintage,"perUnitBuild")
12742              * accounting_annuityFactor_storage(indicator_a,nodesModelSel,storage_techs,vintage) )
12743   
12744          + sum ((storage_techs,vintage)
12745                      $storage_usedTech(nodesModelSel,yearsSel,storage_techs,vintage),
12746              storage_unitsDecom(nodesModelSel,yearsSel,storage_techs,vintage)
12747              * accounting_storageUnits(indicator_a,nodesModelSel,storage_techs,vintage,"perUnitDecom")
12748   
12749              + storage_unitsTotal(nodesModelSel,yearsSel,storage_techs,vintage)
12750              * accounting_storageUnits(indicator_a,nodesModelSel,storage_techs,vintage,"perUnitTotal") )
12751          )
12752      )
12753   
12754   
12755  * == transfer ==
12756      + sum ((accNodesModel_a,nodesModelSel,accYears_a,yearsSel,indicator_a)
12757              $( compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
12758                  and sameas(nodesModelSel,accNodesModel_a) and sameas(yearsSel,accYears_a)),
12759          compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
12760          *
12761          ( sum ((linksModelToCalc,transfer_techs,vintage)
12762                      $(transfer_availTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
12763                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0
12764                          and accounting_transferLinks(indicator_a,linksModelToCalc,transfer_techs,vintage,"useAnnuity") = 0),
12765              0.5
12766              * transfer_linksBuild(linksModelToCalc,yearsSel,transfer_techs,vintage)
12767              * accounting_transferLinks(indicator_a,linksModelToCalc,transfer_techs,vintage,"perLinkBuild") )
12768   
12769          + sum ((linksModelToCalc,years_a,transfer_techs,vintage)
12770                      $(transfer_availTech(linksModelToCalc,years_a,transfer_techs,vintage)
12771                          and years_a.val < sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
12772                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0
12773                          and accounting_transferLinks(indicator_a,linksModelToCalc,transfer_techs,vintage,"useAnnuity") = 1
12774                          and years_a.val + accounting_transferLinks(indicator_a,linksModelToCalc,transfer_techs,vintage,"amorTime") > yearsSel.val
12775                          and years_a.val <= yearsSel.val ),
12776              0.5
12777              * transfer_linksBuild(linksModelToCalc,years_a,transfer_techs,vintage)
12778              * accounting_transferLinks(indicator_a,linksModelToCalc,transfer_techs,vintage,"perLinkBuild")
12779              * accounting_annuityFactor_transferLink(indicator_a,linksModelToCalc,transfer_techs,vintage) )
12780   
12781          + sum ((linksModelToCalc,yearsToCalc,transfer_techs,vintage)
12782                      $(transfer_availTech(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
12783                          and yearsToCalc.val >= sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
12784                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0
12785                          and accounting_transferLinks(indicator_a,linksModelToCalc,transfer_techs,vintage,"useAnnuity") = 1
12786                          and yearsToCalc.val + accounting_transferLinks(indicator_a,linksModelToCalc,transfer_techs,vintage,"amorTime") > yearsSel.val
12787                          and yearsToCalc.val <= yearsSel.val ),
12788              0.5
12789              * transfer_linksBuild(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
12790              * accounting_transferLinks(indicator_a,linksModelToCalc,transfer_techs,vintage,"perLinkBuild")
12791              * accounting_annuityFactor_transferLink(indicator_a,linksModelToCalc,transfer_techs,vintage) )
12792   
12793          + sum ((linksModelToCalc,transfer_techs,vintage,link_types)
12794                      $(transfer_availTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
12795                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0
12796                          and accounting_transferPerLength(indicator_a,linksModelToCalc,transfer_techs,vintage,link_types,"useAnnuity") = 0 ),
12797              0.5
12798              * transfer_linksBuild(linksModelToCalc,yearsSel,transfer_techs,vintage)
12799              * transfer_lengthParam(linksModelToCalc,link_types,"length")
12800              * accounting_transferPerLength(indicator_a,linksModelToCalc,transfer_techs,vintage,link_types,"perLengthBuild") )
12801   
12802          + sum ((linksModelToCalc,years_a,transfer_techs,vintage,link_types)
12803                      $(transfer_availTech(linksModelToCalc,years_a,transfer_techs,vintage)
12804                          and years_a.val < sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
12805                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0
12806                          and accounting_transferPerLength(indicator_a,linksModelToCalc,transfer_techs,vintage,link_types,"useAnnuity") = 1
12807                          and years_a.val + accounting_transferPerLength(indicator_a,linksModelToCalc,transfer_techs,vintage,link_types,"amorTime") > yearsSel.val
12808                          and years_a.val <= yearsSel.val ),
12809              0.5
12810              * transfer_linksBuild(linksModelToCalc,years_a,transfer_techs,vintage)
12811              * transfer_lengthParam(linksModelToCalc,link_types,"length")
12812              * accounting_transferPerLength(indicator_a,linksModelToCalc,transfer_techs,vintage,link_types,"perLengthBuild")
12813              * accounting_annuityFactor_transferPerLength(indicator_a,linksModelToCalc,transfer_techs,vintage,link_types) )
12814   
12815          + sum ((linksModelToCalc,yearsToCalc,transfer_techs,vintage,link_types)
12816                      $(transfer_availTech(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
12817                          and yearsToCalc.val >= sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
12818                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0
12819                          and accounting_transferPerLength(indicator_a,linksModelToCalc,transfer_techs,vintage,link_types,"useAnnuity") = 1
12820                          and yearsToCalc.val + accounting_transferPerLength(indicator_a,linksModelToCalc,transfer_techs,vintage,link_types,"amorTime") > yearsSel.val
12821                          and yearsToCalc.val <= yearsSel.val ),
12822              0.5
12823              * transfer_linksBuild(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
12824              * transfer_lengthParam(linksModelToCalc,link_types,"length")
12825              * accounting_transferPerLength(indicator_a,linksModelToCalc,transfer_techs,vintage,link_types,"perLengthBuild")
12826              * accounting_annuityFactor_transferPerLength(indicator_a,linksModelToCalc,transfer_techs,vintage,link_types) )
12827   
12828          + sum ((linksModelToCalc,transfer_techs,vintage)
12829                      $(transfer_usedTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
12830                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0 ),
12831              0.5
12832              * transfer_linksDecom(linksModelToCalc,yearsSel,transfer_techs,vintage)
12833              * accounting_transferLinks(indicator_a,linksModelToCalc,transfer_techs,vintage,"perLinkDecom")
12834   
12835              + 0.5
12836              * transfer_linksTotal(linksModelToCalc,yearsSel,transfer_techs,vintage)
12837              * accounting_transferLinks(indicator_a,linksModelToCalc,transfer_techs,vintage,"perLinkTotal")
12838   
12839              + 0.5
12840              * sum (link_types,
12841                  transfer_linksDecom(linksModelToCalc,yearsSel,transfer_techs,vintage)
12842                  * transfer_lengthParam(linksModelToCalc,link_types,"length")
12843                  * accounting_transferPerLength(indicator_a,linksModelToCalc,transfer_techs,vintage,link_types,"perLengthDecom")
12844   
12845                  + transfer_linksTotal(linksModelToCalc,yearsSel,transfer_techs,vintage)
12846                  * transfer_lengthParam(linksModelToCalc,link_types,"length")
12847                  * accounting_transferPerLength(indicator_a,linksModelToCalc,transfer_techs,vintage,link_types,"perLengthTotal"))
12848   
12849              + 0.5
12850              * sum (timeModelSel,
12851                  transfer_flowAlong(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
12852                  * timeLength(timeModelSel)
12853                  * ( accounting_transferLinks(indicator_a,linksModelToCalc,transfer_techs,vintage,"perFlow")
12854                      + accounting_transferLinks(indicator_a,linksModelToCalc,transfer_techs,vintage,"perFlowAlong"))
12855   
12856                  + transfer_flowAgainst(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
12857                  * timeLength(timeModelSel)
12858                  * ( accounting_transferLinks(indicator_a,linksModelToCalc,transfer_techs,vintage,"perFlow")
12859                      + accounting_transferLinks(indicator_a,linksModelToCalc,transfer_techs,vintage,"perFlowAgainst")))
12860   
12861              + 0.5
12862              * sum ((timeModelSel, link_types),
12863                  transfer_flowAlong(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
12864                  * timeLength(timeModelSel)
12865                  * transfer_lengthParam(linksModelToCalc,link_types,"length")
12866                  * (accounting_transferPerLength(indicator_a,linksModelToCalc,transfer_techs,vintage,link_types,"perFlow")
12867                      + accounting_transferPerLength(indicator_a,linksModelToCalc,transfer_techs,vintage,link_types,"perFlowAlong"))
12868   
12869                  + transfer_flowAgainst(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
12870                  * timeLength(timeModelSel)
12871                  * transfer_lengthParam(linksModelToCalc,link_types,"length")
12872                  * (accounting_transferPerLength(indicator_a,linksModelToCalc,transfer_techs,vintage,link_types,"perFlow")
12873                      + accounting_transferPerLength(indicator_a,linksModelToCalc,transfer_techs,vintage,link_types,"perFlowAgainst")))
12874              )
12875          )
12876      )
12877   
12878   
12879  * == sources / sinks ==
12880      + sum ((accNodesModel_a,nodesModelSel,accYears_a,yearsSel,indicator_a)
12881              $( compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
12882                  and sameas(nodesModelSel,accNodesModel_a) and sameas(yearsSel,accYears_a)),
12883          compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
12884          *
12885          sum ((timeModelSel,sourcesink_techs,commodity)
12886                  $sourcesink_enabled(nodesModelSel,yearsSel,sourcesink_techs,commodity),
12887              sourcesink_flow(timeModelSel,nodesModelSel,yearsSel,sourcesink_techs,commodity)
12888              * timeLength(timeModelSel)
12889              * accounting_sourcesinkFlow(indicator_a,nodesModelSel,yearsSel,sourcesink_techs,commodity,"perFlow") )
12890      );
12891   
12892  * // ### Accounting Indicator Calculation Links
12893  * // Calculates the indicators for each transfer for converters, sources and sinks, transfer, storage and variable indicators.
12894  * // {Eq_accounting_indicatorCalc_links}
12895  Eq_accounting_indicatorCalc_links(linksModelToCalc,yearsSel,indicator)
12896      $activeIndicators_links(linksModelToCalc,yearsSel,indicator)
12897      ..
12898      accounting_indicator_links(linksModelToCalc,yearsSel,indicator)
12899      =e=
12900      sum ((transfer_techs,vintage)
12901                  $(transfer_availTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
12902                      and accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"useAnnuity") = 0),
12903          transfer_linksBuild(linksModelToCalc,yearsSel,transfer_techs,vintage)
12904          * accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"perLinkBuild") )
12905   
12906      + sum ((years_a,transfer_techs,vintage)
12907                  $(transfer_availTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
12908                      and accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"useAnnuity") = 1
12909                      and years_a.val + accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"amorTime") > yearsSel.val
12910                      and years_a.val <= yearsSel.val ),
12911          transfer_linksBuild(linksModelToCalc,years_a,transfer_techs,vintage)
12912          * accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"perLinkBuild")
12913          * accounting_annuityFactor_transferLink(indicator,linksModelToCalc,transfer_techs,vintage) )
12914   
12915      + sum ((transfer_techs,vintage,link_types)
12916                  $(transfer_availTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
12917                      and accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"useAnnuity") = 0 ),
12918          transfer_linksBuild(linksModelToCalc,yearsSel,transfer_techs,vintage)
12919          * transfer_lengthParam(linksModelToCalc,link_types,"length")
12920          * accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"perLengthBuild") )
12921   
12922      + sum ((years_a,transfer_techs,vintage,link_types)
12923                  $(transfer_availTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
12924                      and accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"useAnnuity") = 1
12925                      and years_a.val + accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"amorTime") > yearsSel.val
12926                      and years_a.val <= yearsSel.val ),
12927          transfer_linksBuild(linksModelToCalc,years_a,transfer_techs,vintage)
12928          * transfer_lengthParam(linksModelToCalc,link_types,"length")
12929          * accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"perLengthBuild")
12930          * accounting_annuityFactor_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types) )
12931   
12932      + sum ((transfer_techs,vintage)
12933                  $(transfer_usedTech(linksModelToCalc,yearsSel,transfer_techs,vintage)),
12934          transfer_linksDecom(linksModelToCalc,yearsSel,transfer_techs,vintage)
12935          * accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"perLinkDecom")
12936   
12937          + transfer_linksTotal(linksModelToCalc,yearsSel,transfer_techs,vintage)
12938          * accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"perLinkTotal")
12939   
12940          + sum (link_types,
12941              transfer_linksDecom(linksModelToCalc,yearsSel,transfer_techs,vintage)
12942              * transfer_lengthParam(linksModelToCalc,link_types,"length")
12943              * accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"perLengthDecom")
12944   
12945              + transfer_linksTotal(linksModelToCalc,yearsSel,transfer_techs,vintage)
12946              * transfer_lengthParam(linksModelToCalc,link_types,"length")
12947              * accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"perLengthTotal"))
12948   
12949          + sum (timeModelSel,
12950              transfer_flowAlong(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
12951              * timeLength(timeModelSel)
12952              * ( accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"perFlow")
12953                  + accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"perFlowAlong"))
12954   
12955              + transfer_flowAgainst(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
12956              * timeLength(timeModelSel)
12957              * ( accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"perFlow")
12958                  + accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"perFlowAgainst")))
12959   
12960          + sum ((timeModelSel, link_types),
12961              transfer_flowAlong(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
12962              * timeLength(timeModelSel)
12963              * transfer_lengthParam(linksModelToCalc,link_types,"length")
12964              * (accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"perFlow")
12965                  + accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"perFlowAlong"))
12966   
12967              + transfer_flowAgainst(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
12968              * timeLength(timeModelSel)
12969              * transfer_lengthParam(linksModelToCalc,link_types,"length")
12970              * (accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"perFlow")
12971                  + accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"perFlowAgainst")))
12972          );
12973   
12974  * // ### Accounting Objective
12975  * // Calculates the indicators for the objective.
12976  * // {Eq_accounting_objective}
12977  Eq_accounting_objective
12978      ..
12979      accounting_objective
12980      =e=
12981      sum ((accNodesModel,accYears,indicator)
12982              $(accounting_indicatorBounds(accNodesModel,accYears,indicator,"obj") <> 0 ),
12983          accounting_indicator(accNodesModel,accYears,indicator) )
12984   
12985   
12986  * ==== model definition ====
12987   
12988  Model M_accounting
12989  /
12990  Eq_accounting_indicatorCalc_links
12991  Eq_accounting_indicatorCalc
12992  Eq_accounting_objective
12993  /;
INCLUDE    C:\Local\REMix\framework\remix\framework\model\source\optiframe.gms
12995  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
12996  * SPDX-License-Identifier: BSD-3-Clause
12997   
12998  * ==== optimization frames ====
13000   
13001  * mapping from optimization frame to years
13003  set optiframe / of1 * of2 /;
13004  set optiframeToCalc(optiframe);
13005   
13007  set map_optiframe(optiframe,years) / of1 . #yearsToCalc /;
13009   
13011   
13012  option optiframeToCalc < map_optiframe;
13013   
13014  Model remix /
13015    M_converter
13016    M_storage
13017    M_transfer
13018    M_sourcesink
13019    M_balance
13020    M_accounting
13021  /;
13022   
13023   
13024  * ==== include methods  ====
13025   
13026  * check if the method is valid
13032   
13033   
13034  * if method is pips write the checkanno tool
INCLUDE    C:\Local\REMix\framework\remix\framework\model\source\methods\checkanno.gms
13036  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
13037  * SPDX-License-Identifier: BSD-3-Clause
13038   
13041   
13044   
13045  * if method is pips generate the annotated gdx file
INCLUDE    C:\Local\REMix\framework\remix\framework\model\source\methods\pips.gms
13047  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
13048  * SPDX-License-Identifier: BSD-3-Clause
13049   
13053   
13054  * if method is solve run the model with commercial solvers
INCLUDE    C:\Local\REMix\framework\remix\framework\model\source\methods\solve.gms
13056  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
13057  * SPDX-License-Identifier: BSD-3-Clause
13058   
13061   
13063   
13064  * ==== global options ====
13071   
13072  * ==== general solver options ====
13082   
13083  * ==== cplex options ====
13092   
13093  * ==== gurobi options ====
13094   
13095   
13096  * ==== copt options ====
13100   
13101  * ==== debug options ====
13104   
13105   
13106  * ==== setup optimization ====
13107  if ((sum(nodesModelToCalc, 1)>40 or sum(timeModelToCalc, 1)>50) and not 0,
13108     option limRow=0, limCol=0, solPrint=off;
13109  else
13110     option limRow=100000, limCol=100000, solPrint=on;
13111  );
13112   
13114   
13115  option mip = cplex;
13116  option reslim = 1209600;
13117  option optcr = 1e-3;
13118  remix.threads = 4;
13119  remix.optFile = 1;
13120  remix.solveLink = 0;
13121  remix.holdFixed = 1;
13122   
13123   
13124  * ==== configure option files ====
13125   
13128   
13129  file opt / "cplex.opt" /;
13130  put opt;
13132  put "rerun no" /;
13133  put "iis 1" /;
13134  put "lpmethod 4" /;
13136  put "barorder 3 /;" /;
13137  put "preind 1" /;
13138  put "scaind 0" /;
13139  put "predual -1" /;
13140  put "baralg 0" /;
13141  put "barstartalg 1" /;
13142  put "barepcomp 1e-6" /;
13143  put "solutiontype 2" /;
13145  put "startalg 4" /;
13146  put "epgap 1e-3" /;
13147  put "quality 1" /;
13148  put "barcolnz 0" /;
13149  put "threads 4" /;
13150  put "parallelmode 1" /;
13153  putclose;
13154   
13156   
13157   
13158  * ==== solve the problem ====
13159   
13160  loop ( optiframeToCalc,
13161      yearsSel(years) = no;
13162      yearsSel(years)$map_optiframe(optiframeToCalc,years) = yes;
13163      yearsToFix(years) = no;
13164      yearsToFix(years)$(years.val < smin(years_a$yearsSel(years_a), years_a.val)) = yes;
13165      accYearsSel(accYears) = no;
13166      accYearsSel("horizon") = yes;
13167      accYearsSel(accYears)$(sum(yearsSel$sameas(accYears,yearsSel), 1)) = yes;
13168      accYearsToFix(accYears) = no;
13169      accYearsToFix(accYears)$(sum(years$(sameas(years,accYears) and years.val < smin(years_a$yearsSel(years_a), years_a.val)), 1) > 0) = yes;
13170      timeModelSel(timeModel) = no;
13171      timeModelSel(timeModel)$timeModelToCalc(timeModel) = yes;
13172      nodesModelSel(nodesModel) = no;
13173      nodesModelSel(nodesModel)$nodesModelToCalc(nodesModel) = yes;
13174   
13175  * Fix decision for years previously optimized in case of myopic or foresight
13176      converter_unitsDelta(nodesModelToCalc,yearsToFix,converter_techs)
13177          $(sum(yearsToCalc$sameas(yearsToFix, yearsToCalc), 1))
13178          = sum(vintage, converter_unitsTotal.l(nodesModelToCalc,yearsToFix,converter_techs,vintage))
13179              - converter_capacityParam(nodesModelToCalc,yearsToFix,converter_techs,"unitsUpperLimit");
13180      converter_unitsDelta(nodesModelToCalc,yearsToFix,converter_techs)
13181          $(converter_unitsDelta(nodesModelToCalc,yearsToFix,converter_techs) < 0) = 0;
13182   
13183      converter_unitsBuild.l(nodesModelToCalc,yearsToFix,converter_techs,vintage)
13184          $converter_availTech(nodesModelToCalc,yearsToFix,converter_techs,vintage)
13185          = converter_unitsBuild.l(nodesModelToCalc,yearsToFix,converter_techs,vintage)
13186              - converter_unitsDelta(nodesModelToCalc,yearsToFix,converter_techs);
13187   
13188      converter_unitsBuild.l(nodesModelToCalc,yearsToFix,converter_techs,vintage)
13189          $(converter_unitsBuild.l(nodesModelToCalc,yearsToFix,converter_techs,vintage) < 0) = 0;
13190      converter_unitsBuild.fx(nodesModelToCalc,yearsToFix,converter_techs,vintage)
13191          = converter_unitsBuild.l(nodesModelToCalc,yearsToFix,converter_techs,vintage);
13192      converter_unitsDecom.l(nodesModelToCalc,yearsToFix,converter_techs,vintage)
13193          $(converter_unitsDecom.l(nodesModelToCalc,yearsToFix,converter_techs,vintage) < 0) = 0;
13194      converter_unitsDecom.fx(nodesModelToCalc,yearsToFix,converter_techs,vintage)
13195          = converter_unitsDecom.l(nodesModelToCalc,yearsToFix,converter_techs,vintage);
13196      converter_unitsTotal.fx(nodesModelToCalc,yearsToFix,converter_techs,vintage)
13197          = converter_unitsTotal.l(nodesModelToCalc,yearsToFix,converter_techs,vintage);
13198   
13199   
13200      storage_unitsDelta(nodesModelToCalc,yearsToFix,storage_techs)
13201          $(sum(yearsToCalc$sameas(yearsToFix, yearsToCalc), 1))
13202          = sum(vintage, storage_unitsTotal.l(nodesModelToCalc,yearsToFix,storage_techs,vintage))
13203              - storage_reservoirParam(nodesModelToCalc,yearsToFix,storage_techs,"unitsUpperLimit");
13204      storage_unitsDelta(nodesModelToCalc,yearsToFix,storage_techs)
13205          $(storage_unitsDelta(nodesModelToCalc,yearsToFix,storage_techs) < 0) = 0;
13206   
13207      storage_unitsBuild.l(nodesModelToCalc,yearsToFix,storage_techs,vintage)
13208          $storage_availTech(nodesModelToCalc,yearsToFix,storage_techs,vintage)
13209          = storage_unitsBuild.l(nodesModelToCalc,yearsToFix,storage_techs,vintage)
13210              - storage_unitsDelta(nodesModelToCalc,yearsToFix,storage_techs);
13211   
13212      storage_unitsBuild.l(nodesModelToCalc,yearsToFix,storage_techs,vintage)
13213          $(storage_unitsBuild.l(nodesModelToCalc,yearsToFix,storage_techs,vintage) < 0) = 0;
13214      storage_unitsBuild.fx(nodesModelToCalc,yearsToFix,storage_techs,vintage)
13215          = storage_unitsBuild.l(nodesModelToCalc,yearsToFix,storage_techs,vintage);
13216      storage_unitsDecom.l(nodesModelToCalc,yearsToFix,storage_techs,vintage)
13217          $(storage_unitsDecom.l(nodesModelToCalc,yearsToFix,storage_techs,vintage) < 0) = 0;
13218      storage_unitsDecom.fx(nodesModelToCalc,yearsToFix,storage_techs,vintage)
13219          = storage_unitsDecom.l(nodesModelToCalc,yearsToFix,storage_techs,vintage);
13220      storage_unitsTotal.fx(nodesModelToCalc,yearsToFix,storage_techs,vintage)
13221          = storage_unitsTotal.l(nodesModelToCalc,yearsToFix,storage_techs,vintage);
13222   
13223   
13224      transfer_linksDelta(linksModelToCalc,yearsToFix,transfer_techs)
13225          $(sum(yearsToCalc$sameas(yearsToFix, yearsToCalc), 1))
13226          = sum(vintage, transfer_linksTotal.l(linksModelToCalc,yearsToFix,transfer_techs,vintage))
13227              - transfer_linksParam(linksModelToCalc,yearsToFix,transfer_techs,"linksUpperLimit");
13228      transfer_linksDelta(linksModelToCalc,yearsToFix,transfer_techs)
13229          $(transfer_linksDelta(linksModelToCalc,yearsToFix,transfer_techs) < 0) = 0;
13230   
13231      transfer_linksBuild.l(linksModelToCalc,yearsToFix,transfer_techs,vintage)
13232          $transfer_availTech(linksModelToCalc,yearsToFix,transfer_techs,vintage)
13233          = transfer_linksBuild.l(linksModelToCalc,yearsToFix,transfer_techs,vintage)
13234              - transfer_linksDelta(linksModelToCalc,yearsToFix,transfer_techs);
13235   
13236      transfer_linksBuild.l(linksModelToCalc,yearsToFix,transfer_techs,vintage)
13237          $(transfer_linksBuild.l(linksModelToCalc,yearsToFix,transfer_techs,vintage) < 0) = 0;
13238      transfer_linksBuild.fx(linksModelToCalc,yearsToFix,transfer_techs,vintage)
13239          = transfer_linksBuild.l(linksModelToCalc,yearsToFix,transfer_techs,vintage);
13240      transfer_linksDecom.l(linksModelToCalc,yearsToFix,transfer_techs,vintage)
13241          $(transfer_linksDecom.l(linksModelToCalc,yearsToFix,transfer_techs,vintage) < 0) = 0;
13242      transfer_linksDecom.fx(linksModelToCalc,yearsToFix,transfer_techs,vintage)
13243          = transfer_linksDecom.l(linksModelToCalc,yearsToFix,transfer_techs,vintage);
13244      transfer_linksTotal.fx(linksModelToCalc,yearsToFix,transfer_techs,vintage)
13245          = transfer_linksTotal.l(linksModelToCalc,yearsToFix,transfer_techs,vintage);
13246   
13247      accounting_indicator.fx(accNodesModel,accYearsToFix,indicator)
13248          = accounting_indicator.l(accNodesModel,accYearsToFix,indicator);
13249   
13250  * Optimize and log values
13251      if (opti_sense < 0,
13252      solve remix minimizing accounting_objective using mip;
13253      else
13254      solve remix maximizing accounting_objective using mip;
13255      );
13256   
13257      put_utility 'log' / 'Model status ' remix.modelstat:0:0;
13258      put_utility 'log' / 'Objective value ' accounting_objective.l:0:3;
13259   
13260  );
13261   
13265   
13266  * if method is pareto solve the model once and afterwards run multiple points along the pareto front
INCLUDE    C:\Local\REMix\framework\remix\framework\model\source\methods\pareto.gms
13268  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
13269  * SPDX-License-Identifier: BSD-3-Clause
13270   
13274   
13275  * if method is mga solve the model once and afterwards maximize the length metric of indicators
INCLUDE    C:\Local\REMix\framework\remix\framework\model\source\methods\mga.gms
13277  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
13278  * SPDX-License-Identifier: BSD-3-Clause
13279   
13283   
13284  * if method is iternodes run the model by iterating through all nodesToCalc
INCLUDE    C:\Local\REMix\framework\remix\framework\model\source\methods\iternodes.gms
13286  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
13287  * SPDX-License-Identifier: BSD-3-Clause
13288   
13292   
13293  * if postcalc is one write the results gdx
INCLUDE    C:\Local\REMix\framework\remix\framework\model\source\postcalc\definition.gms
13295  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
13296  * SPDX-License-Identifier: BSD-3-Clause
13297   
13299   
13300  * ==== indicator accounting ====
13301   
13302  indicator_accounting_detailed(indicator,nodesModelToCalc,yearsToCalc,techs)
13303      =
13304  * == converters ==
13305      sum ((converter_techs(techs),vintage)
13306                  $(converter_availTech(nodesModelToCalc,yearsToCalc,converter_techs,vintage)
13307                      and accounting_converterUnits(indicator,nodesModelToCalc,converter_techs,vintage,"useAnnuity") = 0),
13308          converter_unitsBuild.l(nodesModelToCalc,yearsToCalc,converter_techs,vintage)
13309          * accounting_converterUnits(indicator,nodesModelToCalc,converter_techs,vintage,"perUnitBuild"))
13310   
13311      + sum ((years_a,converter_techs(techs),vintage)
13312                  $(converter_availTech(nodesModelToCalc,years_a,converter_techs,vintage)
13313                      and accounting_converterUnits(indicator,nodesModelToCalc,converter_techs,vintage,"useAnnuity") = 1
13314                      and years_a.val + accounting_converterUnits(indicator,nodesModelToCalc,converter_techs,vintage,"amorTime") > yearsToCalc.val
13315                      and years_a.val <= yearsToCalc.val ),
13316          converter_unitsBuild.l(nodesModelToCalc,years_a,converter_techs,vintage)
13317          * accounting_converterUnits(indicator,nodesModelToCalc,converter_techs,vintage,"perUnitBuild")
13318          * accounting_annuityFactor_converter(indicator,nodesModelToCalc,converter_techs,vintage) )
13319   
13320      + sum ((converter_techs(techs),vintage)
13321                  $converter_usedTech(nodesModelToCalc,yearsToCalc,converter_techs,vintage),
13322          converter_unitsDecom.l(nodesModelToCalc,yearsToCalc,converter_techs,vintage)
13323          * accounting_converterUnits(indicator,nodesModelToCalc,converter_techs,vintage,"perUnitDecom")
13324   
13325          + converter_unitsTotal.l(nodesModelToCalc,yearsToCalc,converter_techs,vintage)
13326          * accounting_converterUnits(indicator,nodesModelToCalc,converter_techs,vintage,"perUnitTotal") )
13327   
13328      + sum ((timeModelToCalc,converter_techs(techs),vintage,activity)
13329                  $converter_usedTechAct(nodesModelToCalc,yearsToCalc,converter_techs,vintage,activity),
13330          converter_activity.l(timeModelToCalc,nodesModelToCalc,yearsToCalc,converter_techs,vintage,activity)
13331          * timeLength(timeModelToCalc)
13332          * accounting_converterActivity(indicator,nodesModelToCalc,converter_techs,vintage,activity,"perActivity") )
13333   
13334      + sum ((timeModelToCalc,converter_techs(techs),vintage)
13335                  $converter_usedTech(nodesModelToCalc,yearsToCalc,converter_techs,vintage),
13336          converter_unitStartups.l(timeModelToCalc,nodesModelToCalc,yearsToCalc,converter_techs,vintage)
13337          * accounting_converterStartup(indicator,nodesModelToCalc,converter_techs,vintage,"perStartup") )
13338   
13339      + sum ((timeModelToCalc,converter_techs(techs),vintage)
13340                  $converter_usedTech(nodesModelToCalc,yearsToCalc,converter_techs,vintage),
13341          converter_rampPos.l(timeModelToCalc,nodesModelToCalc,yearsToCalc,converter_techs,vintage)
13342          * (accounting_converterStartup(indicator,nodesModelToCalc,converter_techs,vintage,"perRamp")
13343              + accounting_converterStartup(indicator,nodesModelToCalc,converter_techs,vintage,"perRampPos"))
13344   
13345          + converter_rampNeg.l(timeModelToCalc,nodesModelToCalc,yearsToCalc,converter_techs,vintage)
13346          * (accounting_converterStartup(indicator,nodesModelToCalc,converter_techs,vintage,"perRamp")
13347              + accounting_converterStartup(indicator,nodesModelToCalc,converter_techs,vintage,"perRampNeg")))
13348   
13349  * == storage ==
13350      + sum ((storage_techs(techs),vintage)
13351                  $(storage_availTech(nodesModelToCalc,yearsToCalc,storage_techs,vintage)
13352                      and accounting_storageUnits(indicator,nodesModelToCalc,storage_techs,vintage,"useAnnuity") = 0),
13353          storage_unitsBuild.l(nodesModelToCalc,yearsToCalc,storage_techs,vintage)
13354          * accounting_storageUnits(indicator,nodesModelToCalc,storage_techs,vintage,"perUnitBuild") )
13355   
13356      + sum ((years_a,storage_techs(techs),vintage)
13357                  $(storage_availTech(nodesModelToCalc,yearsToCalc,storage_techs,vintage)
13358                      and accounting_storageUnits(indicator,nodesModelToCalc,storage_techs,vintage,"useAnnuity") = 1
13359                      and years_a.val + accounting_storageUnits(indicator,nodesModelToCalc,storage_techs,vintage,"amorTime") > yearsToCalc.val
13360                      and years_a.val <= yearsToCalc.val ),
13361          storage_unitsBuild.l(nodesModelToCalc,years_a,storage_techs,vintage)
13362          * accounting_storageUnits(indicator,nodesModelToCalc,storage_techs,vintage,"perUnitBuild")
13363          * accounting_annuityFactor_storage(indicator,nodesModelToCalc,storage_techs,vintage) )
13364   
13365      + sum ((storage_techs(techs),vintage)
13366                  $storage_usedTech(nodesModelToCalc,yearsToCalc,storage_techs,vintage),
13367          storage_unitsDecom.l(nodesModelToCalc,yearsToCalc,storage_techs,vintage)
13368          * accounting_storageUnits(indicator,nodesModelToCalc,storage_techs,vintage,"perUnitDecom")
13369   
13370          + storage_unitsTotal.l(nodesModelToCalc,yearsToCalc,storage_techs,vintage)
13371          * accounting_storageUnits(indicator,nodesModelToCalc,storage_techs,vintage,"perUnitTotal") )
13372   
13373  * == transfer ==
13374      + sum ((linksModel,transfer_techs(techs),vintage)
13375                  $(transfer_availTech(linksModel,yearsToCalc,transfer_techs,vintage)
13376                      and linksModelToCalc(linksModel)
13377                      and transfer_incidenceModel(nodesModelToCalc,linksModel) <> 0
13378                      and accounting_transferLinks(indicator,linksModel,transfer_techs,vintage,"useAnnuity") = 0),
13379          0.5
13380          * transfer_linksBuild.l(linksModel,yearsToCalc,transfer_techs,vintage)
13381          * accounting_transferLinks(indicator,linksModel,transfer_techs,vintage,"perLinkBuild") )
13382   
13383      + sum ((linksModel,years_a,transfer_techs(techs),vintage)
13384                  $(transfer_availTech(linksModel,yearsToCalc,transfer_techs,vintage)
13385                      and linksModelToCalc(linksModel)
13386                      and transfer_incidenceModel(nodesModelToCalc,linksModel) <> 0
13387                      and accounting_transferLinks(indicator,linksModel,transfer_techs,vintage,"useAnnuity") = 1
13388                      and years_a.val + accounting_transferLinks(indicator,linksModel,transfer_techs,vintage,"amorTime") > yearsToCalc.val
13389                      and years_a.val <= yearsToCalc.val ),
13390          0.5
13391          * transfer_linksBuild.l(linksModel,years_a,transfer_techs,vintage)
13392          * accounting_transferLinks(indicator,linksModel,transfer_techs,vintage,"perLinkBuild")
13393          * accounting_annuityFactor_transferLink(indicator,linksModel,transfer_techs,vintage) )
13394   
13395      + sum ((linksModel,transfer_techs(techs),vintage,link_types)
13396                  $(transfer_availTech(linksModel,yearsToCalc,transfer_techs,vintage)
13397                      and linksModelToCalc(linksModel)
13398                      and transfer_incidenceModel(nodesModelToCalc,linksModel) <> 0
13399                      and accounting_transferPerLength(indicator,linksModel,transfer_techs,vintage,link_types,"useAnnuity") = 0 ),
13400          0.5
13401          * transfer_linksBuild.l(linksModel,yearsToCalc,transfer_techs,vintage)
13402          * transfer_lengthParam(linksModel,link_types,"length")
13403          * accounting_transferPerLength(indicator,linksModel,transfer_techs,vintage,link_types,"perLengthBuild") )
13404   
13405      + sum ((linksModel,years_a,transfer_techs(techs),vintage,link_types)
13406                  $(transfer_availTech(linksModel,yearsToCalc,transfer_techs,vintage)
13407                      and linksModelToCalc(linksModel)
13408                      and transfer_incidenceModel(nodesModelToCalc,linksModel) <> 0
13409                      and accounting_transferPerLength(indicator,linksModel,transfer_techs,vintage,link_types,"useAnnuity") = 1
13410                      and years_a.val + accounting_transferPerLength(indicator,linksModel,transfer_techs,vintage,link_types,"amorTime") > yearsToCalc.val
13411                      and years_a.val <= yearsToCalc.val ),
13412          0.5
13413          * transfer_linksBuild.l(linksModel,years_a,transfer_techs,vintage)
13414          * transfer_lengthParam(linksModel,link_types,"length")
13415          * accounting_transferPerLength(indicator,linksModel,transfer_techs,vintage,link_types,"perLengthBuild")
13416          * accounting_annuityFactor_transferPerLength(indicator,linksModel,transfer_techs,vintage,link_types) )
13417   
13418      + sum ((linksModel,transfer_techs(techs),vintage)
13419                  $(transfer_usedTech(linksModel,yearsToCalc,transfer_techs,vintage)
13420                      and linksModelToCalc(linksModel)
13421                      and transfer_incidenceModel(nodesModelToCalc,linksModel) <> 0 ),
13422          0.5
13423          * transfer_linksDecom.l(linksModel,yearsToCalc,transfer_techs,vintage)
13424          * accounting_transferLinks(indicator,linksModel,transfer_techs,vintage,"perLinkDecom")
13425   
13426          + 0.5
13427          * transfer_linksTotal.l(linksModel,yearsToCalc,transfer_techs,vintage)
13428          * accounting_transferLinks(indicator,linksModel,transfer_techs,vintage,"perLinkTotal")
13429   
13430          + 0.5
13431          * sum (link_types,
13432              transfer_linksDecom.l(linksModel,yearsToCalc,transfer_techs,vintage)
13433              * transfer_lengthParam(linksModel,link_types,"length")
13434              * accounting_transferPerLength(indicator,linksModel,transfer_techs,vintage,link_types,"perLengthDecom")
13435   
13436              + transfer_linksTotal.l(linksModel,yearsToCalc,transfer_techs,vintage)
13437              * transfer_lengthParam(linksModel,link_types,"length")
13438              * accounting_transferPerLength(indicator,linksModel,transfer_techs,vintage,link_types,"perLengthTotal"))
13439   
13440          + 0.5
13441          * sum (timeModelToCalc,
13442              transfer_flowAlong.l(timeModelToCalc,linksModel,yearsToCalc,transfer_techs,vintage)
13443              * timeLength(timeModelToCalc)
13444              * ( accounting_transferLinks(indicator,linksModel,transfer_techs,vintage,"perFlow")
13445                  + accounting_transferLinks(indicator,linksModel,transfer_techs,vintage,"perFlowAlong"))
13446   
13447              + transfer_flowAgainst.l(timeModelToCalc,linksModel,yearsToCalc,transfer_techs,vintage)
13448              * timeLength(timeModelToCalc)
13449              * ( accounting_transferLinks(indicator,linksModel,transfer_techs,vintage,"perFlow")
13450                  + accounting_transferLinks(indicator,linksModel,transfer_techs,vintage,"perFlowAgainst")))
13451   
13452          + 0.5
13453          * sum ((timeModelToCalc, link_types),
13454              transfer_flowAlong.l(timeModelToCalc,linksModel,yearsToCalc,transfer_techs,vintage)
13455              * timeLength(timeModelToCalc)
13456              * transfer_lengthParam(linksModel,link_types,"length")
13457              * (accounting_transferPerLength(indicator,linksModel,transfer_techs,vintage,link_types,"perFlow")
13458                  + accounting_transferPerLength(indicator,linksModel,transfer_techs,vintage,link_types,"perFlowAlong"))
13459   
13460              + transfer_flowAgainst.l(timeModelToCalc,linksModel,yearsToCalc,transfer_techs,vintage)
13461              * timeLength(timeModelToCalc)
13462              * transfer_lengthParam(linksModel,link_types,"length")
13463              * (accounting_transferPerLength(indicator,linksModel,transfer_techs,vintage,link_types,"perFlow")
13464                  + accounting_transferPerLength(indicator,linksModel,transfer_techs,vintage,link_types,"perFlowAgainst"))))
13465   
13466   
13467  * == sources / sinks ==
13468      + sum ((timeModelToCalc,sourcesink_techs(techs),commodity)
13469              $sourcesink_enabled(nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity),
13470          sourcesink_flow.l(timeModelToCalc,nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity)
13471          * timeLength(timeModelToCalc)
13472          * accounting_sourcesinkFlow(indicator,nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity,"perFlow"))
13473      ;
13474   
13475   
13476  * ==== full set of main indicators ====
13477   
13478  indicator_accounting(accNodesModel,accYears,indicator)
13479      $sum((accNodesModel_a,accYears_a,indicator_a)
13480              $compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a), 1)
13481      =
13482      + sum((accNodesModel_a,accYears_a,indicator_a)
13483              $(compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
13484                  and variableIndicators(accNodesModel_a,accYears_a,indicator_a)),
13485          compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
13486          * accounting_indicator.l(accNodesModel_a,accYears_a,indicator_a))
13487   
13488      + sum((accNodesModel_a,accYears_a,indicator_a)
13489              $(compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)),
13490          compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
13491          * (sum((nodesModelToCalc,yearsToCalc,techs)
13492                  $(sameas(accNodesModel_a, nodesModelToCalc)
13493                      and sameas(accYears_a, yearsToCalc)),
13494                  indicator_accounting_detailed(indicator_a,nodesModelToCalc,yearsToCalc,techs))))
13495      ;
13496   
13497  indicator_accounting_comp(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
13498      $compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
13499      =
13500          compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
13501          * accounting_indicator.l(accNodesModel_a,accYears_a,indicator_a)
13502              $variableIndicators(accNodesModel_a,accYears_a,indicator_a)
13503   
13504          + compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
13505          * (sum((nodesModelToCalc,yearsToCalc,techs)
13506                  $(sameas(accNodesModel_a, nodesModelToCalc)
13507                      and sameas(accYears_a, yearsToCalc)),
13508                  indicator_accounting_detailed(indicator_a,nodesModelToCalc,yearsToCalc,techs)))
13509      ;
13510   
13511  indicator_accounting_ref(accNodesModel,accYears,indicator)
13512      $accounting_indicator.l(accNodesModel,accYears,indicator)
13513      = accounting_indicator.l(accNodesModel,accYears,indicator);
13514   
13515  * ==== link-specific indicator accounting ====
13516   
13517  indicator_accounting_links(indicator,nodesModelToCalc,nodesModelToCalc_a,linksModelToCalc,yearsToCalc,techs)
13518      $(transfer_incidenceModel(nodesModelToCalc,linksModelToCalc) < 0
13519          and transfer_incidenceModel(nodesModelToCalc_a,linksModelToCalc) > 0)
13520      =
13521      sum ((transfer_techs(techs),vintage)
13522                  $(transfer_availTech(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
13523                      and accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"useAnnuity") = 0),
13524          transfer_linksBuild.l(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
13525          * accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"perLinkBuild") )
13526   
13527      + sum ((years_a,transfer_techs(techs),vintage)
13528                  $(transfer_availTech(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
13529                      and accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"useAnnuity") = 1
13530                      and years_a.val + accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"amorTime") > yearsToCalc.val
13531                      and years_a.val <= yearsToCalc.val ),
13532          transfer_linksBuild.l(linksModelToCalc,years_a,transfer_techs,vintage)
13533          * accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"perLinkBuild")
13534          * accounting_annuityFactor_transferLink(indicator,linksModelToCalc,transfer_techs,vintage) )
13535   
13536      + sum ((transfer_techs(techs),vintage,link_types)
13537                  $(transfer_availTech(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
13538                      and accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"useAnnuity") = 0 ),
13539          transfer_linksBuild.l(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
13540          * transfer_lengthParam(linksModelToCalc,link_types,"length")
13541          * accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"perLengthBuild") )
13542   
13543      + sum ((years_a,transfer_techs(techs),vintage,link_types)
13544                  $(transfer_availTech(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
13545                      and accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"useAnnuity") = 1
13546                      and years_a.val + accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"amorTime") > yearsToCalc.val
13547                      and years_a.val <= yearsToCalc.val ),
13548          transfer_linksBuild.l(linksModelToCalc,years_a,transfer_techs,vintage)
13549          * transfer_lengthParam(linksModelToCalc,link_types,"length")
13550          * accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"perLengthBuild")
13551          * accounting_annuityFactor_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types) )
13552   
13553      + sum ((transfer_techs(techs),vintage)
13554                  $(transfer_usedTech(linksModelToCalc,yearsToCalc,transfer_techs,vintage)),
13555          transfer_linksDecom.l(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
13556          * accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"perLinkDecom")
13557   
13558          + transfer_linksTotal.l(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
13559          * accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"perLinkTotal")
13560   
13561          + sum (link_types,
13562              transfer_linksDecom.l(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
13563              * transfer_lengthParam(linksModelToCalc,link_types,"length")
13564              * accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"perLengthDecom")
13565   
13566              + transfer_linksTotal.l(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
13567              * transfer_lengthParam(linksModelToCalc,link_types,"length")
13568              * accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"perLengthTotal"))
13569   
13570          + sum (timeModelToCalc,
13571              transfer_flowAlong.l(timeModelToCalc,linksModelToCalc,yearsToCalc,transfer_techs,vintage)
13572              * timeLength(timeModelToCalc)
13573              * ( accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"perFlow")
13574                  + accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"perFlowAlong"))
13575   
13576              + transfer_flowAgainst.l(timeModelToCalc,linksModelToCalc,yearsToCalc,transfer_techs,vintage)
13577              * timeLength(timeModelToCalc)
13578              * ( accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"perFlow")
13579                  + accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"perFlowAgainst")))
13580   
13581          + sum ((timeModelToCalc, link_types),
13582              transfer_flowAlong.l(timeModelToCalc,linksModelToCalc,yearsToCalc,transfer_techs,vintage)
13583              * timeLength(timeModelToCalc)
13584              * transfer_lengthParam(linksModelToCalc,link_types,"length")
13585              * (accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"perFlow")
13586                  + accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"perFlowAlong"))
13587   
13588              + transfer_flowAgainst.l(timeModelToCalc,linksModelToCalc,yearsToCalc,transfer_techs,vintage)
13589              * timeLength(timeModelToCalc)
13590              * transfer_lengthParam(linksModelToCalc,link_types,"length")
13591              * (accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"perFlow")
13592                  + accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"perFlowAgainst")))
13593      );
13594   
13595   
13596  * == converter capacities ==
13597   
13598  converter_ratedInput(converter_techs,vintage,commodity)
13599      $(converter_techParam(converter_techs,vintage,"lifeTime") > 0)
13600      = smin(activity$converter_usedAct(converter_techs,vintage,activity),
13601              converter_coefficient(converter_techs,vintage,activity,commodity,"coefficient"));
13602  converter_ratedInput(converter_techs,vintage,commodity)
13603      $(converter_ratedInput(converter_techs,vintage,commodity) > 0)
13604      = 0;
13605   
13606  converter_ratedOutput(converter_techs,vintage,commodity)
13607      $(converter_techParam(converter_techs,vintage,"lifeTime") > 0)
13608      = smax(activity$converter_usedAct(converter_techs,vintage,activity),
13609              converter_coefficient(converter_techs,vintage,activity,commodity,"coefficient"));
13610  converter_ratedOutput(converter_techs,vintage,commodity)
13611      $(converter_ratedOutput(converter_techs,vintage,commodity) < 0)
13612      = 0;
13613   
13614  converter_ratedOutput_min(nodesModelToCalc,years,converter_techs(techs),commodity)
13615      $sum(vintage$(converter_usedTech(nodesModelToCalc,years,converter_techs,vintage)
13616          and converter_ratedOutput(converter_techs,vintage,commodity)), 1)
13617      = smin(vintage$(converter_usedTech(nodesModelToCalc,years,converter_techs,vintage)
13618              and converter_ratedOutput(converter_techs,vintage,commodity)),
13619          converter_ratedOutput(converter_techs,vintage,commodity));
13620   
13621  converter_ratedOutput_max(nodesModelToCalc,years,converter_techs(techs),commodity)
13622      $sum(vintage$(converter_usedTech(nodesModelToCalc,years,converter_techs,vintage)
13623          and converter_ratedOutput(converter_techs,vintage,commodity)), 1)
13624      = smax(vintage$(converter_usedTech(nodesModelToCalc,years,converter_techs,vintage)
13625              and converter_ratedOutput(converter_techs,vintage,commodity)),
13626          converter_ratedOutput(converter_techs,vintage,commodity));
13627   
13628  converter_units_ext(map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,years),converter_techs(techs),vintage,"build")
13629      = converter_unitsBuild.l(nodesModelToCalc,years,converter_techs,vintage);
13630   
13631  converter_units_ext(map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,years),converter_techs(techs),vintage,"decom")
13632      = converter_unitsDecom.l(nodesModelToCalc,years,converter_techs,vintage);
13633   
13634  converter_units_ext(map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,years),converter_techs(techs),vintage,"total")
13635      = converter_unitsTotal.l(nodesModelToCalc,years,converter_techs,vintage);
13636   
13637  converter_caps_ext(map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,years),converter_techs(techs),vintage,commodity,capType)
13638      $(converter_ratedOutput(converter_techs,vintage,commodity))
13639      = converter_units_ext(accNodesModel,nodesModelToCalc,accYears,years,techs,vintage,capType)
13640          * converter_ratedOutput(converter_techs,vintage,commodity);
13641   
13642  converter_caps_ext(map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,years),converter_techs(techs),vintage,commodity,"lowerLimit")
13643      $(converter_usedTech(nodesModelToCalc,years,converter_techs,vintage)
13644          and converter_capacityParam(nodesModelToCalc,years,converter_techs,"unitsLowerLimit") > 0
13645          and converter_ratedOutput_min(nodesModelToCalc,years,converter_techs,commodity))
13646      = converter_capacityParam(nodesModelToCalc,years,converter_techs,"unitsLowerLimit")
13647          * converter_ratedOutput_min(nodesModelToCalc,years,converter_techs,commodity);
13648   
13649  converter_caps_ext(map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,years),converter_techs(techs),vintage,commodity,"upperLimit")
13650      $(converter_usedTech(nodesModelToCalc,years,converter_techs,vintage)
13651          and converter_capacityParam(nodesModelToCalc,years,converter_techs,"unitsUpperLimit") < inf
13652          and converter_ratedOutput_min(nodesModelToCalc,years,converter_techs,commodity))
13653      = converter_capacityParam(nodesModelToCalc,years,converter_techs,"unitsUpperLimit")
13654          * converter_ratedOutput_max(nodesModelToCalc,years,converter_techs,commodity);
13655   
13656  converter_caps(accNodesModel,accYears,converter_techs(techs),commodity,capType)
13657      = sum((nodesModelToCalc,years,vintage)
13658              $(map_accNodesPostCalc(accNodesModel,nodesModelToCalc)
13659                  and map_accYearsPostCalc(accYears,years)),
13660          converter_caps_ext(accNodesModel,nodesModelToCalc,accYears,years,converter_techs,vintage,commodity,capType));
13661  option clear = converter_caps_ext;
13662   
13663  converter_units(accNodesModel,accYears,converter_techs(techs),vintage,capType)
13664      = sum((nodesModelToCalc,years)
13665              $(map_accNodesPostCalc(accNodesModel,nodesModelToCalc)
13666                  and map_accYearsPostCalc(accYears,years)),
13667          converter_units_ext(accNodesModel,nodesModelToCalc,accYears,years,converter_techs,vintage,capType));
13668  option clear = converter_units_ext;
13669   
13670   
13671  * ==== transfer capacities ====
13672   
13673  max_transfer_coefficient(transfer_techs(techs),commodity)
13674          $(smax(vintage, transfer_coefficient(transfer_techs,vintage,commodity,"coefficient")) > 0)
13675          = smax(vintage, transfer_coefficient(transfer_techs,vintage,commodity,"coefficient"));
13676   
13677  min_transfer_coefficient(transfer_techs(techs),commodity)
13678          $(smin(vintage, transfer_coefficient(transfer_techs,vintage,commodity,"coefficient")) > 0)
13679          = smin(vintage, transfer_coefficient(transfer_techs,vintage,commodity,"coefficient"));
13680   
13681  transfer_usedStartEnd(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,years,transfer_techs)
13682      $(transfer_incidenceModel(nodesModelToCalc_start,linksModel) < 0
13683          and transfer_incidenceModel(nodesModelToCalc_end,linksModel) > 0
13684          and sum(vintage$transfer_usedTech(linksModel,years,transfer_techs,vintage), 1))
13685      = yes;
13686   
13687  transfer_links(linksModel,years,transfer_techs,vintage,"build")
13688      = transfer_linksBuild.l(linksModel,years,transfer_techs,vintage);
13689   
13690  transfer_links(linksModel,years,transfer_techs,vintage,"decom")
13691      = transfer_linksDecom.l(linksModel,years,transfer_techs,vintage);
13692   
13693  transfer_links(linksModel,years,transfer_techs,vintage,"total")
13694      = transfer_linksTotal.l(linksModel,years,transfer_techs,vintage);
13695   
13696  transfer_caps(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,years,transfer_techs(techs),commodity,capType)
13697      $(transfer_usedStartEnd(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,years,transfer_techs)
13698          and sum(vintage$(transfer_usedTech(linksModel,years,transfer_techs,vintage)
13699                              and transfer_coefficient(transfer_techs,vintage,commodity,"coefficient")), 1))
13700      = sum(vintage,
13701          transfer_links(linksModel,years,transfer_techs,vintage,capType)
13702          * transfer_coefficient(transfer_techs,vintage,commodity,"coefficient"));
13703   
13704  transfer_caps(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,years,transfer_techs(techs),commodity,"lowerLimit")
13705      $(transfer_usedStartEnd(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,years,transfer_techs)
13706          and sum(vintage$(transfer_usedTech(linksModel,years,transfer_techs,vintage)
13707                              and transfer_coefficient(transfer_techs,vintage,commodity,"coefficient")), 1))
13708      = transfer_linksParam(linksModel,years,transfer_techs,'linksLowerLimit')
13709          * min_transfer_coefficient(transfer_techs,commodity);
13710   
13711  transfer_caps(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,years,transfer_techs(techs),commodity,"upperLimit")
13712      $(transfer_usedStartEnd(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,years,transfer_techs)
13713          and sum(vintage$(transfer_usedTech(linksModel,years,transfer_techs,vintage)
13714                              and transfer_coefficient(transfer_techs,vintage,commodity,"coefficient")), 1))
13715      = transfer_linksParam(linksModel,years,transfer_techs,'linksUpperLimit')
13716          * max_transfer_coefficient(transfer_techs,commodity);
13717   
13718   
13719  * ==== transfer flows ====
13720   
13721  transfer_flows(timeModelToCalc,nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs(techs),commodity)
13722      $transfer_usedStartEnd(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs)
13723      = sum(vintage,
13724          ( transfer_flowAlong.l(timeModelToCalc,linksModel,yearsToCalc,transfer_techs,vintage)
13725              - transfer_flowAgainst.l(timeModelToCalc,linksModel,yearsToCalc,transfer_techs,vintage) )
13726          * timeLength(timeModelToCalc)
13727          * transfer_coefficient(transfer_techs,vintage,commodity,"coefficient"));
13728   
13729  transfer_flows_annual(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs(techs),commodity,"netto")
13730      $transfer_usedStartEnd(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs)
13731      = sum(timeModelToCalc,
13732          transfer_flows(timeModelToCalc,nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs,commodity));
13733   
13734  transfer_flows_annual(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs(techs),commodity,"positive")
13735      $transfer_usedStartEnd(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs)
13736      = sum(timeModelToCalc
13737              $(transfer_flows(timeModelToCalc,nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs,commodity) > 0),
13738          transfer_flows(timeModelToCalc,nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs,commodity));
13739   
13740  transfer_flows_annual(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs(techs),commodity,"negative")
13741      $transfer_usedStartEnd(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs)
13742      = sum(timeModelToCalc
13743              $(transfer_flows(timeModelToCalc,nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs,commodity) < 0),
13744          transfer_flows(timeModelToCalc,nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs,commodity));
13745   
13746  transfer_flows_annual(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs(techs),commodity,"brutto")
13747      $transfer_usedStartEnd(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs)
13748      = transfer_flows_annual(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs,commodity,"positive")
13749          - transfer_flows_annual(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs,commodity,"negative");
13750   
13751  transfer_flows_annual(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs(techs),commodity,"flh")
13752      $(transfer_usedStartEnd(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs)
13753          and transfer_flows_annual(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs,commodity,"brutto") > 0
13754          and transfer_caps(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs,commodity,"total") > 0)
13755      = transfer_flows_annual(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs,commodity,"brutto")
13756          / transfer_caps(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs,commodity,"total");
13757   
13758  transfer_losses(timeModelToCalc,nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs(techs),commodity)
13759      $(transfer_usedStartEnd(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs)
13760          and (sum(vintage$transfer_coefPerFlow(transfer_techs,vintage,commodity,"coefPerFlow"), 1)
13761              or sum((vintage, link_types)$transfer_coefPerLength(transfer_techs,vintage,commodity,link_types,"coefPerLength"), 1)))
13762      = -1 * abs(sum(vintage,
13763          ( transfer_flowAlong.l(timeModelToCalc,linksModel,yearsToCalc,transfer_techs,vintage)
13764              - transfer_flowAgainst.l(timeModelToCalc,linksModel,yearsToCalc,transfer_techs,vintage) )
13765          * ( transfer_coefPerFlow(transfer_techs,vintage,commodity,"coefPerFlow")
13766              + sum(link_types,
13767                  transfer_coefPerLength(transfer_techs,vintage,commodity,link_types,"coefPerLength")
13768                  * transfer_lengthParam(linksModel,link_types,"length")))))
13769          * timeLength(timeModelToCalc);
13770   
13771  transfer_losses_annual(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs(techs),commodity,"netto")
13772      $(transfer_usedStartEnd(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs)
13773          and (sum(vintage$transfer_coefPerFlow(transfer_techs,vintage,commodity,"coefPerFlow"), 1)
13774              or sum((vintage, link_types)$transfer_coefPerLength(transfer_techs,vintage,commodity,link_types,"coefPerLength"), 1)))
13775      = sum(timeModelToCalc,
13776          transfer_losses(timeModelToCalc,nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs,commodity));
13777   
13778   
13779  * ==== storage capacities ====
13780   
13781  storage_size_max(nodesModelToCalc,years,storage_techs(techs),commodity)
13782      $sum(vintage$(storage_usedTech(nodesModelToCalc,years,storage_techs,vintage)
13783              and storage_usedCom(storage_techs,vintage,commodity)
13784              and storage_sizeParam(storage_techs,vintage,commodity,"size")), 1)
13785      = smax(vintage$(storage_usedTech(nodesModelToCalc,years,storage_techs,vintage)
13786              and storage_usedCom(storage_techs,vintage,commodity)
13787              and storage_sizeParam(storage_techs,vintage,commodity,"size")),
13788          storage_sizeParam(storage_techs,vintage,commodity,"size"));
13789   
13790  storage_size_min(nodesModelToCalc,years,storage_techs(techs),commodity)
13791      $sum(vintage$(storage_usedTech(nodesModelToCalc,years,storage_techs,vintage)
13792              and storage_usedCom(storage_techs,vintage,commodity)
13793              and storage_sizeParam(storage_techs,vintage,commodity,"size")), 1)
13794      = smin(vintage$(storage_usedTech(nodesModelToCalc,years,storage_techs,vintage)
13795              and storage_usedCom(storage_techs,vintage,commodity)
13796              and storage_sizeParam(storage_techs,vintage,commodity,"size")),
13797          storage_sizeParam(storage_techs,vintage,commodity,"size"));
13798   
13799  storage_units_ext(map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,years),storage_techs(techs),vintage,"build")
13800      $storage_usedTech(nodesModelToCalc,years,storage_techs,vintage)
13801      = storage_unitsBuild.l(nodesModelToCalc,years,storage_techs,vintage);
13802   
13803  storage_units_ext(map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,years),storage_techs(techs),vintage,"decom")
13804      $storage_usedTech(nodesModelToCalc,years,storage_techs,vintage)
13805      = storage_unitsDecom.l(nodesModelToCalc,years,storage_techs,vintage);
13806   
13807  storage_units_ext(map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,years),storage_techs(techs),vintage,"total")
13808      $storage_usedTech(nodesModelToCalc,years,storage_techs,vintage)
13809      = storage_unitsTotal.l(nodesModelToCalc,years,storage_techs,vintage);
13810   
13811  storage_caps_ext(map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,years),storage_techs(techs),vintage,commodity,capType)
13812      $storage_sizeParam(storage_techs,vintage,commodity,"size")
13813      = storage_units_ext(accNodesModel,nodesModelToCalc,accYears,years,storage_techs,vintage,capType)
13814          * storage_sizeParam(storage_techs,vintage,commodity,"size");
13815   
13816  storage_caps_ext(map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,years),storage_techs(techs),vintage,commodity,"lowerLimit")
13817      $(storage_usedTech(nodesModelToCalc,years,storage_techs,vintage)
13818          and storage_reservoirParam(nodesModelToCalc,years,storage_techs,"unitsLowerLimit") > 0
13819          and storage_size_min(nodesModelToCalc,years,storage_techs,commodity))
13820      = storage_reservoirParam(nodesModelToCalc,years,storage_techs,"unitsLowerLimit")
13821          * storage_size_min(nodesModelToCalc,years,storage_techs,commodity);
13822   
13823  storage_caps_ext(map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,years),storage_techs(techs),vintage,commodity,"upperLimit")
13824      $(storage_usedTech(nodesModelToCalc,years,storage_techs,vintage)
13825          and storage_reservoirParam(nodesModelToCalc,years,storage_techs,"unitsUpperLimit") < inf
13826          and storage_size_max(nodesModelToCalc,years,storage_techs,commodity))
13827      = storage_reservoirParam(nodesModelToCalc,years,storage_techs,"unitsUpperLimit")
13828          * storage_size_max(nodesModelToCalc,years,storage_techs,commodity);
13829   
13830  storage_caps_ext(map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,years),storage_techs(techs),vintage,commodity,"total_degraded")
13831      $(storage_usedCom(storage_techs,vintage,commodity)
13832          and (storage_techParam(storage_techs,vintage,"annualDegradation") > 0
13833               or storage_techParam(storage_techs,vintage,"usageDegradation")))
13834      = sum((degradation_states,yearsCom), (storage_degradationParam(storage_techs,vintage,degradation_states,"remainingCapacity")
13835                                      - (years.val - yearsCom.val) * storage_techParam(storage_techs,vintage,"annualDegradation"))
13836                                      * storage_unitsStateTracker.l(nodesModelToCalc,years,yearsCom,storage_techs,vintage,degradation_states)
13837                                      * storage_sizeParam(storage_techs,vintage,commodity,"size"));
13838   
13839  storage_caps(accNodesModel,accYears,storage_techs(techs),commodity,capType)
13840      = sum((nodesModelToCalc,years,vintage)
13841              $(map_accNodesPostCalc(accNodesModel,nodesModelToCalc)
13842                  and map_accYearsPostCalc(accYears,years)),
13843          storage_caps_ext(accNodesModel,nodesModelToCalc,accYears,years,storage_techs,vintage,commodity,capType));
13844  option clear = storage_caps_ext;
13845   
13846  storage_units(accNodesModel,accYears,storage_techs(techs),vintage,capType)
13847      = sum((nodesModelToCalc,years)
13848              $(map_accNodesPostCalc(accNodesModel,nodesModelToCalc)
13849                  and map_accYearsPostCalc(accYears,years)),
13850          storage_units_ext(accNodesModel,nodesModelToCalc,accYears,years,storage_techs,vintage,capType));
13851  option clear = storage_units_ext;
13852   
13853   
13854  * ==== storage levels and flows ====
13855   
13856  storage_flows_ext(timeModelToCalc,map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,yearsToCalc),storage_techs(techs),vintage,commodity)
13857      $(storage_usedTech(nodesModelToCalc,yearsToCalc,storage_techs,vintage) and balance_techComm(storage_techs,commodity))
13858      = storage_level.l(timeModelToCalc,nodesModelToCalc,yearsToCalc,storage_techs,vintage,commodity)
13859          - storage_level.l(timeModelToCalc--1,nodesModelToCalc,yearsToCalc,storage_techs,vintage,commodity)
13861      + storage_losses.l(timeModelToCalc,nodesModelToCalc,yearsToCalc,storage_techs,vintage,commodity)
13862          * timeLength(timeModelToCalc)
13864      ;
13865   
13866  storage_flows(timeModelToCalc,accNodesModel,accYears,storage_techs(techs),commodity)
13867      = sum((nodesModelToCalc,yearsToCalc,vintage)
13868              $(storage_usedTech(nodesModelToCalc,yearsToCalc,storage_techs,vintage) and balance_techComm(storage_techs,commodity)),
13869          storage_flows_ext(timeModelToCalc,accNodesModel,nodesModelToCalc,accYears,yearsToCalc,storage_techs,vintage,commodity));
13870  option clear = storage_flows_ext;
13871   
13872  storage_level_out_ext(timeModelToCalc,map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,yearsToCalc),storage_techs(techs),vintage,commodity)
13873      $(storage_usedTech(nodesModelToCalc,yearsToCalc,storage_techs,vintage) and balance_techComm(storage_techs,commodity))
13874      = storage_level.l(timeModelToCalc,nodesModelToCalc,yearsToCalc,storage_techs,vintage,commodity);
13875   
13876  storage_level_out(timeModelToCalc,accNodesModel,accYears,storage_techs(techs),commodity)
13877      = sum((nodesModelToCalc,yearsToCalc,vintage)
13878              $(storage_usedTech(nodesModelToCalc,yearsToCalc,storage_techs,vintage) and balance_techComm(storage_techs,commodity)),
13879          storage_level_out_ext(timeModelToCalc,accNodesModel,nodesModelToCalc,accYears,yearsToCalc,storage_techs,vintage,commodity));
13880  option clear = storage_level_out_ext;
13881   
13882  storage_flows_annual(accNodesModel,accYears,storage_techs(techs),commodity,"netto")
13883      = sum(timeModelToCalc,
13884          storage_flows(timeModelToCalc,accNodesModel,accYears,storage_techs,commodity));
13885   
13886  storage_flows_annual(accNodesModel,accYears,storage_techs(techs),commodity,"positive")
13887      = sum(timeModelToCalc
13888              $(storage_flows(timeModelToCalc,accNodesModel,accYears,storage_techs,commodity) > 0),
13889          storage_flows(timeModelToCalc,accNodesModel,accYears,storage_techs,commodity));
13890   
13891  storage_flows_annual(accNodesModel,accYears,storage_techs(techs),commodity,"negative")
13892      = sum(timeModelToCalc
13893              $(storage_flows(timeModelToCalc,accNodesModel,accYears,storage_techs,commodity) < 0),
13894          storage_flows(timeModelToCalc,accNodesModel,accYears,storage_techs,commodity));
13895   
13896  storage_flows_annual(accNodesModel,accYears,storage_techs(techs),commodity,"brutto")
13897      = storage_flows_annual(accNodesModel,accYears,storage_techs,commodity,"positive")
13898          + storage_flows_annual(accNodesModel,accYears,storage_techs,commodity,"negative");
13899   
13900  storage_flows_annual(accNodesModel,accYears,storage_techs(techs),commodity,"flh")
13901      $(storage_flows_annual(accNodesModel,accYears,storage_techs,commodity,"brutto") > 0
13902          and storage_caps(accNodesModel,accYears,storage_techs,commodity,"total") > 0)
13903      = storage_flows_annual(accNodesModel,accYears,storage_techs,commodity,"brutto")
13904          / storage_caps(accNodesModel,accYears,storage_techs,commodity,"total");
13905   
13906  storage_losses_out(timeModelToCalc,accNodesModel,accYears,storage_techs(techs),commodity)
13907      = sum((nodesModelToCalc,yearsToCalc,vintage)
13908              $(storage_losses.l(timeModelToCalc,nodesModelToCalc,yearsToCalc,storage_techs,vintage,commodity)
13909                  and map_accNodesPostCalc(accNodesModel,nodesModelToCalc)
13910                  and map_accYearsPostCalc(accYears,yearsToCalc)),
13911          storage_losses.l(timeModelToCalc,nodesModelToCalc,yearsToCalc,storage_techs,vintage,commodity)
13912          * timeLength(timeModelToCalc));
13913   
13914  storage_losses_annual(accNodesModel,accYears,storage_techs(techs),commodity,"netto")
13915      = sum(timeModelToCalc,
13916          storage_losses_out(timeModelToCalc,accNodesModel,accYears,storage_techs,commodity));
13917   
13918   
13919  * == commodity balance ==
13920   
13921  commodity_balance_ext(timeModelToCalc,map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,yearsToCalc),converter_techs(techs),vintage,commodity)
13922      $(converter_usedTech(nodesModelToCalc,yearsToCalc,converter_techs,vintage)
13923          and balance_usedConverter(nodesModelToCalc,yearsToCalc,commodity))
13924      = sum((activity)
13925              $(converter_coefficientProfile(timeModelToCalc,nodesModelToCalc,yearsToCalc,converter_techs,vintage,activity,commodity)),
13926          converter_activity.l(timeModelToCalc,nodesModelToCalc,yearsToCalc,converter_techs,vintage,activity)
13927              * timeLength(timeModelToCalc)
13928              * converter_coefficientProfile(timeModelToCalc,nodesModelToCalc,yearsToCalc,converter_techs,vintage,activity,commodity)
13929          + converter_unitsUsingActivity_MIP.l(timeModelToCalc,nodesModelToCalc,yearsToCalc,converter_techs,vintage,activity)
13930              * timeLength(timeModelToCalc)
13931              * converter_coefficient(converter_techs,vintage,activity,commodity,"constant"));
13932   
13933  commodity_balance_ext(timeModelToCalc,map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,yearsToCalc),storage_techs(techs),vintage,commodity)
13934      $(storage_usedTech(nodesModelToCalc,yearsToCalc,storage_techs,vintage)
13935          and storage_sizeParam(storage_techs,vintage,commodity,"size"))
13936      = commodity_balance_ext(timeModelToCalc,accNodesModel,nodesModelToCalc,accYears,yearsToCalc,storage_techs,vintage,commodity)
13937      + storage_level.l(timeModelToCalc--1,nodesModelToCalc,yearsToCalc,storage_techs,vintage,commodity)
13938          - storage_level.l(timeModelToCalc,nodesModelToCalc,yearsToCalc,storage_techs,vintage,commodity)
13939      - storage_losses.l(timeModelToCalc,nodesModelToCalc,yearsToCalc,storage_techs,vintage,commodity)
13940      * timeLength(timeModelToCalc);
13941   
13942  commodity_balance_ext(timeModelToCalc,map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,yearsToCalc),sourcesink_techs(techs),vintage,commodity)
13943      $(sourcesink_enabled(nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity)
13944          and sameas(yearsToCalc,vintage))
13945      = commodity_balance_ext(timeModelToCalc,accNodesModel,nodesModelToCalc,accYears,yearsToCalc,sourcesink_techs,vintage,commodity)
13946      + sourcesink_flow.l(timeModelToCalc,nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity)
13947      * timeLength(timeModelToCalc);
13948   
13949  commodity_balance_ext(timeModelToCalc,map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,yearsToCalc),transfer_techs(techs),vintage,commodity)
13950      $sum((linksModel)
13951          $(transfer_incidenceModel(nodesModelToCalc,linksModel)
13952                  and transfer_usedTech(linksModel,yearsToCalc,transfer_techs,vintage)
13953                  and transfer_coefficient(transfer_techs,vintage,commodity,"coefficient")), 1)
13954      = commodity_balance_ext(timeModelToCalc,accNodesModel,nodesModelToCalc,accYears,yearsToCalc,transfer_techs,vintage,commodity)
13955      + sum((linksModel)
13956              $(transfer_incidenceModel(nodesModelToCalc,linksModel)
13957                  and transfer_usedTech(linksModel,yearsToCalc,transfer_techs,vintage)
13958                  and transfer_coefficient(transfer_techs,vintage,commodity,"coefficient")),
13959   
13960              (transfer_flowAlong.l(timeModelToCalc,linksModel,yearsToCalc,transfer_techs,vintage)
13961                      $(transfer_incidenceModel(nodesModelToCalc,linksModel) > 0)
13962                + transfer_flowAgainst.l(timeModelToCalc,linksModel,yearsToCalc,transfer_techs,vintage)
13963                      $(transfer_incidenceModel(nodesModelToCalc,linksModel) < 0))
13964              * timeLength(timeModelToCalc)
13965              * transfer_coefficient(transfer_techs,vintage,commodity,"coefficient")
13966   
13967              - (transfer_flowAlong.l(timeModelToCalc,linksModel,yearsToCalc,transfer_techs,vintage)
13968                      $(transfer_incidenceModel(nodesModelToCalc,linksModel) < 0)
13969                + transfer_flowAgainst.l(timeModelToCalc,linksModel,yearsToCalc,transfer_techs,vintage)
13970                      $(transfer_incidenceModel(nodesModelToCalc,linksModel) > 0))
13971              * timeLength(timeModelToCalc)
13972              * transfer_coefficient(transfer_techs,vintage,commodity,"coefficient")
13973   
13974              + 0.5 * ((transfer_flowAlong.l(timeModelToCalc,linksModel,yearsToCalc,transfer_techs,vintage)
13975                          $(transfer_incidenceModel(nodesModelToCalc,linksModel) <> 0)
13976                      + transfer_flowAgainst.l(timeModelToCalc,linksModel,yearsToCalc,transfer_techs,vintage)
13977                          $(transfer_incidenceModel(nodesModelToCalc,linksModel) <> 0))
13978                      * timeLength(timeModelToCalc)
13979                      * ( transfer_coefPerFlow(transfer_techs,vintage,commodity,"coefPerFlow")
13980                          + sum(link_types,
13981                              transfer_coefPerLength(transfer_techs,vintage,commodity,link_types,"coefPerLength")
13982                              * transfer_lengthParam(linksModel,link_types,"length")))))
13983      ;
13984   
13985  commodity_balance(timeModelToCalc,accNodesModel,accYears,balance_techComm(techs,commodity))
13986      = sum((nodesModelToCalc,yearsToCalc,vintage)
13987              $(commodity_balance_ext(timeModelToCalc,accNodesModel,nodesModelToCalc,accYears,yearsToCalc,techs,vintage,commodity)
13988                  and map_accNodesPostCalc(accNodesModel,nodesModelToCalc)
13989                  and map_accYearsPostCalc(accYears,yearsToCalc)),
13990          commodity_balance_ext(timeModelToCalc,accNodesModel,nodesModelToCalc,accYears,yearsToCalc,techs,vintage,commodity));
13991  option clear = commodity_balance_ext;
13992   
13993   
13994  * ==== annual commodity sums ====
13995   
13996  commodity_balance_annual(accNodesModel,accYears,techs,commodity,"netto")
13997      = sum(timeModelToCalc,
13998          commodity_balance(timeModelToCalc,accNodesModel,accYears,techs,commodity));
13999   
14000  commodity_balance_annual(accNodesModel,accYears,techs,commodity,"positive")
14001      = sum(timeModelToCalc
14002              $(commodity_balance(timeModelToCalc,accNodesModel,accYears,techs,commodity) > 0),
14003          commodity_balance(timeModelToCalc,accNodesModel,accYears,techs,commodity));
14004   
14005  commodity_balance_annual(accNodesModel,accYears,techs,commodity,"negative")
14006      = sum(timeModelToCalc
14007              $(commodity_balance(timeModelToCalc,accNodesModel,accYears,techs,commodity) < 0),
14008          commodity_balance(timeModelToCalc,accNodesModel,accYears,techs,commodity));
14009   
14010  commodity_balance_annual(accNodesModel,accYears,techs,commodity,"brutto")
14011      = commodity_balance_annual(accNodesModel,accYears,techs,commodity,"positive")
14012          - commodity_balance_annual(accNodesModel,accYears,techs,commodity,"negative");
14013   
14014  commodity_balance_annual(accNodesModel,accYears,techs,commodity,"flh")
14015      $(commodity_balance_annual(accNodesModel,accYears,techs,commodity,"brutto") > 0
14016          and converter_caps(accNodesModel,accYears,techs,commodity,"total") > 0 )
14017      = commodity_balance_annual(accNodesModel,accYears,techs,commodity,"brutto")
14018          / converter_caps(accNodesModel,accYears,techs,commodity,"total");
14019   
14020   
14021  * ==== marginal information ====
14022   
14023  marginals_balance(timeModelToCalc,nodesModelToCalc,yearsToCalc,commodity)
14024    $balance_usedBalance(nodesModelToCalc,yearsToCalc,commodity)
14025    =
14026    Eq_balance_commodities.m(timeModelToCalc,nodesModelToCalc,yearsToCalc,commodity);
14027   
14028  marginals_sourcesink_profile(timeModelToCalc,nodesModelToCalc,yearsToCalc,sourcesink_techs(techs),commodity)
14029      $( sourcesink_flow.m(timeModelToCalc,nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity) <> 0 )
14030      =
14031      sourcesink_flow.m(timeModelToCalc,nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity);
14032   
14033  marginals_sourcesink_sum(nodesModelToCalc,yearsToCalc,sourcesink_techs(techs),commodity)
14034      $( ( Eq_sourcesink_useLowerSum.m(nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity)
14035          + Eq_sourcesink_useUpperSum.m(nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity)
14036          + Eq_sourcesink_useFixedSum.m(nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity) ) <> eps )
14037      =
14038      ( Eq_sourcesink_useLowerSum.m(nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity)
14039      + Eq_sourcesink_useUpperSum.m(nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity)
14040      + Eq_sourcesink_useFixedSum.m(nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity) );
14041   
14042  marginals_indicator_bounds(accNodesModel,accYears,indicator)
14043      $( accounting_indicator.m(accNodesModel,accYears,indicator) <> 0 )
14044      =
14045      accounting_indicator.m(accNodesModel,accYears,indicator);
14046   
14047   
14048  * ==== R2A postcalc information ====
14049   
14051   
14052   
14053  * ==== round profiles to reduce size of gdx ====
14054   
14056  commodity_balance(timeModelToCalc,accNodesModel,accYears,techs,commodity)
14057      $commodity_balance(timeModelToCalc,accNodesModel,accYears,techs,commodity)
14058      = round(commodity_balance(timeModelToCalc,accNodesModel,accYears,techs,commodity), 6);
14059   
14060  transfer_flows(timeModelToCalc,nodesModelToCalc,nodesModelToCalc_a,linksModel,yearsToCalc,transfer_techs,commodity)
14061      $transfer_flows(timeModelToCalc,nodesModelToCalc,nodesModelToCalc_a,linksModel,yearsToCalc,transfer_techs,commodity)
14062      = round(transfer_flows(timeModelToCalc,nodesModelToCalc,nodesModelToCalc_a,linksModel,yearsToCalc,transfer_techs,commodity), 6);
14063   
14064  transfer_losses(timeModelToCalc,nodesModelToCalc,nodesModelToCalc_a,linksModel,yearsToCalc,transfer_techs,commodity)
14065      $transfer_losses(timeModelToCalc,nodesModelToCalc,nodesModelToCalc_a,linksModel,yearsToCalc,transfer_techs,commodity)
14066      = round(transfer_losses(timeModelToCalc,nodesModelToCalc,nodesModelToCalc_a,linksModel,yearsToCalc,transfer_techs,commodity), 6);
14067   
14068  storage_flows(timeModelToCalc,accNodesModel,accYears,storage_techs,commodity)
14069      $storage_flows(timeModelToCalc,accNodesModel,accYears,storage_techs,commodity)
14070      = round(storage_flows(timeModelToCalc,accNodesModel,accYears,storage_techs,commodity), 6);
14071   
14072  storage_level_out(timeModelToCalc,accNodesModel,accYears,storage_techs,commodity)
14073      $storage_level_out(timeModelToCalc,accNodesModel,accYears,storage_techs,commodity)
14074      = round(storage_level_out(timeModelToCalc,accNodesModel,accYears,storage_techs,commodity), 6);
14075   
14076  marginals_balance(timeModelToCalc,nodesModelToCalc,yearsToCalc,commodity)
14077      $marginals_balance(timeModelToCalc,nodesModelToCalc,yearsToCalc,commodity)
14078      = round(marginals_balance(timeModelToCalc,nodesModelToCalc,yearsToCalc,commodity), 6);
14079   
14080  marginals_sourcesink_profile(timeModelToCalc,nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity)
14081      $marginals_sourcesink_profile(timeModelToCalc,nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity)
14082      = round(marginals_sourcesink_profile(timeModelToCalc,nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity), 6);
14084   
INCLUDE    C:\Local\REMix\framework\remix\framework\model\source\postcalc\writegdx.gms
14087  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
14088  * SPDX-License-Identifier: BSD-3-Clause
14089   
14092   
14093  execute_unload "C:\Local\REMix\remix_nz\output\nz-h2-stor_2020-2050\result\nz-h2-stor_2020-2050.gdx"
14094      metadata
14095      timeModel
14096      timeModelToCalc
14097      nodesModel
14098      linksModel
14099      indicator
14100      commodity
14101      techs
14102      accNodesModel
14103      accYears
14104   
14105      map_nodesModel
14106      map_linksModel
14107      map_nodesAccounting
14108   
14109      indicator_accounting
14110      indicator_accounting_ref
14111      indicator_accounting_comp
14112      indicator_accounting_detailed
14113      indicator_accounting_links
14114   
14115      converter_caps
14116      converter_units
14118   
14119      transfer_caps
14120      transfer_links
14121      transfer_flows
14122      transfer_flows_annual
14123      transfer_losses
14124      transfer_losses_annual
14125   
14126      storage_caps
14127      storage_units
14128      storage_flows
14129      storage_level_out
14130      storage_flows_annual
14131      storage_losses_out
14132      storage_losses_annual
14134   
14135      commodity_balance
14136      commodity_balance_annual
14137   
14138      marginals_balance
14139      marginals_sourcesink_profile
14140      marginals_sourcesink_sum
14141      marginals_indicator_bounds
14142   
14144      ;
GAMS 40.4.0  d540b52e Oct 3, 2022           WEX-WEI x86 64bit/MS Windows - 03/01/24 15:00:59 Page 2
G e n e r a l   A l g e b r a i c   M o d e l i n g   S y s t e m
Include File Summary


   SEQ   GLOBAL TYPE      PARENT   LOCAL  FILENAME

     1        1 INPUT          0       0  C:\Local\REMix\framework\remix\framework\model\run_remix.gms
     2       13 IF DEXIST      1      13  C:\Local\REMix\remix_nz\output\nz-h2-stor_2020-2050\data\
     3       16 INCLUDE        1      16  .C:\Local\REMix\framework\remix\framework\model\source\metadata.gms
     4       25 CALL           3       9  .printf "remix_version \"0.9.7\"\n" > c:\Local\REMix\remix_nz\process\225b\\metadata
     5       26 CALL           3      10  .printf "gams_version \"40.4.0\"\n" >> c:\Local\REMix\remix_nz\process\225b\\metadata
     6       27 CALL           3      11  .printf "timestamp \"03/01/24 15:00:59\"\n" >> c:\Local\REMix\remix_nz\process\225b\\metadata
     7       29 CALL           3      13  .printf "framework_path " >> c:\Local\REMix\remix_nz\process\225b\\metadata
     8       31 CALL           3      15  .cd C:\Local\REMix\framework\remix\framework\model\source && cd| sed "s/^/\"/;s/$/\"/" >> c:\Local\REMix\remix_nz\process\225b\\metadata
     9       33 CALL           3      19  .printf "\n" >> c:\Local\REMix\remix_nz\process\225b\\metadata
    10       34 CALL           3      20  .printf "framework_hash " >> c:\Local\REMix\remix_nz\process\225b\\metadata
    11       36 CALL           3      22  .cd C:\Local\REMix\framework\remix\framework\model\source && git rev-parse HEAD >nul 2>&1 && git rev-parse HEAD >> c:\Local\REMix\remix_nz\process\225b\\metadata
    12       38 CALL           3      26  .printf "\n" >> c:\Local\REMix\remix_nz\process\225b\\metadata
    13       39 CALL           3      27  .printf "framework_branch " >> c:\Local\REMix\remix_nz\process\225b\\metadata
    14       41 CALL           3      29  .cd C:\Local\REMix\framework\remix\framework\model\source && git rev-parse --abbrev-ref HEAD >nul 2>&1 && git rev-parse --abbrev-ref HEAD | sed "s/^/\"/;s/$/\"/" >> c:\Local\REMix\remix_nz\process\225b\\metadata
    15       43 CALL           3      33  .printf "\n" >> c:\Local\REMix\remix_nz\process\225b\\metadata
    16       45 CALL           3      35  .printf "project_path " >> c:\Local\REMix\remix_nz\process\225b\\metadata
    17       47 CALL           3      37  .cd C:\Local\REMix\remix_nz\output\nz-h2-stor_2020-2050\data\./ && cd| sed "s/^/\"/;s/$/\"/" >> c:\Local\REMix\remix_nz\process\225b\\metadata
    18       49 CALL           3      41  .printf "\n" >> c:\Local\REMix\remix_nz\process\225b\\metadata
    19       50 CALL           3      42  .printf "project_hash " >> c:\Local\REMix\remix_nz\process\225b\\metadata
    20       52 CALL           3      44  .cd C:\Local\REMix\remix_nz\output\nz-h2-stor_2020-2050\data\./ && git rev-parse HEAD >nul 2>&1 && git rev-parse HEAD | sed "s/^/\"/;s/$/\"/" >> c:\Local\REMix\remix_nz\process\225b\\metadata
    21       54 CALL           3      48  .printf "\n" >> c:\Local\REMix\remix_nz\process\225b\\metadata
    22       55 CALL           3      49  .printf "project_branch " >> c:\Local\REMix\remix_nz\process\225b\\metadata
    23       57 CALL           3      51  .cd C:\Local\REMix\remix_nz\output\nz-h2-stor_2020-2050\data\./ && git rev-parse --abbrev-ref HEAD >nul 2>&1 && git rev-parse --abbrev-ref HEAD | sed "s/^/\"/;s/$/\"/" >> c:\Local\REMix\remix_nz\process\225b\\metadata
    24       59 CALL           3      55  .printf "\n" >> c:\Local\REMix\remix_nz\process\225b\\metadata
    25       62 INCLUDE        3      58  ..c:\Local\REMix\remix_nz\process\225b\metadata
    26       79 INCLUDE        1      17  .C:\Local\REMix\framework\remix\framework\model\source\data_inheritance.gms
    27      123 INCLUDE        1      26  .C:\Local\REMix\framework\remix\framework\model\source\remix.gms
    28      145 INCLUDE       27      22  ..C:\Local\REMix\framework\remix\framework\model\source\sets.gms
    29      165 IF EXIST      28      20  ..c:\Local\REMix\remix_nz\process\225b\map_aggregatetimemodel.csv
    30      216 IF EXIST      28      97  ..c:\Local\REMix\remix_nz\process\225b\set_nodesmodel.csv
    31      216 INCLUDE       28      97  ...c:\Local\REMix\remix_nz\process\225b\set_nodesmodel.csv
    32      229 IF EXIST      28      99  ..c:\Local\REMix\remix_nz\process\225b\set_nodesmodel.csv
    33      236 IF EXIST      28     106  ..c:\Local\REMix\remix_nz\process\225b\set_nodesdata.csv
    34      236 INCLUDE       28     106  ...c:\Local\REMix\remix_nz\process\225b\set_nodesdata.csv
    35      249 IF EXIST      28     108  ..c:\Local\REMix\remix_nz\process\225b\set_nodesdata.csv
    36      255 IF EXIST      28     114  ..c:\Local\REMix\remix_nz\process\225b\set_nodesmodelsel.csv
    37      255 INCLUDE       28     114  ...c:\Local\REMix\remix_nz\process\225b\set_nodesmodelsel.csv
    38      268 IF EXIST      28     116  ..c:\Local\REMix\remix_nz\process\225b\set_nodesmodelsel.csv
    39      270 IF EXIST      28     118  ..c:\Local\REMix\remix_nz\process\225b\set_nodesmodelsel.csv
    40      283 IF EXIST      28     131  ..c:\Local\REMix\remix_nz\process\225b\map_aggregatenodesmodel.csv
    41      283 INCLUDE       28     131  ...c:\Local\REMix\remix_nz\process\225b\map_aggregatenodesmodel.csv
    42      296 IF EXIST      28     133  ..c:\Local\REMix\remix_nz\process\225b\map_aggregatenodesmodel.csv
    43      299 IF EXIST      28     136  ..c:\Local\REMix\remix_nz\process\225b\map_aggregatenodesmodel.csv
    44      322 IF EXIST      28     159  ..c:\Local\REMix\remix_nz\process\225b\set_years.csv
    45      322 INCLUDE       28     159  ...c:\Local\REMix\remix_nz\process\225b\set_years.csv
    46      444 IF EXIST      28     161  ..c:\Local\REMix\remix_nz\process\225b\set_years.csv
    47      453 IF EXIST      28     170  ..c:\Local\REMix\remix_nz\process\225b\set_years.csv
    48      453 INCLUDE       28     170  ...c:\Local\REMix\remix_nz\process\225b\set_years.csv
    49      575 IF EXIST      28     172  ..c:\Local\REMix\remix_nz\process\225b\set_years.csv
    50      581 IF EXIST      28     178  ..c:\Local\REMix\remix_nz\process\225b\set_yearssel.csv
    51      581 INCLUDE       28     178  ...c:\Local\REMix\remix_nz\process\225b\set_yearssel.csv
    52      585 IF EXIST      28     180  ..c:\Local\REMix\remix_nz\process\225b\set_yearssel.csv
    53      603 IF EXIST      28     198  ..c:\Local\REMix\remix_nz\process\225b\set_activities.csv
    54      603 INCLUDE       28     198  ...c:\Local\REMix\remix_nz\process\225b\set_activities.csv
    55      612 IF EXIST      28     200  ..c:\Local\REMix\remix_nz\process\225b\set_activities.csv
    56      620 IF EXIST      28     208  ..c:\Local\REMix\remix_nz\process\225b\set_gridsegments.csv
    57      622 IF EXIST      28     210  ..c:\Local\REMix\remix_nz\process\225b\set_gridsegments.csv
    58      630 IF EXIST      28     218  ..c:\Local\REMix\remix_nz\process\225b\set_linksdata.csv
    59      630 INCLUDE       28     218  ...c:\Local\REMix\remix_nz\process\225b\set_linksdata.csv
    60      644 IF EXIST      28     220  ..c:\Local\REMix\remix_nz\process\225b\set_linksdata.csv
    61      662 IF EXIST      28     238  ..c:\Local\REMix\remix_nz\process\225b\set_link_types.csv
    62      662 INCLUDE       28     238  ...c:\Local\REMix\remix_nz\process\225b\set_link_types.csv
    63      666 IF EXIST      28     240  ..c:\Local\REMix\remix_nz\process\225b\set_link_types.csv
    64      675 IF EXIST      28     249  ..c:\Local\REMix\remix_nz\process\225b\set_commodities.csv
    65      675 INCLUDE       28     249  ...c:\Local\REMix\remix_nz\process\225b\set_commodities.csv
    66      684 IF EXIST      28     251  ..c:\Local\REMix\remix_nz\process\225b\set_commodities.csv
    67      693 IF EXIST      28     260  ..c:\Local\REMix\remix_nz\process\225b\set_indicators.csv
    68      693 INCLUDE       28     260  ...c:\Local\REMix\remix_nz\process\225b\set_indicators.csv
    69      702 IF EXIST      28     262  ..c:\Local\REMix\remix_nz\process\225b\set_indicators.csv
    70      711 IF EXIST      28     271  ..c:\Local\REMix\remix_nz\process\225b\set_converter_techs.csv
    71      711 INCLUDE       28     271  ...c:\Local\REMix\remix_nz\process\225b\set_converter_techs.csv
    72      732 IF EXIST      28     274  ..c:\Local\REMix\remix_nz\process\225b\set_storage_techs.csv
    73      732 INCLUDE       28     274  ...c:\Local\REMix\remix_nz\process\225b\set_storage_techs.csv
    74      738 IF EXIST      28     277  ..c:\Local\REMix\remix_nz\process\225b\set_transfer_techs.csv
    75      738 INCLUDE       28     277  ...c:\Local\REMix\remix_nz\process\225b\set_transfer_techs.csv
    76      742 IF EXIST      28     280  ..c:\Local\REMix\remix_nz\process\225b\set_sourcesink_techs.csv
    77      742 INCLUDE       28     280  ...c:\Local\REMix\remix_nz\process\225b\set_sourcesink_techs.csv
    78      753 IF EXIST      28     285  ..c:\Local\REMix\remix_nz\process\225b\set_converter_techs.csv
    79      753 INCLUDE       28     285  ...c:\Local\REMix\remix_nz\process\225b\set_converter_techs.csv
    80      772 IF EXIST      28     286  ..c:\Local\REMix\remix_nz\process\225b\set_converter_techs.csv
    81      776 IF EXIST      28     290  ..c:\Local\REMix\remix_nz\process\225b\set_storage_techs.csv
    82      776 INCLUDE       28     290  ...c:\Local\REMix\remix_nz\process\225b\set_storage_techs.csv
    83      780 IF EXIST      28     291  ..c:\Local\REMix\remix_nz\process\225b\set_storage_techs.csv
    84      785 IF EXIST      28     296  ..c:\Local\REMix\remix_nz\process\225b\set_transfer_techs.csv
    85      785 INCLUDE       28     296  ...c:\Local\REMix\remix_nz\process\225b\set_transfer_techs.csv
    86      787 IF EXIST      28     297  ..c:\Local\REMix\remix_nz\process\225b\set_transfer_techs.csv
    87      791 IF EXIST      28     301  ..c:\Local\REMix\remix_nz\process\225b\set_sourcesink_techs.csv
    88      791 INCLUDE       28     301  ...c:\Local\REMix\remix_nz\process\225b\set_sourcesink_techs.csv
    89      798 IF EXIST      28     302  ..c:\Local\REMix\remix_nz\process\225b\set_sourcesink_techs.csv
    90      808 IF EXIST      28     312  ..c:\Local\REMix\remix_nz\process\225b\set_degradation_states.csv
    91      810 IF EXIST      28     314  ..c:\Local\REMix\remix_nz\process\225b\set_degradation_states.csv
    92      819 IF EXIST      28     323  ..c:\Local\REMix\remix_nz\process\225b\set_soc.csv
    93      821 IF EXIST      28     325  ..c:\Local\REMix\remix_nz\process\225b\set_soc.csv
    94      837 IF EXIST      28     341  ..c:\Local\REMix\remix_nz\process\225b\transfer_linkstartend.csv
    95      837 INCLUDE       28     341  ...c:\Local\REMix\remix_nz\process\225b\transfer_linkstartend.csv
    96      864 IF EXIST      28     343  ..c:\Local\REMix\remix_nz\process\225b\transfer_linkstartend.csv
    97      878 BATINCLUDE    28     357  ...C:\Local\REMix\framework\remix\framework\model\source\battools\aggregateNodes.gms
    98      989 IF EXIST      28     466  ..c:\Local\REMix\remix_nz\process\225b\set_accnodes.csv
    99      991 IF EXIST      28     468  ..c:\Local\REMix\remix_nz\process\225b\set_accnodes.csv
   100     1056 IF EXIST      28     533  ..c:\Local\REMix\remix_nz\process\225b\map_accnodes.csv
   101     1058 IF EXIST      28     535  ..c:\Local\REMix\remix_nz\process\225b\map_accnodes.csv
   102     1112 INCLUDE       27      23  ..C:\Local\REMix\framework\remix\framework\model\source\accounting\input.gms
   103     1144 IF EXIST     102      32  ..c:\Local\REMix\remix_nz\process\225b\accounting_converterunits.csv
   104     1144 INCLUDE      102      32  ...c:\Local\REMix\remix_nz\process\225b\accounting_converterunits.csv
   105     1257 IF EXIST     102      34  ..c:\Local\REMix\remix_nz\process\225b\accounting_converterunits.csv
   106     1271 IF EXIST     102      48  ..c:\Local\REMix\remix_nz\process\225b\accounting_converteractivity.csv
   107     1271 INCLUDE      102      48  ...c:\Local\REMix\remix_nz\process\225b\accounting_converteractivity.csv
   108     1298 IF EXIST     102      50  ..c:\Local\REMix\remix_nz\process\225b\accounting_converteractivity.csv
   109     1315 IF EXIST     102      67  ..c:\Local\REMix\remix_nz\process\225b\accounting_converterstartup.csv
   110     1317 IF EXIST     102      69  ..c:\Local\REMix\remix_nz\process\225b\accounting_converterstartup.csv
   111     1336 IF EXIST     102      88  ..c:\Local\REMix\remix_nz\process\225b\accounting_storageunits.csv
   112     1336 INCLUDE      102      88  ...c:\Local\REMix\remix_nz\process\225b\accounting_storageunits.csv
   113     1365 IF EXIST     102      90  ..c:\Local\REMix\remix_nz\process\225b\accounting_storageunits.csv
   114     1387 IF EXIST     102     112  ..c:\Local\REMix\remix_nz\process\225b\accounting_transferlinks.csv
   115     1387 INCLUDE      102     112  ...c:\Local\REMix\remix_nz\process\225b\accounting_transferlinks.csv
   116     1394 IF EXIST     102     114  ..c:\Local\REMix\remix_nz\process\225b\accounting_transferlinks.csv
   117     1416 IF EXIST     102     136  ..c:\Local\REMix\remix_nz\process\225b\accounting_transferperlength.csv
   118     1416 INCLUDE      102     136  ...c:\Local\REMix\remix_nz\process\225b\accounting_transferperlength.csv
   119     1427 IF EXIST     102     138  ..c:\Local\REMix\remix_nz\process\225b\accounting_transferperlength.csv
   120     1442 IF EXIST     102     153  ..c:\Local\REMix\remix_nz\process\225b\accounting_sourcesinkflow.csv
   121     1442 INCLUDE      102     153  ...c:\Local\REMix\remix_nz\process\225b\accounting_sourcesinkflow.csv
   122     1452 IF EXIST     102     155  ..c:\Local\REMix\remix_nz\process\225b\accounting_sourcesinkflow.csv
   123     1466 IF EXIST     102     169  ..c:\Local\REMix\remix_nz\process\225b\accounting_perindicator.csv
   124     1466 INCLUDE      102     169  ...c:\Local\REMix\remix_nz\process\225b\accounting_perindicator.csv
   125     1474 IF EXIST     102     171  ..c:\Local\REMix\remix_nz\process\225b\accounting_perindicator.csv
   126     1500 IF EXIST     102     197  ..c:\Local\REMix\remix_nz\process\225b\accounting_indicatorbounds.csv
   127     1500 INCLUDE      102     197  ...c:\Local\REMix\remix_nz\process\225b\accounting_indicatorbounds.csv
   128     1504 IF EXIST     102     199  ..c:\Local\REMix\remix_nz\process\225b\accounting_indicatorbounds.csv
   129     1523 IF EXIST     102     218  ..c:\Local\REMix\remix_nz\process\225b\accounting_indicatorbounds_links.csv
   130     1525 IF EXIST     102     220  ..c:\Local\REMix\remix_nz\process\225b\accounting_indicatorbounds_links.csv
   131     1531 BATINCLUDE   102     226  ...C:\Local\REMix\framework\remix\framework\model\source\battools\aggregateAccountingMean.gms
   132     1590 BATINCLUDE   102     227  ...C:\Local\REMix\framework\remix\framework\model\source\battools\aggregateAccountingMean.gms
   133     1633 BATINCLUDE   102     228  ...C:\Local\REMix\framework\remix\framework\model\source\battools\aggregateAccountingMean.gms
   134     1676 BATINCLUDE   102     229  ...C:\Local\REMix\framework\remix\framework\model\source\battools\aggregateAccountingMean.gms
   135     1735 BATINCLUDE   102     230  ...C:\Local\REMix\framework\remix\framework\model\source\battools\aggregateAccountingMean.gms
   136     1794 BATINCLUDE   102     231  ...C:\Local\REMix\framework\remix\framework\model\source\battools\aggregateAccountingMean.gms
   137     1853 BATINCLUDE   102     232  ...C:\Local\REMix\framework\remix\framework\model\source\battools\aggregateAccountingMean.gms
   138     2262 INCLUDE       27      24  ..C:\Local\REMix\framework\remix\framework\model\source\accounting\annuities.gms
   139     2336 INCLUDE       27      26  ..C:\Local\REMix\framework\remix\framework\model\source\methods\mga_pre.gms
   140     2342 INCLUDE       27      27  ..C:\Local\REMix\framework\remix\framework\model\source\methods\pareto_pre.gms
   141     2348 INCLUDE       27      28  ..C:\Local\REMix\framework\remix\framework\model\source\postcalc\declaration.gms
   142     2365 IF DEXIST    141      17  ..C:\Local\REMix\remix_nz\output\nz-h2-stor_2020-2050\result\
   143     2567 INCLUDE       27      29  ..C:\Local\REMix\framework\remix\framework\model\source\loadgdx.gms
   144     2576 INCLUDE       27      31  ..C:\Local\REMix\framework\remix\framework\model\source\core\converter.gms
   145     2679 IF EXIST     144     103  ..c:\Local\REMix\remix_nz\process\225b\converter_capacityparam.csv
   146     2679 INCLUDE      144     103  ...c:\Local\REMix\remix_nz\process\225b\converter_capacityparam.csv
   147     8015 IF EXIST     144     105  ..c:\Local\REMix\remix_nz\process\225b\converter_capacityparam.csv
   148     8023 BATINCLUDE   144     113  ...C:\Local\REMix\framework\remix\framework\model\source\battools\aggregateNodes.gms
   149     8034 BATINCLUDE   144     114  ...C:\Local\REMix\framework\remix\framework\model\source\battools\aggregateNodes.gms
   150     8067 IF EXIST     144     137  ..c:\Local\REMix\remix_nz\process\225b\converter_techparam.csv
   151     8067 INCLUDE      144     137  ...c:\Local\REMix\remix_nz\process\225b\converter_techparam.csv
   152     8125 IF EXIST     144     139  ..c:\Local\REMix\remix_nz\process\225b\converter_techparam.csv
   153     8147 IF EXIST     144     161  ..c:\Local\REMix\remix_nz\process\225b\converter_activityprofile.csv
   154     8147 INCLUDE      144     161  ...c:\Local\REMix\remix_nz\process\225b\converter_activityprofile.csv
   155     8425 IF EXIST     144     162  ..c:\Local\REMix\remix_nz\process\225b\converter_activityprofile.csv
   156     8427 IF EXIST     144     164  ..c:\Local\REMix\remix_nz\process\225b\converter_activityprofile.csv
   157     8447 IF EXIST     144     184  ..c:\Local\REMix\remix_nz\process\225b\converter_coefficient.csv
   158     8447 INCLUDE      144     184  ...c:\Local\REMix\remix_nz\process\225b\converter_coefficient.csv
   159     8629 IF EXIST     144     185  ..c:\Local\REMix\remix_nz\process\225b\converter_coefficient.csv
   160     8630 IF EXIST     144     186  ..c:\Local\REMix\remix_nz\process\225b\converter_coefficient.csv
   161     8632 IF EXIST     144     188  ..c:\Local\REMix\remix_nz\process\225b\converter_coefficient.csv
   162     8644 IF EXIST     144     200  ..c:\Local\REMix\remix_nz\process\225b\converter_coefficientprofile.csv
   163     8645 IF EXIST     144     201  ..c:\Local\REMix\remix_nz\process\225b\converter_coefficientprofile.csv
   164     8647 IF EXIST     144     203  ..c:\Local\REMix\remix_nz\process\225b\converter_coefficientprofile.csv
   165     9583 INCLUDE       27      32  ..C:\Local\REMix\framework\remix\framework\model\source\core\storage.gms
   166     9674 IF EXIST     165      91  ..c:\Local\REMix\remix_nz\process\225b\storage_reservoirparam.csv
   167     9674 INCLUDE      165      91  ...c:\Local\REMix\remix_nz\process\225b\storage_reservoirparam.csv
   168     9887 IF EXIST     165      93  ..c:\Local\REMix\remix_nz\process\225b\storage_reservoirparam.csv
   169     9891 BATINCLUDE   165      97  ...C:\Local\REMix\framework\remix\framework\model\source\battools\aggregateNodes.gms
   170     9902 BATINCLUDE   165      98  ...C:\Local\REMix\framework\remix\framework\model\source\battools\aggregateNodes.gms
   171     9938 IF EXIST     165     124  ..c:\Local\REMix\remix_nz\process\225b\storage_techparam.csv
   172     9938 INCLUDE      165     124  ...c:\Local\REMix\remix_nz\process\225b\storage_techparam.csv
   173     9954 IF EXIST     165     126  ..c:\Local\REMix\remix_nz\process\225b\storage_techparam.csv
   174     9975 IF EXIST     165     147  ..c:\Local\REMix\remix_nz\process\225b\storage_sizeparam.csv
   175     9975 INCLUDE      165     147  ...c:\Local\REMix\remix_nz\process\225b\storage_sizeparam.csv
   176     9991 IF EXIST     165     149  ..c:\Local\REMix\remix_nz\process\225b\storage_sizeparam.csv
   177    10008 IF EXIST     165     166  ..c:\Local\REMix\remix_nz\process\225b\storage_socparam.csv
   178    10010 IF EXIST     165     168  ..c:\Local\REMix\remix_nz\process\225b\storage_socparam.csv
   179    10029 IF EXIST     165     187  ..c:\Local\REMix\remix_nz\process\225b\storage_degradationparam.csv
   180    10031 IF EXIST     165     189  ..c:\Local\REMix\remix_nz\process\225b\storage_degradationparam.csv
   181    10060 IF EXIST     165     218  ..c:\Local\REMix\remix_nz\process\225b\storage_levelprofile.csv
   182    10061 IF EXIST     165     219  ..c:\Local\REMix\remix_nz\process\225b\storage_levelprofile.csv
   183    10063 IF EXIST     165     221  ..c:\Local\REMix\remix_nz\process\225b\storage_levelprofile.csv
   184    10883 INCLUDE       27      33  ..C:\Local\REMix\framework\remix\framework\model\source\core\transfer.gms
   185    10950 IF EXIST     184      73  ..c:\Local\REMix\remix_nz\process\225b\transfer_linksparam.csv
   186    10950 INCLUDE      184      73  ...c:\Local\REMix\remix_nz\process\225b\transfer_linksparam.csv
   187    10977 IF EXIST     184      75  ..c:\Local\REMix\remix_nz\process\225b\transfer_linksparam.csv
   188    10993 IF EXIST     184      91  ..c:\Local\REMix\remix_nz\process\225b\transfer_flowprofile.csv
   189    10995 IF EXIST     184      93  ..c:\Local\REMix\remix_nz\process\225b\transfer_flowprofile.csv
   190    11015 IF EXIST     184     113  ..c:\Local\REMix\remix_nz\process\225b\transfer_techparam.csv
   191    11015 INCLUDE      184     113  ...c:\Local\REMix\remix_nz\process\225b\transfer_techparam.csv
   192    11020 IF EXIST     184     115  ..c:\Local\REMix\remix_nz\process\225b\transfer_techparam.csv
   193    11034 IF EXIST     184     129  ..c:\Local\REMix\remix_nz\process\225b\transfer_coefficient.csv
   194    11034 INCLUDE      184     129  ...c:\Local\REMix\remix_nz\process\225b\transfer_coefficient.csv
   195    11039 IF EXIST     184     131  ..c:\Local\REMix\remix_nz\process\225b\transfer_coefficient.csv
   196    11053 IF EXIST     184     145  ..c:\Local\REMix\remix_nz\process\225b\transfer_coefperflow.csv
   197    11053 INCLUDE      184     145  ...c:\Local\REMix\remix_nz\process\225b\transfer_coefperflow.csv
   198    11058 IF EXIST     184     147  ..c:\Local\REMix\remix_nz\process\225b\transfer_coefperflow.csv
   199    11072 IF EXIST     184     161  ..c:\Local\REMix\remix_nz\process\225b\transfer_coefperlength.csv
   200    11072 INCLUDE      184     161  ...c:\Local\REMix\remix_nz\process\225b\transfer_coefperlength.csv
   201    11079 IF EXIST     184     163  ..c:\Local\REMix\remix_nz\process\225b\transfer_coefperlength.csv
   202    11093 IF EXIST     184     177  ..c:\Local\REMix\remix_nz\process\225b\transfer_reactperlength.csv
   203    11095 IF EXIST     184     179  ..c:\Local\REMix\remix_nz\process\225b\transfer_reactperlength.csv
   204    11109 IF EXIST     184     193  ..c:\Local\REMix\remix_nz\process\225b\transfer_lengthparam.csv
   205    11109 INCLUDE      184     193  ...c:\Local\REMix\remix_nz\process\225b\transfer_lengthparam.csv
   206    11136 IF EXIST     184     195  ..c:\Local\REMix\remix_nz\process\225b\transfer_lengthparam.csv
   207    11150 IF EXIST     184     209  ..c:\Local\REMix\remix_nz\process\225b\transfer_gridsegments.csv
   208    11152 IF EXIST     184     211  ..c:\Local\REMix\remix_nz\process\225b\transfer_gridsegments.csv
   209    11749 INCLUDE       27      34  ..C:\Local\REMix\framework\remix\framework\model\source\core\sourcesink.gms
   210    11787 IF EXIST     209      38  ..c:\Local\REMix\remix_nz\process\225b\sourcesink_config.csv
   211    11787 INCLUDE      209      38  ...c:\Local\REMix\remix_nz\process\225b\sourcesink_config.csv
   212    12002 IF EXIST     209      40  ..c:\Local\REMix\remix_nz\process\225b\sourcesink_config.csv
   213    12006 BATINCLUDE   209      44  ...C:\Local\REMix\framework\remix\framework\model\source\battools\aggregateNodes.gms
   214    12034 IF EXIST     209      62  ..c:\Local\REMix\remix_nz\process\225b\sourcesink_profile.csv
   215    12034 INCLUDE      209      62  ...c:\Local\REMix\remix_nz\process\225b\sourcesink_profile.csv
   216    12105 IF EXIST     209      63  ..c:\Local\REMix\remix_nz\process\225b\sourcesink_profile.csv
   217    12106 IF EXIST     209      64  ..c:\Local\REMix\remix_nz\process\225b\sourcesink_profile.csv
   218    12108 IF EXIST     209      66  ..c:\Local\REMix\remix_nz\process\225b\sourcesink_profile.csv
   219    12128 IF EXIST     209      86  ..c:\Local\REMix\remix_nz\process\225b\sourcesink_annualsum.csv
   220    12128 INCLUDE      209      86  ...c:\Local\REMix\remix_nz\process\225b\sourcesink_annualsum.csv
   221    12252 IF EXIST     209      88  ..c:\Local\REMix\remix_nz\process\225b\sourcesink_annualsum.csv
   222    12255 BATINCLUDE   209      91  ...C:\Local\REMix\framework\remix\framework\model\source\battools\aggregateNodes.gms
   223    12436 INCLUDE       27      35  ..C:\Local\REMix\framework\remix\framework\model\source\core\balance.gms
   224    12572 INCLUDE       27      37  ..C:\Local\REMix\framework\remix\framework\model\source\accounting\equations.gms
   225    12994 INCLUDE       27      38  ..C:\Local\REMix\framework\remix\framework\model\source\optiframe.gms
   226    13035 INCLUDE       27      72  ..C:\Local\REMix\framework\remix\framework\model\source\methods\checkanno.gms
   227    13046 INCLUDE       27      75  ..C:\Local\REMix\framework\remix\framework\model\source\methods\pips.gms
   228    13055 INCLUDE       27      78  ..C:\Local\REMix\framework\remix\framework\model\source\methods\solve.gms
   229    13267 INCLUDE       27      81  ..C:\Local\REMix\framework\remix\framework\model\source\methods\pareto.gms
   230    13276 INCLUDE       27      84  ..C:\Local\REMix\framework\remix\framework\model\source\methods\mga.gms
   231    13285 INCLUDE       27      87  ..C:\Local\REMix\framework\remix\framework\model\source\methods\iternodes.gms
   232    13294 INCLUDE       27      90  ..C:\Local\REMix\framework\remix\framework\model\source\postcalc\definition.gms
   233    14086 INCLUDE       27      91  ..C:\Local\REMix\framework\remix\framework\model\source\postcalc\writegdx.gms


COMPILATION TIME     =       10.875 SECONDS     83 MB  40.4.0 d540b52e WEX-WEI
GAMS 40.4.0  d540b52e Oct 3, 2022           WEX-WEI x86 64bit/MS Windows - 03/01/24 15:00:59 Page 3
G e n e r a l   A l g e b r a i c   M o d e l i n g   S y s t e m
Range Statistics    SOLVE remix Using MIP From line 13252


RANGE STATISTICS (ABSOLUTE NON-ZERO FINITE VALUES)

RHS       [min, max] : [ 2.000E-06, 1.165E+03] - Zero values observed as well
Bound     [min, max] : [        NA,        NA] - Zero values observed as well
Matrix    [min, max] : [ 1.000E-02, 1.857E+02]

GAMS 40.4.0  d540b52e Oct 3, 2022           WEX-WEI x86 64bit/MS Windows - 03/01/24 15:00:59 Page 4
G e n e r a l   A l g e b r a i c   M o d e l i n g   S y s t e m
Model Statistics    SOLVE remix Using MIP From line 13252


LOOPS                           optiframeToCalc   of1


MODEL STATISTICS

BLOCKS OF EQUATIONS          75     SINGLE EQUATIONS    8,130,057
BLOCKS OF VARIABLES          38     SINGLE VARIABLES    8,410,706
NON ZERO ELEMENTS    24,508,639


GENERATION TIME      =      265.407 SECONDS  7,388 MB  40.4.0 d540b52e WEX-WEI


EXECUTION TIME       =      344.469 SECONDS  7,388 MB  40.4.0 d540b52e WEX-WEI
               L O O P S         optiframeToCalc of1

GAMS 40.4.0  d540b52e Oct 3, 2022           WEX-WEI x86 64bit/MS Windows - 03/01/24 15:00:59 Page 5
G e n e r a l   A l g e b r a i c   M o d e l i n g   S y s t e m
Solution Report     SOLVE remix Using MIP From line 13252


               S O L V E      S U M M A R Y

     MODEL   remix               OBJECTIVE  accounting_objective
     TYPE    MIP                 DIRECTION  MINIMIZE
     SOLVER  CPLEX               FROM LINE  13252

**** SOLVER STATUS     1 Normal Completion
**** MODEL STATUS      1 Optimal
**** OBJECTIVE VALUE            17122.3324

 RESOURCE USAGE, LIMIT        617.672   1209600.000
 ITERATION COUNT, LIMIT       243    2147483647
--- GAMS/Cplex Link licensed for continuous and discrete problems.

Reading parameter(s) from "c:\Local\REMix\remix_nz\process\cplex.opt"
>>  rerun no
>>  iis 1
>>  lpmethod 4
>>  barorder 3 /;
*** Value Error line 4: Integer expected, for option "barorder" saw "3 /;"
*** Value Error line 4:    Option ignored
>>  preind 1
>>  scaind 0
>>  predual -1
>>  baralg 0
>>  barstartalg 1
>>  barepcomp 1e-6
>>  solutiontype 2
>>  startalg 4
>>  epgap 1e-3
>>  quality 1
>>  barcolnz 0
>>  threads 4
>>  parallelmode 1
Finished reading from "c:\Local\REMix\remix_nz\process\cplex.opt"

--- GMO setup time: 0.00s
--- Space for names approximately 1027.65 Mb
--- Use option 'names no' to turn use of names off
--- GMO memory 3016.01 Mb (peak 3080.18 Mb)
--- Dictionary memory 0.00 Mb
--- Cplex 22.1.0.0 link memory 253.46 Mb (peak 1729.77 Mb)
--- Starting Cplex


--- LP status (1): optimal.
--- Cplex Time: 599.91sec (det. 561740.79 ticks)


Optimal solution found
Objective:        17122.332388

Solution Quality Statistics:
                                   unscaled                scaled
                               max         sum         max         sum
primal infeasibility        2.839e-07   3.217e-02   2.839e-07   3.217e-02
dual infeasibility          5.427e-10   1.082e-08   5.427e-10   1.082e-08
primal residual             2.954e-09   3.046e-09   2.954e-09   3.046e-09
dual residual               8.238e-04   3.278e-03   8.238e-04   3.278e-03
primal solution vector      1.712e+04   2.530e+06   1.712e+04   2.530e+06
dual solution vector        1.593e+04   3.291e+06   1.593e+04   3.291e+06
slacks                      1.153e+03   1.371e+06   1.153e+03   1.371e+06
reduced costs               1.593e+04   2.399e+07   1.593e+04   2.399e+07
comp. slackness viol.       7.232e-06   7.533e-02




**** REPORT SUMMARY :        0     NONOPT
                             0 INFEASIBLE
                             0  UNBOUNDED
GAMS 40.4.0  d540b52e Oct 3, 2022           WEX-WEI x86 64bit/MS Windows - 03/01/24 15:00:59 Page 6
G e n e r a l   A l g e b r a i c   M o d e l i n g   S y s t e m
E x e c u t i o n


**** REPORT FILE SUMMARY

opt c:\Local\REMix\remix_nz\process\cplex.opt


EXECUTION TIME       =       97.485 SECONDS  6,473 MB  40.4.0 d540b52e WEX-WEI


USER: Medium MUD - 10 User License                   S220920|0002AO-GEN
      University of Canterbury, Civil Engineering Department    DC16319
      License for teaching and research at degree granting institutions


**** FILE SUMMARY

Input      C:\Local\REMix\framework\remix\framework\model\run_remix.gms
Output     c:\Local\REMix\remix_nz\process\run_remix.lst
