GAMS 40.4.0  d540b52e Oct 3, 2022           WEX-WEI x86 64bit/MS Windows - 10/06/23 11:39:41 Page 1
G e n e r a l   A l g e b r a i c   M o d e l i n g   S y s t e m
C o m p i l a t i o n


   1  * SPDX-FileCopyrightText: Copyright (c) 2023 German Aerospace Center (DLR)
   2  * SPDX-License-Identifier: BSD-3-Clause
   3   
   4  * ==== REMix version number ====
   6   
   7  * ==== global settings ====
  11   
  13   
  14  * ==== write metadata and inherit dataset ====
INCLUDE    C:\Local\REMix\framework\remix\framework\model\source\metadata.gms
  22   
  26   
  42   
  58   
  59  set metadata(*) /
INCLUDE    c:\Local\REMix\remix_nz\process\225a\metadata
  61  remix_version "0.9.2"
  62  gams_version "40.4.0"
  63  timestamp "10/06/23 11:39:41"
  64  framework_path "C:\Local\REMix\framework\remix\framework\model\source"
  65   
  66  framework_hash 96c2159997fb47c52b8300c49677756ddfb1ee40
  67   
  68  framework_branch "dev"
  69   
  70  project_path "C:\Local\REMix\remix_nz\output\high_pop_out_2030-2040-2050\data"
  71   
  72  project_hash "1d3992c07c8caf9935f7e22920ad129b1e6cde81"
  73   
  74  project_branch "main"
  75   
  76  /;
INCLUDE    C:\Local\REMix\framework\remix\framework\model\source\data_inheritance.gms
  78  * SPDX-FileCopyrightText: Copyright (c) 2023 German Aerospace Center (DLR)
  79  * SPDX-License-Identifier: BSD-3-Clause
  80   
  83   
  88   
  89  * pandas based data inheritance reading in the dat files, merging them and writing csv files in the scrdir
 109  ;
 110   
 114   
 115  * ==== run remix ====
INCLUDE    C:\Local\REMix\framework\remix\framework\model\source\remix.gms
 120  * SPDX-FileCopyrightText: Copyright (c) 2023 German Aerospace Center (DLR)
 121  * SPDX-License-Identifier: BSD-3-Clause
 122   
 123  * ==== global settings ====
 130   
 133   
 135   
 138   
 139  * ==== include modules ====
INCLUDE    C:\Local\REMix\framework\remix\framework\model\source\sets.gms
 141  * SPDX-FileCopyrightText: Copyright (c) 2023 German Aerospace Center (DLR)
 142  * SPDX-License-Identifier: BSD-3-Clause
 143   
 144  * // # sets
 145  * // Sets are the indices of variables and parameters.
 146   
 147  * // ## Reference
 148  * // {special_table_sets}
 149   
 150  * // ## Input Files
 151  * // {special_table_set_input_files}
 788   
 789  map_accNodes(accNodesModel,accNodesModel_aggregation)
 790      $sum((nodesData, nodesModelToCalc)
 791              $( sameas(nodesModelToCalc,accNodesModel)
 792                  and map_accNodesLoad(nodesData,accNodesModel_aggregation)
 793                  and aggregateNodesModel(nodesData,nodesModelToCalc)), 1) = yes;
 794   
 795  map_accNodes(accNodesModel,"global")$sum(nodesModelToCalc$sameas(accNodesModel,nodesModelToCalc), 1) = yes;
 796  map_accNodes(accNodesModel,"global")$sum(accNodes$sameas(accNodesModel,accNodes), 1) = yes;
 797  map_accNodes(accNodesModel,accNodesModel) = yes;
 798  map_accLinks(accLinksModel,"global")$sum(linksModelToCalc$sameas(accLinksModel,linksModelToCalc), 1) = yes;
 799  map_accLinks(accLinksModel,accLinksModel) = yes;
 800  map_accYears(accYears,"horizon")$sum(yearsToCalc$sameas(accYears,yearsToCalc), 1)  = yes;
 801  map_accYears(accYears,accYears) = yes;
 802   
 803  map_accNodesToCalc(accNodesModel,nodesModelToCalc)
 804      $sum((nodesData)
 805              $( map_accNodesLoad(nodesData,accNodesModel)
 806                  and aggregateNodesModel(nodesData,nodesModelToCalc)), 1) = yes;
 807   
 808  map_accNodesToCalc("global",nodesModelToCalc) = yes;
 809  map_accNodesToCalc(accNodesModel,nodesModelToCalc)$sameas(accNodesModel,nodesModelToCalc) = yes;
 810  map_accLinksToCalc("global",linksModelToCalc) = yes;
 811  map_accLinksToCalc(accLinksModel,linksModelToCalc)$sameas(accLinksModel,linksModelToCalc) = yes;
 812  map_accYearsToCalc("horizon",yearsToCalc) = yes;
 813  map_accYearsToCalc(accYears,yearsToCalc)$sameas(accYears,yearsToCalc) = yes;
 814   
 815  * Duplicate sets for postcalc reporting without horizon and accYears
 816  map_accNodesPostCalc(accNodesModel,nodesModelToCalc) = map_accNodesToCalc(accNodesModel,nodesModelToCalc);
 817  map_accLinksPostCalc(accLinksModel,linksModelToCalc) = map_accLinksToCalc(accLinksModel,linksModelToCalc);
 818  map_accYearsPostCalc(accYears,yearsToCalc)$sameas(accYears,yearsToCalc) = yes;
 819  map_accYearsPostCalc(accYears,years)$(sameas(accYears,years) and years.val < sum(yearsToCalc$(ord(yearsToCalc) = 1), yearsToCalc.val)) = yes;
 820   
 821  set map_nodesAccounting(accNodesModel_aggregation,accNodesModel) "Map accounting nodes describes the mapping between model accounting nodes and data nodes." ;
 822  option map_nodesAccounting < map_accNodes;
 823   
 824  * ==== Generic sets  ====
 825  * These set names are repeated across different profile parameters.
 826  * they are not strictly related to each other and are not input data but
 827  * are needed for validation.
 828  ** // PROFILE: profileTypes | Profile Types | OEO_00140056:flow potential | set_profiletypes.csv
 829   
 830  ** // SET: scenario | Scenario | OEO_00000364:scenario | set_scenarios.csv
 831  * "Scenario indexes help to differentiate scenarios." /
 832   
 833  ** // SET: capType | Capacity Types | OEO_00030019:balance process attribute | set_captypes.csv
 834  * "Capacity types differentiate investment decisions." /
 835   
 836  ** // SET: balanceType | Balance Types | OEO_00030019:balance process attribute | set_balancetypes.csv
 837  * "Balance types differentiate types of balances." /
INCLUDE    C:\Local\REMix\framework\remix\framework\model\source\accounting\input.gms
 839  * SPDX-FileCopyrightText: Copyright (c) 2023 German Aerospace Center (DLR)
 840  * SPDX-License-Identifier: BSD-3-Clause
 841   
 842  * // # accounting_input
 843  * // The parameters in this file describe the accounting of indicators in the model.
 844   
 845  * // ## Variables
 846  * // {special_table_input_variables}
1164   
1165  * Aggregate accounting parameters
BATINCLUDE C:\Local\REMix\framework\remix\framework\model\source\battools\aggregateAccountingMean.gms
1167  * SPDX-FileCopyrightText: Copyright (c) 2023 German Aerospace Center (DLR)
1168  * SPDX-License-Identifier: BSD-3-Clause
1169   
1171   
1173   
1174  set accounting_converterUnitsNonzero(indicator,accnodesData,converter_techs,vintage);
1175  accounting_converterUnitsNonzero(indicator,accnodesData,converter_techs,vintage)
1176      $sum(pc_accounting_converterUnits$accounting_converterUnitsIn(indicator,accnodesData,converter_techs,vintage,pc_accounting_converterUnits), 1)
1177      = yes;
1178   
1180  set accounting_converterUnitsChk(indicator,nodesModel,converter_techs,vintage,pc_accounting_converterUnits);
1181  accounting_converterUnitsChk(indicator,nodesModel,converter_techs,vintage,"useAnnuity")
1182      $sum((nodesData,accnodesData)
1183              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1184                  and accounting_converterUnitsNonzero(indicator,accnodesData,converter_techs,vintage)), 1)
1185      = smax((nodesData,accnodesData)
1186              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1187                  and accounting_converterUnitsNonzero(indicator,accnodesData,converter_techs,vintage)),
1188          accounting_converterUnitsIn(indicator,accnodesData,converter_techs,vintage,"useAnnuity"))
1189      - smin((nodesData,accnodesData)
1190              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1191                  and accounting_converterUnitsNonzero(indicator,accnodesData,converter_techs,vintage)),
1192          accounting_converterUnitsIn(indicator,accnodesData,converter_techs,vintage,"useAnnuity"));
1193   
1194  abort$sum(accounting_converterUnitsChk(indicator,nodesModel,converter_techs,vintage,pc_accounting_converterUnits), 1) "Cannot aggregate technologies with different useAnnuity values."
1196   
1197  parameter accounting_converterUnitsAgg(indicator,nodesModel,converter_techs,vintage,pc_accounting_converterUnits);
1198  accounting_converterUnitsAgg(indicator,nodesModel,converter_techs,vintage,pc_accounting_converterUnits)
1199      $sum((nodesData,accnodesData)
1200              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1201                  and accounting_converterUnitsNonzero(indicator,accnodesData,converter_techs,vintage)), 1)
1202      = sum((nodesData,accnodesData)
1203              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1204                  and accounting_converterUnitsNonzero(indicator,accnodesData,converter_techs,vintage)),
1205          accounting_converterUnitsIn(indicator,accnodesData,converter_techs,vintage,pc_accounting_converterUnits))
1206      / sum((nodesData,accnodesData)
1207              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1208                  and accounting_converterUnitsNonzero(indicator,accnodesData,converter_techs,vintage)),
1209          1);
1210   
1211  parameter accounting_converterUnits(indicator,nodesModel,converter_techs,vintage,pc_accounting_converterUnits);
1212  loop(accnodes,
1213  accounting_converterUnits(indicator,nodesModel,converter_techs,vintage,pc_accounting_converterUnits)
1214      $sum(accnodesData$(map_accnodesToCalc(accnodes,nodesModel) and sameas(accnodes,accnodesData)
1215                              and accounting_converterUnitsIn(indicator,accnodesData,converter_techs,vintage,pc_accounting_converterUnits)), 1)
1216      = sum(accnodesData$(map_accnodesToCalc(accnodes,nodesModel) and sameas(accnodes,accnodesData)),
1217              accounting_converterUnitsIn(indicator,accnodesData,converter_techs,vintage,pc_accounting_converterUnits));
1218  );
1219   
1220  accounting_converterUnits(indicator,nodesModel,converter_techs,vintage,pc_accounting_converterUnits)
1221      $accounting_converterUnitsAgg(indicator,nodesModel,converter_techs,vintage,pc_accounting_converterUnits)
1222      = accounting_converterUnitsAgg(indicator,nodesModel,converter_techs,vintage,pc_accounting_converterUnits);
1223   
1224  * option kill %paramName%Nonzero %paramName%Chk %paramName%Agg
BATINCLUDE C:\Local\REMix\framework\remix\framework\model\source\battools\aggregateAccountingMean.gms
1226  * SPDX-FileCopyrightText: Copyright (c) 2023 German Aerospace Center (DLR)
1227  * SPDX-License-Identifier: BSD-3-Clause
1228   
1230   
1232   
1233  set accounting_converterActivityNonzero(indicator,accnodesData,converter_techs,vintage,activity);
1234  accounting_converterActivityNonzero(indicator,accnodesData,converter_techs,vintage,activity)
1235      $sum(pc_accounting_converterActivity$accounting_converterActivityIn(indicator,accnodesData,converter_techs,vintage,activity,pc_accounting_converterActivity), 1)
1236      = yes;
1237   
1239   
1240  parameter accounting_converterActivityAgg(indicator,nodesModel,converter_techs,vintage,activity,pc_accounting_converterActivity);
1241  accounting_converterActivityAgg(indicator,nodesModel,converter_techs,vintage,activity,pc_accounting_converterActivity)
1242      $sum((nodesData,accnodesData)
1243              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1244                  and accounting_converterActivityNonzero(indicator,accnodesData,converter_techs,vintage,activity)), 1)
1245      = sum((nodesData,accnodesData)
1246              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1247                  and accounting_converterActivityNonzero(indicator,accnodesData,converter_techs,vintage,activity)),
1248          accounting_converterActivityIn(indicator,accnodesData,converter_techs,vintage,activity,pc_accounting_converterActivity))
1249      / sum((nodesData,accnodesData)
1250              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1251                  and accounting_converterActivityNonzero(indicator,accnodesData,converter_techs,vintage,activity)),
1252          1);
1253   
1254  parameter accounting_converterActivity(indicator,nodesModel,converter_techs,vintage,activity,pc_accounting_converterActivity);
1255  loop(accnodes,
1256  accounting_converterActivity(indicator,nodesModel,converter_techs,vintage,activity,pc_accounting_converterActivity)
1257      $sum(accnodesData$(map_accnodesToCalc(accnodes,nodesModel) and sameas(accnodes,accnodesData)
1258                              and accounting_converterActivityIn(indicator,accnodesData,converter_techs,vintage,activity,pc_accounting_converterActivity)), 1)
1259      = sum(accnodesData$(map_accnodesToCalc(accnodes,nodesModel) and sameas(accnodes,accnodesData)),
1260              accounting_converterActivityIn(indicator,accnodesData,converter_techs,vintage,activity,pc_accounting_converterActivity));
1261  );
1262   
1263  accounting_converterActivity(indicator,nodesModel,converter_techs,vintage,activity,pc_accounting_converterActivity)
1264      $accounting_converterActivityAgg(indicator,nodesModel,converter_techs,vintage,activity,pc_accounting_converterActivity)
1265      = accounting_converterActivityAgg(indicator,nodesModel,converter_techs,vintage,activity,pc_accounting_converterActivity);
1266   
1267  * option kill %paramName%Nonzero %paramName%Chk %paramName%Agg
BATINCLUDE C:\Local\REMix\framework\remix\framework\model\source\battools\aggregateAccountingMean.gms
1269  * SPDX-FileCopyrightText: Copyright (c) 2023 German Aerospace Center (DLR)
1270  * SPDX-License-Identifier: BSD-3-Clause
1271   
1273   
1275   
1276  set accounting_converterStartupNonzero(indicator,accnodesData,converter_techs,vintage);
1277  accounting_converterStartupNonzero(indicator,accnodesData,converter_techs,vintage)
1278      $sum(pc_accounting_converterStartup$accounting_converterStartupIn(indicator,accnodesData,converter_techs,vintage,pc_accounting_converterStartup), 1)
1279      = yes;
1280   
1282   
1283  parameter accounting_converterStartupAgg(indicator,nodesModel,converter_techs,vintage,pc_accounting_converterStartup);
1284  accounting_converterStartupAgg(indicator,nodesModel,converter_techs,vintage,pc_accounting_converterStartup)
1285      $sum((nodesData,accnodesData)
1286              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1287                  and accounting_converterStartupNonzero(indicator,accnodesData,converter_techs,vintage)), 1)
1288      = sum((nodesData,accnodesData)
1289              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1290                  and accounting_converterStartupNonzero(indicator,accnodesData,converter_techs,vintage)),
1291          accounting_converterStartupIn(indicator,accnodesData,converter_techs,vintage,pc_accounting_converterStartup))
1292      / sum((nodesData,accnodesData)
1293              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1294                  and accounting_converterStartupNonzero(indicator,accnodesData,converter_techs,vintage)),
1295          1);
1296   
1297  parameter accounting_converterStartup(indicator,nodesModel,converter_techs,vintage,pc_accounting_converterStartup);
1298  loop(accnodes,
1299  accounting_converterStartup(indicator,nodesModel,converter_techs,vintage,pc_accounting_converterStartup)
1300      $sum(accnodesData$(map_accnodesToCalc(accnodes,nodesModel) and sameas(accnodes,accnodesData)
1301                              and accounting_converterStartupIn(indicator,accnodesData,converter_techs,vintage,pc_accounting_converterStartup)), 1)
1302      = sum(accnodesData$(map_accnodesToCalc(accnodes,nodesModel) and sameas(accnodes,accnodesData)),
1303              accounting_converterStartupIn(indicator,accnodesData,converter_techs,vintage,pc_accounting_converterStartup));
1304  );
1305   
1306  accounting_converterStartup(indicator,nodesModel,converter_techs,vintage,pc_accounting_converterStartup)
1307      $accounting_converterStartupAgg(indicator,nodesModel,converter_techs,vintage,pc_accounting_converterStartup)
1308      = accounting_converterStartupAgg(indicator,nodesModel,converter_techs,vintage,pc_accounting_converterStartup);
1309   
1310  * option kill %paramName%Nonzero %paramName%Chk %paramName%Agg
BATINCLUDE C:\Local\REMix\framework\remix\framework\model\source\battools\aggregateAccountingMean.gms
1312  * SPDX-FileCopyrightText: Copyright (c) 2023 German Aerospace Center (DLR)
1313  * SPDX-License-Identifier: BSD-3-Clause
1314   
1316   
1318   
1319  set accounting_storageUnitsNonzero(indicator,accnodesData,storage_techs,vintage);
1320  accounting_storageUnitsNonzero(indicator,accnodesData,storage_techs,vintage)
1321      $sum(pc_accounting_storageUnits$accounting_storageUnitsIn(indicator,accnodesData,storage_techs,vintage,pc_accounting_storageUnits), 1)
1322      = yes;
1323   
1325  set accounting_storageUnitsChk(indicator,nodesModel,storage_techs,vintage,pc_accounting_storageUnits);
1326  accounting_storageUnitsChk(indicator,nodesModel,storage_techs,vintage,"useAnnuity")
1327      $sum((nodesData,accnodesData)
1328              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1329                  and accounting_storageUnitsNonzero(indicator,accnodesData,storage_techs,vintage)), 1)
1330      = smax((nodesData,accnodesData)
1331              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1332                  and accounting_storageUnitsNonzero(indicator,accnodesData,storage_techs,vintage)),
1333          accounting_storageUnitsIn(indicator,accnodesData,storage_techs,vintage,"useAnnuity"))
1334      - smin((nodesData,accnodesData)
1335              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1336                  and accounting_storageUnitsNonzero(indicator,accnodesData,storage_techs,vintage)),
1337          accounting_storageUnitsIn(indicator,accnodesData,storage_techs,vintage,"useAnnuity"));
1338   
1339  abort$sum(accounting_storageUnitsChk(indicator,nodesModel,storage_techs,vintage,pc_accounting_storageUnits), 1) "Cannot aggregate technologies with different useAnnuity values."
1341   
1342  parameter accounting_storageUnitsAgg(indicator,nodesModel,storage_techs,vintage,pc_accounting_storageUnits);
1343  accounting_storageUnitsAgg(indicator,nodesModel,storage_techs,vintage,pc_accounting_storageUnits)
1344      $sum((nodesData,accnodesData)
1345              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1346                  and accounting_storageUnitsNonzero(indicator,accnodesData,storage_techs,vintage)), 1)
1347      = sum((nodesData,accnodesData)
1348              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1349                  and accounting_storageUnitsNonzero(indicator,accnodesData,storage_techs,vintage)),
1350          accounting_storageUnitsIn(indicator,accnodesData,storage_techs,vintage,pc_accounting_storageUnits))
1351      / sum((nodesData,accnodesData)
1352              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1353                  and accounting_storageUnitsNonzero(indicator,accnodesData,storage_techs,vintage)),
1354          1);
1355   
1356  parameter accounting_storageUnits(indicator,nodesModel,storage_techs,vintage,pc_accounting_storageUnits);
1357  loop(accnodes,
1358  accounting_storageUnits(indicator,nodesModel,storage_techs,vintage,pc_accounting_storageUnits)
1359      $sum(accnodesData$(map_accnodesToCalc(accnodes,nodesModel) and sameas(accnodes,accnodesData)
1360                              and accounting_storageUnitsIn(indicator,accnodesData,storage_techs,vintage,pc_accounting_storageUnits)), 1)
1361      = sum(accnodesData$(map_accnodesToCalc(accnodes,nodesModel) and sameas(accnodes,accnodesData)),
1362              accounting_storageUnitsIn(indicator,accnodesData,storage_techs,vintage,pc_accounting_storageUnits));
1363  );
1364   
1365  accounting_storageUnits(indicator,nodesModel,storage_techs,vintage,pc_accounting_storageUnits)
1366      $accounting_storageUnitsAgg(indicator,nodesModel,storage_techs,vintage,pc_accounting_storageUnits)
1367      = accounting_storageUnitsAgg(indicator,nodesModel,storage_techs,vintage,pc_accounting_storageUnits);
1368   
1369  * option kill %paramName%Nonzero %paramName%Chk %paramName%Agg
BATINCLUDE C:\Local\REMix\framework\remix\framework\model\source\battools\aggregateAccountingMean.gms
1371  * SPDX-FileCopyrightText: Copyright (c) 2023 German Aerospace Center (DLR)
1372  * SPDX-License-Identifier: BSD-3-Clause
1373   
1375   
1377   
1378  set accounting_transferLinksNonzero(indicator,acclinksData,transfer_techs,vintage);
1379  accounting_transferLinksNonzero(indicator,acclinksData,transfer_techs,vintage)
1380      $sum(pc_accounting_transferLinks$accounting_transferLinksIn(indicator,acclinksData,transfer_techs,vintage,pc_accounting_transferLinks), 1)
1381      = yes;
1382   
1384  set accounting_transferLinksChk(indicator,linksModel,transfer_techs,vintage,pc_accounting_transferLinks);
1385  accounting_transferLinksChk(indicator,linksModel,transfer_techs,vintage,"useAnnuity")
1386      $sum((linksData,acclinksData)
1387              $(aggregatelinksModel(linksData,linksModel) and sameas(linksData,acclinksData)
1388                  and accounting_transferLinksNonzero(indicator,acclinksData,transfer_techs,vintage)), 1)
1389      = smax((linksData,acclinksData)
1390              $(aggregatelinksModel(linksData,linksModel) and sameas(linksData,acclinksData)
1391                  and accounting_transferLinksNonzero(indicator,acclinksData,transfer_techs,vintage)),
1392          accounting_transferLinksIn(indicator,acclinksData,transfer_techs,vintage,"useAnnuity"))
1393      - smin((linksData,acclinksData)
1394              $(aggregatelinksModel(linksData,linksModel) and sameas(linksData,acclinksData)
1395                  and accounting_transferLinksNonzero(indicator,acclinksData,transfer_techs,vintage)),
1396          accounting_transferLinksIn(indicator,acclinksData,transfer_techs,vintage,"useAnnuity"));
1397   
1398  abort$sum(accounting_transferLinksChk(indicator,linksModel,transfer_techs,vintage,pc_accounting_transferLinks), 1) "Cannot aggregate technologies with different useAnnuity values."
1400   
1401  parameter accounting_transferLinksAgg(indicator,linksModel,transfer_techs,vintage,pc_accounting_transferLinks);
1402  accounting_transferLinksAgg(indicator,linksModel,transfer_techs,vintage,pc_accounting_transferLinks)
1403      $sum((linksData,acclinksData)
1404              $(aggregatelinksModel(linksData,linksModel) and sameas(linksData,acclinksData)
1405                  and accounting_transferLinksNonzero(indicator,acclinksData,transfer_techs,vintage)), 1)
1406      = sum((linksData,acclinksData)
1407              $(aggregatelinksModel(linksData,linksModel) and sameas(linksData,acclinksData)
1408                  and accounting_transferLinksNonzero(indicator,acclinksData,transfer_techs,vintage)),
1409          accounting_transferLinksIn(indicator,acclinksData,transfer_techs,vintage,pc_accounting_transferLinks))
1410      / sum((linksData,acclinksData)
1411              $(aggregatelinksModel(linksData,linksModel) and sameas(linksData,acclinksData)
1412                  and accounting_transferLinksNonzero(indicator,acclinksData,transfer_techs,vintage)),
1413          1);
1414   
1415  parameter accounting_transferLinks(indicator,linksModel,transfer_techs,vintage,pc_accounting_transferLinks);
1416  loop(acclinks,
1417  accounting_transferLinks(indicator,linksModel,transfer_techs,vintage,pc_accounting_transferLinks)
1418      $sum(acclinksData$(map_acclinksToCalc(acclinks,linksModel) and sameas(acclinks,acclinksData)
1419                              and accounting_transferLinksIn(indicator,acclinksData,transfer_techs,vintage,pc_accounting_transferLinks)), 1)
1420      = sum(acclinksData$(map_acclinksToCalc(acclinks,linksModel) and sameas(acclinks,acclinksData)),
1421              accounting_transferLinksIn(indicator,acclinksData,transfer_techs,vintage,pc_accounting_transferLinks));
1422  );
1423   
1424  accounting_transferLinks(indicator,linksModel,transfer_techs,vintage,pc_accounting_transferLinks)
1425      $accounting_transferLinksAgg(indicator,linksModel,transfer_techs,vintage,pc_accounting_transferLinks)
1426      = accounting_transferLinksAgg(indicator,linksModel,transfer_techs,vintage,pc_accounting_transferLinks);
1427   
1428  * option kill %paramName%Nonzero %paramName%Chk %paramName%Agg
BATINCLUDE C:\Local\REMix\framework\remix\framework\model\source\battools\aggregateAccountingMean.gms
1430  * SPDX-FileCopyrightText: Copyright (c) 2023 German Aerospace Center (DLR)
1431  * SPDX-License-Identifier: BSD-3-Clause
1432   
1434   
1436   
1437  set accounting_transferPerLengthNonzero(indicator,acclinksData,transfer_techs,vintage,link_types);
1438  accounting_transferPerLengthNonzero(indicator,acclinksData,transfer_techs,vintage,link_types)
1439      $sum(pc_accounting_transferPerLength$accounting_transferPerLengthIn(indicator,acclinksData,transfer_techs,vintage,link_types,pc_accounting_transferPerLength), 1)
1440      = yes;
1441   
1443  set accounting_transferPerLengthChk(indicator,linksModel,transfer_techs,vintage,link_types,pc_accounting_transferPerLength);
1444  accounting_transferPerLengthChk(indicator,linksModel,transfer_techs,vintage,link_types,"useAnnuity")
1445      $sum((linksData,acclinksData)
1446              $(aggregatelinksModel(linksData,linksModel) and sameas(linksData,acclinksData)
1447                  and accounting_transferPerLengthNonzero(indicator,acclinksData,transfer_techs,vintage,link_types)), 1)
1448      = smax((linksData,acclinksData)
1449              $(aggregatelinksModel(linksData,linksModel) and sameas(linksData,acclinksData)
1450                  and accounting_transferPerLengthNonzero(indicator,acclinksData,transfer_techs,vintage,link_types)),
1451          accounting_transferPerLengthIn(indicator,acclinksData,transfer_techs,vintage,link_types,"useAnnuity"))
1452      - smin((linksData,acclinksData)
1453              $(aggregatelinksModel(linksData,linksModel) and sameas(linksData,acclinksData)
1454                  and accounting_transferPerLengthNonzero(indicator,acclinksData,transfer_techs,vintage,link_types)),
1455          accounting_transferPerLengthIn(indicator,acclinksData,transfer_techs,vintage,link_types,"useAnnuity"));
1456   
1457  abort$sum(accounting_transferPerLengthChk(indicator,linksModel,transfer_techs,vintage,link_types,pc_accounting_transferPerLength), 1) "Cannot aggregate technologies with different useAnnuity values."
1459   
1460  parameter accounting_transferPerLengthAgg(indicator,linksModel,transfer_techs,vintage,link_types,pc_accounting_transferPerLength);
1461  accounting_transferPerLengthAgg(indicator,linksModel,transfer_techs,vintage,link_types,pc_accounting_transferPerLength)
1462      $sum((linksData,acclinksData)
1463              $(aggregatelinksModel(linksData,linksModel) and sameas(linksData,acclinksData)
1464                  and accounting_transferPerLengthNonzero(indicator,acclinksData,transfer_techs,vintage,link_types)), 1)
1465      = sum((linksData,acclinksData)
1466              $(aggregatelinksModel(linksData,linksModel) and sameas(linksData,acclinksData)
1467                  and accounting_transferPerLengthNonzero(indicator,acclinksData,transfer_techs,vintage,link_types)),
1468          accounting_transferPerLengthIn(indicator,acclinksData,transfer_techs,vintage,link_types,pc_accounting_transferPerLength))
1469      / sum((linksData,acclinksData)
1470              $(aggregatelinksModel(linksData,linksModel) and sameas(linksData,acclinksData)
1471                  and accounting_transferPerLengthNonzero(indicator,acclinksData,transfer_techs,vintage,link_types)),
1472          1);
1473   
1474  parameter accounting_transferPerLength(indicator,linksModel,transfer_techs,vintage,link_types,pc_accounting_transferPerLength);
1475  loop(acclinks,
1476  accounting_transferPerLength(indicator,linksModel,transfer_techs,vintage,link_types,pc_accounting_transferPerLength)
1477      $sum(acclinksData$(map_acclinksToCalc(acclinks,linksModel) and sameas(acclinks,acclinksData)
1478                              and accounting_transferPerLengthIn(indicator,acclinksData,transfer_techs,vintage,link_types,pc_accounting_transferPerLength)), 1)
1479      = sum(acclinksData$(map_acclinksToCalc(acclinks,linksModel) and sameas(acclinks,acclinksData)),
1480              accounting_transferPerLengthIn(indicator,acclinksData,transfer_techs,vintage,link_types,pc_accounting_transferPerLength));
1481  );
1482   
1483  accounting_transferPerLength(indicator,linksModel,transfer_techs,vintage,link_types,pc_accounting_transferPerLength)
1484      $accounting_transferPerLengthAgg(indicator,linksModel,transfer_techs,vintage,link_types,pc_accounting_transferPerLength)
1485      = accounting_transferPerLengthAgg(indicator,linksModel,transfer_techs,vintage,link_types,pc_accounting_transferPerLength);
1486   
1487  * option kill %paramName%Nonzero %paramName%Chk %paramName%Agg
BATINCLUDE C:\Local\REMix\framework\remix\framework\model\source\battools\aggregateAccountingMean.gms
1489  * SPDX-FileCopyrightText: Copyright (c) 2023 German Aerospace Center (DLR)
1490  * SPDX-License-Identifier: BSD-3-Clause
1491   
1493   
1495   
1496  set accounting_sourcesinkFlowNonzero(indicator,accnodesData,years,sourcesink_techs,commodity);
1497  accounting_sourcesinkFlowNonzero(indicator,accnodesData,years,sourcesink_techs,commodity)
1498      $sum(pc_accounting_sourcesinkFlow$accounting_sourcesinkFlowIn(indicator,accnodesData,years,sourcesink_techs,commodity,pc_accounting_sourcesinkFlow), 1)
1499      = yes;
1500   
1502   
1503  parameter accounting_sourcesinkFlowAgg(indicator,nodesModel,years,sourcesink_techs,commodity,pc_accounting_sourcesinkFlow);
1504  accounting_sourcesinkFlowAgg(indicator,nodesModel,years,sourcesink_techs,commodity,pc_accounting_sourcesinkFlow)
1505      $sum((nodesData,accnodesData)
1506              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1507                  and accounting_sourcesinkFlowNonzero(indicator,accnodesData,years,sourcesink_techs,commodity)), 1)
1508      = sum((nodesData,accnodesData)
1509              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1510                  and accounting_sourcesinkFlowNonzero(indicator,accnodesData,years,sourcesink_techs,commodity)),
1511          accounting_sourcesinkFlowIn(indicator,accnodesData,years,sourcesink_techs,commodity,pc_accounting_sourcesinkFlow))
1512      / sum((nodesData,accnodesData)
1513              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1514                  and accounting_sourcesinkFlowNonzero(indicator,accnodesData,years,sourcesink_techs,commodity)),
1515          1);
1516   
1517  parameter accounting_sourcesinkFlow(indicator,nodesModel,years,sourcesink_techs,commodity,pc_accounting_sourcesinkFlow);
1518  loop(accnodes,
1519  accounting_sourcesinkFlow(indicator,nodesModel,years,sourcesink_techs,commodity,pc_accounting_sourcesinkFlow)
1520      $sum(accnodesData$(map_accnodesToCalc(accnodes,nodesModel) and sameas(accnodes,accnodesData)
1521                              and accounting_sourcesinkFlowIn(indicator,accnodesData,years,sourcesink_techs,commodity,pc_accounting_sourcesinkFlow)), 1)
1522      = sum(accnodesData$(map_accnodesToCalc(accnodes,nodesModel) and sameas(accnodes,accnodesData)),
1523              accounting_sourcesinkFlowIn(indicator,accnodesData,years,sourcesink_techs,commodity,pc_accounting_sourcesinkFlow));
1524  );
1525   
1526  accounting_sourcesinkFlow(indicator,nodesModel,years,sourcesink_techs,commodity,pc_accounting_sourcesinkFlow)
1527      $accounting_sourcesinkFlowAgg(indicator,nodesModel,years,sourcesink_techs,commodity,pc_accounting_sourcesinkFlow)
1528      = accounting_sourcesinkFlowAgg(indicator,nodesModel,years,sourcesink_techs,commodity,pc_accounting_sourcesinkFlow);
1529   
1530  * option kill %paramName%Nonzero %paramName%Chk %paramName%Agg
1531   
1532  parameter accounting_indicatorBounds_links(linksModel,years,indicator,pc_accounting_indicatorBounds_links);
1533  accounting_indicatorBounds_links(linksModelToCalc,yearsToCalc,indicator,pc_accounting_indicatorBounds_links)
1534      = sum((linksData)$sameas(linksModelToCalc,linksData),
1535              accounting_indicatorBounds_linksIn(linksData,yearsToCalc,indicator,pc_accounting_indicatorBounds_links));
1536   
1537  accounting_indicatorBounds_links(linksModelToCalc,yearsToCalc,indicator,pc_accounting_indicatorBounds_links)
1538      = sum((linksData)$links_aggregate(linksModelToCalc,linksData),
1539              accounting_indicatorBounds_linksIn(linksData,yearsToCalc,indicator,pc_accounting_indicatorBounds_links));
1540   
1541  parameter accounting_indicatorBounds(accNodesModel,accYears,indicator,pc_accounting_indicatorBounds);
1542  accounting_indicatorBounds(accNodesModel,accYears,indicator,pc_accounting_indicatorBounds)
1543      = sum (accNodesData$sameas(accNodesModel,accNodesData),
1544          accounting_indicatorBoundsIn(accNodesData,accYears,indicator,pc_accounting_indicatorBounds));
1545   
1546  accounting_indicatorBounds(accNodesModel,accYears,indicator,pc_accounting_indicatorBounds)
1547      $(sum (nodesModel$sameas(accNodesModel,nodesModel), 1) > 0)
1548      = sum ((accNodesData,nodesData,nodesModel)
1549              $(aggregateNodesModel(nodesData,nodesModel) and sameas(accNodesModel,nodesModel) and sameas(accNodesData,nodesData)),
1550          accounting_indicatorBoundsIn(accNodesData,accYears,indicator,pc_accounting_indicatorBounds));
1551   
1552  set accounting_perIndicatorNonzero(indicator,indicator_a,accNodesData,accYears);
1553  accounting_perIndicatorNonzero(indicator,indicator_a,accNodesData,accYears)
1554      $sum(pc_accounting_perIndicator$accounting_perIndicatorIn(indicator,indicator_a,accNodesData,accYears,pc_accounting_perIndicator), 1)
1555      = yes;
1556   
1557  parameter accounting_perIndicatorAgg(indicator,indicator_a,nodesModel,accYears,pc_accounting_perIndicator);
1558  accounting_perIndicatorAgg(indicator,indicator_a,nodesModel,accYears,pc_accounting_perIndicator)
1559      $sum((nodesData,accnodesData)
1560              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1561                  and accounting_perIndicatorNonzero(indicator,indicator_a,accnodesData,accYears)), 1)
1562      = sum((nodesData,accnodesData)
1563              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1564                  and accounting_perIndicatorNonzero(indicator,indicator_a,accnodesData,accYears)),
1565          accounting_perIndicatorIn(indicator,indicator_a,accnodesData,accYears,pc_accounting_perIndicator))
1566      / sum((nodesData,accnodesData)
1567              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1568                  and accounting_perIndicatorNonzero(indicator,indicator_a,accnodesData,accYears)),
1569          1);
1570   
1571  parameter accounting_perIndicator(indicator,indicator_a,accNodesModel,accYears,pc_accounting_perIndicator);
1572   
1573  loop(accNodes,
1574  accounting_perIndicator(indicator,indicator_a,accNodesModel,accYears,pc_accounting_perIndicator)
1575      $(sum(accNodesData$(sameas(accNodes,accNodesData)
1576              and accounting_perIndicatorIn(indicator,indicator_a,accNodesData,"horizon",pc_accounting_perIndicator)), 1)
1577          and map_accNodes(accNodesModel,accNodes)
1578              )
1579      = sum(accNodesData$(sameas(accNodes,accNodesData)),
1580              accounting_perIndicatorIn(indicator,indicator_a,accNodesData,"horizon",pc_accounting_perIndicator));
1581   
1582  accounting_perIndicator(indicator,indicator_a,accNodesModel,accYears,pc_accounting_perIndicator)
1583      $(sum(accNodesData$(sameas(accNodes,accNodesData)
1584              and accounting_perIndicatorIn(indicator,indicator_a,accNodesData,accYears,pc_accounting_perIndicator)), 1)
1585          and map_accNodes(accNodesModel,accNodes)
1586          and not sameas(accYears, "horizon"))
1587      = sum(accNodesData$(sameas(accNodes,accNodesData)),
1588              accounting_perIndicatorIn(indicator,indicator_a,accNodesData,accYears,pc_accounting_perIndicator));
1589  );
1590   
1591  accounting_perIndicator(indicator,indicator_a,accNodesModel,accYears,pc_accounting_perIndicator)
1592      $sum(nodesModel$(accounting_perIndicatorAgg(indicator,indicator_a,nodesModel,"horizon",pc_accounting_perIndicator)
1593          and sameas(accNodesModel,nodesModel)), 1)
1594      = sum(nodesModel$sameas(accNodesModel,nodesModel),
1595          accounting_perIndicatorAgg(indicator,indicator_a,nodesModel,"horizon",pc_accounting_perIndicator));
1596   
1597  accounting_perIndicator(indicator,indicator_a,accNodesModel,accYears,pc_accounting_perIndicator)
1598      $sum(nodesModel$(accounting_perIndicatorAgg(indicator,indicator_a,nodesModel,accYears,pc_accounting_perIndicator)
1599          and sameas(accNodesModel,nodesModel) and not sameas(accYears, "horizon")), 1)
1600      = sum(nodesModel$sameas(accNodesModel,nodesModel),
1601          accounting_perIndicatorAgg(indicator,indicator_a,nodesModel,accYears,pc_accounting_perIndicator));
1602   
1603   
1604  * Make sure all required indicators end up in the model
1605  set activeIndicators(accNodesModel,accYears,indicator);
1606  activeIndicators(accNodesModel,accYears,indicator)
1607     $((accounting_indicatorBounds(accNodesModel,accYears,indicator,"obj") <> 0
1610        or accounting_indicatorBounds(accNodesModel,accYears,indicator,"useFixed") <> 0
1611        or accounting_indicatorBounds(accNodesModel,accYears,indicator,"useLower") <> 0
1612        or accounting_indicatorBounds(accNodesModel,accYears,indicator,"useUpper") <> 0 )
1613          and not accounting_indicatorBounds(accNodesModel,accYears,indicator,"isVariable"))
1614     = yes;
1615   
1616  set activeIndicators_links(linksModel,years,indicator);
1617  activeIndicators_links(linksModelToCalc,yearsToCalc,indicator)
1618     $(accounting_indicatorBounds_links(linksModelToCalc,yearsToCalc,indicator,"useFixed") <> 0
1619        or accounting_indicatorBounds_links(linksModelToCalc,yearsToCalc,indicator,"useLower") <> 0
1620        or accounting_indicatorBounds_links(linksModelToCalc,yearsToCalc,indicator,"useUpper") <> 0 )
1621     = yes;
1622   
1623  set variableIndicators(accNodesModel,accYears,indicator);
1624  variableIndicators(accNodesModel,accYears,indicator)
1625     $(accounting_indicatorBounds(accNodesModel,accYears,indicator,"obj") = 0
1626        and accounting_indicatorBounds(accNodesModel,accYears,indicator,"isVariable"))
1627     = yes;
1628   
1629  * Calculate length of years and discount rates per indicator
1630  parameter yearFactor(accNodesModel,accYears,indicator,accYears);
1631  yearFactor(accNodesModel,accYears,indicator,accYears_a)
1632      $(map_accYears(accYears_a,accYears)
1633          and sum(yearsToCalc$(sameas(yearsToCalc,accYears_a)), 1))
1634      = 1;
1635   
1636  yearFactor(accNodesModel,accYears,indicator,accYears_a)
1637      $(map_accYears(accYears_a,accYears)
1638          and sum(yearsToCalc$(sameas(yearsToCalc,accYears_a)), 1)
1639          and accounting_indicatorBounds(accNodesModel,accYears,indicator,"integral"))
1640      = sum(yearsToCalc$sameas(accYears_a,yearsToCalc), yearsLen(yearsToCalc));
1641   
1642  yearFactor(accNodesModel,accYears,indicator,accYears_a)
1643      $(map_accYears(accYears_a,accYears)
1644          and sum(yearsToCalc$(sameas(yearsToCalc,accYears_a)), 1)
1645          and accounting_indicatorBounds(accNodesModel,accYears,indicator,"integral")
1646          and accounting_indicatorBounds(accNodesModel,accYears,indicator,"endyear")
1647          and yearFactor(accNodesModel,accYears,indicator,accYears_a) = inf)
1648      = accounting_indicatorBounds(accNodesModel,accYears,indicator,"endyear");
1649   
1650  yearFactor(accNodesModel,accYears,indicator,accYears_a)
1651      $(map_accYears(accYears_a,accYears)
1652          and sum(yearsToCalc$(sameas(yearsToCalc,accYears_a)), 1)
1653          and accounting_indicatorBounds(accNodesModel,accYears,indicator,"integral")
1654          and accounting_indicatorBounds(accNodesModel,accYears,indicator,"discount"))
1655      = yearFactor(accNodesModel,accYears,indicator,accYears_a)
1656          * (1 - accounting_indicatorBounds(accNodesModel,accYears,indicator,"discount"))
1657                  ** (accYears_a.val - smin(yearsToCalc, yearsToCalc.val));
1658   
1659   
1660  * ==== calculate compound indicators for the optimization ====
1661  scalar compIndicators_pre;
1662  scalar compIndicators_post;
1663   
1664  parameter compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a);
1665  compoundIndicators(accNodesModel,accYears,indicator,accNodesModel,accYears,indicator)
1666      $activeIndicators(accNodesModel,accYears,indicator) = 1;
1667   
1668  set compoundIndicators_act(accNodesModel,accYears,indicator);
1669  option compoundIndicators_act < compoundIndicators;
1670   
1671  parameter compoundIndicatorsExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa);
1672  parameter compoundIndicatorsExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a);
1673  compoundIndicatorsExt(accNodesModel,accYears,indicator,accNodesModel,accYears,indicator,accNodesModel,accYears,indicator)
1674      $compoundIndicators_act(accNodesModel,accYears,indicator) = 1;
1675   
1676  compIndicators_pre = 0;
1677  compIndicators_post = 1;
1678   
1679  option sparseval = 1;
1680  while(compIndicators_pre < compIndicators_post,
1681      compIndicators_pre = sum((accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa)
1682          $compoundIndicatorsExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa), 1);
1683   
1684      compoundIndicatorsExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa)
1685          $(compoundIndicators_act(accNodesModel,accYears,indicator)
1686              and compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
1687              and not accounting_indicatorBounds(accNodesModel_a,accYears_a,indicator_a,"isVariable")
1688              and map_accNodes(accNodesModel_aa,accNodesModel_a)
1689              and map_accYears(accYears_aa,accYears_a))
1690          = compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
1691              * accounting_perIndicator(indicator_a,indicator_aa,accNodesModel_aa,accYears_aa,"perIndicator");
1692   
1693      option compoundIndicatorsExt_r < compoundIndicatorsExt;
1694   
1695      compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa)
1696          $(compoundIndicators_act(accNodesModel,accYears,indicator)
1697              and sum((accNodesModel_a,accYears_a,indicator_a)
1698                      $compoundIndicatorsExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a), 1) = 1)
1699          = sum((accNodesModel_a,accYears_a,indicator_a)
1700                  $(compoundIndicatorsExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a)),
1701              compoundIndicatorsExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a));
1702   
1703      compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa)
1704          $(compoundIndicators_act(accNodesModel,accYears,indicator)
1705              and sum((accNodesModel_a,accYears_a,indicator_a)
1706                      $compoundIndicatorsExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a), 1) > 1)
1707          = sum((accNodesModel_a,accYears_a,indicator_a)
1708                  $(compoundIndicatorsExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a)
1709                      and not (sameas(accNodesModel, accNodesModel_a) and sameas(accYears, accYears_a) and sameas(indicator, indicator_a))),
1710              compoundIndicatorsExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a))
1711          / sum((accNodesModel_a,accYears_a,indicator_a)
1712                  $(compoundIndicatorsExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a)
1713                      and not (sameas(accNodesModel, accNodesModel_a) and sameas(accYears, accYears_a) and sameas(indicator, indicator_a))), 1);
1714   
1715      option compoundIndicators_act < compoundIndicators;
1716      compIndicators_post = sum((accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa)
1717          $compoundIndicatorsExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa), 1);
1718  );
1719  option sparseval = 0;
1720   
1721  * map to sub-years and sub-nodes
1722  compoundIndicatorsExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_a)
1723      $(compoundIndicators_act(accNodesModel,accYears,indicator)
1724          and compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
1725          and map_accYears(accYears_aa,accYears_a)
1726          and map_accNodes(accNodesModel_aa,accNodesModel_a))
1727      = compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
1728          * yearFactor(accNodesModel,accYears,indicator,accYears_aa);
1729   
1730  * Remove all accounting regions and accounting years
1731  compoundIndicatorsExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa)
1732      $(compoundIndicatorsExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa)
1733          and not accounting_indicatorBounds(accNodesModel_aa,accYears_aa,indicator_aa,"isVariable")
1734          and sum(accNodes$(sameas(accNodes,accNodesModel_aa)), 1)
1735              or sameas("horizon",accYears_aa))
1736      = 0;
1737   
1738  * Map from extended parameter to final parameter
1739  option compoundIndicatorsExt_r < compoundIndicatorsExt;
1740  compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa)
1741      $(compoundIndicators_act(accNodesModel,accYears,indicator)
1742          and sum((accNodesModel_a,accYears_a,indicator_a)
1743                  $compoundIndicatorsExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a), 1) = 1)
1744      = sum((accNodesModel_a,accYears_a,indicator_a)
1745              $(compoundIndicatorsExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a)),
1746          compoundIndicatorsExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a));
1747   
1748  compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa)
1749      $(compoundIndicators_act(accNodesModel,accYears,indicator)
1750          and sum((accNodesModel_a,accYears_a,indicator_a)
1751                  $compoundIndicatorsExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a), 1) > 1)
1752      = sum((accNodesModel_a,accYears_a,indicator_a)
1753              $(compoundIndicatorsExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a)
1754                  and not (sameas(accNodesModel, accNodesModel_a) and sameas(accYears, accYears_a) and sameas(indicator, indicator_a))),
1755          compoundIndicatorsExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a))
1756      / sum((accNodesModel_a,accYears_a,indicator_a)
1757              $(compoundIndicatorsExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a)
1758                  and not (sameas(accNodesModel, accNodesModel_a) and sameas(accYears, accYears_a) and sameas(indicator, indicator_a))), 1);
1759   
1760  * Remove all accounting regions and accounting years
1761  compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
1762      $(compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
1763          and not accounting_indicatorBounds(accNodesModel_a,accYears_a,indicator_a,"isVariable")
1764          and (sum(accNodes$(sameas(accNodes,accNodesModel_a)), 1)
1765              or sameas("horizon",accYears_a)))
1766      = 0;
1767   
1768  * Remove all slack indicators except the ones declared in indicatorBounds
1769  compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
1770      $(compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
1771          and sum((accNodesModel_aa,accYears_aa)$accounting_indicatorBounds(accNodesModel_aa,accYears_aa,indicator_a,"isVariable"), 1)
1772          and not accounting_indicatorBounds(accNodesModel_a,accYears_a,indicator_a,"isVariable"))
1773      = 0;
1774   
1775  * ==== compound indicators for the post calculation ====
1776  parameter compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a);
1777  compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel,accYears,indicator)
1778      $(sum(nodesModelToCalc$map_accNodesToCalc(accNodesModel,nodesModelToCalc), 1)
1779          and sum(yearsToCalc$map_accYearsToCalc(accYears,yearsToCalc), 1)) = 1;
1780   
1781  set compoundIndicatorsFull_act(accNodesModel,accYears,indicator);
1782  option compoundIndicatorsFull_act < compoundIndicatorsFull;
1783   
1784  parameter compoundIndicatorsFullExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa);
1785  parameter compoundIndicatorsFullExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a);
1786  compoundIndicatorsFullExt(accNodesModel,accYears,indicator,accNodesModel,accYears,indicator,accNodesModel,accYears,indicator) = 1;
1787   
1788  compIndicators_pre = 0;
1789  compIndicators_post = 1;
1790   
1791  option sparseval = 1;
1792  while(compIndicators_pre < compIndicators_post,
1793      compIndicators_pre = sum((accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa)
1794          $compoundIndicatorsFullExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa), 1);
1795   
1796      compoundIndicatorsFullExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa)
1797          $(compoundIndicatorsFull_act(accNodesModel,accYears,indicator)
1798              and compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
1799              and not accounting_indicatorBounds(accNodesModel_a,accYears_a,indicator_a,"isVariable")
1800              and map_accNodes(accNodesModel_aa,accNodesModel_a)
1801              and map_accYears(accYears_aa,accYears_a))
1802          = compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
1803              * accounting_perIndicator(indicator_a,indicator_aa,accNodesModel_aa,accYears_aa,"perIndicator");
1804   
1805      option compoundIndicatorsFullExt_r < compoundIndicatorsFullExt;
1806   
1807      compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa)
1808          $(compoundIndicatorsFull_act(accNodesModel,accYears,indicator)
1809              and sum((accNodesModel_a,accYears_a,indicator_a)
1810                      $compoundIndicatorsFullExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a), 1) = 1)
1811          = sum((accNodesModel_a,accYears_a,indicator_a)
1812                  $(compoundIndicatorsFullExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a)),
1813              compoundIndicatorsFullExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a));
1814   
1815      compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa)
1816          $(compoundIndicatorsFull_act(accNodesModel,accYears,indicator)
1817              and sum((accNodesModel_a,accYears_a,indicator_a)
1818                      $compoundIndicatorsFullExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a), 1) > 1)
1819          = sum((accNodesModel_a,accYears_a,indicator_a)
1820                  $(compoundIndicatorsFullExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a)
1821                      and not (sameas(accNodesModel, accNodesModel_a) and sameas(accYears, accYears_a) and sameas(indicator, indicator_a))),
1822              compoundIndicatorsFullExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a))
1823          / sum((accNodesModel_a,accYears_a,indicator_a)
1824                  $(compoundIndicatorsFullExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a)
1825                      and not (sameas(accNodesModel, accNodesModel_a) and sameas(accYears, accYears_a) and sameas(indicator, indicator_a))), 1);
1826   
1827      option compoundIndicatorsFull_act < compoundIndicatorsFull;
1828      compIndicators_post = sum((accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa)
1829          $compoundIndicatorsFullExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa), 1);
1830  );
1831  option sparseval = 0;
1832   
1833  * map to sub-years and sub-nodes
1834  compoundIndicatorsFullExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_a)
1835      $(compoundIndicatorsFull_act(accNodesModel,accYears,indicator)
1836          and compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
1837          and map_accYears(accYears_aa,accYears_a)
1838          and map_accNodes(accNodesModel_aa,accNodesModel_a))
1839      = compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
1840          * yearFactor(accNodesModel,accYears,indicator,accYears_aa);
1841   
1842  * Remove all accounting regions and accounting years
1843  compoundIndicatorsFullExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa)
1844      $(compoundIndicatorsFullExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa)
1845          and not accounting_indicatorBounds(accNodesModel_aa,accYears_aa,indicator_aa,"isVariable")
1846          and sum(accNodes$(sameas(accNodes,accNodesModel_aa)), 1)
1847              or sameas("horizon",accYears_aa))
1848      = 0;
1849   
1850  * Map from extended parameter to final parameter
1851  option compoundIndicatorsFullExt_r < compoundIndicatorsFullExt;
1852  compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa)
1853      $(compoundIndicatorsFull_act(accNodesModel,accYears,indicator)
1854          and sum((accNodesModel_a,accYears_a,indicator_a)
1855                  $compoundIndicatorsFullExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a), 1) = 1)
1856      = sum((accNodesModel_a,accYears_a,indicator_a)
1857              $(compoundIndicatorsFullExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a)),
1858          compoundIndicatorsFullExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a));
1859   
1860  compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa)
1861      $(compoundIndicatorsFull_act(accNodesModel,accYears,indicator)
1862          and sum((accNodesModel_a,accYears_a,indicator_a)
1863                  $compoundIndicatorsFullExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a), 1) > 1)
1864      = sum((accNodesModel_a,accYears_a,indicator_a)
1865              $(compoundIndicatorsFullExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a)
1866                  and not (sameas(accNodesModel, accNodesModel_a) and sameas(accYears, accYears_a) and sameas(indicator, indicator_a))),
1867          compoundIndicatorsFullExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a))
1868      / sum((accNodesModel_a,accYears_a,indicator_a)
1869              $(compoundIndicatorsFullExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a)
1870                  and not (sameas(accNodesModel, accNodesModel_a) and sameas(accYears, accYears_a) and sameas(indicator, indicator_a))), 1);
1871   
1872  * Remove all accounting regions and accounting years
1873  compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
1874      $(compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
1875          and not accounting_indicatorBounds(accNodesModel_a,accYears_a,indicator_a,"isVariable")
1876          and (sum(accNodes$(sameas(accNodes,accNodesModel_a)), 1)
1877              or sameas("horizon",accYears_a)))
1878      = 0;
1879   
1880  * Remove all slack indicators except the ones declared in indicatorBounds
1881  compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
1882      $(compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
1883          and sum((accNodesModel_aa,accYears_aa)$accounting_indicatorBounds(accNodesModel_aa,accYears_aa,indicator_a,"isVariable"), 1)
1884          and not accounting_indicatorBounds(accNodesModel_a,accYears_a,indicator_a,"isVariable"))
1885      = 0;
1886   
1887  * Check if the objective value and optimization sense is set correctly
1888  scalar opti_values, opti_sense;
1889  opti_values = sum((accNodesModel,accYears,indicator)$(accounting_indicatorBounds(accNodesModel,accYears,indicator,"obj") <> 0), 1);
1890  opti_sense = sum((accNodesModel,accYears,indicator), accounting_indicatorBounds(accNodesModel,accYears,indicator,"obj"));
1891  abort$(opti_values < 1)
1892      "Accounting: No indicator specified as objective value"
1893  abort$(opti_values > 1)
1894      "Accounting: Too many indicators specified as objective value"
1895  abort$(opti_sense <> -1 and opti_sense <> 1)
1896      "Accounting: Optimization sense has to be either -1 or 1"
INCLUDE    C:\Local\REMix\framework\remix\framework\model\source\accounting\annuities.gms
1898  * SPDX-FileCopyrightText: Copyright (c) 2023 German Aerospace Center (DLR)
1899  * SPDX-License-Identifier: BSD-3-Clause
1900   
1901  * Calculation of annuities
1902   
1903  abort$(sum((indicator,nodesModelToCalc,converter_techs,vintage)
1904          $(accounting_converterUnits(indicator,nodesModelToCalc,converter_techs,vintage,"useAnnuity") = 1
1905          and accounting_converterUnits(indicator,nodesModelToCalc,converter_techs,vintage,"amorTime") < 1), 1) > 0 )
1906      "Accounting: Some converter technologies use annuities but have no amortization time"
1907   
1908  parameter accounting_annuityFactor_converter(indicator,nodesModel,converter_techs,vintage);
1909  accounting_annuityFactor_converter(indicator,nodesModelToCalc,converter_techs,vintage)
1910      $accounting_converterUnits(indicator,nodesModelToCalc,converter_techs,vintage,"useAnnuity")
1911      =
1912      accounting_converterUnits(indicator,nodesModelToCalc,converter_techs,vintage,"interest")
1913          * (1 + accounting_converterUnits(indicator,nodesModelToCalc,converter_techs,vintage,"interest"))
1914          ** accounting_converterUnits(indicator,nodesModelToCalc,converter_techs,vintage,"amorTime")
1915      / ((1 + accounting_converterUnits(indicator,nodesModelToCalc,converter_techs,vintage,"interest"))
1916          ** accounting_converterUnits(indicator,nodesModelToCalc,converter_techs,vintage,"amorTime") - 1);
1917   
1918   
1919  abort$(sum((indicator,nodesModelToCalc,storage_techs,vintage)
1920          $(accounting_storageUnits(indicator,nodesModelToCalc,storage_techs,vintage,"useAnnuity") = 1
1921          and accounting_storageUnits(indicator,nodesModelToCalc,storage_techs,vintage,"amorTime") < 1), 1) > 0 )
1922      "Accounting: Some storage technologies use annuities but have no amortization time"
1923   
1924  parameter accounting_annuityFactor_storage(indicator,nodesModel,storage_techs,vintage);
1925  accounting_annuityFactor_storage(indicator,nodesModelToCalc,storage_techs,vintage)
1926      $accounting_storageUnits(indicator,nodesModelToCalc,storage_techs,vintage,"useAnnuity")
1927      =
1928      accounting_storageUnits(indicator,nodesModelToCalc,storage_techs,vintage,"interest")
1929          * (1 + accounting_storageUnits(indicator,nodesModelToCalc,storage_techs,vintage,"interest"))
1930          ** accounting_storageUnits(indicator,nodesModelToCalc,storage_techs,vintage,"amorTime")
1931      / ((1 + accounting_storageUnits(indicator,nodesModelToCalc,storage_techs,vintage,"interest"))
1932          ** accounting_storageUnits(indicator,nodesModelToCalc,storage_techs,vintage,"amorTime") - 1);
1933   
1934   
1935  abort$(sum((indicator,linksModelToCalc,transfer_techs,vintage)
1936          $(accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"useAnnuity") = 1
1937          and accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"amorTime") < 1), 1) > 0 )
1938      "Accounting: Some transfer technologies use annuities but have no amortization time"
1939   
1940  parameter accounting_annuityFactor_transferLink(indicator,linksModel,transfer_techs,vintage);
1941  accounting_annuityFactor_transferLink(indicator,linksModelToCalc,transfer_techs,vintage)
1942      $accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"useAnnuity")
1943      =
1944      accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"interest")
1945          * (1 + accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"interest"))
1946          ** accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"amorTime")
1947      / ((1 + accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"interest"))
1948          ** accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"amorTime") - 1);
1949   
1950   
1951   
1952  abort$(sum((indicator,linksModelToCalc,transfer_techs,vintage,link_types)
1953          $(accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"useAnnuity") = 1
1954          and accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"amorTime") < 1), 1) > 0 )
1955      "Accounting: Some transfer-per-length technologies use annuities but have no amortization time"
1956   
1957  parameter accounting_annuityFactor_transferDistance(indicator,linksModel,transfer_techs,vintage,link_types);
1958  accounting_annuityFactor_transferDistance(indicator,linksModelToCalc,transfer_techs,vintage,link_types) = 1;
1959   
1960  accounting_annuityFactor_transferDistance(indicator,linksModelToCalc,transfer_techs,vintage,link_types)
1961      $accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"useAnnuity")
1962      =
1963      accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"interest")
1964          * (1 + accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"interest"))
1965          ** accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"amorTime")
1966      / ((1 + accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"interest"))
1967          ** accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"amorTime") - 1);
1968   
INCLUDE    C:\Local\REMix\framework\remix\framework\model\source\methods\mga_pre.gms
1970  * SPDX-FileCopyrightText: Copyright (c) 2023 German Aerospace Center (DLR)
1971  * SPDX-License-Identifier: BSD-3-Clause
1972   
INCLUDE    C:\Local\REMix\framework\remix\framework\model\source\methods\pareto_pre.gms
1976  * SPDX-FileCopyrightText: Copyright (c) 2023 German Aerospace Center (DLR)
1977  * SPDX-License-Identifier: BSD-3-Clause
1978   
INCLUDE    C:\Local\REMix\framework\remix\framework\model\source\postcalc\declaration.gms
1982  * SPDX-FileCopyrightText: Copyright (c) 2023 German Aerospace Center (DLR)
1983  * SPDX-License-Identifier: BSD-3-Clause
1984  * // # Output data
1985  * // This is the reference data model of the REMix output.
1986  * //
1987  * // ## Standard output
1990   
1997   
1999   
2000  set capType / "build", "decom", "total", "lowerLimit", "upperLimit", "total_degraded" /;
2001  set balanceType / "netto", "brutto", "positive", "negative", "flh" /;
2002  set profileType / "upper", "fixed", "lower" /;
2003  set r2a_has_converter_cost(indicator,nodesModel,years,techs,vintage,commodity);
2004   
2005  ** // OUTPUT: indicator_accounting | OEO_00000350:quantity value
2006  * // ### indicator_accounting
2007  * // Title: Accounting indicators Post-calculation
2008  parameter indicator_accounting(accNodesModel,accYears,indicator) "Post-calculation aggregated indicator accounting" ;
2009  * //
2010  ** // OUTPUT: indicator_accounting_ref | OEO_00000350:quantity value
2011  * // ### indicator_accounting_ref
2012  * // Title: Accounting indicators reference
2013  parameter indicator_accounting_ref(accNodesModel,accYears,indicator) "Indicator accounting optimization levels" ;
2014  * //
2015  ** // OUTPUT: indicator_accounting_comp | OEO_00000350:quantity value
2016  * // ### indicator_accounting_comp
2017  * // Title: Accounting indicators composition
2018  parameter indicator_accounting_comp(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a) "Indicator accounting with other indicator composition" ;
2019  * //
2020  ** // OUTPUT: indicator_accounting_detailed | OEO_00000350:quantity value
2021  * // ### indicator_accounting_detailed
2022  * // Title: Accounting indicators detail
2023  parameter indicator_accounting_detailed(indicator,nodesModel,years,techs) "Indicator accounting with technological composition" ;
2024  * //
2025  ** // OUTPUT: indicator_accounting_links | OEO_00000350:quantity value
2026  * // ### indicator_accounting_links
2027  * // Title: Accounting indicators per transfer link
2028  parameter indicator_accounting_links(indicator,nodesModel,nodesModel_a,linksModel,years,techs) "Indicator accounting of transfer technologies" ;
2029  * //
2030  parameter converter_ratedInput(techs,vintage,commodity);
2031  parameter converter_ratedOutput(techs,vintage,commodity);
2032  parameter converter_ratedOutput_min(nodesModel,years,techs,commodity);
2033  parameter converter_ratedOutput_max(nodesModel,years,techs,commodity);
2034   
2035  ** // OUTPUT: converter_caps | OEO_00010257:power capacity
2036  * // ### converter_caps
2037  * // Title: Coverter capacities post-calculation
2038  parameter converter_caps(accNodesModel,accYears,techs,commodity,capType) "Converter capacities, aggregated total" ;
2039  * //
2040  parameter converter_caps_ext(accNodesModel,nodesModel,accYears,years,techs,vintage,commodity,capType);
2041   
2042  ** // OUTPUT: converter_units | OEO_00000350:quantity value
2043  * // ### converter_units
2044  * // Title: Coverter units post-calculation
2045  parameter converter_units(accNodesModel,accYears,techs,vintage,capType) "Converter units" ;
2046  * //
2047  parameter converter_units_ext(accNodesModel,nodesModel,accYears,years,techs,vintage,capType);
2048   
2049  parameter max_transfer_coefficient(techs,commodity);
2050  parameter min_transfer_coefficient(techs,commodity);
2051  ** // OUTPUT: transfer_links | OEO_00000350:quantity value
2052  * // ### transfer_links
2053  * // Title: Transfer post-calculation
2054  parameter transfer_links(linksModel,years,techs,vintage,capType) "Transfer links" ;
2055  * //
2056  ** // OUTPUT: transfer_caps | OEO_00010257:power capacity
2057  * // ### transfer_caps
2058  * // Title: Transfer capacities post-calculation
2059  parameter transfer_caps(nodesModel_start,nodesModel_end,linksModel,years,techs,commodity,capType) "Transfer capacities, aggregated total" ;
2060  * //
2061  ** // OUTPUT: transfer_flows | OEO_00050019:energy amount value
2062  * // ### transfer_flows
2063  * // Title: Transfer hourly flows
2064  parameter transfer_flows(timeModel,nodesModel_start,nodesModel_end,linksModel,years,techs,commodity) "Hourly link flows" ;
2065  * //
2066  ** // OUTPUT: transfer_flows_annual | OEO_00050019:energy amount value
2067  * // ### transfer_flows_annual
2068  * // Title: Transfer annual flows
2069  parameter transfer_flows_annual(nodesModel_start,nodesModel_end,linksModel,years,techs,commodity,balanceType) "Annual link flows" ;
2070  * //
2071  ** // OUTPUT: transfer_losses | OEO_00050019:energy amount value
2072  * // ### transfer_losses
2073  * // Title: Transfer hourly losses
2074  parameter transfer_losses(timeModel,nodesModel_start,nodesModel_end,linksModel,years,techs,commodity) "Hourly link losses" ;
2075  * //
2076  ** // OUTPUT: transfer_losses_annual | OEO_00050019:energy amount value
2077  * // ### transfer_losses_annual
2078  * // Title: Transfer annual losses
2079  parameter transfer_losses_annual(nodesModel_start,nodesModel_end,linksModel,years,techs,commodity,balanceType) "Annual link losses" ;
2080  * //
2081  parameter storage_size_max(nodesModel,years,techs,commodity);
2082  parameter storage_size_min(nodesModel,years,techs,commodity);
2083  ** // OUTPUT: storage_units |  OEO_00000350:quantity value
2084  * // ### storage_units
2085  * // Title: Storage units post-calculation
2086  parameter storage_units(accNodesModel,accYears,techs,vintage,capType) "Storage units" ;
2087  * //
2088  parameter storage_units_ext(accNodesModel,nodesModel,accYears,years,techs,vintage,capType);
2089  ** // OUTPUT: storage_caps | OEO_00230000:energy storage capacity
2090  * // ### storage_caps
2091  * // Title: Storage capacities post-calculation
2092  parameter storage_caps(accNodesModel,accYears,techs,commodity,capType) "Storage capacities, aggregated total" ;
2093  * //
2094  parameter storage_caps_ext(accNodesModel,nodesModel,accYears,years,techs,vintage,commodity,capType);
2095  ** // OUTPUT: storage_level_out | OEO_00330012:energy storage content
2096  * // ### storage_level_out
2097  * // Title: Storage level
2098  parameter storage_level_out(timeModel,accNodesModel,accYears,techs,commodity) "Storage level per time step" ;
2099  * //
2100  parameter storage_level_out_ext(timeModel,accNodesModel,nodesModel,accYears,years,techs,vintage,commodity);
2101  ** // OUTPUT: storage_flows | OEO_00050019:energy amount value
2102  * // ### storage_flows
2103  * // Title: Storage hourly flows
2104  parameter storage_flows(timeModel,accNodesModel,accYears,techs,commodity) "Storage flows per time step" ;
2105  * //
2106  parameter storage_flows_ext(timeModel,accNodesModel,nodesModel,accYears,years,techs,vintage,commodity);
2107  ** // OUTPUT: storage_flows_annual | OEO_00050019:energy amount value
2108  * // ### storage_flows_annual
2109  * // Title: Storage annual flows
2110  parameter storage_flows_annual(accNodesModel,accYears,techs,commodity,balanceType) "Aggregated storage flows" ;
2111  * //
2112  ** // OUTPUT: storage_losses_out | OEO_00050019:energy amount value
2113  * // ### storage_losses_out
2114  * // Title: Storage hourly losses
2115  parameter storage_losses_out(timeModel,accNodesModel,accYears,techs,commodity) "Storage losses per time step" ;
2116  * //
2117  ** // OUTPUT: storage_losses_annual | OEO_00050019:energy amount value
2118  * // ### storage_losses_annual
2119  * // Title: Storage annual losses
2120  parameter storage_losses_annual(accNodesModel,accYears,techs,commodity,balanceType) "Aggregated storage losses" ;
2121  * //
2122  ** // OUTPUT: commodity_balance | OEO_00000350:quantity value
2123  * // ### commodity_balance
2124  * // Title: Hourly commodity balance
2125  parameter commodity_balance(timeModel,accNodesModel,accYears,techs,commodity) "Commodity balances per model hour" ;
2126  parameter commodity_balance_ext(timeModel,accNodesModel,nodesModel,accYears,years,techs,vintage,commodity);
2127  * //
2128  ** // OUTPUT: commodity_balance_annual | OEO_00000350:quantity value
2129  * // ### commodity_balance_annual
2130  * // Title: Annual commodity balance
2131  parameter commodity_balance_annual(accNodesModel,accYears,techs,commodity,balanceType) "Aggregated commodity balances" ;
2132  * //
2133  ** // OUTPUT: marginals_sourcesink_profile | OEO_00040008:marginal cost
2134  * // ### marginals_sourcesink_profile
2135  * // Title: Source-sink marginals
2136  parameter marginals_sourcesink_profile(timeModel,nodesModel,years,techs,commodity) "Source and sink flow marginal values" ;
2137  * //
2138  ** // OUTPUT: marginals_balance | OEO_00040008:marginal cost
2139  * // ### marginals_balance
2140  * // Title: Nodel balance marginals
2141  parameter marginals_balance(timeModel,nodesModel,years,commodity) "Nodal balance marginal values" ;
2142  * //
2143  ** // OUTPUT: marginals_sourcesink_sum | OEO_00040008:marginal cost
2144  * // ### marginals_sourcesink_sum
2145  * // Title: Source-sink annual marginals
2146  parameter marginals_sourcesink_sum(nodesModel,years,techs,commodity) "Annual source and sink flow marginal values" ;
2147  * //
2148  ** // OUTPUT: marginals_indicator_bounds | OEO_00040008:marginal cost
2149  * // ### marginals_indicator_bounds
2150  * // Title: Indicator bounds marginals
2151  parameter marginals_indicator_bounds(accNodesModel,accYears,indicator) "Accounting indicator marginals" ;
2152  * //
2153  * // ## REMix-AMIRIS interface output
2154  * //
2155  ** // OUTPUT: r2a_annuity_cost_converter | OEO_00040009:cost
2156  * // ### r2a_annuity_cost_converter
2157  * // Title: Converter annuity cost
2158  parameter r2a_annuity_cost_converter(indicator,accNodesModel,accYears,techs,vintage,commodity) "Annuity cost of converters" ;
2159  * //
2160  ** // OUTPUT: r2a_spec_cost_converter | OEO_00040009:cost
2161  * // ### r2a_spec_cost_converter
2162  * // Title: Converter specific cost
2163  parameter r2a_spec_cost_converter(indicator,accNodesModel,accYears,techs,vintage,commodity) "Specific cost of converters" ;
2164  * //
2165  ** // OUTPUT: r2a_spec_cost_fuel | OEO_00040009:cost
2166  * // ### r2a_spec_cost_fuel
2167  * // Title: Commodity specific cost
2168  parameter r2a_spec_cost_fuel(indicator,accNodesModel,accYears,techs,commodity) "Specific cost of commodities, used particularly for fuels" ;
2169  * //
2170  ** // OUTPUT: r2a_spec_cost_indicator | OEO_00040009:cost
2171  * // ### r2a_spec_cost_indicator
2172  * // Title: Indicator specific cost
2173  parameter r2a_spec_cost_indicator(indicator,indicator_a,accNodesModel,accYears) "Specific indicator cost" ;
2174  * //
2175  ** // OUTPUT: r2a_converter_efficiencies | OEO_00140050:efficiency value
2176  * // ### r2a_converter_efficiencies
2177  * // Title: Indicator specific cost
2178  parameter r2a_converter_efficiencies(techs,vintage,activity,commodity,commodity_a) "Converter-specific efficiency" ;
2179  * //
2180  ** // OUTPUT: r2a_converter_avail_factor | OEO_00000350:quantity value
2181  * // ### r2a_converter_avail_factor
2182  * // Title: Converter availability factor
2183  parameter r2a_converter_avail_factor(accNodesModel,accYears,techs,vintage) "Availability factor of converter technologies" ;
2184  parameter r2a_converter_avail_profile(timeModel,accNodesModel,accYears,techs,commodity,profileType) "Availability of converter technologies" ;
2185  parameter r2a_converter_avail_profile_ext(timeModel,accNodesModel,nodesModel,accYears,years,techs,vintage,commodity,profileType);
2186  * //
2187  ** // OUTPUT: r2a_storage_e2p | OEO_00000350:quantity value
2188  * // ### r2a_storage_e2p
2189  * // Title: E2P Storage
2190  parameter r2a_storage_e2p(accNodesModel,accYears,techs,vintage,commodity,capType) "Energy-to-power ratio" ;
2191  * //
2192  ** // OUTPUT: r2a_storage_selfdischarge | OEO_00000350:quantity value
2193  * // ### r2a_storage_selfdischarge
2194  * // Title: Storage self discharge rates
2195  parameter r2a_storage_selfdischarge(accNodesModel,accYears,techs,vintage,commodity);
2196   
INCLUDE    C:\Local\REMix\framework\remix\framework\model\source\loadgdx.gms
2200  * SPDX-FileCopyrightText: Copyright (c) 2023 German Aerospace Center (DLR)
2201  * SPDX-License-Identifier: BSD-3-Clause
2202   
2203  * ==== global settings ====
2205   
2207   
INCLUDE    C:\Local\REMix\framework\remix\framework\model\source\core\converter.gms
2209  * SPDX-FileCopyrightText: Copyright (c) 2023 German Aerospace Center (DLR)
2210  * SPDX-License-Identifier: BSD-3-Clause
2211   
2212  * // # core_converter
2213  * // The equations in this file describe the converters in the model.
2214   
2215  * // ## Advanced features
2216  * //
2217  * // You can find a more detailed explanation of the %curly_open%ref%curly_close%`MIP features <explanations_mip_label>`.
2218  ** // There is also a more detailed explanation on the modeling of outages at the %curly_open%ref%curly_close%`resilience section <explanations_resilience_label>`.
2219  * //
2220  * // In the following table you can see which modifications you have to make to your data to use the different features.
2221  * //
2222  * // | Feature | Modification |
2223  * // | ------ | ------ |
2224  * // | MIP expansion | The converter_tech_Parameter "mipUnits" has to be set to 1 in converter_techParam.dat for the technologies and years where descrete expansion is wanted |
2225  * // | Minimum up/downtime | The converter_tech_Parameters "minUptime" and/or "minDowntime" need to be set to the according amount of minimum time steps.Furthermore, the converter_tech_Parameter "mipDispatch" has to be set to 1 in converter_techParam.dat
2226  * // for the technologies and years where a minimum up- or downtime should be applied so that the units can be shut down. "mipUnits" will automatically be set to 1 |
2227  * // | Partial load | The converter_tech_Parameter "mipDispatch" has to be set to 1 in converter_techParam.dat for the technologies and years where you want to make use of the partial load feature. You also have to set a value to
2228  * // the converter_coefficient_parameters "minLoad" and/or "maxLoad" for the according technologies, vintages, activities and commodities. You can then for example set different "coefficient" values for each activity in converter_coefficient.dat |
2229  ** // | Outages | You have to include the converter_outageProfile.dat-file and while executing the model you have to set --method=resilience |
2230   
2231  * // ## %curly_open%ref%curly_close%`sets <remix_model_sets_label>`
2232  * //
2233  * // ### set_converter_techs.dat
2234  * // In this file all converter technologies are listed that can be used within your model.
2235  * //
2236  * // ### set_activities.dat
2237  * // All modes with which the converter technologies can be operated need to be added here.
2238  * // Examples: Charge (for the charging mode of a storage), Powergen (for the mode in which a converter produces electricity), Curtailment (for the mode in which a renewable power plant is shut down), …
2239  * // If you would like to use the partial load feature, all activity modes that should be available for this feature need to be defined here as well.
2240  * //
2241  * // ### set_commodities.dat
2242  * // In this file all commodities are listed that can be used and converted by the converter technologies.
2243  * // Examples: Electricity, Coal, Biomass, Hydrogen, …
2244   
2245  * // ## Variables
2246  * // {special_table_converter_variables}
3385   
3386  * ==== loading units from gdx file ====
3387   
3388  * Load units from gdx file
3390   
3391  * ==== calculation of mappings ====
3392   
3393  * Technologies with a lifeTime > 0 are available
3394  set converter_availTech(nodesModel,years,converter_techs,vintage);
3395  converter_availTech(nodesModel,years,converter_techs,vintage)
3396      $(vintage.val = smax(vintage_a$(vintage_a.val <= years.val
3397          and converter_techParam(converter_techs,vintage_a,"lifeTime") > 0), vintage_a.val)) = yes;
3398   
3399  * Technologies to optimize become unavailable if they have an unitsUpperLimit of 0
3400  converter_availTech(nodesModel,years,converter_techs,vintage)
3401      $(yearsToCalc(years) and converter_capacityParam(nodesModel,years,converter_techs,"unitsUpperLimit") = 0 ) = no;
3402   
3403  * Technologies already built become unavailable if they have an unitsBuild of 0
3404  converter_availTech(nodesModel,years,converter_techs,vintage)
3405      $( ( not yearsToCalc(years)) and converter_capacityParam(nodesModel,years,converter_techs,"unitsBuild") = 0 ) = no;
3406   
3407  * Used technologies are available technologies over their technical lifeTime
3408  set converter_usedTech(nodesModel,years,converter_techs,vintage);
3409  converter_usedTech(nodesModel,years,converter_techs,vintage)
3410      $(vintage.val <= years.val
3411          and years.val < smax(years_a$converter_availTech(nodesModel,years_a,converter_techs,vintage),
3412                                  years_a.val + converter_techParam(converter_techs,vintage,"lifeTime"))
3413          ) = yes;
3414   
3415  * Technologies have to be decomissioned in the interval of first avail + lifetime to last avail + lifetime
3416  set converter_decomTech(nodesModel,years,converter_techs,vintage);
3417  converter_decomTech(nodesModel,years,converter_techs,vintage)
3418    $(sum(years_a$converter_usedTech(nodesModel,years_a,converter_techs,vintage), 1)
3419      and sum(yearsToCalc
3420        $(sameas(years, yearsToCalc)
3421          and yearsToCalc.val >= smin(years_a$converter_availTech(nodesModel,years_a,converter_techs,vintage), years_a.val) + converter_techParam(converter_techs,vintage,"lifeTime")
3422          and yearsToCalc.val <= smax(years_a$converter_availTech(nodesModel,years_a,converter_techs,vintage), years_a.val) + converter_techParam(converter_techs,vintage,"lifeTime")), 1))
3423    = yes;
3424   
3425  * Extend the decom frame to the year after the last year of usedTech
3426  converter_decomTech(nodesModel,yearsToCalc,converter_techs,vintage)
3427    $(converter_usedTech(nodesModel,yearsToCalc-1,converter_techs,vintage)
3428      and converter_decomTech(nodesModel,yearsToCalc-1,converter_techs,vintage))
3429    = yes;
3430   
3431  * Mapping for used activities and commodities
3432  set converter_usedActCom(converter_techs,vintage,activity,commodity);
3433  option converter_usedActCom < converter_coefficient;
3434   
3435  set converter_usedAct(converter_techs,vintage,activity);
3436  option converter_usedAct < converter_usedActCom;
3437   
3438  set converter_usedCom(converter_techs,vintage,commodity);
3439  option converter_usedCom < converter_usedActCom;
3440   
3441  set converter_usedTechAct(nodesModel,years,converter_techs,vintage,activity);
3442  converter_usedTechAct(nodesModel,years,converter_techs,vintage,activity)
3443      $(converter_usedTech(nodesModel,years,converter_techs,vintage)
3444          and converter_usedAct(converter_techs,vintage,activity))
3445      = yes;
3446   
3447  set converter_useRampPos(nodesModel,years,converter_techs,vintage);
3448  converter_useRampPos(nodesModelToCalc,yearsToCalc,converter_techs,vintage)
3449    $(sum(indicator$accounting_converterStartup(indicator,nodesModelToCalc,converter_techs,vintage,"perRamp"), 1)
3450      or sum(indicator$accounting_converterStartup(indicator,nodesModelToCalc,converter_techs,vintage,"perRampPos"), 1))
3451    = 1;
3452   
3453  set converter_useRampNeg(nodesModel,years,converter_techs,vintage);
3454  converter_useRampNeg(nodesModelToCalc,yearsToCalc,converter_techs,vintage)
3455    $(sum(indicator$accounting_converterStartup(indicator,nodesModelToCalc,converter_techs,vintage,"perRamp"), 1)
3456      or sum(indicator$accounting_converterStartup(indicator,nodesModelToCalc,converter_techs,vintage,"perRampNeg"), 1))
3457    = 1;
3458   
3459   
3460  * ==== aggregation of profiles ====
3461   
3462  * derive upper and lower profiles then aggregate
3463  set converter_activity_hasProfileIn(nodesData,years,converter_techs,pc_converter_activityProfile);
3464  option converter_activity_hasProfileIn < converter_activityProfileIn;
3465   
3466  set converter_activity_hasProfile(nodesModel,years,converter_techs,pc_converter_activityProfile);
3467  converter_activity_hasProfile(nodesModelToCalc,yearsToCalc,converter_techs,pc_converter_activityProfile)
3468      = sum(nodesData$aggregateNodesModel(nodesData,nodesModelToCalc),
3469              converter_activity_hasProfileIn(nodesData,yearsToCalc,converter_techs,pc_converter_activityProfile));
3470   
3471  set converter_coefficient_hasProfileIn(nodesData,years,converter_techs,vintage,activity,commodity);
3472  option converter_coefficient_hasProfileIn < converter_coefficientProfileIn;
3473   
3474  set converter_coefficient_hasProfile(nodesModel,years,converter_techs,vintage,activity,commodity);
3475  converter_coefficient_hasProfile(nodesModelToCalc,yearsToCalc,converter_techs,vintage,activity,commodity)
3476      = sum(nodesData$aggregateNodesModel(nodesData,nodesModelToCalc),
3477              converter_coefficient_hasProfileIn(nodesData,yearsToCalc,converter_techs,vintage,activity,commodity));
3478   
3479  * aagregate time dimension
3480  parameter converter_activityProfileIn_aggTime(timeModel,nodesData,yearsToCalc,converter_techs,pc_converter_activityProfile);
3481  converter_activityProfileIn_aggTime(timeModelToCalc,nodesData,yearsToCalc,converter_techs,pc_converter_activityProfile)
3482    $converter_activity_hasProfileIn(nodesData,yearsToCalc,converter_techs,pc_converter_activityProfile)
3483    = sum(timeData$timeMapping(timeData,timeModelToCalc),
3484            converter_activityProfileIn(timeData,nodesData,yearsToCalc,converter_techs,pc_converter_activityProfile)
3485            / timeLength(timeModelToCalc));
3486  option clear = converter_activityProfileIn;
3487   
3488  * weighted average for a real sum of units upper limits, plain average if one region has an upper limit of inf
3489  parameter converter_activityProfile(timeModel,nodesModel,years,converter_techs,vintage,pc_converter_activityProfile);
3490  converter_activityProfile(timeModelToCalc,converter_usedTech(nodesModelToCalc,yearsToCalc,converter_techs,vintage),"upper")
3491      = converter_techParam(converter_techs,vintage,"activityUpperLimit");
3492  converter_activityProfile(timeModelToCalc,converter_usedTech(nodesModelToCalc,yearsToCalc,converter_techs,vintage),"lower")
3493      = converter_techParam(converter_techs,vintage,"activityLowerLimit");
3494   
3495   
3496  set converter_finiteUnitLimit(nodesModelToCalc,yearsToCalc,converter_techs);
3497  converter_finiteUnitLimit(nodesModelToCalc,yearsToCalc,converter_techs)
3498      = sum(nodesData$aggregateNodesModel(nodesData,nodesModelToCalc), converter_capacityParamIn(nodesData,yearsToCalc,converter_techs,"unitsUpperLimit")) > 0
3499          and sum(nodesData$aggregateNodesModel(nodesData,nodesModelToCalc), converter_capacityParamIn(nodesData,yearsToCalc,converter_techs,"unitsUpperLimit")) < inf;
3500   
3501  set converter_infiniteUnitLimit(nodesModelToCalc,yearsToCalc,converter_techs);
3502  converter_infiniteUnitLimit(nodesModelToCalc,yearsToCalc,converter_techs)
3503      = sum(nodesData$aggregateNodesModel(nodesData,nodesModelToCalc), converter_capacityParamIn(nodesData,yearsToCalc,converter_techs,"unitsUpperLimit")) = inf;
3504   
3505  converter_activityProfile(timeModelToCalc,converter_usedTech(nodesModelToCalc,yearsToCalc,converter_techs,vintage),pc_converter_activityProfile)
3506      $(converter_activity_hasProfile(nodesModelToCalc,yearsToCalc,converter_techs,pc_converter_activityProfile)
3507          and converter_finiteUnitLimit(nodesModelToCalc,yearsToCalc,converter_techs))
3508      = sum(nodesData$(aggregateNodesModel(nodesData,nodesModelToCalc)
3509                  and converter_capacityParamIn(nodesData,yearsToCalc,converter_techs,"unitsUpperLimit") < inf ),
3510                converter_activityProfileIn_aggTime(timeModelToCalc,nodesData,yearsToCalc,converter_techs,pc_converter_activityProfile)
3511                * converter_capacityParamIn(nodesData,yearsToCalc,converter_techs,"unitsUpperLimit"))
3512      / sum(nodesData$aggregateNodesModel(nodesData,nodesModelToCalc),
3513              converter_capacityParamIn(nodesData,yearsToCalc,converter_techs,"unitsUpperLimit"));
3514   
3515  converter_activityProfile(timeModelToCalc,converter_usedTech(nodesModelToCalc,yearsToCalc,converter_techs,vintage),pc_converter_activityProfile)
3516      $(converter_activity_hasProfile(nodesModelToCalc,yearsToCalc,converter_techs,pc_converter_activityProfile)
3517          and converter_infiniteUnitLimit(nodesModelToCalc,yearsToCalc,converter_techs))
3518      = sum(nodesData$(aggregateNodesModel(nodesData,nodesModelToCalc)
3519                  and converter_capacityParamIn(nodesData,yearsToCalc,converter_techs,"unitsUpperLimit") = inf),
3520                converter_activityProfileIn_aggTime(timeModelToCalc,nodesData,yearsToCalc,converter_techs,pc_converter_activityProfile)
3521                * converter_capacityParamIn(nodesData,yearsToCalc,converter_techs,"unitsUpperLimit"))
3522      / sum(nodesData$(aggregateNodesModel(nodesData,nodesModelToCalc)
3523                      and converter_capacityParamIn(nodesData,yearsToCalc,converter_techs,"unitsUpperLimit") = inf ),
3524              1);
3525  option clear = converter_activityProfileIn_aggTime;
3526   
3527  * for fixed profiles overwrite upper and lower profile
3528  converter_activityProfile(timeModelToCalc,nodesModelToCalc,yearsToCalc,converter_techs,vintage,"lower")
3529      $converter_activity_hasProfile(nodesModelToCalc,yearsToCalc,converter_techs,"fixed")
3530      = converter_activityProfile(timeModelToCalc,nodesModelToCalc,yearsToCalc,converter_techs,vintage,"fixed");
3531   
3532  converter_activityProfile(timeModelToCalc,nodesModelToCalc,yearsToCalc,converter_techs,vintage,"upper")
3533      $converter_activity_hasProfile(nodesModelToCalc,yearsToCalc,converter_techs,"fixed")
3534      = converter_activityProfile(timeModelToCalc,nodesModelToCalc,yearsToCalc,converter_techs,vintage,"fixed");
3535   
3536   
3537  * weighted average for a real sum of units upper limits, plain average if one region has an upper limit of inf
3538  parameter converter_coefficientProfile(timeModel,nodesModel,years,converter_techs,vintage,activity,commodity);
3539  converter_coefficientProfile(timeModelToCalc,converter_usedTechAct(nodesModelToCalc,yearsToCalc,converter_techs,vintage,activity),commodity)
3540      = converter_coefficient(converter_techs,vintage,activity,commodity,"coefficient");
3541   
3542  converter_coefficientProfile(timeModelToCalc,converter_usedTechAct(nodesModelToCalc,yearsToCalc,converter_techs,vintage,activity),commodity)
3543      $( converter_coefficient_hasProfile(nodesModelToCalc,yearsToCalc,converter_techs,vintage,activity,commodity)
3544          and converter_finiteUnitLimit(nodesModelToCalc,yearsToCalc,converter_techs) )
3545      = sum(nodesData$aggregateNodesModel(nodesData,nodesModelToCalc),
3546            sum(timeData$timeMapping(timeData,timeModelToCalc),
3547                    converter_coefficientProfileIn(timeData,nodesData,yearsToCalc,converter_techs,vintage,activity,commodity))
3548                / timeLength(timeModelToCalc)
3549              * converter_capacityParamIn(nodesData,yearsToCalc,converter_techs,"unitsUpperLimit") )
3550      / sum(nodesData$aggregateNodesModel(nodesData,nodesModelToCalc),
3551              converter_capacityParamIn(nodesData,yearsToCalc,converter_techs,"unitsUpperLimit"));
3552   
3553  converter_coefficientProfile(timeModelToCalc,converter_usedTechAct(nodesModelToCalc,yearsToCalc,converter_techs,vintage,activity),commodity)
3554      $( converter_coefficient_hasProfile(nodesModelToCalc,yearsToCalc,converter_techs,vintage,activity,commodity)
3555          and converter_infiniteUnitLimit(nodesModelToCalc,yearsToCalc,converter_techs))
3556      = sum(nodesData$(aggregateNodesModel(nodesData,nodesModelToCalc)
3557                      and converter_capacityParamIn(nodesData,yearsToCalc,converter_techs,"unitsUpperLimit") = inf ),
3558            sum(timeData$timeMapping(timeData,timeModelToCalc),
3559                    converter_coefficientProfileIn(timeData,nodesData,yearsToCalc,converter_techs,vintage,activity,commodity))
3560                / timeLength(timeModelToCalc))
3561      / sum(nodesData$(aggregateNodesModel(nodesData,nodesModelToCalc)
3562                      and converter_capacityParamIn(nodesData,yearsToCalc,converter_techs,"unitsUpperLimit") = inf ), 1);
3563   
3564  * ==== prepare partial load behavior parameters ====
3565   
3566  * set disabled max load requirements to 1 to avoid excessive logical expressions later on
3567  alias(commodity, com);
3568  converter_coefficient(converter_techs,vintage,activity,commodity,"maxLoad")
3569      $((converter_coefficient(converter_techs,vintage,activity,commodity,"maxLoad") = 0)
3570        and converter_usedAct(converter_techs,vintage,activity))
3571      = 1;
3572   
3573  * indicate that at least one activity of a technology makes use of partial load behavior
3574  set converter_hasMaxLoad(converter_techs,vintage);
3575  converter_hasMaxLoad(converter_techs,vintage)
3576    = smin((activity,commodity)$converter_usedAct(converter_techs,vintage,activity),
3577              converter_coefficient(converter_techs,vintage,activity,commodity,"maxLoad")) < 1;
3578   
3579  set converter_hasMinLoad(converter_techs,vintage);
3580  converter_hasMinLoad(converter_techs,vintage)
3581    = smax((activity,commodity)$converter_usedAct(converter_techs,vintage,activity),
3582              converter_coefficient(converter_techs,vintage,activity,commodity,"minLoad")) > 0;
3583   
3584  set converter_hasConstantFluxInActivity(converter_techs,vintage);
3585  converter_hasConstantFluxInActivity(converter_techs,vintage)
3586    = sum((activity,commodity)$converter_usedAct(converter_techs,vintage,activity),
3587                          abs(converter_coefficient(converter_techs,vintage,activity,commodity,"constant"))) > 0;
3588   
3589  * setting up a requirements parameter to avoid having to cycle through commodities in equations
3590  set pc_converter_activityRequirements
3591      /
3592      minLoad             "Lower profile for converter activity"
3593      maxLoad             "Upper profile for converter activity"
3594      /;
3595  parameter converter_activityRequirements(converter_techs,vintage,activity,pc_converter_activityRequirements);
3596  converter_activityRequirements(converter_techs,vintage,activity,"minLoad")
3597    = smax(commodity, converter_coefficient(converter_techs,vintage,activity,commodity,"minLoad"));
3598  converter_activityRequirements(converter_techs,vintage,activity,"maxLoad")
3599    = smin(commodity, converter_coefficient(converter_techs,vintage,activity,commodity,"maxLoad"));
3600   
3601  * ==== activate MIP units for MIP dispatch or partial load technologies ====
3602   
3603  set converter_hasMinUptime(converter_techs,vintage);
3604  converter_hasMinUptime(converter_techs,vintage)
3605    $(converter_techParam(converter_techs,vintage,"minUptime")
3606      and converter_techParam(converter_techs,vintage,"mipDispatch"))
3607    = yes;
3608   
3609  set converter_hasMinDowntime(converter_techs,vintage);
3610  converter_hasMinDowntime(converter_techs,vintage)
3611    $(converter_techParam(converter_techs,vintage,"minDowntime")
3612      and converter_techParam(converter_techs,vintage,"mipDispatch"))
3613    = yes;
3614   
3615  * require integer unit counts if online state is to be tracked
3616  converter_techParam(converter_techs,vintage,"mipUnits")
3617      $(converter_techParam(converter_techs,vintage,"mipDispatch")
3618        or converter_hasMinLoad(converter_techs, vintage)
3619        or converter_hasMaxLoad(converter_techs, vintage)
3620        or converter_hasConstantFluxInActivity(converter_techs,vintage))
3621      = 1;
3622   
3623  * ==== floor mip converter units to integer values ====
3624  converter_capacityParam(nodesModelToCalc,yearsToCalc,converter_techs,"unitsLowerLimit")
3625      $sum(vintage, converter_techParam(converter_techs,vintage,"mipUnits"))
3626      = floor(converter_capacityParam(nodesModelToCalc,yearsToCalc,converter_techs,"unitsLowerLimit"));
3627  converter_capacityParam(nodesModelToCalc,yearsToCalc,converter_techs,"unitsUpperLimit")
3628      $sum(vintage, converter_techParam(converter_techs,vintage,"mipUnits"))
3629      = ceil(converter_capacityParam(nodesModelToCalc,yearsToCalc,converter_techs,"unitsUpperLimit"));
3630   
3631  * ==== scalars and sets for minUptime and minDowntime ====
3632   
3633  scalar converter_maxUptimeReq;
3634  converter_maxUptimeReq = smax((converter_techs,vintage), converter_techParam(converter_techs,vintage,"minUptime"));
3635  set uptimeSearchRange(timeModelToCalc);
3636  uptimeSearchRange(timeModelToCalc) = ord(timeModelToCalc) <= converter_maxUptimeReq;
3637   
3638  scalar converter_maxDowntimeReq;
3639  converter_maxDowntimeReq = smax((converter_techs,vintage), converter_techParam(converter_techs,vintage,"minDowntime"));
3640  set downtimeSearchRange(timeModelToCalc);
3641  downtimeSearchRange(timeModelToCalc) = ord(timeModelToCalc) <= converter_maxDowntimeReq;
3642   
3643  * ==== definition of variables ====
3644   
3645  * Initialise variables for unitsBuild
3646  converter_unitsBuild.l(nodesModel,years,converter_techs,vintage)
3647      $converter_availTech(nodesModel,years,converter_techs,vintage)
3648      = converter_capacityParam(nodesModel,years,converter_techs,"unitsBuild");
3649  converter_unitsBuild.lo(nodesModel,yearsToCalc,converter_techs,vintage)
3650      $converter_availTech(nodesModel,yearsToCalc,converter_techs,vintage)
3651      = converter_unitsBuild.l(nodesModel,yearsToCalc,converter_techs,vintage);
3652  converter_unitsBuild.fx(nodesModel,years,converter_techs,vintage)
3653      $converter_capacityParam(nodesModel,years,converter_techs,"noExpansion")
3654      = converter_unitsBuild.l(nodesModel,years,converter_techs,vintage);
3655   
3656  * Initialise variables for unitsDecom
3657  converter_unitsDecom.l(nodesModel,years,converter_techs,vintage)
3658    $(converter_decomTech(nodesModel,years,converter_techs,vintage)
3659      and years.val < sum(yearsToCalc$(ord(yearsToCalc) = 1), yearsToCalc.val))
3660    = sum((years_a,years_aa)$(sameas(years-1, years_aa)
3661                        and years_a.val > years_aa.val - converter_techParam(converter_techs,vintage,'lifeTime')
3662                        and years_a.val <= years.val - converter_techParam(converter_techs,vintage,'lifeTime')
3663                        and converter_availTech(nodesModel,years_a,converter_techs,vintage)),
3664          converter_unitsBuild.l(nodesModel,years_a,converter_techs,vintage));
3665   
3666  converter_unitsDecom.l(nodesModel,yearsToCalc,converter_techs,vintage)
3667    $converter_decomTech(nodesModel,yearsToCalc,converter_techs,vintage)
3668    = sum(years$
3669          (years.val < sum(yearsToCalc_a$(ord(yearsToCalc_a) = 1), yearsToCalc_a.val)
3670            and converter_availTech(nodesModel,years,converter_techs,vintage)
3671            and years.val > sum(years_a$sameas(years_a, yearsToCalc-1), years_a.val) - converter_techParam(converter_techs,vintage,'lifeTime')
3672            and years.val <= yearsToCalc.val - converter_techParam(converter_techs,vintage,'lifeTime')),
3673        converter_unitsBuild.l(nodesModel,years,converter_techs,vintage))
3674      + sum(yearsToCalc_a$
3675          (yearsToCalc_a.val < sum(yearsToCalc_aa$(ord(yearsToCalc_aa) > 1), yearsToCalc_a.val)
3676            and converter_availTech(nodesModel,yearsToCalc_a,converter_techs,vintage)
3677            and yearsToCalc_a.val > sum(years_a$sameas(years_a, yearsToCalc-1), years_a.val) - converter_techParam(converter_techs,vintage,'lifeTime')
3678            and yearsToCalc_a.val <= yearsToCalc.val - converter_techParam(converter_techs,vintage,'lifeTime')),
3679        converter_unitsBuild.l(nodesModel,yearsToCalc_a,converter_techs,vintage));
3680        ;
3681   
3682  converter_unitsDecom.lo(nodesModel,yearsToCalc,converter_techs,vintage)
3683      $(converter_usedTech(nodesModel,yearsToCalc,converter_techs,vintage)
3684          and not converter_techParam(converter_techs,vintage,"freeDecom"))
3685      = converter_unitsDecom.l(nodesModel,yearsToCalc,converter_techs,vintage)
3686   
3687  * Calculate planned unit expansion
3688  parameter converter_unitsPlanned(nodesModel,years,converter_techs,vintage);
3689  converter_unitsPlanned(nodesModel,years,converter_techs,vintage) = 0;
3690  loop(years,
3691    converter_unitsPlanned(nodesModel,years,converter_techs,vintage)
3692      =
3693      converter_unitsPlanned(nodesModel,years-1,converter_techs,vintage)
3694          $converter_usedTech(nodesModel,years-1,converter_techs,vintage)
3695      + converter_unitsBuild.l(nodesModel,years,converter_techs,vintage)
3696          $converter_availTech(nodesModel,years,converter_techs,vintage)
3697      - converter_unitsDecom.l(nodesModel,years,converter_techs,vintage)
3698          $converter_usedTech(nodesModel,years,converter_techs,vintage);
3699  );
3700   
3701  * Set initial state for planned units
3702  converter_unitsTotal.l(nodesModel,years,converter_techs,vintage)
3703    = converter_unitsPlanned(nodesModel,years,converter_techs,vintage)
3704   
3705  * Calculate if planned unit expansion is bounded by upper and lower limits
3706  set converter_unitBoundsFixed(nodesModel,years,converter_techs);
3707  converter_unitBoundsFixed(nodesModel,years,converter_techs)
3708    $(sum(vintage$converter_usedTech(nodesModel,years,converter_techs,vintage),
3709          converter_unitsPlanned(nodesModel,years,converter_techs,vintage))
3710      = converter_capacityParam(nodesModel,years,converter_techs,"unitsUpperLimit")
3711    and sum(vintage$converter_usedTech(nodesModel,years,converter_techs,vintage),
3712          converter_unitsPlanned(nodesModel,years,converter_techs,vintage))
3713      = converter_capacityParam(nodesModel,years,converter_techs,"unitsLowerLimit"))
3714    = yes;
3715   
3716  * Fix unitsBuild, unitsDecom, unitsTotal if levels are predetermined by upper and lower limits
3717  converter_unitsBuild.fx(nodesModel,years,converter_techs,vintage)
3718    $(converter_availTech(nodesModel,years,converter_techs,vintage)
3719      and converter_unitBoundsFixed(nodesModel,years,converter_techs))
3720    = converter_unitsBuild.l(nodesModel,years,converter_techs,vintage);
3721  converter_unitsDecom.fx(nodesModel,years,converter_techs,vintage)
3722    $(converter_usedTech(nodesModel,years,converter_techs,vintage)
3723      and converter_unitBoundsFixed(nodesModel,years,converter_techs))
3724    = converter_unitsDecom.l(nodesModel,years,converter_techs,vintage);
3725  converter_unitsTotal.fx(nodesModel,years,converter_techs,vintage)
3726    $(converter_usedTech(nodesModel,years,converter_techs,vintage)
3727      and converter_unitBoundsFixed(nodesModel,years,converter_techs))
3728    = converter_unitsTotal.l(nodesModel,years,converter_techs,vintage);
3729   
3730  converter_unitsOnline_MIP.up(timeModelToCalc,nodesModel,years,converter_techs,vintage)
3731      $(converter_usedTech(nodesModel,years,converter_techs,vintage)
3732        and converter_techParam(converter_techs,vintage,"mipDispatch") = 1)
3733      = converter_capacityParam(nodesModel,years,converter_techs,"unitsUpperLimit");
3734   
3735  converter_unitsTotal_MIP.up(nodesModel,years,converter_techs,vintage)
3736      $(converter_usedTech(nodesModel,years,converter_techs,vintage)
3737        and converter_techParam(converter_techs,vintage,"mipUnits") = 1)
3738      = converter_capacityParam(nodesModel,years,converter_techs,"unitsUpperLimit");
3739   
3740  converter_unitsUsingActivity_MIP.up(timeModelToCalc,nodesModel,years,converter_techs,vintage,activity)
3741      $(converter_usedTech(nodesModel,years,converter_techs,vintage)
3742        and (converter_hasMinLoad(converter_techs, vintage)
3743              or converter_hasMaxLoad(converter_techs, vintage)))
3744      = converter_capacityParam(nodesModel,years,converter_techs,"unitsUpperLimit");
3745   
3746  * Add parameter for fixing capacities during myopic runs
3747  parameter converter_unitsDelta(nodesModel,years,converter_techs);
3748   
3749  * ==== declaration of equations ====
3750   
3751  equations
3752    Eq_converter_unitsBalance(nodesModel,years,converter_techs,vintage
3753      ) "Ensures the units balance over the planning period."
3754    Eq_converter_unitsFixedDecom(nodesModel,years,converter_techs,vintage
3755      ) "Restricts the fixed decommissioning of units over the planning period."
3756    Eq_converter_unitsFreeDecom(nodesModel,years,converter_techs,vintage
3757      ) "Restricts the free decommissioning of units over the planning period."
3758    Eq_converter_unitsUpperLimit(nodesModel,years,converter_techs
3759      ) "Upper bound for the total number of units."
3760    Eq_converter_unitsLowerLimit(nodesModel,years,converter_techs
3761      ) "Lower bound for the total number of units."
3762    Eq_converter_unitsFixedLimit(nodesModel,years,converter_techs
3763      ) "Fixed bound for the total number of units."
3764    Eq_converter_unitsTotalMIP(nodesModel,years,converter_techs,vintage
3765      ) "Fixes the total number of units to the corresponding integer variable."
3766    Eq_converter_unitsOnlineMIP(timeModel,nodesModel,years,converter_techs,vintage
3767      ) "Fixes the number of online units to the corresponding integer variable."
3768   
3769    Eq_converter_activityLowerLimit(timeModel,nodesModel,years,converter_techs,vintage
3770      ) "Lower limit on the activity."
3771    Eq_converter_activityUpperLimit(timeModel,nodesModel,years,converter_techs,vintage
3772      ) "Upper limit on the activity."
3773   
3774    Eq_converter_activityFixedLimit(timeModel,nodesModel,years,converter_techs,vintage
3775      ) "Fixed limit on the activity."
3776    Eq_converter_rampPos(timeModel,nodesModel,years,converter_techs,vintage
3777      ) "Positive ramping of unit activity."
3778    Eq_converter_rampNeg(timeModel,nodesModel,years,converter_techs,vintage
3779      ) "Negative ramping of unit activity."
3780    Eq_converter_rampLimit(timeModel,nodesModel,years,converter_techs,vintage
3781      ) "Restrict ramping up of unit activity."
3782   
3783    Eq_converter_unitsOnline(timeModel,nodesModel,years,converter_techs,vintage
3784      ) "Set online units to total number of operational units."
3785    Eq_converter_unitsOnlineUC(timeModel,nodesModel,years,converter_techs,vintage
3786      ) "Allow shutting down units."
3787    Eq_converter_activityStartups(timeModel,nodesModel,years,converter_techs,vintage
3788      ) "Variable counting the number of unit startups."
3789    Eq_converter_activityShutdowns(timeModel,nodesModel,years,converter_techs,vintage
3790      ) "Variable tracking the number of unit shutdowns."
3791    Eq_converter_limitStartups(nodesModel,years,converter_techs,vintage
3792      ) "Limit the number of startup cycles a unit can perform."
3793    Eq_converter_minUptime(timeModel,nodesModel,years,converter_techs,vintage
3794      ) "Require recently started units to remain online for their respective minimum uptime."
3795    Eq_converter_minDowntime(timeModel,nodesModel,years,converter_techs,vintage
3796      ) "Require recently shut down units to remain offline for their respective minimum downtime."
3797    Eq_converter_activityUpperLimitDetailedPartLoadMinReq(timeModel,nodesModel,years,converter_techs,vintage,activity
3798      ) "Limit activity coefficients of activities with a given load requirement or stricter to the number of units in such modes."
3799    Eq_converter_activityUpperLimitDetailedPartLoadMaxReq(timeModel,nodesModel,years,converter_techs,vintage,activity
3800      ) "Limit activity coefficients of activities with a given load requirement or stricter to the number of units in such modes."
3801    Eq_converter_activityLowerLimitDetailedPartLoadMinReq(timeModel,nodesModel,years,converter_techs,vintage,activity
3802      ) "Enforce sufficient activity coefficients of activities to justify all active modes."
3803    Eq_converter_noOnlineIdle(timeModel,nodesModel,years,converter_techs,vintage
3804      ) "Prevent the circumvention of requirements by keeping units online without using any modes."
3805    Eq_converter_noOnlineIdleDetailedPartLoad(timeModel,nodesModel,years,converter_techs,vintage
3806      ) "Prevent the circumvention of requirements by keeping units online without using any modes. Allow more than one mode activation per unit."
3807    Eq_converter_activityUpperLimitPartLoad(timeModel,nodesModel,years,converter_techs,vintage,activity
3808      ) "Limit usage of an activity to corresponding units."
3809    Eq_converter_activityLowerLimitPartLoad(timeModel,nodesModel,years,converter_techs,vintage,activity
3810      ) "Limit usage of an activity to corresponding units."
3811    Eq_converter_activityModeLimit(timeModel,nodesModel,years,converter_techs,vintage,activity
3812      ) "Limit the number of units in one particular mode to the number of operational units."
3813    ;
3814   
3815  * ==== equation definition ====
3816  * // ## Equations
3817  * // ### Converter Units Balance
3818  * // Ensures that the total units are consistent with the built and decommissioned units.
3819  * // {Eq_converter_unitsBalance}
3820  Eq_converter_unitsBalance(nodesModelSel,yearsSel,converter_techs,vintage)
3821      $((converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
3822            or sum(years$sameas(years,yearsSel), converter_usedTech(nodesModelSel,years-1,converter_techs,vintage)))
3823          and not converter_unitBoundsFixed(nodesModelSel,yearsSel,converter_techs))
3824      ..
3825      converter_unitsTotal(nodesModelSel,yearsSel,converter_techs,vintage)
3826      =e=
3827      sum(yearsToCalc$(ord(yearsToCalc) = 1 and sameas(yearsToCalc, yearsSel)),
3828        sum(years$sameas(years, yearsToCalc),
3829          converter_unitsTotal(nodesModelSel,years-1,converter_techs,vintage)
3830            $converter_usedTech(nodesModelSel,years-1,converter_techs,vintage)))
3831      + sum((yearsToCalc)$(ord(yearsToCalc) > 1 and sameas(yearsToCalc, yearsSel)),
3832        converter_unitsTotal(nodesModelSel,yearsToCalc-1,converter_techs,vintage)
3833          $converter_usedTech(nodesModelSel,yearsToCalc-1,converter_techs,vintage))
3834      + converter_unitsBuild(nodesModelSel,yearsSel,converter_techs,vintage)
3835          $converter_availTech(nodesModelSel,yearsSel,converter_techs,vintage)
3836      - converter_unitsDecom(nodesModelSel,yearsSel,converter_techs,vintage)
3837          $converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage);
3838   
3839  * // ### Converter Units Fixed Decommission
3840  * // Restricts the fixed decommissioning of units over the planning period.
3841  * // {Eq_converter_unitsFixedDecom}
3842  Eq_converter_unitsFixedDecom(nodesModelSel,yearsSel,converter_techs,vintage)
3843      $(converter_decomTech(nodesModelSel,yearsSel,converter_techs,vintage)
3844          and not converter_techParam(converter_techs,vintage,"freeDecom") = 1
3845          and not converter_unitBoundsFixed(nodesModelSel,yearsSel,converter_techs))
3846      ..
3847      converter_unitsDecom(nodesModelSel,yearsSel,converter_techs,vintage)
3848      =e=
3849      sum(years$
3850          (converter_availTech(nodesModelSel,years,converter_techs,vintage)
3851            and years.val > sum(yearsToCalc$sameas(yearsToCalc+1, yearsSel), yearsToCalc.val) - converter_techParam(converter_techs,vintage,'lifeTime')
3852            and years.val <= yearsSel.val - converter_techParam(converter_techs,vintage,'lifeTime')),
3853        converter_unitsBuild(nodesModelSel,years,converter_techs,vintage));
3854   
3855  * // ### Converter Units Free Decommission
3856  * // Restricts the free decommissioning of units over the planning period.
3857  * // {Eq_converter_unitsFreeDecom}
3858  Eq_converter_unitsFreeDecom(nodesModelSel,yearsSel,converter_techs,vintage)
3859      $((converter_decomTech(nodesModelSel,yearsSel,converter_techs,vintage)
3860          or converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage))
3861          and converter_techParam(converter_techs,vintage,"freeDecom") = 1)
3862      ..
3863      sum(years$
3864            ((converter_decomTech(nodesModelSel,years,converter_techs,vintage)
3865              or converter_usedTech(nodesModelSel,years,converter_techs,vintage))
3866              and years.val < sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)),
3867          converter_unitsDecom(nodesModelSel,years,converter_techs,vintage))
3868      + sum(yearsToCalc$
3869            ((converter_decomTech(nodesModelSel,yearsToCalc,converter_techs,vintage)
3870              or converter_usedTech(nodesModelSel,yearsToCalc,converter_techs,vintage))
3871              and yearsToCalc.val >= sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
3872              and yearsToCalc.val <= yearsSel.val),
3873          converter_unitsDecom(nodesModelSel,yearsToCalc,converter_techs,vintage))
3874      =g=
3875      sum(years$
3876            (converter_availTech(nodesModelSel,years,converter_techs,vintage)
3877              and years.val < sum(yearsToCalc$(ord(yearsToCalc)=1), yearsToCalc.val) - converter_techParam(converter_techs,vintage,'lifeTime')),
3878          converter_unitsBuild(nodesModelSel,years,converter_techs,vintage))
3879      + sum(yearsToCalc$
3880            (converter_availTech(nodesModelSel,yearsToCalc,converter_techs,vintage)
3881              and yearsToCalc.val >= sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
3882              and yearsToCalc.val <= yearsSel.val - converter_techParam(converter_techs,vintage,'lifeTime')),
3883          converter_unitsBuild(nodesModelSel,yearsToCalc,converter_techs,vintage));
3884   
3885  * // ### Converter Units Upper Limit
3886  * // Upper bound for the total number of units.
3887  * // {Eq_converter_unitsUpperLimit}
3888  Eq_converter_unitsUpperLimit(nodesModelSel,yearsSel,converter_techs)
3889      $(converter_capacityParam(nodesModelSel,yearsSel,converter_techs,'unitsUpperLimit') >= 0
3890          and converter_capacityParam(nodesModelSel,yearsSel,converter_techs,'unitsUpperLimit') < +inf
3891          and converter_capacityParam(nodesModelSel,yearsSel,converter_techs,'unitsUpperLimit')
3892              <> converter_capacityParam(nodesModelSel,yearsSel,converter_techs,'unitsLowerLimit'))
3893      ..
3894      sum(vintage$converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage),
3895          converter_unitsTotal(nodesModelSel,yearsSel,converter_techs,vintage))
3896      =l=
3897      converter_capacityParam(nodesModelSel,yearsSel,converter_techs,"unitsUpperLimit");
3898   
3899  * // ### Converter Units Lower Limit
3900  * // Lower bound for the total number of units.
3901  * // {Eq_converter_unitsLowerLimit}
3902  Eq_converter_unitsLowerLimit(nodesModelSel,yearsSel,converter_techs)
3903      $(converter_capacityParam(nodesModelSel,yearsSel,converter_techs,'unitsLowerLimit') > 0
3904          and converter_capacityParam(nodesModelSel,yearsSel,converter_techs,'unitsLowerLimit')
3905              <> converter_capacityParam(nodesModelSel,yearsSel,converter_techs,'unitsUpperLimit'))
3906      ..
3907      sum(vintage$converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage),
3908          converter_unitsTotal(nodesModelSel,yearsSel,converter_techs,vintage))
3909      =g=
3910      converter_capacityParam(nodesModelSel,yearsSel,converter_techs,"unitsLowerLimit");
3911   
3912  Eq_converter_unitsFixedLimit(nodesModelSel,yearsSel,converter_techs)
3913      $(converter_capacityParam(nodesModelSel,yearsSel,converter_techs,'unitsLowerLimit')
3914          = converter_capacityParam(nodesModelSel,yearsSel,converter_techs,'unitsUpperLimit'))
3915      ..
3916      sum(vintage$converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage),
3917          converter_unitsTotal(nodesModelSel,yearsSel,converter_techs,vintage))
3918      =e=
3919      converter_capacityParam(nodesModelSel,yearsSel,converter_techs,"unitsUpperLimit");
3920   
3921  * // ### Converter Units Total MIP
3922  * // Fixes the total number of units to the corresponding integer variable.
3923  * // {Eq_converter_unitsTotalMIP}
3924  Eq_converter_unitsTotalMIP(nodesModelSel,yearsSel,converter_techs,vintage)
3925      $( converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
3926          and converter_techParam(converter_techs,vintage,"mipUnits") = 1 )
3927      ..
3928      converter_unitsTotal(nodesModelSel,yearsSel,converter_techs,vintage)
3929      =e=
3930      converter_unitsTotal_MIP(nodesModelSel,yearsSel,converter_techs,vintage);
3931   
3932  * // ### Converter Units Online MIP
3933  * // Fixes the number of online units to the corresponding integer variable.
3934  * // {Eq_converter_unitsOnlineMIP}
3935  Eq_converter_unitsOnlineMIP(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
3936      $( converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
3937          and converter_techParam(converter_techs,vintage,"mipDispatch") = 1 )
3938      ..
3939      converter_unitsOnline(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
3940      =e=
3941      converter_unitsOnline_MIP(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage);
3942   
3943  * // ### Converter Activity Lower Limit
3944  * // Lower limit on the activity.
3945  * // {Eq_converter_activityLowerLimit}
3946  Eq_converter_activityLowerLimit(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
3947      $(converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
3948          and converter_activityProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,"lower") > 0
3949          and converter_activityProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,"lower")
3950               <> converter_activityProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,"upper")
3951          and not converter_hasMinLoad(converter_techs, vintage))
3952      ..
3953      sum(activity$converter_usedAct(converter_techs,vintage,activity),
3954          converter_activity(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity)
3955      )
3956      =g=
3957      converter_activityProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,"lower")
3959      * converter_unitsOnline(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage);
3961   
3962  * // ### Converter Activity Upper Limit
3963  * // Upper limit on the activity.
3964  * // {Eq_converter_activityUpperLimit}
3965  Eq_converter_activityUpperLimit(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
3966      $(converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
3967          and converter_activityProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,"upper") >= 0
3968          and converter_activityProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,"upper")
3969               <> converter_activityProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,"lower"))
3970      ..
3971      sum(activity$converter_usedAct(converter_techs,vintage,activity),
3972          converter_activity(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity)
3973      )
3974      =l=
3975      converter_activityProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,"upper")
3977      * converter_unitsOnline(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage);
3979   
3980  Eq_converter_activityFixedLimit(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
3981      $(converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
3982          and converter_activityProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,"lower")
3983               = converter_activityProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,"upper"))
3984      ..
3985      sum(activity$converter_usedAct(converter_techs,vintage,activity),
3986          converter_activity(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity)
3987      )
3988      =e=
3989      converter_activityProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,"upper")
3991      * converter_unitsOnline(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage);
3993   
3994  * // ### Converter Positive Ramping
3995  * // Positive ramping of unit activity.
3996  * // {Eq_converter_rampPos}
3997  Eq_converter_rampPos(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,converter_techs,vintage)
3998    $( converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
3999        and converter_useRampPos(nodesModelSel,yearsSel,converter_techs,vintage))
4000      ..
4001      converter_rampPos(timeModelToCalc,nodesModelSel,yearsSel,converter_techs,vintage)
4002      =g=
4003      sum(activity$converter_usedAct(converter_techs,vintage,activity),
4004              converter_activity(timeModelToCalc,nodesModelSel,yearsSel,converter_techs,vintage,activity)
4005              - converter_activity(timeModelToCalc--1,nodesModelSel,yearsSel,converter_techs,vintage,activity));
4006   
4007  * // ### Converter Negative Ramping
4008  * // Negative ramping of unit activity.
4009  * // {Eq_converter_rampNeg}
4010  Eq_converter_rampNeg(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,converter_techs,vintage)
4011    $( converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
4012        and converter_useRampNeg(nodesModelSel,yearsSel,converter_techs,vintage))
4013      ..
4014      converter_rampNeg(timeModelToCalc,nodesModelSel,yearsSel,converter_techs,vintage)
4015      =g=
4016      - sum(activity$converter_usedAct(converter_techs,vintage,activity),
4017              converter_activity(timeModelToCalc,nodesModelSel,yearsSel,converter_techs,vintage,activity)
4018              - converter_activity(timeModelToCalc--1,nodesModelSel,yearsSel,converter_techs,vintage,activity));
4019   
4020  * // ### Converter Ramping Limit
4021  * // Restrict ramping up of unit activity.
4022  * // {Eq_converter_rampLimit}
4023  Eq_converter_rampLimit(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,converter_techs,vintage)
4024    $( converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
4025          and converter_techParam(converter_techs,vintage,"activityRampLimit") > 0)
4026      ..
4027      sum(activity$converter_usedAct(converter_techs,vintage,activity),
4028              converter_activity(timeModelToCalc,nodesModelSel,yearsSel,converter_techs,vintage,activity)
4029              - converter_activity(timeModelToCalc--1,nodesModelSel,yearsSel,converter_techs,vintage,activity))
4030    =l=
4031    converter_techParam(converter_techs,vintage,"activityRampLimit")
4033      * converter_unitsOnline(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage);
4035   
4036   
4038   
4039  * // ### Converter MIP Units Online
4040  * // Restrict ramping up of unit activity.
4041  * // {Eq_converter_unitsOnline}
4042  Eq_converter_unitsOnline(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
4043      $( converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
4044          and converter_techParam(converter_techs,vintage,"mipDispatch") = 0 )
4045    ..
4046    converter_unitsOnline(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
4047    =e=
4048    converter_unitsTotal(nodesModelSel,yearsSel,converter_techs,vintage)
4049      ;
4050   
4051  * // ### Converter MIP Units Shutting Down
4052  * // Allow shutting down units.
4053  * // {Eq_converter_unitsOnlineUC}
4054  Eq_converter_unitsOnlineUC(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
4055      $( converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
4056          and converter_techParam(converter_techs,vintage,"mipDispatch") = 1 )
4057    ..
4058    converter_unitsOnline(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
4059    =l=
4060    converter_unitsTotal(nodesModelSel,yearsSel,converter_techs,vintage)
4061      ;
4063   
4064  * // ### Converter Activity Startups
4065  * // Variable counting the number of unit startups.
4066  * // {Eq_converter_activityStartups}
4067  Eq_converter_activityStartups(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,converter_techs,vintage)
4068    $( converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
4069          and converter_techParam(converter_techs,vintage,"mipDispatch") = 1 )
4070      ..
4071      converter_unitStartups(timeModelToCalc,nodesModelSel,yearsSel,converter_techs,vintage)
4072      =g=
4073          converter_unitsOnline(timeModelToCalc,nodesModelSel,yearsSel,converter_techs,vintage)
4074      - converter_unitsOnline(timeModelToCalc--1,nodesModelSel,yearsSel,converter_techs,vintage);
4075   
4076  * // ### Converter Activity Shutdowns
4077  * // Variable tracking the number of unit shutdowns.
4078  * // {Eq_converter_activityShutdowns}
4079  Eq_converter_activityShutdowns(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,converter_techs,vintage)
4080    $( converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
4081          and converter_techParam(converter_techs,vintage,"mipDispatch") = 1
4082          and converter_techParam(converter_techs,vintage,"minDowntime") > 0)
4083      ..
4084      converter_unitShutdowns(timeModelToCalc,nodesModelSel,yearsSel,converter_techs,vintage)
4085      =g=
4086          converter_unitsOnline(timeModelToCalc--1,nodesModelSel,yearsSel,converter_techs,vintage)
4087      - converter_unitsOnline(timeModelToCalc,nodesModelSel,yearsSel,converter_techs,vintage);
4088   
4089  * // ### Converter Activity Startup Limit
4090  * // Limit the number of startup cycles a unit can perform.
4091  * // {Eq_converter_limitStartups}
4092  Eq_converter_limitStartups(nodesModelSel,yearsSel,converter_techs,vintage)
4093    $( converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
4094          and converter_techParam(converter_techs,vintage,"mipDispatch") = 1
4095      and converter_techParam(converter_techs,vintage,"startupLimit") > 0)
4096      ..
4097      sum(timeModelToCalc, converter_unitStartups(timeModelToCalc,nodesModelSel,yearsSel,converter_techs,vintage))
4098    =l=
4099    converter_techParam(converter_techs,vintage,"startupLimit")
4100    * converter_unitsTotal(nodesModelSel,yearsSel,converter_techs,vintage);
4101   
4102  alias(timeModelToCalc,ttc);
4103   
4104  * // ### Converter Units Minimum Uptime
4105  * // Require recently started units to remain online for their respective minimum uptime.
4106  * // {Eq_converter_minUptime}
4107  Eq_converter_minUptime(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,converter_techs,vintage)
4108    $( converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
4109          and converter_techParam(converter_techs,vintage,"mipDispatch") = 1
4110      and converter_techParam(converter_techs,vintage,"minUptime") > 0)
4111      ..
4112      sum(ttc$[uptimeSearchRange(ttc) and ord(ttc)<=converter_techParam(converter_techs,vintage,"minUptime")],
4113          converter_unitStartups(ttc+[ord(timeModelToCalc)-converter_techParam(converter_techs,vintage,"minUptime")],
4114              nodesModelSel,yearsSel,converter_techs,vintage))
4115          =l=
4116          converter_unitsOnline(timeModelToCalc,nodesModelSel,yearsSel,converter_techs,vintage);
4117   
4118  * // ### Converter Units Minimum Downtime
4119  * // Require recently shut down units to remain offline for their respective minimum downtime.
4120  * // {Eq_converter_minDowntime}
4121  Eq_converter_minDowntime(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,converter_techs,vintage)
4122    $( converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
4123          and converter_techParam(converter_techs,vintage,"mipDispatch") = 1
4124      and converter_techParam(converter_techs,vintage,"minDowntime") > 0)
4125      ..
4126      sum(ttc$[downtimeSearchRange(ttc) and ord(ttc)<=converter_techParam(converter_techs,vintage,"minDowntime")],
4127          converter_unitShutdowns(ttc+[ord(timeModelToCalc)-converter_techParam(converter_techs,vintage,"minDowntime")],
4128              nodesModelSel,yearsSel,converter_techs,vintage))
4129          =l=
4130          converter_unitsTotal(nodesModelSel,yearsSel,converter_techs,vintage)
4131      - converter_unitsOnline(timeModelToCalc,nodesModelSel,yearsSel,converter_techs,vintage);
4132   
4133  * This equation is meant to cause the units to activate particular mode counters to gain access to the corresponding activities.
4134  * Activities are allowed to be used on units with stricter activity requirements but not the other way around.
4135  alias(activity, act);
4136   
4137  * // ### Converter MIP Units Activity Upper Limit Minimum Required Load
4138  * // Limit activity coefficients of activities with a given load requirement or stricter to the number of units in such modes.
4139  * // {Eq_converter_activityUpperLimitDetailedPartLoadMinReq}
4140  Eq_converter_activityUpperLimitDetailedPartLoadMinReq(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity)
4141    $( converter_usedTechAct(nodesModelSel,yearsSel,converter_techs,vintage,activity)
4142          and converter_hasMinLoad(converter_techs, vintage)
4143          and converter_techParam(converter_techs,vintage,"mipDetailedPartialLoad"))
4144      ..
4145      sum(act$(converter_activityRequirements(converter_techs,vintage,act,"minLoad")
4146                  >= converter_activityRequirements(converter_techs,vintage,activity,"minLoad")
4147               and converter_usedAct(converter_techs,vintage,act)),
4148      converter_activity(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,act))
4149    =l=
4150    converter_activityProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,"upper")
4151      * sum(act$(converter_activityRequirements(converter_techs,vintage,act,"minLoad")
4152                  >= converter_activityRequirements(converter_techs,vintage,activity,"minLoad")
4153                 and converter_usedAct(converter_techs,vintage,act)),
4154      converter_unitsUsingActivity_MIP(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,act));
4155   
4156  * // ### Converter MIP Units Activity Upper Limit Maximum Required Load
4157  * // Limit activity coefficients of activities with a given load requirement or stricter to the number of units in such modes.
4158  * // {Eq_converter_activityUpperLimitDetailedPartLoadMaxReq}
4159  Eq_converter_activityUpperLimitDetailedPartLoadMaxReq(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity)
4160    $( converter_usedTechAct(nodesModelSel,yearsSel,converter_techs,vintage,activity)
4161          and converter_hasMaxLoad(converter_techs,vintage)
4162          and converter_techParam(converter_techs,vintage,"mipDetailedPartialLoad"))
4163      ..
4164      sum(act$(converter_activityRequirements(converter_techs,vintage,act,"maxLoad")
4165                  <= converter_activityRequirements(converter_techs,vintage,activity,"maxLoad")
4166               and converter_usedAct(converter_techs,vintage,act)),
4167      converter_activity(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,act))
4168    =l=
4169      sum(act$(converter_activityRequirements(converter_techs,vintage,act,"maxLoad")
4170                  <= converter_activityRequirements(converter_techs,vintage,activity,"maxLoad")
4171               and converter_usedAct(converter_techs,vintage,act)),
4172      min(converter_activityRequirements(converter_techs,vintage,act,"maxLoad"),
4173            converter_activityProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,"upper"))
4174            * converter_unitsUsingActivity_MIP(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,act));
4175   
4176  * This equation is meant to enforce the lower limit requirements of activities in use.
4177  * Loads produced by activities with less strict requirements can contribute to the minimum load requirement of strict activities but not the other way around,
4178  * because these activities can only run on units in the respectively strict activation state.
4179   
4180  * // ### Converter MIP Units Activity Lower Limit Minimum Required Load
4181  * // Enforce sufficient activity coefficients of activities to justify all active modes.
4182  * // {Eq_converter_activityLowerLimitDetailedPartLoadMinReq}
4183  Eq_converter_activityLowerLimitDetailedPartLoadMinReq(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity)
4184    $( converter_usedTechAct(nodesModelSel,yearsSel,converter_techs,vintage,activity)
4185          and converter_hasMinLoad(converter_techs, vintage)
4186          and converter_techParam(converter_techs,vintage,"mipDetailedPartialLoad"))
4187      ..
4188      sum(act$(converter_activityRequirements(converter_techs,vintage,act,"minLoad")
4189                  <= converter_activityRequirements(converter_techs,vintage,activity,"minLoad")
4190               and converter_usedAct(converter_techs,vintage,act)),
4191      converter_activity(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,act))
4192    =g=
4193      sum(act$(converter_activityRequirements(converter_techs,vintage,act,"minLoad")
4194                  <= converter_activityRequirements(converter_techs,vintage,activity,"minLoad")
4195               and converter_usedAct(converter_techs,vintage,act)),
4196      max(converter_activityRequirements(converter_techs,vintage,act,"minLoad"),
4197            converter_activityProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,"lower"))
4198            * converter_unitsUsingActivity_MIP(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,act));
4199   
4200   
4201  * Simple one-activity-per-unit partial load equations
4202  * // ### Converter MIP Units Activity Upper Limit Partial Load Balance
4203  * // Enforce MIP units partial load upper limit.
4204  * // {Eq_converter_activityUpperLimitPartLoad}
4205  Eq_converter_activityUpperLimitPartLoad(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity)
4206    $( converter_usedTechAct(nodesModelSel,yearsSel,converter_techs,vintage,activity)
4207          and (converter_hasMinLoad(converter_techs, vintage)
4208                or converter_hasMaxLoad(converter_techs, vintage)
4209                or converter_hasConstantFluxInActivity(converter_techs, vintage))
4210          and not converter_techParam(converter_techs,vintage,"mipDetailedPartialLoad"))
4211      ..
4212      converter_activity(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity)
4213    =l=
4214    min(converter_activityRequirements(converter_techs,vintage,activity,"maxLoad"),
4215          converter_activityProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,"upper"))
4216          * converter_unitsUsingActivity_MIP(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity);
4217   
4218  * // ### Converter MIP Units Activity Lower Limit Partial Load Balance
4219  * // Enforce MIP units partial load lower limit.
4220  * // {Eq_converter_activityLowerLimitPartLoad}
4221  Eq_converter_activityLowerLimitPartLoad(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity)
4222    $( converter_usedTechAct(nodesModelSel,yearsSel,converter_techs,vintage,activity)
4223          and (converter_hasMinLoad(converter_techs, vintage)
4224                or converter_hasMaxLoad(converter_techs, vintage))
4225          and not converter_techParam(converter_techs,vintage,"mipDetailedPartialLoad"))
4226      ..
4227      converter_activity(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity)
4228    =g=
4229    max(converter_activityRequirements(converter_techs,vintage,activity,"minLoad"),
4230          converter_activityProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,"lower"))
4231          * converter_unitsUsingActivity_MIP(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity);
4232   
4233  * // ### Converter MIP Units Idle Online Units
4234  * // Counts idle online units at every time step
4235  * // {Eq_converter_noOnlineIdle}
4236  Eq_converter_noOnlineIdle(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
4237    $( converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
4238          and (converter_hasMinLoad(converter_techs, vintage)
4239              or converter_hasMaxLoad(converter_techs, vintage)
4240              or converter_hasConstantFluxInActivity(converter_techs,vintage))
4241          and not converter_techParam(converter_techs,vintage,"mipDetailedPartialLoad"))
4242      ..
4243      converter_unitsOnline(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
4244      =e=
4245      sum(activity$converter_usedAct(converter_techs,vintage,activity),
4246            converter_unitsUsingActivity_MIP(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity));
4247   
4248  * // ### Converter MIP Units Idle Online Units Partial load
4249  * // Counts idle online units at every time step
4250  * // {Eq_converter_noOnlineIdleDetailedPartLoad}
4251  Eq_converter_noOnlineIdleDetailedPartLoad(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
4252    $( converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
4253          and (converter_hasMinLoad(converter_techs, vintage)
4254                  or converter_hasMaxLoad(converter_techs, vintage))
4255          and converter_techParam(converter_techs,vintage,"mipDetailedPartialLoad"))
4256      ..
4257      converter_unitsOnline(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
4258      =l=
4259      sum(activity$converter_usedAct(converter_techs,vintage,activity),
4260            converter_unitsUsingActivity_MIP(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity));
4261   
4262  * // ### Converter MIP activity model limit
4263  * // Converter activity model limit
4264  * // {Eq_converter_activityModeLimit}
4265  Eq_converter_activityModeLimit(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity)
4266    $( converter_usedTechAct(nodesModelSel,yearsSel,converter_techs,vintage,activity)
4267          and (converter_hasMinLoad(converter_techs, vintage)
4268                or converter_hasMaxLoad(converter_techs, vintage))
4269          and converter_techParam(converter_techs,vintage,"mipDetailedPartialLoad"))
4270      ..
4271      converter_unitsOnline(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
4272      =g=
4273      converter_unitsUsingActivity_MIP(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity);
4274   
4275  * ==== model definition ====
4276   
4277  Model M_converter
4278  /
4279    Eq_converter_unitsBalance
4280    Eq_converter_unitsFixedDecom
4281    Eq_converter_unitsFreeDecom
4282    Eq_converter_unitsUpperLimit
4283    Eq_converter_unitsLowerLimit
4284    Eq_converter_unitsFixedLimit
4285    Eq_converter_unitsTotalMIP
4286    Eq_converter_unitsOnlineMIP
4287    Eq_converter_activityUpperLimit
4288    Eq_converter_activityLowerLimit
4289    Eq_converter_activityFixedLimit
4290    Eq_converter_rampPos
4291    Eq_converter_rampNeg
4292    Eq_converter_rampLimit
4294    Eq_converter_unitsOnline
4295    Eq_converter_unitsOnlineUC
4297    Eq_converter_activityStartups
4298    Eq_converter_activityShutdowns
4299    Eq_converter_limitStartups
4300    Eq_converter_minUptime
4301    Eq_converter_minDowntime
4302    Eq_converter_activityUpperLimitDetailedPartLoadMinReq
4303    Eq_converter_activityUpperLimitDetailedPartLoadMaxReq
4304    Eq_converter_activityLowerLimitDetailedPartLoadMinReq
4305    Eq_converter_activityUpperLimitPartLoad
4306    Eq_converter_activityLowerLimitPartLoad
4307    Eq_converter_noOnlineIdle
4308    Eq_converter_noOnlineIdleDetailedPartLoad
4309    Eq_converter_activityModeLimit
4310  /;
INCLUDE    C:\Local\REMix\framework\remix\framework\model\source\core\storage.gms
4312  * SPDX-FileCopyrightText: Copyright (c) 2023 German Aerospace Center (DLR)
4313  * SPDX-License-Identifier: BSD-3-Clause
4314   
4315  * // # core_storage
4316  * // The equations in this file describe the storages in the model.
4317   
4318  * // ## Variables
4319  * // {special_table_storage_variables}
4648   
4649   
4650  * === SoC mappings ===
4651  set storage_usedTechSoCState(storage_techs,vintage,soc_statesIn);
4652  storage_usedTechSoCState(storage_techs,vintage,soc_states(soc_statesIn))
4653      $(storage_SoCParam(storage_techs,vintage,soc_states,"eRate") > 0
4654        and storage_SoCParam(storage_techs,vintage,soc_states,"cRate") > 0)
4655      = yes;
4656   
4657  set storage_validSoCRange(storage_techs,vintage);
4658  storage_validSoCRange(storage_techs,vintage)
4659      = smax(soc_states$storage_usedTechSoCState(storage_techs,vintage,soc_states), storage_SoCParam(storage_techs,vintage,soc_states,"SoC")) = 1
4660        and smin(soc_states$storage_usedTechSoCState(storage_techs,vintage,soc_states), storage_SoCParam(storage_techs,vintage,soc_states,"SoC")) = 0;
4661   
4662  * === Translate SoC parameters to ordered SoC-set ===
4663  * set ordered_socs / soc1*soc20 /;
4664  * alias(soc_states, soc_states_c);
4665  * parameter storage_SoCParam_ordered(storage_techs,vintage,ordered_socs,pc_storage_SoCParam);
4666  * storage_SoCParam_ordered(storage_techs,vintage,ordered_socs,pc_storage_SoCParam)
4667  *     $storage_validSoCRange(storage_techs,vintage)
4668  *     = sum(soc_states$(ord(ordered_socs) = sum(soc_states_c$(storage_SoCParam(storage_techs,vintage,soc_states_c,"SoC") <= storage_SoCParam(storage_techs,vintage,soc_states,"SoC")
4669  *                                                            and storage_usedTechSoCState(storage_techs,vintage,soc_states_c)), 1)
4670  *                       and storage_usedTechSoCState(storage_techs,vintage,soc_states)),
4671  *           storage_SoCParam(storage_techs,vintage,soc_states,pc_storage_SoCParam));
4672  *
4673  * set storage_usedTechSoCStateOrdered(storage_techs,vintage,ordered_socs);
4674  * storage_usedTechSoCStateOrdered(storage_techs,vintage,ordered_socs)
4675  *     $(storage_SoCParam_ordered(storage_techs,vintage,ordered_socs,"eRate") > 0
4676  *       and storage_SoCParam_ordered(storage_techs,vintage,ordered_socs,"cRate") > 0)
4677  *     = yes;
4678   
4679  parameter storage_bigM(storage_techs,vintage);
4680  storage_bigM(storage_techs,vintage) = smax((nodesModel,years), storage_reservoirParam(nodesModel,years,storage_techs,"unitsUpperLimit"));
4681  storage_bigM(storage_techs,vintage)$(storage_bigM(storage_techs,vintage) = INF) = 10000;
4682  storage_bigM(storage_techs,vintage)$(storage_bigM(storage_techs,vintage) = 0) = 10000;
4683   
4684  * === calculate the number of years represented by single year to calc ===
4685  alias(yearsToCalc, yearsToCalc_a)
4686  parameter representedYears(years);
4687  representedYears(years) = 0.5 *(smin(yearsToCalc$(yearsToCalc.val > years.val or yearsToCalc.val = smax(yearsToCalc_a, yearsToCalc_a.val)), yearsToCalc.val)
4688                                  - smax(yearsToCalc$(yearsToCalc.val < years.val or yearsToCalc.val = smin(yearsToCalc_a, yearsToCalc_a.val)), yearsToCalc.val));
4689   
4690  * ==== calculation of mappings ====
4691   
4692  * Technologies with a lifeTime > 0 are available
4693  set storage_availTech(nodesModel,years,storage_techs,vintage);
4694  storage_availTech(nodesModel,years,storage_techs,vintage)
4695      $(vintage.val = smax(vintage_a$(vintage_a.val <= years.val
4696          and storage_techParam(storage_techs,vintage_a,"lifeTime") > 0), vintage_a.val)) = yes;
4697   
4698  * Technologies to optimize become unavailable if they have an unitsUpperLimit of 0
4699  storage_availTech(nodesModel,years,storage_techs,vintage)
4700      $(yearsToCalc(years) and storage_reservoirParam(nodesModel,years,storage_techs,"unitsUpperLimit") = 0 ) = no;
4701   
4702  * Technologies already built become unavailable if they have an unitsBuild of 0
4703  storage_availTech(nodesModel,years,storage_techs,vintage)
4704      $( ( not yearsToCalc(years)) and storage_reservoirParam(nodesModel,years,storage_techs,"unitsBuild") = 0 ) = no;
4705   
4706  * Used technologies are available technologies over their technical lifeTime
4707  set storage_usedTech(nodesModel,years,storage_techs,vintage);
4708  storage_usedTech(nodesModel,years,storage_techs,vintage)
4709      $(vintage.val <= years.val
4710          and years.val < smax(years_a$storage_availTech(nodesModel,years_a,storage_techs,vintage),
4711                                              years_a.val + storage_techParam(storage_techs,vintage,"lifeTime"))
4712          ) = yes;
4713   
4714  * Technologies have to be decomissioned in the interval of first avail + lifetime to last avail + lifetime
4715  set storage_decomTech(nodesModel,years,storage_techs,vintage);
4716  storage_decomTech(nodesModel,years,storage_techs,vintage)
4717    $(sum(years_a$storage_usedTech(nodesModel,years_a,storage_techs,vintage), 1)
4718      and sum(yearsToCalc
4719        $(sameas(years, yearsToCalc)
4720          and yearsToCalc.val >= smin(years_a$storage_availTech(nodesModel,years_a,storage_techs,vintage), years_a.val) + storage_techParam(storage_techs,vintage,"lifeTime")
4721          and yearsToCalc.val <= smax(years_a$storage_availTech(nodesModel,years_a,storage_techs,vintage), years_a.val) + storage_techParam(storage_techs,vintage,"lifeTime")), 1))
4722    = yes;
4723   
4724  * Extend the decom frame to the year after the last year of usedTech
4725  storage_decomTech(nodesModel,yearsToCalc,storage_techs,vintage)
4726    $(storage_usedTech(nodesModel,yearsToCalc-1,storage_techs,vintage)
4727      and storage_decomTech(nodesModel,yearsToCalc-1,storage_techs,vintage))
4728    = yes;
4729   
4730  * Mapping for used commodities
4731  set storage_usedCom(storage_techs,vintage,commodity);
4732  option storage_usedCom < storage_sizeParam;
4733   
4734  set storage_usedTechCom(nodesModel,years,storage_techs,vintage,commodity);
4735  storage_usedTechCom(nodesModel,years,storage_techs,vintage,commodity)
4736      $(storage_usedTech(nodesModel,years,storage_techs,vintage)
4737          and storage_usedCom(storage_techs,vintage,commodity))
4738      = yes;
4739   
4740   
4741  * // ## Load units from gdx file
4743   
4744  * ==== aggregation of profiles ====
4745  * derive upper and lower profiles then aggregate
4746  set storage_level_hasProfileIn(nodesData,years,storage_techs,pc_storage_levelProfile);
4747  option storage_level_hasProfileIn < storage_levelProfileIn;
4748   
4749  set storage_level_hasProfile(nodesModel,years,storage_techs,pc_storage_levelProfile);
4750  storage_level_hasProfile(nodesModelToCalc,yearsToCalc,storage_techs,pc_storage_levelProfile)
4751      = sum(nodesData$aggregateNodesModel(nodesData,nodesModelToCalc),
4752              storage_level_hasProfileIn(nodesData,yearsToCalc,storage_techs,pc_storage_levelProfile));
4753   
4754  * weighted average for a real sum of units upper limits, plain average if one region has an upper limit of inf
4755  parameter storage_levelProfile(timeModel,nodesModel,years,storage_techs,vintage,pc_storage_levelProfile);
4756  storage_levelProfile(timeModelToCalc,storage_usedTech(nodesModelToCalc,yearsToCalc,storage_techs,vintage),"upper")
4757      = storage_techParam(storage_techs,vintage,"levelUpperLimit");
4758  storage_levelProfile(timeModelToCalc,storage_usedTech(nodesModelToCalc,yearsToCalc,storage_techs,vintage),"lower")
4759      = storage_techParam(storage_techs,vintage,"levelLowerLimit");
4760   
4761  set storage_finiteUnitLimit(nodesModelToCalc,yearsToCalc,storage_techs);
4762  storage_finiteUnitLimit(nodesModelToCalc,yearsToCalc,storage_techs) = sum(nodesData$aggregateNodesModel(nodesData,nodesModelToCalc), storage_reservoirParamIn(nodesData,yearsToCalc,storage_techs,"unitsUpperLimit")) > 0
4763                                                   and sum(nodesData$aggregateNodesModel(nodesData,nodesModelToCalc), storage_reservoirParamIn(nodesData,yearsToCalc,storage_techs,"unitsUpperLimit")) < inf;
4764   
4765  storage_levelProfile(timeModelToCalc,storage_usedTech(nodesModelToCalc,yearsToCalc,storage_techs,vintage),pc_storage_levelProfile)
4766      $( storage_level_hasProfile(nodesModelToCalc,yearsToCalc,storage_techs,pc_storage_levelProfile)
4767          and storage_finiteUnitLimit(nodesModelToCalc,yearsToCalc,storage_techs))
4768      = sum(nodesData$aggregateNodesModel(nodesData,nodesModelToCalc),
4769              sum(timeData$timeMapping(timeData,timeModelToCalc),
4770                    storage_levelProfileIn(timeData,nodesData,yearsToCalc,storage_techs,pc_storage_levelProfile))
4771                / timeLength(timeModelToCalc)
4772              * storage_reservoirParamIn(nodesData,yearsToCalc,storage_techs,"unitsUpperLimit"))
4773      / sum(nodesData$aggregateNodesModel(nodesData,nodesModelToCalc),
4774              storage_reservoirParamIn(nodesData,yearsToCalc,storage_techs,"unitsUpperLimit"));
4775   
4776  storage_levelProfile(timeModelToCalc,storage_usedTech(nodesModelToCalc,yearsToCalc,storage_techs,vintage),pc_storage_levelProfile)
4777      $( storage_level_hasProfile(nodesModelToCalc,yearsToCalc,storage_techs,pc_storage_levelProfile)
4778          and sum(nodesData$aggregateNodesModel(nodesData,nodesModelToCalc),
4779                      storage_reservoirParamIn(nodesData,yearsToCalc,storage_techs,"unitsUpperLimit")) = inf )
4780      = sum(nodesData$(aggregateNodesModel(nodesData,nodesModelToCalc)
4781                      and storage_reservoirParamIn(nodesData,yearsToCalc,storage_techs,"unitsUpperLimit") = inf ),
4782              sum(timeData$timeMapping(timeData,timeModelToCalc),
4783                    storage_levelProfileIn(timeData,nodesData,yearsToCalc,storage_techs,pc_storage_levelProfile))
4784                / timeLength(timeModelToCalc))
4785      / sum(nodesData$(aggregateNodesModel(nodesData,nodesModelToCalc)
4786                      and storage_reservoirParamIn(nodesData,yearsToCalc,storage_techs,"unitsUpperLimit") = inf ), 1);
4787   
4788  * for fixed profiles overwrite upper and lower profile
4789  storage_levelProfile(timeModelToCalc,nodesModelToCalc,yearsToCalc,storage_techs,vintage,"lower")
4790      $storage_level_hasProfile(nodesModelToCalc,yearsToCalc,storage_techs,"fixed")
4791      = storage_levelProfile(timeModelToCalc,nodesModelToCalc,yearsToCalc,storage_techs,vintage,"fixed");
4792   
4793  storage_levelProfile(timeModelToCalc,nodesModelToCalc,yearsToCalc,storage_techs,vintage,"upper")
4794      $storage_level_hasProfile(nodesModelToCalc,yearsToCalc,storage_techs,"fixed")
4795      = storage_levelProfile(timeModelToCalc,nodesModelToCalc,yearsToCalc,storage_techs,vintage,"fixed");
4796   
4797   
4798  * ==== parameter modifications ====
4799  storage_reservoirParam(nodesModel,years,storage_techs,"unitsLowerLimit")
4800          $sum(vintage, storage_techParam(storage_techs,vintage,"mipUnits"))
4801      = floor(storage_reservoirParam(nodesModel,years,storage_techs,"unitsLowerLimit"));
4802  storage_reservoirParam(nodesModel,years,storage_techs,"unitsUpperLimit")
4803          $sum(vintage, storage_techParam(storage_techs,vintage,"mipUnits"))
4804      = ceil(storage_reservoirParam(nodesModel,years,storage_techs,"unitsUpperLimit"));
4805   
4806   
4807  * ==== definition of variables ====
4808   
4809  * Initialise variables for unitsBuild
4810  storage_unitsBuild.l(nodesModel,years,storage_techs,vintage)
4811      $storage_availTech(nodesModel,years,storage_techs,vintage)
4812      = storage_reservoirParam(nodesModel,years,storage_techs,"unitsBuild");
4813  storage_unitsBuild.lo(nodesModel,yearsToCalc,storage_techs,vintage)
4814      $storage_availTech(nodesModel,yearsToCalc,storage_techs,vintage)
4815      = storage_unitsBuild.l(nodesModel,yearsToCalc,storage_techs,vintage);
4816  storage_unitsBuild.fx(nodesModel,years,storage_techs,vintage)
4817      $storage_reservoirParam(nodesModel,years,storage_techs,"noExpansion")
4818      = storage_unitsBuild.l(nodesModel,years,storage_techs,vintage);
4819   
4820  * Initialise variables for unitsDecom
4821  storage_unitsDecom.l(nodesModel,years,storage_techs,vintage)
4822      $(storage_decomTech(nodesModel,years,storage_techs,vintage)
4823        and years.val < sum(yearsToCalc$(ord(yearsToCalc) = 1), yearsToCalc.val))
4824      = sum((years_a,years_aa)$(sameas(years-1, years_aa)
4825                        and years_a.val > years_aa.val - storage_techParam(storage_techs,vintage,'lifeTime')
4826                        and years_a.val <= years.val - storage_techParam(storage_techs,vintage,'lifeTime')
4827                        and storage_availTech(nodesModel,years_a,storage_techs,vintage)),
4828          storage_unitsBuild.l(nodesModel,years_a,storage_techs,vintage));
4829   
4830  storage_unitsDecom.l(nodesModel,yearsToCalc,storage_techs,vintage)
4831    $storage_decomTech(nodesModel,yearsToCalc,storage_techs,vintage)
4832    = sum(years$
4833          (years.val < sum(yearsToCalc_a$(ord(yearsToCalc_a) = 1), yearsToCalc_a.val)
4834            and storage_availTech(nodesModel,years,storage_techs,vintage)
4835            and years.val > sum(years_a$sameas(years_a, yearsToCalc-1), years_a.val) - storage_techParam(storage_techs,vintage,'lifeTime')
4836            and years.val <= yearsToCalc.val - storage_techParam(storage_techs,vintage,'lifeTime')),
4837        storage_unitsBuild.l(nodesModel,years,storage_techs,vintage))
4838      + sum(yearsToCalc_a$
4839          (yearsToCalc_a.val < sum(yearsToCalc_aa$(ord(yearsToCalc_aa) > 1), yearsToCalc_a.val)
4840            and storage_availTech(nodesModel,yearsToCalc_a,storage_techs,vintage)
4841            and yearsToCalc_a.val > sum(years_a$sameas(years_a, yearsToCalc-1), years_a.val) - storage_techParam(storage_techs,vintage,'lifeTime')
4842            and yearsToCalc_a.val <= yearsToCalc.val - storage_techParam(storage_techs,vintage,'lifeTime')),
4843        storage_unitsBuild.l(nodesModel,yearsToCalc_a,storage_techs,vintage));
4844        ;
4845   
4846  storage_unitsDecom.lo(nodesModel,yearsToCalc,storage_techs,vintage)
4847      $(storage_usedTech(nodesModel,yearsToCalc,storage_techs,vintage)
4848        and not storage_techParam(storage_techs,vintage,"freeDecom"))
4849      = storage_unitsDecom.l(nodesModel,yearsToCalc,storage_techs,vintage)
4850   
4851  * Calculate planned unit expansion
4852  parameter storage_unitsPlanned(nodesModel,years,storage_techs,vintage);
4853  storage_unitsPlanned(nodesModel,years,storage_techs,vintage) = 0;
4854  loop(years,
4855    storage_unitsPlanned(nodesModel,years,storage_techs,vintage)
4856      =
4857      storage_unitsPlanned(nodesModel,years-1,storage_techs,vintage)
4858          $storage_usedTech(nodesModel,years-1,storage_techs,vintage)
4859      + storage_unitsBuild.l(nodesModel,years,storage_techs,vintage)
4860          $storage_availTech(nodesModel,years,storage_techs,vintage)
4861      - storage_unitsDecom.l(nodesModel,years,storage_techs,vintage)
4862          $storage_usedTech(nodesModel,years,storage_techs,vintage);
4863  );
4864   
4865  * Set initial state for planned units
4866  storage_unitsTotal.l(nodesModel,years,storage_techs,vintage)
4867    = storage_unitsPlanned(nodesModel,years,storage_techs,vintage)
4868   
4869  * Calculate if planned unit expansion is bounded by upper and lower limits
4870  set storage_unitBoundsFixed(nodesModel,years,storage_techs);
4871  storage_unitBoundsFixed(nodesModel,years,storage_techs)
4872    $(sum(vintage$storage_usedTech(nodesModel,years,storage_techs,vintage),
4873          storage_unitsPlanned(nodesModel,years,storage_techs,vintage))
4874      = storage_reservoirParam(nodesModel,years,storage_techs,"unitsUpperLimit")
4875    and sum(vintage$storage_usedTech(nodesModel,years,storage_techs,vintage),
4876          storage_unitsPlanned(nodesModel,years,storage_techs,vintage))
4877      = storage_reservoirParam(nodesModel,years,storage_techs,"unitsLowerLimit"))
4878    = yes;
4879   
4880  * Fix unitsBuild, unitsDecom, unitsTotal if levels are predetermined by upper and lower limits
4881  storage_unitsBuild.fx(nodesModel,years,storage_techs,vintage)
4882    $(storage_availTech(nodesModel,years,storage_techs,vintage)
4883      and storage_unitBoundsFixed(nodesModel,years,storage_techs))
4884    = storage_unitsBuild.l(nodesModel,years,storage_techs,vintage);
4885  storage_unitsDecom.fx(nodesModel,years,storage_techs,vintage)
4886    $(storage_usedTech(nodesModel,years,storage_techs,vintage)
4887      and storage_unitBoundsFixed(nodesModel,years,storage_techs))
4888    = storage_unitsDecom.l(nodesModel,years,storage_techs,vintage);
4889  storage_unitsTotal.fx(nodesModel,years,storage_techs,vintage)
4890    $(storage_usedTech(nodesModel,years,storage_techs,vintage)
4891      and storage_unitBoundsFixed(nodesModel,years,storage_techs))
4892    = storage_unitsTotal.l(nodesModel,years,storage_techs,vintage);
4893   
4894  storage_unitsTotal_MIP.up(nodesModel,years,storage_techs,vintage)
4895      $(storage_usedTech(nodesModel,years,storage_techs,vintage)
4896        and storage_techParam(storage_techs,vintage,"mipUnits") = 1)
4897      = storage_reservoirParam(nodesModel,years,storage_techs,"unitsUpperLimit");
4898   
4899  * Add parameter for fixing capacities during myopic runs
4900  parameter storage_unitsDelta(nodesModel,years,storage_techs);
4901   
4902   
4903  * ==== declaration of equations ====
4904   
4905  equations
4906    Eq_storage_unitsBalance(nodesModel,years,storage_techs,vintage
4907      ) "Ensures the units balance over the planning period."
4908    Eq_storage_unitsFixedDecom(nodesModel,years,storage_techs,vintage
4909      ) "Restricts the fixed decommissioning of units over the planning period."
4910    Eq_storage_unitsFreeDecom(nodesModel,years,storage_techs,vintage
4911      ) "Restricts the free decommissioning of units over the planning period."
4912    Eq_storage_unitsUpperLimit(nodesModel,years,storage_techs
4913      ) "Upper bound for the total number of units."
4914    Eq_storage_unitsLowerLimit(nodesModel,years,storage_techs
4915      ) "Lower bound for the total number of units."
4916    Eq_storage_unitsTotalMIP(nodesModel,years,storage_techs,vintage
4917      ) "Fixes the total number of units to the corresponding integer variable."
4918   
4919    Eq_storage_levelUpperLimit(timeModel,nodesModel,years,storage_techs,vintage,commodity
4920      ) "Upper bound for the total number of units."
4921    Eq_storage_levelUpperLimit_degradation(timeModel,nodesModel,years,storage_techs,vintage,commodity
4922      ) "Upper bound for the total number of units if the storage technology accounts for degradation."
4923    Eq_storage_levelLowerLimit(timeModel,nodesModel,years,storage_techs,vintage,commodity
4924      ) "Lower bound for the total number of units."
4925    Eq_storage_losses(timeModel,nodesModel,years,storage_techs,vintage,commodity
4926      ) "Stored commodities lost due to self discharge."
4927    Eq_storage_unitsBalanceStates(nodesModel,years,storage_techs,vintage
4928      ) "Currently available units must have been built at some point in time and have some state of degradation."
4929    Eq_storage_unitsUpperLimitPerState(nodesModel,years,yearsCom,storage_techs,vintage
4930      ) "There cannot be more units from a certain year than the amount built in that year."
4931    Eq_storage_unitsStatesNoRecovery(nodesModel,years,yearsCom,storage_techs,vintage,degradation_states
4932      ) "There is no recovery."
4933    Eq_storage_cRateLimit(timeModel,nodesModel,years,storage_techs,vintage,commodity
4934      ) "Limit charging rate based on unit capacity."
4935    Eq_storage_eRateLimit(timeModel,nodesModel,years,storage_techs,vintage,commodity
4936      ) "Limit discharging rate based on unit capacity."
4937    Eq_storage_charge(timeModel,nodesModel,years,storage_techs,vintage,commodity
4938      ) "Positive change in state of charge is influx."
4939    Eq_storage_discharge(timeModel,nodesModel,years,storage_techs,vintage,commodity
4940      ) "Negative change in state of charge is outflux."
4941   
4942    Eq_storage_levelStateSum(timeModel,nodesModel,years,storage_techs,vintage,commodity
4943      ) "Sum of degradation class storage levels is the global level."
4944    Eq_storage_levelUpperLimitPerAge(timeModel,nodesModel,years,yearsCom,storage_techs,vintage,commodity
4945      ) "Upper bound for units of a certain state."
4946    Eq_storage_chargingPerAge(timeModel,nodesModel,years,yearsCom,storage_techs,vintage,commodity
4947      ) "Positive change in state of charge is influx for each degradation class."
4948    Eq_storage_chargeBasedDegradationDistribution(nodesModel,years,yearsCom,storage_techs,vintage,commodity
4949      ) "Determine degradation states of storage units."
4950    Eq_storage_unitsDecomStateSum(nodesModel,years,storage_techs,vintage
4951      ) "All decomminsioned units must have a degradation state."
4952    Eq_storage_unitsDegradation(nodesModel,years,yearsCom,storage_techs,vintage,degradation_states
4953      ) "Only allow one range of degradation states per year and age group."
4954    Eq_storage_unitsDegradation_onlyOneRange(nodesModel,years,yearsCom,storage_techs,vintage
4955      ) "Limit usable degradation states to one range, i.e., two neighboring states."
4956   
4957    Eq_storage_unitsSoC_sum(timeModel,nodesModel,years,storage_techs,vintage
4958      ) "Every unit has a state of charge."
4959    Eq_storage_levelSoC(timeModel,nodesModel,years,storage_techs,vintage,commodity
4960      ) "Every unit has a state of charge."
4961    Eq_storage_unitsSoC(timeModel,nodesModel,years,storage_techs,vintage,soc_statesIn
4962      ) "Number of units in particular SoC."
4963    Eq_storage_unitsSoC_onlyOneRange(timeModel,nodesModel,years,storage_techs,vintage
4964      ) "Limit usable SoC states to one range, i.e., two neighboring states."
4965   
4966    Eq_storage_cRateLimit_SoC(timeModel,nodesModel,years,storage_techs,vintage,commodity
4967      ) "Limit charging rate based on unit capacity."
4968    Eq_storage_eRateLimit_SoC(timeModel,nodesModel,years,storage_techs,vintage,commodity
4969      ) "Limit discharging rate based on unit capacity."
4970    ;
4971   
4972  * ==== equation definition ====
4973  * // ## Equations
4974  * // ### Storage Units Balance
4975  * // Ensures that the total units are consistent with the built and decommissioned units.
4976  * // {Eq_storage_unitsBalance}
4977  Eq_storage_unitsBalance(nodesModelSel,yearsSel,storage_techs,vintage)
4978      $((storage_usedTech(nodesModelSel,yearsSel,storage_techs,vintage)
4979            or sum(years$sameas(years,yearsSel), storage_usedTech(nodesModelSel,years-1,storage_techs,vintage)))
4980          and not storage_unitBoundsFixed(nodesModelSel,yearsSel,storage_techs))
4981      ..
4982      storage_unitsTotal(nodesModelSel,yearsSel,storage_techs,vintage)
4983      =e=
4984          sum(yearsToCalc$(ord(yearsToCalc) = 1 and sameas(yearsToCalc, yearsSel)),
4985        sum(years$sameas(years, yearsToCalc),
4986          storage_unitsTotal(nodesModelSel,years-1,storage_techs,vintage)
4987            $storage_usedTech(nodesModelSel,years-1,storage_techs,vintage)))
4988      + sum((yearsToCalc)$(ord(yearsToCalc) > 1 and sameas(yearsToCalc, yearsSel)),
4989        storage_unitsTotal(nodesModelSel,yearsToCalc-1,storage_techs,vintage)
4990          $storage_usedTech(nodesModelSel,yearsToCalc-1,storage_techs,vintage))
4991      + storage_unitsBuild(nodesModelSel,yearsSel,storage_techs,vintage)
4992          $storage_availTech(nodesModelSel,yearsSel,storage_techs,vintage)
4993      - storage_unitsDecom(nodesModelSel,yearsSel,storage_techs,vintage)
4994          $storage_usedTech(nodesModelSel,yearsSel,storage_techs,vintage);
4995   
4996  * // ### Storage Units Fixed Decommission
4997  * // Restricts the fixed decommissioning of storage units over the planning period.
4998  * // {Eq_storage_unitsFixedDecom}
4999  Eq_storage_unitsFixedDecom(nodesModelSel,yearsSel,storage_techs,vintage)
5000      $(storage_decomTech(nodesModelSel,yearsSel,storage_techs,vintage)
5001          and not storage_techParam(storage_techs,vintage,"freeDecom") = 1
5002          and not storage_unitBoundsFixed(nodesModelSel,yearsSel,storage_techs))
5003      ..
5004      storage_unitsDecom(nodesModelSel,yearsSel,storage_techs,vintage)
5005      =e=
5006      sum(years$
5007          (storage_availTech(nodesModelSel,years,storage_techs,vintage)
5008            and years.val > sum(yearsToCalc$sameas(yearsToCalc+1, yearsSel), yearsToCalc.val) - storage_techParam(storage_techs,vintage,'lifeTime')
5009            and years.val <= yearsSel.val - storage_techParam(storage_techs,vintage,'lifeTime')),
5010        storage_unitsBuild(nodesModelSel,years,storage_techs,vintage));
5011   
5012  * // ### Storage Units Free Decomission
5013  * // Restricts the free decommissioning of storage units over the planning period.
5014  * // {Eq_storage_unitsFreeDecom}
5015  Eq_storage_unitsFreeDecom(nodesModelSel,yearsSel,storage_techs,vintage)
5016      $((storage_decomTech(nodesModelSel,yearsSel,storage_techs,vintage)
5017          or storage_usedTech(nodesModelSel,yearsSel,storage_techs,vintage))
5018          and storage_techParam(storage_techs,vintage,"freeDecom") = 1)
5019      ..
5020      sum(years$
5021            ((storage_decomTech(nodesModelSel,years,storage_techs,vintage)
5022              or storage_usedTech(nodesModelSel,years,storage_techs,vintage))
5023              and years.val < sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)),
5024          storage_unitsDecom(nodesModelSel,years,storage_techs,vintage))
5025      + sum(yearsToCalc$
5026            ((storage_decomTech(nodesModelSel,yearsToCalc,storage_techs,vintage)
5027              or storage_usedTech(nodesModelSel,yearsToCalc,storage_techs,vintage))
5028              and yearsToCalc.val >= sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
5029              and yearsToCalc.val <= yearsSel.val),
5030          storage_unitsDecom(nodesModelSel,yearsToCalc,storage_techs,vintage))
5031      =g=
5032      sum(years$
5033            (storage_availTech(nodesModelSel,years,storage_techs,vintage)
5034              and years.val < sum(yearsToCalc$(ord(yearsToCalc)=1), yearsToCalc.val) - storage_techParam(storage_techs,vintage,'lifeTime')),
5035          storage_unitsBuild(nodesModelSel,years,storage_techs,vintage))
5036      + sum(yearsToCalc$
5037            (storage_availTech(nodesModelSel,yearsToCalc,storage_techs,vintage)
5038              and yearsToCalc.val >= sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
5039              and yearsToCalc.val <= yearsSel.val - storage_techParam(storage_techs,vintage,'lifeTime')),
5040          storage_unitsBuild(nodesModelSel,yearsToCalc,storage_techs,vintage));
5041   
5042  * // ### Storage Units Lower Limit
5043  * // Lower bound for the total number of storage units.
5044  * // {Eq_storage_unitsLowerLimit}
5045  Eq_storage_unitsLowerLimit(nodesModelSel,yearsSel,storage_techs)
5046      $(storage_reservoirParam(nodesModelSel,yearsSel,storage_techs,'unitsLowerLimit') > 0 )
5047      ..
5048      sum(vintage$storage_usedTech(nodesModelSel,yearsSel,storage_techs,vintage),
5049          storage_unitsTotal(nodesModelSel,yearsSel,storage_techs,vintage))
5050      =g=
5051      storage_reservoirParam(nodesModelSel,yearsSel,storage_techs,"unitsLowerLimit");
5052   
5053  * // ### Storage Units Upper Limit
5054  * // Upper bound for the total number of storage units.
5055  * // {Eq_storage_unitsUpperLimit}
5056  Eq_storage_unitsUpperLimit(nodesModelSel,yearsSel,storage_techs)
5057      $(storage_reservoirParam(nodesModelSel,yearsSel,storage_techs,'unitsUpperLimit') >= 0
5058          and storage_reservoirParam(nodesModelSel,yearsSel,storage_techs,'unitsUpperLimit') < +inf )
5059      ..
5060      sum(vintage$storage_usedTech(nodesModelSel,yearsSel,storage_techs,vintage),
5061          storage_unitsTotal(nodesModelSel,yearsSel,storage_techs,vintage))
5062      =l=
5063      storage_reservoirParam(nodesModelSel,yearsSel,storage_techs,"unitsUpperLimit");
5064   
5065  * // ### Storage Units Total MIP
5066  * // Fixes the total number of storage units to the corresponding integer variable.
5067  * // {Eq_storage_unitsTotalMIP}
5068  Eq_storage_unitsTotalMIP(nodesModelSel,yearsSel,storage_techs,vintage)
5069      $( storage_usedTech(nodesModelSel,yearsSel,storage_techs,vintage)
5070          and storage_techParam(storage_techs,vintage,"mipUnits") = 1 )
5071      ..
5072      storage_unitsTotal(nodesModelSel,yearsSel,storage_techs,vintage)
5073      =e=
5074      storage_unitsTotal_MIP(nodesModelSel,yearsSel,storage_techs,vintage);
5075   
5076  * // ### Storage Level Lower Limit
5077  * // Lower limit on the storage level.
5078  * // {Eq_storage_levelLowerLimit}
5079  Eq_storage_levelLowerLimit(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
5080      $(storage_usedTechCom(nodesModelSel,yearsSel,storage_techs,vintage,commodity)
5081          and storage_levelProfile(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,"lower") > 0)
5082      ..
5083      storage_level(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
5084      =g=
5085      storage_levelProfile(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,"lower")
5086      * storage_sizeParam(storage_techs,vintage,commodity,"size")
5087      * storage_unitsTotal(nodesModelSel,yearsSel,storage_techs,vintage);
5088   
5089  * // ### Storage Level Upper Limit
5090  * // Upper limit on the storage level.
5091  * // {Eq_storage_levelUpperLimit}
5092  Eq_storage_levelUpperLimit(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
5093      $(storage_usedTechCom(nodesModelSel,yearsSel,storage_techs,vintage,commodity)
5094          and not storage_hasDegradation(storage_techs,vintage)
5095          and storage_levelProfile(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,"upper") >= 0)
5096      ..
5097      storage_level(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
5098      =l=
5099      storage_levelProfile(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,"upper")
5100      * storage_sizeParam(storage_techs,vintage,commodity,"size")
5101      * storage_unitsTotal(nodesModelSel,yearsSel,storage_techs,vintage);
5102   
5103  * // ### Storage Level Upper Limit (degradation)
5104  * // Upper limit on the storage level if the storage technology accounts for degradation.
5105  * // {Eq_storage_levelUpperLimit_degradation}
5106  Eq_storage_levelUpperLimit_degradation(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
5107      $(storage_usedTechCom(nodesModelSel,yearsSel,storage_techs,vintage,commodity)
5108          and storage_hasDegradation(storage_techs,vintage)
5109          and storage_levelProfile(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,"upper") >= 0)
5110      ..
5111      storage_level(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
5112      =l=
5113      storage_levelProfile(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,"upper")
5114      * storage_sizeParam(storage_techs,vintage,commodity,"size")
5115      * sum((degradation_states,yearsCom)$storage_usedDegradation(storage_techs,vintage,degradation_states),
5116              (storage_degradationParam(storage_techs,vintage,degradation_states,"remainingCapacity")
5117                - (yearsSel.val - yearsCom.val) * storage_techParam(storage_techs,vintage,"annualDegradation"))
5118                * storage_unitsStateTracker(nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,degradation_states));
5119   
5120  * // ### Storage Unit States Sum (degradation)
5121  * // The number of units in all degradation state must match the total unit number.
5122  * // {Eq_storage_unitsBalanceStates}
5123  Eq_storage_unitsBalanceStates(nodesModelSel,yearsSel,storage_techs,vintage)
5124      $(storage_usedTech(nodesModelSel,yearsSel,storage_techs,vintage)
5125        and storage_hasDegradation(storage_techs,vintage))
5126      ..
5127      storage_unitsTotal(nodesModelSel,yearsSel,storage_techs,vintage)
5128      =e=
5129      sum((yearsCom,degradation_states)$storage_usedDegradation(storage_techs,vintage,degradation_states),
5130            storage_unitsStateTracker(nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,degradation_states));
5131   
5132  * // ### Storage Unit States Upper Limit(degradation)
5133  * // The states of all commissioned units in one year (unitsBuilt) must either still be tracked or have been decommissioned.
5134  * // {Eq_storage_unitsUpperLimitPerState}
5135  Eq_storage_unitsUpperLimitPerState(nodesModelSel,yearsSel,yearsCom,storage_techs,vintage)
5136      $(storage_usedTech(nodesModelSel,yearsSel,storage_techs,vintage)
5137          and storage_hasDegradation(storage_techs,vintage))
5138      ..
5139      sum(degradation_states$storage_usedDegradation(storage_techs,vintage,degradation_states),
5140            storage_unitsStateTracker(nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,degradation_states)
5141            + sum(years$(years.val <= yearsSel.val),
5142                  storage_unitsStateTrackerDecom(nodesModelSel,years,yearsCom,storage_techs,vintage,degradation_states)))
5143      =e=
5144      storage_unitsBuild(nodesModelSel,yearsCom,storage_techs,vintage)$(yearsCom.val <= yearsSel.val);
5145   
5146  * // ### Storage Unit States Progression (degradation)
5147  * // Unit recovery by reassigning the storage cycles to other units is disabled. Therefore, the number of units in a particular degradation state can only increase if the number in a less degraded state is decreased by at least the same amount.
5148  * // {Eq_storage_unitsStatesNoRecovery}
5149  alias(degradation_states, dc_states);
5150  Eq_storage_unitsStatesNoRecovery(nodesModelSel,yearsSel(yearsToCalc),yearsCom,storage_techs,vintage,degradation_states)
5151      $(storage_usedTech(nodesModelSel,yearsSel,storage_techs,vintage)
5152        and yearsToCalc.val > yearsCom.val
5153        and storage_usedDegradation(storage_techs,vintage,degradation_states))
5154      ..
5155      sum(dc_states$(storage_usedDegradation(storage_techs,vintage,dc_states)
5156                and storage_degradationParam(storage_techs,vintage,dc_states,"maxFullCycles") <= storage_degradationParam(storage_techs,vintage,degradation_states,"maxFullCycles")),
5157              storage_unitsStateTracker(nodesModelSel,yearsToCalc,yearsCom,storage_techs,vintage,dc_states)
5158              + sum(years$(years.val <= yearsToCalc.val), storage_unitsStateTrackerDecom(nodesModelSel,years,yearsCom,storage_techs,vintage,dc_states)))
5159      =l=
5160      sum(dc_states$(storage_usedDegradation(storage_techs,vintage,dc_states)
5161                      and storage_degradationParam(storage_techs,vintage,dc_states,"maxFullCycles") <= storage_degradationParam(storage_techs,vintage,degradation_states,"maxFullCycles")),
5162              storage_unitsStateTracker(nodesModelSel,yearsToCalc-1,yearsCom,storage_techs,vintage,dc_states)
5163              + sum(years$(years.val < yearsToCalc.val), storage_unitsStateTrackerDecom(nodesModelSel,years,yearsCom,storage_techs,vintage,dc_states)));
5164   
5165  * // ### Storage Losses
5166  * // Accumulation of storage losses.
5167  * // {Eq_storage_losses}
5168  Eq_storage_losses(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,storage_techs,vintage,commodity)
5169      $storage_usedTechCom(nodesModelSel,yearsSel,storage_techs,vintage,commodity)
5170      ..
5171      storage_losses(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
5172      =e=
5173      - storage_level(timeModelToCalc--1,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
5174        * storage_sizeParam(storage_techs,vintage,commodity,"selfdischarge")
5175      + storage_sizeParam(storage_techs,vintage,commodity,"selfdischargeAbs")
5176      + (storage_techParam(storage_techs,vintage,"chargingLoss")
5177          /(1 - storage_techParam(storage_techs,vintage,"chargingLoss")))
5178        * storage_charge(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
5179          $(storage_techParam(storage_techs,vintage,"chargingLoss") > 0)
5180      + storage_techParam(storage_techs,vintage,"dischargingLoss")
5181        * storage_discharge(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
5182          $(storage_techParam(storage_techs,vintage,"dischargingLoss") > 0)
5183      - storage_sizeParam(storage_techs,vintage,commodity,"size")
5184        * sum(soc_states$(storage_usedTechSoCState(storage_techs,vintage,soc_states)
5185                          and storage_validSoCRange(storage_techs,vintage)),
5186              storage_unitsSoC(timeModelToCalc--1,nodesModelSel,yearsSel,storage_techs,vintage,soc_states)
5187              * storage_SoCParam(storage_techs,vintage,soc_states,"SoC")
5188              * storage_SoCParam(storage_techs,vintage,soc_states,"selfdischarge"));
5189   
5190  * // ### C-Rate Limit
5191  * // The increase in storage level per time step, i.e., the charging rate, is limited relative to the storage capacity.
5192  * // {Eq_storage_cRateLimit}
5193  Eq_storage_cRateLimit(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,storage_techs,vintage,commodity)
5194      $(storage_usedTechCom(nodesModelSel,yearsSel,storage_techs,vintage,commodity)
5195        and storage_techParam(storage_techs,vintage,"maxCRate") > 0)
5196      ..
5197      storage_level(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
5198      - storage_level(timeModelToCalc--1,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
5199      =l=
5200      storage_techParam(storage_techs,vintage,"maxCRate")
5201      * storage_sizeParam(storage_techs,vintage,commodity,"size")
5202      * storage_unitsTotal(nodesModelSel,yearsSel,storage_techs,vintage);
5203   
5204  * // ### E-Rate Limit
5205  * // The decrease in storage level per time step, i.e., the discharging rate, is limited relative to the storage capacity.
5206  * // {Eq_storage_eRateLimit}
5207  Eq_storage_eRateLimit(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,storage_techs,vintage,commodity)
5208      $(storage_usedTechCom(nodesModelSel,yearsSel,storage_techs,vintage,commodity)
5209        and storage_techParam(storage_techs,vintage,"maxERate") > 0)
5210      ..
5211      storage_level(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
5212      - storage_level(timeModelToCalc--1,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
5213      =g=
5214      - storage_techParam(storage_techs,vintage,"maxERate")
5215      * storage_sizeParam(storage_techs,vintage,commodity,"size")
5216      * storage_unitsTotal(nodesModelSel,yearsSel,storage_techs,vintage);
5217   
5218  * // ### Storage Charging
5219  * // Increases in storage levels are accounted as charging amounts.
5220  * // {Eq_storage_charge}
5221  Eq_storage_charge(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,storage_techs,vintage,commodity)
5222      $(storage_usedTechCom(nodesModelSel,yearsSel,storage_techs,vintage,commodity)
5223        and storage_techParam(storage_techs,vintage,"chargingLoss") > 0)
5224      ..
5225      storage_charge(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
5226      =g=
5227      storage_level(timeModelToCalc,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
5228      - storage_level(timeModelToCalc--1,nodesModelSel,yearsSel,storage_techs,vintage,commodity);
5229   
5230  * // ### Storage Discharging
5231  * // Decreases in storage levels are accounted as discharging amounts.
5232  * // {Eq_storage_discharge}
5233  Eq_storage_discharge(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,storage_techs,vintage,commodity)
5234      $(storage_usedTechCom(nodesModelSel,yearsSel,storage_techs,vintage,commodity)
5235        and storage_techParam(storage_techs,vintage,"dischargingLoss") > 0)
5236      ..
5237      storage_discharge(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
5238      =g=
5239      storage_level(timeModelToCalc--1,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
5240      - storage_level(timeModelToCalc,nodesModelSel,yearsSel,storage_techs,vintage,commodity);
5241   
5242  * // ### Storage Level Sum (degradation)
5243  * // The storage level is accounted individually by commissioning year in the case of degradation in order to prohibit the model to assign pre-existing storage cycles to newly built storage reservoirs and thereby avoiding degradation. All those storage levels represent the total storage level.
5244  * // {Eq_storage_levelStateSum}
5245  Eq_storage_levelStateSum(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
5246      $(storage_usedTechCom(nodesModelSel,yearsSel,storage_techs,vintage,commodity)
5247        and storage_techParam(storage_techs,vintage,"usageDegradation"))
5248      ..
5249      storage_level(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
5250      =e=
5251      sum(yearsCom, storage_levelPerAge(timeModelSel,nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,commodity));
5252   
5253  * // ### Storage Level Upper Limit per Age Group (degradation)
5254  * // Upper limit on the storage level per commissioning year if the storage technology accounts for degradation.
5255  * // {Eq_storage_levelUpperLimitPerAge}
5256  Eq_storage_levelUpperLimitPerAge(timeModelSel,nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,commodity)
5257      $(storage_usedTechCom(nodesModelSel,yearsSel,storage_techs,vintage,commodity)
5258        and storage_techParam(storage_techs,vintage,"usageDegradation"))
5259      ..
5260      storage_levelPerAge(timeModelSel,nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,commodity)
5261      =l=
5262      storage_techParam(storage_techs,vintage,"levelUpperLimit")
5263      * storage_sizeParam(storage_techs,vintage,commodity,"size")
5264      * sum(degradation_states,
5265              (storage_degradationParam(storage_techs,vintage,degradation_states,"remainingCapacity")
5266                - (yearsSel.val - yearsCom.val) * storage_techParam(storage_techs,vintage,"annualDegradation"))
5267                * storage_unitsStateTracker(nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,degradation_states));
5268   
5269  * // ### Storage Cycle Distribution to Degradation States per Commissioning Year (degradation)
5270  * // The charging amounts are converted to equivalent full cycles which then must be represented by an adequate distribution of degradation states.
5271  * // {Eq_storage_chargeBasedDegradationDistribution}
5272  alias(years, prev_years);
5273  Eq_storage_chargeBasedDegradationDistribution(nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,commodity)
5274      $(storage_usedTechCom(nodesModelSel,yearsSel,storage_techs,vintage,commodity)
5275        and storage_techParam(storage_techs,vintage,"usageDegradation"))
5276      ..
5277      sum(prev_years$(prev_years.val <= yearsSel.val), representedYears(prev_years)
5278          * sum(timeModel, storage_chargePerAge(timeModel,nodesModelSel,prev_years,yearsCom,storage_techs,vintage,commodity)))
5279      =l=
5280      storage_sizeParam(storage_techs,vintage,commodity,"size")
5281      * sum(dc_states$storage_usedDegradation(storage_techs,vintage,dc_states),
5282          storage_degradationParam(storage_techs,vintage,dc_states,"maxFullCycles")
5283          * (storage_unitsStateTracker(nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,dc_states)
5284             + sum(prev_years$(prev_years.val <= yearsSel.val), storage_unitsStateTrackerDecom(nodesModelSel,prev_years,yearsCom,storage_techs,vintage,dc_states))));
5285   
5286  * // ### Storage Charging per Commissioning Year (degradation)
5287  * // Increases in storage levels are accounted as charging amounts.
5288  * // {Eq_storage_chargingPerAge}
5289  Eq_storage_chargingPerAge(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,commodity)
5290      $(storage_usedTechCom(nodesModelSel,yearsSel,storage_techs,vintage,commodity)
5291        and storage_techParam(storage_techs,vintage,"usageDegradation"))
5292      ..
5293      storage_chargePerAge(timeModelSel,nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,commodity)
5294      =g=
5295      storage_levelPerAge(timeModelToCalc,nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,commodity)
5296      - storage_levelPerAge(timeModelToCalc--1,nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,commodity);
5297   
5298  * // ### Storage Unit Decommissioning States Sum (degradation)
5299  * // The number of decommissioned units in all degradation state must match the total decommissioning unit number.
5300  * // {Eq_storage_unitsDecomStateSum}
5301  Eq_storage_unitsDecomStateSum(nodesModelSel,yearsSel,storage_techs,vintage)
5302      $(storage_techParam(storage_techs,vintage,"usageDegradation"))
5303      ..
5304      storage_unitsDecom(nodesModelSel,yearsSel,storage_techs,vintage)
5305      =e=
5306      sum((yearsCom,degradation_states)$storage_usedDegradation(storage_techs,vintage,degradation_states),
5307          storage_unitsStateTrackerDecom(nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,degradation_states));
5308   
5309  * // ### Storage Unit Sequential Degradation (degradation)
5310  * // Only active degradation ranges, i.e., two neighboring degradation states, can be used.
5311  * // {Eq_storage_unitsDegradation}
5312  alias(degradation_states, degradation_states_a, degradation_states_b);
5313  Eq_storage_unitsDegradation(nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,degradation_states)
5314      $(storage_techParam(storage_techs,vintage,"usageDegradation")
5315        and storage_techParam(storage_techs,vintage,"sequentialDegradationStates"))
5316      ..
5317      sum(degradation_states_a$((storage_degradationParam(storage_techs,vintage,degradation_states_a,"maxFullCycles") = storage_degradationParam(storage_techs,vintage,degradation_states,"maxFullCycles")
5318                        or storage_degradationParam(storage_techs,vintage,degradation_states_a,"maxFullCycles")
5319                                         = smax(degradation_states_b$(storage_degradationParam(storage_techs,vintage,degradation_states_b,"maxFullCycles") < storage_degradationParam(storage_techs,vintage,degradation_states,"maxFullCycles")
5320                                                              and storage_usedDegradation(storage_techs,vintage,degradation_states_b)),
5321                                                              storage_degradationParam(storage_techs,vintage,degradation_states_b,"maxFullCycles")))
5322                        and storage_usedDegradation(storage_techs,vintage,degradation_states_a)),
5323          storage_unitsStateTracker_activeRange(nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,degradation_states_a))
5324      * storage_bigM(storage_techs,vintage)
5325      =g=
5326      storage_unitsStateTracker(nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,degradation_states);
5327   
5328  * // ### Storage Unit Sequential Degradation Range (degradation)
5329  * // Only one degradation range can be active.
5330  * // {Eq_storage_unitsDegradation_onlyOneRange}
5331  Eq_storage_unitsDegradation_onlyOneRange(nodesModelSel,yearsSel,yearsCom,storage_techs,vintage)
5332      $(storage_techParam(storage_techs,vintage,"usageDegradation") and storage_techParam(storage_techs,vintage,"sequentialDegradationStates"))
5333      ..
5334      sum(degradation_states$storage_usedDegradation(storage_techs,vintage,degradation_states),
5335            storage_unitsStateTracker_activeRange(nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,degradation_states))
5336      =e= 1;
5337   
5338  * // ### Storage Unit Sequential State of Charge (SoC)
5339  * // Only active state of charge ranges, i.e., two neighboring states of charge, can be used.
5340  * // {Eq_storage_unitsSoC}
5341  alias(soc_states, soc_states_a, soc_states_b);
5342  Eq_storage_unitsSoC(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,storage_techs,vintage,soc_states)
5343      $(storage_validSoCRange(storage_techs,vintage) and storage_techParam(storage_techs,vintage,"sequentialSoC"))
5344      ..
5345      sum(soc_states_a$((storage_SoCParam(storage_techs,vintage,soc_states_a,"SoC") = storage_SoCParam(storage_techs,vintage,soc_states,"SoC")
5346                        or storage_SoCParam(storage_techs,vintage,soc_states_a,"SoC")
5347                                         = smax(soc_states_b$(storage_SoCParam(storage_techs,vintage,soc_states_b,"SoC") < storage_SoCParam(storage_techs,vintage,soc_states,"SoC")
5348                                                              and storage_usedTechSoCState(storage_techs,vintage,soc_states_b)),
5349                                                              storage_SoCParam(storage_techs,vintage,soc_states_b,"SoC")))
5350                        and storage_usedTechSoCState(storage_techs,vintage,soc_states_a)),
5351          storage_unitsSoC_activeRange(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,soc_states_a))
5352      * storage_bigM(storage_techs,vintage)
5353      =g=
5354      storage_unitsSoC(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,soc_states);
5355   
5356  * // ### Storage Unit Sequential State of Charge Range (SoC)
5357  * // Only one state of charge range can be active.
5358  * // {Eq_storage_unitsSoC_onlyOneRange}
5359  Eq_storage_unitsSoC_onlyOneRange(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,storage_techs,vintage)
5360      $(storage_validSoCRange(storage_techs,vintage) and storage_techParam(storage_techs,vintage,"sequentialSoC"))
5361      ..
5362      sum(soc_states$storage_usedTechSoCState(storage_techs,vintage,soc_states),
5363            storage_unitsSoC_activeRange(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,soc_states)) =e= 1;
5364   
5365  * // ### Storage Unit State of Charge Sum (SoC)
5366  * // Each storage unit must have one state of charge.
5367  * // {Eq_storage_unitsSoC_sum}
5368  Eq_storage_unitsSoC_sum(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,storage_techs,vintage)
5369      $storage_validSoCRange(storage_techs,vintage)
5370      ..
5371      storage_unitsTotal(nodesModelSel,yearsSel,storage_techs,vintage)
5372      =e=
5373      sum(soc_states$storage_usedTechSoCState(storage_techs,vintage,soc_states),
5374            storage_unitsSoC(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,soc_states));
5375   
5376  * // ### Storage Level State of Charge Sum (SoC)
5377  * // The total storage level must be represented by units in their specific states of charge.
5378  * // {Eq_storage_levelSoC}
5379  Eq_storage_levelSoC(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,storage_techs,vintage,commodity)
5380      $(storage_validSoCRange(storage_techs,vintage) and storage_usedTechCom(nodesModelSel,yearsSel,storage_techs,vintage,commodity))
5381      ..
5382      storage_level(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
5383      =e=
5384      storage_sizeParam(storage_techs,vintage,commodity,"size")
5385      * sum(soc_states$storage_usedTechSoCState(storage_techs,vintage,soc_states),
5386              storage_unitsSoC(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,soc_states)
5387              * storage_SoCParam(storage_techs,vintage,soc_states,"SoC"));
5388   
5389  * // ### C-Rate Limit (SoC)
5390  * // The increase in storage level per time step, i.e., the charging rate, is limited relative to the storage capacity. The coefficients can vary between states of charge.
5391  * // {Eq_storage_cRateLimit_SoC}
5392  Eq_storage_cRateLimit_SoC(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,storage_techs,vintage,commodity)
5393      $(storage_usedTechCom(nodesModelSel,yearsSel,storage_techs,vintage,commodity)
5394        and storage_validSoCRange(storage_techs,vintage)
5395        and sum(soc_states, storage_SoCParam(storage_techs,vintage,soc_states,"cRate")) < inf)
5396      ..
5397      storage_level(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
5398      - storage_level(timeModelToCalc--1,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
5399      =l=
5400      storage_sizeParam(storage_techs,vintage,commodity,"size")
5401      * sum(soc_states$storage_usedTechSoCState(storage_techs,vintage,soc_states),
5402                      storage_SoCParam(storage_techs,vintage,soc_states,"cRate")
5403                      * storage_unitsSoC(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,soc_states));
5404   
5405  * // ### E-Rate Limit (SoC)
5406  * // The decrease in storage level per time step, i.e., the discharging rate, is limited relative to the storage capacity. The coefficients can vary between states of charge.
5407  * // {Eq_storage_cRateLimit_SoC}
5408  Eq_storage_eRateLimit_SoC(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,storage_techs,vintage,commodity)
5409      $(storage_usedTechCom(nodesModelSel,yearsSel,storage_techs,vintage,commodity)
5410        and storage_validSoCRange(storage_techs,vintage)
5411        and sum(soc_states, storage_SoCParam(storage_techs,vintage,soc_states,"eRate")) < inf)
5412      ..
5413      storage_level(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
5414      - storage_level(timeModelToCalc--1,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
5415      =g=
5416      - storage_sizeParam(storage_techs,vintage,commodity,"size")
5417      * sum(soc_states$storage_usedTechSoCState(storage_techs,vintage,soc_states),
5418                      storage_SoCParam(storage_techs,vintage,soc_states,"eRate")
5419                      * storage_unitsSoC(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,soc_states));
5420   
5421   
5422  * ==== model definition ====
5423   
5424  Model M_storage
5425  /
5426    Eq_storage_unitsBalance
5427    Eq_storage_unitsFixedDecom
5428    Eq_storage_unitsFreeDecom
5429    Eq_storage_unitsLowerLimit
5430    Eq_storage_unitsUpperLimit
5431    Eq_storage_levelUpperLimit_degradation
5432    Eq_storage_unitsTotalMIP
5433    Eq_storage_levelLowerLimit
5434    Eq_storage_levelUpperLimit
5436    Eq_storage_losses
5438    Eq_storage_unitsBalanceStates
5439    Eq_storage_unitsUpperLimitPerState
5440    Eq_storage_unitsStatesNoRecovery
5441    Eq_storage_cRateLimit
5442    Eq_storage_eRateLimit
5443    Eq_storage_charge
5444    Eq_storage_discharge
5445    Eq_storage_levelStateSum
5446    Eq_storage_levelUpperLimitPerAge
5447    Eq_storage_chargeBasedDegradationDistribution
5448    Eq_storage_chargingPerAge
5449    Eq_storage_unitsDecomStateSum
5450    Eq_storage_unitsDegradation
5451    Eq_storage_unitsDegradation_onlyOneRange
5452   
5453    Eq_storage_unitsSoC
5454    Eq_storage_unitsSoC_sum
5455    Eq_storage_unitsSoC_onlyOneRange
5456    Eq_storage_levelSoC
5457    Eq_storage_cRateLimit_SoC
5458    Eq_storage_eRateLimit_SoC
5459  /;
INCLUDE    C:\Local\REMix\framework\remix\framework\model\source\core\transfer.gms
5461  * SPDX-FileCopyrightText: Copyright (c) 2023 German Aerospace Center (DLR)
5462  * SPDX-License-Identifier: BSD-3-Clause
5463   
5464  * // # core_transfer
5465  * // The equations in this file describe the commodity transfer in the model.
5466   
5467  * // ## Variables
5468  * // {special_table_transfer_variables}
5471   
5476   
5753   
5754  parameter transfer_linksParam(linksModel,years,transfer_techs,pc_transfer_linksParam);
5755  transfer_linksParam(linksModelToCalc,years,transfer_techs,pc_transfer_linksParam)
5756      = sum(linksData$links_aggregate(linksModelToCalc,linksData), transfer_linksParamIn(linksData,years,transfer_techs,pc_transfer_linksParam));
5757   
5758  * // ## Load links from gdx file
5760   
5761   
5762  set transfer_hasflowProfileIn(linksData,years,transfer_techs,pc_transfer_flowProfile);
5763  option transfer_hasflowProfileIn < transfer_flowProfileIn;
5764   
5765  * === modify transfer_flowProfileIn vector to fill with default values, in case profile is not specified ===
5766  transfer_linksParamIn(linksData,years,transfer_techs,"flowAlongLimit")
5767      $(not transfer_linksParamIn(linksData,years,transfer_techs,"limitFlows"))
5768      = 1;
5769   
5770  transfer_linksParamIn(linksData,years,transfer_techs,"flowAgainstLimit")
5771      $(not transfer_linksParamIn(linksData,years,transfer_techs,"limitFlows"))
5772      = 1;
5773   
5774  transfer_flowProfileIn(timeData,linksData,years,transfer_techs,"along")
5775      $(not transfer_hasflowProfileIn(linksData,years,transfer_techs,"along"))
5776      = transfer_linksParamIn(linksData,years,transfer_techs,"flowAlongLimit");
5777   
5778  transfer_flowProfileIn(timeData,linksData,years,transfer_techs,"against")
5779      $(not transfer_hasflowProfileIn(linksData,years,transfer_techs,"against"))
5780      = transfer_linksParamIn(linksData,years,transfer_techs,"flowAgainstLimit");
5781   
5782  * aggregate time dimension
5783  parameter transfer_flowProfileIn_aggTime(timeModel,linksData,yearsToCalc,transfer_techs,pc_transfer_flowProfile);
5784  transfer_flowProfileIn_aggTime(timeModelToCalc,linksData,yearsToCalc,transfer_techs,pc_transfer_flowProfile)
5785    = sum(timeData$timeMapping(timeData,timeModelToCalc),
5786            transfer_flowProfileIn(timeData,linksData,yearsToCalc,transfer_techs,pc_transfer_flowProfile)
5787            / timeLength(timeModelToCalc));
5788  option clear = transfer_flowProfileIn;
5789   
5790   
5791  set transfer_finiteLinkLimit(linksModel,years,transfer_techs);
5792  transfer_finiteLinkLimit(linksModelToCalc,yearsToCalc,transfer_techs)
5793      = sum(linksData$links_aggregate(linksModelToCalc,linksData), transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"linksUpperLimit")) > 0
5794          and sum(linksData$links_aggregate(linksModelToCalc,linksData), transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"linksUpperLimit")) < inf;
5795   
5796  set transfer_infiniteLinkLimit(linksModel,years,transfer_techs);
5797  transfer_infiniteLinkLimit(linksModelToCalc,yearsToCalc,transfer_techs)
5798      = sum(linksData$links_aggregate(linksModelToCalc,linksData), transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"linksUpperLimit")) = inf;
5800   
5801  parameter transfer_lengthParam(linksModel,link_types,pc_transfer_lengthParam);
5802  transfer_lengthParam(linksModelToCalc,link_types,pc_transfer_lengthParam)
5803      = sum(linksData$links_aggregate(linksModelToCalc,linksData), transfer_lengthParamIn(linksData,link_types,pc_transfer_lengthParam))
5804          / sum(linksData$links_aggregate(linksModelToCalc,linksData), 1);
5805   
5806  parameter transfer_gridSegments(linksModel,transfer_techs,gridSegments,pc_transfer_gridSegments);
5807  transfer_gridSegments(linksModelToCalc,transfer_techs,gridSegments,pc_transfer_gridSegments)
5808      = smax(linksData$links_aggregate(linksModelToCalc,linksData), transfer_gridSegmentsIn(linksData,transfer_techs,gridSegments,pc_transfer_gridSegments));
5809   
5810  parameter transfer_dcopf_Xtech(linksModel,years,transfer_techs,vintage,gridSegments);
5811  transfer_dcopf_Xtech(linksModelToCalc,yearsToCalc,transfer_techs,vintage,gridSegments)
5812      $(transfer_gridSegments(linksModelToCalc,transfer_techs,gridSegments,"useDCopf")
5813          and transfer_linksParam(linksModelToCalc,yearsToCalc,transfer_techs,"circuits") > 0
5814          and sum(link_types, transfer_reactPerLength(transfer_techs,vintage,link_types,"reactPerLength")) > 0 )
5815      = (1 / sum(linksData
5816                  $links_aggregate(linksModelToCalc,linksData),
5817              1 / ( sum(link_types,
5818                          transfer_lengthParamIn(linksData,link_types,"length")
5819                          * transfer_reactPerLength(transfer_techs,vintage,link_types,"reactPerLength"))
5820                      / transfer_linksParam(linksModelToCalc,yearsToCalc,transfer_techs,"circuits"))));
5821   
5822  set transfer_hasflowProfile(linksModel,years,transfer_techs,pc_transfer_flowProfile);
5823  transfer_hasflowProfile(linksModelToCalc,yearsToCalc,transfer_techs,pc_transfer_flowProfile)
5824      = sum(linksData$links_aggregate(linksModelToCalc,linksData),
5825              transfer_hasflowProfileIn(linksData,yearsToCalc,transfer_techs,pc_transfer_flowProfile));
5826   
5827  * ==== parameter modifications ====
5828  transfer_linksParam(linksModelToCalc,yearsToCalc,transfer_techs,"linksLowerLimit")
5829      $sum(vintage, transfer_techParam(transfer_techs,vintage,"mipLinks"))
5830      = floor(transfer_linksParam(linksModelToCalc,yearsToCalc,transfer_techs,"linksLowerLimit"));
5831  transfer_linksParam(linksModelToCalc,yearsToCalc,transfer_techs,"linksUpperLimit")
5832      $sum(vintage, transfer_techParam(transfer_techs,vintage,"mipLinks"))
5833      = ceil(transfer_linksParam(linksModelToCalc,yearsToCalc,transfer_techs,"linksUpperLimit"));
5834   
5835   
5836  * ==== calculation of mappings ====
5837   
5838  * Technologies with a lifeTime > 0 are available
5839  set transfer_availTech(linksModel,years,transfer_techs,vintage);
5840  transfer_availTech(linksModel,years,transfer_techs,vintage)
5841      $(vintage.val = smax(vintage_a$(vintage_a.val <= years.val
5842          and transfer_techParam(transfer_techs,vintage_a,"lifeTime") > 0), vintage_a.val)) = yes;
5843   
5844  * Technologies to optimize become unavailable if they have an linksUpperLimit of 0
5845  transfer_availTech(linksModelToCalc,years,transfer_techs,vintage)
5846      $(yearsToCalc(years) and transfer_linksParam(linksModelToCalc,years,transfer_techs,"linksUpperLimit") = 0 ) = no;
5847   
5848  * Technologies already built become unavailable if they have an linksBuild of 0
5849  transfer_availTech(linksModelToCalc,years,transfer_techs,vintage)
5850      $( ( not yearsToCalc(years)) and transfer_linksParam(linksModelToCalc,years,transfer_techs,"linksBuild") = 0 ) = no;
5851   
5852  * Used technologies are available technologies over their technical lifeTime
5853  set transfer_usedTech(linksModel,years,transfer_techs,vintage);
5854  transfer_usedTech(linksModelToCalc,years,transfer_techs,vintage)
5855      $(vintage.val <= years.val
5856          and years.val < smax(years_a$transfer_availTech(linksModelToCalc,years_a,transfer_techs,vintage),
5857                                  years_a.val + transfer_techParam(transfer_techs,vintage,"lifeTime"))
5858          ) = yes;
5859   
5860  * Technologies have to be decomissioned in the interval of first avail + lifetime to last avail + lifetime
5861  set transfer_decomTech(linksModel,years,transfer_techs,vintage);
5862  transfer_decomTech(linksModel,years,transfer_techs,vintage)
5863    $(sum(years_a$transfer_usedTech(linksModel,years_a,transfer_techs,vintage), 1)
5864      and sum(yearsToCalc
5865        $(sameas(years, yearsToCalc)
5866          and yearsToCalc.val >= smin(years_a$transfer_availTech(linksModel,years_a,transfer_techs,vintage), years_a.val) + transfer_techParam(transfer_techs,vintage,"lifeTime")
5867          and yearsToCalc.val <= smax(years_a$transfer_availTech(linksModel,years_a,transfer_techs,vintage), years_a.val) + transfer_techParam(transfer_techs,vintage,"lifeTime")), 1))
5868    = yes;
5869   
5870  * Extend the decom frame to the year after the last year of usedTech
5871  transfer_decomTech(linksModel,yearsToCalc,transfer_techs,vintage)
5872    $(transfer_usedTech(linksModel,yearsToCalc-1,transfer_techs,vintage)
5873      and transfer_decomTech(linksModel,yearsToCalc-1,transfer_techs,vintage))
5874    = yes;
5875   
5876  parameter transfer_flowProfile(timeModel,linksModel,years,transfer_techs,vintage,pc_transfer_flowProfile);
5877   
5878  transfer_flowProfile(timeModelToCalc,linksModelToCalc,yearsToCalc,transfer_techs,vintage,"along")
5879      $transfer_finiteLinkLimit(linksModelToCalc,yearsToCalc,transfer_techs)
5880      = (sum(linksData$(links_aggregate(linksModelToCalc,linksData)
5881                       and transfer_incidenceData_flip(linksData) = 1),
5882              transfer_flowProfileIn_aggTime(timeModelToCalc,linksData,yearsToCalc,transfer_techs,"along")
5883              * transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"linksUpperLimit"))
5884          + sum(linksData$(links_aggregate(linksModelToCalc,linksData)
5885                          and transfer_incidenceData_flip(linksData) = -1),
5886              transfer_flowProfileIn_aggTime(timeModelToCalc,linksData,yearsToCalc,transfer_techs,"against")
5887              * transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"linksUpperLimit")))
5888      / sum(linksData$links_aggregate(linksModelToCalc,linksData),
5889              transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"linksUpperLimit"));
5890   
5891  transfer_flowProfile(timeModelToCalc,linksModelToCalc,yearsToCalc,transfer_techs,vintage,"against")
5892      $transfer_finiteLinkLimit(linksModelToCalc,yearsToCalc,transfer_techs)
5893      = (sum(linksData$(links_aggregate(linksModelToCalc,linksData)
5894                       and transfer_incidenceData_flip(linksData) = 1),
5895              transfer_flowProfileIn_aggTime(timeModelToCalc,linksData,yearsToCalc,transfer_techs,"against")
5896              * transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"linksUpperLimit"))
5897          + sum(linksData$(links_aggregate(linksModelToCalc,linksData)
5898                          and transfer_incidenceData_flip(linksData) = -1),
5899              transfer_flowProfileIn_aggTime(timeModelToCalc,linksData,yearsToCalc,transfer_techs,"along")
5900              * transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"linksUpperLimit")))
5901      / sum(linksData$links_aggregate(linksModelToCalc,linksData),
5902              transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"linksUpperLimit"));
5903   
5904  transfer_flowProfile(timeModelToCalc,linksModelToCalc,yearsToCalc,transfer_techs,vintage,"along")
5905      $transfer_infiniteLinkLimit(linksModelToCalc,yearsToCalc,transfer_techs)
5906      = (sum(linksData$(links_aggregate(linksModelToCalc,linksData)
5907                       and transfer_incidenceData_flip(linksData) = 1
5908                       and transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"linksUpperLimit") = inf ),
5909              transfer_flowProfileIn_aggTime(timeModelToCalc,linksData,yearsToCalc,transfer_techs,"along"))
5910          + sum(linksData$(links_aggregate(linksModelToCalc,linksData)
5911                          and transfer_incidenceData_flip(linksData) = -1
5912                          and transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"linksUpperLimit") = inf ),
5913              transfer_flowProfileIn_aggTime(timeModelToCalc,linksData,yearsToCalc,transfer_techs,"against")))
5914      / sum(linksData$(links_aggregate(linksModelToCalc,linksData)
5915                      and transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"linksUpperLimit") = inf ),
5916              1);
5917   
5918  transfer_flowProfile(timeModelToCalc,linksModelToCalc,yearsToCalc,transfer_techs,vintage,"against")
5919      $transfer_infiniteLinkLimit(linksModelToCalc,yearsToCalc,transfer_techs)
5920      = (sum(linksData$(links_aggregate(linksModelToCalc,linksData)
5921                       and transfer_incidenceData_flip(linksData) = 1
5922                       and transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"linksUpperLimit") = inf ),
5923              transfer_flowProfileIn_aggTime(timeModelToCalc,linksData,yearsToCalc,transfer_techs,"against"))
5924          + sum(linksData$(links_aggregate(linksModelToCalc,linksData)
5925                          and transfer_incidenceData_flip(linksData) = -1
5926                          and transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"linksUpperLimit") = inf ),
5927              transfer_flowProfileIn_aggTime(timeModelToCalc,linksData,yearsToCalc,transfer_techs,"along")))
5928      / sum(linksData$(links_aggregate(linksModelToCalc,linksData)
5929                      and transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"linksUpperLimit") = inf ),
5930              1);
5931  option clear = transfer_flowProfileIn_aggTime;
5932   
5933  * Orientation of links affects the flowAlongLimit/flowAgainstLimit
5934   
5935  transfer_linksParam(linksModelToCalc,years,transfer_techs,"flowAlongLimit")
5936      $transfer_finiteLinkLimit(linksModelToCalc,years,transfer_techs)
5937      = (sum(linksData$(links_aggregate(linksModelToCalc,linksData)
5938                       and transfer_incidenceData_flip(linksData) = 1),
5939              transfer_linksParamIn(linksData,years,transfer_techs,"flowAlongLimit")
5940              * transfer_linksParamIn(linksData,years,transfer_techs,"linksUpperLimit"))
5941          + sum(linksData$(links_aggregate(linksModelToCalc,linksData)
5942                          and transfer_incidenceData_flip(linksData) = -1),
5943              transfer_linksParamIn(linksData,years,transfer_techs,"flowAgainstLimit")
5944              * transfer_linksParamIn(linksData,years,transfer_techs,"linksUpperLimit")))
5945      / sum(linksData$links_aggregate(linksModelToCalc,linksData),
5946              transfer_linksParamIn(linksData,years,transfer_techs,"linksUpperLimit"));
5947   
5948  transfer_linksParam(linksModelToCalc,years,transfer_techs,"flowAgainstLimit")
5949      $transfer_finiteLinkLimit(linksModelToCalc,years,transfer_techs)
5950      = (sum(linksData$(links_aggregate(linksModelToCalc,linksData)
5951                       and transfer_incidenceData_flip(linksData) = -1),
5952              transfer_linksParamIn(linksData,years,transfer_techs,"flowAlongLimit")
5953              * transfer_linksParamIn(linksData,years,transfer_techs,"linksUpperLimit"))
5954          + sum(linksData$(links_aggregate(linksModelToCalc,linksData)
5955                          and transfer_incidenceData_flip(linksData) = 1),
5956              transfer_linksParamIn(linksData,years,transfer_techs,"flowAgainstLimit")
5957              * transfer_linksParamIn(linksData,years,transfer_techs,"linksUpperLimit")))
5958      / sum(linksData$links_aggregate(linksModelToCalc,linksData),
5959              transfer_linksParamIn(linksData,years,transfer_techs,"linksUpperLimit"));
5960   
5961  transfer_linksParam(linksModelToCalc,years,transfer_techs,"flowAlongLimit")
5962      $transfer_infiniteLinkLimit(linksModelToCalc,years,transfer_techs)
5963      = (sum(linksData$(links_aggregate(linksModelToCalc,linksData)
5964                       and transfer_incidenceData_flip(linksData) = 1
5965                       and transfer_linksParamIn(linksData,years,transfer_techs,"linksUpperLimit") = inf),
5966              transfer_linksParamIn(linksData,years,transfer_techs,"flowAlongLimit"))
5967          + sum(linksData$(links_aggregate(linksModelToCalc,linksData)
5968                          and transfer_incidenceData_flip(linksData) = -1
5969                          and transfer_linksParamIn(linksData,years,transfer_techs,"linksUpperLimit") = inf),
5970              transfer_linksParamIn(linksData,years,transfer_techs,"flowAgainstLimit")))
5971      / sum(linksData$(links_aggregate(linksModelToCalc,linksData)
5972                      and transfer_linksParamIn(linksData,years,transfer_techs,"linksUpperLimit") = inf ),
5973              1);
5974   
5975  transfer_linksParam(linksModelToCalc,years,transfer_techs,"flowAgainstLimit")
5976      $transfer_infiniteLinkLimit(linksModelToCalc,years,transfer_techs)
5977      = (sum(linksData$(links_aggregate(linksModelToCalc,linksData)
5978                       and transfer_incidenceData_flip(linksData) = -1
5979                       and transfer_linksParamIn(linksData,years,transfer_techs,"linksUpperLimit") = inf),
5980              transfer_linksParamIn(linksData,years,transfer_techs,"flowAlongLimit"))
5981          + sum(linksData$(links_aggregate(linksModelToCalc,linksData)
5982                          and transfer_incidenceData_flip(linksData) = 1
5983                          and transfer_linksParamIn(linksData,years,transfer_techs,"linksUpperLimit") = inf),
5984              transfer_linksParamIn(linksData,years,transfer_techs,"flowAgainstLimit")))
5985      / sum(linksData$(links_aggregate(linksModelToCalc,linksData)
5986                      and transfer_linksParamIn(linksData,years,transfer_techs,"linksUpperLimit") = inf ),
5987              1);
5988   
5989  * Mapping for grid segments using DC optimal power flow
5990  set gridSegments_dcopf(linksModel,transfer_techs,gridSegments);
5991  gridSegments_dcopf(linksModelToCalc,transfer_techs,gridSegments)
5992      $transfer_gridSegments(linksModelToCalc,transfer_techs,gridSegments,"useDCopf")
5994      = yes;
5996   
5997  * Ensure each grid segment uses exactly one commodity
5998  parameter checkGridSegmentCommodities(gridSegments);
5999  checkGridSegmentCommodities(gridSegments)
6000      = sum (commodity$(sum((linksModelToCalc,transfer_techs,vintage)
6001                              $( transfer_coefficient(transfer_techs,vintage,commodity,"coefficient") > 0
6002                                  and gridSegments_dcopf(linksModelToCalc,transfer_techs,gridSegments)) , 1) > 0), 1);
6003   
6004  parameter transfer_incidenceSegments(nodesModel,linksModel,years,gridSegments);
6005  transfer_incidenceSegments(nodesModelToCalc,linksModelToCalc,yearsToCalc,gridSegments)
6006      $(sum((transfer_techs,vintage)$(transfer_usedTech(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
6007                                          and gridSegments_dcopf(linksModelToCalc,transfer_techs,gridSegments)
6008                                          and transfer_incidenceModel(nodesModelToCalc,linksModelToCalc) <> 0), 1) > 0)
6009      = transfer_incidenceModel(nodesModelToCalc,linksModelToCalc);
6010   
6011   
6015   
6016  scalar transfer_enableMIP;
6017  transfer_enableMIP = sum(transfer_usedTech(linksModelToCalc,yearsToCalc,transfer_techs,vintage)$transfer_techParam(transfer_techs,vintage,"mipLinks"), 1 );
6018   
6019   
6020  * ==== definition of variables ====
6021   
6022  * Initialise variables for linksBuild
6023  transfer_linksBuild.l(linksModel,years,transfer_techs,vintage)
6024      $transfer_availTech(linksModel,years,transfer_techs,vintage)
6025      = transfer_linksParam(linksModel,years,transfer_techs,"linksBuild");
6026  transfer_linksBuild.lo(linksModel,yearsToCalc,transfer_techs,vintage)
6027      $transfer_availTech(linksModel,yearsToCalc,transfer_techs,vintage)
6028      = transfer_linksBuild.l(linksModel,yearsToCalc,transfer_techs,vintage);
6029  transfer_linksBuild.fx(linksModel,years,transfer_techs,vintage)
6030      $transfer_linksParam(linksModel,years,transfer_techs,"noExpansion")
6031      = transfer_linksBuild.l(linksModel,years,transfer_techs,vintage);
6032   
6033  * Initialise variables for linksDecom
6034  transfer_linksDecom.l(linksModel,years,transfer_techs,vintage)
6035      $(transfer_decomTech(linksModel,years,transfer_techs,vintage)
6036        and years.val < sum(yearsToCalc$(ord(yearsToCalc) = 1), yearsToCalc.val))
6037      = sum((years_a,years_aa)$(sameas(years-1, years_aa)
6038                        and years_a.val > years_aa.val - transfer_techParam(transfer_techs,vintage,'lifeTime')
6039                        and years_a.val <= years.val - transfer_techParam(transfer_techs,vintage,'lifeTime')
6040                        and transfer_availTech(linksModel,years_a,transfer_techs,vintage)),
6041          transfer_linksBuild.l(linksModel,years_a,transfer_techs,vintage));
6042   
6043  transfer_linksDecom.l(linksModel,yearsToCalc,transfer_techs,vintage)
6044    $transfer_decomTech(linksModel,yearsToCalc,transfer_techs,vintage)
6045    = sum(years$
6046          (years.val < sum(yearsToCalc_a$(ord(yearsToCalc_a) = 1), yearsToCalc_a.val)
6047            and transfer_availTech(linksModel,years,transfer_techs,vintage)
6048            and years.val > sum(years_a$sameas(years_a, yearsToCalc-1), years_a.val) - transfer_techParam(transfer_techs,vintage,'lifeTime')
6049            and years.val <= yearsToCalc.val - transfer_techParam(transfer_techs,vintage,'lifeTime')),
6050        transfer_linksBuild.l(linksModel,years,transfer_techs,vintage))
6051      + sum(yearsToCalc_a$
6052          (yearsToCalc_a.val < sum(yearsToCalc_aa$(ord(yearsToCalc_aa) > 1), yearsToCalc_a.val)
6053            and transfer_availTech(linksModel,yearsToCalc_a,transfer_techs,vintage)
6054            and yearsToCalc_a.val > sum(years_a$sameas(years_a, yearsToCalc-1), years_a.val) - transfer_techParam(transfer_techs,vintage,'lifeTime')
6055            and yearsToCalc_a.val <= yearsToCalc.val - transfer_techParam(transfer_techs,vintage,'lifeTime')),
6056        transfer_linksBuild.l(linksModel,yearsToCalc_a,transfer_techs,vintage));
6057        ;
6058   
6059  transfer_linksDecom.lo(linksModel,yearsToCalc,transfer_techs,vintage)
6060      $(transfer_usedTech(linksModel,yearsToCalc,transfer_techs,vintage)
6061          and not transfer_techParam(transfer_techs,vintage,"freeDecom"))
6062      = transfer_linksDecom.l(linksModel,yearsToCalc,transfer_techs,vintage)
6063   
6064  * Calculate planned transfer links expansion
6065  parameter transfer_linksPlanned(linksModel,years,transfer_techs,vintage);
6066  transfer_linksPlanned(linksModel,years,transfer_techs,vintage) = 0;
6067  loop(years,
6068    transfer_linksPlanned(linksModel,years,transfer_techs,vintage)
6069      =
6070      transfer_linksPlanned(linksModel,years-1,transfer_techs,vintage)
6071          $transfer_usedTech(linksModel,years-1,transfer_techs,vintage)
6072      + transfer_linksBuild.l(linksModel,years,transfer_techs,vintage)
6073          $transfer_availTech(linksModel,years,transfer_techs,vintage)
6074      - transfer_linksDecom.l(linksModel,years,transfer_techs,vintage)
6075          $transfer_usedTech(linksModel,years,transfer_techs,vintage);
6076  );
6077   
6078  * Set initial state for planned units
6079  transfer_linksTotal.l(linksModel,years,transfer_techs,vintage)
6080    = transfer_linksPlanned(linksModel,years,transfer_techs,vintage)
6081   
6082  * Calculate if planned links expansion is bound by upper and lower limits
6083  set transfer_linkBoundsFixed(linksModel,years,transfer_techs);
6084  transfer_linkBoundsFixed(linksModel,years,transfer_techs)
6085    $(sum(vintage$transfer_usedTech(linksModel,years,transfer_techs,vintage),
6086          transfer_linksPlanned(linksModel,years,transfer_techs,vintage))
6087      = transfer_linksParam(linksModel,years,transfer_techs,"linksUpperLimit")
6088    and sum(vintage$transfer_usedTech(linksModel,years,transfer_techs,vintage),
6089          transfer_linksPlanned(linksModel,years,transfer_techs,vintage))
6090      = transfer_linksParam(linksModel,years,transfer_techs,"linksLowerLimit"))
6091    = yes;
6092   
6093  * Fix linksBuild, linksDecom, linksTotal if levels are predetermined by upper and lower limits
6094  transfer_linksBuild.fx(linksModel,years,transfer_techs,vintage)
6095    $(transfer_availTech(linksModel,years,transfer_techs,vintage)
6096      and transfer_linkBoundsFixed(linksModel,years,transfer_techs))
6097    = transfer_linksBuild.l(linksModel,years,transfer_techs,vintage);
6098  transfer_linksDecom.fx(linksModel,years,transfer_techs,vintage)
6099    $(transfer_usedTech(linksModel,years,transfer_techs,vintage)
6100      and transfer_linkBoundsFixed(linksModel,years,transfer_techs))
6101    = transfer_linksDecom.l(linksModel,years,transfer_techs,vintage);
6102  transfer_linksTotal.fx(linksModel,years,transfer_techs,vintage)
6103    $(transfer_usedTech(linksModel,years,transfer_techs,vintage)
6104      and transfer_linkBoundsFixed(linksModel,years,transfer_techs))
6105    = transfer_linksTotal.l(linksModel,years,transfer_techs,vintage);
6106   
6107  transfer_linksTotal_MIP.up(linksModel,years,transfer_techs,vintage)
6108      $(transfer_usedTech(linksModel,years,transfer_techs,vintage)
6109        and transfer_techParam(transfer_techs,vintage,"miplinks") = 1)
6110      = transfer_linksParam(linksModel,years,transfer_techs,"linksUpperLimit");
6111   
6112  * Add parameter for fixing capacities during myopic runs
6113  parameter transfer_linksDelta(linksModel,years,transfer_techs);
6114   
6115   
6116  * ==== declaration of equations ====
6117   
6118  equations
6119    Eq_transfer_linksBalance(linksModel,years,transfer_techs,vintage
6120      ) "Ensures the links balance over the planning period."
6121    Eq_transfer_linksFixedDecom(linksModel,years,transfer_techs,vintage
6122      ) "Restricts the fixed decommissioning of links over the planning period."
6123    Eq_transfer_linksFreeDecom(linksModel,years,transfer_techs,vintage
6124      ) "Restricts the free decommissioning of links over the planning period."
6125    Eq_transfer_linksUpperLimit(linksModel,years,transfer_techs
6126      ) "Upper bound for the total number of links."
6127    Eq_transfer_linksLowerLimit(linksModel,years,transfer_techs
6128      ) "Lower bound for the total number of links."
6129    Eq_transfer_linksTotalMIP(linksModel,years,transfer_techs,vintage
6130      ) "Fixes the total number of links to the corresponding integer variable."
6131   
6132    Eq_transfer_flowAlongUpperLimit(timeModel,linksModel,years,transfer_techs,vintage
6133      ) "Upper bound for the flow along the transfer links."
6134    Eq_transfer_flowAgainstUpperLimit(timeModel,linksModel,years,transfer_techs,vintage
6135      ) "Upper bound for the flow against the transfer links."
6136    Eq_transfer_dcopf_angleFlows(timeModel,linksModel,years,gridSegments
6137      )
6138    Eq_transfer_dcopf_cycleFlows(timeModel,years,cycles,gridSegments
6139      )
6140    ;
6141   
6142   
6143  * ==== equation definition ====
6144  * // ## Equations
6145  * // ### Transfer Links Balance
6146  * // Ensures that the transfer between nodes is balanced.
6147  * // {Eq_transfer_linksBalance}
6148  Eq_transfer_linksBalance(linksModelToCalc,yearsSel,transfer_techs,vintage)
6149      $((transfer_usedTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
6150            or sum(years$sameas(years,yearsSel), transfer_usedTech(linksModelToCalc,years-1,transfer_techs,vintage)))
6151          and not transfer_linkBoundsFixed(linksModelToCalc,yearsSel,transfer_techs))
6152      ..
6153      transfer_linksTotal(linksModelToCalc,yearsSel,transfer_techs,vintage)
6154      =e=
6155      sum(yearsToCalc$(ord(yearsToCalc) = 1 and sameas(yearsToCalc, yearsSel)),
6156        sum(years$sameas(years, yearsToCalc),
6157          transfer_linksTotal(linksModelToCalc,years-1,transfer_techs,vintage)
6158            $transfer_usedTech(linksModelToCalc,years-1,transfer_techs,vintage)))
6159      + sum((yearsToCalc)$(ord(yearsToCalc) > 1 and sameas(yearsToCalc, yearsSel)),
6160        transfer_linksTotal(linksModelToCalc,yearsToCalc-1,transfer_techs,vintage)
6161          $transfer_usedTech(linksModelToCalc,yearsToCalc-1,transfer_techs,vintage))
6162      + transfer_linksBuild(linksModelToCalc,yearsSel,transfer_techs,vintage)
6163          $transfer_availTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
6164      - transfer_linksDecom(linksModelToCalc,yearsSel,transfer_techs,vintage)
6165          $transfer_usedTech(linksModelToCalc,yearsSel,transfer_techs,vintage);
6166   
6167  * // ### Transfer Links Fixed Decommissioning
6168  * // Balances fixed link decommissioning.
6169  * // {Eq_transfer_linksFixedDecom}
6170  Eq_transfer_linksFixedDecom(linksModelToCalc,yearsSel,transfer_techs,vintage)
6171      $(transfer_decomTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
6172          and not transfer_techParam(transfer_techs,vintage,"freeDecom") = 1
6173          and not transfer_linkBoundsFixed(linksModelToCalc,yearsSel,transfer_techs))
6174      ..
6175      transfer_linksDecom(linksModelToCalc,yearsSel,transfer_techs,vintage)
6176      =e=
6177      sum(years$
6178          (transfer_availTech(linksModelToCalc,years,transfer_techs,vintage)
6179              and years.val > sum(yearsToCalc$sameas(yearsToCalc+1, yearsSel), yearsToCalc.val) - transfer_techParam(transfer_techs,vintage,'lifeTime')
6180              and years.val <= yearsSel.val - transfer_techParam(transfer_techs,vintage,'lifeTime')),
6181          transfer_linksBuild(linksModelToCalc,years,transfer_techs,vintage));
6182   
6183  * // ### Transfer Links Free Decommissioning
6184  * // Balances free link decommissioning.
6185  * // {Eq_transfer_linksFreeDecom}
6186  Eq_transfer_linksFreeDecom(linksModelToCalc,yearsSel,transfer_techs,vintage)
6187      $((transfer_decomTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
6188          or transfer_usedTech(linksModelToCalc,yearsSel,transfer_techs,vintage))
6189          and transfer_techParam(transfer_techs,vintage,"freeDecom") = 1)
6190      ..
6191      sum(years$
6192            ((transfer_decomTech(linksModelToCalc,years,transfer_techs,vintage)
6193              or transfer_usedTech(linksModelToCalc,years,transfer_techs,vintage))
6194              and years.val < sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)),
6195          transfer_linksDecom(linksModelToCalc,years,transfer_techs,vintage))
6196      + sum(yearsToCalc$
6197            ((transfer_decomTech(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
6198              or transfer_usedTech(linksModelToCalc,yearsToCalc,transfer_techs,vintage))
6199              and yearsToCalc.val >= sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
6200              and yearsToCalc.val <= yearsSel.val),
6201          transfer_linksDecom(linksModelToCalc,yearsToCalc,transfer_techs,vintage))
6202      =g=
6203      sum(years$
6204            (transfer_availTech(linksModelToCalc,years,transfer_techs,vintage)
6205              and years.val < sum(yearsToCalc$(ord(yearsToCalc)=1), yearsToCalc.val) - transfer_techParam(transfer_techs,vintage,'lifeTime')),
6206          transfer_linksBuild(linksModelToCalc,years,transfer_techs,vintage))
6207      + sum(yearsToCalc$
6208            (transfer_availTech(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
6209              and yearsToCalc.val >= sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
6210              and yearsToCalc.val <= yearsSel.val - transfer_techParam(transfer_techs,vintage,'lifeTime')),
6211          transfer_linksBuild(linksModelToCalc,yearsToCalc,transfer_techs,vintage));
6212   
6213  * // ### Transfer Links Lower Limit
6214  * // Ensures link capacity lower limits.
6215  * // {Eq_transfer_linksLowerLimit}
6216  Eq_transfer_linksLowerLimit(linksModelToCalc,yearsSel,transfer_techs)
6217      $(transfer_linksParam(linksModelToCalc,yearsSel,transfer_techs,'linksLowerLimit') > 0 )
6218      ..
6219      sum(vintage$transfer_usedTech(linksModelToCalc,yearsSel,transfer_techs,vintage),
6220          transfer_linksTotal(linksModelToCalc,yearsSel,transfer_techs,vintage))
6221      =g=
6222      transfer_linksParam(linksModelToCalc,yearsSel,transfer_techs,"linksLowerLimit");
6223   
6224  * // ### Transfer Links Upper Limit
6225  * // Ensures link capacity upper limits.
6226  * // {Eq_transfer_linksUpperLimit}
6227  Eq_transfer_linksUpperLimit(linksModelToCalc,yearsSel,transfer_techs)
6228      $(transfer_linksParam(linksModelToCalc,yearsSel,transfer_techs,'linksUpperLimit') >= 0
6229          and transfer_linksParam(linksModelToCalc,yearsSel,transfer_techs,'linksUpperLimit') < +inf )
6230      ..
6231      sum(vintage$transfer_usedTech(linksModelToCalc,yearsSel,transfer_techs,vintage),
6232          transfer_linksTotal(linksModelToCalc,yearsSel,transfer_techs,vintage))
6233      =l=
6234      transfer_linksParam(linksModelToCalc,yearsSel,transfer_techs,"linksUpperLimit");
6235   
6236  * // ### Transfer Links Total MIP
6237  * // Ensures number of MIP links.
6238  * // {Eq_transfer_linksTotalMIP}
6239  Eq_transfer_linksTotalMIP(linksModelToCalc,yearsSel,transfer_techs,vintage)
6240      $(transfer_usedTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
6241          and transfer_techParam(transfer_techs,vintage,"mipLinks"))
6242      ..
6243      transfer_linksTotal(linksModelToCalc,yearsSel,transfer_techs,vintage)
6244      =e=
6245      transfer_linksTotal_MIP(linksModelToCalc,yearsSel,transfer_techs,vintage);
6246   
6247  * // ### Transfer Links Flow Along Upper Limit
6248  * // Ensures links flow along upper limit.
6249  * // {Eq_transfer_flowAlongUpperLimit}
6250  Eq_transfer_flowAlongUpperLimit(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
6251      $transfer_usedTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
6252      ..
6253      transfer_flowAlong(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
6254      =l=
6255      transfer_flowProfile(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage,"along")
6256      * transfer_linksTotal(linksModelToCalc,yearsSel,transfer_techs,vintage)
6257      * transfer_techParam(transfer_techs,vintage,"flowUpperLimit")
6258      ;
6259   
6260  * // ### Transfer Links Flow Against Upper Limit
6261  * // Ensures links flow against upper limit.
6262  * // {Eq_transfer_flowAgainstUpperLimit}
6263  Eq_transfer_flowAgainstUpperLimit(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
6264      $transfer_usedTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
6265      ..
6266      transfer_flowAgainst(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
6267      =l=
6268      transfer_flowProfile(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage,"against")
6269      * transfer_linksTotal(linksModelToCalc,yearsSel,transfer_techs,vintage)
6270      * transfer_techParam(transfer_techs,vintage,"flowUpperLimit")
6271      ;
6272   
6273  set transfer_usedOpf(linksModel,years,gridSegments,transfer_techs,vintage);
6274  transfer_usedOpf(linksModel,yearsToCalc,gridSegments,transfer_techs,vintage)
6275      $(transfer_usedTech(linksModel,yearsToCalc,transfer_techs,vintage)
6276          and gridSegments_dcopf(linksModel,transfer_techs,gridSegments))
6277      = yes;
6278   
6279  set transfer_usedOpfLinks(linksModel,years,gridSegments);
6280  option transfer_usedOpfLinks < transfer_usedOpf;
6281   
6282  set transfer_usedOpfSegments(years,gridSegments);
6283  option transfer_usedOpfSegments < transfer_usedOpf;
6284   
6288  * // ### Transfer DC optimal flow angle flows
6289  * // Angle flows.
6290  * // {Eq_transfer_dcopf_cycleFlows}
6291  Eq_transfer_dcopf_angleFlows(timeModelSel,linksModelToCalc,yearsSel,gridSegments)
6292      $transfer_usedOpfLinks(linksModelToCalc,yearsSel,gridSegments)
6293      ..
6294      sum ((transfer_techs,vintage)
6295              $transfer_usedOpf(linksModelToCalc,yearsSel,gridSegments,transfer_techs,vintage),
6296          ( transfer_flowAlong(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
6297              - transfer_flowAgainst(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage) )
6298          * transfer_dcopf_Xtech(linksModelToCalc,yearsSel,transfer_techs,vintage,gridSegments) )
6299      =e=
6300      sum ( nodesModelSel,
6301          - transfer_incidenceModel(nodesModelSel,linksModelToCalc)
6302          * transfer_dcopf_voltageAngle(timeModelSel,nodesModelSel,yearsSel,gridSegments));
6306   
6307   
6308  * ==== model definition ====
6309   
6310  Model M_transfer
6311  /
6312    Eq_transfer_linksBalance
6313    Eq_transfer_linksFixedDecom
6314    Eq_transfer_linksFreeDecom
6315    Eq_transfer_linksLowerLimit
6316    Eq_transfer_linksUpperLimit
6317    Eq_transfer_linksTotalMIP
6318    Eq_transfer_flowAlongUpperLimit
6319    Eq_transfer_flowAgainstUpperLimit
6323    Eq_transfer_dcopf_angleFlows
6327  /;
INCLUDE    C:\Local\REMix\framework\remix\framework\model\source\core\sourcesink.gms
6329  * SPDX-FileCopyrightText: Copyright (c) 2023 German Aerospace Center (DLR)
6330  * SPDX-License-Identifier: BSD-3-Clause
6331   
6332  * // # core_sourcesink
6333  * // The equations in this file describe the sources and sinks in the model.
6334   
6335  * // ## Variables
6336  * // {special_table_sourcesink_variables}
6578   
6579  * // ## Aggregation of profiles
6580  * // Profiles are rescaled based on the annual sum.
6581   
6582  set sourcesink_usesProfileScaling(nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile);
6583  sourcesink_usesProfileScaling(nodesData,years,sourcesink_techs,commodity,"fixed")
6584      $sourcesink_configIn(nodesData,years,sourcesink_techs,commodity,"scaleFixProfileWithFixSum") = yes;
6585  sourcesink_usesProfileScaling(nodesData,years,sourcesink_techs,commodity,"lower")
6586      $sourcesink_configIn(nodesData,years,sourcesink_techs,commodity,"scaleLowProfileWithLowSum") = yes;
6587  sourcesink_usesProfileScaling(nodesData,years,sourcesink_techs,commodity,"upper")
6588      $sourcesink_configIn(nodesData,years,sourcesink_techs,commodity,"scaleUpProfileWithUpSum") = yes;
6589   
6590  parameter sourcesink_ProfileSum(nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile);
6591  sourcesink_ProfileSum(nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile)
6592      $sourcesink_usesProfileScaling(nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile)
6593      = sum(timeData, sourcesink_profileIn(timeData,nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile));
6594   
6595  parameter sourcesink_ProfileAbsSum(nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile);
6596  sourcesink_ProfileAbsSum(nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile)
6597      $sourcesink_usesProfileScaling(nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile)
6598      = sum(timeData, abs(sourcesink_profileIn(timeData,nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile)));
6599   
6600  set sourcesink_ProfileScaleError(nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile);
6601  sourcesink_ProfileScaleError(nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile)
6602      $(sourcesink_usesProfileScaling(nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile)
6603          and sourcesink_ProfileSum(nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile) = 0
6604          and sourcesink_ProfileAbsSum(nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile) > 0)
6605      = yes;
6606   
6607  abort$sum((nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile),
6608              sourcesink_ProfileScaleError(nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile)) "One or more profiles cannot be rescaled as their annual sum equals zero!"
6609   
6610  * calculate scaling factor for each type
6611  parameter sourcesink_scalingFactor(nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile);
6612  sourcesink_scalingFactor(nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile)
6613      $(sourcesink_ProfileSum(nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile)
6614          and sourcesink_usesProfileScaling(nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile))
6615      = sum(pc_sourcesink_annualSum$sameas(pc_sourcesink_profile,pc_sourcesink_annualSum),
6616          sourcesink_annualSumIn(nodesData,years,sourcesink_techs,commodity,pc_sourcesink_annualSum)
6617              / sourcesink_ProfileSum(nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile));
6618   
6619  * rescale profiles
6620  sourcesink_profileIn(timeData,nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile)
6621      $sourcesink_usesProfileScaling(nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile)
6622      = sourcesink_profileIn(timeData,nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile)
6623          * sourcesink_scalingFactor(nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile)
6624   
6625  * // ## Aggregation of profiles
6626  * // Profiles are aggregated based on the mapping from data nodes to model nodes.
6627   
6628  * ==== aggregation of profiles ====
6629  set sourcesink_usesProfileIn(nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile);
6630  option sourcesink_usesProfileIn < sourcesink_profileIn
6631   
6632  set sourcesink_usesProfile(nodesModel,years,sourcesink_techs,commodity,pc_sourcesink_profile);
6633  sourcesink_usesProfile(nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity,pc_sourcesink_profile)
6634      $sum(nodesData$(aggregateNodesModel(nodesData,nodesModelToCalc)
6635          and sourcesink_usesProfileIn(nodesData,yearsToCalc,sourcesink_techs,commodity,pc_sourcesink_profile)), 1)
6636      = yes;
6637   
6638  * aagregate time dimension
6639  parameter sourcesink_profileIn_aggTime(timeModel,nodesData,yearsToCalc,sourcesink_techs,commodity,pc_sourcesink_profile);
6640  sourcesink_profileIn_aggTime(timeModelToCalc,nodesData,yearsToCalc,sourcesink_techs,commodity,pc_sourcesink_profile)
6641    $sourcesink_usesProfileIn(nodesData,yearsToCalc,sourcesink_techs,commodity,pc_sourcesink_profile)
6642    = sum(timeData$timeMapping(timeData,timeModelToCalc),
6643            sourcesink_profileIn(timeData,nodesData,yearsToCalc,sourcesink_techs,commodity,pc_sourcesink_profile)
6644            / timeLength(timeModelToCalc));
6645  option clear = sourcesink_profileIn;
6646   
6647  * sum up absolute profiles
6648  parameter sourcesink_profile(timeModel,nodesModel,years,sourcesink_techs,commodity,pc_sourcesink_profile);
6649  sourcesink_profile(timeModelToCalc,nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity,pc_sourcesink_profile)
6650      $sourcesink_usesProfile(nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity,pc_sourcesink_profile)
6651      = sum(nodesData$aggregateNodesModel(nodesData,nodesModelToCalc),
6652              sourcesink_profileIn_aggTime(timeModelToCalc,nodesData,yearsToCalc,sourcesink_techs,commodity,pc_sourcesink_profile));
6653  option clear = sourcesink_profileIn_aggTime;
6654   
6655  set sourcesink_enabled(nodesModel,years,sourcesink_techs,commodity);
6656  option sourcesink_enabled < sourcesink_config;
6657   
6658   
6659  * ==== declaration of variables ====
6660  * // ## Bounding of variables
6661  * // Source-sink variables with either a lower, fixed, or upper profile are bounded to their respective profiles given by the input parameters.
6662   
6663  sourcesink_flow.lo(timeModelToCalc,nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity)
6664      $( sourcesink_enabled(nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity)
6665          and sourcesink_config(nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity,"usesLowerProfile") = 1
6666          and sourcesink_profile(timeModelToCalc,nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity,"lower") > -inf )
6667      = sourcesink_profile(timeModelToCalc,nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity,"lower");
6668   
6669  sourcesink_flow.up(timeModelToCalc,nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity)
6670      $( sourcesink_enabled(nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity)
6671          and sourcesink_config(nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity,"usesUpperProfile") = 1
6672          and sourcesink_profile(timeModelToCalc,nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity,"upper") < inf )
6673      = sourcesink_profile(timeModelToCalc,nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity,"upper");
6674   
6675  sourcesink_flow.fx(timeModelToCalc,nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity)
6676      $( sourcesink_enabled(nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity)
6677          and sourcesink_config(nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity,"usesFixedProfile") = 1 )
6678      = sourcesink_profile(timeModelToCalc,nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity,"fixed");
6679   
6680  option clear = sourcesink_profile;
6681   
6682   
6683  * ==== equation definition ====
6684  * // ## Equations
6685  equations
6686  Eq_sourcesink_useFixedSum(nodesModel,years,sourcesink_techs,commodity
6687      ) "Fixes the annual sum from sources / to sinks"
6688  Eq_sourcesink_useLowerSum(nodesModel,years,sourcesink_techs,commodity
6689      ) "Limits the lower sum from sources / to sinks"
6690  Eq_sourcesink_useUpperSum(nodesModel,years,sourcesink_techs,commodity
6691      ) "Limits the upper sum from sources / to sinks"
6692    ;
6693   
6694  * // ### Fixed annual sums for sources and sinks
6695  * // Ensures that the sources and sinks with annual sums given as fixed limits are balanced.
6696  * // {Eq_sourcesink_useFixedSum}
6697  Eq_sourcesink_useFixedSum(nodesModelSel,yearsSel,sourcesink_techs,commodity)
6698      $( sourcesink_enabled(nodesModelSel,yearsSel,sourcesink_techs,commodity)
6699          and sourcesink_config(nodesModelSel,yearsSel,sourcesink_techs,commodity,"usesFixedSum") = 1 )
6700      ..
6701      sum(timeModelSel,
6702          sourcesink_flow(timeModelSel,nodesModelSel,yearsSel,sourcesink_techs,commodity))
6703      =e=
6704      sourcesink_annualSum(nodesModelSel,yearsSel,sourcesink_techs,commodity,"fixed")
6705      ;
6706   
6707  * // ### Lower annual sums for sources and sinks
6708  * // Ensures that the sources and sinks with annual sums given as lower limits are balanced.
6709  * // {Eq_sourcesink_useLowerSum}
6710  Eq_sourcesink_useLowerSum(nodesModelSel,yearsSel,sourcesink_techs,commodity)
6711      $( sourcesink_enabled(nodesModelSel,yearsSel,sourcesink_techs,commodity)
6712          and sourcesink_config(nodesModelSel,yearsSel,sourcesink_techs,commodity,"usesLowerSum") = 1
6713          and sourcesink_annualSum(nodesModelSel,yearsSel,sourcesink_techs,commodity,"lower") > -inf )
6714      ..
6715      sum(timeModelSel,
6716          sourcesink_flow(timeModelSel,nodesModelSel,yearsSel,sourcesink_techs,commodity))
6717      =g=
6718      sourcesink_annualSum(nodesModelSel,yearsSel,sourcesink_techs,commodity,"lower")
6719      ;
6720   
6721  * // ### Upper annual sums for sources and sinks
6722  * // Ensures that the sources and sinks with annual sums given as upper limits are balanced.
6723  * // {Eq_sourcesink_useUpperSum}
6724  Eq_sourcesink_useUpperSum(nodesModelSel,yearsSel,sourcesink_techs,commodity)
6725      $( sourcesink_enabled(nodesModelSel,yearsSel,sourcesink_techs,commodity)
6726          and sourcesink_config(nodesModelSel,yearsSel,sourcesink_techs,commodity,"usesUpperSum") = 1
6727          and sourcesink_annualSum(nodesModelSel,yearsSel,sourcesink_techs,commodity,"upper") < inf )
6728      ..
6729      sum(timeModelSel,
6730          sourcesink_flow(timeModelSel,nodesModelSel,yearsSel,sourcesink_techs,commodity))
6731      =l=
6732      sourcesink_annualSum(nodesModelSel,yearsSel,sourcesink_techs,commodity,"upper")
6733      ;
6734   
6735   
6736  * ==== model definition ====
6737   
6738  Model M_sourcesink
6739  /
6740    Eq_sourcesink_useFixedSum
6741    Eq_sourcesink_useLowerSum
6742    Eq_sourcesink_useUpperSum
6743  /;
INCLUDE    C:\Local\REMix\framework\remix\framework\model\source\core\balance.gms
6745  * SPDX-FileCopyrightText: Copyright (c) 2023 German Aerospace Center (DLR)
6746  * SPDX-License-Identifier: BSD-3-Clause
6747   
6748  * // # balance
6749  * // The equations in this file describe the commodity balancing in the model.
6750   
6751  Equations
6752    Eq_balance_commodities(timeModel,nodesModel,years,commodity
6753      ) "Balance for each commodity used in each time step, region, and year";
6754   
6755   
6756  * ==== calculation of mappings ====
6757   
6758  set balance_techComm(techs,commodity);
6759  balance_techComm(converter_techs(techs),commodity)
6760      $sum((vintage,activity)$converter_coefficient(converter_techs,vintage,activity,commodity,"coefficient"), 1) = yes;
6761  balance_techComm(storage_techs(techs),commodity)
6762      $sum((vintage)$storage_sizeParam(storage_techs,vintage,commodity,"size"), 1) = yes;
6763  balance_techComm(transfer_techs(techs),commodity)
6764      $sum((vintage)$transfer_coefficient(transfer_techs,vintage,commodity,"coefficient"), 1) = yes;
6765  balance_techComm(sourcesink_techs(techs),commodity)
6766      $sum((nodesModelToCalc,yearsToCalc)$sourcesink_enabled(nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity), 1) = yes;
6767   
6768  set balance_usedConverter(nodesModel,years,commodity);
6769  set balance_usedStorage(nodesModel,years,commodity);
6770  set balance_usedTransfer(nodesModel,years,commodity);
6771  set balance_usedSourceSink(nodesModel,years,commodity);
6772  set balance_usedBalance(nodesModel,years,commodity);
6773   
6774  balance_usedConverter(nodesModel,years,commodity)
6775      = sum ((converter_techs,vintage,activity)
6776              $( converter_coefficient(converter_techs,vintage,activity,commodity,"coefficient") <> 0
6777                  and converter_usedTech(nodesModel,years,converter_techs,vintage) ), 1);
6778   
6779  balance_usedStorage(nodesModel,years,commodity)
6780      = sum ((storage_techs,vintage,activity)
6781              $(storage_sizeParam(storage_techs,vintage,commodity,"size") <> 0
6782                  and storage_usedTech(nodesModel,years,storage_techs,vintage) ), 1);
6783   
6784  balance_usedTransfer(nodesModel,years,commodity)
6785      = sum ((linksModel,transfer_techs,vintage)
6786              $(transfer_coefficient(transfer_techs,vintage,commodity,"coefficient") <> 0
6787                  and transfer_incidenceModel(nodesModel,linksModel) <> 0), 1);
6788   
6789  option balance_usedSourceSink < sourcesink_enabled;
6790   
6791  balance_usedBalance(nodesModel,years,commodity)
6792      $(balance_usedConverter(nodesModel,years,commodity)
6793          or balance_usedStorage(nodesModel,years,commodity)
6794          or balance_usedTransfer(nodesModel,years,commodity)
6795          or balance_usedSourceSink(nodesModel,years,commodity) )
6796      = yes;
6797   
6798   
6799  * ==== equation definition ====
6800   
6801  * // ### Balance commodities
6802  * // Balancing of commodities for all model regions, time steps, and years
6803  * // {Eq_balance_commodities}
6804  Eq_balance_commodities(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,commodity)
6805      $balance_usedBalance(nodesModelSel,yearsSel,commodity)
6806      ..
6807  * converter
6808      sum((converter_techs,vintage,activity)
6809              $( converter_coefficientProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity,commodity) <> 0
6810                  AND converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage) ),
6811          converter_activity(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity)
6812              * converter_coefficientProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity,commodity)
6813              * timeLength(timeModelSel)
6814          + converter_unitsUsingActivity_MIP(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity)
6815              * converter_coefficient(converter_techs,vintage,activity,commodity,"constant")
6816              * timeLength(timeModelSel))
6817   
6818  * storages
6819      + sum((storage_techs,vintage)
6820              $( storage_sizeParam(storage_techs,vintage,commodity,"size") <> 0
6821                  and storage_usedTech(nodesModelSel,yearsSel,storage_techs,vintage) ),
6822          storage_level(timeModelToCalc--1,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
6823          - storage_level(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
6825          - storage_losses(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
6826          * timeLength(timeModelSel)
6828          )
6829   
6830  * transfer
6831      + sum((linksModel,transfer_techs,vintage)
6832              $(transfer_usedTech(linksModel,yearsSel,transfer_techs,vintage)
6833                  and linksModelToCalc(linksModel)),
6834          (   transfer_flowAlong(timeModelSel,linksModel,yearsSel,transfer_techs,vintage)
6835                  $(transfer_incidenceModel(nodesModelSel,linksModel) > 0)
6836            + transfer_flowAgainst(timeModelSel,linksModel,yearsSel,transfer_techs,vintage)
6837                  $(transfer_incidenceModel(nodesModelSel,linksModel) < 0) )
6838          * transfer_coefficient(transfer_techs,vintage,commodity,"coefficient")
6839          * timeLength(timeModelSel))
6840   
6841      - sum((linksModel,transfer_techs,vintage)
6842              $(transfer_usedTech(linksModel,yearsSel,transfer_techs,vintage)
6843                  and linksModelToCalc(linksModel)),
6844          (   transfer_flowAlong(timeModelSel,linksModel,yearsSel,transfer_techs,vintage)
6845                  $(transfer_incidenceModel(nodesModelSel,linksModel) < 0)
6846            + transfer_flowAgainst(timeModelSel,linksModel,yearsSel,transfer_techs,vintage)
6847                  $(transfer_incidenceModel(nodesModelSel,linksModel) > 0) )
6848          * transfer_coefficient(transfer_techs,vintage,commodity,"coefficient")
6849          * timeLength(timeModelSel))
6850   
6851      + 0.5 * sum((linksModel,transfer_techs,vintage)
6852              $(transfer_usedTech(linksModel,yearsSel,transfer_techs,vintage)
6853                  AND linksModelToCalc(linksModel)),
6854          (   transfer_flowAlong(timeModelSel,linksModel,yearsSel,transfer_techs,vintage)
6855                  $(transfer_incidenceModel(nodesModelSel,linksModel) <> 0)
6856            + transfer_flowAgainst(timeModelSel,linksModel,yearsSel,transfer_techs,vintage)
6857                  $(transfer_incidenceModel(nodesModelSel,linksModel) <> 0) )
6858          * timeLength(timeModelSel)
6859          * ( transfer_coefPerFlow(transfer_techs,vintage,commodity,"coefPerFlow")
6860              + sum(link_types,
6861                  transfer_coefPerLength(transfer_techs,vintage,commodity,link_types,"coefPerLength")
6862                  * transfer_lengthParam(linksModel,link_types,"length"))))
6863   
6864  * sourcesink
6865      + sum((sourcesink_techs)
6866              $sourcesink_enabled(nodesModelSel,yearsSel,sourcesink_techs,commodity),
6867          sourcesink_flow(timeModelSel,nodesModelSel,yearsSel,sourcesink_techs,commodity)
6868          * timeLength(timeModelSel))
6869      =e=
6870      0;
6871   
6872   
6873  * ==== model definition ====
6874   
6875  Model M_balance
6876  /
6877    Eq_balance_commodities
6878  /;
6879   
INCLUDE    C:\Local\REMix\framework\remix\framework\model\source\accounting\equations.gms
6881  * SPDX-FileCopyrightText: Copyright (c) 2023 German Aerospace Center (DLR)
6882  * SPDX-License-Identifier: BSD-3-Clause
6883   
6884  * // # accounting_equations
6885   
6886  * ==== declaration of variables ====
6887   
6888  variables
6889  accounting_indicator(accNodesModel,accYears,indicator)
6890  accounting_indicator_links(linksModel,years,indicator)
6891  accounting_objective
6892    ;
6893   
6894   
6895  * ==== definition of variables ====
6896   
6897  * set the variable levels to be fixed for years before the optimization years
6898  accounting_indicator.l(accNodesModel,accYears,indicator)
6899      $activeIndicators(accNodesModel,accYears,indicator)
6900      = 0;
6901   
6902  accounting_indicator.lo(accNodesModel,accYears,indicator)
6903      $(accounting_indicatorBounds(accNodesModel,accYears,indicator,"useLower") <> 0 )
6904      = accounting_indicatorBounds(accNodesModel,accYears,indicator,"lowerValue");
6905   
6906  accounting_indicator.up(accNodesModel,accYears,indicator)
6907      $(accounting_indicatorBounds(accNodesModel,accYears,indicator,"useUpper") <> 0 )
6908      = accounting_indicatorBounds(accNodesModel,accYears,indicator,"upperValue");
6909   
6910  accounting_indicator.fx(accNodesModel,accYears,indicator)
6911      $(accounting_indicatorBounds(accNodesModel,accYears,indicator,"useFixed") <> 0 )
6912      = accounting_indicatorBounds(accNodesModel,accYears,indicator,"fixedValue");
6913   
6914   
6915  accounting_indicator_links.lo(linksModelToCalc,yearsToCalc,indicator)
6916      $(accounting_indicatorBounds_links(linksModelToCalc,yearsToCalc,indicator,"useLower") <> 0 )
6917      = accounting_indicatorBounds_links(linksModelToCalc,yearsToCalc,indicator,"lowerValue");
6918   
6919  accounting_indicator_links.up(linksModelToCalc,yearsToCalc,indicator)
6920      $(accounting_indicatorBounds_links(linksModelToCalc,yearsToCalc,indicator,"useUpper") <> 0 )
6921      = accounting_indicatorBounds_links(linksModelToCalc,yearsToCalc,indicator,"upperValue");
6922   
6923  accounting_indicator_links.fx(linksModelToCalc,yearsToCalc,indicator)
6924      $(accounting_indicatorBounds_links(linksModelToCalc,yearsToCalc,indicator,"useFixed") <> 0 )
6925      = accounting_indicatorBounds_links(linksModelToCalc,yearsToCalc,indicator,"fixedValue");
6926   
6927   
6928  * ==== declaration of equations ====
6929   
6930  equations
6931  Eq_accounting_indicatorCalc(accNodesModel,accYears,indicator
6932      ) "Calculates the level of an indicator per accounting region"
6933  Eq_accounting_indicatorCalc_links(linksModel,years,indicator
6934      ) "Calculates the level of an indicator per model link"
6935  Eq_accounting_objective "Calculates the objective value based on the specified indicator"
6936    ;
6937   
6938   
6939  * ==== equations definition ====
6940  * // ## Equations
6941  * // ### Accounting Indicator Calculation
6942  * // Calculates the indicators for each model node for converters, sources and sinks, transfer, storage and variable indicators.
6943  * // {Eq_accounting_indicatorCalc}
6944  Eq_accounting_indicatorCalc(accNodesModel,accYearsSel(accYears),indicator)
6945      $activeIndicators(accNodesModel,accYears,indicator)
6946      ..
6947      accounting_indicator(accNodesModel,accYears,indicator)
6948      =e=
6949   
6950  * == variable indicators ==
6951      sum((accNodesModel_a,accYears_a,indicator_a)
6952          $(compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
6953              and variableIndicators(accNodesModel_a,accYears_a,indicator_a)),
6954          compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
6955          * accounting_indicator(accNodesModel_a,accYears_a,indicator_a))
6956   
6957  * == converters ==
6958      + sum ((accNodesModel_a,nodesModelSel,accYears_a,yearsSel,indicator_a)
6959              $( compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
6960                  and sameas(nodesModelSel,accNodesModel_a) and sameas(yearsSel,accYears_a)),
6961          compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
6962          *
6963          ( sum ((converter_techs,vintage)
6964                      $(converter_availTech(nodesModelSel,yearsSel,converter_techs,vintage)
6965                          and accounting_converterUnits(indicator_a,nodesModelSel,converter_techs,vintage,"useAnnuity") = 0),
6966              converter_unitsBuild(nodesModelSel,yearsSel,converter_techs,vintage)
6967              * accounting_converterUnits(indicator_a,nodesModelSel,converter_techs,vintage,"perUnitBuild"))
6968   
6969          + sum ((years_a,converter_techs,vintage)
6970                      $(converter_availTech(nodesModelSel,years_a,converter_techs,vintage)
6971                          and years_a.val < sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
6972                          and accounting_converterUnits(indicator_a,nodesModelSel,converter_techs,vintage,"useAnnuity") = 1
6973                          and years_a.val + accounting_converterUnits(indicator_a,nodesModelSel,converter_techs,vintage,"amorTime") > yearsSel.val
6974                          and years_a.val <= yearsSel.val ),
6975              converter_unitsBuild(nodesModelSel,years_a,converter_techs,vintage)
6976              * accounting_converterUnits(indicator_a,nodesModelSel,converter_techs,vintage,"perUnitBuild")
6977              * accounting_annuityFactor_converter(indicator_a,nodesModelSel,converter_techs,vintage) )
6978   
6979          + sum ((yearsToCalc,converter_techs,vintage)
6980                      $(converter_availTech(nodesModelSel,yearsToCalc,converter_techs,vintage)
6981                          and yearsToCalc.val >= sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
6982                          and accounting_converterUnits(indicator_a,nodesModelSel,converter_techs,vintage,"useAnnuity") = 1
6983                          and yearsToCalc.val + accounting_converterUnits(indicator_a,nodesModelSel,converter_techs,vintage,"amorTime") > yearsSel.val
6984                          and yearsToCalc.val <= yearsSel.val ),
6985              converter_unitsBuild(nodesModelSel,yearsToCalc,converter_techs,vintage)
6986              * accounting_converterUnits(indicator_a,nodesModelSel,converter_techs,vintage,"perUnitBuild")
6987              * accounting_annuityFactor_converter(indicator_a,nodesModelSel,converter_techs,vintage) )
6988   
6989          + sum ((converter_techs,vintage)
6990                      $converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage),
6991              converter_unitsDecom(nodesModelSel,yearsSel,converter_techs,vintage)
6992              * accounting_converterUnits(indicator_a,nodesModelSel,converter_techs,vintage,"perUnitDecom")
6993   
6994              + converter_unitsTotal(nodesModelSel,yearsSel,converter_techs,vintage)
6995              * accounting_converterUnits(indicator_a,nodesModelSel,converter_techs,vintage,"perUnitTotal") )
6996   
6997          + sum ((timeModelSel,converter_techs,vintage,activity)
6998                      $converter_usedTechAct(nodesModelSel,yearsSel,converter_techs,vintage,activity),
6999              converter_activity(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity)
7000              * timeLength(timeModelSel)
7001              * accounting_converterActivity(indicator_a,nodesModelSel,converter_techs,vintage,activity,"perActivity") )
7002   
7003          + sum ((timeModelSel,converter_techs,vintage)
7004                      $converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage),
7005              converter_unitStartups(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
7006              * accounting_converterStartup(indicator_a,nodesModelSel,converter_techs,vintage,"perStartup") )
7007   
7008          + sum ((timeModelSel,converter_techs,vintage)
7009                      $converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage),
7010              converter_rampPos(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
7011              * (accounting_converterStartup(indicator_a,nodesModelSel,converter_techs,vintage,"perRamp")
7012                 + accounting_converterStartup(indicator_a,nodesModelSel,converter_techs,vintage,"perRampPos"))
7013   
7014              + converter_rampNeg(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
7015              * (accounting_converterStartup(indicator_a,nodesModelSel,converter_techs,vintage,"perRamp")
7016                 + accounting_converterStartup(indicator_a,nodesModelSel,converter_techs,vintage,"perRampNeg")))
7017          )
7018      )
7019   
7020  * == storage ==
7021      + sum ((accNodesModel_a,nodesModelSel,accYears_a,yearsSel,indicator_a)
7022              $( compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
7023                  and sameas(nodesModelSel,accNodesModel_a) and sameas(yearsSel,accYears_a)),
7024          compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
7025          *
7026          ( sum ((storage_techs,vintage)
7027                      $(storage_availTech(nodesModelSel,yearsSel,storage_techs,vintage)
7028                          and accounting_storageUnits(indicator_a,nodesModelSel,storage_techs,vintage,"useAnnuity") = 0),
7029              storage_unitsBuild(nodesModelSel,yearsSel,storage_techs,vintage)
7030              * accounting_storageUnits(indicator_a,nodesModelSel,storage_techs,vintage,"perUnitBuild") )
7031   
7032          + sum ((years_a,storage_techs,vintage)
7033                      $(storage_availTech(nodesModelSel,years_a,storage_techs,vintage)
7034                          and years_a.val < sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
7035                          and accounting_storageUnits(indicator_a,nodesModelSel,storage_techs,vintage,"useAnnuity") = 1
7036                          and years_a.val + accounting_storageUnits(indicator_a,nodesModelSel,storage_techs,vintage,"amorTime") > yearsSel.val
7037                          and years_a.val <= yearsSel.val ),
7038              storage_unitsBuild(nodesModelSel,years_a,storage_techs,vintage)
7039              * accounting_storageUnits(indicator_a,nodesModelSel,storage_techs,vintage,"perUnitBuild")
7040              * accounting_annuityFactor_storage(indicator_a,nodesModelSel,storage_techs,vintage) )
7041   
7042          + sum ((yearsToCalc,storage_techs,vintage)
7043                      $(storage_availTech(nodesModelSel,yearsToCalc,storage_techs,vintage)
7044                          and yearsToCalc.val >= sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
7045                          and accounting_storageUnits(indicator_a,nodesModelSel,storage_techs,vintage,"useAnnuity") = 1
7046                          and yearsToCalc.val + accounting_storageUnits(indicator_a,nodesModelSel,storage_techs,vintage,"amorTime") > yearsSel.val
7047                          and yearsToCalc.val <= yearsSel.val ),
7048              storage_unitsBuild(nodesModelSel,yearsToCalc,storage_techs,vintage)
7049              * accounting_storageUnits(indicator_a,nodesModelSel,storage_techs,vintage,"perUnitBuild")
7050              * accounting_annuityFactor_storage(indicator_a,nodesModelSel,storage_techs,vintage) )
7051   
7052          + sum ((storage_techs,vintage)
7053                      $storage_usedTech(nodesModelSel,yearsSel,storage_techs,vintage),
7054              storage_unitsDecom(nodesModelSel,yearsSel,storage_techs,vintage)
7055              * accounting_storageUnits(indicator_a,nodesModelSel,storage_techs,vintage,"perUnitDecom")
7056   
7057              + storage_unitsTotal(nodesModelSel,yearsSel,storage_techs,vintage)
7058              * accounting_storageUnits(indicator_a,nodesModelSel,storage_techs,vintage,"perUnitTotal") )
7059          )
7060      )
7061   
7062   
7063  * == transfer ==
7064      + sum ((accNodesModel_a,nodesModelSel,accYears_a,yearsSel,indicator_a)
7065              $( compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
7066                  and sameas(nodesModelSel,accNodesModel_a) and sameas(yearsSel,accYears_a)),
7067          compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
7068          *
7069          ( sum ((linksModelToCalc,transfer_techs,vintage)
7070                      $(transfer_availTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
7071                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0
7072                          and accounting_transferLinks(indicator_a,linksModelToCalc,transfer_techs,vintage,"useAnnuity") = 0),
7073              0.5
7074              * transfer_linksBuild(linksModelToCalc,yearsSel,transfer_techs,vintage)
7075              * accounting_transferLinks(indicator_a,linksModelToCalc,transfer_techs,vintage,"perLinkBuild") )
7076   
7077          + sum ((linksModelToCalc,years_a,transfer_techs,vintage)
7078                      $(transfer_availTech(linksModelToCalc,years_a,transfer_techs,vintage)
7079                          and years_a.val < sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
7080                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0
7081                          and accounting_transferLinks(indicator_a,linksModelToCalc,transfer_techs,vintage,"useAnnuity") = 1
7082                          and years_a.val + accounting_transferLinks(indicator_a,linksModelToCalc,transfer_techs,vintage,"amorTime") > yearsSel.val
7083                          and years_a.val <= yearsSel.val ),
7084              0.5
7085              * transfer_linksBuild(linksModelToCalc,years_a,transfer_techs,vintage)
7086              * accounting_transferLinks(indicator_a,linksModelToCalc,transfer_techs,vintage,"perLinkBuild")
7087              * accounting_annuityFactor_transferLink(indicator_a,linksModelToCalc,transfer_techs,vintage) )
7088   
7089          + sum ((linksModelToCalc,yearsToCalc,transfer_techs,vintage)
7090                      $(transfer_availTech(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
7091                          and yearsToCalc.val >= sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
7092                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0
7093                          and accounting_transferLinks(indicator_a,linksModelToCalc,transfer_techs,vintage,"useAnnuity") = 1
7094                          and yearsToCalc.val + accounting_transferLinks(indicator_a,linksModelToCalc,transfer_techs,vintage,"amorTime") > yearsSel.val
7095                          and yearsToCalc.val <= yearsSel.val ),
7096              0.5
7097              * transfer_linksBuild(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
7098              * accounting_transferLinks(indicator_a,linksModelToCalc,transfer_techs,vintage,"perLinkBuild")
7099              * accounting_annuityFactor_transferLink(indicator_a,linksModelToCalc,transfer_techs,vintage) )
7100   
7101          + sum ((linksModelToCalc,transfer_techs,vintage,link_types)
7102                      $(transfer_availTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
7103                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0
7104                          and accounting_transferPerLength(indicator_a,linksModelToCalc,transfer_techs,vintage,link_types,"useAnnuity") = 0 ),
7105              0.5
7106              * transfer_linksBuild(linksModelToCalc,yearsSel,transfer_techs,vintage)
7107              * transfer_lengthParam(linksModelToCalc,link_types,"length")
7108              * accounting_transferPerLength(indicator_a,linksModelToCalc,transfer_techs,vintage,link_types,"perLengthBuild") )
7109   
7110          + sum ((linksModelToCalc,years_a,transfer_techs,vintage,link_types)
7111                      $(transfer_availTech(linksModelToCalc,years_a,transfer_techs,vintage)
7112                          and years_a.val < sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
7113                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0
7114                          and accounting_transferPerLength(indicator_a,linksModelToCalc,transfer_techs,vintage,link_types,"useAnnuity") = 1
7115                          and years_a.val + accounting_transferPerLength(indicator_a,linksModelToCalc,transfer_techs,vintage,link_types,"amorTime") > yearsSel.val
7116                          and years_a.val <= yearsSel.val ),
7117              0.5
7118              * transfer_linksBuild(linksModelToCalc,years_a,transfer_techs,vintage)
7119              * transfer_lengthParam(linksModelToCalc,link_types,"length")
7120              * accounting_transferPerLength(indicator_a,linksModelToCalc,transfer_techs,vintage,link_types,"perLengthBuild")
7121              * accounting_annuityFactor_transferDistance(indicator_a,linksModelToCalc,transfer_techs,vintage,link_types) )
7122   
7123          + sum ((linksModelToCalc,yearsToCalc,transfer_techs,vintage,link_types)
7124                      $(transfer_availTech(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
7125                          and yearsToCalc.val >= sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
7126                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0
7127                          and accounting_transferPerLength(indicator_a,linksModelToCalc,transfer_techs,vintage,link_types,"useAnnuity") = 1
7128                          and yearsToCalc.val + accounting_transferPerLength(indicator_a,linksModelToCalc,transfer_techs,vintage,link_types,"amorTime") > yearsSel.val
7129                          and yearsToCalc.val <= yearsSel.val ),
7130              0.5
7131              * transfer_linksBuild(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
7132              * transfer_lengthParam(linksModelToCalc,link_types,"length")
7133              * accounting_transferPerLength(indicator_a,linksModelToCalc,transfer_techs,vintage,link_types,"perLengthBuild")
7134              * accounting_annuityFactor_transferDistance(indicator_a,linksModelToCalc,transfer_techs,vintage,link_types) )
7135   
7136          + sum ((linksModelToCalc,transfer_techs,vintage)
7137                      $(transfer_usedTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
7138                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0 ),
7139              0.5
7140              * transfer_linksDecom(linksModelToCalc,yearsSel,transfer_techs,vintage)
7141              * accounting_transferLinks(indicator_a,linksModelToCalc,transfer_techs,vintage,"perLinkDecom")
7142   
7143              + 0.5
7144              * transfer_linksTotal(linksModelToCalc,yearsSel,transfer_techs,vintage)
7145              * accounting_transferLinks(indicator_a,linksModelToCalc,transfer_techs,vintage,"perLinkTotal")
7146   
7147              + 0.5
7148              * sum (link_types,
7149                  transfer_linksDecom(linksModelToCalc,yearsSel,transfer_techs,vintage)
7150                  * transfer_lengthParam(linksModelToCalc,link_types,"length")
7151                  * accounting_transferPerLength(indicator_a,linksModelToCalc,transfer_techs,vintage,link_types,"perLengthDecom")
7152   
7153                  + transfer_linksTotal(linksModelToCalc,yearsSel,transfer_techs,vintage)
7154                  * transfer_lengthParam(linksModelToCalc,link_types,"length")
7155                  * accounting_transferPerLength(indicator_a,linksModelToCalc,transfer_techs,vintage,link_types,"perLengthTotal"))
7156   
7157              + 0.5
7158              * sum (timeModelSel,
7159                  transfer_flowAlong(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
7160                  * timeLength(timeModelSel)
7161                  * ( accounting_transferLinks(indicator_a,linksModelToCalc,transfer_techs,vintage,"perFlow")
7162                      + accounting_transferLinks(indicator_a,linksModelToCalc,transfer_techs,vintage,"perFlowAlong"))
7163   
7164                  + transfer_flowAgainst(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
7165                  * timeLength(timeModelSel)
7166                  * ( accounting_transferLinks(indicator_a,linksModelToCalc,transfer_techs,vintage,"perFlow")
7167                      + accounting_transferLinks(indicator_a,linksModelToCalc,transfer_techs,vintage,"perFlowAgainst")))
7168   
7169              + 0.5
7170              * sum ((timeModelSel, link_types),
7171                  transfer_flowAlong(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
7172                  * timeLength(timeModelSel)
7173                  * transfer_lengthParam(linksModelToCalc,link_types,"length")
7174                  * (accounting_transferPerLength(indicator_a,linksModelToCalc,transfer_techs,vintage,link_types,"perFlow")
7175                      + accounting_transferPerLength(indicator_a,linksModelToCalc,transfer_techs,vintage,link_types,"perFlowAlong"))
7176   
7177                  + transfer_flowAgainst(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
7178                  * timeLength(timeModelSel)
7179                  * transfer_lengthParam(linksModelToCalc,link_types,"length")
7180                  * (accounting_transferPerLength(indicator_a,linksModelToCalc,transfer_techs,vintage,link_types,"perFlow")
7181                      + accounting_transferPerLength(indicator_a,linksModelToCalc,transfer_techs,vintage,link_types,"perFlowAgainst")))
7182              )
7183          )
7184      )
7185   
7186   
7187  * == sources / sinks ==
7188      + sum ((accNodesModel_a,nodesModelSel,accYears_a,yearsSel,indicator_a)
7189              $( compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
7190                  and sameas(nodesModelSel,accNodesModel_a) and sameas(yearsSel,accYears_a)),
7191          compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
7192          *
7193          sum ((timeModelSel,sourcesink_techs,commodity)
7194                  $sourcesink_enabled(nodesModelSel,yearsSel,sourcesink_techs,commodity),
7195              sourcesink_flow(timeModelSel,nodesModelSel,yearsSel,sourcesink_techs,commodity)
7196              * timeLength(timeModelSel)
7197              * accounting_sourcesinkFlow(indicator_a,nodesModelSel,yearsSel,sourcesink_techs,commodity,"perFlow") )
7198      );
7199   
7200  * // ### Accounting Indicator Calculation Links
7201  * // Calculates the indicators for each transfer for converters, sources and sinks, transfer, storage and variable indicators.
7202  * // {Eq_accounting_indicatorCalc_links}
7203  Eq_accounting_indicatorCalc_links(linksModelToCalc,yearsSel,indicator)
7204      $activeIndicators_links(linksModelToCalc,yearsSel,indicator)
7205      ..
7206      accounting_indicator_links(linksModelToCalc,yearsSel,indicator)
7207      =e=
7208      sum ((transfer_techs,vintage)
7209                  $(transfer_availTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
7210                      and accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"useAnnuity") = 0),
7211          transfer_linksBuild(linksModelToCalc,yearsSel,transfer_techs,vintage)
7212          * accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"perLinkBuild") )
7213   
7214      + sum ((years_a,transfer_techs,vintage)
7215                  $(transfer_availTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
7216                      and accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"useAnnuity") = 1
7217                      and years_a.val + accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"amorTime") > yearsSel.val
7218                      and years_a.val <= yearsSel.val ),
7219          transfer_linksBuild(linksModelToCalc,years_a,transfer_techs,vintage)
7220          * accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"perLinkBuild")
7221          * accounting_annuityFactor_transferLink(indicator,linksModelToCalc,transfer_techs,vintage) )
7222   
7223      + sum ((transfer_techs,vintage,link_types)
7224                  $(transfer_availTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
7225                      and accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"useAnnuity") = 0 ),
7226          transfer_linksBuild(linksModelToCalc,yearsSel,transfer_techs,vintage)
7227          * transfer_lengthParam(linksModelToCalc,link_types,"length")
7228          * accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"perLengthBuild") )
7229   
7230      + sum ((years_a,transfer_techs,vintage,link_types)
7231                  $(transfer_availTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
7232                      and accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"useAnnuity") = 1
7233                      and years_a.val + accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"amorTime") > yearsSel.val
7234                      and years_a.val <= yearsSel.val ),
7235          transfer_linksBuild(linksModelToCalc,years_a,transfer_techs,vintage)
7236          * transfer_lengthParam(linksModelToCalc,link_types,"length")
7237          * accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"perLengthBuild")
7238          * accounting_annuityFactor_transferDistance(indicator,linksModelToCalc,transfer_techs,vintage,link_types) )
7239   
7240      + sum ((transfer_techs,vintage)
7241                  $(transfer_usedTech(linksModelToCalc,yearsSel,transfer_techs,vintage)),
7242          transfer_linksDecom(linksModelToCalc,yearsSel,transfer_techs,vintage)
7243          * accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"perLinkDecom")
7244   
7245          + transfer_linksTotal(linksModelToCalc,yearsSel,transfer_techs,vintage)
7246          * accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"perLinkTotal")
7247   
7248          + sum (link_types,
7249              transfer_linksDecom(linksModelToCalc,yearsSel,transfer_techs,vintage)
7250              * transfer_lengthParam(linksModelToCalc,link_types,"length")
7251              * accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"perLengthDecom")
7252   
7253              + transfer_linksTotal(linksModelToCalc,yearsSel,transfer_techs,vintage)
7254              * transfer_lengthParam(linksModelToCalc,link_types,"length")
7255              * accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"perLengthTotal"))
7256   
7257          + sum (timeModelSel,
7258              transfer_flowAlong(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
7259              * timeLength(timeModelSel)
7260              * ( accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"perFlow")
7261                  + accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"perFlowAlong"))
7262   
7263              + transfer_flowAgainst(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
7264              * timeLength(timeModelSel)
7265              * ( accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"perFlow")
7266                  + accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"perFlowAgainst")))
7267   
7268          + sum ((timeModelSel, link_types),
7269              transfer_flowAlong(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
7270              * timeLength(timeModelSel)
7271              * transfer_lengthParam(linksModelToCalc,link_types,"length")
7272              * (accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"perFlow")
7273                  + accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"perFlowAlong"))
7274   
7275              + transfer_flowAgainst(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
7276              * timeLength(timeModelSel)
7277              * transfer_lengthParam(linksModelToCalc,link_types,"length")
7278              * (accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"perFlow")
7279                  + accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"perFlowAgainst")))
7280          );
7281   
7282  * // ### Accounting Objective
7283  * // Calculates the indicators for the objective.
7284  * // {Eq_accounting_objective}
7285  Eq_accounting_objective
7286      ..
7287      accounting_objective
7288      =e=
7289      sum ((accNodesModel,accYears,indicator)
7290              $(accounting_indicatorBounds(accNodesModel,accYears,indicator,"obj") <> 0 ),
7291          accounting_indicator(accNodesModel,accYears,indicator) )
7292   
7293   
7294  * ==== model definition ====
7295   
7296  Model M_accounting
7297  /
7298  Eq_accounting_indicatorCalc_links
7299  Eq_accounting_indicatorCalc
7300  Eq_accounting_objective
7301  /;
INCLUDE    C:\Local\REMix\framework\remix\framework\model\source\optiframe.gms
7303  * SPDX-FileCopyrightText: Copyright (c) 2023 German Aerospace Center (DLR)
7304  * SPDX-License-Identifier: BSD-3-Clause
7305   
7306  * ==== optimization frames ====
7308   
7309  * mapping from optimization frame to years
7311  set optiframe / of1 * of3 /;
7312  set optiframeToCalc(optiframe);
7313   
7315  set map_optiframe(optiframe,years) / of1 . #yearsToCalc /;
7317   
7319   
7320  option optiframeToCalc < map_optiframe;
7321   
7322  Model remix /
7323    M_converter
7324    M_storage
7325    M_transfer
7326    M_sourcesink
7327    M_balance
7328    M_accounting
7329  /;
7330   
7331   
7332  * ==== include methods  ====
7333   
7334  * check if the method is valid
7340   
7341   
7342  * if method is pips write the checkanno tool
INCLUDE    C:\Local\REMix\framework\remix\framework\model\source\methods\checkanno.gms
7344  * SPDX-FileCopyrightText: Copyright (c) 2023 German Aerospace Center (DLR)
7345  * SPDX-License-Identifier: BSD-3-Clause
7346   
7349   
7352   
7353  * if method is pips generate the annotated gdx file
INCLUDE    C:\Local\REMix\framework\remix\framework\model\source\methods\pips.gms
7355  * SPDX-FileCopyrightText: Copyright (c) 2023 German Aerospace Center (DLR)
7356  * SPDX-License-Identifier: BSD-3-Clause
7357   
7361   
7362  * if method is solve run the model with commercial solvers
INCLUDE    C:\Local\REMix\framework\remix\framework\model\source\methods\solve.gms
7364  * SPDX-FileCopyrightText: Copyright (c) 2023 German Aerospace Center (DLR)
7365  * SPDX-License-Identifier: BSD-3-Clause
7366   
7369   
7371   
7372  * ==== global options ====
7379   
7380  * ==== general solver options ====
7390   
7391  * ==== cplex options ====
7400   
7401  * ==== copt options ====
7405   
7406  * ==== debug options ====
7409   
7410   
7411  * ==== setup optimization ====
7412  if ((sum(nodesModelToCalc, 1)>40 or sum(timeModelToCalc, 1)>50) and not 0,
7413     option limRow=0, limCol=0, solPrint=off;
7414  else
7415     option limRow=100000, limCol=100000, solPrint=on;
7416  );
7417   
7419   
7420  option mip = cplex;
7421  option reslim = 604800;
7422  option optcr = 1e-3;
7423  remix.threads=4;
7424  remix.optFile = 1;
7425  remix.solveLink = 0;
7426  remix.holdFixed = 1;
7427   
7428   
7429  * ==== configure optionfiles ====
7430   
7432  file opt / "cplex.opt" /;
7433  put opt;
7435  put "rerun no" /;
7437  put "lpmethod 4" /;
7439  put "barorder 0" /;
7440  put "preind 1" /;
7441  put "scaind 0" /;
7442  put "predual -1" /;
7443  put "baralg 0" /;
7444  put "barstartalg 1" /;
7445  put "barepcomp 1e-6" /;
7446  put "solutiontype 2" /;
7447  put "startalg 4" /;
7448  put "epgap 1e-3" /;
7449  put "quality 1" /;
7450  put "barcolnz 0" /;
7451  put "threads 4" /;
7452  put "parallelmode 1" /;
7455  putclose;
7456   
7458   
7459   
7460  * ==== solve the problem ====
7461   
7462  loop ( optiframeToCalc,
7463      yearsSel(years) = no;
7464      yearsSel(years)$map_optiframe(optiframeToCalc,years) = yes;
7465      yearsToFix(years) = no;
7466      yearsToFix(years)$(years.val < smin(years_a$yearsSel(years_a), years_a.val)) = yes;
7467      accYearsSel(accYears) = no;
7468      accYearsSel("horizon") = yes;
7469      accYearsSel(accYears)$(sum(yearsSel$sameas(accYears,yearsSel), 1)) = yes;
7470      accYearsToFix(accYears) = no;
7471      accYearsToFix(accYears)$(sum(years$(sameas(years,accYears) and years.val < smin(years_a$yearsSel(years_a), years_a.val)), 1) > 0) = yes;
7472      timeModelSel(timeModel) = no;
7473      timeModelSel(timeModel)$timeModelToCalc(timeModel) = yes;
7474      nodesModelSel(nodesModel) = no;
7475      nodesModelSel(nodesModel)$nodesModelToCalc(nodesModel) = yes;
7476   
7477  * Fix decision for years previously optimized in case of myopic or foresight
7478      converter_unitsDelta(nodesModelToCalc,yearsToFix,converter_techs)
7479          $(sum(yearsToCalc$sameas(yearsToFix, yearsToCalc), 1))
7480          = sum(vintage, converter_unitsTotal.l(nodesModelToCalc,yearsToFix,converter_techs,vintage))
7481              - converter_capacityParam(nodesModelToCalc,yearsToFix,converter_techs,"unitsUpperLimit");
7482      converter_unitsDelta(nodesModelToCalc,yearsToFix,converter_techs)
7483          $(converter_unitsDelta(nodesModelToCalc,yearsToFix,converter_techs) < 0) = 0;
7484   
7485      converter_unitsBuild.l(nodesModelToCalc,yearsToFix,converter_techs,vintage)
7486          $converter_availTech(nodesModelToCalc,yearsToFix,converter_techs,vintage)
7487          = converter_unitsBuild.l(nodesModelToCalc,yearsToFix,converter_techs,vintage)
7488              - converter_unitsDelta(nodesModelToCalc,yearsToFix,converter_techs);
7489   
7490      converter_unitsBuild.l(nodesModelToCalc,yearsToFix,converter_techs,vintage)
7491          $(converter_unitsBuild.l(nodesModelToCalc,yearsToFix,converter_techs,vintage) < 0) = 0;
7492      converter_unitsBuild.fx(nodesModelToCalc,yearsToFix,converter_techs,vintage)
7493          = converter_unitsBuild.l(nodesModelToCalc,yearsToFix,converter_techs,vintage);
7494      converter_unitsDecom.l(nodesModelToCalc,yearsToFix,converter_techs,vintage)
7495          $(converter_unitsDecom.l(nodesModelToCalc,yearsToFix,converter_techs,vintage) < 0) = 0;
7496      converter_unitsDecom.fx(nodesModelToCalc,yearsToFix,converter_techs,vintage)
7497          = converter_unitsDecom.l(nodesModelToCalc,yearsToFix,converter_techs,vintage);
7498      converter_unitsTotal.fx(nodesModelToCalc,yearsToFix,converter_techs,vintage)
7499          = converter_unitsTotal.l(nodesModelToCalc,yearsToFix,converter_techs,vintage);
7500   
7501   
7502      storage_unitsDelta(nodesModelToCalc,yearsToFix,storage_techs)
7503          $(sum(yearsToCalc$sameas(yearsToFix, yearsToCalc), 1))
7504          = sum(vintage, storage_unitsTotal.l(nodesModelToCalc,yearsToFix,storage_techs,vintage))
7505              - storage_reservoirParam(nodesModelToCalc,yearsToFix,storage_techs,"unitsUpperLimit");
7506      storage_unitsDelta(nodesModelToCalc,yearsToFix,storage_techs)
7507          $(storage_unitsDelta(nodesModelToCalc,yearsToFix,storage_techs) < 0) = 0;
7508   
7509      storage_unitsBuild.l(nodesModelToCalc,yearsToFix,storage_techs,vintage)
7510          $storage_availTech(nodesModelToCalc,yearsToFix,storage_techs,vintage)
7511          = storage_unitsBuild.l(nodesModelToCalc,yearsToFix,storage_techs,vintage)
7512              - storage_unitsDelta(nodesModelToCalc,yearsToFix,storage_techs);
7513   
7514      storage_unitsBuild.l(nodesModelToCalc,yearsToFix,storage_techs,vintage)
7515          $(storage_unitsBuild.l(nodesModelToCalc,yearsToFix,storage_techs,vintage) < 0) = 0;
7516      storage_unitsBuild.fx(nodesModelToCalc,yearsToFix,storage_techs,vintage)
7517          = storage_unitsBuild.l(nodesModelToCalc,yearsToFix,storage_techs,vintage);
7518      storage_unitsDecom.l(nodesModelToCalc,yearsToFix,storage_techs,vintage)
7519          $(storage_unitsDecom.l(nodesModelToCalc,yearsToFix,storage_techs,vintage) < 0) = 0;
7520      storage_unitsDecom.fx(nodesModelToCalc,yearsToFix,storage_techs,vintage)
7521          = storage_unitsDecom.l(nodesModelToCalc,yearsToFix,storage_techs,vintage);
7522      storage_unitsTotal.fx(nodesModelToCalc,yearsToFix,storage_techs,vintage)
7523          = storage_unitsTotal.l(nodesModelToCalc,yearsToFix,storage_techs,vintage);
7524   
7525   
7526      transfer_linksDelta(linksModelToCalc,yearsToFix,transfer_techs)
7527          $(sum(yearsToCalc$sameas(yearsToFix, yearsToCalc), 1))
7528          = sum(vintage, transfer_linksTotal.l(linksModelToCalc,yearsToFix,transfer_techs,vintage))
7529              - transfer_linksParam(linksModelToCalc,yearsToFix,transfer_techs,"linksUpperLimit");
7530      transfer_linksDelta(linksModelToCalc,yearsToFix,transfer_techs)
7531          $(transfer_linksDelta(linksModelToCalc,yearsToFix,transfer_techs) < 0) = 0;
7532   
7533      transfer_linksBuild.l(linksModelToCalc,yearsToFix,transfer_techs,vintage)
7534          $transfer_availTech(linksModelToCalc,yearsToFix,transfer_techs,vintage)
7535          = transfer_linksBuild.l(linksModelToCalc,yearsToFix,transfer_techs,vintage)
7536              - transfer_linksDelta(linksModelToCalc,yearsToFix,transfer_techs);
7537   
7538      transfer_linksBuild.l(linksModelToCalc,yearsToFix,transfer_techs,vintage)
7539          $(transfer_linksBuild.l(linksModelToCalc,yearsToFix,transfer_techs,vintage) < 0) = 0;
7540      transfer_linksBuild.fx(linksModelToCalc,yearsToFix,transfer_techs,vintage)
7541          = transfer_linksBuild.l(linksModelToCalc,yearsToFix,transfer_techs,vintage);
7542      transfer_linksDecom.l(linksModelToCalc,yearsToFix,transfer_techs,vintage)
7543          $(transfer_linksDecom.l(linksModelToCalc,yearsToFix,transfer_techs,vintage) < 0) = 0;
7544      transfer_linksDecom.fx(linksModelToCalc,yearsToFix,transfer_techs,vintage)
7545          = transfer_linksDecom.l(linksModelToCalc,yearsToFix,transfer_techs,vintage);
7546      transfer_linksTotal.fx(linksModelToCalc,yearsToFix,transfer_techs,vintage)
7547          = transfer_linksTotal.l(linksModelToCalc,yearsToFix,transfer_techs,vintage);
7548   
7549      accounting_indicator.fx(accNodesModel,accYearsToFix,indicator)
7550          = accounting_indicator.l(accNodesModel,accYearsToFix,indicator);
7551   
7552  * Optimize and log values
7553      if (opti_sense < 0,
7554      solve remix minimizing accounting_objective using mip;
7555      else
7556      solve remix maximizing accounting_objective using mip;
7557      );
7558   
7559      put_utility 'log' / 'Model status ' remix.modelstat:0:0;
7560      put_utility 'log' / 'Objective value ' accounting_objective.l:0:3;
7561   
7562  );
7563   
7567   
7568  * if method is pareto solve the model once and afterwards run multiple points along the pareto front
INCLUDE    C:\Local\REMix\framework\remix\framework\model\source\methods\pareto.gms
7570  * SPDX-FileCopyrightText: Copyright (c) 2023 German Aerospace Center (DLR)
7571  * SPDX-License-Identifier: BSD-3-Clause
7572   
7576   
7577  * if method is mga solve the model once and afterwards maximize the length metric of indicators
INCLUDE    C:\Local\REMix\framework\remix\framework\model\source\methods\mga.gms
7579  * SPDX-FileCopyrightText: Copyright (c) 2023 German Aerospace Center (DLR)
7580  * SPDX-License-Identifier: BSD-3-Clause
7581   
7585   
7586  * if method is iternodes run the model by iterating through all nodesToCalc
INCLUDE    C:\Local\REMix\framework\remix\framework\model\source\methods\iternodes.gms
7588  * SPDX-FileCopyrightText: Copyright (c) 2023 German Aerospace Center (DLR)
7589  * SPDX-License-Identifier: BSD-3-Clause
7590   
7594   
7595  * if postcalc is one write the results gdx
INCLUDE    C:\Local\REMix\framework\remix\framework\model\source\postcalc\definition.gms
7597  * SPDX-FileCopyrightText: Copyright (c) 2023 German Aerospace Center (DLR)
7598  * SPDX-License-Identifier: BSD-3-Clause
7599   
7601   
7602  * ==== indicator accounting ====
7603   
7604  indicator_accounting_detailed(indicator,nodesModelToCalc,yearsToCalc,techs)
7605      =
7606  * == converters ==
7607      sum ((converter_techs(techs),vintage)
7608                  $(converter_availTech(nodesModelToCalc,yearsToCalc,converter_techs,vintage)
7609                      and accounting_converterUnits(indicator,nodesModelToCalc,converter_techs,vintage,"useAnnuity") = 0),
7610          converter_unitsBuild.l(nodesModelToCalc,yearsToCalc,converter_techs,vintage)
7611          * accounting_converterUnits(indicator,nodesModelToCalc,converter_techs,vintage,"perUnitBuild"))
7612   
7613      + sum ((years_a,converter_techs(techs),vintage)
7614                  $(converter_availTech(nodesModelToCalc,years_a,converter_techs,vintage)
7615                      and accounting_converterUnits(indicator,nodesModelToCalc,converter_techs,vintage,"useAnnuity") = 1
7616                      and years_a.val + accounting_converterUnits(indicator,nodesModelToCalc,converter_techs,vintage,"amorTime") > yearsToCalc.val
7617                      and years_a.val <= yearsToCalc.val ),
7618          converter_unitsBuild.l(nodesModelToCalc,years_a,converter_techs,vintage)
7619          * accounting_converterUnits(indicator,nodesModelToCalc,converter_techs,vintage,"perUnitBuild")
7620          * accounting_annuityFactor_converter(indicator,nodesModelToCalc,converter_techs,vintage) )
7621   
7622      + sum ((converter_techs(techs),vintage)
7623                  $converter_usedTech(nodesModelToCalc,yearsToCalc,converter_techs,vintage),
7624          converter_unitsDecom.l(nodesModelToCalc,yearsToCalc,converter_techs,vintage)
7625          * accounting_converterUnits(indicator,nodesModelToCalc,converter_techs,vintage,"perUnitDecom")
7626   
7627          + converter_unitsTotal.l(nodesModelToCalc,yearsToCalc,converter_techs,vintage)
7628          * accounting_converterUnits(indicator,nodesModelToCalc,converter_techs,vintage,"perUnitTotal") )
7629   
7630      + sum ((timeModelToCalc,converter_techs(techs),vintage,activity)
7631                  $converter_usedTechAct(nodesModelToCalc,yearsToCalc,converter_techs,vintage,activity),
7632          converter_activity.l(timeModelToCalc,nodesModelToCalc,yearsToCalc,converter_techs,vintage,activity)
7633          * timeLength(timeModelToCalc)
7634          * accounting_converterActivity(indicator,nodesModelToCalc,converter_techs,vintage,activity,"perActivity") )
7635   
7636      + sum ((timeModelToCalc,converter_techs(techs),vintage)
7637                  $converter_usedTech(nodesModelToCalc,yearsToCalc,converter_techs,vintage),
7638          converter_unitStartups.l(timeModelToCalc,nodesModelToCalc,yearsToCalc,converter_techs,vintage)
7639          * accounting_converterStartup(indicator,nodesModelToCalc,converter_techs,vintage,"perStartup") )
7640   
7641      + sum ((timeModelToCalc,converter_techs(techs),vintage)
7642                  $converter_usedTech(nodesModelToCalc,yearsToCalc,converter_techs,vintage),
7643          converter_rampPos.l(timeModelToCalc,nodesModelToCalc,yearsToCalc,converter_techs,vintage)
7644          * (accounting_converterStartup(indicator,nodesModelToCalc,converter_techs,vintage,"perRamp")
7645              + accounting_converterStartup(indicator,nodesModelToCalc,converter_techs,vintage,"perRampPos"))
7646   
7647          + converter_rampNeg.l(timeModelToCalc,nodesModelToCalc,yearsToCalc,converter_techs,vintage)
7648          * (accounting_converterStartup(indicator,nodesModelToCalc,converter_techs,vintage,"perRamp")
7649              + accounting_converterStartup(indicator,nodesModelToCalc,converter_techs,vintage,"perRampNeg")))
7650   
7651  * == storage ==
7652      + sum ((storage_techs(techs),vintage)
7653                  $(storage_availTech(nodesModelToCalc,yearsToCalc,storage_techs,vintage)
7654                      and accounting_storageUnits(indicator,nodesModelToCalc,storage_techs,vintage,"useAnnuity") = 0),
7655          storage_unitsBuild.l(nodesModelToCalc,yearsToCalc,storage_techs,vintage)
7656          * accounting_storageUnits(indicator,nodesModelToCalc,storage_techs,vintage,"perUnitBuild") )
7657   
7658      + sum ((years_a,storage_techs(techs),vintage)
7659                  $(storage_availTech(nodesModelToCalc,yearsToCalc,storage_techs,vintage)
7660                      and accounting_storageUnits(indicator,nodesModelToCalc,storage_techs,vintage,"useAnnuity") = 1
7661                      and years_a.val + accounting_storageUnits(indicator,nodesModelToCalc,storage_techs,vintage,"amorTime") > yearsToCalc.val
7662                      and years_a.val <= yearsToCalc.val ),
7663          storage_unitsBuild.l(nodesModelToCalc,years_a,storage_techs,vintage)
7664          * accounting_storageUnits(indicator,nodesModelToCalc,storage_techs,vintage,"perUnitBuild")
7665          * accounting_annuityFactor_storage(indicator,nodesModelToCalc,storage_techs,vintage) )
7666   
7667      + sum ((storage_techs(techs),vintage)
7668                  $storage_usedTech(nodesModelToCalc,yearsToCalc,storage_techs,vintage),
7669          storage_unitsDecom.l(nodesModelToCalc,yearsToCalc,storage_techs,vintage)
7670          * accounting_storageUnits(indicator,nodesModelToCalc,storage_techs,vintage,"perUnitDecom")
7671   
7672          + storage_unitsTotal.l(nodesModelToCalc,yearsToCalc,storage_techs,vintage)
7673          * accounting_storageUnits(indicator,nodesModelToCalc,storage_techs,vintage,"perUnitTotal") )
7674   
7675  * == transfer ==
7676      + sum ((linksModel,transfer_techs(techs),vintage)
7677                  $(transfer_availTech(linksModel,yearsToCalc,transfer_techs,vintage)
7678                      and linksModelToCalc(linksModel)
7679                      and transfer_incidenceModel(nodesModelToCalc,linksModel) <> 0
7680                      and accounting_transferLinks(indicator,linksModel,transfer_techs,vintage,"useAnnuity") = 0),
7681          0.5
7682          * transfer_linksBuild.l(linksModel,yearsToCalc,transfer_techs,vintage)
7683          * accounting_transferLinks(indicator,linksModel,transfer_techs,vintage,"perLinkBuild") )
7684   
7685      + sum ((linksModel,years_a,transfer_techs(techs),vintage)
7686                  $(transfer_availTech(linksModel,yearsToCalc,transfer_techs,vintage)
7687                      and linksModelToCalc(linksModel)
7688                      and transfer_incidenceModel(nodesModelToCalc,linksModel) <> 0
7689                      and accounting_transferLinks(indicator,linksModel,transfer_techs,vintage,"useAnnuity") = 1
7690                      and years_a.val + accounting_transferLinks(indicator,linksModel,transfer_techs,vintage,"amorTime") > yearsToCalc.val
7691                      and years_a.val <= yearsToCalc.val ),
7692          0.5
7693          * transfer_linksBuild.l(linksModel,years_a,transfer_techs,vintage)
7694          * accounting_transferLinks(indicator,linksModel,transfer_techs,vintage,"perLinkBuild")
7695          * accounting_annuityFactor_transferLink(indicator,linksModel,transfer_techs,vintage) )
7696   
7697      + sum ((linksModel,transfer_techs(techs),vintage,link_types)
7698                  $(transfer_availTech(linksModel,yearsToCalc,transfer_techs,vintage)
7699                      and linksModelToCalc(linksModel)
7700                      and transfer_incidenceModel(nodesModelToCalc,linksModel) <> 0
7701                      and accounting_transferPerLength(indicator,linksModel,transfer_techs,vintage,link_types,"useAnnuity") = 0 ),
7702          0.5
7703          * transfer_linksBuild.l(linksModel,yearsToCalc,transfer_techs,vintage)
7704          * transfer_lengthParam(linksModel,link_types,"length")
7705          * accounting_transferPerLength(indicator,linksModel,transfer_techs,vintage,link_types,"perLengthBuild") )
7706   
7707      + sum ((linksModel,years_a,transfer_techs(techs),vintage,link_types)
7708                  $(transfer_availTech(linksModel,yearsToCalc,transfer_techs,vintage)
7709                      and linksModelToCalc(linksModel)
7710                      and transfer_incidenceModel(nodesModelToCalc,linksModel) <> 0
7711                      and accounting_transferPerLength(indicator,linksModel,transfer_techs,vintage,link_types,"useAnnuity") = 1
7712                      and years_a.val + accounting_transferPerLength(indicator,linksModel,transfer_techs,vintage,link_types,"amorTime") > yearsToCalc.val
7713                      and years_a.val <= yearsToCalc.val ),
7714          0.5
7715          * transfer_linksBuild.l(linksModel,years_a,transfer_techs,vintage)
7716          * transfer_lengthParam(linksModel,link_types,"length")
7717          * accounting_transferPerLength(indicator,linksModel,transfer_techs,vintage,link_types,"perLengthBuild")
7718          * accounting_annuityFactor_transferDistance(indicator,linksModel,transfer_techs,vintage,link_types) )
7719   
7720      + sum ((linksModel,transfer_techs(techs),vintage)
7721                  $(transfer_usedTech(linksModel,yearsToCalc,transfer_techs,vintage)
7722                      and linksModelToCalc(linksModel)
7723                      and transfer_incidenceModel(nodesModelToCalc,linksModel) <> 0 ),
7724          0.5
7725          * transfer_linksDecom.l(linksModel,yearsToCalc,transfer_techs,vintage)
7726          * accounting_transferLinks(indicator,linksModel,transfer_techs,vintage,"perLinkDecom")
7727   
7728          + 0.5
7729          * transfer_linksTotal.l(linksModel,yearsToCalc,transfer_techs,vintage)
7730          * accounting_transferLinks(indicator,linksModel,transfer_techs,vintage,"perLinkTotal")
7731   
7732          + 0.5
7733          * sum (link_types,
7734              transfer_linksDecom.l(linksModel,yearsToCalc,transfer_techs,vintage)
7735              * transfer_lengthParam(linksModel,link_types,"length")
7736              * accounting_transferPerLength(indicator,linksModel,transfer_techs,vintage,link_types,"perLengthDecom")
7737   
7738              + transfer_linksTotal.l(linksModel,yearsToCalc,transfer_techs,vintage)
7739              * transfer_lengthParam(linksModel,link_types,"length")
7740              * accounting_transferPerLength(indicator,linksModel,transfer_techs,vintage,link_types,"perLengthTotal"))
7741   
7742          + 0.5
7743          * sum (timeModelToCalc,
7744              transfer_flowAlong.l(timeModelToCalc,linksModel,yearsToCalc,transfer_techs,vintage)
7745              * timeLength(timeModelToCalc)
7746              * ( accounting_transferLinks(indicator,linksModel,transfer_techs,vintage,"perFlow")
7747                  + accounting_transferLinks(indicator,linksModel,transfer_techs,vintage,"perFlowAlong"))
7748   
7749              + transfer_flowAgainst.l(timeModelToCalc,linksModel,yearsToCalc,transfer_techs,vintage)
7750              * timeLength(timeModelToCalc)
7751              * ( accounting_transferLinks(indicator,linksModel,transfer_techs,vintage,"perFlow")
7752                  + accounting_transferLinks(indicator,linksModel,transfer_techs,vintage,"perFlowAgainst")))
7753   
7754          + 0.5
7755          * sum ((timeModelToCalc, link_types),
7756              transfer_flowAlong.l(timeModelToCalc,linksModel,yearsToCalc,transfer_techs,vintage)
7757              * timeLength(timeModelToCalc)
7758              * transfer_lengthParam(linksModel,link_types,"length")
7759              * (accounting_transferPerLength(indicator,linksModel,transfer_techs,vintage,link_types,"perFlow")
7760                  + accounting_transferPerLength(indicator,linksModel,transfer_techs,vintage,link_types,"perFlowAlong"))
7761   
7762              + transfer_flowAgainst.l(timeModelToCalc,linksModel,yearsToCalc,transfer_techs,vintage)
7763              * timeLength(timeModelToCalc)
7764              * transfer_lengthParam(linksModel,link_types,"length")
7765              * (accounting_transferPerLength(indicator,linksModel,transfer_techs,vintage,link_types,"perFlow")
7766                  + accounting_transferPerLength(indicator,linksModel,transfer_techs,vintage,link_types,"perFlowAgainst"))))
7767   
7768   
7769  * == sources / sinks ==
7770      + sum ((timeModelToCalc,sourcesink_techs(techs),commodity)
7771              $sourcesink_enabled(nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity),
7772          sourcesink_flow.l(timeModelToCalc,nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity)
7773          * timeLength(timeModelToCalc)
7774          * accounting_sourcesinkFlow(indicator,nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity,"perFlow"))
7775      ;
7776   
7777   
7778  * ==== full set of main indicators ====
7779   
7780  indicator_accounting(accNodesModel,accYears,indicator)
7781      $sum((accNodesModel_a,accYears_a,indicator_a)
7782              $compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a), 1)
7783      =
7784      + sum((accNodesModel_a,accYears_a,indicator_a)
7785              $(compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
7786                  and variableIndicators(accNodesModel_a,accYears_a,indicator_a)),
7787          compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
7788          * accounting_indicator.l(accNodesModel_a,accYears_a,indicator_a))
7789   
7790      + sum((accNodesModel_a,accYears_a,indicator_a)
7791              $(compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)),
7792          compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
7793          * (sum((nodesModelToCalc,yearsToCalc,techs)
7794                  $(sameas(accNodesModel_a, nodesModelToCalc)
7795                      and sameas(accYears_a, yearsToCalc)),
7796                  indicator_accounting_detailed(indicator_a,nodesModelToCalc,yearsToCalc,techs))))
7797      ;
7798   
7799  indicator_accounting_comp(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
7800      $compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
7801      =
7802          compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
7803          * accounting_indicator.l(accNodesModel_a,accYears_a,indicator_a)
7804              $variableIndicators(accNodesModel_a,accYears_a,indicator_a)
7805   
7806          + compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
7807          * (sum((nodesModelToCalc,yearsToCalc,techs)
7808                  $(sameas(accNodesModel_a, nodesModelToCalc)
7809                      and sameas(accYears_a, yearsToCalc)),
7810                  indicator_accounting_detailed(indicator_a,nodesModelToCalc,yearsToCalc,techs)))
7811      ;
7812   
7813  indicator_accounting_ref(accNodesModel,accYears,indicator)
7814      $accounting_indicator.l(accNodesModel,accYears,indicator)
7815      = accounting_indicator.l(accNodesModel,accYears,indicator);
7816   
7817  * ==== link-specific indicator accounting ====
7818   
7819  indicator_accounting_links(indicator,nodesModelToCalc,nodesModelToCalc_a,linksModelToCalc,yearsToCalc,techs)
7820      $(transfer_incidenceModel(nodesModelToCalc,linksModelToCalc) < 0
7821          and transfer_incidenceModel(nodesModelToCalc_a,linksModelToCalc) > 0)
7822      =
7823      sum ((transfer_techs(techs),vintage)
7824                  $(transfer_availTech(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
7825                      and accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"useAnnuity") = 0),
7826          transfer_linksBuild.l(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
7827          * accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"perLinkBuild") )
7828   
7829      + sum ((years_a,transfer_techs(techs),vintage)
7830                  $(transfer_availTech(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
7831                      and accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"useAnnuity") = 1
7832                      and years_a.val + accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"amorTime") > yearsToCalc.val
7833                      and years_a.val <= yearsToCalc.val ),
7834          transfer_linksBuild.l(linksModelToCalc,years_a,transfer_techs,vintage)
7835          * accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"perLinkBuild")
7836          * accounting_annuityFactor_transferLink(indicator,linksModelToCalc,transfer_techs,vintage) )
7837   
7838      + sum ((transfer_techs(techs),vintage,link_types)
7839                  $(transfer_availTech(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
7840                      and accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"useAnnuity") = 0 ),
7841          transfer_linksBuild.l(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
7842          * transfer_lengthParam(linksModelToCalc,link_types,"length")
7843          * accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"perLengthBuild") )
7844   
7845      + sum ((years_a,transfer_techs(techs),vintage,link_types)
7846                  $(transfer_availTech(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
7847                      and accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"useAnnuity") = 1
7848                      and years_a.val + accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"amorTime") > yearsToCalc.val
7849                      and years_a.val <= yearsToCalc.val ),
7850          transfer_linksBuild.l(linksModelToCalc,years_a,transfer_techs,vintage)
7851          * transfer_lengthParam(linksModelToCalc,link_types,"length")
7852          * accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"perLengthBuild")
7853          * accounting_annuityFactor_transferDistance(indicator,linksModelToCalc,transfer_techs,vintage,link_types) )
7854   
7855      + sum ((transfer_techs(techs),vintage)
7856                  $(transfer_usedTech(linksModelToCalc,yearsToCalc,transfer_techs,vintage)),
7857          transfer_linksDecom.l(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
7858          * accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"perLinkDecom")
7859   
7860          + transfer_linksTotal.l(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
7861          * accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"perLinkTotal")
7862   
7863          + sum (link_types,
7864              transfer_linksDecom.l(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
7865              * transfer_lengthParam(linksModelToCalc,link_types,"length")
7866              * accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"perLengthDecom")
7867   
7868              + transfer_linksTotal.l(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
7869              * transfer_lengthParam(linksModelToCalc,link_types,"length")
7870              * accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"perLengthTotal"))
7871   
7872          + sum (timeModelToCalc,
7873              transfer_flowAlong.l(timeModelToCalc,linksModelToCalc,yearsToCalc,transfer_techs,vintage)
7874              * timeLength(timeModelToCalc)
7875              * ( accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"perFlow")
7876                  + accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"perFlowAlong"))
7877   
7878              + transfer_flowAgainst.l(timeModelToCalc,linksModelToCalc,yearsToCalc,transfer_techs,vintage)
7879              * timeLength(timeModelToCalc)
7880              * ( accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"perFlow")
7881                  + accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"perFlowAgainst")))
7882   
7883          + sum ((timeModelToCalc, link_types),
7884              transfer_flowAlong.l(timeModelToCalc,linksModelToCalc,yearsToCalc,transfer_techs,vintage)
7885              * timeLength(timeModelToCalc)
7886              * transfer_lengthParam(linksModelToCalc,link_types,"length")
7887              * (accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"perFlow")
7888                  + accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"perFlowAlong"))
7889   
7890              + transfer_flowAgainst.l(timeModelToCalc,linksModelToCalc,yearsToCalc,transfer_techs,vintage)
7891              * timeLength(timeModelToCalc)
7892              * transfer_lengthParam(linksModelToCalc,link_types,"length")
7893              * (accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"perFlow")
7894                  + accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"perFlowAgainst")))
7895      );
7896   
7897   
7898  * == converter capacities ==
7899   
7900  converter_ratedInput(converter_techs,vintage,commodity)
7901      $(converter_techParam(converter_techs,vintage,"lifeTime") > 0)
7902      = smin(activity$converter_usedAct(converter_techs,vintage,activity),
7903              converter_coefficient(converter_techs,vintage,activity,commodity,"coefficient"));
7904  converter_ratedInput(converter_techs,vintage,commodity)
7905      $(converter_ratedInput(converter_techs,vintage,commodity) > 0)
7906      = 0;
7907   
7908  converter_ratedOutput(converter_techs,vintage,commodity)
7909      $(converter_techParam(converter_techs,vintage,"lifeTime") > 0)
7910      = smax(activity$converter_usedAct(converter_techs,vintage,activity),
7911              converter_coefficient(converter_techs,vintage,activity,commodity,"coefficient"));
7912  converter_ratedOutput(converter_techs,vintage,commodity)
7913      $(converter_ratedOutput(converter_techs,vintage,commodity) < 0)
7914      = 0;
7915   
7916  converter_ratedOutput_min(nodesModelToCalc,years,converter_techs(techs),commodity)
7917      $sum(vintage$(converter_usedTech(nodesModelToCalc,years,converter_techs,vintage)
7918          and converter_ratedOutput(converter_techs,vintage,commodity)), 1)
7919      = smin(vintage$(converter_usedTech(nodesModelToCalc,years,converter_techs,vintage)
7920              and converter_ratedOutput(converter_techs,vintage,commodity)),
7921          converter_ratedOutput(converter_techs,vintage,commodity));
7922   
7923  converter_ratedOutput_max(nodesModelToCalc,years,converter_techs(techs),commodity)
7924      $sum(vintage$(converter_usedTech(nodesModelToCalc,years,converter_techs,vintage)
7925          and converter_ratedOutput(converter_techs,vintage,commodity)), 1)
7926      = smax(vintage$(converter_usedTech(nodesModelToCalc,years,converter_techs,vintage)
7927              and converter_ratedOutput(converter_techs,vintage,commodity)),
7928          converter_ratedOutput(converter_techs,vintage,commodity));
7929   
7930  converter_units_ext(map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,years),converter_techs(techs),vintage,"build")
7931      = converter_unitsBuild.l(nodesModelToCalc,years,converter_techs,vintage);
7932   
7933  converter_units_ext(map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,years),converter_techs(techs),vintage,"decom")
7934      = converter_unitsDecom.l(nodesModelToCalc,years,converter_techs,vintage);
7935   
7936  converter_units_ext(map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,years),converter_techs(techs),vintage,"total")
7937      = converter_unitsTotal.l(nodesModelToCalc,years,converter_techs,vintage);
7938   
7939  converter_caps_ext(map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,years),converter_techs(techs),vintage,commodity,capType)
7940      $(converter_ratedOutput(converter_techs,vintage,commodity))
7941      = converter_units_ext(accNodesModel,nodesModelToCalc,accYears,years,techs,vintage,capType)
7942          * converter_ratedOutput(converter_techs,vintage,commodity);
7943   
7944  converter_caps_ext(map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,years),converter_techs(techs),vintage,commodity,"lowerLimit")
7945      $(converter_usedTech(nodesModelToCalc,years,converter_techs,vintage)
7946          and converter_capacityParam(nodesModelToCalc,years,converter_techs,"unitsLowerLimit") > 0
7947          and converter_ratedOutput_min(nodesModelToCalc,years,converter_techs,commodity))
7948      = converter_capacityParam(nodesModelToCalc,years,converter_techs,"unitsLowerLimit")
7949          * converter_ratedOutput_min(nodesModelToCalc,years,converter_techs,commodity);
7950   
7951  converter_caps_ext(map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,years),converter_techs(techs),vintage,commodity,"upperLimit")
7952      $(converter_usedTech(nodesModelToCalc,years,converter_techs,vintage)
7953          and converter_capacityParam(nodesModelToCalc,years,converter_techs,"unitsUpperLimit") < inf
7954          and converter_ratedOutput_min(nodesModelToCalc,years,converter_techs,commodity))
7955      = converter_capacityParam(nodesModelToCalc,years,converter_techs,"unitsUpperLimit")
7956          * converter_ratedOutput_max(nodesModelToCalc,years,converter_techs,commodity);
7957   
7958  converter_caps(accNodesModel,accYears,converter_techs(techs),commodity,capType)
7959      = sum((nodesModelToCalc,years,vintage)
7960              $(map_accNodesPostCalc(accNodesModel,nodesModelToCalc)
7961                  and map_accYearsPostCalc(accYears,years)),
7962          converter_caps_ext(accNodesModel,nodesModelToCalc,accYears,years,converter_techs,vintage,commodity,capType));
7963  option clear = converter_caps_ext;
7964   
7965  converter_units(accNodesModel,accYears,converter_techs(techs),vintage,capType)
7966      = sum((nodesModelToCalc,years)
7967              $(map_accNodesPostCalc(accNodesModel,nodesModelToCalc)
7968                  and map_accYearsPostCalc(accYears,years)),
7969          converter_units_ext(accNodesModel,nodesModelToCalc,accYears,years,converter_techs,vintage,capType));
7970  option clear = converter_units_ext;
7971   
7972   
7973  * ==== transfer capacities ====
7974   
7975  max_transfer_coefficient(transfer_techs(techs),commodity)
7976          $(smax(vintage, transfer_coefficient(transfer_techs,vintage,commodity,"coefficient")) > 0)
7977          = smax(vintage, transfer_coefficient(transfer_techs,vintage,commodity,"coefficient"));
7978   
7979  min_transfer_coefficient(transfer_techs(techs),commodity)
7980          $(smin(vintage, transfer_coefficient(transfer_techs,vintage,commodity,"coefficient")) > 0)
7981          = smin(vintage, transfer_coefficient(transfer_techs,vintage,commodity,"coefficient"));
7982   
7983   
7984  transfer_links(linksModel,years,transfer_techs,vintage,"build")
7985      = transfer_linksBuild.l(linksModel,years,transfer_techs,vintage);
7986   
7987  transfer_links(linksModel,years,transfer_techs,vintage,"decom")
7988      = transfer_linksDecom.l(linksModel,years,transfer_techs,vintage);
7989   
7990  transfer_links(linksModel,years,transfer_techs,vintage,"total")
7991      = transfer_linksTotal.l(linksModel,years,transfer_techs,vintage);
7992   
7993  transfer_caps(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,years,transfer_techs(techs),commodity,capType)
7994      $(transfer_incidenceModel(nodesModelToCalc_start,linksModel) < 0
7995          and transfer_incidenceModel(nodesModelToCalc_end,linksModel) > 0)
7996      = sum(vintage,
7997          transfer_links(linksModel,years,transfer_techs,vintage,capType)
7998          * transfer_coefficient(transfer_techs,vintage,commodity,"coefficient"));
7999   
8000  transfer_caps(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,years,transfer_techs(techs),commodity,"lowerLimit")
8001      $(transfer_linksParam(linksModel,years,transfer_techs,'linksLowerLimit') > 0
8002          and transfer_incidenceModel(nodesModelToCalc_start,linksModel) < 0
8003          and transfer_incidenceModel(nodesModelToCalc_end,linksModel) > 0
8004          and sum(vintage$(transfer_usedTech(linksModel,years,transfer_techs,vintage)
8005                              and transfer_coefficient(transfer_techs,vintage,commodity,"coefficient")), 1))
8006      = transfer_linksParam(linksModel,years,transfer_techs,'linksLowerLimit')
8007          * min_transfer_coefficient(transfer_techs,commodity);
8008   
8009  transfer_caps(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,years,transfer_techs(techs),commodity,"upperLimit")
8010      $(transfer_linksParam(linksModel,years,transfer_techs,'linksUpperLimit') < inf
8011          and transfer_incidenceModel(nodesModelToCalc_start,linksModel) < 0
8012          and transfer_incidenceModel(nodesModelToCalc_end,linksModel) > 0
8013          and sum(vintage$(transfer_usedTech(linksModel,years,transfer_techs,vintage)
8014                              and transfer_coefficient(transfer_techs,vintage,commodity,"coefficient")), 1))
8015      = transfer_linksParam(linksModel,years,transfer_techs,'linksUpperLimit')
8016          * max_transfer_coefficient(transfer_techs,commodity);
8017   
8018   
8019  * ==== transfer flows ====
8020   
8021  transfer_flows(timeModelToCalc,nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs(techs),commodity)
8022      $(transfer_incidenceModel(nodesModelToCalc_start,linksModel) < 0
8023          and transfer_incidenceModel(nodesModelToCalc_end,linksModel) > 0)
8024      = sum(vintage,
8025          ( transfer_flowAlong.l(timeModelToCalc,linksModel,yearsToCalc,transfer_techs,vintage)
8026              - transfer_flowAgainst.l(timeModelToCalc,linksModel,yearsToCalc,transfer_techs,vintage) )
8027          * timeLength(timeModelToCalc)
8028          * transfer_coefficient(transfer_techs,vintage,commodity,"coefficient"));
8029   
8030  transfer_flows_annual(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs(techs),commodity,"netto")
8031      = sum(timeModelToCalc,
8032          transfer_flows(timeModelToCalc,nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs,commodity));
8033   
8034  transfer_flows_annual(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs(techs),commodity,"positive")
8035      = sum(timeModelToCalc
8036              $(transfer_flows(timeModelToCalc,nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs,commodity) > 0),
8037          transfer_flows(timeModelToCalc,nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs,commodity));
8038   
8039  transfer_flows_annual(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs(techs),commodity,"negative")
8040      = sum(timeModelToCalc
8041              $(transfer_flows(timeModelToCalc,nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs,commodity) < 0),
8042          transfer_flows(timeModelToCalc,nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs,commodity));
8043   
8044  transfer_flows_annual(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs(techs),commodity,"brutto")
8045      = transfer_flows_annual(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs,commodity,"positive")
8046          - transfer_flows_annual(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs,commodity,"negative");
8047   
8048  transfer_flows_annual(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs(techs),commodity,"flh")
8049      $(transfer_flows_annual(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs,commodity,"brutto") > 0
8050          and transfer_caps(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs,commodity,"total") > 0)
8051      = transfer_flows_annual(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs,commodity,"brutto")
8052          / transfer_caps(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs,commodity,"total");
8053   
8054  transfer_losses(timeModelToCalc,nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs(techs),commodity)
8055      $(transfer_incidenceModel(nodesModelToCalc_start,linksModel) < 0
8056          and transfer_incidenceModel(nodesModelToCalc_end,linksModel) > 0)
8057      = -1 * abs(sum(vintage,
8058          ( transfer_flowAlong.l(timeModelToCalc,linksModel,yearsToCalc,transfer_techs,vintage)
8059              - transfer_flowAgainst.l(timeModelToCalc,linksModel,yearsToCalc,transfer_techs,vintage) )
8060          * ( transfer_coefPerFlow(transfer_techs,vintage,commodity,"coefPerFlow")
8061              + sum(link_types,
8062                  transfer_coefPerLength(transfer_techs,vintage,commodity,link_types,"coefPerLength")
8063                  * transfer_lengthParam(linksModel,link_types,"length")))))
8064          * timeLength(timeModelToCalc);
8065   
8066  transfer_losses_annual(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs(techs),commodity,"netto")
8067      = sum(timeModelToCalc,
8068          transfer_losses(timeModelToCalc,nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs,commodity));
8069   
8070   
8071  * ==== storage capacities ====
8072   
8073  storage_size_max(nodesModelToCalc,years,storage_techs(techs),commodity)
8074      $sum(vintage$(storage_usedTech(nodesModelToCalc,years,storage_techs,vintage)
8075              and storage_usedCom(storage_techs,vintage,commodity)
8076              and storage_sizeParam(storage_techs,vintage,commodity,"size")), 1)
8077      = smax(vintage$(storage_usedTech(nodesModelToCalc,years,storage_techs,vintage)
8078              and storage_usedCom(storage_techs,vintage,commodity)
8079              and storage_sizeParam(storage_techs,vintage,commodity,"size")),
8080          storage_sizeParam(storage_techs,vintage,commodity,"size"));
8081   
8082  storage_size_min(nodesModelToCalc,years,storage_techs(techs),commodity)
8083      $sum(vintage$(storage_usedTech(nodesModelToCalc,years,storage_techs,vintage)
8084              and storage_usedCom(storage_techs,vintage,commodity)
8085              and storage_sizeParam(storage_techs,vintage,commodity,"size")), 1)
8086      = smin(vintage$(storage_usedTech(nodesModelToCalc,years,storage_techs,vintage)
8087              and storage_usedCom(storage_techs,vintage,commodity)
8088              and storage_sizeParam(storage_techs,vintage,commodity,"size")),
8089          storage_sizeParam(storage_techs,vintage,commodity,"size"));
8090   
8091  storage_units_ext(map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,years),storage_techs(techs),vintage,"build")
8092      $storage_usedTech(nodesModelToCalc,years,storage_techs,vintage)
8093      = storage_unitsBuild.l(nodesModelToCalc,years,storage_techs,vintage);
8094   
8095  storage_units_ext(map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,years),storage_techs(techs),vintage,"decom")
8096      $storage_usedTech(nodesModelToCalc,years,storage_techs,vintage)
8097      = storage_unitsDecom.l(nodesModelToCalc,years,storage_techs,vintage);
8098   
8099  storage_units_ext(map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,years),storage_techs(techs),vintage,"total")
8100      $storage_usedTech(nodesModelToCalc,years,storage_techs,vintage)
8101      = storage_unitsTotal.l(nodesModelToCalc,years,storage_techs,vintage);
8102   
8103  storage_caps_ext(map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,years),storage_techs(techs),vintage,commodity,capType)
8104      $storage_sizeParam(storage_techs,vintage,commodity,"size")
8105      = storage_units_ext(accNodesModel,nodesModelToCalc,accYears,years,storage_techs,vintage,capType)
8106          * storage_sizeParam(storage_techs,vintage,commodity,"size");
8107   
8108  storage_caps_ext(map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,years),storage_techs(techs),vintage,commodity,"lowerLimit")
8109      $(storage_usedTech(nodesModelToCalc,years,storage_techs,vintage)
8110          and storage_reservoirParam(nodesModelToCalc,years,storage_techs,"unitsLowerLimit") > 0
8111          and storage_size_min(nodesModelToCalc,years,storage_techs,commodity))
8112      = storage_reservoirParam(nodesModelToCalc,years,storage_techs,"unitsLowerLimit")
8113          * storage_size_min(nodesModelToCalc,years,storage_techs,commodity);
8114   
8115  storage_caps_ext(map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,years),storage_techs(techs),vintage,commodity,"upperLimit")
8116      $(storage_usedTech(nodesModelToCalc,years,storage_techs,vintage)
8117          and storage_reservoirParam(nodesModelToCalc,years,storage_techs,"unitsUpperLimit") < inf
8118          and storage_size_max(nodesModelToCalc,years,storage_techs,commodity))
8119      = storage_reservoirParam(nodesModelToCalc,years,storage_techs,"unitsUpperLimit")
8120          * storage_size_max(nodesModelToCalc,years,storage_techs,commodity);
8121   
8122  storage_caps_ext(map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,years),storage_techs(techs),vintage,commodity,"total_degraded")
8123      $(storage_usedCom(storage_techs,vintage,commodity)
8124          and (storage_techParam(storage_techs,vintage,"annualDegradation") > 0
8125               or storage_techParam(storage_techs,vintage,"usageDegradation")))
8126      = sum((degradation_states,yearsCom), (storage_degradationParam(storage_techs,vintage,degradation_states,"remainingCapacity")
8127                                      - (years.val - yearsCom.val) * storage_techParam(storage_techs,vintage,"annualDegradation"))
8128                                      * storage_unitsStateTracker.l(nodesModelToCalc,years,yearsCom,storage_techs,vintage,degradation_states)
8129                                      * storage_sizeParam(storage_techs,vintage,commodity,"size"));
8130   
8131  storage_caps(accNodesModel,accYears,storage_techs(techs),commodity,capType)
8132      = sum((nodesModelToCalc,years,vintage)
8133              $(map_accNodesPostCalc(accNodesModel,nodesModelToCalc)
8134                  and map_accYearsPostCalc(accYears,years)),
8135          storage_caps_ext(accNodesModel,nodesModelToCalc,accYears,years,storage_techs,vintage,commodity,capType));
8136  option clear = storage_caps_ext;
8137   
8138  storage_units(accNodesModel,accYears,storage_techs(techs),vintage,capType)
8139      = sum((nodesModelToCalc,years)
8140              $(map_accNodesPostCalc(accNodesModel,nodesModelToCalc)
8141                  and map_accYearsPostCalc(accYears,years)),
8142          storage_units_ext(accNodesModel,nodesModelToCalc,accYears,years,storage_techs,vintage,capType));
8143  option clear = storage_units_ext;
8144   
8145   
8146  * ==== storage levels and flows ====
8147   
8148  storage_flows_ext(timeModelToCalc,map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,yearsToCalc),storage_techs(techs),vintage,commodity)
8149      $(storage_usedTech(nodesModelToCalc,yearsToCalc,storage_techs,vintage) and balance_techComm(storage_techs,commodity))
8150      = storage_level.l(timeModelToCalc,nodesModelToCalc,yearsToCalc,storage_techs,vintage,commodity)
8151          - storage_level.l(timeModelToCalc--1,nodesModelToCalc,yearsToCalc,storage_techs,vintage,commodity)
8153      + storage_losses.l(timeModelToCalc,nodesModelToCalc,yearsToCalc,storage_techs,vintage,commodity)
8154          * timeLength(timeModelToCalc)
8156      ;
8157   
8158  storage_flows(timeModelToCalc,accNodesModel,accYears,storage_techs(techs),commodity)
8159      = sum((nodesModelToCalc,yearsToCalc,vintage)
8160              $(storage_usedTech(nodesModelToCalc,yearsToCalc,storage_techs,vintage) and balance_techComm(storage_techs,commodity)),
8161          storage_flows_ext(timeModelToCalc,accNodesModel,nodesModelToCalc,accYears,yearsToCalc,storage_techs,vintage,commodity));
8162  option clear = storage_flows_ext;
8163   
8164  storage_level_out_ext(timeModelToCalc,map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,yearsToCalc),storage_techs(techs),vintage,commodity)
8165      $(storage_usedTech(nodesModelToCalc,yearsToCalc,storage_techs,vintage) and balance_techComm(storage_techs,commodity))
8166      = storage_level.l(timeModelToCalc,nodesModelToCalc,yearsToCalc,storage_techs,vintage,commodity);
8167   
8168  storage_level_out(timeModelToCalc,accNodesModel,accYears,storage_techs(techs),commodity)
8169      = sum((nodesModelToCalc,yearsToCalc,vintage)
8170              $(storage_usedTech(nodesModelToCalc,yearsToCalc,storage_techs,vintage) and balance_techComm(storage_techs,commodity)),
8171          storage_level_out_ext(timeModelToCalc,accNodesModel,nodesModelToCalc,accYears,yearsToCalc,storage_techs,vintage,commodity));
8172  option clear = storage_level_out_ext;
8173   
8174  storage_flows_annual(accNodesModel,accYears,storage_techs(techs),commodity,"netto")
8175      = sum(timeModelToCalc,
8176          storage_flows(timeModelToCalc,accNodesModel,accYears,storage_techs,commodity));
8177   
8178  storage_flows_annual(accNodesModel,accYears,storage_techs(techs),commodity,"positive")
8179      = sum(timeModelToCalc
8180              $(storage_flows(timeModelToCalc,accNodesModel,accYears,storage_techs,commodity) > 0),
8181          storage_flows(timeModelToCalc,accNodesModel,accYears,storage_techs,commodity));
8182   
8183  storage_flows_annual(accNodesModel,accYears,storage_techs(techs),commodity,"negative")
8184      = sum(timeModelToCalc
8185              $(storage_flows(timeModelToCalc,accNodesModel,accYears,storage_techs,commodity) < 0),
8186          storage_flows(timeModelToCalc,accNodesModel,accYears,storage_techs,commodity));
8187   
8188  storage_flows_annual(accNodesModel,accYears,storage_techs(techs),commodity,"brutto")
8189      = storage_flows_annual(accNodesModel,accYears,storage_techs,commodity,"positive")
8190          + storage_flows_annual(accNodesModel,accYears,storage_techs,commodity,"negative");
8191   
8192  storage_flows_annual(accNodesModel,accYears,storage_techs(techs),commodity,"flh")
8193      $(storage_flows_annual(accNodesModel,accYears,storage_techs,commodity,"brutto") > 0
8194          and storage_caps(accNodesModel,accYears,storage_techs,commodity,"total") > 0)
8195      = storage_flows_annual(accNodesModel,accYears,storage_techs,commodity,"brutto")
8196          / storage_caps(accNodesModel,accYears,storage_techs,commodity,"total");
8197   
8198  storage_losses_out(timeModelToCalc,accNodesModel,accYears,storage_techs(techs),commodity)
8199      = sum((nodesModelToCalc,yearsToCalc,vintage)
8200              $(storage_losses.l(timeModelToCalc,nodesModelToCalc,yearsToCalc,storage_techs,vintage,commodity)
8201                  and map_accNodesPostCalc(accNodesModel,nodesModelToCalc)
8202                  and map_accYearsPostCalc(accYears,yearsToCalc)),
8203          storage_losses.l(timeModelToCalc,nodesModelToCalc,yearsToCalc,storage_techs,vintage,commodity)
8204          * timeLength(timeModelToCalc));
8205   
8206  storage_losses_annual(accNodesModel,accYears,storage_techs(techs),commodity,"netto")
8207      = sum(timeModelToCalc,
8208          storage_losses_out(timeModelToCalc,accNodesModel,accYears,storage_techs,commodity));
8209   
8210   
8211  * == commodity balance ==
8212   
8213  commodity_balance_ext(timeModelToCalc,map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,yearsToCalc),converter_techs(techs),vintage,commodity)
8214      $(converter_usedTech(nodesModelToCalc,yearsToCalc,converter_techs,vintage)
8215          and balance_usedConverter(nodesModelToCalc,yearsToCalc,commodity))
8216      = sum((activity)
8217              $(converter_coefficientProfile(timeModelToCalc,nodesModelToCalc,yearsToCalc,converter_techs,vintage,activity,commodity)),
8218          converter_activity.l(timeModelToCalc,nodesModelToCalc,yearsToCalc,converter_techs,vintage,activity)
8219              * timeLength(timeModelToCalc)
8220              * converter_coefficientProfile(timeModelToCalc,nodesModelToCalc,yearsToCalc,converter_techs,vintage,activity,commodity)
8221          + converter_unitsUsingActivity_MIP.l(timeModelToCalc,nodesModelToCalc,yearsToCalc,converter_techs,vintage,activity)
8222              * timeLength(timeModelToCalc)
8223              * converter_coefficient(converter_techs,vintage,activity,commodity,"constant"));
8224   
8225  commodity_balance_ext(timeModelToCalc,map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,yearsToCalc),storage_techs(techs),vintage,commodity)
8226      $(storage_usedTech(nodesModelToCalc,yearsToCalc,storage_techs,vintage)
8227          and storage_sizeParam(storage_techs,vintage,commodity,"size"))
8228      = commodity_balance_ext(timeModelToCalc,accNodesModel,nodesModelToCalc,accYears,yearsToCalc,storage_techs,vintage,commodity)
8229      + storage_level.l(timeModelToCalc--1,nodesModelToCalc,yearsToCalc,storage_techs,vintage,commodity)
8230          - storage_level.l(timeModelToCalc,nodesModelToCalc,yearsToCalc,storage_techs,vintage,commodity)
8231      - storage_losses.l(timeModelToCalc,nodesModelToCalc,yearsToCalc,storage_techs,vintage,commodity)
8232      * timeLength(timeModelToCalc);
8233   
8234  commodity_balance_ext(timeModelToCalc,map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,yearsToCalc),sourcesink_techs(techs),vintage,commodity)
8235      $(sourcesink_enabled(nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity)
8236          and sameas(yearsToCalc,vintage))
8237      = commodity_balance_ext(timeModelToCalc,accNodesModel,nodesModelToCalc,accYears,yearsToCalc,sourcesink_techs,vintage,commodity)
8238      + sourcesink_flow.l(timeModelToCalc,nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity)
8239      * timeLength(timeModelToCalc);
8240   
8241  commodity_balance_ext(timeModelToCalc,map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,yearsToCalc),transfer_techs(techs),vintage,commodity)
8242      $sum((linksModel)
8243          $(transfer_incidenceModel(nodesModelToCalc,linksModel)
8244                  and transfer_usedTech(linksModel,yearsToCalc,transfer_techs,vintage)
8245                  and transfer_coefficient(transfer_techs,vintage,commodity,"coefficient")), 1)
8246      = commodity_balance_ext(timeModelToCalc,accNodesModel,nodesModelToCalc,accYears,yearsToCalc,transfer_techs,vintage,commodity)
8247      + sum((linksModel)
8248              $(transfer_incidenceModel(nodesModelToCalc,linksModel)
8249                  and transfer_usedTech(linksModel,yearsToCalc,transfer_techs,vintage)
8250                  and transfer_coefficient(transfer_techs,vintage,commodity,"coefficient")),
8251   
8252              (transfer_flowAlong.l(timeModelToCalc,linksModel,yearsToCalc,transfer_techs,vintage)
8253                      $(transfer_incidenceModel(nodesModelToCalc,linksModel) > 0)
8254                + transfer_flowAgainst.l(timeModelToCalc,linksModel,yearsToCalc,transfer_techs,vintage)
8255                      $(transfer_incidenceModel(nodesModelToCalc,linksModel) < 0))
8256              * timeLength(timeModelToCalc)
8257              * transfer_coefficient(transfer_techs,vintage,commodity,"coefficient")
8258   
8259              - (transfer_flowAlong.l(timeModelToCalc,linksModel,yearsToCalc,transfer_techs,vintage)
8260                      $(transfer_incidenceModel(nodesModelToCalc,linksModel) < 0)
8261                + transfer_flowAgainst.l(timeModelToCalc,linksModel,yearsToCalc,transfer_techs,vintage)
8262                      $(transfer_incidenceModel(nodesModelToCalc,linksModel) > 0))
8263              * timeLength(timeModelToCalc)
8264              * transfer_coefficient(transfer_techs,vintage,commodity,"coefficient")
8265   
8266              + 0.5 * ((transfer_flowAlong.l(timeModelToCalc,linksModel,yearsToCalc,transfer_techs,vintage)
8267                          $(transfer_incidenceModel(nodesModelToCalc,linksModel) <> 0)
8268                      + transfer_flowAgainst.l(timeModelToCalc,linksModel,yearsToCalc,transfer_techs,vintage)
8269                          $(transfer_incidenceModel(nodesModelToCalc,linksModel) <> 0))
8270                      * timeLength(timeModelToCalc)
8271                      * ( transfer_coefPerFlow(transfer_techs,vintage,commodity,"coefPerFlow")
8272                          + sum(link_types,
8273                              transfer_coefPerLength(transfer_techs,vintage,commodity,link_types,"coefPerLength")
8274                              * transfer_lengthParam(linksModel,link_types,"length")))))
8275      ;
8276   
8277  commodity_balance(timeModelToCalc,accNodesModel,accYears,balance_techComm(techs,commodity))
8278      = sum((nodesModelToCalc,yearsToCalc,vintage)
8279              $(commodity_balance_ext(timeModelToCalc,accNodesModel,nodesModelToCalc,accYears,yearsToCalc,techs,vintage,commodity)
8280                  and map_accNodesPostCalc(accNodesModel,nodesModelToCalc)
8281                  and map_accYearsPostCalc(accYears,yearsToCalc)),
8282          commodity_balance_ext(timeModelToCalc,accNodesModel,nodesModelToCalc,accYears,yearsToCalc,techs,vintage,commodity));
8283  option clear = commodity_balance_ext;
8284   
8285   
8286  * ==== annual commodity sums ====
8287   
8288  commodity_balance_annual(accNodesModel,accYears,techs,commodity,"netto")
8289      = sum(timeModelToCalc,
8290          commodity_balance(timeModelToCalc,accNodesModel,accYears,techs,commodity));
8291   
8292  commodity_balance_annual(accNodesModel,accYears,techs,commodity,"positive")
8293      = sum(timeModelToCalc
8294              $(commodity_balance(timeModelToCalc,accNodesModel,accYears,techs,commodity) > 0),
8295          commodity_balance(timeModelToCalc,accNodesModel,accYears,techs,commodity));
8296   
8297  commodity_balance_annual(accNodesModel,accYears,techs,commodity,"negative")
8298      = sum(timeModelToCalc
8299              $(commodity_balance(timeModelToCalc,accNodesModel,accYears,techs,commodity) < 0),
8300          commodity_balance(timeModelToCalc,accNodesModel,accYears,techs,commodity));
8301   
8302  commodity_balance_annual(accNodesModel,accYears,techs,commodity,"brutto")
8303      = commodity_balance_annual(accNodesModel,accYears,techs,commodity,"positive")
8304          - commodity_balance_annual(accNodesModel,accYears,techs,commodity,"negative");
8305   
8306  commodity_balance_annual(accNodesModel,accYears,techs,commodity,"flh")
8307      $(commodity_balance_annual(accNodesModel,accYears,techs,commodity,"brutto") > 0
8308          and converter_caps(accNodesModel,accYears,techs,commodity,"total") > 0 )
8309      = commodity_balance_annual(accNodesModel,accYears,techs,commodity,"brutto")
8310          / converter_caps(accNodesModel,accYears,techs,commodity,"total");
8311   
8312   
8313  * ==== marginal information ====
8314   
8315  marginals_balance(timeModelToCalc,nodesModelToCalc,yearsToCalc,commodity)
8316    $balance_usedBalance(nodesModelToCalc,yearsToCalc,commodity)
8317    =
8318    Eq_balance_commodities.m(timeModelToCalc,nodesModelToCalc,yearsToCalc,commodity);
8319   
8320  marginals_sourcesink_profile(timeModelToCalc,nodesModelToCalc,yearsToCalc,sourcesink_techs(techs),commodity)
8321      $( sourcesink_flow.m(timeModelToCalc,nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity) <> 0 )
8322      =
8323      sourcesink_flow.m(timeModelToCalc,nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity);
8324   
8325  marginals_sourcesink_sum(nodesModelToCalc,yearsToCalc,sourcesink_techs(techs),commodity)
8326      $( ( Eq_sourcesink_useLowerSum.m(nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity)
8327          + Eq_sourcesink_useUpperSum.m(nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity)
8328          + Eq_sourcesink_useFixedSum.m(nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity) ) <> eps )
8329      =
8330      ( Eq_sourcesink_useLowerSum.m(nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity)
8331      + Eq_sourcesink_useUpperSum.m(nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity)
8332      + Eq_sourcesink_useFixedSum.m(nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity) );
8333   
8334  marginals_indicator_bounds(accNodesModel,accYears,indicator)
8335      $( accounting_indicator.m(accNodesModel,accYears,indicator) <> 0 )
8336      =
8337      accounting_indicator.m(accNodesModel,accYears,indicator);
8338   
8339   
8340  * ==== R2A postcalc information ====
8341   
8343   
8344   
8345  * ==== round profiles to reduce size of gdx ====
8346   
8348  commodity_balance(timeModelToCalc,accNodesModel,accYears,techs,commodity)
8349      $commodity_balance(timeModelToCalc,accNodesModel,accYears,techs,commodity)
8350      = round(commodity_balance(timeModelToCalc,accNodesModel,accYears,techs,commodity), 6);
8351   
8352  transfer_flows(timeModelToCalc,nodesModelToCalc,nodesModelToCalc_a,linksModel,yearsToCalc,transfer_techs,commodity)
8353      $transfer_flows(timeModelToCalc,nodesModelToCalc,nodesModelToCalc_a,linksModel,yearsToCalc,transfer_techs,commodity)
8354      = round(transfer_flows(timeModelToCalc,nodesModelToCalc,nodesModelToCalc_a,linksModel,yearsToCalc,transfer_techs,commodity), 6);
8355   
8356  transfer_losses(timeModelToCalc,nodesModelToCalc,nodesModelToCalc_a,linksModel,yearsToCalc,transfer_techs,commodity)
8357      $transfer_losses(timeModelToCalc,nodesModelToCalc,nodesModelToCalc_a,linksModel,yearsToCalc,transfer_techs,commodity)
8358      = round(transfer_losses(timeModelToCalc,nodesModelToCalc,nodesModelToCalc_a,linksModel,yearsToCalc,transfer_techs,commodity), 6);
8359   
8360  storage_flows(timeModelToCalc,accNodesModel,accYears,storage_techs,commodity)
8361      $storage_flows(timeModelToCalc,accNodesModel,accYears,storage_techs,commodity)
8362      = round(storage_flows(timeModelToCalc,accNodesModel,accYears,storage_techs,commodity), 6);
8363   
8364  storage_level_out(timeModelToCalc,accNodesModel,accYears,storage_techs,commodity)
8365      $storage_level_out(timeModelToCalc,accNodesModel,accYears,storage_techs,commodity)
8366      = round(storage_level_out(timeModelToCalc,accNodesModel,accYears,storage_techs,commodity), 6);
8367   
8368  marginals_balance(timeModelToCalc,nodesModelToCalc,yearsToCalc,commodity)
8369      $marginals_balance(timeModelToCalc,nodesModelToCalc,yearsToCalc,commodity)
8370      = round(marginals_balance(timeModelToCalc,nodesModelToCalc,yearsToCalc,commodity), 6);
8371   
8372  marginals_sourcesink_profile(timeModelToCalc,nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity)
8373      $marginals_sourcesink_profile(timeModelToCalc,nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity)
8374      = round(marginals_sourcesink_profile(timeModelToCalc,nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity), 6);
8376   
INCLUDE    C:\Local\REMix\framework\remix\framework\model\source\postcalc\writegdx.gms
8379  * SPDX-FileCopyrightText: Copyright (c) 2023 German Aerospace Center (DLR)
8380  * SPDX-License-Identifier: BSD-3-Clause
8381   
8384   
8385  execute_unload "C:\Local\REMix\remix_nz\output\high_pop_out_2030-2040-2050\result\high_pop_out_2030-2040-2050.gdx"
8386      metadata
8387      timeModel
8388      timeModelToCalc
8389      nodesModel
8390      linksModel
8391      indicator
8392      commodity
8393      techs
8394      accNodesModel
8395      accYears
8396   
8397      map_nodesModel
8398      map_linksModel
8399      map_nodesAccounting
8400   
8401      indicator_accounting
8402      indicator_accounting_ref
8403      indicator_accounting_comp
8404      indicator_accounting_detailed
8405      indicator_accounting_links
8406   
8407      converter_caps
8408      converter_units
8410   
8411      transfer_caps
8412      transfer_links
8413      transfer_flows
8414      transfer_flows_annual
8415      transfer_losses
8416      transfer_losses_annual
8417   
8418      storage_caps
8419      storage_units
8420      storage_flows
8421      storage_level_out
8422      storage_flows_annual
8423      storage_losses_out
8424      storage_losses_annual
8426   
8427      commodity_balance
8428      commodity_balance_annual
8429   
8430      marginals_balance
8431      marginals_sourcesink_profile
8432      marginals_sourcesink_sum
8433      marginals_indicator_bounds
8434   
8436      ;
GAMS 40.4.0  d540b52e Oct 3, 2022           WEX-WEI x86 64bit/MS Windows - 10/06/23 11:39:41 Page 2
G e n e r a l   A l g e b r a i c   M o d e l i n g   S y s t e m
Include File Summary


   SEQ   GLOBAL TYPE      PARENT   LOCAL  FILENAME

     1        1 INPUT          0       0  C:\Local\REMix\framework\remix\framework\model\run_remix.gms
     2       12 IF DEXIST      1      12  C:\Local\REMix\remix_nz\output\high_pop_out_2030-2040-2050\data\
     3       15 INCLUDE        1      15  .C:\Local\REMix\framework\remix\framework\model\source\metadata.gms
     4       23 CALL           3       8  .printf "remix_version \"0.9.2\"\n" > c:\Local\REMix\remix_nz\process\225a\\metadata
     5       24 CALL           3       9  .printf "gams_version \"40.4.0\"\n" >> c:\Local\REMix\remix_nz\process\225a\\metadata
     6       25 CALL           3      10  .printf "timestamp \"10/06/23 11:39:41\"\n" >> c:\Local\REMix\remix_nz\process\225a\\metadata
     7       27 CALL           3      12  .printf "framework_path " >> c:\Local\REMix\remix_nz\process\225a\\metadata
     8       29 CALL           3      14  .cd C:\Local\REMix\framework\remix\framework\model\source && cd| sed "s/^/\"/;s/$/\"/" >> c:\Local\REMix\remix_nz\process\225a\\metadata
     9       31 CALL           3      18  .printf "\n" >> c:\Local\REMix\remix_nz\process\225a\\metadata
    10       32 CALL           3      19  .printf "framework_hash " >> c:\Local\REMix\remix_nz\process\225a\\metadata
    11       34 CALL           3      21  .cd C:\Local\REMix\framework\remix\framework\model\source && git rev-parse HEAD >nul 2>&1 && git rev-parse HEAD >> c:\Local\REMix\remix_nz\process\225a\\metadata
    12       36 CALL           3      25  .printf "\n" >> c:\Local\REMix\remix_nz\process\225a\\metadata
    13       37 CALL           3      26  .printf "framework_branch " >> c:\Local\REMix\remix_nz\process\225a\\metadata
    14       39 CALL           3      28  .cd C:\Local\REMix\framework\remix\framework\model\source && git rev-parse --abbrev-ref HEAD >nul 2>&1 && git rev-parse --abbrev-ref HEAD | sed "s/^/\"/;s/$/\"/" >> c:\Local\REMix\remix_nz\process\225a\\metadata
    15       41 CALL           3      32  .printf "\n" >> c:\Local\REMix\remix_nz\process\225a\\metadata
    16       43 CALL           3      34  .printf "project_path " >> c:\Local\REMix\remix_nz\process\225a\\metadata
    17       45 CALL           3      36  .cd C:\Local\REMix\remix_nz\output\high_pop_out_2030-2040-2050\data\./ && cd| sed "s/^/\"/;s/$/\"/" >> c:\Local\REMix\remix_nz\process\225a\\metadata
    18       47 CALL           3      40  .printf "\n" >> c:\Local\REMix\remix_nz\process\225a\\metadata
    19       48 CALL           3      41  .printf "project_hash " >> c:\Local\REMix\remix_nz\process\225a\\metadata
    20       50 CALL           3      43  .cd C:\Local\REMix\remix_nz\output\high_pop_out_2030-2040-2050\data\./ && git rev-parse HEAD >nul 2>&1 && git rev-parse HEAD | sed "s/^/\"/;s/$/\"/" >> c:\Local\REMix\remix_nz\process\225a\\metadata
    21       52 CALL           3      47  .printf "\n" >> c:\Local\REMix\remix_nz\process\225a\\metadata
    22       53 CALL           3      48  .printf "project_branch " >> c:\Local\REMix\remix_nz\process\225a\\metadata
    23       55 CALL           3      50  .cd C:\Local\REMix\remix_nz\output\high_pop_out_2030-2040-2050\data\./ && git rev-parse --abbrev-ref HEAD >nul 2>&1 && git rev-parse --abbrev-ref HEAD | sed "s/^/\"/;s/$/\"/" >> c:\Local\REMix\remix_nz\process\225a\\metadata
    24       57 CALL           3      54  .printf "\n" >> c:\Local\REMix\remix_nz\process\225a\\metadata
    25       60 INCLUDE        3      57  ..c:\Local\REMix\remix_nz\process\225a\metadata
    26       77 INCLUDE        1      16  .C:\Local\REMix\framework\remix\framework\model\source\data_inheritance.gms
    27      119 INCLUDE        1      25  .C:\Local\REMix\framework\remix\framework\model\source\remix.gms
    28      140 INCLUDE       27      21  ..C:\Local\REMix\framework\remix\framework\model\source\sets.gms
    29      160 IF EXIST      28      20  ..c:\Local\REMix\remix_nz\process\225a\map_aggregatetimemodel.csv
    30      211 IF EXIST      28      97  ..c:\Local\REMix\remix_nz\process\225a\set_nodesmodel.csv
    31      211 INCLUDE       28      97  ...c:\Local\REMix\remix_nz\process\225a\set_nodesmodel.csv
    32      224 IF EXIST      28      99  ..c:\Local\REMix\remix_nz\process\225a\set_nodesmodel.csv
    33      231 IF EXIST      28     106  ..c:\Local\REMix\remix_nz\process\225a\set_nodesdata.csv
    34      231 INCLUDE       28     106  ...c:\Local\REMix\remix_nz\process\225a\set_nodesdata.csv
    35      244 IF EXIST      28     108  ..c:\Local\REMix\remix_nz\process\225a\set_nodesdata.csv
    36      250 IF EXIST      28     114  ..c:\Local\REMix\remix_nz\process\225a\set_nodesmodelsel.csv
    37      250 INCLUDE       28     114  ...c:\Local\REMix\remix_nz\process\225a\set_nodesmodelsel.csv
    38      263 IF EXIST      28     116  ..c:\Local\REMix\remix_nz\process\225a\set_nodesmodelsel.csv
    39      265 IF EXIST      28     118  ..c:\Local\REMix\remix_nz\process\225a\set_nodesmodelsel.csv
    40      278 IF EXIST      28     131  ..c:\Local\REMix\remix_nz\process\225a\map_aggregatenodesmodel.csv
    41      278 INCLUDE       28     131  ...c:\Local\REMix\remix_nz\process\225a\map_aggregatenodesmodel.csv
    42      291 IF EXIST      28     133  ..c:\Local\REMix\remix_nz\process\225a\map_aggregatenodesmodel.csv
    43      294 IF EXIST      28     136  ..c:\Local\REMix\remix_nz\process\225a\map_aggregatenodesmodel.csv
    44      317 IF EXIST      28     159  ..c:\Local\REMix\remix_nz\process\225a\set_years.csv
    45      317 INCLUDE       28     159  ...c:\Local\REMix\remix_nz\process\225a\set_years.csv
    46      326 IF EXIST      28     161  ..c:\Local\REMix\remix_nz\process\225a\set_years.csv
    47      335 IF EXIST      28     170  ..c:\Local\REMix\remix_nz\process\225a\set_years.csv
    48      335 INCLUDE       28     170  ...c:\Local\REMix\remix_nz\process\225a\set_years.csv
    49      344 IF EXIST      28     172  ..c:\Local\REMix\remix_nz\process\225a\set_years.csv
    50      350 IF EXIST      28     178  ..c:\Local\REMix\remix_nz\process\225a\set_yearssel.csv
    51      350 INCLUDE       28     178  ...c:\Local\REMix\remix_nz\process\225a\set_yearssel.csv
    52      355 IF EXIST      28     180  ..c:\Local\REMix\remix_nz\process\225a\set_yearssel.csv
    53      373 IF EXIST      28     198  ..c:\Local\REMix\remix_nz\process\225a\set_activities.csv
    54      373 INCLUDE       28     198  ...c:\Local\REMix\remix_nz\process\225a\set_activities.csv
    55      379 IF EXIST      28     200  ..c:\Local\REMix\remix_nz\process\225a\set_activities.csv
    56      387 IF EXIST      28     208  ..c:\Local\REMix\remix_nz\process\225a\set_gridsegments.csv
    57      389 IF EXIST      28     210  ..c:\Local\REMix\remix_nz\process\225a\set_gridsegments.csv
    58      397 IF EXIST      28     218  ..c:\Local\REMix\remix_nz\process\225a\set_linksdata.csv
    59      397 INCLUDE       28     218  ...c:\Local\REMix\remix_nz\process\225a\set_linksdata.csv
    60      411 IF EXIST      28     220  ..c:\Local\REMix\remix_nz\process\225a\set_linksdata.csv
    61      429 IF EXIST      28     238  ..c:\Local\REMix\remix_nz\process\225a\set_link_types.csv
    62      429 INCLUDE       28     238  ...c:\Local\REMix\remix_nz\process\225a\set_link_types.csv
    63      433 IF EXIST      28     240  ..c:\Local\REMix\remix_nz\process\225a\set_link_types.csv
    64      442 IF EXIST      28     249  ..c:\Local\REMix\remix_nz\process\225a\set_commodities.csv
    65      442 INCLUDE       28     249  ...c:\Local\REMix\remix_nz\process\225a\set_commodities.csv
    66      447 IF EXIST      28     251  ..c:\Local\REMix\remix_nz\process\225a\set_commodities.csv
    67      456 IF EXIST      28     260  ..c:\Local\REMix\remix_nz\process\225a\set_indicators.csv
    68      456 INCLUDE       28     260  ...c:\Local\REMix\remix_nz\process\225a\set_indicators.csv
    69      464 IF EXIST      28     262  ..c:\Local\REMix\remix_nz\process\225a\set_indicators.csv
    70      473 IF EXIST      28     271  ..c:\Local\REMix\remix_nz\process\225a\set_converter_techs.csv
    71      473 INCLUDE       28     271  ...c:\Local\REMix\remix_nz\process\225a\set_converter_techs.csv
    72      483 IF EXIST      28     274  ..c:\Local\REMix\remix_nz\process\225a\set_storage_techs.csv
    73      483 INCLUDE       28     274  ...c:\Local\REMix\remix_nz\process\225a\set_storage_techs.csv
    74      487 IF EXIST      28     277  ..c:\Local\REMix\remix_nz\process\225a\set_transfer_techs.csv
    75      487 INCLUDE       28     277  ...c:\Local\REMix\remix_nz\process\225a\set_transfer_techs.csv
    76      491 IF EXIST      28     280  ..c:\Local\REMix\remix_nz\process\225a\set_sourcesink_techs.csv
    77      491 INCLUDE       28     280  ...c:\Local\REMix\remix_nz\process\225a\set_sourcesink_techs.csv
    78      498 IF EXIST      28     285  ..c:\Local\REMix\remix_nz\process\225a\set_converter_techs.csv
    79      498 INCLUDE       28     285  ...c:\Local\REMix\remix_nz\process\225a\set_converter_techs.csv
    80      506 IF EXIST      28     286  ..c:\Local\REMix\remix_nz\process\225a\set_converter_techs.csv
    81      510 IF EXIST      28     290  ..c:\Local\REMix\remix_nz\process\225a\set_storage_techs.csv
    82      510 INCLUDE       28     290  ...c:\Local\REMix\remix_nz\process\225a\set_storage_techs.csv
    83      512 IF EXIST      28     291  ..c:\Local\REMix\remix_nz\process\225a\set_storage_techs.csv
    84      517 IF EXIST      28     296  ..c:\Local\REMix\remix_nz\process\225a\set_transfer_techs.csv
    85      517 INCLUDE       28     296  ...c:\Local\REMix\remix_nz\process\225a\set_transfer_techs.csv
    86      519 IF EXIST      28     297  ..c:\Local\REMix\remix_nz\process\225a\set_transfer_techs.csv
    87      523 IF EXIST      28     301  ..c:\Local\REMix\remix_nz\process\225a\set_sourcesink_techs.csv
    88      523 INCLUDE       28     301  ...c:\Local\REMix\remix_nz\process\225a\set_sourcesink_techs.csv
    89      526 IF EXIST      28     302  ..c:\Local\REMix\remix_nz\process\225a\set_sourcesink_techs.csv
    90      536 IF EXIST      28     312  ..c:\Local\REMix\remix_nz\process\225a\set_degradation_states.csv
    91      538 IF EXIST      28     314  ..c:\Local\REMix\remix_nz\process\225a\set_degradation_states.csv
    92      547 IF EXIST      28     323  ..c:\Local\REMix\remix_nz\process\225a\set_soc.csv
    93      549 IF EXIST      28     325  ..c:\Local\REMix\remix_nz\process\225a\set_soc.csv
    94      565 IF EXIST      28     341  ..c:\Local\REMix\remix_nz\process\225a\transfer_linkstartend.csv
    95      565 INCLUDE       28     341  ...c:\Local\REMix\remix_nz\process\225a\transfer_linkstartend.csv
    96      592 IF EXIST      28     343  ..c:\Local\REMix\remix_nz\process\225a\transfer_linkstartend.csv
    97      606 BATINCLUDE    28     357  ...C:\Local\REMix\framework\remix\framework\model\source\battools\aggregateNodes.gms
    98      715 IF EXIST      28     464  ..c:\Local\REMix\remix_nz\process\225a\set_accnodes.csv
    99      717 IF EXIST      28     466  ..c:\Local\REMix\remix_nz\process\225a\set_accnodes.csv
   100      782 IF EXIST      28     531  ..c:\Local\REMix\remix_nz\process\225a\map_accnodes.csv
   101      784 IF EXIST      28     533  ..c:\Local\REMix\remix_nz\process\225a\map_accnodes.csv
   102      838 INCLUDE       27      22  ..C:\Local\REMix\framework\remix\framework\model\source\accounting\input.gms
   103      870 IF EXIST     102      32  ..c:\Local\REMix\remix_nz\process\225a\accounting_converterunits.csv
   104      870 INCLUDE      102      32  ...c:\Local\REMix\remix_nz\process\225a\accounting_converterunits.csv
   105      929 IF EXIST     102      34  ..c:\Local\REMix\remix_nz\process\225a\accounting_converterunits.csv
   106      943 IF EXIST     102      48  ..c:\Local\REMix\remix_nz\process\225a\accounting_converteractivity.csv
   107      945 IF EXIST     102      50  ..c:\Local\REMix\remix_nz\process\225a\accounting_converteractivity.csv
   108      962 IF EXIST     102      67  ..c:\Local\REMix\remix_nz\process\225a\accounting_converterstartup.csv
   109      964 IF EXIST     102      69  ..c:\Local\REMix\remix_nz\process\225a\accounting_converterstartup.csv
   110      983 IF EXIST     102      88  ..c:\Local\REMix\remix_nz\process\225a\accounting_storageunits.csv
   111      983 INCLUDE      102      88  ...c:\Local\REMix\remix_nz\process\225a\accounting_storageunits.csv
   112      994 IF EXIST     102      90  ..c:\Local\REMix\remix_nz\process\225a\accounting_storageunits.csv
   113     1016 IF EXIST     102     112  ..c:\Local\REMix\remix_nz\process\225a\accounting_transferlinks.csv
   114     1016 INCLUDE      102     112  ...c:\Local\REMix\remix_nz\process\225a\accounting_transferlinks.csv
   115     1025 IF EXIST     102     114  ..c:\Local\REMix\remix_nz\process\225a\accounting_transferlinks.csv
   116     1047 IF EXIST     102     136  ..c:\Local\REMix\remix_nz\process\225a\accounting_transferperlength.csv
   117     1047 INCLUDE      102     136  ...c:\Local\REMix\remix_nz\process\225a\accounting_transferperlength.csv
   118     1062 IF EXIST     102     138  ..c:\Local\REMix\remix_nz\process\225a\accounting_transferperlength.csv
   119     1077 IF EXIST     102     153  ..c:\Local\REMix\remix_nz\process\225a\accounting_sourcesinkflow.csv
   120     1077 INCLUDE      102     153  ...c:\Local\REMix\remix_nz\process\225a\accounting_sourcesinkflow.csv
   121     1087 IF EXIST     102     155  ..c:\Local\REMix\remix_nz\process\225a\accounting_sourcesinkflow.csv
   122     1101 IF EXIST     102     169  ..c:\Local\REMix\remix_nz\process\225a\accounting_perindicator.csv
   123     1101 INCLUDE      102     169  ...c:\Local\REMix\remix_nz\process\225a\accounting_perindicator.csv
   124     1109 IF EXIST     102     171  ..c:\Local\REMix\remix_nz\process\225a\accounting_perindicator.csv
   125     1135 IF EXIST     102     197  ..c:\Local\REMix\remix_nz\process\225a\accounting_indicatorbounds.csv
   126     1135 INCLUDE      102     197  ...c:\Local\REMix\remix_nz\process\225a\accounting_indicatorbounds.csv
   127     1139 IF EXIST     102     199  ..c:\Local\REMix\remix_nz\process\225a\accounting_indicatorbounds.csv
   128     1158 IF EXIST     102     218  ..c:\Local\REMix\remix_nz\process\225a\accounting_indicatorbounds_links.csv
   129     1160 IF EXIST     102     220  ..c:\Local\REMix\remix_nz\process\225a\accounting_indicatorbounds_links.csv
   130     1166 BATINCLUDE   102     226  ...C:\Local\REMix\framework\remix\framework\model\source\battools\aggregateAccountingMean.gms
   131     1225 BATINCLUDE   102     227  ...C:\Local\REMix\framework\remix\framework\model\source\battools\aggregateAccountingMean.gms
   132     1268 BATINCLUDE   102     228  ...C:\Local\REMix\framework\remix\framework\model\source\battools\aggregateAccountingMean.gms
   133     1311 BATINCLUDE   102     229  ...C:\Local\REMix\framework\remix\framework\model\source\battools\aggregateAccountingMean.gms
   134     1370 BATINCLUDE   102     230  ...C:\Local\REMix\framework\remix\framework\model\source\battools\aggregateAccountingMean.gms
   135     1429 BATINCLUDE   102     231  ...C:\Local\REMix\framework\remix\framework\model\source\battools\aggregateAccountingMean.gms
   136     1488 BATINCLUDE   102     232  ...C:\Local\REMix\framework\remix\framework\model\source\battools\aggregateAccountingMean.gms
   137     1897 INCLUDE       27      23  ..C:\Local\REMix\framework\remix\framework\model\source\accounting\annuities.gms
   138     1969 INCLUDE       27      25  ..C:\Local\REMix\framework\remix\framework\model\source\methods\mga_pre.gms
   139     1975 INCLUDE       27      26  ..C:\Local\REMix\framework\remix\framework\model\source\methods\pareto_pre.gms
   140     1981 INCLUDE       27      27  ..C:\Local\REMix\framework\remix\framework\model\source\postcalc\declaration.gms
   141     1998 IF DEXIST    140      17  ..C:\Local\REMix\remix_nz\output\high_pop_out_2030-2040-2050\result\
   142     2199 INCLUDE       27      28  ..C:\Local\REMix\framework\remix\framework\model\source\loadgdx.gms
   143     2208 INCLUDE       27      30  ..C:\Local\REMix\framework\remix\framework\model\source\core\converter.gms
   144     2311 IF EXIST     143     103  ..c:\Local\REMix\remix_nz\process\225a\converter_capacityparam.csv
   145     2311 INCLUDE      143     103  ...c:\Local\REMix\remix_nz\process\225a\converter_capacityparam.csv
   146     2853 IF EXIST     143     105  ..c:\Local\REMix\remix_nz\process\225a\converter_capacityparam.csv
   147     2861 BATINCLUDE   143     113  ...C:\Local\REMix\framework\remix\framework\model\source\battools\aggregateNodes.gms
   148     2872 BATINCLUDE   143     114  ...C:\Local\REMix\framework\remix\framework\model\source\battools\aggregateNodes.gms
   149     2905 IF EXIST     143     137  ..c:\Local\REMix\remix_nz\process\225a\converter_techparam.csv
   150     2905 INCLUDE      143     137  ...c:\Local\REMix\remix_nz\process\225a\converter_techparam.csv
   151     2936 IF EXIST     143     139  ..c:\Local\REMix\remix_nz\process\225a\converter_techparam.csv
   152     2958 IF EXIST     143     161  ..c:\Local\REMix\remix_nz\process\225a\converter_activityprofile.csv
   153     2958 INCLUDE      143     161  ...c:\Local\REMix\remix_nz\process\225a\converter_activityprofile.csv
   154     3224 IF EXIST     143     162  ..c:\Local\REMix\remix_nz\process\225a\converter_activityprofile.csv
   155     3226 IF EXIST     143     164  ..c:\Local\REMix\remix_nz\process\225a\converter_activityprofile.csv
   156     3246 IF EXIST     143     184  ..c:\Local\REMix\remix_nz\process\225a\converter_coefficient.csv
   157     3246 INCLUDE      143     184  ...c:\Local\REMix\remix_nz\process\225a\converter_coefficient.csv
   158     3360 IF EXIST     143     185  ..c:\Local\REMix\remix_nz\process\225a\converter_coefficient.csv
   159     3361 IF EXIST     143     186  ..c:\Local\REMix\remix_nz\process\225a\converter_coefficient.csv
   160     3363 IF EXIST     143     188  ..c:\Local\REMix\remix_nz\process\225a\converter_coefficient.csv
   161     3375 IF EXIST     143     200  ..c:\Local\REMix\remix_nz\process\225a\converter_coefficientprofile.csv
   162     3376 IF EXIST     143     201  ..c:\Local\REMix\remix_nz\process\225a\converter_coefficientprofile.csv
   163     3378 IF EXIST     143     203  ..c:\Local\REMix\remix_nz\process\225a\converter_coefficientprofile.csv
   164     4311 INCLUDE       27      31  ..C:\Local\REMix\framework\remix\framework\model\source\core\storage.gms
   165     4402 IF EXIST     164      91  ..c:\Local\REMix\remix_nz\process\225a\storage_reservoirparam.csv
   166     4402 INCLUDE      164      91  ...c:\Local\REMix\remix_nz\process\225a\storage_reservoirparam.csv
   167     4482 IF EXIST     164      93  ..c:\Local\REMix\remix_nz\process\225a\storage_reservoirparam.csv
   168     4486 BATINCLUDE   164      97  ...C:\Local\REMix\framework\remix\framework\model\source\battools\aggregateNodes.gms
   169     4497 BATINCLUDE   164      98  ...C:\Local\REMix\framework\remix\framework\model\source\battools\aggregateNodes.gms
   170     4533 IF EXIST     164     124  ..c:\Local\REMix\remix_nz\process\225a\storage_techparam.csv
   171     4533 INCLUDE      164     124  ...c:\Local\REMix\remix_nz\process\225a\storage_techparam.csv
   172     4540 IF EXIST     164     126  ..c:\Local\REMix\remix_nz\process\225a\storage_techparam.csv
   173     4561 IF EXIST     164     147  ..c:\Local\REMix\remix_nz\process\225a\storage_sizeparam.csv
   174     4561 INCLUDE      164     147  ...c:\Local\REMix\remix_nz\process\225a\storage_sizeparam.csv
   175     4568 IF EXIST     164     149  ..c:\Local\REMix\remix_nz\process\225a\storage_sizeparam.csv
   176     4585 IF EXIST     164     166  ..c:\Local\REMix\remix_nz\process\225a\storage_socparam.csv
   177     4587 IF EXIST     164     168  ..c:\Local\REMix\remix_nz\process\225a\storage_socparam.csv
   178     4606 IF EXIST     164     187  ..c:\Local\REMix\remix_nz\process\225a\storage_degradationparam.csv
   179     4608 IF EXIST     164     189  ..c:\Local\REMix\remix_nz\process\225a\storage_degradationparam.csv
   180     4637 IF EXIST     164     218  ..c:\Local\REMix\remix_nz\process\225a\storage_levelprofile.csv
   181     4638 IF EXIST     164     219  ..c:\Local\REMix\remix_nz\process\225a\storage_levelprofile.csv
   182     4640 IF EXIST     164     221  ..c:\Local\REMix\remix_nz\process\225a\storage_levelprofile.csv
   183     5460 INCLUDE       27      32  ..C:\Local\REMix\framework\remix\framework\model\source\core\transfer.gms
   184     5527 IF EXIST     183      73  ..c:\Local\REMix\remix_nz\process\225a\transfer_linksparam.csv
   185     5527 INCLUDE      183      73  ...c:\Local\REMix\remix_nz\process\225a\transfer_linksparam.csv
   186     5566 IF EXIST     183      75  ..c:\Local\REMix\remix_nz\process\225a\transfer_linksparam.csv
   187     5582 IF EXIST     183      91  ..c:\Local\REMix\remix_nz\process\225a\transfer_flowprofile.csv
   188     5584 IF EXIST     183      93  ..c:\Local\REMix\remix_nz\process\225a\transfer_flowprofile.csv
   189     5604 IF EXIST     183     113  ..c:\Local\REMix\remix_nz\process\225a\transfer_techparam.csv
   190     5604 INCLUDE      183     113  ...c:\Local\REMix\remix_nz\process\225a\transfer_techparam.csv
   191     5610 IF EXIST     183     115  ..c:\Local\REMix\remix_nz\process\225a\transfer_techparam.csv
   192     5624 IF EXIST     183     129  ..c:\Local\REMix\remix_nz\process\225a\transfer_coefficient.csv
   193     5624 INCLUDE      183     129  ...c:\Local\REMix\remix_nz\process\225a\transfer_coefficient.csv
   194     5630 IF EXIST     183     131  ..c:\Local\REMix\remix_nz\process\225a\transfer_coefficient.csv
   195     5644 IF EXIST     183     145  ..c:\Local\REMix\remix_nz\process\225a\transfer_coefperflow.csv
   196     5644 INCLUDE      183     145  ...c:\Local\REMix\remix_nz\process\225a\transfer_coefperflow.csv
   197     5650 IF EXIST     183     147  ..c:\Local\REMix\remix_nz\process\225a\transfer_coefperflow.csv
   198     5664 IF EXIST     183     161  ..c:\Local\REMix\remix_nz\process\225a\transfer_coefperlength.csv
   199     5664 INCLUDE      183     161  ...c:\Local\REMix\remix_nz\process\225a\transfer_coefperlength.csv
   200     5673 IF EXIST     183     163  ..c:\Local\REMix\remix_nz\process\225a\transfer_coefperlength.csv
   201     5687 IF EXIST     183     177  ..c:\Local\REMix\remix_nz\process\225a\transfer_reactperlength.csv
   202     5689 IF EXIST     183     179  ..c:\Local\REMix\remix_nz\process\225a\transfer_reactperlength.csv
   203     5703 IF EXIST     183     193  ..c:\Local\REMix\remix_nz\process\225a\transfer_lengthparam.csv
   204     5703 INCLUDE      183     193  ...c:\Local\REMix\remix_nz\process\225a\transfer_lengthparam.csv
   205     5730 IF EXIST     183     195  ..c:\Local\REMix\remix_nz\process\225a\transfer_lengthparam.csv
   206     5744 IF EXIST     183     209  ..c:\Local\REMix\remix_nz\process\225a\transfer_gridsegments.csv
   207     5746 IF EXIST     183     211  ..c:\Local\REMix\remix_nz\process\225a\transfer_gridsegments.csv
   208     6328 INCLUDE       27      33  ..C:\Local\REMix\framework\remix\framework\model\source\core\sourcesink.gms
   209     6366 IF EXIST     208      38  ..c:\Local\REMix\remix_nz\process\225a\sourcesink_config.csv
   210     6366 INCLUDE      208      38  ...c:\Local\REMix\remix_nz\process\225a\sourcesink_config.csv
   211     6435 IF EXIST     208      40  ..c:\Local\REMix\remix_nz\process\225a\sourcesink_config.csv
   212     6439 BATINCLUDE   208      44  ...C:\Local\REMix\framework\remix\framework\model\source\battools\aggregateNodes.gms
   213     6467 IF EXIST     208      62  ..c:\Local\REMix\remix_nz\process\225a\sourcesink_profile.csv
   214     6467 INCLUDE      208      62  ...c:\Local\REMix\remix_nz\process\225a\sourcesink_profile.csv
   215     6502 IF EXIST     208      63  ..c:\Local\REMix\remix_nz\process\225a\sourcesink_profile.csv
   216     6503 IF EXIST     208      64  ..c:\Local\REMix\remix_nz\process\225a\sourcesink_profile.csv
   217     6505 IF EXIST     208      66  ..c:\Local\REMix\remix_nz\process\225a\sourcesink_profile.csv
   218     6525 IF EXIST     208      86  ..c:\Local\REMix\remix_nz\process\225a\sourcesink_annualsum.csv
   219     6525 INCLUDE      208      86  ...c:\Local\REMix\remix_nz\process\225a\sourcesink_annualsum.csv
   220     6561 IF EXIST     208      88  ..c:\Local\REMix\remix_nz\process\225a\sourcesink_annualsum.csv
   221     6564 BATINCLUDE   208      91  ...C:\Local\REMix\framework\remix\framework\model\source\battools\aggregateNodes.gms
   222     6744 INCLUDE       27      34  ..C:\Local\REMix\framework\remix\framework\model\source\core\balance.gms
   223     6880 INCLUDE       27      36  ..C:\Local\REMix\framework\remix\framework\model\source\accounting\equations.gms
   224     7302 INCLUDE       27      37  ..C:\Local\REMix\framework\remix\framework\model\source\optiframe.gms
   225     7343 INCLUDE       27      71  ..C:\Local\REMix\framework\remix\framework\model\source\methods\checkanno.gms
   226     7354 INCLUDE       27      74  ..C:\Local\REMix\framework\remix\framework\model\source\methods\pips.gms
   227     7363 INCLUDE       27      77  ..C:\Local\REMix\framework\remix\framework\model\source\methods\solve.gms
   228     7569 INCLUDE       27      80  ..C:\Local\REMix\framework\remix\framework\model\source\methods\pareto.gms
   229     7578 INCLUDE       27      83  ..C:\Local\REMix\framework\remix\framework\model\source\methods\mga.gms
   230     7587 INCLUDE       27      86  ..C:\Local\REMix\framework\remix\framework\model\source\methods\iternodes.gms
   231     7596 INCLUDE       27      89  ..C:\Local\REMix\framework\remix\framework\model\source\postcalc\definition.gms
   232     8378 INCLUDE       27      90  ..C:\Local\REMix\framework\remix\framework\model\source\postcalc\writegdx.gms


COMPILATION TIME     =       10.282 SECONDS     68 MB  40.4.0 d540b52e WEX-WEI
GAMS 40.4.0  d540b52e Oct 3, 2022           WEX-WEI x86 64bit/MS Windows - 10/06/23 11:39:41 Page 3
G e n e r a l   A l g e b r a i c   M o d e l i n g   S y s t e m
Range Statistics    SOLVE remix Using MIP From line 7554


RANGE STATISTICS (ABSOLUTE NON-ZERO FINITE VALUES)

RHS       [min, max] : [ 9.000E-03, 1.165E+03] - Zero values observed as well
Bound     [min, max] : [        NA,        NA] - Zero values observed as well
Matrix    [min, max] : [ 3.333E-03, 5.981E+02]

GAMS 40.4.0  d540b52e Oct 3, 2022           WEX-WEI x86 64bit/MS Windows - 10/06/23 11:39:41 Page 4
G e n e r a l   A l g e b r a i c   M o d e l i n g   S y s t e m
Model Statistics    SOLVE remix Using MIP From line 7554


LOOPS                           optiframeToCalc   of1


MODEL STATISTICS

BLOCKS OF EQUATIONS          75     SINGLE EQUATIONS    3,569,164
BLOCKS OF VARIABLES          38     SINGLE VARIABLES    3,633,982
NON ZERO ELEMENTS     9,798,831


GENERATION TIME      =       16.688 SECONDS  1,725 MB  40.4.0 d540b52e WEX-WEI


EXECUTION TIME       =       30.578 SECONDS  1,725 MB  40.4.0 d540b52e WEX-WEI
