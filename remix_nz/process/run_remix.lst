GAMS 40.4.0  d540b52e Oct 3, 2022           WEX-WEI x86 64bit/MS Windows - 10/05/23 14:09:10 Page 1
G e n e r a l   A l g e b r a i c   M o d e l i n g   S y s t e m
C o m p i l a t i o n


   1  * SPDX-FileCopyrightText: Copyright (c) 2023 German Aerospace Center (DLR)
   2  * SPDX-License-Identifier: BSD-3-Clause
   3   
   4  * ==== REMix version number ====
   6   
   7  * ==== global settings ====
  11   
  13   
  14  * ==== write metadata and inherit dataset ====
INCLUDE    C:\Local\REMix\framework\remix\framework\model\source\metadata.gms
  22   
  26   
  42   
  58   
  59  set metadata(*) /
INCLUDE    c:\Local\REMix\remix_nz\process\225b\metadata
  61  remix_version "0.9.2"
  62  gams_version "40.4.0"
  63  timestamp "10/05/23 14:09:10"
  64  framework_path "C:\Local\REMix\framework\remix\framework\model\source"
  65   
  66  framework_hash 96c2159997fb47c52b8300c49677756ddfb1ee40
  67   
  68  framework_branch "dev"
  69   
  70  project_path "C:\Local\REMix\remix_nz\output\high_pop_out_base_2050\data"
  71   
  72  project_hash "7aa989057a342440cada6225cb8ea81fc015a971"
  73   
  74  project_branch "main"
  75   
  76  /;
INCLUDE    C:\Local\REMix\framework\remix\framework\model\source\data_inheritance.gms
  78  * SPDX-FileCopyrightText: Copyright (c) 2023 German Aerospace Center (DLR)
  79  * SPDX-License-Identifier: BSD-3-Clause
  80   
  83   
  88   
  89  * pandas based data inheritance reading in the dat files, merging them and writing csv files in the scrdir
 109  ;
 110   
 114   
 115  * ==== run remix ====
INCLUDE    C:\Local\REMix\framework\remix\framework\model\source\remix.gms
 120  * SPDX-FileCopyrightText: Copyright (c) 2023 German Aerospace Center (DLR)
 121  * SPDX-License-Identifier: BSD-3-Clause
 122   
 123  * ==== global settings ====
 130   
 133   
 135   
 138   
 139  * ==== include modules ====
INCLUDE    C:\Local\REMix\framework\remix\framework\model\source\sets.gms
 141  * SPDX-FileCopyrightText: Copyright (c) 2023 German Aerospace Center (DLR)
 142  * SPDX-License-Identifier: BSD-3-Clause
 143   
 144  * // # sets
 145  * // Sets are the indices of variables and parameters.
 146   
 147  * // ## Reference
 148  * // {special_table_sets}
 149   
 150  * // ## Input Files
 151  * // {special_table_set_input_files}
 786   
 787  map_accNodes(accNodesModel,accNodesModel_aggregation)
 788      $sum((nodesData, nodesModelToCalc)
 789              $( sameas(nodesModelToCalc,accNodesModel)
 790                  and map_accNodesLoad(nodesData,accNodesModel_aggregation)
 791                  and aggregateNodesModel(nodesData,nodesModelToCalc)), 1) = yes;
 792   
 793  map_accNodes(accNodesModel,"global")$sum(nodesModelToCalc$sameas(accNodesModel,nodesModelToCalc), 1) = yes;
 794  map_accNodes(accNodesModel,"global")$sum(accNodes$sameas(accNodesModel,accNodes), 1) = yes;
 795  map_accNodes(accNodesModel,accNodesModel) = yes;
 796  map_accLinks(accLinksModel,"global")$sum(linksModelToCalc$sameas(accLinksModel,linksModelToCalc), 1) = yes;
 797  map_accLinks(accLinksModel,accLinksModel) = yes;
 798  map_accYears(accYears,"horizon")$sum(yearsToCalc$sameas(accYears,yearsToCalc), 1)  = yes;
 799  map_accYears(accYears,accYears) = yes;
 800   
 801  map_accNodesToCalc(accNodesModel,nodesModelToCalc)
 802      $sum((nodesData)
 803              $( map_accNodesLoad(nodesData,accNodesModel)
 804                  and aggregateNodesModel(nodesData,nodesModelToCalc)), 1) = yes;
 805   
 806  map_accNodesToCalc("global",nodesModelToCalc) = yes;
 807  map_accNodesToCalc(accNodesModel,nodesModelToCalc)$sameas(accNodesModel,nodesModelToCalc) = yes;
 808  map_accLinksToCalc("global",linksModelToCalc) = yes;
 809  map_accLinksToCalc(accLinksModel,linksModelToCalc)$sameas(accLinksModel,linksModelToCalc) = yes;
 810  map_accYearsToCalc("horizon",yearsToCalc) = yes;
 811  map_accYearsToCalc(accYears,yearsToCalc)$sameas(accYears,yearsToCalc) = yes;
 812   
 813  * Duplicate sets for postcalc reporting without horizon and accYears
 814  map_accNodesPostCalc(accNodesModel,nodesModelToCalc) = map_accNodesToCalc(accNodesModel,nodesModelToCalc);
 815  map_accLinksPostCalc(accLinksModel,linksModelToCalc) = map_accLinksToCalc(accLinksModel,linksModelToCalc);
 816  map_accYearsPostCalc(accYears,yearsToCalc)$sameas(accYears,yearsToCalc) = yes;
 817  map_accYearsPostCalc(accYears,years)$(sameas(accYears,years) and years.val < sum(yearsToCalc$(ord(yearsToCalc) = 1), yearsToCalc.val)) = yes;
 818   
 819  set map_nodesAccounting(accNodesModel_aggregation,accNodesModel) "Map accounting nodes describes the mapping between model accounting nodes and data nodes." ;
 820  option map_nodesAccounting < map_accNodes;
 821   
 822  * ==== Generic sets  ====
 823  * These set names are repeated across different profile parameters.
 824  * they are not strictly related to each other and are not input data but
 825  * are needed for validation.
 826  ** // PROFILE: profileTypes | Profile Types | OEO_00140056:flow potential | set_profiletypes.csv
 827   
 828  ** // SET: scenario | Scenario | OEO_00000364:scenario | set_scenarios.csv
 829  * "Scenario indexes help to differentiate scenarios." /
 830   
 831  ** // SET: capType | Capacity Types | OEO_00030019:balance process attribute | set_captypes.csv
 832  * "Capacity types differentiate investment decisions." /
 833   
 834  ** // SET: balanceType | Balance Types | OEO_00030019:balance process attribute | set_balancetypes.csv
 835  * "Balance types differentiate types of balances." /
INCLUDE    C:\Local\REMix\framework\remix\framework\model\source\accounting\input.gms
 837  * SPDX-FileCopyrightText: Copyright (c) 2023 German Aerospace Center (DLR)
 838  * SPDX-License-Identifier: BSD-3-Clause
 839   
 840  * // # accounting_input
 841  * // The parameters in this file describe the accounting of indicators in the model.
 842   
 843  * // ## Variables
 844  * // {special_table_input_variables}
1150   
1151  * Aggregate accounting parameters
BATINCLUDE C:\Local\REMix\framework\remix\framework\model\source\battools\aggregateAccountingMean.gms
1153  * SPDX-FileCopyrightText: Copyright (c) 2023 German Aerospace Center (DLR)
1154  * SPDX-License-Identifier: BSD-3-Clause
1155   
1157   
1159   
1160  set accounting_converterUnitsNonzero(indicator,accnodesData,converter_techs,vintage);
1161  accounting_converterUnitsNonzero(indicator,accnodesData,converter_techs,vintage)
1162      $sum(pc_accounting_converterUnits$accounting_converterUnitsIn(indicator,accnodesData,converter_techs,vintage,pc_accounting_converterUnits), 1)
1163      = yes;
1164   
1166  set accounting_converterUnitsChk(indicator,nodesModel,converter_techs,vintage,pc_accounting_converterUnits);
1167  accounting_converterUnitsChk(indicator,nodesModel,converter_techs,vintage,"useAnnuity")
1168      $sum((nodesData,accnodesData)
1169              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1170                  and accounting_converterUnitsNonzero(indicator,accnodesData,converter_techs,vintage)), 1)
1171      = smax((nodesData,accnodesData)
1172              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1173                  and accounting_converterUnitsNonzero(indicator,accnodesData,converter_techs,vintage)),
1174          accounting_converterUnitsIn(indicator,accnodesData,converter_techs,vintage,"useAnnuity"))
1175      - smin((nodesData,accnodesData)
1176              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1177                  and accounting_converterUnitsNonzero(indicator,accnodesData,converter_techs,vintage)),
1178          accounting_converterUnitsIn(indicator,accnodesData,converter_techs,vintage,"useAnnuity"));
1179   
1180  abort$sum(accounting_converterUnitsChk(indicator,nodesModel,converter_techs,vintage,pc_accounting_converterUnits), 1) "Cannot aggregate technologies with different useAnnuity values."
1182   
1183  parameter accounting_converterUnitsAgg(indicator,nodesModel,converter_techs,vintage,pc_accounting_converterUnits);
1184  accounting_converterUnitsAgg(indicator,nodesModel,converter_techs,vintage,pc_accounting_converterUnits)
1185      $sum((nodesData,accnodesData)
1186              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1187                  and accounting_converterUnitsNonzero(indicator,accnodesData,converter_techs,vintage)), 1)
1188      = sum((nodesData,accnodesData)
1189              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1190                  and accounting_converterUnitsNonzero(indicator,accnodesData,converter_techs,vintage)),
1191          accounting_converterUnitsIn(indicator,accnodesData,converter_techs,vintage,pc_accounting_converterUnits))
1192      / sum((nodesData,accnodesData)
1193              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1194                  and accounting_converterUnitsNonzero(indicator,accnodesData,converter_techs,vintage)),
1195          1);
1196   
1197  parameter accounting_converterUnits(indicator,nodesModel,converter_techs,vintage,pc_accounting_converterUnits);
1198  loop(accnodes,
1199  accounting_converterUnits(indicator,nodesModel,converter_techs,vintage,pc_accounting_converterUnits)
1200      $sum(accnodesData$(map_accnodesToCalc(accnodes,nodesModel) and sameas(accnodes,accnodesData)
1201                              and accounting_converterUnitsIn(indicator,accnodesData,converter_techs,vintage,pc_accounting_converterUnits)), 1)
1202      = sum(accnodesData$(map_accnodesToCalc(accnodes,nodesModel) and sameas(accnodes,accnodesData)),
1203              accounting_converterUnitsIn(indicator,accnodesData,converter_techs,vintage,pc_accounting_converterUnits));
1204  );
1205   
1206  accounting_converterUnits(indicator,nodesModel,converter_techs,vintage,pc_accounting_converterUnits)
1207      $accounting_converterUnitsAgg(indicator,nodesModel,converter_techs,vintage,pc_accounting_converterUnits)
1208      = accounting_converterUnitsAgg(indicator,nodesModel,converter_techs,vintage,pc_accounting_converterUnits);
1209   
1210  * option kill %paramName%Nonzero %paramName%Chk %paramName%Agg
BATINCLUDE C:\Local\REMix\framework\remix\framework\model\source\battools\aggregateAccountingMean.gms
1212  * SPDX-FileCopyrightText: Copyright (c) 2023 German Aerospace Center (DLR)
1213  * SPDX-License-Identifier: BSD-3-Clause
1214   
1216   
1218   
1219  set accounting_converterActivityNonzero(indicator,accnodesData,converter_techs,vintage,activity);
1220  accounting_converterActivityNonzero(indicator,accnodesData,converter_techs,vintage,activity)
1221      $sum(pc_accounting_converterActivity$accounting_converterActivityIn(indicator,accnodesData,converter_techs,vintage,activity,pc_accounting_converterActivity), 1)
1222      = yes;
1223   
1225   
1226  parameter accounting_converterActivityAgg(indicator,nodesModel,converter_techs,vintage,activity,pc_accounting_converterActivity);
1227  accounting_converterActivityAgg(indicator,nodesModel,converter_techs,vintage,activity,pc_accounting_converterActivity)
1228      $sum((nodesData,accnodesData)
1229              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1230                  and accounting_converterActivityNonzero(indicator,accnodesData,converter_techs,vintage,activity)), 1)
1231      = sum((nodesData,accnodesData)
1232              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1233                  and accounting_converterActivityNonzero(indicator,accnodesData,converter_techs,vintage,activity)),
1234          accounting_converterActivityIn(indicator,accnodesData,converter_techs,vintage,activity,pc_accounting_converterActivity))
1235      / sum((nodesData,accnodesData)
1236              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1237                  and accounting_converterActivityNonzero(indicator,accnodesData,converter_techs,vintage,activity)),
1238          1);
1239   
1240  parameter accounting_converterActivity(indicator,nodesModel,converter_techs,vintage,activity,pc_accounting_converterActivity);
1241  loop(accnodes,
1242  accounting_converterActivity(indicator,nodesModel,converter_techs,vintage,activity,pc_accounting_converterActivity)
1243      $sum(accnodesData$(map_accnodesToCalc(accnodes,nodesModel) and sameas(accnodes,accnodesData)
1244                              and accounting_converterActivityIn(indicator,accnodesData,converter_techs,vintage,activity,pc_accounting_converterActivity)), 1)
1245      = sum(accnodesData$(map_accnodesToCalc(accnodes,nodesModel) and sameas(accnodes,accnodesData)),
1246              accounting_converterActivityIn(indicator,accnodesData,converter_techs,vintage,activity,pc_accounting_converterActivity));
1247  );
1248   
1249  accounting_converterActivity(indicator,nodesModel,converter_techs,vintage,activity,pc_accounting_converterActivity)
1250      $accounting_converterActivityAgg(indicator,nodesModel,converter_techs,vintage,activity,pc_accounting_converterActivity)
1251      = accounting_converterActivityAgg(indicator,nodesModel,converter_techs,vintage,activity,pc_accounting_converterActivity);
1252   
1253  * option kill %paramName%Nonzero %paramName%Chk %paramName%Agg
BATINCLUDE C:\Local\REMix\framework\remix\framework\model\source\battools\aggregateAccountingMean.gms
1255  * SPDX-FileCopyrightText: Copyright (c) 2023 German Aerospace Center (DLR)
1256  * SPDX-License-Identifier: BSD-3-Clause
1257   
1259   
1261   
1262  set accounting_converterStartupNonzero(indicator,accnodesData,converter_techs,vintage);
1263  accounting_converterStartupNonzero(indicator,accnodesData,converter_techs,vintage)
1264      $sum(pc_accounting_converterStartup$accounting_converterStartupIn(indicator,accnodesData,converter_techs,vintage,pc_accounting_converterStartup), 1)
1265      = yes;
1266   
1268   
1269  parameter accounting_converterStartupAgg(indicator,nodesModel,converter_techs,vintage,pc_accounting_converterStartup);
1270  accounting_converterStartupAgg(indicator,nodesModel,converter_techs,vintage,pc_accounting_converterStartup)
1271      $sum((nodesData,accnodesData)
1272              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1273                  and accounting_converterStartupNonzero(indicator,accnodesData,converter_techs,vintage)), 1)
1274      = sum((nodesData,accnodesData)
1275              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1276                  and accounting_converterStartupNonzero(indicator,accnodesData,converter_techs,vintage)),
1277          accounting_converterStartupIn(indicator,accnodesData,converter_techs,vintage,pc_accounting_converterStartup))
1278      / sum((nodesData,accnodesData)
1279              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1280                  and accounting_converterStartupNonzero(indicator,accnodesData,converter_techs,vintage)),
1281          1);
1282   
1283  parameter accounting_converterStartup(indicator,nodesModel,converter_techs,vintage,pc_accounting_converterStartup);
1284  loop(accnodes,
1285  accounting_converterStartup(indicator,nodesModel,converter_techs,vintage,pc_accounting_converterStartup)
1286      $sum(accnodesData$(map_accnodesToCalc(accnodes,nodesModel) and sameas(accnodes,accnodesData)
1287                              and accounting_converterStartupIn(indicator,accnodesData,converter_techs,vintage,pc_accounting_converterStartup)), 1)
1288      = sum(accnodesData$(map_accnodesToCalc(accnodes,nodesModel) and sameas(accnodes,accnodesData)),
1289              accounting_converterStartupIn(indicator,accnodesData,converter_techs,vintage,pc_accounting_converterStartup));
1290  );
1291   
1292  accounting_converterStartup(indicator,nodesModel,converter_techs,vintage,pc_accounting_converterStartup)
1293      $accounting_converterStartupAgg(indicator,nodesModel,converter_techs,vintage,pc_accounting_converterStartup)
1294      = accounting_converterStartupAgg(indicator,nodesModel,converter_techs,vintage,pc_accounting_converterStartup);
1295   
1296  * option kill %paramName%Nonzero %paramName%Chk %paramName%Agg
BATINCLUDE C:\Local\REMix\framework\remix\framework\model\source\battools\aggregateAccountingMean.gms
1298  * SPDX-FileCopyrightText: Copyright (c) 2023 German Aerospace Center (DLR)
1299  * SPDX-License-Identifier: BSD-3-Clause
1300   
1302   
1304   
1305  set accounting_storageUnitsNonzero(indicator,accnodesData,storage_techs,vintage);
1306  accounting_storageUnitsNonzero(indicator,accnodesData,storage_techs,vintage)
1307      $sum(pc_accounting_storageUnits$accounting_storageUnitsIn(indicator,accnodesData,storage_techs,vintage,pc_accounting_storageUnits), 1)
1308      = yes;
1309   
1311  set accounting_storageUnitsChk(indicator,nodesModel,storage_techs,vintage,pc_accounting_storageUnits);
1312  accounting_storageUnitsChk(indicator,nodesModel,storage_techs,vintage,"useAnnuity")
1313      $sum((nodesData,accnodesData)
1314              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1315                  and accounting_storageUnitsNonzero(indicator,accnodesData,storage_techs,vintage)), 1)
1316      = smax((nodesData,accnodesData)
1317              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1318                  and accounting_storageUnitsNonzero(indicator,accnodesData,storage_techs,vintage)),
1319          accounting_storageUnitsIn(indicator,accnodesData,storage_techs,vintage,"useAnnuity"))
1320      - smin((nodesData,accnodesData)
1321              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1322                  and accounting_storageUnitsNonzero(indicator,accnodesData,storage_techs,vintage)),
1323          accounting_storageUnitsIn(indicator,accnodesData,storage_techs,vintage,"useAnnuity"));
1324   
1325  abort$sum(accounting_storageUnitsChk(indicator,nodesModel,storage_techs,vintage,pc_accounting_storageUnits), 1) "Cannot aggregate technologies with different useAnnuity values."
1327   
1328  parameter accounting_storageUnitsAgg(indicator,nodesModel,storage_techs,vintage,pc_accounting_storageUnits);
1329  accounting_storageUnitsAgg(indicator,nodesModel,storage_techs,vintage,pc_accounting_storageUnits)
1330      $sum((nodesData,accnodesData)
1331              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1332                  and accounting_storageUnitsNonzero(indicator,accnodesData,storage_techs,vintage)), 1)
1333      = sum((nodesData,accnodesData)
1334              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1335                  and accounting_storageUnitsNonzero(indicator,accnodesData,storage_techs,vintage)),
1336          accounting_storageUnitsIn(indicator,accnodesData,storage_techs,vintage,pc_accounting_storageUnits))
1337      / sum((nodesData,accnodesData)
1338              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1339                  and accounting_storageUnitsNonzero(indicator,accnodesData,storage_techs,vintage)),
1340          1);
1341   
1342  parameter accounting_storageUnits(indicator,nodesModel,storage_techs,vintage,pc_accounting_storageUnits);
1343  loop(accnodes,
1344  accounting_storageUnits(indicator,nodesModel,storage_techs,vintage,pc_accounting_storageUnits)
1345      $sum(accnodesData$(map_accnodesToCalc(accnodes,nodesModel) and sameas(accnodes,accnodesData)
1346                              and accounting_storageUnitsIn(indicator,accnodesData,storage_techs,vintage,pc_accounting_storageUnits)), 1)
1347      = sum(accnodesData$(map_accnodesToCalc(accnodes,nodesModel) and sameas(accnodes,accnodesData)),
1348              accounting_storageUnitsIn(indicator,accnodesData,storage_techs,vintage,pc_accounting_storageUnits));
1349  );
1350   
1351  accounting_storageUnits(indicator,nodesModel,storage_techs,vintage,pc_accounting_storageUnits)
1352      $accounting_storageUnitsAgg(indicator,nodesModel,storage_techs,vintage,pc_accounting_storageUnits)
1353      = accounting_storageUnitsAgg(indicator,nodesModel,storage_techs,vintage,pc_accounting_storageUnits);
1354   
1355  * option kill %paramName%Nonzero %paramName%Chk %paramName%Agg
BATINCLUDE C:\Local\REMix\framework\remix\framework\model\source\battools\aggregateAccountingMean.gms
1357  * SPDX-FileCopyrightText: Copyright (c) 2023 German Aerospace Center (DLR)
1358  * SPDX-License-Identifier: BSD-3-Clause
1359   
1361   
1363   
1364  set accounting_transferLinksNonzero(indicator,acclinksData,transfer_techs,vintage);
1365  accounting_transferLinksNonzero(indicator,acclinksData,transfer_techs,vintage)
1366      $sum(pc_accounting_transferLinks$accounting_transferLinksIn(indicator,acclinksData,transfer_techs,vintage,pc_accounting_transferLinks), 1)
1367      = yes;
1368   
1370  set accounting_transferLinksChk(indicator,linksModel,transfer_techs,vintage,pc_accounting_transferLinks);
1371  accounting_transferLinksChk(indicator,linksModel,transfer_techs,vintage,"useAnnuity")
1372      $sum((linksData,acclinksData)
1373              $(aggregatelinksModel(linksData,linksModel) and sameas(linksData,acclinksData)
1374                  and accounting_transferLinksNonzero(indicator,acclinksData,transfer_techs,vintage)), 1)
1375      = smax((linksData,acclinksData)
1376              $(aggregatelinksModel(linksData,linksModel) and sameas(linksData,acclinksData)
1377                  and accounting_transferLinksNonzero(indicator,acclinksData,transfer_techs,vintage)),
1378          accounting_transferLinksIn(indicator,acclinksData,transfer_techs,vintage,"useAnnuity"))
1379      - smin((linksData,acclinksData)
1380              $(aggregatelinksModel(linksData,linksModel) and sameas(linksData,acclinksData)
1381                  and accounting_transferLinksNonzero(indicator,acclinksData,transfer_techs,vintage)),
1382          accounting_transferLinksIn(indicator,acclinksData,transfer_techs,vintage,"useAnnuity"));
1383   
1384  abort$sum(accounting_transferLinksChk(indicator,linksModel,transfer_techs,vintage,pc_accounting_transferLinks), 1) "Cannot aggregate technologies with different useAnnuity values."
1386   
1387  parameter accounting_transferLinksAgg(indicator,linksModel,transfer_techs,vintage,pc_accounting_transferLinks);
1388  accounting_transferLinksAgg(indicator,linksModel,transfer_techs,vintage,pc_accounting_transferLinks)
1389      $sum((linksData,acclinksData)
1390              $(aggregatelinksModel(linksData,linksModel) and sameas(linksData,acclinksData)
1391                  and accounting_transferLinksNonzero(indicator,acclinksData,transfer_techs,vintage)), 1)
1392      = sum((linksData,acclinksData)
1393              $(aggregatelinksModel(linksData,linksModel) and sameas(linksData,acclinksData)
1394                  and accounting_transferLinksNonzero(indicator,acclinksData,transfer_techs,vintage)),
1395          accounting_transferLinksIn(indicator,acclinksData,transfer_techs,vintage,pc_accounting_transferLinks))
1396      / sum((linksData,acclinksData)
1397              $(aggregatelinksModel(linksData,linksModel) and sameas(linksData,acclinksData)
1398                  and accounting_transferLinksNonzero(indicator,acclinksData,transfer_techs,vintage)),
1399          1);
1400   
1401  parameter accounting_transferLinks(indicator,linksModel,transfer_techs,vintage,pc_accounting_transferLinks);
1402  loop(acclinks,
1403  accounting_transferLinks(indicator,linksModel,transfer_techs,vintage,pc_accounting_transferLinks)
1404      $sum(acclinksData$(map_acclinksToCalc(acclinks,linksModel) and sameas(acclinks,acclinksData)
1405                              and accounting_transferLinksIn(indicator,acclinksData,transfer_techs,vintage,pc_accounting_transferLinks)), 1)
1406      = sum(acclinksData$(map_acclinksToCalc(acclinks,linksModel) and sameas(acclinks,acclinksData)),
1407              accounting_transferLinksIn(indicator,acclinksData,transfer_techs,vintage,pc_accounting_transferLinks));
1408  );
1409   
1410  accounting_transferLinks(indicator,linksModel,transfer_techs,vintage,pc_accounting_transferLinks)
1411      $accounting_transferLinksAgg(indicator,linksModel,transfer_techs,vintage,pc_accounting_transferLinks)
1412      = accounting_transferLinksAgg(indicator,linksModel,transfer_techs,vintage,pc_accounting_transferLinks);
1413   
1414  * option kill %paramName%Nonzero %paramName%Chk %paramName%Agg
BATINCLUDE C:\Local\REMix\framework\remix\framework\model\source\battools\aggregateAccountingMean.gms
1416  * SPDX-FileCopyrightText: Copyright (c) 2023 German Aerospace Center (DLR)
1417  * SPDX-License-Identifier: BSD-3-Clause
1418   
1420   
1422   
1423  set accounting_transferPerLengthNonzero(indicator,acclinksData,transfer_techs,vintage,link_types);
1424  accounting_transferPerLengthNonzero(indicator,acclinksData,transfer_techs,vintage,link_types)
1425      $sum(pc_accounting_transferPerLength$accounting_transferPerLengthIn(indicator,acclinksData,transfer_techs,vintage,link_types,pc_accounting_transferPerLength), 1)
1426      = yes;
1427   
1429  set accounting_transferPerLengthChk(indicator,linksModel,transfer_techs,vintage,link_types,pc_accounting_transferPerLength);
1430  accounting_transferPerLengthChk(indicator,linksModel,transfer_techs,vintage,link_types,"useAnnuity")
1431      $sum((linksData,acclinksData)
1432              $(aggregatelinksModel(linksData,linksModel) and sameas(linksData,acclinksData)
1433                  and accounting_transferPerLengthNonzero(indicator,acclinksData,transfer_techs,vintage,link_types)), 1)
1434      = smax((linksData,acclinksData)
1435              $(aggregatelinksModel(linksData,linksModel) and sameas(linksData,acclinksData)
1436                  and accounting_transferPerLengthNonzero(indicator,acclinksData,transfer_techs,vintage,link_types)),
1437          accounting_transferPerLengthIn(indicator,acclinksData,transfer_techs,vintage,link_types,"useAnnuity"))
1438      - smin((linksData,acclinksData)
1439              $(aggregatelinksModel(linksData,linksModel) and sameas(linksData,acclinksData)
1440                  and accounting_transferPerLengthNonzero(indicator,acclinksData,transfer_techs,vintage,link_types)),
1441          accounting_transferPerLengthIn(indicator,acclinksData,transfer_techs,vintage,link_types,"useAnnuity"));
1442   
1443  abort$sum(accounting_transferPerLengthChk(indicator,linksModel,transfer_techs,vintage,link_types,pc_accounting_transferPerLength), 1) "Cannot aggregate technologies with different useAnnuity values."
1445   
1446  parameter accounting_transferPerLengthAgg(indicator,linksModel,transfer_techs,vintage,link_types,pc_accounting_transferPerLength);
1447  accounting_transferPerLengthAgg(indicator,linksModel,transfer_techs,vintage,link_types,pc_accounting_transferPerLength)
1448      $sum((linksData,acclinksData)
1449              $(aggregatelinksModel(linksData,linksModel) and sameas(linksData,acclinksData)
1450                  and accounting_transferPerLengthNonzero(indicator,acclinksData,transfer_techs,vintage,link_types)), 1)
1451      = sum((linksData,acclinksData)
1452              $(aggregatelinksModel(linksData,linksModel) and sameas(linksData,acclinksData)
1453                  and accounting_transferPerLengthNonzero(indicator,acclinksData,transfer_techs,vintage,link_types)),
1454          accounting_transferPerLengthIn(indicator,acclinksData,transfer_techs,vintage,link_types,pc_accounting_transferPerLength))
1455      / sum((linksData,acclinksData)
1456              $(aggregatelinksModel(linksData,linksModel) and sameas(linksData,acclinksData)
1457                  and accounting_transferPerLengthNonzero(indicator,acclinksData,transfer_techs,vintage,link_types)),
1458          1);
1459   
1460  parameter accounting_transferPerLength(indicator,linksModel,transfer_techs,vintage,link_types,pc_accounting_transferPerLength);
1461  loop(acclinks,
1462  accounting_transferPerLength(indicator,linksModel,transfer_techs,vintage,link_types,pc_accounting_transferPerLength)
1463      $sum(acclinksData$(map_acclinksToCalc(acclinks,linksModel) and sameas(acclinks,acclinksData)
1464                              and accounting_transferPerLengthIn(indicator,acclinksData,transfer_techs,vintage,link_types,pc_accounting_transferPerLength)), 1)
1465      = sum(acclinksData$(map_acclinksToCalc(acclinks,linksModel) and sameas(acclinks,acclinksData)),
1466              accounting_transferPerLengthIn(indicator,acclinksData,transfer_techs,vintage,link_types,pc_accounting_transferPerLength));
1467  );
1468   
1469  accounting_transferPerLength(indicator,linksModel,transfer_techs,vintage,link_types,pc_accounting_transferPerLength)
1470      $accounting_transferPerLengthAgg(indicator,linksModel,transfer_techs,vintage,link_types,pc_accounting_transferPerLength)
1471      = accounting_transferPerLengthAgg(indicator,linksModel,transfer_techs,vintage,link_types,pc_accounting_transferPerLength);
1472   
1473  * option kill %paramName%Nonzero %paramName%Chk %paramName%Agg
BATINCLUDE C:\Local\REMix\framework\remix\framework\model\source\battools\aggregateAccountingMean.gms
1475  * SPDX-FileCopyrightText: Copyright (c) 2023 German Aerospace Center (DLR)
1476  * SPDX-License-Identifier: BSD-3-Clause
1477   
1479   
1481   
1482  set accounting_sourcesinkFlowNonzero(indicator,accnodesData,years,sourcesink_techs,commodity);
1483  accounting_sourcesinkFlowNonzero(indicator,accnodesData,years,sourcesink_techs,commodity)
1484      $sum(pc_accounting_sourcesinkFlow$accounting_sourcesinkFlowIn(indicator,accnodesData,years,sourcesink_techs,commodity,pc_accounting_sourcesinkFlow), 1)
1485      = yes;
1486   
1488   
1489  parameter accounting_sourcesinkFlowAgg(indicator,nodesModel,years,sourcesink_techs,commodity,pc_accounting_sourcesinkFlow);
1490  accounting_sourcesinkFlowAgg(indicator,nodesModel,years,sourcesink_techs,commodity,pc_accounting_sourcesinkFlow)
1491      $sum((nodesData,accnodesData)
1492              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1493                  and accounting_sourcesinkFlowNonzero(indicator,accnodesData,years,sourcesink_techs,commodity)), 1)
1494      = sum((nodesData,accnodesData)
1495              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1496                  and accounting_sourcesinkFlowNonzero(indicator,accnodesData,years,sourcesink_techs,commodity)),
1497          accounting_sourcesinkFlowIn(indicator,accnodesData,years,sourcesink_techs,commodity,pc_accounting_sourcesinkFlow))
1498      / sum((nodesData,accnodesData)
1499              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1500                  and accounting_sourcesinkFlowNonzero(indicator,accnodesData,years,sourcesink_techs,commodity)),
1501          1);
1502   
1503  parameter accounting_sourcesinkFlow(indicator,nodesModel,years,sourcesink_techs,commodity,pc_accounting_sourcesinkFlow);
1504  loop(accnodes,
1505  accounting_sourcesinkFlow(indicator,nodesModel,years,sourcesink_techs,commodity,pc_accounting_sourcesinkFlow)
1506      $sum(accnodesData$(map_accnodesToCalc(accnodes,nodesModel) and sameas(accnodes,accnodesData)
1507                              and accounting_sourcesinkFlowIn(indicator,accnodesData,years,sourcesink_techs,commodity,pc_accounting_sourcesinkFlow)), 1)
1508      = sum(accnodesData$(map_accnodesToCalc(accnodes,nodesModel) and sameas(accnodes,accnodesData)),
1509              accounting_sourcesinkFlowIn(indicator,accnodesData,years,sourcesink_techs,commodity,pc_accounting_sourcesinkFlow));
1510  );
1511   
1512  accounting_sourcesinkFlow(indicator,nodesModel,years,sourcesink_techs,commodity,pc_accounting_sourcesinkFlow)
1513      $accounting_sourcesinkFlowAgg(indicator,nodesModel,years,sourcesink_techs,commodity,pc_accounting_sourcesinkFlow)
1514      = accounting_sourcesinkFlowAgg(indicator,nodesModel,years,sourcesink_techs,commodity,pc_accounting_sourcesinkFlow);
1515   
1516  * option kill %paramName%Nonzero %paramName%Chk %paramName%Agg
1517   
1518  parameter accounting_indicatorBounds_links(linksModel,years,indicator,pc_accounting_indicatorBounds_links);
1519  accounting_indicatorBounds_links(linksModelToCalc,yearsToCalc,indicator,pc_accounting_indicatorBounds_links)
1520      = sum((linksData)$sameas(linksModelToCalc,linksData),
1521              accounting_indicatorBounds_linksIn(linksData,yearsToCalc,indicator,pc_accounting_indicatorBounds_links));
1522   
1523  accounting_indicatorBounds_links(linksModelToCalc,yearsToCalc,indicator,pc_accounting_indicatorBounds_links)
1524      = sum((linksData)$links_aggregate(linksModelToCalc,linksData),
1525              accounting_indicatorBounds_linksIn(linksData,yearsToCalc,indicator,pc_accounting_indicatorBounds_links));
1526   
1527  parameter accounting_indicatorBounds(accNodesModel,accYears,indicator,pc_accounting_indicatorBounds);
1528  accounting_indicatorBounds(accNodesModel,accYears,indicator,pc_accounting_indicatorBounds)
1529      = sum (accNodesData$sameas(accNodesModel,accNodesData),
1530          accounting_indicatorBoundsIn(accNodesData,accYears,indicator,pc_accounting_indicatorBounds));
1531   
1532  accounting_indicatorBounds(accNodesModel,accYears,indicator,pc_accounting_indicatorBounds)
1533      $(sum (nodesModel$sameas(accNodesModel,nodesModel), 1) > 0)
1534      = sum ((accNodesData,nodesData,nodesModel)
1535              $(aggregateNodesModel(nodesData,nodesModel) and sameas(accNodesModel,nodesModel) and sameas(accNodesData,nodesData)),
1536          accounting_indicatorBoundsIn(accNodesData,accYears,indicator,pc_accounting_indicatorBounds));
1537   
1538  set accounting_perIndicatorNonzero(indicator,indicator_a,accNodesData,accYears);
1539  accounting_perIndicatorNonzero(indicator,indicator_a,accNodesData,accYears)
1540      $sum(pc_accounting_perIndicator$accounting_perIndicatorIn(indicator,indicator_a,accNodesData,accYears,pc_accounting_perIndicator), 1)
1541      = yes;
1542   
1543  parameter accounting_perIndicatorAgg(indicator,indicator_a,nodesModel,accYears,pc_accounting_perIndicator);
1544  accounting_perIndicatorAgg(indicator,indicator_a,nodesModel,accYears,pc_accounting_perIndicator)
1545      $sum((nodesData,accnodesData)
1546              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1547                  and accounting_perIndicatorNonzero(indicator,indicator_a,accnodesData,accYears)), 1)
1548      = sum((nodesData,accnodesData)
1549              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1550                  and accounting_perIndicatorNonzero(indicator,indicator_a,accnodesData,accYears)),
1551          accounting_perIndicatorIn(indicator,indicator_a,accnodesData,accYears,pc_accounting_perIndicator))
1552      / sum((nodesData,accnodesData)
1553              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1554                  and accounting_perIndicatorNonzero(indicator,indicator_a,accnodesData,accYears)),
1555          1);
1556   
1557  parameter accounting_perIndicator(indicator,indicator_a,accNodesModel,accYears,pc_accounting_perIndicator);
1558   
1559  loop(accNodes,
1560  accounting_perIndicator(indicator,indicator_a,accNodesModel,accYears,pc_accounting_perIndicator)
1561      $(sum(accNodesData$(sameas(accNodes,accNodesData)
1562              and accounting_perIndicatorIn(indicator,indicator_a,accNodesData,"horizon",pc_accounting_perIndicator)), 1)
1563          and map_accNodes(accNodesModel,accNodes)
1564              )
1565      = sum(accNodesData$(sameas(accNodes,accNodesData)),
1566              accounting_perIndicatorIn(indicator,indicator_a,accNodesData,"horizon",pc_accounting_perIndicator));
1567   
1568  accounting_perIndicator(indicator,indicator_a,accNodesModel,accYears,pc_accounting_perIndicator)
1569      $(sum(accNodesData$(sameas(accNodes,accNodesData)
1570              and accounting_perIndicatorIn(indicator,indicator_a,accNodesData,accYears,pc_accounting_perIndicator)), 1)
1571          and map_accNodes(accNodesModel,accNodes)
1572          and not sameas(accYears, "horizon"))
1573      = sum(accNodesData$(sameas(accNodes,accNodesData)),
1574              accounting_perIndicatorIn(indicator,indicator_a,accNodesData,accYears,pc_accounting_perIndicator));
1575  );
1576   
1577  accounting_perIndicator(indicator,indicator_a,accNodesModel,accYears,pc_accounting_perIndicator)
1578      $sum(nodesModel$(accounting_perIndicatorAgg(indicator,indicator_a,nodesModel,"horizon",pc_accounting_perIndicator)
1579          and sameas(accNodesModel,nodesModel)), 1)
1580      = sum(nodesModel$sameas(accNodesModel,nodesModel),
1581          accounting_perIndicatorAgg(indicator,indicator_a,nodesModel,"horizon",pc_accounting_perIndicator));
1582   
1583  accounting_perIndicator(indicator,indicator_a,accNodesModel,accYears,pc_accounting_perIndicator)
1584      $sum(nodesModel$(accounting_perIndicatorAgg(indicator,indicator_a,nodesModel,accYears,pc_accounting_perIndicator)
1585          and sameas(accNodesModel,nodesModel) and not sameas(accYears, "horizon")), 1)
1586      = sum(nodesModel$sameas(accNodesModel,nodesModel),
1587          accounting_perIndicatorAgg(indicator,indicator_a,nodesModel,accYears,pc_accounting_perIndicator));
1588   
1589   
1590  * Make sure all required indicators end up in the model
1591  set activeIndicators(accNodesModel,accYears,indicator);
1592  activeIndicators(accNodesModel,accYears,indicator)
1593     $((accounting_indicatorBounds(accNodesModel,accYears,indicator,"obj") <> 0
1596        or accounting_indicatorBounds(accNodesModel,accYears,indicator,"useFixed") <> 0
1597        or accounting_indicatorBounds(accNodesModel,accYears,indicator,"useLower") <> 0
1598        or accounting_indicatorBounds(accNodesModel,accYears,indicator,"useUpper") <> 0 )
1599          and not accounting_indicatorBounds(accNodesModel,accYears,indicator,"isVariable"))
1600     = yes;
1601   
1602  set activeIndicators_links(linksModel,years,indicator);
1603  activeIndicators_links(linksModelToCalc,yearsToCalc,indicator)
1604     $(accounting_indicatorBounds_links(linksModelToCalc,yearsToCalc,indicator,"useFixed") <> 0
1605        or accounting_indicatorBounds_links(linksModelToCalc,yearsToCalc,indicator,"useLower") <> 0
1606        or accounting_indicatorBounds_links(linksModelToCalc,yearsToCalc,indicator,"useUpper") <> 0 )
1607     = yes;
1608   
1609  set variableIndicators(accNodesModel,accYears,indicator);
1610  variableIndicators(accNodesModel,accYears,indicator)
1611     $(accounting_indicatorBounds(accNodesModel,accYears,indicator,"obj") = 0
1612        and accounting_indicatorBounds(accNodesModel,accYears,indicator,"isVariable"))
1613     = yes;
1614   
1615  * Calculate length of years and discount rates per indicator
1616  parameter yearFactor(accNodesModel,accYears,indicator,accYears);
1617  yearFactor(accNodesModel,accYears,indicator,accYears_a)
1618      $(map_accYears(accYears_a,accYears)
1619          and sum(yearsToCalc$(sameas(yearsToCalc,accYears_a)), 1))
1620      = 1;
1621   
1622  yearFactor(accNodesModel,accYears,indicator,accYears_a)
1623      $(map_accYears(accYears_a,accYears)
1624          and sum(yearsToCalc$(sameas(yearsToCalc,accYears_a)), 1)
1625          and accounting_indicatorBounds(accNodesModel,accYears,indicator,"integral"))
1626      = sum(yearsToCalc$sameas(accYears_a,yearsToCalc), yearsLen(yearsToCalc));
1627   
1628  yearFactor(accNodesModel,accYears,indicator,accYears_a)
1629      $(map_accYears(accYears_a,accYears)
1630          and sum(yearsToCalc$(sameas(yearsToCalc,accYears_a)), 1)
1631          and accounting_indicatorBounds(accNodesModel,accYears,indicator,"integral")
1632          and accounting_indicatorBounds(accNodesModel,accYears,indicator,"endyear")
1633          and yearFactor(accNodesModel,accYears,indicator,accYears_a) = inf)
1634      = accounting_indicatorBounds(accNodesModel,accYears,indicator,"endyear");
1635   
1636  yearFactor(accNodesModel,accYears,indicator,accYears_a)
1637      $(map_accYears(accYears_a,accYears)
1638          and sum(yearsToCalc$(sameas(yearsToCalc,accYears_a)), 1)
1639          and accounting_indicatorBounds(accNodesModel,accYears,indicator,"integral")
1640          and accounting_indicatorBounds(accNodesModel,accYears,indicator,"discount"))
1641      = yearFactor(accNodesModel,accYears,indicator,accYears_a)
1642          * (1 - accounting_indicatorBounds(accNodesModel,accYears,indicator,"discount"))
1643                  ** (accYears_a.val - smin(yearsToCalc, yearsToCalc.val));
1644   
1645   
1646  * ==== calculate compound indicators for the optimization ====
1647  scalar compIndicators_pre;
1648  scalar compIndicators_post;
1649   
1650  parameter compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a);
1651  compoundIndicators(accNodesModel,accYears,indicator,accNodesModel,accYears,indicator)
1652      $activeIndicators(accNodesModel,accYears,indicator) = 1;
1653   
1654  set compoundIndicators_act(accNodesModel,accYears,indicator);
1655  option compoundIndicators_act < compoundIndicators;
1656   
1657  parameter compoundIndicatorsExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa);
1658  parameter compoundIndicatorsExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a);
1659  compoundIndicatorsExt(accNodesModel,accYears,indicator,accNodesModel,accYears,indicator,accNodesModel,accYears,indicator)
1660      $compoundIndicators_act(accNodesModel,accYears,indicator) = 1;
1661   
1662  compIndicators_pre = 0;
1663  compIndicators_post = 1;
1664   
1665  option sparseval = 1;
1666  while(compIndicators_pre < compIndicators_post,
1667      compIndicators_pre = sum((accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa)
1668          $compoundIndicatorsExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa), 1);
1669   
1670      compoundIndicatorsExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa)
1671          $(compoundIndicators_act(accNodesModel,accYears,indicator)
1672              and compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
1673              and not accounting_indicatorBounds(accNodesModel_a,accYears_a,indicator_a,"isVariable")
1674              and map_accNodes(accNodesModel_aa,accNodesModel_a)
1675              and map_accYears(accYears_aa,accYears_a))
1676          = compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
1677              * accounting_perIndicator(indicator_a,indicator_aa,accNodesModel_aa,accYears_aa,"perIndicator");
1678   
1679      option compoundIndicatorsExt_r < compoundIndicatorsExt;
1680   
1681      compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa)
1682          $(compoundIndicators_act(accNodesModel,accYears,indicator)
1683              and sum((accNodesModel_a,accYears_a,indicator_a)
1684                      $compoundIndicatorsExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a), 1) = 1)
1685          = sum((accNodesModel_a,accYears_a,indicator_a)
1686                  $(compoundIndicatorsExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a)),
1687              compoundIndicatorsExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a));
1688   
1689      compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa)
1690          $(compoundIndicators_act(accNodesModel,accYears,indicator)
1691              and sum((accNodesModel_a,accYears_a,indicator_a)
1692                      $compoundIndicatorsExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a), 1) > 1)
1693          = sum((accNodesModel_a,accYears_a,indicator_a)
1694                  $(compoundIndicatorsExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a)
1695                      and not (sameas(accNodesModel, accNodesModel_a) and sameas(accYears, accYears_a) and sameas(indicator, indicator_a))),
1696              compoundIndicatorsExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a))
1697          / sum((accNodesModel_a,accYears_a,indicator_a)
1698                  $(compoundIndicatorsExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a)
1699                      and not (sameas(accNodesModel, accNodesModel_a) and sameas(accYears, accYears_a) and sameas(indicator, indicator_a))), 1);
1700   
1701      option compoundIndicators_act < compoundIndicators;
1702      compIndicators_post = sum((accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa)
1703          $compoundIndicatorsExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa), 1);
1704  );
1705  option sparseval = 0;
1706   
1707  * map to sub-years and sub-nodes
1708  compoundIndicatorsExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_a)
1709      $(compoundIndicators_act(accNodesModel,accYears,indicator)
1710          and compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
1711          and map_accYears(accYears_aa,accYears_a)
1712          and map_accNodes(accNodesModel_aa,accNodesModel_a))
1713      = compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
1714          * yearFactor(accNodesModel,accYears,indicator,accYears_aa);
1715   
1716  * Remove all accounting regions and accounting years
1717  compoundIndicatorsExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa)
1718      $(compoundIndicatorsExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa)
1719          and not accounting_indicatorBounds(accNodesModel_aa,accYears_aa,indicator_aa,"isVariable")
1720          and sum(accNodes$(sameas(accNodes,accNodesModel_aa)), 1)
1721              or sameas("horizon",accYears_aa))
1722      = 0;
1723   
1724  * Map from extended parameter to final parameter
1725  option compoundIndicatorsExt_r < compoundIndicatorsExt;
1726  compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa)
1727      $(compoundIndicators_act(accNodesModel,accYears,indicator)
1728          and sum((accNodesModel_a,accYears_a,indicator_a)
1729                  $compoundIndicatorsExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a), 1) = 1)
1730      = sum((accNodesModel_a,accYears_a,indicator_a)
1731              $(compoundIndicatorsExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a)),
1732          compoundIndicatorsExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a));
1733   
1734  compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa)
1735      $(compoundIndicators_act(accNodesModel,accYears,indicator)
1736          and sum((accNodesModel_a,accYears_a,indicator_a)
1737                  $compoundIndicatorsExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a), 1) > 1)
1738      = sum((accNodesModel_a,accYears_a,indicator_a)
1739              $(compoundIndicatorsExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a)
1740                  and not (sameas(accNodesModel, accNodesModel_a) and sameas(accYears, accYears_a) and sameas(indicator, indicator_a))),
1741          compoundIndicatorsExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a))
1742      / sum((accNodesModel_a,accYears_a,indicator_a)
1743              $(compoundIndicatorsExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a)
1744                  and not (sameas(accNodesModel, accNodesModel_a) and sameas(accYears, accYears_a) and sameas(indicator, indicator_a))), 1);
1745   
1746  * Remove all accounting regions and accounting years
1747  compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
1748      $(compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
1749          and not accounting_indicatorBounds(accNodesModel_a,accYears_a,indicator_a,"isVariable")
1750          and (sum(accNodes$(sameas(accNodes,accNodesModel_a)), 1)
1751              or sameas("horizon",accYears_a)))
1752      = 0;
1753   
1754  * Remove all slack indicators except the ones declared in indicatorBounds
1755  compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
1756      $(compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
1757          and sum((accNodesModel_aa,accYears_aa)$accounting_indicatorBounds(accNodesModel_aa,accYears_aa,indicator_a,"isVariable"), 1)
1758          and not accounting_indicatorBounds(accNodesModel_a,accYears_a,indicator_a,"isVariable"))
1759      = 0;
1760   
1761  * ==== compound indicators for the post calculation ====
1762  parameter compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a);
1763  compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel,accYears,indicator)
1764      $(sum(nodesModelToCalc$map_accNodesToCalc(accNodesModel,nodesModelToCalc), 1)
1765          and sum(yearsToCalc$map_accYearsToCalc(accYears,yearsToCalc), 1)) = 1;
1766   
1767  set compoundIndicatorsFull_act(accNodesModel,accYears,indicator);
1768  option compoundIndicatorsFull_act < compoundIndicatorsFull;
1769   
1770  parameter compoundIndicatorsFullExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa);
1771  parameter compoundIndicatorsFullExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a);
1772  compoundIndicatorsFullExt(accNodesModel,accYears,indicator,accNodesModel,accYears,indicator,accNodesModel,accYears,indicator) = 1;
1773   
1774  compIndicators_pre = 0;
1775  compIndicators_post = 1;
1776   
1777  option sparseval = 1;
1778  while(compIndicators_pre < compIndicators_post,
1779      compIndicators_pre = sum((accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa)
1780          $compoundIndicatorsFullExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa), 1);
1781   
1782      compoundIndicatorsFullExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa)
1783          $(compoundIndicatorsFull_act(accNodesModel,accYears,indicator)
1784              and compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
1785              and not accounting_indicatorBounds(accNodesModel_a,accYears_a,indicator_a,"isVariable")
1786              and map_accNodes(accNodesModel_aa,accNodesModel_a)
1787              and map_accYears(accYears_aa,accYears_a))
1788          = compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
1789              * accounting_perIndicator(indicator_a,indicator_aa,accNodesModel_aa,accYears_aa,"perIndicator");
1790   
1791      option compoundIndicatorsFullExt_r < compoundIndicatorsFullExt;
1792   
1793      compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa)
1794          $(compoundIndicatorsFull_act(accNodesModel,accYears,indicator)
1795              and sum((accNodesModel_a,accYears_a,indicator_a)
1796                      $compoundIndicatorsFullExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a), 1) = 1)
1797          = sum((accNodesModel_a,accYears_a,indicator_a)
1798                  $(compoundIndicatorsFullExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a)),
1799              compoundIndicatorsFullExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a));
1800   
1801      compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa)
1802          $(compoundIndicatorsFull_act(accNodesModel,accYears,indicator)
1803              and sum((accNodesModel_a,accYears_a,indicator_a)
1804                      $compoundIndicatorsFullExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a), 1) > 1)
1805          = sum((accNodesModel_a,accYears_a,indicator_a)
1806                  $(compoundIndicatorsFullExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a)
1807                      and not (sameas(accNodesModel, accNodesModel_a) and sameas(accYears, accYears_a) and sameas(indicator, indicator_a))),
1808              compoundIndicatorsFullExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a))
1809          / sum((accNodesModel_a,accYears_a,indicator_a)
1810                  $(compoundIndicatorsFullExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a)
1811                      and not (sameas(accNodesModel, accNodesModel_a) and sameas(accYears, accYears_a) and sameas(indicator, indicator_a))), 1);
1812   
1813      option compoundIndicatorsFull_act < compoundIndicatorsFull;
1814      compIndicators_post = sum((accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa)
1815          $compoundIndicatorsFullExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa), 1);
1816  );
1817  option sparseval = 0;
1818   
1819  * map to sub-years and sub-nodes
1820  compoundIndicatorsFullExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_a)
1821      $(compoundIndicatorsFull_act(accNodesModel,accYears,indicator)
1822          and compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
1823          and map_accYears(accYears_aa,accYears_a)
1824          and map_accNodes(accNodesModel_aa,accNodesModel_a))
1825      = compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
1826          * yearFactor(accNodesModel,accYears,indicator,accYears_aa);
1827   
1828  * Remove all accounting regions and accounting years
1829  compoundIndicatorsFullExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa)
1830      $(compoundIndicatorsFullExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa)
1831          and not accounting_indicatorBounds(accNodesModel_aa,accYears_aa,indicator_aa,"isVariable")
1832          and sum(accNodes$(sameas(accNodes,accNodesModel_aa)), 1)
1833              or sameas("horizon",accYears_aa))
1834      = 0;
1835   
1836  * Map from extended parameter to final parameter
1837  option compoundIndicatorsFullExt_r < compoundIndicatorsFullExt;
1838  compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa)
1839      $(compoundIndicatorsFull_act(accNodesModel,accYears,indicator)
1840          and sum((accNodesModel_a,accYears_a,indicator_a)
1841                  $compoundIndicatorsFullExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a), 1) = 1)
1842      = sum((accNodesModel_a,accYears_a,indicator_a)
1843              $(compoundIndicatorsFullExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a)),
1844          compoundIndicatorsFullExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a));
1845   
1846  compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa)
1847      $(compoundIndicatorsFull_act(accNodesModel,accYears,indicator)
1848          and sum((accNodesModel_a,accYears_a,indicator_a)
1849                  $compoundIndicatorsFullExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a), 1) > 1)
1850      = sum((accNodesModel_a,accYears_a,indicator_a)
1851              $(compoundIndicatorsFullExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a)
1852                  and not (sameas(accNodesModel, accNodesModel_a) and sameas(accYears, accYears_a) and sameas(indicator, indicator_a))),
1853          compoundIndicatorsFullExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a))
1854      / sum((accNodesModel_a,accYears_a,indicator_a)
1855              $(compoundIndicatorsFullExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a)
1856                  and not (sameas(accNodesModel, accNodesModel_a) and sameas(accYears, accYears_a) and sameas(indicator, indicator_a))), 1);
1857   
1858  * Remove all accounting regions and accounting years
1859  compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
1860      $(compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
1861          and not accounting_indicatorBounds(accNodesModel_a,accYears_a,indicator_a,"isVariable")
1862          and (sum(accNodes$(sameas(accNodes,accNodesModel_a)), 1)
1863              or sameas("horizon",accYears_a)))
1864      = 0;
1865   
1866  * Remove all slack indicators except the ones declared in indicatorBounds
1867  compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
1868      $(compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
1869          and sum((accNodesModel_aa,accYears_aa)$accounting_indicatorBounds(accNodesModel_aa,accYears_aa,indicator_a,"isVariable"), 1)
1870          and not accounting_indicatorBounds(accNodesModel_a,accYears_a,indicator_a,"isVariable"))
1871      = 0;
1872   
1873  * Check if the objective value and optimization sense is set correctly
1874  scalar opti_values, opti_sense;
1875  opti_values = sum((accNodesModel,accYears,indicator)$(accounting_indicatorBounds(accNodesModel,accYears,indicator,"obj") <> 0), 1);
1876  opti_sense = sum((accNodesModel,accYears,indicator), accounting_indicatorBounds(accNodesModel,accYears,indicator,"obj"));
1877  abort$(opti_values < 1)
1878      "Accounting: No indicator specified as objective value"
1879  abort$(opti_values > 1)
1880      "Accounting: Too many indicators specified as objective value"
1881  abort$(opti_sense <> -1 and opti_sense <> 1)
1882      "Accounting: Optimization sense has to be either -1 or 1"
INCLUDE    C:\Local\REMix\framework\remix\framework\model\source\accounting\annuities.gms
1884  * SPDX-FileCopyrightText: Copyright (c) 2023 German Aerospace Center (DLR)
1885  * SPDX-License-Identifier: BSD-3-Clause
1886   
1887  * Calculation of annuities
1888   
1889  abort$(sum((indicator,nodesModelToCalc,converter_techs,vintage)
1890          $(accounting_converterUnits(indicator,nodesModelToCalc,converter_techs,vintage,"useAnnuity") = 1
1891          and accounting_converterUnits(indicator,nodesModelToCalc,converter_techs,vintage,"amorTime") < 1), 1) > 0 )
1892      "Accounting: Some converter technologies use annuities but have no amortization time"
1893   
1894  parameter accounting_annuityFactor_converter(indicator,nodesModel,converter_techs,vintage);
1895  accounting_annuityFactor_converter(indicator,nodesModelToCalc,converter_techs,vintage)
1896      $accounting_converterUnits(indicator,nodesModelToCalc,converter_techs,vintage,"useAnnuity")
1897      =
1898      accounting_converterUnits(indicator,nodesModelToCalc,converter_techs,vintage,"interest")
1899          * (1 + accounting_converterUnits(indicator,nodesModelToCalc,converter_techs,vintage,"interest"))
1900          ** accounting_converterUnits(indicator,nodesModelToCalc,converter_techs,vintage,"amorTime")
1901      / ((1 + accounting_converterUnits(indicator,nodesModelToCalc,converter_techs,vintage,"interest"))
1902          ** accounting_converterUnits(indicator,nodesModelToCalc,converter_techs,vintage,"amorTime") - 1);
1903   
1904   
1905  abort$(sum((indicator,nodesModelToCalc,storage_techs,vintage)
1906          $(accounting_storageUnits(indicator,nodesModelToCalc,storage_techs,vintage,"useAnnuity") = 1
1907          and accounting_storageUnits(indicator,nodesModelToCalc,storage_techs,vintage,"amorTime") < 1), 1) > 0 )
1908      "Accounting: Some storage technologies use annuities but have no amortization time"
1909   
1910  parameter accounting_annuityFactor_storage(indicator,nodesModel,storage_techs,vintage);
1911  accounting_annuityFactor_storage(indicator,nodesModelToCalc,storage_techs,vintage)
1912      $accounting_storageUnits(indicator,nodesModelToCalc,storage_techs,vintage,"useAnnuity")
1913      =
1914      accounting_storageUnits(indicator,nodesModelToCalc,storage_techs,vintage,"interest")
1915          * (1 + accounting_storageUnits(indicator,nodesModelToCalc,storage_techs,vintage,"interest"))
1916          ** accounting_storageUnits(indicator,nodesModelToCalc,storage_techs,vintage,"amorTime")
1917      / ((1 + accounting_storageUnits(indicator,nodesModelToCalc,storage_techs,vintage,"interest"))
1918          ** accounting_storageUnits(indicator,nodesModelToCalc,storage_techs,vintage,"amorTime") - 1);
1919   
1920   
1921  abort$(sum((indicator,linksModelToCalc,transfer_techs,vintage)
1922          $(accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"useAnnuity") = 1
1923          and accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"amorTime") < 1), 1) > 0 )
1924      "Accounting: Some transfer technologies use annuities but have no amortization time"
1925   
1926  parameter accounting_annuityFactor_transferLink(indicator,linksModel,transfer_techs,vintage);
1927  accounting_annuityFactor_transferLink(indicator,linksModelToCalc,transfer_techs,vintage)
1928      $accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"useAnnuity")
1929      =
1930      accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"interest")
1931          * (1 + accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"interest"))
1932          ** accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"amorTime")
1933      / ((1 + accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"interest"))
1934          ** accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"amorTime") - 1);
1935   
1936   
1937   
1938  abort$(sum((indicator,linksModelToCalc,transfer_techs,vintage,link_types)
1939          $(accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"useAnnuity") = 1
1940          and accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"amorTime") < 1), 1) > 0 )
1941      "Accounting: Some transfer-per-length technologies use annuities but have no amortization time"
1942   
1943  parameter accounting_annuityFactor_transferDistance(indicator,linksModel,transfer_techs,vintage,link_types);
1944  accounting_annuityFactor_transferDistance(indicator,linksModelToCalc,transfer_techs,vintage,link_types) = 1;
1945   
1946  accounting_annuityFactor_transferDistance(indicator,linksModelToCalc,transfer_techs,vintage,link_types)
1947      $accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"useAnnuity")
1948      =
1949      accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"interest")
1950          * (1 + accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"interest"))
1951          ** accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"amorTime")
1952      / ((1 + accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"interest"))
1953          ** accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"amorTime") - 1);
1954   
INCLUDE    C:\Local\REMix\framework\remix\framework\model\source\methods\mga_pre.gms
1956  * SPDX-FileCopyrightText: Copyright (c) 2023 German Aerospace Center (DLR)
1957  * SPDX-License-Identifier: BSD-3-Clause
1958   
INCLUDE    C:\Local\REMix\framework\remix\framework\model\source\methods\pareto_pre.gms
1962  * SPDX-FileCopyrightText: Copyright (c) 2023 German Aerospace Center (DLR)
1963  * SPDX-License-Identifier: BSD-3-Clause
1964   
INCLUDE    C:\Local\REMix\framework\remix\framework\model\source\postcalc\declaration.gms
1968  * SPDX-FileCopyrightText: Copyright (c) 2023 German Aerospace Center (DLR)
1969  * SPDX-License-Identifier: BSD-3-Clause
1970  * // # Output data
1971  * // This is the reference data model of the REMix output.
1972  * //
1973  * // ## Standard output
1976   
1983   
1985   
1986  set capType / "build", "decom", "total", "lowerLimit", "upperLimit", "total_degraded" /;
1987  set balanceType / "netto", "brutto", "positive", "negative", "flh" /;
1988  set profileType / "upper", "fixed", "lower" /;
1989  set r2a_has_converter_cost(indicator,nodesModel,years,techs,vintage,commodity);
1990   
1991  ** // OUTPUT: indicator_accounting | OEO_00000350:quantity value
1992  * // ### indicator_accounting
1993  * // Title: Accounting indicators Post-calculation
1994  parameter indicator_accounting(accNodesModel,accYears,indicator) "Post-calculation aggregated indicator accounting" ;
1995  * //
1996  ** // OUTPUT: indicator_accounting_ref | OEO_00000350:quantity value
1997  * // ### indicator_accounting_ref
1998  * // Title: Accounting indicators reference
1999  parameter indicator_accounting_ref(accNodesModel,accYears,indicator) "Indicator accounting optimization levels" ;
2000  * //
2001  ** // OUTPUT: indicator_accounting_comp | OEO_00000350:quantity value
2002  * // ### indicator_accounting_comp
2003  * // Title: Accounting indicators composition
2004  parameter indicator_accounting_comp(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a) "Indicator accounting with other indicator composition" ;
2005  * //
2006  ** // OUTPUT: indicator_accounting_detailed | OEO_00000350:quantity value
2007  * // ### indicator_accounting_detailed
2008  * // Title: Accounting indicators detail
2009  parameter indicator_accounting_detailed(indicator,nodesModel,years,techs) "Indicator accounting with technological composition" ;
2010  * //
2011  ** // OUTPUT: indicator_accounting_links | OEO_00000350:quantity value
2012  * // ### indicator_accounting_links
2013  * // Title: Accounting indicators per transfer link
2014  parameter indicator_accounting_links(indicator,nodesModel,nodesModel_a,linksModel,years,techs) "Indicator accounting of transfer technologies" ;
2015  * //
2016  parameter converter_ratedInput(techs,vintage,commodity);
2017  parameter converter_ratedOutput(techs,vintage,commodity);
2018  parameter converter_ratedOutput_min(nodesModel,years,techs,commodity);
2019  parameter converter_ratedOutput_max(nodesModel,years,techs,commodity);
2020   
2021  ** // OUTPUT: converter_caps | OEO_00010257:power capacity
2022  * // ### converter_caps
2023  * // Title: Coverter capacities post-calculation
2024  parameter converter_caps(accNodesModel,accYears,techs,commodity,capType) "Converter capacities, aggregated total" ;
2025  * //
2026  parameter converter_caps_ext(accNodesModel,nodesModel,accYears,years,techs,vintage,commodity,capType);
2027   
2028  ** // OUTPUT: converter_units | OEO_00000350:quantity value
2029  * // ### converter_units
2030  * // Title: Coverter units post-calculation
2031  parameter converter_units(accNodesModel,accYears,techs,vintage,capType) "Converter units" ;
2032  * //
2033  parameter converter_units_ext(accNodesModel,nodesModel,accYears,years,techs,vintage,capType);
2034   
2035  parameter max_transfer_coefficient(techs,commodity);
2036  parameter min_transfer_coefficient(techs,commodity);
2037  ** // OUTPUT: transfer_links | OEO_00000350:quantity value
2038  * // ### transfer_links
2039  * // Title: Transfer post-calculation
2040  parameter transfer_links(linksModel,years,techs,vintage,capType) "Transfer links" ;
2041  * //
2042  ** // OUTPUT: transfer_caps | OEO_00010257:power capacity
2043  * // ### transfer_caps
2044  * // Title: Transfer capacities post-calculation
2045  parameter transfer_caps(nodesModel_start,nodesModel_end,linksModel,years,techs,commodity,capType) "Transfer capacities, aggregated total" ;
2046  * //
2047  ** // OUTPUT: transfer_flows | OEO_00050019:energy amount value
2048  * // ### transfer_flows
2049  * // Title: Transfer hourly flows
2050  parameter transfer_flows(timeModel,nodesModel_start,nodesModel_end,linksModel,years,techs,commodity) "Hourly link flows" ;
2051  * //
2052  ** // OUTPUT: transfer_flows_annual | OEO_00050019:energy amount value
2053  * // ### transfer_flows_annual
2054  * // Title: Transfer annual flows
2055  parameter transfer_flows_annual(nodesModel_start,nodesModel_end,linksModel,years,techs,commodity,balanceType) "Annual link flows" ;
2056  * //
2057  ** // OUTPUT: transfer_losses | OEO_00050019:energy amount value
2058  * // ### transfer_losses
2059  * // Title: Transfer hourly losses
2060  parameter transfer_losses(timeModel,nodesModel_start,nodesModel_end,linksModel,years,techs,commodity) "Hourly link losses" ;
2061  * //
2062  ** // OUTPUT: transfer_losses_annual | OEO_00050019:energy amount value
2063  * // ### transfer_losses_annual
2064  * // Title: Transfer annual losses
2065  parameter transfer_losses_annual(nodesModel_start,nodesModel_end,linksModel,years,techs,commodity,balanceType) "Annual link losses" ;
2066  * //
2067  parameter storage_size_max(nodesModel,years,techs,commodity);
2068  parameter storage_size_min(nodesModel,years,techs,commodity);
2069  ** // OUTPUT: storage_units |  OEO_00000350:quantity value
2070  * // ### storage_units
2071  * // Title: Storage units post-calculation
2072  parameter storage_units(accNodesModel,accYears,techs,vintage,capType) "Storage units" ;
2073  * //
2074  parameter storage_units_ext(accNodesModel,nodesModel,accYears,years,techs,vintage,capType);
2075  ** // OUTPUT: storage_caps | OEO_00230000:energy storage capacity
2076  * // ### storage_caps
2077  * // Title: Storage capacities post-calculation
2078  parameter storage_caps(accNodesModel,accYears,techs,commodity,capType) "Storage capacities, aggregated total" ;
2079  * //
2080  parameter storage_caps_ext(accNodesModel,nodesModel,accYears,years,techs,vintage,commodity,capType);
2081  ** // OUTPUT: storage_level_out | OEO_00330012:energy storage content
2082  * // ### storage_level_out
2083  * // Title: Storage level
2084  parameter storage_level_out(timeModel,accNodesModel,accYears,techs,commodity) "Storage level per time step" ;
2085  * //
2086  parameter storage_level_out_ext(timeModel,accNodesModel,nodesModel,accYears,years,techs,vintage,commodity);
2087  ** // OUTPUT: storage_flows | OEO_00050019:energy amount value
2088  * // ### storage_flows
2089  * // Title: Storage hourly flows
2090  parameter storage_flows(timeModel,accNodesModel,accYears,techs,commodity) "Storage flows per time step" ;
2091  * //
2092  parameter storage_flows_ext(timeModel,accNodesModel,nodesModel,accYears,years,techs,vintage,commodity);
2093  ** // OUTPUT: storage_flows_annual | OEO_00050019:energy amount value
2094  * // ### storage_flows_annual
2095  * // Title: Storage annual flows
2096  parameter storage_flows_annual(accNodesModel,accYears,techs,commodity,balanceType) "Aggregated storage flows" ;
2097  * //
2098  ** // OUTPUT: storage_losses_out | OEO_00050019:energy amount value
2099  * // ### storage_losses_out
2100  * // Title: Storage hourly losses
2101  parameter storage_losses_out(timeModel,accNodesModel,accYears,techs,commodity) "Storage losses per time step" ;
2102  * //
2103  ** // OUTPUT: storage_losses_annual | OEO_00050019:energy amount value
2104  * // ### storage_losses_annual
2105  * // Title: Storage annual losses
2106  parameter storage_losses_annual(accNodesModel,accYears,techs,commodity,balanceType) "Aggregated storage losses" ;
2107  * //
2108  ** // OUTPUT: commodity_balance | OEO_00000350:quantity value
2109  * // ### commodity_balance
2110  * // Title: Hourly commodity balance
2111  parameter commodity_balance(timeModel,accNodesModel,accYears,techs,commodity) "Commodity balances per model hour" ;
2112  parameter commodity_balance_ext(timeModel,accNodesModel,nodesModel,accYears,years,techs,vintage,commodity);
2113  * //
2114  ** // OUTPUT: commodity_balance_annual | OEO_00000350:quantity value
2115  * // ### commodity_balance_annual
2116  * // Title: Annual commodity balance
2117  parameter commodity_balance_annual(accNodesModel,accYears,techs,commodity,balanceType) "Aggregated commodity balances" ;
2118  * //
2119  ** // OUTPUT: marginals_sourcesink_profile | OEO_00040008:marginal cost
2120  * // ### marginals_sourcesink_profile
2121  * // Title: Source-sink marginals
2122  parameter marginals_sourcesink_profile(timeModel,nodesModel,years,techs,commodity) "Source and sink flow marginal values" ;
2123  * //
2124  ** // OUTPUT: marginals_balance | OEO_00040008:marginal cost
2125  * // ### marginals_balance
2126  * // Title: Nodel balance marginals
2127  parameter marginals_balance(timeModel,nodesModel,years,commodity) "Nodal balance marginal values" ;
2128  * //
2129  ** // OUTPUT: marginals_sourcesink_sum | OEO_00040008:marginal cost
2130  * // ### marginals_sourcesink_sum
2131  * // Title: Source-sink annual marginals
2132  parameter marginals_sourcesink_sum(nodesModel,years,techs,commodity) "Annual source and sink flow marginal values" ;
2133  * //
2134  ** // OUTPUT: marginals_indicator_bounds | OEO_00040008:marginal cost
2135  * // ### marginals_indicator_bounds
2136  * // Title: Indicator bounds marginals
2137  parameter marginals_indicator_bounds(accNodesModel,accYears,indicator) "Accounting indicator marginals" ;
2138  * //
2139  * // ## REMix-AMIRIS interface output
2140  * //
2141  ** // OUTPUT: r2a_annuity_cost_converter | OEO_00040009:cost
2142  * // ### r2a_annuity_cost_converter
2143  * // Title: Converter annuity cost
2144  parameter r2a_annuity_cost_converter(indicator,accNodesModel,accYears,techs,vintage,commodity) "Annuity cost of converters" ;
2145  * //
2146  ** // OUTPUT: r2a_spec_cost_converter | OEO_00040009:cost
2147  * // ### r2a_spec_cost_converter
2148  * // Title: Converter specific cost
2149  parameter r2a_spec_cost_converter(indicator,accNodesModel,accYears,techs,vintage,commodity) "Specific cost of converters" ;
2150  * //
2151  ** // OUTPUT: r2a_spec_cost_fuel | OEO_00040009:cost
2152  * // ### r2a_spec_cost_fuel
2153  * // Title: Commodity specific cost
2154  parameter r2a_spec_cost_fuel(indicator,accNodesModel,accYears,techs,commodity) "Specific cost of commodities, used particularly for fuels" ;
2155  * //
2156  ** // OUTPUT: r2a_spec_cost_indicator | OEO_00040009:cost
2157  * // ### r2a_spec_cost_indicator
2158  * // Title: Indicator specific cost
2159  parameter r2a_spec_cost_indicator(indicator,indicator_a,accNodesModel,accYears) "Specific indicator cost" ;
2160  * //
2161  ** // OUTPUT: r2a_converter_efficiencies | OEO_00140050:efficiency value
2162  * // ### r2a_converter_efficiencies
2163  * // Title: Indicator specific cost
2164  parameter r2a_converter_efficiencies(techs,vintage,activity,commodity,commodity_a) "Converter-specific efficiency" ;
2165  * //
2166  ** // OUTPUT: r2a_converter_avail_factor | OEO_00000350:quantity value
2167  * // ### r2a_converter_avail_factor
2168  * // Title: Converter availability factor
2169  parameter r2a_converter_avail_factor(accNodesModel,accYears,techs,vintage) "Availability factor of converter technologies" ;
2170  parameter r2a_converter_avail_profile(timeModel,accNodesModel,accYears,techs,commodity,profileType) "Availability of converter technologies" ;
2171  parameter r2a_converter_avail_profile_ext(timeModel,accNodesModel,nodesModel,accYears,years,techs,vintage,commodity,profileType);
2172  * //
2173  ** // OUTPUT: r2a_storage_e2p | OEO_00000350:quantity value
2174  * // ### r2a_storage_e2p
2175  * // Title: E2P Storage
2176  parameter r2a_storage_e2p(accNodesModel,accYears,techs,vintage,commodity,capType) "Energy-to-power ratio" ;
2177  * //
2178  ** // OUTPUT: r2a_storage_selfdischarge | OEO_00000350:quantity value
2179  * // ### r2a_storage_selfdischarge
2180  * // Title: Storage self discharge rates
2181  parameter r2a_storage_selfdischarge(accNodesModel,accYears,techs,vintage,commodity);
2182   
INCLUDE    C:\Local\REMix\framework\remix\framework\model\source\loadgdx.gms
2186  * SPDX-FileCopyrightText: Copyright (c) 2023 German Aerospace Center (DLR)
2187  * SPDX-License-Identifier: BSD-3-Clause
2188   
2189  * ==== global settings ====
2191   
2193   
INCLUDE    C:\Local\REMix\framework\remix\framework\model\source\core\converter.gms
2195  * SPDX-FileCopyrightText: Copyright (c) 2023 German Aerospace Center (DLR)
2196  * SPDX-License-Identifier: BSD-3-Clause
2197   
2198  * // # core_converter
2199  * // The equations in this file describe the converters in the model.
2200   
2201  * // ## Advanced features
2202  * //
2203  * // You can find a more detailed explanation of the %curly_open%ref%curly_close%`MIP features <explanations_mip_label>`.
2204  ** // There is also a more detailed explanation on the modeling of outages at the %curly_open%ref%curly_close%`resilience section <explanations_resilience_label>`.
2205  * //
2206  * // In the following table you can see which modifications you have to make to your data to use the different features.
2207  * //
2208  * // | Feature | Modification |
2209  * // | ------ | ------ |
2210  * // | MIP expansion | The converter_tech_Parameter "mipUnits" has to be set to 1 in converter_techParam.dat for the technologies and years where descrete expansion is wanted |
2211  * // | Minimum up/downtime | The converter_tech_Parameters "minUptime" and/or "minDowntime" need to be set to the according amount of minimum time steps.Furthermore, the converter_tech_Parameter "mipDispatch" has to be set to 1 in converter_techParam.dat
2212  * // for the technologies and years where a minimum up- or downtime should be applied so that the units can be shut down. "mipUnits" will automatically be set to 1 |
2213  * // | Partial load | The converter_tech_Parameter "mipDispatch" has to be set to 1 in converter_techParam.dat for the technologies and years where you want to make use of the partial load feature. You also have to set a value to
2214  * // the converter_coefficient_parameters "minLoad" and/or "maxLoad" for the according technologies, vintages, activities and commodities. You can then for example set different "coefficient" values for each activity in converter_coefficient.dat |
2215  ** // | Outages | You have to include the converter_outageProfile.dat-file and while executing the model you have to set --method=resilience |
2216   
2217  * // ## %curly_open%ref%curly_close%`sets <remix_model_sets_label>`
2218  * //
2219  * // ### set_converter_techs.dat
2220  * // In this file all converter technologies are listed that can be used within your model.
2221  * //
2222  * // ### set_activities.dat
2223  * // All modes with which the converter technologies can be operated need to be added here.
2224  * // Examples: Charge (for the charging mode of a storage), Powergen (for the mode in which a converter produces electricity), Curtailment (for the mode in which a renewable power plant is shut down), …
2225  * // If you would like to use the partial load feature, all activity modes that should be available for this feature need to be defined here as well.
2226  * //
2227  * // ### set_commodities.dat
2228  * // In this file all commodities are listed that can be used and converted by the converter technologies.
2229  * // Examples: Electricity, Coal, Biomass, Hydrogen, …
2230   
2231  * // ## Variables
2232  * // {special_table_converter_variables}
3173   
3174  * ==== loading units from gdx file ====
3175   
3176  * Load units from gdx file
3178   
3179  * ==== calculation of mappings ====
3180   
3181  * Technologies with a lifeTime > 0 are available
3182  set converter_availTech(nodesModel,years,converter_techs,vintage);
3183  converter_availTech(nodesModel,years,converter_techs,vintage)
3184      $(vintage.val = smax(vintage_a$(vintage_a.val <= years.val
3185          and converter_techParam(converter_techs,vintage_a,"lifeTime") > 0), vintage_a.val)) = yes;
3186   
3187  * Technologies to optimize become unavailable if they have an unitsUpperLimit of 0
3188  converter_availTech(nodesModel,years,converter_techs,vintage)
3189      $(yearsToCalc(years) and converter_capacityParam(nodesModel,years,converter_techs,"unitsUpperLimit") = 0 ) = no;
3190   
3191  * Technologies already built become unavailable if they have an unitsBuild of 0
3192  converter_availTech(nodesModel,years,converter_techs,vintage)
3193      $( ( not yearsToCalc(years)) and converter_capacityParam(nodesModel,years,converter_techs,"unitsBuild") = 0 ) = no;
3194   
3195  * Used technologies are available technologies over their technical lifeTime
3196  set converter_usedTech(nodesModel,years,converter_techs,vintage);
3197  converter_usedTech(nodesModel,years,converter_techs,vintage)
3198      $(vintage.val <= years.val
3199          and years.val < smax(years_a$converter_availTech(nodesModel,years_a,converter_techs,vintage),
3200                                  years_a.val + converter_techParam(converter_techs,vintage,"lifeTime"))
3201          ) = yes;
3202   
3203  * Technologies have to be decomissioned in the interval of first avail + lifetime to last avail + lifetime
3204  set converter_decomTech(nodesModel,years,converter_techs,vintage);
3205  converter_decomTech(nodesModel,years,converter_techs,vintage)
3206    $(sum(years_a$converter_usedTech(nodesModel,years_a,converter_techs,vintage), 1)
3207      and sum(yearsToCalc
3208        $(sameas(years, yearsToCalc)
3209          and yearsToCalc.val >= smin(years_a$converter_availTech(nodesModel,years_a,converter_techs,vintage), years_a.val) + converter_techParam(converter_techs,vintage,"lifeTime")
3210          and yearsToCalc.val <= smax(years_a$converter_availTech(nodesModel,years_a,converter_techs,vintage), years_a.val) + converter_techParam(converter_techs,vintage,"lifeTime")), 1))
3211    = yes;
3212   
3213  * Extend the decom frame to the year after the last year of usedTech
3214  converter_decomTech(nodesModel,yearsToCalc,converter_techs,vintage)
3215    $(converter_usedTech(nodesModel,yearsToCalc-1,converter_techs,vintage)
3216      and converter_decomTech(nodesModel,yearsToCalc-1,converter_techs,vintage))
3217    = yes;
3218   
3219  * Mapping for used activities and commodities
3220  set converter_usedActCom(converter_techs,vintage,activity,commodity);
3221  option converter_usedActCom < converter_coefficient;
3222   
3223  set converter_usedAct(converter_techs,vintage,activity);
3224  option converter_usedAct < converter_usedActCom;
3225   
3226  set converter_usedCom(converter_techs,vintage,commodity);
3227  option converter_usedCom < converter_usedActCom;
3228   
3229  set converter_usedTechAct(nodesModel,years,converter_techs,vintage,activity);
3230  converter_usedTechAct(nodesModel,years,converter_techs,vintage,activity)
3231      $(converter_usedTech(nodesModel,years,converter_techs,vintage)
3232          and converter_usedAct(converter_techs,vintage,activity))
3233      = yes;
3234   
3235  set converter_useRampPos(nodesModel,years,converter_techs,vintage);
3236  converter_useRampPos(nodesModelToCalc,yearsToCalc,converter_techs,vintage)
3237    $(sum(indicator$accounting_converterStartup(indicator,nodesModelToCalc,converter_techs,vintage,"perRamp"), 1)
3238      or sum(indicator$accounting_converterStartup(indicator,nodesModelToCalc,converter_techs,vintage,"perRampPos"), 1))
3239    = 1;
3240   
3241  set converter_useRampNeg(nodesModel,years,converter_techs,vintage);
3242  converter_useRampNeg(nodesModelToCalc,yearsToCalc,converter_techs,vintage)
3243    $(sum(indicator$accounting_converterStartup(indicator,nodesModelToCalc,converter_techs,vintage,"perRamp"), 1)
3244      or sum(indicator$accounting_converterStartup(indicator,nodesModelToCalc,converter_techs,vintage,"perRampNeg"), 1))
3245    = 1;
3246   
3247   
3248  * ==== aggregation of profiles ====
3249   
3250  * derive upper and lower profiles then aggregate
3251  set converter_activity_hasProfileIn(nodesData,years,converter_techs,pc_converter_activityProfile);
3252  option converter_activity_hasProfileIn < converter_activityProfileIn;
3253   
3254  set converter_activity_hasProfile(nodesModel,years,converter_techs,pc_converter_activityProfile);
3255  converter_activity_hasProfile(nodesModelToCalc,yearsToCalc,converter_techs,pc_converter_activityProfile)
3256      = sum(nodesData$aggregateNodesModel(nodesData,nodesModelToCalc),
3257              converter_activity_hasProfileIn(nodesData,yearsToCalc,converter_techs,pc_converter_activityProfile));
3258   
3259  set converter_coefficient_hasProfileIn(nodesData,years,converter_techs,vintage,activity,commodity);
3260  option converter_coefficient_hasProfileIn < converter_coefficientProfileIn;
3261   
3262  set converter_coefficient_hasProfile(nodesModel,years,converter_techs,vintage,activity,commodity);
3263  converter_coefficient_hasProfile(nodesModelToCalc,yearsToCalc,converter_techs,vintage,activity,commodity)
3264      = sum(nodesData$aggregateNodesModel(nodesData,nodesModelToCalc),
3265              converter_coefficient_hasProfileIn(nodesData,yearsToCalc,converter_techs,vintage,activity,commodity));
3266   
3267  * aagregate time dimension
3268  parameter converter_activityProfileIn_aggTime(timeModel,nodesData,yearsToCalc,converter_techs,pc_converter_activityProfile);
3269  converter_activityProfileIn_aggTime(timeModelToCalc,nodesData,yearsToCalc,converter_techs,pc_converter_activityProfile)
3270    $converter_activity_hasProfileIn(nodesData,yearsToCalc,converter_techs,pc_converter_activityProfile)
3271    = sum(timeData$timeMapping(timeData,timeModelToCalc),
3272            converter_activityProfileIn(timeData,nodesData,yearsToCalc,converter_techs,pc_converter_activityProfile)
3273            / timeLength(timeModelToCalc));
3274  option clear = converter_activityProfileIn;
3275   
3276  * weighted average for a real sum of units upper limits, plain average if one region has an upper limit of inf
3277  parameter converter_activityProfile(timeModel,nodesModel,years,converter_techs,vintage,pc_converter_activityProfile);
3278  converter_activityProfile(timeModelToCalc,converter_usedTech(nodesModelToCalc,yearsToCalc,converter_techs,vintage),"upper")
3279      = converter_techParam(converter_techs,vintage,"activityUpperLimit");
3280  converter_activityProfile(timeModelToCalc,converter_usedTech(nodesModelToCalc,yearsToCalc,converter_techs,vintage),"lower")
3281      = converter_techParam(converter_techs,vintage,"activityLowerLimit");
3282   
3283   
3284  set converter_finiteUnitLimit(nodesModelToCalc,yearsToCalc,converter_techs);
3285  converter_finiteUnitLimit(nodesModelToCalc,yearsToCalc,converter_techs)
3286      = sum(nodesData$aggregateNodesModel(nodesData,nodesModelToCalc), converter_capacityParamIn(nodesData,yearsToCalc,converter_techs,"unitsUpperLimit")) > 0
3287          and sum(nodesData$aggregateNodesModel(nodesData,nodesModelToCalc), converter_capacityParamIn(nodesData,yearsToCalc,converter_techs,"unitsUpperLimit")) < inf;
3288   
3289  set converter_infiniteUnitLimit(nodesModelToCalc,yearsToCalc,converter_techs);
3290  converter_infiniteUnitLimit(nodesModelToCalc,yearsToCalc,converter_techs)
3291      = sum(nodesData$aggregateNodesModel(nodesData,nodesModelToCalc), converter_capacityParamIn(nodesData,yearsToCalc,converter_techs,"unitsUpperLimit")) = inf;
3292   
3293  converter_activityProfile(timeModelToCalc,converter_usedTech(nodesModelToCalc,yearsToCalc,converter_techs,vintage),pc_converter_activityProfile)
3294      $(converter_activity_hasProfile(nodesModelToCalc,yearsToCalc,converter_techs,pc_converter_activityProfile)
3295          and converter_finiteUnitLimit(nodesModelToCalc,yearsToCalc,converter_techs))
3296      = sum(nodesData$(aggregateNodesModel(nodesData,nodesModelToCalc)
3297                  and converter_capacityParamIn(nodesData,yearsToCalc,converter_techs,"unitsUpperLimit") < inf ),
3298                converter_activityProfileIn_aggTime(timeModelToCalc,nodesData,yearsToCalc,converter_techs,pc_converter_activityProfile)
3299                * converter_capacityParamIn(nodesData,yearsToCalc,converter_techs,"unitsUpperLimit"))
3300      / sum(nodesData$aggregateNodesModel(nodesData,nodesModelToCalc),
3301              converter_capacityParamIn(nodesData,yearsToCalc,converter_techs,"unitsUpperLimit"));
3302   
3303  converter_activityProfile(timeModelToCalc,converter_usedTech(nodesModelToCalc,yearsToCalc,converter_techs,vintage),pc_converter_activityProfile)
3304      $(converter_activity_hasProfile(nodesModelToCalc,yearsToCalc,converter_techs,pc_converter_activityProfile)
3305          and converter_infiniteUnitLimit(nodesModelToCalc,yearsToCalc,converter_techs))
3306      = sum(nodesData$(aggregateNodesModel(nodesData,nodesModelToCalc)
3307                  and converter_capacityParamIn(nodesData,yearsToCalc,converter_techs,"unitsUpperLimit") = inf),
3308                converter_activityProfileIn_aggTime(timeModelToCalc,nodesData,yearsToCalc,converter_techs,pc_converter_activityProfile)
3309                * converter_capacityParamIn(nodesData,yearsToCalc,converter_techs,"unitsUpperLimit"))
3310      / sum(nodesData$(aggregateNodesModel(nodesData,nodesModelToCalc)
3311                      and converter_capacityParamIn(nodesData,yearsToCalc,converter_techs,"unitsUpperLimit") = inf ),
3312              1);
3313  option clear = converter_activityProfileIn_aggTime;
3314   
3315  * for fixed profiles overwrite upper and lower profile
3316  converter_activityProfile(timeModelToCalc,nodesModelToCalc,yearsToCalc,converter_techs,vintage,"lower")
3317      $converter_activity_hasProfile(nodesModelToCalc,yearsToCalc,converter_techs,"fixed")
3318      = converter_activityProfile(timeModelToCalc,nodesModelToCalc,yearsToCalc,converter_techs,vintage,"fixed");
3319   
3320  converter_activityProfile(timeModelToCalc,nodesModelToCalc,yearsToCalc,converter_techs,vintage,"upper")
3321      $converter_activity_hasProfile(nodesModelToCalc,yearsToCalc,converter_techs,"fixed")
3322      = converter_activityProfile(timeModelToCalc,nodesModelToCalc,yearsToCalc,converter_techs,vintage,"fixed");
3323   
3324   
3325  * weighted average for a real sum of units upper limits, plain average if one region has an upper limit of inf
3326  parameter converter_coefficientProfile(timeModel,nodesModel,years,converter_techs,vintage,activity,commodity);
3327  converter_coefficientProfile(timeModelToCalc,converter_usedTechAct(nodesModelToCalc,yearsToCalc,converter_techs,vintage,activity),commodity)
3328      = converter_coefficient(converter_techs,vintage,activity,commodity,"coefficient");
3329   
3330  converter_coefficientProfile(timeModelToCalc,converter_usedTechAct(nodesModelToCalc,yearsToCalc,converter_techs,vintage,activity),commodity)
3331      $( converter_coefficient_hasProfile(nodesModelToCalc,yearsToCalc,converter_techs,vintage,activity,commodity)
3332          and converter_finiteUnitLimit(nodesModelToCalc,yearsToCalc,converter_techs) )
3333      = sum(nodesData$aggregateNodesModel(nodesData,nodesModelToCalc),
3334            sum(timeData$timeMapping(timeData,timeModelToCalc),
3335                    converter_coefficientProfileIn(timeData,nodesData,yearsToCalc,converter_techs,vintage,activity,commodity))
3336                / timeLength(timeModelToCalc)
3337              * converter_capacityParamIn(nodesData,yearsToCalc,converter_techs,"unitsUpperLimit") )
3338      / sum(nodesData$aggregateNodesModel(nodesData,nodesModelToCalc),
3339              converter_capacityParamIn(nodesData,yearsToCalc,converter_techs,"unitsUpperLimit"));
3340   
3341  converter_coefficientProfile(timeModelToCalc,converter_usedTechAct(nodesModelToCalc,yearsToCalc,converter_techs,vintage,activity),commodity)
3342      $( converter_coefficient_hasProfile(nodesModelToCalc,yearsToCalc,converter_techs,vintage,activity,commodity)
3343          and converter_infiniteUnitLimit(nodesModelToCalc,yearsToCalc,converter_techs))
3344      = sum(nodesData$(aggregateNodesModel(nodesData,nodesModelToCalc)
3345                      and converter_capacityParamIn(nodesData,yearsToCalc,converter_techs,"unitsUpperLimit") = inf ),
3346            sum(timeData$timeMapping(timeData,timeModelToCalc),
3347                    converter_coefficientProfileIn(timeData,nodesData,yearsToCalc,converter_techs,vintage,activity,commodity))
3348                / timeLength(timeModelToCalc))
3349      / sum(nodesData$(aggregateNodesModel(nodesData,nodesModelToCalc)
3350                      and converter_capacityParamIn(nodesData,yearsToCalc,converter_techs,"unitsUpperLimit") = inf ), 1);
3351   
3352  * ==== prepare partial load behavior parameters ====
3353   
3354  * set disabled max load requirements to 1 to avoid excessive logical expressions later on
3355  alias(commodity, com);
3356  converter_coefficient(converter_techs,vintage,activity,commodity,"maxLoad")
3357      $((converter_coefficient(converter_techs,vintage,activity,commodity,"maxLoad") = 0)
3358        and converter_usedAct(converter_techs,vintage,activity))
3359      = 1;
3360   
3361  * indicate that at least one activity of a technology makes use of partial load behavior
3362  set converter_hasMaxLoad(converter_techs,vintage);
3363  converter_hasMaxLoad(converter_techs,vintage)
3364    = smin((activity,commodity)$converter_usedAct(converter_techs,vintage,activity),
3365              converter_coefficient(converter_techs,vintage,activity,commodity,"maxLoad")) < 1;
3366   
3367  set converter_hasMinLoad(converter_techs,vintage);
3368  converter_hasMinLoad(converter_techs,vintage)
3369    = smax((activity,commodity)$converter_usedAct(converter_techs,vintage,activity),
3370              converter_coefficient(converter_techs,vintage,activity,commodity,"minLoad")) > 0;
3371   
3372  set converter_hasConstantFluxInActivity(converter_techs,vintage);
3373  converter_hasConstantFluxInActivity(converter_techs,vintage)
3374    = sum((activity,commodity)$converter_usedAct(converter_techs,vintage,activity),
3375                          abs(converter_coefficient(converter_techs,vintage,activity,commodity,"constant"))) > 0;
3376   
3377  * setting up a requirements parameter to avoid having to cycle through commodities in equations
3378  set pc_converter_activityRequirements
3379      /
3380      minLoad             "Lower profile for converter activity"
3381      maxLoad             "Upper profile for converter activity"
3382      /;
3383  parameter converter_activityRequirements(converter_techs,vintage,activity,pc_converter_activityRequirements);
3384  converter_activityRequirements(converter_techs,vintage,activity,"minLoad")
3385    = smax(commodity, converter_coefficient(converter_techs,vintage,activity,commodity,"minLoad"));
3386  converter_activityRequirements(converter_techs,vintage,activity,"maxLoad")
3387    = smin(commodity, converter_coefficient(converter_techs,vintage,activity,commodity,"maxLoad"));
3388   
3389  * ==== activate MIP units for MIP dispatch or partial load technologies ====
3390   
3391  set converter_hasMinUptime(converter_techs,vintage);
3392  converter_hasMinUptime(converter_techs,vintage)
3393    $(converter_techParam(converter_techs,vintage,"minUptime")
3394      and converter_techParam(converter_techs,vintage,"mipDispatch"))
3395    = yes;
3396   
3397  set converter_hasMinDowntime(converter_techs,vintage);
3398  converter_hasMinDowntime(converter_techs,vintage)
3399    $(converter_techParam(converter_techs,vintage,"minDowntime")
3400      and converter_techParam(converter_techs,vintage,"mipDispatch"))
3401    = yes;
3402   
3403  * require integer unit counts if online state is to be tracked
3404  converter_techParam(converter_techs,vintage,"mipUnits")
3405      $(converter_techParam(converter_techs,vintage,"mipDispatch")
3406        or converter_hasMinLoad(converter_techs, vintage)
3407        or converter_hasMaxLoad(converter_techs, vintage)
3408        or converter_hasConstantFluxInActivity(converter_techs,vintage))
3409      = 1;
3410   
3411  * ==== floor mip converter units to integer values ====
3412  converter_capacityParam(nodesModelToCalc,yearsToCalc,converter_techs,"unitsLowerLimit")
3413      $sum(vintage, converter_techParam(converter_techs,vintage,"mipUnits"))
3414      = floor(converter_capacityParam(nodesModelToCalc,yearsToCalc,converter_techs,"unitsLowerLimit"));
3415  converter_capacityParam(nodesModelToCalc,yearsToCalc,converter_techs,"unitsUpperLimit")
3416      $sum(vintage, converter_techParam(converter_techs,vintage,"mipUnits"))
3417      = ceil(converter_capacityParam(nodesModelToCalc,yearsToCalc,converter_techs,"unitsUpperLimit"));
3418   
3419  * ==== scalars and sets for minUptime and minDowntime ====
3420   
3421  scalar converter_maxUptimeReq;
3422  converter_maxUptimeReq = smax((converter_techs,vintage), converter_techParam(converter_techs,vintage,"minUptime"));
3423  set uptimeSearchRange(timeModelToCalc);
3424  uptimeSearchRange(timeModelToCalc) = ord(timeModelToCalc) <= converter_maxUptimeReq;
3425   
3426  scalar converter_maxDowntimeReq;
3427  converter_maxDowntimeReq = smax((converter_techs,vintage), converter_techParam(converter_techs,vintage,"minDowntime"));
3428  set downtimeSearchRange(timeModelToCalc);
3429  downtimeSearchRange(timeModelToCalc) = ord(timeModelToCalc) <= converter_maxDowntimeReq;
3430   
3431  * ==== definition of variables ====
3432   
3433  * Initialise variables for unitsBuild
3434  converter_unitsBuild.l(nodesModel,years,converter_techs,vintage)
3435      $converter_availTech(nodesModel,years,converter_techs,vintage)
3436      = converter_capacityParam(nodesModel,years,converter_techs,"unitsBuild");
3437  converter_unitsBuild.lo(nodesModel,yearsToCalc,converter_techs,vintage)
3438      $converter_availTech(nodesModel,yearsToCalc,converter_techs,vintage)
3439      = converter_unitsBuild.l(nodesModel,yearsToCalc,converter_techs,vintage);
3440  converter_unitsBuild.fx(nodesModel,years,converter_techs,vintage)
3441      $converter_capacityParam(nodesModel,years,converter_techs,"noExpansion")
3442      = converter_unitsBuild.l(nodesModel,years,converter_techs,vintage);
3443   
3444  * Initialise variables for unitsDecom
3445  converter_unitsDecom.l(nodesModel,years,converter_techs,vintage)
3446    $(converter_decomTech(nodesModel,years,converter_techs,vintage)
3447      and years.val < sum(yearsToCalc$(ord(yearsToCalc) = 1), yearsToCalc.val))
3448    = sum((years_a,years_aa)$(sameas(years-1, years_aa)
3449                        and years_a.val > years_aa.val - converter_techParam(converter_techs,vintage,'lifeTime')
3450                        and years_a.val <= years.val - converter_techParam(converter_techs,vintage,'lifeTime')
3451                        and converter_availTech(nodesModel,years_a,converter_techs,vintage)),
3452          converter_unitsBuild.l(nodesModel,years_a,converter_techs,vintage));
3453   
3454  converter_unitsDecom.l(nodesModel,yearsToCalc,converter_techs,vintage)
3455    $converter_decomTech(nodesModel,yearsToCalc,converter_techs,vintage)
3456    = sum(years$
3457          (years.val < sum(yearsToCalc_a$(ord(yearsToCalc_a) = 1), yearsToCalc_a.val)
3458            and converter_availTech(nodesModel,years,converter_techs,vintage)
3459            and years.val > sum(years_a$sameas(years_a, yearsToCalc-1), years_a.val) - converter_techParam(converter_techs,vintage,'lifeTime')
3460            and years.val <= yearsToCalc.val - converter_techParam(converter_techs,vintage,'lifeTime')),
3461        converter_unitsBuild.l(nodesModel,years,converter_techs,vintage))
3462      + sum(yearsToCalc_a$
3463          (yearsToCalc_a.val < sum(yearsToCalc_aa$(ord(yearsToCalc_aa) > 1), yearsToCalc_a.val)
3464            and converter_availTech(nodesModel,yearsToCalc_a,converter_techs,vintage)
3465            and yearsToCalc_a.val > sum(years_a$sameas(years_a, yearsToCalc-1), years_a.val) - converter_techParam(converter_techs,vintage,'lifeTime')
3466            and yearsToCalc_a.val <= yearsToCalc.val - converter_techParam(converter_techs,vintage,'lifeTime')),
3467        converter_unitsBuild.l(nodesModel,yearsToCalc_a,converter_techs,vintage));
3468        ;
3469   
3470  converter_unitsDecom.lo(nodesModel,yearsToCalc,converter_techs,vintage)
3471      $(converter_usedTech(nodesModel,yearsToCalc,converter_techs,vintage)
3472          and not converter_techParam(converter_techs,vintage,"freeDecom"))
3473      = converter_unitsDecom.l(nodesModel,yearsToCalc,converter_techs,vintage)
3474   
3475  * Calculate planned unit expansion
3476  parameter converter_unitsPlanned(nodesModel,years,converter_techs,vintage);
3477  converter_unitsPlanned(nodesModel,years,converter_techs,vintage) = 0;
3478  loop(years,
3479    converter_unitsPlanned(nodesModel,years,converter_techs,vintage)
3480      =
3481      converter_unitsPlanned(nodesModel,years-1,converter_techs,vintage)
3482          $converter_usedTech(nodesModel,years-1,converter_techs,vintage)
3483      + converter_unitsBuild.l(nodesModel,years,converter_techs,vintage)
3484          $converter_availTech(nodesModel,years,converter_techs,vintage)
3485      - converter_unitsDecom.l(nodesModel,years,converter_techs,vintage)
3486          $converter_usedTech(nodesModel,years,converter_techs,vintage);
3487  );
3488   
3489  * Set initial state for planned units
3490  converter_unitsTotal.l(nodesModel,years,converter_techs,vintage)
3491    = converter_unitsPlanned(nodesModel,years,converter_techs,vintage)
3492   
3493  * Calculate if planned unit expansion is bounded by upper and lower limits
3494  set converter_unitBoundsFixed(nodesModel,years,converter_techs);
3495  converter_unitBoundsFixed(nodesModel,years,converter_techs)
3496    $(sum(vintage$converter_usedTech(nodesModel,years,converter_techs,vintage),
3497          converter_unitsPlanned(nodesModel,years,converter_techs,vintage))
3498      = converter_capacityParam(nodesModel,years,converter_techs,"unitsUpperLimit")
3499    and sum(vintage$converter_usedTech(nodesModel,years,converter_techs,vintage),
3500          converter_unitsPlanned(nodesModel,years,converter_techs,vintage))
3501      = converter_capacityParam(nodesModel,years,converter_techs,"unitsLowerLimit"))
3502    = yes;
3503   
3504  * Fix unitsBuild, unitsDecom, unitsTotal if levels are predetermined by upper and lower limits
3505  converter_unitsBuild.fx(nodesModel,years,converter_techs,vintage)
3506    $(converter_availTech(nodesModel,years,converter_techs,vintage)
3507      and converter_unitBoundsFixed(nodesModel,years,converter_techs))
3508    = converter_unitsBuild.l(nodesModel,years,converter_techs,vintage);
3509  converter_unitsDecom.fx(nodesModel,years,converter_techs,vintage)
3510    $(converter_usedTech(nodesModel,years,converter_techs,vintage)
3511      and converter_unitBoundsFixed(nodesModel,years,converter_techs))
3512    = converter_unitsDecom.l(nodesModel,years,converter_techs,vintage);
3513  converter_unitsTotal.fx(nodesModel,years,converter_techs,vintage)
3514    $(converter_usedTech(nodesModel,years,converter_techs,vintage)
3515      and converter_unitBoundsFixed(nodesModel,years,converter_techs))
3516    = converter_unitsTotal.l(nodesModel,years,converter_techs,vintage);
3517   
3518  converter_unitsOnline_MIP.up(timeModelToCalc,nodesModel,years,converter_techs,vintage)
3519      $(converter_usedTech(nodesModel,years,converter_techs,vintage)
3520        and converter_techParam(converter_techs,vintage,"mipDispatch") = 1)
3521      = converter_capacityParam(nodesModel,years,converter_techs,"unitsUpperLimit");
3522   
3523  converter_unitsTotal_MIP.up(nodesModel,years,converter_techs,vintage)
3524      $(converter_usedTech(nodesModel,years,converter_techs,vintage)
3525        and converter_techParam(converter_techs,vintage,"mipUnits") = 1)
3526      = converter_capacityParam(nodesModel,years,converter_techs,"unitsUpperLimit");
3527   
3528  converter_unitsUsingActivity_MIP.up(timeModelToCalc,nodesModel,years,converter_techs,vintage,activity)
3529      $(converter_usedTech(nodesModel,years,converter_techs,vintage)
3530        and (converter_hasMinLoad(converter_techs, vintage)
3531              or converter_hasMaxLoad(converter_techs, vintage)))
3532      = converter_capacityParam(nodesModel,years,converter_techs,"unitsUpperLimit");
3533   
3534  * Add parameter for fixing capacities during myopic runs
3535  parameter converter_unitsDelta(nodesModel,years,converter_techs);
3536   
3537  * ==== declaration of equations ====
3538   
3539  equations
3540    Eq_converter_unitsBalance(nodesModel,years,converter_techs,vintage
3541      ) "Ensures the units balance over the planning period."
3542    Eq_converter_unitsFixedDecom(nodesModel,years,converter_techs,vintage
3543      ) "Restricts the fixed decommissioning of units over the planning period."
3544    Eq_converter_unitsFreeDecom(nodesModel,years,converter_techs,vintage
3545      ) "Restricts the free decommissioning of units over the planning period."
3546    Eq_converter_unitsUpperLimit(nodesModel,years,converter_techs
3547      ) "Upper bound for the total number of units."
3548    Eq_converter_unitsLowerLimit(nodesModel,years,converter_techs
3549      ) "Lower bound for the total number of units."
3550    Eq_converter_unitsFixedLimit(nodesModel,years,converter_techs
3551      ) "Fixed bound for the total number of units."
3552    Eq_converter_unitsTotalMIP(nodesModel,years,converter_techs,vintage
3553      ) "Fixes the total number of units to the corresponding integer variable."
3554    Eq_converter_unitsOnlineMIP(timeModel,nodesModel,years,converter_techs,vintage
3555      ) "Fixes the number of online units to the corresponding integer variable."
3556   
3557    Eq_converter_activityLowerLimit(timeModel,nodesModel,years,converter_techs,vintage
3558      ) "Lower limit on the activity."
3559    Eq_converter_activityUpperLimit(timeModel,nodesModel,years,converter_techs,vintage
3560      ) "Upper limit on the activity."
3561   
3562    Eq_converter_activityFixedLimit(timeModel,nodesModel,years,converter_techs,vintage
3563      ) "Fixed limit on the activity."
3564    Eq_converter_rampPos(timeModel,nodesModel,years,converter_techs,vintage
3565      ) "Positive ramping of unit activity."
3566    Eq_converter_rampNeg(timeModel,nodesModel,years,converter_techs,vintage
3567      ) "Negative ramping of unit activity."
3568    Eq_converter_rampLimit(timeModel,nodesModel,years,converter_techs,vintage
3569      ) "Restrict ramping up of unit activity."
3570   
3571    Eq_converter_unitsOnline(timeModel,nodesModel,years,converter_techs,vintage
3572      ) "Set online units to total number of operational units."
3573    Eq_converter_unitsOnlineUC(timeModel,nodesModel,years,converter_techs,vintage
3574      ) "Allow shutting down units."
3575    Eq_converter_activityStartups(timeModel,nodesModel,years,converter_techs,vintage
3576      ) "Variable counting the number of unit startups."
3577    Eq_converter_activityShutdowns(timeModel,nodesModel,years,converter_techs,vintage
3578      ) "Variable tracking the number of unit shutdowns."
3579    Eq_converter_limitStartups(nodesModel,years,converter_techs,vintage
3580      ) "Limit the number of startup cycles a unit can perform."
3581    Eq_converter_minUptime(timeModel,nodesModel,years,converter_techs,vintage
3582      ) "Require recently started units to remain online for their respective minimum uptime."
3583    Eq_converter_minDowntime(timeModel,nodesModel,years,converter_techs,vintage
3584      ) "Require recently shut down units to remain offline for their respective minimum downtime."
3585    Eq_converter_activityUpperLimitDetailedPartLoadMinReq(timeModel,nodesModel,years,converter_techs,vintage,activity
3586      ) "Limit activity coefficients of activities with a given load requirement or stricter to the number of units in such modes."
3587    Eq_converter_activityUpperLimitDetailedPartLoadMaxReq(timeModel,nodesModel,years,converter_techs,vintage,activity
3588      ) "Limit activity coefficients of activities with a given load requirement or stricter to the number of units in such modes."
3589    Eq_converter_activityLowerLimitDetailedPartLoadMinReq(timeModel,nodesModel,years,converter_techs,vintage,activity
3590      ) "Enforce sufficient activity coefficients of activities to justify all active modes."
3591    Eq_converter_noOnlineIdle(timeModel,nodesModel,years,converter_techs,vintage
3592      ) "Prevent the circumvention of requirements by keeping units online without using any modes."
3593    Eq_converter_noOnlineIdleDetailedPartLoad(timeModel,nodesModel,years,converter_techs,vintage
3594      ) "Prevent the circumvention of requirements by keeping units online without using any modes. Allow more than one mode activation per unit."
3595    Eq_converter_activityUpperLimitPartLoad(timeModel,nodesModel,years,converter_techs,vintage,activity
3596      ) "Limit usage of an activity to corresponding units."
3597    Eq_converter_activityLowerLimitPartLoad(timeModel,nodesModel,years,converter_techs,vintage,activity
3598      ) "Limit usage of an activity to corresponding units."
3599    Eq_converter_activityModeLimit(timeModel,nodesModel,years,converter_techs,vintage,activity
3600      ) "Limit the number of units in one particular mode to the number of operational units."
3601    ;
3602   
3603  * ==== equation definition ====
3604  * // ## Equations
3605  * // ### Converter Units Balance
3606  * // Ensures that the total units are consistent with the built and decommissioned units.
3607  * // {Eq_converter_unitsBalance}
3608  Eq_converter_unitsBalance(nodesModelSel,yearsSel,converter_techs,vintage)
3609      $((converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
3610            or sum(years$sameas(years,yearsSel), converter_usedTech(nodesModelSel,years-1,converter_techs,vintage)))
3611          and not converter_unitBoundsFixed(nodesModelSel,yearsSel,converter_techs))
3612      ..
3613      converter_unitsTotal(nodesModelSel,yearsSel,converter_techs,vintage)
3614      =e=
3615      sum(yearsToCalc$(ord(yearsToCalc) = 1 and sameas(yearsToCalc, yearsSel)),
3616        sum(years$sameas(years, yearsToCalc),
3617          converter_unitsTotal(nodesModelSel,years-1,converter_techs,vintage)
3618            $converter_usedTech(nodesModelSel,years-1,converter_techs,vintage)))
3619      + sum((yearsToCalc)$(ord(yearsToCalc) > 1 and sameas(yearsToCalc, yearsSel)),
3620        converter_unitsTotal(nodesModelSel,yearsToCalc-1,converter_techs,vintage)
3621          $converter_usedTech(nodesModelSel,yearsToCalc-1,converter_techs,vintage))
3622      + converter_unitsBuild(nodesModelSel,yearsSel,converter_techs,vintage)
3623          $converter_availTech(nodesModelSel,yearsSel,converter_techs,vintage)
3624      - converter_unitsDecom(nodesModelSel,yearsSel,converter_techs,vintage)
3625          $converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage);
3626   
3627  * // ### Converter Units Fixed Decommission
3628  * // Restricts the fixed decommissioning of units over the planning period.
3629  * // {Eq_converter_unitsFixedDecom}
3630  Eq_converter_unitsFixedDecom(nodesModelSel,yearsSel,converter_techs,vintage)
3631      $(converter_decomTech(nodesModelSel,yearsSel,converter_techs,vintage)
3632          and not converter_techParam(converter_techs,vintage,"freeDecom") = 1
3633          and not converter_unitBoundsFixed(nodesModelSel,yearsSel,converter_techs))
3634      ..
3635      converter_unitsDecom(nodesModelSel,yearsSel,converter_techs,vintage)
3636      =e=
3637      sum(years$
3638          (converter_availTech(nodesModelSel,years,converter_techs,vintage)
3639            and years.val > sum(yearsToCalc$sameas(yearsToCalc+1, yearsSel), yearsToCalc.val) - converter_techParam(converter_techs,vintage,'lifeTime')
3640            and years.val <= yearsSel.val - converter_techParam(converter_techs,vintage,'lifeTime')),
3641        converter_unitsBuild(nodesModelSel,years,converter_techs,vintage));
3642   
3643  * // ### Converter Units Free Decommission
3644  * // Restricts the free decommissioning of units over the planning period.
3645  * // {Eq_converter_unitsFreeDecom}
3646  Eq_converter_unitsFreeDecom(nodesModelSel,yearsSel,converter_techs,vintage)
3647      $((converter_decomTech(nodesModelSel,yearsSel,converter_techs,vintage)
3648          or converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage))
3649          and converter_techParam(converter_techs,vintage,"freeDecom") = 1)
3650      ..
3651      sum(years$
3652            ((converter_decomTech(nodesModelSel,years,converter_techs,vintage)
3653              or converter_usedTech(nodesModelSel,years,converter_techs,vintage))
3654              and years.val < sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)),
3655          converter_unitsDecom(nodesModelSel,years,converter_techs,vintage))
3656      + sum(yearsToCalc$
3657            ((converter_decomTech(nodesModelSel,yearsToCalc,converter_techs,vintage)
3658              or converter_usedTech(nodesModelSel,yearsToCalc,converter_techs,vintage))
3659              and yearsToCalc.val >= sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
3660              and yearsToCalc.val <= yearsSel.val),
3661          converter_unitsDecom(nodesModelSel,yearsToCalc,converter_techs,vintage))
3662      =g=
3663      sum(years$
3664            (converter_availTech(nodesModelSel,years,converter_techs,vintage)
3665              and years.val < sum(yearsToCalc$(ord(yearsToCalc)=1), yearsToCalc.val) - converter_techParam(converter_techs,vintage,'lifeTime')),
3666          converter_unitsBuild(nodesModelSel,years,converter_techs,vintage))
3667      + sum(yearsToCalc$
3668            (converter_availTech(nodesModelSel,yearsToCalc,converter_techs,vintage)
3669              and yearsToCalc.val >= sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
3670              and yearsToCalc.val <= yearsSel.val - converter_techParam(converter_techs,vintage,'lifeTime')),
3671          converter_unitsBuild(nodesModelSel,yearsToCalc,converter_techs,vintage));
3672   
3673  * // ### Converter Units Upper Limit
3674  * // Upper bound for the total number of units.
3675  * // {Eq_converter_unitsUpperLimit}
3676  Eq_converter_unitsUpperLimit(nodesModelSel,yearsSel,converter_techs)
3677      $(converter_capacityParam(nodesModelSel,yearsSel,converter_techs,'unitsUpperLimit') >= 0
3678          and converter_capacityParam(nodesModelSel,yearsSel,converter_techs,'unitsUpperLimit') < +inf
3679          and converter_capacityParam(nodesModelSel,yearsSel,converter_techs,'unitsUpperLimit')
3680              <> converter_capacityParam(nodesModelSel,yearsSel,converter_techs,'unitsLowerLimit'))
3681      ..
3682      sum(vintage$converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage),
3683          converter_unitsTotal(nodesModelSel,yearsSel,converter_techs,vintage))
3684      =l=
3685      converter_capacityParam(nodesModelSel,yearsSel,converter_techs,"unitsUpperLimit");
3686   
3687  * // ### Converter Units Lower Limit
3688  * // Lower bound for the total number of units.
3689  * // {Eq_converter_unitsLowerLimit}
3690  Eq_converter_unitsLowerLimit(nodesModelSel,yearsSel,converter_techs)
3691      $(converter_capacityParam(nodesModelSel,yearsSel,converter_techs,'unitsLowerLimit') > 0
3692          and converter_capacityParam(nodesModelSel,yearsSel,converter_techs,'unitsLowerLimit')
3693              <> converter_capacityParam(nodesModelSel,yearsSel,converter_techs,'unitsUpperLimit'))
3694      ..
3695      sum(vintage$converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage),
3696          converter_unitsTotal(nodesModelSel,yearsSel,converter_techs,vintage))
3697      =g=
3698      converter_capacityParam(nodesModelSel,yearsSel,converter_techs,"unitsLowerLimit");
3699   
3700  Eq_converter_unitsFixedLimit(nodesModelSel,yearsSel,converter_techs)
3701      $(converter_capacityParam(nodesModelSel,yearsSel,converter_techs,'unitsLowerLimit')
3702          = converter_capacityParam(nodesModelSel,yearsSel,converter_techs,'unitsUpperLimit'))
3703      ..
3704      sum(vintage$converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage),
3705          converter_unitsTotal(nodesModelSel,yearsSel,converter_techs,vintage))
3706      =e=
3707      converter_capacityParam(nodesModelSel,yearsSel,converter_techs,"unitsUpperLimit");
3708   
3709  * // ### Converter Units Total MIP
3710  * // Fixes the total number of units to the corresponding integer variable.
3711  * // {Eq_converter_unitsTotalMIP}
3712  Eq_converter_unitsTotalMIP(nodesModelSel,yearsSel,converter_techs,vintage)
3713      $( converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
3714          and converter_techParam(converter_techs,vintage,"mipUnits") = 1 )
3715      ..
3716      converter_unitsTotal(nodesModelSel,yearsSel,converter_techs,vintage)
3717      =e=
3718      converter_unitsTotal_MIP(nodesModelSel,yearsSel,converter_techs,vintage);
3719   
3720  * // ### Converter Units Online MIP
3721  * // Fixes the number of online units to the corresponding integer variable.
3722  * // {Eq_converter_unitsOnlineMIP}
3723  Eq_converter_unitsOnlineMIP(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
3724      $( converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
3725          and converter_techParam(converter_techs,vintage,"mipDispatch") = 1 )
3726      ..
3727      converter_unitsOnline(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
3728      =e=
3729      converter_unitsOnline_MIP(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage);
3730   
3731  * // ### Converter Activity Lower Limit
3732  * // Lower limit on the activity.
3733  * // {Eq_converter_activityLowerLimit}
3734  Eq_converter_activityLowerLimit(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
3735      $(converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
3736          and converter_activityProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,"lower") > 0
3737          and converter_activityProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,"lower")
3738               <> converter_activityProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,"upper")
3739          and not converter_hasMinLoad(converter_techs, vintage))
3740      ..
3741      sum(activity$converter_usedAct(converter_techs,vintage,activity),
3742          converter_activity(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity)
3743      )
3744      =g=
3745      converter_activityProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,"lower")
3747      * converter_unitsOnline(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage);
3749   
3750  * // ### Converter Activity Upper Limit
3751  * // Upper limit on the activity.
3752  * // {Eq_converter_activityUpperLimit}
3753  Eq_converter_activityUpperLimit(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
3754      $(converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
3755          and converter_activityProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,"upper") >= 0
3756          and converter_activityProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,"upper")
3757               <> converter_activityProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,"lower"))
3758      ..
3759      sum(activity$converter_usedAct(converter_techs,vintage,activity),
3760          converter_activity(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity)
3761      )
3762      =l=
3763      converter_activityProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,"upper")
3765      * converter_unitsOnline(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage);
3767   
3768  Eq_converter_activityFixedLimit(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
3769      $(converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
3770          and converter_activityProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,"lower")
3771               = converter_activityProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,"upper"))
3772      ..
3773      sum(activity$converter_usedAct(converter_techs,vintage,activity),
3774          converter_activity(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity)
3775      )
3776      =e=
3777      converter_activityProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,"upper")
3779      * converter_unitsOnline(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage);
3781   
3782  * // ### Converter Positive Ramping
3783  * // Positive ramping of unit activity.
3784  * // {Eq_converter_rampPos}
3785  Eq_converter_rampPos(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,converter_techs,vintage)
3786    $( converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
3787        and converter_useRampPos(nodesModelSel,yearsSel,converter_techs,vintage))
3788      ..
3789      converter_rampPos(timeModelToCalc,nodesModelSel,yearsSel,converter_techs,vintage)
3790      =g=
3791      sum(activity$converter_usedAct(converter_techs,vintage,activity),
3792              converter_activity(timeModelToCalc,nodesModelSel,yearsSel,converter_techs,vintage,activity)
3793              - converter_activity(timeModelToCalc--1,nodesModelSel,yearsSel,converter_techs,vintage,activity));
3794   
3795  * // ### Converter Negative Ramping
3796  * // Negative ramping of unit activity.
3797  * // {Eq_converter_rampNeg}
3798  Eq_converter_rampNeg(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,converter_techs,vintage)
3799    $( converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
3800        and converter_useRampNeg(nodesModelSel,yearsSel,converter_techs,vintage))
3801      ..
3802      converter_rampNeg(timeModelToCalc,nodesModelSel,yearsSel,converter_techs,vintage)
3803      =g=
3804      - sum(activity$converter_usedAct(converter_techs,vintage,activity),
3805              converter_activity(timeModelToCalc,nodesModelSel,yearsSel,converter_techs,vintage,activity)
3806              - converter_activity(timeModelToCalc--1,nodesModelSel,yearsSel,converter_techs,vintage,activity));
3807   
3808  * // ### Converter Ramping Limit
3809  * // Restrict ramping up of unit activity.
3810  * // {Eq_converter_rampLimit}
3811  Eq_converter_rampLimit(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,converter_techs,vintage)
3812    $( converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
3813          and converter_techParam(converter_techs,vintage,"activityRampLimit") > 0)
3814      ..
3815      sum(activity$converter_usedAct(converter_techs,vintage,activity),
3816              converter_activity(timeModelToCalc,nodesModelSel,yearsSel,converter_techs,vintage,activity)
3817              - converter_activity(timeModelToCalc--1,nodesModelSel,yearsSel,converter_techs,vintage,activity))
3818    =l=
3819    converter_techParam(converter_techs,vintage,"activityRampLimit")
3821      * converter_unitsOnline(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage);
3823   
3824   
3826   
3827  * // ### Converter MIP Units Online
3828  * // Restrict ramping up of unit activity.
3829  * // {Eq_converter_unitsOnline}
3830  Eq_converter_unitsOnline(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
3831      $( converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
3832          and converter_techParam(converter_techs,vintage,"mipDispatch") = 0 )
3833    ..
3834    converter_unitsOnline(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
3835    =e=
3836    converter_unitsTotal(nodesModelSel,yearsSel,converter_techs,vintage)
3837      ;
3838   
3839  * // ### Converter MIP Units Shutting Down
3840  * // Allow shutting down units.
3841  * // {Eq_converter_unitsOnlineUC}
3842  Eq_converter_unitsOnlineUC(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
3843      $( converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
3844          and converter_techParam(converter_techs,vintage,"mipDispatch") = 1 )
3845    ..
3846    converter_unitsOnline(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
3847    =l=
3848    converter_unitsTotal(nodesModelSel,yearsSel,converter_techs,vintage)
3849      ;
3851   
3852  * // ### Converter Activity Startups
3853  * // Variable counting the number of unit startups.
3854  * // {Eq_converter_activityStartups}
3855  Eq_converter_activityStartups(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,converter_techs,vintage)
3856    $( converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
3857          and converter_techParam(converter_techs,vintage,"mipDispatch") = 1 )
3858      ..
3859      converter_unitStartups(timeModelToCalc,nodesModelSel,yearsSel,converter_techs,vintage)
3860      =g=
3861          converter_unitsOnline(timeModelToCalc,nodesModelSel,yearsSel,converter_techs,vintage)
3862      - converter_unitsOnline(timeModelToCalc--1,nodesModelSel,yearsSel,converter_techs,vintage);
3863   
3864  * // ### Converter Activity Shutdowns
3865  * // Variable tracking the number of unit shutdowns.
3866  * // {Eq_converter_activityShutdowns}
3867  Eq_converter_activityShutdowns(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,converter_techs,vintage)
3868    $( converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
3869          and converter_techParam(converter_techs,vintage,"mipDispatch") = 1
3870          and converter_techParam(converter_techs,vintage,"minDowntime") > 0)
3871      ..
3872      converter_unitShutdowns(timeModelToCalc,nodesModelSel,yearsSel,converter_techs,vintage)
3873      =g=
3874          converter_unitsOnline(timeModelToCalc--1,nodesModelSel,yearsSel,converter_techs,vintage)
3875      - converter_unitsOnline(timeModelToCalc,nodesModelSel,yearsSel,converter_techs,vintage);
3876   
3877  * // ### Converter Activity Startup Limit
3878  * // Limit the number of startup cycles a unit can perform.
3879  * // {Eq_converter_limitStartups}
3880  Eq_converter_limitStartups(nodesModelSel,yearsSel,converter_techs,vintage)
3881    $( converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
3882          and converter_techParam(converter_techs,vintage,"mipDispatch") = 1
3883      and converter_techParam(converter_techs,vintage,"startupLimit") > 0)
3884      ..
3885      sum(timeModelToCalc, converter_unitStartups(timeModelToCalc,nodesModelSel,yearsSel,converter_techs,vintage))
3886    =l=
3887    converter_techParam(converter_techs,vintage,"startupLimit")
3888    * converter_unitsTotal(nodesModelSel,yearsSel,converter_techs,vintage);
3889   
3890  alias(timeModelToCalc,ttc);
3891   
3892  * // ### Converter Units Minimum Uptime
3893  * // Require recently started units to remain online for their respective minimum uptime.
3894  * // {Eq_converter_minUptime}
3895  Eq_converter_minUptime(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,converter_techs,vintage)
3896    $( converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
3897          and converter_techParam(converter_techs,vintage,"mipDispatch") = 1
3898      and converter_techParam(converter_techs,vintage,"minUptime") > 0)
3899      ..
3900      sum(ttc$[uptimeSearchRange(ttc) and ord(ttc)<=converter_techParam(converter_techs,vintage,"minUptime")],
3901          converter_unitStartups(ttc+[ord(timeModelToCalc)-converter_techParam(converter_techs,vintage,"minUptime")],
3902              nodesModelSel,yearsSel,converter_techs,vintage))
3903          =l=
3904          converter_unitsOnline(timeModelToCalc,nodesModelSel,yearsSel,converter_techs,vintage);
3905   
3906  * // ### Converter Units Minimum Downtime
3907  * // Require recently shut down units to remain offline for their respective minimum downtime.
3908  * // {Eq_converter_minDowntime}
3909  Eq_converter_minDowntime(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,converter_techs,vintage)
3910    $( converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
3911          and converter_techParam(converter_techs,vintage,"mipDispatch") = 1
3912      and converter_techParam(converter_techs,vintage,"minDowntime") > 0)
3913      ..
3914      sum(ttc$[downtimeSearchRange(ttc) and ord(ttc)<=converter_techParam(converter_techs,vintage,"minDowntime")],
3915          converter_unitShutdowns(ttc+[ord(timeModelToCalc)-converter_techParam(converter_techs,vintage,"minDowntime")],
3916              nodesModelSel,yearsSel,converter_techs,vintage))
3917          =l=
3918          converter_unitsTotal(nodesModelSel,yearsSel,converter_techs,vintage)
3919      - converter_unitsOnline(timeModelToCalc,nodesModelSel,yearsSel,converter_techs,vintage);
3920   
3921  * This equation is meant to cause the units to activate particular mode counters to gain access to the corresponding activities.
3922  * Activities are allowed to be used on units with stricter activity requirements but not the other way around.
3923  alias(activity, act);
3924   
3925  * // ### Converter MIP Units Activity Upper Limit Minimum Required Load
3926  * // Limit activity coefficients of activities with a given load requirement or stricter to the number of units in such modes.
3927  * // {Eq_converter_activityUpperLimitDetailedPartLoadMinReq}
3928  Eq_converter_activityUpperLimitDetailedPartLoadMinReq(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity)
3929    $( converter_usedTechAct(nodesModelSel,yearsSel,converter_techs,vintage,activity)
3930          and converter_hasMinLoad(converter_techs, vintage)
3931          and converter_techParam(converter_techs,vintage,"mipDetailedPartialLoad"))
3932      ..
3933      sum(act$(converter_activityRequirements(converter_techs,vintage,act,"minLoad")
3934                  >= converter_activityRequirements(converter_techs,vintage,activity,"minLoad")
3935               and converter_usedAct(converter_techs,vintage,act)),
3936      converter_activity(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,act))
3937    =l=
3938    converter_activityProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,"upper")
3939      * sum(act$(converter_activityRequirements(converter_techs,vintage,act,"minLoad")
3940                  >= converter_activityRequirements(converter_techs,vintage,activity,"minLoad")
3941                 and converter_usedAct(converter_techs,vintage,act)),
3942      converter_unitsUsingActivity_MIP(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,act));
3943   
3944  * // ### Converter MIP Units Activity Upper Limit Maximum Required Load
3945  * // Limit activity coefficients of activities with a given load requirement or stricter to the number of units in such modes.
3946  * // {Eq_converter_activityUpperLimitDetailedPartLoadMaxReq}
3947  Eq_converter_activityUpperLimitDetailedPartLoadMaxReq(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity)
3948    $( converter_usedTechAct(nodesModelSel,yearsSel,converter_techs,vintage,activity)
3949          and converter_hasMaxLoad(converter_techs,vintage)
3950          and converter_techParam(converter_techs,vintage,"mipDetailedPartialLoad"))
3951      ..
3952      sum(act$(converter_activityRequirements(converter_techs,vintage,act,"maxLoad")
3953                  <= converter_activityRequirements(converter_techs,vintage,activity,"maxLoad")
3954               and converter_usedAct(converter_techs,vintage,act)),
3955      converter_activity(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,act))
3956    =l=
3957      sum(act$(converter_activityRequirements(converter_techs,vintage,act,"maxLoad")
3958                  <= converter_activityRequirements(converter_techs,vintage,activity,"maxLoad")
3959               and converter_usedAct(converter_techs,vintage,act)),
3960      min(converter_activityRequirements(converter_techs,vintage,act,"maxLoad"),
3961            converter_activityProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,"upper"))
3962            * converter_unitsUsingActivity_MIP(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,act));
3963   
3964  * This equation is meant to enforce the lower limit requirements of activities in use.
3965  * Loads produced by activities with less strict requirements can contribute to the minimum load requirement of strict activities but not the other way around,
3966  * because these activities can only run on units in the respectively strict activation state.
3967   
3968  * // ### Converter MIP Units Activity Lower Limit Minimum Required Load
3969  * // Enforce sufficient activity coefficients of activities to justify all active modes.
3970  * // {Eq_converter_activityLowerLimitDetailedPartLoadMinReq}
3971  Eq_converter_activityLowerLimitDetailedPartLoadMinReq(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity)
3972    $( converter_usedTechAct(nodesModelSel,yearsSel,converter_techs,vintage,activity)
3973          and converter_hasMinLoad(converter_techs, vintage)
3974          and converter_techParam(converter_techs,vintage,"mipDetailedPartialLoad"))
3975      ..
3976      sum(act$(converter_activityRequirements(converter_techs,vintage,act,"minLoad")
3977                  <= converter_activityRequirements(converter_techs,vintage,activity,"minLoad")
3978               and converter_usedAct(converter_techs,vintage,act)),
3979      converter_activity(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,act))
3980    =g=
3981      sum(act$(converter_activityRequirements(converter_techs,vintage,act,"minLoad")
3982                  <= converter_activityRequirements(converter_techs,vintage,activity,"minLoad")
3983               and converter_usedAct(converter_techs,vintage,act)),
3984      max(converter_activityRequirements(converter_techs,vintage,act,"minLoad"),
3985            converter_activityProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,"lower"))
3986            * converter_unitsUsingActivity_MIP(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,act));
3987   
3988   
3989  * Simple one-activity-per-unit partial load equations
3990  * // ### Converter MIP Units Activity Upper Limit Partial Load Balance
3991  * // Enforce MIP units partial load upper limit.
3992  * // {Eq_converter_activityUpperLimitPartLoad}
3993  Eq_converter_activityUpperLimitPartLoad(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity)
3994    $( converter_usedTechAct(nodesModelSel,yearsSel,converter_techs,vintage,activity)
3995          and (converter_hasMinLoad(converter_techs, vintage)
3996                or converter_hasMaxLoad(converter_techs, vintage)
3997                or converter_hasConstantFluxInActivity(converter_techs, vintage))
3998          and not converter_techParam(converter_techs,vintage,"mipDetailedPartialLoad"))
3999      ..
4000      converter_activity(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity)
4001    =l=
4002    min(converter_activityRequirements(converter_techs,vintage,activity,"maxLoad"),
4003          converter_activityProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,"upper"))
4004          * converter_unitsUsingActivity_MIP(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity);
4005   
4006  * // ### Converter MIP Units Activity Lower Limit Partial Load Balance
4007  * // Enforce MIP units partial load lower limit.
4008  * // {Eq_converter_activityLowerLimitPartLoad}
4009  Eq_converter_activityLowerLimitPartLoad(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity)
4010    $( converter_usedTechAct(nodesModelSel,yearsSel,converter_techs,vintage,activity)
4011          and (converter_hasMinLoad(converter_techs, vintage)
4012                or converter_hasMaxLoad(converter_techs, vintage))
4013          and not converter_techParam(converter_techs,vintage,"mipDetailedPartialLoad"))
4014      ..
4015      converter_activity(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity)
4016    =g=
4017    max(converter_activityRequirements(converter_techs,vintage,activity,"minLoad"),
4018          converter_activityProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,"lower"))
4019          * converter_unitsUsingActivity_MIP(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity);
4020   
4021  * // ### Converter MIP Units Idle Online Units
4022  * // Counts idle online units at every time step
4023  * // {Eq_converter_noOnlineIdle}
4024  Eq_converter_noOnlineIdle(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
4025    $( converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
4026          and (converter_hasMinLoad(converter_techs, vintage)
4027              or converter_hasMaxLoad(converter_techs, vintage)
4028              or converter_hasConstantFluxInActivity(converter_techs,vintage))
4029          and not converter_techParam(converter_techs,vintage,"mipDetailedPartialLoad"))
4030      ..
4031      converter_unitsOnline(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
4032      =e=
4033      sum(activity$converter_usedAct(converter_techs,vintage,activity),
4034            converter_unitsUsingActivity_MIP(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity));
4035   
4036  * // ### Converter MIP Units Idle Online Units Partial load
4037  * // Counts idle online units at every time step
4038  * // {Eq_converter_noOnlineIdleDetailedPartLoad}
4039  Eq_converter_noOnlineIdleDetailedPartLoad(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
4040    $( converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
4041          and (converter_hasMinLoad(converter_techs, vintage)
4042                  or converter_hasMaxLoad(converter_techs, vintage))
4043          and converter_techParam(converter_techs,vintage,"mipDetailedPartialLoad"))
4044      ..
4045      converter_unitsOnline(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
4046      =l=
4047      sum(activity$converter_usedAct(converter_techs,vintage,activity),
4048            converter_unitsUsingActivity_MIP(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity));
4049   
4050  * // ### Converter MIP activity model limit
4051  * // Converter activity model limit
4052  * // {Eq_converter_activityModeLimit}
4053  Eq_converter_activityModeLimit(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity)
4054    $( converter_usedTechAct(nodesModelSel,yearsSel,converter_techs,vintage,activity)
4055          and (converter_hasMinLoad(converter_techs, vintage)
4056                or converter_hasMaxLoad(converter_techs, vintage))
4057          and converter_techParam(converter_techs,vintage,"mipDetailedPartialLoad"))
4058      ..
4059      converter_unitsOnline(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
4060      =g=
4061      converter_unitsUsingActivity_MIP(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity);
4062   
4063  * ==== model definition ====
4064   
4065  Model M_converter
4066  /
4067    Eq_converter_unitsBalance
4068    Eq_converter_unitsFixedDecom
4069    Eq_converter_unitsFreeDecom
4070    Eq_converter_unitsUpperLimit
4071    Eq_converter_unitsLowerLimit
4072    Eq_converter_unitsFixedLimit
4073    Eq_converter_unitsTotalMIP
4074    Eq_converter_unitsOnlineMIP
4075    Eq_converter_activityUpperLimit
4076    Eq_converter_activityLowerLimit
4077    Eq_converter_activityFixedLimit
4078    Eq_converter_rampPos
4079    Eq_converter_rampNeg
4080    Eq_converter_rampLimit
4082    Eq_converter_unitsOnline
4083    Eq_converter_unitsOnlineUC
4085    Eq_converter_activityStartups
4086    Eq_converter_activityShutdowns
4087    Eq_converter_limitStartups
4088    Eq_converter_minUptime
4089    Eq_converter_minDowntime
4090    Eq_converter_activityUpperLimitDetailedPartLoadMinReq
4091    Eq_converter_activityUpperLimitDetailedPartLoadMaxReq
4092    Eq_converter_activityLowerLimitDetailedPartLoadMinReq
4093    Eq_converter_activityUpperLimitPartLoad
4094    Eq_converter_activityLowerLimitPartLoad
4095    Eq_converter_noOnlineIdle
4096    Eq_converter_noOnlineIdleDetailedPartLoad
4097    Eq_converter_activityModeLimit
4098  /;
INCLUDE    C:\Local\REMix\framework\remix\framework\model\source\core\storage.gms
4100  * SPDX-FileCopyrightText: Copyright (c) 2023 German Aerospace Center (DLR)
4101  * SPDX-License-Identifier: BSD-3-Clause
4102   
4103  * // # core_storage
4104  * // The equations in this file describe the storages in the model.
4105   
4106  * // ## Variables
4107  * // {special_table_storage_variables}
4436   
4437   
4438  * === SoC mappings ===
4439  set storage_usedTechSoCState(storage_techs,vintage,soc_statesIn);
4440  storage_usedTechSoCState(storage_techs,vintage,soc_states(soc_statesIn))
4441      $(storage_SoCParam(storage_techs,vintage,soc_states,"eRate") > 0
4442        and storage_SoCParam(storage_techs,vintage,soc_states,"cRate") > 0)
4443      = yes;
4444   
4445  set storage_validSoCRange(storage_techs,vintage);
4446  storage_validSoCRange(storage_techs,vintage)
4447      = smax(soc_states$storage_usedTechSoCState(storage_techs,vintage,soc_states), storage_SoCParam(storage_techs,vintage,soc_states,"SoC")) = 1
4448        and smin(soc_states$storage_usedTechSoCState(storage_techs,vintage,soc_states), storage_SoCParam(storage_techs,vintage,soc_states,"SoC")) = 0;
4449   
4450  * === Translate SoC parameters to ordered SoC-set ===
4451  * set ordered_socs / soc1*soc20 /;
4452  * alias(soc_states, soc_states_c);
4453  * parameter storage_SoCParam_ordered(storage_techs,vintage,ordered_socs,pc_storage_SoCParam);
4454  * storage_SoCParam_ordered(storage_techs,vintage,ordered_socs,pc_storage_SoCParam)
4455  *     $storage_validSoCRange(storage_techs,vintage)
4456  *     = sum(soc_states$(ord(ordered_socs) = sum(soc_states_c$(storage_SoCParam(storage_techs,vintage,soc_states_c,"SoC") <= storage_SoCParam(storage_techs,vintage,soc_states,"SoC")
4457  *                                                            and storage_usedTechSoCState(storage_techs,vintage,soc_states_c)), 1)
4458  *                       and storage_usedTechSoCState(storage_techs,vintage,soc_states)),
4459  *           storage_SoCParam(storage_techs,vintage,soc_states,pc_storage_SoCParam));
4460  *
4461  * set storage_usedTechSoCStateOrdered(storage_techs,vintage,ordered_socs);
4462  * storage_usedTechSoCStateOrdered(storage_techs,vintage,ordered_socs)
4463  *     $(storage_SoCParam_ordered(storage_techs,vintage,ordered_socs,"eRate") > 0
4464  *       and storage_SoCParam_ordered(storage_techs,vintage,ordered_socs,"cRate") > 0)
4465  *     = yes;
4466   
4467  parameter storage_bigM(storage_techs,vintage);
4468  storage_bigM(storage_techs,vintage) = smax((nodesModel,years), storage_reservoirParam(nodesModel,years,storage_techs,"unitsUpperLimit"));
4469  storage_bigM(storage_techs,vintage)$(storage_bigM(storage_techs,vintage) = INF) = 10000;
4470  storage_bigM(storage_techs,vintage)$(storage_bigM(storage_techs,vintage) = 0) = 10000;
4471   
4472  * === calculate the number of years represented by single year to calc ===
4473  alias(yearsToCalc, yearsToCalc_a)
4474  parameter representedYears(years);
4475  representedYears(years) = 0.5 *(smin(yearsToCalc$(yearsToCalc.val > years.val or yearsToCalc.val = smax(yearsToCalc_a, yearsToCalc_a.val)), yearsToCalc.val)
4476                                  - smax(yearsToCalc$(yearsToCalc.val < years.val or yearsToCalc.val = smin(yearsToCalc_a, yearsToCalc_a.val)), yearsToCalc.val));
4477   
4478  * ==== calculation of mappings ====
4479   
4480  * Technologies with a lifeTime > 0 are available
4481  set storage_availTech(nodesModel,years,storage_techs,vintage);
4482  storage_availTech(nodesModel,years,storage_techs,vintage)
4483      $(vintage.val = smax(vintage_a$(vintage_a.val <= years.val
4484          and storage_techParam(storage_techs,vintage_a,"lifeTime") > 0), vintage_a.val)) = yes;
4485   
4486  * Technologies to optimize become unavailable if they have an unitsUpperLimit of 0
4487  storage_availTech(nodesModel,years,storage_techs,vintage)
4488      $(yearsToCalc(years) and storage_reservoirParam(nodesModel,years,storage_techs,"unitsUpperLimit") = 0 ) = no;
4489   
4490  * Technologies already built become unavailable if they have an unitsBuild of 0
4491  storage_availTech(nodesModel,years,storage_techs,vintage)
4492      $( ( not yearsToCalc(years)) and storage_reservoirParam(nodesModel,years,storage_techs,"unitsBuild") = 0 ) = no;
4493   
4494  * Used technologies are available technologies over their technical lifeTime
4495  set storage_usedTech(nodesModel,years,storage_techs,vintage);
4496  storage_usedTech(nodesModel,years,storage_techs,vintage)
4497      $(vintage.val <= years.val
4498          and years.val < smax(years_a$storage_availTech(nodesModel,years_a,storage_techs,vintage),
4499                                              years_a.val + storage_techParam(storage_techs,vintage,"lifeTime"))
4500          ) = yes;
4501   
4502  * Technologies have to be decomissioned in the interval of first avail + lifetime to last avail + lifetime
4503  set storage_decomTech(nodesModel,years,storage_techs,vintage);
4504  storage_decomTech(nodesModel,years,storage_techs,vintage)
4505    $(sum(years_a$storage_usedTech(nodesModel,years_a,storage_techs,vintage), 1)
4506      and sum(yearsToCalc
4507        $(sameas(years, yearsToCalc)
4508          and yearsToCalc.val >= smin(years_a$storage_availTech(nodesModel,years_a,storage_techs,vintage), years_a.val) + storage_techParam(storage_techs,vintage,"lifeTime")
4509          and yearsToCalc.val <= smax(years_a$storage_availTech(nodesModel,years_a,storage_techs,vintage), years_a.val) + storage_techParam(storage_techs,vintage,"lifeTime")), 1))
4510    = yes;
4511   
4512  * Extend the decom frame to the year after the last year of usedTech
4513  storage_decomTech(nodesModel,yearsToCalc,storage_techs,vintage)
4514    $(storage_usedTech(nodesModel,yearsToCalc-1,storage_techs,vintage)
4515      and storage_decomTech(nodesModel,yearsToCalc-1,storage_techs,vintage))
4516    = yes;
4517   
4518  * Mapping for used commodities
4519  set storage_usedCom(storage_techs,vintage,commodity);
4520  option storage_usedCom < storage_sizeParam;
4521   
4522  set storage_usedTechCom(nodesModel,years,storage_techs,vintage,commodity);
4523  storage_usedTechCom(nodesModel,years,storage_techs,vintage,commodity)
4524      $(storage_usedTech(nodesModel,years,storage_techs,vintage)
4525          and storage_usedCom(storage_techs,vintage,commodity))
4526      = yes;
4527   
4528   
4529  * // ## Load units from gdx file
4531   
4532  * ==== aggregation of profiles ====
4533  * derive upper and lower profiles then aggregate
4534  set storage_level_hasProfileIn(nodesData,years,storage_techs,pc_storage_levelProfile);
4535  option storage_level_hasProfileIn < storage_levelProfileIn;
4536   
4537  set storage_level_hasProfile(nodesModel,years,storage_techs,pc_storage_levelProfile);
4538  storage_level_hasProfile(nodesModelToCalc,yearsToCalc,storage_techs,pc_storage_levelProfile)
4539      = sum(nodesData$aggregateNodesModel(nodesData,nodesModelToCalc),
4540              storage_level_hasProfileIn(nodesData,yearsToCalc,storage_techs,pc_storage_levelProfile));
4541   
4542  * weighted average for a real sum of units upper limits, plain average if one region has an upper limit of inf
4543  parameter storage_levelProfile(timeModel,nodesModel,years,storage_techs,vintage,pc_storage_levelProfile);
4544  storage_levelProfile(timeModelToCalc,storage_usedTech(nodesModelToCalc,yearsToCalc,storage_techs,vintage),"upper")
4545      = storage_techParam(storage_techs,vintage,"levelUpperLimit");
4546  storage_levelProfile(timeModelToCalc,storage_usedTech(nodesModelToCalc,yearsToCalc,storage_techs,vintage),"lower")
4547      = storage_techParam(storage_techs,vintage,"levelLowerLimit");
4548   
4549  set storage_finiteUnitLimit(nodesModelToCalc,yearsToCalc,storage_techs);
4550  storage_finiteUnitLimit(nodesModelToCalc,yearsToCalc,storage_techs) = sum(nodesData$aggregateNodesModel(nodesData,nodesModelToCalc), storage_reservoirParamIn(nodesData,yearsToCalc,storage_techs,"unitsUpperLimit")) > 0
4551                                                   and sum(nodesData$aggregateNodesModel(nodesData,nodesModelToCalc), storage_reservoirParamIn(nodesData,yearsToCalc,storage_techs,"unitsUpperLimit")) < inf;
4552   
4553  storage_levelProfile(timeModelToCalc,storage_usedTech(nodesModelToCalc,yearsToCalc,storage_techs,vintage),pc_storage_levelProfile)
4554      $( storage_level_hasProfile(nodesModelToCalc,yearsToCalc,storage_techs,pc_storage_levelProfile)
4555          and storage_finiteUnitLimit(nodesModelToCalc,yearsToCalc,storage_techs))
4556      = sum(nodesData$aggregateNodesModel(nodesData,nodesModelToCalc),
4557              sum(timeData$timeMapping(timeData,timeModelToCalc),
4558                    storage_levelProfileIn(timeData,nodesData,yearsToCalc,storage_techs,pc_storage_levelProfile))
4559                / timeLength(timeModelToCalc)
4560              * storage_reservoirParamIn(nodesData,yearsToCalc,storage_techs,"unitsUpperLimit"))
4561      / sum(nodesData$aggregateNodesModel(nodesData,nodesModelToCalc),
4562              storage_reservoirParamIn(nodesData,yearsToCalc,storage_techs,"unitsUpperLimit"));
4563   
4564  storage_levelProfile(timeModelToCalc,storage_usedTech(nodesModelToCalc,yearsToCalc,storage_techs,vintage),pc_storage_levelProfile)
4565      $( storage_level_hasProfile(nodesModelToCalc,yearsToCalc,storage_techs,pc_storage_levelProfile)
4566          and sum(nodesData$aggregateNodesModel(nodesData,nodesModelToCalc),
4567                      storage_reservoirParamIn(nodesData,yearsToCalc,storage_techs,"unitsUpperLimit")) = inf )
4568      = sum(nodesData$(aggregateNodesModel(nodesData,nodesModelToCalc)
4569                      and storage_reservoirParamIn(nodesData,yearsToCalc,storage_techs,"unitsUpperLimit") = inf ),
4570              sum(timeData$timeMapping(timeData,timeModelToCalc),
4571                    storage_levelProfileIn(timeData,nodesData,yearsToCalc,storage_techs,pc_storage_levelProfile))
4572                / timeLength(timeModelToCalc))
4573      / sum(nodesData$(aggregateNodesModel(nodesData,nodesModelToCalc)
4574                      and storage_reservoirParamIn(nodesData,yearsToCalc,storage_techs,"unitsUpperLimit") = inf ), 1);
4575   
4576  * for fixed profiles overwrite upper and lower profile
4577  storage_levelProfile(timeModelToCalc,nodesModelToCalc,yearsToCalc,storage_techs,vintage,"lower")
4578      $storage_level_hasProfile(nodesModelToCalc,yearsToCalc,storage_techs,"fixed")
4579      = storage_levelProfile(timeModelToCalc,nodesModelToCalc,yearsToCalc,storage_techs,vintage,"fixed");
4580   
4581  storage_levelProfile(timeModelToCalc,nodesModelToCalc,yearsToCalc,storage_techs,vintage,"upper")
4582      $storage_level_hasProfile(nodesModelToCalc,yearsToCalc,storage_techs,"fixed")
4583      = storage_levelProfile(timeModelToCalc,nodesModelToCalc,yearsToCalc,storage_techs,vintage,"fixed");
4584   
4585   
4586  * ==== parameter modifications ====
4587  storage_reservoirParam(nodesModel,years,storage_techs,"unitsLowerLimit")
4588          $sum(vintage, storage_techParam(storage_techs,vintage,"mipUnits"))
4589      = floor(storage_reservoirParam(nodesModel,years,storage_techs,"unitsLowerLimit"));
4590  storage_reservoirParam(nodesModel,years,storage_techs,"unitsUpperLimit")
4591          $sum(vintage, storage_techParam(storage_techs,vintage,"mipUnits"))
4592      = ceil(storage_reservoirParam(nodesModel,years,storage_techs,"unitsUpperLimit"));
4593   
4594   
4595  * ==== definition of variables ====
4596   
4597  * Initialise variables for unitsBuild
4598  storage_unitsBuild.l(nodesModel,years,storage_techs,vintage)
4599      $storage_availTech(nodesModel,years,storage_techs,vintage)
4600      = storage_reservoirParam(nodesModel,years,storage_techs,"unitsBuild");
4601  storage_unitsBuild.lo(nodesModel,yearsToCalc,storage_techs,vintage)
4602      $storage_availTech(nodesModel,yearsToCalc,storage_techs,vintage)
4603      = storage_unitsBuild.l(nodesModel,yearsToCalc,storage_techs,vintage);
4604  storage_unitsBuild.fx(nodesModel,years,storage_techs,vintage)
4605      $storage_reservoirParam(nodesModel,years,storage_techs,"noExpansion")
4606      = storage_unitsBuild.l(nodesModel,years,storage_techs,vintage);
4607   
4608  * Initialise variables for unitsDecom
4609  storage_unitsDecom.l(nodesModel,years,storage_techs,vintage)
4610      $(storage_decomTech(nodesModel,years,storage_techs,vintage)
4611        and years.val < sum(yearsToCalc$(ord(yearsToCalc) = 1), yearsToCalc.val))
4612      = sum((years_a,years_aa)$(sameas(years-1, years_aa)
4613                        and years_a.val > years_aa.val - storage_techParam(storage_techs,vintage,'lifeTime')
4614                        and years_a.val <= years.val - storage_techParam(storage_techs,vintage,'lifeTime')
4615                        and storage_availTech(nodesModel,years_a,storage_techs,vintage)),
4616          storage_unitsBuild.l(nodesModel,years_a,storage_techs,vintage));
4617   
4618  storage_unitsDecom.l(nodesModel,yearsToCalc,storage_techs,vintage)
4619    $storage_decomTech(nodesModel,yearsToCalc,storage_techs,vintage)
4620    = sum(years$
4621          (years.val < sum(yearsToCalc_a$(ord(yearsToCalc_a) = 1), yearsToCalc_a.val)
4622            and storage_availTech(nodesModel,years,storage_techs,vintage)
4623            and years.val > sum(years_a$sameas(years_a, yearsToCalc-1), years_a.val) - storage_techParam(storage_techs,vintage,'lifeTime')
4624            and years.val <= yearsToCalc.val - storage_techParam(storage_techs,vintage,'lifeTime')),
4625        storage_unitsBuild.l(nodesModel,years,storage_techs,vintage))
4626      + sum(yearsToCalc_a$
4627          (yearsToCalc_a.val < sum(yearsToCalc_aa$(ord(yearsToCalc_aa) > 1), yearsToCalc_a.val)
4628            and storage_availTech(nodesModel,yearsToCalc_a,storage_techs,vintage)
4629            and yearsToCalc_a.val > sum(years_a$sameas(years_a, yearsToCalc-1), years_a.val) - storage_techParam(storage_techs,vintage,'lifeTime')
4630            and yearsToCalc_a.val <= yearsToCalc.val - storage_techParam(storage_techs,vintage,'lifeTime')),
4631        storage_unitsBuild.l(nodesModel,yearsToCalc_a,storage_techs,vintage));
4632        ;
4633   
4634  storage_unitsDecom.lo(nodesModel,yearsToCalc,storage_techs,vintage)
4635      $(storage_usedTech(nodesModel,yearsToCalc,storage_techs,vintage)
4636        and not storage_techParam(storage_techs,vintage,"freeDecom"))
4637      = storage_unitsDecom.l(nodesModel,yearsToCalc,storage_techs,vintage)
4638   
4639  * Calculate planned unit expansion
4640  parameter storage_unitsPlanned(nodesModel,years,storage_techs,vintage);
4641  storage_unitsPlanned(nodesModel,years,storage_techs,vintage) = 0;
4642  loop(years,
4643    storage_unitsPlanned(nodesModel,years,storage_techs,vintage)
4644      =
4645      storage_unitsPlanned(nodesModel,years-1,storage_techs,vintage)
4646          $storage_usedTech(nodesModel,years-1,storage_techs,vintage)
4647      + storage_unitsBuild.l(nodesModel,years,storage_techs,vintage)
4648          $storage_availTech(nodesModel,years,storage_techs,vintage)
4649      - storage_unitsDecom.l(nodesModel,years,storage_techs,vintage)
4650          $storage_usedTech(nodesModel,years,storage_techs,vintage);
4651  );
4652   
4653  * Set initial state for planned units
4654  storage_unitsTotal.l(nodesModel,years,storage_techs,vintage)
4655    = storage_unitsPlanned(nodesModel,years,storage_techs,vintage)
4656   
4657  * Calculate if planned unit expansion is bounded by upper and lower limits
4658  set storage_unitBoundsFixed(nodesModel,years,storage_techs);
4659  storage_unitBoundsFixed(nodesModel,years,storage_techs)
4660    $(sum(vintage$storage_usedTech(nodesModel,years,storage_techs,vintage),
4661          storage_unitsPlanned(nodesModel,years,storage_techs,vintage))
4662      = storage_reservoirParam(nodesModel,years,storage_techs,"unitsUpperLimit")
4663    and sum(vintage$storage_usedTech(nodesModel,years,storage_techs,vintage),
4664          storage_unitsPlanned(nodesModel,years,storage_techs,vintage))
4665      = storage_reservoirParam(nodesModel,years,storage_techs,"unitsLowerLimit"))
4666    = yes;
4667   
4668  * Fix unitsBuild, unitsDecom, unitsTotal if levels are predetermined by upper and lower limits
4669  storage_unitsBuild.fx(nodesModel,years,storage_techs,vintage)
4670    $(storage_availTech(nodesModel,years,storage_techs,vintage)
4671      and storage_unitBoundsFixed(nodesModel,years,storage_techs))
4672    = storage_unitsBuild.l(nodesModel,years,storage_techs,vintage);
4673  storage_unitsDecom.fx(nodesModel,years,storage_techs,vintage)
4674    $(storage_usedTech(nodesModel,years,storage_techs,vintage)
4675      and storage_unitBoundsFixed(nodesModel,years,storage_techs))
4676    = storage_unitsDecom.l(nodesModel,years,storage_techs,vintage);
4677  storage_unitsTotal.fx(nodesModel,years,storage_techs,vintage)
4678    $(storage_usedTech(nodesModel,years,storage_techs,vintage)
4679      and storage_unitBoundsFixed(nodesModel,years,storage_techs))
4680    = storage_unitsTotal.l(nodesModel,years,storage_techs,vintage);
4681   
4682  storage_unitsTotal_MIP.up(nodesModel,years,storage_techs,vintage)
4683      $(storage_usedTech(nodesModel,years,storage_techs,vintage)
4684        and storage_techParam(storage_techs,vintage,"mipUnits") = 1)
4685      = storage_reservoirParam(nodesModel,years,storage_techs,"unitsUpperLimit");
4686   
4687  * Add parameter for fixing capacities during myopic runs
4688  parameter storage_unitsDelta(nodesModel,years,storage_techs);
4689   
4690   
4691  * ==== declaration of equations ====
4692   
4693  equations
4694    Eq_storage_unitsBalance(nodesModel,years,storage_techs,vintage
4695      ) "Ensures the units balance over the planning period."
4696    Eq_storage_unitsFixedDecom(nodesModel,years,storage_techs,vintage
4697      ) "Restricts the fixed decommissioning of units over the planning period."
4698    Eq_storage_unitsFreeDecom(nodesModel,years,storage_techs,vintage
4699      ) "Restricts the free decommissioning of units over the planning period."
4700    Eq_storage_unitsUpperLimit(nodesModel,years,storage_techs
4701      ) "Upper bound for the total number of units."
4702    Eq_storage_unitsLowerLimit(nodesModel,years,storage_techs
4703      ) "Lower bound for the total number of units."
4704    Eq_storage_unitsTotalMIP(nodesModel,years,storage_techs,vintage
4705      ) "Fixes the total number of units to the corresponding integer variable."
4706   
4707    Eq_storage_levelUpperLimit(timeModel,nodesModel,years,storage_techs,vintage,commodity
4708      ) "Upper bound for the total number of units."
4709    Eq_storage_levelUpperLimit_degradation(timeModel,nodesModel,years,storage_techs,vintage,commodity
4710      ) "Upper bound for the total number of units if the storage technology accounts for degradation."
4711    Eq_storage_levelLowerLimit(timeModel,nodesModel,years,storage_techs,vintage,commodity
4712      ) "Lower bound for the total number of units."
4713    Eq_storage_losses(timeModel,nodesModel,years,storage_techs,vintage,commodity
4714      ) "Stored commodities lost due to self discharge."
4715    Eq_storage_unitsBalanceStates(nodesModel,years,storage_techs,vintage
4716      ) "Currently available units must have been built at some point in time and have some state of degradation."
4717    Eq_storage_unitsUpperLimitPerState(nodesModel,years,yearsCom,storage_techs,vintage
4718      ) "There cannot be more units from a certain year than the amount built in that year."
4719    Eq_storage_unitsStatesNoRecovery(nodesModel,years,yearsCom,storage_techs,vintage,degradation_states
4720      ) "There is no recovery."
4721    Eq_storage_cRateLimit(timeModel,nodesModel,years,storage_techs,vintage,commodity
4722      ) "Limit charging rate based on unit capacity."
4723    Eq_storage_eRateLimit(timeModel,nodesModel,years,storage_techs,vintage,commodity
4724      ) "Limit discharging rate based on unit capacity."
4725    Eq_storage_charge(timeModel,nodesModel,years,storage_techs,vintage,commodity
4726      ) "Positive change in state of charge is influx."
4727    Eq_storage_discharge(timeModel,nodesModel,years,storage_techs,vintage,commodity
4728      ) "Negative change in state of charge is outflux."
4729   
4730    Eq_storage_levelStateSum(timeModel,nodesModel,years,storage_techs,vintage,commodity
4731      ) "Sum of degradation class storage levels is the global level."
4732    Eq_storage_levelUpperLimitPerAge(timeModel,nodesModel,years,yearsCom,storage_techs,vintage,commodity
4733      ) "Upper bound for units of a certain state."
4734    Eq_storage_chargingPerAge(timeModel,nodesModel,years,yearsCom,storage_techs,vintage,commodity
4735      ) "Positive change in state of charge is influx for each degradation class."
4736    Eq_storage_chargeBasedDegradationDistribution(nodesModel,years,yearsCom,storage_techs,vintage,commodity
4737      ) "Determine degradation states of storage units."
4738    Eq_storage_unitsDecomStateSum(nodesModel,years,storage_techs,vintage
4739      ) "All decomminsioned units must have a degradation state."
4740    Eq_storage_unitsDegradation(nodesModel,years,yearsCom,storage_techs,vintage,degradation_states
4741      ) "Only allow one range of degradation states per year and age group."
4742    Eq_storage_unitsDegradation_onlyOneRange(nodesModel,years,yearsCom,storage_techs,vintage
4743      ) "Limit usable degradation states to one range, i.e., two neighboring states."
4744   
4745    Eq_storage_unitsSoC_sum(timeModel,nodesModel,years,storage_techs,vintage
4746      ) "Every unit has a state of charge."
4747    Eq_storage_levelSoC(timeModel,nodesModel,years,storage_techs,vintage,commodity
4748      ) "Every unit has a state of charge."
4749    Eq_storage_unitsSoC(timeModel,nodesModel,years,storage_techs,vintage,soc_statesIn
4750      ) "Number of units in particular SoC."
4751    Eq_storage_unitsSoC_onlyOneRange(timeModel,nodesModel,years,storage_techs,vintage
4752      ) "Limit usable SoC states to one range, i.e., two neighboring states."
4753   
4754    Eq_storage_cRateLimit_SoC(timeModel,nodesModel,years,storage_techs,vintage,commodity
4755      ) "Limit charging rate based on unit capacity."
4756    Eq_storage_eRateLimit_SoC(timeModel,nodesModel,years,storage_techs,vintage,commodity
4757      ) "Limit discharging rate based on unit capacity."
4758    ;
4759   
4760  * ==== equation definition ====
4761  * // ## Equations
4762  * // ### Storage Units Balance
4763  * // Ensures that the total units are consistent with the built and decommissioned units.
4764  * // {Eq_storage_unitsBalance}
4765  Eq_storage_unitsBalance(nodesModelSel,yearsSel,storage_techs,vintage)
4766      $((storage_usedTech(nodesModelSel,yearsSel,storage_techs,vintage)
4767            or sum(years$sameas(years,yearsSel), storage_usedTech(nodesModelSel,years-1,storage_techs,vintage)))
4768          and not storage_unitBoundsFixed(nodesModelSel,yearsSel,storage_techs))
4769      ..
4770      storage_unitsTotal(nodesModelSel,yearsSel,storage_techs,vintage)
4771      =e=
4772          sum(yearsToCalc$(ord(yearsToCalc) = 1 and sameas(yearsToCalc, yearsSel)),
4773        sum(years$sameas(years, yearsToCalc),
4774          storage_unitsTotal(nodesModelSel,years-1,storage_techs,vintage)
4775            $storage_usedTech(nodesModelSel,years-1,storage_techs,vintage)))
4776      + sum((yearsToCalc)$(ord(yearsToCalc) > 1 and sameas(yearsToCalc, yearsSel)),
4777        storage_unitsTotal(nodesModelSel,yearsToCalc-1,storage_techs,vintage)
4778          $storage_usedTech(nodesModelSel,yearsToCalc-1,storage_techs,vintage))
4779      + storage_unitsBuild(nodesModelSel,yearsSel,storage_techs,vintage)
4780          $storage_availTech(nodesModelSel,yearsSel,storage_techs,vintage)
4781      - storage_unitsDecom(nodesModelSel,yearsSel,storage_techs,vintage)
4782          $storage_usedTech(nodesModelSel,yearsSel,storage_techs,vintage);
4783   
4784  * // ### Storage Units Fixed Decommission
4785  * // Restricts the fixed decommissioning of storage units over the planning period.
4786  * // {Eq_storage_unitsFixedDecom}
4787  Eq_storage_unitsFixedDecom(nodesModelSel,yearsSel,storage_techs,vintage)
4788      $(storage_decomTech(nodesModelSel,yearsSel,storage_techs,vintage)
4789          and not storage_techParam(storage_techs,vintage,"freeDecom") = 1
4790          and not storage_unitBoundsFixed(nodesModelSel,yearsSel,storage_techs))
4791      ..
4792      storage_unitsDecom(nodesModelSel,yearsSel,storage_techs,vintage)
4793      =e=
4794      sum(years$
4795          (storage_availTech(nodesModelSel,years,storage_techs,vintage)
4796            and years.val > sum(yearsToCalc$sameas(yearsToCalc+1, yearsSel), yearsToCalc.val) - storage_techParam(storage_techs,vintage,'lifeTime')
4797            and years.val <= yearsSel.val - storage_techParam(storage_techs,vintage,'lifeTime')),
4798        storage_unitsBuild(nodesModelSel,years,storage_techs,vintage));
4799   
4800  * // ### Storage Units Free Decomission
4801  * // Restricts the free decommissioning of storage units over the planning period.
4802  * // {Eq_storage_unitsFreeDecom}
4803  Eq_storage_unitsFreeDecom(nodesModelSel,yearsSel,storage_techs,vintage)
4804      $((storage_decomTech(nodesModelSel,yearsSel,storage_techs,vintage)
4805          or storage_usedTech(nodesModelSel,yearsSel,storage_techs,vintage))
4806          and storage_techParam(storage_techs,vintage,"freeDecom") = 1)
4807      ..
4808      sum(years$
4809            ((storage_decomTech(nodesModelSel,years,storage_techs,vintage)
4810              or storage_usedTech(nodesModelSel,years,storage_techs,vintage))
4811              and years.val < sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)),
4812          storage_unitsDecom(nodesModelSel,years,storage_techs,vintage))
4813      + sum(yearsToCalc$
4814            ((storage_decomTech(nodesModelSel,yearsToCalc,storage_techs,vintage)
4815              or storage_usedTech(nodesModelSel,yearsToCalc,storage_techs,vintage))
4816              and yearsToCalc.val >= sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
4817              and yearsToCalc.val <= yearsSel.val),
4818          storage_unitsDecom(nodesModelSel,yearsToCalc,storage_techs,vintage))
4819      =g=
4820      sum(years$
4821            (storage_availTech(nodesModelSel,years,storage_techs,vintage)
4822              and years.val < sum(yearsToCalc$(ord(yearsToCalc)=1), yearsToCalc.val) - storage_techParam(storage_techs,vintage,'lifeTime')),
4823          storage_unitsBuild(nodesModelSel,years,storage_techs,vintage))
4824      + sum(yearsToCalc$
4825            (storage_availTech(nodesModelSel,yearsToCalc,storage_techs,vintage)
4826              and yearsToCalc.val >= sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
4827              and yearsToCalc.val <= yearsSel.val - storage_techParam(storage_techs,vintage,'lifeTime')),
4828          storage_unitsBuild(nodesModelSel,yearsToCalc,storage_techs,vintage));
4829   
4830  * // ### Storage Units Lower Limit
4831  * // Lower bound for the total number of storage units.
4832  * // {Eq_storage_unitsLowerLimit}
4833  Eq_storage_unitsLowerLimit(nodesModelSel,yearsSel,storage_techs)
4834      $(storage_reservoirParam(nodesModelSel,yearsSel,storage_techs,'unitsLowerLimit') > 0 )
4835      ..
4836      sum(vintage$storage_usedTech(nodesModelSel,yearsSel,storage_techs,vintage),
4837          storage_unitsTotal(nodesModelSel,yearsSel,storage_techs,vintage))
4838      =g=
4839      storage_reservoirParam(nodesModelSel,yearsSel,storage_techs,"unitsLowerLimit");
4840   
4841  * // ### Storage Units Upper Limit
4842  * // Upper bound for the total number of storage units.
4843  * // {Eq_storage_unitsUpperLimit}
4844  Eq_storage_unitsUpperLimit(nodesModelSel,yearsSel,storage_techs)
4845      $(storage_reservoirParam(nodesModelSel,yearsSel,storage_techs,'unitsUpperLimit') >= 0
4846          and storage_reservoirParam(nodesModelSel,yearsSel,storage_techs,'unitsUpperLimit') < +inf )
4847      ..
4848      sum(vintage$storage_usedTech(nodesModelSel,yearsSel,storage_techs,vintage),
4849          storage_unitsTotal(nodesModelSel,yearsSel,storage_techs,vintage))
4850      =l=
4851      storage_reservoirParam(nodesModelSel,yearsSel,storage_techs,"unitsUpperLimit");
4852   
4853  * // ### Storage Units Total MIP
4854  * // Fixes the total number of storage units to the corresponding integer variable.
4855  * // {Eq_storage_unitsTotalMIP}
4856  Eq_storage_unitsTotalMIP(nodesModelSel,yearsSel,storage_techs,vintage)
4857      $( storage_usedTech(nodesModelSel,yearsSel,storage_techs,vintage)
4858          and storage_techParam(storage_techs,vintage,"mipUnits") = 1 )
4859      ..
4860      storage_unitsTotal(nodesModelSel,yearsSel,storage_techs,vintage)
4861      =e=
4862      storage_unitsTotal_MIP(nodesModelSel,yearsSel,storage_techs,vintage);
4863   
4864  * // ### Storage Level Lower Limit
4865  * // Lower limit on the storage level.
4866  * // {Eq_storage_levelLowerLimit}
4867  Eq_storage_levelLowerLimit(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
4868      $(storage_usedTechCom(nodesModelSel,yearsSel,storage_techs,vintage,commodity)
4869          and storage_levelProfile(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,"lower") > 0)
4870      ..
4871      storage_level(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
4872      =g=
4873      storage_levelProfile(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,"lower")
4874      * storage_sizeParam(storage_techs,vintage,commodity,"size")
4875      * storage_unitsTotal(nodesModelSel,yearsSel,storage_techs,vintage);
4876   
4877  * // ### Storage Level Upper Limit
4878  * // Upper limit on the storage level.
4879  * // {Eq_storage_levelUpperLimit}
4880  Eq_storage_levelUpperLimit(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
4881      $(storage_usedTechCom(nodesModelSel,yearsSel,storage_techs,vintage,commodity)
4882          and not storage_hasDegradation(storage_techs,vintage)
4883          and storage_levelProfile(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,"upper") >= 0)
4884      ..
4885      storage_level(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
4886      =l=
4887      storage_levelProfile(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,"upper")
4888      * storage_sizeParam(storage_techs,vintage,commodity,"size")
4889      * storage_unitsTotal(nodesModelSel,yearsSel,storage_techs,vintage);
4890   
4891  * // ### Storage Level Upper Limit (degradation)
4892  * // Upper limit on the storage level if the storage technology accounts for degradation.
4893  * // {Eq_storage_levelUpperLimit_degradation}
4894  Eq_storage_levelUpperLimit_degradation(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
4895      $(storage_usedTechCom(nodesModelSel,yearsSel,storage_techs,vintage,commodity)
4896          and storage_hasDegradation(storage_techs,vintage)
4897          and storage_levelProfile(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,"upper") >= 0)
4898      ..
4899      storage_level(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
4900      =l=
4901      storage_levelProfile(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,"upper")
4902      * storage_sizeParam(storage_techs,vintage,commodity,"size")
4903      * sum((degradation_states,yearsCom)$storage_usedDegradation(storage_techs,vintage,degradation_states),
4904              (storage_degradationParam(storage_techs,vintage,degradation_states,"remainingCapacity")
4905                - (yearsSel.val - yearsCom.val) * storage_techParam(storage_techs,vintage,"annualDegradation"))
4906                * storage_unitsStateTracker(nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,degradation_states));
4907   
4908  * // ### Storage Unit States Sum (degradation)
4909  * // The number of units in all degradation state must match the total unit number.
4910  * // {Eq_storage_unitsBalanceStates}
4911  Eq_storage_unitsBalanceStates(nodesModelSel,yearsSel,storage_techs,vintage)
4912      $(storage_usedTech(nodesModelSel,yearsSel,storage_techs,vintage)
4913        and storage_hasDegradation(storage_techs,vintage))
4914      ..
4915      storage_unitsTotal(nodesModelSel,yearsSel,storage_techs,vintage)
4916      =e=
4917      sum((yearsCom,degradation_states)$storage_usedDegradation(storage_techs,vintage,degradation_states),
4918            storage_unitsStateTracker(nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,degradation_states));
4919   
4920  * // ### Storage Unit States Upper Limit(degradation)
4921  * // The states of all commissioned units in one year (unitsBuilt) must either still be tracked or have been decommissioned.
4922  * // {Eq_storage_unitsUpperLimitPerState}
4923  Eq_storage_unitsUpperLimitPerState(nodesModelSel,yearsSel,yearsCom,storage_techs,vintage)
4924      $(storage_usedTech(nodesModelSel,yearsSel,storage_techs,vintage)
4925          and storage_hasDegradation(storage_techs,vintage))
4926      ..
4927      sum(degradation_states$storage_usedDegradation(storage_techs,vintage,degradation_states),
4928            storage_unitsStateTracker(nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,degradation_states)
4929            + sum(years$(years.val <= yearsSel.val),
4930                  storage_unitsStateTrackerDecom(nodesModelSel,years,yearsCom,storage_techs,vintage,degradation_states)))
4931      =e=
4932      storage_unitsBuild(nodesModelSel,yearsCom,storage_techs,vintage)$(yearsCom.val <= yearsSel.val);
4933   
4934  * // ### Storage Unit States Progression (degradation)
4935  * // Unit recovery by reassigning the storage cycles to other units is disabled. Therefore, the number of units in a particular degradation state can only increase if the number in a less degraded state is decreased by at least the same amount.
4936  * // {Eq_storage_unitsStatesNoRecovery}
4937  alias(degradation_states, dc_states);
4938  Eq_storage_unitsStatesNoRecovery(nodesModelSel,yearsSel(yearsToCalc),yearsCom,storage_techs,vintage,degradation_states)
4939      $(storage_usedTech(nodesModelSel,yearsSel,storage_techs,vintage)
4940        and yearsToCalc.val > yearsCom.val
4941        and storage_usedDegradation(storage_techs,vintage,degradation_states))
4942      ..
4943      sum(dc_states$(storage_usedDegradation(storage_techs,vintage,dc_states)
4944                and storage_degradationParam(storage_techs,vintage,dc_states,"maxFullCycles") <= storage_degradationParam(storage_techs,vintage,degradation_states,"maxFullCycles")),
4945              storage_unitsStateTracker(nodesModelSel,yearsToCalc,yearsCom,storage_techs,vintage,dc_states)
4946              + sum(years$(years.val <= yearsToCalc.val), storage_unitsStateTrackerDecom(nodesModelSel,years,yearsCom,storage_techs,vintage,dc_states)))
4947      =l=
4948      sum(dc_states$(storage_usedDegradation(storage_techs,vintage,dc_states)
4949                      and storage_degradationParam(storage_techs,vintage,dc_states,"maxFullCycles") <= storage_degradationParam(storage_techs,vintage,degradation_states,"maxFullCycles")),
4950              storage_unitsStateTracker(nodesModelSel,yearsToCalc-1,yearsCom,storage_techs,vintage,dc_states)
4951              + sum(years$(years.val < yearsToCalc.val), storage_unitsStateTrackerDecom(nodesModelSel,years,yearsCom,storage_techs,vintage,dc_states)));
4952   
4953  * // ### Storage Losses
4954  * // Accumulation of storage losses.
4955  * // {Eq_storage_losses}
4956  Eq_storage_losses(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,storage_techs,vintage,commodity)
4957      $storage_usedTechCom(nodesModelSel,yearsSel,storage_techs,vintage,commodity)
4958      ..
4959      storage_losses(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
4960      =e=
4961      - storage_level(timeModelToCalc--1,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
4962        * storage_sizeParam(storage_techs,vintage,commodity,"selfdischarge")
4963      + storage_sizeParam(storage_techs,vintage,commodity,"selfdischargeAbs")
4964      + (storage_techParam(storage_techs,vintage,"chargingLoss")
4965          /(1 - storage_techParam(storage_techs,vintage,"chargingLoss")))
4966        * storage_charge(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
4967          $(storage_techParam(storage_techs,vintage,"chargingLoss") > 0)
4968      + storage_techParam(storage_techs,vintage,"dischargingLoss")
4969        * storage_discharge(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
4970          $(storage_techParam(storage_techs,vintage,"dischargingLoss") > 0)
4971      - storage_sizeParam(storage_techs,vintage,commodity,"size")
4972        * sum(soc_states$(storage_usedTechSoCState(storage_techs,vintage,soc_states)
4973                          and storage_validSoCRange(storage_techs,vintage)),
4974              storage_unitsSoC(timeModelToCalc--1,nodesModelSel,yearsSel,storage_techs,vintage,soc_states)
4975              * storage_SoCParam(storage_techs,vintage,soc_states,"SoC")
4976              * storage_SoCParam(storage_techs,vintage,soc_states,"selfdischarge"));
4977   
4978  * // ### C-Rate Limit
4979  * // The increase in storage level per time step, i.e., the charging rate, is limited relative to the storage capacity.
4980  * // {Eq_storage_cRateLimit}
4981  Eq_storage_cRateLimit(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,storage_techs,vintage,commodity)
4982      $(storage_usedTechCom(nodesModelSel,yearsSel,storage_techs,vintage,commodity)
4983        and storage_techParam(storage_techs,vintage,"maxCRate") > 0)
4984      ..
4985      storage_level(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
4986      - storage_level(timeModelToCalc--1,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
4987      =l=
4988      storage_techParam(storage_techs,vintage,"maxCRate")
4989      * storage_sizeParam(storage_techs,vintage,commodity,"size")
4990      * storage_unitsTotal(nodesModelSel,yearsSel,storage_techs,vintage);
4991   
4992  * // ### E-Rate Limit
4993  * // The decrease in storage level per time step, i.e., the discharging rate, is limited relative to the storage capacity.
4994  * // {Eq_storage_eRateLimit}
4995  Eq_storage_eRateLimit(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,storage_techs,vintage,commodity)
4996      $(storage_usedTechCom(nodesModelSel,yearsSel,storage_techs,vintage,commodity)
4997        and storage_techParam(storage_techs,vintage,"maxERate") > 0)
4998      ..
4999      storage_level(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
5000      - storage_level(timeModelToCalc--1,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
5001      =g=
5002      - storage_techParam(storage_techs,vintage,"maxERate")
5003      * storage_sizeParam(storage_techs,vintage,commodity,"size")
5004      * storage_unitsTotal(nodesModelSel,yearsSel,storage_techs,vintage);
5005   
5006  * // ### Storage Charging
5007  * // Increases in storage levels are accounted as charging amounts.
5008  * // {Eq_storage_charge}
5009  Eq_storage_charge(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,storage_techs,vintage,commodity)
5010      $(storage_usedTechCom(nodesModelSel,yearsSel,storage_techs,vintage,commodity)
5011        and storage_techParam(storage_techs,vintage,"chargingLoss") > 0)
5012      ..
5013      storage_charge(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
5014      =g=
5015      storage_level(timeModelToCalc,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
5016      - storage_level(timeModelToCalc--1,nodesModelSel,yearsSel,storage_techs,vintage,commodity);
5017   
5018  * // ### Storage Discharging
5019  * // Decreases in storage levels are accounted as discharging amounts.
5020  * // {Eq_storage_discharge}
5021  Eq_storage_discharge(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,storage_techs,vintage,commodity)
5022      $(storage_usedTechCom(nodesModelSel,yearsSel,storage_techs,vintage,commodity)
5023        and storage_techParam(storage_techs,vintage,"dischargingLoss") > 0)
5024      ..
5025      storage_discharge(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
5026      =g=
5027      storage_level(timeModelToCalc--1,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
5028      - storage_level(timeModelToCalc,nodesModelSel,yearsSel,storage_techs,vintage,commodity);
5029   
5030  * // ### Storage Level Sum (degradation)
5031  * // The storage level is accounted individually by commissioning year in the case of degradation in order to prohibit the model to assign pre-existing storage cycles to newly built storage reservoirs and thereby avoiding degradation. All those storage levels represent the total storage level.
5032  * // {Eq_storage_levelStateSum}
5033  Eq_storage_levelStateSum(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
5034      $(storage_usedTechCom(nodesModelSel,yearsSel,storage_techs,vintage,commodity)
5035        and storage_techParam(storage_techs,vintage,"usageDegradation"))
5036      ..
5037      storage_level(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
5038      =e=
5039      sum(yearsCom, storage_levelPerAge(timeModelSel,nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,commodity));
5040   
5041  * // ### Storage Level Upper Limit per Age Group (degradation)
5042  * // Upper limit on the storage level per commissioning year if the storage technology accounts for degradation.
5043  * // {Eq_storage_levelUpperLimitPerAge}
5044  Eq_storage_levelUpperLimitPerAge(timeModelSel,nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,commodity)
5045      $(storage_usedTechCom(nodesModelSel,yearsSel,storage_techs,vintage,commodity)
5046        and storage_techParam(storage_techs,vintage,"usageDegradation"))
5047      ..
5048      storage_levelPerAge(timeModelSel,nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,commodity)
5049      =l=
5050      storage_techParam(storage_techs,vintage,"levelUpperLimit")
5051      * storage_sizeParam(storage_techs,vintage,commodity,"size")
5052      * sum(degradation_states,
5053              (storage_degradationParam(storage_techs,vintage,degradation_states,"remainingCapacity")
5054                - (yearsSel.val - yearsCom.val) * storage_techParam(storage_techs,vintage,"annualDegradation"))
5055                * storage_unitsStateTracker(nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,degradation_states));
5056   
5057  * // ### Storage Cycle Distribution to Degradation States per Commissioning Year (degradation)
5058  * // The charging amounts are converted to equivalent full cycles which then must be represented by an adequate distribution of degradation states.
5059  * // {Eq_storage_chargeBasedDegradationDistribution}
5060  alias(years, prev_years);
5061  Eq_storage_chargeBasedDegradationDistribution(nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,commodity)
5062      $(storage_usedTechCom(nodesModelSel,yearsSel,storage_techs,vintage,commodity)
5063        and storage_techParam(storage_techs,vintage,"usageDegradation"))
5064      ..
5065      sum(prev_years$(prev_years.val <= yearsSel.val), representedYears(prev_years)
5066          * sum(timeModel, storage_chargePerAge(timeModel,nodesModelSel,prev_years,yearsCom,storage_techs,vintage,commodity)))
5067      =l=
5068      storage_sizeParam(storage_techs,vintage,commodity,"size")
5069      * sum(dc_states$storage_usedDegradation(storage_techs,vintage,dc_states),
5070          storage_degradationParam(storage_techs,vintage,dc_states,"maxFullCycles")
5071          * (storage_unitsStateTracker(nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,dc_states)
5072             + sum(prev_years$(prev_years.val <= yearsSel.val), storage_unitsStateTrackerDecom(nodesModelSel,prev_years,yearsCom,storage_techs,vintage,dc_states))));
5073   
5074  * // ### Storage Charging per Commissioning Year (degradation)
5075  * // Increases in storage levels are accounted as charging amounts.
5076  * // {Eq_storage_chargingPerAge}
5077  Eq_storage_chargingPerAge(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,commodity)
5078      $(storage_usedTechCom(nodesModelSel,yearsSel,storage_techs,vintage,commodity)
5079        and storage_techParam(storage_techs,vintage,"usageDegradation"))
5080      ..
5081      storage_chargePerAge(timeModelSel,nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,commodity)
5082      =g=
5083      storage_levelPerAge(timeModelToCalc,nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,commodity)
5084      - storage_levelPerAge(timeModelToCalc--1,nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,commodity);
5085   
5086  * // ### Storage Unit Decommissioning States Sum (degradation)
5087  * // The number of decommissioned units in all degradation state must match the total decommissioning unit number.
5088  * // {Eq_storage_unitsDecomStateSum}
5089  Eq_storage_unitsDecomStateSum(nodesModelSel,yearsSel,storage_techs,vintage)
5090      $(storage_techParam(storage_techs,vintage,"usageDegradation"))
5091      ..
5092      storage_unitsDecom(nodesModelSel,yearsSel,storage_techs,vintage)
5093      =e=
5094      sum((yearsCom,degradation_states)$storage_usedDegradation(storage_techs,vintage,degradation_states),
5095          storage_unitsStateTrackerDecom(nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,degradation_states));
5096   
5097  * // ### Storage Unit Sequential Degradation (degradation)
5098  * // Only active degradation ranges, i.e., two neighboring degradation states, can be used.
5099  * // {Eq_storage_unitsDegradation}
5100  alias(degradation_states, degradation_states_a, degradation_states_b);
5101  Eq_storage_unitsDegradation(nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,degradation_states)
5102      $(storage_techParam(storage_techs,vintage,"usageDegradation")
5103        and storage_techParam(storage_techs,vintage,"sequentialDegradationStates"))
5104      ..
5105      sum(degradation_states_a$((storage_degradationParam(storage_techs,vintage,degradation_states_a,"maxFullCycles") = storage_degradationParam(storage_techs,vintage,degradation_states,"maxFullCycles")
5106                        or storage_degradationParam(storage_techs,vintage,degradation_states_a,"maxFullCycles")
5107                                         = smax(degradation_states_b$(storage_degradationParam(storage_techs,vintage,degradation_states_b,"maxFullCycles") < storage_degradationParam(storage_techs,vintage,degradation_states,"maxFullCycles")
5108                                                              and storage_usedDegradation(storage_techs,vintage,degradation_states_b)),
5109                                                              storage_degradationParam(storage_techs,vintage,degradation_states_b,"maxFullCycles")))
5110                        and storage_usedDegradation(storage_techs,vintage,degradation_states_a)),
5111          storage_unitsStateTracker_activeRange(nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,degradation_states_a))
5112      * storage_bigM(storage_techs,vintage)
5113      =g=
5114      storage_unitsStateTracker(nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,degradation_states);
5115   
5116  * // ### Storage Unit Sequential Degradation Range (degradation)
5117  * // Only one degradation range can be active.
5118  * // {Eq_storage_unitsDegradation_onlyOneRange}
5119  Eq_storage_unitsDegradation_onlyOneRange(nodesModelSel,yearsSel,yearsCom,storage_techs,vintage)
5120      $(storage_techParam(storage_techs,vintage,"usageDegradation") and storage_techParam(storage_techs,vintage,"sequentialDegradationStates"))
5121      ..
5122      sum(degradation_states$storage_usedDegradation(storage_techs,vintage,degradation_states),
5123            storage_unitsStateTracker_activeRange(nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,degradation_states))
5124      =e= 1;
5125   
5126  * // ### Storage Unit Sequential State of Charge (SoC)
5127  * // Only active state of charge ranges, i.e., two neighboring states of charge, can be used.
5128  * // {Eq_storage_unitsSoC}
5129  alias(soc_states, soc_states_a, soc_states_b);
5130  Eq_storage_unitsSoC(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,storage_techs,vintage,soc_states)
5131      $(storage_validSoCRange(storage_techs,vintage) and storage_techParam(storage_techs,vintage,"sequentialSoC"))
5132      ..
5133      sum(soc_states_a$((storage_SoCParam(storage_techs,vintage,soc_states_a,"SoC") = storage_SoCParam(storage_techs,vintage,soc_states,"SoC")
5134                        or storage_SoCParam(storage_techs,vintage,soc_states_a,"SoC")
5135                                         = smax(soc_states_b$(storage_SoCParam(storage_techs,vintage,soc_states_b,"SoC") < storage_SoCParam(storage_techs,vintage,soc_states,"SoC")
5136                                                              and storage_usedTechSoCState(storage_techs,vintage,soc_states_b)),
5137                                                              storage_SoCParam(storage_techs,vintage,soc_states_b,"SoC")))
5138                        and storage_usedTechSoCState(storage_techs,vintage,soc_states_a)),
5139          storage_unitsSoC_activeRange(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,soc_states_a))
5140      * storage_bigM(storage_techs,vintage)
5141      =g=
5142      storage_unitsSoC(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,soc_states);
5143   
5144  * // ### Storage Unit Sequential State of Charge Range (SoC)
5145  * // Only one state of charge range can be active.
5146  * // {Eq_storage_unitsSoC_onlyOneRange}
5147  Eq_storage_unitsSoC_onlyOneRange(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,storage_techs,vintage)
5148      $(storage_validSoCRange(storage_techs,vintage) and storage_techParam(storage_techs,vintage,"sequentialSoC"))
5149      ..
5150      sum(soc_states$storage_usedTechSoCState(storage_techs,vintage,soc_states),
5151            storage_unitsSoC_activeRange(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,soc_states)) =e= 1;
5152   
5153  * // ### Storage Unit State of Charge Sum (SoC)
5154  * // Each storage unit must have one state of charge.
5155  * // {Eq_storage_unitsSoC_sum}
5156  Eq_storage_unitsSoC_sum(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,storage_techs,vintage)
5157      $storage_validSoCRange(storage_techs,vintage)
5158      ..
5159      storage_unitsTotal(nodesModelSel,yearsSel,storage_techs,vintage)
5160      =e=
5161      sum(soc_states$storage_usedTechSoCState(storage_techs,vintage,soc_states),
5162            storage_unitsSoC(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,soc_states));
5163   
5164  * // ### Storage Level State of Charge Sum (SoC)
5165  * // The total storage level must be represented by units in their specific states of charge.
5166  * // {Eq_storage_levelSoC}
5167  Eq_storage_levelSoC(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,storage_techs,vintage,commodity)
5168      $(storage_validSoCRange(storage_techs,vintage) and storage_usedTechCom(nodesModelSel,yearsSel,storage_techs,vintage,commodity))
5169      ..
5170      storage_level(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
5171      =e=
5172      storage_sizeParam(storage_techs,vintage,commodity,"size")
5173      * sum(soc_states$storage_usedTechSoCState(storage_techs,vintage,soc_states),
5174              storage_unitsSoC(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,soc_states)
5175              * storage_SoCParam(storage_techs,vintage,soc_states,"SoC"));
5176   
5177  * // ### C-Rate Limit (SoC)
5178  * // The increase in storage level per time step, i.e., the charging rate, is limited relative to the storage capacity. The coefficients can vary between states of charge.
5179  * // {Eq_storage_cRateLimit_SoC}
5180  Eq_storage_cRateLimit_SoC(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,storage_techs,vintage,commodity)
5181      $(storage_usedTechCom(nodesModelSel,yearsSel,storage_techs,vintage,commodity)
5182        and storage_validSoCRange(storage_techs,vintage)
5183        and sum(soc_states, storage_SoCParam(storage_techs,vintage,soc_states,"cRate")) < inf)
5184      ..
5185      storage_level(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
5186      - storage_level(timeModelToCalc--1,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
5187      =l=
5188      storage_sizeParam(storage_techs,vintage,commodity,"size")
5189      * sum(soc_states$storage_usedTechSoCState(storage_techs,vintage,soc_states),
5190                      storage_SoCParam(storage_techs,vintage,soc_states,"cRate")
5191                      * storage_unitsSoC(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,soc_states));
5192   
5193  * // ### E-Rate Limit (SoC)
5194  * // The decrease in storage level per time step, i.e., the discharging rate, is limited relative to the storage capacity. The coefficients can vary between states of charge.
5195  * // {Eq_storage_cRateLimit_SoC}
5196  Eq_storage_eRateLimit_SoC(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,storage_techs,vintage,commodity)
5197      $(storage_usedTechCom(nodesModelSel,yearsSel,storage_techs,vintage,commodity)
5198        and storage_validSoCRange(storage_techs,vintage)
5199        and sum(soc_states, storage_SoCParam(storage_techs,vintage,soc_states,"eRate")) < inf)
5200      ..
5201      storage_level(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
5202      - storage_level(timeModelToCalc--1,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
5203      =g=
5204      - storage_sizeParam(storage_techs,vintage,commodity,"size")
5205      * sum(soc_states$storage_usedTechSoCState(storage_techs,vintage,soc_states),
5206                      storage_SoCParam(storage_techs,vintage,soc_states,"eRate")
5207                      * storage_unitsSoC(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,soc_states));
5208   
5209   
5210  * ==== model definition ====
5211   
5212  Model M_storage
5213  /
5214    Eq_storage_unitsBalance
5215    Eq_storage_unitsFixedDecom
5216    Eq_storage_unitsFreeDecom
5217    Eq_storage_unitsLowerLimit
5218    Eq_storage_unitsUpperLimit
5219    Eq_storage_levelUpperLimit_degradation
5220    Eq_storage_unitsTotalMIP
5221    Eq_storage_levelLowerLimit
5222    Eq_storage_levelUpperLimit
5224    Eq_storage_losses
5226    Eq_storage_unitsBalanceStates
5227    Eq_storage_unitsUpperLimitPerState
5228    Eq_storage_unitsStatesNoRecovery
5229    Eq_storage_cRateLimit
5230    Eq_storage_eRateLimit
5231    Eq_storage_charge
5232    Eq_storage_discharge
5233    Eq_storage_levelStateSum
5234    Eq_storage_levelUpperLimitPerAge
5235    Eq_storage_chargeBasedDegradationDistribution
5236    Eq_storage_chargingPerAge
5237    Eq_storage_unitsDecomStateSum
5238    Eq_storage_unitsDegradation
5239    Eq_storage_unitsDegradation_onlyOneRange
5240   
5241    Eq_storage_unitsSoC
5242    Eq_storage_unitsSoC_sum
5243    Eq_storage_unitsSoC_onlyOneRange
5244    Eq_storage_levelSoC
5245    Eq_storage_cRateLimit_SoC
5246    Eq_storage_eRateLimit_SoC
5247  /;
INCLUDE    C:\Local\REMix\framework\remix\framework\model\source\core\transfer.gms
5249  * SPDX-FileCopyrightText: Copyright (c) 2023 German Aerospace Center (DLR)
5250  * SPDX-License-Identifier: BSD-3-Clause
5251   
5252  * // # core_transfer
5253  * // The equations in this file describe the commodity transfer in the model.
5254   
5255  * // ## Variables
5256  * // {special_table_transfer_variables}
5259   
5264   
5507   
5508  parameter transfer_linksParam(linksModel,years,transfer_techs,pc_transfer_linksParam);
5509  transfer_linksParam(linksModelToCalc,years,transfer_techs,pc_transfer_linksParam)
5510      = sum(linksData$links_aggregate(linksModelToCalc,linksData), transfer_linksParamIn(linksData,years,transfer_techs,pc_transfer_linksParam));
5511   
5512  * // ## Load links from gdx file
5514   
5515   
5516  set transfer_hasflowProfileIn(linksData,years,transfer_techs,pc_transfer_flowProfile);
5517  option transfer_hasflowProfileIn < transfer_flowProfileIn;
5518   
5519  * === modify transfer_flowProfileIn vector to fill with default values, in case profile is not specified ===
5520  transfer_linksParamIn(linksData,years,transfer_techs,"flowAlongLimit")
5521      $(not transfer_linksParamIn(linksData,years,transfer_techs,"limitFlows"))
5522      = 1;
5523   
5524  transfer_linksParamIn(linksData,years,transfer_techs,"flowAgainstLimit")
5525      $(not transfer_linksParamIn(linksData,years,transfer_techs,"limitFlows"))
5526      = 1;
5527   
5528  transfer_flowProfileIn(timeData,linksData,years,transfer_techs,"along")
5529      $(not transfer_hasflowProfileIn(linksData,years,transfer_techs,"along"))
5530      = transfer_linksParamIn(linksData,years,transfer_techs,"flowAlongLimit");
5531   
5532  transfer_flowProfileIn(timeData,linksData,years,transfer_techs,"against")
5533      $(not transfer_hasflowProfileIn(linksData,years,transfer_techs,"against"))
5534      = transfer_linksParamIn(linksData,years,transfer_techs,"flowAgainstLimit");
5535   
5536  * aggregate time dimension
5537  parameter transfer_flowProfileIn_aggTime(timeModel,linksData,yearsToCalc,transfer_techs,pc_transfer_flowProfile);
5538  transfer_flowProfileIn_aggTime(timeModelToCalc,linksData,yearsToCalc,transfer_techs,pc_transfer_flowProfile)
5539    = sum(timeData$timeMapping(timeData,timeModelToCalc),
5540            transfer_flowProfileIn(timeData,linksData,yearsToCalc,transfer_techs,pc_transfer_flowProfile)
5541            / timeLength(timeModelToCalc));
5542  option clear = transfer_flowProfileIn;
5543   
5544   
5545  set transfer_finiteLinkLimit(linksModel,years,transfer_techs);
5546  transfer_finiteLinkLimit(linksModelToCalc,yearsToCalc,transfer_techs)
5547      = sum(linksData$links_aggregate(linksModelToCalc,linksData), transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"linksUpperLimit")) > 0
5548          and sum(linksData$links_aggregate(linksModelToCalc,linksData), transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"linksUpperLimit")) < inf;
5549   
5550  set transfer_infiniteLinkLimit(linksModel,years,transfer_techs);
5551  transfer_infiniteLinkLimit(linksModelToCalc,yearsToCalc,transfer_techs)
5552      = sum(linksData$links_aggregate(linksModelToCalc,linksData), transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"linksUpperLimit")) = inf;
5554   
5555  parameter transfer_lengthParam(linksModel,link_types,pc_transfer_lengthParam);
5556  transfer_lengthParam(linksModelToCalc,link_types,pc_transfer_lengthParam)
5557      = sum(linksData$links_aggregate(linksModelToCalc,linksData), transfer_lengthParamIn(linksData,link_types,pc_transfer_lengthParam))
5558          / sum(linksData$links_aggregate(linksModelToCalc,linksData), 1);
5559   
5560  parameter transfer_gridSegments(linksModel,transfer_techs,gridSegments,pc_transfer_gridSegments);
5561  transfer_gridSegments(linksModelToCalc,transfer_techs,gridSegments,pc_transfer_gridSegments)
5562      = smax(linksData$links_aggregate(linksModelToCalc,linksData), transfer_gridSegmentsIn(linksData,transfer_techs,gridSegments,pc_transfer_gridSegments));
5563   
5564  parameter transfer_dcopf_Xtech(linksModel,years,transfer_techs,vintage,gridSegments);
5565  transfer_dcopf_Xtech(linksModelToCalc,yearsToCalc,transfer_techs,vintage,gridSegments)
5566      $(transfer_gridSegments(linksModelToCalc,transfer_techs,gridSegments,"useDCopf")
5567          and transfer_linksParam(linksModelToCalc,yearsToCalc,transfer_techs,"circuits") > 0
5568          and sum(link_types, transfer_reactPerLength(transfer_techs,vintage,link_types,"reactPerLength")) > 0 )
5569      = (1 / sum(linksData
5570                  $links_aggregate(linksModelToCalc,linksData),
5571              1 / ( sum(link_types,
5572                          transfer_lengthParamIn(linksData,link_types,"length")
5573                          * transfer_reactPerLength(transfer_techs,vintage,link_types,"reactPerLength"))
5574                      / transfer_linksParam(linksModelToCalc,yearsToCalc,transfer_techs,"circuits"))));
5575   
5576  set transfer_hasflowProfile(linksModel,years,transfer_techs,pc_transfer_flowProfile);
5577  transfer_hasflowProfile(linksModelToCalc,yearsToCalc,transfer_techs,pc_transfer_flowProfile)
5578      = sum(linksData$links_aggregate(linksModelToCalc,linksData),
5579              transfer_hasflowProfileIn(linksData,yearsToCalc,transfer_techs,pc_transfer_flowProfile));
5580   
5581  * ==== parameter modifications ====
5582  transfer_linksParam(linksModelToCalc,yearsToCalc,transfer_techs,"linksLowerLimit")
5583      $sum(vintage, transfer_techParam(transfer_techs,vintage,"mipLinks"))
5584      = floor(transfer_linksParam(linksModelToCalc,yearsToCalc,transfer_techs,"linksLowerLimit"));
5585  transfer_linksParam(linksModelToCalc,yearsToCalc,transfer_techs,"linksUpperLimit")
5586      $sum(vintage, transfer_techParam(transfer_techs,vintage,"mipLinks"))
5587      = ceil(transfer_linksParam(linksModelToCalc,yearsToCalc,transfer_techs,"linksUpperLimit"));
5588   
5589   
5590  * ==== calculation of mappings ====
5591   
5592  * Technologies with a lifeTime > 0 are available
5593  set transfer_availTech(linksModel,years,transfer_techs,vintage);
5594  transfer_availTech(linksModel,years,transfer_techs,vintage)
5595      $(vintage.val = smax(vintage_a$(vintage_a.val <= years.val
5596          and transfer_techParam(transfer_techs,vintage_a,"lifeTime") > 0), vintage_a.val)) = yes;
5597   
5598  * Technologies to optimize become unavailable if they have an linksUpperLimit of 0
5599  transfer_availTech(linksModelToCalc,years,transfer_techs,vintage)
5600      $(yearsToCalc(years) and transfer_linksParam(linksModelToCalc,years,transfer_techs,"linksUpperLimit") = 0 ) = no;
5601   
5602  * Technologies already built become unavailable if they have an linksBuild of 0
5603  transfer_availTech(linksModelToCalc,years,transfer_techs,vintage)
5604      $( ( not yearsToCalc(years)) and transfer_linksParam(linksModelToCalc,years,transfer_techs,"linksBuild") = 0 ) = no;
5605   
5606  * Used technologies are available technologies over their technical lifeTime
5607  set transfer_usedTech(linksModel,years,transfer_techs,vintage);
5608  transfer_usedTech(linksModelToCalc,years,transfer_techs,vintage)
5609      $(vintage.val <= years.val
5610          and years.val < smax(years_a$transfer_availTech(linksModelToCalc,years_a,transfer_techs,vintage),
5611                                  years_a.val + transfer_techParam(transfer_techs,vintage,"lifeTime"))
5612          ) = yes;
5613   
5614  * Technologies have to be decomissioned in the interval of first avail + lifetime to last avail + lifetime
5615  set transfer_decomTech(linksModel,years,transfer_techs,vintage);
5616  transfer_decomTech(linksModel,years,transfer_techs,vintage)
5617    $(sum(years_a$transfer_usedTech(linksModel,years_a,transfer_techs,vintage), 1)
5618      and sum(yearsToCalc
5619        $(sameas(years, yearsToCalc)
5620          and yearsToCalc.val >= smin(years_a$transfer_availTech(linksModel,years_a,transfer_techs,vintage), years_a.val) + transfer_techParam(transfer_techs,vintage,"lifeTime")
5621          and yearsToCalc.val <= smax(years_a$transfer_availTech(linksModel,years_a,transfer_techs,vintage), years_a.val) + transfer_techParam(transfer_techs,vintage,"lifeTime")), 1))
5622    = yes;
5623   
5624  * Extend the decom frame to the year after the last year of usedTech
5625  transfer_decomTech(linksModel,yearsToCalc,transfer_techs,vintage)
5626    $(transfer_usedTech(linksModel,yearsToCalc-1,transfer_techs,vintage)
5627      and transfer_decomTech(linksModel,yearsToCalc-1,transfer_techs,vintage))
5628    = yes;
5629   
5630  parameter transfer_flowProfile(timeModel,linksModel,years,transfer_techs,vintage,pc_transfer_flowProfile);
5631   
5632  transfer_flowProfile(timeModelToCalc,linksModelToCalc,yearsToCalc,transfer_techs,vintage,"along")
5633      $transfer_finiteLinkLimit(linksModelToCalc,yearsToCalc,transfer_techs)
5634      = (sum(linksData$(links_aggregate(linksModelToCalc,linksData)
5635                       and transfer_incidenceData_flip(linksData) = 1),
5636              transfer_flowProfileIn_aggTime(timeModelToCalc,linksData,yearsToCalc,transfer_techs,"along")
5637              * transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"linksUpperLimit"))
5638          + sum(linksData$(links_aggregate(linksModelToCalc,linksData)
5639                          and transfer_incidenceData_flip(linksData) = -1),
5640              transfer_flowProfileIn_aggTime(timeModelToCalc,linksData,yearsToCalc,transfer_techs,"against")
5641              * transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"linksUpperLimit")))
5642      / sum(linksData$links_aggregate(linksModelToCalc,linksData),
5643              transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"linksUpperLimit"));
5644   
5645  transfer_flowProfile(timeModelToCalc,linksModelToCalc,yearsToCalc,transfer_techs,vintage,"against")
5646      $transfer_finiteLinkLimit(linksModelToCalc,yearsToCalc,transfer_techs)
5647      = (sum(linksData$(links_aggregate(linksModelToCalc,linksData)
5648                       and transfer_incidenceData_flip(linksData) = 1),
5649              transfer_flowProfileIn_aggTime(timeModelToCalc,linksData,yearsToCalc,transfer_techs,"against")
5650              * transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"linksUpperLimit"))
5651          + sum(linksData$(links_aggregate(linksModelToCalc,linksData)
5652                          and transfer_incidenceData_flip(linksData) = -1),
5653              transfer_flowProfileIn_aggTime(timeModelToCalc,linksData,yearsToCalc,transfer_techs,"along")
5654              * transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"linksUpperLimit")))
5655      / sum(linksData$links_aggregate(linksModelToCalc,linksData),
5656              transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"linksUpperLimit"));
5657   
5658  transfer_flowProfile(timeModelToCalc,linksModelToCalc,yearsToCalc,transfer_techs,vintage,"along")
5659      $transfer_infiniteLinkLimit(linksModelToCalc,yearsToCalc,transfer_techs)
5660      = (sum(linksData$(links_aggregate(linksModelToCalc,linksData)
5661                       and transfer_incidenceData_flip(linksData) = 1
5662                       and transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"linksUpperLimit") = inf ),
5663              transfer_flowProfileIn_aggTime(timeModelToCalc,linksData,yearsToCalc,transfer_techs,"along"))
5664          + sum(linksData$(links_aggregate(linksModelToCalc,linksData)
5665                          and transfer_incidenceData_flip(linksData) = -1
5666                          and transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"linksUpperLimit") = inf ),
5667              transfer_flowProfileIn_aggTime(timeModelToCalc,linksData,yearsToCalc,transfer_techs,"against")))
5668      / sum(linksData$(links_aggregate(linksModelToCalc,linksData)
5669                      and transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"linksUpperLimit") = inf ),
5670              1);
5671   
5672  transfer_flowProfile(timeModelToCalc,linksModelToCalc,yearsToCalc,transfer_techs,vintage,"against")
5673      $transfer_infiniteLinkLimit(linksModelToCalc,yearsToCalc,transfer_techs)
5674      = (sum(linksData$(links_aggregate(linksModelToCalc,linksData)
5675                       and transfer_incidenceData_flip(linksData) = 1
5676                       and transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"linksUpperLimit") = inf ),
5677              transfer_flowProfileIn_aggTime(timeModelToCalc,linksData,yearsToCalc,transfer_techs,"against"))
5678          + sum(linksData$(links_aggregate(linksModelToCalc,linksData)
5679                          and transfer_incidenceData_flip(linksData) = -1
5680                          and transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"linksUpperLimit") = inf ),
5681              transfer_flowProfileIn_aggTime(timeModelToCalc,linksData,yearsToCalc,transfer_techs,"along")))
5682      / sum(linksData$(links_aggregate(linksModelToCalc,linksData)
5683                      and transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"linksUpperLimit") = inf ),
5684              1);
5685  option clear = transfer_flowProfileIn_aggTime;
5686   
5687  * Orientation of links affects the flowAlongLimit/flowAgainstLimit
5688   
5689  transfer_linksParam(linksModelToCalc,years,transfer_techs,"flowAlongLimit")
5690      $transfer_finiteLinkLimit(linksModelToCalc,years,transfer_techs)
5691      = (sum(linksData$(links_aggregate(linksModelToCalc,linksData)
5692                       and transfer_incidenceData_flip(linksData) = 1),
5693              transfer_linksParamIn(linksData,years,transfer_techs,"flowAlongLimit")
5694              * transfer_linksParamIn(linksData,years,transfer_techs,"linksUpperLimit"))
5695          + sum(linksData$(links_aggregate(linksModelToCalc,linksData)
5696                          and transfer_incidenceData_flip(linksData) = -1),
5697              transfer_linksParamIn(linksData,years,transfer_techs,"flowAgainstLimit")
5698              * transfer_linksParamIn(linksData,years,transfer_techs,"linksUpperLimit")))
5699      / sum(linksData$links_aggregate(linksModelToCalc,linksData),
5700              transfer_linksParamIn(linksData,years,transfer_techs,"linksUpperLimit"));
5701   
5702  transfer_linksParam(linksModelToCalc,years,transfer_techs,"flowAgainstLimit")
5703      $transfer_finiteLinkLimit(linksModelToCalc,years,transfer_techs)
5704      = (sum(linksData$(links_aggregate(linksModelToCalc,linksData)
5705                       and transfer_incidenceData_flip(linksData) = -1),
5706              transfer_linksParamIn(linksData,years,transfer_techs,"flowAlongLimit")
5707              * transfer_linksParamIn(linksData,years,transfer_techs,"linksUpperLimit"))
5708          + sum(linksData$(links_aggregate(linksModelToCalc,linksData)
5709                          and transfer_incidenceData_flip(linksData) = 1),
5710              transfer_linksParamIn(linksData,years,transfer_techs,"flowAgainstLimit")
5711              * transfer_linksParamIn(linksData,years,transfer_techs,"linksUpperLimit")))
5712      / sum(linksData$links_aggregate(linksModelToCalc,linksData),
5713              transfer_linksParamIn(linksData,years,transfer_techs,"linksUpperLimit"));
5714   
5715  transfer_linksParam(linksModelToCalc,years,transfer_techs,"flowAlongLimit")
5716      $transfer_infiniteLinkLimit(linksModelToCalc,years,transfer_techs)
5717      = (sum(linksData$(links_aggregate(linksModelToCalc,linksData)
5718                       and transfer_incidenceData_flip(linksData) = 1
5719                       and transfer_linksParamIn(linksData,years,transfer_techs,"linksUpperLimit") = inf),
5720              transfer_linksParamIn(linksData,years,transfer_techs,"flowAlongLimit"))
5721          + sum(linksData$(links_aggregate(linksModelToCalc,linksData)
5722                          and transfer_incidenceData_flip(linksData) = -1
5723                          and transfer_linksParamIn(linksData,years,transfer_techs,"linksUpperLimit") = inf),
5724              transfer_linksParamIn(linksData,years,transfer_techs,"flowAgainstLimit")))
5725      / sum(linksData$(links_aggregate(linksModelToCalc,linksData)
5726                      and transfer_linksParamIn(linksData,years,transfer_techs,"linksUpperLimit") = inf ),
5727              1);
5728   
5729  transfer_linksParam(linksModelToCalc,years,transfer_techs,"flowAgainstLimit")
5730      $transfer_infiniteLinkLimit(linksModelToCalc,years,transfer_techs)
5731      = (sum(linksData$(links_aggregate(linksModelToCalc,linksData)
5732                       and transfer_incidenceData_flip(linksData) = -1
5733                       and transfer_linksParamIn(linksData,years,transfer_techs,"linksUpperLimit") = inf),
5734              transfer_linksParamIn(linksData,years,transfer_techs,"flowAlongLimit"))
5735          + sum(linksData$(links_aggregate(linksModelToCalc,linksData)
5736                          and transfer_incidenceData_flip(linksData) = 1
5737                          and transfer_linksParamIn(linksData,years,transfer_techs,"linksUpperLimit") = inf),
5738              transfer_linksParamIn(linksData,years,transfer_techs,"flowAgainstLimit")))
5739      / sum(linksData$(links_aggregate(linksModelToCalc,linksData)
5740                      and transfer_linksParamIn(linksData,years,transfer_techs,"linksUpperLimit") = inf ),
5741              1);
5742   
5743  * Mapping for grid segments using DC optimal power flow
5744  set gridSegments_dcopf(linksModel,transfer_techs,gridSegments);
5745  gridSegments_dcopf(linksModelToCalc,transfer_techs,gridSegments)
5746      $transfer_gridSegments(linksModelToCalc,transfer_techs,gridSegments,"useDCopf")
5748      = yes;
5750   
5751  * Ensure each grid segment uses exactly one commodity
5752  parameter checkGridSegmentCommodities(gridSegments);
5753  checkGridSegmentCommodities(gridSegments)
5754      = sum (commodity$(sum((linksModelToCalc,transfer_techs,vintage)
5755                              $( transfer_coefficient(transfer_techs,vintage,commodity,"coefficient") > 0
5756                                  and gridSegments_dcopf(linksModelToCalc,transfer_techs,gridSegments)) , 1) > 0), 1);
5757   
5758  parameter transfer_incidenceSegments(nodesModel,linksModel,years,gridSegments);
5759  transfer_incidenceSegments(nodesModelToCalc,linksModelToCalc,yearsToCalc,gridSegments)
5760      $(sum((transfer_techs,vintage)$(transfer_usedTech(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
5761                                          and gridSegments_dcopf(linksModelToCalc,transfer_techs,gridSegments)
5762                                          and transfer_incidenceModel(nodesModelToCalc,linksModelToCalc) <> 0), 1) > 0)
5763      = transfer_incidenceModel(nodesModelToCalc,linksModelToCalc);
5764   
5765   
5769   
5770  scalar transfer_enableMIP;
5771  transfer_enableMIP = sum(transfer_usedTech(linksModelToCalc,yearsToCalc,transfer_techs,vintage)$transfer_techParam(transfer_techs,vintage,"mipLinks"), 1 );
5772   
5773   
5774  * ==== definition of variables ====
5775   
5776  * Initialise variables for linksBuild
5777  transfer_linksBuild.l(linksModel,years,transfer_techs,vintage)
5778      $transfer_availTech(linksModel,years,transfer_techs,vintage)
5779      = transfer_linksParam(linksModel,years,transfer_techs,"linksBuild");
5780  transfer_linksBuild.lo(linksModel,yearsToCalc,transfer_techs,vintage)
5781      $transfer_availTech(linksModel,yearsToCalc,transfer_techs,vintage)
5782      = transfer_linksBuild.l(linksModel,yearsToCalc,transfer_techs,vintage);
5783  transfer_linksBuild.fx(linksModel,years,transfer_techs,vintage)
5784      $transfer_linksParam(linksModel,years,transfer_techs,"noExpansion")
5785      = transfer_linksBuild.l(linksModel,years,transfer_techs,vintage);
5786   
5787  * Initialise variables for linksDecom
5788  transfer_linksDecom.l(linksModel,years,transfer_techs,vintage)
5789      $(transfer_decomTech(linksModel,years,transfer_techs,vintage)
5790        and years.val < sum(yearsToCalc$(ord(yearsToCalc) = 1), yearsToCalc.val))
5791      = sum((years_a,years_aa)$(sameas(years-1, years_aa)
5792                        and years_a.val > years_aa.val - transfer_techParam(transfer_techs,vintage,'lifeTime')
5793                        and years_a.val <= years.val - transfer_techParam(transfer_techs,vintage,'lifeTime')
5794                        and transfer_availTech(linksModel,years_a,transfer_techs,vintage)),
5795          transfer_linksBuild.l(linksModel,years_a,transfer_techs,vintage));
5796   
5797  transfer_linksDecom.l(linksModel,yearsToCalc,transfer_techs,vintage)
5798    $transfer_decomTech(linksModel,yearsToCalc,transfer_techs,vintage)
5799    = sum(years$
5800          (years.val < sum(yearsToCalc_a$(ord(yearsToCalc_a) = 1), yearsToCalc_a.val)
5801            and transfer_availTech(linksModel,years,transfer_techs,vintage)
5802            and years.val > sum(years_a$sameas(years_a, yearsToCalc-1), years_a.val) - transfer_techParam(transfer_techs,vintage,'lifeTime')
5803            and years.val <= yearsToCalc.val - transfer_techParam(transfer_techs,vintage,'lifeTime')),
5804        transfer_linksBuild.l(linksModel,years,transfer_techs,vintage))
5805      + sum(yearsToCalc_a$
5806          (yearsToCalc_a.val < sum(yearsToCalc_aa$(ord(yearsToCalc_aa) > 1), yearsToCalc_a.val)
5807            and transfer_availTech(linksModel,yearsToCalc_a,transfer_techs,vintage)
5808            and yearsToCalc_a.val > sum(years_a$sameas(years_a, yearsToCalc-1), years_a.val) - transfer_techParam(transfer_techs,vintage,'lifeTime')
5809            and yearsToCalc_a.val <= yearsToCalc.val - transfer_techParam(transfer_techs,vintage,'lifeTime')),
5810        transfer_linksBuild.l(linksModel,yearsToCalc_a,transfer_techs,vintage));
5811        ;
5812   
5813  transfer_linksDecom.lo(linksModel,yearsToCalc,transfer_techs,vintage)
5814      $(transfer_usedTech(linksModel,yearsToCalc,transfer_techs,vintage)
5815          and not transfer_techParam(transfer_techs,vintage,"freeDecom"))
5816      = transfer_linksDecom.l(linksModel,yearsToCalc,transfer_techs,vintage)
5817   
5818  * Calculate planned transfer links expansion
5819  parameter transfer_linksPlanned(linksModel,years,transfer_techs,vintage);
5820  transfer_linksPlanned(linksModel,years,transfer_techs,vintage) = 0;
5821  loop(years,
5822    transfer_linksPlanned(linksModel,years,transfer_techs,vintage)
5823      =
5824      transfer_linksPlanned(linksModel,years-1,transfer_techs,vintage)
5825          $transfer_usedTech(linksModel,years-1,transfer_techs,vintage)
5826      + transfer_linksBuild.l(linksModel,years,transfer_techs,vintage)
5827          $transfer_availTech(linksModel,years,transfer_techs,vintage)
5828      - transfer_linksDecom.l(linksModel,years,transfer_techs,vintage)
5829          $transfer_usedTech(linksModel,years,transfer_techs,vintage);
5830  );
5831   
5832  * Set initial state for planned units
5833  transfer_linksTotal.l(linksModel,years,transfer_techs,vintage)
5834    = transfer_linksPlanned(linksModel,years,transfer_techs,vintage)
5835   
5836  * Calculate if planned links expansion is bound by upper and lower limits
5837  set transfer_linkBoundsFixed(linksModel,years,transfer_techs);
5838  transfer_linkBoundsFixed(linksModel,years,transfer_techs)
5839    $(sum(vintage$transfer_usedTech(linksModel,years,transfer_techs,vintage),
5840          transfer_linksPlanned(linksModel,years,transfer_techs,vintage))
5841      = transfer_linksParam(linksModel,years,transfer_techs,"linksUpperLimit")
5842    and sum(vintage$transfer_usedTech(linksModel,years,transfer_techs,vintage),
5843          transfer_linksPlanned(linksModel,years,transfer_techs,vintage))
5844      = transfer_linksParam(linksModel,years,transfer_techs,"linksLowerLimit"))
5845    = yes;
5846   
5847  * Fix linksBuild, linksDecom, linksTotal if levels are predetermined by upper and lower limits
5848  transfer_linksBuild.fx(linksModel,years,transfer_techs,vintage)
5849    $(transfer_availTech(linksModel,years,transfer_techs,vintage)
5850      and transfer_linkBoundsFixed(linksModel,years,transfer_techs))
5851    = transfer_linksBuild.l(linksModel,years,transfer_techs,vintage);
5852  transfer_linksDecom.fx(linksModel,years,transfer_techs,vintage)
5853    $(transfer_usedTech(linksModel,years,transfer_techs,vintage)
5854      and transfer_linkBoundsFixed(linksModel,years,transfer_techs))
5855    = transfer_linksDecom.l(linksModel,years,transfer_techs,vintage);
5856  transfer_linksTotal.fx(linksModel,years,transfer_techs,vintage)
5857    $(transfer_usedTech(linksModel,years,transfer_techs,vintage)
5858      and transfer_linkBoundsFixed(linksModel,years,transfer_techs))
5859    = transfer_linksTotal.l(linksModel,years,transfer_techs,vintage);
5860   
5861  transfer_linksTotal_MIP.up(linksModel,years,transfer_techs,vintage)
5862      $(transfer_usedTech(linksModel,years,transfer_techs,vintage)
5863        and transfer_techParam(transfer_techs,vintage,"miplinks") = 1)
5864      = transfer_linksParam(linksModel,years,transfer_techs,"linksUpperLimit");
5865   
5866  * Add parameter for fixing capacities during myopic runs
5867  parameter transfer_linksDelta(linksModel,years,transfer_techs);
5868   
5869   
5870  * ==== declaration of equations ====
5871   
5872  equations
5873    Eq_transfer_linksBalance(linksModel,years,transfer_techs,vintage
5874      ) "Ensures the links balance over the planning period."
5875    Eq_transfer_linksFixedDecom(linksModel,years,transfer_techs,vintage
5876      ) "Restricts the fixed decommissioning of links over the planning period."
5877    Eq_transfer_linksFreeDecom(linksModel,years,transfer_techs,vintage
5878      ) "Restricts the free decommissioning of links over the planning period."
5879    Eq_transfer_linksUpperLimit(linksModel,years,transfer_techs
5880      ) "Upper bound for the total number of links."
5881    Eq_transfer_linksLowerLimit(linksModel,years,transfer_techs
5882      ) "Lower bound for the total number of links."
5883    Eq_transfer_linksTotalMIP(linksModel,years,transfer_techs,vintage
5884      ) "Fixes the total number of links to the corresponding integer variable."
5885   
5886    Eq_transfer_flowAlongUpperLimit(timeModel,linksModel,years,transfer_techs,vintage
5887      ) "Upper bound for the flow along the transfer links."
5888    Eq_transfer_flowAgainstUpperLimit(timeModel,linksModel,years,transfer_techs,vintage
5889      ) "Upper bound for the flow against the transfer links."
5890    Eq_transfer_dcopf_angleFlows(timeModel,linksModel,years,gridSegments
5891      )
5892    Eq_transfer_dcopf_cycleFlows(timeModel,years,cycles,gridSegments
5893      )
5894    ;
5895   
5896   
5897  * ==== equation definition ====
5898  * // ## Equations
5899  * // ### Transfer Links Balance
5900  * // Ensures that the transfer between nodes is balanced.
5901  * // {Eq_transfer_linksBalance}
5902  Eq_transfer_linksBalance(linksModelToCalc,yearsSel,transfer_techs,vintage)
5903      $((transfer_usedTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
5904            or sum(years$sameas(years,yearsSel), transfer_usedTech(linksModelToCalc,years-1,transfer_techs,vintage)))
5905          and not transfer_linkBoundsFixed(linksModelToCalc,yearsSel,transfer_techs))
5906      ..
5907      transfer_linksTotal(linksModelToCalc,yearsSel,transfer_techs,vintage)
5908      =e=
5909      sum(yearsToCalc$(ord(yearsToCalc) = 1 and sameas(yearsToCalc, yearsSel)),
5910        sum(years$sameas(years, yearsToCalc),
5911          transfer_linksTotal(linksModelToCalc,years-1,transfer_techs,vintage)
5912            $transfer_usedTech(linksModelToCalc,years-1,transfer_techs,vintage)))
5913      + sum((yearsToCalc)$(ord(yearsToCalc) > 1 and sameas(yearsToCalc, yearsSel)),
5914        transfer_linksTotal(linksModelToCalc,yearsToCalc-1,transfer_techs,vintage)
5915          $transfer_usedTech(linksModelToCalc,yearsToCalc-1,transfer_techs,vintage))
5916      + transfer_linksBuild(linksModelToCalc,yearsSel,transfer_techs,vintage)
5917          $transfer_availTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
5918      - transfer_linksDecom(linksModelToCalc,yearsSel,transfer_techs,vintage)
5919          $transfer_usedTech(linksModelToCalc,yearsSel,transfer_techs,vintage);
5920   
5921  * // ### Transfer Links Fixed Decommissioning
5922  * // Balances fixed link decommissioning.
5923  * // {Eq_transfer_linksFixedDecom}
5924  Eq_transfer_linksFixedDecom(linksModelToCalc,yearsSel,transfer_techs,vintage)
5925      $(transfer_decomTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
5926          and not transfer_techParam(transfer_techs,vintage,"freeDecom") = 1
5927          and not transfer_linkBoundsFixed(linksModelToCalc,yearsSel,transfer_techs))
5928      ..
5929      transfer_linksDecom(linksModelToCalc,yearsSel,transfer_techs,vintage)
5930      =e=
5931      sum(years$
5932          (transfer_availTech(linksModelToCalc,years,transfer_techs,vintage)
5933              and years.val > sum(yearsToCalc$sameas(yearsToCalc+1, yearsSel), yearsToCalc.val) - transfer_techParam(transfer_techs,vintage,'lifeTime')
5934              and years.val <= yearsSel.val - transfer_techParam(transfer_techs,vintage,'lifeTime')),
5935          transfer_linksBuild(linksModelToCalc,years,transfer_techs,vintage));
5936   
5937  * // ### Transfer Links Free Decommissioning
5938  * // Balances free link decommissioning.
5939  * // {Eq_transfer_linksFreeDecom}
5940  Eq_transfer_linksFreeDecom(linksModelToCalc,yearsSel,transfer_techs,vintage)
5941      $((transfer_decomTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
5942          or transfer_usedTech(linksModelToCalc,yearsSel,transfer_techs,vintage))
5943          and transfer_techParam(transfer_techs,vintage,"freeDecom") = 1)
5944      ..
5945      sum(years$
5946            ((transfer_decomTech(linksModelToCalc,years,transfer_techs,vintage)
5947              or transfer_usedTech(linksModelToCalc,years,transfer_techs,vintage))
5948              and years.val < sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)),
5949          transfer_linksDecom(linksModelToCalc,years,transfer_techs,vintage))
5950      + sum(yearsToCalc$
5951            ((transfer_decomTech(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
5952              or transfer_usedTech(linksModelToCalc,yearsToCalc,transfer_techs,vintage))
5953              and yearsToCalc.val >= sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
5954              and yearsToCalc.val <= yearsSel.val),
5955          transfer_linksDecom(linksModelToCalc,yearsToCalc,transfer_techs,vintage))
5956      =g=
5957      sum(years$
5958            (transfer_availTech(linksModelToCalc,years,transfer_techs,vintage)
5959              and years.val < sum(yearsToCalc$(ord(yearsToCalc)=1), yearsToCalc.val) - transfer_techParam(transfer_techs,vintage,'lifeTime')),
5960          transfer_linksBuild(linksModelToCalc,years,transfer_techs,vintage))
5961      + sum(yearsToCalc$
5962            (transfer_availTech(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
5963              and yearsToCalc.val >= sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
5964              and yearsToCalc.val <= yearsSel.val - transfer_techParam(transfer_techs,vintage,'lifeTime')),
5965          transfer_linksBuild(linksModelToCalc,yearsToCalc,transfer_techs,vintage));
5966   
5967  * // ### Transfer Links Lower Limit
5968  * // Ensures link capacity lower limits.
5969  * // {Eq_transfer_linksLowerLimit}
5970  Eq_transfer_linksLowerLimit(linksModelToCalc,yearsSel,transfer_techs)
5971      $(transfer_linksParam(linksModelToCalc,yearsSel,transfer_techs,'linksLowerLimit') > 0 )
5972      ..
5973      sum(vintage$transfer_usedTech(linksModelToCalc,yearsSel,transfer_techs,vintage),
5974          transfer_linksTotal(linksModelToCalc,yearsSel,transfer_techs,vintage))
5975      =g=
5976      transfer_linksParam(linksModelToCalc,yearsSel,transfer_techs,"linksLowerLimit");
5977   
5978  * // ### Transfer Links Upper Limit
5979  * // Ensures link capacity upper limits.
5980  * // {Eq_transfer_linksUpperLimit}
5981  Eq_transfer_linksUpperLimit(linksModelToCalc,yearsSel,transfer_techs)
5982      $(transfer_linksParam(linksModelToCalc,yearsSel,transfer_techs,'linksUpperLimit') >= 0
5983          and transfer_linksParam(linksModelToCalc,yearsSel,transfer_techs,'linksUpperLimit') < +inf )
5984      ..
5985      sum(vintage$transfer_usedTech(linksModelToCalc,yearsSel,transfer_techs,vintage),
5986          transfer_linksTotal(linksModelToCalc,yearsSel,transfer_techs,vintage))
5987      =l=
5988      transfer_linksParam(linksModelToCalc,yearsSel,transfer_techs,"linksUpperLimit");
5989   
5990  * // ### Transfer Links Total MIP
5991  * // Ensures number of MIP links.
5992  * // {Eq_transfer_linksTotalMIP}
5993  Eq_transfer_linksTotalMIP(linksModelToCalc,yearsSel,transfer_techs,vintage)
5994      $(transfer_usedTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
5995          and transfer_techParam(transfer_techs,vintage,"mipLinks"))
5996      ..
5997      transfer_linksTotal(linksModelToCalc,yearsSel,transfer_techs,vintage)
5998      =e=
5999      transfer_linksTotal_MIP(linksModelToCalc,yearsSel,transfer_techs,vintage);
6000   
6001  * // ### Transfer Links Flow Along Upper Limit
6002  * // Ensures links flow along upper limit.
6003  * // {Eq_transfer_flowAlongUpperLimit}
6004  Eq_transfer_flowAlongUpperLimit(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
6005      $transfer_usedTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
6006      ..
6007      transfer_flowAlong(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
6008      =l=
6009      transfer_flowProfile(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage,"along")
6010      * transfer_linksTotal(linksModelToCalc,yearsSel,transfer_techs,vintage)
6011      * transfer_techParam(transfer_techs,vintage,"flowUpperLimit")
6012      ;
6013   
6014  * // ### Transfer Links Flow Against Upper Limit
6015  * // Ensures links flow against upper limit.
6016  * // {Eq_transfer_flowAgainstUpperLimit}
6017  Eq_transfer_flowAgainstUpperLimit(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
6018      $transfer_usedTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
6019      ..
6020      transfer_flowAgainst(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
6021      =l=
6022      transfer_flowProfile(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage,"against")
6023      * transfer_linksTotal(linksModelToCalc,yearsSel,transfer_techs,vintage)
6024      * transfer_techParam(transfer_techs,vintage,"flowUpperLimit")
6025      ;
6026   
6027  set transfer_usedOpf(linksModel,years,gridSegments,transfer_techs,vintage);
6028  transfer_usedOpf(linksModel,yearsToCalc,gridSegments,transfer_techs,vintage)
6029      $(transfer_usedTech(linksModel,yearsToCalc,transfer_techs,vintage)
6030          and gridSegments_dcopf(linksModel,transfer_techs,gridSegments))
6031      = yes;
6032   
6033  set transfer_usedOpfLinks(linksModel,years,gridSegments);
6034  option transfer_usedOpfLinks < transfer_usedOpf;
6035   
6036  set transfer_usedOpfSegments(years,gridSegments);
6037  option transfer_usedOpfSegments < transfer_usedOpf;
6038   
6042  * // ### Transfer DC optimal flow angle flows
6043  * // Angle flows.
6044  * // {Eq_transfer_dcopf_cycleFlows}
6045  Eq_transfer_dcopf_angleFlows(timeModelSel,linksModelToCalc,yearsSel,gridSegments)
6046      $transfer_usedOpfLinks(linksModelToCalc,yearsSel,gridSegments)
6047      ..
6048      sum ((transfer_techs,vintage)
6049              $transfer_usedOpf(linksModelToCalc,yearsSel,gridSegments,transfer_techs,vintage),
6050          ( transfer_flowAlong(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
6051              - transfer_flowAgainst(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage) )
6052          * transfer_dcopf_Xtech(linksModelToCalc,yearsSel,transfer_techs,vintage,gridSegments) )
6053      =e=
6054      sum ( nodesModelSel,
6055          - transfer_incidenceModel(nodesModelSel,linksModelToCalc)
6056          * transfer_dcopf_voltageAngle(timeModelSel,nodesModelSel,yearsSel,gridSegments));
6060   
6061   
6062  * ==== model definition ====
6063   
6064  Model M_transfer
6065  /
6066    Eq_transfer_linksBalance
6067    Eq_transfer_linksFixedDecom
6068    Eq_transfer_linksFreeDecom
6069    Eq_transfer_linksLowerLimit
6070    Eq_transfer_linksUpperLimit
6071    Eq_transfer_linksTotalMIP
6072    Eq_transfer_flowAlongUpperLimit
6073    Eq_transfer_flowAgainstUpperLimit
6077    Eq_transfer_dcopf_angleFlows
6081  /;
INCLUDE    C:\Local\REMix\framework\remix\framework\model\source\core\sourcesink.gms
6083  * SPDX-FileCopyrightText: Copyright (c) 2023 German Aerospace Center (DLR)
6084  * SPDX-License-Identifier: BSD-3-Clause
6085   
6086  * // # core_sourcesink
6087  * // The equations in this file describe the sources and sinks in the model.
6088   
6089  * // ## Variables
6090  * // {special_table_sourcesink_variables}
6376   
6377  * // ## Aggregation of profiles
6378  * // Profiles are rescaled based on the annual sum.
6379   
6380  set sourcesink_usesProfileScaling(nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile);
6381  sourcesink_usesProfileScaling(nodesData,years,sourcesink_techs,commodity,"fixed")
6382      $sourcesink_configIn(nodesData,years,sourcesink_techs,commodity,"scaleFixProfileWithFixSum") = yes;
6383  sourcesink_usesProfileScaling(nodesData,years,sourcesink_techs,commodity,"lower")
6384      $sourcesink_configIn(nodesData,years,sourcesink_techs,commodity,"scaleLowProfileWithLowSum") = yes;
6385  sourcesink_usesProfileScaling(nodesData,years,sourcesink_techs,commodity,"upper")
6386      $sourcesink_configIn(nodesData,years,sourcesink_techs,commodity,"scaleUpProfileWithUpSum") = yes;
6387   
6388  parameter sourcesink_ProfileSum(nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile);
6389  sourcesink_ProfileSum(nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile)
6390      $sourcesink_usesProfileScaling(nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile)
6391      = sum(timeData, sourcesink_profileIn(timeData,nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile));
6392   
6393  parameter sourcesink_ProfileAbsSum(nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile);
6394  sourcesink_ProfileAbsSum(nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile)
6395      $sourcesink_usesProfileScaling(nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile)
6396      = sum(timeData, abs(sourcesink_profileIn(timeData,nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile)));
6397   
6398  set sourcesink_ProfileScaleError(nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile);
6399  sourcesink_ProfileScaleError(nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile)
6400      $(sourcesink_usesProfileScaling(nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile)
6401          and sourcesink_ProfileSum(nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile) = 0
6402          and sourcesink_ProfileAbsSum(nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile) > 0)
6403      = yes;
6404   
6405  abort$sum((nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile),
6406              sourcesink_ProfileScaleError(nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile)) "One or more profiles cannot be rescaled as their annual sum equals zero!"
6407   
6408  * calculate scaling factor for each type
6409  parameter sourcesink_scalingFactor(nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile);
6410  sourcesink_scalingFactor(nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile)
6411      $(sourcesink_ProfileSum(nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile)
6412          and sourcesink_usesProfileScaling(nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile))
6413      = sum(pc_sourcesink_annualSum$sameas(pc_sourcesink_profile,pc_sourcesink_annualSum),
6414          sourcesink_annualSumIn(nodesData,years,sourcesink_techs,commodity,pc_sourcesink_annualSum)
6415              / sourcesink_ProfileSum(nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile));
6416   
6417  * rescale profiles
6418  sourcesink_profileIn(timeData,nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile)
6419      $sourcesink_usesProfileScaling(nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile)
6420      = sourcesink_profileIn(timeData,nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile)
6421          * sourcesink_scalingFactor(nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile)
6422   
6423  * // ## Aggregation of profiles
6424  * // Profiles are aggregated based on the mapping from data nodes to model nodes.
6425   
6426  * ==== aggregation of profiles ====
6427  set sourcesink_usesProfileIn(nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile);
6428  option sourcesink_usesProfileIn < sourcesink_profileIn
6429   
6430  set sourcesink_usesProfile(nodesModel,years,sourcesink_techs,commodity,pc_sourcesink_profile);
6431  sourcesink_usesProfile(nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity,pc_sourcesink_profile)
6432      $sum(nodesData$(aggregateNodesModel(nodesData,nodesModelToCalc)
6433          and sourcesink_usesProfileIn(nodesData,yearsToCalc,sourcesink_techs,commodity,pc_sourcesink_profile)), 1)
6434      = yes;
6435   
6436  * aagregate time dimension
6437  parameter sourcesink_profileIn_aggTime(timeModel,nodesData,yearsToCalc,sourcesink_techs,commodity,pc_sourcesink_profile);
6438  sourcesink_profileIn_aggTime(timeModelToCalc,nodesData,yearsToCalc,sourcesink_techs,commodity,pc_sourcesink_profile)
6439    $sourcesink_usesProfileIn(nodesData,yearsToCalc,sourcesink_techs,commodity,pc_sourcesink_profile)
6440    = sum(timeData$timeMapping(timeData,timeModelToCalc),
6441            sourcesink_profileIn(timeData,nodesData,yearsToCalc,sourcesink_techs,commodity,pc_sourcesink_profile)
6442            / timeLength(timeModelToCalc));
6443  option clear = sourcesink_profileIn;
6444   
6445  * sum up absolute profiles
6446  parameter sourcesink_profile(timeModel,nodesModel,years,sourcesink_techs,commodity,pc_sourcesink_profile);
6447  sourcesink_profile(timeModelToCalc,nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity,pc_sourcesink_profile)
6448      $sourcesink_usesProfile(nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity,pc_sourcesink_profile)
6449      = sum(nodesData$aggregateNodesModel(nodesData,nodesModelToCalc),
6450              sourcesink_profileIn_aggTime(timeModelToCalc,nodesData,yearsToCalc,sourcesink_techs,commodity,pc_sourcesink_profile));
6451  option clear = sourcesink_profileIn_aggTime;
6452   
6453  set sourcesink_enabled(nodesModel,years,sourcesink_techs,commodity);
6454  option sourcesink_enabled < sourcesink_config;
6455   
6456   
6457  * ==== declaration of variables ====
6458  * // ## Bounding of variables
6459  * // Source-sink variables with either a lower, fixed, or upper profile are bounded to their respective profiles given by the input parameters.
6460   
6461  sourcesink_flow.lo(timeModelToCalc,nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity)
6462      $( sourcesink_enabled(nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity)
6463          and sourcesink_config(nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity,"usesLowerProfile") = 1
6464          and sourcesink_profile(timeModelToCalc,nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity,"lower") > -inf )
6465      = sourcesink_profile(timeModelToCalc,nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity,"lower");
6466   
6467  sourcesink_flow.up(timeModelToCalc,nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity)
6468      $( sourcesink_enabled(nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity)
6469          and sourcesink_config(nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity,"usesUpperProfile") = 1
6470          and sourcesink_profile(timeModelToCalc,nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity,"upper") < inf )
6471      = sourcesink_profile(timeModelToCalc,nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity,"upper");
6472   
6473  sourcesink_flow.fx(timeModelToCalc,nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity)
6474      $( sourcesink_enabled(nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity)
6475          and sourcesink_config(nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity,"usesFixedProfile") = 1 )
6476      = sourcesink_profile(timeModelToCalc,nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity,"fixed");
6477   
6478  option clear = sourcesink_profile;
6479   
6480   
6481  * ==== equation definition ====
6482  * // ## Equations
6483  equations
6484  Eq_sourcesink_useFixedSum(nodesModel,years,sourcesink_techs,commodity
6485      ) "Fixes the annual sum from sources / to sinks"
6486  Eq_sourcesink_useLowerSum(nodesModel,years,sourcesink_techs,commodity
6487      ) "Limits the lower sum from sources / to sinks"
6488  Eq_sourcesink_useUpperSum(nodesModel,years,sourcesink_techs,commodity
6489      ) "Limits the upper sum from sources / to sinks"
6490    ;
6491   
6492  * // ### Fixed annual sums for sources and sinks
6493  * // Ensures that the sources and sinks with annual sums given as fixed limits are balanced.
6494  * // {Eq_sourcesink_useFixedSum}
6495  Eq_sourcesink_useFixedSum(nodesModelSel,yearsSel,sourcesink_techs,commodity)
6496      $( sourcesink_enabled(nodesModelSel,yearsSel,sourcesink_techs,commodity)
6497          and sourcesink_config(nodesModelSel,yearsSel,sourcesink_techs,commodity,"usesFixedSum") = 1 )
6498      ..
6499      sum(timeModelSel,
6500          sourcesink_flow(timeModelSel,nodesModelSel,yearsSel,sourcesink_techs,commodity))
6501      =e=
6502      sourcesink_annualSum(nodesModelSel,yearsSel,sourcesink_techs,commodity,"fixed")
6503      ;
6504   
6505  * // ### Lower annual sums for sources and sinks
6506  * // Ensures that the sources and sinks with annual sums given as lower limits are balanced.
6507  * // {Eq_sourcesink_useLowerSum}
6508  Eq_sourcesink_useLowerSum(nodesModelSel,yearsSel,sourcesink_techs,commodity)
6509      $( sourcesink_enabled(nodesModelSel,yearsSel,sourcesink_techs,commodity)
6510          and sourcesink_config(nodesModelSel,yearsSel,sourcesink_techs,commodity,"usesLowerSum") = 1
6511          and sourcesink_annualSum(nodesModelSel,yearsSel,sourcesink_techs,commodity,"lower") > -inf )
6512      ..
6513      sum(timeModelSel,
6514          sourcesink_flow(timeModelSel,nodesModelSel,yearsSel,sourcesink_techs,commodity))
6515      =g=
6516      sourcesink_annualSum(nodesModelSel,yearsSel,sourcesink_techs,commodity,"lower")
6517      ;
6518   
6519  * // ### Upper annual sums for sources and sinks
6520  * // Ensures that the sources and sinks with annual sums given as upper limits are balanced.
6521  * // {Eq_sourcesink_useUpperSum}
6522  Eq_sourcesink_useUpperSum(nodesModelSel,yearsSel,sourcesink_techs,commodity)
6523      $( sourcesink_enabled(nodesModelSel,yearsSel,sourcesink_techs,commodity)
6524          and sourcesink_config(nodesModelSel,yearsSel,sourcesink_techs,commodity,"usesUpperSum") = 1
6525          and sourcesink_annualSum(nodesModelSel,yearsSel,sourcesink_techs,commodity,"upper") < inf )
6526      ..
6527      sum(timeModelSel,
6528          sourcesink_flow(timeModelSel,nodesModelSel,yearsSel,sourcesink_techs,commodity))
6529      =l=
6530      sourcesink_annualSum(nodesModelSel,yearsSel,sourcesink_techs,commodity,"upper")
6531      ;
6532   
6533   
6534  * ==== model definition ====
6535   
6536  Model M_sourcesink
6537  /
6538    Eq_sourcesink_useFixedSum
6539    Eq_sourcesink_useLowerSum
6540    Eq_sourcesink_useUpperSum
6541  /;
INCLUDE    C:\Local\REMix\framework\remix\framework\model\source\core\balance.gms
6543  * SPDX-FileCopyrightText: Copyright (c) 2023 German Aerospace Center (DLR)
6544  * SPDX-License-Identifier: BSD-3-Clause
6545   
6546  * // # balance
6547  * // The equations in this file describe the commodity balancing in the model.
6548   
6549  Equations
6550    Eq_balance_commodities(timeModel,nodesModel,years,commodity
6551      ) "Balance for each commodity used in each time step, region, and year";
6552   
6553   
6554  * ==== calculation of mappings ====
6555   
6556  set balance_techComm(techs,commodity);
6557  balance_techComm(converter_techs(techs),commodity)
6558      $sum((vintage,activity)$converter_coefficient(converter_techs,vintage,activity,commodity,"coefficient"), 1) = yes;
6559  balance_techComm(storage_techs(techs),commodity)
6560      $sum((vintage)$storage_sizeParam(storage_techs,vintage,commodity,"size"), 1) = yes;
6561  balance_techComm(transfer_techs(techs),commodity)
6562      $sum((vintage)$transfer_coefficient(transfer_techs,vintage,commodity,"coefficient"), 1) = yes;
6563  balance_techComm(sourcesink_techs(techs),commodity)
6564      $sum((nodesModelToCalc,yearsToCalc)$sourcesink_enabled(nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity), 1) = yes;
6565   
6566  set balance_usedConverter(nodesModel,years,commodity);
6567  set balance_usedStorage(nodesModel,years,commodity);
6568  set balance_usedTransfer(nodesModel,years,commodity);
6569  set balance_usedSourceSink(nodesModel,years,commodity);
6570  set balance_usedBalance(nodesModel,years,commodity);
6571   
6572  balance_usedConverter(nodesModel,years,commodity)
6573      = sum ((converter_techs,vintage,activity)
6574              $( converter_coefficient(converter_techs,vintage,activity,commodity,"coefficient") <> 0
6575                  and converter_usedTech(nodesModel,years,converter_techs,vintage) ), 1);
6576   
6577  balance_usedStorage(nodesModel,years,commodity)
6578      = sum ((storage_techs,vintage,activity)
6579              $(storage_sizeParam(storage_techs,vintage,commodity,"size") <> 0
6580                  and storage_usedTech(nodesModel,years,storage_techs,vintage) ), 1);
6581   
6582  balance_usedTransfer(nodesModel,years,commodity)
6583      = sum ((linksModel,transfer_techs,vintage)
6584              $(transfer_coefficient(transfer_techs,vintage,commodity,"coefficient") <> 0
6585                  and transfer_incidenceModel(nodesModel,linksModel) <> 0), 1);
6586   
6587  option balance_usedSourceSink < sourcesink_enabled;
6588   
6589  balance_usedBalance(nodesModel,years,commodity)
6590      $(balance_usedConverter(nodesModel,years,commodity)
6591          or balance_usedStorage(nodesModel,years,commodity)
6592          or balance_usedTransfer(nodesModel,years,commodity)
6593          or balance_usedSourceSink(nodesModel,years,commodity) )
6594      = yes;
6595   
6596   
6597  * ==== equation definition ====
6598   
6599  * // ### Balance commodities
6600  * // Balancing of commodities for all model regions, time steps, and years
6601  * // {Eq_balance_commodities}
6602  Eq_balance_commodities(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,commodity)
6603      $balance_usedBalance(nodesModelSel,yearsSel,commodity)
6604      ..
6605  * converter
6606      sum((converter_techs,vintage,activity)
6607              $( converter_coefficientProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity,commodity) <> 0
6608                  AND converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage) ),
6609          converter_activity(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity)
6610              * converter_coefficientProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity,commodity)
6611              * timeLength(timeModelSel)
6612          + converter_unitsUsingActivity_MIP(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity)
6613              * converter_coefficient(converter_techs,vintage,activity,commodity,"constant")
6614              * timeLength(timeModelSel))
6615   
6616  * storages
6617      + sum((storage_techs,vintage)
6618              $( storage_sizeParam(storage_techs,vintage,commodity,"size") <> 0
6619                  and storage_usedTech(nodesModelSel,yearsSel,storage_techs,vintage) ),
6620          storage_level(timeModelToCalc--1,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
6621          - storage_level(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
6623          - storage_losses(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
6624          * timeLength(timeModelSel)
6626          )
6627   
6628  * transfer
6629      + sum((linksModel,transfer_techs,vintage)
6630              $(transfer_usedTech(linksModel,yearsSel,transfer_techs,vintage)
6631                  and linksModelToCalc(linksModel)),
6632          (   transfer_flowAlong(timeModelSel,linksModel,yearsSel,transfer_techs,vintage)
6633                  $(transfer_incidenceModel(nodesModelSel,linksModel) > 0)
6634            + transfer_flowAgainst(timeModelSel,linksModel,yearsSel,transfer_techs,vintage)
6635                  $(transfer_incidenceModel(nodesModelSel,linksModel) < 0) )
6636          * transfer_coefficient(transfer_techs,vintage,commodity,"coefficient")
6637          * timeLength(timeModelSel))
6638   
6639      - sum((linksModel,transfer_techs,vintage)
6640              $(transfer_usedTech(linksModel,yearsSel,transfer_techs,vintage)
6641                  and linksModelToCalc(linksModel)),
6642          (   transfer_flowAlong(timeModelSel,linksModel,yearsSel,transfer_techs,vintage)
6643                  $(transfer_incidenceModel(nodesModelSel,linksModel) < 0)
6644            + transfer_flowAgainst(timeModelSel,linksModel,yearsSel,transfer_techs,vintage)
6645                  $(transfer_incidenceModel(nodesModelSel,linksModel) > 0) )
6646          * transfer_coefficient(transfer_techs,vintage,commodity,"coefficient")
6647          * timeLength(timeModelSel))
6648   
6649      + 0.5 * sum((linksModel,transfer_techs,vintage)
6650              $(transfer_usedTech(linksModel,yearsSel,transfer_techs,vintage)
6651                  AND linksModelToCalc(linksModel)),
6652          (   transfer_flowAlong(timeModelSel,linksModel,yearsSel,transfer_techs,vintage)
6653                  $(transfer_incidenceModel(nodesModelSel,linksModel) <> 0)
6654            + transfer_flowAgainst(timeModelSel,linksModel,yearsSel,transfer_techs,vintage)
6655                  $(transfer_incidenceModel(nodesModelSel,linksModel) <> 0) )
6656          * timeLength(timeModelSel)
6657          * ( transfer_coefPerFlow(transfer_techs,vintage,commodity,"coefPerFlow")
6658              + sum(link_types,
6659                  transfer_coefPerLength(transfer_techs,vintage,commodity,link_types,"coefPerLength")
6660                  * transfer_lengthParam(linksModel,link_types,"length"))))
6661   
6662  * sourcesink
6663      + sum((sourcesink_techs)
6664              $sourcesink_enabled(nodesModelSel,yearsSel,sourcesink_techs,commodity),
6665          sourcesink_flow(timeModelSel,nodesModelSel,yearsSel,sourcesink_techs,commodity)
6666          * timeLength(timeModelSel))
6667      =e=
6668      0;
6669   
6670   
6671  * ==== model definition ====
6672   
6673  Model M_balance
6674  /
6675    Eq_balance_commodities
6676  /;
6677   
INCLUDE    C:\Local\REMix\framework\remix\framework\model\source\accounting\equations.gms
6679  * SPDX-FileCopyrightText: Copyright (c) 2023 German Aerospace Center (DLR)
6680  * SPDX-License-Identifier: BSD-3-Clause
6681   
6682  * // # accounting_equations
6683   
6684  * ==== declaration of variables ====
6685   
6686  variables
6687  accounting_indicator(accNodesModel,accYears,indicator)
6688  accounting_indicator_links(linksModel,years,indicator)
6689  accounting_objective
6690    ;
6691   
6692   
6693  * ==== definition of variables ====
6694   
6695  * set the variable levels to be fixed for years before the optimization years
6696  accounting_indicator.l(accNodesModel,accYears,indicator)
6697      $activeIndicators(accNodesModel,accYears,indicator)
6698      = 0;
6699   
6700  accounting_indicator.lo(accNodesModel,accYears,indicator)
6701      $(accounting_indicatorBounds(accNodesModel,accYears,indicator,"useLower") <> 0 )
6702      = accounting_indicatorBounds(accNodesModel,accYears,indicator,"lowerValue");
6703   
6704  accounting_indicator.up(accNodesModel,accYears,indicator)
6705      $(accounting_indicatorBounds(accNodesModel,accYears,indicator,"useUpper") <> 0 )
6706      = accounting_indicatorBounds(accNodesModel,accYears,indicator,"upperValue");
6707   
6708  accounting_indicator.fx(accNodesModel,accYears,indicator)
6709      $(accounting_indicatorBounds(accNodesModel,accYears,indicator,"useFixed") <> 0 )
6710      = accounting_indicatorBounds(accNodesModel,accYears,indicator,"fixedValue");
6711   
6712   
6713  accounting_indicator_links.lo(linksModelToCalc,yearsToCalc,indicator)
6714      $(accounting_indicatorBounds_links(linksModelToCalc,yearsToCalc,indicator,"useLower") <> 0 )
6715      = accounting_indicatorBounds_links(linksModelToCalc,yearsToCalc,indicator,"lowerValue");
6716   
6717  accounting_indicator_links.up(linksModelToCalc,yearsToCalc,indicator)
6718      $(accounting_indicatorBounds_links(linksModelToCalc,yearsToCalc,indicator,"useUpper") <> 0 )
6719      = accounting_indicatorBounds_links(linksModelToCalc,yearsToCalc,indicator,"upperValue");
6720   
6721  accounting_indicator_links.fx(linksModelToCalc,yearsToCalc,indicator)
6722      $(accounting_indicatorBounds_links(linksModelToCalc,yearsToCalc,indicator,"useFixed") <> 0 )
6723      = accounting_indicatorBounds_links(linksModelToCalc,yearsToCalc,indicator,"fixedValue");
6724   
6725   
6726  * ==== declaration of equations ====
6727   
6728  equations
6729  Eq_accounting_indicatorCalc(accNodesModel,accYears,indicator
6730      ) "Calculates the level of an indicator per accounting region"
6731  Eq_accounting_indicatorCalc_links(linksModel,years,indicator
6732      ) "Calculates the level of an indicator per model link"
6733  Eq_accounting_objective "Calculates the objective value based on the specified indicator"
6734    ;
6735   
6736   
6737  * ==== equations definition ====
6738  * // ## Equations
6739  * // ### Accounting Indicator Calculation
6740  * // Calculates the indicators for each model node for converters, sources and sinks, transfer, storage and variable indicators.
6741  * // {Eq_accounting_indicatorCalc}
6742  Eq_accounting_indicatorCalc(accNodesModel,accYearsSel(accYears),indicator)
6743      $activeIndicators(accNodesModel,accYears,indicator)
6744      ..
6745      accounting_indicator(accNodesModel,accYears,indicator)
6746      =e=
6747   
6748  * == variable indicators ==
6749      sum((accNodesModel_a,accYears_a,indicator_a)
6750          $(compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
6751              and variableIndicators(accNodesModel_a,accYears_a,indicator_a)),
6752          compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
6753          * accounting_indicator(accNodesModel_a,accYears_a,indicator_a))
6754   
6755  * == converters ==
6756      + sum ((accNodesModel_a,nodesModelSel,accYears_a,yearsSel,indicator_a)
6757              $( compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
6758                  and sameas(nodesModelSel,accNodesModel_a) and sameas(yearsSel,accYears_a)),
6759          compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
6760          *
6761          ( sum ((converter_techs,vintage)
6762                      $(converter_availTech(nodesModelSel,yearsSel,converter_techs,vintage)
6763                          and accounting_converterUnits(indicator_a,nodesModelSel,converter_techs,vintage,"useAnnuity") = 0),
6764              converter_unitsBuild(nodesModelSel,yearsSel,converter_techs,vintage)
6765              * accounting_converterUnits(indicator_a,nodesModelSel,converter_techs,vintage,"perUnitBuild"))
6766   
6767          + sum ((years_a,converter_techs,vintage)
6768                      $(converter_availTech(nodesModelSel,years_a,converter_techs,vintage)
6769                          and years_a.val < sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
6770                          and accounting_converterUnits(indicator_a,nodesModelSel,converter_techs,vintage,"useAnnuity") = 1
6771                          and years_a.val + accounting_converterUnits(indicator_a,nodesModelSel,converter_techs,vintage,"amorTime") > yearsSel.val
6772                          and years_a.val <= yearsSel.val ),
6773              converter_unitsBuild(nodesModelSel,years_a,converter_techs,vintage)
6774              * accounting_converterUnits(indicator_a,nodesModelSel,converter_techs,vintage,"perUnitBuild")
6775              * accounting_annuityFactor_converter(indicator_a,nodesModelSel,converter_techs,vintage) )
6776   
6777          + sum ((yearsToCalc,converter_techs,vintage)
6778                      $(converter_availTech(nodesModelSel,yearsToCalc,converter_techs,vintage)
6779                          and yearsToCalc.val >= sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
6780                          and accounting_converterUnits(indicator_a,nodesModelSel,converter_techs,vintage,"useAnnuity") = 1
6781                          and yearsToCalc.val + accounting_converterUnits(indicator_a,nodesModelSel,converter_techs,vintage,"amorTime") > yearsSel.val
6782                          and yearsToCalc.val <= yearsSel.val ),
6783              converter_unitsBuild(nodesModelSel,yearsToCalc,converter_techs,vintage)
6784              * accounting_converterUnits(indicator_a,nodesModelSel,converter_techs,vintage,"perUnitBuild")
6785              * accounting_annuityFactor_converter(indicator_a,nodesModelSel,converter_techs,vintage) )
6786   
6787          + sum ((converter_techs,vintage)
6788                      $converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage),
6789              converter_unitsDecom(nodesModelSel,yearsSel,converter_techs,vintage)
6790              * accounting_converterUnits(indicator_a,nodesModelSel,converter_techs,vintage,"perUnitDecom")
6791   
6792              + converter_unitsTotal(nodesModelSel,yearsSel,converter_techs,vintage)
6793              * accounting_converterUnits(indicator_a,nodesModelSel,converter_techs,vintage,"perUnitTotal") )
6794   
6795          + sum ((timeModelSel,converter_techs,vintage,activity)
6796                      $converter_usedTechAct(nodesModelSel,yearsSel,converter_techs,vintage,activity),
6797              converter_activity(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity)
6798              * timeLength(timeModelSel)
6799              * accounting_converterActivity(indicator_a,nodesModelSel,converter_techs,vintage,activity,"perActivity") )
6800   
6801          + sum ((timeModelSel,converter_techs,vintage)
6802                      $converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage),
6803              converter_unitStartups(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
6804              * accounting_converterStartup(indicator_a,nodesModelSel,converter_techs,vintage,"perStartup") )
6805   
6806          + sum ((timeModelSel,converter_techs,vintage)
6807                      $converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage),
6808              converter_rampPos(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
6809              * (accounting_converterStartup(indicator_a,nodesModelSel,converter_techs,vintage,"perRamp")
6810                 + accounting_converterStartup(indicator_a,nodesModelSel,converter_techs,vintage,"perRampPos"))
6811   
6812              + converter_rampNeg(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
6813              * (accounting_converterStartup(indicator_a,nodesModelSel,converter_techs,vintage,"perRamp")
6814                 + accounting_converterStartup(indicator_a,nodesModelSel,converter_techs,vintage,"perRampNeg")))
6815          )
6816      )
6817   
6818  * == storage ==
6819      + sum ((accNodesModel_a,nodesModelSel,accYears_a,yearsSel,indicator_a)
6820              $( compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
6821                  and sameas(nodesModelSel,accNodesModel_a) and sameas(yearsSel,accYears_a)),
6822          compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
6823          *
6824          ( sum ((storage_techs,vintage)
6825                      $(storage_availTech(nodesModelSel,yearsSel,storage_techs,vintage)
6826                          and accounting_storageUnits(indicator_a,nodesModelSel,storage_techs,vintage,"useAnnuity") = 0),
6827              storage_unitsBuild(nodesModelSel,yearsSel,storage_techs,vintage)
6828              * accounting_storageUnits(indicator_a,nodesModelSel,storage_techs,vintage,"perUnitBuild") )
6829   
6830          + sum ((years_a,storage_techs,vintage)
6831                      $(storage_availTech(nodesModelSel,years_a,storage_techs,vintage)
6832                          and years_a.val < sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
6833                          and accounting_storageUnits(indicator_a,nodesModelSel,storage_techs,vintage,"useAnnuity") = 1
6834                          and years_a.val + accounting_storageUnits(indicator_a,nodesModelSel,storage_techs,vintage,"amorTime") > yearsSel.val
6835                          and years_a.val <= yearsSel.val ),
6836              storage_unitsBuild(nodesModelSel,years_a,storage_techs,vintage)
6837              * accounting_storageUnits(indicator_a,nodesModelSel,storage_techs,vintage,"perUnitBuild")
6838              * accounting_annuityFactor_storage(indicator_a,nodesModelSel,storage_techs,vintage) )
6839   
6840          + sum ((yearsToCalc,storage_techs,vintage)
6841                      $(storage_availTech(nodesModelSel,yearsToCalc,storage_techs,vintage)
6842                          and yearsToCalc.val >= sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
6843                          and accounting_storageUnits(indicator_a,nodesModelSel,storage_techs,vintage,"useAnnuity") = 1
6844                          and yearsToCalc.val + accounting_storageUnits(indicator_a,nodesModelSel,storage_techs,vintage,"amorTime") > yearsSel.val
6845                          and yearsToCalc.val <= yearsSel.val ),
6846              storage_unitsBuild(nodesModelSel,yearsToCalc,storage_techs,vintage)
6847              * accounting_storageUnits(indicator_a,nodesModelSel,storage_techs,vintage,"perUnitBuild")
6848              * accounting_annuityFactor_storage(indicator_a,nodesModelSel,storage_techs,vintage) )
6849   
6850          + sum ((storage_techs,vintage)
6851                      $storage_usedTech(nodesModelSel,yearsSel,storage_techs,vintage),
6852              storage_unitsDecom(nodesModelSel,yearsSel,storage_techs,vintage)
6853              * accounting_storageUnits(indicator_a,nodesModelSel,storage_techs,vintage,"perUnitDecom")
6854   
6855              + storage_unitsTotal(nodesModelSel,yearsSel,storage_techs,vintage)
6856              * accounting_storageUnits(indicator_a,nodesModelSel,storage_techs,vintage,"perUnitTotal") )
6857          )
6858      )
6859   
6860   
6861  * == transfer ==
6862      + sum ((accNodesModel_a,nodesModelSel,accYears_a,yearsSel,indicator_a)
6863              $( compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
6864                  and sameas(nodesModelSel,accNodesModel_a) and sameas(yearsSel,accYears_a)),
6865          compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
6866          *
6867          ( sum ((linksModelToCalc,transfer_techs,vintage)
6868                      $(transfer_availTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
6869                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0
6870                          and accounting_transferLinks(indicator_a,linksModelToCalc,transfer_techs,vintage,"useAnnuity") = 0),
6871              0.5
6872              * transfer_linksBuild(linksModelToCalc,yearsSel,transfer_techs,vintage)
6873              * accounting_transferLinks(indicator_a,linksModelToCalc,transfer_techs,vintage,"perLinkBuild") )
6874   
6875          + sum ((linksModelToCalc,years_a,transfer_techs,vintage)
6876                      $(transfer_availTech(linksModelToCalc,years_a,transfer_techs,vintage)
6877                          and years_a.val < sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
6878                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0
6879                          and accounting_transferLinks(indicator_a,linksModelToCalc,transfer_techs,vintage,"useAnnuity") = 1
6880                          and years_a.val + accounting_transferLinks(indicator_a,linksModelToCalc,transfer_techs,vintage,"amorTime") > yearsSel.val
6881                          and years_a.val <= yearsSel.val ),
6882              0.5
6883              * transfer_linksBuild(linksModelToCalc,years_a,transfer_techs,vintage)
6884              * accounting_transferLinks(indicator_a,linksModelToCalc,transfer_techs,vintage,"perLinkBuild")
6885              * accounting_annuityFactor_transferLink(indicator_a,linksModelToCalc,transfer_techs,vintage) )
6886   
6887          + sum ((linksModelToCalc,yearsToCalc,transfer_techs,vintage)
6888                      $(transfer_availTech(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
6889                          and yearsToCalc.val >= sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
6890                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0
6891                          and accounting_transferLinks(indicator_a,linksModelToCalc,transfer_techs,vintage,"useAnnuity") = 1
6892                          and yearsToCalc.val + accounting_transferLinks(indicator_a,linksModelToCalc,transfer_techs,vintage,"amorTime") > yearsSel.val
6893                          and yearsToCalc.val <= yearsSel.val ),
6894              0.5
6895              * transfer_linksBuild(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
6896              * accounting_transferLinks(indicator_a,linksModelToCalc,transfer_techs,vintage,"perLinkBuild")
6897              * accounting_annuityFactor_transferLink(indicator_a,linksModelToCalc,transfer_techs,vintage) )
6898   
6899          + sum ((linksModelToCalc,transfer_techs,vintage,link_types)
6900                      $(transfer_availTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
6901                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0
6902                          and accounting_transferPerLength(indicator_a,linksModelToCalc,transfer_techs,vintage,link_types,"useAnnuity") = 0 ),
6903              0.5
6904              * transfer_linksBuild(linksModelToCalc,yearsSel,transfer_techs,vintage)
6905              * transfer_lengthParam(linksModelToCalc,link_types,"length")
6906              * accounting_transferPerLength(indicator_a,linksModelToCalc,transfer_techs,vintage,link_types,"perLengthBuild") )
6907   
6908          + sum ((linksModelToCalc,years_a,transfer_techs,vintage,link_types)
6909                      $(transfer_availTech(linksModelToCalc,years_a,transfer_techs,vintage)
6910                          and years_a.val < sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
6911                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0
6912                          and accounting_transferPerLength(indicator_a,linksModelToCalc,transfer_techs,vintage,link_types,"useAnnuity") = 1
6913                          and years_a.val + accounting_transferPerLength(indicator_a,linksModelToCalc,transfer_techs,vintage,link_types,"amorTime") > yearsSel.val
6914                          and years_a.val <= yearsSel.val ),
6915              0.5
6916              * transfer_linksBuild(linksModelToCalc,years_a,transfer_techs,vintage)
6917              * transfer_lengthParam(linksModelToCalc,link_types,"length")
6918              * accounting_transferPerLength(indicator_a,linksModelToCalc,transfer_techs,vintage,link_types,"perLengthBuild")
6919              * accounting_annuityFactor_transferDistance(indicator_a,linksModelToCalc,transfer_techs,vintage,link_types) )
6920   
6921          + sum ((linksModelToCalc,yearsToCalc,transfer_techs,vintage,link_types)
6922                      $(transfer_availTech(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
6923                          and yearsToCalc.val >= sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
6924                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0
6925                          and accounting_transferPerLength(indicator_a,linksModelToCalc,transfer_techs,vintage,link_types,"useAnnuity") = 1
6926                          and yearsToCalc.val + accounting_transferPerLength(indicator_a,linksModelToCalc,transfer_techs,vintage,link_types,"amorTime") > yearsSel.val
6927                          and yearsToCalc.val <= yearsSel.val ),
6928              0.5
6929              * transfer_linksBuild(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
6930              * transfer_lengthParam(linksModelToCalc,link_types,"length")
6931              * accounting_transferPerLength(indicator_a,linksModelToCalc,transfer_techs,vintage,link_types,"perLengthBuild")
6932              * accounting_annuityFactor_transferDistance(indicator_a,linksModelToCalc,transfer_techs,vintage,link_types) )
6933   
6934          + sum ((linksModelToCalc,transfer_techs,vintage)
6935                      $(transfer_usedTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
6936                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0 ),
6937              0.5
6938              * transfer_linksDecom(linksModelToCalc,yearsSel,transfer_techs,vintage)
6939              * accounting_transferLinks(indicator_a,linksModelToCalc,transfer_techs,vintage,"perLinkDecom")
6940   
6941              + 0.5
6942              * transfer_linksTotal(linksModelToCalc,yearsSel,transfer_techs,vintage)
6943              * accounting_transferLinks(indicator_a,linksModelToCalc,transfer_techs,vintage,"perLinkTotal")
6944   
6945              + 0.5
6946              * sum (link_types,
6947                  transfer_linksDecom(linksModelToCalc,yearsSel,transfer_techs,vintage)
6948                  * transfer_lengthParam(linksModelToCalc,link_types,"length")
6949                  * accounting_transferPerLength(indicator_a,linksModelToCalc,transfer_techs,vintage,link_types,"perLengthDecom")
6950   
6951                  + transfer_linksTotal(linksModelToCalc,yearsSel,transfer_techs,vintage)
6952                  * transfer_lengthParam(linksModelToCalc,link_types,"length")
6953                  * accounting_transferPerLength(indicator_a,linksModelToCalc,transfer_techs,vintage,link_types,"perLengthTotal"))
6954   
6955              + 0.5
6956              * sum (timeModelSel,
6957                  transfer_flowAlong(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
6958                  * timeLength(timeModelSel)
6959                  * ( accounting_transferLinks(indicator_a,linksModelToCalc,transfer_techs,vintage,"perFlow")
6960                      + accounting_transferLinks(indicator_a,linksModelToCalc,transfer_techs,vintage,"perFlowAlong"))
6961   
6962                  + transfer_flowAgainst(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
6963                  * timeLength(timeModelSel)
6964                  * ( accounting_transferLinks(indicator_a,linksModelToCalc,transfer_techs,vintage,"perFlow")
6965                      + accounting_transferLinks(indicator_a,linksModelToCalc,transfer_techs,vintage,"perFlowAgainst")))
6966   
6967              + 0.5
6968              * sum ((timeModelSel, link_types),
6969                  transfer_flowAlong(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
6970                  * timeLength(timeModelSel)
6971                  * transfer_lengthParam(linksModelToCalc,link_types,"length")
6972                  * (accounting_transferPerLength(indicator_a,linksModelToCalc,transfer_techs,vintage,link_types,"perFlow")
6973                      + accounting_transferPerLength(indicator_a,linksModelToCalc,transfer_techs,vintage,link_types,"perFlowAlong"))
6974   
6975                  + transfer_flowAgainst(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
6976                  * timeLength(timeModelSel)
6977                  * transfer_lengthParam(linksModelToCalc,link_types,"length")
6978                  * (accounting_transferPerLength(indicator_a,linksModelToCalc,transfer_techs,vintage,link_types,"perFlow")
6979                      + accounting_transferPerLength(indicator_a,linksModelToCalc,transfer_techs,vintage,link_types,"perFlowAgainst")))
6980              )
6981          )
6982      )
6983   
6984   
6985  * == sources / sinks ==
6986      + sum ((accNodesModel_a,nodesModelSel,accYears_a,yearsSel,indicator_a)
6987              $( compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
6988                  and sameas(nodesModelSel,accNodesModel_a) and sameas(yearsSel,accYears_a)),
6989          compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
6990          *
6991          sum ((timeModelSel,sourcesink_techs,commodity)
6992                  $sourcesink_enabled(nodesModelSel,yearsSel,sourcesink_techs,commodity),
6993              sourcesink_flow(timeModelSel,nodesModelSel,yearsSel,sourcesink_techs,commodity)
6994              * timeLength(timeModelSel)
6995              * accounting_sourcesinkFlow(indicator_a,nodesModelSel,yearsSel,sourcesink_techs,commodity,"perFlow") )
6996      );
6997   
6998  * // ### Accounting Indicator Calculation Links
6999  * // Calculates the indicators for each transfer for converters, sources and sinks, transfer, storage and variable indicators.
7000  * // {Eq_accounting_indicatorCalc_links}
7001  Eq_accounting_indicatorCalc_links(linksModelToCalc,yearsSel,indicator)
7002      $activeIndicators_links(linksModelToCalc,yearsSel,indicator)
7003      ..
7004      accounting_indicator_links(linksModelToCalc,yearsSel,indicator)
7005      =e=
7006      sum ((transfer_techs,vintage)
7007                  $(transfer_availTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
7008                      and accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"useAnnuity") = 0),
7009          transfer_linksBuild(linksModelToCalc,yearsSel,transfer_techs,vintage)
7010          * accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"perLinkBuild") )
7011   
7012      + sum ((years_a,transfer_techs,vintage)
7013                  $(transfer_availTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
7014                      and accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"useAnnuity") = 1
7015                      and years_a.val + accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"amorTime") > yearsSel.val
7016                      and years_a.val <= yearsSel.val ),
7017          transfer_linksBuild(linksModelToCalc,years_a,transfer_techs,vintage)
7018          * accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"perLinkBuild")
7019          * accounting_annuityFactor_transferLink(indicator,linksModelToCalc,transfer_techs,vintage) )
7020   
7021      + sum ((transfer_techs,vintage,link_types)
7022                  $(transfer_availTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
7023                      and accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"useAnnuity") = 0 ),
7024          transfer_linksBuild(linksModelToCalc,yearsSel,transfer_techs,vintage)
7025          * transfer_lengthParam(linksModelToCalc,link_types,"length")
7026          * accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"perLengthBuild") )
7027   
7028      + sum ((years_a,transfer_techs,vintage,link_types)
7029                  $(transfer_availTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
7030                      and accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"useAnnuity") = 1
7031                      and years_a.val + accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"amorTime") > yearsSel.val
7032                      and years_a.val <= yearsSel.val ),
7033          transfer_linksBuild(linksModelToCalc,years_a,transfer_techs,vintage)
7034          * transfer_lengthParam(linksModelToCalc,link_types,"length")
7035          * accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"perLengthBuild")
7036          * accounting_annuityFactor_transferDistance(indicator,linksModelToCalc,transfer_techs,vintage,link_types) )
7037   
7038      + sum ((transfer_techs,vintage)
7039                  $(transfer_usedTech(linksModelToCalc,yearsSel,transfer_techs,vintage)),
7040          transfer_linksDecom(linksModelToCalc,yearsSel,transfer_techs,vintage)
7041          * accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"perLinkDecom")
7042   
7043          + transfer_linksTotal(linksModelToCalc,yearsSel,transfer_techs,vintage)
7044          * accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"perLinkTotal")
7045   
7046          + sum (link_types,
7047              transfer_linksDecom(linksModelToCalc,yearsSel,transfer_techs,vintage)
7048              * transfer_lengthParam(linksModelToCalc,link_types,"length")
7049              * accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"perLengthDecom")
7050   
7051              + transfer_linksTotal(linksModelToCalc,yearsSel,transfer_techs,vintage)
7052              * transfer_lengthParam(linksModelToCalc,link_types,"length")
7053              * accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"perLengthTotal"))
7054   
7055          + sum (timeModelSel,
7056              transfer_flowAlong(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
7057              * timeLength(timeModelSel)
7058              * ( accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"perFlow")
7059                  + accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"perFlowAlong"))
7060   
7061              + transfer_flowAgainst(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
7062              * timeLength(timeModelSel)
7063              * ( accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"perFlow")
7064                  + accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"perFlowAgainst")))
7065   
7066          + sum ((timeModelSel, link_types),
7067              transfer_flowAlong(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
7068              * timeLength(timeModelSel)
7069              * transfer_lengthParam(linksModelToCalc,link_types,"length")
7070              * (accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"perFlow")
7071                  + accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"perFlowAlong"))
7072   
7073              + transfer_flowAgainst(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
7074              * timeLength(timeModelSel)
7075              * transfer_lengthParam(linksModelToCalc,link_types,"length")
7076              * (accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"perFlow")
7077                  + accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"perFlowAgainst")))
7078          );
7079   
7080  * // ### Accounting Objective
7081  * // Calculates the indicators for the objective.
7082  * // {Eq_accounting_objective}
7083  Eq_accounting_objective
7084      ..
7085      accounting_objective
7086      =e=
7087      sum ((accNodesModel,accYears,indicator)
7088              $(accounting_indicatorBounds(accNodesModel,accYears,indicator,"obj") <> 0 ),
7089          accounting_indicator(accNodesModel,accYears,indicator) )
7090   
7091   
7092  * ==== model definition ====
7093   
7094  Model M_accounting
7095  /
7096  Eq_accounting_indicatorCalc_links
7097  Eq_accounting_indicatorCalc
7098  Eq_accounting_objective
7099  /;
INCLUDE    C:\Local\REMix\framework\remix\framework\model\source\optiframe.gms
7101  * SPDX-FileCopyrightText: Copyright (c) 2023 German Aerospace Center (DLR)
7102  * SPDX-License-Identifier: BSD-3-Clause
7103   
7104  * ==== optimization frames ====
7106   
7107  * mapping from optimization frame to years
7109  set optiframe / of1 * of1 /;
7110  set optiframeToCalc(optiframe);
7111   
7113  set map_optiframe(optiframe,years) / of1 . #yearsToCalc /;
7115   
7117   
7118  option optiframeToCalc < map_optiframe;
7119   
7120  Model remix /
7121    M_converter
7122    M_storage
7123    M_transfer
7124    M_sourcesink
7125    M_balance
7126    M_accounting
7127  /;
7128   
7129   
7130  * ==== include methods  ====
7131   
7132  * check if the method is valid
7138   
7139   
7140  * if method is pips write the checkanno tool
INCLUDE    C:\Local\REMix\framework\remix\framework\model\source\methods\checkanno.gms
7142  * SPDX-FileCopyrightText: Copyright (c) 2023 German Aerospace Center (DLR)
7143  * SPDX-License-Identifier: BSD-3-Clause
7144   
7147   
7150   
7151  * if method is pips generate the annotated gdx file
INCLUDE    C:\Local\REMix\framework\remix\framework\model\source\methods\pips.gms
7153  * SPDX-FileCopyrightText: Copyright (c) 2023 German Aerospace Center (DLR)
7154  * SPDX-License-Identifier: BSD-3-Clause
7155   
7159   
7160  * if method is solve run the model with commercial solvers
INCLUDE    C:\Local\REMix\framework\remix\framework\model\source\methods\solve.gms
7162  * SPDX-FileCopyrightText: Copyright (c) 2023 German Aerospace Center (DLR)
7163  * SPDX-License-Identifier: BSD-3-Clause
7164   
7167   
7169   
7170  * ==== global options ====
7177   
7178  * ==== general solver options ====
7188   
7189  * ==== cplex options ====
7198   
7199  * ==== copt options ====
7203   
7204  * ==== debug options ====
7207   
7208   
7209  * ==== setup optimization ====
7210  if ((sum(nodesModelToCalc, 1)>40 or sum(timeModelToCalc, 1)>50) and not 0,
7211     option limRow=0, limCol=0, solPrint=off;
7212  else
7213     option limRow=100000, limCol=100000, solPrint=on;
7214  );
7215   
7217   
7218  option mip = cplex;
7219  option reslim = 604800;
7220  option optcr = 1e-3;
7221  remix.threads=4;
7222  remix.optFile = 1;
7223  remix.solveLink = 0;
7224  remix.holdFixed = 1;
7225   
7226   
7227  * ==== configure optionfiles ====
7228   
7230  file opt / "cplex.opt" /;
7231  put opt;
7233  put "rerun no" /;
7235  put "lpmethod 4" /;
7237  put "barorder 0" /;
7238  put "preind 1" /;
7239  put "scaind 0" /;
7240  put "predual -1" /;
7241  put "baralg 0" /;
7242  put "barstartalg 1" /;
7243  put "barepcomp 1e-6" /;
7244  put "solutiontype 2" /;
7245  put "startalg 4" /;
7246  put "epgap 1e-3" /;
7247  put "quality 1" /;
7248  put "barcolnz 0" /;
7249  put "threads 4" /;
7250  put "parallelmode 1" /;
7253  putclose;
7254   
7256   
7257   
7258  * ==== solve the problem ====
7259   
7260  loop ( optiframeToCalc,
7261      yearsSel(years) = no;
7262      yearsSel(years)$map_optiframe(optiframeToCalc,years) = yes;
7263      yearsToFix(years) = no;
7264      yearsToFix(years)$(years.val < smin(years_a$yearsSel(years_a), years_a.val)) = yes;
7265      accYearsSel(accYears) = no;
7266      accYearsSel("horizon") = yes;
7267      accYearsSel(accYears)$(sum(yearsSel$sameas(accYears,yearsSel), 1)) = yes;
7268      accYearsToFix(accYears) = no;
7269      accYearsToFix(accYears)$(sum(years$(sameas(years,accYears) and years.val < smin(years_a$yearsSel(years_a), years_a.val)), 1) > 0) = yes;
7270      timeModelSel(timeModel) = no;
7271      timeModelSel(timeModel)$timeModelToCalc(timeModel) = yes;
7272      nodesModelSel(nodesModel) = no;
7273      nodesModelSel(nodesModel)$nodesModelToCalc(nodesModel) = yes;
7274   
7275  * Fix decision for years previously optimized in case of myopic or foresight
7276      converter_unitsDelta(nodesModelToCalc,yearsToFix,converter_techs)
7277          $(sum(yearsToCalc$sameas(yearsToFix, yearsToCalc), 1))
7278          = sum(vintage, converter_unitsTotal.l(nodesModelToCalc,yearsToFix,converter_techs,vintage))
7279              - converter_capacityParam(nodesModelToCalc,yearsToFix,converter_techs,"unitsUpperLimit");
7280      converter_unitsDelta(nodesModelToCalc,yearsToFix,converter_techs)
7281          $(converter_unitsDelta(nodesModelToCalc,yearsToFix,converter_techs) < 0) = 0;
7282   
7283      converter_unitsBuild.l(nodesModelToCalc,yearsToFix,converter_techs,vintage)
7284          $converter_availTech(nodesModelToCalc,yearsToFix,converter_techs,vintage)
7285          = converter_unitsBuild.l(nodesModelToCalc,yearsToFix,converter_techs,vintage)
7286              - converter_unitsDelta(nodesModelToCalc,yearsToFix,converter_techs);
7287   
7288      converter_unitsBuild.l(nodesModelToCalc,yearsToFix,converter_techs,vintage)
7289          $(converter_unitsBuild.l(nodesModelToCalc,yearsToFix,converter_techs,vintage) < 0) = 0;
7290      converter_unitsBuild.fx(nodesModelToCalc,yearsToFix,converter_techs,vintage)
7291          = converter_unitsBuild.l(nodesModelToCalc,yearsToFix,converter_techs,vintage);
7292      converter_unitsDecom.l(nodesModelToCalc,yearsToFix,converter_techs,vintage)
7293          $(converter_unitsDecom.l(nodesModelToCalc,yearsToFix,converter_techs,vintage) < 0) = 0;
7294      converter_unitsDecom.fx(nodesModelToCalc,yearsToFix,converter_techs,vintage)
7295          = converter_unitsDecom.l(nodesModelToCalc,yearsToFix,converter_techs,vintage);
7296      converter_unitsTotal.fx(nodesModelToCalc,yearsToFix,converter_techs,vintage)
7297          = converter_unitsTotal.l(nodesModelToCalc,yearsToFix,converter_techs,vintage);
7298   
7299   
7300      storage_unitsDelta(nodesModelToCalc,yearsToFix,storage_techs)
7301          $(sum(yearsToCalc$sameas(yearsToFix, yearsToCalc), 1))
7302          = sum(vintage, storage_unitsTotal.l(nodesModelToCalc,yearsToFix,storage_techs,vintage))
7303              - storage_reservoirParam(nodesModelToCalc,yearsToFix,storage_techs,"unitsUpperLimit");
7304      storage_unitsDelta(nodesModelToCalc,yearsToFix,storage_techs)
7305          $(storage_unitsDelta(nodesModelToCalc,yearsToFix,storage_techs) < 0) = 0;
7306   
7307      storage_unitsBuild.l(nodesModelToCalc,yearsToFix,storage_techs,vintage)
7308          $storage_availTech(nodesModelToCalc,yearsToFix,storage_techs,vintage)
7309          = storage_unitsBuild.l(nodesModelToCalc,yearsToFix,storage_techs,vintage)
7310              - storage_unitsDelta(nodesModelToCalc,yearsToFix,storage_techs);
7311   
7312      storage_unitsBuild.l(nodesModelToCalc,yearsToFix,storage_techs,vintage)
7313          $(storage_unitsBuild.l(nodesModelToCalc,yearsToFix,storage_techs,vintage) < 0) = 0;
7314      storage_unitsBuild.fx(nodesModelToCalc,yearsToFix,storage_techs,vintage)
7315          = storage_unitsBuild.l(nodesModelToCalc,yearsToFix,storage_techs,vintage);
7316      storage_unitsDecom.l(nodesModelToCalc,yearsToFix,storage_techs,vintage)
7317          $(storage_unitsDecom.l(nodesModelToCalc,yearsToFix,storage_techs,vintage) < 0) = 0;
7318      storage_unitsDecom.fx(nodesModelToCalc,yearsToFix,storage_techs,vintage)
7319          = storage_unitsDecom.l(nodesModelToCalc,yearsToFix,storage_techs,vintage);
7320      storage_unitsTotal.fx(nodesModelToCalc,yearsToFix,storage_techs,vintage)
7321          = storage_unitsTotal.l(nodesModelToCalc,yearsToFix,storage_techs,vintage);
7322   
7323   
7324      transfer_linksDelta(linksModelToCalc,yearsToFix,transfer_techs)
7325          $(sum(yearsToCalc$sameas(yearsToFix, yearsToCalc), 1))
7326          = sum(vintage, transfer_linksTotal.l(linksModelToCalc,yearsToFix,transfer_techs,vintage))
7327              - transfer_linksParam(linksModelToCalc,yearsToFix,transfer_techs,"linksUpperLimit");
7328      transfer_linksDelta(linksModelToCalc,yearsToFix,transfer_techs)
7329          $(transfer_linksDelta(linksModelToCalc,yearsToFix,transfer_techs) < 0) = 0;
7330   
7331      transfer_linksBuild.l(linksModelToCalc,yearsToFix,transfer_techs,vintage)
7332          $transfer_availTech(linksModelToCalc,yearsToFix,transfer_techs,vintage)
7333          = transfer_linksBuild.l(linksModelToCalc,yearsToFix,transfer_techs,vintage)
7334              - transfer_linksDelta(linksModelToCalc,yearsToFix,transfer_techs);
7335   
7336      transfer_linksBuild.l(linksModelToCalc,yearsToFix,transfer_techs,vintage)
7337          $(transfer_linksBuild.l(linksModelToCalc,yearsToFix,transfer_techs,vintage) < 0) = 0;
7338      transfer_linksBuild.fx(linksModelToCalc,yearsToFix,transfer_techs,vintage)
7339          = transfer_linksBuild.l(linksModelToCalc,yearsToFix,transfer_techs,vintage);
7340      transfer_linksDecom.l(linksModelToCalc,yearsToFix,transfer_techs,vintage)
7341          $(transfer_linksDecom.l(linksModelToCalc,yearsToFix,transfer_techs,vintage) < 0) = 0;
7342      transfer_linksDecom.fx(linksModelToCalc,yearsToFix,transfer_techs,vintage)
7343          = transfer_linksDecom.l(linksModelToCalc,yearsToFix,transfer_techs,vintage);
7344      transfer_linksTotal.fx(linksModelToCalc,yearsToFix,transfer_techs,vintage)
7345          = transfer_linksTotal.l(linksModelToCalc,yearsToFix,transfer_techs,vintage);
7346   
7347      accounting_indicator.fx(accNodesModel,accYearsToFix,indicator)
7348          = accounting_indicator.l(accNodesModel,accYearsToFix,indicator);
7349   
7350  * Optimize and log values
7351      if (opti_sense < 0,
7352      solve remix minimizing accounting_objective using mip;
7353      else
7354      solve remix maximizing accounting_objective using mip;
7355      );
7356   
7357      put_utility 'log' / 'Model status ' remix.modelstat:0:0;
7358      put_utility 'log' / 'Objective value ' accounting_objective.l:0:3;
7359   
7360  );
7361   
7365   
7366  * if method is pareto solve the model once and afterwards run multiple points along the pareto front
INCLUDE    C:\Local\REMix\framework\remix\framework\model\source\methods\pareto.gms
7368  * SPDX-FileCopyrightText: Copyright (c) 2023 German Aerospace Center (DLR)
7369  * SPDX-License-Identifier: BSD-3-Clause
7370   
7374   
7375  * if method is mga solve the model once and afterwards maximize the length metric of indicators
INCLUDE    C:\Local\REMix\framework\remix\framework\model\source\methods\mga.gms
7377  * SPDX-FileCopyrightText: Copyright (c) 2023 German Aerospace Center (DLR)
7378  * SPDX-License-Identifier: BSD-3-Clause
7379   
7383   
7384  * if method is iternodes run the model by iterating through all nodesToCalc
INCLUDE    C:\Local\REMix\framework\remix\framework\model\source\methods\iternodes.gms
7386  * SPDX-FileCopyrightText: Copyright (c) 2023 German Aerospace Center (DLR)
7387  * SPDX-License-Identifier: BSD-3-Clause
7388   
7392   
7393  * if postcalc is one write the results gdx
INCLUDE    C:\Local\REMix\framework\remix\framework\model\source\postcalc\definition.gms
7395  * SPDX-FileCopyrightText: Copyright (c) 2023 German Aerospace Center (DLR)
7396  * SPDX-License-Identifier: BSD-3-Clause
7397   
7399   
7400  * ==== indicator accounting ====
7401   
7402  indicator_accounting_detailed(indicator,nodesModelToCalc,yearsToCalc,techs)
7403      =
7404  * == converters ==
7405      sum ((converter_techs(techs),vintage)
7406                  $(converter_availTech(nodesModelToCalc,yearsToCalc,converter_techs,vintage)
7407                      and accounting_converterUnits(indicator,nodesModelToCalc,converter_techs,vintage,"useAnnuity") = 0),
7408          converter_unitsBuild.l(nodesModelToCalc,yearsToCalc,converter_techs,vintage)
7409          * accounting_converterUnits(indicator,nodesModelToCalc,converter_techs,vintage,"perUnitBuild"))
7410   
7411      + sum ((years_a,converter_techs(techs),vintage)
7412                  $(converter_availTech(nodesModelToCalc,years_a,converter_techs,vintage)
7413                      and accounting_converterUnits(indicator,nodesModelToCalc,converter_techs,vintage,"useAnnuity") = 1
7414                      and years_a.val + accounting_converterUnits(indicator,nodesModelToCalc,converter_techs,vintage,"amorTime") > yearsToCalc.val
7415                      and years_a.val <= yearsToCalc.val ),
7416          converter_unitsBuild.l(nodesModelToCalc,years_a,converter_techs,vintage)
7417          * accounting_converterUnits(indicator,nodesModelToCalc,converter_techs,vintage,"perUnitBuild")
7418          * accounting_annuityFactor_converter(indicator,nodesModelToCalc,converter_techs,vintage) )
7419   
7420      + sum ((converter_techs(techs),vintage)
7421                  $converter_usedTech(nodesModelToCalc,yearsToCalc,converter_techs,vintage),
7422          converter_unitsDecom.l(nodesModelToCalc,yearsToCalc,converter_techs,vintage)
7423          * accounting_converterUnits(indicator,nodesModelToCalc,converter_techs,vintage,"perUnitDecom")
7424   
7425          + converter_unitsTotal.l(nodesModelToCalc,yearsToCalc,converter_techs,vintage)
7426          * accounting_converterUnits(indicator,nodesModelToCalc,converter_techs,vintage,"perUnitTotal") )
7427   
7428      + sum ((timeModelToCalc,converter_techs(techs),vintage,activity)
7429                  $converter_usedTechAct(nodesModelToCalc,yearsToCalc,converter_techs,vintage,activity),
7430          converter_activity.l(timeModelToCalc,nodesModelToCalc,yearsToCalc,converter_techs,vintage,activity)
7431          * timeLength(timeModelToCalc)
7432          * accounting_converterActivity(indicator,nodesModelToCalc,converter_techs,vintage,activity,"perActivity") )
7433   
7434      + sum ((timeModelToCalc,converter_techs(techs),vintage)
7435                  $converter_usedTech(nodesModelToCalc,yearsToCalc,converter_techs,vintage),
7436          converter_unitStartups.l(timeModelToCalc,nodesModelToCalc,yearsToCalc,converter_techs,vintage)
7437          * accounting_converterStartup(indicator,nodesModelToCalc,converter_techs,vintage,"perStartup") )
7438   
7439      + sum ((timeModelToCalc,converter_techs(techs),vintage)
7440                  $converter_usedTech(nodesModelToCalc,yearsToCalc,converter_techs,vintage),
7441          converter_rampPos.l(timeModelToCalc,nodesModelToCalc,yearsToCalc,converter_techs,vintage)
7442          * (accounting_converterStartup(indicator,nodesModelToCalc,converter_techs,vintage,"perRamp")
7443              + accounting_converterStartup(indicator,nodesModelToCalc,converter_techs,vintage,"perRampPos"))
7444   
7445          + converter_rampNeg.l(timeModelToCalc,nodesModelToCalc,yearsToCalc,converter_techs,vintage)
7446          * (accounting_converterStartup(indicator,nodesModelToCalc,converter_techs,vintage,"perRamp")
7447              + accounting_converterStartup(indicator,nodesModelToCalc,converter_techs,vintage,"perRampNeg")))
7448   
7449  * == storage ==
7450      + sum ((storage_techs(techs),vintage)
7451                  $(storage_availTech(nodesModelToCalc,yearsToCalc,storage_techs,vintage)
7452                      and accounting_storageUnits(indicator,nodesModelToCalc,storage_techs,vintage,"useAnnuity") = 0),
7453          storage_unitsBuild.l(nodesModelToCalc,yearsToCalc,storage_techs,vintage)
7454          * accounting_storageUnits(indicator,nodesModelToCalc,storage_techs,vintage,"perUnitBuild") )
7455   
7456      + sum ((years_a,storage_techs(techs),vintage)
7457                  $(storage_availTech(nodesModelToCalc,yearsToCalc,storage_techs,vintage)
7458                      and accounting_storageUnits(indicator,nodesModelToCalc,storage_techs,vintage,"useAnnuity") = 1
7459                      and years_a.val + accounting_storageUnits(indicator,nodesModelToCalc,storage_techs,vintage,"amorTime") > yearsToCalc.val
7460                      and years_a.val <= yearsToCalc.val ),
7461          storage_unitsBuild.l(nodesModelToCalc,years_a,storage_techs,vintage)
7462          * accounting_storageUnits(indicator,nodesModelToCalc,storage_techs,vintage,"perUnitBuild")
7463          * accounting_annuityFactor_storage(indicator,nodesModelToCalc,storage_techs,vintage) )
7464   
7465      + sum ((storage_techs(techs),vintage)
7466                  $storage_usedTech(nodesModelToCalc,yearsToCalc,storage_techs,vintage),
7467          storage_unitsDecom.l(nodesModelToCalc,yearsToCalc,storage_techs,vintage)
7468          * accounting_storageUnits(indicator,nodesModelToCalc,storage_techs,vintage,"perUnitDecom")
7469   
7470          + storage_unitsTotal.l(nodesModelToCalc,yearsToCalc,storage_techs,vintage)
7471          * accounting_storageUnits(indicator,nodesModelToCalc,storage_techs,vintage,"perUnitTotal") )
7472   
7473  * == transfer ==
7474      + sum ((linksModel,transfer_techs(techs),vintage)
7475                  $(transfer_availTech(linksModel,yearsToCalc,transfer_techs,vintage)
7476                      and linksModelToCalc(linksModel)
7477                      and transfer_incidenceModel(nodesModelToCalc,linksModel) <> 0
7478                      and accounting_transferLinks(indicator,linksModel,transfer_techs,vintage,"useAnnuity") = 0),
7479          0.5
7480          * transfer_linksBuild.l(linksModel,yearsToCalc,transfer_techs,vintage)
7481          * accounting_transferLinks(indicator,linksModel,transfer_techs,vintage,"perLinkBuild") )
7482   
7483      + sum ((linksModel,years_a,transfer_techs(techs),vintage)
7484                  $(transfer_availTech(linksModel,yearsToCalc,transfer_techs,vintage)
7485                      and linksModelToCalc(linksModel)
7486                      and transfer_incidenceModel(nodesModelToCalc,linksModel) <> 0
7487                      and accounting_transferLinks(indicator,linksModel,transfer_techs,vintage,"useAnnuity") = 1
7488                      and years_a.val + accounting_transferLinks(indicator,linksModel,transfer_techs,vintage,"amorTime") > yearsToCalc.val
7489                      and years_a.val <= yearsToCalc.val ),
7490          0.5
7491          * transfer_linksBuild.l(linksModel,years_a,transfer_techs,vintage)
7492          * accounting_transferLinks(indicator,linksModel,transfer_techs,vintage,"perLinkBuild")
7493          * accounting_annuityFactor_transferLink(indicator,linksModel,transfer_techs,vintage) )
7494   
7495      + sum ((linksModel,transfer_techs(techs),vintage,link_types)
7496                  $(transfer_availTech(linksModel,yearsToCalc,transfer_techs,vintage)
7497                      and linksModelToCalc(linksModel)
7498                      and transfer_incidenceModel(nodesModelToCalc,linksModel) <> 0
7499                      and accounting_transferPerLength(indicator,linksModel,transfer_techs,vintage,link_types,"useAnnuity") = 0 ),
7500          0.5
7501          * transfer_linksBuild.l(linksModel,yearsToCalc,transfer_techs,vintage)
7502          * transfer_lengthParam(linksModel,link_types,"length")
7503          * accounting_transferPerLength(indicator,linksModel,transfer_techs,vintage,link_types,"perLengthBuild") )
7504   
7505      + sum ((linksModel,years_a,transfer_techs(techs),vintage,link_types)
7506                  $(transfer_availTech(linksModel,yearsToCalc,transfer_techs,vintage)
7507                      and linksModelToCalc(linksModel)
7508                      and transfer_incidenceModel(nodesModelToCalc,linksModel) <> 0
7509                      and accounting_transferPerLength(indicator,linksModel,transfer_techs,vintage,link_types,"useAnnuity") = 1
7510                      and years_a.val + accounting_transferPerLength(indicator,linksModel,transfer_techs,vintage,link_types,"amorTime") > yearsToCalc.val
7511                      and years_a.val <= yearsToCalc.val ),
7512          0.5
7513          * transfer_linksBuild.l(linksModel,years_a,transfer_techs,vintage)
7514          * transfer_lengthParam(linksModel,link_types,"length")
7515          * accounting_transferPerLength(indicator,linksModel,transfer_techs,vintage,link_types,"perLengthBuild")
7516          * accounting_annuityFactor_transferDistance(indicator,linksModel,transfer_techs,vintage,link_types) )
7517   
7518      + sum ((linksModel,transfer_techs(techs),vintage)
7519                  $(transfer_usedTech(linksModel,yearsToCalc,transfer_techs,vintage)
7520                      and linksModelToCalc(linksModel)
7521                      and transfer_incidenceModel(nodesModelToCalc,linksModel) <> 0 ),
7522          0.5
7523          * transfer_linksDecom.l(linksModel,yearsToCalc,transfer_techs,vintage)
7524          * accounting_transferLinks(indicator,linksModel,transfer_techs,vintage,"perLinkDecom")
7525   
7526          + 0.5
7527          * transfer_linksTotal.l(linksModel,yearsToCalc,transfer_techs,vintage)
7528          * accounting_transferLinks(indicator,linksModel,transfer_techs,vintage,"perLinkTotal")
7529   
7530          + 0.5
7531          * sum (link_types,
7532              transfer_linksDecom.l(linksModel,yearsToCalc,transfer_techs,vintage)
7533              * transfer_lengthParam(linksModel,link_types,"length")
7534              * accounting_transferPerLength(indicator,linksModel,transfer_techs,vintage,link_types,"perLengthDecom")
7535   
7536              + transfer_linksTotal.l(linksModel,yearsToCalc,transfer_techs,vintage)
7537              * transfer_lengthParam(linksModel,link_types,"length")
7538              * accounting_transferPerLength(indicator,linksModel,transfer_techs,vintage,link_types,"perLengthTotal"))
7539   
7540          + 0.5
7541          * sum (timeModelToCalc,
7542              transfer_flowAlong.l(timeModelToCalc,linksModel,yearsToCalc,transfer_techs,vintage)
7543              * timeLength(timeModelToCalc)
7544              * ( accounting_transferLinks(indicator,linksModel,transfer_techs,vintage,"perFlow")
7545                  + accounting_transferLinks(indicator,linksModel,transfer_techs,vintage,"perFlowAlong"))
7546   
7547              + transfer_flowAgainst.l(timeModelToCalc,linksModel,yearsToCalc,transfer_techs,vintage)
7548              * timeLength(timeModelToCalc)
7549              * ( accounting_transferLinks(indicator,linksModel,transfer_techs,vintage,"perFlow")
7550                  + accounting_transferLinks(indicator,linksModel,transfer_techs,vintage,"perFlowAgainst")))
7551   
7552          + 0.5
7553          * sum ((timeModelToCalc, link_types),
7554              transfer_flowAlong.l(timeModelToCalc,linksModel,yearsToCalc,transfer_techs,vintage)
7555              * timeLength(timeModelToCalc)
7556              * transfer_lengthParam(linksModel,link_types,"length")
7557              * (accounting_transferPerLength(indicator,linksModel,transfer_techs,vintage,link_types,"perFlow")
7558                  + accounting_transferPerLength(indicator,linksModel,transfer_techs,vintage,link_types,"perFlowAlong"))
7559   
7560              + transfer_flowAgainst.l(timeModelToCalc,linksModel,yearsToCalc,transfer_techs,vintage)
7561              * timeLength(timeModelToCalc)
7562              * transfer_lengthParam(linksModel,link_types,"length")
7563              * (accounting_transferPerLength(indicator,linksModel,transfer_techs,vintage,link_types,"perFlow")
7564                  + accounting_transferPerLength(indicator,linksModel,transfer_techs,vintage,link_types,"perFlowAgainst"))))
7565   
7566   
7567  * == sources / sinks ==
7568      + sum ((timeModelToCalc,sourcesink_techs(techs),commodity)
7569              $sourcesink_enabled(nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity),
7570          sourcesink_flow.l(timeModelToCalc,nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity)
7571          * timeLength(timeModelToCalc)
7572          * accounting_sourcesinkFlow(indicator,nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity,"perFlow"))
7573      ;
7574   
7575   
7576  * ==== full set of main indicators ====
7577   
7578  indicator_accounting(accNodesModel,accYears,indicator)
7579      $sum((accNodesModel_a,accYears_a,indicator_a)
7580              $compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a), 1)
7581      =
7582      + sum((accNodesModel_a,accYears_a,indicator_a)
7583              $(compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
7584                  and variableIndicators(accNodesModel_a,accYears_a,indicator_a)),
7585          compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
7586          * accounting_indicator.l(accNodesModel_a,accYears_a,indicator_a))
7587   
7588      + sum((accNodesModel_a,accYears_a,indicator_a)
7589              $(compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)),
7590          compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
7591          * (sum((nodesModelToCalc,yearsToCalc,techs)
7592                  $(sameas(accNodesModel_a, nodesModelToCalc)
7593                      and sameas(accYears_a, yearsToCalc)),
7594                  indicator_accounting_detailed(indicator_a,nodesModelToCalc,yearsToCalc,techs))))
7595      ;
7596   
7597  indicator_accounting_comp(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
7598      $compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
7599      =
7600          compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
7601          * accounting_indicator.l(accNodesModel_a,accYears_a,indicator_a)
7602              $variableIndicators(accNodesModel_a,accYears_a,indicator_a)
7603   
7604          + compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
7605          * (sum((nodesModelToCalc,yearsToCalc,techs)
7606                  $(sameas(accNodesModel_a, nodesModelToCalc)
7607                      and sameas(accYears_a, yearsToCalc)),
7608                  indicator_accounting_detailed(indicator_a,nodesModelToCalc,yearsToCalc,techs)))
7609      ;
7610   
7611  indicator_accounting_ref(accNodesModel,accYears,indicator)
7612      $accounting_indicator.l(accNodesModel,accYears,indicator)
7613      = accounting_indicator.l(accNodesModel,accYears,indicator);
7614   
7615  * ==== link-specific indicator accounting ====
7616   
7617  indicator_accounting_links(indicator,nodesModelToCalc,nodesModelToCalc_a,linksModelToCalc,yearsToCalc,techs)
7618      $(transfer_incidenceModel(nodesModelToCalc,linksModelToCalc) < 0
7619          and transfer_incidenceModel(nodesModelToCalc_a,linksModelToCalc) > 0)
7620      =
7621      sum ((transfer_techs(techs),vintage)
7622                  $(transfer_availTech(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
7623                      and accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"useAnnuity") = 0),
7624          transfer_linksBuild.l(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
7625          * accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"perLinkBuild") )
7626   
7627      + sum ((years_a,transfer_techs(techs),vintage)
7628                  $(transfer_availTech(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
7629                      and accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"useAnnuity") = 1
7630                      and years_a.val + accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"amorTime") > yearsToCalc.val
7631                      and years_a.val <= yearsToCalc.val ),
7632          transfer_linksBuild.l(linksModelToCalc,years_a,transfer_techs,vintage)
7633          * accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"perLinkBuild")
7634          * accounting_annuityFactor_transferLink(indicator,linksModelToCalc,transfer_techs,vintage) )
7635   
7636      + sum ((transfer_techs(techs),vintage,link_types)
7637                  $(transfer_availTech(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
7638                      and accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"useAnnuity") = 0 ),
7639          transfer_linksBuild.l(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
7640          * transfer_lengthParam(linksModelToCalc,link_types,"length")
7641          * accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"perLengthBuild") )
7642   
7643      + sum ((years_a,transfer_techs(techs),vintage,link_types)
7644                  $(transfer_availTech(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
7645                      and accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"useAnnuity") = 1
7646                      and years_a.val + accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"amorTime") > yearsToCalc.val
7647                      and years_a.val <= yearsToCalc.val ),
7648          transfer_linksBuild.l(linksModelToCalc,years_a,transfer_techs,vintage)
7649          * transfer_lengthParam(linksModelToCalc,link_types,"length")
7650          * accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"perLengthBuild")
7651          * accounting_annuityFactor_transferDistance(indicator,linksModelToCalc,transfer_techs,vintage,link_types) )
7652   
7653      + sum ((transfer_techs(techs),vintage)
7654                  $(transfer_usedTech(linksModelToCalc,yearsToCalc,transfer_techs,vintage)),
7655          transfer_linksDecom.l(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
7656          * accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"perLinkDecom")
7657   
7658          + transfer_linksTotal.l(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
7659          * accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"perLinkTotal")
7660   
7661          + sum (link_types,
7662              transfer_linksDecom.l(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
7663              * transfer_lengthParam(linksModelToCalc,link_types,"length")
7664              * accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"perLengthDecom")
7665   
7666              + transfer_linksTotal.l(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
7667              * transfer_lengthParam(linksModelToCalc,link_types,"length")
7668              * accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"perLengthTotal"))
7669   
7670          + sum (timeModelToCalc,
7671              transfer_flowAlong.l(timeModelToCalc,linksModelToCalc,yearsToCalc,transfer_techs,vintage)
7672              * timeLength(timeModelToCalc)
7673              * ( accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"perFlow")
7674                  + accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"perFlowAlong"))
7675   
7676              + transfer_flowAgainst.l(timeModelToCalc,linksModelToCalc,yearsToCalc,transfer_techs,vintage)
7677              * timeLength(timeModelToCalc)
7678              * ( accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"perFlow")
7679                  + accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"perFlowAgainst")))
7680   
7681          + sum ((timeModelToCalc, link_types),
7682              transfer_flowAlong.l(timeModelToCalc,linksModelToCalc,yearsToCalc,transfer_techs,vintage)
7683              * timeLength(timeModelToCalc)
7684              * transfer_lengthParam(linksModelToCalc,link_types,"length")
7685              * (accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"perFlow")
7686                  + accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"perFlowAlong"))
7687   
7688              + transfer_flowAgainst.l(timeModelToCalc,linksModelToCalc,yearsToCalc,transfer_techs,vintage)
7689              * timeLength(timeModelToCalc)
7690              * transfer_lengthParam(linksModelToCalc,link_types,"length")
7691              * (accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"perFlow")
7692                  + accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"perFlowAgainst")))
7693      );
7694   
7695   
7696  * == converter capacities ==
7697   
7698  converter_ratedInput(converter_techs,vintage,commodity)
7699      $(converter_techParam(converter_techs,vintage,"lifeTime") > 0)
7700      = smin(activity$converter_usedAct(converter_techs,vintage,activity),
7701              converter_coefficient(converter_techs,vintage,activity,commodity,"coefficient"));
7702  converter_ratedInput(converter_techs,vintage,commodity)
7703      $(converter_ratedInput(converter_techs,vintage,commodity) > 0)
7704      = 0;
7705   
7706  converter_ratedOutput(converter_techs,vintage,commodity)
7707      $(converter_techParam(converter_techs,vintage,"lifeTime") > 0)
7708      = smax(activity$converter_usedAct(converter_techs,vintage,activity),
7709              converter_coefficient(converter_techs,vintage,activity,commodity,"coefficient"));
7710  converter_ratedOutput(converter_techs,vintage,commodity)
7711      $(converter_ratedOutput(converter_techs,vintage,commodity) < 0)
7712      = 0;
7713   
7714  converter_ratedOutput_min(nodesModelToCalc,years,converter_techs(techs),commodity)
7715      $sum(vintage$(converter_usedTech(nodesModelToCalc,years,converter_techs,vintage)
7716          and converter_ratedOutput(converter_techs,vintage,commodity)), 1)
7717      = smin(vintage$(converter_usedTech(nodesModelToCalc,years,converter_techs,vintage)
7718              and converter_ratedOutput(converter_techs,vintage,commodity)),
7719          converter_ratedOutput(converter_techs,vintage,commodity));
7720   
7721  converter_ratedOutput_max(nodesModelToCalc,years,converter_techs(techs),commodity)
7722      $sum(vintage$(converter_usedTech(nodesModelToCalc,years,converter_techs,vintage)
7723          and converter_ratedOutput(converter_techs,vintage,commodity)), 1)
7724      = smax(vintage$(converter_usedTech(nodesModelToCalc,years,converter_techs,vintage)
7725              and converter_ratedOutput(converter_techs,vintage,commodity)),
7726          converter_ratedOutput(converter_techs,vintage,commodity));
7727   
7728  converter_units_ext(map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,years),converter_techs(techs),vintage,"build")
7729      = converter_unitsBuild.l(nodesModelToCalc,years,converter_techs,vintage);
7730   
7731  converter_units_ext(map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,years),converter_techs(techs),vintage,"decom")
7732      = converter_unitsDecom.l(nodesModelToCalc,years,converter_techs,vintage);
7733   
7734  converter_units_ext(map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,years),converter_techs(techs),vintage,"total")
7735      = converter_unitsTotal.l(nodesModelToCalc,years,converter_techs,vintage);
7736   
7737  converter_caps_ext(map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,years),converter_techs(techs),vintage,commodity,capType)
7738      $(converter_ratedOutput(converter_techs,vintage,commodity))
7739      = converter_units_ext(accNodesModel,nodesModelToCalc,accYears,years,techs,vintage,capType)
7740          * converter_ratedOutput(converter_techs,vintage,commodity);
7741   
7742  converter_caps_ext(map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,years),converter_techs(techs),vintage,commodity,"lowerLimit")
7743      $(converter_usedTech(nodesModelToCalc,years,converter_techs,vintage)
7744          and converter_capacityParam(nodesModelToCalc,years,converter_techs,"unitsLowerLimit") > 0
7745          and converter_ratedOutput_min(nodesModelToCalc,years,converter_techs,commodity))
7746      = converter_capacityParam(nodesModelToCalc,years,converter_techs,"unitsLowerLimit")
7747          * converter_ratedOutput_min(nodesModelToCalc,years,converter_techs,commodity);
7748   
7749  converter_caps_ext(map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,years),converter_techs(techs),vintage,commodity,"upperLimit")
7750      $(converter_usedTech(nodesModelToCalc,years,converter_techs,vintage)
7751          and converter_capacityParam(nodesModelToCalc,years,converter_techs,"unitsUpperLimit") < inf
7752          and converter_ratedOutput_min(nodesModelToCalc,years,converter_techs,commodity))
7753      = converter_capacityParam(nodesModelToCalc,years,converter_techs,"unitsUpperLimit")
7754          * converter_ratedOutput_max(nodesModelToCalc,years,converter_techs,commodity);
7755   
7756  converter_caps(accNodesModel,accYears,converter_techs(techs),commodity,capType)
7757      = sum((nodesModelToCalc,years,vintage)
7758              $(map_accNodesPostCalc(accNodesModel,nodesModelToCalc)
7759                  and map_accYearsPostCalc(accYears,years)),
7760          converter_caps_ext(accNodesModel,nodesModelToCalc,accYears,years,converter_techs,vintage,commodity,capType));
7761  option clear = converter_caps_ext;
7762   
7763  converter_units(accNodesModel,accYears,converter_techs(techs),vintage,capType)
7764      = sum((nodesModelToCalc,years)
7765              $(map_accNodesPostCalc(accNodesModel,nodesModelToCalc)
7766                  and map_accYearsPostCalc(accYears,years)),
7767          converter_units_ext(accNodesModel,nodesModelToCalc,accYears,years,converter_techs,vintage,capType));
7768  option clear = converter_units_ext;
7769   
7770   
7771  * ==== transfer capacities ====
7772   
7773  max_transfer_coefficient(transfer_techs(techs),commodity)
7774          $(smax(vintage, transfer_coefficient(transfer_techs,vintage,commodity,"coefficient")) > 0)
7775          = smax(vintage, transfer_coefficient(transfer_techs,vintage,commodity,"coefficient"));
7776   
7777  min_transfer_coefficient(transfer_techs(techs),commodity)
7778          $(smin(vintage, transfer_coefficient(transfer_techs,vintage,commodity,"coefficient")) > 0)
7779          = smin(vintage, transfer_coefficient(transfer_techs,vintage,commodity,"coefficient"));
7780   
7781   
7782  transfer_links(linksModel,years,transfer_techs,vintage,"build")
7783      = transfer_linksBuild.l(linksModel,years,transfer_techs,vintage);
7784   
7785  transfer_links(linksModel,years,transfer_techs,vintage,"decom")
7786      = transfer_linksDecom.l(linksModel,years,transfer_techs,vintage);
7787   
7788  transfer_links(linksModel,years,transfer_techs,vintage,"total")
7789      = transfer_linksTotal.l(linksModel,years,transfer_techs,vintage);
7790   
7791  transfer_caps(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,years,transfer_techs(techs),commodity,capType)
7792      $(transfer_incidenceModel(nodesModelToCalc_start,linksModel) < 0
7793          and transfer_incidenceModel(nodesModelToCalc_end,linksModel) > 0)
7794      = sum(vintage,
7795          transfer_links(linksModel,years,transfer_techs,vintage,capType)
7796          * transfer_coefficient(transfer_techs,vintage,commodity,"coefficient"));
7797   
7798  transfer_caps(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,years,transfer_techs(techs),commodity,"lowerLimit")
7799      $(transfer_linksParam(linksModel,years,transfer_techs,'linksLowerLimit') > 0
7800          and transfer_incidenceModel(nodesModelToCalc_start,linksModel) < 0
7801          and transfer_incidenceModel(nodesModelToCalc_end,linksModel) > 0
7802          and sum(vintage$(transfer_usedTech(linksModel,years,transfer_techs,vintage)
7803                              and transfer_coefficient(transfer_techs,vintage,commodity,"coefficient")), 1))
7804      = transfer_linksParam(linksModel,years,transfer_techs,'linksLowerLimit')
7805          * min_transfer_coefficient(transfer_techs,commodity);
7806   
7807  transfer_caps(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,years,transfer_techs(techs),commodity,"upperLimit")
7808      $(transfer_linksParam(linksModel,years,transfer_techs,'linksUpperLimit') < inf
7809          and transfer_incidenceModel(nodesModelToCalc_start,linksModel) < 0
7810          and transfer_incidenceModel(nodesModelToCalc_end,linksModel) > 0
7811          and sum(vintage$(transfer_usedTech(linksModel,years,transfer_techs,vintage)
7812                              and transfer_coefficient(transfer_techs,vintage,commodity,"coefficient")), 1))
7813      = transfer_linksParam(linksModel,years,transfer_techs,'linksUpperLimit')
7814          * max_transfer_coefficient(transfer_techs,commodity);
7815   
7816   
7817  * ==== transfer flows ====
7818   
7819  transfer_flows(timeModelToCalc,nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs(techs),commodity)
7820      $(transfer_incidenceModel(nodesModelToCalc_start,linksModel) < 0
7821          and transfer_incidenceModel(nodesModelToCalc_end,linksModel) > 0)
7822      = sum(vintage,
7823          ( transfer_flowAlong.l(timeModelToCalc,linksModel,yearsToCalc,transfer_techs,vintage)
7824              - transfer_flowAgainst.l(timeModelToCalc,linksModel,yearsToCalc,transfer_techs,vintage) )
7825          * timeLength(timeModelToCalc)
7826          * transfer_coefficient(transfer_techs,vintage,commodity,"coefficient"));
7827   
7828  transfer_flows_annual(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs(techs),commodity,"netto")
7829      = sum(timeModelToCalc,
7830          transfer_flows(timeModelToCalc,nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs,commodity));
7831   
7832  transfer_flows_annual(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs(techs),commodity,"positive")
7833      = sum(timeModelToCalc
7834              $(transfer_flows(timeModelToCalc,nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs,commodity) > 0),
7835          transfer_flows(timeModelToCalc,nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs,commodity));
7836   
7837  transfer_flows_annual(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs(techs),commodity,"negative")
7838      = sum(timeModelToCalc
7839              $(transfer_flows(timeModelToCalc,nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs,commodity) < 0),
7840          transfer_flows(timeModelToCalc,nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs,commodity));
7841   
7842  transfer_flows_annual(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs(techs),commodity,"brutto")
7843      = transfer_flows_annual(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs,commodity,"positive")
7844          - transfer_flows_annual(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs,commodity,"negative");
7845   
7846  transfer_flows_annual(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs(techs),commodity,"flh")
7847      $(transfer_flows_annual(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs,commodity,"brutto") > 0
7848          and transfer_caps(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs,commodity,"total") > 0)
7849      = transfer_flows_annual(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs,commodity,"brutto")
7850          / transfer_caps(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs,commodity,"total");
7851   
7852  transfer_losses(timeModelToCalc,nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs(techs),commodity)
7853      $(transfer_incidenceModel(nodesModelToCalc_start,linksModel) < 0
7854          and transfer_incidenceModel(nodesModelToCalc_end,linksModel) > 0)
7855      = -1 * abs(sum(vintage,
7856          ( transfer_flowAlong.l(timeModelToCalc,linksModel,yearsToCalc,transfer_techs,vintage)
7857              - transfer_flowAgainst.l(timeModelToCalc,linksModel,yearsToCalc,transfer_techs,vintage) )
7858          * ( transfer_coefPerFlow(transfer_techs,vintage,commodity,"coefPerFlow")
7859              + sum(link_types,
7860                  transfer_coefPerLength(transfer_techs,vintage,commodity,link_types,"coefPerLength")
7861                  * transfer_lengthParam(linksModel,link_types,"length")))))
7862          * timeLength(timeModelToCalc);
7863   
7864  transfer_losses_annual(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs(techs),commodity,"netto")
7865      = sum(timeModelToCalc,
7866          transfer_losses(timeModelToCalc,nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs,commodity));
7867   
7868   
7869  * ==== storage capacities ====
7870   
7871  storage_size_max(nodesModelToCalc,years,storage_techs(techs),commodity)
7872      $sum(vintage$(storage_usedTech(nodesModelToCalc,years,storage_techs,vintage)
7873              and storage_usedCom(storage_techs,vintage,commodity)
7874              and storage_sizeParam(storage_techs,vintage,commodity,"size")), 1)
7875      = smax(vintage$(storage_usedTech(nodesModelToCalc,years,storage_techs,vintage)
7876              and storage_usedCom(storage_techs,vintage,commodity)
7877              and storage_sizeParam(storage_techs,vintage,commodity,"size")),
7878          storage_sizeParam(storage_techs,vintage,commodity,"size"));
7879   
7880  storage_size_min(nodesModelToCalc,years,storage_techs(techs),commodity)
7881      $sum(vintage$(storage_usedTech(nodesModelToCalc,years,storage_techs,vintage)
7882              and storage_usedCom(storage_techs,vintage,commodity)
7883              and storage_sizeParam(storage_techs,vintage,commodity,"size")), 1)
7884      = smin(vintage$(storage_usedTech(nodesModelToCalc,years,storage_techs,vintage)
7885              and storage_usedCom(storage_techs,vintage,commodity)
7886              and storage_sizeParam(storage_techs,vintage,commodity,"size")),
7887          storage_sizeParam(storage_techs,vintage,commodity,"size"));
7888   
7889  storage_units_ext(map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,years),storage_techs(techs),vintage,"build")
7890      $storage_usedTech(nodesModelToCalc,years,storage_techs,vintage)
7891      = storage_unitsBuild.l(nodesModelToCalc,years,storage_techs,vintage);
7892   
7893  storage_units_ext(map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,years),storage_techs(techs),vintage,"decom")
7894      $storage_usedTech(nodesModelToCalc,years,storage_techs,vintage)
7895      = storage_unitsDecom.l(nodesModelToCalc,years,storage_techs,vintage);
7896   
7897  storage_units_ext(map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,years),storage_techs(techs),vintage,"total")
7898      $storage_usedTech(nodesModelToCalc,years,storage_techs,vintage)
7899      = storage_unitsTotal.l(nodesModelToCalc,years,storage_techs,vintage);
7900   
7901  storage_caps_ext(map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,years),storage_techs(techs),vintage,commodity,capType)
7902      $storage_sizeParam(storage_techs,vintage,commodity,"size")
7903      = storage_units_ext(accNodesModel,nodesModelToCalc,accYears,years,storage_techs,vintage,capType)
7904          * storage_sizeParam(storage_techs,vintage,commodity,"size");
7905   
7906  storage_caps_ext(map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,years),storage_techs(techs),vintage,commodity,"lowerLimit")
7907      $(storage_usedTech(nodesModelToCalc,years,storage_techs,vintage)
7908          and storage_reservoirParam(nodesModelToCalc,years,storage_techs,"unitsLowerLimit") > 0
7909          and storage_size_min(nodesModelToCalc,years,storage_techs,commodity))
7910      = storage_reservoirParam(nodesModelToCalc,years,storage_techs,"unitsLowerLimit")
7911          * storage_size_min(nodesModelToCalc,years,storage_techs,commodity);
7912   
7913  storage_caps_ext(map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,years),storage_techs(techs),vintage,commodity,"upperLimit")
7914      $(storage_usedTech(nodesModelToCalc,years,storage_techs,vintage)
7915          and storage_reservoirParam(nodesModelToCalc,years,storage_techs,"unitsUpperLimit") < inf
7916          and storage_size_max(nodesModelToCalc,years,storage_techs,commodity))
7917      = storage_reservoirParam(nodesModelToCalc,years,storage_techs,"unitsUpperLimit")
7918          * storage_size_max(nodesModelToCalc,years,storage_techs,commodity);
7919   
7920  storage_caps_ext(map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,years),storage_techs(techs),vintage,commodity,"total_degraded")
7921      $(storage_usedCom(storage_techs,vintage,commodity)
7922          and (storage_techParam(storage_techs,vintage,"annualDegradation") > 0
7923               or storage_techParam(storage_techs,vintage,"usageDegradation")))
7924      = sum((degradation_states,yearsCom), (storage_degradationParam(storage_techs,vintage,degradation_states,"remainingCapacity")
7925                                      - (years.val - yearsCom.val) * storage_techParam(storage_techs,vintage,"annualDegradation"))
7926                                      * storage_unitsStateTracker.l(nodesModelToCalc,years,yearsCom,storage_techs,vintage,degradation_states)
7927                                      * storage_sizeParam(storage_techs,vintage,commodity,"size"));
7928   
7929  storage_caps(accNodesModel,accYears,storage_techs(techs),commodity,capType)
7930      = sum((nodesModelToCalc,years,vintage)
7931              $(map_accNodesPostCalc(accNodesModel,nodesModelToCalc)
7932                  and map_accYearsPostCalc(accYears,years)),
7933          storage_caps_ext(accNodesModel,nodesModelToCalc,accYears,years,storage_techs,vintage,commodity,capType));
7934  option clear = storage_caps_ext;
7935   
7936  storage_units(accNodesModel,accYears,storage_techs(techs),vintage,capType)
7937      = sum((nodesModelToCalc,years)
7938              $(map_accNodesPostCalc(accNodesModel,nodesModelToCalc)
7939                  and map_accYearsPostCalc(accYears,years)),
7940          storage_units_ext(accNodesModel,nodesModelToCalc,accYears,years,storage_techs,vintage,capType));
7941  option clear = storage_units_ext;
7942   
7943   
7944  * ==== storage levels and flows ====
7945   
7946  storage_flows_ext(timeModelToCalc,map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,yearsToCalc),storage_techs(techs),vintage,commodity)
7947      $(storage_usedTech(nodesModelToCalc,yearsToCalc,storage_techs,vintage) and balance_techComm(storage_techs,commodity))
7948      = storage_level.l(timeModelToCalc,nodesModelToCalc,yearsToCalc,storage_techs,vintage,commodity)
7949          - storage_level.l(timeModelToCalc--1,nodesModelToCalc,yearsToCalc,storage_techs,vintage,commodity)
7951      + storage_losses.l(timeModelToCalc,nodesModelToCalc,yearsToCalc,storage_techs,vintage,commodity)
7952          * timeLength(timeModelToCalc)
7954      ;
7955   
7956  storage_flows(timeModelToCalc,accNodesModel,accYears,storage_techs(techs),commodity)
7957      = sum((nodesModelToCalc,yearsToCalc,vintage)
7958              $(storage_usedTech(nodesModelToCalc,yearsToCalc,storage_techs,vintage) and balance_techComm(storage_techs,commodity)),
7959          storage_flows_ext(timeModelToCalc,accNodesModel,nodesModelToCalc,accYears,yearsToCalc,storage_techs,vintage,commodity));
7960  option clear = storage_flows_ext;
7961   
7962  storage_level_out_ext(timeModelToCalc,map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,yearsToCalc),storage_techs(techs),vintage,commodity)
7963      $(storage_usedTech(nodesModelToCalc,yearsToCalc,storage_techs,vintage) and balance_techComm(storage_techs,commodity))
7964      = storage_level.l(timeModelToCalc,nodesModelToCalc,yearsToCalc,storage_techs,vintage,commodity);
7965   
7966  storage_level_out(timeModelToCalc,accNodesModel,accYears,storage_techs(techs),commodity)
7967      = sum((nodesModelToCalc,yearsToCalc,vintage)
7968              $(storage_usedTech(nodesModelToCalc,yearsToCalc,storage_techs,vintage) and balance_techComm(storage_techs,commodity)),
7969          storage_level_out_ext(timeModelToCalc,accNodesModel,nodesModelToCalc,accYears,yearsToCalc,storage_techs,vintage,commodity));
7970  option clear = storage_level_out_ext;
7971   
7972  storage_flows_annual(accNodesModel,accYears,storage_techs(techs),commodity,"netto")
7973      = sum(timeModelToCalc,
7974          storage_flows(timeModelToCalc,accNodesModel,accYears,storage_techs,commodity));
7975   
7976  storage_flows_annual(accNodesModel,accYears,storage_techs(techs),commodity,"positive")
7977      = sum(timeModelToCalc
7978              $(storage_flows(timeModelToCalc,accNodesModel,accYears,storage_techs,commodity) > 0),
7979          storage_flows(timeModelToCalc,accNodesModel,accYears,storage_techs,commodity));
7980   
7981  storage_flows_annual(accNodesModel,accYears,storage_techs(techs),commodity,"negative")
7982      = sum(timeModelToCalc
7983              $(storage_flows(timeModelToCalc,accNodesModel,accYears,storage_techs,commodity) < 0),
7984          storage_flows(timeModelToCalc,accNodesModel,accYears,storage_techs,commodity));
7985   
7986  storage_flows_annual(accNodesModel,accYears,storage_techs(techs),commodity,"brutto")
7987      = storage_flows_annual(accNodesModel,accYears,storage_techs,commodity,"positive")
7988          + storage_flows_annual(accNodesModel,accYears,storage_techs,commodity,"negative");
7989   
7990  storage_flows_annual(accNodesModel,accYears,storage_techs(techs),commodity,"flh")
7991      $(storage_flows_annual(accNodesModel,accYears,storage_techs,commodity,"brutto") > 0
7992          and storage_caps(accNodesModel,accYears,storage_techs,commodity,"total") > 0)
7993      = storage_flows_annual(accNodesModel,accYears,storage_techs,commodity,"brutto")
7994          / storage_caps(accNodesModel,accYears,storage_techs,commodity,"total");
7995   
7996  storage_losses_out(timeModelToCalc,accNodesModel,accYears,storage_techs(techs),commodity)
7997      = sum((nodesModelToCalc,yearsToCalc,vintage)
7998              $(storage_losses.l(timeModelToCalc,nodesModelToCalc,yearsToCalc,storage_techs,vintage,commodity)
7999                  and map_accNodesPostCalc(accNodesModel,nodesModelToCalc)
8000                  and map_accYearsPostCalc(accYears,yearsToCalc)),
8001          storage_losses.l(timeModelToCalc,nodesModelToCalc,yearsToCalc,storage_techs,vintage,commodity)
8002          * timeLength(timeModelToCalc));
8003   
8004  storage_losses_annual(accNodesModel,accYears,storage_techs(techs),commodity,"netto")
8005      = sum(timeModelToCalc,
8006          storage_losses_out(timeModelToCalc,accNodesModel,accYears,storage_techs,commodity));
8007   
8008   
8009  * == commodity balance ==
8010   
8011  commodity_balance_ext(timeModelToCalc,map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,yearsToCalc),converter_techs(techs),vintage,commodity)
8012      $(converter_usedTech(nodesModelToCalc,yearsToCalc,converter_techs,vintage)
8013          and balance_usedConverter(nodesModelToCalc,yearsToCalc,commodity))
8014      = sum((activity)
8015              $(converter_coefficientProfile(timeModelToCalc,nodesModelToCalc,yearsToCalc,converter_techs,vintage,activity,commodity)),
8016          converter_activity.l(timeModelToCalc,nodesModelToCalc,yearsToCalc,converter_techs,vintage,activity)
8017              * timeLength(timeModelToCalc)
8018              * converter_coefficientProfile(timeModelToCalc,nodesModelToCalc,yearsToCalc,converter_techs,vintage,activity,commodity)
8019          + converter_unitsUsingActivity_MIP.l(timeModelToCalc,nodesModelToCalc,yearsToCalc,converter_techs,vintage,activity)
8020              * timeLength(timeModelToCalc)
8021              * converter_coefficient(converter_techs,vintage,activity,commodity,"constant"));
8022   
8023  commodity_balance_ext(timeModelToCalc,map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,yearsToCalc),storage_techs(techs),vintage,commodity)
8024      $(storage_usedTech(nodesModelToCalc,yearsToCalc,storage_techs,vintage)
8025          and storage_sizeParam(storage_techs,vintage,commodity,"size"))
8026      = commodity_balance_ext(timeModelToCalc,accNodesModel,nodesModelToCalc,accYears,yearsToCalc,storage_techs,vintage,commodity)
8027      + storage_level.l(timeModelToCalc--1,nodesModelToCalc,yearsToCalc,storage_techs,vintage,commodity)
8028          - storage_level.l(timeModelToCalc,nodesModelToCalc,yearsToCalc,storage_techs,vintage,commodity)
8029      - storage_losses.l(timeModelToCalc,nodesModelToCalc,yearsToCalc,storage_techs,vintage,commodity)
8030      * timeLength(timeModelToCalc);
8031   
8032  commodity_balance_ext(timeModelToCalc,map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,yearsToCalc),sourcesink_techs(techs),vintage,commodity)
8033      $(sourcesink_enabled(nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity)
8034          and sameas(yearsToCalc,vintage))
8035      = commodity_balance_ext(timeModelToCalc,accNodesModel,nodesModelToCalc,accYears,yearsToCalc,sourcesink_techs,vintage,commodity)
8036      + sourcesink_flow.l(timeModelToCalc,nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity)
8037      * timeLength(timeModelToCalc);
8038   
8039  commodity_balance_ext(timeModelToCalc,map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,yearsToCalc),transfer_techs(techs),vintage,commodity)
8040      $sum((linksModel)
8041          $(transfer_incidenceModel(nodesModelToCalc,linksModel)
8042                  and transfer_usedTech(linksModel,yearsToCalc,transfer_techs,vintage)
8043                  and transfer_coefficient(transfer_techs,vintage,commodity,"coefficient")), 1)
8044      = commodity_balance_ext(timeModelToCalc,accNodesModel,nodesModelToCalc,accYears,yearsToCalc,transfer_techs,vintage,commodity)
8045      + sum((linksModel)
8046              $(transfer_incidenceModel(nodesModelToCalc,linksModel)
8047                  and transfer_usedTech(linksModel,yearsToCalc,transfer_techs,vintage)
8048                  and transfer_coefficient(transfer_techs,vintage,commodity,"coefficient")),
8049   
8050              (transfer_flowAlong.l(timeModelToCalc,linksModel,yearsToCalc,transfer_techs,vintage)
8051                      $(transfer_incidenceModel(nodesModelToCalc,linksModel) > 0)
8052                + transfer_flowAgainst.l(timeModelToCalc,linksModel,yearsToCalc,transfer_techs,vintage)
8053                      $(transfer_incidenceModel(nodesModelToCalc,linksModel) < 0))
8054              * timeLength(timeModelToCalc)
8055              * transfer_coefficient(transfer_techs,vintage,commodity,"coefficient")
8056   
8057              - (transfer_flowAlong.l(timeModelToCalc,linksModel,yearsToCalc,transfer_techs,vintage)
8058                      $(transfer_incidenceModel(nodesModelToCalc,linksModel) < 0)
8059                + transfer_flowAgainst.l(timeModelToCalc,linksModel,yearsToCalc,transfer_techs,vintage)
8060                      $(transfer_incidenceModel(nodesModelToCalc,linksModel) > 0))
8061              * timeLength(timeModelToCalc)
8062              * transfer_coefficient(transfer_techs,vintage,commodity,"coefficient")
8063   
8064              + 0.5 * ((transfer_flowAlong.l(timeModelToCalc,linksModel,yearsToCalc,transfer_techs,vintage)
8065                          $(transfer_incidenceModel(nodesModelToCalc,linksModel) <> 0)
8066                      + transfer_flowAgainst.l(timeModelToCalc,linksModel,yearsToCalc,transfer_techs,vintage)
8067                          $(transfer_incidenceModel(nodesModelToCalc,linksModel) <> 0))
8068                      * timeLength(timeModelToCalc)
8069                      * ( transfer_coefPerFlow(transfer_techs,vintage,commodity,"coefPerFlow")
8070                          + sum(link_types,
8071                              transfer_coefPerLength(transfer_techs,vintage,commodity,link_types,"coefPerLength")
8072                              * transfer_lengthParam(linksModel,link_types,"length")))))
8073      ;
8074   
8075  commodity_balance(timeModelToCalc,accNodesModel,accYears,balance_techComm(techs,commodity))
8076      = sum((nodesModelToCalc,yearsToCalc,vintage)
8077              $(commodity_balance_ext(timeModelToCalc,accNodesModel,nodesModelToCalc,accYears,yearsToCalc,techs,vintage,commodity)
8078                  and map_accNodesPostCalc(accNodesModel,nodesModelToCalc)
8079                  and map_accYearsPostCalc(accYears,yearsToCalc)),
8080          commodity_balance_ext(timeModelToCalc,accNodesModel,nodesModelToCalc,accYears,yearsToCalc,techs,vintage,commodity));
8081  option clear = commodity_balance_ext;
8082   
8083   
8084  * ==== annual commodity sums ====
8085   
8086  commodity_balance_annual(accNodesModel,accYears,techs,commodity,"netto")
8087      = sum(timeModelToCalc,
8088          commodity_balance(timeModelToCalc,accNodesModel,accYears,techs,commodity));
8089   
8090  commodity_balance_annual(accNodesModel,accYears,techs,commodity,"positive")
8091      = sum(timeModelToCalc
8092              $(commodity_balance(timeModelToCalc,accNodesModel,accYears,techs,commodity) > 0),
8093          commodity_balance(timeModelToCalc,accNodesModel,accYears,techs,commodity));
8094   
8095  commodity_balance_annual(accNodesModel,accYears,techs,commodity,"negative")
8096      = sum(timeModelToCalc
8097              $(commodity_balance(timeModelToCalc,accNodesModel,accYears,techs,commodity) < 0),
8098          commodity_balance(timeModelToCalc,accNodesModel,accYears,techs,commodity));
8099   
8100  commodity_balance_annual(accNodesModel,accYears,techs,commodity,"brutto")
8101      = commodity_balance_annual(accNodesModel,accYears,techs,commodity,"positive")
8102          - commodity_balance_annual(accNodesModel,accYears,techs,commodity,"negative");
8103   
8104  commodity_balance_annual(accNodesModel,accYears,techs,commodity,"flh")
8105      $(commodity_balance_annual(accNodesModel,accYears,techs,commodity,"brutto") > 0
8106          and converter_caps(accNodesModel,accYears,techs,commodity,"total") > 0 )
8107      = commodity_balance_annual(accNodesModel,accYears,techs,commodity,"brutto")
8108          / converter_caps(accNodesModel,accYears,techs,commodity,"total");
8109   
8110   
8111  * ==== marginal information ====
8112   
8113  marginals_balance(timeModelToCalc,nodesModelToCalc,yearsToCalc,commodity)
8114    $balance_usedBalance(nodesModelToCalc,yearsToCalc,commodity)
8115    =
8116    Eq_balance_commodities.m(timeModelToCalc,nodesModelToCalc,yearsToCalc,commodity);
8117   
8118  marginals_sourcesink_profile(timeModelToCalc,nodesModelToCalc,yearsToCalc,sourcesink_techs(techs),commodity)
8119      $( sourcesink_flow.m(timeModelToCalc,nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity) <> 0 )
8120      =
8121      sourcesink_flow.m(timeModelToCalc,nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity);
8122   
8123  marginals_sourcesink_sum(nodesModelToCalc,yearsToCalc,sourcesink_techs(techs),commodity)
8124      $( ( Eq_sourcesink_useLowerSum.m(nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity)
8125          + Eq_sourcesink_useUpperSum.m(nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity)
8126          + Eq_sourcesink_useFixedSum.m(nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity) ) <> eps )
8127      =
8128      ( Eq_sourcesink_useLowerSum.m(nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity)
8129      + Eq_sourcesink_useUpperSum.m(nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity)
8130      + Eq_sourcesink_useFixedSum.m(nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity) );
8131   
8132  marginals_indicator_bounds(accNodesModel,accYears,indicator)
8133      $( accounting_indicator.m(accNodesModel,accYears,indicator) <> 0 )
8134      =
8135      accounting_indicator.m(accNodesModel,accYears,indicator);
8136   
8137   
8138  * ==== R2A postcalc information ====
8139   
8141   
8142   
8143  * ==== round profiles to reduce size of gdx ====
8144   
8146  commodity_balance(timeModelToCalc,accNodesModel,accYears,techs,commodity)
8147      $commodity_balance(timeModelToCalc,accNodesModel,accYears,techs,commodity)
8148      = round(commodity_balance(timeModelToCalc,accNodesModel,accYears,techs,commodity), 6);
8149   
8150  transfer_flows(timeModelToCalc,nodesModelToCalc,nodesModelToCalc_a,linksModel,yearsToCalc,transfer_techs,commodity)
8151      $transfer_flows(timeModelToCalc,nodesModelToCalc,nodesModelToCalc_a,linksModel,yearsToCalc,transfer_techs,commodity)
8152      = round(transfer_flows(timeModelToCalc,nodesModelToCalc,nodesModelToCalc_a,linksModel,yearsToCalc,transfer_techs,commodity), 6);
8153   
8154  transfer_losses(timeModelToCalc,nodesModelToCalc,nodesModelToCalc_a,linksModel,yearsToCalc,transfer_techs,commodity)
8155      $transfer_losses(timeModelToCalc,nodesModelToCalc,nodesModelToCalc_a,linksModel,yearsToCalc,transfer_techs,commodity)
8156      = round(transfer_losses(timeModelToCalc,nodesModelToCalc,nodesModelToCalc_a,linksModel,yearsToCalc,transfer_techs,commodity), 6);
8157   
8158  storage_flows(timeModelToCalc,accNodesModel,accYears,storage_techs,commodity)
8159      $storage_flows(timeModelToCalc,accNodesModel,accYears,storage_techs,commodity)
8160      = round(storage_flows(timeModelToCalc,accNodesModel,accYears,storage_techs,commodity), 6);
8161   
8162  storage_level_out(timeModelToCalc,accNodesModel,accYears,storage_techs,commodity)
8163      $storage_level_out(timeModelToCalc,accNodesModel,accYears,storage_techs,commodity)
8164      = round(storage_level_out(timeModelToCalc,accNodesModel,accYears,storage_techs,commodity), 6);
8165   
8166  marginals_balance(timeModelToCalc,nodesModelToCalc,yearsToCalc,commodity)
8167      $marginals_balance(timeModelToCalc,nodesModelToCalc,yearsToCalc,commodity)
8168      = round(marginals_balance(timeModelToCalc,nodesModelToCalc,yearsToCalc,commodity), 6);
8169   
8170  marginals_sourcesink_profile(timeModelToCalc,nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity)
8171      $marginals_sourcesink_profile(timeModelToCalc,nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity)
8172      = round(marginals_sourcesink_profile(timeModelToCalc,nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity), 6);
8174   
INCLUDE    C:\Local\REMix\framework\remix\framework\model\source\postcalc\writegdx.gms
8177  * SPDX-FileCopyrightText: Copyright (c) 2023 German Aerospace Center (DLR)
8178  * SPDX-License-Identifier: BSD-3-Clause
8179   
8182   
8183  execute_unload "C:\Local\REMix\remix_nz\output\high_pop_out_base_2050\result\high_pop_out_base_2050re.gdx"
8184      metadata
8185      timeModel
8186      timeModelToCalc
8187      nodesModel
8188      linksModel
8189      indicator
8190      commodity
8191      techs
8192      accNodesModel
8193      accYears
8194   
8195      map_nodesModel
8196      map_linksModel
8197      map_nodesAccounting
8198   
8199      indicator_accounting
8200      indicator_accounting_ref
8201      indicator_accounting_comp
8202      indicator_accounting_detailed
8203      indicator_accounting_links
8204   
8205      converter_caps
8206      converter_units
8208   
8209      transfer_caps
8210      transfer_links
8211      transfer_flows
8212      transfer_flows_annual
8213      transfer_losses
8214      transfer_losses_annual
8215   
8216      storage_caps
8217      storage_units
8218      storage_flows
8219      storage_level_out
8220      storage_flows_annual
8221      storage_losses_out
8222      storage_losses_annual
8224   
8225      commodity_balance
8226      commodity_balance_annual
8227   
8228      marginals_balance
8229      marginals_sourcesink_profile
8230      marginals_sourcesink_sum
8231      marginals_indicator_bounds
8232   
8234      ;
GAMS 40.4.0  d540b52e Oct 3, 2022           WEX-WEI x86 64bit/MS Windows - 10/05/23 14:09:10 Page 2
G e n e r a l   A l g e b r a i c   M o d e l i n g   S y s t e m
Include File Summary


   SEQ   GLOBAL TYPE      PARENT   LOCAL  FILENAME

     1        1 INPUT          0       0  C:\Local\REMix\framework\remix\framework\model\run_remix.gms
     2       12 IF DEXIST      1      12  C:\Local\REMix\remix_nz\output\high_pop_out_base_2050\data\
     3       15 INCLUDE        1      15  .C:\Local\REMix\framework\remix\framework\model\source\metadata.gms
     4       23 CALL           3       8  .printf "remix_version \"0.9.2\"\n" > c:\Local\REMix\remix_nz\process\225b\\metadata
     5       24 CALL           3       9  .printf "gams_version \"40.4.0\"\n" >> c:\Local\REMix\remix_nz\process\225b\\metadata
     6       25 CALL           3      10  .printf "timestamp \"10/05/23 14:09:10\"\n" >> c:\Local\REMix\remix_nz\process\225b\\metadata
     7       27 CALL           3      12  .printf "framework_path " >> c:\Local\REMix\remix_nz\process\225b\\metadata
     8       29 CALL           3      14  .cd C:\Local\REMix\framework\remix\framework\model\source && cd| sed "s/^/\"/;s/$/\"/" >> c:\Local\REMix\remix_nz\process\225b\\metadata
     9       31 CALL           3      18  .printf "\n" >> c:\Local\REMix\remix_nz\process\225b\\metadata
    10       32 CALL           3      19  .printf "framework_hash " >> c:\Local\REMix\remix_nz\process\225b\\metadata
    11       34 CALL           3      21  .cd C:\Local\REMix\framework\remix\framework\model\source && git rev-parse HEAD >nul 2>&1 && git rev-parse HEAD >> c:\Local\REMix\remix_nz\process\225b\\metadata
    12       36 CALL           3      25  .printf "\n" >> c:\Local\REMix\remix_nz\process\225b\\metadata
    13       37 CALL           3      26  .printf "framework_branch " >> c:\Local\REMix\remix_nz\process\225b\\metadata
    14       39 CALL           3      28  .cd C:\Local\REMix\framework\remix\framework\model\source && git rev-parse --abbrev-ref HEAD >nul 2>&1 && git rev-parse --abbrev-ref HEAD | sed "s/^/\"/;s/$/\"/" >> c:\Local\REMix\remix_nz\process\225b\\metadata
    15       41 CALL           3      32  .printf "\n" >> c:\Local\REMix\remix_nz\process\225b\\metadata
    16       43 CALL           3      34  .printf "project_path " >> c:\Local\REMix\remix_nz\process\225b\\metadata
    17       45 CALL           3      36  .cd C:\Local\REMix\remix_nz\output\high_pop_out_base_2050\data\./ && cd| sed "s/^/\"/;s/$/\"/" >> c:\Local\REMix\remix_nz\process\225b\\metadata
    18       47 CALL           3      40  .printf "\n" >> c:\Local\REMix\remix_nz\process\225b\\metadata
    19       48 CALL           3      41  .printf "project_hash " >> c:\Local\REMix\remix_nz\process\225b\\metadata
    20       50 CALL           3      43  .cd C:\Local\REMix\remix_nz\output\high_pop_out_base_2050\data\./ && git rev-parse HEAD >nul 2>&1 && git rev-parse HEAD | sed "s/^/\"/;s/$/\"/" >> c:\Local\REMix\remix_nz\process\225b\\metadata
    21       52 CALL           3      47  .printf "\n" >> c:\Local\REMix\remix_nz\process\225b\\metadata
    22       53 CALL           3      48  .printf "project_branch " >> c:\Local\REMix\remix_nz\process\225b\\metadata
    23       55 CALL           3      50  .cd C:\Local\REMix\remix_nz\output\high_pop_out_base_2050\data\./ && git rev-parse --abbrev-ref HEAD >nul 2>&1 && git rev-parse --abbrev-ref HEAD | sed "s/^/\"/;s/$/\"/" >> c:\Local\REMix\remix_nz\process\225b\\metadata
    24       57 CALL           3      54  .printf "\n" >> c:\Local\REMix\remix_nz\process\225b\\metadata
    25       60 INCLUDE        3      57  ..c:\Local\REMix\remix_nz\process\225b\metadata
    26       77 INCLUDE        1      16  .C:\Local\REMix\framework\remix\framework\model\source\data_inheritance.gms
    27      119 INCLUDE        1      25  .C:\Local\REMix\framework\remix\framework\model\source\remix.gms
    28      140 INCLUDE       27      21  ..C:\Local\REMix\framework\remix\framework\model\source\sets.gms
    29      160 IF EXIST      28      20  ..c:\Local\REMix\remix_nz\process\225b\map_aggregatetimemodel.csv
    30      211 IF EXIST      28      97  ..c:\Local\REMix\remix_nz\process\225b\set_nodesmodel.csv
    31      211 INCLUDE       28      97  ...c:\Local\REMix\remix_nz\process\225b\set_nodesmodel.csv
    32      224 IF EXIST      28      99  ..c:\Local\REMix\remix_nz\process\225b\set_nodesmodel.csv
    33      231 IF EXIST      28     106  ..c:\Local\REMix\remix_nz\process\225b\set_nodesdata.csv
    34      231 INCLUDE       28     106  ...c:\Local\REMix\remix_nz\process\225b\set_nodesdata.csv
    35      244 IF EXIST      28     108  ..c:\Local\REMix\remix_nz\process\225b\set_nodesdata.csv
    36      250 IF EXIST      28     114  ..c:\Local\REMix\remix_nz\process\225b\set_nodesmodelsel.csv
    37      250 INCLUDE       28     114  ...c:\Local\REMix\remix_nz\process\225b\set_nodesmodelsel.csv
    38      263 IF EXIST      28     116  ..c:\Local\REMix\remix_nz\process\225b\set_nodesmodelsel.csv
    39      265 IF EXIST      28     118  ..c:\Local\REMix\remix_nz\process\225b\set_nodesmodelsel.csv
    40      278 IF EXIST      28     131  ..c:\Local\REMix\remix_nz\process\225b\map_aggregatenodesmodel.csv
    41      278 INCLUDE       28     131  ...c:\Local\REMix\remix_nz\process\225b\map_aggregatenodesmodel.csv
    42      291 IF EXIST      28     133  ..c:\Local\REMix\remix_nz\process\225b\map_aggregatenodesmodel.csv
    43      294 IF EXIST      28     136  ..c:\Local\REMix\remix_nz\process\225b\map_aggregatenodesmodel.csv
    44      317 IF EXIST      28     159  ..c:\Local\REMix\remix_nz\process\225b\set_years.csv
    45      317 INCLUDE       28     159  ...c:\Local\REMix\remix_nz\process\225b\set_years.csv
    46      326 IF EXIST      28     161  ..c:\Local\REMix\remix_nz\process\225b\set_years.csv
    47      335 IF EXIST      28     170  ..c:\Local\REMix\remix_nz\process\225b\set_years.csv
    48      335 INCLUDE       28     170  ...c:\Local\REMix\remix_nz\process\225b\set_years.csv
    49      344 IF EXIST      28     172  ..c:\Local\REMix\remix_nz\process\225b\set_years.csv
    50      350 IF EXIST      28     178  ..c:\Local\REMix\remix_nz\process\225b\set_yearssel.csv
    51      350 INCLUDE       28     178  ...c:\Local\REMix\remix_nz\process\225b\set_yearssel.csv
    52      353 IF EXIST      28     180  ..c:\Local\REMix\remix_nz\process\225b\set_yearssel.csv
    53      371 IF EXIST      28     198  ..c:\Local\REMix\remix_nz\process\225b\set_activities.csv
    54      371 INCLUDE       28     198  ...c:\Local\REMix\remix_nz\process\225b\set_activities.csv
    55      377 IF EXIST      28     200  ..c:\Local\REMix\remix_nz\process\225b\set_activities.csv
    56      385 IF EXIST      28     208  ..c:\Local\REMix\remix_nz\process\225b\set_gridsegments.csv
    57      387 IF EXIST      28     210  ..c:\Local\REMix\remix_nz\process\225b\set_gridsegments.csv
    58      395 IF EXIST      28     218  ..c:\Local\REMix\remix_nz\process\225b\set_linksdata.csv
    59      395 INCLUDE       28     218  ...c:\Local\REMix\remix_nz\process\225b\set_linksdata.csv
    60      409 IF EXIST      28     220  ..c:\Local\REMix\remix_nz\process\225b\set_linksdata.csv
    61      427 IF EXIST      28     238  ..c:\Local\REMix\remix_nz\process\225b\set_link_types.csv
    62      427 INCLUDE       28     238  ...c:\Local\REMix\remix_nz\process\225b\set_link_types.csv
    63      431 IF EXIST      28     240  ..c:\Local\REMix\remix_nz\process\225b\set_link_types.csv
    64      440 IF EXIST      28     249  ..c:\Local\REMix\remix_nz\process\225b\set_commodities.csv
    65      440 INCLUDE       28     249  ...c:\Local\REMix\remix_nz\process\225b\set_commodities.csv
    66      445 IF EXIST      28     251  ..c:\Local\REMix\remix_nz\process\225b\set_commodities.csv
    67      454 IF EXIST      28     260  ..c:\Local\REMix\remix_nz\process\225b\set_indicators.csv
    68      454 INCLUDE       28     260  ...c:\Local\REMix\remix_nz\process\225b\set_indicators.csv
    69      462 IF EXIST      28     262  ..c:\Local\REMix\remix_nz\process\225b\set_indicators.csv
    70      471 IF EXIST      28     271  ..c:\Local\REMix\remix_nz\process\225b\set_converter_techs.csv
    71      471 INCLUDE       28     271  ...c:\Local\REMix\remix_nz\process\225b\set_converter_techs.csv
    72      481 IF EXIST      28     274  ..c:\Local\REMix\remix_nz\process\225b\set_storage_techs.csv
    73      481 INCLUDE       28     274  ...c:\Local\REMix\remix_nz\process\225b\set_storage_techs.csv
    74      485 IF EXIST      28     277  ..c:\Local\REMix\remix_nz\process\225b\set_transfer_techs.csv
    75      485 INCLUDE       28     277  ...c:\Local\REMix\remix_nz\process\225b\set_transfer_techs.csv
    76      489 IF EXIST      28     280  ..c:\Local\REMix\remix_nz\process\225b\set_sourcesink_techs.csv
    77      489 INCLUDE       28     280  ...c:\Local\REMix\remix_nz\process\225b\set_sourcesink_techs.csv
    78      496 IF EXIST      28     285  ..c:\Local\REMix\remix_nz\process\225b\set_converter_techs.csv
    79      496 INCLUDE       28     285  ...c:\Local\REMix\remix_nz\process\225b\set_converter_techs.csv
    80      504 IF EXIST      28     286  ..c:\Local\REMix\remix_nz\process\225b\set_converter_techs.csv
    81      508 IF EXIST      28     290  ..c:\Local\REMix\remix_nz\process\225b\set_storage_techs.csv
    82      508 INCLUDE       28     290  ...c:\Local\REMix\remix_nz\process\225b\set_storage_techs.csv
    83      510 IF EXIST      28     291  ..c:\Local\REMix\remix_nz\process\225b\set_storage_techs.csv
    84      515 IF EXIST      28     296  ..c:\Local\REMix\remix_nz\process\225b\set_transfer_techs.csv
    85      515 INCLUDE       28     296  ...c:\Local\REMix\remix_nz\process\225b\set_transfer_techs.csv
    86      517 IF EXIST      28     297  ..c:\Local\REMix\remix_nz\process\225b\set_transfer_techs.csv
    87      521 IF EXIST      28     301  ..c:\Local\REMix\remix_nz\process\225b\set_sourcesink_techs.csv
    88      521 INCLUDE       28     301  ...c:\Local\REMix\remix_nz\process\225b\set_sourcesink_techs.csv
    89      524 IF EXIST      28     302  ..c:\Local\REMix\remix_nz\process\225b\set_sourcesink_techs.csv
    90      534 IF EXIST      28     312  ..c:\Local\REMix\remix_nz\process\225b\set_degradation_states.csv
    91      536 IF EXIST      28     314  ..c:\Local\REMix\remix_nz\process\225b\set_degradation_states.csv
    92      545 IF EXIST      28     323  ..c:\Local\REMix\remix_nz\process\225b\set_soc.csv
    93      547 IF EXIST      28     325  ..c:\Local\REMix\remix_nz\process\225b\set_soc.csv
    94      563 IF EXIST      28     341  ..c:\Local\REMix\remix_nz\process\225b\transfer_linkstartend.csv
    95      563 INCLUDE       28     341  ...c:\Local\REMix\remix_nz\process\225b\transfer_linkstartend.csv
    96      590 IF EXIST      28     343  ..c:\Local\REMix\remix_nz\process\225b\transfer_linkstartend.csv
    97      604 BATINCLUDE    28     357  ...C:\Local\REMix\framework\remix\framework\model\source\battools\aggregateNodes.gms
    98      713 IF EXIST      28     464  ..c:\Local\REMix\remix_nz\process\225b\set_accnodes.csv
    99      715 IF EXIST      28     466  ..c:\Local\REMix\remix_nz\process\225b\set_accnodes.csv
   100      780 IF EXIST      28     531  ..c:\Local\REMix\remix_nz\process\225b\map_accnodes.csv
   101      782 IF EXIST      28     533  ..c:\Local\REMix\remix_nz\process\225b\map_accnodes.csv
   102      836 INCLUDE       27      22  ..C:\Local\REMix\framework\remix\framework\model\source\accounting\input.gms
   103      868 IF EXIST     102      32  ..c:\Local\REMix\remix_nz\process\225b\accounting_converterunits.csv
   104      868 INCLUDE      102      32  ...c:\Local\REMix\remix_nz\process\225b\accounting_converterunits.csv
   105      927 IF EXIST     102      34  ..c:\Local\REMix\remix_nz\process\225b\accounting_converterunits.csv
   106      941 IF EXIST     102      48  ..c:\Local\REMix\remix_nz\process\225b\accounting_converteractivity.csv
   107      943 IF EXIST     102      50  ..c:\Local\REMix\remix_nz\process\225b\accounting_converteractivity.csv
   108      960 IF EXIST     102      67  ..c:\Local\REMix\remix_nz\process\225b\accounting_converterstartup.csv
   109      962 IF EXIST     102      69  ..c:\Local\REMix\remix_nz\process\225b\accounting_converterstartup.csv
   110      981 IF EXIST     102      88  ..c:\Local\REMix\remix_nz\process\225b\accounting_storageunits.csv
   111      981 INCLUDE      102      88  ...c:\Local\REMix\remix_nz\process\225b\accounting_storageunits.csv
   112      992 IF EXIST     102      90  ..c:\Local\REMix\remix_nz\process\225b\accounting_storageunits.csv
   113     1014 IF EXIST     102     112  ..c:\Local\REMix\remix_nz\process\225b\accounting_transferlinks.csv
   114     1014 INCLUDE      102     112  ...c:\Local\REMix\remix_nz\process\225b\accounting_transferlinks.csv
   115     1019 IF EXIST     102     114  ..c:\Local\REMix\remix_nz\process\225b\accounting_transferlinks.csv
   116     1041 IF EXIST     102     136  ..c:\Local\REMix\remix_nz\process\225b\accounting_transferperlength.csv
   117     1041 INCLUDE      102     136  ...c:\Local\REMix\remix_nz\process\225b\accounting_transferperlength.csv
   118     1048 IF EXIST     102     138  ..c:\Local\REMix\remix_nz\process\225b\accounting_transferperlength.csv
   119     1063 IF EXIST     102     153  ..c:\Local\REMix\remix_nz\process\225b\accounting_sourcesinkflow.csv
   120     1063 INCLUDE      102     153  ...c:\Local\REMix\remix_nz\process\225b\accounting_sourcesinkflow.csv
   121     1073 IF EXIST     102     155  ..c:\Local\REMix\remix_nz\process\225b\accounting_sourcesinkflow.csv
   122     1087 IF EXIST     102     169  ..c:\Local\REMix\remix_nz\process\225b\accounting_perindicator.csv
   123     1087 INCLUDE      102     169  ...c:\Local\REMix\remix_nz\process\225b\accounting_perindicator.csv
   124     1095 IF EXIST     102     171  ..c:\Local\REMix\remix_nz\process\225b\accounting_perindicator.csv
   125     1121 IF EXIST     102     197  ..c:\Local\REMix\remix_nz\process\225b\accounting_indicatorbounds.csv
   126     1121 INCLUDE      102     197  ...c:\Local\REMix\remix_nz\process\225b\accounting_indicatorbounds.csv
   127     1125 IF EXIST     102     199  ..c:\Local\REMix\remix_nz\process\225b\accounting_indicatorbounds.csv
   128     1144 IF EXIST     102     218  ..c:\Local\REMix\remix_nz\process\225b\accounting_indicatorbounds_links.csv
   129     1146 IF EXIST     102     220  ..c:\Local\REMix\remix_nz\process\225b\accounting_indicatorbounds_links.csv
   130     1152 BATINCLUDE   102     226  ...C:\Local\REMix\framework\remix\framework\model\source\battools\aggregateAccountingMean.gms
   131     1211 BATINCLUDE   102     227  ...C:\Local\REMix\framework\remix\framework\model\source\battools\aggregateAccountingMean.gms
   132     1254 BATINCLUDE   102     228  ...C:\Local\REMix\framework\remix\framework\model\source\battools\aggregateAccountingMean.gms
   133     1297 BATINCLUDE   102     229  ...C:\Local\REMix\framework\remix\framework\model\source\battools\aggregateAccountingMean.gms
   134     1356 BATINCLUDE   102     230  ...C:\Local\REMix\framework\remix\framework\model\source\battools\aggregateAccountingMean.gms
   135     1415 BATINCLUDE   102     231  ...C:\Local\REMix\framework\remix\framework\model\source\battools\aggregateAccountingMean.gms
   136     1474 BATINCLUDE   102     232  ...C:\Local\REMix\framework\remix\framework\model\source\battools\aggregateAccountingMean.gms
   137     1883 INCLUDE       27      23  ..C:\Local\REMix\framework\remix\framework\model\source\accounting\annuities.gms
   138     1955 INCLUDE       27      25  ..C:\Local\REMix\framework\remix\framework\model\source\methods\mga_pre.gms
   139     1961 INCLUDE       27      26  ..C:\Local\REMix\framework\remix\framework\model\source\methods\pareto_pre.gms
   140     1967 INCLUDE       27      27  ..C:\Local\REMix\framework\remix\framework\model\source\postcalc\declaration.gms
   141     1984 IF DEXIST    140      17  ..C:\Local\REMix\remix_nz\output\high_pop_out_base_2050\result\
   142     2185 INCLUDE       27      28  ..C:\Local\REMix\framework\remix\framework\model\source\loadgdx.gms
   143     2194 INCLUDE       27      30  ..C:\Local\REMix\framework\remix\framework\model\source\core\converter.gms
   144     2297 IF EXIST     143     103  ..c:\Local\REMix\remix_nz\process\225b\converter_capacityparam.csv
   145     2297 INCLUDE      143     103  ...c:\Local\REMix\remix_nz\process\225b\converter_capacityparam.csv
   146     2839 IF EXIST     143     105  ..c:\Local\REMix\remix_nz\process\225b\converter_capacityparam.csv
   147     2847 BATINCLUDE   143     113  ...C:\Local\REMix\framework\remix\framework\model\source\battools\aggregateNodes.gms
   148     2858 BATINCLUDE   143     114  ...C:\Local\REMix\framework\remix\framework\model\source\battools\aggregateNodes.gms
   149     2891 IF EXIST     143     137  ..c:\Local\REMix\remix_nz\process\225b\converter_techparam.csv
   150     2891 INCLUDE      143     137  ...c:\Local\REMix\remix_nz\process\225b\converter_techparam.csv
   151     2922 IF EXIST     143     139  ..c:\Local\REMix\remix_nz\process\225b\converter_techparam.csv
   152     2944 IF EXIST     143     161  ..c:\Local\REMix\remix_nz\process\225b\converter_activityprofile.csv
   153     2944 INCLUDE      143     161  ...c:\Local\REMix\remix_nz\process\225b\converter_activityprofile.csv
   154     3012 IF EXIST     143     162  ..c:\Local\REMix\remix_nz\process\225b\converter_activityprofile.csv
   155     3014 IF EXIST     143     164  ..c:\Local\REMix\remix_nz\process\225b\converter_activityprofile.csv
   156     3034 IF EXIST     143     184  ..c:\Local\REMix\remix_nz\process\225b\converter_coefficient.csv
   157     3034 INCLUDE      143     184  ...c:\Local\REMix\remix_nz\process\225b\converter_coefficient.csv
   158     3148 IF EXIST     143     185  ..c:\Local\REMix\remix_nz\process\225b\converter_coefficient.csv
   159     3149 IF EXIST     143     186  ..c:\Local\REMix\remix_nz\process\225b\converter_coefficient.csv
   160     3151 IF EXIST     143     188  ..c:\Local\REMix\remix_nz\process\225b\converter_coefficient.csv
   161     3163 IF EXIST     143     200  ..c:\Local\REMix\remix_nz\process\225b\converter_coefficientprofile.csv
   162     3164 IF EXIST     143     201  ..c:\Local\REMix\remix_nz\process\225b\converter_coefficientprofile.csv
   163     3166 IF EXIST     143     203  ..c:\Local\REMix\remix_nz\process\225b\converter_coefficientprofile.csv
   164     4099 INCLUDE       27      31  ..C:\Local\REMix\framework\remix\framework\model\source\core\storage.gms
   165     4190 IF EXIST     164      91  ..c:\Local\REMix\remix_nz\process\225b\storage_reservoirparam.csv
   166     4190 INCLUDE      164      91  ...c:\Local\REMix\remix_nz\process\225b\storage_reservoirparam.csv
   167     4270 IF EXIST     164      93  ..c:\Local\REMix\remix_nz\process\225b\storage_reservoirparam.csv
   168     4274 BATINCLUDE   164      97  ...C:\Local\REMix\framework\remix\framework\model\source\battools\aggregateNodes.gms
   169     4285 BATINCLUDE   164      98  ...C:\Local\REMix\framework\remix\framework\model\source\battools\aggregateNodes.gms
   170     4321 IF EXIST     164     124  ..c:\Local\REMix\remix_nz\process\225b\storage_techparam.csv
   171     4321 INCLUDE      164     124  ...c:\Local\REMix\remix_nz\process\225b\storage_techparam.csv
   172     4328 IF EXIST     164     126  ..c:\Local\REMix\remix_nz\process\225b\storage_techparam.csv
   173     4349 IF EXIST     164     147  ..c:\Local\REMix\remix_nz\process\225b\storage_sizeparam.csv
   174     4349 INCLUDE      164     147  ...c:\Local\REMix\remix_nz\process\225b\storage_sizeparam.csv
   175     4356 IF EXIST     164     149  ..c:\Local\REMix\remix_nz\process\225b\storage_sizeparam.csv
   176     4373 IF EXIST     164     166  ..c:\Local\REMix\remix_nz\process\225b\storage_socparam.csv
   177     4375 IF EXIST     164     168  ..c:\Local\REMix\remix_nz\process\225b\storage_socparam.csv
   178     4394 IF EXIST     164     187  ..c:\Local\REMix\remix_nz\process\225b\storage_degradationparam.csv
   179     4396 IF EXIST     164     189  ..c:\Local\REMix\remix_nz\process\225b\storage_degradationparam.csv
   180     4425 IF EXIST     164     218  ..c:\Local\REMix\remix_nz\process\225b\storage_levelprofile.csv
   181     4426 IF EXIST     164     219  ..c:\Local\REMix\remix_nz\process\225b\storage_levelprofile.csv
   182     4428 IF EXIST     164     221  ..c:\Local\REMix\remix_nz\process\225b\storage_levelprofile.csv
   183     5248 INCLUDE       27      32  ..C:\Local\REMix\framework\remix\framework\model\source\core\transfer.gms
   184     5315 IF EXIST     183      73  ..c:\Local\REMix\remix_nz\process\225b\transfer_linksparam.csv
   185     5315 INCLUDE      183      73  ...c:\Local\REMix\remix_nz\process\225b\transfer_linksparam.csv
   186     5330 IF EXIST     183      75  ..c:\Local\REMix\remix_nz\process\225b\transfer_linksparam.csv
   187     5346 IF EXIST     183      91  ..c:\Local\REMix\remix_nz\process\225b\transfer_flowprofile.csv
   188     5348 IF EXIST     183      93  ..c:\Local\REMix\remix_nz\process\225b\transfer_flowprofile.csv
   189     5368 IF EXIST     183     113  ..c:\Local\REMix\remix_nz\process\225b\transfer_techparam.csv
   190     5368 INCLUDE      183     113  ...c:\Local\REMix\remix_nz\process\225b\transfer_techparam.csv
   191     5372 IF EXIST     183     115  ..c:\Local\REMix\remix_nz\process\225b\transfer_techparam.csv
   192     5386 IF EXIST     183     129  ..c:\Local\REMix\remix_nz\process\225b\transfer_coefficient.csv
   193     5386 INCLUDE      183     129  ...c:\Local\REMix\remix_nz\process\225b\transfer_coefficient.csv
   194     5390 IF EXIST     183     131  ..c:\Local\REMix\remix_nz\process\225b\transfer_coefficient.csv
   195     5404 IF EXIST     183     145  ..c:\Local\REMix\remix_nz\process\225b\transfer_coefperflow.csv
   196     5404 INCLUDE      183     145  ...c:\Local\REMix\remix_nz\process\225b\transfer_coefperflow.csv
   197     5408 IF EXIST     183     147  ..c:\Local\REMix\remix_nz\process\225b\transfer_coefperflow.csv
   198     5422 IF EXIST     183     161  ..c:\Local\REMix\remix_nz\process\225b\transfer_coefperlength.csv
   199     5422 INCLUDE      183     161  ...c:\Local\REMix\remix_nz\process\225b\transfer_coefperlength.csv
   200     5427 IF EXIST     183     163  ..c:\Local\REMix\remix_nz\process\225b\transfer_coefperlength.csv
   201     5441 IF EXIST     183     177  ..c:\Local\REMix\remix_nz\process\225b\transfer_reactperlength.csv
   202     5443 IF EXIST     183     179  ..c:\Local\REMix\remix_nz\process\225b\transfer_reactperlength.csv
   203     5457 IF EXIST     183     193  ..c:\Local\REMix\remix_nz\process\225b\transfer_lengthparam.csv
   204     5457 INCLUDE      183     193  ...c:\Local\REMix\remix_nz\process\225b\transfer_lengthparam.csv
   205     5484 IF EXIST     183     195  ..c:\Local\REMix\remix_nz\process\225b\transfer_lengthparam.csv
   206     5498 IF EXIST     183     209  ..c:\Local\REMix\remix_nz\process\225b\transfer_gridsegments.csv
   207     5500 IF EXIST     183     211  ..c:\Local\REMix\remix_nz\process\225b\transfer_gridsegments.csv
   208     6082 INCLUDE       27      33  ..C:\Local\REMix\framework\remix\framework\model\source\core\sourcesink.gms
   209     6120 IF EXIST     208      38  ..c:\Local\REMix\remix_nz\process\225b\sourcesink_config.csv
   210     6120 INCLUDE      208      38  ...c:\Local\REMix\remix_nz\process\225b\sourcesink_config.csv
   211     6211 IF EXIST     208      40  ..c:\Local\REMix\remix_nz\process\225b\sourcesink_config.csv
   212     6215 BATINCLUDE   208      44  ...C:\Local\REMix\framework\remix\framework\model\source\battools\aggregateNodes.gms
   213     6243 IF EXIST     208      62  ..c:\Local\REMix\remix_nz\process\225b\sourcesink_profile.csv
   214     6243 INCLUDE      208      62  ...c:\Local\REMix\remix_nz\process\225b\sourcesink_profile.csv
   215     6289 IF EXIST     208      63  ..c:\Local\REMix\remix_nz\process\225b\sourcesink_profile.csv
   216     6290 IF EXIST     208      64  ..c:\Local\REMix\remix_nz\process\225b\sourcesink_profile.csv
   217     6292 IF EXIST     208      66  ..c:\Local\REMix\remix_nz\process\225b\sourcesink_profile.csv
   218     6312 IF EXIST     208      86  ..c:\Local\REMix\remix_nz\process\225b\sourcesink_annualsum.csv
   219     6312 INCLUDE      208      86  ...c:\Local\REMix\remix_nz\process\225b\sourcesink_annualsum.csv
   220     6359 IF EXIST     208      88  ..c:\Local\REMix\remix_nz\process\225b\sourcesink_annualsum.csv
   221     6362 BATINCLUDE   208      91  ...C:\Local\REMix\framework\remix\framework\model\source\battools\aggregateNodes.gms
   222     6542 INCLUDE       27      34  ..C:\Local\REMix\framework\remix\framework\model\source\core\balance.gms
   223     6678 INCLUDE       27      36  ..C:\Local\REMix\framework\remix\framework\model\source\accounting\equations.gms
   224     7100 INCLUDE       27      37  ..C:\Local\REMix\framework\remix\framework\model\source\optiframe.gms
   225     7141 INCLUDE       27      71  ..C:\Local\REMix\framework\remix\framework\model\source\methods\checkanno.gms
   226     7152 INCLUDE       27      74  ..C:\Local\REMix\framework\remix\framework\model\source\methods\pips.gms
   227     7161 INCLUDE       27      77  ..C:\Local\REMix\framework\remix\framework\model\source\methods\solve.gms
   228     7367 INCLUDE       27      80  ..C:\Local\REMix\framework\remix\framework\model\source\methods\pareto.gms
   229     7376 INCLUDE       27      83  ..C:\Local\REMix\framework\remix\framework\model\source\methods\mga.gms
   230     7385 INCLUDE       27      86  ..C:\Local\REMix\framework\remix\framework\model\source\methods\iternodes.gms
   231     7394 INCLUDE       27      89  ..C:\Local\REMix\framework\remix\framework\model\source\postcalc\definition.gms
   232     8176 INCLUDE       27      90  ..C:\Local\REMix\framework\remix\framework\model\source\postcalc\writegdx.gms


COMPILATION TIME     =        4.438 SECONDS     33 MB  40.4.0 d540b52e WEX-WEI
GAMS 40.4.0  d540b52e Oct 3, 2022           WEX-WEI x86 64bit/MS Windows - 10/05/23 14:09:10 Page 3
G e n e r a l   A l g e b r a i c   M o d e l i n g   S y s t e m
Range Statistics    SOLVE remix Using MIP From line 7352


RANGE STATISTICS (ABSOLUTE NON-ZERO FINITE VALUES)

RHS       [min, max] : [ 7.300E-02, 1.165E+03] - Zero values observed as well
Bound     [min, max] : [        NA,        NA] - Zero values observed as well
Matrix    [min, max] : [ 1.000E-02, 1.857E+02]

GAMS 40.4.0  d540b52e Oct 3, 2022           WEX-WEI x86 64bit/MS Windows - 10/05/23 14:09:10 Page 4
G e n e r a l   A l g e b r a i c   M o d e l i n g   S y s t e m
Model Statistics    SOLVE remix Using MIP From line 7352


LOOPS                           optiframeToCalc   of1


MODEL STATISTICS

BLOCKS OF EQUATIONS          75     SINGLE EQUATIONS    1,944,922
BLOCKS OF VARIABLES          38     SINGLE VARIABLES    1,945,022
NON ZERO ELEMENTS     5,205,394


GENERATION TIME      =       12.281 SECONDS  1,131 MB  40.4.0 d540b52e WEX-WEI


EXECUTION TIME       =       19.687 SECONDS  1,131 MB  40.4.0 d540b52e WEX-WEI
               L O O P S         optiframeToCalc of1

GAMS 40.4.0  d540b52e Oct 3, 2022           WEX-WEI x86 64bit/MS Windows - 10/05/23 14:09:10 Page 5
G e n e r a l   A l g e b r a i c   M o d e l i n g   S y s t e m
Solution Report     SOLVE remix Using MIP From line 7352


               S O L V E      S U M M A R Y

     MODEL   remix               OBJECTIVE  accounting_objective
     TYPE    MIP                 DIRECTION  MINIMIZE
     SOLVER  CPLEX               FROM LINE  7352

**** SOLVER STATUS     1 Normal Completion
**** MODEL STATUS      1 Optimal
**** OBJECTIVE VALUE             1860.2762

 RESOURCE USAGE, LIMIT         81.860    604800.000
 ITERATION COUNT, LIMIT       131    2147483647
--- GAMS/Cplex Link licensed for continuous and discrete problems.

Reading parameter(s) from "c:\Local\REMix\remix_nz\process\cplex.opt"
>>  rerun no
>>  lpmethod 4
>>  barorder 0
>>  preind 1
>>  scaind 0
>>  predual -1
>>  baralg 0
>>  barstartalg 1
>>  barepcomp 1e-6
>>  solutiontype 2
>>  startalg 4
>>  epgap 1e-3
>>  quality 1
>>  barcolnz 0
>>  threads 4
>>  parallelmode 1
Finished reading from "c:\Local\REMix\remix_nz\process\cplex.opt"

--- GMO setup time: 0.00s
--- Space for names approximately 262.70 Mb
--- Use option 'names no' to turn use of names off
--- GMO memory 683.67 Mb (peak 698.51 Mb)
--- Dictionary memory 0.00 Mb
--- Cplex 22.1.0.0 link memory 59.36 Mb (peak 420.58 Mb)
--- Starting Cplex


--- LP status (1): optimal.
--- Cplex Time: 78.45sec (det. 75305.99 ticks)


Optimal solution found
Objective:         1860.276243

Solution Quality Statistics:
                                   unscaled                scaled
                               max         sum         max         sum
primal infeasibility        1.382e-05   8.916e-04   1.382e-05   8.916e-04
dual infeasibility          1.377e-08   6.643e-04   1.377e-08   6.643e-04
primal residual             9.422e-14   4.387e-11   9.422e-14   4.387e-11
dual residual               1.488e-08   1.358e-02   1.488e-08   1.358e-02
primal solution vector      1.860e+03   1.139e+06   1.860e+03   1.139e+06
dual solution vector        1.857e+02   5.182e+04   1.857e+02   5.182e+04
slacks                      1.156e+03   8.024e+05   1.156e+03   8.024e+05
reduced costs               1.857e+02   3.071e+05   1.857e+02   3.071e+05
comp. slackness viol.       7.864e-06   1.144e-02




**** REPORT SUMMARY :        0     NONOPT
                             0 INFEASIBLE
                             0  UNBOUNDED
GAMS 40.4.0  d540b52e Oct 3, 2022           WEX-WEI x86 64bit/MS Windows - 10/05/23 14:09:10 Page 6
G e n e r a l   A l g e b r a i c   M o d e l i n g   S y s t e m
E x e c u t i o n


**** REPORT FILE SUMMARY

opt c:\Local\REMix\remix_nz\process\cplex.opt


EXECUTION TIME       =       13.313 SECONDS  1,063 MB  40.4.0 d540b52e WEX-WEI


USER: Medium MUD - 10 User License                   S220920|0002AO-GEN
      University of Canterbury, Civil Engineering Department    DC16319
      License for teaching and research at degree granting institutions


**** FILE SUMMARY

Input      C:\Local\REMix\framework\remix\framework\model\run_remix.gms
Output     c:\Local\REMix\remix_nz\process\run_remix.lst
