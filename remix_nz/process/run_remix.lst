GAMS 40.4.0  d540b52e Oct 3, 2022           WEX-WEI x86 64bit/MS Windows - 10/08/23 23:08:42 Page 1
G e n e r a l   A l g e b r a i c   M o d e l i n g   S y s t e m
C o m p i l a t i o n


   1  * SPDX-FileCopyrightText: Copyright (c) 2023 German Aerospace Center (DLR)
   2  * SPDX-License-Identifier: BSD-3-Clause
   3   
   4  * ==== REMix version number ====
   6   
   7  * ==== global settings ====
  11   
  13   
  14  * ==== write metadata and inherit dataset ====
INCLUDE    C:\Local\REMix\framework\remix\framework\model\source\metadata.gms
  22   
  26   
  42   
  58   
  59  set metadata(*) /
INCLUDE    c:\Local\REMix\remix_nz\process\225a\metadata
  61  remix_version "0.9.2"
  62  gams_version "40.4.0"
  63  timestamp "10/08/23 23:08:42"
  64  framework_path "C:\Local\REMix\framework\remix\framework\model\source"
  65   
  66  framework_hash 96c2159997fb47c52b8300c49677756ddfb1ee40
  67   
  68  framework_branch "dev"
  69   
  70  project_path "C:\Local\REMix\remix_nz\output\nz_profile_11nodes_2020-2030-2040-2050\data"
  71   
  72  project_hash "fc09eb968728a7b26eb164b0f7d94fcf82b98546"
  73   
  74  project_branch "main"
  75   
  76  /;
INCLUDE    C:\Local\REMix\framework\remix\framework\model\source\data_inheritance.gms
  78  * SPDX-FileCopyrightText: Copyright (c) 2023 German Aerospace Center (DLR)
  79  * SPDX-License-Identifier: BSD-3-Clause
  80   
  83   
  88   
  89  * pandas based data inheritance reading in the dat files, merging them and writing csv files in the scrdir
 109  ;
 110   
 114   
 115  * ==== run remix ====
INCLUDE    C:\Local\REMix\framework\remix\framework\model\source\remix.gms
 120  * SPDX-FileCopyrightText: Copyright (c) 2023 German Aerospace Center (DLR)
 121  * SPDX-License-Identifier: BSD-3-Clause
 122   
 123  * ==== global settings ====
 130   
 133   
 135   
 138   
 139  * ==== include modules ====
INCLUDE    C:\Local\REMix\framework\remix\framework\model\source\sets.gms
 141  * SPDX-FileCopyrightText: Copyright (c) 2023 German Aerospace Center (DLR)
 142  * SPDX-License-Identifier: BSD-3-Clause
 143   
 144  * // # sets
 145  * // Sets are the indices of variables and parameters.
 146   
 147  * // ## Reference
 148  * // {special_table_sets}
 149   
 150  * // ## Input Files
 151  * // {special_table_set_input_files}
 807   
 808  map_accNodes(accNodesModel,accNodesModel_aggregation)
 809      $sum((nodesData, nodesModelToCalc)
 810              $( sameas(nodesModelToCalc,accNodesModel)
 811                  and map_accNodesLoad(nodesData,accNodesModel_aggregation)
 812                  and aggregateNodesModel(nodesData,nodesModelToCalc)), 1) = yes;
 813   
 814  map_accNodes(accNodesModel,"global")$sum(nodesModelToCalc$sameas(accNodesModel,nodesModelToCalc), 1) = yes;
 815  map_accNodes(accNodesModel,"global")$sum(accNodes$sameas(accNodesModel,accNodes), 1) = yes;
 816  map_accNodes(accNodesModel,accNodesModel) = yes;
 817  map_accLinks(accLinksModel,"global")$sum(linksModelToCalc$sameas(accLinksModel,linksModelToCalc), 1) = yes;
 818  map_accLinks(accLinksModel,accLinksModel) = yes;
 819  map_accYears(accYears,"horizon")$sum(yearsToCalc$sameas(accYears,yearsToCalc), 1)  = yes;
 820  map_accYears(accYears,accYears) = yes;
 821   
 822  map_accNodesToCalc(accNodesModel,nodesModelToCalc)
 823      $sum((nodesData)
 824              $( map_accNodesLoad(nodesData,accNodesModel)
 825                  and aggregateNodesModel(nodesData,nodesModelToCalc)), 1) = yes;
 826   
 827  map_accNodesToCalc("global",nodesModelToCalc) = yes;
 828  map_accNodesToCalc(accNodesModel,nodesModelToCalc)$sameas(accNodesModel,nodesModelToCalc) = yes;
 829  map_accLinksToCalc("global",linksModelToCalc) = yes;
 830  map_accLinksToCalc(accLinksModel,linksModelToCalc)$sameas(accLinksModel,linksModelToCalc) = yes;
 831  map_accYearsToCalc("horizon",yearsToCalc) = yes;
 832  map_accYearsToCalc(accYears,yearsToCalc)$sameas(accYears,yearsToCalc) = yes;
 833   
 834  * Duplicate sets for postcalc reporting without horizon and accYears
 835  map_accNodesPostCalc(accNodesModel,nodesModelToCalc) = map_accNodesToCalc(accNodesModel,nodesModelToCalc);
 836  map_accLinksPostCalc(accLinksModel,linksModelToCalc) = map_accLinksToCalc(accLinksModel,linksModelToCalc);
 837  map_accYearsPostCalc(accYears,yearsToCalc)$sameas(accYears,yearsToCalc) = yes;
 838  map_accYearsPostCalc(accYears,years)$(sameas(accYears,years) and years.val < sum(yearsToCalc$(ord(yearsToCalc) = 1), yearsToCalc.val)) = yes;
 839   
 840  set map_nodesAccounting(accNodesModel_aggregation,accNodesModel) "Map accounting nodes describes the mapping between model accounting nodes and data nodes." ;
 841  option map_nodesAccounting < map_accNodes;
 842   
 843  * ==== Generic sets  ====
 844  * These set names are repeated across different profile parameters.
 845  * they are not strictly related to each other and are not input data but
 846  * are needed for validation.
 847  ** // PROFILE: profileTypes | Profile Types | OEO_00140056:flow potential | set_profiletypes.csv
 848   
 849  ** // SET: scenario | Scenario | OEO_00000364:scenario | set_scenarios.csv
 850  * "Scenario indexes help to differentiate scenarios." /
 851   
 852  ** // SET: capType | Capacity Types | OEO_00030019:balance process attribute | set_captypes.csv
 853  * "Capacity types differentiate investment decisions." /
 854   
 855  ** // SET: balanceType | Balance Types | OEO_00030019:balance process attribute | set_balancetypes.csv
 856  * "Balance types differentiate types of balances." /
INCLUDE    C:\Local\REMix\framework\remix\framework\model\source\accounting\input.gms
 858  * SPDX-FileCopyrightText: Copyright (c) 2023 German Aerospace Center (DLR)
 859  * SPDX-License-Identifier: BSD-3-Clause
 860   
 861  * // # accounting_input
 862  * // The parameters in this file describe the accounting of indicators in the model.
 863   
 864  * // ## Variables
 865  * // {special_table_input_variables}
1211   
1212  * Aggregate accounting parameters
BATINCLUDE C:\Local\REMix\framework\remix\framework\model\source\battools\aggregateAccountingMean.gms
1214  * SPDX-FileCopyrightText: Copyright (c) 2023 German Aerospace Center (DLR)
1215  * SPDX-License-Identifier: BSD-3-Clause
1216   
1218   
1220   
1221  set accounting_converterUnitsNonzero(indicator,accnodesData,converter_techs,vintage);
1222  accounting_converterUnitsNonzero(indicator,accnodesData,converter_techs,vintage)
1223      $sum(pc_accounting_converterUnits$accounting_converterUnitsIn(indicator,accnodesData,converter_techs,vintage,pc_accounting_converterUnits), 1)
1224      = yes;
1225   
1227  set accounting_converterUnitsChk(indicator,nodesModel,converter_techs,vintage,pc_accounting_converterUnits);
1228  accounting_converterUnitsChk(indicator,nodesModel,converter_techs,vintage,"useAnnuity")
1229      $sum((nodesData,accnodesData)
1230              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1231                  and accounting_converterUnitsNonzero(indicator,accnodesData,converter_techs,vintage)), 1)
1232      = smax((nodesData,accnodesData)
1233              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1234                  and accounting_converterUnitsNonzero(indicator,accnodesData,converter_techs,vintage)),
1235          accounting_converterUnitsIn(indicator,accnodesData,converter_techs,vintage,"useAnnuity"))
1236      - smin((nodesData,accnodesData)
1237              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1238                  and accounting_converterUnitsNonzero(indicator,accnodesData,converter_techs,vintage)),
1239          accounting_converterUnitsIn(indicator,accnodesData,converter_techs,vintage,"useAnnuity"));
1240   
1241  abort$sum(accounting_converterUnitsChk(indicator,nodesModel,converter_techs,vintage,pc_accounting_converterUnits), 1) "Cannot aggregate technologies with different useAnnuity values."
1243   
1244  parameter accounting_converterUnitsAgg(indicator,nodesModel,converter_techs,vintage,pc_accounting_converterUnits);
1245  accounting_converterUnitsAgg(indicator,nodesModel,converter_techs,vintage,pc_accounting_converterUnits)
1246      $sum((nodesData,accnodesData)
1247              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1248                  and accounting_converterUnitsNonzero(indicator,accnodesData,converter_techs,vintage)), 1)
1249      = sum((nodesData,accnodesData)
1250              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1251                  and accounting_converterUnitsNonzero(indicator,accnodesData,converter_techs,vintage)),
1252          accounting_converterUnitsIn(indicator,accnodesData,converter_techs,vintage,pc_accounting_converterUnits))
1253      / sum((nodesData,accnodesData)
1254              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1255                  and accounting_converterUnitsNonzero(indicator,accnodesData,converter_techs,vintage)),
1256          1);
1257   
1258  parameter accounting_converterUnits(indicator,nodesModel,converter_techs,vintage,pc_accounting_converterUnits);
1259  loop(accnodes,
1260  accounting_converterUnits(indicator,nodesModel,converter_techs,vintage,pc_accounting_converterUnits)
1261      $sum(accnodesData$(map_accnodesToCalc(accnodes,nodesModel) and sameas(accnodes,accnodesData)
1262                              and accounting_converterUnitsIn(indicator,accnodesData,converter_techs,vintage,pc_accounting_converterUnits)), 1)
1263      = sum(accnodesData$(map_accnodesToCalc(accnodes,nodesModel) and sameas(accnodes,accnodesData)),
1264              accounting_converterUnitsIn(indicator,accnodesData,converter_techs,vintage,pc_accounting_converterUnits));
1265  );
1266   
1267  accounting_converterUnits(indicator,nodesModel,converter_techs,vintage,pc_accounting_converterUnits)
1268      $accounting_converterUnitsAgg(indicator,nodesModel,converter_techs,vintage,pc_accounting_converterUnits)
1269      = accounting_converterUnitsAgg(indicator,nodesModel,converter_techs,vintage,pc_accounting_converterUnits);
1270   
1271  * option kill %paramName%Nonzero %paramName%Chk %paramName%Agg
BATINCLUDE C:\Local\REMix\framework\remix\framework\model\source\battools\aggregateAccountingMean.gms
1273  * SPDX-FileCopyrightText: Copyright (c) 2023 German Aerospace Center (DLR)
1274  * SPDX-License-Identifier: BSD-3-Clause
1275   
1277   
1279   
1280  set accounting_converterActivityNonzero(indicator,accnodesData,converter_techs,vintage,activity);
1281  accounting_converterActivityNonzero(indicator,accnodesData,converter_techs,vintage,activity)
1282      $sum(pc_accounting_converterActivity$accounting_converterActivityIn(indicator,accnodesData,converter_techs,vintage,activity,pc_accounting_converterActivity), 1)
1283      = yes;
1284   
1286   
1287  parameter accounting_converterActivityAgg(indicator,nodesModel,converter_techs,vintage,activity,pc_accounting_converterActivity);
1288  accounting_converterActivityAgg(indicator,nodesModel,converter_techs,vintage,activity,pc_accounting_converterActivity)
1289      $sum((nodesData,accnodesData)
1290              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1291                  and accounting_converterActivityNonzero(indicator,accnodesData,converter_techs,vintage,activity)), 1)
1292      = sum((nodesData,accnodesData)
1293              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1294                  and accounting_converterActivityNonzero(indicator,accnodesData,converter_techs,vintage,activity)),
1295          accounting_converterActivityIn(indicator,accnodesData,converter_techs,vintage,activity,pc_accounting_converterActivity))
1296      / sum((nodesData,accnodesData)
1297              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1298                  and accounting_converterActivityNonzero(indicator,accnodesData,converter_techs,vintage,activity)),
1299          1);
1300   
1301  parameter accounting_converterActivity(indicator,nodesModel,converter_techs,vintage,activity,pc_accounting_converterActivity);
1302  loop(accnodes,
1303  accounting_converterActivity(indicator,nodesModel,converter_techs,vintage,activity,pc_accounting_converterActivity)
1304      $sum(accnodesData$(map_accnodesToCalc(accnodes,nodesModel) and sameas(accnodes,accnodesData)
1305                              and accounting_converterActivityIn(indicator,accnodesData,converter_techs,vintage,activity,pc_accounting_converterActivity)), 1)
1306      = sum(accnodesData$(map_accnodesToCalc(accnodes,nodesModel) and sameas(accnodes,accnodesData)),
1307              accounting_converterActivityIn(indicator,accnodesData,converter_techs,vintage,activity,pc_accounting_converterActivity));
1308  );
1309   
1310  accounting_converterActivity(indicator,nodesModel,converter_techs,vintage,activity,pc_accounting_converterActivity)
1311      $accounting_converterActivityAgg(indicator,nodesModel,converter_techs,vintage,activity,pc_accounting_converterActivity)
1312      = accounting_converterActivityAgg(indicator,nodesModel,converter_techs,vintage,activity,pc_accounting_converterActivity);
1313   
1314  * option kill %paramName%Nonzero %paramName%Chk %paramName%Agg
BATINCLUDE C:\Local\REMix\framework\remix\framework\model\source\battools\aggregateAccountingMean.gms
1316  * SPDX-FileCopyrightText: Copyright (c) 2023 German Aerospace Center (DLR)
1317  * SPDX-License-Identifier: BSD-3-Clause
1318   
1320   
1322   
1323  set accounting_converterStartupNonzero(indicator,accnodesData,converter_techs,vintage);
1324  accounting_converterStartupNonzero(indicator,accnodesData,converter_techs,vintage)
1325      $sum(pc_accounting_converterStartup$accounting_converterStartupIn(indicator,accnodesData,converter_techs,vintage,pc_accounting_converterStartup), 1)
1326      = yes;
1327   
1329   
1330  parameter accounting_converterStartupAgg(indicator,nodesModel,converter_techs,vintage,pc_accounting_converterStartup);
1331  accounting_converterStartupAgg(indicator,nodesModel,converter_techs,vintage,pc_accounting_converterStartup)
1332      $sum((nodesData,accnodesData)
1333              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1334                  and accounting_converterStartupNonzero(indicator,accnodesData,converter_techs,vintage)), 1)
1335      = sum((nodesData,accnodesData)
1336              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1337                  and accounting_converterStartupNonzero(indicator,accnodesData,converter_techs,vintage)),
1338          accounting_converterStartupIn(indicator,accnodesData,converter_techs,vintage,pc_accounting_converterStartup))
1339      / sum((nodesData,accnodesData)
1340              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1341                  and accounting_converterStartupNonzero(indicator,accnodesData,converter_techs,vintage)),
1342          1);
1343   
1344  parameter accounting_converterStartup(indicator,nodesModel,converter_techs,vintage,pc_accounting_converterStartup);
1345  loop(accnodes,
1346  accounting_converterStartup(indicator,nodesModel,converter_techs,vintage,pc_accounting_converterStartup)
1347      $sum(accnodesData$(map_accnodesToCalc(accnodes,nodesModel) and sameas(accnodes,accnodesData)
1348                              and accounting_converterStartupIn(indicator,accnodesData,converter_techs,vintage,pc_accounting_converterStartup)), 1)
1349      = sum(accnodesData$(map_accnodesToCalc(accnodes,nodesModel) and sameas(accnodes,accnodesData)),
1350              accounting_converterStartupIn(indicator,accnodesData,converter_techs,vintage,pc_accounting_converterStartup));
1351  );
1352   
1353  accounting_converterStartup(indicator,nodesModel,converter_techs,vintage,pc_accounting_converterStartup)
1354      $accounting_converterStartupAgg(indicator,nodesModel,converter_techs,vintage,pc_accounting_converterStartup)
1355      = accounting_converterStartupAgg(indicator,nodesModel,converter_techs,vintage,pc_accounting_converterStartup);
1356   
1357  * option kill %paramName%Nonzero %paramName%Chk %paramName%Agg
BATINCLUDE C:\Local\REMix\framework\remix\framework\model\source\battools\aggregateAccountingMean.gms
1359  * SPDX-FileCopyrightText: Copyright (c) 2023 German Aerospace Center (DLR)
1360  * SPDX-License-Identifier: BSD-3-Clause
1361   
1363   
1365   
1366  set accounting_storageUnitsNonzero(indicator,accnodesData,storage_techs,vintage);
1367  accounting_storageUnitsNonzero(indicator,accnodesData,storage_techs,vintage)
1368      $sum(pc_accounting_storageUnits$accounting_storageUnitsIn(indicator,accnodesData,storage_techs,vintage,pc_accounting_storageUnits), 1)
1369      = yes;
1370   
1372  set accounting_storageUnitsChk(indicator,nodesModel,storage_techs,vintage,pc_accounting_storageUnits);
1373  accounting_storageUnitsChk(indicator,nodesModel,storage_techs,vintage,"useAnnuity")
1374      $sum((nodesData,accnodesData)
1375              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1376                  and accounting_storageUnitsNonzero(indicator,accnodesData,storage_techs,vintage)), 1)
1377      = smax((nodesData,accnodesData)
1378              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1379                  and accounting_storageUnitsNonzero(indicator,accnodesData,storage_techs,vintage)),
1380          accounting_storageUnitsIn(indicator,accnodesData,storage_techs,vintage,"useAnnuity"))
1381      - smin((nodesData,accnodesData)
1382              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1383                  and accounting_storageUnitsNonzero(indicator,accnodesData,storage_techs,vintage)),
1384          accounting_storageUnitsIn(indicator,accnodesData,storage_techs,vintage,"useAnnuity"));
1385   
1386  abort$sum(accounting_storageUnitsChk(indicator,nodesModel,storage_techs,vintage,pc_accounting_storageUnits), 1) "Cannot aggregate technologies with different useAnnuity values."
1388   
1389  parameter accounting_storageUnitsAgg(indicator,nodesModel,storage_techs,vintage,pc_accounting_storageUnits);
1390  accounting_storageUnitsAgg(indicator,nodesModel,storage_techs,vintage,pc_accounting_storageUnits)
1391      $sum((nodesData,accnodesData)
1392              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1393                  and accounting_storageUnitsNonzero(indicator,accnodesData,storage_techs,vintage)), 1)
1394      = sum((nodesData,accnodesData)
1395              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1396                  and accounting_storageUnitsNonzero(indicator,accnodesData,storage_techs,vintage)),
1397          accounting_storageUnitsIn(indicator,accnodesData,storage_techs,vintage,pc_accounting_storageUnits))
1398      / sum((nodesData,accnodesData)
1399              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1400                  and accounting_storageUnitsNonzero(indicator,accnodesData,storage_techs,vintage)),
1401          1);
1402   
1403  parameter accounting_storageUnits(indicator,nodesModel,storage_techs,vintage,pc_accounting_storageUnits);
1404  loop(accnodes,
1405  accounting_storageUnits(indicator,nodesModel,storage_techs,vintage,pc_accounting_storageUnits)
1406      $sum(accnodesData$(map_accnodesToCalc(accnodes,nodesModel) and sameas(accnodes,accnodesData)
1407                              and accounting_storageUnitsIn(indicator,accnodesData,storage_techs,vintage,pc_accounting_storageUnits)), 1)
1408      = sum(accnodesData$(map_accnodesToCalc(accnodes,nodesModel) and sameas(accnodes,accnodesData)),
1409              accounting_storageUnitsIn(indicator,accnodesData,storage_techs,vintage,pc_accounting_storageUnits));
1410  );
1411   
1412  accounting_storageUnits(indicator,nodesModel,storage_techs,vintage,pc_accounting_storageUnits)
1413      $accounting_storageUnitsAgg(indicator,nodesModel,storage_techs,vintage,pc_accounting_storageUnits)
1414      = accounting_storageUnitsAgg(indicator,nodesModel,storage_techs,vintage,pc_accounting_storageUnits);
1415   
1416  * option kill %paramName%Nonzero %paramName%Chk %paramName%Agg
BATINCLUDE C:\Local\REMix\framework\remix\framework\model\source\battools\aggregateAccountingMean.gms
1418  * SPDX-FileCopyrightText: Copyright (c) 2023 German Aerospace Center (DLR)
1419  * SPDX-License-Identifier: BSD-3-Clause
1420   
1422   
1424   
1425  set accounting_transferLinksNonzero(indicator,acclinksData,transfer_techs,vintage);
1426  accounting_transferLinksNonzero(indicator,acclinksData,transfer_techs,vintage)
1427      $sum(pc_accounting_transferLinks$accounting_transferLinksIn(indicator,acclinksData,transfer_techs,vintage,pc_accounting_transferLinks), 1)
1428      = yes;
1429   
1431  set accounting_transferLinksChk(indicator,linksModel,transfer_techs,vintage,pc_accounting_transferLinks);
1432  accounting_transferLinksChk(indicator,linksModel,transfer_techs,vintage,"useAnnuity")
1433      $sum((linksData,acclinksData)
1434              $(aggregatelinksModel(linksData,linksModel) and sameas(linksData,acclinksData)
1435                  and accounting_transferLinksNonzero(indicator,acclinksData,transfer_techs,vintage)), 1)
1436      = smax((linksData,acclinksData)
1437              $(aggregatelinksModel(linksData,linksModel) and sameas(linksData,acclinksData)
1438                  and accounting_transferLinksNonzero(indicator,acclinksData,transfer_techs,vintage)),
1439          accounting_transferLinksIn(indicator,acclinksData,transfer_techs,vintage,"useAnnuity"))
1440      - smin((linksData,acclinksData)
1441              $(aggregatelinksModel(linksData,linksModel) and sameas(linksData,acclinksData)
1442                  and accounting_transferLinksNonzero(indicator,acclinksData,transfer_techs,vintage)),
1443          accounting_transferLinksIn(indicator,acclinksData,transfer_techs,vintage,"useAnnuity"));
1444   
1445  abort$sum(accounting_transferLinksChk(indicator,linksModel,transfer_techs,vintage,pc_accounting_transferLinks), 1) "Cannot aggregate technologies with different useAnnuity values."
1447   
1448  parameter accounting_transferLinksAgg(indicator,linksModel,transfer_techs,vintage,pc_accounting_transferLinks);
1449  accounting_transferLinksAgg(indicator,linksModel,transfer_techs,vintage,pc_accounting_transferLinks)
1450      $sum((linksData,acclinksData)
1451              $(aggregatelinksModel(linksData,linksModel) and sameas(linksData,acclinksData)
1452                  and accounting_transferLinksNonzero(indicator,acclinksData,transfer_techs,vintage)), 1)
1453      = sum((linksData,acclinksData)
1454              $(aggregatelinksModel(linksData,linksModel) and sameas(linksData,acclinksData)
1455                  and accounting_transferLinksNonzero(indicator,acclinksData,transfer_techs,vintage)),
1456          accounting_transferLinksIn(indicator,acclinksData,transfer_techs,vintage,pc_accounting_transferLinks))
1457      / sum((linksData,acclinksData)
1458              $(aggregatelinksModel(linksData,linksModel) and sameas(linksData,acclinksData)
1459                  and accounting_transferLinksNonzero(indicator,acclinksData,transfer_techs,vintage)),
1460          1);
1461   
1462  parameter accounting_transferLinks(indicator,linksModel,transfer_techs,vintage,pc_accounting_transferLinks);
1463  loop(acclinks,
1464  accounting_transferLinks(indicator,linksModel,transfer_techs,vintage,pc_accounting_transferLinks)
1465      $sum(acclinksData$(map_acclinksToCalc(acclinks,linksModel) and sameas(acclinks,acclinksData)
1466                              and accounting_transferLinksIn(indicator,acclinksData,transfer_techs,vintage,pc_accounting_transferLinks)), 1)
1467      = sum(acclinksData$(map_acclinksToCalc(acclinks,linksModel) and sameas(acclinks,acclinksData)),
1468              accounting_transferLinksIn(indicator,acclinksData,transfer_techs,vintage,pc_accounting_transferLinks));
1469  );
1470   
1471  accounting_transferLinks(indicator,linksModel,transfer_techs,vintage,pc_accounting_transferLinks)
1472      $accounting_transferLinksAgg(indicator,linksModel,transfer_techs,vintage,pc_accounting_transferLinks)
1473      = accounting_transferLinksAgg(indicator,linksModel,transfer_techs,vintage,pc_accounting_transferLinks);
1474   
1475  * option kill %paramName%Nonzero %paramName%Chk %paramName%Agg
BATINCLUDE C:\Local\REMix\framework\remix\framework\model\source\battools\aggregateAccountingMean.gms
1477  * SPDX-FileCopyrightText: Copyright (c) 2023 German Aerospace Center (DLR)
1478  * SPDX-License-Identifier: BSD-3-Clause
1479   
1481   
1483   
1484  set accounting_transferPerLengthNonzero(indicator,acclinksData,transfer_techs,vintage,link_types);
1485  accounting_transferPerLengthNonzero(indicator,acclinksData,transfer_techs,vintage,link_types)
1486      $sum(pc_accounting_transferPerLength$accounting_transferPerLengthIn(indicator,acclinksData,transfer_techs,vintage,link_types,pc_accounting_transferPerLength), 1)
1487      = yes;
1488   
1490  set accounting_transferPerLengthChk(indicator,linksModel,transfer_techs,vintage,link_types,pc_accounting_transferPerLength);
1491  accounting_transferPerLengthChk(indicator,linksModel,transfer_techs,vintage,link_types,"useAnnuity")
1492      $sum((linksData,acclinksData)
1493              $(aggregatelinksModel(linksData,linksModel) and sameas(linksData,acclinksData)
1494                  and accounting_transferPerLengthNonzero(indicator,acclinksData,transfer_techs,vintage,link_types)), 1)
1495      = smax((linksData,acclinksData)
1496              $(aggregatelinksModel(linksData,linksModel) and sameas(linksData,acclinksData)
1497                  and accounting_transferPerLengthNonzero(indicator,acclinksData,transfer_techs,vintage,link_types)),
1498          accounting_transferPerLengthIn(indicator,acclinksData,transfer_techs,vintage,link_types,"useAnnuity"))
1499      - smin((linksData,acclinksData)
1500              $(aggregatelinksModel(linksData,linksModel) and sameas(linksData,acclinksData)
1501                  and accounting_transferPerLengthNonzero(indicator,acclinksData,transfer_techs,vintage,link_types)),
1502          accounting_transferPerLengthIn(indicator,acclinksData,transfer_techs,vintage,link_types,"useAnnuity"));
1503   
1504  abort$sum(accounting_transferPerLengthChk(indicator,linksModel,transfer_techs,vintage,link_types,pc_accounting_transferPerLength), 1) "Cannot aggregate technologies with different useAnnuity values."
1506   
1507  parameter accounting_transferPerLengthAgg(indicator,linksModel,transfer_techs,vintage,link_types,pc_accounting_transferPerLength);
1508  accounting_transferPerLengthAgg(indicator,linksModel,transfer_techs,vintage,link_types,pc_accounting_transferPerLength)
1509      $sum((linksData,acclinksData)
1510              $(aggregatelinksModel(linksData,linksModel) and sameas(linksData,acclinksData)
1511                  and accounting_transferPerLengthNonzero(indicator,acclinksData,transfer_techs,vintage,link_types)), 1)
1512      = sum((linksData,acclinksData)
1513              $(aggregatelinksModel(linksData,linksModel) and sameas(linksData,acclinksData)
1514                  and accounting_transferPerLengthNonzero(indicator,acclinksData,transfer_techs,vintage,link_types)),
1515          accounting_transferPerLengthIn(indicator,acclinksData,transfer_techs,vintage,link_types,pc_accounting_transferPerLength))
1516      / sum((linksData,acclinksData)
1517              $(aggregatelinksModel(linksData,linksModel) and sameas(linksData,acclinksData)
1518                  and accounting_transferPerLengthNonzero(indicator,acclinksData,transfer_techs,vintage,link_types)),
1519          1);
1520   
1521  parameter accounting_transferPerLength(indicator,linksModel,transfer_techs,vintage,link_types,pc_accounting_transferPerLength);
1522  loop(acclinks,
1523  accounting_transferPerLength(indicator,linksModel,transfer_techs,vintage,link_types,pc_accounting_transferPerLength)
1524      $sum(acclinksData$(map_acclinksToCalc(acclinks,linksModel) and sameas(acclinks,acclinksData)
1525                              and accounting_transferPerLengthIn(indicator,acclinksData,transfer_techs,vintage,link_types,pc_accounting_transferPerLength)), 1)
1526      = sum(acclinksData$(map_acclinksToCalc(acclinks,linksModel) and sameas(acclinks,acclinksData)),
1527              accounting_transferPerLengthIn(indicator,acclinksData,transfer_techs,vintage,link_types,pc_accounting_transferPerLength));
1528  );
1529   
1530  accounting_transferPerLength(indicator,linksModel,transfer_techs,vintage,link_types,pc_accounting_transferPerLength)
1531      $accounting_transferPerLengthAgg(indicator,linksModel,transfer_techs,vintage,link_types,pc_accounting_transferPerLength)
1532      = accounting_transferPerLengthAgg(indicator,linksModel,transfer_techs,vintage,link_types,pc_accounting_transferPerLength);
1533   
1534  * option kill %paramName%Nonzero %paramName%Chk %paramName%Agg
BATINCLUDE C:\Local\REMix\framework\remix\framework\model\source\battools\aggregateAccountingMean.gms
1536  * SPDX-FileCopyrightText: Copyright (c) 2023 German Aerospace Center (DLR)
1537  * SPDX-License-Identifier: BSD-3-Clause
1538   
1540   
1542   
1543  set accounting_sourcesinkFlowNonzero(indicator,accnodesData,years,sourcesink_techs,commodity);
1544  accounting_sourcesinkFlowNonzero(indicator,accnodesData,years,sourcesink_techs,commodity)
1545      $sum(pc_accounting_sourcesinkFlow$accounting_sourcesinkFlowIn(indicator,accnodesData,years,sourcesink_techs,commodity,pc_accounting_sourcesinkFlow), 1)
1546      = yes;
1547   
1549   
1550  parameter accounting_sourcesinkFlowAgg(indicator,nodesModel,years,sourcesink_techs,commodity,pc_accounting_sourcesinkFlow);
1551  accounting_sourcesinkFlowAgg(indicator,nodesModel,years,sourcesink_techs,commodity,pc_accounting_sourcesinkFlow)
1552      $sum((nodesData,accnodesData)
1553              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1554                  and accounting_sourcesinkFlowNonzero(indicator,accnodesData,years,sourcesink_techs,commodity)), 1)
1555      = sum((nodesData,accnodesData)
1556              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1557                  and accounting_sourcesinkFlowNonzero(indicator,accnodesData,years,sourcesink_techs,commodity)),
1558          accounting_sourcesinkFlowIn(indicator,accnodesData,years,sourcesink_techs,commodity,pc_accounting_sourcesinkFlow))
1559      / sum((nodesData,accnodesData)
1560              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1561                  and accounting_sourcesinkFlowNonzero(indicator,accnodesData,years,sourcesink_techs,commodity)),
1562          1);
1563   
1564  parameter accounting_sourcesinkFlow(indicator,nodesModel,years,sourcesink_techs,commodity,pc_accounting_sourcesinkFlow);
1565  loop(accnodes,
1566  accounting_sourcesinkFlow(indicator,nodesModel,years,sourcesink_techs,commodity,pc_accounting_sourcesinkFlow)
1567      $sum(accnodesData$(map_accnodesToCalc(accnodes,nodesModel) and sameas(accnodes,accnodesData)
1568                              and accounting_sourcesinkFlowIn(indicator,accnodesData,years,sourcesink_techs,commodity,pc_accounting_sourcesinkFlow)), 1)
1569      = sum(accnodesData$(map_accnodesToCalc(accnodes,nodesModel) and sameas(accnodes,accnodesData)),
1570              accounting_sourcesinkFlowIn(indicator,accnodesData,years,sourcesink_techs,commodity,pc_accounting_sourcesinkFlow));
1571  );
1572   
1573  accounting_sourcesinkFlow(indicator,nodesModel,years,sourcesink_techs,commodity,pc_accounting_sourcesinkFlow)
1574      $accounting_sourcesinkFlowAgg(indicator,nodesModel,years,sourcesink_techs,commodity,pc_accounting_sourcesinkFlow)
1575      = accounting_sourcesinkFlowAgg(indicator,nodesModel,years,sourcesink_techs,commodity,pc_accounting_sourcesinkFlow);
1576   
1577  * option kill %paramName%Nonzero %paramName%Chk %paramName%Agg
1578   
1579  parameter accounting_indicatorBounds_links(linksModel,years,indicator,pc_accounting_indicatorBounds_links);
1580  accounting_indicatorBounds_links(linksModelToCalc,yearsToCalc,indicator,pc_accounting_indicatorBounds_links)
1581      = sum((linksData)$sameas(linksModelToCalc,linksData),
1582              accounting_indicatorBounds_linksIn(linksData,yearsToCalc,indicator,pc_accounting_indicatorBounds_links));
1583   
1584  accounting_indicatorBounds_links(linksModelToCalc,yearsToCalc,indicator,pc_accounting_indicatorBounds_links)
1585      = sum((linksData)$links_aggregate(linksModelToCalc,linksData),
1586              accounting_indicatorBounds_linksIn(linksData,yearsToCalc,indicator,pc_accounting_indicatorBounds_links));
1587   
1588  parameter accounting_indicatorBounds(accNodesModel,accYears,indicator,pc_accounting_indicatorBounds);
1589  accounting_indicatorBounds(accNodesModel,accYears,indicator,pc_accounting_indicatorBounds)
1590      = sum (accNodesData$sameas(accNodesModel,accNodesData),
1591          accounting_indicatorBoundsIn(accNodesData,accYears,indicator,pc_accounting_indicatorBounds));
1592   
1593  accounting_indicatorBounds(accNodesModel,accYears,indicator,pc_accounting_indicatorBounds)
1594      $(sum (nodesModel$sameas(accNodesModel,nodesModel), 1) > 0)
1595      = sum ((accNodesData,nodesData,nodesModel)
1596              $(aggregateNodesModel(nodesData,nodesModel) and sameas(accNodesModel,nodesModel) and sameas(accNodesData,nodesData)),
1597          accounting_indicatorBoundsIn(accNodesData,accYears,indicator,pc_accounting_indicatorBounds));
1598   
1599  set accounting_perIndicatorNonzero(indicator,indicator_a,accNodesData,accYears);
1600  accounting_perIndicatorNonzero(indicator,indicator_a,accNodesData,accYears)
1601      $sum(pc_accounting_perIndicator$accounting_perIndicatorIn(indicator,indicator_a,accNodesData,accYears,pc_accounting_perIndicator), 1)
1602      = yes;
1603   
1604  parameter accounting_perIndicatorAgg(indicator,indicator_a,nodesModel,accYears,pc_accounting_perIndicator);
1605  accounting_perIndicatorAgg(indicator,indicator_a,nodesModel,accYears,pc_accounting_perIndicator)
1606      $sum((nodesData,accnodesData)
1607              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1608                  and accounting_perIndicatorNonzero(indicator,indicator_a,accnodesData,accYears)), 1)
1609      = sum((nodesData,accnodesData)
1610              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1611                  and accounting_perIndicatorNonzero(indicator,indicator_a,accnodesData,accYears)),
1612          accounting_perIndicatorIn(indicator,indicator_a,accnodesData,accYears,pc_accounting_perIndicator))
1613      / sum((nodesData,accnodesData)
1614              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1615                  and accounting_perIndicatorNonzero(indicator,indicator_a,accnodesData,accYears)),
1616          1);
1617   
1618  parameter accounting_perIndicator(indicator,indicator_a,accNodesModel,accYears,pc_accounting_perIndicator);
1619   
1620  loop(accNodes,
1621  accounting_perIndicator(indicator,indicator_a,accNodesModel,accYears,pc_accounting_perIndicator)
1622      $(sum(accNodesData$(sameas(accNodes,accNodesData)
1623              and accounting_perIndicatorIn(indicator,indicator_a,accNodesData,"horizon",pc_accounting_perIndicator)), 1)
1624          and map_accNodes(accNodesModel,accNodes)
1625              )
1626      = sum(accNodesData$(sameas(accNodes,accNodesData)),
1627              accounting_perIndicatorIn(indicator,indicator_a,accNodesData,"horizon",pc_accounting_perIndicator));
1628   
1629  accounting_perIndicator(indicator,indicator_a,accNodesModel,accYears,pc_accounting_perIndicator)
1630      $(sum(accNodesData$(sameas(accNodes,accNodesData)
1631              and accounting_perIndicatorIn(indicator,indicator_a,accNodesData,accYears,pc_accounting_perIndicator)), 1)
1632          and map_accNodes(accNodesModel,accNodes)
1633          and not sameas(accYears, "horizon"))
1634      = sum(accNodesData$(sameas(accNodes,accNodesData)),
1635              accounting_perIndicatorIn(indicator,indicator_a,accNodesData,accYears,pc_accounting_perIndicator));
1636  );
1637   
1638  accounting_perIndicator(indicator,indicator_a,accNodesModel,accYears,pc_accounting_perIndicator)
1639      $sum(nodesModel$(accounting_perIndicatorAgg(indicator,indicator_a,nodesModel,"horizon",pc_accounting_perIndicator)
1640          and sameas(accNodesModel,nodesModel)), 1)
1641      = sum(nodesModel$sameas(accNodesModel,nodesModel),
1642          accounting_perIndicatorAgg(indicator,indicator_a,nodesModel,"horizon",pc_accounting_perIndicator));
1643   
1644  accounting_perIndicator(indicator,indicator_a,accNodesModel,accYears,pc_accounting_perIndicator)
1645      $sum(nodesModel$(accounting_perIndicatorAgg(indicator,indicator_a,nodesModel,accYears,pc_accounting_perIndicator)
1646          and sameas(accNodesModel,nodesModel) and not sameas(accYears, "horizon")), 1)
1647      = sum(nodesModel$sameas(accNodesModel,nodesModel),
1648          accounting_perIndicatorAgg(indicator,indicator_a,nodesModel,accYears,pc_accounting_perIndicator));
1649   
1650   
1651  * Make sure all required indicators end up in the model
1652  set activeIndicators(accNodesModel,accYears,indicator);
1653  activeIndicators(accNodesModel,accYears,indicator)
1654     $((accounting_indicatorBounds(accNodesModel,accYears,indicator,"obj") <> 0
1657        or accounting_indicatorBounds(accNodesModel,accYears,indicator,"useFixed") <> 0
1658        or accounting_indicatorBounds(accNodesModel,accYears,indicator,"useLower") <> 0
1659        or accounting_indicatorBounds(accNodesModel,accYears,indicator,"useUpper") <> 0 )
1660          and not accounting_indicatorBounds(accNodesModel,accYears,indicator,"isVariable"))
1661     = yes;
1662   
1663  set activeIndicators_links(linksModel,years,indicator);
1664  activeIndicators_links(linksModelToCalc,yearsToCalc,indicator)
1665     $(accounting_indicatorBounds_links(linksModelToCalc,yearsToCalc,indicator,"useFixed") <> 0
1666        or accounting_indicatorBounds_links(linksModelToCalc,yearsToCalc,indicator,"useLower") <> 0
1667        or accounting_indicatorBounds_links(linksModelToCalc,yearsToCalc,indicator,"useUpper") <> 0 )
1668     = yes;
1669   
1670  set variableIndicators(accNodesModel,accYears,indicator);
1671  variableIndicators(accNodesModel,accYears,indicator)
1672     $(accounting_indicatorBounds(accNodesModel,accYears,indicator,"obj") = 0
1673        and accounting_indicatorBounds(accNodesModel,accYears,indicator,"isVariable"))
1674     = yes;
1675   
1676  * Calculate length of years and discount rates per indicator
1677  parameter yearFactor(accNodesModel,accYears,indicator,accYears);
1678  yearFactor(accNodesModel,accYears,indicator,accYears_a)
1679      $(map_accYears(accYears_a,accYears)
1680          and sum(yearsToCalc$(sameas(yearsToCalc,accYears_a)), 1))
1681      = 1;
1682   
1683  yearFactor(accNodesModel,accYears,indicator,accYears_a)
1684      $(map_accYears(accYears_a,accYears)
1685          and sum(yearsToCalc$(sameas(yearsToCalc,accYears_a)), 1)
1686          and accounting_indicatorBounds(accNodesModel,accYears,indicator,"integral"))
1687      = sum(yearsToCalc$sameas(accYears_a,yearsToCalc), yearsLen(yearsToCalc));
1688   
1689  yearFactor(accNodesModel,accYears,indicator,accYears_a)
1690      $(map_accYears(accYears_a,accYears)
1691          and sum(yearsToCalc$(sameas(yearsToCalc,accYears_a)), 1)
1692          and accounting_indicatorBounds(accNodesModel,accYears,indicator,"integral")
1693          and accounting_indicatorBounds(accNodesModel,accYears,indicator,"endyear")
1694          and yearFactor(accNodesModel,accYears,indicator,accYears_a) = inf)
1695      = accounting_indicatorBounds(accNodesModel,accYears,indicator,"endyear");
1696   
1697  yearFactor(accNodesModel,accYears,indicator,accYears_a)
1698      $(map_accYears(accYears_a,accYears)
1699          and sum(yearsToCalc$(sameas(yearsToCalc,accYears_a)), 1)
1700          and accounting_indicatorBounds(accNodesModel,accYears,indicator,"integral")
1701          and accounting_indicatorBounds(accNodesModel,accYears,indicator,"discount"))
1702      = yearFactor(accNodesModel,accYears,indicator,accYears_a)
1703          * (1 - accounting_indicatorBounds(accNodesModel,accYears,indicator,"discount"))
1704                  ** (accYears_a.val - smin(yearsToCalc, yearsToCalc.val));
1705   
1706   
1707  * ==== calculate compound indicators for the optimization ====
1708  scalar compIndicators_pre;
1709  scalar compIndicators_post;
1710   
1711  parameter compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a);
1712  compoundIndicators(accNodesModel,accYears,indicator,accNodesModel,accYears,indicator)
1713      $activeIndicators(accNodesModel,accYears,indicator) = 1;
1714   
1715  set compoundIndicators_act(accNodesModel,accYears,indicator);
1716  option compoundIndicators_act < compoundIndicators;
1717   
1718  parameter compoundIndicatorsExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa);
1719  parameter compoundIndicatorsExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a);
1720  compoundIndicatorsExt(accNodesModel,accYears,indicator,accNodesModel,accYears,indicator,accNodesModel,accYears,indicator)
1721      $compoundIndicators_act(accNodesModel,accYears,indicator) = 1;
1722   
1723  compIndicators_pre = 0;
1724  compIndicators_post = 1;
1725   
1726  option sparseval = 1;
1727  while(compIndicators_pre < compIndicators_post,
1728      compIndicators_pre = sum((accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa)
1729          $compoundIndicatorsExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa), 1);
1730   
1731      compoundIndicatorsExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa)
1732          $(compoundIndicators_act(accNodesModel,accYears,indicator)
1733              and compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
1734              and not accounting_indicatorBounds(accNodesModel_a,accYears_a,indicator_a,"isVariable")
1735              and map_accNodes(accNodesModel_aa,accNodesModel_a)
1736              and map_accYears(accYears_aa,accYears_a))
1737          = compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
1738              * accounting_perIndicator(indicator_a,indicator_aa,accNodesModel_aa,accYears_aa,"perIndicator");
1739   
1740      option compoundIndicatorsExt_r < compoundIndicatorsExt;
1741   
1742      compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa)
1743          $(compoundIndicators_act(accNodesModel,accYears,indicator)
1744              and sum((accNodesModel_a,accYears_a,indicator_a)
1745                      $compoundIndicatorsExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a), 1) = 1)
1746          = sum((accNodesModel_a,accYears_a,indicator_a)
1747                  $(compoundIndicatorsExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a)),
1748              compoundIndicatorsExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a));
1749   
1750      compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa)
1751          $(compoundIndicators_act(accNodesModel,accYears,indicator)
1752              and sum((accNodesModel_a,accYears_a,indicator_a)
1753                      $compoundIndicatorsExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a), 1) > 1)
1754          = sum((accNodesModel_a,accYears_a,indicator_a)
1755                  $(compoundIndicatorsExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a)
1756                      and not (sameas(accNodesModel, accNodesModel_a) and sameas(accYears, accYears_a) and sameas(indicator, indicator_a))),
1757              compoundIndicatorsExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a))
1758          / sum((accNodesModel_a,accYears_a,indicator_a)
1759                  $(compoundIndicatorsExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a)
1760                      and not (sameas(accNodesModel, accNodesModel_a) and sameas(accYears, accYears_a) and sameas(indicator, indicator_a))), 1);
1761   
1762      option compoundIndicators_act < compoundIndicators;
1763      compIndicators_post = sum((accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa)
1764          $compoundIndicatorsExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa), 1);
1765  );
1766  option sparseval = 0;
1767   
1768  * map to sub-years and sub-nodes
1769  compoundIndicatorsExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_a)
1770      $(compoundIndicators_act(accNodesModel,accYears,indicator)
1771          and compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
1772          and map_accYears(accYears_aa,accYears_a)
1773          and map_accNodes(accNodesModel_aa,accNodesModel_a))
1774      = compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
1775          * yearFactor(accNodesModel,accYears,indicator,accYears_aa);
1776   
1777  * Remove all accounting regions and accounting years
1778  compoundIndicatorsExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa)
1779      $(compoundIndicatorsExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa)
1780          and not accounting_indicatorBounds(accNodesModel_aa,accYears_aa,indicator_aa,"isVariable")
1781          and sum(accNodes$(sameas(accNodes,accNodesModel_aa)), 1)
1782              or sameas("horizon",accYears_aa))
1783      = 0;
1784   
1785  * Map from extended parameter to final parameter
1786  option compoundIndicatorsExt_r < compoundIndicatorsExt;
1787  compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa)
1788      $(compoundIndicators_act(accNodesModel,accYears,indicator)
1789          and sum((accNodesModel_a,accYears_a,indicator_a)
1790                  $compoundIndicatorsExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a), 1) = 1)
1791      = sum((accNodesModel_a,accYears_a,indicator_a)
1792              $(compoundIndicatorsExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a)),
1793          compoundIndicatorsExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a));
1794   
1795  compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa)
1796      $(compoundIndicators_act(accNodesModel,accYears,indicator)
1797          and sum((accNodesModel_a,accYears_a,indicator_a)
1798                  $compoundIndicatorsExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a), 1) > 1)
1799      = sum((accNodesModel_a,accYears_a,indicator_a)
1800              $(compoundIndicatorsExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a)
1801                  and not (sameas(accNodesModel, accNodesModel_a) and sameas(accYears, accYears_a) and sameas(indicator, indicator_a))),
1802          compoundIndicatorsExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a))
1803      / sum((accNodesModel_a,accYears_a,indicator_a)
1804              $(compoundIndicatorsExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a)
1805                  and not (sameas(accNodesModel, accNodesModel_a) and sameas(accYears, accYears_a) and sameas(indicator, indicator_a))), 1);
1806   
1807  * Remove all accounting regions and accounting years
1808  compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
1809      $(compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
1810          and not accounting_indicatorBounds(accNodesModel_a,accYears_a,indicator_a,"isVariable")
1811          and (sum(accNodes$(sameas(accNodes,accNodesModel_a)), 1)
1812              or sameas("horizon",accYears_a)))
1813      = 0;
1814   
1815  * Remove all slack indicators except the ones declared in indicatorBounds
1816  compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
1817      $(compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
1818          and sum((accNodesModel_aa,accYears_aa)$accounting_indicatorBounds(accNodesModel_aa,accYears_aa,indicator_a,"isVariable"), 1)
1819          and not accounting_indicatorBounds(accNodesModel_a,accYears_a,indicator_a,"isVariable"))
1820      = 0;
1821   
1822  * ==== compound indicators for the post calculation ====
1823  parameter compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a);
1824  compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel,accYears,indicator)
1825      $(sum(nodesModelToCalc$map_accNodesToCalc(accNodesModel,nodesModelToCalc), 1)
1826          and sum(yearsToCalc$map_accYearsToCalc(accYears,yearsToCalc), 1)) = 1;
1827   
1828  set compoundIndicatorsFull_act(accNodesModel,accYears,indicator);
1829  option compoundIndicatorsFull_act < compoundIndicatorsFull;
1830   
1831  parameter compoundIndicatorsFullExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa);
1832  parameter compoundIndicatorsFullExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a);
1833  compoundIndicatorsFullExt(accNodesModel,accYears,indicator,accNodesModel,accYears,indicator,accNodesModel,accYears,indicator) = 1;
1834   
1835  compIndicators_pre = 0;
1836  compIndicators_post = 1;
1837   
1838  option sparseval = 1;
1839  while(compIndicators_pre < compIndicators_post,
1840      compIndicators_pre = sum((accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa)
1841          $compoundIndicatorsFullExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa), 1);
1842   
1843      compoundIndicatorsFullExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa)
1844          $(compoundIndicatorsFull_act(accNodesModel,accYears,indicator)
1845              and compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
1846              and not accounting_indicatorBounds(accNodesModel_a,accYears_a,indicator_a,"isVariable")
1847              and map_accNodes(accNodesModel_aa,accNodesModel_a)
1848              and map_accYears(accYears_aa,accYears_a))
1849          = compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
1850              * accounting_perIndicator(indicator_a,indicator_aa,accNodesModel_aa,accYears_aa,"perIndicator");
1851   
1852      option compoundIndicatorsFullExt_r < compoundIndicatorsFullExt;
1853   
1854      compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa)
1855          $(compoundIndicatorsFull_act(accNodesModel,accYears,indicator)
1856              and sum((accNodesModel_a,accYears_a,indicator_a)
1857                      $compoundIndicatorsFullExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a), 1) = 1)
1858          = sum((accNodesModel_a,accYears_a,indicator_a)
1859                  $(compoundIndicatorsFullExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a)),
1860              compoundIndicatorsFullExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a));
1861   
1862      compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa)
1863          $(compoundIndicatorsFull_act(accNodesModel,accYears,indicator)
1864              and sum((accNodesModel_a,accYears_a,indicator_a)
1865                      $compoundIndicatorsFullExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a), 1) > 1)
1866          = sum((accNodesModel_a,accYears_a,indicator_a)
1867                  $(compoundIndicatorsFullExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a)
1868                      and not (sameas(accNodesModel, accNodesModel_a) and sameas(accYears, accYears_a) and sameas(indicator, indicator_a))),
1869              compoundIndicatorsFullExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a))
1870          / sum((accNodesModel_a,accYears_a,indicator_a)
1871                  $(compoundIndicatorsFullExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a)
1872                      and not (sameas(accNodesModel, accNodesModel_a) and sameas(accYears, accYears_a) and sameas(indicator, indicator_a))), 1);
1873   
1874      option compoundIndicatorsFull_act < compoundIndicatorsFull;
1875      compIndicators_post = sum((accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa)
1876          $compoundIndicatorsFullExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa), 1);
1877  );
1878  option sparseval = 0;
1879   
1880  * map to sub-years and sub-nodes
1881  compoundIndicatorsFullExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_a)
1882      $(compoundIndicatorsFull_act(accNodesModel,accYears,indicator)
1883          and compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
1884          and map_accYears(accYears_aa,accYears_a)
1885          and map_accNodes(accNodesModel_aa,accNodesModel_a))
1886      = compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
1887          * yearFactor(accNodesModel,accYears,indicator,accYears_aa);
1888   
1889  * Remove all accounting regions and accounting years
1890  compoundIndicatorsFullExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa)
1891      $(compoundIndicatorsFullExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa)
1892          and not accounting_indicatorBounds(accNodesModel_aa,accYears_aa,indicator_aa,"isVariable")
1893          and sum(accNodes$(sameas(accNodes,accNodesModel_aa)), 1)
1894              or sameas("horizon",accYears_aa))
1895      = 0;
1896   
1897  * Map from extended parameter to final parameter
1898  option compoundIndicatorsFullExt_r < compoundIndicatorsFullExt;
1899  compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa)
1900      $(compoundIndicatorsFull_act(accNodesModel,accYears,indicator)
1901          and sum((accNodesModel_a,accYears_a,indicator_a)
1902                  $compoundIndicatorsFullExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a), 1) = 1)
1903      = sum((accNodesModel_a,accYears_a,indicator_a)
1904              $(compoundIndicatorsFullExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a)),
1905          compoundIndicatorsFullExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a));
1906   
1907  compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa)
1908      $(compoundIndicatorsFull_act(accNodesModel,accYears,indicator)
1909          and sum((accNodesModel_a,accYears_a,indicator_a)
1910                  $compoundIndicatorsFullExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a), 1) > 1)
1911      = sum((accNodesModel_a,accYears_a,indicator_a)
1912              $(compoundIndicatorsFullExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a)
1913                  and not (sameas(accNodesModel, accNodesModel_a) and sameas(accYears, accYears_a) and sameas(indicator, indicator_a))),
1914          compoundIndicatorsFullExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a))
1915      / sum((accNodesModel_a,accYears_a,indicator_a)
1916              $(compoundIndicatorsFullExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a)
1917                  and not (sameas(accNodesModel, accNodesModel_a) and sameas(accYears, accYears_a) and sameas(indicator, indicator_a))), 1);
1918   
1919  * Remove all accounting regions and accounting years
1920  compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
1921      $(compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
1922          and not accounting_indicatorBounds(accNodesModel_a,accYears_a,indicator_a,"isVariable")
1923          and (sum(accNodes$(sameas(accNodes,accNodesModel_a)), 1)
1924              or sameas("horizon",accYears_a)))
1925      = 0;
1926   
1927  * Remove all slack indicators except the ones declared in indicatorBounds
1928  compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
1929      $(compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
1930          and sum((accNodesModel_aa,accYears_aa)$accounting_indicatorBounds(accNodesModel_aa,accYears_aa,indicator_a,"isVariable"), 1)
1931          and not accounting_indicatorBounds(accNodesModel_a,accYears_a,indicator_a,"isVariable"))
1932      = 0;
1933   
1934  * Check if the objective value and optimization sense is set correctly
1935  scalar opti_values, opti_sense;
1936  opti_values = sum((accNodesModel,accYears,indicator)$(accounting_indicatorBounds(accNodesModel,accYears,indicator,"obj") <> 0), 1);
1937  opti_sense = sum((accNodesModel,accYears,indicator), accounting_indicatorBounds(accNodesModel,accYears,indicator,"obj"));
1938  abort$(opti_values < 1)
1939      "Accounting: No indicator specified as objective value"
1940  abort$(opti_values > 1)
1941      "Accounting: Too many indicators specified as objective value"
1942  abort$(opti_sense <> -1 and opti_sense <> 1)
1943      "Accounting: Optimization sense has to be either -1 or 1"
INCLUDE    C:\Local\REMix\framework\remix\framework\model\source\accounting\annuities.gms
1945  * SPDX-FileCopyrightText: Copyright (c) 2023 German Aerospace Center (DLR)
1946  * SPDX-License-Identifier: BSD-3-Clause
1947   
1948  * Calculation of annuities
1949   
1950  abort$(sum((indicator,nodesModelToCalc,converter_techs,vintage)
1951          $(accounting_converterUnits(indicator,nodesModelToCalc,converter_techs,vintage,"useAnnuity") = 1
1952          and accounting_converterUnits(indicator,nodesModelToCalc,converter_techs,vintage,"amorTime") < 1), 1) > 0 )
1953      "Accounting: Some converter technologies use annuities but have no amortization time"
1954   
1955  parameter accounting_annuityFactor_converter(indicator,nodesModel,converter_techs,vintage);
1956  accounting_annuityFactor_converter(indicator,nodesModelToCalc,converter_techs,vintage)
1957      $accounting_converterUnits(indicator,nodesModelToCalc,converter_techs,vintage,"useAnnuity")
1958      =
1959      accounting_converterUnits(indicator,nodesModelToCalc,converter_techs,vintage,"interest")
1960          * (1 + accounting_converterUnits(indicator,nodesModelToCalc,converter_techs,vintage,"interest"))
1961          ** accounting_converterUnits(indicator,nodesModelToCalc,converter_techs,vintage,"amorTime")
1962      / ((1 + accounting_converterUnits(indicator,nodesModelToCalc,converter_techs,vintage,"interest"))
1963          ** accounting_converterUnits(indicator,nodesModelToCalc,converter_techs,vintage,"amorTime") - 1);
1964   
1965   
1966  abort$(sum((indicator,nodesModelToCalc,storage_techs,vintage)
1967          $(accounting_storageUnits(indicator,nodesModelToCalc,storage_techs,vintage,"useAnnuity") = 1
1968          and accounting_storageUnits(indicator,nodesModelToCalc,storage_techs,vintage,"amorTime") < 1), 1) > 0 )
1969      "Accounting: Some storage technologies use annuities but have no amortization time"
1970   
1971  parameter accounting_annuityFactor_storage(indicator,nodesModel,storage_techs,vintage);
1972  accounting_annuityFactor_storage(indicator,nodesModelToCalc,storage_techs,vintage)
1973      $accounting_storageUnits(indicator,nodesModelToCalc,storage_techs,vintage,"useAnnuity")
1974      =
1975      accounting_storageUnits(indicator,nodesModelToCalc,storage_techs,vintage,"interest")
1976          * (1 + accounting_storageUnits(indicator,nodesModelToCalc,storage_techs,vintage,"interest"))
1977          ** accounting_storageUnits(indicator,nodesModelToCalc,storage_techs,vintage,"amorTime")
1978      / ((1 + accounting_storageUnits(indicator,nodesModelToCalc,storage_techs,vintage,"interest"))
1979          ** accounting_storageUnits(indicator,nodesModelToCalc,storage_techs,vintage,"amorTime") - 1);
1980   
1981   
1982  abort$(sum((indicator,linksModelToCalc,transfer_techs,vintage)
1983          $(accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"useAnnuity") = 1
1984          and accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"amorTime") < 1), 1) > 0 )
1985      "Accounting: Some transfer technologies use annuities but have no amortization time"
1986   
1987  parameter accounting_annuityFactor_transferLink(indicator,linksModel,transfer_techs,vintage);
1988  accounting_annuityFactor_transferLink(indicator,linksModelToCalc,transfer_techs,vintage)
1989      $accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"useAnnuity")
1990      =
1991      accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"interest")
1992          * (1 + accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"interest"))
1993          ** accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"amorTime")
1994      / ((1 + accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"interest"))
1995          ** accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"amorTime") - 1);
1996   
1997   
1998   
1999  abort$(sum((indicator,linksModelToCalc,transfer_techs,vintage,link_types)
2000          $(accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"useAnnuity") = 1
2001          and accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"amorTime") < 1), 1) > 0 )
2002      "Accounting: Some transfer-per-length technologies use annuities but have no amortization time"
2003   
2004  parameter accounting_annuityFactor_transferDistance(indicator,linksModel,transfer_techs,vintage,link_types);
2005  accounting_annuityFactor_transferDistance(indicator,linksModelToCalc,transfer_techs,vintage,link_types) = 1;
2006   
2007  accounting_annuityFactor_transferDistance(indicator,linksModelToCalc,transfer_techs,vintage,link_types)
2008      $accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"useAnnuity")
2009      =
2010      accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"interest")
2011          * (1 + accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"interest"))
2012          ** accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"amorTime")
2013      / ((1 + accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"interest"))
2014          ** accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"amorTime") - 1);
2015   
INCLUDE    C:\Local\REMix\framework\remix\framework\model\source\methods\mga_pre.gms
2017  * SPDX-FileCopyrightText: Copyright (c) 2023 German Aerospace Center (DLR)
2018  * SPDX-License-Identifier: BSD-3-Clause
2019   
INCLUDE    C:\Local\REMix\framework\remix\framework\model\source\methods\pareto_pre.gms
2023  * SPDX-FileCopyrightText: Copyright (c) 2023 German Aerospace Center (DLR)
2024  * SPDX-License-Identifier: BSD-3-Clause
2025   
INCLUDE    C:\Local\REMix\framework\remix\framework\model\source\postcalc\declaration.gms
2029  * SPDX-FileCopyrightText: Copyright (c) 2023 German Aerospace Center (DLR)
2030  * SPDX-License-Identifier: BSD-3-Clause
2031  * // # Output data
2032  * // This is the reference data model of the REMix output.
2033  * //
2034  * // ## Standard output
2037   
2044   
2046   
2047  set capType / "build", "decom", "total", "lowerLimit", "upperLimit", "total_degraded" /;
2048  set balanceType / "netto", "brutto", "positive", "negative", "flh" /;
2049  set profileType / "upper", "fixed", "lower" /;
2050  set r2a_has_converter_cost(indicator,nodesModel,years,techs,vintage,commodity);
2051   
2052  ** // OUTPUT: indicator_accounting | OEO_00000350:quantity value
2053  * // ### indicator_accounting
2054  * // Title: Accounting indicators Post-calculation
2055  parameter indicator_accounting(accNodesModel,accYears,indicator) "Post-calculation aggregated indicator accounting" ;
2056  * //
2057  ** // OUTPUT: indicator_accounting_ref | OEO_00000350:quantity value
2058  * // ### indicator_accounting_ref
2059  * // Title: Accounting indicators reference
2060  parameter indicator_accounting_ref(accNodesModel,accYears,indicator) "Indicator accounting optimization levels" ;
2061  * //
2062  ** // OUTPUT: indicator_accounting_comp | OEO_00000350:quantity value
2063  * // ### indicator_accounting_comp
2064  * // Title: Accounting indicators composition
2065  parameter indicator_accounting_comp(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a) "Indicator accounting with other indicator composition" ;
2066  * //
2067  ** // OUTPUT: indicator_accounting_detailed | OEO_00000350:quantity value
2068  * // ### indicator_accounting_detailed
2069  * // Title: Accounting indicators detail
2070  parameter indicator_accounting_detailed(indicator,nodesModel,years,techs) "Indicator accounting with technological composition" ;
2071  * //
2072  ** // OUTPUT: indicator_accounting_links | OEO_00000350:quantity value
2073  * // ### indicator_accounting_links
2074  * // Title: Accounting indicators per transfer link
2075  parameter indicator_accounting_links(indicator,nodesModel,nodesModel_a,linksModel,years,techs) "Indicator accounting of transfer technologies" ;
2076  * //
2077  parameter converter_ratedInput(techs,vintage,commodity);
2078  parameter converter_ratedOutput(techs,vintage,commodity);
2079  parameter converter_ratedOutput_min(nodesModel,years,techs,commodity);
2080  parameter converter_ratedOutput_max(nodesModel,years,techs,commodity);
2081   
2082  ** // OUTPUT: converter_caps | OEO_00010257:power capacity
2083  * // ### converter_caps
2084  * // Title: Coverter capacities post-calculation
2085  parameter converter_caps(accNodesModel,accYears,techs,commodity,capType) "Converter capacities, aggregated total" ;
2086  * //
2087  parameter converter_caps_ext(accNodesModel,nodesModel,accYears,years,techs,vintage,commodity,capType);
2088   
2089  ** // OUTPUT: converter_units | OEO_00000350:quantity value
2090  * // ### converter_units
2091  * // Title: Coverter units post-calculation
2092  parameter converter_units(accNodesModel,accYears,techs,vintage,capType) "Converter units" ;
2093  * //
2094  parameter converter_units_ext(accNodesModel,nodesModel,accYears,years,techs,vintage,capType);
2095   
2096  parameter max_transfer_coefficient(techs,commodity);
2097  parameter min_transfer_coefficient(techs,commodity);
2098  ** // OUTPUT: transfer_links | OEO_00000350:quantity value
2099  * // ### transfer_links
2100  * // Title: Transfer post-calculation
2101  parameter transfer_links(linksModel,years,techs,vintage,capType) "Transfer links" ;
2102  * //
2103  ** // OUTPUT: transfer_caps | OEO_00010257:power capacity
2104  * // ### transfer_caps
2105  * // Title: Transfer capacities post-calculation
2106  parameter transfer_caps(nodesModel_start,nodesModel_end,linksModel,years,techs,commodity,capType) "Transfer capacities, aggregated total" ;
2107  * //
2108  ** // OUTPUT: transfer_flows | OEO_00050019:energy amount value
2109  * // ### transfer_flows
2110  * // Title: Transfer hourly flows
2111  parameter transfer_flows(timeModel,nodesModel_start,nodesModel_end,linksModel,years,techs,commodity) "Hourly link flows" ;
2112  * //
2113  ** // OUTPUT: transfer_flows_annual | OEO_00050019:energy amount value
2114  * // ### transfer_flows_annual
2115  * // Title: Transfer annual flows
2116  parameter transfer_flows_annual(nodesModel_start,nodesModel_end,linksModel,years,techs,commodity,balanceType) "Annual link flows" ;
2117  * //
2118  ** // OUTPUT: transfer_losses | OEO_00050019:energy amount value
2119  * // ### transfer_losses
2120  * // Title: Transfer hourly losses
2121  parameter transfer_losses(timeModel,nodesModel_start,nodesModel_end,linksModel,years,techs,commodity) "Hourly link losses" ;
2122  * //
2123  ** // OUTPUT: transfer_losses_annual | OEO_00050019:energy amount value
2124  * // ### transfer_losses_annual
2125  * // Title: Transfer annual losses
2126  parameter transfer_losses_annual(nodesModel_start,nodesModel_end,linksModel,years,techs,commodity,balanceType) "Annual link losses" ;
2127  * //
2128  parameter storage_size_max(nodesModel,years,techs,commodity);
2129  parameter storage_size_min(nodesModel,years,techs,commodity);
2130  ** // OUTPUT: storage_units |  OEO_00000350:quantity value
2131  * // ### storage_units
2132  * // Title: Storage units post-calculation
2133  parameter storage_units(accNodesModel,accYears,techs,vintage,capType) "Storage units" ;
2134  * //
2135  parameter storage_units_ext(accNodesModel,nodesModel,accYears,years,techs,vintage,capType);
2136  ** // OUTPUT: storage_caps | OEO_00230000:energy storage capacity
2137  * // ### storage_caps
2138  * // Title: Storage capacities post-calculation
2139  parameter storage_caps(accNodesModel,accYears,techs,commodity,capType) "Storage capacities, aggregated total" ;
2140  * //
2141  parameter storage_caps_ext(accNodesModel,nodesModel,accYears,years,techs,vintage,commodity,capType);
2142  ** // OUTPUT: storage_level_out | OEO_00330012:energy storage content
2143  * // ### storage_level_out
2144  * // Title: Storage level
2145  parameter storage_level_out(timeModel,accNodesModel,accYears,techs,commodity) "Storage level per time step" ;
2146  * //
2147  parameter storage_level_out_ext(timeModel,accNodesModel,nodesModel,accYears,years,techs,vintage,commodity);
2148  ** // OUTPUT: storage_flows | OEO_00050019:energy amount value
2149  * // ### storage_flows
2150  * // Title: Storage hourly flows
2151  parameter storage_flows(timeModel,accNodesModel,accYears,techs,commodity) "Storage flows per time step" ;
2152  * //
2153  parameter storage_flows_ext(timeModel,accNodesModel,nodesModel,accYears,years,techs,vintage,commodity);
2154  ** // OUTPUT: storage_flows_annual | OEO_00050019:energy amount value
2155  * // ### storage_flows_annual
2156  * // Title: Storage annual flows
2157  parameter storage_flows_annual(accNodesModel,accYears,techs,commodity,balanceType) "Aggregated storage flows" ;
2158  * //
2159  ** // OUTPUT: storage_losses_out | OEO_00050019:energy amount value
2160  * // ### storage_losses_out
2161  * // Title: Storage hourly losses
2162  parameter storage_losses_out(timeModel,accNodesModel,accYears,techs,commodity) "Storage losses per time step" ;
2163  * //
2164  ** // OUTPUT: storage_losses_annual | OEO_00050019:energy amount value
2165  * // ### storage_losses_annual
2166  * // Title: Storage annual losses
2167  parameter storage_losses_annual(accNodesModel,accYears,techs,commodity,balanceType) "Aggregated storage losses" ;
2168  * //
2169  ** // OUTPUT: commodity_balance | OEO_00000350:quantity value
2170  * // ### commodity_balance
2171  * // Title: Hourly commodity balance
2172  parameter commodity_balance(timeModel,accNodesModel,accYears,techs,commodity) "Commodity balances per model hour" ;
2173  parameter commodity_balance_ext(timeModel,accNodesModel,nodesModel,accYears,years,techs,vintage,commodity);
2174  * //
2175  ** // OUTPUT: commodity_balance_annual | OEO_00000350:quantity value
2176  * // ### commodity_balance_annual
2177  * // Title: Annual commodity balance
2178  parameter commodity_balance_annual(accNodesModel,accYears,techs,commodity,balanceType) "Aggregated commodity balances" ;
2179  * //
2180  ** // OUTPUT: marginals_sourcesink_profile | OEO_00040008:marginal cost
2181  * // ### marginals_sourcesink_profile
2182  * // Title: Source-sink marginals
2183  parameter marginals_sourcesink_profile(timeModel,nodesModel,years,techs,commodity) "Source and sink flow marginal values" ;
2184  * //
2185  ** // OUTPUT: marginals_balance | OEO_00040008:marginal cost
2186  * // ### marginals_balance
2187  * // Title: Nodel balance marginals
2188  parameter marginals_balance(timeModel,nodesModel,years,commodity) "Nodal balance marginal values" ;
2189  * //
2190  ** // OUTPUT: marginals_sourcesink_sum | OEO_00040008:marginal cost
2191  * // ### marginals_sourcesink_sum
2192  * // Title: Source-sink annual marginals
2193  parameter marginals_sourcesink_sum(nodesModel,years,techs,commodity) "Annual source and sink flow marginal values" ;
2194  * //
2195  ** // OUTPUT: marginals_indicator_bounds | OEO_00040008:marginal cost
2196  * // ### marginals_indicator_bounds
2197  * // Title: Indicator bounds marginals
2198  parameter marginals_indicator_bounds(accNodesModel,accYears,indicator) "Accounting indicator marginals" ;
2199  * //
2200  * // ## REMix-AMIRIS interface output
2201  * //
2202  ** // OUTPUT: r2a_annuity_cost_converter | OEO_00040009:cost
2203  * // ### r2a_annuity_cost_converter
2204  * // Title: Converter annuity cost
2205  parameter r2a_annuity_cost_converter(indicator,accNodesModel,accYears,techs,vintage,commodity) "Annuity cost of converters" ;
2206  * //
2207  ** // OUTPUT: r2a_spec_cost_converter | OEO_00040009:cost
2208  * // ### r2a_spec_cost_converter
2209  * // Title: Converter specific cost
2210  parameter r2a_spec_cost_converter(indicator,accNodesModel,accYears,techs,vintage,commodity) "Specific cost of converters" ;
2211  * //
2212  ** // OUTPUT: r2a_spec_cost_fuel | OEO_00040009:cost
2213  * // ### r2a_spec_cost_fuel
2214  * // Title: Commodity specific cost
2215  parameter r2a_spec_cost_fuel(indicator,accNodesModel,accYears,techs,commodity) "Specific cost of commodities, used particularly for fuels" ;
2216  * //
2217  ** // OUTPUT: r2a_spec_cost_indicator | OEO_00040009:cost
2218  * // ### r2a_spec_cost_indicator
2219  * // Title: Indicator specific cost
2220  parameter r2a_spec_cost_indicator(indicator,indicator_a,accNodesModel,accYears) "Specific indicator cost" ;
2221  * //
2222  ** // OUTPUT: r2a_converter_efficiencies | OEO_00140050:efficiency value
2223  * // ### r2a_converter_efficiencies
2224  * // Title: Indicator specific cost
2225  parameter r2a_converter_efficiencies(techs,vintage,activity,commodity,commodity_a) "Converter-specific efficiency" ;
2226  * //
2227  ** // OUTPUT: r2a_converter_avail_factor | OEO_00000350:quantity value
2228  * // ### r2a_converter_avail_factor
2229  * // Title: Converter availability factor
2230  parameter r2a_converter_avail_factor(accNodesModel,accYears,techs,vintage) "Availability factor of converter technologies" ;
2231  parameter r2a_converter_avail_profile(timeModel,accNodesModel,accYears,techs,commodity,profileType) "Availability of converter technologies" ;
2232  parameter r2a_converter_avail_profile_ext(timeModel,accNodesModel,nodesModel,accYears,years,techs,vintage,commodity,profileType);
2233  * //
2234  ** // OUTPUT: r2a_storage_e2p | OEO_00000350:quantity value
2235  * // ### r2a_storage_e2p
2236  * // Title: E2P Storage
2237  parameter r2a_storage_e2p(accNodesModel,accYears,techs,vintage,commodity,capType) "Energy-to-power ratio" ;
2238  * //
2239  ** // OUTPUT: r2a_storage_selfdischarge | OEO_00000350:quantity value
2240  * // ### r2a_storage_selfdischarge
2241  * // Title: Storage self discharge rates
2242  parameter r2a_storage_selfdischarge(accNodesModel,accYears,techs,vintage,commodity);
2243   
INCLUDE    C:\Local\REMix\framework\remix\framework\model\source\loadgdx.gms
2247  * SPDX-FileCopyrightText: Copyright (c) 2023 German Aerospace Center (DLR)
2248  * SPDX-License-Identifier: BSD-3-Clause
2249   
2250  * ==== global settings ====
2252   
2254   
INCLUDE    C:\Local\REMix\framework\remix\framework\model\source\core\converter.gms
2256  * SPDX-FileCopyrightText: Copyright (c) 2023 German Aerospace Center (DLR)
2257  * SPDX-License-Identifier: BSD-3-Clause
2258   
2259  * // # core_converter
2260  * // The equations in this file describe the converters in the model.
2261   
2262  * // ## Advanced features
2263  * //
2264  * // You can find a more detailed explanation of the %curly_open%ref%curly_close%`MIP features <explanations_mip_label>`.
2265  ** // There is also a more detailed explanation on the modeling of outages at the %curly_open%ref%curly_close%`resilience section <explanations_resilience_label>`.
2266  * //
2267  * // In the following table you can see which modifications you have to make to your data to use the different features.
2268  * //
2269  * // | Feature | Modification |
2270  * // | ------ | ------ |
2271  * // | MIP expansion | The converter_tech_Parameter "mipUnits" has to be set to 1 in converter_techParam.dat for the technologies and years where descrete expansion is wanted |
2272  * // | Minimum up/downtime | The converter_tech_Parameters "minUptime" and/or "minDowntime" need to be set to the according amount of minimum time steps.Furthermore, the converter_tech_Parameter "mipDispatch" has to be set to 1 in converter_techParam.dat
2273  * // for the technologies and years where a minimum up- or downtime should be applied so that the units can be shut down. "mipUnits" will automatically be set to 1 |
2274  * // | Partial load | The converter_tech_Parameter "mipDispatch" has to be set to 1 in converter_techParam.dat for the technologies and years where you want to make use of the partial load feature. You also have to set a value to
2275  * // the converter_coefficient_parameters "minLoad" and/or "maxLoad" for the according technologies, vintages, activities and commodities. You can then for example set different "coefficient" values for each activity in converter_coefficient.dat |
2276  ** // | Outages | You have to include the converter_outageProfile.dat-file and while executing the model you have to set --method=resilience |
2277   
2278  * // ## %curly_open%ref%curly_close%`sets <remix_model_sets_label>`
2279  * //
2280  * // ### set_converter_techs.dat
2281  * // In this file all converter technologies are listed that can be used within your model.
2282  * //
2283  * // ### set_activities.dat
2284  * // All modes with which the converter technologies can be operated need to be added here.
2285  * // Examples: Charge (for the charging mode of a storage), Powergen (for the mode in which a converter produces electricity), Curtailment (for the mode in which a renewable power plant is shut down), …
2286  * // If you would like to use the partial load feature, all activity modes that should be available for this feature need to be defined here as well.
2287  * //
2288  * // ### set_commodities.dat
2289  * // In this file all commodities are listed that can be used and converted by the converter technologies.
2290  * // Examples: Electricity, Coal, Biomass, Hydrogen, …
2291   
2292  * // ## Variables
2293  * // {special_table_converter_variables}
3787   
3788  * ==== loading units from gdx file ====
3789   
3790  * Load units from gdx file
3792   
3793  * ==== calculation of mappings ====
3794   
3795  * Technologies with a lifeTime > 0 are available
3796  set converter_availTech(nodesModel,years,converter_techs,vintage);
3797  converter_availTech(nodesModel,years,converter_techs,vintage)
3798      $(vintage.val = smax(vintage_a$(vintage_a.val <= years.val
3799          and converter_techParam(converter_techs,vintage_a,"lifeTime") > 0), vintage_a.val)) = yes;
3800   
3801  * Technologies to optimize become unavailable if they have an unitsUpperLimit of 0
3802  converter_availTech(nodesModel,years,converter_techs,vintage)
3803      $(yearsToCalc(years) and converter_capacityParam(nodesModel,years,converter_techs,"unitsUpperLimit") = 0 ) = no;
3804   
3805  * Technologies already built become unavailable if they have an unitsBuild of 0
3806  converter_availTech(nodesModel,years,converter_techs,vintage)
3807      $( ( not yearsToCalc(years)) and converter_capacityParam(nodesModel,years,converter_techs,"unitsBuild") = 0 ) = no;
3808   
3809  * Used technologies are available technologies over their technical lifeTime
3810  set converter_usedTech(nodesModel,years,converter_techs,vintage);
3811  converter_usedTech(nodesModel,years,converter_techs,vintage)
3812      $(vintage.val <= years.val
3813          and years.val < smax(years_a$converter_availTech(nodesModel,years_a,converter_techs,vintage),
3814                                  years_a.val + converter_techParam(converter_techs,vintage,"lifeTime"))
3815          ) = yes;
3816   
3817  * Technologies have to be decomissioned in the interval of first avail + lifetime to last avail + lifetime
3818  set converter_decomTech(nodesModel,years,converter_techs,vintage);
3819  converter_decomTech(nodesModel,years,converter_techs,vintage)
3820    $(sum(years_a$converter_usedTech(nodesModel,years_a,converter_techs,vintage), 1)
3821      and sum(yearsToCalc
3822        $(sameas(years, yearsToCalc)
3823          and yearsToCalc.val >= smin(years_a$converter_availTech(nodesModel,years_a,converter_techs,vintage), years_a.val) + converter_techParam(converter_techs,vintage,"lifeTime")
3824          and yearsToCalc.val <= smax(years_a$converter_availTech(nodesModel,years_a,converter_techs,vintage), years_a.val) + converter_techParam(converter_techs,vintage,"lifeTime")), 1))
3825    = yes;
3826   
3827  * Extend the decom frame to the year after the last year of usedTech
3828  converter_decomTech(nodesModel,yearsToCalc,converter_techs,vintage)
3829    $(converter_usedTech(nodesModel,yearsToCalc-1,converter_techs,vintage)
3830      and converter_decomTech(nodesModel,yearsToCalc-1,converter_techs,vintage))
3831    = yes;
3832   
3833  * Mapping for used activities and commodities
3834  set converter_usedActCom(converter_techs,vintage,activity,commodity);
3835  option converter_usedActCom < converter_coefficient;
3836   
3837  set converter_usedAct(converter_techs,vintage,activity);
3838  option converter_usedAct < converter_usedActCom;
3839   
3840  set converter_usedCom(converter_techs,vintage,commodity);
3841  option converter_usedCom < converter_usedActCom;
3842   
3843  set converter_usedTechAct(nodesModel,years,converter_techs,vintage,activity);
3844  converter_usedTechAct(nodesModel,years,converter_techs,vintage,activity)
3845      $(converter_usedTech(nodesModel,years,converter_techs,vintage)
3846          and converter_usedAct(converter_techs,vintage,activity))
3847      = yes;
3848   
3849  set converter_useRampPos(nodesModel,years,converter_techs,vintage);
3850  converter_useRampPos(nodesModelToCalc,yearsToCalc,converter_techs,vintage)
3851    $(sum(indicator$accounting_converterStartup(indicator,nodesModelToCalc,converter_techs,vintage,"perRamp"), 1)
3852      or sum(indicator$accounting_converterStartup(indicator,nodesModelToCalc,converter_techs,vintage,"perRampPos"), 1))
3853    = 1;
3854   
3855  set converter_useRampNeg(nodesModel,years,converter_techs,vintage);
3856  converter_useRampNeg(nodesModelToCalc,yearsToCalc,converter_techs,vintage)
3857    $(sum(indicator$accounting_converterStartup(indicator,nodesModelToCalc,converter_techs,vintage,"perRamp"), 1)
3858      or sum(indicator$accounting_converterStartup(indicator,nodesModelToCalc,converter_techs,vintage,"perRampNeg"), 1))
3859    = 1;
3860   
3861   
3862  * ==== aggregation of profiles ====
3863   
3864  * derive upper and lower profiles then aggregate
3865  set converter_activity_hasProfileIn(nodesData,years,converter_techs,pc_converter_activityProfile);
3866  option converter_activity_hasProfileIn < converter_activityProfileIn;
3867   
3868  set converter_activity_hasProfile(nodesModel,years,converter_techs,pc_converter_activityProfile);
3869  converter_activity_hasProfile(nodesModelToCalc,yearsToCalc,converter_techs,pc_converter_activityProfile)
3870      = sum(nodesData$aggregateNodesModel(nodesData,nodesModelToCalc),
3871              converter_activity_hasProfileIn(nodesData,yearsToCalc,converter_techs,pc_converter_activityProfile));
3872   
3873  set converter_coefficient_hasProfileIn(nodesData,years,converter_techs,vintage,activity,commodity);
3874  option converter_coefficient_hasProfileIn < converter_coefficientProfileIn;
3875   
3876  set converter_coefficient_hasProfile(nodesModel,years,converter_techs,vintage,activity,commodity);
3877  converter_coefficient_hasProfile(nodesModelToCalc,yearsToCalc,converter_techs,vintage,activity,commodity)
3878      = sum(nodesData$aggregateNodesModel(nodesData,nodesModelToCalc),
3879              converter_coefficient_hasProfileIn(nodesData,yearsToCalc,converter_techs,vintage,activity,commodity));
3880   
3881  * aagregate time dimension
3882  parameter converter_activityProfileIn_aggTime(timeModel,nodesData,yearsToCalc,converter_techs,pc_converter_activityProfile);
3883  converter_activityProfileIn_aggTime(timeModelToCalc,nodesData,yearsToCalc,converter_techs,pc_converter_activityProfile)
3884    $converter_activity_hasProfileIn(nodesData,yearsToCalc,converter_techs,pc_converter_activityProfile)
3885    = sum(timeData$timeMapping(timeData,timeModelToCalc),
3886            converter_activityProfileIn(timeData,nodesData,yearsToCalc,converter_techs,pc_converter_activityProfile)
3887            / timeLength(timeModelToCalc));
3888  option clear = converter_activityProfileIn;
3889   
3890  * weighted average for a real sum of units upper limits, plain average if one region has an upper limit of inf
3891  parameter converter_activityProfile(timeModel,nodesModel,years,converter_techs,vintage,pc_converter_activityProfile);
3892  converter_activityProfile(timeModelToCalc,converter_usedTech(nodesModelToCalc,yearsToCalc,converter_techs,vintage),"upper")
3893      = converter_techParam(converter_techs,vintage,"activityUpperLimit");
3894  converter_activityProfile(timeModelToCalc,converter_usedTech(nodesModelToCalc,yearsToCalc,converter_techs,vintage),"lower")
3895      = converter_techParam(converter_techs,vintage,"activityLowerLimit");
3896   
3897   
3898  set converter_finiteUnitLimit(nodesModelToCalc,yearsToCalc,converter_techs);
3899  converter_finiteUnitLimit(nodesModelToCalc,yearsToCalc,converter_techs)
3900      = sum(nodesData$aggregateNodesModel(nodesData,nodesModelToCalc), converter_capacityParamIn(nodesData,yearsToCalc,converter_techs,"unitsUpperLimit")) > 0
3901          and sum(nodesData$aggregateNodesModel(nodesData,nodesModelToCalc), converter_capacityParamIn(nodesData,yearsToCalc,converter_techs,"unitsUpperLimit")) < inf;
3902   
3903  set converter_infiniteUnitLimit(nodesModelToCalc,yearsToCalc,converter_techs);
3904  converter_infiniteUnitLimit(nodesModelToCalc,yearsToCalc,converter_techs)
3905      = sum(nodesData$aggregateNodesModel(nodesData,nodesModelToCalc), converter_capacityParamIn(nodesData,yearsToCalc,converter_techs,"unitsUpperLimit")) = inf;
3906   
3907  converter_activityProfile(timeModelToCalc,converter_usedTech(nodesModelToCalc,yearsToCalc,converter_techs,vintage),pc_converter_activityProfile)
3908      $(converter_activity_hasProfile(nodesModelToCalc,yearsToCalc,converter_techs,pc_converter_activityProfile)
3909          and converter_finiteUnitLimit(nodesModelToCalc,yearsToCalc,converter_techs))
3910      = sum(nodesData$(aggregateNodesModel(nodesData,nodesModelToCalc)
3911                  and converter_capacityParamIn(nodesData,yearsToCalc,converter_techs,"unitsUpperLimit") < inf ),
3912                converter_activityProfileIn_aggTime(timeModelToCalc,nodesData,yearsToCalc,converter_techs,pc_converter_activityProfile)
3913                * converter_capacityParamIn(nodesData,yearsToCalc,converter_techs,"unitsUpperLimit"))
3914      / sum(nodesData$aggregateNodesModel(nodesData,nodesModelToCalc),
3915              converter_capacityParamIn(nodesData,yearsToCalc,converter_techs,"unitsUpperLimit"));
3916   
3917  converter_activityProfile(timeModelToCalc,converter_usedTech(nodesModelToCalc,yearsToCalc,converter_techs,vintage),pc_converter_activityProfile)
3918      $(converter_activity_hasProfile(nodesModelToCalc,yearsToCalc,converter_techs,pc_converter_activityProfile)
3919          and converter_infiniteUnitLimit(nodesModelToCalc,yearsToCalc,converter_techs))
3920      = sum(nodesData$(aggregateNodesModel(nodesData,nodesModelToCalc)
3921                  and converter_capacityParamIn(nodesData,yearsToCalc,converter_techs,"unitsUpperLimit") = inf),
3922                converter_activityProfileIn_aggTime(timeModelToCalc,nodesData,yearsToCalc,converter_techs,pc_converter_activityProfile)
3923                * converter_capacityParamIn(nodesData,yearsToCalc,converter_techs,"unitsUpperLimit"))
3924      / sum(nodesData$(aggregateNodesModel(nodesData,nodesModelToCalc)
3925                      and converter_capacityParamIn(nodesData,yearsToCalc,converter_techs,"unitsUpperLimit") = inf ),
3926              1);
3927  option clear = converter_activityProfileIn_aggTime;
3928   
3929  * for fixed profiles overwrite upper and lower profile
3930  converter_activityProfile(timeModelToCalc,nodesModelToCalc,yearsToCalc,converter_techs,vintage,"lower")
3931      $converter_activity_hasProfile(nodesModelToCalc,yearsToCalc,converter_techs,"fixed")
3932      = converter_activityProfile(timeModelToCalc,nodesModelToCalc,yearsToCalc,converter_techs,vintage,"fixed");
3933   
3934  converter_activityProfile(timeModelToCalc,nodesModelToCalc,yearsToCalc,converter_techs,vintage,"upper")
3935      $converter_activity_hasProfile(nodesModelToCalc,yearsToCalc,converter_techs,"fixed")
3936      = converter_activityProfile(timeModelToCalc,nodesModelToCalc,yearsToCalc,converter_techs,vintage,"fixed");
3937   
3938   
3939  * weighted average for a real sum of units upper limits, plain average if one region has an upper limit of inf
3940  parameter converter_coefficientProfile(timeModel,nodesModel,years,converter_techs,vintage,activity,commodity);
3941  converter_coefficientProfile(timeModelToCalc,converter_usedTechAct(nodesModelToCalc,yearsToCalc,converter_techs,vintage,activity),commodity)
3942      = converter_coefficient(converter_techs,vintage,activity,commodity,"coefficient");
3943   
3944  converter_coefficientProfile(timeModelToCalc,converter_usedTechAct(nodesModelToCalc,yearsToCalc,converter_techs,vintage,activity),commodity)
3945      $( converter_coefficient_hasProfile(nodesModelToCalc,yearsToCalc,converter_techs,vintage,activity,commodity)
3946          and converter_finiteUnitLimit(nodesModelToCalc,yearsToCalc,converter_techs) )
3947      = sum(nodesData$aggregateNodesModel(nodesData,nodesModelToCalc),
3948            sum(timeData$timeMapping(timeData,timeModelToCalc),
3949                    converter_coefficientProfileIn(timeData,nodesData,yearsToCalc,converter_techs,vintage,activity,commodity))
3950                / timeLength(timeModelToCalc)
3951              * converter_capacityParamIn(nodesData,yearsToCalc,converter_techs,"unitsUpperLimit") )
3952      / sum(nodesData$aggregateNodesModel(nodesData,nodesModelToCalc),
3953              converter_capacityParamIn(nodesData,yearsToCalc,converter_techs,"unitsUpperLimit"));
3954   
3955  converter_coefficientProfile(timeModelToCalc,converter_usedTechAct(nodesModelToCalc,yearsToCalc,converter_techs,vintage,activity),commodity)
3956      $( converter_coefficient_hasProfile(nodesModelToCalc,yearsToCalc,converter_techs,vintage,activity,commodity)
3957          and converter_infiniteUnitLimit(nodesModelToCalc,yearsToCalc,converter_techs))
3958      = sum(nodesData$(aggregateNodesModel(nodesData,nodesModelToCalc)
3959                      and converter_capacityParamIn(nodesData,yearsToCalc,converter_techs,"unitsUpperLimit") = inf ),
3960            sum(timeData$timeMapping(timeData,timeModelToCalc),
3961                    converter_coefficientProfileIn(timeData,nodesData,yearsToCalc,converter_techs,vintage,activity,commodity))
3962                / timeLength(timeModelToCalc))
3963      / sum(nodesData$(aggregateNodesModel(nodesData,nodesModelToCalc)
3964                      and converter_capacityParamIn(nodesData,yearsToCalc,converter_techs,"unitsUpperLimit") = inf ), 1);
3965   
3966  * ==== prepare partial load behavior parameters ====
3967   
3968  * set disabled max load requirements to 1 to avoid excessive logical expressions later on
3969  alias(commodity, com);
3970  converter_coefficient(converter_techs,vintage,activity,commodity,"maxLoad")
3971      $((converter_coefficient(converter_techs,vintage,activity,commodity,"maxLoad") = 0)
3972        and converter_usedAct(converter_techs,vintage,activity))
3973      = 1;
3974   
3975  * indicate that at least one activity of a technology makes use of partial load behavior
3976  set converter_hasMaxLoad(converter_techs,vintage);
3977  converter_hasMaxLoad(converter_techs,vintage)
3978    = smin((activity,commodity)$converter_usedAct(converter_techs,vintage,activity),
3979              converter_coefficient(converter_techs,vintage,activity,commodity,"maxLoad")) < 1;
3980   
3981  set converter_hasMinLoad(converter_techs,vintage);
3982  converter_hasMinLoad(converter_techs,vintage)
3983    = smax((activity,commodity)$converter_usedAct(converter_techs,vintage,activity),
3984              converter_coefficient(converter_techs,vintage,activity,commodity,"minLoad")) > 0;
3985   
3986  set converter_hasConstantFluxInActivity(converter_techs,vintage);
3987  converter_hasConstantFluxInActivity(converter_techs,vintage)
3988    = sum((activity,commodity)$converter_usedAct(converter_techs,vintage,activity),
3989                          abs(converter_coefficient(converter_techs,vintage,activity,commodity,"constant"))) > 0;
3990   
3991  * setting up a requirements parameter to avoid having to cycle through commodities in equations
3992  set pc_converter_activityRequirements
3993      /
3994      minLoad             "Lower profile for converter activity"
3995      maxLoad             "Upper profile for converter activity"
3996      /;
3997  parameter converter_activityRequirements(converter_techs,vintage,activity,pc_converter_activityRequirements);
3998  converter_activityRequirements(converter_techs,vintage,activity,"minLoad")
3999    = smax(commodity, converter_coefficient(converter_techs,vintage,activity,commodity,"minLoad"));
4000  converter_activityRequirements(converter_techs,vintage,activity,"maxLoad")
4001    = smin(commodity, converter_coefficient(converter_techs,vintage,activity,commodity,"maxLoad"));
4002   
4003  * ==== activate MIP units for MIP dispatch or partial load technologies ====
4004   
4005  set converter_hasMinUptime(converter_techs,vintage);
4006  converter_hasMinUptime(converter_techs,vintage)
4007    $(converter_techParam(converter_techs,vintage,"minUptime")
4008      and converter_techParam(converter_techs,vintage,"mipDispatch"))
4009    = yes;
4010   
4011  set converter_hasMinDowntime(converter_techs,vintage);
4012  converter_hasMinDowntime(converter_techs,vintage)
4013    $(converter_techParam(converter_techs,vintage,"minDowntime")
4014      and converter_techParam(converter_techs,vintage,"mipDispatch"))
4015    = yes;
4016   
4017  * require integer unit counts if online state is to be tracked
4018  converter_techParam(converter_techs,vintage,"mipUnits")
4019      $(converter_techParam(converter_techs,vintage,"mipDispatch")
4020        or converter_hasMinLoad(converter_techs, vintage)
4021        or converter_hasMaxLoad(converter_techs, vintage)
4022        or converter_hasConstantFluxInActivity(converter_techs,vintage))
4023      = 1;
4024   
4025  * ==== floor mip converter units to integer values ====
4026  converter_capacityParam(nodesModelToCalc,yearsToCalc,converter_techs,"unitsLowerLimit")
4027      $sum(vintage, converter_techParam(converter_techs,vintage,"mipUnits"))
4028      = floor(converter_capacityParam(nodesModelToCalc,yearsToCalc,converter_techs,"unitsLowerLimit"));
4029  converter_capacityParam(nodesModelToCalc,yearsToCalc,converter_techs,"unitsUpperLimit")
4030      $sum(vintage, converter_techParam(converter_techs,vintage,"mipUnits"))
4031      = ceil(converter_capacityParam(nodesModelToCalc,yearsToCalc,converter_techs,"unitsUpperLimit"));
4032   
4033  * ==== scalars and sets for minUptime and minDowntime ====
4034   
4035  scalar converter_maxUptimeReq;
4036  converter_maxUptimeReq = smax((converter_techs,vintage), converter_techParam(converter_techs,vintage,"minUptime"));
4037  set uptimeSearchRange(timeModelToCalc);
4038  uptimeSearchRange(timeModelToCalc) = ord(timeModelToCalc) <= converter_maxUptimeReq;
4039   
4040  scalar converter_maxDowntimeReq;
4041  converter_maxDowntimeReq = smax((converter_techs,vintage), converter_techParam(converter_techs,vintage,"minDowntime"));
4042  set downtimeSearchRange(timeModelToCalc);
4043  downtimeSearchRange(timeModelToCalc) = ord(timeModelToCalc) <= converter_maxDowntimeReq;
4044   
4045  * ==== definition of variables ====
4046   
4047  * Initialise variables for unitsBuild
4048  converter_unitsBuild.l(nodesModel,years,converter_techs,vintage)
4049      $converter_availTech(nodesModel,years,converter_techs,vintage)
4050      = converter_capacityParam(nodesModel,years,converter_techs,"unitsBuild");
4051  converter_unitsBuild.lo(nodesModel,yearsToCalc,converter_techs,vintage)
4052      $converter_availTech(nodesModel,yearsToCalc,converter_techs,vintage)
4053      = converter_unitsBuild.l(nodesModel,yearsToCalc,converter_techs,vintage);
4054  converter_unitsBuild.fx(nodesModel,years,converter_techs,vintage)
4055      $converter_capacityParam(nodesModel,years,converter_techs,"noExpansion")
4056      = converter_unitsBuild.l(nodesModel,years,converter_techs,vintage);
4057   
4058  * Initialise variables for unitsDecom
4059  converter_unitsDecom.l(nodesModel,years,converter_techs,vintage)
4060    $(converter_decomTech(nodesModel,years,converter_techs,vintage)
4061      and years.val < sum(yearsToCalc$(ord(yearsToCalc) = 1), yearsToCalc.val))
4062    = sum((years_a,years_aa)$(sameas(years-1, years_aa)
4063                        and years_a.val > years_aa.val - converter_techParam(converter_techs,vintage,'lifeTime')
4064                        and years_a.val <= years.val - converter_techParam(converter_techs,vintage,'lifeTime')
4065                        and converter_availTech(nodesModel,years_a,converter_techs,vintage)),
4066          converter_unitsBuild.l(nodesModel,years_a,converter_techs,vintage));
4067   
4068  converter_unitsDecom.l(nodesModel,yearsToCalc,converter_techs,vintage)
4069    $converter_decomTech(nodesModel,yearsToCalc,converter_techs,vintage)
4070    = sum(years$
4071          (years.val < sum(yearsToCalc_a$(ord(yearsToCalc_a) = 1), yearsToCalc_a.val)
4072            and converter_availTech(nodesModel,years,converter_techs,vintage)
4073            and years.val > sum(years_a$sameas(years_a, yearsToCalc-1), years_a.val) - converter_techParam(converter_techs,vintage,'lifeTime')
4074            and years.val <= yearsToCalc.val - converter_techParam(converter_techs,vintage,'lifeTime')),
4075        converter_unitsBuild.l(nodesModel,years,converter_techs,vintage))
4076      + sum(yearsToCalc_a$
4077          (yearsToCalc_a.val < sum(yearsToCalc_aa$(ord(yearsToCalc_aa) > 1), yearsToCalc_a.val)
4078            and converter_availTech(nodesModel,yearsToCalc_a,converter_techs,vintage)
4079            and yearsToCalc_a.val > sum(years_a$sameas(years_a, yearsToCalc-1), years_a.val) - converter_techParam(converter_techs,vintage,'lifeTime')
4080            and yearsToCalc_a.val <= yearsToCalc.val - converter_techParam(converter_techs,vintage,'lifeTime')),
4081        converter_unitsBuild.l(nodesModel,yearsToCalc_a,converter_techs,vintage));
4082        ;
4083   
4084  converter_unitsDecom.lo(nodesModel,yearsToCalc,converter_techs,vintage)
4085      $(converter_usedTech(nodesModel,yearsToCalc,converter_techs,vintage)
4086          and not converter_techParam(converter_techs,vintage,"freeDecom"))
4087      = converter_unitsDecom.l(nodesModel,yearsToCalc,converter_techs,vintage)
4088   
4089  * Calculate planned unit expansion
4090  parameter converter_unitsPlanned(nodesModel,years,converter_techs,vintage);
4091  converter_unitsPlanned(nodesModel,years,converter_techs,vintage) = 0;
4092  loop(years,
4093    converter_unitsPlanned(nodesModel,years,converter_techs,vintage)
4094      =
4095      converter_unitsPlanned(nodesModel,years-1,converter_techs,vintage)
4096          $converter_usedTech(nodesModel,years-1,converter_techs,vintage)
4097      + converter_unitsBuild.l(nodesModel,years,converter_techs,vintage)
4098          $converter_availTech(nodesModel,years,converter_techs,vintage)
4099      - converter_unitsDecom.l(nodesModel,years,converter_techs,vintage)
4100          $converter_usedTech(nodesModel,years,converter_techs,vintage);
4101  );
4102   
4103  * Set initial state for planned units
4104  converter_unitsTotal.l(nodesModel,years,converter_techs,vintage)
4105    = converter_unitsPlanned(nodesModel,years,converter_techs,vintage)
4106   
4107  * Calculate if planned unit expansion is bounded by upper and lower limits
4108  set converter_unitBoundsFixed(nodesModel,years,converter_techs);
4109  converter_unitBoundsFixed(nodesModel,years,converter_techs)
4110    $(sum(vintage$converter_usedTech(nodesModel,years,converter_techs,vintage),
4111          converter_unitsPlanned(nodesModel,years,converter_techs,vintage))
4112      = converter_capacityParam(nodesModel,years,converter_techs,"unitsUpperLimit")
4113    and sum(vintage$converter_usedTech(nodesModel,years,converter_techs,vintage),
4114          converter_unitsPlanned(nodesModel,years,converter_techs,vintage))
4115      = converter_capacityParam(nodesModel,years,converter_techs,"unitsLowerLimit"))
4116    = yes;
4117   
4118  * Fix unitsBuild, unitsDecom, unitsTotal if levels are predetermined by upper and lower limits
4119  converter_unitsBuild.fx(nodesModel,years,converter_techs,vintage)
4120    $(converter_availTech(nodesModel,years,converter_techs,vintage)
4121      and converter_unitBoundsFixed(nodesModel,years,converter_techs))
4122    = converter_unitsBuild.l(nodesModel,years,converter_techs,vintage);
4123  converter_unitsDecom.fx(nodesModel,years,converter_techs,vintage)
4124    $(converter_usedTech(nodesModel,years,converter_techs,vintage)
4125      and converter_unitBoundsFixed(nodesModel,years,converter_techs))
4126    = converter_unitsDecom.l(nodesModel,years,converter_techs,vintage);
4127  converter_unitsTotal.fx(nodesModel,years,converter_techs,vintage)
4128    $(converter_usedTech(nodesModel,years,converter_techs,vintage)
4129      and converter_unitBoundsFixed(nodesModel,years,converter_techs))
4130    = converter_unitsTotal.l(nodesModel,years,converter_techs,vintage);
4131   
4132  converter_unitsOnline_MIP.up(timeModelToCalc,nodesModel,years,converter_techs,vintage)
4133      $(converter_usedTech(nodesModel,years,converter_techs,vintage)
4134        and converter_techParam(converter_techs,vintage,"mipDispatch") = 1)
4135      = converter_capacityParam(nodesModel,years,converter_techs,"unitsUpperLimit");
4136   
4137  converter_unitsTotal_MIP.up(nodesModel,years,converter_techs,vintage)
4138      $(converter_usedTech(nodesModel,years,converter_techs,vintage)
4139        and converter_techParam(converter_techs,vintage,"mipUnits") = 1)
4140      = converter_capacityParam(nodesModel,years,converter_techs,"unitsUpperLimit");
4141   
4142  converter_unitsUsingActivity_MIP.up(timeModelToCalc,nodesModel,years,converter_techs,vintage,activity)
4143      $(converter_usedTech(nodesModel,years,converter_techs,vintage)
4144        and (converter_hasMinLoad(converter_techs, vintage)
4145              or converter_hasMaxLoad(converter_techs, vintage)))
4146      = converter_capacityParam(nodesModel,years,converter_techs,"unitsUpperLimit");
4147   
4148  * Add parameter for fixing capacities during myopic runs
4149  parameter converter_unitsDelta(nodesModel,years,converter_techs);
4150   
4151  * ==== declaration of equations ====
4152   
4153  equations
4154    Eq_converter_unitsBalance(nodesModel,years,converter_techs,vintage
4155      ) "Ensures the units balance over the planning period."
4156    Eq_converter_unitsFixedDecom(nodesModel,years,converter_techs,vintage
4157      ) "Restricts the fixed decommissioning of units over the planning period."
4158    Eq_converter_unitsFreeDecom(nodesModel,years,converter_techs,vintage
4159      ) "Restricts the free decommissioning of units over the planning period."
4160    Eq_converter_unitsUpperLimit(nodesModel,years,converter_techs
4161      ) "Upper bound for the total number of units."
4162    Eq_converter_unitsLowerLimit(nodesModel,years,converter_techs
4163      ) "Lower bound for the total number of units."
4164    Eq_converter_unitsFixedLimit(nodesModel,years,converter_techs
4165      ) "Fixed bound for the total number of units."
4166    Eq_converter_unitsTotalMIP(nodesModel,years,converter_techs,vintage
4167      ) "Fixes the total number of units to the corresponding integer variable."
4168    Eq_converter_unitsOnlineMIP(timeModel,nodesModel,years,converter_techs,vintage
4169      ) "Fixes the number of online units to the corresponding integer variable."
4170   
4171    Eq_converter_activityLowerLimit(timeModel,nodesModel,years,converter_techs,vintage
4172      ) "Lower limit on the activity."
4173    Eq_converter_activityUpperLimit(timeModel,nodesModel,years,converter_techs,vintage
4174      ) "Upper limit on the activity."
4175   
4176    Eq_converter_activityFixedLimit(timeModel,nodesModel,years,converter_techs,vintage
4177      ) "Fixed limit on the activity."
4178    Eq_converter_rampPos(timeModel,nodesModel,years,converter_techs,vintage
4179      ) "Positive ramping of unit activity."
4180    Eq_converter_rampNeg(timeModel,nodesModel,years,converter_techs,vintage
4181      ) "Negative ramping of unit activity."
4182    Eq_converter_rampLimit(timeModel,nodesModel,years,converter_techs,vintage
4183      ) "Restrict ramping up of unit activity."
4184   
4185    Eq_converter_unitsOnline(timeModel,nodesModel,years,converter_techs,vintage
4186      ) "Set online units to total number of operational units."
4187    Eq_converter_unitsOnlineUC(timeModel,nodesModel,years,converter_techs,vintage
4188      ) "Allow shutting down units."
4189    Eq_converter_activityStartups(timeModel,nodesModel,years,converter_techs,vintage
4190      ) "Variable counting the number of unit startups."
4191    Eq_converter_activityShutdowns(timeModel,nodesModel,years,converter_techs,vintage
4192      ) "Variable tracking the number of unit shutdowns."
4193    Eq_converter_limitStartups(nodesModel,years,converter_techs,vintage
4194      ) "Limit the number of startup cycles a unit can perform."
4195    Eq_converter_minUptime(timeModel,nodesModel,years,converter_techs,vintage
4196      ) "Require recently started units to remain online for their respective minimum uptime."
4197    Eq_converter_minDowntime(timeModel,nodesModel,years,converter_techs,vintage
4198      ) "Require recently shut down units to remain offline for their respective minimum downtime."
4199    Eq_converter_activityUpperLimitDetailedPartLoadMinReq(timeModel,nodesModel,years,converter_techs,vintage,activity
4200      ) "Limit activity coefficients of activities with a given load requirement or stricter to the number of units in such modes."
4201    Eq_converter_activityUpperLimitDetailedPartLoadMaxReq(timeModel,nodesModel,years,converter_techs,vintage,activity
4202      ) "Limit activity coefficients of activities with a given load requirement or stricter to the number of units in such modes."
4203    Eq_converter_activityLowerLimitDetailedPartLoadMinReq(timeModel,nodesModel,years,converter_techs,vintage,activity
4204      ) "Enforce sufficient activity coefficients of activities to justify all active modes."
4205    Eq_converter_noOnlineIdle(timeModel,nodesModel,years,converter_techs,vintage
4206      ) "Prevent the circumvention of requirements by keeping units online without using any modes."
4207    Eq_converter_noOnlineIdleDetailedPartLoad(timeModel,nodesModel,years,converter_techs,vintage
4208      ) "Prevent the circumvention of requirements by keeping units online without using any modes. Allow more than one mode activation per unit."
4209    Eq_converter_activityUpperLimitPartLoad(timeModel,nodesModel,years,converter_techs,vintage,activity
4210      ) "Limit usage of an activity to corresponding units."
4211    Eq_converter_activityLowerLimitPartLoad(timeModel,nodesModel,years,converter_techs,vintage,activity
4212      ) "Limit usage of an activity to corresponding units."
4213    Eq_converter_activityModeLimit(timeModel,nodesModel,years,converter_techs,vintage,activity
4214      ) "Limit the number of units in one particular mode to the number of operational units."
4215    ;
4216   
4217  * ==== equation definition ====
4218  * // ## Equations
4219  * // ### Converter Units Balance
4220  * // Ensures that the total units are consistent with the built and decommissioned units.
4221  * // {Eq_converter_unitsBalance}
4222  Eq_converter_unitsBalance(nodesModelSel,yearsSel,converter_techs,vintage)
4223      $((converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
4224            or sum(years$sameas(years,yearsSel), converter_usedTech(nodesModelSel,years-1,converter_techs,vintage)))
4225          and not converter_unitBoundsFixed(nodesModelSel,yearsSel,converter_techs))
4226      ..
4227      converter_unitsTotal(nodesModelSel,yearsSel,converter_techs,vintage)
4228      =e=
4229      sum(yearsToCalc$(ord(yearsToCalc) = 1 and sameas(yearsToCalc, yearsSel)),
4230        sum(years$sameas(years, yearsToCalc),
4231          converter_unitsTotal(nodesModelSel,years-1,converter_techs,vintage)
4232            $converter_usedTech(nodesModelSel,years-1,converter_techs,vintage)))
4233      + sum((yearsToCalc)$(ord(yearsToCalc) > 1 and sameas(yearsToCalc, yearsSel)),
4234        converter_unitsTotal(nodesModelSel,yearsToCalc-1,converter_techs,vintage)
4235          $converter_usedTech(nodesModelSel,yearsToCalc-1,converter_techs,vintage))
4236      + converter_unitsBuild(nodesModelSel,yearsSel,converter_techs,vintage)
4237          $converter_availTech(nodesModelSel,yearsSel,converter_techs,vintage)
4238      - converter_unitsDecom(nodesModelSel,yearsSel,converter_techs,vintage)
4239          $converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage);
4240   
4241  * // ### Converter Units Fixed Decommission
4242  * // Restricts the fixed decommissioning of units over the planning period.
4243  * // {Eq_converter_unitsFixedDecom}
4244  Eq_converter_unitsFixedDecom(nodesModelSel,yearsSel,converter_techs,vintage)
4245      $(converter_decomTech(nodesModelSel,yearsSel,converter_techs,vintage)
4246          and not converter_techParam(converter_techs,vintage,"freeDecom") = 1
4247          and not converter_unitBoundsFixed(nodesModelSel,yearsSel,converter_techs))
4248      ..
4249      converter_unitsDecom(nodesModelSel,yearsSel,converter_techs,vintage)
4250      =e=
4251      sum(years$
4252          (converter_availTech(nodesModelSel,years,converter_techs,vintage)
4253            and years.val > sum(yearsToCalc$sameas(yearsToCalc+1, yearsSel), yearsToCalc.val) - converter_techParam(converter_techs,vintage,'lifeTime')
4254            and years.val <= yearsSel.val - converter_techParam(converter_techs,vintage,'lifeTime')),
4255        converter_unitsBuild(nodesModelSel,years,converter_techs,vintage));
4256   
4257  * // ### Converter Units Free Decommission
4258  * // Restricts the free decommissioning of units over the planning period.
4259  * // {Eq_converter_unitsFreeDecom}
4260  Eq_converter_unitsFreeDecom(nodesModelSel,yearsSel,converter_techs,vintage)
4261      $((converter_decomTech(nodesModelSel,yearsSel,converter_techs,vintage)
4262          or converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage))
4263          and converter_techParam(converter_techs,vintage,"freeDecom") = 1)
4264      ..
4265      sum(years$
4266            ((converter_decomTech(nodesModelSel,years,converter_techs,vintage)
4267              or converter_usedTech(nodesModelSel,years,converter_techs,vintage))
4268              and years.val < sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)),
4269          converter_unitsDecom(nodesModelSel,years,converter_techs,vintage))
4270      + sum(yearsToCalc$
4271            ((converter_decomTech(nodesModelSel,yearsToCalc,converter_techs,vintage)
4272              or converter_usedTech(nodesModelSel,yearsToCalc,converter_techs,vintage))
4273              and yearsToCalc.val >= sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
4274              and yearsToCalc.val <= yearsSel.val),
4275          converter_unitsDecom(nodesModelSel,yearsToCalc,converter_techs,vintage))
4276      =g=
4277      sum(years$
4278            (converter_availTech(nodesModelSel,years,converter_techs,vintage)
4279              and years.val < sum(yearsToCalc$(ord(yearsToCalc)=1), yearsToCalc.val) - converter_techParam(converter_techs,vintage,'lifeTime')),
4280          converter_unitsBuild(nodesModelSel,years,converter_techs,vintage))
4281      + sum(yearsToCalc$
4282            (converter_availTech(nodesModelSel,yearsToCalc,converter_techs,vintage)
4283              and yearsToCalc.val >= sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
4284              and yearsToCalc.val <= yearsSel.val - converter_techParam(converter_techs,vintage,'lifeTime')),
4285          converter_unitsBuild(nodesModelSel,yearsToCalc,converter_techs,vintage));
4286   
4287  * // ### Converter Units Upper Limit
4288  * // Upper bound for the total number of units.
4289  * // {Eq_converter_unitsUpperLimit}
4290  Eq_converter_unitsUpperLimit(nodesModelSel,yearsSel,converter_techs)
4291      $(converter_capacityParam(nodesModelSel,yearsSel,converter_techs,'unitsUpperLimit') >= 0
4292          and converter_capacityParam(nodesModelSel,yearsSel,converter_techs,'unitsUpperLimit') < +inf
4293          and converter_capacityParam(nodesModelSel,yearsSel,converter_techs,'unitsUpperLimit')
4294              <> converter_capacityParam(nodesModelSel,yearsSel,converter_techs,'unitsLowerLimit'))
4295      ..
4296      sum(vintage$converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage),
4297          converter_unitsTotal(nodesModelSel,yearsSel,converter_techs,vintage))
4298      =l=
4299      converter_capacityParam(nodesModelSel,yearsSel,converter_techs,"unitsUpperLimit");
4300   
4301  * // ### Converter Units Lower Limit
4302  * // Lower bound for the total number of units.
4303  * // {Eq_converter_unitsLowerLimit}
4304  Eq_converter_unitsLowerLimit(nodesModelSel,yearsSel,converter_techs)
4305      $(converter_capacityParam(nodesModelSel,yearsSel,converter_techs,'unitsLowerLimit') > 0
4306          and converter_capacityParam(nodesModelSel,yearsSel,converter_techs,'unitsLowerLimit')
4307              <> converter_capacityParam(nodesModelSel,yearsSel,converter_techs,'unitsUpperLimit'))
4308      ..
4309      sum(vintage$converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage),
4310          converter_unitsTotal(nodesModelSel,yearsSel,converter_techs,vintage))
4311      =g=
4312      converter_capacityParam(nodesModelSel,yearsSel,converter_techs,"unitsLowerLimit");
4313   
4314  Eq_converter_unitsFixedLimit(nodesModelSel,yearsSel,converter_techs)
4315      $(converter_capacityParam(nodesModelSel,yearsSel,converter_techs,'unitsLowerLimit')
4316          = converter_capacityParam(nodesModelSel,yearsSel,converter_techs,'unitsUpperLimit'))
4317      ..
4318      sum(vintage$converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage),
4319          converter_unitsTotal(nodesModelSel,yearsSel,converter_techs,vintage))
4320      =e=
4321      converter_capacityParam(nodesModelSel,yearsSel,converter_techs,"unitsUpperLimit");
4322   
4323  * // ### Converter Units Total MIP
4324  * // Fixes the total number of units to the corresponding integer variable.
4325  * // {Eq_converter_unitsTotalMIP}
4326  Eq_converter_unitsTotalMIP(nodesModelSel,yearsSel,converter_techs,vintage)
4327      $( converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
4328          and converter_techParam(converter_techs,vintage,"mipUnits") = 1 )
4329      ..
4330      converter_unitsTotal(nodesModelSel,yearsSel,converter_techs,vintage)
4331      =e=
4332      converter_unitsTotal_MIP(nodesModelSel,yearsSel,converter_techs,vintage);
4333   
4334  * // ### Converter Units Online MIP
4335  * // Fixes the number of online units to the corresponding integer variable.
4336  * // {Eq_converter_unitsOnlineMIP}
4337  Eq_converter_unitsOnlineMIP(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
4338      $( converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
4339          and converter_techParam(converter_techs,vintage,"mipDispatch") = 1 )
4340      ..
4341      converter_unitsOnline(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
4342      =e=
4343      converter_unitsOnline_MIP(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage);
4344   
4345  * // ### Converter Activity Lower Limit
4346  * // Lower limit on the activity.
4347  * // {Eq_converter_activityLowerLimit}
4348  Eq_converter_activityLowerLimit(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
4349      $(converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
4350          and converter_activityProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,"lower") > 0
4351          and converter_activityProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,"lower")
4352               <> converter_activityProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,"upper")
4353          and not converter_hasMinLoad(converter_techs, vintage))
4354      ..
4355      sum(activity$converter_usedAct(converter_techs,vintage,activity),
4356          converter_activity(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity)
4357      )
4358      =g=
4359      converter_activityProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,"lower")
4361      * converter_unitsOnline(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage);
4363   
4364  * // ### Converter Activity Upper Limit
4365  * // Upper limit on the activity.
4366  * // {Eq_converter_activityUpperLimit}
4367  Eq_converter_activityUpperLimit(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
4368      $(converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
4369          and converter_activityProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,"upper") >= 0
4370          and converter_activityProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,"upper")
4371               <> converter_activityProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,"lower"))
4372      ..
4373      sum(activity$converter_usedAct(converter_techs,vintage,activity),
4374          converter_activity(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity)
4375      )
4376      =l=
4377      converter_activityProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,"upper")
4379      * converter_unitsOnline(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage);
4381   
4382  Eq_converter_activityFixedLimit(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
4383      $(converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
4384          and converter_activityProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,"lower")
4385               = converter_activityProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,"upper"))
4386      ..
4387      sum(activity$converter_usedAct(converter_techs,vintage,activity),
4388          converter_activity(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity)
4389      )
4390      =e=
4391      converter_activityProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,"upper")
4393      * converter_unitsOnline(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage);
4395   
4396  * // ### Converter Positive Ramping
4397  * // Positive ramping of unit activity.
4398  * // {Eq_converter_rampPos}
4399  Eq_converter_rampPos(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,converter_techs,vintage)
4400    $( converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
4401        and converter_useRampPos(nodesModelSel,yearsSel,converter_techs,vintage))
4402      ..
4403      converter_rampPos(timeModelToCalc,nodesModelSel,yearsSel,converter_techs,vintage)
4404      =g=
4405      sum(activity$converter_usedAct(converter_techs,vintage,activity),
4406              converter_activity(timeModelToCalc,nodesModelSel,yearsSel,converter_techs,vintage,activity)
4407              - converter_activity(timeModelToCalc--1,nodesModelSel,yearsSel,converter_techs,vintage,activity));
4408   
4409  * // ### Converter Negative Ramping
4410  * // Negative ramping of unit activity.
4411  * // {Eq_converter_rampNeg}
4412  Eq_converter_rampNeg(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,converter_techs,vintage)
4413    $( converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
4414        and converter_useRampNeg(nodesModelSel,yearsSel,converter_techs,vintage))
4415      ..
4416      converter_rampNeg(timeModelToCalc,nodesModelSel,yearsSel,converter_techs,vintage)
4417      =g=
4418      - sum(activity$converter_usedAct(converter_techs,vintage,activity),
4419              converter_activity(timeModelToCalc,nodesModelSel,yearsSel,converter_techs,vintage,activity)
4420              - converter_activity(timeModelToCalc--1,nodesModelSel,yearsSel,converter_techs,vintage,activity));
4421   
4422  * // ### Converter Ramping Limit
4423  * // Restrict ramping up of unit activity.
4424  * // {Eq_converter_rampLimit}
4425  Eq_converter_rampLimit(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,converter_techs,vintage)
4426    $( converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
4427          and converter_techParam(converter_techs,vintage,"activityRampLimit") > 0)
4428      ..
4429      sum(activity$converter_usedAct(converter_techs,vintage,activity),
4430              converter_activity(timeModelToCalc,nodesModelSel,yearsSel,converter_techs,vintage,activity)
4431              - converter_activity(timeModelToCalc--1,nodesModelSel,yearsSel,converter_techs,vintage,activity))
4432    =l=
4433    converter_techParam(converter_techs,vintage,"activityRampLimit")
4435      * converter_unitsOnline(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage);
4437   
4438   
4440   
4441  * // ### Converter MIP Units Online
4442  * // Restrict ramping up of unit activity.
4443  * // {Eq_converter_unitsOnline}
4444  Eq_converter_unitsOnline(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
4445      $( converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
4446          and converter_techParam(converter_techs,vintage,"mipDispatch") = 0 )
4447    ..
4448    converter_unitsOnline(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
4449    =e=
4450    converter_unitsTotal(nodesModelSel,yearsSel,converter_techs,vintage)
4451      ;
4452   
4453  * // ### Converter MIP Units Shutting Down
4454  * // Allow shutting down units.
4455  * // {Eq_converter_unitsOnlineUC}
4456  Eq_converter_unitsOnlineUC(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
4457      $( converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
4458          and converter_techParam(converter_techs,vintage,"mipDispatch") = 1 )
4459    ..
4460    converter_unitsOnline(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
4461    =l=
4462    converter_unitsTotal(nodesModelSel,yearsSel,converter_techs,vintage)
4463      ;
4465   
4466  * // ### Converter Activity Startups
4467  * // Variable counting the number of unit startups.
4468  * // {Eq_converter_activityStartups}
4469  Eq_converter_activityStartups(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,converter_techs,vintage)
4470    $( converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
4471          and converter_techParam(converter_techs,vintage,"mipDispatch") = 1 )
4472      ..
4473      converter_unitStartups(timeModelToCalc,nodesModelSel,yearsSel,converter_techs,vintage)
4474      =g=
4475          converter_unitsOnline(timeModelToCalc,nodesModelSel,yearsSel,converter_techs,vintage)
4476      - converter_unitsOnline(timeModelToCalc--1,nodesModelSel,yearsSel,converter_techs,vintage);
4477   
4478  * // ### Converter Activity Shutdowns
4479  * // Variable tracking the number of unit shutdowns.
4480  * // {Eq_converter_activityShutdowns}
4481  Eq_converter_activityShutdowns(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,converter_techs,vintage)
4482    $( converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
4483          and converter_techParam(converter_techs,vintage,"mipDispatch") = 1
4484          and converter_techParam(converter_techs,vintage,"minDowntime") > 0)
4485      ..
4486      converter_unitShutdowns(timeModelToCalc,nodesModelSel,yearsSel,converter_techs,vintage)
4487      =g=
4488          converter_unitsOnline(timeModelToCalc--1,nodesModelSel,yearsSel,converter_techs,vintage)
4489      - converter_unitsOnline(timeModelToCalc,nodesModelSel,yearsSel,converter_techs,vintage);
4490   
4491  * // ### Converter Activity Startup Limit
4492  * // Limit the number of startup cycles a unit can perform.
4493  * // {Eq_converter_limitStartups}
4494  Eq_converter_limitStartups(nodesModelSel,yearsSel,converter_techs,vintage)
4495    $( converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
4496          and converter_techParam(converter_techs,vintage,"mipDispatch") = 1
4497      and converter_techParam(converter_techs,vintage,"startupLimit") > 0)
4498      ..
4499      sum(timeModelToCalc, converter_unitStartups(timeModelToCalc,nodesModelSel,yearsSel,converter_techs,vintage))
4500    =l=
4501    converter_techParam(converter_techs,vintage,"startupLimit")
4502    * converter_unitsTotal(nodesModelSel,yearsSel,converter_techs,vintage);
4503   
4504  alias(timeModelToCalc,ttc);
4505   
4506  * // ### Converter Units Minimum Uptime
4507  * // Require recently started units to remain online for their respective minimum uptime.
4508  * // {Eq_converter_minUptime}
4509  Eq_converter_minUptime(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,converter_techs,vintage)
4510    $( converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
4511          and converter_techParam(converter_techs,vintage,"mipDispatch") = 1
4512      and converter_techParam(converter_techs,vintage,"minUptime") > 0)
4513      ..
4514      sum(ttc$[uptimeSearchRange(ttc) and ord(ttc)<=converter_techParam(converter_techs,vintage,"minUptime")],
4515          converter_unitStartups(ttc+[ord(timeModelToCalc)-converter_techParam(converter_techs,vintage,"minUptime")],
4516              nodesModelSel,yearsSel,converter_techs,vintage))
4517          =l=
4518          converter_unitsOnline(timeModelToCalc,nodesModelSel,yearsSel,converter_techs,vintage);
4519   
4520  * // ### Converter Units Minimum Downtime
4521  * // Require recently shut down units to remain offline for their respective minimum downtime.
4522  * // {Eq_converter_minDowntime}
4523  Eq_converter_minDowntime(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,converter_techs,vintage)
4524    $( converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
4525          and converter_techParam(converter_techs,vintage,"mipDispatch") = 1
4526      and converter_techParam(converter_techs,vintage,"minDowntime") > 0)
4527      ..
4528      sum(ttc$[downtimeSearchRange(ttc) and ord(ttc)<=converter_techParam(converter_techs,vintage,"minDowntime")],
4529          converter_unitShutdowns(ttc+[ord(timeModelToCalc)-converter_techParam(converter_techs,vintage,"minDowntime")],
4530              nodesModelSel,yearsSel,converter_techs,vintage))
4531          =l=
4532          converter_unitsTotal(nodesModelSel,yearsSel,converter_techs,vintage)
4533      - converter_unitsOnline(timeModelToCalc,nodesModelSel,yearsSel,converter_techs,vintage);
4534   
4535  * This equation is meant to cause the units to activate particular mode counters to gain access to the corresponding activities.
4536  * Activities are allowed to be used on units with stricter activity requirements but not the other way around.
4537  alias(activity, act);
4538   
4539  * // ### Converter MIP Units Activity Upper Limit Minimum Required Load
4540  * // Limit activity coefficients of activities with a given load requirement or stricter to the number of units in such modes.
4541  * // {Eq_converter_activityUpperLimitDetailedPartLoadMinReq}
4542  Eq_converter_activityUpperLimitDetailedPartLoadMinReq(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity)
4543    $( converter_usedTechAct(nodesModelSel,yearsSel,converter_techs,vintage,activity)
4544          and converter_hasMinLoad(converter_techs, vintage)
4545          and converter_techParam(converter_techs,vintage,"mipDetailedPartialLoad"))
4546      ..
4547      sum(act$(converter_activityRequirements(converter_techs,vintage,act,"minLoad")
4548                  >= converter_activityRequirements(converter_techs,vintage,activity,"minLoad")
4549               and converter_usedAct(converter_techs,vintage,act)),
4550      converter_activity(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,act))
4551    =l=
4552    converter_activityProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,"upper")
4553      * sum(act$(converter_activityRequirements(converter_techs,vintage,act,"minLoad")
4554                  >= converter_activityRequirements(converter_techs,vintage,activity,"minLoad")
4555                 and converter_usedAct(converter_techs,vintage,act)),
4556      converter_unitsUsingActivity_MIP(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,act));
4557   
4558  * // ### Converter MIP Units Activity Upper Limit Maximum Required Load
4559  * // Limit activity coefficients of activities with a given load requirement or stricter to the number of units in such modes.
4560  * // {Eq_converter_activityUpperLimitDetailedPartLoadMaxReq}
4561  Eq_converter_activityUpperLimitDetailedPartLoadMaxReq(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity)
4562    $( converter_usedTechAct(nodesModelSel,yearsSel,converter_techs,vintage,activity)
4563          and converter_hasMaxLoad(converter_techs,vintage)
4564          and converter_techParam(converter_techs,vintage,"mipDetailedPartialLoad"))
4565      ..
4566      sum(act$(converter_activityRequirements(converter_techs,vintage,act,"maxLoad")
4567                  <= converter_activityRequirements(converter_techs,vintage,activity,"maxLoad")
4568               and converter_usedAct(converter_techs,vintage,act)),
4569      converter_activity(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,act))
4570    =l=
4571      sum(act$(converter_activityRequirements(converter_techs,vintage,act,"maxLoad")
4572                  <= converter_activityRequirements(converter_techs,vintage,activity,"maxLoad")
4573               and converter_usedAct(converter_techs,vintage,act)),
4574      min(converter_activityRequirements(converter_techs,vintage,act,"maxLoad"),
4575            converter_activityProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,"upper"))
4576            * converter_unitsUsingActivity_MIP(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,act));
4577   
4578  * This equation is meant to enforce the lower limit requirements of activities in use.
4579  * Loads produced by activities with less strict requirements can contribute to the minimum load requirement of strict activities but not the other way around,
4580  * because these activities can only run on units in the respectively strict activation state.
4581   
4582  * // ### Converter MIP Units Activity Lower Limit Minimum Required Load
4583  * // Enforce sufficient activity coefficients of activities to justify all active modes.
4584  * // {Eq_converter_activityLowerLimitDetailedPartLoadMinReq}
4585  Eq_converter_activityLowerLimitDetailedPartLoadMinReq(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity)
4586    $( converter_usedTechAct(nodesModelSel,yearsSel,converter_techs,vintage,activity)
4587          and converter_hasMinLoad(converter_techs, vintage)
4588          and converter_techParam(converter_techs,vintage,"mipDetailedPartialLoad"))
4589      ..
4590      sum(act$(converter_activityRequirements(converter_techs,vintage,act,"minLoad")
4591                  <= converter_activityRequirements(converter_techs,vintage,activity,"minLoad")
4592               and converter_usedAct(converter_techs,vintage,act)),
4593      converter_activity(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,act))
4594    =g=
4595      sum(act$(converter_activityRequirements(converter_techs,vintage,act,"minLoad")
4596                  <= converter_activityRequirements(converter_techs,vintage,activity,"minLoad")
4597               and converter_usedAct(converter_techs,vintage,act)),
4598      max(converter_activityRequirements(converter_techs,vintage,act,"minLoad"),
4599            converter_activityProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,"lower"))
4600            * converter_unitsUsingActivity_MIP(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,act));
4601   
4602   
4603  * Simple one-activity-per-unit partial load equations
4604  * // ### Converter MIP Units Activity Upper Limit Partial Load Balance
4605  * // Enforce MIP units partial load upper limit.
4606  * // {Eq_converter_activityUpperLimitPartLoad}
4607  Eq_converter_activityUpperLimitPartLoad(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity)
4608    $( converter_usedTechAct(nodesModelSel,yearsSel,converter_techs,vintage,activity)
4609          and (converter_hasMinLoad(converter_techs, vintage)
4610                or converter_hasMaxLoad(converter_techs, vintage)
4611                or converter_hasConstantFluxInActivity(converter_techs, vintage))
4612          and not converter_techParam(converter_techs,vintage,"mipDetailedPartialLoad"))
4613      ..
4614      converter_activity(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity)
4615    =l=
4616    min(converter_activityRequirements(converter_techs,vintage,activity,"maxLoad"),
4617          converter_activityProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,"upper"))
4618          * converter_unitsUsingActivity_MIP(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity);
4619   
4620  * // ### Converter MIP Units Activity Lower Limit Partial Load Balance
4621  * // Enforce MIP units partial load lower limit.
4622  * // {Eq_converter_activityLowerLimitPartLoad}
4623  Eq_converter_activityLowerLimitPartLoad(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity)
4624    $( converter_usedTechAct(nodesModelSel,yearsSel,converter_techs,vintage,activity)
4625          and (converter_hasMinLoad(converter_techs, vintage)
4626                or converter_hasMaxLoad(converter_techs, vintage))
4627          and not converter_techParam(converter_techs,vintage,"mipDetailedPartialLoad"))
4628      ..
4629      converter_activity(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity)
4630    =g=
4631    max(converter_activityRequirements(converter_techs,vintage,activity,"minLoad"),
4632          converter_activityProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,"lower"))
4633          * converter_unitsUsingActivity_MIP(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity);
4634   
4635  * // ### Converter MIP Units Idle Online Units
4636  * // Counts idle online units at every time step
4637  * // {Eq_converter_noOnlineIdle}
4638  Eq_converter_noOnlineIdle(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
4639    $( converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
4640          and (converter_hasMinLoad(converter_techs, vintage)
4641              or converter_hasMaxLoad(converter_techs, vintage)
4642              or converter_hasConstantFluxInActivity(converter_techs,vintage))
4643          and not converter_techParam(converter_techs,vintage,"mipDetailedPartialLoad"))
4644      ..
4645      converter_unitsOnline(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
4646      =e=
4647      sum(activity$converter_usedAct(converter_techs,vintage,activity),
4648            converter_unitsUsingActivity_MIP(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity));
4649   
4650  * // ### Converter MIP Units Idle Online Units Partial load
4651  * // Counts idle online units at every time step
4652  * // {Eq_converter_noOnlineIdleDetailedPartLoad}
4653  Eq_converter_noOnlineIdleDetailedPartLoad(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
4654    $( converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
4655          and (converter_hasMinLoad(converter_techs, vintage)
4656                  or converter_hasMaxLoad(converter_techs, vintage))
4657          and converter_techParam(converter_techs,vintage,"mipDetailedPartialLoad"))
4658      ..
4659      converter_unitsOnline(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
4660      =l=
4661      sum(activity$converter_usedAct(converter_techs,vintage,activity),
4662            converter_unitsUsingActivity_MIP(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity));
4663   
4664  * // ### Converter MIP activity model limit
4665  * // Converter activity model limit
4666  * // {Eq_converter_activityModeLimit}
4667  Eq_converter_activityModeLimit(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity)
4668    $( converter_usedTechAct(nodesModelSel,yearsSel,converter_techs,vintage,activity)
4669          and (converter_hasMinLoad(converter_techs, vintage)
4670                or converter_hasMaxLoad(converter_techs, vintage))
4671          and converter_techParam(converter_techs,vintage,"mipDetailedPartialLoad"))
4672      ..
4673      converter_unitsOnline(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
4674      =g=
4675      converter_unitsUsingActivity_MIP(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity);
4676   
4677  * ==== model definition ====
4678   
4679  Model M_converter
4680  /
4681    Eq_converter_unitsBalance
4682    Eq_converter_unitsFixedDecom
4683    Eq_converter_unitsFreeDecom
4684    Eq_converter_unitsUpperLimit
4685    Eq_converter_unitsLowerLimit
4686    Eq_converter_unitsFixedLimit
4687    Eq_converter_unitsTotalMIP
4688    Eq_converter_unitsOnlineMIP
4689    Eq_converter_activityUpperLimit
4690    Eq_converter_activityLowerLimit
4691    Eq_converter_activityFixedLimit
4692    Eq_converter_rampPos
4693    Eq_converter_rampNeg
4694    Eq_converter_rampLimit
4696    Eq_converter_unitsOnline
4697    Eq_converter_unitsOnlineUC
4699    Eq_converter_activityStartups
4700    Eq_converter_activityShutdowns
4701    Eq_converter_limitStartups
4702    Eq_converter_minUptime
4703    Eq_converter_minDowntime
4704    Eq_converter_activityUpperLimitDetailedPartLoadMinReq
4705    Eq_converter_activityUpperLimitDetailedPartLoadMaxReq
4706    Eq_converter_activityLowerLimitDetailedPartLoadMinReq
4707    Eq_converter_activityUpperLimitPartLoad
4708    Eq_converter_activityLowerLimitPartLoad
4709    Eq_converter_noOnlineIdle
4710    Eq_converter_noOnlineIdleDetailedPartLoad
4711    Eq_converter_activityModeLimit
4712  /;
INCLUDE    C:\Local\REMix\framework\remix\framework\model\source\core\storage.gms
4714  * SPDX-FileCopyrightText: Copyright (c) 2023 German Aerospace Center (DLR)
4715  * SPDX-License-Identifier: BSD-3-Clause
4716   
4717  * // # core_storage
4718  * // The equations in this file describe the storages in the model.
4719   
4720  * // ## Variables
4721  * // {special_table_storage_variables}
5050   
5051   
5052  * === SoC mappings ===
5053  set storage_usedTechSoCState(storage_techs,vintage,soc_statesIn);
5054  storage_usedTechSoCState(storage_techs,vintage,soc_states(soc_statesIn))
5055      $(storage_SoCParam(storage_techs,vintage,soc_states,"eRate") > 0
5056        and storage_SoCParam(storage_techs,vintage,soc_states,"cRate") > 0)
5057      = yes;
5058   
5059  set storage_validSoCRange(storage_techs,vintage);
5060  storage_validSoCRange(storage_techs,vintage)
5061      = smax(soc_states$storage_usedTechSoCState(storage_techs,vintage,soc_states), storage_SoCParam(storage_techs,vintage,soc_states,"SoC")) = 1
5062        and smin(soc_states$storage_usedTechSoCState(storage_techs,vintage,soc_states), storage_SoCParam(storage_techs,vintage,soc_states,"SoC")) = 0;
5063   
5064  * === Translate SoC parameters to ordered SoC-set ===
5065  * set ordered_socs / soc1*soc20 /;
5066  * alias(soc_states, soc_states_c);
5067  * parameter storage_SoCParam_ordered(storage_techs,vintage,ordered_socs,pc_storage_SoCParam);
5068  * storage_SoCParam_ordered(storage_techs,vintage,ordered_socs,pc_storage_SoCParam)
5069  *     $storage_validSoCRange(storage_techs,vintage)
5070  *     = sum(soc_states$(ord(ordered_socs) = sum(soc_states_c$(storage_SoCParam(storage_techs,vintage,soc_states_c,"SoC") <= storage_SoCParam(storage_techs,vintage,soc_states,"SoC")
5071  *                                                            and storage_usedTechSoCState(storage_techs,vintage,soc_states_c)), 1)
5072  *                       and storage_usedTechSoCState(storage_techs,vintage,soc_states)),
5073  *           storage_SoCParam(storage_techs,vintage,soc_states,pc_storage_SoCParam));
5074  *
5075  * set storage_usedTechSoCStateOrdered(storage_techs,vintage,ordered_socs);
5076  * storage_usedTechSoCStateOrdered(storage_techs,vintage,ordered_socs)
5077  *     $(storage_SoCParam_ordered(storage_techs,vintage,ordered_socs,"eRate") > 0
5078  *       and storage_SoCParam_ordered(storage_techs,vintage,ordered_socs,"cRate") > 0)
5079  *     = yes;
5080   
5081  parameter storage_bigM(storage_techs,vintage);
5082  storage_bigM(storage_techs,vintage) = smax((nodesModel,years), storage_reservoirParam(nodesModel,years,storage_techs,"unitsUpperLimit"));
5083  storage_bigM(storage_techs,vintage)$(storage_bigM(storage_techs,vintage) = INF) = 10000;
5084  storage_bigM(storage_techs,vintage)$(storage_bigM(storage_techs,vintage) = 0) = 10000;
5085   
5086  * === calculate the number of years represented by single year to calc ===
5087  alias(yearsToCalc, yearsToCalc_a)
5088  parameter representedYears(years);
5089  representedYears(years) = 0.5 *(smin(yearsToCalc$(yearsToCalc.val > years.val or yearsToCalc.val = smax(yearsToCalc_a, yearsToCalc_a.val)), yearsToCalc.val)
5090                                  - smax(yearsToCalc$(yearsToCalc.val < years.val or yearsToCalc.val = smin(yearsToCalc_a, yearsToCalc_a.val)), yearsToCalc.val));
5091   
5092  * ==== calculation of mappings ====
5093   
5094  * Technologies with a lifeTime > 0 are available
5095  set storage_availTech(nodesModel,years,storage_techs,vintage);
5096  storage_availTech(nodesModel,years,storage_techs,vintage)
5097      $(vintage.val = smax(vintage_a$(vintage_a.val <= years.val
5098          and storage_techParam(storage_techs,vintage_a,"lifeTime") > 0), vintage_a.val)) = yes;
5099   
5100  * Technologies to optimize become unavailable if they have an unitsUpperLimit of 0
5101  storage_availTech(nodesModel,years,storage_techs,vintage)
5102      $(yearsToCalc(years) and storage_reservoirParam(nodesModel,years,storage_techs,"unitsUpperLimit") = 0 ) = no;
5103   
5104  * Technologies already built become unavailable if they have an unitsBuild of 0
5105  storage_availTech(nodesModel,years,storage_techs,vintage)
5106      $( ( not yearsToCalc(years)) and storage_reservoirParam(nodesModel,years,storage_techs,"unitsBuild") = 0 ) = no;
5107   
5108  * Used technologies are available technologies over their technical lifeTime
5109  set storage_usedTech(nodesModel,years,storage_techs,vintage);
5110  storage_usedTech(nodesModel,years,storage_techs,vintage)
5111      $(vintage.val <= years.val
5112          and years.val < smax(years_a$storage_availTech(nodesModel,years_a,storage_techs,vintage),
5113                                              years_a.val + storage_techParam(storage_techs,vintage,"lifeTime"))
5114          ) = yes;
5115   
5116  * Technologies have to be decomissioned in the interval of first avail + lifetime to last avail + lifetime
5117  set storage_decomTech(nodesModel,years,storage_techs,vintage);
5118  storage_decomTech(nodesModel,years,storage_techs,vintage)
5119    $(sum(years_a$storage_usedTech(nodesModel,years_a,storage_techs,vintage), 1)
5120      and sum(yearsToCalc
5121        $(sameas(years, yearsToCalc)
5122          and yearsToCalc.val >= smin(years_a$storage_availTech(nodesModel,years_a,storage_techs,vintage), years_a.val) + storage_techParam(storage_techs,vintage,"lifeTime")
5123          and yearsToCalc.val <= smax(years_a$storage_availTech(nodesModel,years_a,storage_techs,vintage), years_a.val) + storage_techParam(storage_techs,vintage,"lifeTime")), 1))
5124    = yes;
5125   
5126  * Extend the decom frame to the year after the last year of usedTech
5127  storage_decomTech(nodesModel,yearsToCalc,storage_techs,vintage)
5128    $(storage_usedTech(nodesModel,yearsToCalc-1,storage_techs,vintage)
5129      and storage_decomTech(nodesModel,yearsToCalc-1,storage_techs,vintage))
5130    = yes;
5131   
5132  * Mapping for used commodities
5133  set storage_usedCom(storage_techs,vintage,commodity);
5134  option storage_usedCom < storage_sizeParam;
5135   
5136  set storage_usedTechCom(nodesModel,years,storage_techs,vintage,commodity);
5137  storage_usedTechCom(nodesModel,years,storage_techs,vintage,commodity)
5138      $(storage_usedTech(nodesModel,years,storage_techs,vintage)
5139          and storage_usedCom(storage_techs,vintage,commodity))
5140      = yes;
5141   
5142   
5143  * // ## Load units from gdx file
5145   
5146  * ==== aggregation of profiles ====
5147  * derive upper and lower profiles then aggregate
5148  set storage_level_hasProfileIn(nodesData,years,storage_techs,pc_storage_levelProfile);
5149  option storage_level_hasProfileIn < storage_levelProfileIn;
5150   
5151  set storage_level_hasProfile(nodesModel,years,storage_techs,pc_storage_levelProfile);
5152  storage_level_hasProfile(nodesModelToCalc,yearsToCalc,storage_techs,pc_storage_levelProfile)
5153      = sum(nodesData$aggregateNodesModel(nodesData,nodesModelToCalc),
5154              storage_level_hasProfileIn(nodesData,yearsToCalc,storage_techs,pc_storage_levelProfile));
5155   
5156  * weighted average for a real sum of units upper limits, plain average if one region has an upper limit of inf
5157  parameter storage_levelProfile(timeModel,nodesModel,years,storage_techs,vintage,pc_storage_levelProfile);
5158  storage_levelProfile(timeModelToCalc,storage_usedTech(nodesModelToCalc,yearsToCalc,storage_techs,vintage),"upper")
5159      = storage_techParam(storage_techs,vintage,"levelUpperLimit");
5160  storage_levelProfile(timeModelToCalc,storage_usedTech(nodesModelToCalc,yearsToCalc,storage_techs,vintage),"lower")
5161      = storage_techParam(storage_techs,vintage,"levelLowerLimit");
5162   
5163  set storage_finiteUnitLimit(nodesModelToCalc,yearsToCalc,storage_techs);
5164  storage_finiteUnitLimit(nodesModelToCalc,yearsToCalc,storage_techs) = sum(nodesData$aggregateNodesModel(nodesData,nodesModelToCalc), storage_reservoirParamIn(nodesData,yearsToCalc,storage_techs,"unitsUpperLimit")) > 0
5165                                                   and sum(nodesData$aggregateNodesModel(nodesData,nodesModelToCalc), storage_reservoirParamIn(nodesData,yearsToCalc,storage_techs,"unitsUpperLimit")) < inf;
5166   
5167  storage_levelProfile(timeModelToCalc,storage_usedTech(nodesModelToCalc,yearsToCalc,storage_techs,vintage),pc_storage_levelProfile)
5168      $( storage_level_hasProfile(nodesModelToCalc,yearsToCalc,storage_techs,pc_storage_levelProfile)
5169          and storage_finiteUnitLimit(nodesModelToCalc,yearsToCalc,storage_techs))
5170      = sum(nodesData$aggregateNodesModel(nodesData,nodesModelToCalc),
5171              sum(timeData$timeMapping(timeData,timeModelToCalc),
5172                    storage_levelProfileIn(timeData,nodesData,yearsToCalc,storage_techs,pc_storage_levelProfile))
5173                / timeLength(timeModelToCalc)
5174              * storage_reservoirParamIn(nodesData,yearsToCalc,storage_techs,"unitsUpperLimit"))
5175      / sum(nodesData$aggregateNodesModel(nodesData,nodesModelToCalc),
5176              storage_reservoirParamIn(nodesData,yearsToCalc,storage_techs,"unitsUpperLimit"));
5177   
5178  storage_levelProfile(timeModelToCalc,storage_usedTech(nodesModelToCalc,yearsToCalc,storage_techs,vintage),pc_storage_levelProfile)
5179      $( storage_level_hasProfile(nodesModelToCalc,yearsToCalc,storage_techs,pc_storage_levelProfile)
5180          and sum(nodesData$aggregateNodesModel(nodesData,nodesModelToCalc),
5181                      storage_reservoirParamIn(nodesData,yearsToCalc,storage_techs,"unitsUpperLimit")) = inf )
5182      = sum(nodesData$(aggregateNodesModel(nodesData,nodesModelToCalc)
5183                      and storage_reservoirParamIn(nodesData,yearsToCalc,storage_techs,"unitsUpperLimit") = inf ),
5184              sum(timeData$timeMapping(timeData,timeModelToCalc),
5185                    storage_levelProfileIn(timeData,nodesData,yearsToCalc,storage_techs,pc_storage_levelProfile))
5186                / timeLength(timeModelToCalc))
5187      / sum(nodesData$(aggregateNodesModel(nodesData,nodesModelToCalc)
5188                      and storage_reservoirParamIn(nodesData,yearsToCalc,storage_techs,"unitsUpperLimit") = inf ), 1);
5189   
5190  * for fixed profiles overwrite upper and lower profile
5191  storage_levelProfile(timeModelToCalc,nodesModelToCalc,yearsToCalc,storage_techs,vintage,"lower")
5192      $storage_level_hasProfile(nodesModelToCalc,yearsToCalc,storage_techs,"fixed")
5193      = storage_levelProfile(timeModelToCalc,nodesModelToCalc,yearsToCalc,storage_techs,vintage,"fixed");
5194   
5195  storage_levelProfile(timeModelToCalc,nodesModelToCalc,yearsToCalc,storage_techs,vintage,"upper")
5196      $storage_level_hasProfile(nodesModelToCalc,yearsToCalc,storage_techs,"fixed")
5197      = storage_levelProfile(timeModelToCalc,nodesModelToCalc,yearsToCalc,storage_techs,vintage,"fixed");
5198   
5199   
5200  * ==== parameter modifications ====
5201  storage_reservoirParam(nodesModel,years,storage_techs,"unitsLowerLimit")
5202          $sum(vintage, storage_techParam(storage_techs,vintage,"mipUnits"))
5203      = floor(storage_reservoirParam(nodesModel,years,storage_techs,"unitsLowerLimit"));
5204  storage_reservoirParam(nodesModel,years,storage_techs,"unitsUpperLimit")
5205          $sum(vintage, storage_techParam(storage_techs,vintage,"mipUnits"))
5206      = ceil(storage_reservoirParam(nodesModel,years,storage_techs,"unitsUpperLimit"));
5207   
5208   
5209  * ==== definition of variables ====
5210   
5211  * Initialise variables for unitsBuild
5212  storage_unitsBuild.l(nodesModel,years,storage_techs,vintage)
5213      $storage_availTech(nodesModel,years,storage_techs,vintage)
5214      = storage_reservoirParam(nodesModel,years,storage_techs,"unitsBuild");
5215  storage_unitsBuild.lo(nodesModel,yearsToCalc,storage_techs,vintage)
5216      $storage_availTech(nodesModel,yearsToCalc,storage_techs,vintage)
5217      = storage_unitsBuild.l(nodesModel,yearsToCalc,storage_techs,vintage);
5218  storage_unitsBuild.fx(nodesModel,years,storage_techs,vintage)
5219      $storage_reservoirParam(nodesModel,years,storage_techs,"noExpansion")
5220      = storage_unitsBuild.l(nodesModel,years,storage_techs,vintage);
5221   
5222  * Initialise variables for unitsDecom
5223  storage_unitsDecom.l(nodesModel,years,storage_techs,vintage)
5224      $(storage_decomTech(nodesModel,years,storage_techs,vintage)
5225        and years.val < sum(yearsToCalc$(ord(yearsToCalc) = 1), yearsToCalc.val))
5226      = sum((years_a,years_aa)$(sameas(years-1, years_aa)
5227                        and years_a.val > years_aa.val - storage_techParam(storage_techs,vintage,'lifeTime')
5228                        and years_a.val <= years.val - storage_techParam(storage_techs,vintage,'lifeTime')
5229                        and storage_availTech(nodesModel,years_a,storage_techs,vintage)),
5230          storage_unitsBuild.l(nodesModel,years_a,storage_techs,vintage));
5231   
5232  storage_unitsDecom.l(nodesModel,yearsToCalc,storage_techs,vintage)
5233    $storage_decomTech(nodesModel,yearsToCalc,storage_techs,vintage)
5234    = sum(years$
5235          (years.val < sum(yearsToCalc_a$(ord(yearsToCalc_a) = 1), yearsToCalc_a.val)
5236            and storage_availTech(nodesModel,years,storage_techs,vintage)
5237            and years.val > sum(years_a$sameas(years_a, yearsToCalc-1), years_a.val) - storage_techParam(storage_techs,vintage,'lifeTime')
5238            and years.val <= yearsToCalc.val - storage_techParam(storage_techs,vintage,'lifeTime')),
5239        storage_unitsBuild.l(nodesModel,years,storage_techs,vintage))
5240      + sum(yearsToCalc_a$
5241          (yearsToCalc_a.val < sum(yearsToCalc_aa$(ord(yearsToCalc_aa) > 1), yearsToCalc_a.val)
5242            and storage_availTech(nodesModel,yearsToCalc_a,storage_techs,vintage)
5243            and yearsToCalc_a.val > sum(years_a$sameas(years_a, yearsToCalc-1), years_a.val) - storage_techParam(storage_techs,vintage,'lifeTime')
5244            and yearsToCalc_a.val <= yearsToCalc.val - storage_techParam(storage_techs,vintage,'lifeTime')),
5245        storage_unitsBuild.l(nodesModel,yearsToCalc_a,storage_techs,vintage));
5246        ;
5247   
5248  storage_unitsDecom.lo(nodesModel,yearsToCalc,storage_techs,vintage)
5249      $(storage_usedTech(nodesModel,yearsToCalc,storage_techs,vintage)
5250        and not storage_techParam(storage_techs,vintage,"freeDecom"))
5251      = storage_unitsDecom.l(nodesModel,yearsToCalc,storage_techs,vintage)
5252   
5253  * Calculate planned unit expansion
5254  parameter storage_unitsPlanned(nodesModel,years,storage_techs,vintage);
5255  storage_unitsPlanned(nodesModel,years,storage_techs,vintage) = 0;
5256  loop(years,
5257    storage_unitsPlanned(nodesModel,years,storage_techs,vintage)
5258      =
5259      storage_unitsPlanned(nodesModel,years-1,storage_techs,vintage)
5260          $storage_usedTech(nodesModel,years-1,storage_techs,vintage)
5261      + storage_unitsBuild.l(nodesModel,years,storage_techs,vintage)
5262          $storage_availTech(nodesModel,years,storage_techs,vintage)
5263      - storage_unitsDecom.l(nodesModel,years,storage_techs,vintage)
5264          $storage_usedTech(nodesModel,years,storage_techs,vintage);
5265  );
5266   
5267  * Set initial state for planned units
5268  storage_unitsTotal.l(nodesModel,years,storage_techs,vintage)
5269    = storage_unitsPlanned(nodesModel,years,storage_techs,vintage)
5270   
5271  * Calculate if planned unit expansion is bounded by upper and lower limits
5272  set storage_unitBoundsFixed(nodesModel,years,storage_techs);
5273  storage_unitBoundsFixed(nodesModel,years,storage_techs)
5274    $(sum(vintage$storage_usedTech(nodesModel,years,storage_techs,vintage),
5275          storage_unitsPlanned(nodesModel,years,storage_techs,vintage))
5276      = storage_reservoirParam(nodesModel,years,storage_techs,"unitsUpperLimit")
5277    and sum(vintage$storage_usedTech(nodesModel,years,storage_techs,vintage),
5278          storage_unitsPlanned(nodesModel,years,storage_techs,vintage))
5279      = storage_reservoirParam(nodesModel,years,storage_techs,"unitsLowerLimit"))
5280    = yes;
5281   
5282  * Fix unitsBuild, unitsDecom, unitsTotal if levels are predetermined by upper and lower limits
5283  storage_unitsBuild.fx(nodesModel,years,storage_techs,vintage)
5284    $(storage_availTech(nodesModel,years,storage_techs,vintage)
5285      and storage_unitBoundsFixed(nodesModel,years,storage_techs))
5286    = storage_unitsBuild.l(nodesModel,years,storage_techs,vintage);
5287  storage_unitsDecom.fx(nodesModel,years,storage_techs,vintage)
5288    $(storage_usedTech(nodesModel,years,storage_techs,vintage)
5289      and storage_unitBoundsFixed(nodesModel,years,storage_techs))
5290    = storage_unitsDecom.l(nodesModel,years,storage_techs,vintage);
5291  storage_unitsTotal.fx(nodesModel,years,storage_techs,vintage)
5292    $(storage_usedTech(nodesModel,years,storage_techs,vintage)
5293      and storage_unitBoundsFixed(nodesModel,years,storage_techs))
5294    = storage_unitsTotal.l(nodesModel,years,storage_techs,vintage);
5295   
5296  storage_unitsTotal_MIP.up(nodesModel,years,storage_techs,vintage)
5297      $(storage_usedTech(nodesModel,years,storage_techs,vintage)
5298        and storage_techParam(storage_techs,vintage,"mipUnits") = 1)
5299      = storage_reservoirParam(nodesModel,years,storage_techs,"unitsUpperLimit");
5300   
5301  * Add parameter for fixing capacities during myopic runs
5302  parameter storage_unitsDelta(nodesModel,years,storage_techs);
5303   
5304   
5305  * ==== declaration of equations ====
5306   
5307  equations
5308    Eq_storage_unitsBalance(nodesModel,years,storage_techs,vintage
5309      ) "Ensures the units balance over the planning period."
5310    Eq_storage_unitsFixedDecom(nodesModel,years,storage_techs,vintage
5311      ) "Restricts the fixed decommissioning of units over the planning period."
5312    Eq_storage_unitsFreeDecom(nodesModel,years,storage_techs,vintage
5313      ) "Restricts the free decommissioning of units over the planning period."
5314    Eq_storage_unitsUpperLimit(nodesModel,years,storage_techs
5315      ) "Upper bound for the total number of units."
5316    Eq_storage_unitsLowerLimit(nodesModel,years,storage_techs
5317      ) "Lower bound for the total number of units."
5318    Eq_storage_unitsTotalMIP(nodesModel,years,storage_techs,vintage
5319      ) "Fixes the total number of units to the corresponding integer variable."
5320   
5321    Eq_storage_levelUpperLimit(timeModel,nodesModel,years,storage_techs,vintage,commodity
5322      ) "Upper bound for the total number of units."
5323    Eq_storage_levelUpperLimit_degradation(timeModel,nodesModel,years,storage_techs,vintage,commodity
5324      ) "Upper bound for the total number of units if the storage technology accounts for degradation."
5325    Eq_storage_levelLowerLimit(timeModel,nodesModel,years,storage_techs,vintage,commodity
5326      ) "Lower bound for the total number of units."
5327    Eq_storage_losses(timeModel,nodesModel,years,storage_techs,vintage,commodity
5328      ) "Stored commodities lost due to self discharge."
5329    Eq_storage_unitsBalanceStates(nodesModel,years,storage_techs,vintage
5330      ) "Currently available units must have been built at some point in time and have some state of degradation."
5331    Eq_storage_unitsUpperLimitPerState(nodesModel,years,yearsCom,storage_techs,vintage
5332      ) "There cannot be more units from a certain year than the amount built in that year."
5333    Eq_storage_unitsStatesNoRecovery(nodesModel,years,yearsCom,storage_techs,vintage,degradation_states
5334      ) "There is no recovery."
5335    Eq_storage_cRateLimit(timeModel,nodesModel,years,storage_techs,vintage,commodity
5336      ) "Limit charging rate based on unit capacity."
5337    Eq_storage_eRateLimit(timeModel,nodesModel,years,storage_techs,vintage,commodity
5338      ) "Limit discharging rate based on unit capacity."
5339    Eq_storage_charge(timeModel,nodesModel,years,storage_techs,vintage,commodity
5340      ) "Positive change in state of charge is influx."
5341    Eq_storage_discharge(timeModel,nodesModel,years,storage_techs,vintage,commodity
5342      ) "Negative change in state of charge is outflux."
5343   
5344    Eq_storage_levelStateSum(timeModel,nodesModel,years,storage_techs,vintage,commodity
5345      ) "Sum of degradation class storage levels is the global level."
5346    Eq_storage_levelUpperLimitPerAge(timeModel,nodesModel,years,yearsCom,storage_techs,vintage,commodity
5347      ) "Upper bound for units of a certain state."
5348    Eq_storage_chargingPerAge(timeModel,nodesModel,years,yearsCom,storage_techs,vintage,commodity
5349      ) "Positive change in state of charge is influx for each degradation class."
5350    Eq_storage_chargeBasedDegradationDistribution(nodesModel,years,yearsCom,storage_techs,vintage,commodity
5351      ) "Determine degradation states of storage units."
5352    Eq_storage_unitsDecomStateSum(nodesModel,years,storage_techs,vintage
5353      ) "All decomminsioned units must have a degradation state."
5354    Eq_storage_unitsDegradation(nodesModel,years,yearsCom,storage_techs,vintage,degradation_states
5355      ) "Only allow one range of degradation states per year and age group."
5356    Eq_storage_unitsDegradation_onlyOneRange(nodesModel,years,yearsCom,storage_techs,vintage
5357      ) "Limit usable degradation states to one range, i.e., two neighboring states."
5358   
5359    Eq_storage_unitsSoC_sum(timeModel,nodesModel,years,storage_techs,vintage
5360      ) "Every unit has a state of charge."
5361    Eq_storage_levelSoC(timeModel,nodesModel,years,storage_techs,vintage,commodity
5362      ) "Every unit has a state of charge."
5363    Eq_storage_unitsSoC(timeModel,nodesModel,years,storage_techs,vintage,soc_statesIn
5364      ) "Number of units in particular SoC."
5365    Eq_storage_unitsSoC_onlyOneRange(timeModel,nodesModel,years,storage_techs,vintage
5366      ) "Limit usable SoC states to one range, i.e., two neighboring states."
5367   
5368    Eq_storage_cRateLimit_SoC(timeModel,nodesModel,years,storage_techs,vintage,commodity
5369      ) "Limit charging rate based on unit capacity."
5370    Eq_storage_eRateLimit_SoC(timeModel,nodesModel,years,storage_techs,vintage,commodity
5371      ) "Limit discharging rate based on unit capacity."
5372    ;
5373   
5374  * ==== equation definition ====
5375  * // ## Equations
5376  * // ### Storage Units Balance
5377  * // Ensures that the total units are consistent with the built and decommissioned units.
5378  * // {Eq_storage_unitsBalance}
5379  Eq_storage_unitsBalance(nodesModelSel,yearsSel,storage_techs,vintage)
5380      $((storage_usedTech(nodesModelSel,yearsSel,storage_techs,vintage)
5381            or sum(years$sameas(years,yearsSel), storage_usedTech(nodesModelSel,years-1,storage_techs,vintage)))
5382          and not storage_unitBoundsFixed(nodesModelSel,yearsSel,storage_techs))
5383      ..
5384      storage_unitsTotal(nodesModelSel,yearsSel,storage_techs,vintage)
5385      =e=
5386          sum(yearsToCalc$(ord(yearsToCalc) = 1 and sameas(yearsToCalc, yearsSel)),
5387        sum(years$sameas(years, yearsToCalc),
5388          storage_unitsTotal(nodesModelSel,years-1,storage_techs,vintage)
5389            $storage_usedTech(nodesModelSel,years-1,storage_techs,vintage)))
5390      + sum((yearsToCalc)$(ord(yearsToCalc) > 1 and sameas(yearsToCalc, yearsSel)),
5391        storage_unitsTotal(nodesModelSel,yearsToCalc-1,storage_techs,vintage)
5392          $storage_usedTech(nodesModelSel,yearsToCalc-1,storage_techs,vintage))
5393      + storage_unitsBuild(nodesModelSel,yearsSel,storage_techs,vintage)
5394          $storage_availTech(nodesModelSel,yearsSel,storage_techs,vintage)
5395      - storage_unitsDecom(nodesModelSel,yearsSel,storage_techs,vintage)
5396          $storage_usedTech(nodesModelSel,yearsSel,storage_techs,vintage);
5397   
5398  * // ### Storage Units Fixed Decommission
5399  * // Restricts the fixed decommissioning of storage units over the planning period.
5400  * // {Eq_storage_unitsFixedDecom}
5401  Eq_storage_unitsFixedDecom(nodesModelSel,yearsSel,storage_techs,vintage)
5402      $(storage_decomTech(nodesModelSel,yearsSel,storage_techs,vintage)
5403          and not storage_techParam(storage_techs,vintage,"freeDecom") = 1
5404          and not storage_unitBoundsFixed(nodesModelSel,yearsSel,storage_techs))
5405      ..
5406      storage_unitsDecom(nodesModelSel,yearsSel,storage_techs,vintage)
5407      =e=
5408      sum(years$
5409          (storage_availTech(nodesModelSel,years,storage_techs,vintage)
5410            and years.val > sum(yearsToCalc$sameas(yearsToCalc+1, yearsSel), yearsToCalc.val) - storage_techParam(storage_techs,vintage,'lifeTime')
5411            and years.val <= yearsSel.val - storage_techParam(storage_techs,vintage,'lifeTime')),
5412        storage_unitsBuild(nodesModelSel,years,storage_techs,vintage));
5413   
5414  * // ### Storage Units Free Decomission
5415  * // Restricts the free decommissioning of storage units over the planning period.
5416  * // {Eq_storage_unitsFreeDecom}
5417  Eq_storage_unitsFreeDecom(nodesModelSel,yearsSel,storage_techs,vintage)
5418      $((storage_decomTech(nodesModelSel,yearsSel,storage_techs,vintage)
5419          or storage_usedTech(nodesModelSel,yearsSel,storage_techs,vintage))
5420          and storage_techParam(storage_techs,vintage,"freeDecom") = 1)
5421      ..
5422      sum(years$
5423            ((storage_decomTech(nodesModelSel,years,storage_techs,vintage)
5424              or storage_usedTech(nodesModelSel,years,storage_techs,vintage))
5425              and years.val < sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)),
5426          storage_unitsDecom(nodesModelSel,years,storage_techs,vintage))
5427      + sum(yearsToCalc$
5428            ((storage_decomTech(nodesModelSel,yearsToCalc,storage_techs,vintage)
5429              or storage_usedTech(nodesModelSel,yearsToCalc,storage_techs,vintage))
5430              and yearsToCalc.val >= sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
5431              and yearsToCalc.val <= yearsSel.val),
5432          storage_unitsDecom(nodesModelSel,yearsToCalc,storage_techs,vintage))
5433      =g=
5434      sum(years$
5435            (storage_availTech(nodesModelSel,years,storage_techs,vintage)
5436              and years.val < sum(yearsToCalc$(ord(yearsToCalc)=1), yearsToCalc.val) - storage_techParam(storage_techs,vintage,'lifeTime')),
5437          storage_unitsBuild(nodesModelSel,years,storage_techs,vintage))
5438      + sum(yearsToCalc$
5439            (storage_availTech(nodesModelSel,yearsToCalc,storage_techs,vintage)
5440              and yearsToCalc.val >= sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
5441              and yearsToCalc.val <= yearsSel.val - storage_techParam(storage_techs,vintage,'lifeTime')),
5442          storage_unitsBuild(nodesModelSel,yearsToCalc,storage_techs,vintage));
5443   
5444  * // ### Storage Units Lower Limit
5445  * // Lower bound for the total number of storage units.
5446  * // {Eq_storage_unitsLowerLimit}
5447  Eq_storage_unitsLowerLimit(nodesModelSel,yearsSel,storage_techs)
5448      $(storage_reservoirParam(nodesModelSel,yearsSel,storage_techs,'unitsLowerLimit') > 0 )
5449      ..
5450      sum(vintage$storage_usedTech(nodesModelSel,yearsSel,storage_techs,vintage),
5451          storage_unitsTotal(nodesModelSel,yearsSel,storage_techs,vintage))
5452      =g=
5453      storage_reservoirParam(nodesModelSel,yearsSel,storage_techs,"unitsLowerLimit");
5454   
5455  * // ### Storage Units Upper Limit
5456  * // Upper bound for the total number of storage units.
5457  * // {Eq_storage_unitsUpperLimit}
5458  Eq_storage_unitsUpperLimit(nodesModelSel,yearsSel,storage_techs)
5459      $(storage_reservoirParam(nodesModelSel,yearsSel,storage_techs,'unitsUpperLimit') >= 0
5460          and storage_reservoirParam(nodesModelSel,yearsSel,storage_techs,'unitsUpperLimit') < +inf )
5461      ..
5462      sum(vintage$storage_usedTech(nodesModelSel,yearsSel,storage_techs,vintage),
5463          storage_unitsTotal(nodesModelSel,yearsSel,storage_techs,vintage))
5464      =l=
5465      storage_reservoirParam(nodesModelSel,yearsSel,storage_techs,"unitsUpperLimit");
5466   
5467  * // ### Storage Units Total MIP
5468  * // Fixes the total number of storage units to the corresponding integer variable.
5469  * // {Eq_storage_unitsTotalMIP}
5470  Eq_storage_unitsTotalMIP(nodesModelSel,yearsSel,storage_techs,vintage)
5471      $( storage_usedTech(nodesModelSel,yearsSel,storage_techs,vintage)
5472          and storage_techParam(storage_techs,vintage,"mipUnits") = 1 )
5473      ..
5474      storage_unitsTotal(nodesModelSel,yearsSel,storage_techs,vintage)
5475      =e=
5476      storage_unitsTotal_MIP(nodesModelSel,yearsSel,storage_techs,vintage);
5477   
5478  * // ### Storage Level Lower Limit
5479  * // Lower limit on the storage level.
5480  * // {Eq_storage_levelLowerLimit}
5481  Eq_storage_levelLowerLimit(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
5482      $(storage_usedTechCom(nodesModelSel,yearsSel,storage_techs,vintage,commodity)
5483          and storage_levelProfile(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,"lower") > 0)
5484      ..
5485      storage_level(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
5486      =g=
5487      storage_levelProfile(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,"lower")
5488      * storage_sizeParam(storage_techs,vintage,commodity,"size")
5489      * storage_unitsTotal(nodesModelSel,yearsSel,storage_techs,vintage);
5490   
5491  * // ### Storage Level Upper Limit
5492  * // Upper limit on the storage level.
5493  * // {Eq_storage_levelUpperLimit}
5494  Eq_storage_levelUpperLimit(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
5495      $(storage_usedTechCom(nodesModelSel,yearsSel,storage_techs,vintage,commodity)
5496          and not storage_hasDegradation(storage_techs,vintage)
5497          and storage_levelProfile(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,"upper") >= 0)
5498      ..
5499      storage_level(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
5500      =l=
5501      storage_levelProfile(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,"upper")
5502      * storage_sizeParam(storage_techs,vintage,commodity,"size")
5503      * storage_unitsTotal(nodesModelSel,yearsSel,storage_techs,vintage);
5504   
5505  * // ### Storage Level Upper Limit (degradation)
5506  * // Upper limit on the storage level if the storage technology accounts for degradation.
5507  * // {Eq_storage_levelUpperLimit_degradation}
5508  Eq_storage_levelUpperLimit_degradation(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
5509      $(storage_usedTechCom(nodesModelSel,yearsSel,storage_techs,vintage,commodity)
5510          and storage_hasDegradation(storage_techs,vintage)
5511          and storage_levelProfile(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,"upper") >= 0)
5512      ..
5513      storage_level(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
5514      =l=
5515      storage_levelProfile(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,"upper")
5516      * storage_sizeParam(storage_techs,vintage,commodity,"size")
5517      * sum((degradation_states,yearsCom)$storage_usedDegradation(storage_techs,vintage,degradation_states),
5518              (storage_degradationParam(storage_techs,vintage,degradation_states,"remainingCapacity")
5519                - (yearsSel.val - yearsCom.val) * storage_techParam(storage_techs,vintage,"annualDegradation"))
5520                * storage_unitsStateTracker(nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,degradation_states));
5521   
5522  * // ### Storage Unit States Sum (degradation)
5523  * // The number of units in all degradation state must match the total unit number.
5524  * // {Eq_storage_unitsBalanceStates}
5525  Eq_storage_unitsBalanceStates(nodesModelSel,yearsSel,storage_techs,vintage)
5526      $(storage_usedTech(nodesModelSel,yearsSel,storage_techs,vintage)
5527        and storage_hasDegradation(storage_techs,vintage))
5528      ..
5529      storage_unitsTotal(nodesModelSel,yearsSel,storage_techs,vintage)
5530      =e=
5531      sum((yearsCom,degradation_states)$storage_usedDegradation(storage_techs,vintage,degradation_states),
5532            storage_unitsStateTracker(nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,degradation_states));
5533   
5534  * // ### Storage Unit States Upper Limit(degradation)
5535  * // The states of all commissioned units in one year (unitsBuilt) must either still be tracked or have been decommissioned.
5536  * // {Eq_storage_unitsUpperLimitPerState}
5537  Eq_storage_unitsUpperLimitPerState(nodesModelSel,yearsSel,yearsCom,storage_techs,vintage)
5538      $(storage_usedTech(nodesModelSel,yearsSel,storage_techs,vintage)
5539          and storage_hasDegradation(storage_techs,vintage))
5540      ..
5541      sum(degradation_states$storage_usedDegradation(storage_techs,vintage,degradation_states),
5542            storage_unitsStateTracker(nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,degradation_states)
5543            + sum(years$(years.val <= yearsSel.val),
5544                  storage_unitsStateTrackerDecom(nodesModelSel,years,yearsCom,storage_techs,vintage,degradation_states)))
5545      =e=
5546      storage_unitsBuild(nodesModelSel,yearsCom,storage_techs,vintage)$(yearsCom.val <= yearsSel.val);
5547   
5548  * // ### Storage Unit States Progression (degradation)
5549  * // Unit recovery by reassigning the storage cycles to other units is disabled. Therefore, the number of units in a particular degradation state can only increase if the number in a less degraded state is decreased by at least the same amount.
5550  * // {Eq_storage_unitsStatesNoRecovery}
5551  alias(degradation_states, dc_states);
5552  Eq_storage_unitsStatesNoRecovery(nodesModelSel,yearsSel(yearsToCalc),yearsCom,storage_techs,vintage,degradation_states)
5553      $(storage_usedTech(nodesModelSel,yearsSel,storage_techs,vintage)
5554        and yearsToCalc.val > yearsCom.val
5555        and storage_usedDegradation(storage_techs,vintage,degradation_states))
5556      ..
5557      sum(dc_states$(storage_usedDegradation(storage_techs,vintage,dc_states)
5558                and storage_degradationParam(storage_techs,vintage,dc_states,"maxFullCycles") <= storage_degradationParam(storage_techs,vintage,degradation_states,"maxFullCycles")),
5559              storage_unitsStateTracker(nodesModelSel,yearsToCalc,yearsCom,storage_techs,vintage,dc_states)
5560              + sum(years$(years.val <= yearsToCalc.val), storage_unitsStateTrackerDecom(nodesModelSel,years,yearsCom,storage_techs,vintage,dc_states)))
5561      =l=
5562      sum(dc_states$(storage_usedDegradation(storage_techs,vintage,dc_states)
5563                      and storage_degradationParam(storage_techs,vintage,dc_states,"maxFullCycles") <= storage_degradationParam(storage_techs,vintage,degradation_states,"maxFullCycles")),
5564              storage_unitsStateTracker(nodesModelSel,yearsToCalc-1,yearsCom,storage_techs,vintage,dc_states)
5565              + sum(years$(years.val < yearsToCalc.val), storage_unitsStateTrackerDecom(nodesModelSel,years,yearsCom,storage_techs,vintage,dc_states)));
5566   
5567  * // ### Storage Losses
5568  * // Accumulation of storage losses.
5569  * // {Eq_storage_losses}
5570  Eq_storage_losses(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,storage_techs,vintage,commodity)
5571      $storage_usedTechCom(nodesModelSel,yearsSel,storage_techs,vintage,commodity)
5572      ..
5573      storage_losses(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
5574      =e=
5575      - storage_level(timeModelToCalc--1,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
5576        * storage_sizeParam(storage_techs,vintage,commodity,"selfdischarge")
5577      + storage_sizeParam(storage_techs,vintage,commodity,"selfdischargeAbs")
5578      + (storage_techParam(storage_techs,vintage,"chargingLoss")
5579          /(1 - storage_techParam(storage_techs,vintage,"chargingLoss")))
5580        * storage_charge(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
5581          $(storage_techParam(storage_techs,vintage,"chargingLoss") > 0)
5582      + storage_techParam(storage_techs,vintage,"dischargingLoss")
5583        * storage_discharge(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
5584          $(storage_techParam(storage_techs,vintage,"dischargingLoss") > 0)
5585      - storage_sizeParam(storage_techs,vintage,commodity,"size")
5586        * sum(soc_states$(storage_usedTechSoCState(storage_techs,vintage,soc_states)
5587                          and storage_validSoCRange(storage_techs,vintage)),
5588              storage_unitsSoC(timeModelToCalc--1,nodesModelSel,yearsSel,storage_techs,vintage,soc_states)
5589              * storage_SoCParam(storage_techs,vintage,soc_states,"SoC")
5590              * storage_SoCParam(storage_techs,vintage,soc_states,"selfdischarge"));
5591   
5592  * // ### C-Rate Limit
5593  * // The increase in storage level per time step, i.e., the charging rate, is limited relative to the storage capacity.
5594  * // {Eq_storage_cRateLimit}
5595  Eq_storage_cRateLimit(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,storage_techs,vintage,commodity)
5596      $(storage_usedTechCom(nodesModelSel,yearsSel,storage_techs,vintage,commodity)
5597        and storage_techParam(storage_techs,vintage,"maxCRate") > 0)
5598      ..
5599      storage_level(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
5600      - storage_level(timeModelToCalc--1,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
5601      =l=
5602      storage_techParam(storage_techs,vintage,"maxCRate")
5603      * storage_sizeParam(storage_techs,vintage,commodity,"size")
5604      * storage_unitsTotal(nodesModelSel,yearsSel,storage_techs,vintage);
5605   
5606  * // ### E-Rate Limit
5607  * // The decrease in storage level per time step, i.e., the discharging rate, is limited relative to the storage capacity.
5608  * // {Eq_storage_eRateLimit}
5609  Eq_storage_eRateLimit(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,storage_techs,vintage,commodity)
5610      $(storage_usedTechCom(nodesModelSel,yearsSel,storage_techs,vintage,commodity)
5611        and storage_techParam(storage_techs,vintage,"maxERate") > 0)
5612      ..
5613      storage_level(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
5614      - storage_level(timeModelToCalc--1,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
5615      =g=
5616      - storage_techParam(storage_techs,vintage,"maxERate")
5617      * storage_sizeParam(storage_techs,vintage,commodity,"size")
5618      * storage_unitsTotal(nodesModelSel,yearsSel,storage_techs,vintage);
5619   
5620  * // ### Storage Charging
5621  * // Increases in storage levels are accounted as charging amounts.
5622  * // {Eq_storage_charge}
5623  Eq_storage_charge(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,storage_techs,vintage,commodity)
5624      $(storage_usedTechCom(nodesModelSel,yearsSel,storage_techs,vintage,commodity)
5625        and storage_techParam(storage_techs,vintage,"chargingLoss") > 0)
5626      ..
5627      storage_charge(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
5628      =g=
5629      storage_level(timeModelToCalc,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
5630      - storage_level(timeModelToCalc--1,nodesModelSel,yearsSel,storage_techs,vintage,commodity);
5631   
5632  * // ### Storage Discharging
5633  * // Decreases in storage levels are accounted as discharging amounts.
5634  * // {Eq_storage_discharge}
5635  Eq_storage_discharge(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,storage_techs,vintage,commodity)
5636      $(storage_usedTechCom(nodesModelSel,yearsSel,storage_techs,vintage,commodity)
5637        and storage_techParam(storage_techs,vintage,"dischargingLoss") > 0)
5638      ..
5639      storage_discharge(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
5640      =g=
5641      storage_level(timeModelToCalc--1,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
5642      - storage_level(timeModelToCalc,nodesModelSel,yearsSel,storage_techs,vintage,commodity);
5643   
5644  * // ### Storage Level Sum (degradation)
5645  * // The storage level is accounted individually by commissioning year in the case of degradation in order to prohibit the model to assign pre-existing storage cycles to newly built storage reservoirs and thereby avoiding degradation. All those storage levels represent the total storage level.
5646  * // {Eq_storage_levelStateSum}
5647  Eq_storage_levelStateSum(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
5648      $(storage_usedTechCom(nodesModelSel,yearsSel,storage_techs,vintage,commodity)
5649        and storage_techParam(storage_techs,vintage,"usageDegradation"))
5650      ..
5651      storage_level(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
5652      =e=
5653      sum(yearsCom, storage_levelPerAge(timeModelSel,nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,commodity));
5654   
5655  * // ### Storage Level Upper Limit per Age Group (degradation)
5656  * // Upper limit on the storage level per commissioning year if the storage technology accounts for degradation.
5657  * // {Eq_storage_levelUpperLimitPerAge}
5658  Eq_storage_levelUpperLimitPerAge(timeModelSel,nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,commodity)
5659      $(storage_usedTechCom(nodesModelSel,yearsSel,storage_techs,vintage,commodity)
5660        and storage_techParam(storage_techs,vintage,"usageDegradation"))
5661      ..
5662      storage_levelPerAge(timeModelSel,nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,commodity)
5663      =l=
5664      storage_techParam(storage_techs,vintage,"levelUpperLimit")
5665      * storage_sizeParam(storage_techs,vintage,commodity,"size")
5666      * sum(degradation_states,
5667              (storage_degradationParam(storage_techs,vintage,degradation_states,"remainingCapacity")
5668                - (yearsSel.val - yearsCom.val) * storage_techParam(storage_techs,vintage,"annualDegradation"))
5669                * storage_unitsStateTracker(nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,degradation_states));
5670   
5671  * // ### Storage Cycle Distribution to Degradation States per Commissioning Year (degradation)
5672  * // The charging amounts are converted to equivalent full cycles which then must be represented by an adequate distribution of degradation states.
5673  * // {Eq_storage_chargeBasedDegradationDistribution}
5674  alias(years, prev_years);
5675  Eq_storage_chargeBasedDegradationDistribution(nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,commodity)
5676      $(storage_usedTechCom(nodesModelSel,yearsSel,storage_techs,vintage,commodity)
5677        and storage_techParam(storage_techs,vintage,"usageDegradation"))
5678      ..
5679      sum(prev_years$(prev_years.val <= yearsSel.val), representedYears(prev_years)
5680          * sum(timeModel, storage_chargePerAge(timeModel,nodesModelSel,prev_years,yearsCom,storage_techs,vintage,commodity)))
5681      =l=
5682      storage_sizeParam(storage_techs,vintage,commodity,"size")
5683      * sum(dc_states$storage_usedDegradation(storage_techs,vintage,dc_states),
5684          storage_degradationParam(storage_techs,vintage,dc_states,"maxFullCycles")
5685          * (storage_unitsStateTracker(nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,dc_states)
5686             + sum(prev_years$(prev_years.val <= yearsSel.val), storage_unitsStateTrackerDecom(nodesModelSel,prev_years,yearsCom,storage_techs,vintage,dc_states))));
5687   
5688  * // ### Storage Charging per Commissioning Year (degradation)
5689  * // Increases in storage levels are accounted as charging amounts.
5690  * // {Eq_storage_chargingPerAge}
5691  Eq_storage_chargingPerAge(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,commodity)
5692      $(storage_usedTechCom(nodesModelSel,yearsSel,storage_techs,vintage,commodity)
5693        and storage_techParam(storage_techs,vintage,"usageDegradation"))
5694      ..
5695      storage_chargePerAge(timeModelSel,nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,commodity)
5696      =g=
5697      storage_levelPerAge(timeModelToCalc,nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,commodity)
5698      - storage_levelPerAge(timeModelToCalc--1,nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,commodity);
5699   
5700  * // ### Storage Unit Decommissioning States Sum (degradation)
5701  * // The number of decommissioned units in all degradation state must match the total decommissioning unit number.
5702  * // {Eq_storage_unitsDecomStateSum}
5703  Eq_storage_unitsDecomStateSum(nodesModelSel,yearsSel,storage_techs,vintage)
5704      $(storage_techParam(storage_techs,vintage,"usageDegradation"))
5705      ..
5706      storage_unitsDecom(nodesModelSel,yearsSel,storage_techs,vintage)
5707      =e=
5708      sum((yearsCom,degradation_states)$storage_usedDegradation(storage_techs,vintage,degradation_states),
5709          storage_unitsStateTrackerDecom(nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,degradation_states));
5710   
5711  * // ### Storage Unit Sequential Degradation (degradation)
5712  * // Only active degradation ranges, i.e., two neighboring degradation states, can be used.
5713  * // {Eq_storage_unitsDegradation}
5714  alias(degradation_states, degradation_states_a, degradation_states_b);
5715  Eq_storage_unitsDegradation(nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,degradation_states)
5716      $(storage_techParam(storage_techs,vintage,"usageDegradation")
5717        and storage_techParam(storage_techs,vintage,"sequentialDegradationStates"))
5718      ..
5719      sum(degradation_states_a$((storage_degradationParam(storage_techs,vintage,degradation_states_a,"maxFullCycles") = storage_degradationParam(storage_techs,vintage,degradation_states,"maxFullCycles")
5720                        or storage_degradationParam(storage_techs,vintage,degradation_states_a,"maxFullCycles")
5721                                         = smax(degradation_states_b$(storage_degradationParam(storage_techs,vintage,degradation_states_b,"maxFullCycles") < storage_degradationParam(storage_techs,vintage,degradation_states,"maxFullCycles")
5722                                                              and storage_usedDegradation(storage_techs,vintage,degradation_states_b)),
5723                                                              storage_degradationParam(storage_techs,vintage,degradation_states_b,"maxFullCycles")))
5724                        and storage_usedDegradation(storage_techs,vintage,degradation_states_a)),
5725          storage_unitsStateTracker_activeRange(nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,degradation_states_a))
5726      * storage_bigM(storage_techs,vintage)
5727      =g=
5728      storage_unitsStateTracker(nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,degradation_states);
5729   
5730  * // ### Storage Unit Sequential Degradation Range (degradation)
5731  * // Only one degradation range can be active.
5732  * // {Eq_storage_unitsDegradation_onlyOneRange}
5733  Eq_storage_unitsDegradation_onlyOneRange(nodesModelSel,yearsSel,yearsCom,storage_techs,vintage)
5734      $(storage_techParam(storage_techs,vintage,"usageDegradation") and storage_techParam(storage_techs,vintage,"sequentialDegradationStates"))
5735      ..
5736      sum(degradation_states$storage_usedDegradation(storage_techs,vintage,degradation_states),
5737            storage_unitsStateTracker_activeRange(nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,degradation_states))
5738      =e= 1;
5739   
5740  * // ### Storage Unit Sequential State of Charge (SoC)
5741  * // Only active state of charge ranges, i.e., two neighboring states of charge, can be used.
5742  * // {Eq_storage_unitsSoC}
5743  alias(soc_states, soc_states_a, soc_states_b);
5744  Eq_storage_unitsSoC(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,storage_techs,vintage,soc_states)
5745      $(storage_validSoCRange(storage_techs,vintage) and storage_techParam(storage_techs,vintage,"sequentialSoC"))
5746      ..
5747      sum(soc_states_a$((storage_SoCParam(storage_techs,vintage,soc_states_a,"SoC") = storage_SoCParam(storage_techs,vintage,soc_states,"SoC")
5748                        or storage_SoCParam(storage_techs,vintage,soc_states_a,"SoC")
5749                                         = smax(soc_states_b$(storage_SoCParam(storage_techs,vintage,soc_states_b,"SoC") < storage_SoCParam(storage_techs,vintage,soc_states,"SoC")
5750                                                              and storage_usedTechSoCState(storage_techs,vintage,soc_states_b)),
5751                                                              storage_SoCParam(storage_techs,vintage,soc_states_b,"SoC")))
5752                        and storage_usedTechSoCState(storage_techs,vintage,soc_states_a)),
5753          storage_unitsSoC_activeRange(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,soc_states_a))
5754      * storage_bigM(storage_techs,vintage)
5755      =g=
5756      storage_unitsSoC(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,soc_states);
5757   
5758  * // ### Storage Unit Sequential State of Charge Range (SoC)
5759  * // Only one state of charge range can be active.
5760  * // {Eq_storage_unitsSoC_onlyOneRange}
5761  Eq_storage_unitsSoC_onlyOneRange(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,storage_techs,vintage)
5762      $(storage_validSoCRange(storage_techs,vintage) and storage_techParam(storage_techs,vintage,"sequentialSoC"))
5763      ..
5764      sum(soc_states$storage_usedTechSoCState(storage_techs,vintage,soc_states),
5765            storage_unitsSoC_activeRange(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,soc_states)) =e= 1;
5766   
5767  * // ### Storage Unit State of Charge Sum (SoC)
5768  * // Each storage unit must have one state of charge.
5769  * // {Eq_storage_unitsSoC_sum}
5770  Eq_storage_unitsSoC_sum(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,storage_techs,vintage)
5771      $storage_validSoCRange(storage_techs,vintage)
5772      ..
5773      storage_unitsTotal(nodesModelSel,yearsSel,storage_techs,vintage)
5774      =e=
5775      sum(soc_states$storage_usedTechSoCState(storage_techs,vintage,soc_states),
5776            storage_unitsSoC(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,soc_states));
5777   
5778  * // ### Storage Level State of Charge Sum (SoC)
5779  * // The total storage level must be represented by units in their specific states of charge.
5780  * // {Eq_storage_levelSoC}
5781  Eq_storage_levelSoC(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,storage_techs,vintage,commodity)
5782      $(storage_validSoCRange(storage_techs,vintage) and storage_usedTechCom(nodesModelSel,yearsSel,storage_techs,vintage,commodity))
5783      ..
5784      storage_level(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
5785      =e=
5786      storage_sizeParam(storage_techs,vintage,commodity,"size")
5787      * sum(soc_states$storage_usedTechSoCState(storage_techs,vintage,soc_states),
5788              storage_unitsSoC(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,soc_states)
5789              * storage_SoCParam(storage_techs,vintage,soc_states,"SoC"));
5790   
5791  * // ### C-Rate Limit (SoC)
5792  * // The increase in storage level per time step, i.e., the charging rate, is limited relative to the storage capacity. The coefficients can vary between states of charge.
5793  * // {Eq_storage_cRateLimit_SoC}
5794  Eq_storage_cRateLimit_SoC(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,storage_techs,vintage,commodity)
5795      $(storage_usedTechCom(nodesModelSel,yearsSel,storage_techs,vintage,commodity)
5796        and storage_validSoCRange(storage_techs,vintage)
5797        and sum(soc_states, storage_SoCParam(storage_techs,vintage,soc_states,"cRate")) < inf)
5798      ..
5799      storage_level(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
5800      - storage_level(timeModelToCalc--1,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
5801      =l=
5802      storage_sizeParam(storage_techs,vintage,commodity,"size")
5803      * sum(soc_states$storage_usedTechSoCState(storage_techs,vintage,soc_states),
5804                      storage_SoCParam(storage_techs,vintage,soc_states,"cRate")
5805                      * storage_unitsSoC(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,soc_states));
5806   
5807  * // ### E-Rate Limit (SoC)
5808  * // The decrease in storage level per time step, i.e., the discharging rate, is limited relative to the storage capacity. The coefficients can vary between states of charge.
5809  * // {Eq_storage_cRateLimit_SoC}
5810  Eq_storage_eRateLimit_SoC(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,storage_techs,vintage,commodity)
5811      $(storage_usedTechCom(nodesModelSel,yearsSel,storage_techs,vintage,commodity)
5812        and storage_validSoCRange(storage_techs,vintage)
5813        and sum(soc_states, storage_SoCParam(storage_techs,vintage,soc_states,"eRate")) < inf)
5814      ..
5815      storage_level(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
5816      - storage_level(timeModelToCalc--1,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
5817      =g=
5818      - storage_sizeParam(storage_techs,vintage,commodity,"size")
5819      * sum(soc_states$storage_usedTechSoCState(storage_techs,vintage,soc_states),
5820                      storage_SoCParam(storage_techs,vintage,soc_states,"eRate")
5821                      * storage_unitsSoC(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,soc_states));
5822   
5823   
5824  * ==== model definition ====
5825   
5826  Model M_storage
5827  /
5828    Eq_storage_unitsBalance
5829    Eq_storage_unitsFixedDecom
5830    Eq_storage_unitsFreeDecom
5831    Eq_storage_unitsLowerLimit
5832    Eq_storage_unitsUpperLimit
5833    Eq_storage_levelUpperLimit_degradation
5834    Eq_storage_unitsTotalMIP
5835    Eq_storage_levelLowerLimit
5836    Eq_storage_levelUpperLimit
5838    Eq_storage_losses
5840    Eq_storage_unitsBalanceStates
5841    Eq_storage_unitsUpperLimitPerState
5842    Eq_storage_unitsStatesNoRecovery
5843    Eq_storage_cRateLimit
5844    Eq_storage_eRateLimit
5845    Eq_storage_charge
5846    Eq_storage_discharge
5847    Eq_storage_levelStateSum
5848    Eq_storage_levelUpperLimitPerAge
5849    Eq_storage_chargeBasedDegradationDistribution
5850    Eq_storage_chargingPerAge
5851    Eq_storage_unitsDecomStateSum
5852    Eq_storage_unitsDegradation
5853    Eq_storage_unitsDegradation_onlyOneRange
5854   
5855    Eq_storage_unitsSoC
5856    Eq_storage_unitsSoC_sum
5857    Eq_storage_unitsSoC_onlyOneRange
5858    Eq_storage_levelSoC
5859    Eq_storage_cRateLimit_SoC
5860    Eq_storage_eRateLimit_SoC
5861  /;
INCLUDE    C:\Local\REMix\framework\remix\framework\model\source\core\transfer.gms
5863  * SPDX-FileCopyrightText: Copyright (c) 2023 German Aerospace Center (DLR)
5864  * SPDX-License-Identifier: BSD-3-Clause
5865   
5866  * // # core_transfer
5867  * // The equations in this file describe the commodity transfer in the model.
5868   
5869  * // ## Variables
5870  * // {special_table_transfer_variables}
5873   
5878   
6172   
6173  parameter transfer_linksParam(linksModel,years,transfer_techs,pc_transfer_linksParam);
6174  transfer_linksParam(linksModelToCalc,years,transfer_techs,pc_transfer_linksParam)
6175      = sum(linksData$links_aggregate(linksModelToCalc,linksData), transfer_linksParamIn(linksData,years,transfer_techs,pc_transfer_linksParam));
6176   
6177  * // ## Load links from gdx file
6179   
6180   
6181  set transfer_hasflowProfileIn(linksData,years,transfer_techs,pc_transfer_flowProfile);
6182  option transfer_hasflowProfileIn < transfer_flowProfileIn;
6183   
6184  * === modify transfer_flowProfileIn vector to fill with default values, in case profile is not specified ===
6185  transfer_linksParamIn(linksData,years,transfer_techs,"flowAlongLimit")
6186      $(not transfer_linksParamIn(linksData,years,transfer_techs,"limitFlows"))
6187      = 1;
6188   
6189  transfer_linksParamIn(linksData,years,transfer_techs,"flowAgainstLimit")
6190      $(not transfer_linksParamIn(linksData,years,transfer_techs,"limitFlows"))
6191      = 1;
6192   
6193  transfer_flowProfileIn(timeData,linksData,years,transfer_techs,"along")
6194      $(not transfer_hasflowProfileIn(linksData,years,transfer_techs,"along"))
6195      = transfer_linksParamIn(linksData,years,transfer_techs,"flowAlongLimit");
6196   
6197  transfer_flowProfileIn(timeData,linksData,years,transfer_techs,"against")
6198      $(not transfer_hasflowProfileIn(linksData,years,transfer_techs,"against"))
6199      = transfer_linksParamIn(linksData,years,transfer_techs,"flowAgainstLimit");
6200   
6201  * aggregate time dimension
6202  parameter transfer_flowProfileIn_aggTime(timeModel,linksData,yearsToCalc,transfer_techs,pc_transfer_flowProfile);
6203  transfer_flowProfileIn_aggTime(timeModelToCalc,linksData,yearsToCalc,transfer_techs,pc_transfer_flowProfile)
6204    = sum(timeData$timeMapping(timeData,timeModelToCalc),
6205            transfer_flowProfileIn(timeData,linksData,yearsToCalc,transfer_techs,pc_transfer_flowProfile)
6206            / timeLength(timeModelToCalc));
6207  option clear = transfer_flowProfileIn;
6208   
6209   
6210  set transfer_finiteLinkLimit(linksModel,years,transfer_techs);
6211  transfer_finiteLinkLimit(linksModelToCalc,yearsToCalc,transfer_techs)
6212      = sum(linksData$links_aggregate(linksModelToCalc,linksData), transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"linksUpperLimit")) > 0
6213          and sum(linksData$links_aggregate(linksModelToCalc,linksData), transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"linksUpperLimit")) < inf;
6214   
6215  set transfer_infiniteLinkLimit(linksModel,years,transfer_techs);
6216  transfer_infiniteLinkLimit(linksModelToCalc,yearsToCalc,transfer_techs)
6217      = sum(linksData$links_aggregate(linksModelToCalc,linksData), transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"linksUpperLimit")) = inf;
6219   
6220  parameter transfer_lengthParam(linksModel,link_types,pc_transfer_lengthParam);
6221  transfer_lengthParam(linksModelToCalc,link_types,pc_transfer_lengthParam)
6222      = sum(linksData$links_aggregate(linksModelToCalc,linksData), transfer_lengthParamIn(linksData,link_types,pc_transfer_lengthParam))
6223          / sum(linksData$links_aggregate(linksModelToCalc,linksData), 1);
6224   
6225  parameter transfer_gridSegments(linksModel,transfer_techs,gridSegments,pc_transfer_gridSegments);
6226  transfer_gridSegments(linksModelToCalc,transfer_techs,gridSegments,pc_transfer_gridSegments)
6227      = smax(linksData$links_aggregate(linksModelToCalc,linksData), transfer_gridSegmentsIn(linksData,transfer_techs,gridSegments,pc_transfer_gridSegments));
6228   
6229  parameter transfer_dcopf_Xtech(linksModel,years,transfer_techs,vintage,gridSegments);
6230  transfer_dcopf_Xtech(linksModelToCalc,yearsToCalc,transfer_techs,vintage,gridSegments)
6231      $(transfer_gridSegments(linksModelToCalc,transfer_techs,gridSegments,"useDCopf")
6232          and transfer_linksParam(linksModelToCalc,yearsToCalc,transfer_techs,"circuits") > 0
6233          and sum(link_types, transfer_reactPerLength(transfer_techs,vintage,link_types,"reactPerLength")) > 0 )
6234      = (1 / sum(linksData
6235                  $links_aggregate(linksModelToCalc,linksData),
6236              1 / ( sum(link_types,
6237                          transfer_lengthParamIn(linksData,link_types,"length")
6238                          * transfer_reactPerLength(transfer_techs,vintage,link_types,"reactPerLength"))
6239                      / transfer_linksParam(linksModelToCalc,yearsToCalc,transfer_techs,"circuits"))));
6240   
6241  set transfer_hasflowProfile(linksModel,years,transfer_techs,pc_transfer_flowProfile);
6242  transfer_hasflowProfile(linksModelToCalc,yearsToCalc,transfer_techs,pc_transfer_flowProfile)
6243      = sum(linksData$links_aggregate(linksModelToCalc,linksData),
6244              transfer_hasflowProfileIn(linksData,yearsToCalc,transfer_techs,pc_transfer_flowProfile));
6245   
6246  * ==== parameter modifications ====
6247  transfer_linksParam(linksModelToCalc,yearsToCalc,transfer_techs,"linksLowerLimit")
6248      $sum(vintage, transfer_techParam(transfer_techs,vintage,"mipLinks"))
6249      = floor(transfer_linksParam(linksModelToCalc,yearsToCalc,transfer_techs,"linksLowerLimit"));
6250  transfer_linksParam(linksModelToCalc,yearsToCalc,transfer_techs,"linksUpperLimit")
6251      $sum(vintage, transfer_techParam(transfer_techs,vintage,"mipLinks"))
6252      = ceil(transfer_linksParam(linksModelToCalc,yearsToCalc,transfer_techs,"linksUpperLimit"));
6253   
6254   
6255  * ==== calculation of mappings ====
6256   
6257  * Technologies with a lifeTime > 0 are available
6258  set transfer_availTech(linksModel,years,transfer_techs,vintage);
6259  transfer_availTech(linksModel,years,transfer_techs,vintage)
6260      $(vintage.val = smax(vintage_a$(vintage_a.val <= years.val
6261          and transfer_techParam(transfer_techs,vintage_a,"lifeTime") > 0), vintage_a.val)) = yes;
6262   
6263  * Technologies to optimize become unavailable if they have an linksUpperLimit of 0
6264  transfer_availTech(linksModelToCalc,years,transfer_techs,vintage)
6265      $(yearsToCalc(years) and transfer_linksParam(linksModelToCalc,years,transfer_techs,"linksUpperLimit") = 0 ) = no;
6266   
6267  * Technologies already built become unavailable if they have an linksBuild of 0
6268  transfer_availTech(linksModelToCalc,years,transfer_techs,vintage)
6269      $( ( not yearsToCalc(years)) and transfer_linksParam(linksModelToCalc,years,transfer_techs,"linksBuild") = 0 ) = no;
6270   
6271  * Used technologies are available technologies over their technical lifeTime
6272  set transfer_usedTech(linksModel,years,transfer_techs,vintage);
6273  transfer_usedTech(linksModelToCalc,years,transfer_techs,vintage)
6274      $(vintage.val <= years.val
6275          and years.val < smax(years_a$transfer_availTech(linksModelToCalc,years_a,transfer_techs,vintage),
6276                                  years_a.val + transfer_techParam(transfer_techs,vintage,"lifeTime"))
6277          ) = yes;
6278   
6279  * Technologies have to be decomissioned in the interval of first avail + lifetime to last avail + lifetime
6280  set transfer_decomTech(linksModel,years,transfer_techs,vintage);
6281  transfer_decomTech(linksModel,years,transfer_techs,vintage)
6282    $(sum(years_a$transfer_usedTech(linksModel,years_a,transfer_techs,vintage), 1)
6283      and sum(yearsToCalc
6284        $(sameas(years, yearsToCalc)
6285          and yearsToCalc.val >= smin(years_a$transfer_availTech(linksModel,years_a,transfer_techs,vintage), years_a.val) + transfer_techParam(transfer_techs,vintage,"lifeTime")
6286          and yearsToCalc.val <= smax(years_a$transfer_availTech(linksModel,years_a,transfer_techs,vintage), years_a.val) + transfer_techParam(transfer_techs,vintage,"lifeTime")), 1))
6287    = yes;
6288   
6289  * Extend the decom frame to the year after the last year of usedTech
6290  transfer_decomTech(linksModel,yearsToCalc,transfer_techs,vintage)
6291    $(transfer_usedTech(linksModel,yearsToCalc-1,transfer_techs,vintage)
6292      and transfer_decomTech(linksModel,yearsToCalc-1,transfer_techs,vintage))
6293    = yes;
6294   
6295  parameter transfer_flowProfile(timeModel,linksModel,years,transfer_techs,vintage,pc_transfer_flowProfile);
6296   
6297  transfer_flowProfile(timeModelToCalc,linksModelToCalc,yearsToCalc,transfer_techs,vintage,"along")
6298      $transfer_finiteLinkLimit(linksModelToCalc,yearsToCalc,transfer_techs)
6299      = (sum(linksData$(links_aggregate(linksModelToCalc,linksData)
6300                       and transfer_incidenceData_flip(linksData) = 1),
6301              transfer_flowProfileIn_aggTime(timeModelToCalc,linksData,yearsToCalc,transfer_techs,"along")
6302              * transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"linksUpperLimit"))
6303          + sum(linksData$(links_aggregate(linksModelToCalc,linksData)
6304                          and transfer_incidenceData_flip(linksData) = -1),
6305              transfer_flowProfileIn_aggTime(timeModelToCalc,linksData,yearsToCalc,transfer_techs,"against")
6306              * transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"linksUpperLimit")))
6307      / sum(linksData$links_aggregate(linksModelToCalc,linksData),
6308              transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"linksUpperLimit"));
6309   
6310  transfer_flowProfile(timeModelToCalc,linksModelToCalc,yearsToCalc,transfer_techs,vintage,"against")
6311      $transfer_finiteLinkLimit(linksModelToCalc,yearsToCalc,transfer_techs)
6312      = (sum(linksData$(links_aggregate(linksModelToCalc,linksData)
6313                       and transfer_incidenceData_flip(linksData) = 1),
6314              transfer_flowProfileIn_aggTime(timeModelToCalc,linksData,yearsToCalc,transfer_techs,"against")
6315              * transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"linksUpperLimit"))
6316          + sum(linksData$(links_aggregate(linksModelToCalc,linksData)
6317                          and transfer_incidenceData_flip(linksData) = -1),
6318              transfer_flowProfileIn_aggTime(timeModelToCalc,linksData,yearsToCalc,transfer_techs,"along")
6319              * transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"linksUpperLimit")))
6320      / sum(linksData$links_aggregate(linksModelToCalc,linksData),
6321              transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"linksUpperLimit"));
6322   
6323  transfer_flowProfile(timeModelToCalc,linksModelToCalc,yearsToCalc,transfer_techs,vintage,"along")
6324      $transfer_infiniteLinkLimit(linksModelToCalc,yearsToCalc,transfer_techs)
6325      = (sum(linksData$(links_aggregate(linksModelToCalc,linksData)
6326                       and transfer_incidenceData_flip(linksData) = 1
6327                       and transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"linksUpperLimit") = inf ),
6328              transfer_flowProfileIn_aggTime(timeModelToCalc,linksData,yearsToCalc,transfer_techs,"along"))
6329          + sum(linksData$(links_aggregate(linksModelToCalc,linksData)
6330                          and transfer_incidenceData_flip(linksData) = -1
6331                          and transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"linksUpperLimit") = inf ),
6332              transfer_flowProfileIn_aggTime(timeModelToCalc,linksData,yearsToCalc,transfer_techs,"against")))
6333      / sum(linksData$(links_aggregate(linksModelToCalc,linksData)
6334                      and transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"linksUpperLimit") = inf ),
6335              1);
6336   
6337  transfer_flowProfile(timeModelToCalc,linksModelToCalc,yearsToCalc,transfer_techs,vintage,"against")
6338      $transfer_infiniteLinkLimit(linksModelToCalc,yearsToCalc,transfer_techs)
6339      = (sum(linksData$(links_aggregate(linksModelToCalc,linksData)
6340                       and transfer_incidenceData_flip(linksData) = 1
6341                       and transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"linksUpperLimit") = inf ),
6342              transfer_flowProfileIn_aggTime(timeModelToCalc,linksData,yearsToCalc,transfer_techs,"against"))
6343          + sum(linksData$(links_aggregate(linksModelToCalc,linksData)
6344                          and transfer_incidenceData_flip(linksData) = -1
6345                          and transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"linksUpperLimit") = inf ),
6346              transfer_flowProfileIn_aggTime(timeModelToCalc,linksData,yearsToCalc,transfer_techs,"along")))
6347      / sum(linksData$(links_aggregate(linksModelToCalc,linksData)
6348                      and transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"linksUpperLimit") = inf ),
6349              1);
6350  option clear = transfer_flowProfileIn_aggTime;
6351   
6352  * Orientation of links affects the flowAlongLimit/flowAgainstLimit
6353   
6354  transfer_linksParam(linksModelToCalc,years,transfer_techs,"flowAlongLimit")
6355      $transfer_finiteLinkLimit(linksModelToCalc,years,transfer_techs)
6356      = (sum(linksData$(links_aggregate(linksModelToCalc,linksData)
6357                       and transfer_incidenceData_flip(linksData) = 1),
6358              transfer_linksParamIn(linksData,years,transfer_techs,"flowAlongLimit")
6359              * transfer_linksParamIn(linksData,years,transfer_techs,"linksUpperLimit"))
6360          + sum(linksData$(links_aggregate(linksModelToCalc,linksData)
6361                          and transfer_incidenceData_flip(linksData) = -1),
6362              transfer_linksParamIn(linksData,years,transfer_techs,"flowAgainstLimit")
6363              * transfer_linksParamIn(linksData,years,transfer_techs,"linksUpperLimit")))
6364      / sum(linksData$links_aggregate(linksModelToCalc,linksData),
6365              transfer_linksParamIn(linksData,years,transfer_techs,"linksUpperLimit"));
6366   
6367  transfer_linksParam(linksModelToCalc,years,transfer_techs,"flowAgainstLimit")
6368      $transfer_finiteLinkLimit(linksModelToCalc,years,transfer_techs)
6369      = (sum(linksData$(links_aggregate(linksModelToCalc,linksData)
6370                       and transfer_incidenceData_flip(linksData) = -1),
6371              transfer_linksParamIn(linksData,years,transfer_techs,"flowAlongLimit")
6372              * transfer_linksParamIn(linksData,years,transfer_techs,"linksUpperLimit"))
6373          + sum(linksData$(links_aggregate(linksModelToCalc,linksData)
6374                          and transfer_incidenceData_flip(linksData) = 1),
6375              transfer_linksParamIn(linksData,years,transfer_techs,"flowAgainstLimit")
6376              * transfer_linksParamIn(linksData,years,transfer_techs,"linksUpperLimit")))
6377      / sum(linksData$links_aggregate(linksModelToCalc,linksData),
6378              transfer_linksParamIn(linksData,years,transfer_techs,"linksUpperLimit"));
6379   
6380  transfer_linksParam(linksModelToCalc,years,transfer_techs,"flowAlongLimit")
6381      $transfer_infiniteLinkLimit(linksModelToCalc,years,transfer_techs)
6382      = (sum(linksData$(links_aggregate(linksModelToCalc,linksData)
6383                       and transfer_incidenceData_flip(linksData) = 1
6384                       and transfer_linksParamIn(linksData,years,transfer_techs,"linksUpperLimit") = inf),
6385              transfer_linksParamIn(linksData,years,transfer_techs,"flowAlongLimit"))
6386          + sum(linksData$(links_aggregate(linksModelToCalc,linksData)
6387                          and transfer_incidenceData_flip(linksData) = -1
6388                          and transfer_linksParamIn(linksData,years,transfer_techs,"linksUpperLimit") = inf),
6389              transfer_linksParamIn(linksData,years,transfer_techs,"flowAgainstLimit")))
6390      / sum(linksData$(links_aggregate(linksModelToCalc,linksData)
6391                      and transfer_linksParamIn(linksData,years,transfer_techs,"linksUpperLimit") = inf ),
6392              1);
6393   
6394  transfer_linksParam(linksModelToCalc,years,transfer_techs,"flowAgainstLimit")
6395      $transfer_infiniteLinkLimit(linksModelToCalc,years,transfer_techs)
6396      = (sum(linksData$(links_aggregate(linksModelToCalc,linksData)
6397                       and transfer_incidenceData_flip(linksData) = -1
6398                       and transfer_linksParamIn(linksData,years,transfer_techs,"linksUpperLimit") = inf),
6399              transfer_linksParamIn(linksData,years,transfer_techs,"flowAlongLimit"))
6400          + sum(linksData$(links_aggregate(linksModelToCalc,linksData)
6401                          and transfer_incidenceData_flip(linksData) = 1
6402                          and transfer_linksParamIn(linksData,years,transfer_techs,"linksUpperLimit") = inf),
6403              transfer_linksParamIn(linksData,years,transfer_techs,"flowAgainstLimit")))
6404      / sum(linksData$(links_aggregate(linksModelToCalc,linksData)
6405                      and transfer_linksParamIn(linksData,years,transfer_techs,"linksUpperLimit") = inf ),
6406              1);
6407   
6408  * Mapping for grid segments using DC optimal power flow
6409  set gridSegments_dcopf(linksModel,transfer_techs,gridSegments);
6410  gridSegments_dcopf(linksModelToCalc,transfer_techs,gridSegments)
6411      $transfer_gridSegments(linksModelToCalc,transfer_techs,gridSegments,"useDCopf")
6413      = yes;
6415   
6416  * Ensure each grid segment uses exactly one commodity
6417  parameter checkGridSegmentCommodities(gridSegments);
6418  checkGridSegmentCommodities(gridSegments)
6419      = sum (commodity$(sum((linksModelToCalc,transfer_techs,vintage)
6420                              $( transfer_coefficient(transfer_techs,vintage,commodity,"coefficient") > 0
6421                                  and gridSegments_dcopf(linksModelToCalc,transfer_techs,gridSegments)) , 1) > 0), 1);
6422   
6423  parameter transfer_incidenceSegments(nodesModel,linksModel,years,gridSegments);
6424  transfer_incidenceSegments(nodesModelToCalc,linksModelToCalc,yearsToCalc,gridSegments)
6425      $(sum((transfer_techs,vintage)$(transfer_usedTech(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
6426                                          and gridSegments_dcopf(linksModelToCalc,transfer_techs,gridSegments)
6427                                          and transfer_incidenceModel(nodesModelToCalc,linksModelToCalc) <> 0), 1) > 0)
6428      = transfer_incidenceModel(nodesModelToCalc,linksModelToCalc);
6429   
6430   
6434   
6435  scalar transfer_enableMIP;
6436  transfer_enableMIP = sum(transfer_usedTech(linksModelToCalc,yearsToCalc,transfer_techs,vintage)$transfer_techParam(transfer_techs,vintage,"mipLinks"), 1 );
6437   
6438   
6439  * ==== definition of variables ====
6440   
6441  * Initialise variables for linksBuild
6442  transfer_linksBuild.l(linksModel,years,transfer_techs,vintage)
6443      $transfer_availTech(linksModel,years,transfer_techs,vintage)
6444      = transfer_linksParam(linksModel,years,transfer_techs,"linksBuild");
6445  transfer_linksBuild.lo(linksModel,yearsToCalc,transfer_techs,vintage)
6446      $transfer_availTech(linksModel,yearsToCalc,transfer_techs,vintage)
6447      = transfer_linksBuild.l(linksModel,yearsToCalc,transfer_techs,vintage);
6448  transfer_linksBuild.fx(linksModel,years,transfer_techs,vintage)
6449      $transfer_linksParam(linksModel,years,transfer_techs,"noExpansion")
6450      = transfer_linksBuild.l(linksModel,years,transfer_techs,vintage);
6451   
6452  * Initialise variables for linksDecom
6453  transfer_linksDecom.l(linksModel,years,transfer_techs,vintage)
6454      $(transfer_decomTech(linksModel,years,transfer_techs,vintage)
6455        and years.val < sum(yearsToCalc$(ord(yearsToCalc) = 1), yearsToCalc.val))
6456      = sum((years_a,years_aa)$(sameas(years-1, years_aa)
6457                        and years_a.val > years_aa.val - transfer_techParam(transfer_techs,vintage,'lifeTime')
6458                        and years_a.val <= years.val - transfer_techParam(transfer_techs,vintage,'lifeTime')
6459                        and transfer_availTech(linksModel,years_a,transfer_techs,vintage)),
6460          transfer_linksBuild.l(linksModel,years_a,transfer_techs,vintage));
6461   
6462  transfer_linksDecom.l(linksModel,yearsToCalc,transfer_techs,vintage)
6463    $transfer_decomTech(linksModel,yearsToCalc,transfer_techs,vintage)
6464    = sum(years$
6465          (years.val < sum(yearsToCalc_a$(ord(yearsToCalc_a) = 1), yearsToCalc_a.val)
6466            and transfer_availTech(linksModel,years,transfer_techs,vintage)
6467            and years.val > sum(years_a$sameas(years_a, yearsToCalc-1), years_a.val) - transfer_techParam(transfer_techs,vintage,'lifeTime')
6468            and years.val <= yearsToCalc.val - transfer_techParam(transfer_techs,vintage,'lifeTime')),
6469        transfer_linksBuild.l(linksModel,years,transfer_techs,vintage))
6470      + sum(yearsToCalc_a$
6471          (yearsToCalc_a.val < sum(yearsToCalc_aa$(ord(yearsToCalc_aa) > 1), yearsToCalc_a.val)
6472            and transfer_availTech(linksModel,yearsToCalc_a,transfer_techs,vintage)
6473            and yearsToCalc_a.val > sum(years_a$sameas(years_a, yearsToCalc-1), years_a.val) - transfer_techParam(transfer_techs,vintage,'lifeTime')
6474            and yearsToCalc_a.val <= yearsToCalc.val - transfer_techParam(transfer_techs,vintage,'lifeTime')),
6475        transfer_linksBuild.l(linksModel,yearsToCalc_a,transfer_techs,vintage));
6476        ;
6477   
6478  transfer_linksDecom.lo(linksModel,yearsToCalc,transfer_techs,vintage)
6479      $(transfer_usedTech(linksModel,yearsToCalc,transfer_techs,vintage)
6480          and not transfer_techParam(transfer_techs,vintage,"freeDecom"))
6481      = transfer_linksDecom.l(linksModel,yearsToCalc,transfer_techs,vintage)
6482   
6483  * Calculate planned transfer links expansion
6484  parameter transfer_linksPlanned(linksModel,years,transfer_techs,vintage);
6485  transfer_linksPlanned(linksModel,years,transfer_techs,vintage) = 0;
6486  loop(years,
6487    transfer_linksPlanned(linksModel,years,transfer_techs,vintage)
6488      =
6489      transfer_linksPlanned(linksModel,years-1,transfer_techs,vintage)
6490          $transfer_usedTech(linksModel,years-1,transfer_techs,vintage)
6491      + transfer_linksBuild.l(linksModel,years,transfer_techs,vintage)
6492          $transfer_availTech(linksModel,years,transfer_techs,vintage)
6493      - transfer_linksDecom.l(linksModel,years,transfer_techs,vintage)
6494          $transfer_usedTech(linksModel,years,transfer_techs,vintage);
6495  );
6496   
6497  * Set initial state for planned units
6498  transfer_linksTotal.l(linksModel,years,transfer_techs,vintage)
6499    = transfer_linksPlanned(linksModel,years,transfer_techs,vintage)
6500   
6501  * Calculate if planned links expansion is bound by upper and lower limits
6502  set transfer_linkBoundsFixed(linksModel,years,transfer_techs);
6503  transfer_linkBoundsFixed(linksModel,years,transfer_techs)
6504    $(sum(vintage$transfer_usedTech(linksModel,years,transfer_techs,vintage),
6505          transfer_linksPlanned(linksModel,years,transfer_techs,vintage))
6506      = transfer_linksParam(linksModel,years,transfer_techs,"linksUpperLimit")
6507    and sum(vintage$transfer_usedTech(linksModel,years,transfer_techs,vintage),
6508          transfer_linksPlanned(linksModel,years,transfer_techs,vintage))
6509      = transfer_linksParam(linksModel,years,transfer_techs,"linksLowerLimit"))
6510    = yes;
6511   
6512  * Fix linksBuild, linksDecom, linksTotal if levels are predetermined by upper and lower limits
6513  transfer_linksBuild.fx(linksModel,years,transfer_techs,vintage)
6514    $(transfer_availTech(linksModel,years,transfer_techs,vintage)
6515      and transfer_linkBoundsFixed(linksModel,years,transfer_techs))
6516    = transfer_linksBuild.l(linksModel,years,transfer_techs,vintage);
6517  transfer_linksDecom.fx(linksModel,years,transfer_techs,vintage)
6518    $(transfer_usedTech(linksModel,years,transfer_techs,vintage)
6519      and transfer_linkBoundsFixed(linksModel,years,transfer_techs))
6520    = transfer_linksDecom.l(linksModel,years,transfer_techs,vintage);
6521  transfer_linksTotal.fx(linksModel,years,transfer_techs,vintage)
6522    $(transfer_usedTech(linksModel,years,transfer_techs,vintage)
6523      and transfer_linkBoundsFixed(linksModel,years,transfer_techs))
6524    = transfer_linksTotal.l(linksModel,years,transfer_techs,vintage);
6525   
6526  transfer_linksTotal_MIP.up(linksModel,years,transfer_techs,vintage)
6527      $(transfer_usedTech(linksModel,years,transfer_techs,vintage)
6528        and transfer_techParam(transfer_techs,vintage,"miplinks") = 1)
6529      = transfer_linksParam(linksModel,years,transfer_techs,"linksUpperLimit");
6530   
6531  * Add parameter for fixing capacities during myopic runs
6532  parameter transfer_linksDelta(linksModel,years,transfer_techs);
6533   
6534   
6535  * ==== declaration of equations ====
6536   
6537  equations
6538    Eq_transfer_linksBalance(linksModel,years,transfer_techs,vintage
6539      ) "Ensures the links balance over the planning period."
6540    Eq_transfer_linksFixedDecom(linksModel,years,transfer_techs,vintage
6541      ) "Restricts the fixed decommissioning of links over the planning period."
6542    Eq_transfer_linksFreeDecom(linksModel,years,transfer_techs,vintage
6543      ) "Restricts the free decommissioning of links over the planning period."
6544    Eq_transfer_linksUpperLimit(linksModel,years,transfer_techs
6545      ) "Upper bound for the total number of links."
6546    Eq_transfer_linksLowerLimit(linksModel,years,transfer_techs
6547      ) "Lower bound for the total number of links."
6548    Eq_transfer_linksTotalMIP(linksModel,years,transfer_techs,vintage
6549      ) "Fixes the total number of links to the corresponding integer variable."
6550   
6551    Eq_transfer_flowAlongUpperLimit(timeModel,linksModel,years,transfer_techs,vintage
6552      ) "Upper bound for the flow along the transfer links."
6553    Eq_transfer_flowAgainstUpperLimit(timeModel,linksModel,years,transfer_techs,vintage
6554      ) "Upper bound for the flow against the transfer links."
6555    Eq_transfer_dcopf_angleFlows(timeModel,linksModel,years,gridSegments
6556      )
6557    Eq_transfer_dcopf_cycleFlows(timeModel,years,cycles,gridSegments
6558      )
6559    ;
6560   
6561   
6562  * ==== equation definition ====
6563  * // ## Equations
6564  * // ### Transfer Links Balance
6565  * // Ensures that the transfer between nodes is balanced.
6566  * // {Eq_transfer_linksBalance}
6567  Eq_transfer_linksBalance(linksModelToCalc,yearsSel,transfer_techs,vintage)
6568      $((transfer_usedTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
6569            or sum(years$sameas(years,yearsSel), transfer_usedTech(linksModelToCalc,years-1,transfer_techs,vintage)))
6570          and not transfer_linkBoundsFixed(linksModelToCalc,yearsSel,transfer_techs))
6571      ..
6572      transfer_linksTotal(linksModelToCalc,yearsSel,transfer_techs,vintage)
6573      =e=
6574      sum(yearsToCalc$(ord(yearsToCalc) = 1 and sameas(yearsToCalc, yearsSel)),
6575        sum(years$sameas(years, yearsToCalc),
6576          transfer_linksTotal(linksModelToCalc,years-1,transfer_techs,vintage)
6577            $transfer_usedTech(linksModelToCalc,years-1,transfer_techs,vintage)))
6578      + sum((yearsToCalc)$(ord(yearsToCalc) > 1 and sameas(yearsToCalc, yearsSel)),
6579        transfer_linksTotal(linksModelToCalc,yearsToCalc-1,transfer_techs,vintage)
6580          $transfer_usedTech(linksModelToCalc,yearsToCalc-1,transfer_techs,vintage))
6581      + transfer_linksBuild(linksModelToCalc,yearsSel,transfer_techs,vintage)
6582          $transfer_availTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
6583      - transfer_linksDecom(linksModelToCalc,yearsSel,transfer_techs,vintage)
6584          $transfer_usedTech(linksModelToCalc,yearsSel,transfer_techs,vintage);
6585   
6586  * // ### Transfer Links Fixed Decommissioning
6587  * // Balances fixed link decommissioning.
6588  * // {Eq_transfer_linksFixedDecom}
6589  Eq_transfer_linksFixedDecom(linksModelToCalc,yearsSel,transfer_techs,vintage)
6590      $(transfer_decomTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
6591          and not transfer_techParam(transfer_techs,vintage,"freeDecom") = 1
6592          and not transfer_linkBoundsFixed(linksModelToCalc,yearsSel,transfer_techs))
6593      ..
6594      transfer_linksDecom(linksModelToCalc,yearsSel,transfer_techs,vintage)
6595      =e=
6596      sum(years$
6597          (transfer_availTech(linksModelToCalc,years,transfer_techs,vintage)
6598              and years.val > sum(yearsToCalc$sameas(yearsToCalc+1, yearsSel), yearsToCalc.val) - transfer_techParam(transfer_techs,vintage,'lifeTime')
6599              and years.val <= yearsSel.val - transfer_techParam(transfer_techs,vintage,'lifeTime')),
6600          transfer_linksBuild(linksModelToCalc,years,transfer_techs,vintage));
6601   
6602  * // ### Transfer Links Free Decommissioning
6603  * // Balances free link decommissioning.
6604  * // {Eq_transfer_linksFreeDecom}
6605  Eq_transfer_linksFreeDecom(linksModelToCalc,yearsSel,transfer_techs,vintage)
6606      $((transfer_decomTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
6607          or transfer_usedTech(linksModelToCalc,yearsSel,transfer_techs,vintage))
6608          and transfer_techParam(transfer_techs,vintage,"freeDecom") = 1)
6609      ..
6610      sum(years$
6611            ((transfer_decomTech(linksModelToCalc,years,transfer_techs,vintage)
6612              or transfer_usedTech(linksModelToCalc,years,transfer_techs,vintage))
6613              and years.val < sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)),
6614          transfer_linksDecom(linksModelToCalc,years,transfer_techs,vintage))
6615      + sum(yearsToCalc$
6616            ((transfer_decomTech(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
6617              or transfer_usedTech(linksModelToCalc,yearsToCalc,transfer_techs,vintage))
6618              and yearsToCalc.val >= sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
6619              and yearsToCalc.val <= yearsSel.val),
6620          transfer_linksDecom(linksModelToCalc,yearsToCalc,transfer_techs,vintage))
6621      =g=
6622      sum(years$
6623            (transfer_availTech(linksModelToCalc,years,transfer_techs,vintage)
6624              and years.val < sum(yearsToCalc$(ord(yearsToCalc)=1), yearsToCalc.val) - transfer_techParam(transfer_techs,vintage,'lifeTime')),
6625          transfer_linksBuild(linksModelToCalc,years,transfer_techs,vintage))
6626      + sum(yearsToCalc$
6627            (transfer_availTech(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
6628              and yearsToCalc.val >= sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
6629              and yearsToCalc.val <= yearsSel.val - transfer_techParam(transfer_techs,vintage,'lifeTime')),
6630          transfer_linksBuild(linksModelToCalc,yearsToCalc,transfer_techs,vintage));
6631   
6632  * // ### Transfer Links Lower Limit
6633  * // Ensures link capacity lower limits.
6634  * // {Eq_transfer_linksLowerLimit}
6635  Eq_transfer_linksLowerLimit(linksModelToCalc,yearsSel,transfer_techs)
6636      $(transfer_linksParam(linksModelToCalc,yearsSel,transfer_techs,'linksLowerLimit') > 0 )
6637      ..
6638      sum(vintage$transfer_usedTech(linksModelToCalc,yearsSel,transfer_techs,vintage),
6639          transfer_linksTotal(linksModelToCalc,yearsSel,transfer_techs,vintage))
6640      =g=
6641      transfer_linksParam(linksModelToCalc,yearsSel,transfer_techs,"linksLowerLimit");
6642   
6643  * // ### Transfer Links Upper Limit
6644  * // Ensures link capacity upper limits.
6645  * // {Eq_transfer_linksUpperLimit}
6646  Eq_transfer_linksUpperLimit(linksModelToCalc,yearsSel,transfer_techs)
6647      $(transfer_linksParam(linksModelToCalc,yearsSel,transfer_techs,'linksUpperLimit') >= 0
6648          and transfer_linksParam(linksModelToCalc,yearsSel,transfer_techs,'linksUpperLimit') < +inf )
6649      ..
6650      sum(vintage$transfer_usedTech(linksModelToCalc,yearsSel,transfer_techs,vintage),
6651          transfer_linksTotal(linksModelToCalc,yearsSel,transfer_techs,vintage))
6652      =l=
6653      transfer_linksParam(linksModelToCalc,yearsSel,transfer_techs,"linksUpperLimit");
6654   
6655  * // ### Transfer Links Total MIP
6656  * // Ensures number of MIP links.
6657  * // {Eq_transfer_linksTotalMIP}
6658  Eq_transfer_linksTotalMIP(linksModelToCalc,yearsSel,transfer_techs,vintage)
6659      $(transfer_usedTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
6660          and transfer_techParam(transfer_techs,vintage,"mipLinks"))
6661      ..
6662      transfer_linksTotal(linksModelToCalc,yearsSel,transfer_techs,vintage)
6663      =e=
6664      transfer_linksTotal_MIP(linksModelToCalc,yearsSel,transfer_techs,vintage);
6665   
6666  * // ### Transfer Links Flow Along Upper Limit
6667  * // Ensures links flow along upper limit.
6668  * // {Eq_transfer_flowAlongUpperLimit}
6669  Eq_transfer_flowAlongUpperLimit(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
6670      $transfer_usedTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
6671      ..
6672      transfer_flowAlong(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
6673      =l=
6674      transfer_flowProfile(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage,"along")
6675      * transfer_linksTotal(linksModelToCalc,yearsSel,transfer_techs,vintage)
6676      * transfer_techParam(transfer_techs,vintage,"flowUpperLimit")
6677      ;
6678   
6679  * // ### Transfer Links Flow Against Upper Limit
6680  * // Ensures links flow against upper limit.
6681  * // {Eq_transfer_flowAgainstUpperLimit}
6682  Eq_transfer_flowAgainstUpperLimit(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
6683      $transfer_usedTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
6684      ..
6685      transfer_flowAgainst(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
6686      =l=
6687      transfer_flowProfile(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage,"against")
6688      * transfer_linksTotal(linksModelToCalc,yearsSel,transfer_techs,vintage)
6689      * transfer_techParam(transfer_techs,vintage,"flowUpperLimit")
6690      ;
6691   
6692  set transfer_usedOpf(linksModel,years,gridSegments,transfer_techs,vintage);
6693  transfer_usedOpf(linksModel,yearsToCalc,gridSegments,transfer_techs,vintage)
6694      $(transfer_usedTech(linksModel,yearsToCalc,transfer_techs,vintage)
6695          and gridSegments_dcopf(linksModel,transfer_techs,gridSegments))
6696      = yes;
6697   
6698  set transfer_usedOpfLinks(linksModel,years,gridSegments);
6699  option transfer_usedOpfLinks < transfer_usedOpf;
6700   
6701  set transfer_usedOpfSegments(years,gridSegments);
6702  option transfer_usedOpfSegments < transfer_usedOpf;
6703   
6707  * // ### Transfer DC optimal flow angle flows
6708  * // Angle flows.
6709  * // {Eq_transfer_dcopf_cycleFlows}
6710  Eq_transfer_dcopf_angleFlows(timeModelSel,linksModelToCalc,yearsSel,gridSegments)
6711      $transfer_usedOpfLinks(linksModelToCalc,yearsSel,gridSegments)
6712      ..
6713      sum ((transfer_techs,vintage)
6714              $transfer_usedOpf(linksModelToCalc,yearsSel,gridSegments,transfer_techs,vintage),
6715          ( transfer_flowAlong(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
6716              - transfer_flowAgainst(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage) )
6717          * transfer_dcopf_Xtech(linksModelToCalc,yearsSel,transfer_techs,vintage,gridSegments) )
6718      =e=
6719      sum ( nodesModelSel,
6720          - transfer_incidenceModel(nodesModelSel,linksModelToCalc)
6721          * transfer_dcopf_voltageAngle(timeModelSel,nodesModelSel,yearsSel,gridSegments));
6725   
6726   
6727  * ==== model definition ====
6728   
6729  Model M_transfer
6730  /
6731    Eq_transfer_linksBalance
6732    Eq_transfer_linksFixedDecom
6733    Eq_transfer_linksFreeDecom
6734    Eq_transfer_linksLowerLimit
6735    Eq_transfer_linksUpperLimit
6736    Eq_transfer_linksTotalMIP
6737    Eq_transfer_flowAlongUpperLimit
6738    Eq_transfer_flowAgainstUpperLimit
6742    Eq_transfer_dcopf_angleFlows
6746  /;
INCLUDE    C:\Local\REMix\framework\remix\framework\model\source\core\sourcesink.gms
6748  * SPDX-FileCopyrightText: Copyright (c) 2023 German Aerospace Center (DLR)
6749  * SPDX-License-Identifier: BSD-3-Clause
6750   
6751  * // # core_sourcesink
6752  * // The equations in this file describe the sources and sinks in the model.
6753   
6754  * // ## Variables
6755  * // {special_table_sourcesink_variables}
7063   
7064  * // ## Aggregation of profiles
7065  * // Profiles are rescaled based on the annual sum.
7066   
7067  set sourcesink_usesProfileScaling(nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile);
7068  sourcesink_usesProfileScaling(nodesData,years,sourcesink_techs,commodity,"fixed")
7069      $sourcesink_configIn(nodesData,years,sourcesink_techs,commodity,"scaleFixProfileWithFixSum") = yes;
7070  sourcesink_usesProfileScaling(nodesData,years,sourcesink_techs,commodity,"lower")
7071      $sourcesink_configIn(nodesData,years,sourcesink_techs,commodity,"scaleLowProfileWithLowSum") = yes;
7072  sourcesink_usesProfileScaling(nodesData,years,sourcesink_techs,commodity,"upper")
7073      $sourcesink_configIn(nodesData,years,sourcesink_techs,commodity,"scaleUpProfileWithUpSum") = yes;
7074   
7075  parameter sourcesink_ProfileSum(nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile);
7076  sourcesink_ProfileSum(nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile)
7077      $sourcesink_usesProfileScaling(nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile)
7078      = sum(timeData, sourcesink_profileIn(timeData,nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile));
7079   
7080  parameter sourcesink_ProfileAbsSum(nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile);
7081  sourcesink_ProfileAbsSum(nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile)
7082      $sourcesink_usesProfileScaling(nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile)
7083      = sum(timeData, abs(sourcesink_profileIn(timeData,nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile)));
7084   
7085  set sourcesink_ProfileScaleError(nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile);
7086  sourcesink_ProfileScaleError(nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile)
7087      $(sourcesink_usesProfileScaling(nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile)
7088          and sourcesink_ProfileSum(nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile) = 0
7089          and sourcesink_ProfileAbsSum(nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile) > 0)
7090      = yes;
7091   
7092  abort$sum((nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile),
7093              sourcesink_ProfileScaleError(nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile)) "One or more profiles cannot be rescaled as their annual sum equals zero!"
7094   
7095  * calculate scaling factor for each type
7096  parameter sourcesink_scalingFactor(nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile);
7097  sourcesink_scalingFactor(nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile)
7098      $(sourcesink_ProfileSum(nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile)
7099          and sourcesink_usesProfileScaling(nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile))
7100      = sum(pc_sourcesink_annualSum$sameas(pc_sourcesink_profile,pc_sourcesink_annualSum),
7101          sourcesink_annualSumIn(nodesData,years,sourcesink_techs,commodity,pc_sourcesink_annualSum)
7102              / sourcesink_ProfileSum(nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile));
7103   
7104  * rescale profiles
7105  sourcesink_profileIn(timeData,nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile)
7106      $sourcesink_usesProfileScaling(nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile)
7107      = sourcesink_profileIn(timeData,nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile)
7108          * sourcesink_scalingFactor(nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile)
7109   
7110  * // ## Aggregation of profiles
7111  * // Profiles are aggregated based on the mapping from data nodes to model nodes.
7112   
7113  * ==== aggregation of profiles ====
7114  set sourcesink_usesProfileIn(nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile);
7115  option sourcesink_usesProfileIn < sourcesink_profileIn
7116   
7117  set sourcesink_usesProfile(nodesModel,years,sourcesink_techs,commodity,pc_sourcesink_profile);
7118  sourcesink_usesProfile(nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity,pc_sourcesink_profile)
7119      $sum(nodesData$(aggregateNodesModel(nodesData,nodesModelToCalc)
7120          and sourcesink_usesProfileIn(nodesData,yearsToCalc,sourcesink_techs,commodity,pc_sourcesink_profile)), 1)
7121      = yes;
7122   
7123  * aagregate time dimension
7124  parameter sourcesink_profileIn_aggTime(timeModel,nodesData,yearsToCalc,sourcesink_techs,commodity,pc_sourcesink_profile);
7125  sourcesink_profileIn_aggTime(timeModelToCalc,nodesData,yearsToCalc,sourcesink_techs,commodity,pc_sourcesink_profile)
7126    $sourcesink_usesProfileIn(nodesData,yearsToCalc,sourcesink_techs,commodity,pc_sourcesink_profile)
7127    = sum(timeData$timeMapping(timeData,timeModelToCalc),
7128            sourcesink_profileIn(timeData,nodesData,yearsToCalc,sourcesink_techs,commodity,pc_sourcesink_profile)
7129            / timeLength(timeModelToCalc));
7130  option clear = sourcesink_profileIn;
7131   
7132  * sum up absolute profiles
7133  parameter sourcesink_profile(timeModel,nodesModel,years,sourcesink_techs,commodity,pc_sourcesink_profile);
7134  sourcesink_profile(timeModelToCalc,nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity,pc_sourcesink_profile)
7135      $sourcesink_usesProfile(nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity,pc_sourcesink_profile)
7136      = sum(nodesData$aggregateNodesModel(nodesData,nodesModelToCalc),
7137              sourcesink_profileIn_aggTime(timeModelToCalc,nodesData,yearsToCalc,sourcesink_techs,commodity,pc_sourcesink_profile));
7138  option clear = sourcesink_profileIn_aggTime;
7139   
7140  set sourcesink_enabled(nodesModel,years,sourcesink_techs,commodity);
7141  option sourcesink_enabled < sourcesink_config;
7142   
7143   
7144  * ==== declaration of variables ====
7145  * // ## Bounding of variables
7146  * // Source-sink variables with either a lower, fixed, or upper profile are bounded to their respective profiles given by the input parameters.
7147   
7148  sourcesink_flow.lo(timeModelToCalc,nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity)
7149      $( sourcesink_enabled(nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity)
7150          and sourcesink_config(nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity,"usesLowerProfile") = 1
7151          and sourcesink_profile(timeModelToCalc,nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity,"lower") > -inf )
7152      = sourcesink_profile(timeModelToCalc,nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity,"lower");
7153   
7154  sourcesink_flow.up(timeModelToCalc,nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity)
7155      $( sourcesink_enabled(nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity)
7156          and sourcesink_config(nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity,"usesUpperProfile") = 1
7157          and sourcesink_profile(timeModelToCalc,nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity,"upper") < inf )
7158      = sourcesink_profile(timeModelToCalc,nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity,"upper");
7159   
7160  sourcesink_flow.fx(timeModelToCalc,nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity)
7161      $( sourcesink_enabled(nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity)
7162          and sourcesink_config(nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity,"usesFixedProfile") = 1 )
7163      = sourcesink_profile(timeModelToCalc,nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity,"fixed");
7164   
7165  option clear = sourcesink_profile;
7166   
7167   
7168  * ==== equation definition ====
7169  * // ## Equations
7170  equations
7171  Eq_sourcesink_useFixedSum(nodesModel,years,sourcesink_techs,commodity
7172      ) "Fixes the annual sum from sources / to sinks"
7173  Eq_sourcesink_useLowerSum(nodesModel,years,sourcesink_techs,commodity
7174      ) "Limits the lower sum from sources / to sinks"
7175  Eq_sourcesink_useUpperSum(nodesModel,years,sourcesink_techs,commodity
7176      ) "Limits the upper sum from sources / to sinks"
7177    ;
7178   
7179  * // ### Fixed annual sums for sources and sinks
7180  * // Ensures that the sources and sinks with annual sums given as fixed limits are balanced.
7181  * // {Eq_sourcesink_useFixedSum}
7182  Eq_sourcesink_useFixedSum(nodesModelSel,yearsSel,sourcesink_techs,commodity)
7183      $( sourcesink_enabled(nodesModelSel,yearsSel,sourcesink_techs,commodity)
7184          and sourcesink_config(nodesModelSel,yearsSel,sourcesink_techs,commodity,"usesFixedSum") = 1 )
7185      ..
7186      sum(timeModelSel,
7187          sourcesink_flow(timeModelSel,nodesModelSel,yearsSel,sourcesink_techs,commodity))
7188      =e=
7189      sourcesink_annualSum(nodesModelSel,yearsSel,sourcesink_techs,commodity,"fixed")
7190      ;
7191   
7192  * // ### Lower annual sums for sources and sinks
7193  * // Ensures that the sources and sinks with annual sums given as lower limits are balanced.
7194  * // {Eq_sourcesink_useLowerSum}
7195  Eq_sourcesink_useLowerSum(nodesModelSel,yearsSel,sourcesink_techs,commodity)
7196      $( sourcesink_enabled(nodesModelSel,yearsSel,sourcesink_techs,commodity)
7197          and sourcesink_config(nodesModelSel,yearsSel,sourcesink_techs,commodity,"usesLowerSum") = 1
7198          and sourcesink_annualSum(nodesModelSel,yearsSel,sourcesink_techs,commodity,"lower") > -inf )
7199      ..
7200      sum(timeModelSel,
7201          sourcesink_flow(timeModelSel,nodesModelSel,yearsSel,sourcesink_techs,commodity))
7202      =g=
7203      sourcesink_annualSum(nodesModelSel,yearsSel,sourcesink_techs,commodity,"lower")
7204      ;
7205   
7206  * // ### Upper annual sums for sources and sinks
7207  * // Ensures that the sources and sinks with annual sums given as upper limits are balanced.
7208  * // {Eq_sourcesink_useUpperSum}
7209  Eq_sourcesink_useUpperSum(nodesModelSel,yearsSel,sourcesink_techs,commodity)
7210      $( sourcesink_enabled(nodesModelSel,yearsSel,sourcesink_techs,commodity)
7211          and sourcesink_config(nodesModelSel,yearsSel,sourcesink_techs,commodity,"usesUpperSum") = 1
7212          and sourcesink_annualSum(nodesModelSel,yearsSel,sourcesink_techs,commodity,"upper") < inf )
7213      ..
7214      sum(timeModelSel,
7215          sourcesink_flow(timeModelSel,nodesModelSel,yearsSel,sourcesink_techs,commodity))
7216      =l=
7217      sourcesink_annualSum(nodesModelSel,yearsSel,sourcesink_techs,commodity,"upper")
7218      ;
7219   
7220   
7221  * ==== model definition ====
7222   
7223  Model M_sourcesink
7224  /
7225    Eq_sourcesink_useFixedSum
7226    Eq_sourcesink_useLowerSum
7227    Eq_sourcesink_useUpperSum
7228  /;
INCLUDE    C:\Local\REMix\framework\remix\framework\model\source\core\balance.gms
7230  * SPDX-FileCopyrightText: Copyright (c) 2023 German Aerospace Center (DLR)
7231  * SPDX-License-Identifier: BSD-3-Clause
7232   
7233  * // # balance
7234  * // The equations in this file describe the commodity balancing in the model.
7235   
7236  Equations
7237    Eq_balance_commodities(timeModel,nodesModel,years,commodity
7238      ) "Balance for each commodity used in each time step, region, and year";
7239   
7240   
7241  * ==== calculation of mappings ====
7242   
7243  set balance_techComm(techs,commodity);
7244  balance_techComm(converter_techs(techs),commodity)
7245      $sum((vintage,activity)$converter_coefficient(converter_techs,vintage,activity,commodity,"coefficient"), 1) = yes;
7246  balance_techComm(storage_techs(techs),commodity)
7247      $sum((vintage)$storage_sizeParam(storage_techs,vintage,commodity,"size"), 1) = yes;
7248  balance_techComm(transfer_techs(techs),commodity)
7249      $sum((vintage)$transfer_coefficient(transfer_techs,vintage,commodity,"coefficient"), 1) = yes;
7250  balance_techComm(sourcesink_techs(techs),commodity)
7251      $sum((nodesModelToCalc,yearsToCalc)$sourcesink_enabled(nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity), 1) = yes;
7252   
7253  set balance_usedConverter(nodesModel,years,commodity);
7254  set balance_usedStorage(nodesModel,years,commodity);
7255  set balance_usedTransfer(nodesModel,years,commodity);
7256  set balance_usedSourceSink(nodesModel,years,commodity);
7257  set balance_usedBalance(nodesModel,years,commodity);
7258   
7259  balance_usedConverter(nodesModel,years,commodity)
7260      = sum ((converter_techs,vintage,activity)
7261              $( converter_coefficient(converter_techs,vintage,activity,commodity,"coefficient") <> 0
7262                  and converter_usedTech(nodesModel,years,converter_techs,vintage) ), 1);
7263   
7264  balance_usedStorage(nodesModel,years,commodity)
7265      = sum ((storage_techs,vintage,activity)
7266              $(storage_sizeParam(storage_techs,vintage,commodity,"size") <> 0
7267                  and storage_usedTech(nodesModel,years,storage_techs,vintage) ), 1);
7268   
7269  balance_usedTransfer(nodesModel,years,commodity)
7270      = sum ((linksModel,transfer_techs,vintage)
7271              $(transfer_coefficient(transfer_techs,vintage,commodity,"coefficient") <> 0
7272                  and transfer_incidenceModel(nodesModel,linksModel) <> 0), 1);
7273   
7274  option balance_usedSourceSink < sourcesink_enabled;
7275   
7276  balance_usedBalance(nodesModel,years,commodity)
7277      $(balance_usedConverter(nodesModel,years,commodity)
7278          or balance_usedStorage(nodesModel,years,commodity)
7279          or balance_usedTransfer(nodesModel,years,commodity)
7280          or balance_usedSourceSink(nodesModel,years,commodity) )
7281      = yes;
7282   
7283   
7284  * ==== equation definition ====
7285   
7286  * // ### Balance commodities
7287  * // Balancing of commodities for all model regions, time steps, and years
7288  * // {Eq_balance_commodities}
7289  Eq_balance_commodities(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,commodity)
7290      $balance_usedBalance(nodesModelSel,yearsSel,commodity)
7291      ..
7292  * converter
7293      sum((converter_techs,vintage,activity)
7294              $( converter_coefficientProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity,commodity) <> 0
7295                  AND converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage) ),
7296          converter_activity(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity)
7297              * converter_coefficientProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity,commodity)
7298              * timeLength(timeModelSel)
7299          + converter_unitsUsingActivity_MIP(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity)
7300              * converter_coefficient(converter_techs,vintage,activity,commodity,"constant")
7301              * timeLength(timeModelSel))
7302   
7303  * storages
7304      + sum((storage_techs,vintage)
7305              $( storage_sizeParam(storage_techs,vintage,commodity,"size") <> 0
7306                  and storage_usedTech(nodesModelSel,yearsSel,storage_techs,vintage) ),
7307          storage_level(timeModelToCalc--1,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
7308          - storage_level(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
7310          - storage_losses(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
7311          * timeLength(timeModelSel)
7313          )
7314   
7315  * transfer
7316      + sum((linksModel,transfer_techs,vintage)
7317              $(transfer_usedTech(linksModel,yearsSel,transfer_techs,vintage)
7318                  and linksModelToCalc(linksModel)),
7319          (   transfer_flowAlong(timeModelSel,linksModel,yearsSel,transfer_techs,vintage)
7320                  $(transfer_incidenceModel(nodesModelSel,linksModel) > 0)
7321            + transfer_flowAgainst(timeModelSel,linksModel,yearsSel,transfer_techs,vintage)
7322                  $(transfer_incidenceModel(nodesModelSel,linksModel) < 0) )
7323          * transfer_coefficient(transfer_techs,vintage,commodity,"coefficient")
7324          * timeLength(timeModelSel))
7325   
7326      - sum((linksModel,transfer_techs,vintage)
7327              $(transfer_usedTech(linksModel,yearsSel,transfer_techs,vintage)
7328                  and linksModelToCalc(linksModel)),
7329          (   transfer_flowAlong(timeModelSel,linksModel,yearsSel,transfer_techs,vintage)
7330                  $(transfer_incidenceModel(nodesModelSel,linksModel) < 0)
7331            + transfer_flowAgainst(timeModelSel,linksModel,yearsSel,transfer_techs,vintage)
7332                  $(transfer_incidenceModel(nodesModelSel,linksModel) > 0) )
7333          * transfer_coefficient(transfer_techs,vintage,commodity,"coefficient")
7334          * timeLength(timeModelSel))
7335   
7336      + 0.5 * sum((linksModel,transfer_techs,vintage)
7337              $(transfer_usedTech(linksModel,yearsSel,transfer_techs,vintage)
7338                  AND linksModelToCalc(linksModel)),
7339          (   transfer_flowAlong(timeModelSel,linksModel,yearsSel,transfer_techs,vintage)
7340                  $(transfer_incidenceModel(nodesModelSel,linksModel) <> 0)
7341            + transfer_flowAgainst(timeModelSel,linksModel,yearsSel,transfer_techs,vintage)
7342                  $(transfer_incidenceModel(nodesModelSel,linksModel) <> 0) )
7343          * timeLength(timeModelSel)
7344          * ( transfer_coefPerFlow(transfer_techs,vintage,commodity,"coefPerFlow")
7345              + sum(link_types,
7346                  transfer_coefPerLength(transfer_techs,vintage,commodity,link_types,"coefPerLength")
7347                  * transfer_lengthParam(linksModel,link_types,"length"))))
7348   
7349  * sourcesink
7350      + sum((sourcesink_techs)
7351              $sourcesink_enabled(nodesModelSel,yearsSel,sourcesink_techs,commodity),
7352          sourcesink_flow(timeModelSel,nodesModelSel,yearsSel,sourcesink_techs,commodity)
7353          * timeLength(timeModelSel))
7354      =e=
7355      0;
7356   
7357   
7358  * ==== model definition ====
7359   
7360  Model M_balance
7361  /
7362    Eq_balance_commodities
7363  /;
7364   
INCLUDE    C:\Local\REMix\framework\remix\framework\model\source\accounting\equations.gms
7366  * SPDX-FileCopyrightText: Copyright (c) 2023 German Aerospace Center (DLR)
7367  * SPDX-License-Identifier: BSD-3-Clause
7368   
7369  * // # accounting_equations
7370   
7371  * ==== declaration of variables ====
7372   
7373  variables
7374  accounting_indicator(accNodesModel,accYears,indicator)
7375  accounting_indicator_links(linksModel,years,indicator)
7376  accounting_objective
7377    ;
7378   
7379   
7380  * ==== definition of variables ====
7381   
7382  * set the variable levels to be fixed for years before the optimization years
7383  accounting_indicator.l(accNodesModel,accYears,indicator)
7384      $activeIndicators(accNodesModel,accYears,indicator)
7385      = 0;
7386   
7387  accounting_indicator.lo(accNodesModel,accYears,indicator)
7388      $(accounting_indicatorBounds(accNodesModel,accYears,indicator,"useLower") <> 0 )
7389      = accounting_indicatorBounds(accNodesModel,accYears,indicator,"lowerValue");
7390   
7391  accounting_indicator.up(accNodesModel,accYears,indicator)
7392      $(accounting_indicatorBounds(accNodesModel,accYears,indicator,"useUpper") <> 0 )
7393      = accounting_indicatorBounds(accNodesModel,accYears,indicator,"upperValue");
7394   
7395  accounting_indicator.fx(accNodesModel,accYears,indicator)
7396      $(accounting_indicatorBounds(accNodesModel,accYears,indicator,"useFixed") <> 0 )
7397      = accounting_indicatorBounds(accNodesModel,accYears,indicator,"fixedValue");
7398   
7399   
7400  accounting_indicator_links.lo(linksModelToCalc,yearsToCalc,indicator)
7401      $(accounting_indicatorBounds_links(linksModelToCalc,yearsToCalc,indicator,"useLower") <> 0 )
7402      = accounting_indicatorBounds_links(linksModelToCalc,yearsToCalc,indicator,"lowerValue");
7403   
7404  accounting_indicator_links.up(linksModelToCalc,yearsToCalc,indicator)
7405      $(accounting_indicatorBounds_links(linksModelToCalc,yearsToCalc,indicator,"useUpper") <> 0 )
7406      = accounting_indicatorBounds_links(linksModelToCalc,yearsToCalc,indicator,"upperValue");
7407   
7408  accounting_indicator_links.fx(linksModelToCalc,yearsToCalc,indicator)
7409      $(accounting_indicatorBounds_links(linksModelToCalc,yearsToCalc,indicator,"useFixed") <> 0 )
7410      = accounting_indicatorBounds_links(linksModelToCalc,yearsToCalc,indicator,"fixedValue");
7411   
7412   
7413  * ==== declaration of equations ====
7414   
7415  equations
7416  Eq_accounting_indicatorCalc(accNodesModel,accYears,indicator
7417      ) "Calculates the level of an indicator per accounting region"
7418  Eq_accounting_indicatorCalc_links(linksModel,years,indicator
7419      ) "Calculates the level of an indicator per model link"
7420  Eq_accounting_objective "Calculates the objective value based on the specified indicator"
7421    ;
7422   
7423   
7424  * ==== equations definition ====
7425  * // ## Equations
7426  * // ### Accounting Indicator Calculation
7427  * // Calculates the indicators for each model node for converters, sources and sinks, transfer, storage and variable indicators.
7428  * // {Eq_accounting_indicatorCalc}
7429  Eq_accounting_indicatorCalc(accNodesModel,accYearsSel(accYears),indicator)
7430      $activeIndicators(accNodesModel,accYears,indicator)
7431      ..
7432      accounting_indicator(accNodesModel,accYears,indicator)
7433      =e=
7434   
7435  * == variable indicators ==
7436      sum((accNodesModel_a,accYears_a,indicator_a)
7437          $(compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
7438              and variableIndicators(accNodesModel_a,accYears_a,indicator_a)),
7439          compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
7440          * accounting_indicator(accNodesModel_a,accYears_a,indicator_a))
7441   
7442  * == converters ==
7443      + sum ((accNodesModel_a,nodesModelSel,accYears_a,yearsSel,indicator_a)
7444              $( compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
7445                  and sameas(nodesModelSel,accNodesModel_a) and sameas(yearsSel,accYears_a)),
7446          compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
7447          *
7448          ( sum ((converter_techs,vintage)
7449                      $(converter_availTech(nodesModelSel,yearsSel,converter_techs,vintage)
7450                          and accounting_converterUnits(indicator_a,nodesModelSel,converter_techs,vintage,"useAnnuity") = 0),
7451              converter_unitsBuild(nodesModelSel,yearsSel,converter_techs,vintage)
7452              * accounting_converterUnits(indicator_a,nodesModelSel,converter_techs,vintage,"perUnitBuild"))
7453   
7454          + sum ((years_a,converter_techs,vintage)
7455                      $(converter_availTech(nodesModelSel,years_a,converter_techs,vintage)
7456                          and years_a.val < sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
7457                          and accounting_converterUnits(indicator_a,nodesModelSel,converter_techs,vintage,"useAnnuity") = 1
7458                          and years_a.val + accounting_converterUnits(indicator_a,nodesModelSel,converter_techs,vintage,"amorTime") > yearsSel.val
7459                          and years_a.val <= yearsSel.val ),
7460              converter_unitsBuild(nodesModelSel,years_a,converter_techs,vintage)
7461              * accounting_converterUnits(indicator_a,nodesModelSel,converter_techs,vintage,"perUnitBuild")
7462              * accounting_annuityFactor_converter(indicator_a,nodesModelSel,converter_techs,vintage) )
7463   
7464          + sum ((yearsToCalc,converter_techs,vintage)
7465                      $(converter_availTech(nodesModelSel,yearsToCalc,converter_techs,vintage)
7466                          and yearsToCalc.val >= sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
7467                          and accounting_converterUnits(indicator_a,nodesModelSel,converter_techs,vintage,"useAnnuity") = 1
7468                          and yearsToCalc.val + accounting_converterUnits(indicator_a,nodesModelSel,converter_techs,vintage,"amorTime") > yearsSel.val
7469                          and yearsToCalc.val <= yearsSel.val ),
7470              converter_unitsBuild(nodesModelSel,yearsToCalc,converter_techs,vintage)
7471              * accounting_converterUnits(indicator_a,nodesModelSel,converter_techs,vintage,"perUnitBuild")
7472              * accounting_annuityFactor_converter(indicator_a,nodesModelSel,converter_techs,vintage) )
7473   
7474          + sum ((converter_techs,vintage)
7475                      $converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage),
7476              converter_unitsDecom(nodesModelSel,yearsSel,converter_techs,vintage)
7477              * accounting_converterUnits(indicator_a,nodesModelSel,converter_techs,vintage,"perUnitDecom")
7478   
7479              + converter_unitsTotal(nodesModelSel,yearsSel,converter_techs,vintage)
7480              * accounting_converterUnits(indicator_a,nodesModelSel,converter_techs,vintage,"perUnitTotal") )
7481   
7482          + sum ((timeModelSel,converter_techs,vintage,activity)
7483                      $converter_usedTechAct(nodesModelSel,yearsSel,converter_techs,vintage,activity),
7484              converter_activity(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity)
7485              * timeLength(timeModelSel)
7486              * accounting_converterActivity(indicator_a,nodesModelSel,converter_techs,vintage,activity,"perActivity") )
7487   
7488          + sum ((timeModelSel,converter_techs,vintage)
7489                      $converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage),
7490              converter_unitStartups(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
7491              * accounting_converterStartup(indicator_a,nodesModelSel,converter_techs,vintage,"perStartup") )
7492   
7493          + sum ((timeModelSel,converter_techs,vintage)
7494                      $converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage),
7495              converter_rampPos(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
7496              * (accounting_converterStartup(indicator_a,nodesModelSel,converter_techs,vintage,"perRamp")
7497                 + accounting_converterStartup(indicator_a,nodesModelSel,converter_techs,vintage,"perRampPos"))
7498   
7499              + converter_rampNeg(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
7500              * (accounting_converterStartup(indicator_a,nodesModelSel,converter_techs,vintage,"perRamp")
7501                 + accounting_converterStartup(indicator_a,nodesModelSel,converter_techs,vintage,"perRampNeg")))
7502          )
7503      )
7504   
7505  * == storage ==
7506      + sum ((accNodesModel_a,nodesModelSel,accYears_a,yearsSel,indicator_a)
7507              $( compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
7508                  and sameas(nodesModelSel,accNodesModel_a) and sameas(yearsSel,accYears_a)),
7509          compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
7510          *
7511          ( sum ((storage_techs,vintage)
7512                      $(storage_availTech(nodesModelSel,yearsSel,storage_techs,vintage)
7513                          and accounting_storageUnits(indicator_a,nodesModelSel,storage_techs,vintage,"useAnnuity") = 0),
7514              storage_unitsBuild(nodesModelSel,yearsSel,storage_techs,vintage)
7515              * accounting_storageUnits(indicator_a,nodesModelSel,storage_techs,vintage,"perUnitBuild") )
7516   
7517          + sum ((years_a,storage_techs,vintage)
7518                      $(storage_availTech(nodesModelSel,years_a,storage_techs,vintage)
7519                          and years_a.val < sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
7520                          and accounting_storageUnits(indicator_a,nodesModelSel,storage_techs,vintage,"useAnnuity") = 1
7521                          and years_a.val + accounting_storageUnits(indicator_a,nodesModelSel,storage_techs,vintage,"amorTime") > yearsSel.val
7522                          and years_a.val <= yearsSel.val ),
7523              storage_unitsBuild(nodesModelSel,years_a,storage_techs,vintage)
7524              * accounting_storageUnits(indicator_a,nodesModelSel,storage_techs,vintage,"perUnitBuild")
7525              * accounting_annuityFactor_storage(indicator_a,nodesModelSel,storage_techs,vintage) )
7526   
7527          + sum ((yearsToCalc,storage_techs,vintage)
7528                      $(storage_availTech(nodesModelSel,yearsToCalc,storage_techs,vintage)
7529                          and yearsToCalc.val >= sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
7530                          and accounting_storageUnits(indicator_a,nodesModelSel,storage_techs,vintage,"useAnnuity") = 1
7531                          and yearsToCalc.val + accounting_storageUnits(indicator_a,nodesModelSel,storage_techs,vintage,"amorTime") > yearsSel.val
7532                          and yearsToCalc.val <= yearsSel.val ),
7533              storage_unitsBuild(nodesModelSel,yearsToCalc,storage_techs,vintage)
7534              * accounting_storageUnits(indicator_a,nodesModelSel,storage_techs,vintage,"perUnitBuild")
7535              * accounting_annuityFactor_storage(indicator_a,nodesModelSel,storage_techs,vintage) )
7536   
7537          + sum ((storage_techs,vintage)
7538                      $storage_usedTech(nodesModelSel,yearsSel,storage_techs,vintage),
7539              storage_unitsDecom(nodesModelSel,yearsSel,storage_techs,vintage)
7540              * accounting_storageUnits(indicator_a,nodesModelSel,storage_techs,vintage,"perUnitDecom")
7541   
7542              + storage_unitsTotal(nodesModelSel,yearsSel,storage_techs,vintage)
7543              * accounting_storageUnits(indicator_a,nodesModelSel,storage_techs,vintage,"perUnitTotal") )
7544          )
7545      )
7546   
7547   
7548  * == transfer ==
7549      + sum ((accNodesModel_a,nodesModelSel,accYears_a,yearsSel,indicator_a)
7550              $( compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
7551                  and sameas(nodesModelSel,accNodesModel_a) and sameas(yearsSel,accYears_a)),
7552          compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
7553          *
7554          ( sum ((linksModelToCalc,transfer_techs,vintage)
7555                      $(transfer_availTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
7556                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0
7557                          and accounting_transferLinks(indicator_a,linksModelToCalc,transfer_techs,vintage,"useAnnuity") = 0),
7558              0.5
7559              * transfer_linksBuild(linksModelToCalc,yearsSel,transfer_techs,vintage)
7560              * accounting_transferLinks(indicator_a,linksModelToCalc,transfer_techs,vintage,"perLinkBuild") )
7561   
7562          + sum ((linksModelToCalc,years_a,transfer_techs,vintage)
7563                      $(transfer_availTech(linksModelToCalc,years_a,transfer_techs,vintage)
7564                          and years_a.val < sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
7565                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0
7566                          and accounting_transferLinks(indicator_a,linksModelToCalc,transfer_techs,vintage,"useAnnuity") = 1
7567                          and years_a.val + accounting_transferLinks(indicator_a,linksModelToCalc,transfer_techs,vintage,"amorTime") > yearsSel.val
7568                          and years_a.val <= yearsSel.val ),
7569              0.5
7570              * transfer_linksBuild(linksModelToCalc,years_a,transfer_techs,vintage)
7571              * accounting_transferLinks(indicator_a,linksModelToCalc,transfer_techs,vintage,"perLinkBuild")
7572              * accounting_annuityFactor_transferLink(indicator_a,linksModelToCalc,transfer_techs,vintage) )
7573   
7574          + sum ((linksModelToCalc,yearsToCalc,transfer_techs,vintage)
7575                      $(transfer_availTech(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
7576                          and yearsToCalc.val >= sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
7577                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0
7578                          and accounting_transferLinks(indicator_a,linksModelToCalc,transfer_techs,vintage,"useAnnuity") = 1
7579                          and yearsToCalc.val + accounting_transferLinks(indicator_a,linksModelToCalc,transfer_techs,vintage,"amorTime") > yearsSel.val
7580                          and yearsToCalc.val <= yearsSel.val ),
7581              0.5
7582              * transfer_linksBuild(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
7583              * accounting_transferLinks(indicator_a,linksModelToCalc,transfer_techs,vintage,"perLinkBuild")
7584              * accounting_annuityFactor_transferLink(indicator_a,linksModelToCalc,transfer_techs,vintage) )
7585   
7586          + sum ((linksModelToCalc,transfer_techs,vintage,link_types)
7587                      $(transfer_availTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
7588                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0
7589                          and accounting_transferPerLength(indicator_a,linksModelToCalc,transfer_techs,vintage,link_types,"useAnnuity") = 0 ),
7590              0.5
7591              * transfer_linksBuild(linksModelToCalc,yearsSel,transfer_techs,vintage)
7592              * transfer_lengthParam(linksModelToCalc,link_types,"length")
7593              * accounting_transferPerLength(indicator_a,linksModelToCalc,transfer_techs,vintage,link_types,"perLengthBuild") )
7594   
7595          + sum ((linksModelToCalc,years_a,transfer_techs,vintage,link_types)
7596                      $(transfer_availTech(linksModelToCalc,years_a,transfer_techs,vintage)
7597                          and years_a.val < sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
7598                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0
7599                          and accounting_transferPerLength(indicator_a,linksModelToCalc,transfer_techs,vintage,link_types,"useAnnuity") = 1
7600                          and years_a.val + accounting_transferPerLength(indicator_a,linksModelToCalc,transfer_techs,vintage,link_types,"amorTime") > yearsSel.val
7601                          and years_a.val <= yearsSel.val ),
7602              0.5
7603              * transfer_linksBuild(linksModelToCalc,years_a,transfer_techs,vintage)
7604              * transfer_lengthParam(linksModelToCalc,link_types,"length")
7605              * accounting_transferPerLength(indicator_a,linksModelToCalc,transfer_techs,vintage,link_types,"perLengthBuild")
7606              * accounting_annuityFactor_transferDistance(indicator_a,linksModelToCalc,transfer_techs,vintage,link_types) )
7607   
7608          + sum ((linksModelToCalc,yearsToCalc,transfer_techs,vintage,link_types)
7609                      $(transfer_availTech(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
7610                          and yearsToCalc.val >= sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
7611                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0
7612                          and accounting_transferPerLength(indicator_a,linksModelToCalc,transfer_techs,vintage,link_types,"useAnnuity") = 1
7613                          and yearsToCalc.val + accounting_transferPerLength(indicator_a,linksModelToCalc,transfer_techs,vintage,link_types,"amorTime") > yearsSel.val
7614                          and yearsToCalc.val <= yearsSel.val ),
7615              0.5
7616              * transfer_linksBuild(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
7617              * transfer_lengthParam(linksModelToCalc,link_types,"length")
7618              * accounting_transferPerLength(indicator_a,linksModelToCalc,transfer_techs,vintage,link_types,"perLengthBuild")
7619              * accounting_annuityFactor_transferDistance(indicator_a,linksModelToCalc,transfer_techs,vintage,link_types) )
7620   
7621          + sum ((linksModelToCalc,transfer_techs,vintage)
7622                      $(transfer_usedTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
7623                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0 ),
7624              0.5
7625              * transfer_linksDecom(linksModelToCalc,yearsSel,transfer_techs,vintage)
7626              * accounting_transferLinks(indicator_a,linksModelToCalc,transfer_techs,vintage,"perLinkDecom")
7627   
7628              + 0.5
7629              * transfer_linksTotal(linksModelToCalc,yearsSel,transfer_techs,vintage)
7630              * accounting_transferLinks(indicator_a,linksModelToCalc,transfer_techs,vintage,"perLinkTotal")
7631   
7632              + 0.5
7633              * sum (link_types,
7634                  transfer_linksDecom(linksModelToCalc,yearsSel,transfer_techs,vintage)
7635                  * transfer_lengthParam(linksModelToCalc,link_types,"length")
7636                  * accounting_transferPerLength(indicator_a,linksModelToCalc,transfer_techs,vintage,link_types,"perLengthDecom")
7637   
7638                  + transfer_linksTotal(linksModelToCalc,yearsSel,transfer_techs,vintage)
7639                  * transfer_lengthParam(linksModelToCalc,link_types,"length")
7640                  * accounting_transferPerLength(indicator_a,linksModelToCalc,transfer_techs,vintage,link_types,"perLengthTotal"))
7641   
7642              + 0.5
7643              * sum (timeModelSel,
7644                  transfer_flowAlong(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
7645                  * timeLength(timeModelSel)
7646                  * ( accounting_transferLinks(indicator_a,linksModelToCalc,transfer_techs,vintage,"perFlow")
7647                      + accounting_transferLinks(indicator_a,linksModelToCalc,transfer_techs,vintage,"perFlowAlong"))
7648   
7649                  + transfer_flowAgainst(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
7650                  * timeLength(timeModelSel)
7651                  * ( accounting_transferLinks(indicator_a,linksModelToCalc,transfer_techs,vintage,"perFlow")
7652                      + accounting_transferLinks(indicator_a,linksModelToCalc,transfer_techs,vintage,"perFlowAgainst")))
7653   
7654              + 0.5
7655              * sum ((timeModelSel, link_types),
7656                  transfer_flowAlong(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
7657                  * timeLength(timeModelSel)
7658                  * transfer_lengthParam(linksModelToCalc,link_types,"length")
7659                  * (accounting_transferPerLength(indicator_a,linksModelToCalc,transfer_techs,vintage,link_types,"perFlow")
7660                      + accounting_transferPerLength(indicator_a,linksModelToCalc,transfer_techs,vintage,link_types,"perFlowAlong"))
7661   
7662                  + transfer_flowAgainst(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
7663                  * timeLength(timeModelSel)
7664                  * transfer_lengthParam(linksModelToCalc,link_types,"length")
7665                  * (accounting_transferPerLength(indicator_a,linksModelToCalc,transfer_techs,vintage,link_types,"perFlow")
7666                      + accounting_transferPerLength(indicator_a,linksModelToCalc,transfer_techs,vintage,link_types,"perFlowAgainst")))
7667              )
7668          )
7669      )
7670   
7671   
7672  * == sources / sinks ==
7673      + sum ((accNodesModel_a,nodesModelSel,accYears_a,yearsSel,indicator_a)
7674              $( compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
7675                  and sameas(nodesModelSel,accNodesModel_a) and sameas(yearsSel,accYears_a)),
7676          compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
7677          *
7678          sum ((timeModelSel,sourcesink_techs,commodity)
7679                  $sourcesink_enabled(nodesModelSel,yearsSel,sourcesink_techs,commodity),
7680              sourcesink_flow(timeModelSel,nodesModelSel,yearsSel,sourcesink_techs,commodity)
7681              * timeLength(timeModelSel)
7682              * accounting_sourcesinkFlow(indicator_a,nodesModelSel,yearsSel,sourcesink_techs,commodity,"perFlow") )
7683      );
7684   
7685  * // ### Accounting Indicator Calculation Links
7686  * // Calculates the indicators for each transfer for converters, sources and sinks, transfer, storage and variable indicators.
7687  * // {Eq_accounting_indicatorCalc_links}
7688  Eq_accounting_indicatorCalc_links(linksModelToCalc,yearsSel,indicator)
7689      $activeIndicators_links(linksModelToCalc,yearsSel,indicator)
7690      ..
7691      accounting_indicator_links(linksModelToCalc,yearsSel,indicator)
7692      =e=
7693      sum ((transfer_techs,vintage)
7694                  $(transfer_availTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
7695                      and accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"useAnnuity") = 0),
7696          transfer_linksBuild(linksModelToCalc,yearsSel,transfer_techs,vintage)
7697          * accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"perLinkBuild") )
7698   
7699      + sum ((years_a,transfer_techs,vintage)
7700                  $(transfer_availTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
7701                      and accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"useAnnuity") = 1
7702                      and years_a.val + accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"amorTime") > yearsSel.val
7703                      and years_a.val <= yearsSel.val ),
7704          transfer_linksBuild(linksModelToCalc,years_a,transfer_techs,vintage)
7705          * accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"perLinkBuild")
7706          * accounting_annuityFactor_transferLink(indicator,linksModelToCalc,transfer_techs,vintage) )
7707   
7708      + sum ((transfer_techs,vintage,link_types)
7709                  $(transfer_availTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
7710                      and accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"useAnnuity") = 0 ),
7711          transfer_linksBuild(linksModelToCalc,yearsSel,transfer_techs,vintage)
7712          * transfer_lengthParam(linksModelToCalc,link_types,"length")
7713          * accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"perLengthBuild") )
7714   
7715      + sum ((years_a,transfer_techs,vintage,link_types)
7716                  $(transfer_availTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
7717                      and accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"useAnnuity") = 1
7718                      and years_a.val + accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"amorTime") > yearsSel.val
7719                      and years_a.val <= yearsSel.val ),
7720          transfer_linksBuild(linksModelToCalc,years_a,transfer_techs,vintage)
7721          * transfer_lengthParam(linksModelToCalc,link_types,"length")
7722          * accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"perLengthBuild")
7723          * accounting_annuityFactor_transferDistance(indicator,linksModelToCalc,transfer_techs,vintage,link_types) )
7724   
7725      + sum ((transfer_techs,vintage)
7726                  $(transfer_usedTech(linksModelToCalc,yearsSel,transfer_techs,vintage)),
7727          transfer_linksDecom(linksModelToCalc,yearsSel,transfer_techs,vintage)
7728          * accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"perLinkDecom")
7729   
7730          + transfer_linksTotal(linksModelToCalc,yearsSel,transfer_techs,vintage)
7731          * accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"perLinkTotal")
7732   
7733          + sum (link_types,
7734              transfer_linksDecom(linksModelToCalc,yearsSel,transfer_techs,vintage)
7735              * transfer_lengthParam(linksModelToCalc,link_types,"length")
7736              * accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"perLengthDecom")
7737   
7738              + transfer_linksTotal(linksModelToCalc,yearsSel,transfer_techs,vintage)
7739              * transfer_lengthParam(linksModelToCalc,link_types,"length")
7740              * accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"perLengthTotal"))
7741   
7742          + sum (timeModelSel,
7743              transfer_flowAlong(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
7744              * timeLength(timeModelSel)
7745              * ( accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"perFlow")
7746                  + accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"perFlowAlong"))
7747   
7748              + transfer_flowAgainst(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
7749              * timeLength(timeModelSel)
7750              * ( accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"perFlow")
7751                  + accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"perFlowAgainst")))
7752   
7753          + sum ((timeModelSel, link_types),
7754              transfer_flowAlong(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
7755              * timeLength(timeModelSel)
7756              * transfer_lengthParam(linksModelToCalc,link_types,"length")
7757              * (accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"perFlow")
7758                  + accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"perFlowAlong"))
7759   
7760              + transfer_flowAgainst(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
7761              * timeLength(timeModelSel)
7762              * transfer_lengthParam(linksModelToCalc,link_types,"length")
7763              * (accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"perFlow")
7764                  + accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"perFlowAgainst")))
7765          );
7766   
7767  * // ### Accounting Objective
7768  * // Calculates the indicators for the objective.
7769  * // {Eq_accounting_objective}
7770  Eq_accounting_objective
7771      ..
7772      accounting_objective
7773      =e=
7774      sum ((accNodesModel,accYears,indicator)
7775              $(accounting_indicatorBounds(accNodesModel,accYears,indicator,"obj") <> 0 ),
7776          accounting_indicator(accNodesModel,accYears,indicator) )
7777   
7778   
7779  * ==== model definition ====
7780   
7781  Model M_accounting
7782  /
7783  Eq_accounting_indicatorCalc_links
7784  Eq_accounting_indicatorCalc
7785  Eq_accounting_objective
7786  /;
INCLUDE    C:\Local\REMix\framework\remix\framework\model\source\optiframe.gms
7788  * SPDX-FileCopyrightText: Copyright (c) 2023 German Aerospace Center (DLR)
7789  * SPDX-License-Identifier: BSD-3-Clause
7790   
7791  * ==== optimization frames ====
7793   
7794  * mapping from optimization frame to years
7796  set optiframe / of1 * of4 /;
7797  set optiframeToCalc(optiframe);
7798   
7800  set map_optiframe(optiframe,years) / of1 . #yearsToCalc /;
7802   
7804   
7805  option optiframeToCalc < map_optiframe;
7806   
7807  Model remix /
7808    M_converter
7809    M_storage
7810    M_transfer
7811    M_sourcesink
7812    M_balance
7813    M_accounting
7814  /;
7815   
7816   
7817  * ==== include methods  ====
7818   
7819  * check if the method is valid
7825   
7826   
7827  * if method is pips write the checkanno tool
INCLUDE    C:\Local\REMix\framework\remix\framework\model\source\methods\checkanno.gms
7829  * SPDX-FileCopyrightText: Copyright (c) 2023 German Aerospace Center (DLR)
7830  * SPDX-License-Identifier: BSD-3-Clause
7831   
7834   
7837   
7838  * if method is pips generate the annotated gdx file
INCLUDE    C:\Local\REMix\framework\remix\framework\model\source\methods\pips.gms
7840  * SPDX-FileCopyrightText: Copyright (c) 2023 German Aerospace Center (DLR)
7841  * SPDX-License-Identifier: BSD-3-Clause
7842   
7846   
7847  * if method is solve run the model with commercial solvers
INCLUDE    C:\Local\REMix\framework\remix\framework\model\source\methods\solve.gms
7849  * SPDX-FileCopyrightText: Copyright (c) 2023 German Aerospace Center (DLR)
7850  * SPDX-License-Identifier: BSD-3-Clause
7851   
7854   
7856   
7857  * ==== global options ====
7864   
7865  * ==== general solver options ====
7875   
7876  * ==== cplex options ====
7885   
7886  * ==== copt options ====
7890   
7891  * ==== debug options ====
7894   
7895   
7896  * ==== setup optimization ====
7897  if ((sum(nodesModelToCalc, 1)>40 or sum(timeModelToCalc, 1)>50) and not 0,
7898     option limRow=0, limCol=0, solPrint=off;
7899  else
7900     option limRow=100000, limCol=100000, solPrint=on;
7901  );
7902   
7904   
7905  option mip = cplex;
7906  option reslim = 604800;
7907  option optcr = 1e-3;
7908  remix.threads=4;
7909  remix.optFile = 1;
7910  remix.solveLink = 0;
7911  remix.holdFixed = 1;
7912   
7913   
7914  * ==== configure optionfiles ====
7915   
7917  file opt / "cplex.opt" /;
7918  put opt;
7920  put "rerun no" /;
7922  put "lpmethod 4" /;
7924  put "barorder 0" /;
7925  put "preind 1" /;
7926  put "scaind 0" /;
7927  put "predual -1" /;
7928  put "baralg 0" /;
7929  put "barstartalg 1" /;
7930  put "barepcomp 1e-6" /;
7931  put "solutiontype 2" /;
7932  put "startalg 4" /;
7933  put "epgap 1e-3" /;
7934  put "quality 1" /;
7935  put "barcolnz 0" /;
7936  put "threads 4" /;
7937  put "parallelmode 1" /;
7940  putclose;
7941   
7943   
7944   
7945  * ==== solve the problem ====
7946   
7947  loop ( optiframeToCalc,
7948      yearsSel(years) = no;
7949      yearsSel(years)$map_optiframe(optiframeToCalc,years) = yes;
7950      yearsToFix(years) = no;
7951      yearsToFix(years)$(years.val < smin(years_a$yearsSel(years_a), years_a.val)) = yes;
7952      accYearsSel(accYears) = no;
7953      accYearsSel("horizon") = yes;
7954      accYearsSel(accYears)$(sum(yearsSel$sameas(accYears,yearsSel), 1)) = yes;
7955      accYearsToFix(accYears) = no;
7956      accYearsToFix(accYears)$(sum(years$(sameas(years,accYears) and years.val < smin(years_a$yearsSel(years_a), years_a.val)), 1) > 0) = yes;
7957      timeModelSel(timeModel) = no;
7958      timeModelSel(timeModel)$timeModelToCalc(timeModel) = yes;
7959      nodesModelSel(nodesModel) = no;
7960      nodesModelSel(nodesModel)$nodesModelToCalc(nodesModel) = yes;
7961   
7962  * Fix decision for years previously optimized in case of myopic or foresight
7963      converter_unitsDelta(nodesModelToCalc,yearsToFix,converter_techs)
7964          $(sum(yearsToCalc$sameas(yearsToFix, yearsToCalc), 1))
7965          = sum(vintage, converter_unitsTotal.l(nodesModelToCalc,yearsToFix,converter_techs,vintage))
7966              - converter_capacityParam(nodesModelToCalc,yearsToFix,converter_techs,"unitsUpperLimit");
7967      converter_unitsDelta(nodesModelToCalc,yearsToFix,converter_techs)
7968          $(converter_unitsDelta(nodesModelToCalc,yearsToFix,converter_techs) < 0) = 0;
7969   
7970      converter_unitsBuild.l(nodesModelToCalc,yearsToFix,converter_techs,vintage)
7971          $converter_availTech(nodesModelToCalc,yearsToFix,converter_techs,vintage)
7972          = converter_unitsBuild.l(nodesModelToCalc,yearsToFix,converter_techs,vintage)
7973              - converter_unitsDelta(nodesModelToCalc,yearsToFix,converter_techs);
7974   
7975      converter_unitsBuild.l(nodesModelToCalc,yearsToFix,converter_techs,vintage)
7976          $(converter_unitsBuild.l(nodesModelToCalc,yearsToFix,converter_techs,vintage) < 0) = 0;
7977      converter_unitsBuild.fx(nodesModelToCalc,yearsToFix,converter_techs,vintage)
7978          = converter_unitsBuild.l(nodesModelToCalc,yearsToFix,converter_techs,vintage);
7979      converter_unitsDecom.l(nodesModelToCalc,yearsToFix,converter_techs,vintage)
7980          $(converter_unitsDecom.l(nodesModelToCalc,yearsToFix,converter_techs,vintage) < 0) = 0;
7981      converter_unitsDecom.fx(nodesModelToCalc,yearsToFix,converter_techs,vintage)
7982          = converter_unitsDecom.l(nodesModelToCalc,yearsToFix,converter_techs,vintage);
7983      converter_unitsTotal.fx(nodesModelToCalc,yearsToFix,converter_techs,vintage)
7984          = converter_unitsTotal.l(nodesModelToCalc,yearsToFix,converter_techs,vintage);
7985   
7986   
7987      storage_unitsDelta(nodesModelToCalc,yearsToFix,storage_techs)
7988          $(sum(yearsToCalc$sameas(yearsToFix, yearsToCalc), 1))
7989          = sum(vintage, storage_unitsTotal.l(nodesModelToCalc,yearsToFix,storage_techs,vintage))
7990              - storage_reservoirParam(nodesModelToCalc,yearsToFix,storage_techs,"unitsUpperLimit");
7991      storage_unitsDelta(nodesModelToCalc,yearsToFix,storage_techs)
7992          $(storage_unitsDelta(nodesModelToCalc,yearsToFix,storage_techs) < 0) = 0;
7993   
7994      storage_unitsBuild.l(nodesModelToCalc,yearsToFix,storage_techs,vintage)
7995          $storage_availTech(nodesModelToCalc,yearsToFix,storage_techs,vintage)
7996          = storage_unitsBuild.l(nodesModelToCalc,yearsToFix,storage_techs,vintage)
7997              - storage_unitsDelta(nodesModelToCalc,yearsToFix,storage_techs);
7998   
7999      storage_unitsBuild.l(nodesModelToCalc,yearsToFix,storage_techs,vintage)
8000          $(storage_unitsBuild.l(nodesModelToCalc,yearsToFix,storage_techs,vintage) < 0) = 0;
8001      storage_unitsBuild.fx(nodesModelToCalc,yearsToFix,storage_techs,vintage)
8002          = storage_unitsBuild.l(nodesModelToCalc,yearsToFix,storage_techs,vintage);
8003      storage_unitsDecom.l(nodesModelToCalc,yearsToFix,storage_techs,vintage)
8004          $(storage_unitsDecom.l(nodesModelToCalc,yearsToFix,storage_techs,vintage) < 0) = 0;
8005      storage_unitsDecom.fx(nodesModelToCalc,yearsToFix,storage_techs,vintage)
8006          = storage_unitsDecom.l(nodesModelToCalc,yearsToFix,storage_techs,vintage);
8007      storage_unitsTotal.fx(nodesModelToCalc,yearsToFix,storage_techs,vintage)
8008          = storage_unitsTotal.l(nodesModelToCalc,yearsToFix,storage_techs,vintage);
8009   
8010   
8011      transfer_linksDelta(linksModelToCalc,yearsToFix,transfer_techs)
8012          $(sum(yearsToCalc$sameas(yearsToFix, yearsToCalc), 1))
8013          = sum(vintage, transfer_linksTotal.l(linksModelToCalc,yearsToFix,transfer_techs,vintage))
8014              - transfer_linksParam(linksModelToCalc,yearsToFix,transfer_techs,"linksUpperLimit");
8015      transfer_linksDelta(linksModelToCalc,yearsToFix,transfer_techs)
8016          $(transfer_linksDelta(linksModelToCalc,yearsToFix,transfer_techs) < 0) = 0;
8017   
8018      transfer_linksBuild.l(linksModelToCalc,yearsToFix,transfer_techs,vintage)
8019          $transfer_availTech(linksModelToCalc,yearsToFix,transfer_techs,vintage)
8020          = transfer_linksBuild.l(linksModelToCalc,yearsToFix,transfer_techs,vintage)
8021              - transfer_linksDelta(linksModelToCalc,yearsToFix,transfer_techs);
8022   
8023      transfer_linksBuild.l(linksModelToCalc,yearsToFix,transfer_techs,vintage)
8024          $(transfer_linksBuild.l(linksModelToCalc,yearsToFix,transfer_techs,vintage) < 0) = 0;
8025      transfer_linksBuild.fx(linksModelToCalc,yearsToFix,transfer_techs,vintage)
8026          = transfer_linksBuild.l(linksModelToCalc,yearsToFix,transfer_techs,vintage);
8027      transfer_linksDecom.l(linksModelToCalc,yearsToFix,transfer_techs,vintage)
8028          $(transfer_linksDecom.l(linksModelToCalc,yearsToFix,transfer_techs,vintage) < 0) = 0;
8029      transfer_linksDecom.fx(linksModelToCalc,yearsToFix,transfer_techs,vintage)
8030          = transfer_linksDecom.l(linksModelToCalc,yearsToFix,transfer_techs,vintage);
8031      transfer_linksTotal.fx(linksModelToCalc,yearsToFix,transfer_techs,vintage)
8032          = transfer_linksTotal.l(linksModelToCalc,yearsToFix,transfer_techs,vintage);
8033   
8034      accounting_indicator.fx(accNodesModel,accYearsToFix,indicator)
8035          = accounting_indicator.l(accNodesModel,accYearsToFix,indicator);
8036   
8037  * Optimize and log values
8038      if (opti_sense < 0,
8039      solve remix minimizing accounting_objective using mip;
8040      else
8041      solve remix maximizing accounting_objective using mip;
8042      );
8043   
8044      put_utility 'log' / 'Model status ' remix.modelstat:0:0;
8045      put_utility 'log' / 'Objective value ' accounting_objective.l:0:3;
8046   
8047  );
8048   
8052   
8053  * if method is pareto solve the model once and afterwards run multiple points along the pareto front
INCLUDE    C:\Local\REMix\framework\remix\framework\model\source\methods\pareto.gms
8055  * SPDX-FileCopyrightText: Copyright (c) 2023 German Aerospace Center (DLR)
8056  * SPDX-License-Identifier: BSD-3-Clause
8057   
8061   
8062  * if method is mga solve the model once and afterwards maximize the length metric of indicators
INCLUDE    C:\Local\REMix\framework\remix\framework\model\source\methods\mga.gms
8064  * SPDX-FileCopyrightText: Copyright (c) 2023 German Aerospace Center (DLR)
8065  * SPDX-License-Identifier: BSD-3-Clause
8066   
8070   
8071  * if method is iternodes run the model by iterating through all nodesToCalc
INCLUDE    C:\Local\REMix\framework\remix\framework\model\source\methods\iternodes.gms
8073  * SPDX-FileCopyrightText: Copyright (c) 2023 German Aerospace Center (DLR)
8074  * SPDX-License-Identifier: BSD-3-Clause
8075   
8079   
8080  * if postcalc is one write the results gdx
INCLUDE    C:\Local\REMix\framework\remix\framework\model\source\postcalc\definition.gms
8082  * SPDX-FileCopyrightText: Copyright (c) 2023 German Aerospace Center (DLR)
8083  * SPDX-License-Identifier: BSD-3-Clause
8084   
8086   
8087  * ==== indicator accounting ====
8088   
8089  indicator_accounting_detailed(indicator,nodesModelToCalc,yearsToCalc,techs)
8090      =
8091  * == converters ==
8092      sum ((converter_techs(techs),vintage)
8093                  $(converter_availTech(nodesModelToCalc,yearsToCalc,converter_techs,vintage)
8094                      and accounting_converterUnits(indicator,nodesModelToCalc,converter_techs,vintage,"useAnnuity") = 0),
8095          converter_unitsBuild.l(nodesModelToCalc,yearsToCalc,converter_techs,vintage)
8096          * accounting_converterUnits(indicator,nodesModelToCalc,converter_techs,vintage,"perUnitBuild"))
8097   
8098      + sum ((years_a,converter_techs(techs),vintage)
8099                  $(converter_availTech(nodesModelToCalc,years_a,converter_techs,vintage)
8100                      and accounting_converterUnits(indicator,nodesModelToCalc,converter_techs,vintage,"useAnnuity") = 1
8101                      and years_a.val + accounting_converterUnits(indicator,nodesModelToCalc,converter_techs,vintage,"amorTime") > yearsToCalc.val
8102                      and years_a.val <= yearsToCalc.val ),
8103          converter_unitsBuild.l(nodesModelToCalc,years_a,converter_techs,vintage)
8104          * accounting_converterUnits(indicator,nodesModelToCalc,converter_techs,vintage,"perUnitBuild")
8105          * accounting_annuityFactor_converter(indicator,nodesModelToCalc,converter_techs,vintage) )
8106   
8107      + sum ((converter_techs(techs),vintage)
8108                  $converter_usedTech(nodesModelToCalc,yearsToCalc,converter_techs,vintage),
8109          converter_unitsDecom.l(nodesModelToCalc,yearsToCalc,converter_techs,vintage)
8110          * accounting_converterUnits(indicator,nodesModelToCalc,converter_techs,vintage,"perUnitDecom")
8111   
8112          + converter_unitsTotal.l(nodesModelToCalc,yearsToCalc,converter_techs,vintage)
8113          * accounting_converterUnits(indicator,nodesModelToCalc,converter_techs,vintage,"perUnitTotal") )
8114   
8115      + sum ((timeModelToCalc,converter_techs(techs),vintage,activity)
8116                  $converter_usedTechAct(nodesModelToCalc,yearsToCalc,converter_techs,vintage,activity),
8117          converter_activity.l(timeModelToCalc,nodesModelToCalc,yearsToCalc,converter_techs,vintage,activity)
8118          * timeLength(timeModelToCalc)
8119          * accounting_converterActivity(indicator,nodesModelToCalc,converter_techs,vintage,activity,"perActivity") )
8120   
8121      + sum ((timeModelToCalc,converter_techs(techs),vintage)
8122                  $converter_usedTech(nodesModelToCalc,yearsToCalc,converter_techs,vintage),
8123          converter_unitStartups.l(timeModelToCalc,nodesModelToCalc,yearsToCalc,converter_techs,vintage)
8124          * accounting_converterStartup(indicator,nodesModelToCalc,converter_techs,vintage,"perStartup") )
8125   
8126      + sum ((timeModelToCalc,converter_techs(techs),vintage)
8127                  $converter_usedTech(nodesModelToCalc,yearsToCalc,converter_techs,vintage),
8128          converter_rampPos.l(timeModelToCalc,nodesModelToCalc,yearsToCalc,converter_techs,vintage)
8129          * (accounting_converterStartup(indicator,nodesModelToCalc,converter_techs,vintage,"perRamp")
8130              + accounting_converterStartup(indicator,nodesModelToCalc,converter_techs,vintage,"perRampPos"))
8131   
8132          + converter_rampNeg.l(timeModelToCalc,nodesModelToCalc,yearsToCalc,converter_techs,vintage)
8133          * (accounting_converterStartup(indicator,nodesModelToCalc,converter_techs,vintage,"perRamp")
8134              + accounting_converterStartup(indicator,nodesModelToCalc,converter_techs,vintage,"perRampNeg")))
8135   
8136  * == storage ==
8137      + sum ((storage_techs(techs),vintage)
8138                  $(storage_availTech(nodesModelToCalc,yearsToCalc,storage_techs,vintage)
8139                      and accounting_storageUnits(indicator,nodesModelToCalc,storage_techs,vintage,"useAnnuity") = 0),
8140          storage_unitsBuild.l(nodesModelToCalc,yearsToCalc,storage_techs,vintage)
8141          * accounting_storageUnits(indicator,nodesModelToCalc,storage_techs,vintage,"perUnitBuild") )
8142   
8143      + sum ((years_a,storage_techs(techs),vintage)
8144                  $(storage_availTech(nodesModelToCalc,yearsToCalc,storage_techs,vintage)
8145                      and accounting_storageUnits(indicator,nodesModelToCalc,storage_techs,vintage,"useAnnuity") = 1
8146                      and years_a.val + accounting_storageUnits(indicator,nodesModelToCalc,storage_techs,vintage,"amorTime") > yearsToCalc.val
8147                      and years_a.val <= yearsToCalc.val ),
8148          storage_unitsBuild.l(nodesModelToCalc,years_a,storage_techs,vintage)
8149          * accounting_storageUnits(indicator,nodesModelToCalc,storage_techs,vintage,"perUnitBuild")
8150          * accounting_annuityFactor_storage(indicator,nodesModelToCalc,storage_techs,vintage) )
8151   
8152      + sum ((storage_techs(techs),vintage)
8153                  $storage_usedTech(nodesModelToCalc,yearsToCalc,storage_techs,vintage),
8154          storage_unitsDecom.l(nodesModelToCalc,yearsToCalc,storage_techs,vintage)
8155          * accounting_storageUnits(indicator,nodesModelToCalc,storage_techs,vintage,"perUnitDecom")
8156   
8157          + storage_unitsTotal.l(nodesModelToCalc,yearsToCalc,storage_techs,vintage)
8158          * accounting_storageUnits(indicator,nodesModelToCalc,storage_techs,vintage,"perUnitTotal") )
8159   
8160  * == transfer ==
8161      + sum ((linksModel,transfer_techs(techs),vintage)
8162                  $(transfer_availTech(linksModel,yearsToCalc,transfer_techs,vintage)
8163                      and linksModelToCalc(linksModel)
8164                      and transfer_incidenceModel(nodesModelToCalc,linksModel) <> 0
8165                      and accounting_transferLinks(indicator,linksModel,transfer_techs,vintage,"useAnnuity") = 0),
8166          0.5
8167          * transfer_linksBuild.l(linksModel,yearsToCalc,transfer_techs,vintage)
8168          * accounting_transferLinks(indicator,linksModel,transfer_techs,vintage,"perLinkBuild") )
8169   
8170      + sum ((linksModel,years_a,transfer_techs(techs),vintage)
8171                  $(transfer_availTech(linksModel,yearsToCalc,transfer_techs,vintage)
8172                      and linksModelToCalc(linksModel)
8173                      and transfer_incidenceModel(nodesModelToCalc,linksModel) <> 0
8174                      and accounting_transferLinks(indicator,linksModel,transfer_techs,vintage,"useAnnuity") = 1
8175                      and years_a.val + accounting_transferLinks(indicator,linksModel,transfer_techs,vintage,"amorTime") > yearsToCalc.val
8176                      and years_a.val <= yearsToCalc.val ),
8177          0.5
8178          * transfer_linksBuild.l(linksModel,years_a,transfer_techs,vintage)
8179          * accounting_transferLinks(indicator,linksModel,transfer_techs,vintage,"perLinkBuild")
8180          * accounting_annuityFactor_transferLink(indicator,linksModel,transfer_techs,vintage) )
8181   
8182      + sum ((linksModel,transfer_techs(techs),vintage,link_types)
8183                  $(transfer_availTech(linksModel,yearsToCalc,transfer_techs,vintage)
8184                      and linksModelToCalc(linksModel)
8185                      and transfer_incidenceModel(nodesModelToCalc,linksModel) <> 0
8186                      and accounting_transferPerLength(indicator,linksModel,transfer_techs,vintage,link_types,"useAnnuity") = 0 ),
8187          0.5
8188          * transfer_linksBuild.l(linksModel,yearsToCalc,transfer_techs,vintage)
8189          * transfer_lengthParam(linksModel,link_types,"length")
8190          * accounting_transferPerLength(indicator,linksModel,transfer_techs,vintage,link_types,"perLengthBuild") )
8191   
8192      + sum ((linksModel,years_a,transfer_techs(techs),vintage,link_types)
8193                  $(transfer_availTech(linksModel,yearsToCalc,transfer_techs,vintage)
8194                      and linksModelToCalc(linksModel)
8195                      and transfer_incidenceModel(nodesModelToCalc,linksModel) <> 0
8196                      and accounting_transferPerLength(indicator,linksModel,transfer_techs,vintage,link_types,"useAnnuity") = 1
8197                      and years_a.val + accounting_transferPerLength(indicator,linksModel,transfer_techs,vintage,link_types,"amorTime") > yearsToCalc.val
8198                      and years_a.val <= yearsToCalc.val ),
8199          0.5
8200          * transfer_linksBuild.l(linksModel,years_a,transfer_techs,vintage)
8201          * transfer_lengthParam(linksModel,link_types,"length")
8202          * accounting_transferPerLength(indicator,linksModel,transfer_techs,vintage,link_types,"perLengthBuild")
8203          * accounting_annuityFactor_transferDistance(indicator,linksModel,transfer_techs,vintage,link_types) )
8204   
8205      + sum ((linksModel,transfer_techs(techs),vintage)
8206                  $(transfer_usedTech(linksModel,yearsToCalc,transfer_techs,vintage)
8207                      and linksModelToCalc(linksModel)
8208                      and transfer_incidenceModel(nodesModelToCalc,linksModel) <> 0 ),
8209          0.5
8210          * transfer_linksDecom.l(linksModel,yearsToCalc,transfer_techs,vintage)
8211          * accounting_transferLinks(indicator,linksModel,transfer_techs,vintage,"perLinkDecom")
8212   
8213          + 0.5
8214          * transfer_linksTotal.l(linksModel,yearsToCalc,transfer_techs,vintage)
8215          * accounting_transferLinks(indicator,linksModel,transfer_techs,vintage,"perLinkTotal")
8216   
8217          + 0.5
8218          * sum (link_types,
8219              transfer_linksDecom.l(linksModel,yearsToCalc,transfer_techs,vintage)
8220              * transfer_lengthParam(linksModel,link_types,"length")
8221              * accounting_transferPerLength(indicator,linksModel,transfer_techs,vintage,link_types,"perLengthDecom")
8222   
8223              + transfer_linksTotal.l(linksModel,yearsToCalc,transfer_techs,vintage)
8224              * transfer_lengthParam(linksModel,link_types,"length")
8225              * accounting_transferPerLength(indicator,linksModel,transfer_techs,vintage,link_types,"perLengthTotal"))
8226   
8227          + 0.5
8228          * sum (timeModelToCalc,
8229              transfer_flowAlong.l(timeModelToCalc,linksModel,yearsToCalc,transfer_techs,vintage)
8230              * timeLength(timeModelToCalc)
8231              * ( accounting_transferLinks(indicator,linksModel,transfer_techs,vintage,"perFlow")
8232                  + accounting_transferLinks(indicator,linksModel,transfer_techs,vintage,"perFlowAlong"))
8233   
8234              + transfer_flowAgainst.l(timeModelToCalc,linksModel,yearsToCalc,transfer_techs,vintage)
8235              * timeLength(timeModelToCalc)
8236              * ( accounting_transferLinks(indicator,linksModel,transfer_techs,vintage,"perFlow")
8237                  + accounting_transferLinks(indicator,linksModel,transfer_techs,vintage,"perFlowAgainst")))
8238   
8239          + 0.5
8240          * sum ((timeModelToCalc, link_types),
8241              transfer_flowAlong.l(timeModelToCalc,linksModel,yearsToCalc,transfer_techs,vintage)
8242              * timeLength(timeModelToCalc)
8243              * transfer_lengthParam(linksModel,link_types,"length")
8244              * (accounting_transferPerLength(indicator,linksModel,transfer_techs,vintage,link_types,"perFlow")
8245                  + accounting_transferPerLength(indicator,linksModel,transfer_techs,vintage,link_types,"perFlowAlong"))
8246   
8247              + transfer_flowAgainst.l(timeModelToCalc,linksModel,yearsToCalc,transfer_techs,vintage)
8248              * timeLength(timeModelToCalc)
8249              * transfer_lengthParam(linksModel,link_types,"length")
8250              * (accounting_transferPerLength(indicator,linksModel,transfer_techs,vintage,link_types,"perFlow")
8251                  + accounting_transferPerLength(indicator,linksModel,transfer_techs,vintage,link_types,"perFlowAgainst"))))
8252   
8253   
8254  * == sources / sinks ==
8255      + sum ((timeModelToCalc,sourcesink_techs(techs),commodity)
8256              $sourcesink_enabled(nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity),
8257          sourcesink_flow.l(timeModelToCalc,nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity)
8258          * timeLength(timeModelToCalc)
8259          * accounting_sourcesinkFlow(indicator,nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity,"perFlow"))
8260      ;
8261   
8262   
8263  * ==== full set of main indicators ====
8264   
8265  indicator_accounting(accNodesModel,accYears,indicator)
8266      $sum((accNodesModel_a,accYears_a,indicator_a)
8267              $compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a), 1)
8268      =
8269      + sum((accNodesModel_a,accYears_a,indicator_a)
8270              $(compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
8271                  and variableIndicators(accNodesModel_a,accYears_a,indicator_a)),
8272          compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
8273          * accounting_indicator.l(accNodesModel_a,accYears_a,indicator_a))
8274   
8275      + sum((accNodesModel_a,accYears_a,indicator_a)
8276              $(compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)),
8277          compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
8278          * (sum((nodesModelToCalc,yearsToCalc,techs)
8279                  $(sameas(accNodesModel_a, nodesModelToCalc)
8280                      and sameas(accYears_a, yearsToCalc)),
8281                  indicator_accounting_detailed(indicator_a,nodesModelToCalc,yearsToCalc,techs))))
8282      ;
8283   
8284  indicator_accounting_comp(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
8285      $compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
8286      =
8287          compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
8288          * accounting_indicator.l(accNodesModel_a,accYears_a,indicator_a)
8289              $variableIndicators(accNodesModel_a,accYears_a,indicator_a)
8290   
8291          + compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
8292          * (sum((nodesModelToCalc,yearsToCalc,techs)
8293                  $(sameas(accNodesModel_a, nodesModelToCalc)
8294                      and sameas(accYears_a, yearsToCalc)),
8295                  indicator_accounting_detailed(indicator_a,nodesModelToCalc,yearsToCalc,techs)))
8296      ;
8297   
8298  indicator_accounting_ref(accNodesModel,accYears,indicator)
8299      $accounting_indicator.l(accNodesModel,accYears,indicator)
8300      = accounting_indicator.l(accNodesModel,accYears,indicator);
8301   
8302  * ==== link-specific indicator accounting ====
8303   
8304  indicator_accounting_links(indicator,nodesModelToCalc,nodesModelToCalc_a,linksModelToCalc,yearsToCalc,techs)
8305      $(transfer_incidenceModel(nodesModelToCalc,linksModelToCalc) < 0
8306          and transfer_incidenceModel(nodesModelToCalc_a,linksModelToCalc) > 0)
8307      =
8308      sum ((transfer_techs(techs),vintage)
8309                  $(transfer_availTech(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
8310                      and accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"useAnnuity") = 0),
8311          transfer_linksBuild.l(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
8312          * accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"perLinkBuild") )
8313   
8314      + sum ((years_a,transfer_techs(techs),vintage)
8315                  $(transfer_availTech(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
8316                      and accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"useAnnuity") = 1
8317                      and years_a.val + accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"amorTime") > yearsToCalc.val
8318                      and years_a.val <= yearsToCalc.val ),
8319          transfer_linksBuild.l(linksModelToCalc,years_a,transfer_techs,vintage)
8320          * accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"perLinkBuild")
8321          * accounting_annuityFactor_transferLink(indicator,linksModelToCalc,transfer_techs,vintage) )
8322   
8323      + sum ((transfer_techs(techs),vintage,link_types)
8324                  $(transfer_availTech(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
8325                      and accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"useAnnuity") = 0 ),
8326          transfer_linksBuild.l(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
8327          * transfer_lengthParam(linksModelToCalc,link_types,"length")
8328          * accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"perLengthBuild") )
8329   
8330      + sum ((years_a,transfer_techs(techs),vintage,link_types)
8331                  $(transfer_availTech(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
8332                      and accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"useAnnuity") = 1
8333                      and years_a.val + accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"amorTime") > yearsToCalc.val
8334                      and years_a.val <= yearsToCalc.val ),
8335          transfer_linksBuild.l(linksModelToCalc,years_a,transfer_techs,vintage)
8336          * transfer_lengthParam(linksModelToCalc,link_types,"length")
8337          * accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"perLengthBuild")
8338          * accounting_annuityFactor_transferDistance(indicator,linksModelToCalc,transfer_techs,vintage,link_types) )
8339   
8340      + sum ((transfer_techs(techs),vintage)
8341                  $(transfer_usedTech(linksModelToCalc,yearsToCalc,transfer_techs,vintage)),
8342          transfer_linksDecom.l(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
8343          * accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"perLinkDecom")
8344   
8345          + transfer_linksTotal.l(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
8346          * accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"perLinkTotal")
8347   
8348          + sum (link_types,
8349              transfer_linksDecom.l(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
8350              * transfer_lengthParam(linksModelToCalc,link_types,"length")
8351              * accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"perLengthDecom")
8352   
8353              + transfer_linksTotal.l(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
8354              * transfer_lengthParam(linksModelToCalc,link_types,"length")
8355              * accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"perLengthTotal"))
8356   
8357          + sum (timeModelToCalc,
8358              transfer_flowAlong.l(timeModelToCalc,linksModelToCalc,yearsToCalc,transfer_techs,vintage)
8359              * timeLength(timeModelToCalc)
8360              * ( accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"perFlow")
8361                  + accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"perFlowAlong"))
8362   
8363              + transfer_flowAgainst.l(timeModelToCalc,linksModelToCalc,yearsToCalc,transfer_techs,vintage)
8364              * timeLength(timeModelToCalc)
8365              * ( accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"perFlow")
8366                  + accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"perFlowAgainst")))
8367   
8368          + sum ((timeModelToCalc, link_types),
8369              transfer_flowAlong.l(timeModelToCalc,linksModelToCalc,yearsToCalc,transfer_techs,vintage)
8370              * timeLength(timeModelToCalc)
8371              * transfer_lengthParam(linksModelToCalc,link_types,"length")
8372              * (accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"perFlow")
8373                  + accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"perFlowAlong"))
8374   
8375              + transfer_flowAgainst.l(timeModelToCalc,linksModelToCalc,yearsToCalc,transfer_techs,vintage)
8376              * timeLength(timeModelToCalc)
8377              * transfer_lengthParam(linksModelToCalc,link_types,"length")
8378              * (accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"perFlow")
8379                  + accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"perFlowAgainst")))
8380      );
8381   
8382   
8383  * == converter capacities ==
8384   
8385  converter_ratedInput(converter_techs,vintage,commodity)
8386      $(converter_techParam(converter_techs,vintage,"lifeTime") > 0)
8387      = smin(activity$converter_usedAct(converter_techs,vintage,activity),
8388              converter_coefficient(converter_techs,vintage,activity,commodity,"coefficient"));
8389  converter_ratedInput(converter_techs,vintage,commodity)
8390      $(converter_ratedInput(converter_techs,vintage,commodity) > 0)
8391      = 0;
8392   
8393  converter_ratedOutput(converter_techs,vintage,commodity)
8394      $(converter_techParam(converter_techs,vintage,"lifeTime") > 0)
8395      = smax(activity$converter_usedAct(converter_techs,vintage,activity),
8396              converter_coefficient(converter_techs,vintage,activity,commodity,"coefficient"));
8397  converter_ratedOutput(converter_techs,vintage,commodity)
8398      $(converter_ratedOutput(converter_techs,vintage,commodity) < 0)
8399      = 0;
8400   
8401  converter_ratedOutput_min(nodesModelToCalc,years,converter_techs(techs),commodity)
8402      $sum(vintage$(converter_usedTech(nodesModelToCalc,years,converter_techs,vintage)
8403          and converter_ratedOutput(converter_techs,vintage,commodity)), 1)
8404      = smin(vintage$(converter_usedTech(nodesModelToCalc,years,converter_techs,vintage)
8405              and converter_ratedOutput(converter_techs,vintage,commodity)),
8406          converter_ratedOutput(converter_techs,vintage,commodity));
8407   
8408  converter_ratedOutput_max(nodesModelToCalc,years,converter_techs(techs),commodity)
8409      $sum(vintage$(converter_usedTech(nodesModelToCalc,years,converter_techs,vintage)
8410          and converter_ratedOutput(converter_techs,vintage,commodity)), 1)
8411      = smax(vintage$(converter_usedTech(nodesModelToCalc,years,converter_techs,vintage)
8412              and converter_ratedOutput(converter_techs,vintage,commodity)),
8413          converter_ratedOutput(converter_techs,vintage,commodity));
8414   
8415  converter_units_ext(map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,years),converter_techs(techs),vintage,"build")
8416      = converter_unitsBuild.l(nodesModelToCalc,years,converter_techs,vintage);
8417   
8418  converter_units_ext(map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,years),converter_techs(techs),vintage,"decom")
8419      = converter_unitsDecom.l(nodesModelToCalc,years,converter_techs,vintage);
8420   
8421  converter_units_ext(map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,years),converter_techs(techs),vintage,"total")
8422      = converter_unitsTotal.l(nodesModelToCalc,years,converter_techs,vintage);
8423   
8424  converter_caps_ext(map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,years),converter_techs(techs),vintage,commodity,capType)
8425      $(converter_ratedOutput(converter_techs,vintage,commodity))
8426      = converter_units_ext(accNodesModel,nodesModelToCalc,accYears,years,techs,vintage,capType)
8427          * converter_ratedOutput(converter_techs,vintage,commodity);
8428   
8429  converter_caps_ext(map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,years),converter_techs(techs),vintage,commodity,"lowerLimit")
8430      $(converter_usedTech(nodesModelToCalc,years,converter_techs,vintage)
8431          and converter_capacityParam(nodesModelToCalc,years,converter_techs,"unitsLowerLimit") > 0
8432          and converter_ratedOutput_min(nodesModelToCalc,years,converter_techs,commodity))
8433      = converter_capacityParam(nodesModelToCalc,years,converter_techs,"unitsLowerLimit")
8434          * converter_ratedOutput_min(nodesModelToCalc,years,converter_techs,commodity);
8435   
8436  converter_caps_ext(map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,years),converter_techs(techs),vintage,commodity,"upperLimit")
8437      $(converter_usedTech(nodesModelToCalc,years,converter_techs,vintage)
8438          and converter_capacityParam(nodesModelToCalc,years,converter_techs,"unitsUpperLimit") < inf
8439          and converter_ratedOutput_min(nodesModelToCalc,years,converter_techs,commodity))
8440      = converter_capacityParam(nodesModelToCalc,years,converter_techs,"unitsUpperLimit")
8441          * converter_ratedOutput_max(nodesModelToCalc,years,converter_techs,commodity);
8442   
8443  converter_caps(accNodesModel,accYears,converter_techs(techs),commodity,capType)
8444      = sum((nodesModelToCalc,years,vintage)
8445              $(map_accNodesPostCalc(accNodesModel,nodesModelToCalc)
8446                  and map_accYearsPostCalc(accYears,years)),
8447          converter_caps_ext(accNodesModel,nodesModelToCalc,accYears,years,converter_techs,vintage,commodity,capType));
8448  option clear = converter_caps_ext;
8449   
8450  converter_units(accNodesModel,accYears,converter_techs(techs),vintage,capType)
8451      = sum((nodesModelToCalc,years)
8452              $(map_accNodesPostCalc(accNodesModel,nodesModelToCalc)
8453                  and map_accYearsPostCalc(accYears,years)),
8454          converter_units_ext(accNodesModel,nodesModelToCalc,accYears,years,converter_techs,vintage,capType));
8455  option clear = converter_units_ext;
8456   
8457   
8458  * ==== transfer capacities ====
8459   
8460  max_transfer_coefficient(transfer_techs(techs),commodity)
8461          $(smax(vintage, transfer_coefficient(transfer_techs,vintage,commodity,"coefficient")) > 0)
8462          = smax(vintage, transfer_coefficient(transfer_techs,vintage,commodity,"coefficient"));
8463   
8464  min_transfer_coefficient(transfer_techs(techs),commodity)
8465          $(smin(vintage, transfer_coefficient(transfer_techs,vintage,commodity,"coefficient")) > 0)
8466          = smin(vintage, transfer_coefficient(transfer_techs,vintage,commodity,"coefficient"));
8467   
8468   
8469  transfer_links(linksModel,years,transfer_techs,vintage,"build")
8470      = transfer_linksBuild.l(linksModel,years,transfer_techs,vintage);
8471   
8472  transfer_links(linksModel,years,transfer_techs,vintage,"decom")
8473      = transfer_linksDecom.l(linksModel,years,transfer_techs,vintage);
8474   
8475  transfer_links(linksModel,years,transfer_techs,vintage,"total")
8476      = transfer_linksTotal.l(linksModel,years,transfer_techs,vintage);
8477   
8478  transfer_caps(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,years,transfer_techs(techs),commodity,capType)
8479      $(transfer_incidenceModel(nodesModelToCalc_start,linksModel) < 0
8480          and transfer_incidenceModel(nodesModelToCalc_end,linksModel) > 0)
8481      = sum(vintage,
8482          transfer_links(linksModel,years,transfer_techs,vintage,capType)
8483          * transfer_coefficient(transfer_techs,vintage,commodity,"coefficient"));
8484   
8485  transfer_caps(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,years,transfer_techs(techs),commodity,"lowerLimit")
8486      $(transfer_linksParam(linksModel,years,transfer_techs,'linksLowerLimit') > 0
8487          and transfer_incidenceModel(nodesModelToCalc_start,linksModel) < 0
8488          and transfer_incidenceModel(nodesModelToCalc_end,linksModel) > 0
8489          and sum(vintage$(transfer_usedTech(linksModel,years,transfer_techs,vintage)
8490                              and transfer_coefficient(transfer_techs,vintage,commodity,"coefficient")), 1))
8491      = transfer_linksParam(linksModel,years,transfer_techs,'linksLowerLimit')
8492          * min_transfer_coefficient(transfer_techs,commodity);
8493   
8494  transfer_caps(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,years,transfer_techs(techs),commodity,"upperLimit")
8495      $(transfer_linksParam(linksModel,years,transfer_techs,'linksUpperLimit') < inf
8496          and transfer_incidenceModel(nodesModelToCalc_start,linksModel) < 0
8497          and transfer_incidenceModel(nodesModelToCalc_end,linksModel) > 0
8498          and sum(vintage$(transfer_usedTech(linksModel,years,transfer_techs,vintage)
8499                              and transfer_coefficient(transfer_techs,vintage,commodity,"coefficient")), 1))
8500      = transfer_linksParam(linksModel,years,transfer_techs,'linksUpperLimit')
8501          * max_transfer_coefficient(transfer_techs,commodity);
8502   
8503   
8504  * ==== transfer flows ====
8505   
8506  transfer_flows(timeModelToCalc,nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs(techs),commodity)
8507      $(transfer_incidenceModel(nodesModelToCalc_start,linksModel) < 0
8508          and transfer_incidenceModel(nodesModelToCalc_end,linksModel) > 0)
8509      = sum(vintage,
8510          ( transfer_flowAlong.l(timeModelToCalc,linksModel,yearsToCalc,transfer_techs,vintage)
8511              - transfer_flowAgainst.l(timeModelToCalc,linksModel,yearsToCalc,transfer_techs,vintage) )
8512          * timeLength(timeModelToCalc)
8513          * transfer_coefficient(transfer_techs,vintage,commodity,"coefficient"));
8514   
8515  transfer_flows_annual(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs(techs),commodity,"netto")
8516      = sum(timeModelToCalc,
8517          transfer_flows(timeModelToCalc,nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs,commodity));
8518   
8519  transfer_flows_annual(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs(techs),commodity,"positive")
8520      = sum(timeModelToCalc
8521              $(transfer_flows(timeModelToCalc,nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs,commodity) > 0),
8522          transfer_flows(timeModelToCalc,nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs,commodity));
8523   
8524  transfer_flows_annual(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs(techs),commodity,"negative")
8525      = sum(timeModelToCalc
8526              $(transfer_flows(timeModelToCalc,nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs,commodity) < 0),
8527          transfer_flows(timeModelToCalc,nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs,commodity));
8528   
8529  transfer_flows_annual(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs(techs),commodity,"brutto")
8530      = transfer_flows_annual(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs,commodity,"positive")
8531          - transfer_flows_annual(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs,commodity,"negative");
8532   
8533  transfer_flows_annual(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs(techs),commodity,"flh")
8534      $(transfer_flows_annual(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs,commodity,"brutto") > 0
8535          and transfer_caps(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs,commodity,"total") > 0)
8536      = transfer_flows_annual(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs,commodity,"brutto")
8537          / transfer_caps(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs,commodity,"total");
8538   
8539  transfer_losses(timeModelToCalc,nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs(techs),commodity)
8540      $(transfer_incidenceModel(nodesModelToCalc_start,linksModel) < 0
8541          and transfer_incidenceModel(nodesModelToCalc_end,linksModel) > 0)
8542      = -1 * abs(sum(vintage,
8543          ( transfer_flowAlong.l(timeModelToCalc,linksModel,yearsToCalc,transfer_techs,vintage)
8544              - transfer_flowAgainst.l(timeModelToCalc,linksModel,yearsToCalc,transfer_techs,vintage) )
8545          * ( transfer_coefPerFlow(transfer_techs,vintage,commodity,"coefPerFlow")
8546              + sum(link_types,
8547                  transfer_coefPerLength(transfer_techs,vintage,commodity,link_types,"coefPerLength")
8548                  * transfer_lengthParam(linksModel,link_types,"length")))))
8549          * timeLength(timeModelToCalc);
8550   
8551  transfer_losses_annual(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs(techs),commodity,"netto")
8552      = sum(timeModelToCalc,
8553          transfer_losses(timeModelToCalc,nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs,commodity));
8554   
8555   
8556  * ==== storage capacities ====
8557   
8558  storage_size_max(nodesModelToCalc,years,storage_techs(techs),commodity)
8559      $sum(vintage$(storage_usedTech(nodesModelToCalc,years,storage_techs,vintage)
8560              and storage_usedCom(storage_techs,vintage,commodity)
8561              and storage_sizeParam(storage_techs,vintage,commodity,"size")), 1)
8562      = smax(vintage$(storage_usedTech(nodesModelToCalc,years,storage_techs,vintage)
8563              and storage_usedCom(storage_techs,vintage,commodity)
8564              and storage_sizeParam(storage_techs,vintage,commodity,"size")),
8565          storage_sizeParam(storage_techs,vintage,commodity,"size"));
8566   
8567  storage_size_min(nodesModelToCalc,years,storage_techs(techs),commodity)
8568      $sum(vintage$(storage_usedTech(nodesModelToCalc,years,storage_techs,vintage)
8569              and storage_usedCom(storage_techs,vintage,commodity)
8570              and storage_sizeParam(storage_techs,vintage,commodity,"size")), 1)
8571      = smin(vintage$(storage_usedTech(nodesModelToCalc,years,storage_techs,vintage)
8572              and storage_usedCom(storage_techs,vintage,commodity)
8573              and storage_sizeParam(storage_techs,vintage,commodity,"size")),
8574          storage_sizeParam(storage_techs,vintage,commodity,"size"));
8575   
8576  storage_units_ext(map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,years),storage_techs(techs),vintage,"build")
8577      $storage_usedTech(nodesModelToCalc,years,storage_techs,vintage)
8578      = storage_unitsBuild.l(nodesModelToCalc,years,storage_techs,vintage);
8579   
8580  storage_units_ext(map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,years),storage_techs(techs),vintage,"decom")
8581      $storage_usedTech(nodesModelToCalc,years,storage_techs,vintage)
8582      = storage_unitsDecom.l(nodesModelToCalc,years,storage_techs,vintage);
8583   
8584  storage_units_ext(map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,years),storage_techs(techs),vintage,"total")
8585      $storage_usedTech(nodesModelToCalc,years,storage_techs,vintage)
8586      = storage_unitsTotal.l(nodesModelToCalc,years,storage_techs,vintage);
8587   
8588  storage_caps_ext(map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,years),storage_techs(techs),vintage,commodity,capType)
8589      $storage_sizeParam(storage_techs,vintage,commodity,"size")
8590      = storage_units_ext(accNodesModel,nodesModelToCalc,accYears,years,storage_techs,vintage,capType)
8591          * storage_sizeParam(storage_techs,vintage,commodity,"size");
8592   
8593  storage_caps_ext(map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,years),storage_techs(techs),vintage,commodity,"lowerLimit")
8594      $(storage_usedTech(nodesModelToCalc,years,storage_techs,vintage)
8595          and storage_reservoirParam(nodesModelToCalc,years,storage_techs,"unitsLowerLimit") > 0
8596          and storage_size_min(nodesModelToCalc,years,storage_techs,commodity))
8597      = storage_reservoirParam(nodesModelToCalc,years,storage_techs,"unitsLowerLimit")
8598          * storage_size_min(nodesModelToCalc,years,storage_techs,commodity);
8599   
8600  storage_caps_ext(map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,years),storage_techs(techs),vintage,commodity,"upperLimit")
8601      $(storage_usedTech(nodesModelToCalc,years,storage_techs,vintage)
8602          and storage_reservoirParam(nodesModelToCalc,years,storage_techs,"unitsUpperLimit") < inf
8603          and storage_size_max(nodesModelToCalc,years,storage_techs,commodity))
8604      = storage_reservoirParam(nodesModelToCalc,years,storage_techs,"unitsUpperLimit")
8605          * storage_size_max(nodesModelToCalc,years,storage_techs,commodity);
8606   
8607  storage_caps_ext(map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,years),storage_techs(techs),vintage,commodity,"total_degraded")
8608      $(storage_usedCom(storage_techs,vintage,commodity)
8609          and (storage_techParam(storage_techs,vintage,"annualDegradation") > 0
8610               or storage_techParam(storage_techs,vintage,"usageDegradation")))
8611      = sum((degradation_states,yearsCom), (storage_degradationParam(storage_techs,vintage,degradation_states,"remainingCapacity")
8612                                      - (years.val - yearsCom.val) * storage_techParam(storage_techs,vintage,"annualDegradation"))
8613                                      * storage_unitsStateTracker.l(nodesModelToCalc,years,yearsCom,storage_techs,vintage,degradation_states)
8614                                      * storage_sizeParam(storage_techs,vintage,commodity,"size"));
8615   
8616  storage_caps(accNodesModel,accYears,storage_techs(techs),commodity,capType)
8617      = sum((nodesModelToCalc,years,vintage)
8618              $(map_accNodesPostCalc(accNodesModel,nodesModelToCalc)
8619                  and map_accYearsPostCalc(accYears,years)),
8620          storage_caps_ext(accNodesModel,nodesModelToCalc,accYears,years,storage_techs,vintage,commodity,capType));
8621  option clear = storage_caps_ext;
8622   
8623  storage_units(accNodesModel,accYears,storage_techs(techs),vintage,capType)
8624      = sum((nodesModelToCalc,years)
8625              $(map_accNodesPostCalc(accNodesModel,nodesModelToCalc)
8626                  and map_accYearsPostCalc(accYears,years)),
8627          storage_units_ext(accNodesModel,nodesModelToCalc,accYears,years,storage_techs,vintage,capType));
8628  option clear = storage_units_ext;
8629   
8630   
8631  * ==== storage levels and flows ====
8632   
8633  storage_flows_ext(timeModelToCalc,map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,yearsToCalc),storage_techs(techs),vintage,commodity)
8634      $(storage_usedTech(nodesModelToCalc,yearsToCalc,storage_techs,vintage) and balance_techComm(storage_techs,commodity))
8635      = storage_level.l(timeModelToCalc,nodesModelToCalc,yearsToCalc,storage_techs,vintage,commodity)
8636          - storage_level.l(timeModelToCalc--1,nodesModelToCalc,yearsToCalc,storage_techs,vintage,commodity)
8638      + storage_losses.l(timeModelToCalc,nodesModelToCalc,yearsToCalc,storage_techs,vintage,commodity)
8639          * timeLength(timeModelToCalc)
8641      ;
8642   
8643  storage_flows(timeModelToCalc,accNodesModel,accYears,storage_techs(techs),commodity)
8644      = sum((nodesModelToCalc,yearsToCalc,vintage)
8645              $(storage_usedTech(nodesModelToCalc,yearsToCalc,storage_techs,vintage) and balance_techComm(storage_techs,commodity)),
8646          storage_flows_ext(timeModelToCalc,accNodesModel,nodesModelToCalc,accYears,yearsToCalc,storage_techs,vintage,commodity));
8647  option clear = storage_flows_ext;
8648   
8649  storage_level_out_ext(timeModelToCalc,map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,yearsToCalc),storage_techs(techs),vintage,commodity)
8650      $(storage_usedTech(nodesModelToCalc,yearsToCalc,storage_techs,vintage) and balance_techComm(storage_techs,commodity))
8651      = storage_level.l(timeModelToCalc,nodesModelToCalc,yearsToCalc,storage_techs,vintage,commodity);
8652   
8653  storage_level_out(timeModelToCalc,accNodesModel,accYears,storage_techs(techs),commodity)
8654      = sum((nodesModelToCalc,yearsToCalc,vintage)
8655              $(storage_usedTech(nodesModelToCalc,yearsToCalc,storage_techs,vintage) and balance_techComm(storage_techs,commodity)),
8656          storage_level_out_ext(timeModelToCalc,accNodesModel,nodesModelToCalc,accYears,yearsToCalc,storage_techs,vintage,commodity));
8657  option clear = storage_level_out_ext;
8658   
8659  storage_flows_annual(accNodesModel,accYears,storage_techs(techs),commodity,"netto")
8660      = sum(timeModelToCalc,
8661          storage_flows(timeModelToCalc,accNodesModel,accYears,storage_techs,commodity));
8662   
8663  storage_flows_annual(accNodesModel,accYears,storage_techs(techs),commodity,"positive")
8664      = sum(timeModelToCalc
8665              $(storage_flows(timeModelToCalc,accNodesModel,accYears,storage_techs,commodity) > 0),
8666          storage_flows(timeModelToCalc,accNodesModel,accYears,storage_techs,commodity));
8667   
8668  storage_flows_annual(accNodesModel,accYears,storage_techs(techs),commodity,"negative")
8669      = sum(timeModelToCalc
8670              $(storage_flows(timeModelToCalc,accNodesModel,accYears,storage_techs,commodity) < 0),
8671          storage_flows(timeModelToCalc,accNodesModel,accYears,storage_techs,commodity));
8672   
8673  storage_flows_annual(accNodesModel,accYears,storage_techs(techs),commodity,"brutto")
8674      = storage_flows_annual(accNodesModel,accYears,storage_techs,commodity,"positive")
8675          + storage_flows_annual(accNodesModel,accYears,storage_techs,commodity,"negative");
8676   
8677  storage_flows_annual(accNodesModel,accYears,storage_techs(techs),commodity,"flh")
8678      $(storage_flows_annual(accNodesModel,accYears,storage_techs,commodity,"brutto") > 0
8679          and storage_caps(accNodesModel,accYears,storage_techs,commodity,"total") > 0)
8680      = storage_flows_annual(accNodesModel,accYears,storage_techs,commodity,"brutto")
8681          / storage_caps(accNodesModel,accYears,storage_techs,commodity,"total");
8682   
8683  storage_losses_out(timeModelToCalc,accNodesModel,accYears,storage_techs(techs),commodity)
8684      = sum((nodesModelToCalc,yearsToCalc,vintage)
8685              $(storage_losses.l(timeModelToCalc,nodesModelToCalc,yearsToCalc,storage_techs,vintage,commodity)
8686                  and map_accNodesPostCalc(accNodesModel,nodesModelToCalc)
8687                  and map_accYearsPostCalc(accYears,yearsToCalc)),
8688          storage_losses.l(timeModelToCalc,nodesModelToCalc,yearsToCalc,storage_techs,vintage,commodity)
8689          * timeLength(timeModelToCalc));
8690   
8691  storage_losses_annual(accNodesModel,accYears,storage_techs(techs),commodity,"netto")
8692      = sum(timeModelToCalc,
8693          storage_losses_out(timeModelToCalc,accNodesModel,accYears,storage_techs,commodity));
8694   
8695   
8696  * == commodity balance ==
8697   
8698  commodity_balance_ext(timeModelToCalc,map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,yearsToCalc),converter_techs(techs),vintage,commodity)
8699      $(converter_usedTech(nodesModelToCalc,yearsToCalc,converter_techs,vintage)
8700          and balance_usedConverter(nodesModelToCalc,yearsToCalc,commodity))
8701      = sum((activity)
8702              $(converter_coefficientProfile(timeModelToCalc,nodesModelToCalc,yearsToCalc,converter_techs,vintage,activity,commodity)),
8703          converter_activity.l(timeModelToCalc,nodesModelToCalc,yearsToCalc,converter_techs,vintage,activity)
8704              * timeLength(timeModelToCalc)
8705              * converter_coefficientProfile(timeModelToCalc,nodesModelToCalc,yearsToCalc,converter_techs,vintage,activity,commodity)
8706          + converter_unitsUsingActivity_MIP.l(timeModelToCalc,nodesModelToCalc,yearsToCalc,converter_techs,vintage,activity)
8707              * timeLength(timeModelToCalc)
8708              * converter_coefficient(converter_techs,vintage,activity,commodity,"constant"));
8709   
8710  commodity_balance_ext(timeModelToCalc,map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,yearsToCalc),storage_techs(techs),vintage,commodity)
8711      $(storage_usedTech(nodesModelToCalc,yearsToCalc,storage_techs,vintage)
8712          and storage_sizeParam(storage_techs,vintage,commodity,"size"))
8713      = commodity_balance_ext(timeModelToCalc,accNodesModel,nodesModelToCalc,accYears,yearsToCalc,storage_techs,vintage,commodity)
8714      + storage_level.l(timeModelToCalc--1,nodesModelToCalc,yearsToCalc,storage_techs,vintage,commodity)
8715          - storage_level.l(timeModelToCalc,nodesModelToCalc,yearsToCalc,storage_techs,vintage,commodity)
8716      - storage_losses.l(timeModelToCalc,nodesModelToCalc,yearsToCalc,storage_techs,vintage,commodity)
8717      * timeLength(timeModelToCalc);
8718   
8719  commodity_balance_ext(timeModelToCalc,map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,yearsToCalc),sourcesink_techs(techs),vintage,commodity)
8720      $(sourcesink_enabled(nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity)
8721          and sameas(yearsToCalc,vintage))
8722      = commodity_balance_ext(timeModelToCalc,accNodesModel,nodesModelToCalc,accYears,yearsToCalc,sourcesink_techs,vintage,commodity)
8723      + sourcesink_flow.l(timeModelToCalc,nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity)
8724      * timeLength(timeModelToCalc);
8725   
8726  commodity_balance_ext(timeModelToCalc,map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,yearsToCalc),transfer_techs(techs),vintage,commodity)
8727      $sum((linksModel)
8728          $(transfer_incidenceModel(nodesModelToCalc,linksModel)
8729                  and transfer_usedTech(linksModel,yearsToCalc,transfer_techs,vintage)
8730                  and transfer_coefficient(transfer_techs,vintage,commodity,"coefficient")), 1)
8731      = commodity_balance_ext(timeModelToCalc,accNodesModel,nodesModelToCalc,accYears,yearsToCalc,transfer_techs,vintage,commodity)
8732      + sum((linksModel)
8733              $(transfer_incidenceModel(nodesModelToCalc,linksModel)
8734                  and transfer_usedTech(linksModel,yearsToCalc,transfer_techs,vintage)
8735                  and transfer_coefficient(transfer_techs,vintage,commodity,"coefficient")),
8736   
8737              (transfer_flowAlong.l(timeModelToCalc,linksModel,yearsToCalc,transfer_techs,vintage)
8738                      $(transfer_incidenceModel(nodesModelToCalc,linksModel) > 0)
8739                + transfer_flowAgainst.l(timeModelToCalc,linksModel,yearsToCalc,transfer_techs,vintage)
8740                      $(transfer_incidenceModel(nodesModelToCalc,linksModel) < 0))
8741              * timeLength(timeModelToCalc)
8742              * transfer_coefficient(transfer_techs,vintage,commodity,"coefficient")
8743   
8744              - (transfer_flowAlong.l(timeModelToCalc,linksModel,yearsToCalc,transfer_techs,vintage)
8745                      $(transfer_incidenceModel(nodesModelToCalc,linksModel) < 0)
8746                + transfer_flowAgainst.l(timeModelToCalc,linksModel,yearsToCalc,transfer_techs,vintage)
8747                      $(transfer_incidenceModel(nodesModelToCalc,linksModel) > 0))
8748              * timeLength(timeModelToCalc)
8749              * transfer_coefficient(transfer_techs,vintage,commodity,"coefficient")
8750   
8751              + 0.5 * ((transfer_flowAlong.l(timeModelToCalc,linksModel,yearsToCalc,transfer_techs,vintage)
8752                          $(transfer_incidenceModel(nodesModelToCalc,linksModel) <> 0)
8753                      + transfer_flowAgainst.l(timeModelToCalc,linksModel,yearsToCalc,transfer_techs,vintage)
8754                          $(transfer_incidenceModel(nodesModelToCalc,linksModel) <> 0))
8755                      * timeLength(timeModelToCalc)
8756                      * ( transfer_coefPerFlow(transfer_techs,vintage,commodity,"coefPerFlow")
8757                          + sum(link_types,
8758                              transfer_coefPerLength(transfer_techs,vintage,commodity,link_types,"coefPerLength")
8759                              * transfer_lengthParam(linksModel,link_types,"length")))))
8760      ;
8761   
8762  commodity_balance(timeModelToCalc,accNodesModel,accYears,balance_techComm(techs,commodity))
8763      = sum((nodesModelToCalc,yearsToCalc,vintage)
8764              $(commodity_balance_ext(timeModelToCalc,accNodesModel,nodesModelToCalc,accYears,yearsToCalc,techs,vintage,commodity)
8765                  and map_accNodesPostCalc(accNodesModel,nodesModelToCalc)
8766                  and map_accYearsPostCalc(accYears,yearsToCalc)),
8767          commodity_balance_ext(timeModelToCalc,accNodesModel,nodesModelToCalc,accYears,yearsToCalc,techs,vintage,commodity));
8768  option clear = commodity_balance_ext;
8769   
8770   
8771  * ==== annual commodity sums ====
8772   
8773  commodity_balance_annual(accNodesModel,accYears,techs,commodity,"netto")
8774      = sum(timeModelToCalc,
8775          commodity_balance(timeModelToCalc,accNodesModel,accYears,techs,commodity));
8776   
8777  commodity_balance_annual(accNodesModel,accYears,techs,commodity,"positive")
8778      = sum(timeModelToCalc
8779              $(commodity_balance(timeModelToCalc,accNodesModel,accYears,techs,commodity) > 0),
8780          commodity_balance(timeModelToCalc,accNodesModel,accYears,techs,commodity));
8781   
8782  commodity_balance_annual(accNodesModel,accYears,techs,commodity,"negative")
8783      = sum(timeModelToCalc
8784              $(commodity_balance(timeModelToCalc,accNodesModel,accYears,techs,commodity) < 0),
8785          commodity_balance(timeModelToCalc,accNodesModel,accYears,techs,commodity));
8786   
8787  commodity_balance_annual(accNodesModel,accYears,techs,commodity,"brutto")
8788      = commodity_balance_annual(accNodesModel,accYears,techs,commodity,"positive")
8789          - commodity_balance_annual(accNodesModel,accYears,techs,commodity,"negative");
8790   
8791  commodity_balance_annual(accNodesModel,accYears,techs,commodity,"flh")
8792      $(commodity_balance_annual(accNodesModel,accYears,techs,commodity,"brutto") > 0
8793          and converter_caps(accNodesModel,accYears,techs,commodity,"total") > 0 )
8794      = commodity_balance_annual(accNodesModel,accYears,techs,commodity,"brutto")
8795          / converter_caps(accNodesModel,accYears,techs,commodity,"total");
8796   
8797   
8798  * ==== marginal information ====
8799   
8800  marginals_balance(timeModelToCalc,nodesModelToCalc,yearsToCalc,commodity)
8801    $balance_usedBalance(nodesModelToCalc,yearsToCalc,commodity)
8802    =
8803    Eq_balance_commodities.m(timeModelToCalc,nodesModelToCalc,yearsToCalc,commodity);
8804   
8805  marginals_sourcesink_profile(timeModelToCalc,nodesModelToCalc,yearsToCalc,sourcesink_techs(techs),commodity)
8806      $( sourcesink_flow.m(timeModelToCalc,nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity) <> 0 )
8807      =
8808      sourcesink_flow.m(timeModelToCalc,nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity);
8809   
8810  marginals_sourcesink_sum(nodesModelToCalc,yearsToCalc,sourcesink_techs(techs),commodity)
8811      $( ( Eq_sourcesink_useLowerSum.m(nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity)
8812          + Eq_sourcesink_useUpperSum.m(nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity)
8813          + Eq_sourcesink_useFixedSum.m(nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity) ) <> eps )
8814      =
8815      ( Eq_sourcesink_useLowerSum.m(nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity)
8816      + Eq_sourcesink_useUpperSum.m(nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity)
8817      + Eq_sourcesink_useFixedSum.m(nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity) );
8818   
8819  marginals_indicator_bounds(accNodesModel,accYears,indicator)
8820      $( accounting_indicator.m(accNodesModel,accYears,indicator) <> 0 )
8821      =
8822      accounting_indicator.m(accNodesModel,accYears,indicator);
8823   
8824   
8825  * ==== R2A postcalc information ====
8826   
8828   
8829   
8830  * ==== round profiles to reduce size of gdx ====
8831   
8833  commodity_balance(timeModelToCalc,accNodesModel,accYears,techs,commodity)
8834      $commodity_balance(timeModelToCalc,accNodesModel,accYears,techs,commodity)
8835      = round(commodity_balance(timeModelToCalc,accNodesModel,accYears,techs,commodity), 6);
8836   
8837  transfer_flows(timeModelToCalc,nodesModelToCalc,nodesModelToCalc_a,linksModel,yearsToCalc,transfer_techs,commodity)
8838      $transfer_flows(timeModelToCalc,nodesModelToCalc,nodesModelToCalc_a,linksModel,yearsToCalc,transfer_techs,commodity)
8839      = round(transfer_flows(timeModelToCalc,nodesModelToCalc,nodesModelToCalc_a,linksModel,yearsToCalc,transfer_techs,commodity), 6);
8840   
8841  transfer_losses(timeModelToCalc,nodesModelToCalc,nodesModelToCalc_a,linksModel,yearsToCalc,transfer_techs,commodity)
8842      $transfer_losses(timeModelToCalc,nodesModelToCalc,nodesModelToCalc_a,linksModel,yearsToCalc,transfer_techs,commodity)
8843      = round(transfer_losses(timeModelToCalc,nodesModelToCalc,nodesModelToCalc_a,linksModel,yearsToCalc,transfer_techs,commodity), 6);
8844   
8845  storage_flows(timeModelToCalc,accNodesModel,accYears,storage_techs,commodity)
8846      $storage_flows(timeModelToCalc,accNodesModel,accYears,storage_techs,commodity)
8847      = round(storage_flows(timeModelToCalc,accNodesModel,accYears,storage_techs,commodity), 6);
8848   
8849  storage_level_out(timeModelToCalc,accNodesModel,accYears,storage_techs,commodity)
8850      $storage_level_out(timeModelToCalc,accNodesModel,accYears,storage_techs,commodity)
8851      = round(storage_level_out(timeModelToCalc,accNodesModel,accYears,storage_techs,commodity), 6);
8852   
8853  marginals_balance(timeModelToCalc,nodesModelToCalc,yearsToCalc,commodity)
8854      $marginals_balance(timeModelToCalc,nodesModelToCalc,yearsToCalc,commodity)
8855      = round(marginals_balance(timeModelToCalc,nodesModelToCalc,yearsToCalc,commodity), 6);
8856   
8857  marginals_sourcesink_profile(timeModelToCalc,nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity)
8858      $marginals_sourcesink_profile(timeModelToCalc,nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity)
8859      = round(marginals_sourcesink_profile(timeModelToCalc,nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity), 6);
8861   
INCLUDE    C:\Local\REMix\framework\remix\framework\model\source\postcalc\writegdx.gms
8864  * SPDX-FileCopyrightText: Copyright (c) 2023 German Aerospace Center (DLR)
8865  * SPDX-License-Identifier: BSD-3-Clause
8866   
8869   
8870  execute_unload "C:\Local\REMix\remix_nz\output\nz_profile_11nodes_2020-2030-2040-2050\result\nz_profile_11nodes_2020-2030-2040-2050.gdx"
8871      metadata
8872      timeModel
8873      timeModelToCalc
8874      nodesModel
8875      linksModel
8876      indicator
8877      commodity
8878      techs
8879      accNodesModel
8880      accYears
8881   
8882      map_nodesModel
8883      map_linksModel
8884      map_nodesAccounting
8885   
8886      indicator_accounting
8887      indicator_accounting_ref
8888      indicator_accounting_comp
8889      indicator_accounting_detailed
8890      indicator_accounting_links
8891   
8892      converter_caps
8893      converter_units
8895   
8896      transfer_caps
8897      transfer_links
8898      transfer_flows
8899      transfer_flows_annual
8900      transfer_losses
8901      transfer_losses_annual
8902   
8903      storage_caps
8904      storage_units
8905      storage_flows
8906      storage_level_out
8907      storage_flows_annual
8908      storage_losses_out
8909      storage_losses_annual
8911   
8912      commodity_balance
8913      commodity_balance_annual
8914   
8915      marginals_balance
8916      marginals_sourcesink_profile
8917      marginals_sourcesink_sum
8918      marginals_indicator_bounds
8919   
8921      ;
GAMS 40.4.0  d540b52e Oct 3, 2022           WEX-WEI x86 64bit/MS Windows - 10/08/23 23:08:42 Page 2
G e n e r a l   A l g e b r a i c   M o d e l i n g   S y s t e m
Include File Summary


   SEQ   GLOBAL TYPE      PARENT   LOCAL  FILENAME

     1        1 INPUT          0       0  C:\Local\REMix\framework\remix\framework\model\run_remix.gms
     2       12 IF DEXIST      1      12  C:\Local\REMix\remix_nz\output\nz_profile_11nodes_2020-2030-2040-2050\data\
     3       15 INCLUDE        1      15  .C:\Local\REMix\framework\remix\framework\model\source\metadata.gms
     4       23 CALL           3       8  .printf "remix_version \"0.9.2\"\n" > c:\Local\REMix\remix_nz\process\225a\\metadata
     5       24 CALL           3       9  .printf "gams_version \"40.4.0\"\n" >> c:\Local\REMix\remix_nz\process\225a\\metadata
     6       25 CALL           3      10  .printf "timestamp \"10/08/23 23:08:42\"\n" >> c:\Local\REMix\remix_nz\process\225a\\metadata
     7       27 CALL           3      12  .printf "framework_path " >> c:\Local\REMix\remix_nz\process\225a\\metadata
     8       29 CALL           3      14  .cd C:\Local\REMix\framework\remix\framework\model\source && cd| sed "s/^/\"/;s/$/\"/" >> c:\Local\REMix\remix_nz\process\225a\\metadata
     9       31 CALL           3      18  .printf "\n" >> c:\Local\REMix\remix_nz\process\225a\\metadata
    10       32 CALL           3      19  .printf "framework_hash " >> c:\Local\REMix\remix_nz\process\225a\\metadata
    11       34 CALL           3      21  .cd C:\Local\REMix\framework\remix\framework\model\source && git rev-parse HEAD >nul 2>&1 && git rev-parse HEAD >> c:\Local\REMix\remix_nz\process\225a\\metadata
    12       36 CALL           3      25  .printf "\n" >> c:\Local\REMix\remix_nz\process\225a\\metadata
    13       37 CALL           3      26  .printf "framework_branch " >> c:\Local\REMix\remix_nz\process\225a\\metadata
    14       39 CALL           3      28  .cd C:\Local\REMix\framework\remix\framework\model\source && git rev-parse --abbrev-ref HEAD >nul 2>&1 && git rev-parse --abbrev-ref HEAD | sed "s/^/\"/;s/$/\"/" >> c:\Local\REMix\remix_nz\process\225a\\metadata
    15       41 CALL           3      32  .printf "\n" >> c:\Local\REMix\remix_nz\process\225a\\metadata
    16       43 CALL           3      34  .printf "project_path " >> c:\Local\REMix\remix_nz\process\225a\\metadata
    17       45 CALL           3      36  .cd C:\Local\REMix\remix_nz\output\nz_profile_11nodes_2020-2030-2040-2050\data\./ && cd| sed "s/^/\"/;s/$/\"/" >> c:\Local\REMix\remix_nz\process\225a\\metadata
    18       47 CALL           3      40  .printf "\n" >> c:\Local\REMix\remix_nz\process\225a\\metadata
    19       48 CALL           3      41  .printf "project_hash " >> c:\Local\REMix\remix_nz\process\225a\\metadata
    20       50 CALL           3      43  .cd C:\Local\REMix\remix_nz\output\nz_profile_11nodes_2020-2030-2040-2050\data\./ && git rev-parse HEAD >nul 2>&1 && git rev-parse HEAD | sed "s/^/\"/;s/$/\"/" >> c:\Local\REMix\remix_nz\process\225a\\metadata
    21       52 CALL           3      47  .printf "\n" >> c:\Local\REMix\remix_nz\process\225a\\metadata
    22       53 CALL           3      48  .printf "project_branch " >> c:\Local\REMix\remix_nz\process\225a\\metadata
    23       55 CALL           3      50  .cd C:\Local\REMix\remix_nz\output\nz_profile_11nodes_2020-2030-2040-2050\data\./ && git rev-parse --abbrev-ref HEAD >nul 2>&1 && git rev-parse --abbrev-ref HEAD | sed "s/^/\"/;s/$/\"/" >> c:\Local\REMix\remix_nz\process\225a\\metadata
    24       57 CALL           3      54  .printf "\n" >> c:\Local\REMix\remix_nz\process\225a\\metadata
    25       60 INCLUDE        3      57  ..c:\Local\REMix\remix_nz\process\225a\metadata
    26       77 INCLUDE        1      16  .C:\Local\REMix\framework\remix\framework\model\source\data_inheritance.gms
    27      119 INCLUDE        1      25  .C:\Local\REMix\framework\remix\framework\model\source\remix.gms
    28      140 INCLUDE       27      21  ..C:\Local\REMix\framework\remix\framework\model\source\sets.gms
    29      160 IF EXIST      28      20  ..c:\Local\REMix\remix_nz\process\225a\map_aggregatetimemodel.csv
    30      211 IF EXIST      28      97  ..c:\Local\REMix\remix_nz\process\225a\set_nodesmodel.csv
    31      211 INCLUDE       28      97  ...c:\Local\REMix\remix_nz\process\225a\set_nodesmodel.csv
    32      224 IF EXIST      28      99  ..c:\Local\REMix\remix_nz\process\225a\set_nodesmodel.csv
    33      231 IF EXIST      28     106  ..c:\Local\REMix\remix_nz\process\225a\set_nodesdata.csv
    34      231 INCLUDE       28     106  ...c:\Local\REMix\remix_nz\process\225a\set_nodesdata.csv
    35      244 IF EXIST      28     108  ..c:\Local\REMix\remix_nz\process\225a\set_nodesdata.csv
    36      250 IF EXIST      28     114  ..c:\Local\REMix\remix_nz\process\225a\set_nodesmodelsel.csv
    37      250 INCLUDE       28     114  ...c:\Local\REMix\remix_nz\process\225a\set_nodesmodelsel.csv
    38      263 IF EXIST      28     116  ..c:\Local\REMix\remix_nz\process\225a\set_nodesmodelsel.csv
    39      265 IF EXIST      28     118  ..c:\Local\REMix\remix_nz\process\225a\set_nodesmodelsel.csv
    40      278 IF EXIST      28     131  ..c:\Local\REMix\remix_nz\process\225a\map_aggregatenodesmodel.csv
    41      278 INCLUDE       28     131  ...c:\Local\REMix\remix_nz\process\225a\map_aggregatenodesmodel.csv
    42      291 IF EXIST      28     133  ..c:\Local\REMix\remix_nz\process\225a\map_aggregatenodesmodel.csv
    43      294 IF EXIST      28     136  ..c:\Local\REMix\remix_nz\process\225a\map_aggregatenodesmodel.csv
    44      317 IF EXIST      28     159  ..c:\Local\REMix\remix_nz\process\225a\set_years.csv
    45      317 INCLUDE       28     159  ...c:\Local\REMix\remix_nz\process\225a\set_years.csv
    46      326 IF EXIST      28     161  ..c:\Local\REMix\remix_nz\process\225a\set_years.csv
    47      335 IF EXIST      28     170  ..c:\Local\REMix\remix_nz\process\225a\set_years.csv
    48      335 INCLUDE       28     170  ...c:\Local\REMix\remix_nz\process\225a\set_years.csv
    49      344 IF EXIST      28     172  ..c:\Local\REMix\remix_nz\process\225a\set_years.csv
    50      350 IF EXIST      28     178  ..c:\Local\REMix\remix_nz\process\225a\set_yearssel.csv
    51      350 INCLUDE       28     178  ...c:\Local\REMix\remix_nz\process\225a\set_yearssel.csv
    52      356 IF EXIST      28     180  ..c:\Local\REMix\remix_nz\process\225a\set_yearssel.csv
    53      374 IF EXIST      28     198  ..c:\Local\REMix\remix_nz\process\225a\set_activities.csv
    54      374 INCLUDE       28     198  ...c:\Local\REMix\remix_nz\process\225a\set_activities.csv
    55      383 IF EXIST      28     200  ..c:\Local\REMix\remix_nz\process\225a\set_activities.csv
    56      391 IF EXIST      28     208  ..c:\Local\REMix\remix_nz\process\225a\set_gridsegments.csv
    57      393 IF EXIST      28     210  ..c:\Local\REMix\remix_nz\process\225a\set_gridsegments.csv
    58      401 IF EXIST      28     218  ..c:\Local\REMix\remix_nz\process\225a\set_linksdata.csv
    59      401 INCLUDE       28     218  ...c:\Local\REMix\remix_nz\process\225a\set_linksdata.csv
    60      415 IF EXIST      28     220  ..c:\Local\REMix\remix_nz\process\225a\set_linksdata.csv
    61      433 IF EXIST      28     238  ..c:\Local\REMix\remix_nz\process\225a\set_link_types.csv
    62      433 INCLUDE       28     238  ...c:\Local\REMix\remix_nz\process\225a\set_link_types.csv
    63      437 IF EXIST      28     240  ..c:\Local\REMix\remix_nz\process\225a\set_link_types.csv
    64      446 IF EXIST      28     249  ..c:\Local\REMix\remix_nz\process\225a\set_commodities.csv
    65      446 INCLUDE       28     249  ...c:\Local\REMix\remix_nz\process\225a\set_commodities.csv
    66      456 IF EXIST      28     251  ..c:\Local\REMix\remix_nz\process\225a\set_commodities.csv
    67      465 IF EXIST      28     260  ..c:\Local\REMix\remix_nz\process\225a\set_indicators.csv
    68      465 INCLUDE       28     260  ...c:\Local\REMix\remix_nz\process\225a\set_indicators.csv
    69      473 IF EXIST      28     262  ..c:\Local\REMix\remix_nz\process\225a\set_indicators.csv
    70      482 IF EXIST      28     271  ..c:\Local\REMix\remix_nz\process\225a\set_converter_techs.csv
    71      482 INCLUDE       28     271  ...c:\Local\REMix\remix_nz\process\225a\set_converter_techs.csv
    72      496 IF EXIST      28     274  ..c:\Local\REMix\remix_nz\process\225a\set_storage_techs.csv
    73      496 INCLUDE       28     274  ...c:\Local\REMix\remix_nz\process\225a\set_storage_techs.csv
    74      500 IF EXIST      28     277  ..c:\Local\REMix\remix_nz\process\225a\set_transfer_techs.csv
    75      500 INCLUDE       28     277  ...c:\Local\REMix\remix_nz\process\225a\set_transfer_techs.csv
    76      504 IF EXIST      28     280  ..c:\Local\REMix\remix_nz\process\225a\set_sourcesink_techs.csv
    77      504 INCLUDE       28     280  ...c:\Local\REMix\remix_nz\process\225a\set_sourcesink_techs.csv
    78      512 IF EXIST      28     285  ..c:\Local\REMix\remix_nz\process\225a\set_converter_techs.csv
    79      512 INCLUDE       28     285  ...c:\Local\REMix\remix_nz\process\225a\set_converter_techs.csv
    80      524 IF EXIST      28     286  ..c:\Local\REMix\remix_nz\process\225a\set_converter_techs.csv
    81      528 IF EXIST      28     290  ..c:\Local\REMix\remix_nz\process\225a\set_storage_techs.csv
    82      528 INCLUDE       28     290  ...c:\Local\REMix\remix_nz\process\225a\set_storage_techs.csv
    83      530 IF EXIST      28     291  ..c:\Local\REMix\remix_nz\process\225a\set_storage_techs.csv
    84      535 IF EXIST      28     296  ..c:\Local\REMix\remix_nz\process\225a\set_transfer_techs.csv
    85      535 INCLUDE       28     296  ...c:\Local\REMix\remix_nz\process\225a\set_transfer_techs.csv
    86      537 IF EXIST      28     297  ..c:\Local\REMix\remix_nz\process\225a\set_transfer_techs.csv
    87      541 IF EXIST      28     301  ..c:\Local\REMix\remix_nz\process\225a\set_sourcesink_techs.csv
    88      541 INCLUDE       28     301  ...c:\Local\REMix\remix_nz\process\225a\set_sourcesink_techs.csv
    89      545 IF EXIST      28     302  ..c:\Local\REMix\remix_nz\process\225a\set_sourcesink_techs.csv
    90      555 IF EXIST      28     312  ..c:\Local\REMix\remix_nz\process\225a\set_degradation_states.csv
    91      557 IF EXIST      28     314  ..c:\Local\REMix\remix_nz\process\225a\set_degradation_states.csv
    92      566 IF EXIST      28     323  ..c:\Local\REMix\remix_nz\process\225a\set_soc.csv
    93      568 IF EXIST      28     325  ..c:\Local\REMix\remix_nz\process\225a\set_soc.csv
    94      584 IF EXIST      28     341  ..c:\Local\REMix\remix_nz\process\225a\transfer_linkstartend.csv
    95      584 INCLUDE       28     341  ...c:\Local\REMix\remix_nz\process\225a\transfer_linkstartend.csv
    96      611 IF EXIST      28     343  ..c:\Local\REMix\remix_nz\process\225a\transfer_linkstartend.csv
    97      625 BATINCLUDE    28     357  ...C:\Local\REMix\framework\remix\framework\model\source\battools\aggregateNodes.gms
    98      734 IF EXIST      28     464  ..c:\Local\REMix\remix_nz\process\225a\set_accnodes.csv
    99      736 IF EXIST      28     466  ..c:\Local\REMix\remix_nz\process\225a\set_accnodes.csv
   100      801 IF EXIST      28     531  ..c:\Local\REMix\remix_nz\process\225a\map_accnodes.csv
   101      803 IF EXIST      28     533  ..c:\Local\REMix\remix_nz\process\225a\map_accnodes.csv
   102      857 INCLUDE       27      22  ..C:\Local\REMix\framework\remix\framework\model\source\accounting\input.gms
   103      889 IF EXIST     102      32  ..c:\Local\REMix\remix_nz\process\225a\accounting_converterunits.csv
   104      889 INCLUDE      102      32  ...c:\Local\REMix\remix_nz\process\225a\accounting_converterunits.csv
   105      970 IF EXIST     102      34  ..c:\Local\REMix\remix_nz\process\225a\accounting_converterunits.csv
   106      984 IF EXIST     102      48  ..c:\Local\REMix\remix_nz\process\225a\accounting_converteractivity.csv
   107      986 IF EXIST     102      50  ..c:\Local\REMix\remix_nz\process\225a\accounting_converteractivity.csv
   108     1003 IF EXIST     102      67  ..c:\Local\REMix\remix_nz\process\225a\accounting_converterstartup.csv
   109     1005 IF EXIST     102      69  ..c:\Local\REMix\remix_nz\process\225a\accounting_converterstartup.csv
   110     1024 IF EXIST     102      88  ..c:\Local\REMix\remix_nz\process\225a\accounting_storageunits.csv
   111     1024 INCLUDE      102      88  ...c:\Local\REMix\remix_nz\process\225a\accounting_storageunits.csv
   112     1035 IF EXIST     102      90  ..c:\Local\REMix\remix_nz\process\225a\accounting_storageunits.csv
   113     1057 IF EXIST     102     112  ..c:\Local\REMix\remix_nz\process\225a\accounting_transferlinks.csv
   114     1057 INCLUDE      102     112  ...c:\Local\REMix\remix_nz\process\225a\accounting_transferlinks.csv
   115     1068 IF EXIST     102     114  ..c:\Local\REMix\remix_nz\process\225a\accounting_transferlinks.csv
   116     1090 IF EXIST     102     136  ..c:\Local\REMix\remix_nz\process\225a\accounting_transferperlength.csv
   117     1090 INCLUDE      102     136  ...c:\Local\REMix\remix_nz\process\225a\accounting_transferperlength.csv
   118     1109 IF EXIST     102     138  ..c:\Local\REMix\remix_nz\process\225a\accounting_transferperlength.csv
   119     1124 IF EXIST     102     153  ..c:\Local\REMix\remix_nz\process\225a\accounting_sourcesinkflow.csv
   120     1124 INCLUDE      102     153  ...c:\Local\REMix\remix_nz\process\225a\accounting_sourcesinkflow.csv
   121     1134 IF EXIST     102     155  ..c:\Local\REMix\remix_nz\process\225a\accounting_sourcesinkflow.csv
   122     1148 IF EXIST     102     169  ..c:\Local\REMix\remix_nz\process\225a\accounting_perindicator.csv
   123     1148 INCLUDE      102     169  ...c:\Local\REMix\remix_nz\process\225a\accounting_perindicator.csv
   124     1156 IF EXIST     102     171  ..c:\Local\REMix\remix_nz\process\225a\accounting_perindicator.csv
   125     1182 IF EXIST     102     197  ..c:\Local\REMix\remix_nz\process\225a\accounting_indicatorbounds.csv
   126     1182 INCLUDE      102     197  ...c:\Local\REMix\remix_nz\process\225a\accounting_indicatorbounds.csv
   127     1186 IF EXIST     102     199  ..c:\Local\REMix\remix_nz\process\225a\accounting_indicatorbounds.csv
   128     1205 IF EXIST     102     218  ..c:\Local\REMix\remix_nz\process\225a\accounting_indicatorbounds_links.csv
   129     1207 IF EXIST     102     220  ..c:\Local\REMix\remix_nz\process\225a\accounting_indicatorbounds_links.csv
   130     1213 BATINCLUDE   102     226  ...C:\Local\REMix\framework\remix\framework\model\source\battools\aggregateAccountingMean.gms
   131     1272 BATINCLUDE   102     227  ...C:\Local\REMix\framework\remix\framework\model\source\battools\aggregateAccountingMean.gms
   132     1315 BATINCLUDE   102     228  ...C:\Local\REMix\framework\remix\framework\model\source\battools\aggregateAccountingMean.gms
   133     1358 BATINCLUDE   102     229  ...C:\Local\REMix\framework\remix\framework\model\source\battools\aggregateAccountingMean.gms
   134     1417 BATINCLUDE   102     230  ...C:\Local\REMix\framework\remix\framework\model\source\battools\aggregateAccountingMean.gms
   135     1476 BATINCLUDE   102     231  ...C:\Local\REMix\framework\remix\framework\model\source\battools\aggregateAccountingMean.gms
   136     1535 BATINCLUDE   102     232  ...C:\Local\REMix\framework\remix\framework\model\source\battools\aggregateAccountingMean.gms
   137     1944 INCLUDE       27      23  ..C:\Local\REMix\framework\remix\framework\model\source\accounting\annuities.gms
   138     2016 INCLUDE       27      25  ..C:\Local\REMix\framework\remix\framework\model\source\methods\mga_pre.gms
   139     2022 INCLUDE       27      26  ..C:\Local\REMix\framework\remix\framework\model\source\methods\pareto_pre.gms
   140     2028 INCLUDE       27      27  ..C:\Local\REMix\framework\remix\framework\model\source\postcalc\declaration.gms
   141     2045 IF DEXIST    140      17  ..C:\Local\REMix\remix_nz\output\nz_profile_11nodes_2020-2030-2040-2050\result\
   142     2246 INCLUDE       27      28  ..C:\Local\REMix\framework\remix\framework\model\source\loadgdx.gms
   143     2255 INCLUDE       27      30  ..C:\Local\REMix\framework\remix\framework\model\source\core\converter.gms
   144     2358 IF EXIST     143     103  ..c:\Local\REMix\remix_nz\process\225a\converter_capacityparam.csv
   145     2358 INCLUDE      143     103  ...c:\Local\REMix\remix_nz\process\225a\converter_capacityparam.csv
   146     3208 IF EXIST     143     105  ..c:\Local\REMix\remix_nz\process\225a\converter_capacityparam.csv
   147     3216 BATINCLUDE   143     113  ...C:\Local\REMix\framework\remix\framework\model\source\battools\aggregateNodes.gms
   148     3227 BATINCLUDE   143     114  ...C:\Local\REMix\framework\remix\framework\model\source\battools\aggregateNodes.gms
   149     3260 IF EXIST     143     137  ..c:\Local\REMix\remix_nz\process\225a\converter_techparam.csv
   150     3260 INCLUDE      143     137  ...c:\Local\REMix\remix_nz\process\225a\converter_techparam.csv
   151     3302 IF EXIST     143     139  ..c:\Local\REMix\remix_nz\process\225a\converter_techparam.csv
   152     3324 IF EXIST     143     161  ..c:\Local\REMix\remix_nz\process\225a\converter_activityprofile.csv
   153     3324 INCLUDE      143     161  ...c:\Local\REMix\remix_nz\process\225a\converter_activityprofile.csv
   154     3590 IF EXIST     143     162  ..c:\Local\REMix\remix_nz\process\225a\converter_activityprofile.csv
   155     3592 IF EXIST     143     164  ..c:\Local\REMix\remix_nz\process\225a\converter_activityprofile.csv
   156     3612 IF EXIST     143     184  ..c:\Local\REMix\remix_nz\process\225a\converter_coefficient.csv
   157     3612 INCLUDE      143     184  ...c:\Local\REMix\remix_nz\process\225a\converter_coefficient.csv
   158     3762 IF EXIST     143     185  ..c:\Local\REMix\remix_nz\process\225a\converter_coefficient.csv
   159     3763 IF EXIST     143     186  ..c:\Local\REMix\remix_nz\process\225a\converter_coefficient.csv
   160     3765 IF EXIST     143     188  ..c:\Local\REMix\remix_nz\process\225a\converter_coefficient.csv
   161     3777 IF EXIST     143     200  ..c:\Local\REMix\remix_nz\process\225a\converter_coefficientprofile.csv
   162     3778 IF EXIST     143     201  ..c:\Local\REMix\remix_nz\process\225a\converter_coefficientprofile.csv
   163     3780 IF EXIST     143     203  ..c:\Local\REMix\remix_nz\process\225a\converter_coefficientprofile.csv
   164     4713 INCLUDE       27      31  ..C:\Local\REMix\framework\remix\framework\model\source\core\storage.gms
   165     4804 IF EXIST     164      91  ..c:\Local\REMix\remix_nz\process\225a\storage_reservoirparam.csv
   166     4804 INCLUDE      164      91  ...c:\Local\REMix\remix_nz\process\225a\storage_reservoirparam.csv
   167     4884 IF EXIST     164      93  ..c:\Local\REMix\remix_nz\process\225a\storage_reservoirparam.csv
   168     4888 BATINCLUDE   164      97  ...C:\Local\REMix\framework\remix\framework\model\source\battools\aggregateNodes.gms
   169     4899 BATINCLUDE   164      98  ...C:\Local\REMix\framework\remix\framework\model\source\battools\aggregateNodes.gms
   170     4935 IF EXIST     164     124  ..c:\Local\REMix\remix_nz\process\225a\storage_techparam.csv
   171     4935 INCLUDE      164     124  ...c:\Local\REMix\remix_nz\process\225a\storage_techparam.csv
   172     4942 IF EXIST     164     126  ..c:\Local\REMix\remix_nz\process\225a\storage_techparam.csv
   173     4963 IF EXIST     164     147  ..c:\Local\REMix\remix_nz\process\225a\storage_sizeparam.csv
   174     4963 INCLUDE      164     147  ...c:\Local\REMix\remix_nz\process\225a\storage_sizeparam.csv
   175     4970 IF EXIST     164     149  ..c:\Local\REMix\remix_nz\process\225a\storage_sizeparam.csv
   176     4987 IF EXIST     164     166  ..c:\Local\REMix\remix_nz\process\225a\storage_socparam.csv
   177     4989 IF EXIST     164     168  ..c:\Local\REMix\remix_nz\process\225a\storage_socparam.csv
   178     5008 IF EXIST     164     187  ..c:\Local\REMix\remix_nz\process\225a\storage_degradationparam.csv
   179     5010 IF EXIST     164     189  ..c:\Local\REMix\remix_nz\process\225a\storage_degradationparam.csv
   180     5039 IF EXIST     164     218  ..c:\Local\REMix\remix_nz\process\225a\storage_levelprofile.csv
   181     5040 IF EXIST     164     219  ..c:\Local\REMix\remix_nz\process\225a\storage_levelprofile.csv
   182     5042 IF EXIST     164     221  ..c:\Local\REMix\remix_nz\process\225a\storage_levelprofile.csv
   183     5862 INCLUDE       27      32  ..C:\Local\REMix\framework\remix\framework\model\source\core\transfer.gms
   184     5929 IF EXIST     183      73  ..c:\Local\REMix\remix_nz\process\225a\transfer_linksparam.csv
   185     5929 INCLUDE      183      73  ...c:\Local\REMix\remix_nz\process\225a\transfer_linksparam.csv
   186     5980 IF EXIST     183      75  ..c:\Local\REMix\remix_nz\process\225a\transfer_linksparam.csv
   187     5996 IF EXIST     183      91  ..c:\Local\REMix\remix_nz\process\225a\transfer_flowprofile.csv
   188     5998 IF EXIST     183      93  ..c:\Local\REMix\remix_nz\process\225a\transfer_flowprofile.csv
   189     6018 IF EXIST     183     113  ..c:\Local\REMix\remix_nz\process\225a\transfer_techparam.csv
   190     6018 INCLUDE      183     113  ...c:\Local\REMix\remix_nz\process\225a\transfer_techparam.csv
   191     6025 IF EXIST     183     115  ..c:\Local\REMix\remix_nz\process\225a\transfer_techparam.csv
   192     6039 IF EXIST     183     129  ..c:\Local\REMix\remix_nz\process\225a\transfer_coefficient.csv
   193     6039 INCLUDE      183     129  ...c:\Local\REMix\remix_nz\process\225a\transfer_coefficient.csv
   194     6046 IF EXIST     183     131  ..c:\Local\REMix\remix_nz\process\225a\transfer_coefficient.csv
   195     6060 IF EXIST     183     145  ..c:\Local\REMix\remix_nz\process\225a\transfer_coefperflow.csv
   196     6060 INCLUDE      183     145  ...c:\Local\REMix\remix_nz\process\225a\transfer_coefperflow.csv
   197     6067 IF EXIST     183     147  ..c:\Local\REMix\remix_nz\process\225a\transfer_coefperflow.csv
   198     6081 IF EXIST     183     161  ..c:\Local\REMix\remix_nz\process\225a\transfer_coefperlength.csv
   199     6081 INCLUDE      183     161  ...c:\Local\REMix\remix_nz\process\225a\transfer_coefperlength.csv
   200     6092 IF EXIST     183     163  ..c:\Local\REMix\remix_nz\process\225a\transfer_coefperlength.csv
   201     6106 IF EXIST     183     177  ..c:\Local\REMix\remix_nz\process\225a\transfer_reactperlength.csv
   202     6108 IF EXIST     183     179  ..c:\Local\REMix\remix_nz\process\225a\transfer_reactperlength.csv
   203     6122 IF EXIST     183     193  ..c:\Local\REMix\remix_nz\process\225a\transfer_lengthparam.csv
   204     6122 INCLUDE      183     193  ...c:\Local\REMix\remix_nz\process\225a\transfer_lengthparam.csv
   205     6149 IF EXIST     183     195  ..c:\Local\REMix\remix_nz\process\225a\transfer_lengthparam.csv
   206     6163 IF EXIST     183     209  ..c:\Local\REMix\remix_nz\process\225a\transfer_gridsegments.csv
   207     6165 IF EXIST     183     211  ..c:\Local\REMix\remix_nz\process\225a\transfer_gridsegments.csv
   208     6747 INCLUDE       27      33  ..C:\Local\REMix\framework\remix\framework\model\source\core\sourcesink.gms
   209     6785 IF EXIST     208      38  ..c:\Local\REMix\remix_nz\process\225a\sourcesink_config.csv
   210     6785 INCLUDE      208      38  ...c:\Local\REMix\remix_nz\process\225a\sourcesink_config.csv
   211     6887 IF EXIST     208      40  ..c:\Local\REMix\remix_nz\process\225a\sourcesink_config.csv
   212     6891 BATINCLUDE   208      44  ...C:\Local\REMix\framework\remix\framework\model\source\battools\aggregateNodes.gms
   213     6919 IF EXIST     208      62  ..c:\Local\REMix\remix_nz\process\225a\sourcesink_profile.csv
   214     6919 INCLUDE      208      62  ...c:\Local\REMix\remix_nz\process\225a\sourcesink_profile.csv
   215     6976 IF EXIST     208      63  ..c:\Local\REMix\remix_nz\process\225a\sourcesink_profile.csv
   216     6977 IF EXIST     208      64  ..c:\Local\REMix\remix_nz\process\225a\sourcesink_profile.csv
   217     6979 IF EXIST     208      66  ..c:\Local\REMix\remix_nz\process\225a\sourcesink_profile.csv
   218     6999 IF EXIST     208      86  ..c:\Local\REMix\remix_nz\process\225a\sourcesink_annualsum.csv
   219     6999 INCLUDE      208      86  ...c:\Local\REMix\remix_nz\process\225a\sourcesink_annualsum.csv
   220     7046 IF EXIST     208      88  ..c:\Local\REMix\remix_nz\process\225a\sourcesink_annualsum.csv
   221     7049 BATINCLUDE   208      91  ...C:\Local\REMix\framework\remix\framework\model\source\battools\aggregateNodes.gms
   222     7229 INCLUDE       27      34  ..C:\Local\REMix\framework\remix\framework\model\source\core\balance.gms
   223     7365 INCLUDE       27      36  ..C:\Local\REMix\framework\remix\framework\model\source\accounting\equations.gms
   224     7787 INCLUDE       27      37  ..C:\Local\REMix\framework\remix\framework\model\source\optiframe.gms
   225     7828 INCLUDE       27      71  ..C:\Local\REMix\framework\remix\framework\model\source\methods\checkanno.gms
   226     7839 INCLUDE       27      74  ..C:\Local\REMix\framework\remix\framework\model\source\methods\pips.gms
   227     7848 INCLUDE       27      77  ..C:\Local\REMix\framework\remix\framework\model\source\methods\solve.gms
   228     8054 INCLUDE       27      80  ..C:\Local\REMix\framework\remix\framework\model\source\methods\pareto.gms
   229     8063 INCLUDE       27      83  ..C:\Local\REMix\framework\remix\framework\model\source\methods\mga.gms
   230     8072 INCLUDE       27      86  ..C:\Local\REMix\framework\remix\framework\model\source\methods\iternodes.gms
   231     8081 INCLUDE       27      89  ..C:\Local\REMix\framework\remix\framework\model\source\postcalc\definition.gms
   232     8863 INCLUDE       27      90  ..C:\Local\REMix\framework\remix\framework\model\source\postcalc\writegdx.gms


COMPILATION TIME     =        7.797 SECONDS     76 MB  40.4.0 d540b52e WEX-WEI
GAMS 40.4.0  d540b52e Oct 3, 2022           WEX-WEI x86 64bit/MS Windows - 10/08/23 23:08:42 Page 3
G e n e r a l   A l g e b r a i c   M o d e l i n g   S y s t e m
Range Statistics    SOLVE remix Using MIP From line 8039


RANGE STATISTICS (ABSOLUTE NON-ZERO FINITE VALUES)

RHS       [min, max] : [ 5.000E-03, 1.165E+03] - Zero values observed as well
Bound     [min, max] : [        NA,        NA] - Zero values observed as well
Matrix    [min, max] : [ 6.000E-03, 5.981E+02]

GAMS 40.4.0  d540b52e Oct 3, 2022           WEX-WEI x86 64bit/MS Windows - 10/08/23 23:08:42 Page 4
G e n e r a l   A l g e b r a i c   M o d e l i n g   S y s t e m
Model Statistics    SOLVE remix Using MIP From line 8039


LOOPS                           optiframeToCalc   of1


MODEL STATISTICS

BLOCKS OF EQUATIONS          75     SINGLE EQUATIONS   23,881,712
BLOCKS OF VARIABLES          38     SINGLE VARIABLES   22,244,779
NON ZERO ELEMENTS    64,982,413


GENERATION TIME      =      125.078 SECONDS 12,276 MB  40.4.0 d540b52e WEX-WEI


EXECUTION TIME       =      173.625 SECONDS 12,276 MB  40.4.0 d540b52e WEX-WEI
               L O O P S         optiframeToCalc of1

GAMS 40.4.0  d540b52e Oct 3, 2022           WEX-WEI x86 64bit/MS Windows - 10/08/23 23:08:42 Page 5
G e n e r a l   A l g e b r a i c   M o d e l i n g   S y s t e m
Solution Report     SOLVE remix Using MIP From line 8039


               S O L V E      S U M M A R Y

     MODEL   remix               OBJECTIVE  accounting_objective
     TYPE    MIP                 DIRECTION  MINIMIZE
     SOLVER  CPLEX               FROM LINE  8039

**** SOLVER STATUS     1 Normal Completion
**** MODEL STATUS      1 Optimal
**** OBJECTIVE VALUE            17891.1030

 RESOURCE USAGE, LIMIT     145092.672    604800.000
 ITERATION COUNT, LIMIT       115    2147483647
--- GAMS/Cplex Link licensed for continuous and discrete problems.

Reading parameter(s) from "c:\Local\REMix\remix_nz\process\cplex.opt"
>>  rerun no
>>  lpmethod 4
>>  barorder 0
>>  preind 1
>>  scaind 0
>>  predual -1
>>  baralg 0
>>  barstartalg 1
>>  barepcomp 1e-6
>>  solutiontype 2
>>  startalg 4
>>  epgap 1e-3
>>  quality 1
>>  barcolnz 0
>>  threads 4
>>  parallelmode 1
Finished reading from "c:\Local\REMix\remix_nz\process\cplex.opt"

--- GMO setup time: 0.00s
--- Space for names approximately 3096.00 Mb
--- Use option 'names no' to turn use of names off
--- GMO memory 8247.51 Mb (peak 8417.23 Mb)
--- Dictionary memory 0.00 Mb
--- Cplex 22.1.0.0 link memory 697.59 Mb (peak 4984.31 Mb)
--- Starting Cplex


--- LP status (1): optimal.
--- Cplex Time: 145052.92sec (det. 69545657.03 ticks)


Optimal solution found
Objective:        17891.103000

Solution Quality Statistics:
                                   unscaled                scaled
                               max         sum         max         sum
primal infeasibility        2.826e-04   1.212e+00   2.826e-04   1.079e+00
dual infeasibility          3.309e-24   5.586e-22   3.309e-24   5.586e-22
primal residual             1.101e-13   3.079e-10   1.101e-13   3.079e-10
dual residual               1.420e-07   2.382e-06   1.420e-07   2.382e-06
primal solution vector      1.789e+04   6.954e+06   1.789e+04   6.954e+06
dual solution vector        5.981e+02   6.038e+05   5.981e+02   6.038e+05
slacks                      1.164e+03   3.445e+06   1.164e+03   3.445e+06
reduced costs               5.981e+02   1.473e+06   5.981e+02   1.473e+06
comp. slackness viol.       8.808e-05   7.413e-02




**** REPORT SUMMARY :        0     NONOPT
                             0 INFEASIBLE
                             0  UNBOUNDED
GAMS 40.4.0  d540b52e Oct 3, 2022           WEX-WEI x86 64bit/MS Windows - 10/08/23 23:08:42 Page 6
G e n e r a l   A l g e b r a i c   M o d e l i n g   S y s t e m
E x e c u t i o n


**** REPORT FILE SUMMARY

opt c:\Local\REMix\remix_nz\process\cplex.opt


EXECUTION TIME       =      114.484 SECONDS  8,243 MB  40.4.0 d540b52e WEX-WEI


USER: Medium MUD - 10 User License                   S220920|0002AO-GEN
      University of Canterbury, Civil Engineering Department    DC16319
      License for teaching and research at degree granting institutions


**** FILE SUMMARY

Input      C:\Local\REMix\framework\remix\framework\model\run_remix.gms
Output     c:\Local\REMix\remix_nz\process\run_remix.lst
