GAMS 40.4.0  d540b52e Oct 3, 2022           WEX-WEI x86 64bit/MS Windows - 03/08/24 20:08:10 Page 1
G e n e r a l   A l g e b r a i c   M o d e l i n g   S y s t e m
C o m p i l a t i o n


   1  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
   2  * SPDX-License-Identifier: BSD-3-Clause
   3   
   4  * ==== REMix version number ====
   6   
   7  * ==== global settings ====
  12   
  14   
  15  * ==== write metadata and inherit dataset ====
INCLUDE    C:\Local\REMix\framework\remix\framework\model\source\metadata.gms
  24   
  28   
  44   
  60   
  61  set metadata(*) /
INCLUDE    c:\Local\REMix\remix_nz\process\225a\metadata
  63  remix_version "0.9.7"
  64  gams_version "40.4.0"
  65  timestamp "03/08/24 20:08:10"
  66  framework_path "C:\Local\REMix\framework\remix\framework\model\source"
  67   
  68  framework_hash 9d4a169686204284fc3108d6f50da76f2650ac60
  69   
  70  framework_branch "main"
  71   
  72  project_path "C:\Local\REMix\remix_nz\output\will\02-battery-overnight_2020-2035-2050\data"
  73   
  74  project_hash "9d4a169686204284fc3108d6f50da76f2650ac60"
  75   
  76  project_branch "main"
  77   
  78  /;
INCLUDE    C:\Local\REMix\framework\remix\framework\model\source\data_inheritance.gms
  80  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
  81  * SPDX-License-Identifier: BSD-3-Clause
  82   
  85   
  90   
  91  * pandas based data inheritance reading in the dat files, merging them and writing csv files in the scrdir
 113  ;
 114   
 118   
 119  * ==== run remix ====
INCLUDE    C:\Local\REMix\framework\remix\framework\model\source\remix.gms
 124  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
 125  * SPDX-License-Identifier: BSD-3-Clause
 126   
 127  * ==== global settings ====
 135   
 138   
 140   
 143   
 144  * ==== include modules ====
INCLUDE    C:\Local\REMix\framework\remix\framework\model\source\sets.gms
 146  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
 147  * SPDX-License-Identifier: BSD-3-Clause
 148   
 149  * // # sets
 150  * // Sets are the indices of variables and parameters.
 151   
 152  * // ## Reference
 153  * // {special_table_sets}
 154   
 155  * // ## Input Files
 156  * // {special_table_set_input_files}
1063   
1064  map_accNodes(accNodesModel,accNodesModel_aggregation)
1065      $sum((nodesData, nodesModelToCalc)
1066              $( sameas(nodesModelToCalc,accNodesModel)
1067                  and map_accNodesLoad(nodesData,accNodesModel_aggregation)
1068                  and aggregateNodesModel(nodesData,nodesModelToCalc)), 1) = yes;
1069   
1070  map_accNodes(accNodesModel,"global")$sum(nodesModelToCalc$sameas(accNodesModel,nodesModelToCalc), 1) = yes;
1071  map_accNodes(accNodesModel,"global")$sum(accNodes$sameas(accNodesModel,accNodes), 1) = yes;
1072  map_accNodes(accNodesModel,accNodesModel) = yes;
1073  map_accLinks(accLinksModel,"global")$sum(linksModelToCalc$sameas(accLinksModel,linksModelToCalc), 1) = yes;
1074  map_accLinks(accLinksModel,accLinksModel) = yes;
1075  map_accYears(accYears,"horizon")$sum(yearsToCalc$sameas(accYears,yearsToCalc), 1)  = yes;
1076  map_accYears(accYears,accYears) = yes;
1077   
1078  map_accNodesToCalc(accNodesModel,nodesModelToCalc)
1079      $sum((nodesData)
1080              $( map_accNodesLoad(nodesData,accNodesModel)
1081                  and aggregateNodesModel(nodesData,nodesModelToCalc)), 1) = yes;
1082   
1083  map_accNodesToCalc("global",nodesModelToCalc) = yes;
1084  map_accNodesToCalc(accNodesModel,nodesModelToCalc)$sameas(accNodesModel,nodesModelToCalc) = yes;
1085  map_accLinksToCalc("global",linksModelToCalc) = yes;
1086  map_accLinksToCalc(accLinksModel,linksModelToCalc)$sameas(accLinksModel,linksModelToCalc) = yes;
1087  map_accYearsToCalc("horizon",yearsToCalc) = yes;
1088  map_accYearsToCalc(accYears,yearsToCalc)$sameas(accYears,yearsToCalc) = yes;
1089   
1090  * Duplicate sets for postcalc reporting without horizon and accYears
1091  map_accNodesPostCalc(accNodesModel,nodesModelToCalc) = map_accNodesToCalc(accNodesModel,nodesModelToCalc);
1092  map_accLinksPostCalc(accLinksModel,linksModelToCalc) = map_accLinksToCalc(accLinksModel,linksModelToCalc);
1093  map_accYearsPostCalc(accYears,yearsToCalc)$sameas(accYears,yearsToCalc) = yes;
1094  map_accYearsPostCalc(accYears,years)$(sameas(accYears,years) and years.val < sum(yearsToCalc$(ord(yearsToCalc) = 1), yearsToCalc.val)) = yes;
1095   
1096  set map_nodesAccounting(accNodesModel_aggregation,accNodesModel) "Map accounting nodes describes the mapping between model accounting nodes and data nodes." ;
1097  option map_nodesAccounting < map_accNodes;
1098   
1099  * ==== Generic sets  ====
1100  * These set names are repeated across different profile parameters.
1101  * they are not strictly related to each other and are not input data but
1102  * are needed for validation.
1103  ** // PROFILE: profileTypes | Profile Types | OEO_00140056:flow potential | set_profiletypes.csv
1104   
1105  ** // SET: scenario | Scenario | OEO_00000364:scenario | set_scenarios.csv
1106  * "Scenario indexes help to differentiate scenarios." /
1107   
1108  ** // SET: capType | Capacity Types | OEO_00030019:balance process attribute | set_captypes.csv
1109  * "Capacity types differentiate investment decisions." /
1110   
1111  ** // SET: balanceType | Balance Types | OEO_00030019:balance process attribute | set_balancetypes.csv
1112  * "Balance types differentiate types of balances." /
INCLUDE    C:\Local\REMix\framework\remix\framework\model\source\accounting\input.gms
1114  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
1115  * SPDX-License-Identifier: BSD-3-Clause
1116   
1117  * // # accounting_input
1118  * // The parameters in this file describe the accounting of indicators in the model.
1119   
1120  * // ## Variables
1121  * // {special_table_input_variables}
1532   
1533  * Aggregate accounting parameters
BATINCLUDE C:\Local\REMix\framework\remix\framework\model\source\battools\aggregateAccountingMean.gms
1535  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
1536  * SPDX-License-Identifier: BSD-3-Clause
1537   
1539   
1541   
1542  set accounting_converterUnitsNonzero(indicator,accnodesData,converter_techs,vintage);
1543  accounting_converterUnitsNonzero(indicator,accnodesData,converter_techs,vintage)
1544      $sum(pc_accounting_converterUnits$accounting_converterUnitsIn(indicator,accnodesData,converter_techs,vintage,pc_accounting_converterUnits), 1)
1545      = yes;
1546   
1548  set accounting_converterUnitsChk(indicator,nodesModel,converter_techs,vintage,pc_accounting_converterUnits);
1549  accounting_converterUnitsChk(indicator,nodesModel,converter_techs,vintage,"useAnnuity")
1550      $sum((nodesData,accnodesData)
1551              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1552                  and accounting_converterUnitsNonzero(indicator,accnodesData,converter_techs,vintage)), 1)
1553      = smax((nodesData,accnodesData)
1554              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1555                  and accounting_converterUnitsNonzero(indicator,accnodesData,converter_techs,vintage)),
1556          accounting_converterUnitsIn(indicator,accnodesData,converter_techs,vintage,"useAnnuity"))
1557      - smin((nodesData,accnodesData)
1558              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1559                  and accounting_converterUnitsNonzero(indicator,accnodesData,converter_techs,vintage)),
1560          accounting_converterUnitsIn(indicator,accnodesData,converter_techs,vintage,"useAnnuity"));
1561   
1562  abort$sum(accounting_converterUnitsChk(indicator,nodesModel,converter_techs,vintage,pc_accounting_converterUnits), 1) "Cannot aggregate technologies with different useAnnuity values."
1564   
1565  parameter accounting_converterUnitsAgg(indicator,nodesModel,converter_techs,vintage,pc_accounting_converterUnits);
1566  accounting_converterUnitsAgg(indicator,nodesModel,converter_techs,vintage,pc_accounting_converterUnits)
1567      $sum((nodesData,accnodesData)
1568              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1569                  and accounting_converterUnitsNonzero(indicator,accnodesData,converter_techs,vintage)), 1)
1570      = sum((nodesData,accnodesData)
1571              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1572                  and accounting_converterUnitsNonzero(indicator,accnodesData,converter_techs,vintage)),
1573          accounting_converterUnitsIn(indicator,accnodesData,converter_techs,vintage,pc_accounting_converterUnits))
1574      / sum((nodesData,accnodesData)
1575              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1576                  and accounting_converterUnitsNonzero(indicator,accnodesData,converter_techs,vintage)),
1577          1);
1578   
1579  parameter accounting_converterUnits(indicator,nodesModel,converter_techs,vintage,pc_accounting_converterUnits);
1580  loop(accnodes,
1581  accounting_converterUnits(indicator,nodesModel,converter_techs,vintage,pc_accounting_converterUnits)
1582      $sum(accnodesData$(map_accnodesToCalc(accnodes,nodesModel) and sameas(accnodes,accnodesData)
1583                              and accounting_converterUnitsIn(indicator,accnodesData,converter_techs,vintage,pc_accounting_converterUnits)), 1)
1584      = sum(accnodesData$(map_accnodesToCalc(accnodes,nodesModel) and sameas(accnodes,accnodesData)),
1585              accounting_converterUnitsIn(indicator,accnodesData,converter_techs,vintage,pc_accounting_converterUnits));
1586  );
1587   
1588  accounting_converterUnits(indicator,nodesModel,converter_techs,vintage,pc_accounting_converterUnits)
1589      $accounting_converterUnitsAgg(indicator,nodesModel,converter_techs,vintage,pc_accounting_converterUnits)
1590      = accounting_converterUnitsAgg(indicator,nodesModel,converter_techs,vintage,pc_accounting_converterUnits);
1591   
1592  * option kill %paramName%Nonzero %paramName%Chk %paramName%Agg
BATINCLUDE C:\Local\REMix\framework\remix\framework\model\source\battools\aggregateAccountingMean.gms
1594  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
1595  * SPDX-License-Identifier: BSD-3-Clause
1596   
1598   
1600   
1601  set accounting_converterActivityNonzero(indicator,accnodesData,converter_techs,vintage,activity);
1602  accounting_converterActivityNonzero(indicator,accnodesData,converter_techs,vintage,activity)
1603      $sum(pc_accounting_converterActivity$accounting_converterActivityIn(indicator,accnodesData,converter_techs,vintage,activity,pc_accounting_converterActivity), 1)
1604      = yes;
1605   
1607   
1608  parameter accounting_converterActivityAgg(indicator,nodesModel,converter_techs,vintage,activity,pc_accounting_converterActivity);
1609  accounting_converterActivityAgg(indicator,nodesModel,converter_techs,vintage,activity,pc_accounting_converterActivity)
1610      $sum((nodesData,accnodesData)
1611              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1612                  and accounting_converterActivityNonzero(indicator,accnodesData,converter_techs,vintage,activity)), 1)
1613      = sum((nodesData,accnodesData)
1614              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1615                  and accounting_converterActivityNonzero(indicator,accnodesData,converter_techs,vintage,activity)),
1616          accounting_converterActivityIn(indicator,accnodesData,converter_techs,vintage,activity,pc_accounting_converterActivity))
1617      / sum((nodesData,accnodesData)
1618              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1619                  and accounting_converterActivityNonzero(indicator,accnodesData,converter_techs,vintage,activity)),
1620          1);
1621   
1622  parameter accounting_converterActivity(indicator,nodesModel,converter_techs,vintage,activity,pc_accounting_converterActivity);
1623  loop(accnodes,
1624  accounting_converterActivity(indicator,nodesModel,converter_techs,vintage,activity,pc_accounting_converterActivity)
1625      $sum(accnodesData$(map_accnodesToCalc(accnodes,nodesModel) and sameas(accnodes,accnodesData)
1626                              and accounting_converterActivityIn(indicator,accnodesData,converter_techs,vintage,activity,pc_accounting_converterActivity)), 1)
1627      = sum(accnodesData$(map_accnodesToCalc(accnodes,nodesModel) and sameas(accnodes,accnodesData)),
1628              accounting_converterActivityIn(indicator,accnodesData,converter_techs,vintage,activity,pc_accounting_converterActivity));
1629  );
1630   
1631  accounting_converterActivity(indicator,nodesModel,converter_techs,vintage,activity,pc_accounting_converterActivity)
1632      $accounting_converterActivityAgg(indicator,nodesModel,converter_techs,vintage,activity,pc_accounting_converterActivity)
1633      = accounting_converterActivityAgg(indicator,nodesModel,converter_techs,vintage,activity,pc_accounting_converterActivity);
1634   
1635  * option kill %paramName%Nonzero %paramName%Chk %paramName%Agg
BATINCLUDE C:\Local\REMix\framework\remix\framework\model\source\battools\aggregateAccountingMean.gms
1637  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
1638  * SPDX-License-Identifier: BSD-3-Clause
1639   
1641   
1643   
1644  set accounting_converterStartupNonzero(indicator,accnodesData,converter_techs,vintage);
1645  accounting_converterStartupNonzero(indicator,accnodesData,converter_techs,vintage)
1646      $sum(pc_accounting_converterStartup$accounting_converterStartupIn(indicator,accnodesData,converter_techs,vintage,pc_accounting_converterStartup), 1)
1647      = yes;
1648   
1650   
1651  parameter accounting_converterStartupAgg(indicator,nodesModel,converter_techs,vintage,pc_accounting_converterStartup);
1652  accounting_converterStartupAgg(indicator,nodesModel,converter_techs,vintage,pc_accounting_converterStartup)
1653      $sum((nodesData,accnodesData)
1654              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1655                  and accounting_converterStartupNonzero(indicator,accnodesData,converter_techs,vintage)), 1)
1656      = sum((nodesData,accnodesData)
1657              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1658                  and accounting_converterStartupNonzero(indicator,accnodesData,converter_techs,vintage)),
1659          accounting_converterStartupIn(indicator,accnodesData,converter_techs,vintage,pc_accounting_converterStartup))
1660      / sum((nodesData,accnodesData)
1661              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1662                  and accounting_converterStartupNonzero(indicator,accnodesData,converter_techs,vintage)),
1663          1);
1664   
1665  parameter accounting_converterStartup(indicator,nodesModel,converter_techs,vintage,pc_accounting_converterStartup);
1666  loop(accnodes,
1667  accounting_converterStartup(indicator,nodesModel,converter_techs,vintage,pc_accounting_converterStartup)
1668      $sum(accnodesData$(map_accnodesToCalc(accnodes,nodesModel) and sameas(accnodes,accnodesData)
1669                              and accounting_converterStartupIn(indicator,accnodesData,converter_techs,vintage,pc_accounting_converterStartup)), 1)
1670      = sum(accnodesData$(map_accnodesToCalc(accnodes,nodesModel) and sameas(accnodes,accnodesData)),
1671              accounting_converterStartupIn(indicator,accnodesData,converter_techs,vintage,pc_accounting_converterStartup));
1672  );
1673   
1674  accounting_converterStartup(indicator,nodesModel,converter_techs,vintage,pc_accounting_converterStartup)
1675      $accounting_converterStartupAgg(indicator,nodesModel,converter_techs,vintage,pc_accounting_converterStartup)
1676      = accounting_converterStartupAgg(indicator,nodesModel,converter_techs,vintage,pc_accounting_converterStartup);
1677   
1678  * option kill %paramName%Nonzero %paramName%Chk %paramName%Agg
BATINCLUDE C:\Local\REMix\framework\remix\framework\model\source\battools\aggregateAccountingMean.gms
1680  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
1681  * SPDX-License-Identifier: BSD-3-Clause
1682   
1684   
1686   
1687  set accounting_storageUnitsNonzero(indicator,accnodesData,storage_techs,vintage);
1688  accounting_storageUnitsNonzero(indicator,accnodesData,storage_techs,vintage)
1689      $sum(pc_accounting_storageUnits$accounting_storageUnitsIn(indicator,accnodesData,storage_techs,vintage,pc_accounting_storageUnits), 1)
1690      = yes;
1691   
1693  set accounting_storageUnitsChk(indicator,nodesModel,storage_techs,vintage,pc_accounting_storageUnits);
1694  accounting_storageUnitsChk(indicator,nodesModel,storage_techs,vintage,"useAnnuity")
1695      $sum((nodesData,accnodesData)
1696              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1697                  and accounting_storageUnitsNonzero(indicator,accnodesData,storage_techs,vintage)), 1)
1698      = smax((nodesData,accnodesData)
1699              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1700                  and accounting_storageUnitsNonzero(indicator,accnodesData,storage_techs,vintage)),
1701          accounting_storageUnitsIn(indicator,accnodesData,storage_techs,vintage,"useAnnuity"))
1702      - smin((nodesData,accnodesData)
1703              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1704                  and accounting_storageUnitsNonzero(indicator,accnodesData,storage_techs,vintage)),
1705          accounting_storageUnitsIn(indicator,accnodesData,storage_techs,vintage,"useAnnuity"));
1706   
1707  abort$sum(accounting_storageUnitsChk(indicator,nodesModel,storage_techs,vintage,pc_accounting_storageUnits), 1) "Cannot aggregate technologies with different useAnnuity values."
1709   
1710  parameter accounting_storageUnitsAgg(indicator,nodesModel,storage_techs,vintage,pc_accounting_storageUnits);
1711  accounting_storageUnitsAgg(indicator,nodesModel,storage_techs,vintage,pc_accounting_storageUnits)
1712      $sum((nodesData,accnodesData)
1713              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1714                  and accounting_storageUnitsNonzero(indicator,accnodesData,storage_techs,vintage)), 1)
1715      = sum((nodesData,accnodesData)
1716              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1717                  and accounting_storageUnitsNonzero(indicator,accnodesData,storage_techs,vintage)),
1718          accounting_storageUnitsIn(indicator,accnodesData,storage_techs,vintage,pc_accounting_storageUnits))
1719      / sum((nodesData,accnodesData)
1720              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1721                  and accounting_storageUnitsNonzero(indicator,accnodesData,storage_techs,vintage)),
1722          1);
1723   
1724  parameter accounting_storageUnits(indicator,nodesModel,storage_techs,vintage,pc_accounting_storageUnits);
1725  loop(accnodes,
1726  accounting_storageUnits(indicator,nodesModel,storage_techs,vintage,pc_accounting_storageUnits)
1727      $sum(accnodesData$(map_accnodesToCalc(accnodes,nodesModel) and sameas(accnodes,accnodesData)
1728                              and accounting_storageUnitsIn(indicator,accnodesData,storage_techs,vintage,pc_accounting_storageUnits)), 1)
1729      = sum(accnodesData$(map_accnodesToCalc(accnodes,nodesModel) and sameas(accnodes,accnodesData)),
1730              accounting_storageUnitsIn(indicator,accnodesData,storage_techs,vintage,pc_accounting_storageUnits));
1731  );
1732   
1733  accounting_storageUnits(indicator,nodesModel,storage_techs,vintage,pc_accounting_storageUnits)
1734      $accounting_storageUnitsAgg(indicator,nodesModel,storage_techs,vintage,pc_accounting_storageUnits)
1735      = accounting_storageUnitsAgg(indicator,nodesModel,storage_techs,vintage,pc_accounting_storageUnits);
1736   
1737  * option kill %paramName%Nonzero %paramName%Chk %paramName%Agg
BATINCLUDE C:\Local\REMix\framework\remix\framework\model\source\battools\aggregateAccountingMean.gms
1739  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
1740  * SPDX-License-Identifier: BSD-3-Clause
1741   
1743   
1745   
1746  set accounting_transferLinksNonzero(indicator,acclinksData,transfer_techs,vintage);
1747  accounting_transferLinksNonzero(indicator,acclinksData,transfer_techs,vintage)
1748      $sum(pc_accounting_transferLinks$accounting_transferLinksIn(indicator,acclinksData,transfer_techs,vintage,pc_accounting_transferLinks), 1)
1749      = yes;
1750   
1752  set accounting_transferLinksChk(indicator,linksModel,transfer_techs,vintage,pc_accounting_transferLinks);
1753  accounting_transferLinksChk(indicator,linksModel,transfer_techs,vintage,"useAnnuity")
1754      $sum((linksData,acclinksData)
1755              $(aggregatelinksModel(linksData,linksModel) and sameas(linksData,acclinksData)
1756                  and accounting_transferLinksNonzero(indicator,acclinksData,transfer_techs,vintage)), 1)
1757      = smax((linksData,acclinksData)
1758              $(aggregatelinksModel(linksData,linksModel) and sameas(linksData,acclinksData)
1759                  and accounting_transferLinksNonzero(indicator,acclinksData,transfer_techs,vintage)),
1760          accounting_transferLinksIn(indicator,acclinksData,transfer_techs,vintage,"useAnnuity"))
1761      - smin((linksData,acclinksData)
1762              $(aggregatelinksModel(linksData,linksModel) and sameas(linksData,acclinksData)
1763                  and accounting_transferLinksNonzero(indicator,acclinksData,transfer_techs,vintage)),
1764          accounting_transferLinksIn(indicator,acclinksData,transfer_techs,vintage,"useAnnuity"));
1765   
1766  abort$sum(accounting_transferLinksChk(indicator,linksModel,transfer_techs,vintage,pc_accounting_transferLinks), 1) "Cannot aggregate technologies with different useAnnuity values."
1768   
1769  parameter accounting_transferLinksAgg(indicator,linksModel,transfer_techs,vintage,pc_accounting_transferLinks);
1770  accounting_transferLinksAgg(indicator,linksModel,transfer_techs,vintage,pc_accounting_transferLinks)
1771      $sum((linksData,acclinksData)
1772              $(aggregatelinksModel(linksData,linksModel) and sameas(linksData,acclinksData)
1773                  and accounting_transferLinksNonzero(indicator,acclinksData,transfer_techs,vintage)), 1)
1774      = sum((linksData,acclinksData)
1775              $(aggregatelinksModel(linksData,linksModel) and sameas(linksData,acclinksData)
1776                  and accounting_transferLinksNonzero(indicator,acclinksData,transfer_techs,vintage)),
1777          accounting_transferLinksIn(indicator,acclinksData,transfer_techs,vintage,pc_accounting_transferLinks))
1778      / sum((linksData,acclinksData)
1779              $(aggregatelinksModel(linksData,linksModel) and sameas(linksData,acclinksData)
1780                  and accounting_transferLinksNonzero(indicator,acclinksData,transfer_techs,vintage)),
1781          1);
1782   
1783  parameter accounting_transferLinks(indicator,linksModel,transfer_techs,vintage,pc_accounting_transferLinks);
1784  loop(acclinks,
1785  accounting_transferLinks(indicator,linksModel,transfer_techs,vintage,pc_accounting_transferLinks)
1786      $sum(acclinksData$(map_acclinksToCalc(acclinks,linksModel) and sameas(acclinks,acclinksData)
1787                              and accounting_transferLinksIn(indicator,acclinksData,transfer_techs,vintage,pc_accounting_transferLinks)), 1)
1788      = sum(acclinksData$(map_acclinksToCalc(acclinks,linksModel) and sameas(acclinks,acclinksData)),
1789              accounting_transferLinksIn(indicator,acclinksData,transfer_techs,vintage,pc_accounting_transferLinks));
1790  );
1791   
1792  accounting_transferLinks(indicator,linksModel,transfer_techs,vintage,pc_accounting_transferLinks)
1793      $accounting_transferLinksAgg(indicator,linksModel,transfer_techs,vintage,pc_accounting_transferLinks)
1794      = accounting_transferLinksAgg(indicator,linksModel,transfer_techs,vintage,pc_accounting_transferLinks);
1795   
1796  * option kill %paramName%Nonzero %paramName%Chk %paramName%Agg
BATINCLUDE C:\Local\REMix\framework\remix\framework\model\source\battools\aggregateAccountingMean.gms
1798  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
1799  * SPDX-License-Identifier: BSD-3-Clause
1800   
1802   
1804   
1805  set accounting_transferPerLengthNonzero(indicator,acclinksData,transfer_techs,vintage,link_types);
1806  accounting_transferPerLengthNonzero(indicator,acclinksData,transfer_techs,vintage,link_types)
1807      $sum(pc_accounting_transferPerLength$accounting_transferPerLengthIn(indicator,acclinksData,transfer_techs,vintage,link_types,pc_accounting_transferPerLength), 1)
1808      = yes;
1809   
1811  set accounting_transferPerLengthChk(indicator,linksModel,transfer_techs,vintage,link_types,pc_accounting_transferPerLength);
1812  accounting_transferPerLengthChk(indicator,linksModel,transfer_techs,vintage,link_types,"useAnnuity")
1813      $sum((linksData,acclinksData)
1814              $(aggregatelinksModel(linksData,linksModel) and sameas(linksData,acclinksData)
1815                  and accounting_transferPerLengthNonzero(indicator,acclinksData,transfer_techs,vintage,link_types)), 1)
1816      = smax((linksData,acclinksData)
1817              $(aggregatelinksModel(linksData,linksModel) and sameas(linksData,acclinksData)
1818                  and accounting_transferPerLengthNonzero(indicator,acclinksData,transfer_techs,vintage,link_types)),
1819          accounting_transferPerLengthIn(indicator,acclinksData,transfer_techs,vintage,link_types,"useAnnuity"))
1820      - smin((linksData,acclinksData)
1821              $(aggregatelinksModel(linksData,linksModel) and sameas(linksData,acclinksData)
1822                  and accounting_transferPerLengthNonzero(indicator,acclinksData,transfer_techs,vintage,link_types)),
1823          accounting_transferPerLengthIn(indicator,acclinksData,transfer_techs,vintage,link_types,"useAnnuity"));
1824   
1825  abort$sum(accounting_transferPerLengthChk(indicator,linksModel,transfer_techs,vintage,link_types,pc_accounting_transferPerLength), 1) "Cannot aggregate technologies with different useAnnuity values."
1827   
1828  parameter accounting_transferPerLengthAgg(indicator,linksModel,transfer_techs,vintage,link_types,pc_accounting_transferPerLength);
1829  accounting_transferPerLengthAgg(indicator,linksModel,transfer_techs,vintage,link_types,pc_accounting_transferPerLength)
1830      $sum((linksData,acclinksData)
1831              $(aggregatelinksModel(linksData,linksModel) and sameas(linksData,acclinksData)
1832                  and accounting_transferPerLengthNonzero(indicator,acclinksData,transfer_techs,vintage,link_types)), 1)
1833      = sum((linksData,acclinksData)
1834              $(aggregatelinksModel(linksData,linksModel) and sameas(linksData,acclinksData)
1835                  and accounting_transferPerLengthNonzero(indicator,acclinksData,transfer_techs,vintage,link_types)),
1836          accounting_transferPerLengthIn(indicator,acclinksData,transfer_techs,vintage,link_types,pc_accounting_transferPerLength))
1837      / sum((linksData,acclinksData)
1838              $(aggregatelinksModel(linksData,linksModel) and sameas(linksData,acclinksData)
1839                  and accounting_transferPerLengthNonzero(indicator,acclinksData,transfer_techs,vintage,link_types)),
1840          1);
1841   
1842  parameter accounting_transferPerLength(indicator,linksModel,transfer_techs,vintage,link_types,pc_accounting_transferPerLength);
1843  loop(acclinks,
1844  accounting_transferPerLength(indicator,linksModel,transfer_techs,vintage,link_types,pc_accounting_transferPerLength)
1845      $sum(acclinksData$(map_acclinksToCalc(acclinks,linksModel) and sameas(acclinks,acclinksData)
1846                              and accounting_transferPerLengthIn(indicator,acclinksData,transfer_techs,vintage,link_types,pc_accounting_transferPerLength)), 1)
1847      = sum(acclinksData$(map_acclinksToCalc(acclinks,linksModel) and sameas(acclinks,acclinksData)),
1848              accounting_transferPerLengthIn(indicator,acclinksData,transfer_techs,vintage,link_types,pc_accounting_transferPerLength));
1849  );
1850   
1851  accounting_transferPerLength(indicator,linksModel,transfer_techs,vintage,link_types,pc_accounting_transferPerLength)
1852      $accounting_transferPerLengthAgg(indicator,linksModel,transfer_techs,vintage,link_types,pc_accounting_transferPerLength)
1853      = accounting_transferPerLengthAgg(indicator,linksModel,transfer_techs,vintage,link_types,pc_accounting_transferPerLength);
1854   
1855  * option kill %paramName%Nonzero %paramName%Chk %paramName%Agg
BATINCLUDE C:\Local\REMix\framework\remix\framework\model\source\battools\aggregateAccountingMean.gms
1857  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
1858  * SPDX-License-Identifier: BSD-3-Clause
1859   
1861   
1863   
1864  set accounting_sourcesinkFlowNonzero(indicator,accnodesData,years,sourcesink_techs,commodity);
1865  accounting_sourcesinkFlowNonzero(indicator,accnodesData,years,sourcesink_techs,commodity)
1866      $sum(pc_accounting_sourcesinkFlow$accounting_sourcesinkFlowIn(indicator,accnodesData,years,sourcesink_techs,commodity,pc_accounting_sourcesinkFlow), 1)
1867      = yes;
1868   
1870   
1871  parameter accounting_sourcesinkFlowAgg(indicator,nodesModel,years,sourcesink_techs,commodity,pc_accounting_sourcesinkFlow);
1872  accounting_sourcesinkFlowAgg(indicator,nodesModel,years,sourcesink_techs,commodity,pc_accounting_sourcesinkFlow)
1873      $sum((nodesData,accnodesData)
1874              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1875                  and accounting_sourcesinkFlowNonzero(indicator,accnodesData,years,sourcesink_techs,commodity)), 1)
1876      = sum((nodesData,accnodesData)
1877              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1878                  and accounting_sourcesinkFlowNonzero(indicator,accnodesData,years,sourcesink_techs,commodity)),
1879          accounting_sourcesinkFlowIn(indicator,accnodesData,years,sourcesink_techs,commodity,pc_accounting_sourcesinkFlow))
1880      / sum((nodesData,accnodesData)
1881              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1882                  and accounting_sourcesinkFlowNonzero(indicator,accnodesData,years,sourcesink_techs,commodity)),
1883          1);
1884   
1885  parameter accounting_sourcesinkFlow(indicator,nodesModel,years,sourcesink_techs,commodity,pc_accounting_sourcesinkFlow);
1886  loop(accnodes,
1887  accounting_sourcesinkFlow(indicator,nodesModel,years,sourcesink_techs,commodity,pc_accounting_sourcesinkFlow)
1888      $sum(accnodesData$(map_accnodesToCalc(accnodes,nodesModel) and sameas(accnodes,accnodesData)
1889                              and accounting_sourcesinkFlowIn(indicator,accnodesData,years,sourcesink_techs,commodity,pc_accounting_sourcesinkFlow)), 1)
1890      = sum(accnodesData$(map_accnodesToCalc(accnodes,nodesModel) and sameas(accnodes,accnodesData)),
1891              accounting_sourcesinkFlowIn(indicator,accnodesData,years,sourcesink_techs,commodity,pc_accounting_sourcesinkFlow));
1892  );
1893   
1894  accounting_sourcesinkFlow(indicator,nodesModel,years,sourcesink_techs,commodity,pc_accounting_sourcesinkFlow)
1895      $accounting_sourcesinkFlowAgg(indicator,nodesModel,years,sourcesink_techs,commodity,pc_accounting_sourcesinkFlow)
1896      = accounting_sourcesinkFlowAgg(indicator,nodesModel,years,sourcesink_techs,commodity,pc_accounting_sourcesinkFlow);
1897   
1898  * option kill %paramName%Nonzero %paramName%Chk %paramName%Agg
1899   
1900  parameter accounting_indicatorBounds_links(linksModel,years,indicator,pc_accounting_indicatorBounds_links);
1901  accounting_indicatorBounds_links(linksModelToCalc,yearsToCalc,indicator,pc_accounting_indicatorBounds_links)
1902      = sum((linksData)$sameas(linksModelToCalc,linksData),
1903              accounting_indicatorBounds_linksIn(linksData,yearsToCalc,indicator,pc_accounting_indicatorBounds_links));
1904   
1905  accounting_indicatorBounds_links(linksModelToCalc,yearsToCalc,indicator,pc_accounting_indicatorBounds_links)
1906      = sum((linksData)$links_aggregate(linksModelToCalc,linksData),
1907              accounting_indicatorBounds_linksIn(linksData,yearsToCalc,indicator,pc_accounting_indicatorBounds_links));
1908   
1909  parameter accounting_indicatorBounds(accNodesModel,accYears,indicator,pc_accounting_indicatorBounds);
1910  accounting_indicatorBounds(accNodesModel,accYears,indicator,pc_accounting_indicatorBounds)
1911      = sum (accNodesData$sameas(accNodesModel,accNodesData),
1912          accounting_indicatorBoundsIn(accNodesData,accYears,indicator,pc_accounting_indicatorBounds));
1913   
1914  accounting_indicatorBounds(accNodesModel,accYears,indicator,pc_accounting_indicatorBounds)
1915      $(sum (nodesModel$sameas(accNodesModel,nodesModel), 1) > 0)
1916      = sum ((accNodesData,nodesData,nodesModel)
1917              $(aggregateNodesModel(nodesData,nodesModel) and sameas(accNodesModel,nodesModel) and sameas(accNodesData,nodesData)),
1918          accounting_indicatorBoundsIn(accNodesData,accYears,indicator,pc_accounting_indicatorBounds));
1919   
1920  set accounting_perIndicatorNonzero(indicator,indicator_a,accNodesData,accYears);
1921  accounting_perIndicatorNonzero(indicator,indicator_a,accNodesData,accYears)
1922      $sum(pc_accounting_perIndicator$accounting_perIndicatorIn(indicator,indicator_a,accNodesData,accYears,pc_accounting_perIndicator), 1)
1923      = yes;
1924   
1925  parameter accounting_perIndicatorAgg(indicator,indicator_a,nodesModel,accYears,pc_accounting_perIndicator);
1926  accounting_perIndicatorAgg(indicator,indicator_a,nodesModel,accYears,pc_accounting_perIndicator)
1927      $sum((nodesData,accnodesData)
1928              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1929                  and accounting_perIndicatorNonzero(indicator,indicator_a,accnodesData,accYears)), 1)
1930      = sum((nodesData,accnodesData)
1931              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1932                  and accounting_perIndicatorNonzero(indicator,indicator_a,accnodesData,accYears)),
1933          accounting_perIndicatorIn(indicator,indicator_a,accnodesData,accYears,pc_accounting_perIndicator))
1934      / sum((nodesData,accnodesData)
1935              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1936                  and accounting_perIndicatorNonzero(indicator,indicator_a,accnodesData,accYears)),
1937          1);
1938   
1939  parameter accounting_perIndicator(indicator,indicator_a,accNodesModel,accYears,pc_accounting_perIndicator);
1940   
1941  loop(accNodes,
1942  accounting_perIndicator(indicator,indicator_a,accNodesModel,accYears,pc_accounting_perIndicator)
1943      $(sum(accNodesData$(sameas(accNodes,accNodesData)
1944              and accounting_perIndicatorIn(indicator,indicator_a,accNodesData,"horizon",pc_accounting_perIndicator)), 1)
1945          and map_accNodes(accNodesModel,accNodes)
1946              )
1947      = sum(accNodesData$(sameas(accNodes,accNodesData)),
1948              accounting_perIndicatorIn(indicator,indicator_a,accNodesData,"horizon",pc_accounting_perIndicator));
1949   
1950  accounting_perIndicator(indicator,indicator_a,accNodesModel,accYears,pc_accounting_perIndicator)
1951      $(sum(accNodesData$(sameas(accNodes,accNodesData)
1952              and accounting_perIndicatorIn(indicator,indicator_a,accNodesData,accYears,pc_accounting_perIndicator)), 1)
1953          and map_accNodes(accNodesModel,accNodes)
1954          and not sameas(accYears, "horizon"))
1955      = sum(accNodesData$(sameas(accNodes,accNodesData)),
1956              accounting_perIndicatorIn(indicator,indicator_a,accNodesData,accYears,pc_accounting_perIndicator));
1957  );
1958   
1959  accounting_perIndicator(indicator,indicator_a,accNodesModel,accYears,pc_accounting_perIndicator)
1960      $sum(nodesModel$(accounting_perIndicatorAgg(indicator,indicator_a,nodesModel,"horizon",pc_accounting_perIndicator)
1961          and sameas(accNodesModel,nodesModel)), 1)
1962      = sum(nodesModel$sameas(accNodesModel,nodesModel),
1963          accounting_perIndicatorAgg(indicator,indicator_a,nodesModel,"horizon",pc_accounting_perIndicator));
1964   
1965  accounting_perIndicator(indicator,indicator_a,accNodesModel,accYears,pc_accounting_perIndicator)
1966      $sum(nodesModel$(accounting_perIndicatorAgg(indicator,indicator_a,nodesModel,accYears,pc_accounting_perIndicator)
1967          and sameas(accNodesModel,nodesModel) and not sameas(accYears, "horizon")), 1)
1968      = sum(nodesModel$sameas(accNodesModel,nodesModel),
1969          accounting_perIndicatorAgg(indicator,indicator_a,nodesModel,accYears,pc_accounting_perIndicator));
1970   
1971   
1972  * Make sure all required indicators end up in the model
1973  set activeIndicators(accNodesModel,accYears,indicator);
1974  activeIndicators(accNodesModel,accYears,indicator)
1975     $((accounting_indicatorBounds(accNodesModel,accYears,indicator,"obj") <> 0
1978        or accounting_indicatorBounds(accNodesModel,accYears,indicator,"useFixed") <> 0
1979        or accounting_indicatorBounds(accNodesModel,accYears,indicator,"useLower") <> 0
1980        or accounting_indicatorBounds(accNodesModel,accYears,indicator,"useUpper") <> 0 )
1981          and not accounting_indicatorBounds(accNodesModel,accYears,indicator,"isVariable"))
1982     = yes;
1983   
1984  set activeIndicators_links(linksModel,years,indicator);
1985  activeIndicators_links(linksModelToCalc,yearsToCalc,indicator)
1986     $(accounting_indicatorBounds_links(linksModelToCalc,yearsToCalc,indicator,"useFixed") <> 0
1987        or accounting_indicatorBounds_links(linksModelToCalc,yearsToCalc,indicator,"useLower") <> 0
1988        or accounting_indicatorBounds_links(linksModelToCalc,yearsToCalc,indicator,"useUpper") <> 0 )
1989     = yes;
1990   
1991  set variableIndicators(accNodesModel,accYears,indicator);
1992  variableIndicators(accNodesModel,accYears,indicator)
1993     $(accounting_indicatorBounds(accNodesModel,accYears,indicator,"obj") = 0
1994        and accounting_indicatorBounds(accNodesModel,accYears,indicator,"isVariable"))
1995     = yes;
1996   
1997  * Calculate length of years and discount rates per indicator
1998  parameter yearFactor(accNodesModel,accYears,indicator,accYears);
1999  yearFactor(accNodesModel,accYears,indicator,accYears_a)
2000      $(map_accYears(accYears_a,accYears)
2001          and sum(yearsToCalc$(sameas(yearsToCalc,accYears_a)), 1))
2002      = 1;
2003   
2004  yearFactor(accNodesModel,accYears,indicator,accYears_a)
2005      $(map_accYears(accYears_a,accYears)
2006          and sum(yearsToCalc$(sameas(yearsToCalc,accYears_a)), 1)
2007          and accounting_indicatorBounds(accNodesModel,accYears,indicator,"integral"))
2008      = sum(yearsToCalc$sameas(accYears_a,yearsToCalc), yearsLen(yearsToCalc));
2009   
2010  yearFactor(accNodesModel,accYears,indicator,accYears_a)
2011      $(map_accYears(accYears_a,accYears)
2012          and sum(yearsToCalc$(sameas(yearsToCalc,accYears_a)), 1)
2013          and accounting_indicatorBounds(accNodesModel,accYears,indicator,"integral")
2014          and accounting_indicatorBounds(accNodesModel,accYears,indicator,"endyear")
2015          and yearFactor(accNodesModel,accYears,indicator,accYears_a) = inf)
2016      = accounting_indicatorBounds(accNodesModel,accYears,indicator,"endyear");
2017   
2018  yearFactor(accNodesModel,accYears,indicator,accYears_a)
2019      $(map_accYears(accYears_a,accYears)
2020          and sum(yearsToCalc$(sameas(yearsToCalc,accYears_a)), 1)
2021          and accounting_indicatorBounds(accNodesModel,accYears,indicator,"integral")
2022          and accounting_indicatorBounds(accNodesModel,accYears,indicator,"discount"))
2023      = yearFactor(accNodesModel,accYears,indicator,accYears_a)
2024          * (1 - accounting_indicatorBounds(accNodesModel,accYears,indicator,"discount"))
2025                  ** (accYears_a.val - smin(yearsToCalc, yearsToCalc.val));
2026   
2027   
2028  * ==== calculate compound indicators for the optimization ====
2029  scalar compIndicators_pre;
2030  scalar compIndicators_post;
2031   
2032  parameter compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a);
2033  compoundIndicators(accNodesModel,accYears,indicator,accNodesModel,accYears,indicator)
2034      $activeIndicators(accNodesModel,accYears,indicator) = 1;
2035   
2036  set compoundIndicators_act(accNodesModel,accYears,indicator);
2037  option compoundIndicators_act < compoundIndicators;
2038   
2039  parameter compoundIndicatorsExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa);
2040  parameter compoundIndicatorsExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a);
2041  compoundIndicatorsExt(accNodesModel,accYears,indicator,accNodesModel,accYears,indicator,accNodesModel,accYears,indicator)
2042      $compoundIndicators_act(accNodesModel,accYears,indicator) = 1;
2043   
2044  compIndicators_pre = 0;
2045  compIndicators_post = 1;
2046   
2047  option sparseval = 1;
2048  while(compIndicators_pre < compIndicators_post,
2049      compIndicators_pre = sum((accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa)
2050          $compoundIndicatorsExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa), 1);
2051   
2052      compoundIndicatorsExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa)
2053          $(compoundIndicators_act(accNodesModel,accYears,indicator)
2054              and compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
2055              and not accounting_indicatorBounds(accNodesModel_a,accYears_a,indicator_a,"isVariable")
2056              and map_accNodes(accNodesModel_aa,accNodesModel_a)
2057              and map_accYears(accYears_aa,accYears_a))
2058          = compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
2059              * accounting_perIndicator(indicator_a,indicator_aa,accNodesModel_aa,accYears_aa,"perIndicator");
2060   
2061      option compoundIndicatorsExt_r < compoundIndicatorsExt;
2062   
2063      compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa)
2064          $(compoundIndicators_act(accNodesModel,accYears,indicator)
2065              and sum((accNodesModel_a,accYears_a,indicator_a)
2066                      $compoundIndicatorsExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a), 1) = 1)
2067          = sum((accNodesModel_a,accYears_a,indicator_a)
2068                  $(compoundIndicatorsExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a)),
2069              compoundIndicatorsExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a));
2070   
2071      compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa)
2072          $(compoundIndicators_act(accNodesModel,accYears,indicator)
2073              and sum((accNodesModel_a,accYears_a,indicator_a)
2074                      $compoundIndicatorsExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a), 1) > 1)
2075          = sum((accNodesModel_a,accYears_a,indicator_a)
2076                  $(compoundIndicatorsExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a)
2077                      and not (sameas(accNodesModel, accNodesModel_a) and sameas(accYears, accYears_a) and sameas(indicator, indicator_a))),
2078              compoundIndicatorsExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a))
2079          / sum((accNodesModel_a,accYears_a,indicator_a)
2080                  $(compoundIndicatorsExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a)
2081                      and not (sameas(accNodesModel, accNodesModel_a) and sameas(accYears, accYears_a) and sameas(indicator, indicator_a))), 1);
2082   
2083      option compoundIndicators_act < compoundIndicators;
2084      compIndicators_post = sum((accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa)
2085          $compoundIndicatorsExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa), 1);
2086  );
2087  option sparseval = 0;
2088   
2089  * map to sub-years and sub-nodes
2090  compoundIndicatorsExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_a)
2091      $(compoundIndicators_act(accNodesModel,accYears,indicator)
2092          and compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
2093          and map_accYears(accYears_aa,accYears_a)
2094          and map_accNodes(accNodesModel_aa,accNodesModel_a))
2095      = compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
2096          * yearFactor(accNodesModel,accYears,indicator,accYears_aa);
2097   
2098  * Remove all accounting regions and accounting years
2099  compoundIndicatorsExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa)
2100      $(compoundIndicatorsExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa)
2101          and not accounting_indicatorBounds(accNodesModel_aa,accYears_aa,indicator_aa,"isVariable")
2102          and sum(accNodes$(sameas(accNodes,accNodesModel_aa)), 1)
2103              or sameas("horizon",accYears_aa))
2104      = 0;
2105   
2106  * Map from extended parameter to final parameter
2107  option compoundIndicatorsExt_r < compoundIndicatorsExt;
2108  compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa)
2109      $(compoundIndicators_act(accNodesModel,accYears,indicator)
2110          and sum((accNodesModel_a,accYears_a,indicator_a)
2111                  $compoundIndicatorsExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a), 1) = 1)
2112      = sum((accNodesModel_a,accYears_a,indicator_a)
2113              $(compoundIndicatorsExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a)),
2114          compoundIndicatorsExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a));
2115   
2116  compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa)
2117      $(compoundIndicators_act(accNodesModel,accYears,indicator)
2118          and sum((accNodesModel_a,accYears_a,indicator_a)
2119                  $compoundIndicatorsExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a), 1) > 1)
2120      = sum((accNodesModel_a,accYears_a,indicator_a)
2121              $(compoundIndicatorsExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a)
2122                  and not (sameas(accNodesModel, accNodesModel_a) and sameas(accYears, accYears_a) and sameas(indicator, indicator_a))),
2123          compoundIndicatorsExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a))
2124      / sum((accNodesModel_a,accYears_a,indicator_a)
2125              $(compoundIndicatorsExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a)
2126                  and not (sameas(accNodesModel, accNodesModel_a) and sameas(accYears, accYears_a) and sameas(indicator, indicator_a))), 1);
2127   
2128  * Remove all accounting regions and accounting years
2129  compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
2130      $(compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
2131          and not accounting_indicatorBounds(accNodesModel_a,accYears_a,indicator_a,"isVariable")
2132          and (sum(accNodes$(sameas(accNodes,accNodesModel_a)), 1)
2133              or sameas("horizon",accYears_a)))
2134      = 0;
2135   
2136  * Remove all slack indicators except the ones declared in indicatorBounds
2137  compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
2138      $(compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
2139          and sum((accNodesModel_aa,accYears_aa)$accounting_indicatorBounds(accNodesModel_aa,accYears_aa,indicator_a,"isVariable"), 1)
2140          and not accounting_indicatorBounds(accNodesModel_a,accYears_a,indicator_a,"isVariable"))
2141      = 0;
2142   
2143  * ==== compound indicators for the post calculation ====
2144  parameter compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a);
2145  compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel,accYears,indicator)
2146      $(sum(nodesModelToCalc$map_accNodesToCalc(accNodesModel,nodesModelToCalc), 1)
2147          and sum(yearsToCalc$map_accYearsToCalc(accYears,yearsToCalc), 1)) = 1;
2148   
2149  set compoundIndicatorsFull_act(accNodesModel,accYears,indicator);
2150  option compoundIndicatorsFull_act < compoundIndicatorsFull;
2151   
2152  parameter compoundIndicatorsFullExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa);
2153  parameter compoundIndicatorsFullExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a);
2154  compoundIndicatorsFullExt(accNodesModel,accYears,indicator,accNodesModel,accYears,indicator,accNodesModel,accYears,indicator) = 1;
2155   
2156  compIndicators_pre = 0;
2157  compIndicators_post = 1;
2158   
2159  option sparseval = 1;
2160  while(compIndicators_pre < compIndicators_post,
2161      compIndicators_pre = sum((accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa)
2162          $compoundIndicatorsFullExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa), 1);
2163   
2164      compoundIndicatorsFullExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa)
2165          $(compoundIndicatorsFull_act(accNodesModel,accYears,indicator)
2166              and compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
2167              and not accounting_indicatorBounds(accNodesModel_a,accYears_a,indicator_a,"isVariable")
2168              and map_accNodes(accNodesModel_aa,accNodesModel_a)
2169              and map_accYears(accYears_aa,accYears_a))
2170          = compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
2171              * accounting_perIndicator(indicator_a,indicator_aa,accNodesModel_aa,accYears_aa,"perIndicator");
2172   
2173      option compoundIndicatorsFullExt_r < compoundIndicatorsFullExt;
2174   
2175      compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa)
2176          $(compoundIndicatorsFull_act(accNodesModel,accYears,indicator)
2177              and sum((accNodesModel_a,accYears_a,indicator_a)
2178                      $compoundIndicatorsFullExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a), 1) = 1)
2179          = sum((accNodesModel_a,accYears_a,indicator_a)
2180                  $(compoundIndicatorsFullExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a)),
2181              compoundIndicatorsFullExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a));
2182   
2183      compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa)
2184          $(compoundIndicatorsFull_act(accNodesModel,accYears,indicator)
2185              and sum((accNodesModel_a,accYears_a,indicator_a)
2186                      $compoundIndicatorsFullExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a), 1) > 1)
2187          = sum((accNodesModel_a,accYears_a,indicator_a)
2188                  $(compoundIndicatorsFullExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a)
2189                      and not (sameas(accNodesModel, accNodesModel_a) and sameas(accYears, accYears_a) and sameas(indicator, indicator_a))),
2190              compoundIndicatorsFullExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a))
2191          / sum((accNodesModel_a,accYears_a,indicator_a)
2192                  $(compoundIndicatorsFullExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a)
2193                      and not (sameas(accNodesModel, accNodesModel_a) and sameas(accYears, accYears_a) and sameas(indicator, indicator_a))), 1);
2194   
2195      option compoundIndicatorsFull_act < compoundIndicatorsFull;
2196      compIndicators_post = sum((accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa)
2197          $compoundIndicatorsFullExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa), 1);
2198  );
2199  option sparseval = 0;
2200   
2201  * map to sub-years and sub-nodes
2202  compoundIndicatorsFullExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_a)
2203      $(compoundIndicatorsFull_act(accNodesModel,accYears,indicator)
2204          and compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
2205          and map_accYears(accYears_aa,accYears_a)
2206          and map_accNodes(accNodesModel_aa,accNodesModel_a))
2207      = compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
2208          * yearFactor(accNodesModel,accYears,indicator,accYears_aa);
2209   
2210  * Remove all accounting regions and accounting years
2211  compoundIndicatorsFullExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa)
2212      $(compoundIndicatorsFullExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa)
2213          and not accounting_indicatorBounds(accNodesModel_aa,accYears_aa,indicator_aa,"isVariable")
2214          and sum(accNodes$(sameas(accNodes,accNodesModel_aa)), 1)
2215              or sameas("horizon",accYears_aa))
2216      = 0;
2217   
2218  * Map from extended parameter to final parameter
2219  option compoundIndicatorsFullExt_r < compoundIndicatorsFullExt;
2220  compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa)
2221      $(compoundIndicatorsFull_act(accNodesModel,accYears,indicator)
2222          and sum((accNodesModel_a,accYears_a,indicator_a)
2223                  $compoundIndicatorsFullExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a), 1) = 1)
2224      = sum((accNodesModel_a,accYears_a,indicator_a)
2225              $(compoundIndicatorsFullExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a)),
2226          compoundIndicatorsFullExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a));
2227   
2228  compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa)
2229      $(compoundIndicatorsFull_act(accNodesModel,accYears,indicator)
2230          and sum((accNodesModel_a,accYears_a,indicator_a)
2231                  $compoundIndicatorsFullExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a), 1) > 1)
2232      = sum((accNodesModel_a,accYears_a,indicator_a)
2233              $(compoundIndicatorsFullExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a)
2234                  and not (sameas(accNodesModel, accNodesModel_a) and sameas(accYears, accYears_a) and sameas(indicator, indicator_a))),
2235          compoundIndicatorsFullExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a))
2236      / sum((accNodesModel_a,accYears_a,indicator_a)
2237              $(compoundIndicatorsFullExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a)
2238                  and not (sameas(accNodesModel, accNodesModel_a) and sameas(accYears, accYears_a) and sameas(indicator, indicator_a))), 1);
2239   
2240  * Remove all accounting regions and accounting years
2241  compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
2242      $(compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
2243          and not accounting_indicatorBounds(accNodesModel_a,accYears_a,indicator_a,"isVariable")
2244          and (sum(accNodes$(sameas(accNodes,accNodesModel_a)), 1)
2245              or sameas("horizon",accYears_a)))
2246      = 0;
2247   
2248  * Remove all slack indicators except the ones declared in indicatorBounds
2249  compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
2250      $(compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
2251          and sum((accNodesModel_aa,accYears_aa)$accounting_indicatorBounds(accNodesModel_aa,accYears_aa,indicator_a,"isVariable"), 1)
2252          and not accounting_indicatorBounds(accNodesModel_a,accYears_a,indicator_a,"isVariable"))
2253      = 0;
2254   
2255  * Check if the objective value and optimization sense is set correctly
2256  scalar opti_values, opti_sense;
2257  opti_values = sum((accNodesModel,accYears,indicator)$(accounting_indicatorBounds(accNodesModel,accYears,indicator,"obj") <> 0), 1);
2258  opti_sense = sum((accNodesModel,accYears,indicator), accounting_indicatorBounds(accNodesModel,accYears,indicator,"obj"));
2259  abort$(opti_values < 1)
2260      "Accounting: No indicator specified as objective value"
2261  abort$(opti_values > 1)
2262      "Accounting: Too many indicators specified as objective value"
2263  abort$(opti_sense <> -1 and opti_sense <> 1)
2264      "Accounting: Optimization sense has to be either -1 or 1"
INCLUDE    C:\Local\REMix\framework\remix\framework\model\source\accounting\annuities.gms
2266  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
2267  * SPDX-License-Identifier: BSD-3-Clause
2268   
2269  * Calculation of annuities
2270   
2271  abort$(sum((indicator,nodesModelToCalc,converter_techs,vintage)
2272          $(accounting_converterUnits(indicator,nodesModelToCalc,converter_techs,vintage,"useAnnuity") = 1
2273          and accounting_converterUnits(indicator,nodesModelToCalc,converter_techs,vintage,"amorTime") < 1), 1) > 0 )
2274      "Accounting: Some converter technologies use annuities but have no amortization time"
2275   
2276  parameter accounting_annuityFactor_converter(indicator,nodesModel,converter_techs,vintage);
2277  accounting_annuityFactor_converter(indicator,nodesModelToCalc,converter_techs,vintage)
2278      $accounting_converterUnits(indicator,nodesModelToCalc,converter_techs,vintage,"useAnnuity")
2279      =
2280      accounting_converterUnits(indicator,nodesModelToCalc,converter_techs,vintage,"interest")
2281          * (1 + accounting_converterUnits(indicator,nodesModelToCalc,converter_techs,vintage,"interest"))
2282          ** accounting_converterUnits(indicator,nodesModelToCalc,converter_techs,vintage,"amorTime")
2283      / ((1 + accounting_converterUnits(indicator,nodesModelToCalc,converter_techs,vintage,"interest"))
2284          ** accounting_converterUnits(indicator,nodesModelToCalc,converter_techs,vintage,"amorTime") - 1);
2285   
2286   
2287  abort$(sum((indicator,nodesModelToCalc,storage_techs,vintage)
2288          $(accounting_storageUnits(indicator,nodesModelToCalc,storage_techs,vintage,"useAnnuity") = 1
2289          and accounting_storageUnits(indicator,nodesModelToCalc,storage_techs,vintage,"amorTime") < 1), 1) > 0 )
2290      "Accounting: Some storage technologies use annuities but have no amortization time"
2291   
2292  parameter accounting_annuityFactor_storage(indicator,nodesModel,storage_techs,vintage);
2293  accounting_annuityFactor_storage(indicator,nodesModelToCalc,storage_techs,vintage)
2294      $accounting_storageUnits(indicator,nodesModelToCalc,storage_techs,vintage,"useAnnuity")
2295      =
2296      accounting_storageUnits(indicator,nodesModelToCalc,storage_techs,vintage,"interest")
2297          * (1 + accounting_storageUnits(indicator,nodesModelToCalc,storage_techs,vintage,"interest"))
2298          ** accounting_storageUnits(indicator,nodesModelToCalc,storage_techs,vintage,"amorTime")
2299      / ((1 + accounting_storageUnits(indicator,nodesModelToCalc,storage_techs,vintage,"interest"))
2300          ** accounting_storageUnits(indicator,nodesModelToCalc,storage_techs,vintage,"amorTime") - 1);
2301   
2302   
2303  abort$(sum((indicator,linksModelToCalc,transfer_techs,vintage)
2304          $(accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"useAnnuity") = 1
2305          and accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"amorTime") < 1), 1) > 0 )
2306      "Accounting: Some transfer technologies use annuities but have no amortization time"
2307   
2308  parameter accounting_annuityFactor_transferLink(indicator,linksModel,transfer_techs,vintage);
2309  accounting_annuityFactor_transferLink(indicator,linksModelToCalc,transfer_techs,vintage)
2310      $accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"useAnnuity")
2311      =
2312      accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"interest")
2313          * (1 + accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"interest"))
2314          ** accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"amorTime")
2315      / ((1 + accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"interest"))
2316          ** accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"amorTime") - 1);
2317   
2318   
2319   
2320  abort$(sum((indicator,linksModelToCalc,transfer_techs,vintage,link_types)
2321          $(accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"useAnnuity") = 1
2322          and accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"amorTime") < 1), 1) > 0 )
2323      "Accounting: Some transfer-per-length technologies use annuities but have no amortization time"
2324   
2325  parameter accounting_annuityFactor_transferPerLength(indicator,linksModel,transfer_techs,vintage,link_types);
2326  accounting_annuityFactor_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types) = 1;
2327   
2328  accounting_annuityFactor_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types)
2329      $accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"useAnnuity")
2330      =
2331      accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"interest")
2332          * (1 + accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"interest"))
2333          ** accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"amorTime")
2334      / ((1 + accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"interest"))
2335          ** accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"amorTime") - 1);
2336   
2338   
INCLUDE    C:\Local\REMix\framework\remix\framework\model\source\methods\mga_pre.gms
2340  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
2341  * SPDX-License-Identifier: BSD-3-Clause
2342   
INCLUDE    C:\Local\REMix\framework\remix\framework\model\source\methods\pareto_pre.gms
2346  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
2347  * SPDX-License-Identifier: BSD-3-Clause
2348   
INCLUDE    C:\Local\REMix\framework\remix\framework\model\source\postcalc\declaration.gms
2352  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
2353  * SPDX-License-Identifier: BSD-3-Clause
2354  * // # Output data
2355  * // This is the reference data model of the REMix output.
2356  * //
2357  * // ## Standard output
2360   
2367   
2369   
2370  set capType / "build", "decom", "total", "lowerLimit", "upperLimit", "total_degraded" /;
2371  set balanceType / "netto", "brutto", "positive", "negative", "flh" /;
2372  set profileType / "upper", "fixed", "lower" /;
2373  set r2a_has_converter_cost(indicator,nodesModel,years,techs,vintage,commodity);
2374   
2375  ** // OUTPUT: indicator_accounting | OEO_00000350:quantity value
2376  * // ### indicator_accounting
2377  * // Title: Accounting indicators Post-calculation
2378  parameter indicator_accounting(accNodesModel,accYears,indicator) "Post-calculation aggregated indicator accounting" ;
2379  * //
2380  ** // OUTPUT: indicator_accounting_ref | OEO_00000350:quantity value
2381  * // ### indicator_accounting_ref
2382  * // Title: Accounting indicators reference
2383  parameter indicator_accounting_ref(accNodesModel,accYears,indicator) "Indicator accounting optimization levels" ;
2384  * //
2385  ** // OUTPUT: indicator_accounting_comp | OEO_00000350:quantity value
2386  * // ### indicator_accounting_comp
2387  * // Title: Accounting indicators composition
2388  parameter indicator_accounting_comp(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a) "Indicator accounting with other indicator composition" ;
2389  * //
2390  ** // OUTPUT: indicator_accounting_detailed | OEO_00000350:quantity value
2391  * // ### indicator_accounting_detailed
2392  * // Title: Accounting indicators detail
2393  parameter indicator_accounting_detailed(indicator,nodesModel,years,techs) "Indicator accounting with technological composition" ;
2394  * //
2395  ** // OUTPUT: indicator_accounting_links | OEO_00000350:quantity value
2396  * // ### indicator_accounting_links
2397  * // Title: Accounting indicators per transfer link
2398  parameter indicator_accounting_links(indicator,nodesModel,nodesModel_a,linksModel,years,techs) "Indicator accounting of transfer technologies" ;
2399  * //
2400  parameter converter_ratedInput(techs,vintage,commodity);
2401  parameter converter_ratedOutput(techs,vintage,commodity);
2402  parameter converter_ratedOutput_min(nodesModel,years,techs,commodity);
2403  parameter converter_ratedOutput_max(nodesModel,years,techs,commodity);
2404   
2405  ** // OUTPUT: converter_caps | OEO_00010257:power capacity
2406  * // ### converter_caps
2407  * // Title: Coverter capacities post-calculation
2408  parameter converter_caps(accNodesModel,accYears,techs,commodity,capType) "Converter capacities, aggregated total" ;
2409  * //
2410  parameter converter_caps_ext(accNodesModel,nodesModel,accYears,years,techs,vintage,commodity,capType);
2411   
2412  ** // OUTPUT: converter_units | OEO_00000350:quantity value
2413  * // ### converter_units
2414  * // Title: Coverter units post-calculation
2415  parameter converter_units(accNodesModel,accYears,techs,vintage,capType) "Converter units" ;
2416  * //
2417  parameter converter_units_ext(accNodesModel,nodesModel,accYears,years,techs,vintage,capType);
2418   
2419  set transfer_usedStartEnd(nodesModel,nodesModel,linksModel,years,techs);
2420  parameter max_transfer_coefficient(techs,commodity);
2421  parameter min_transfer_coefficient(techs,commodity);
2422  ** // OUTPUT: transfer_links | OEO_00000350:quantity value
2423  * // ### transfer_links
2424  * // Title: Transfer post-calculation
2425  parameter transfer_links(linksModel,years,techs,vintage,capType) "Transfer links" ;
2426  * //
2427  ** // OUTPUT: transfer_caps | OEO_00010257:power capacity
2428  * // ### transfer_caps
2429  * // Title: Transfer capacities post-calculation
2430  parameter transfer_caps(nodesModel_start,nodesModel_end,linksModel,years,techs,commodity,capType) "Transfer capacities, aggregated total" ;
2431  * //
2432  ** // OUTPUT: transfer_flows | OEO_00050019:energy amount value
2433  * // ### transfer_flows
2434  * // Title: Transfer hourly flows
2435  parameter transfer_flows(timeModel,nodesModel_start,nodesModel_end,linksModel,years,techs,commodity) "Hourly link flows" ;
2436  * //
2437  ** // OUTPUT: transfer_flows_annual | OEO_00050019:energy amount value
2438  * // ### transfer_flows_annual
2439  * // Title: Transfer annual flows
2440  parameter transfer_flows_annual(nodesModel_start,nodesModel_end,linksModel,years,techs,commodity,balanceType) "Annual link flows" ;
2441  * //
2442  ** // OUTPUT: transfer_losses | OEO_00050019:energy amount value
2443  * // ### transfer_losses
2444  * // Title: Transfer hourly losses
2445  parameter transfer_losses(timeModel,nodesModel_start,nodesModel_end,linksModel,years,techs,commodity) "Hourly link losses" ;
2446  * //
2447  ** // OUTPUT: transfer_losses_annual | OEO_00050019:energy amount value
2448  * // ### transfer_losses_annual
2449  * // Title: Transfer annual losses
2450  parameter transfer_losses_annual(nodesModel_start,nodesModel_end,linksModel,years,techs,commodity,balanceType) "Annual link losses" ;
2451  * //
2452  parameter storage_size_max(nodesModel,years,techs,commodity);
2453  parameter storage_size_min(nodesModel,years,techs,commodity);
2454  ** // OUTPUT: storage_units |  OEO_00000350:quantity value
2455  * // ### storage_units
2456  * // Title: Storage units post-calculation
2457  parameter storage_units(accNodesModel,accYears,techs,vintage,capType) "Storage units" ;
2458  * //
2459  parameter storage_units_ext(accNodesModel,nodesModel,accYears,years,techs,vintage,capType);
2460  ** // OUTPUT: storage_caps | OEO_00230000:energy storage capacity
2461  * // ### storage_caps
2462  * // Title: Storage capacities post-calculation
2463  parameter storage_caps(accNodesModel,accYears,techs,commodity,capType) "Storage capacities, aggregated total" ;
2464  * //
2465  parameter storage_caps_ext(accNodesModel,nodesModel,accYears,years,techs,vintage,commodity,capType);
2466  ** // OUTPUT: storage_level_out | OEO_00330012:energy storage content
2467  * // ### storage_level_out
2468  * // Title: Storage level
2469  parameter storage_level_out(timeModel,accNodesModel,accYears,techs,commodity) "Storage level per time step" ;
2470  * //
2471  parameter storage_level_out_ext(timeModel,accNodesModel,nodesModel,accYears,years,techs,vintage,commodity);
2472  ** // OUTPUT: storage_flows | OEO_00050019:energy amount value
2473  * // ### storage_flows
2474  * // Title: Storage hourly flows
2475  parameter storage_flows(timeModel,accNodesModel,accYears,techs,commodity) "Storage flows per time step" ;
2476  * //
2477  parameter storage_flows_ext(timeModel,accNodesModel,nodesModel,accYears,years,techs,vintage,commodity);
2478  ** // OUTPUT: storage_flows_annual | OEO_00050019:energy amount value
2479  * // ### storage_flows_annual
2480  * // Title: Storage annual flows
2481  parameter storage_flows_annual(accNodesModel,accYears,techs,commodity,balanceType) "Aggregated storage flows" ;
2482  * //
2483  ** // OUTPUT: storage_losses_out | OEO_00050019:energy amount value
2484  * // ### storage_losses_out
2485  * // Title: Storage hourly losses
2486  parameter storage_losses_out(timeModel,accNodesModel,accYears,techs,commodity) "Storage losses per time step" ;
2487  * //
2488  ** // OUTPUT: storage_losses_annual | OEO_00050019:energy amount value
2489  * // ### storage_losses_annual
2490  * // Title: Storage annual losses
2491  parameter storage_losses_annual(accNodesModel,accYears,techs,commodity,balanceType) "Aggregated storage losses" ;
2492  * //
2493  ** // OUTPUT: commodity_balance | OEO_00000350:quantity value
2494  * // ### commodity_balance
2495  * // Title: Hourly commodity balance
2496  parameter commodity_balance(timeModel,accNodesModel,accYears,techs,commodity) "Commodity balances per model hour" ;
2497  parameter commodity_balance_ext(timeModel,accNodesModel,nodesModel,accYears,years,techs,vintage,commodity);
2498  * //
2499  ** // OUTPUT: commodity_balance_annual | OEO_00000350:quantity value
2500  * // ### commodity_balance_annual
2501  * // Title: Annual commodity balance
2502  parameter commodity_balance_annual(accNodesModel,accYears,techs,commodity,balanceType) "Aggregated commodity balances" ;
2503  * //
2504  ** // OUTPUT: marginals_sourcesink_profile | OEO_00040008:marginal cost
2505  * // ### marginals_sourcesink_profile
2506  * // Title: Source-sink marginals
2507  parameter marginals_sourcesink_profile(timeModel,nodesModel,years,techs,commodity) "Source and sink flow marginal values" ;
2508  * //
2509  ** // OUTPUT: marginals_balance | OEO_00040008:marginal cost
2510  * // ### marginals_balance
2511  * // Title: Nodel balance marginals
2512  parameter marginals_balance(timeModel,nodesModel,years,commodity) "Nodal balance marginal values" ;
2513  * //
2514  ** // OUTPUT: marginals_sourcesink_sum | OEO_00040008:marginal cost
2515  * // ### marginals_sourcesink_sum
2516  * // Title: Source-sink annual marginals
2517  parameter marginals_sourcesink_sum(nodesModel,years,techs,commodity) "Annual source and sink flow marginal values" ;
2518  * //
2519  ** // OUTPUT: marginals_indicator_bounds | OEO_00040008:marginal cost
2520  * // ### marginals_indicator_bounds
2521  * // Title: Indicator bounds marginals
2522  parameter marginals_indicator_bounds(accNodesModel,accYears,indicator) "Accounting indicator marginals" ;
2523  * //
2524  * // ## REMix-AMIRIS interface output
2525  * //
2526  ** // OUTPUT: r2a_annuity_cost_converter | OEO_00040009:cost
2527  * // ### r2a_annuity_cost_converter
2528  * // Title: Converter annuity cost
2529  parameter r2a_annuity_cost_converter(indicator,accNodesModel,accYears,techs,vintage,commodity) "Annuity cost of converters" ;
2530  * //
2531  ** // OUTPUT: r2a_spec_cost_converter | OEO_00040009:cost
2532  * // ### r2a_spec_cost_converter
2533  * // Title: Converter specific cost
2534  parameter r2a_spec_cost_converter(indicator,accNodesModel,accYears,techs,vintage,commodity) "Specific cost of converters" ;
2535  * //
2536  ** // OUTPUT: r2a_spec_cost_fuel | OEO_00040009:cost
2537  * // ### r2a_spec_cost_fuel
2538  * // Title: Commodity specific cost
2539  parameter r2a_spec_cost_fuel(indicator,accNodesModel,accYears,techs,commodity) "Specific cost of commodities, used particularly for fuels" ;
2540  * //
2541  ** // OUTPUT: r2a_spec_cost_indicator | OEO_00040009:cost
2542  * // ### r2a_spec_cost_indicator
2543  * // Title: Indicator specific cost
2544  parameter r2a_spec_cost_indicator(indicator,indicator_a,accNodesModel,accYears) "Specific indicator cost" ;
2545  * //
2546  ** // OUTPUT: r2a_converter_efficiencies | OEO_00140050:efficiency value
2547  * // ### r2a_converter_efficiencies
2548  * // Title: Indicator specific cost
2549  parameter r2a_converter_efficiencies(techs,vintage,activity,commodity,commodity_a) "Converter-specific efficiency" ;
2550  * //
2551  ** // OUTPUT: r2a_converter_avail_factor | OEO_00000350:quantity value
2552  * // ### r2a_converter_avail_factor
2553  * // Title: Converter availability factor
2554  parameter r2a_converter_avail_factor(accNodesModel,accYears,techs,vintage) "Availability factor of converter technologies" ;
2555  parameter r2a_converter_avail_profile(timeModel,accNodesModel,accYears,techs,commodity,profileType) "Availability of converter technologies" ;
2556  parameter r2a_converter_avail_profile_ext(timeModel,accNodesModel,nodesModel,accYears,years,techs,vintage,commodity,profileType);
2557  * //
2558  ** // OUTPUT: r2a_storage_e2p | OEO_00000350:quantity value
2559  * // ### r2a_storage_e2p
2560  * // Title: E2P Storage
2561  parameter r2a_storage_e2p(accNodesModel,accYears,techs,vintage,commodity,capType) "Energy-to-power ratio" ;
2562  * //
2563  ** // OUTPUT: r2a_storage_selfdischarge | OEO_00000350:quantity value
2564  * // ### r2a_storage_selfdischarge
2565  * // Title: Storage self discharge rates
2566  parameter r2a_storage_selfdischarge(accNodesModel,accYears,techs,vintage,commodity);
2567   
INCLUDE    C:\Local\REMix\framework\remix\framework\model\source\loadgdx.gms
2571  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
2572  * SPDX-License-Identifier: BSD-3-Clause
2573   
2574  * ==== global settings ====
2576   
2578   
INCLUDE    C:\Local\REMix\framework\remix\framework\model\source\core\converter.gms
2580  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
2581  * SPDX-License-Identifier: BSD-3-Clause
2582   
2583  * // # core_converter
2584  * // The equations in this file describe the converters in the model.
2585   
2586  * // ## Advanced features
2587  * //
2588  * // You can find a more detailed explanation of the %curly_open%ref%curly_close%`MIP features <explanations_mip_label>`.
2589  ** // There is also a more detailed explanation on the modeling of outages at the %curly_open%ref%curly_close%`resilience section <explanations_resilience_label>`.
2590  * //
2591  * // In the following table you can see which modifications you have to make to your data to use the different features.
2592  * //
2593  * // | Feature | Modification |
2594  * // | ------ | ------ |
2595  * // | MIP expansion | The converter_tech_Parameter "mipUnits" has to be set to 1 in converter_techParam.dat for the technologies and years where descrete expansion is wanted |
2596  * // | Minimum up/downtime | The converter_tech_Parameters "minUptime" and/or "minDowntime" need to be set to the according amount of minimum time steps.Furthermore, the converter_tech_Parameter "mipDispatch" has to be set to 1 in converter_techParam.dat
2597  * // for the technologies and years where a minimum up- or downtime should be applied so that the units can be shut down. "mipUnits" will automatically be set to 1 |
2598  * // | Partial load | The converter_tech_Parameter "mipDispatch" has to be set to 1 in converter_techParam.dat for the technologies and years where you want to make use of the partial load feature. You also have to set a value to
2599  * // the converter_coefficient_parameters "minLoad" and/or "maxLoad" for the according technologies, vintages, activities and commodities. You can then for example set different "coefficient" values for each activity in converter_coefficient.dat |
2600  ** // | Outages | You have to include the converter_outageProfile.dat-file and while executing the model you have to set --method=resilience |
2601   
2602  * // ## %curly_open%ref%curly_close%`sets <remix_model_sets_label>`
2603  * //
2604  * // ### set_converter_techs.dat
2605  * // In this file all converter technologies are listed that can be used within your model.
2606  * //
2607  * // ### set_activities.dat
2608  * // All modes with which the converter technologies can be operated need to be added here.
2609  * // Examples: Charge (for the charging mode of a storage), Powergen (for the mode in which a converter produces electricity), Curtailment (for the mode in which a renewable power plant is shut down), …
2610  * // If you would like to use the partial load feature, all activity modes that should be available for this feature need to be defined here as well.
2611  * //
2612  * // ### set_commodities.dat
2613  * // In this file all commodities are listed that can be used and converted by the converter technologies.
2614  * // Examples: Electricity, Coal, Biomass, Hydrogen, …
2615   
2616  * // ## Variables
2617  * // {special_table_converter_variables}
8591   
8592  * ==== loading units from gdx file ====
8593   
8594  * Load units from gdx file
8596   
8597  * ==== calculation of mappings ====
8598   
8599  * Technologies with a lifeTime > 0 are available
8600  set converter_availTech(nodesModel,years,converter_techs,vintage);
8601  converter_availTech(nodesModel,years,converter_techs,vintage)
8602      $(vintage.val = smax(vintage_a$(vintage_a.val <= years.val
8603          and converter_techParam(converter_techs,vintage_a,"lifeTime") > 0), vintage_a.val)) = yes;
8604   
8605  * Technologies to optimize become unavailable if they have an unitsUpperLimit of 0
8606  converter_availTech(nodesModel,years,converter_techs,vintage)
8607      $(yearsToCalc(years) and converter_capacityParam(nodesModel,years,converter_techs,"unitsUpperLimit") = 0 ) = no;
8608   
8609  * Technologies already built become unavailable if they have an unitsBuild of 0
8610  converter_availTech(nodesModel,years,converter_techs,vintage)
8611      $( ( not yearsToCalc(years)) and converter_capacityParam(nodesModel,years,converter_techs,"unitsBuild") = 0 ) = no;
8612   
8613  * Used technologies are available technologies over their technical lifeTime
8614  set converter_usedTech(nodesModel,years,converter_techs,vintage);
8615  converter_usedTech(nodesModel,years,converter_techs,vintage)
8616      $(vintage.val <= years.val
8617          and years.val < smax(years_a$converter_availTech(nodesModel,years_a,converter_techs,vintage),
8618                                  years_a.val + converter_techParam(converter_techs,vintage,"lifeTime"))
8619          ) = yes;
8620   
8621  * Technologies have to be decomissioned in the interval of first avail + lifetime to last avail + lifetime
8622  set converter_decomTech(nodesModel,years,converter_techs,vintage);
8623  converter_decomTech(nodesModel,years,converter_techs,vintage)
8624    $(sum(years_a$converter_usedTech(nodesModel,years_a,converter_techs,vintage), 1)
8625      and sum(yearsToCalc
8626        $(sameas(years, yearsToCalc)
8627          and yearsToCalc.val >= smin(years_a$converter_availTech(nodesModel,years_a,converter_techs,vintage), years_a.val) + converter_techParam(converter_techs,vintage,"lifeTime")
8628          and yearsToCalc.val <= smax(years_a$converter_availTech(nodesModel,years_a,converter_techs,vintage), years_a.val) + converter_techParam(converter_techs,vintage,"lifeTime")), 1))
8629    = yes;
8630   
8631  * Extend the decom frame to the year after the last year of usedTech
8632  converter_decomTech(nodesModel,yearsToCalc,converter_techs,vintage)
8633    $(converter_usedTech(nodesModel,yearsToCalc-1,converter_techs,vintage)
8634      and converter_decomTech(nodesModel,yearsToCalc-1,converter_techs,vintage))
8635    = yes;
8636   
8637  * Mapping for used activities and commodities
8638  set converter_usedActCom(converter_techs,vintage,activity,commodity);
8639  option converter_usedActCom < converter_coefficient;
8640   
8641  set converter_usedAct(converter_techs,vintage,activity);
8642  option converter_usedAct < converter_usedActCom;
8643   
8644  set converter_usedCom(converter_techs,vintage,commodity);
8645  option converter_usedCom < converter_usedActCom;
8646   
8647  set converter_usedTechAct(nodesModel,years,converter_techs,vintage,activity);
8648  converter_usedTechAct(nodesModel,years,converter_techs,vintage,activity)
8649      $(converter_usedTech(nodesModel,years,converter_techs,vintage)
8650          and converter_usedAct(converter_techs,vintage,activity))
8651      = yes;
8652   
8653  set converter_useRampPos(nodesModel,years,converter_techs,vintage);
8654  converter_useRampPos(nodesModelToCalc,yearsToCalc,converter_techs,vintage)
8655    $(sum(indicator$accounting_converterStartup(indicator,nodesModelToCalc,converter_techs,vintage,"perRamp"), 1)
8656      or sum(indicator$accounting_converterStartup(indicator,nodesModelToCalc,converter_techs,vintage,"perRampPos"), 1))
8657    = 1;
8658   
8659  set converter_useRampNeg(nodesModel,years,converter_techs,vintage);
8660  converter_useRampNeg(nodesModelToCalc,yearsToCalc,converter_techs,vintage)
8661    $(sum(indicator$accounting_converterStartup(indicator,nodesModelToCalc,converter_techs,vintage,"perRamp"), 1)
8662      or sum(indicator$accounting_converterStartup(indicator,nodesModelToCalc,converter_techs,vintage,"perRampNeg"), 1))
8663    = 1;
8664   
8665   
8666  * ==== aggregation of profiles ====
8667   
8668  * derive upper and lower profiles then aggregate
8669  set converter_activity_hasProfileIn(nodesData,years,converter_techs,pc_converter_activityProfile);
8670  option converter_activity_hasProfileIn < converter_activityProfileIn;
8671   
8672  set converter_activity_hasProfile(nodesModel,years,converter_techs,pc_converter_activityProfile);
8673  converter_activity_hasProfile(nodesModelToCalc,yearsToCalc,converter_techs,pc_converter_activityProfile)
8674      = sum(nodesData$aggregateNodesModel(nodesData,nodesModelToCalc),
8675              converter_activity_hasProfileIn(nodesData,yearsToCalc,converter_techs,pc_converter_activityProfile));
8676   
8677  set converter_coefficient_hasProfileIn(nodesData,years,converter_techs,vintage,activity,commodity);
8678  option converter_coefficient_hasProfileIn < converter_coefficientProfileIn;
8679   
8680  set converter_coefficient_hasProfile(nodesModel,years,converter_techs,vintage,activity,commodity);
8681  converter_coefficient_hasProfile(nodesModelToCalc,yearsToCalc,converter_techs,vintage,activity,commodity)
8682      = sum(nodesData$aggregateNodesModel(nodesData,nodesModelToCalc),
8683              converter_coefficient_hasProfileIn(nodesData,yearsToCalc,converter_techs,vintage,activity,commodity));
8684   
8685  * aagregate time dimension
8686  parameter converter_activityProfileIn_aggTime(timeModel,nodesData,yearsToCalc,converter_techs,pc_converter_activityProfile);
8687  converter_activityProfileIn_aggTime(timeModelToCalc,nodesData,yearsToCalc,converter_techs,pc_converter_activityProfile)
8688    $converter_activity_hasProfileIn(nodesData,yearsToCalc,converter_techs,pc_converter_activityProfile)
8689    = sum(timeData$timeMapping(timeData,timeModelToCalc),
8690            converter_activityProfileIn(timeData,nodesData,yearsToCalc,converter_techs,pc_converter_activityProfile)
8691            / timeLength(timeModelToCalc));
8692  option clear = converter_activityProfileIn;
8693   
8694  * weighted average for a real sum of units upper limits, plain average if one region has an upper limit of inf
8695  parameter converter_activityProfile(timeModel,nodesModel,years,converter_techs,vintage,pc_converter_activityProfile);
8696  converter_activityProfile(timeModelToCalc,converter_usedTech(nodesModelToCalc,yearsToCalc,converter_techs,vintage),"upper")
8697      = converter_techParam(converter_techs,vintage,"activityUpperLimit");
8698  converter_activityProfile(timeModelToCalc,converter_usedTech(nodesModelToCalc,yearsToCalc,converter_techs,vintage),"lower")
8699      = converter_techParam(converter_techs,vintage,"activityLowerLimit");
8700   
8701   
8702  set converter_finiteUnitLimit(nodesModelToCalc,yearsToCalc,converter_techs);
8703  converter_finiteUnitLimit(nodesModelToCalc,yearsToCalc,converter_techs)
8704      = sum(nodesData$aggregateNodesModel(nodesData,nodesModelToCalc), converter_capacityParamIn(nodesData,yearsToCalc,converter_techs,"unitsUpperLimit")) > 0
8705          and sum(nodesData$aggregateNodesModel(nodesData,nodesModelToCalc), converter_capacityParamIn(nodesData,yearsToCalc,converter_techs,"unitsUpperLimit")) < inf;
8706   
8707  set converter_infiniteUnitLimit(nodesModelToCalc,yearsToCalc,converter_techs);
8708  converter_infiniteUnitLimit(nodesModelToCalc,yearsToCalc,converter_techs)
8709      = sum(nodesData$aggregateNodesModel(nodesData,nodesModelToCalc), converter_capacityParamIn(nodesData,yearsToCalc,converter_techs,"unitsUpperLimit")) = inf;
8710   
8711  converter_activityProfile(timeModelToCalc,converter_usedTech(nodesModelToCalc,yearsToCalc,converter_techs,vintage),pc_converter_activityProfile)
8712      $(converter_activity_hasProfile(nodesModelToCalc,yearsToCalc,converter_techs,pc_converter_activityProfile)
8713          and converter_finiteUnitLimit(nodesModelToCalc,yearsToCalc,converter_techs))
8714      = sum(nodesData$(aggregateNodesModel(nodesData,nodesModelToCalc)
8715                  and converter_capacityParamIn(nodesData,yearsToCalc,converter_techs,"unitsUpperLimit") < inf ),
8716                converter_activityProfileIn_aggTime(timeModelToCalc,nodesData,yearsToCalc,converter_techs,pc_converter_activityProfile)
8717                * converter_capacityParamIn(nodesData,yearsToCalc,converter_techs,"unitsUpperLimit"))
8718      / sum(nodesData$aggregateNodesModel(nodesData,nodesModelToCalc),
8719              converter_capacityParamIn(nodesData,yearsToCalc,converter_techs,"unitsUpperLimit"));
8720   
8721  converter_activityProfile(timeModelToCalc,converter_usedTech(nodesModelToCalc,yearsToCalc,converter_techs,vintage),pc_converter_activityProfile)
8722      $(converter_activity_hasProfile(nodesModelToCalc,yearsToCalc,converter_techs,pc_converter_activityProfile)
8723          and converter_infiniteUnitLimit(nodesModelToCalc,yearsToCalc,converter_techs))
8724      = sum(nodesData$(aggregateNodesModel(nodesData,nodesModelToCalc)
8725                  and converter_capacityParamIn(nodesData,yearsToCalc,converter_techs,"unitsUpperLimit") = inf),
8726                converter_activityProfileIn_aggTime(timeModelToCalc,nodesData,yearsToCalc,converter_techs,pc_converter_activityProfile)
8727                * converter_capacityParamIn(nodesData,yearsToCalc,converter_techs,"unitsUpperLimit"))
8728      / sum(nodesData$(aggregateNodesModel(nodesData,nodesModelToCalc)
8729                      and converter_capacityParamIn(nodesData,yearsToCalc,converter_techs,"unitsUpperLimit") = inf ),
8730              1);
8731  option clear = converter_activityProfileIn_aggTime;
8732   
8733  * for fixed profiles overwrite upper and lower profile
8734  converter_activityProfile(timeModelToCalc,nodesModelToCalc,yearsToCalc,converter_techs,vintage,"lower")
8735      $converter_activity_hasProfile(nodesModelToCalc,yearsToCalc,converter_techs,"fixed")
8736      = converter_activityProfile(timeModelToCalc,nodesModelToCalc,yearsToCalc,converter_techs,vintage,"fixed");
8737   
8738  converter_activityProfile(timeModelToCalc,nodesModelToCalc,yearsToCalc,converter_techs,vintage,"upper")
8739      $converter_activity_hasProfile(nodesModelToCalc,yearsToCalc,converter_techs,"fixed")
8740      = converter_activityProfile(timeModelToCalc,nodesModelToCalc,yearsToCalc,converter_techs,vintage,"fixed");
8741   
8743   
8744  * weighted average for a real sum of units upper limits, plain average if one region has an upper limit of inf
8745  parameter converter_coefficientProfile(timeModel,nodesModel,years,converter_techs,vintage,activity,commodity);
8746  converter_coefficientProfile(timeModelToCalc,converter_usedTechAct(nodesModelToCalc,yearsToCalc,converter_techs,vintage,activity),commodity)
8747      = converter_coefficient(converter_techs,vintage,activity,commodity,"coefficient");
8748   
8749  converter_coefficientProfile(timeModelToCalc,converter_usedTechAct(nodesModelToCalc,yearsToCalc,converter_techs,vintage,activity),commodity)
8750      $( converter_coefficient_hasProfile(nodesModelToCalc,yearsToCalc,converter_techs,vintage,activity,commodity)
8751          and converter_finiteUnitLimit(nodesModelToCalc,yearsToCalc,converter_techs) )
8752      = sum(nodesData$aggregateNodesModel(nodesData,nodesModelToCalc),
8753            sum(timeData$timeMapping(timeData,timeModelToCalc),
8754                    converter_coefficientProfileIn(timeData,nodesData,yearsToCalc,converter_techs,vintage,activity,commodity))
8755                / timeLength(timeModelToCalc)
8756              * converter_capacityParamIn(nodesData,yearsToCalc,converter_techs,"unitsUpperLimit") )
8757      / sum(nodesData$aggregateNodesModel(nodesData,nodesModelToCalc),
8758              converter_capacityParamIn(nodesData,yearsToCalc,converter_techs,"unitsUpperLimit"));
8759   
8760  converter_coefficientProfile(timeModelToCalc,converter_usedTechAct(nodesModelToCalc,yearsToCalc,converter_techs,vintage,activity),commodity)
8761      $( converter_coefficient_hasProfile(nodesModelToCalc,yearsToCalc,converter_techs,vintage,activity,commodity)
8762          and converter_infiniteUnitLimit(nodesModelToCalc,yearsToCalc,converter_techs))
8763      = sum(nodesData$(aggregateNodesModel(nodesData,nodesModelToCalc)
8764                      and converter_capacityParamIn(nodesData,yearsToCalc,converter_techs,"unitsUpperLimit") = inf ),
8765            sum(timeData$timeMapping(timeData,timeModelToCalc),
8766                    converter_coefficientProfileIn(timeData,nodesData,yearsToCalc,converter_techs,vintage,activity,commodity))
8767                / timeLength(timeModelToCalc))
8768      / sum(nodesData$(aggregateNodesModel(nodesData,nodesModelToCalc)
8769                      and converter_capacityParamIn(nodesData,yearsToCalc,converter_techs,"unitsUpperLimit") = inf ), 1);
8770   
8772   
8773  * ==== prepare partial load behavior parameters ====
8774   
8775  * set disabled max load requirements to 1 to avoid excessive logical expressions later on
8776  alias(commodity, com);
8777  converter_coefficient(converter_techs,vintage,activity,commodity,"maxLoad")
8778      $((converter_coefficient(converter_techs,vintage,activity,commodity,"maxLoad") = 0)
8779        and converter_usedAct(converter_techs,vintage,activity))
8780      = 1;
8781   
8782  * indicate that at least one activity of a technology makes use of partial load behavior
8783  set converter_hasMaxLoad(converter_techs,vintage);
8784  converter_hasMaxLoad(converter_techs,vintage)
8785    = smin((activity,commodity)$converter_usedAct(converter_techs,vintage,activity),
8786              converter_coefficient(converter_techs,vintage,activity,commodity,"maxLoad")) < 1;
8787   
8788  set converter_hasMinLoad(converter_techs,vintage);
8789  converter_hasMinLoad(converter_techs,vintage)
8790    = smax((activity,commodity)$converter_usedAct(converter_techs,vintage,activity),
8791              converter_coefficient(converter_techs,vintage,activity,commodity,"minLoad")) > 0;
8792   
8793  set converter_hasConstantFluxInActivity(converter_techs,vintage);
8794  converter_hasConstantFluxInActivity(converter_techs,vintage)
8795    = sum((activity,commodity)$converter_usedAct(converter_techs,vintage,activity),
8796                          abs(converter_coefficient(converter_techs,vintage,activity,commodity,"constant"))) > 0;
8797   
8798  * setting up a requirements parameter to avoid having to cycle through commodities in equations
8799  set pc_converter_activityRequirements
8800      /
8801      minLoad             "Lower profile for converter activity"
8802      maxLoad             "Upper profile for converter activity"
8803      /;
8804  parameter converter_activityRequirements(converter_techs,vintage,activity,pc_converter_activityRequirements);
8805  converter_activityRequirements(converter_techs,vintage,activity,"minLoad")
8806    = smax(commodity, converter_coefficient(converter_techs,vintage,activity,commodity,"minLoad"));
8807  converter_activityRequirements(converter_techs,vintage,activity,"maxLoad")
8808    = smin(commodity, converter_coefficient(converter_techs,vintage,activity,commodity,"maxLoad"));
8809   
8810  * ==== activate MIP units for MIP dispatch or partial load technologies ====
8811   
8812  set converter_hasMinUptime(converter_techs,vintage);
8813  converter_hasMinUptime(converter_techs,vintage)
8814    $(converter_techParam(converter_techs,vintage,"minUptime")
8815      and converter_techParam(converter_techs,vintage,"mipDispatch"))
8816    = yes;
8817   
8818  set converter_hasMinDowntime(converter_techs,vintage);
8819  converter_hasMinDowntime(converter_techs,vintage)
8820    $(converter_techParam(converter_techs,vintage,"minDowntime")
8821      and converter_techParam(converter_techs,vintage,"mipDispatch"))
8822    = yes;
8823   
8824  * require integer unit counts if online state is to be tracked
8825  converter_techParam(converter_techs,vintage,"mipUnits")
8826      $(converter_techParam(converter_techs,vintage,"mipDispatch")
8827        or converter_hasMinLoad(converter_techs, vintage)
8828        or converter_hasMaxLoad(converter_techs, vintage)
8829        or converter_hasConstantFluxInActivity(converter_techs,vintage))
8830      = 1;
8831   
8832  * ==== floor mip converter units to integer values ====
8833  converter_capacityParam(nodesModelToCalc,yearsToCalc,converter_techs,"unitsLowerLimit")
8834      $sum(vintage, converter_techParam(converter_techs,vintage,"mipUnits"))
8835      = floor(converter_capacityParam(nodesModelToCalc,yearsToCalc,converter_techs,"unitsLowerLimit"));
8836  converter_capacityParam(nodesModelToCalc,yearsToCalc,converter_techs,"unitsUpperLimit")
8837      $sum(vintage, converter_techParam(converter_techs,vintage,"mipUnits"))
8838      = ceil(converter_capacityParam(nodesModelToCalc,yearsToCalc,converter_techs,"unitsUpperLimit"));
8839   
8840  * ==== scalars and sets for minUptime and minDowntime ====
8841   
8842  scalar converter_maxUptimeReq;
8843  converter_maxUptimeReq = smax((converter_techs,vintage), converter_techParam(converter_techs,vintage,"minUptime"));
8844  set uptimeSearchRange(timeModelToCalc);
8845  uptimeSearchRange(timeModelToCalc) = ord(timeModelToCalc) <= converter_maxUptimeReq;
8846   
8847  scalar converter_maxDowntimeReq;
8848  converter_maxDowntimeReq = smax((converter_techs,vintage), converter_techParam(converter_techs,vintage,"minDowntime"));
8849  set downtimeSearchRange(timeModelToCalc);
8850  downtimeSearchRange(timeModelToCalc) = ord(timeModelToCalc) <= converter_maxDowntimeReq;
8851   
8852  * ==== definition of variables ====
8853   
8854  * Initialise variables for unitsBuild
8855  converter_unitsBuild.l(nodesModel,years,converter_techs,vintage)
8856      $converter_availTech(nodesModel,years,converter_techs,vintage)
8857      = converter_capacityParam(nodesModel,years,converter_techs,"unitsBuild");
8858  converter_unitsBuild.lo(nodesModel,yearsToCalc,converter_techs,vintage)
8859      $converter_availTech(nodesModel,yearsToCalc,converter_techs,vintage)
8860      = converter_unitsBuild.l(nodesModel,yearsToCalc,converter_techs,vintage);
8861  converter_unitsBuild.fx(nodesModel,years,converter_techs,vintage)
8862      $converter_capacityParam(nodesModel,years,converter_techs,"noExpansion")
8863      = converter_unitsBuild.l(nodesModel,years,converter_techs,vintage);
8864   
8865  * Initialise variables for unitsDecom
8866  converter_unitsDecom.l(nodesModel,years,converter_techs,vintage)
8867    $(converter_decomTech(nodesModel,years,converter_techs,vintage)
8868      and years.val < sum(yearsToCalc$(ord(yearsToCalc) = 1), yearsToCalc.val))
8869    = sum((years_a,years_aa)$(sameas(years-1, years_aa)
8870                        and years_a.val > years_aa.val - converter_techParam(converter_techs,vintage,'lifeTime')
8871                        and years_a.val <= years.val - converter_techParam(converter_techs,vintage,'lifeTime')
8872                        and converter_availTech(nodesModel,years_a,converter_techs,vintage)),
8873          converter_unitsBuild.l(nodesModel,years_a,converter_techs,vintage));
8874   
8875  converter_unitsDecom.l(nodesModel,yearsToCalc,converter_techs,vintage)
8876    $converter_decomTech(nodesModel,yearsToCalc,converter_techs,vintage)
8877    = sum(years$
8878          (years.val < sum(yearsToCalc_a$(ord(yearsToCalc_a) = 1), yearsToCalc_a.val)
8879            and converter_availTech(nodesModel,years,converter_techs,vintage)
8880            and years.val > sum(years_a$sameas(years_a, yearsToCalc-1), years_a.val) - converter_techParam(converter_techs,vintage,'lifeTime')
8881            and years.val <= yearsToCalc.val - converter_techParam(converter_techs,vintage,'lifeTime')),
8882        converter_unitsBuild.l(nodesModel,years,converter_techs,vintage))
8883      + sum(yearsToCalc_a$
8884          (yearsToCalc_a.val < sum(yearsToCalc_aa$(ord(yearsToCalc_aa) > 1), yearsToCalc_a.val)
8885            and converter_availTech(nodesModel,yearsToCalc_a,converter_techs,vintage)
8886            and yearsToCalc_a.val > sum(years_a$sameas(years_a, yearsToCalc-1), years_a.val) - converter_techParam(converter_techs,vintage,'lifeTime')
8887            and yearsToCalc_a.val <= yearsToCalc.val - converter_techParam(converter_techs,vintage,'lifeTime')),
8888        converter_unitsBuild.l(nodesModel,yearsToCalc_a,converter_techs,vintage));
8889        ;
8890   
8891  converter_unitsDecom.lo(nodesModel,yearsToCalc,converter_techs,vintage)
8892      $(converter_usedTech(nodesModel,yearsToCalc,converter_techs,vintage)
8893          and not converter_techParam(converter_techs,vintage,"freeDecom"))
8894      = converter_unitsDecom.l(nodesModel,yearsToCalc,converter_techs,vintage)
8895   
8896  * Calculate planned unit expansion
8897  parameter converter_unitsPlanned(nodesModel,years,converter_techs,vintage);
8898  converter_unitsPlanned(nodesModel,years,converter_techs,vintage) = 0;
8899  loop(years,
8900    converter_unitsPlanned(nodesModel,years,converter_techs,vintage)
8901      =
8902      converter_unitsPlanned(nodesModel,years-1,converter_techs,vintage)
8903          $converter_usedTech(nodesModel,years-1,converter_techs,vintage)
8904      + converter_unitsBuild.l(nodesModel,years,converter_techs,vintage)
8905          $converter_availTech(nodesModel,years,converter_techs,vintage)
8906      - converter_unitsDecom.l(nodesModel,years,converter_techs,vintage)
8907          $converter_usedTech(nodesModel,years,converter_techs,vintage);
8908  );
8909   
8910  * Set initial state for planned units
8911  converter_unitsTotal.l(nodesModel,years,converter_techs,vintage)
8912    = converter_unitsPlanned(nodesModel,years,converter_techs,vintage)
8913   
8914  * Calculate if planned unit expansion is bounded by upper and lower limits
8915  set converter_unitBoundsFixed(nodesModel,years,converter_techs);
8916  converter_unitBoundsFixed(nodesModel,years,converter_techs)
8917    $(sum(vintage$converter_usedTech(nodesModel,years,converter_techs,vintage),
8918          converter_unitsPlanned(nodesModel,years,converter_techs,vintage))
8919      = converter_capacityParam(nodesModel,years,converter_techs,"unitsUpperLimit")
8920    and sum(vintage$converter_usedTech(nodesModel,years,converter_techs,vintage),
8921          converter_unitsPlanned(nodesModel,years,converter_techs,vintage))
8922      = converter_capacityParam(nodesModel,years,converter_techs,"unitsLowerLimit"))
8923    = yes;
8924   
8925  * Fix unitsBuild, unitsDecom, unitsTotal if levels are predetermined by upper and lower limits
8926  converter_unitsBuild.fx(nodesModel,years,converter_techs,vintage)
8927    $(converter_availTech(nodesModel,years,converter_techs,vintage)
8928      and converter_unitBoundsFixed(nodesModel,years,converter_techs))
8929    = converter_unitsBuild.l(nodesModel,years,converter_techs,vintage);
8930  converter_unitsDecom.fx(nodesModel,years,converter_techs,vintage)
8931    $(converter_usedTech(nodesModel,years,converter_techs,vintage)
8932      and converter_unitBoundsFixed(nodesModel,years,converter_techs))
8933    = converter_unitsDecom.l(nodesModel,years,converter_techs,vintage);
8934  converter_unitsTotal.fx(nodesModel,years,converter_techs,vintage)
8935    $(converter_usedTech(nodesModel,years,converter_techs,vintage)
8936      and converter_unitBoundsFixed(nodesModel,years,converter_techs))
8937    = converter_unitsTotal.l(nodesModel,years,converter_techs,vintage);
8938   
8939  converter_unitsOnline_MIP.up(timeModelToCalc,nodesModel,years,converter_techs,vintage)
8940      $(converter_usedTech(nodesModel,years,converter_techs,vintage)
8941        and converter_techParam(converter_techs,vintage,"mipDispatch") = 1)
8942      = converter_capacityParam(nodesModel,years,converter_techs,"unitsUpperLimit");
8943   
8944  converter_unitsTotal_MIP.up(nodesModel,years,converter_techs,vintage)
8945      $(converter_usedTech(nodesModel,years,converter_techs,vintage)
8946        and converter_techParam(converter_techs,vintage,"mipUnits") = 1)
8947      = converter_capacityParam(nodesModel,years,converter_techs,"unitsUpperLimit");
8948   
8949  converter_unitsUsingActivity_MIP.up(timeModelToCalc,nodesModel,years,converter_techs,vintage,activity)
8950      $(converter_usedTech(nodesModel,years,converter_techs,vintage)
8951        and (converter_hasMinLoad(converter_techs, vintage)
8952              or converter_hasMaxLoad(converter_techs, vintage)))
8953      = converter_capacityParam(nodesModel,years,converter_techs,"unitsUpperLimit");
8954   
8955  * Add parameter for fixing capacities during myopic runs
8956  parameter converter_unitsDelta(nodesModel,years,converter_techs);
8957   
8958  * ==== declaration of equations ====
8959   
8960  equations
8961    Eq_converter_unitsBalance(nodesModel,years,converter_techs,vintage
8962      ) "Ensures the units balance over the planning period."
8963    Eq_converter_unitsFixedDecom(nodesModel,years,converter_techs,vintage
8964      ) "Restricts the fixed decommissioning of units over the planning period."
8965    Eq_converter_unitsFreeDecom(nodesModel,years,converter_techs,vintage
8966      ) "Restricts the free decommissioning of units over the planning period."
8967    Eq_converter_unitsUpperLimit(nodesModel,years,converter_techs
8968      ) "Upper bound for the total number of units."
8969    Eq_converter_unitsLowerLimit(nodesModel,years,converter_techs
8970      ) "Lower bound for the total number of units."
8971    Eq_converter_unitsFixedLimit(nodesModel,years,converter_techs
8972      ) "Fixed bound for the total number of units."
8973    Eq_converter_unitsTotalMIP(nodesModel,years,converter_techs,vintage
8974      ) "Fixes the total number of units to the corresponding integer variable."
8975    Eq_converter_unitsOnlineMIP(timeModel,nodesModel,years,converter_techs,vintage
8976      ) "Fixes the number of online units to the corresponding integer variable."
8977   
8978    Eq_converter_activityLowerLimit(timeModel,nodesModel,years,converter_techs,vintage
8979      ) "Lower limit on the activity."
8980    Eq_converter_activityUpperLimit(timeModel,nodesModel,years,converter_techs,vintage
8981      ) "Upper limit on the activity."
8982   
8983    Eq_converter_activityFixedLimit(timeModel,nodesModel,years,converter_techs,vintage
8984      ) "Fixed limit on the activity."
8985    Eq_converter_rampPos(timeModel,nodesModel,years,converter_techs,vintage
8986      ) "Positive ramping of unit activity."
8987    Eq_converter_rampNeg(timeModel,nodesModel,years,converter_techs,vintage
8988      ) "Negative ramping of unit activity."
8989    Eq_converter_rampLimit(timeModel,nodesModel,years,converter_techs,vintage
8990      ) "Restrict ramping up of unit activity."
8991   
8992    Eq_converter_unitsOnline(timeModel,nodesModel,years,converter_techs,vintage
8993      ) "Set online units to total number of operational units."
8994    Eq_converter_unitsOnlineUC(timeModel,nodesModel,years,converter_techs,vintage
8995      ) "Allow shutting down units."
8996    Eq_converter_activityStartups(timeModel,nodesModel,years,converter_techs,vintage
8997      ) "Variable counting the number of unit startups."
8998    Eq_converter_activityShutdowns(timeModel,nodesModel,years,converter_techs,vintage
8999      ) "Variable tracking the number of unit shutdowns."
9000    Eq_converter_limitStartups(nodesModel,years,converter_techs,vintage
9001      ) "Limit the number of startup cycles a unit can perform."
9002    Eq_converter_minUptime(timeModel,nodesModel,years,converter_techs,vintage
9003      ) "Require recently started units to remain online for their respective minimum uptime."
9004    Eq_converter_minDowntime(timeModel,nodesModel,years,converter_techs,vintage
9005      ) "Require recently shut down units to remain offline for their respective minimum downtime."
9006    Eq_converter_activityUpperLimitDetailedPartLoadMinReq(timeModel,nodesModel,years,converter_techs,vintage,activity
9007      ) "Limit activity coefficients of activities with a given load requirement or stricter to the number of units in such modes."
9008    Eq_converter_activityUpperLimitDetailedPartLoadMaxReq(timeModel,nodesModel,years,converter_techs,vintage,activity
9009      ) "Limit activity coefficients of activities with a given load requirement or stricter to the number of units in such modes."
9010    Eq_converter_activityLowerLimitDetailedPartLoadMinReq(timeModel,nodesModel,years,converter_techs,vintage,activity
9011      ) "Enforce sufficient activity coefficients of activities to justify all active modes."
9012    Eq_converter_noOnlineIdle(timeModel,nodesModel,years,converter_techs,vintage
9013      ) "Prevent the circumvention of requirements by keeping units online without using any modes."
9014    Eq_converter_noOnlineIdleDetailedPartLoad(timeModel,nodesModel,years,converter_techs,vintage
9015      ) "Prevent the circumvention of requirements by keeping units online without using any modes. Allow more than one mode activation per unit."
9016    Eq_converter_activityUpperLimitPartLoad(timeModel,nodesModel,years,converter_techs,vintage,activity
9017      ) "Limit usage of an activity to corresponding units."
9018    Eq_converter_activityLowerLimitPartLoad(timeModel,nodesModel,years,converter_techs,vintage,activity
9019      ) "Limit usage of an activity to corresponding units."
9020    Eq_converter_activityModeLimit(timeModel,nodesModel,years,converter_techs,vintage,activity
9021      ) "Limit the number of units in one particular mode to the number of operational units."
9022    ;
9023   
9024  * ==== equation definition ====
9025  * // ## Equations
9026  * // ### Converter Units Balance
9027  * // Ensures that the total units are consistent with the built and decommissioned units.
9028  * // {Eq_converter_unitsBalance}
9029  Eq_converter_unitsBalance(nodesModelSel,yearsSel,converter_techs,vintage)
9030      $((converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
9031            or sum(years$sameas(years,yearsSel), converter_usedTech(nodesModelSel,years-1,converter_techs,vintage)))
9032          and not converter_unitBoundsFixed(nodesModelSel,yearsSel,converter_techs))
9033      ..
9034      converter_unitsTotal(nodesModelSel,yearsSel,converter_techs,vintage)
9035      =e=
9036      sum(yearsToCalc$(ord(yearsToCalc) = 1 and sameas(yearsToCalc, yearsSel)),
9037        sum(years$sameas(years, yearsToCalc),
9038          converter_unitsTotal(nodesModelSel,years-1,converter_techs,vintage)
9039            $converter_usedTech(nodesModelSel,years-1,converter_techs,vintage)))
9040      + sum((yearsToCalc)$(ord(yearsToCalc) > 1 and sameas(yearsToCalc, yearsSel)),
9041        converter_unitsTotal(nodesModelSel,yearsToCalc-1,converter_techs,vintage)
9042          $converter_usedTech(nodesModelSel,yearsToCalc-1,converter_techs,vintage))
9043      + converter_unitsBuild(nodesModelSel,yearsSel,converter_techs,vintage)
9044          $converter_availTech(nodesModelSel,yearsSel,converter_techs,vintage)
9045      - converter_unitsDecom(nodesModelSel,yearsSel,converter_techs,vintage)
9046          $converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage);
9047   
9048  * // ### Converter Units Fixed Decommission
9049  * // Restricts the fixed decommissioning of units over the planning period.
9050  * // {Eq_converter_unitsFixedDecom}
9051  Eq_converter_unitsFixedDecom(nodesModelSel,yearsSel,converter_techs,vintage)
9052      $(converter_decomTech(nodesModelSel,yearsSel,converter_techs,vintage)
9053          and not converter_techParam(converter_techs,vintage,"freeDecom") = 1
9054          and not converter_unitBoundsFixed(nodesModelSel,yearsSel,converter_techs))
9055      ..
9056      converter_unitsDecom(nodesModelSel,yearsSel,converter_techs,vintage)
9057      =e=
9058      sum(years$
9059          (converter_availTech(nodesModelSel,years,converter_techs,vintage)
9060            and years.val > sum(yearsToCalc$sameas(yearsToCalc+1, yearsSel), yearsToCalc.val) - converter_techParam(converter_techs,vintage,'lifeTime')
9061            and years.val <= yearsSel.val - converter_techParam(converter_techs,vintage,'lifeTime')),
9062        converter_unitsBuild(nodesModelSel,years,converter_techs,vintage));
9063   
9064  * // ### Converter Units Free Decommission
9065  * // Restricts the free decommissioning of units over the planning period.
9066  * // {Eq_converter_unitsFreeDecom}
9067  Eq_converter_unitsFreeDecom(nodesModelSel,yearsSel,converter_techs,vintage)
9068      $((converter_decomTech(nodesModelSel,yearsSel,converter_techs,vintage)
9069          or converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage))
9070          and converter_techParam(converter_techs,vintage,"freeDecom") = 1)
9071      ..
9072      sum(years$
9073            ((converter_decomTech(nodesModelSel,years,converter_techs,vintage)
9074              or converter_usedTech(nodesModelSel,years,converter_techs,vintage))
9075              and years.val < sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)),
9076          converter_unitsDecom(nodesModelSel,years,converter_techs,vintage))
9077      + sum(yearsToCalc$
9078            ((converter_decomTech(nodesModelSel,yearsToCalc,converter_techs,vintage)
9079              or converter_usedTech(nodesModelSel,yearsToCalc,converter_techs,vintage))
9080              and yearsToCalc.val >= sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
9081              and yearsToCalc.val <= yearsSel.val),
9082          converter_unitsDecom(nodesModelSel,yearsToCalc,converter_techs,vintage))
9083      =g=
9084      sum(years$
9085            (converter_availTech(nodesModelSel,years,converter_techs,vintage)
9086              and years.val < sum(yearsToCalc$(ord(yearsToCalc)=1), yearsToCalc.val) - converter_techParam(converter_techs,vintage,'lifeTime')),
9087          converter_unitsBuild(nodesModelSel,years,converter_techs,vintage))
9088      + sum(yearsToCalc$
9089            (converter_availTech(nodesModelSel,yearsToCalc,converter_techs,vintage)
9090              and yearsToCalc.val >= sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
9091              and yearsToCalc.val <= yearsSel.val - converter_techParam(converter_techs,vintage,'lifeTime')),
9092          converter_unitsBuild(nodesModelSel,yearsToCalc,converter_techs,vintage));
9093   
9094  * // ### Converter Units Upper Limit
9095  * // Upper bound for the total number of units.
9096  * // {Eq_converter_unitsUpperLimit}
9097  Eq_converter_unitsUpperLimit(nodesModelSel,yearsSel,converter_techs)
9098      $(converter_capacityParam(nodesModelSel,yearsSel,converter_techs,'unitsUpperLimit') >= 0
9099          and converter_capacityParam(nodesModelSel,yearsSel,converter_techs,'unitsUpperLimit') < +inf
9100          and converter_capacityParam(nodesModelSel,yearsSel,converter_techs,'unitsUpperLimit')
9101              <> converter_capacityParam(nodesModelSel,yearsSel,converter_techs,'unitsLowerLimit'))
9102      ..
9103      sum(vintage$converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage),
9104          converter_unitsTotal(nodesModelSel,yearsSel,converter_techs,vintage))
9105      =l=
9106      converter_capacityParam(nodesModelSel,yearsSel,converter_techs,"unitsUpperLimit");
9107   
9108  * // ### Converter Units Lower Limit
9109  * // Lower bound for the total number of units.
9110  * // {Eq_converter_unitsLowerLimit}
9111  Eq_converter_unitsLowerLimit(nodesModelSel,yearsSel,converter_techs)
9112      $(converter_capacityParam(nodesModelSel,yearsSel,converter_techs,'unitsLowerLimit') > 0
9113          and converter_capacityParam(nodesModelSel,yearsSel,converter_techs,'unitsLowerLimit')
9114              <> converter_capacityParam(nodesModelSel,yearsSel,converter_techs,'unitsUpperLimit'))
9115      ..
9116      sum(vintage$converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage),
9117          converter_unitsTotal(nodesModelSel,yearsSel,converter_techs,vintage))
9118      =g=
9119      converter_capacityParam(nodesModelSel,yearsSel,converter_techs,"unitsLowerLimit");
9120   
9121  Eq_converter_unitsFixedLimit(nodesModelSel,yearsSel,converter_techs)
9122      $(converter_capacityParam(nodesModelSel,yearsSel,converter_techs,'unitsLowerLimit')
9123          = converter_capacityParam(nodesModelSel,yearsSel,converter_techs,'unitsUpperLimit'))
9124      ..
9125      sum(vintage$converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage),
9126          converter_unitsTotal(nodesModelSel,yearsSel,converter_techs,vintage))
9127      =e=
9128      converter_capacityParam(nodesModelSel,yearsSel,converter_techs,"unitsUpperLimit");
9129   
9130  * // ### Converter Units Total MIP
9131  * // Fixes the total number of units to the corresponding integer variable.
9132  * // {Eq_converter_unitsTotalMIP}
9133  Eq_converter_unitsTotalMIP(nodesModelSel,yearsSel,converter_techs,vintage)
9134      $( converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
9135          and converter_techParam(converter_techs,vintage,"mipUnits") = 1 )
9136      ..
9137      converter_unitsTotal(nodesModelSel,yearsSel,converter_techs,vintage)
9138      =e=
9139      converter_unitsTotal_MIP(nodesModelSel,yearsSel,converter_techs,vintage);
9140   
9141  * // ### Converter Units Online MIP
9142  * // Fixes the number of online units to the corresponding integer variable.
9143  * // {Eq_converter_unitsOnlineMIP}
9144  Eq_converter_unitsOnlineMIP(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
9145      $( converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
9146          and converter_techParam(converter_techs,vintage,"mipDispatch") = 1 )
9147      ..
9148      converter_unitsOnline(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
9149      =e=
9150      converter_unitsOnline_MIP(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage);
9151   
9152  * // ### Converter Activity Lower Limit
9153  * // Lower limit on the activity.
9154  * // {Eq_converter_activityLowerLimit}
9155  Eq_converter_activityLowerLimit(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
9156      $(converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
9157          and converter_activityProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,"lower") > 0
9158          and converter_activityProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,"lower")
9159               <> converter_activityProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,"upper")
9160          and not converter_hasMinLoad(converter_techs, vintage))
9161      ..
9162      sum(activity$converter_usedAct(converter_techs,vintage,activity),
9163          converter_activity(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity)
9164      )
9165      =g=
9166      converter_activityProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,"lower")
9168      * converter_unitsOnline(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage);
9170   
9171  * // ### Converter Activity Upper Limit
9172  * // Upper limit on the activity.
9173  * // {Eq_converter_activityUpperLimit}
9174  Eq_converter_activityUpperLimit(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
9175      $(converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
9176          and converter_activityProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,"upper") >= 0
9177          and converter_activityProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,"upper")
9178               <> converter_activityProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,"lower"))
9179      ..
9180      sum(activity$converter_usedAct(converter_techs,vintage,activity),
9181          converter_activity(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity)
9182      )
9183      =l=
9184      converter_activityProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,"upper")
9186      * converter_unitsOnline(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage);
9188   
9189  Eq_converter_activityFixedLimit(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
9190      $(converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
9191          and converter_activityProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,"lower")
9192               = converter_activityProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,"upper"))
9193      ..
9194      sum(activity$converter_usedAct(converter_techs,vintage,activity),
9195          converter_activity(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity)
9196      )
9197      =e=
9198      converter_activityProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,"upper")
9200      * converter_unitsOnline(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage);
9202   
9203  * // ### Converter Positive Ramping
9204  * // Positive ramping of unit activity.
9205  * // {Eq_converter_rampPos}
9206  Eq_converter_rampPos(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,converter_techs,vintage)
9207    $( converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
9208        and converter_useRampPos(nodesModelSel,yearsSel,converter_techs,vintage))
9209      ..
9210      converter_rampPos(timeModelToCalc,nodesModelSel,yearsSel,converter_techs,vintage)
9211      =g=
9212      sum(activity$converter_usedAct(converter_techs,vintage,activity),
9213              converter_activity(timeModelToCalc,nodesModelSel,yearsSel,converter_techs,vintage,activity)
9214              - converter_activity(timeModelToCalc--1,nodesModelSel,yearsSel,converter_techs,vintage,activity));
9215   
9216  * // ### Converter Negative Ramping
9217  * // Negative ramping of unit activity.
9218  * // {Eq_converter_rampNeg}
9219  Eq_converter_rampNeg(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,converter_techs,vintage)
9220    $( converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
9221        and converter_useRampNeg(nodesModelSel,yearsSel,converter_techs,vintage))
9222      ..
9223      converter_rampNeg(timeModelToCalc,nodesModelSel,yearsSel,converter_techs,vintage)
9224      =g=
9225      - sum(activity$converter_usedAct(converter_techs,vintage,activity),
9226              converter_activity(timeModelToCalc,nodesModelSel,yearsSel,converter_techs,vintage,activity)
9227              - converter_activity(timeModelToCalc--1,nodesModelSel,yearsSel,converter_techs,vintage,activity));
9228   
9229  * // ### Converter Ramping Limit
9230  * // Restrict ramping up of unit activity.
9231  * // {Eq_converter_rampLimit}
9232  Eq_converter_rampLimit(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,converter_techs,vintage)
9233    $( converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
9234          and converter_techParam(converter_techs,vintage,"activityRampLimit") > 0)
9235      ..
9236      sum(activity$converter_usedAct(converter_techs,vintage,activity),
9237              converter_activity(timeModelToCalc,nodesModelSel,yearsSel,converter_techs,vintage,activity)
9238              - converter_activity(timeModelToCalc--1,nodesModelSel,yearsSel,converter_techs,vintage,activity))
9239    =l=
9240    converter_techParam(converter_techs,vintage,"activityRampLimit")
9242      * converter_unitsOnline(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage);
9244   
9245   
9247   
9248  * // ### Converter MIP Units Online
9249  * // Restrict ramping up of unit activity.
9250  * // {Eq_converter_unitsOnline}
9251  Eq_converter_unitsOnline(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
9252      $( converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
9253          and converter_techParam(converter_techs,vintage,"mipDispatch") = 0 )
9254    ..
9255    converter_unitsOnline(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
9256    =e=
9257    converter_unitsTotal(nodesModelSel,yearsSel,converter_techs,vintage)
9258      ;
9259   
9260  * // ### Converter MIP Units Shutting Down
9261  * // Allow shutting down units.
9262  * // {Eq_converter_unitsOnlineUC}
9263  Eq_converter_unitsOnlineUC(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
9264      $( converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
9265          and converter_techParam(converter_techs,vintage,"mipDispatch") = 1 )
9266    ..
9267    converter_unitsOnline(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
9268    =l=
9269    converter_unitsTotal(nodesModelSel,yearsSel,converter_techs,vintage)
9270      ;
9272   
9273  * // ### Converter Activity Startups
9274  * // Variable counting the number of unit startups.
9275  * // {Eq_converter_activityStartups}
9276  Eq_converter_activityStartups(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,converter_techs,vintage)
9277    $( converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
9278          and converter_techParam(converter_techs,vintage,"mipDispatch") = 1 )
9279      ..
9280      converter_unitStartups(timeModelToCalc,nodesModelSel,yearsSel,converter_techs,vintage)
9281      =g=
9282          converter_unitsOnline(timeModelToCalc,nodesModelSel,yearsSel,converter_techs,vintage)
9283      - converter_unitsOnline(timeModelToCalc--1,nodesModelSel,yearsSel,converter_techs,vintage);
9284   
9285  * // ### Converter Activity Shutdowns
9286  * // Variable tracking the number of unit shutdowns.
9287  * // {Eq_converter_activityShutdowns}
9288  Eq_converter_activityShutdowns(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,converter_techs,vintage)
9289    $( converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
9290          and converter_techParam(converter_techs,vintage,"mipDispatch") = 1
9291          and converter_techParam(converter_techs,vintage,"minDowntime") > 0)
9292      ..
9293      converter_unitShutdowns(timeModelToCalc,nodesModelSel,yearsSel,converter_techs,vintage)
9294      =g=
9295          converter_unitsOnline(timeModelToCalc--1,nodesModelSel,yearsSel,converter_techs,vintage)
9296      - converter_unitsOnline(timeModelToCalc,nodesModelSel,yearsSel,converter_techs,vintage);
9297   
9298  * // ### Converter Activity Startup Limit
9299  * // Limit the number of startup cycles a unit can perform.
9300  * // {Eq_converter_limitStartups}
9301  Eq_converter_limitStartups(nodesModelSel,yearsSel,converter_techs,vintage)
9302    $( converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
9303          and converter_techParam(converter_techs,vintage,"mipDispatch") = 1
9304      and converter_techParam(converter_techs,vintage,"startupLimit") > 0)
9305      ..
9306      sum(timeModelToCalc, converter_unitStartups(timeModelToCalc,nodesModelSel,yearsSel,converter_techs,vintage))
9307    =l=
9308    converter_techParam(converter_techs,vintage,"startupLimit")
9309    * converter_unitsTotal(nodesModelSel,yearsSel,converter_techs,vintage);
9310   
9311  alias(timeModelToCalc,ttc);
9312   
9313  * // ### Converter Units Minimum Uptime
9314  * // Require recently started units to remain online for their respective minimum uptime.
9315  * // {Eq_converter_minUptime}
9316  Eq_converter_minUptime(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,converter_techs,vintage)
9317    $( converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
9318          and converter_techParam(converter_techs,vintage,"mipDispatch") = 1
9319      and converter_techParam(converter_techs,vintage,"minUptime") > 0)
9320      ..
9321      sum(ttc$[uptimeSearchRange(ttc) and ord(ttc)<=converter_techParam(converter_techs,vintage,"minUptime")],
9322          converter_unitStartups(ttc+[ord(timeModelToCalc)-converter_techParam(converter_techs,vintage,"minUptime")],
9323              nodesModelSel,yearsSel,converter_techs,vintage))
9324          =l=
9325          converter_unitsOnline(timeModelToCalc,nodesModelSel,yearsSel,converter_techs,vintage);
9326   
9327  * // ### Converter Units Minimum Downtime
9328  * // Require recently shut down units to remain offline for their respective minimum downtime.
9329  * // {Eq_converter_minDowntime}
9330  Eq_converter_minDowntime(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,converter_techs,vintage)
9331    $( converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
9332          and converter_techParam(converter_techs,vintage,"mipDispatch") = 1
9333      and converter_techParam(converter_techs,vintage,"minDowntime") > 0)
9334      ..
9335      sum(ttc$[downtimeSearchRange(ttc) and ord(ttc)<=converter_techParam(converter_techs,vintage,"minDowntime")],
9336          converter_unitShutdowns(ttc+[ord(timeModelToCalc)-converter_techParam(converter_techs,vintage,"minDowntime")],
9337              nodesModelSel,yearsSel,converter_techs,vintage))
9338          =l=
9339          converter_unitsTotal(nodesModelSel,yearsSel,converter_techs,vintage)
9340      - converter_unitsOnline(timeModelToCalc,nodesModelSel,yearsSel,converter_techs,vintage);
9341   
9342  * This equation is meant to cause the units to activate particular mode counters to gain access to the corresponding activities.
9343  * Activities are allowed to be used on units with stricter activity requirements but not the other way around.
9344  alias(activity, act);
9345   
9346  * // ### Converter MIP Units Activity Upper Limit Minimum Required Load
9347  * // Limit activity coefficients of activities with a given load requirement or stricter to the number of units in such modes.
9348  * // {Eq_converter_activityUpperLimitDetailedPartLoadMinReq}
9349  Eq_converter_activityUpperLimitDetailedPartLoadMinReq(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity)
9350    $( converter_usedTechAct(nodesModelSel,yearsSel,converter_techs,vintage,activity)
9351          and converter_hasMinLoad(converter_techs, vintage)
9352          and converter_techParam(converter_techs,vintage,"mipDetailedPartialLoad"))
9353      ..
9354      sum(act$(converter_activityRequirements(converter_techs,vintage,act,"minLoad")
9355                  >= converter_activityRequirements(converter_techs,vintage,activity,"minLoad")
9356               and converter_usedAct(converter_techs,vintage,act)),
9357      converter_activity(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,act))
9358    =l=
9359    converter_activityProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,"upper")
9360      * sum(act$(converter_activityRequirements(converter_techs,vintage,act,"minLoad")
9361                  >= converter_activityRequirements(converter_techs,vintage,activity,"minLoad")
9362                 and converter_usedAct(converter_techs,vintage,act)),
9363      converter_unitsUsingActivity_MIP(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,act));
9364   
9365  * // ### Converter MIP Units Activity Upper Limit Maximum Required Load
9366  * // Limit activity coefficients of activities with a given load requirement or stricter to the number of units in such modes.
9367  * // {Eq_converter_activityUpperLimitDetailedPartLoadMaxReq}
9368  Eq_converter_activityUpperLimitDetailedPartLoadMaxReq(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity)
9369    $( converter_usedTechAct(nodesModelSel,yearsSel,converter_techs,vintage,activity)
9370          and converter_hasMaxLoad(converter_techs,vintage)
9371          and converter_techParam(converter_techs,vintage,"mipDetailedPartialLoad"))
9372      ..
9373      sum(act$(converter_activityRequirements(converter_techs,vintage,act,"maxLoad")
9374                  <= converter_activityRequirements(converter_techs,vintage,activity,"maxLoad")
9375               and converter_usedAct(converter_techs,vintage,act)),
9376      converter_activity(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,act))
9377    =l=
9378      sum(act$(converter_activityRequirements(converter_techs,vintage,act,"maxLoad")
9379                  <= converter_activityRequirements(converter_techs,vintage,activity,"maxLoad")
9380               and converter_usedAct(converter_techs,vintage,act)),
9381      min(converter_activityRequirements(converter_techs,vintage,act,"maxLoad"),
9382            converter_activityProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,"upper"))
9383            * converter_unitsUsingActivity_MIP(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,act));
9384   
9385  * This equation is meant to enforce the lower limit requirements of activities in use.
9386  * Loads produced by activities with less strict requirements can contribute to the minimum load requirement of strict activities but not the other way around,
9387  * because these activities can only run on units in the respectively strict activation state.
9388   
9389  * // ### Converter MIP Units Activity Lower Limit Minimum Required Load
9390  * // Enforce sufficient activity coefficients of activities to justify all active modes.
9391  * // {Eq_converter_activityLowerLimitDetailedPartLoadMinReq}
9392  Eq_converter_activityLowerLimitDetailedPartLoadMinReq(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity)
9393    $( converter_usedTechAct(nodesModelSel,yearsSel,converter_techs,vintage,activity)
9394          and converter_hasMinLoad(converter_techs, vintage)
9395          and converter_techParam(converter_techs,vintage,"mipDetailedPartialLoad"))
9396      ..
9397      sum(act$(converter_activityRequirements(converter_techs,vintage,act,"minLoad")
9398                  <= converter_activityRequirements(converter_techs,vintage,activity,"minLoad")
9399               and converter_usedAct(converter_techs,vintage,act)),
9400      converter_activity(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,act))
9401    =g=
9402      sum(act$(converter_activityRequirements(converter_techs,vintage,act,"minLoad")
9403                  <= converter_activityRequirements(converter_techs,vintage,activity,"minLoad")
9404               and converter_usedAct(converter_techs,vintage,act)),
9405      max(converter_activityRequirements(converter_techs,vintage,act,"minLoad"),
9406            converter_activityProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,"lower"))
9407            * converter_unitsUsingActivity_MIP(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,act));
9408   
9409   
9410  * Simple one-activity-per-unit partial load equations
9411  * // ### Converter MIP Units Activity Upper Limit Partial Load Balance
9412  * // Enforce MIP units partial load upper limit.
9413  * // {Eq_converter_activityUpperLimitPartLoad}
9414  Eq_converter_activityUpperLimitPartLoad(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity)
9415    $( converter_usedTechAct(nodesModelSel,yearsSel,converter_techs,vintage,activity)
9416          and (converter_hasMinLoad(converter_techs, vintage)
9417                or converter_hasMaxLoad(converter_techs, vintage)
9418                or converter_hasConstantFluxInActivity(converter_techs, vintage))
9419          and not converter_techParam(converter_techs,vintage,"mipDetailedPartialLoad"))
9420      ..
9421      converter_activity(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity)
9422    =l=
9423    min(converter_activityRequirements(converter_techs,vintage,activity,"maxLoad"),
9424          converter_activityProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,"upper"))
9425          * converter_unitsUsingActivity_MIP(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity);
9426   
9427  * // ### Converter MIP Units Activity Lower Limit Partial Load Balance
9428  * // Enforce MIP units partial load lower limit.
9429  * // {Eq_converter_activityLowerLimitPartLoad}
9430  Eq_converter_activityLowerLimitPartLoad(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity)
9431    $( converter_usedTechAct(nodesModelSel,yearsSel,converter_techs,vintage,activity)
9432          and (converter_hasMinLoad(converter_techs, vintage)
9433                or converter_hasMaxLoad(converter_techs, vintage))
9434          and not converter_techParam(converter_techs,vintage,"mipDetailedPartialLoad"))
9435      ..
9436      converter_activity(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity)
9437    =g=
9438    max(converter_activityRequirements(converter_techs,vintage,activity,"minLoad"),
9439          converter_activityProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,"lower"))
9440          * converter_unitsUsingActivity_MIP(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity);
9441   
9442  * // ### Converter MIP Units Idle Online Units
9443  * // Counts idle online units at every time step
9444  * // {Eq_converter_noOnlineIdle}
9445  Eq_converter_noOnlineIdle(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
9446    $( converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
9447          and (converter_hasMinLoad(converter_techs, vintage)
9448              or converter_hasMaxLoad(converter_techs, vintage)
9449              or converter_hasConstantFluxInActivity(converter_techs,vintage))
9450          and not converter_techParam(converter_techs,vintage,"mipDetailedPartialLoad"))
9451      ..
9452      converter_unitsOnline(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
9453      =e=
9454      sum(activity$converter_usedAct(converter_techs,vintage,activity),
9455            converter_unitsUsingActivity_MIP(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity));
9456   
9457  * // ### Converter MIP Units Idle Online Units Partial load
9458  * // Counts idle online units at every time step
9459  * // {Eq_converter_noOnlineIdleDetailedPartLoad}
9460  Eq_converter_noOnlineIdleDetailedPartLoad(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
9461    $( converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
9462          and (converter_hasMinLoad(converter_techs, vintage)
9463                  or converter_hasMaxLoad(converter_techs, vintage))
9464          and converter_techParam(converter_techs,vintage,"mipDetailedPartialLoad"))
9465      ..
9466      converter_unitsOnline(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
9467      =l=
9468      sum(activity$converter_usedAct(converter_techs,vintage,activity),
9469            converter_unitsUsingActivity_MIP(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity));
9470   
9471  * // ### Converter MIP activity model limit
9472  * // Converter activity model limit
9473  * // {Eq_converter_activityModeLimit}
9474  Eq_converter_activityModeLimit(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity)
9475    $( converter_usedTechAct(nodesModelSel,yearsSel,converter_techs,vintage,activity)
9476          and (converter_hasMinLoad(converter_techs, vintage)
9477                or converter_hasMaxLoad(converter_techs, vintage))
9478          and converter_techParam(converter_techs,vintage,"mipDetailedPartialLoad"))
9479      ..
9480      converter_unitsOnline(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
9481      =g=
9482      converter_unitsUsingActivity_MIP(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity);
9483   
9484  * ==== model definition ====
9485   
9486  Model M_converter
9487  /
9488    Eq_converter_unitsBalance
9489    Eq_converter_unitsFixedDecom
9490    Eq_converter_unitsFreeDecom
9491    Eq_converter_unitsUpperLimit
9492    Eq_converter_unitsLowerLimit
9493    Eq_converter_unitsFixedLimit
9494    Eq_converter_unitsTotalMIP
9495    Eq_converter_unitsOnlineMIP
9496    Eq_converter_activityUpperLimit
9497    Eq_converter_activityLowerLimit
9498    Eq_converter_activityFixedLimit
9499    Eq_converter_rampPos
9500    Eq_converter_rampNeg
9501    Eq_converter_rampLimit
9503    Eq_converter_unitsOnline
9504    Eq_converter_unitsOnlineUC
9506    Eq_converter_activityStartups
9507    Eq_converter_activityShutdowns
9508    Eq_converter_limitStartups
9509    Eq_converter_minUptime
9510    Eq_converter_minDowntime
9511    Eq_converter_activityUpperLimitDetailedPartLoadMinReq
9512    Eq_converter_activityUpperLimitDetailedPartLoadMaxReq
9513    Eq_converter_activityLowerLimitDetailedPartLoadMinReq
9514    Eq_converter_activityUpperLimitPartLoad
9515    Eq_converter_activityLowerLimitPartLoad
9516    Eq_converter_noOnlineIdle
9517    Eq_converter_noOnlineIdleDetailedPartLoad
9518    Eq_converter_activityModeLimit
9519  /;
INCLUDE    C:\Local\REMix\framework\remix\framework\model\source\core\storage.gms
9521  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
9522  * SPDX-License-Identifier: BSD-3-Clause
9523   
9524  * // # core_storage
9525  * // The equations in this file describe the storages in the model.
9526   
9527  * // ## Variables
9528  * // {special_table_storage_variables}
10008   
10009   
10010  * === SoC mappings ===
10011  set storage_usedTechSoCState(storage_techs,vintage,soc_statesIn);
10012  storage_usedTechSoCState(storage_techs,vintage,soc_states(soc_statesIn))
10013      $(storage_SoCParam(storage_techs,vintage,soc_states,"eRate") > 0
10014        and storage_SoCParam(storage_techs,vintage,soc_states,"cRate") > 0)
10015      = yes;
10016   
10017  set storage_validSoCRange(storage_techs,vintage);
10018  storage_validSoCRange(storage_techs,vintage)
10019      = smax(soc_states$storage_usedTechSoCState(storage_techs,vintage,soc_states), storage_SoCParam(storage_techs,vintage,soc_states,"SoC")) = 1
10020        and smin(soc_states$storage_usedTechSoCState(storage_techs,vintage,soc_states), storage_SoCParam(storage_techs,vintage,soc_states,"SoC")) = 0;
10021   
10022  * === Translate SoC parameters to ordered SoC-set ===
10023  * set ordered_socs / soc1*soc20 /;
10024  * alias(soc_states, soc_states_c);
10025  * parameter storage_SoCParam_ordered(storage_techs,vintage,ordered_socs,pc_storage_SoCParam);
10026  * storage_SoCParam_ordered(storage_techs,vintage,ordered_socs,pc_storage_SoCParam)
10027  *     $storage_validSoCRange(storage_techs,vintage)
10028  *     = sum(soc_states$(ord(ordered_socs) = sum(soc_states_c$(storage_SoCParam(storage_techs,vintage,soc_states_c,"SoC") <= storage_SoCParam(storage_techs,vintage,soc_states,"SoC")
10029  *                                                            and storage_usedTechSoCState(storage_techs,vintage,soc_states_c)), 1)
10030  *                       and storage_usedTechSoCState(storage_techs,vintage,soc_states)),
10031  *           storage_SoCParam(storage_techs,vintage,soc_states,pc_storage_SoCParam));
10032  *
10033  * set storage_usedTechSoCStateOrdered(storage_techs,vintage,ordered_socs);
10034  * storage_usedTechSoCStateOrdered(storage_techs,vintage,ordered_socs)
10035  *     $(storage_SoCParam_ordered(storage_techs,vintage,ordered_socs,"eRate") > 0
10036  *       and storage_SoCParam_ordered(storage_techs,vintage,ordered_socs,"cRate") > 0)
10037  *     = yes;
10038   
10039  parameter storage_bigM(storage_techs,vintage);
10040  storage_bigM(storage_techs,vintage) = smax((nodesModel,years), storage_reservoirParam(nodesModel,years,storage_techs,"unitsUpperLimit"));
10041  storage_bigM(storage_techs,vintage)$(storage_bigM(storage_techs,vintage) = INF) = 10000;
10042  storage_bigM(storage_techs,vintage)$(storage_bigM(storage_techs,vintage) = 0) = 10000;
10043   
10044  * === calculate the number of years represented by single year to calc ===
10045  alias(yearsToCalc, yearsToCalc_a)
10046  parameter representedYears(years);
10047  representedYears(years) = 0.5 *(smin(yearsToCalc$(yearsToCalc.val > years.val or yearsToCalc.val = smax(yearsToCalc_a, yearsToCalc_a.val)), yearsToCalc.val)
10048                                  - smax(yearsToCalc$(yearsToCalc.val < years.val or yearsToCalc.val = smin(yearsToCalc_a, yearsToCalc_a.val)), yearsToCalc.val));
10049   
10050  * ==== calculation of mappings ====
10051   
10052  * Technologies with a lifeTime > 0 are available
10053  set storage_availTech(nodesModel,years,storage_techs,vintage);
10054  storage_availTech(nodesModel,years,storage_techs,vintage)
10055      $(vintage.val = smax(vintage_a$(vintage_a.val <= years.val
10056          and storage_techParam(storage_techs,vintage_a,"lifeTime") > 0), vintage_a.val)) = yes;
10057   
10058  * Technologies to optimize become unavailable if they have an unitsUpperLimit of 0
10059  storage_availTech(nodesModel,years,storage_techs,vintage)
10060      $(yearsToCalc(years) and storage_reservoirParam(nodesModel,years,storage_techs,"unitsUpperLimit") = 0 ) = no;
10061   
10062  * Technologies already built become unavailable if they have an unitsBuild of 0
10063  storage_availTech(nodesModel,years,storage_techs,vintage)
10064      $( ( not yearsToCalc(years)) and storage_reservoirParam(nodesModel,years,storage_techs,"unitsBuild") = 0 ) = no;
10065   
10066  * Used technologies are available technologies over their technical lifeTime
10067  set storage_usedTech(nodesModel,years,storage_techs,vintage);
10068  storage_usedTech(nodesModel,years,storage_techs,vintage)
10069      $(vintage.val <= years.val
10070          and years.val < smax(years_a$storage_availTech(nodesModel,years_a,storage_techs,vintage),
10071                                              years_a.val + storage_techParam(storage_techs,vintage,"lifeTime"))
10072          ) = yes;
10073   
10074  * Technologies have to be decomissioned in the interval of first avail + lifetime to last avail + lifetime
10075  set storage_decomTech(nodesModel,years,storage_techs,vintage);
10076  storage_decomTech(nodesModel,years,storage_techs,vintage)
10077    $(sum(years_a$storage_usedTech(nodesModel,years_a,storage_techs,vintage), 1)
10078      and sum(yearsToCalc
10079        $(sameas(years, yearsToCalc)
10080          and yearsToCalc.val >= smin(years_a$storage_availTech(nodesModel,years_a,storage_techs,vintage), years_a.val) + storage_techParam(storage_techs,vintage,"lifeTime")
10081          and yearsToCalc.val <= smax(years_a$storage_availTech(nodesModel,years_a,storage_techs,vintage), years_a.val) + storage_techParam(storage_techs,vintage,"lifeTime")), 1))
10082    = yes;
10083   
10084  * Extend the decom frame to the year after the last year of usedTech
10085  storage_decomTech(nodesModel,yearsToCalc,storage_techs,vintage)
10086    $(storage_usedTech(nodesModel,yearsToCalc-1,storage_techs,vintage)
10087      and storage_decomTech(nodesModel,yearsToCalc-1,storage_techs,vintage))
10088    = yes;
10089   
10090  * Mapping for used commodities
10091  set storage_usedCom(storage_techs,vintage,commodity);
10092  option storage_usedCom < storage_sizeParam;
10093   
10094  set storage_usedTechCom(nodesModel,years,storage_techs,vintage,commodity);
10095  storage_usedTechCom(nodesModel,years,storage_techs,vintage,commodity)
10096      $(storage_usedTech(nodesModel,years,storage_techs,vintage)
10097          and storage_usedCom(storage_techs,vintage,commodity))
10098      = yes;
10099   
10100   
10101  * // ## Load units from gdx file
10103   
10104  * ==== aggregation of profiles ====
10105  * derive upper and lower profiles then aggregate
10106  set storage_level_hasProfileIn(nodesData,years,storage_techs,pc_storage_levelProfile);
10107  option storage_level_hasProfileIn < storage_levelProfileIn;
10108   
10109  set storage_level_hasProfile(nodesModel,years,storage_techs,pc_storage_levelProfile);
10110  storage_level_hasProfile(nodesModelToCalc,yearsToCalc,storage_techs,pc_storage_levelProfile)
10111      = sum(nodesData$aggregateNodesModel(nodesData,nodesModelToCalc),
10112              storage_level_hasProfileIn(nodesData,yearsToCalc,storage_techs,pc_storage_levelProfile));
10113   
10114  * weighted average for a real sum of units upper limits, plain average if one region has an upper limit of inf
10115  parameter storage_levelProfile(timeModel,nodesModel,years,storage_techs,vintage,pc_storage_levelProfile);
10116  storage_levelProfile(timeModelToCalc,storage_usedTech(nodesModelToCalc,yearsToCalc,storage_techs,vintage),"upper")
10117      = storage_techParam(storage_techs,vintage,"levelUpperLimit");
10118  storage_levelProfile(timeModelToCalc,storage_usedTech(nodesModelToCalc,yearsToCalc,storage_techs,vintage),"lower")
10119      = storage_techParam(storage_techs,vintage,"levelLowerLimit");
10120   
10121  set storage_finiteUnitLimit(nodesModelToCalc,yearsToCalc,storage_techs);
10122  storage_finiteUnitLimit(nodesModelToCalc,yearsToCalc,storage_techs) = sum(nodesData$aggregateNodesModel(nodesData,nodesModelToCalc), storage_reservoirParamIn(nodesData,yearsToCalc,storage_techs,"unitsUpperLimit")) > 0
10123                                                   and sum(nodesData$aggregateNodesModel(nodesData,nodesModelToCalc), storage_reservoirParamIn(nodesData,yearsToCalc,storage_techs,"unitsUpperLimit")) < inf;
10124   
10125  storage_levelProfile(timeModelToCalc,storage_usedTech(nodesModelToCalc,yearsToCalc,storage_techs,vintage),pc_storage_levelProfile)
10126      $( storage_level_hasProfile(nodesModelToCalc,yearsToCalc,storage_techs,pc_storage_levelProfile)
10127          and storage_finiteUnitLimit(nodesModelToCalc,yearsToCalc,storage_techs))
10128      = sum(nodesData$aggregateNodesModel(nodesData,nodesModelToCalc),
10129              sum(timeData$timeMapping(timeData,timeModelToCalc),
10130                    storage_levelProfileIn(timeData,nodesData,yearsToCalc,storage_techs,pc_storage_levelProfile))
10131                / timeLength(timeModelToCalc)
10132              * storage_reservoirParamIn(nodesData,yearsToCalc,storage_techs,"unitsUpperLimit"))
10133      / sum(nodesData$aggregateNodesModel(nodesData,nodesModelToCalc),
10134              storage_reservoirParamIn(nodesData,yearsToCalc,storage_techs,"unitsUpperLimit"));
10135   
10136  storage_levelProfile(timeModelToCalc,storage_usedTech(nodesModelToCalc,yearsToCalc,storage_techs,vintage),pc_storage_levelProfile)
10137      $( storage_level_hasProfile(nodesModelToCalc,yearsToCalc,storage_techs,pc_storage_levelProfile)
10138          and sum(nodesData$aggregateNodesModel(nodesData,nodesModelToCalc),
10139                      storage_reservoirParamIn(nodesData,yearsToCalc,storage_techs,"unitsUpperLimit")) = inf )
10140      = sum(nodesData$(aggregateNodesModel(nodesData,nodesModelToCalc)
10141                      and storage_reservoirParamIn(nodesData,yearsToCalc,storage_techs,"unitsUpperLimit") = inf ),
10142              sum(timeData$timeMapping(timeData,timeModelToCalc),
10143                    storage_levelProfileIn(timeData,nodesData,yearsToCalc,storage_techs,pc_storage_levelProfile))
10144                / timeLength(timeModelToCalc))
10145      / sum(nodesData$(aggregateNodesModel(nodesData,nodesModelToCalc)
10146                      and storage_reservoirParamIn(nodesData,yearsToCalc,storage_techs,"unitsUpperLimit") = inf ), 1);
10147   
10148  * for fixed profiles overwrite upper and lower profile
10149  storage_levelProfile(timeModelToCalc,nodesModelToCalc,yearsToCalc,storage_techs,vintage,"lower")
10150      $storage_level_hasProfile(nodesModelToCalc,yearsToCalc,storage_techs,"fixed")
10151      = storage_levelProfile(timeModelToCalc,nodesModelToCalc,yearsToCalc,storage_techs,vintage,"fixed");
10152   
10153  storage_levelProfile(timeModelToCalc,nodesModelToCalc,yearsToCalc,storage_techs,vintage,"upper")
10154      $storage_level_hasProfile(nodesModelToCalc,yearsToCalc,storage_techs,"fixed")
10155      = storage_levelProfile(timeModelToCalc,nodesModelToCalc,yearsToCalc,storage_techs,vintage,"fixed");
10156   
10157   
10158  * ==== parameter modifications ====
10159  storage_reservoirParam(nodesModel,years,storage_techs,"unitsLowerLimit")
10160          $sum(vintage, storage_techParam(storage_techs,vintage,"mipUnits"))
10161      = floor(storage_reservoirParam(nodesModel,years,storage_techs,"unitsLowerLimit"));
10162  storage_reservoirParam(nodesModel,years,storage_techs,"unitsUpperLimit")
10163          $sum(vintage, storage_techParam(storage_techs,vintage,"mipUnits"))
10164      = ceil(storage_reservoirParam(nodesModel,years,storage_techs,"unitsUpperLimit"));
10165   
10166   
10167  * ==== definition of variables ====
10168   
10169  * Initialise variables for unitsBuild
10170  storage_unitsBuild.l(nodesModel,years,storage_techs,vintage)
10171      $storage_availTech(nodesModel,years,storage_techs,vintage)
10172      = storage_reservoirParam(nodesModel,years,storage_techs,"unitsBuild");
10173  storage_unitsBuild.lo(nodesModel,yearsToCalc,storage_techs,vintage)
10174      $storage_availTech(nodesModel,yearsToCalc,storage_techs,vintage)
10175      = storage_unitsBuild.l(nodesModel,yearsToCalc,storage_techs,vintage);
10176  storage_unitsBuild.fx(nodesModel,years,storage_techs,vintage)
10177      $storage_reservoirParam(nodesModel,years,storage_techs,"noExpansion")
10178      = storage_unitsBuild.l(nodesModel,years,storage_techs,vintage);
10179   
10180  * Initialise variables for unitsDecom
10181  storage_unitsDecom.l(nodesModel,years,storage_techs,vintage)
10182      $(storage_decomTech(nodesModel,years,storage_techs,vintage)
10183        and years.val < sum(yearsToCalc$(ord(yearsToCalc) = 1), yearsToCalc.val))
10184      = sum((years_a,years_aa)$(sameas(years-1, years_aa)
10185                        and years_a.val > years_aa.val - storage_techParam(storage_techs,vintage,'lifeTime')
10186                        and years_a.val <= years.val - storage_techParam(storage_techs,vintage,'lifeTime')
10187                        and storage_availTech(nodesModel,years_a,storage_techs,vintage)),
10188          storage_unitsBuild.l(nodesModel,years_a,storage_techs,vintage));
10189   
10190  storage_unitsDecom.l(nodesModel,yearsToCalc,storage_techs,vintage)
10191    $storage_decomTech(nodesModel,yearsToCalc,storage_techs,vintage)
10192    = sum(years$
10193          (years.val < sum(yearsToCalc_a$(ord(yearsToCalc_a) = 1), yearsToCalc_a.val)
10194            and storage_availTech(nodesModel,years,storage_techs,vintage)
10195            and years.val > sum(years_a$sameas(years_a, yearsToCalc-1), years_a.val) - storage_techParam(storage_techs,vintage,'lifeTime')
10196            and years.val <= yearsToCalc.val - storage_techParam(storage_techs,vintage,'lifeTime')),
10197        storage_unitsBuild.l(nodesModel,years,storage_techs,vintage))
10198      + sum(yearsToCalc_a$
10199          (yearsToCalc_a.val < sum(yearsToCalc_aa$(ord(yearsToCalc_aa) > 1), yearsToCalc_a.val)
10200            and storage_availTech(nodesModel,yearsToCalc_a,storage_techs,vintage)
10201            and yearsToCalc_a.val > sum(years_a$sameas(years_a, yearsToCalc-1), years_a.val) - storage_techParam(storage_techs,vintage,'lifeTime')
10202            and yearsToCalc_a.val <= yearsToCalc.val - storage_techParam(storage_techs,vintage,'lifeTime')),
10203        storage_unitsBuild.l(nodesModel,yearsToCalc_a,storage_techs,vintage));
10204        ;
10205   
10206  storage_unitsDecom.lo(nodesModel,yearsToCalc,storage_techs,vintage)
10207      $(storage_usedTech(nodesModel,yearsToCalc,storage_techs,vintage)
10208        and not storage_techParam(storage_techs,vintage,"freeDecom"))
10209      = storage_unitsDecom.l(nodesModel,yearsToCalc,storage_techs,vintage)
10210   
10211  * Calculate planned unit expansion
10212  parameter storage_unitsPlanned(nodesModel,years,storage_techs,vintage);
10213  storage_unitsPlanned(nodesModel,years,storage_techs,vintage) = 0;
10214  loop(years,
10215    storage_unitsPlanned(nodesModel,years,storage_techs,vintage)
10216      =
10217      storage_unitsPlanned(nodesModel,years-1,storage_techs,vintage)
10218          $storage_usedTech(nodesModel,years-1,storage_techs,vintage)
10219      + storage_unitsBuild.l(nodesModel,years,storage_techs,vintage)
10220          $storage_availTech(nodesModel,years,storage_techs,vintage)
10221      - storage_unitsDecom.l(nodesModel,years,storage_techs,vintage)
10222          $storage_usedTech(nodesModel,years,storage_techs,vintage);
10223  );
10224   
10225  * Set initial state for planned units
10226  storage_unitsTotal.l(nodesModel,years,storage_techs,vintage)
10227    = storage_unitsPlanned(nodesModel,years,storage_techs,vintage)
10228   
10229  * Calculate if planned unit expansion is bounded by upper and lower limits
10230  set storage_unitBoundsFixed(nodesModel,years,storage_techs);
10231  storage_unitBoundsFixed(nodesModel,years,storage_techs)
10232    $(sum(vintage$storage_usedTech(nodesModel,years,storage_techs,vintage),
10233          storage_unitsPlanned(nodesModel,years,storage_techs,vintage))
10234      = storage_reservoirParam(nodesModel,years,storage_techs,"unitsUpperLimit")
10235    and sum(vintage$storage_usedTech(nodesModel,years,storage_techs,vintage),
10236          storage_unitsPlanned(nodesModel,years,storage_techs,vintage))
10237      = storage_reservoirParam(nodesModel,years,storage_techs,"unitsLowerLimit"))
10238    = yes;
10239   
10240  * Fix unitsBuild, unitsDecom, unitsTotal if levels are predetermined by upper and lower limits
10241  storage_unitsBuild.fx(nodesModel,years,storage_techs,vintage)
10242    $(storage_availTech(nodesModel,years,storage_techs,vintage)
10243      and storage_unitBoundsFixed(nodesModel,years,storage_techs))
10244    = storage_unitsBuild.l(nodesModel,years,storage_techs,vintage);
10245  storage_unitsDecom.fx(nodesModel,years,storage_techs,vintage)
10246    $(storage_usedTech(nodesModel,years,storage_techs,vintage)
10247      and storage_unitBoundsFixed(nodesModel,years,storage_techs))
10248    = storage_unitsDecom.l(nodesModel,years,storage_techs,vintage);
10249  storage_unitsTotal.fx(nodesModel,years,storage_techs,vintage)
10250    $(storage_usedTech(nodesModel,years,storage_techs,vintage)
10251      and storage_unitBoundsFixed(nodesModel,years,storage_techs))
10252    = storage_unitsTotal.l(nodesModel,years,storage_techs,vintage);
10253   
10254  storage_unitsTotal_MIP.up(nodesModel,years,storage_techs,vintage)
10255      $(storage_usedTech(nodesModel,years,storage_techs,vintage)
10256        and storage_techParam(storage_techs,vintage,"mipUnits") = 1)
10257      = storage_reservoirParam(nodesModel,years,storage_techs,"unitsUpperLimit");
10258   
10259  * Add parameter for fixing capacities during myopic runs
10260  parameter storage_unitsDelta(nodesModel,years,storage_techs);
10261   
10262   
10263  * ==== declaration of equations ====
10264   
10265  equations
10266    Eq_storage_unitsBalance(nodesModel,years,storage_techs,vintage
10267      ) "Ensures the units balance over the planning period."
10268    Eq_storage_unitsFixedDecom(nodesModel,years,storage_techs,vintage
10269      ) "Restricts the fixed decommissioning of units over the planning period."
10270    Eq_storage_unitsFreeDecom(nodesModel,years,storage_techs,vintage
10271      ) "Restricts the free decommissioning of units over the planning period."
10272    Eq_storage_unitsUpperLimit(nodesModel,years,storage_techs
10273      ) "Upper bound for the total number of units."
10274    Eq_storage_unitsLowerLimit(nodesModel,years,storage_techs
10275      ) "Lower bound for the total number of units."
10276    Eq_storage_unitsTotalMIP(nodesModel,years,storage_techs,vintage
10277      ) "Fixes the total number of units to the corresponding integer variable."
10278   
10279    Eq_storage_levelUpperLimit(timeModel,nodesModel,years,storage_techs,vintage,commodity
10280      ) "Upper bound for the total number of units."
10281    Eq_storage_levelUpperLimit_degradation(timeModel,nodesModel,years,storage_techs,vintage,commodity
10282      ) "Upper bound for the total number of units if the storage technology accounts for degradation."
10283    Eq_storage_levelLowerLimit(timeModel,nodesModel,years,storage_techs,vintage,commodity
10284      ) "Lower bound for the total number of units."
10285    Eq_storage_losses(timeModel,nodesModel,years,storage_techs,vintage,commodity
10286      ) "Stored commodities lost due to self discharge."
10287    Eq_storage_unitsBalanceStates(nodesModel,years,storage_techs,vintage
10288      ) "Currently available units must have been built at some point in time and have some state of degradation."
10289    Eq_storage_unitsUpperLimitPerState(nodesModel,years,yearsCom,storage_techs,vintage
10290      ) "There cannot be more units from a certain year than the amount built in that year."
10291    Eq_storage_unitsStatesNoRecovery(nodesModel,years,yearsCom,storage_techs,vintage,degradation_states
10292      ) "There is no recovery."
10293    Eq_storage_cRateLimit(timeModel,nodesModel,years,storage_techs,vintage,commodity
10294      ) "Limit charging rate based on unit capacity."
10295    Eq_storage_eRateLimit(timeModel,nodesModel,years,storage_techs,vintage,commodity
10296      ) "Limit discharging rate based on unit capacity."
10297    Eq_storage_charge(timeModel,nodesModel,years,storage_techs,vintage,commodity
10298      ) "Positive change in state of charge is influx."
10299    Eq_storage_discharge(timeModel,nodesModel,years,storage_techs,vintage,commodity
10300      ) "Negative change in state of charge is outflux."
10301   
10302    Eq_storage_levelStateSum(timeModel,nodesModel,years,storage_techs,vintage,commodity
10303      ) "Sum of degradation class storage levels is the global level."
10304    Eq_storage_levelUpperLimitPerAge(timeModel,nodesModel,years,yearsCom,storage_techs,vintage,commodity
10305      ) "Upper bound for units of a certain state."
10306    Eq_storage_chargingPerAge(timeModel,nodesModel,years,yearsCom,storage_techs,vintage,commodity
10307      ) "Positive change in state of charge is influx for each degradation class."
10308    Eq_storage_chargeBasedDegradationDistribution(nodesModel,years,yearsCom,storage_techs,vintage,commodity
10309      ) "Determine degradation states of storage units."
10310    Eq_storage_unitsDecomStateSum(nodesModel,years,storage_techs,vintage
10311      ) "All decomminsioned units must have a degradation state."
10312    Eq_storage_unitsDegradation(nodesModel,years,yearsCom,storage_techs,vintage,degradation_states
10313      ) "Only allow one range of degradation states per year and age group."
10314    Eq_storage_unitsDegradation_onlyOneRange(nodesModel,years,yearsCom,storage_techs,vintage
10315      ) "Limit usable degradation states to one range, i.e., two neighboring states."
10316   
10317    Eq_storage_unitsSoC_sum(timeModel,nodesModel,years,storage_techs,vintage
10318      ) "Every unit has a state of charge."
10319    Eq_storage_levelSoC(timeModel,nodesModel,years,storage_techs,vintage,commodity
10320      ) "Every unit has a state of charge."
10321    Eq_storage_unitsSoC(timeModel,nodesModel,years,storage_techs,vintage,soc_statesIn
10322      ) "Number of units in particular SoC."
10323    Eq_storage_unitsSoC_onlyOneRange(timeModel,nodesModel,years,storage_techs,vintage
10324      ) "Limit usable SoC states to one range, i.e., two neighboring states."
10325   
10326    Eq_storage_cRateLimit_SoC(timeModel,nodesModel,years,storage_techs,vintage,commodity
10327      ) "Limit charging rate based on unit capacity."
10328    Eq_storage_eRateLimit_SoC(timeModel,nodesModel,years,storage_techs,vintage,commodity
10329      ) "Limit discharging rate based on unit capacity."
10330    ;
10331   
10332  * ==== equation definition ====
10333  * // ## Equations
10334  * // ### Storage Units Balance
10335  * // Ensures that the total units are consistent with the built and decommissioned units.
10336  * // {Eq_storage_unitsBalance}
10337  Eq_storage_unitsBalance(nodesModelSel,yearsSel,storage_techs,vintage)
10338      $((storage_usedTech(nodesModelSel,yearsSel,storage_techs,vintage)
10339            or sum(years$sameas(years,yearsSel), storage_usedTech(nodesModelSel,years-1,storage_techs,vintage)))
10340          and not storage_unitBoundsFixed(nodesModelSel,yearsSel,storage_techs))
10341      ..
10342      storage_unitsTotal(nodesModelSel,yearsSel,storage_techs,vintage)
10343      =e=
10344          sum(yearsToCalc$(ord(yearsToCalc) = 1 and sameas(yearsToCalc, yearsSel)),
10345        sum(years$sameas(years, yearsToCalc),
10346          storage_unitsTotal(nodesModelSel,years-1,storage_techs,vintage)
10347            $storage_usedTech(nodesModelSel,years-1,storage_techs,vintage)))
10348      + sum((yearsToCalc)$(ord(yearsToCalc) > 1 and sameas(yearsToCalc, yearsSel)),
10349        storage_unitsTotal(nodesModelSel,yearsToCalc-1,storage_techs,vintage)
10350          $storage_usedTech(nodesModelSel,yearsToCalc-1,storage_techs,vintage))
10351      + storage_unitsBuild(nodesModelSel,yearsSel,storage_techs,vintage)
10352          $storage_availTech(nodesModelSel,yearsSel,storage_techs,vintage)
10353      - storage_unitsDecom(nodesModelSel,yearsSel,storage_techs,vintage)
10354          $storage_usedTech(nodesModelSel,yearsSel,storage_techs,vintage);
10355   
10356  * // ### Storage Units Fixed Decommission
10357  * // Restricts the fixed decommissioning of storage units over the planning period.
10358  * // {Eq_storage_unitsFixedDecom}
10359  Eq_storage_unitsFixedDecom(nodesModelSel,yearsSel,storage_techs,vintage)
10360      $(storage_decomTech(nodesModelSel,yearsSel,storage_techs,vintage)
10361          and not storage_techParam(storage_techs,vintage,"freeDecom") = 1
10362          and not storage_unitBoundsFixed(nodesModelSel,yearsSel,storage_techs))
10363      ..
10364      storage_unitsDecom(nodesModelSel,yearsSel,storage_techs,vintage)
10365      =e=
10366      sum(years$
10367          (storage_availTech(nodesModelSel,years,storage_techs,vintage)
10368            and years.val > sum(yearsToCalc$sameas(yearsToCalc+1, yearsSel), yearsToCalc.val) - storage_techParam(storage_techs,vintage,'lifeTime')
10369            and years.val <= yearsSel.val - storage_techParam(storage_techs,vintage,'lifeTime')),
10370        storage_unitsBuild(nodesModelSel,years,storage_techs,vintage));
10371   
10372  * // ### Storage Units Free Decomission
10373  * // Restricts the free decommissioning of storage units over the planning period.
10374  * // {Eq_storage_unitsFreeDecom}
10375  Eq_storage_unitsFreeDecom(nodesModelSel,yearsSel,storage_techs,vintage)
10376      $((storage_decomTech(nodesModelSel,yearsSel,storage_techs,vintage)
10377          or storage_usedTech(nodesModelSel,yearsSel,storage_techs,vintage))
10378          and storage_techParam(storage_techs,vintage,"freeDecom") = 1)
10379      ..
10380      sum(years$
10381            ((storage_decomTech(nodesModelSel,years,storage_techs,vintage)
10382              or storage_usedTech(nodesModelSel,years,storage_techs,vintage))
10383              and years.val < sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)),
10384          storage_unitsDecom(nodesModelSel,years,storage_techs,vintage))
10385      + sum(yearsToCalc$
10386            ((storage_decomTech(nodesModelSel,yearsToCalc,storage_techs,vintage)
10387              or storage_usedTech(nodesModelSel,yearsToCalc,storage_techs,vintage))
10388              and yearsToCalc.val >= sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
10389              and yearsToCalc.val <= yearsSel.val),
10390          storage_unitsDecom(nodesModelSel,yearsToCalc,storage_techs,vintage))
10391      =g=
10392      sum(years$
10393            (storage_availTech(nodesModelSel,years,storage_techs,vintage)
10394              and years.val < sum(yearsToCalc$(ord(yearsToCalc)=1), yearsToCalc.val) - storage_techParam(storage_techs,vintage,'lifeTime')),
10395          storage_unitsBuild(nodesModelSel,years,storage_techs,vintage))
10396      + sum(yearsToCalc$
10397            (storage_availTech(nodesModelSel,yearsToCalc,storage_techs,vintage)
10398              and yearsToCalc.val >= sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
10399              and yearsToCalc.val <= yearsSel.val - storage_techParam(storage_techs,vintage,'lifeTime')),
10400          storage_unitsBuild(nodesModelSel,yearsToCalc,storage_techs,vintage));
10401   
10402  * // ### Storage Units Lower Limit
10403  * // Lower bound for the total number of storage units.
10404  * // {Eq_storage_unitsLowerLimit}
10405  Eq_storage_unitsLowerLimit(nodesModelSel,yearsSel,storage_techs)
10406      $(storage_reservoirParam(nodesModelSel,yearsSel,storage_techs,'unitsLowerLimit') > 0 )
10407      ..
10408      sum(vintage$storage_usedTech(nodesModelSel,yearsSel,storage_techs,vintage),
10409          storage_unitsTotal(nodesModelSel,yearsSel,storage_techs,vintage))
10410      =g=
10411      storage_reservoirParam(nodesModelSel,yearsSel,storage_techs,"unitsLowerLimit");
10412   
10413  * // ### Storage Units Upper Limit
10414  * // Upper bound for the total number of storage units.
10415  * // {Eq_storage_unitsUpperLimit}
10416  Eq_storage_unitsUpperLimit(nodesModelSel,yearsSel,storage_techs)
10417      $(storage_reservoirParam(nodesModelSel,yearsSel,storage_techs,'unitsUpperLimit') >= 0
10418          and storage_reservoirParam(nodesModelSel,yearsSel,storage_techs,'unitsUpperLimit') < +inf )
10419      ..
10420      sum(vintage$storage_usedTech(nodesModelSel,yearsSel,storage_techs,vintage),
10421          storage_unitsTotal(nodesModelSel,yearsSel,storage_techs,vintage))
10422      =l=
10423      storage_reservoirParam(nodesModelSel,yearsSel,storage_techs,"unitsUpperLimit");
10424   
10425  * // ### Storage Units Total MIP
10426  * // Fixes the total number of storage units to the corresponding integer variable.
10427  * // {Eq_storage_unitsTotalMIP}
10428  Eq_storage_unitsTotalMIP(nodesModelSel,yearsSel,storage_techs,vintage)
10429      $( storage_usedTech(nodesModelSel,yearsSel,storage_techs,vintage)
10430          and storage_techParam(storage_techs,vintage,"mipUnits") = 1 )
10431      ..
10432      storage_unitsTotal(nodesModelSel,yearsSel,storage_techs,vintage)
10433      =e=
10434      storage_unitsTotal_MIP(nodesModelSel,yearsSel,storage_techs,vintage);
10435   
10436  * // ### Storage Level Lower Limit
10437  * // Lower limit on the storage level.
10438  * // {Eq_storage_levelLowerLimit}
10439  Eq_storage_levelLowerLimit(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
10440      $(storage_usedTechCom(nodesModelSel,yearsSel,storage_techs,vintage,commodity)
10441          and storage_levelProfile(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,"lower") > 0)
10442      ..
10443      storage_level(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
10444      =g=
10445      storage_levelProfile(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,"lower")
10446      * storage_sizeParam(storage_techs,vintage,commodity,"size")
10447      * storage_unitsTotal(nodesModelSel,yearsSel,storage_techs,vintage);
10448   
10449  * // ### Storage Level Upper Limit
10450  * // Upper limit on the storage level.
10451  * // {Eq_storage_levelUpperLimit}
10452  Eq_storage_levelUpperLimit(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
10453      $(storage_usedTechCom(nodesModelSel,yearsSel,storage_techs,vintage,commodity)
10454          and not storage_hasDegradation(storage_techs,vintage)
10455          and storage_levelProfile(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,"upper") >= 0)
10456      ..
10457      storage_level(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
10458      =l=
10459      storage_levelProfile(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,"upper")
10460      * storage_sizeParam(storage_techs,vintage,commodity,"size")
10461      * storage_unitsTotal(nodesModelSel,yearsSel,storage_techs,vintage);
10462   
10463  * // ### Storage Level Upper Limit (degradation)
10464  * // Upper limit on the storage level if the storage technology accounts for degradation.
10465  * // {Eq_storage_levelUpperLimit_degradation}
10466  Eq_storage_levelUpperLimit_degradation(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
10467      $(storage_usedTechCom(nodesModelSel,yearsSel,storage_techs,vintage,commodity)
10468          and storage_hasDegradation(storage_techs,vintage)
10469          and storage_levelProfile(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,"upper") >= 0)
10470      ..
10471      storage_level(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
10472      =l=
10473      storage_levelProfile(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,"upper")
10474      * storage_sizeParam(storage_techs,vintage,commodity,"size")
10475      * sum((degradation_states,yearsCom)$storage_usedDegradation(storage_techs,vintage,degradation_states),
10476              (storage_degradationParam(storage_techs,vintage,degradation_states,"remainingCapacity")
10477                - (yearsSel.val - yearsCom.val) * storage_techParam(storage_techs,vintage,"annualDegradation"))
10478                * storage_unitsStateTracker(nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,degradation_states));
10479   
10480  * // ### Storage Unit States Sum (degradation)
10481  * // The number of units in all degradation state must match the total unit number.
10482  * // {Eq_storage_unitsBalanceStates}
10483  Eq_storage_unitsBalanceStates(nodesModelSel,yearsSel,storage_techs,vintage)
10484      $(storage_usedTech(nodesModelSel,yearsSel,storage_techs,vintage)
10485        and storage_hasDegradation(storage_techs,vintage))
10486      ..
10487      storage_unitsTotal(nodesModelSel,yearsSel,storage_techs,vintage)
10488      =e=
10489      sum((yearsCom,degradation_states)$storage_usedDegradation(storage_techs,vintage,degradation_states),
10490            storage_unitsStateTracker(nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,degradation_states));
10491   
10492  * // ### Storage Unit States Upper Limit(degradation)
10493  * // The states of all commissioned units in one year (unitsBuilt) must either still be tracked or have been decommissioned.
10494  * // {Eq_storage_unitsUpperLimitPerState}
10495  Eq_storage_unitsUpperLimitPerState(nodesModelSel,yearsSel,yearsCom,storage_techs,vintage)
10496      $(storage_usedTech(nodesModelSel,yearsSel,storage_techs,vintage)
10497          and storage_hasDegradation(storage_techs,vintage))
10498      ..
10499      sum(degradation_states$storage_usedDegradation(storage_techs,vintage,degradation_states),
10500            storage_unitsStateTracker(nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,degradation_states)
10501            + sum(years$(years.val <= yearsSel.val),
10502                  storage_unitsStateTrackerDecom(nodesModelSel,years,yearsCom,storage_techs,vintage,degradation_states)))
10503      =e=
10504      storage_unitsBuild(nodesModelSel,yearsCom,storage_techs,vintage)$(yearsCom.val <= yearsSel.val);
10505   
10506  * // ### Storage Unit States Progression (degradation)
10507  * // Unit recovery by reassigning the storage cycles to other units is disabled. Therefore, the number of units in a particular degradation state can only increase if the number in a less degraded state is decreased by at least the same amount.
10508  * // {Eq_storage_unitsStatesNoRecovery}
10509  alias(degradation_states, dc_states);
10510  Eq_storage_unitsStatesNoRecovery(nodesModelSel,yearsSel(yearsToCalc),yearsCom,storage_techs,vintage,degradation_states)
10511      $(storage_usedTech(nodesModelSel,yearsSel,storage_techs,vintage)
10512        and yearsToCalc.val > yearsCom.val
10513        and storage_usedDegradation(storage_techs,vintage,degradation_states))
10514      ..
10515      sum(dc_states$(storage_usedDegradation(storage_techs,vintage,dc_states)
10516                and storage_degradationParam(storage_techs,vintage,dc_states,"maxFullCycles") <= storage_degradationParam(storage_techs,vintage,degradation_states,"maxFullCycles")),
10517              storage_unitsStateTracker(nodesModelSel,yearsToCalc,yearsCom,storage_techs,vintage,dc_states)
10518              + sum(years$(years.val <= yearsToCalc.val), storage_unitsStateTrackerDecom(nodesModelSel,years,yearsCom,storage_techs,vintage,dc_states)))
10519      =l=
10520      sum(dc_states$(storage_usedDegradation(storage_techs,vintage,dc_states)
10521                      and storage_degradationParam(storage_techs,vintage,dc_states,"maxFullCycles") <= storage_degradationParam(storage_techs,vintage,degradation_states,"maxFullCycles")),
10522              storage_unitsStateTracker(nodesModelSel,yearsToCalc-1,yearsCom,storage_techs,vintage,dc_states)
10523              + sum(years$(years.val < yearsToCalc.val), storage_unitsStateTrackerDecom(nodesModelSel,years,yearsCom,storage_techs,vintage,dc_states)));
10524   
10525  * // ### Storage Losses
10526  * // Accumulation of storage losses.
10527  * // {Eq_storage_losses}
10528  Eq_storage_losses(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,storage_techs,vintage,commodity)
10529      $storage_usedTechCom(nodesModelSel,yearsSel,storage_techs,vintage,commodity)
10530      ..
10531      storage_losses(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
10532      =e=
10533      - storage_level(timeModelToCalc--1,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
10534        * storage_sizeParam(storage_techs,vintage,commodity,"selfdischarge")
10535      + storage_sizeParam(storage_techs,vintage,commodity,"selfdischargeAbs")
10536      + (storage_techParam(storage_techs,vintage,"chargingLoss")
10537          /(1 - storage_techParam(storage_techs,vintage,"chargingLoss")))
10538        * storage_charge(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
10539          $(storage_techParam(storage_techs,vintage,"chargingLoss") > 0)
10540      + storage_techParam(storage_techs,vintage,"dischargingLoss")
10541        * storage_discharge(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
10542          $(storage_techParam(storage_techs,vintage,"dischargingLoss") > 0)
10543      - storage_sizeParam(storage_techs,vintage,commodity,"size")
10544        * sum(soc_states$(storage_usedTechSoCState(storage_techs,vintage,soc_states)
10545                          and storage_validSoCRange(storage_techs,vintage)),
10546              storage_unitsSoC(timeModelToCalc--1,nodesModelSel,yearsSel,storage_techs,vintage,soc_states)
10547              * storage_SoCParam(storage_techs,vintage,soc_states,"SoC")
10548              * storage_SoCParam(storage_techs,vintage,soc_states,"selfdischarge"));
10549   
10550  * // ### C-Rate Limit
10551  * // The increase in storage level per time step, i.e., the charging rate, is limited relative to the storage capacity.
10552  * // {Eq_storage_cRateLimit}
10553  Eq_storage_cRateLimit(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,storage_techs,vintage,commodity)
10554      $(storage_usedTechCom(nodesModelSel,yearsSel,storage_techs,vintage,commodity)
10555        and storage_techParam(storage_techs,vintage,"maxCRate") > 0)
10556      ..
10557      storage_level(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
10558      - storage_level(timeModelToCalc--1,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
10559      =l=
10560      storage_techParam(storage_techs,vintage,"maxCRate")
10561      * storage_sizeParam(storage_techs,vintage,commodity,"size")
10562      * storage_unitsTotal(nodesModelSel,yearsSel,storage_techs,vintage);
10563   
10564  * // ### E-Rate Limit
10565  * // The decrease in storage level per time step, i.e., the discharging rate, is limited relative to the storage capacity.
10566  * // {Eq_storage_eRateLimit}
10567  Eq_storage_eRateLimit(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,storage_techs,vintage,commodity)
10568      $(storage_usedTechCom(nodesModelSel,yearsSel,storage_techs,vintage,commodity)
10569        and storage_techParam(storage_techs,vintage,"maxERate") > 0)
10570      ..
10571      storage_level(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
10572      - storage_level(timeModelToCalc--1,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
10573      =g=
10574      - storage_techParam(storage_techs,vintage,"maxERate")
10575      * storage_sizeParam(storage_techs,vintage,commodity,"size")
10576      * storage_unitsTotal(nodesModelSel,yearsSel,storage_techs,vintage);
10577   
10578  * // ### Storage Charging
10579  * // Increases in storage levels are accounted as charging amounts.
10580  * // {Eq_storage_charge}
10581  Eq_storage_charge(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,storage_techs,vintage,commodity)
10582      $(storage_usedTechCom(nodesModelSel,yearsSel,storage_techs,vintage,commodity)
10583        and storage_techParam(storage_techs,vintage,"chargingLoss") > 0)
10584      ..
10585      storage_charge(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
10586      =g=
10587      storage_level(timeModelToCalc,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
10588      - storage_level(timeModelToCalc--1,nodesModelSel,yearsSel,storage_techs,vintage,commodity);
10589   
10590  * // ### Storage Discharging
10591  * // Decreases in storage levels are accounted as discharging amounts.
10592  * // {Eq_storage_discharge}
10593  Eq_storage_discharge(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,storage_techs,vintage,commodity)
10594      $(storage_usedTechCom(nodesModelSel,yearsSel,storage_techs,vintage,commodity)
10595        and storage_techParam(storage_techs,vintage,"dischargingLoss") > 0)
10596      ..
10597      storage_discharge(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
10598      =g=
10599      storage_level(timeModelToCalc--1,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
10600      - storage_level(timeModelToCalc,nodesModelSel,yearsSel,storage_techs,vintage,commodity);
10601   
10602  * // ### Storage Level Sum (degradation)
10603  * // The storage level is accounted individually by commissioning year in the case of degradation in order to prohibit the model to assign pre-existing storage cycles to newly built storage reservoirs and thereby avoiding degradation. All those storage levels represent the total storage level.
10604  * // {Eq_storage_levelStateSum}
10605  Eq_storage_levelStateSum(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
10606      $(storage_usedTechCom(nodesModelSel,yearsSel,storage_techs,vintage,commodity)
10607        and storage_techParam(storage_techs,vintage,"usageDegradation"))
10608      ..
10609      storage_level(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
10610      =e=
10611      sum(yearsCom, storage_levelPerAge(timeModelSel,nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,commodity));
10612   
10613  * // ### Storage Level Upper Limit per Age Group (degradation)
10614  * // Upper limit on the storage level per commissioning year if the storage technology accounts for degradation.
10615  * // {Eq_storage_levelUpperLimitPerAge}
10616  Eq_storage_levelUpperLimitPerAge(timeModelSel,nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,commodity)
10617      $(storage_usedTechCom(nodesModelSel,yearsSel,storage_techs,vintage,commodity)
10618        and storage_techParam(storage_techs,vintage,"usageDegradation"))
10619      ..
10620      storage_levelPerAge(timeModelSel,nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,commodity)
10621      =l=
10622      storage_techParam(storage_techs,vintage,"levelUpperLimit")
10623      * storage_sizeParam(storage_techs,vintage,commodity,"size")
10624      * sum(degradation_states,
10625              (storage_degradationParam(storage_techs,vintage,degradation_states,"remainingCapacity")
10626                - (yearsSel.val - yearsCom.val) * storage_techParam(storage_techs,vintage,"annualDegradation"))
10627                * storage_unitsStateTracker(nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,degradation_states));
10628   
10629  * // ### Storage Cycle Distribution to Degradation States per Commissioning Year (degradation)
10630  * // The charging amounts are converted to equivalent full cycles which then must be represented by an adequate distribution of degradation states.
10631  * // {Eq_storage_chargeBasedDegradationDistribution}
10632  alias(years, prev_years);
10633  Eq_storage_chargeBasedDegradationDistribution(nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,commodity)
10634      $(storage_usedTechCom(nodesModelSel,yearsSel,storage_techs,vintage,commodity)
10635        and storage_techParam(storage_techs,vintage,"usageDegradation"))
10636      ..
10637      sum(prev_years$(prev_years.val <= yearsSel.val), representedYears(prev_years)
10638          * sum(timeModel, storage_chargePerAge(timeModel,nodesModelSel,prev_years,yearsCom,storage_techs,vintage,commodity)))
10639      =l=
10640      storage_sizeParam(storage_techs,vintage,commodity,"size")
10641      * sum(dc_states$storage_usedDegradation(storage_techs,vintage,dc_states),
10642          storage_degradationParam(storage_techs,vintage,dc_states,"maxFullCycles")
10643          * (storage_unitsStateTracker(nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,dc_states)
10644             + sum(prev_years$(prev_years.val <= yearsSel.val), storage_unitsStateTrackerDecom(nodesModelSel,prev_years,yearsCom,storage_techs,vintage,dc_states))));
10645   
10646  * // ### Storage Charging per Commissioning Year (degradation)
10647  * // Increases in storage levels are accounted as charging amounts.
10648  * // {Eq_storage_chargingPerAge}
10649  Eq_storage_chargingPerAge(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,commodity)
10650      $(storage_usedTechCom(nodesModelSel,yearsSel,storage_techs,vintage,commodity)
10651        and storage_techParam(storage_techs,vintage,"usageDegradation"))
10652      ..
10653      storage_chargePerAge(timeModelSel,nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,commodity)
10654      =g=
10655      storage_levelPerAge(timeModelToCalc,nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,commodity)
10656      - storage_levelPerAge(timeModelToCalc--1,nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,commodity);
10657   
10658  * // ### Storage Unit Decommissioning States Sum (degradation)
10659  * // The number of decommissioned units in all degradation state must match the total decommissioning unit number.
10660  * // {Eq_storage_unitsDecomStateSum}
10661  Eq_storage_unitsDecomStateSum(nodesModelSel,yearsSel,storage_techs,vintage)
10662      $(storage_techParam(storage_techs,vintage,"usageDegradation"))
10663      ..
10664      storage_unitsDecom(nodesModelSel,yearsSel,storage_techs,vintage)
10665      =e=
10666      sum((yearsCom,degradation_states)$storage_usedDegradation(storage_techs,vintage,degradation_states),
10667          storage_unitsStateTrackerDecom(nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,degradation_states));
10668   
10669  * // ### Storage Unit Sequential Degradation (degradation)
10670  * // Only active degradation ranges, i.e., two neighboring degradation states, can be used.
10671  * // {Eq_storage_unitsDegradation}
10672  alias(degradation_states, degradation_states_a, degradation_states_b);
10673  Eq_storage_unitsDegradation(nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,degradation_states)
10674      $(storage_techParam(storage_techs,vintage,"usageDegradation")
10675        and storage_techParam(storage_techs,vintage,"sequentialDegradationStates"))
10676      ..
10677      sum(degradation_states_a$((storage_degradationParam(storage_techs,vintage,degradation_states_a,"maxFullCycles") = storage_degradationParam(storage_techs,vintage,degradation_states,"maxFullCycles")
10678                        or storage_degradationParam(storage_techs,vintage,degradation_states_a,"maxFullCycles")
10679                                         = smax(degradation_states_b$(storage_degradationParam(storage_techs,vintage,degradation_states_b,"maxFullCycles") < storage_degradationParam(storage_techs,vintage,degradation_states,"maxFullCycles")
10680                                                              and storage_usedDegradation(storage_techs,vintage,degradation_states_b)),
10681                                                              storage_degradationParam(storage_techs,vintage,degradation_states_b,"maxFullCycles")))
10682                        and storage_usedDegradation(storage_techs,vintage,degradation_states_a)),
10683          storage_unitsStateTracker_activeRange(nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,degradation_states_a))
10684      * storage_bigM(storage_techs,vintage)
10685      =g=
10686      storage_unitsStateTracker(nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,degradation_states);
10687   
10688  * // ### Storage Unit Sequential Degradation Range (degradation)
10689  * // Only one degradation range can be active.
10690  * // {Eq_storage_unitsDegradation_onlyOneRange}
10691  Eq_storage_unitsDegradation_onlyOneRange(nodesModelSel,yearsSel,yearsCom,storage_techs,vintage)
10692      $(storage_techParam(storage_techs,vintage,"usageDegradation") and storage_techParam(storage_techs,vintage,"sequentialDegradationStates"))
10693      ..
10694      sum(degradation_states$storage_usedDegradation(storage_techs,vintage,degradation_states),
10695            storage_unitsStateTracker_activeRange(nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,degradation_states))
10696      =e= 1;
10697   
10698  * // ### Storage Unit Sequential State of Charge (SoC)
10699  * // Only active state of charge ranges, i.e., two neighboring states of charge, can be used.
10700  * // {Eq_storage_unitsSoC}
10701  alias(soc_states, soc_states_a, soc_states_b);
10702  Eq_storage_unitsSoC(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,storage_techs,vintage,soc_states)
10703      $(storage_validSoCRange(storage_techs,vintage) and storage_techParam(storage_techs,vintage,"sequentialSoC"))
10704      ..
10705      sum(soc_states_a$((storage_SoCParam(storage_techs,vintage,soc_states_a,"SoC") = storage_SoCParam(storage_techs,vintage,soc_states,"SoC")
10706                        or storage_SoCParam(storage_techs,vintage,soc_states_a,"SoC")
10707                                         = smax(soc_states_b$(storage_SoCParam(storage_techs,vintage,soc_states_b,"SoC") < storage_SoCParam(storage_techs,vintage,soc_states,"SoC")
10708                                                              and storage_usedTechSoCState(storage_techs,vintage,soc_states_b)),
10709                                                              storage_SoCParam(storage_techs,vintage,soc_states_b,"SoC")))
10710                        and storage_usedTechSoCState(storage_techs,vintage,soc_states_a)),
10711          storage_unitsSoC_activeRange(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,soc_states_a))
10712      * storage_bigM(storage_techs,vintage)
10713      =g=
10714      storage_unitsSoC(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,soc_states);
10715   
10716  * // ### Storage Unit Sequential State of Charge Range (SoC)
10717  * // Only one state of charge range can be active.
10718  * // {Eq_storage_unitsSoC_onlyOneRange}
10719  Eq_storage_unitsSoC_onlyOneRange(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,storage_techs,vintage)
10720      $(storage_validSoCRange(storage_techs,vintage) and storage_techParam(storage_techs,vintage,"sequentialSoC"))
10721      ..
10722      sum(soc_states$storage_usedTechSoCState(storage_techs,vintage,soc_states),
10723            storage_unitsSoC_activeRange(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,soc_states)) =e= 1;
10724   
10725  * // ### Storage Unit State of Charge Sum (SoC)
10726  * // Each storage unit must have one state of charge.
10727  * // {Eq_storage_unitsSoC_sum}
10728  Eq_storage_unitsSoC_sum(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,storage_techs,vintage)
10729      $storage_validSoCRange(storage_techs,vintage)
10730      ..
10731      storage_unitsTotal(nodesModelSel,yearsSel,storage_techs,vintage)
10732      =e=
10733      sum(soc_states$storage_usedTechSoCState(storage_techs,vintage,soc_states),
10734            storage_unitsSoC(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,soc_states));
10735   
10736  * // ### Storage Level State of Charge Sum (SoC)
10737  * // The total storage level must be represented by units in their specific states of charge.
10738  * // {Eq_storage_levelSoC}
10739  Eq_storage_levelSoC(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,storage_techs,vintage,commodity)
10740      $(storage_validSoCRange(storage_techs,vintage) and storage_usedTechCom(nodesModelSel,yearsSel,storage_techs,vintage,commodity))
10741      ..
10742      storage_level(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
10743      =e=
10744      storage_sizeParam(storage_techs,vintage,commodity,"size")
10745      * sum(soc_states$storage_usedTechSoCState(storage_techs,vintage,soc_states),
10746              storage_unitsSoC(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,soc_states)
10747              * storage_SoCParam(storage_techs,vintage,soc_states,"SoC"));
10748   
10749  * // ### C-Rate Limit (SoC)
10750  * // The increase in storage level per time step, i.e., the charging rate, is limited relative to the storage capacity. The coefficients can vary between states of charge.
10751  * // {Eq_storage_cRateLimit_SoC}
10752  Eq_storage_cRateLimit_SoC(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,storage_techs,vintage,commodity)
10753      $(storage_usedTechCom(nodesModelSel,yearsSel,storage_techs,vintage,commodity)
10754        and storage_validSoCRange(storage_techs,vintage)
10755        and sum(soc_states, storage_SoCParam(storage_techs,vintage,soc_states,"cRate")) < inf)
10756      ..
10757      storage_level(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
10758      - storage_level(timeModelToCalc--1,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
10759      =l=
10760      storage_sizeParam(storage_techs,vintage,commodity,"size")
10761      * sum(soc_states$storage_usedTechSoCState(storage_techs,vintage,soc_states),
10762                      storage_SoCParam(storage_techs,vintage,soc_states,"cRate")
10763                      * storage_unitsSoC(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,soc_states));
10764   
10765  * // ### E-Rate Limit (SoC)
10766  * // The decrease in storage level per time step, i.e., the discharging rate, is limited relative to the storage capacity. The coefficients can vary between states of charge.
10767  * // {Eq_storage_cRateLimit_SoC}
10768  Eq_storage_eRateLimit_SoC(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,storage_techs,vintage,commodity)
10769      $(storage_usedTechCom(nodesModelSel,yearsSel,storage_techs,vintage,commodity)
10770        and storage_validSoCRange(storage_techs,vintage)
10771        and sum(soc_states, storage_SoCParam(storage_techs,vintage,soc_states,"eRate")) < inf)
10772      ..
10773      storage_level(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
10774      - storage_level(timeModelToCalc--1,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
10775      =g=
10776      - storage_sizeParam(storage_techs,vintage,commodity,"size")
10777      * sum(soc_states$storage_usedTechSoCState(storage_techs,vintage,soc_states),
10778                      storage_SoCParam(storage_techs,vintage,soc_states,"eRate")
10779                      * storage_unitsSoC(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,soc_states));
10780   
10781   
10782  * ==== model definition ====
10783   
10784  Model M_storage
10785  /
10786    Eq_storage_unitsBalance
10787    Eq_storage_unitsFixedDecom
10788    Eq_storage_unitsFreeDecom
10789    Eq_storage_unitsLowerLimit
10790    Eq_storage_unitsUpperLimit
10791    Eq_storage_levelUpperLimit_degradation
10792    Eq_storage_unitsTotalMIP
10793    Eq_storage_levelLowerLimit
10794    Eq_storage_levelUpperLimit
10796    Eq_storage_losses
10798    Eq_storage_unitsBalanceStates
10799    Eq_storage_unitsUpperLimitPerState
10800    Eq_storage_unitsStatesNoRecovery
10801    Eq_storage_cRateLimit
10802    Eq_storage_eRateLimit
10803    Eq_storage_charge
10804    Eq_storage_discharge
10805    Eq_storage_levelStateSum
10806    Eq_storage_levelUpperLimitPerAge
10807    Eq_storage_chargeBasedDegradationDistribution
10808    Eq_storage_chargingPerAge
10809    Eq_storage_unitsDecomStateSum
10810    Eq_storage_unitsDegradation
10811    Eq_storage_unitsDegradation_onlyOneRange
10812   
10813    Eq_storage_unitsSoC
10814    Eq_storage_unitsSoC_sum
10815    Eq_storage_unitsSoC_onlyOneRange
10816    Eq_storage_levelSoC
10817    Eq_storage_cRateLimit_SoC
10818    Eq_storage_eRateLimit_SoC
10819  /;
INCLUDE    C:\Local\REMix\framework\remix\framework\model\source\core\transfer.gms
10821  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
10822  * SPDX-License-Identifier: BSD-3-Clause
10823   
10824  * // # core_transfer
10825  * // The equations in this file describe the commodity transfer in the model.
10826   
10827  * // ## Variables
10828  * // {special_table_transfer_variables}
10831   
10836   
11113   
11114  parameter transfer_linksParam(linksModel,years,transfer_techs,pc_transfer_linksParam);
11115  transfer_linksParam(linksModelToCalc,years,transfer_techs,pc_transfer_linksParam)
11116      = sum(linksData$links_aggregate(linksModelToCalc,linksData), transfer_linksParamIn(linksData,years,transfer_techs,pc_transfer_linksParam));
11117   
11118  * // ## Load links from gdx file
11120   
11121   
11122  set transfer_hasflowProfileIn(linksData,years,transfer_techs,pc_transfer_flowProfile);
11123  option transfer_hasflowProfileIn < transfer_flowProfileIn;
11124   
11125  * === modify transfer_flowProfileIn vector to fill with default values, in case profile is not specified ===
11126  transfer_linksParamIn(linksData,years,transfer_techs,"flowAlongLimit")
11127      $(not transfer_linksParamIn(linksData,years,transfer_techs,"limitFlows"))
11128      = 1;
11129   
11130  transfer_linksParamIn(linksData,years,transfer_techs,"flowAgainstLimit")
11131      $(not transfer_linksParamIn(linksData,years,transfer_techs,"limitFlows"))
11132      = 1;
11133   
11134  transfer_flowProfileIn(timeData,linksData,years,transfer_techs,"along")
11135      $(not transfer_hasflowProfileIn(linksData,years,transfer_techs,"along"))
11136      = transfer_linksParamIn(linksData,years,transfer_techs,"flowAlongLimit");
11137   
11138  transfer_flowProfileIn(timeData,linksData,years,transfer_techs,"against")
11139      $(not transfer_hasflowProfileIn(linksData,years,transfer_techs,"against"))
11140      = transfer_linksParamIn(linksData,years,transfer_techs,"flowAgainstLimit");
11141   
11142  * aggregate time dimension
11143  parameter transfer_flowProfileIn_aggTime(timeModel,linksData,yearsToCalc,transfer_techs,pc_transfer_flowProfile);
11144  transfer_flowProfileIn_aggTime(timeModelToCalc,linksData,yearsToCalc,transfer_techs,pc_transfer_flowProfile)
11145      $transfer_hasflowProfileIn(linksData,yearsToCalc,transfer_techs,pc_transfer_flowProfile)
11146      = sum(timeData$timeMapping(timeData,timeModelToCalc),
11147            transfer_flowProfileIn(timeData,linksData,yearsToCalc,transfer_techs,pc_transfer_flowProfile)
11148            / timeLength(timeModelToCalc));
11149  option clear = transfer_flowProfileIn;
11150   
11151  transfer_flowProfileIn_aggTime(timeModelToCalc,linksData,yearsToCalc,transfer_techs,pc_transfer_flowProfile)
11152      $(not transfer_hasflowProfileIn(linksData,yearsToCalc,transfer_techs,pc_transfer_flowProfile) and
11153        not transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"limitFlows"))
11154      = 1;
11155   
11156  transfer_flowProfileIn_aggTime(timeModelToCalc,linksData,yearsToCalc,transfer_techs,"along")
11157      $(not transfer_hasflowProfileIn(linksData,yearsToCalc,transfer_techs,"along") and
11158        transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"limitFlows"))
11159      = transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"flowAlongLimit");
11160   
11161  transfer_flowProfileIn_aggTime(timeModelToCalc,linksData,yearsToCalc,transfer_techs,"against")
11162      $(not transfer_hasflowProfileIn(linksData,yearsToCalc,transfer_techs,"against") and
11163        transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"limitFlows"))
11164      = transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"flowAgainstLimit");
11165   
11166  set transfer_finiteLinkLimit(linksModel,years,transfer_techs);
11167  transfer_finiteLinkLimit(linksModelToCalc,yearsToCalc,transfer_techs)
11168      = sum(linksData$links_aggregate(linksModelToCalc,linksData), transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"linksUpperLimit")) > 0
11169          and sum(linksData$links_aggregate(linksModelToCalc,linksData), transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"linksUpperLimit")) < inf;
11170   
11171  set transfer_infiniteLinkLimit(linksModel,years,transfer_techs);
11172  transfer_infiniteLinkLimit(linksModelToCalc,yearsToCalc,transfer_techs)
11173      = sum(linksData$links_aggregate(linksModelToCalc,linksData), transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"linksUpperLimit")) = inf;
11175   
11176  parameter transfer_lengthParam(linksModel,link_types,pc_transfer_lengthParam);
11177  transfer_lengthParam(linksModelToCalc,link_types,pc_transfer_lengthParam)
11178      = sum(linksData$links_aggregate(linksModelToCalc,linksData), transfer_lengthParamIn(linksData,link_types,pc_transfer_lengthParam))
11179          / sum(linksData$links_aggregate(linksModelToCalc,linksData), 1);
11180   
11181  parameter transfer_gridSegments(linksModel,transfer_techs,gridSegments,pc_transfer_gridSegments);
11182  transfer_gridSegments(linksModelToCalc,transfer_techs,gridSegments,pc_transfer_gridSegments)
11183      = smax(linksData$links_aggregate(linksModelToCalc,linksData), transfer_gridSegmentsIn(linksData,transfer_techs,gridSegments,pc_transfer_gridSegments));
11184   
11185  parameter transfer_dcopf_Xtech(linksModel,years,transfer_techs,vintage,gridSegments);
11186  transfer_dcopf_Xtech(linksModelToCalc,yearsToCalc,transfer_techs,vintage,gridSegments)
11187      $(transfer_gridSegments(linksModelToCalc,transfer_techs,gridSegments,"useDCopf")
11188          and transfer_linksParam(linksModelToCalc,yearsToCalc,transfer_techs,"circuits") > 0
11189          and sum(link_types, transfer_reactPerLength(transfer_techs,vintage,link_types,"reactPerLength")) > 0 )
11190      = (1 / sum(linksData
11191                  $links_aggregate(linksModelToCalc,linksData),
11192              1 / ( sum(link_types,
11193                          transfer_lengthParamIn(linksData,link_types,"length")
11194                          * transfer_reactPerLength(transfer_techs,vintage,link_types,"reactPerLength"))
11195                      / transfer_linksParam(linksModelToCalc,yearsToCalc,transfer_techs,"circuits"))));
11196   
11197  set transfer_hasflowProfile(linksModel,years,transfer_techs,pc_transfer_flowProfile);
11198  transfer_hasflowProfile(linksModelToCalc,yearsToCalc,transfer_techs,pc_transfer_flowProfile)
11199      = sum(linksData$links_aggregate(linksModelToCalc,linksData),
11200              transfer_hasflowProfileIn(linksData,yearsToCalc,transfer_techs,pc_transfer_flowProfile));
11201   
11202  * ==== parameter modifications ====
11203  transfer_linksParam(linksModelToCalc,yearsToCalc,transfer_techs,"linksLowerLimit")
11204      $sum(vintage, transfer_techParam(transfer_techs,vintage,"mipLinks"))
11205      = floor(transfer_linksParam(linksModelToCalc,yearsToCalc,transfer_techs,"linksLowerLimit"));
11206  transfer_linksParam(linksModelToCalc,yearsToCalc,transfer_techs,"linksUpperLimit")
11207      $sum(vintage, transfer_techParam(transfer_techs,vintage,"mipLinks"))
11208      = ceil(transfer_linksParam(linksModelToCalc,yearsToCalc,transfer_techs,"linksUpperLimit"));
11209   
11210   
11211  * ==== calculation of mappings ====
11212   
11213  * Technologies with a lifeTime > 0 are available
11214  set transfer_availTech(linksModel,years,transfer_techs,vintage);
11215  transfer_availTech(linksModel,years,transfer_techs,vintage)
11216      $(vintage.val = smax(vintage_a$(vintage_a.val <= years.val
11217          and transfer_techParam(transfer_techs,vintage_a,"lifeTime") > 0), vintage_a.val)) = yes;
11218   
11219  * Technologies to optimize become unavailable if they have an linksUpperLimit of 0
11220  transfer_availTech(linksModelToCalc,years,transfer_techs,vintage)
11221      $(yearsToCalc(years) and transfer_linksParam(linksModelToCalc,years,transfer_techs,"linksUpperLimit") = 0 ) = no;
11222   
11223  * Technologies already built become unavailable if they have an linksBuild of 0
11224  transfer_availTech(linksModelToCalc,years,transfer_techs,vintage)
11225      $( ( not yearsToCalc(years)) and transfer_linksParam(linksModelToCalc,years,transfer_techs,"linksBuild") = 0 ) = no;
11226   
11227  * Used technologies are available technologies over their technical lifeTime
11228  set transfer_usedTech(linksModel,years,transfer_techs,vintage);
11229  transfer_usedTech(linksModelToCalc,years,transfer_techs,vintage)
11230      $(vintage.val <= years.val
11231          and years.val < smax(years_a$transfer_availTech(linksModelToCalc,years_a,transfer_techs,vintage),
11232                                  years_a.val + transfer_techParam(transfer_techs,vintage,"lifeTime"))
11233          ) = yes;
11234   
11235  * Technologies have to be decomissioned in the interval of first avail + lifetime to last avail + lifetime
11236  set transfer_decomTech(linksModel,years,transfer_techs,vintage);
11237  transfer_decomTech(linksModel,years,transfer_techs,vintage)
11238    $(sum(years_a$transfer_usedTech(linksModel,years_a,transfer_techs,vintage), 1)
11239      and sum(yearsToCalc
11240        $(sameas(years, yearsToCalc)
11241          and yearsToCalc.val >= smin(years_a$transfer_availTech(linksModel,years_a,transfer_techs,vintage), years_a.val) + transfer_techParam(transfer_techs,vintage,"lifeTime")
11242          and yearsToCalc.val <= smax(years_a$transfer_availTech(linksModel,years_a,transfer_techs,vintage), years_a.val) + transfer_techParam(transfer_techs,vintage,"lifeTime")), 1))
11243    = yes;
11244   
11245  * Extend the decom frame to the year after the last year of usedTech
11246  transfer_decomTech(linksModel,yearsToCalc,transfer_techs,vintage)
11247    $(transfer_usedTech(linksModel,yearsToCalc-1,transfer_techs,vintage)
11248      and transfer_decomTech(linksModel,yearsToCalc-1,transfer_techs,vintage))
11249    = yes;
11250   
11251  parameter transfer_flowProfile(timeModel,linksModel,years,transfer_techs,vintage,pc_transfer_flowProfile);
11252   
11253  transfer_flowProfile(timeModelToCalc,linksModelToCalc,yearsToCalc,transfer_techs,vintage,"along")
11254      $transfer_finiteLinkLimit(linksModelToCalc,yearsToCalc,transfer_techs)
11255      = (sum(linksData$(links_aggregate(linksModelToCalc,linksData)
11256                       and transfer_incidenceData_flip(linksData) = 1),
11257              transfer_flowProfileIn_aggTime(timeModelToCalc,linksData,yearsToCalc,transfer_techs,"along")
11258              * transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"linksUpperLimit"))
11259          + sum(linksData$(links_aggregate(linksModelToCalc,linksData)
11260                          and transfer_incidenceData_flip(linksData) = -1),
11261              transfer_flowProfileIn_aggTime(timeModelToCalc,linksData,yearsToCalc,transfer_techs,"against")
11262              * transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"linksUpperLimit")))
11263      / sum(linksData$links_aggregate(linksModelToCalc,linksData),
11264              transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"linksUpperLimit"));
11265   
11266  transfer_flowProfile(timeModelToCalc,linksModelToCalc,yearsToCalc,transfer_techs,vintage,"against")
11267      $transfer_finiteLinkLimit(linksModelToCalc,yearsToCalc,transfer_techs)
11268      = (sum(linksData$(links_aggregate(linksModelToCalc,linksData)
11269                       and transfer_incidenceData_flip(linksData) = 1),
11270              transfer_flowProfileIn_aggTime(timeModelToCalc,linksData,yearsToCalc,transfer_techs,"against")
11271              * transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"linksUpperLimit"))
11272          + sum(linksData$(links_aggregate(linksModelToCalc,linksData)
11273                          and transfer_incidenceData_flip(linksData) = -1),
11274              transfer_flowProfileIn_aggTime(timeModelToCalc,linksData,yearsToCalc,transfer_techs,"along")
11275              * transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"linksUpperLimit")))
11276      / sum(linksData$links_aggregate(linksModelToCalc,linksData),
11277              transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"linksUpperLimit"));
11278   
11279  transfer_flowProfile(timeModelToCalc,linksModelToCalc,yearsToCalc,transfer_techs,vintage,"along")
11280      $transfer_infiniteLinkLimit(linksModelToCalc,yearsToCalc,transfer_techs)
11281      = (sum(linksData$(links_aggregate(linksModelToCalc,linksData)
11282                       and transfer_incidenceData_flip(linksData) = 1
11283                       and transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"linksUpperLimit") = inf ),
11284              transfer_flowProfileIn_aggTime(timeModelToCalc,linksData,yearsToCalc,transfer_techs,"along"))
11285          + sum(linksData$(links_aggregate(linksModelToCalc,linksData)
11286                          and transfer_incidenceData_flip(linksData) = -1
11287                          and transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"linksUpperLimit") = inf ),
11288              transfer_flowProfileIn_aggTime(timeModelToCalc,linksData,yearsToCalc,transfer_techs,"against")))
11289      / sum(linksData$(links_aggregate(linksModelToCalc,linksData)
11290                      and transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"linksUpperLimit") = inf ),
11291              1);
11292   
11293  transfer_flowProfile(timeModelToCalc,linksModelToCalc,yearsToCalc,transfer_techs,vintage,"against")
11294      $transfer_infiniteLinkLimit(linksModelToCalc,yearsToCalc,transfer_techs)
11295      = (sum(linksData$(links_aggregate(linksModelToCalc,linksData)
11296                       and transfer_incidenceData_flip(linksData) = 1
11297                       and transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"linksUpperLimit") = inf ),
11298              transfer_flowProfileIn_aggTime(timeModelToCalc,linksData,yearsToCalc,transfer_techs,"against"))
11299          + sum(linksData$(links_aggregate(linksModelToCalc,linksData)
11300                          and transfer_incidenceData_flip(linksData) = -1
11301                          and transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"linksUpperLimit") = inf ),
11302              transfer_flowProfileIn_aggTime(timeModelToCalc,linksData,yearsToCalc,transfer_techs,"along")))
11303      / sum(linksData$(links_aggregate(linksModelToCalc,linksData)
11304                      and transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"linksUpperLimit") = inf ),
11305              1);
11306  option clear = transfer_flowProfileIn_aggTime;
11307   
11308  * Orientation of links affects the flowAlongLimit/flowAgainstLimit
11309   
11310  transfer_linksParam(linksModelToCalc,years,transfer_techs,"flowAlongLimit")
11311      $transfer_finiteLinkLimit(linksModelToCalc,years,transfer_techs)
11312      = (sum(linksData$(links_aggregate(linksModelToCalc,linksData)
11313                       and transfer_incidenceData_flip(linksData) = 1),
11314              transfer_linksParamIn(linksData,years,transfer_techs,"flowAlongLimit")
11315              * transfer_linksParamIn(linksData,years,transfer_techs,"linksUpperLimit"))
11316          + sum(linksData$(links_aggregate(linksModelToCalc,linksData)
11317                          and transfer_incidenceData_flip(linksData) = -1),
11318              transfer_linksParamIn(linksData,years,transfer_techs,"flowAgainstLimit")
11319              * transfer_linksParamIn(linksData,years,transfer_techs,"linksUpperLimit")))
11320      / sum(linksData$links_aggregate(linksModelToCalc,linksData),
11321              transfer_linksParamIn(linksData,years,transfer_techs,"linksUpperLimit"));
11322   
11323  transfer_linksParam(linksModelToCalc,years,transfer_techs,"flowAgainstLimit")
11324      $transfer_finiteLinkLimit(linksModelToCalc,years,transfer_techs)
11325      = (sum(linksData$(links_aggregate(linksModelToCalc,linksData)
11326                       and transfer_incidenceData_flip(linksData) = -1),
11327              transfer_linksParamIn(linksData,years,transfer_techs,"flowAlongLimit")
11328              * transfer_linksParamIn(linksData,years,transfer_techs,"linksUpperLimit"))
11329          + sum(linksData$(links_aggregate(linksModelToCalc,linksData)
11330                          and transfer_incidenceData_flip(linksData) = 1),
11331              transfer_linksParamIn(linksData,years,transfer_techs,"flowAgainstLimit")
11332              * transfer_linksParamIn(linksData,years,transfer_techs,"linksUpperLimit")))
11333      / sum(linksData$links_aggregate(linksModelToCalc,linksData),
11334              transfer_linksParamIn(linksData,years,transfer_techs,"linksUpperLimit"));
11335   
11336  transfer_linksParam(linksModelToCalc,years,transfer_techs,"flowAlongLimit")
11337      $transfer_infiniteLinkLimit(linksModelToCalc,years,transfer_techs)
11338      = (sum(linksData$(links_aggregate(linksModelToCalc,linksData)
11339                       and transfer_incidenceData_flip(linksData) = 1
11340                       and transfer_linksParamIn(linksData,years,transfer_techs,"linksUpperLimit") = inf),
11341              transfer_linksParamIn(linksData,years,transfer_techs,"flowAlongLimit"))
11342          + sum(linksData$(links_aggregate(linksModelToCalc,linksData)
11343                          and transfer_incidenceData_flip(linksData) = -1
11344                          and transfer_linksParamIn(linksData,years,transfer_techs,"linksUpperLimit") = inf),
11345              transfer_linksParamIn(linksData,years,transfer_techs,"flowAgainstLimit")))
11346      / sum(linksData$(links_aggregate(linksModelToCalc,linksData)
11347                      and transfer_linksParamIn(linksData,years,transfer_techs,"linksUpperLimit") = inf ),
11348              1);
11349   
11350  transfer_linksParam(linksModelToCalc,years,transfer_techs,"flowAgainstLimit")
11351      $transfer_infiniteLinkLimit(linksModelToCalc,years,transfer_techs)
11352      = (sum(linksData$(links_aggregate(linksModelToCalc,linksData)
11353                       and transfer_incidenceData_flip(linksData) = -1
11354                       and transfer_linksParamIn(linksData,years,transfer_techs,"linksUpperLimit") = inf),
11355              transfer_linksParamIn(linksData,years,transfer_techs,"flowAlongLimit"))
11356          + sum(linksData$(links_aggregate(linksModelToCalc,linksData)
11357                          and transfer_incidenceData_flip(linksData) = 1
11358                          and transfer_linksParamIn(linksData,years,transfer_techs,"linksUpperLimit") = inf),
11359              transfer_linksParamIn(linksData,years,transfer_techs,"flowAgainstLimit")))
11360      / sum(linksData$(links_aggregate(linksModelToCalc,linksData)
11361                      and transfer_linksParamIn(linksData,years,transfer_techs,"linksUpperLimit") = inf ),
11362              1);
11363   
11364  * Mapping for grid segments using DC optimal power flow
11365  set gridSegments_dcopf(linksModel,transfer_techs,gridSegments);
11366  gridSegments_dcopf(linksModelToCalc,transfer_techs,gridSegments)
11367      $transfer_gridSegments(linksModelToCalc,transfer_techs,gridSegments,"useDCopf")
11369      = yes;
11371   
11372  * Ensure each grid segment uses exactly one commodity
11373  parameter checkGridSegmentCommodities(gridSegments);
11374  checkGridSegmentCommodities(gridSegments)
11375      = sum (commodity$(sum((linksModelToCalc,transfer_techs,vintage)
11376                              $( transfer_coefficient(transfer_techs,vintage,commodity,"coefficient") > 0
11377                                  and gridSegments_dcopf(linksModelToCalc,transfer_techs,gridSegments)) , 1) > 0), 1);
11378   
11379  parameter transfer_incidenceSegments(nodesModel,linksModel,years,gridSegments);
11380  transfer_incidenceSegments(nodesModelToCalc,linksModelToCalc,yearsToCalc,gridSegments)
11381      $(sum((transfer_techs,vintage)$(transfer_usedTech(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
11382                                          and gridSegments_dcopf(linksModelToCalc,transfer_techs,gridSegments)
11383                                          and transfer_incidenceModel(nodesModelToCalc,linksModelToCalc) <> 0), 1) > 0)
11384      = transfer_incidenceModel(nodesModelToCalc,linksModelToCalc);
11385   
11386   
11390   
11391  scalar transfer_enableMIP;
11392  transfer_enableMIP = sum(transfer_usedTech(linksModelToCalc,yearsToCalc,transfer_techs,vintage)$transfer_techParam(transfer_techs,vintage,"mipLinks"), 1 );
11393   
11394   
11395  * ==== definition of variables ====
11396   
11397  * Initialise variables for linksBuild
11398  transfer_linksBuild.l(linksModel,years,transfer_techs,vintage)
11399      $transfer_availTech(linksModel,years,transfer_techs,vintage)
11400      = transfer_linksParam(linksModel,years,transfer_techs,"linksBuild");
11401  transfer_linksBuild.lo(linksModel,yearsToCalc,transfer_techs,vintage)
11402      $transfer_availTech(linksModel,yearsToCalc,transfer_techs,vintage)
11403      = transfer_linksBuild.l(linksModel,yearsToCalc,transfer_techs,vintage);
11404  transfer_linksBuild.fx(linksModel,years,transfer_techs,vintage)
11405      $transfer_linksParam(linksModel,years,transfer_techs,"noExpansion")
11406      = transfer_linksBuild.l(linksModel,years,transfer_techs,vintage);
11407   
11408  * Initialise variables for linksDecom
11409  transfer_linksDecom.l(linksModel,years,transfer_techs,vintage)
11410      $(transfer_decomTech(linksModel,years,transfer_techs,vintage)
11411        and years.val < sum(yearsToCalc$(ord(yearsToCalc) = 1), yearsToCalc.val))
11412      = sum((years_a,years_aa)$(sameas(years-1, years_aa)
11413                        and years_a.val > years_aa.val - transfer_techParam(transfer_techs,vintage,'lifeTime')
11414                        and years_a.val <= years.val - transfer_techParam(transfer_techs,vintage,'lifeTime')
11415                        and transfer_availTech(linksModel,years_a,transfer_techs,vintage)),
11416          transfer_linksBuild.l(linksModel,years_a,transfer_techs,vintage));
11417   
11418  transfer_linksDecom.l(linksModel,yearsToCalc,transfer_techs,vintage)
11419    $transfer_decomTech(linksModel,yearsToCalc,transfer_techs,vintage)
11420    = sum(years$
11421          (years.val < sum(yearsToCalc_a$(ord(yearsToCalc_a) = 1), yearsToCalc_a.val)
11422            and transfer_availTech(linksModel,years,transfer_techs,vintage)
11423            and years.val > sum(years_a$sameas(years_a, yearsToCalc-1), years_a.val) - transfer_techParam(transfer_techs,vintage,'lifeTime')
11424            and years.val <= yearsToCalc.val - transfer_techParam(transfer_techs,vintage,'lifeTime')),
11425        transfer_linksBuild.l(linksModel,years,transfer_techs,vintage))
11426      + sum(yearsToCalc_a$
11427          (yearsToCalc_a.val < sum(yearsToCalc_aa$(ord(yearsToCalc_aa) > 1), yearsToCalc_a.val)
11428            and transfer_availTech(linksModel,yearsToCalc_a,transfer_techs,vintage)
11429            and yearsToCalc_a.val > sum(years_a$sameas(years_a, yearsToCalc-1), years_a.val) - transfer_techParam(transfer_techs,vintage,'lifeTime')
11430            and yearsToCalc_a.val <= yearsToCalc.val - transfer_techParam(transfer_techs,vintage,'lifeTime')),
11431        transfer_linksBuild.l(linksModel,yearsToCalc_a,transfer_techs,vintage));
11432        ;
11433   
11434  transfer_linksDecom.lo(linksModel,yearsToCalc,transfer_techs,vintage)
11435      $(transfer_usedTech(linksModel,yearsToCalc,transfer_techs,vintage)
11436          and not transfer_techParam(transfer_techs,vintage,"freeDecom"))
11437      = transfer_linksDecom.l(linksModel,yearsToCalc,transfer_techs,vintage)
11438   
11439  * Calculate planned transfer links expansion
11440  parameter transfer_linksPlanned(linksModel,years,transfer_techs,vintage);
11441  transfer_linksPlanned(linksModel,years,transfer_techs,vintage) = 0;
11442  loop(years,
11443    transfer_linksPlanned(linksModel,years,transfer_techs,vintage)
11444      =
11445      transfer_linksPlanned(linksModel,years-1,transfer_techs,vintage)
11446          $transfer_usedTech(linksModel,years-1,transfer_techs,vintage)
11447      + transfer_linksBuild.l(linksModel,years,transfer_techs,vintage)
11448          $transfer_availTech(linksModel,years,transfer_techs,vintage)
11449      - transfer_linksDecom.l(linksModel,years,transfer_techs,vintage)
11450          $transfer_usedTech(linksModel,years,transfer_techs,vintage);
11451  );
11452   
11453  * Set initial state for planned units
11454  transfer_linksTotal.l(linksModel,years,transfer_techs,vintage)
11455    = transfer_linksPlanned(linksModel,years,transfer_techs,vintage)
11456   
11457  * Calculate if planned links expansion is bound by upper and lower limits
11458  set transfer_linkBoundsFixed(linksModel,years,transfer_techs);
11459  transfer_linkBoundsFixed(linksModel,years,transfer_techs)
11460    $(sum(vintage$transfer_usedTech(linksModel,years,transfer_techs,vintage),
11461          transfer_linksPlanned(linksModel,years,transfer_techs,vintage))
11462      = transfer_linksParam(linksModel,years,transfer_techs,"linksUpperLimit")
11463    and sum(vintage$transfer_usedTech(linksModel,years,transfer_techs,vintage),
11464          transfer_linksPlanned(linksModel,years,transfer_techs,vintage))
11465      = transfer_linksParam(linksModel,years,transfer_techs,"linksLowerLimit"))
11466    = yes;
11467   
11468  * Fix linksBuild, linksDecom, linksTotal if levels are predetermined by upper and lower limits
11469  transfer_linksBuild.fx(linksModel,years,transfer_techs,vintage)
11470    $(transfer_availTech(linksModel,years,transfer_techs,vintage)
11471      and transfer_linkBoundsFixed(linksModel,years,transfer_techs))
11472    = transfer_linksBuild.l(linksModel,years,transfer_techs,vintage);
11473  transfer_linksDecom.fx(linksModel,years,transfer_techs,vintage)
11474    $(transfer_usedTech(linksModel,years,transfer_techs,vintage)
11475      and transfer_linkBoundsFixed(linksModel,years,transfer_techs))
11476    = transfer_linksDecom.l(linksModel,years,transfer_techs,vintage);
11477  transfer_linksTotal.fx(linksModel,years,transfer_techs,vintage)
11478    $(transfer_usedTech(linksModel,years,transfer_techs,vintage)
11479      and transfer_linkBoundsFixed(linksModel,years,transfer_techs))
11480    = transfer_linksTotal.l(linksModel,years,transfer_techs,vintage);
11481   
11482  transfer_linksTotal_MIP.up(linksModel,years,transfer_techs,vintage)
11483      $(transfer_usedTech(linksModel,years,transfer_techs,vintage)
11484        and transfer_techParam(transfer_techs,vintage,"miplinks") = 1)
11485      = transfer_linksParam(linksModel,years,transfer_techs,"linksUpperLimit");
11486   
11487  * Add parameter for fixing capacities during myopic runs
11488  parameter transfer_linksDelta(linksModel,years,transfer_techs);
11489   
11490   
11491  * ==== declaration of equations ====
11492   
11493  equations
11494    Eq_transfer_linksBalance(linksModel,years,transfer_techs,vintage
11495      ) "Ensures the links balance over the planning period."
11496    Eq_transfer_linksFixedDecom(linksModel,years,transfer_techs,vintage
11497      ) "Restricts the fixed decommissioning of links over the planning period."
11498    Eq_transfer_linksFreeDecom(linksModel,years,transfer_techs,vintage
11499      ) "Restricts the free decommissioning of links over the planning period."
11500    Eq_transfer_linksUpperLimit(linksModel,years,transfer_techs
11501      ) "Upper bound for the total number of links."
11502    Eq_transfer_linksLowerLimit(linksModel,years,transfer_techs
11503      ) "Lower bound for the total number of links."
11504    Eq_transfer_linksTotalMIP(linksModel,years,transfer_techs,vintage
11505      ) "Fixes the total number of links to the corresponding integer variable."
11506   
11507    Eq_transfer_flowAlongUpperLimit(timeModel,linksModel,years,transfer_techs,vintage
11508      ) "Upper bound for the flow along the transfer links."
11509    Eq_transfer_flowAgainstUpperLimit(timeModel,linksModel,years,transfer_techs,vintage
11510      ) "Upper bound for the flow against the transfer links."
11511    Eq_transfer_dcopf_angleFlows(timeModel,linksModel,years,gridSegments
11512      )
11513    Eq_transfer_dcopf_cycleFlows(timeModel,years,cycles,gridSegments
11514      )
11515    ;
11516   
11517   
11518  * ==== equation definition ====
11519  * // ## Equations
11520  * // ### Transfer Links Balance
11521  * // Ensures that the transfer between nodes is balanced.
11522  * // {Eq_transfer_linksBalance}
11523  Eq_transfer_linksBalance(linksModelToCalc,yearsSel,transfer_techs,vintage)
11524      $((transfer_usedTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
11525            or sum(years$sameas(years,yearsSel), transfer_usedTech(linksModelToCalc,years-1,transfer_techs,vintage)))
11526          and not transfer_linkBoundsFixed(linksModelToCalc,yearsSel,transfer_techs))
11527      ..
11528      transfer_linksTotal(linksModelToCalc,yearsSel,transfer_techs,vintage)
11529      =e=
11530      sum(yearsToCalc$(ord(yearsToCalc) = 1 and sameas(yearsToCalc, yearsSel)),
11531        sum(years$sameas(years, yearsToCalc),
11532          transfer_linksTotal(linksModelToCalc,years-1,transfer_techs,vintage)
11533            $transfer_usedTech(linksModelToCalc,years-1,transfer_techs,vintage)))
11534      + sum((yearsToCalc)$(ord(yearsToCalc) > 1 and sameas(yearsToCalc, yearsSel)),
11535        transfer_linksTotal(linksModelToCalc,yearsToCalc-1,transfer_techs,vintage)
11536          $transfer_usedTech(linksModelToCalc,yearsToCalc-1,transfer_techs,vintage))
11537      + transfer_linksBuild(linksModelToCalc,yearsSel,transfer_techs,vintage)
11538          $transfer_availTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
11539      - transfer_linksDecom(linksModelToCalc,yearsSel,transfer_techs,vintage)
11540          $transfer_usedTech(linksModelToCalc,yearsSel,transfer_techs,vintage);
11541   
11542  * // ### Transfer Links Fixed Decommissioning
11543  * // Balances fixed link decommissioning.
11544  * // {Eq_transfer_linksFixedDecom}
11545  Eq_transfer_linksFixedDecom(linksModelToCalc,yearsSel,transfer_techs,vintage)
11546      $(transfer_decomTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
11547          and not transfer_techParam(transfer_techs,vintage,"freeDecom") = 1
11548          and not transfer_linkBoundsFixed(linksModelToCalc,yearsSel,transfer_techs))
11549      ..
11550      transfer_linksDecom(linksModelToCalc,yearsSel,transfer_techs,vintage)
11551      =e=
11552      sum(years$
11553          (transfer_availTech(linksModelToCalc,years,transfer_techs,vintage)
11554              and years.val > sum(yearsToCalc$sameas(yearsToCalc+1, yearsSel), yearsToCalc.val) - transfer_techParam(transfer_techs,vintage,'lifeTime')
11555              and years.val <= yearsSel.val - transfer_techParam(transfer_techs,vintage,'lifeTime')),
11556          transfer_linksBuild(linksModelToCalc,years,transfer_techs,vintage));
11557   
11558  * // ### Transfer Links Free Decommissioning
11559  * // Balances free link decommissioning.
11560  * // {Eq_transfer_linksFreeDecom}
11561  Eq_transfer_linksFreeDecom(linksModelToCalc,yearsSel,transfer_techs,vintage)
11562      $((transfer_decomTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
11563          or transfer_usedTech(linksModelToCalc,yearsSel,transfer_techs,vintage))
11564          and transfer_techParam(transfer_techs,vintage,"freeDecom") = 1)
11565      ..
11566      sum(years$
11567            ((transfer_decomTech(linksModelToCalc,years,transfer_techs,vintage)
11568              or transfer_usedTech(linksModelToCalc,years,transfer_techs,vintage))
11569              and years.val < sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)),
11570          transfer_linksDecom(linksModelToCalc,years,transfer_techs,vintage))
11571      + sum(yearsToCalc$
11572            ((transfer_decomTech(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
11573              or transfer_usedTech(linksModelToCalc,yearsToCalc,transfer_techs,vintage))
11574              and yearsToCalc.val >= sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
11575              and yearsToCalc.val <= yearsSel.val),
11576          transfer_linksDecom(linksModelToCalc,yearsToCalc,transfer_techs,vintage))
11577      =g=
11578      sum(years$
11579            (transfer_availTech(linksModelToCalc,years,transfer_techs,vintage)
11580              and years.val < sum(yearsToCalc$(ord(yearsToCalc)=1), yearsToCalc.val) - transfer_techParam(transfer_techs,vintage,'lifeTime')),
11581          transfer_linksBuild(linksModelToCalc,years,transfer_techs,vintage))
11582      + sum(yearsToCalc$
11583            (transfer_availTech(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
11584              and yearsToCalc.val >= sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
11585              and yearsToCalc.val <= yearsSel.val - transfer_techParam(transfer_techs,vintage,'lifeTime')),
11586          transfer_linksBuild(linksModelToCalc,yearsToCalc,transfer_techs,vintage));
11587   
11588  * // ### Transfer Links Lower Limit
11589  * // Ensures link capacity lower limits.
11590  * // {Eq_transfer_linksLowerLimit}
11591  Eq_transfer_linksLowerLimit(linksModelToCalc,yearsSel,transfer_techs)
11592      $(transfer_linksParam(linksModelToCalc,yearsSel,transfer_techs,'linksLowerLimit') > 0 )
11593      ..
11594      sum(vintage$transfer_usedTech(linksModelToCalc,yearsSel,transfer_techs,vintage),
11595          transfer_linksTotal(linksModelToCalc,yearsSel,transfer_techs,vintage))
11596      =g=
11597      transfer_linksParam(linksModelToCalc,yearsSel,transfer_techs,"linksLowerLimit");
11598   
11599  * // ### Transfer Links Upper Limit
11600  * // Ensures link capacity upper limits.
11601  * // {Eq_transfer_linksUpperLimit}
11602  Eq_transfer_linksUpperLimit(linksModelToCalc,yearsSel,transfer_techs)
11603      $(transfer_linksParam(linksModelToCalc,yearsSel,transfer_techs,'linksUpperLimit') >= 0
11604          and transfer_linksParam(linksModelToCalc,yearsSel,transfer_techs,'linksUpperLimit') < +inf )
11605      ..
11606      sum(vintage$transfer_usedTech(linksModelToCalc,yearsSel,transfer_techs,vintage),
11607          transfer_linksTotal(linksModelToCalc,yearsSel,transfer_techs,vintage))
11608      =l=
11609      transfer_linksParam(linksModelToCalc,yearsSel,transfer_techs,"linksUpperLimit");
11610   
11611  * // ### Transfer Links Total MIP
11612  * // Ensures number of MIP links.
11613  * // {Eq_transfer_linksTotalMIP}
11614  Eq_transfer_linksTotalMIP(linksModelToCalc,yearsSel,transfer_techs,vintage)
11615      $(transfer_usedTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
11616          and transfer_techParam(transfer_techs,vintage,"mipLinks"))
11617      ..
11618      transfer_linksTotal(linksModelToCalc,yearsSel,transfer_techs,vintage)
11619      =e=
11620      transfer_linksTotal_MIP(linksModelToCalc,yearsSel,transfer_techs,vintage);
11621   
11622  * // ### Transfer Links Flow Along Upper Limit
11623  * // Ensures links flow along upper limit.
11624  * // {Eq_transfer_flowAlongUpperLimit}
11625  Eq_transfer_flowAlongUpperLimit(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
11626      $transfer_usedTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
11627      ..
11628      transfer_flowAlong(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
11629      =l=
11630      transfer_flowProfile(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage,"along")
11631      * transfer_linksTotal(linksModelToCalc,yearsSel,transfer_techs,vintage)
11632      * transfer_techParam(transfer_techs,vintage,"flowUpperLimit")
11633      ;
11634   
11635  * // ### Transfer Links Flow Against Upper Limit
11636  * // Ensures links flow against upper limit.
11637  * // {Eq_transfer_flowAgainstUpperLimit}
11638  Eq_transfer_flowAgainstUpperLimit(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
11639      $transfer_usedTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
11640      ..
11641      transfer_flowAgainst(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
11642      =l=
11643      transfer_flowProfile(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage,"against")
11644      * transfer_linksTotal(linksModelToCalc,yearsSel,transfer_techs,vintage)
11645      * transfer_techParam(transfer_techs,vintage,"flowUpperLimit")
11646      ;
11647   
11648  set transfer_usedOpf(linksModel,years,gridSegments,transfer_techs,vintage);
11649  transfer_usedOpf(linksModel,yearsToCalc,gridSegments,transfer_techs,vintage)
11650      $(transfer_usedTech(linksModel,yearsToCalc,transfer_techs,vintage)
11651          and gridSegments_dcopf(linksModel,transfer_techs,gridSegments))
11652      = yes;
11653   
11654  set transfer_usedOpfLinks(linksModel,years,gridSegments);
11655  option transfer_usedOpfLinks < transfer_usedOpf;
11656   
11657  set transfer_usedOpfSegments(years,gridSegments);
11658  option transfer_usedOpfSegments < transfer_usedOpf;
11659   
11663  * // ### Transfer DC optimal flow angle flows
11664  * // Angle flows.
11665  * // {Eq_transfer_dcopf_cycleFlows}
11666  Eq_transfer_dcopf_angleFlows(timeModelSel,linksModelToCalc,yearsSel,gridSegments)
11667      $transfer_usedOpfLinks(linksModelToCalc,yearsSel,gridSegments)
11668      ..
11669      sum ((transfer_techs,vintage)
11670              $transfer_usedOpf(linksModelToCalc,yearsSel,gridSegments,transfer_techs,vintage),
11671          ( transfer_flowAlong(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
11672              - transfer_flowAgainst(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage) )
11673          * transfer_dcopf_Xtech(linksModelToCalc,yearsSel,transfer_techs,vintage,gridSegments) )
11674      =e=
11675      sum ( nodesModelSel,
11676          - transfer_incidenceModel(nodesModelSel,linksModelToCalc)
11677          * transfer_dcopf_voltageAngle(timeModelSel,nodesModelSel,yearsSel,gridSegments));
11681   
11682   
11683  * ==== model definition ====
11684   
11685  Model M_transfer
11686  /
11687    Eq_transfer_linksBalance
11688    Eq_transfer_linksFixedDecom
11689    Eq_transfer_linksFreeDecom
11690    Eq_transfer_linksLowerLimit
11691    Eq_transfer_linksUpperLimit
11692    Eq_transfer_linksTotalMIP
11693    Eq_transfer_flowAlongUpperLimit
11694    Eq_transfer_flowAgainstUpperLimit
11698    Eq_transfer_dcopf_angleFlows
11702  /;
INCLUDE    C:\Local\REMix\framework\remix\framework\model\source\core\sourcesink.gms
11704  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
11705  * SPDX-License-Identifier: BSD-3-Clause
11706   
11707  * // # core_sourcesink
11708  * // The equations in this file describe the sources and sinks in the model.
11709   
11710  * // ## Variables
11711  * // {special_table_sourcesink_variables}
12138   
12139  * // ## Aggregation of profiles
12140  * // Profiles are rescaled based on the annual sum.
12141   
12142  set sourcesink_usesProfileScaling(nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile);
12143  sourcesink_usesProfileScaling(nodesData,years,sourcesink_techs,commodity,"fixed")
12144      $sourcesink_configIn(nodesData,years,sourcesink_techs,commodity,"scaleFixProfileWithFixSum") = yes;
12145  sourcesink_usesProfileScaling(nodesData,years,sourcesink_techs,commodity,"lower")
12146      $sourcesink_configIn(nodesData,years,sourcesink_techs,commodity,"scaleLowProfileWithLowSum") = yes;
12147  sourcesink_usesProfileScaling(nodesData,years,sourcesink_techs,commodity,"upper")
12148      $sourcesink_configIn(nodesData,years,sourcesink_techs,commodity,"scaleUpProfileWithUpSum") = yes;
12149   
12150  parameter sourcesink_ProfileSum(nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile);
12151  sourcesink_ProfileSum(nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile)
12152      $sourcesink_usesProfileScaling(nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile)
12153      = sum(timeData, sourcesink_profileIn(timeData,nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile));
12154   
12155  parameter sourcesink_ProfileAbsSum(nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile);
12156  sourcesink_ProfileAbsSum(nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile)
12157      $sourcesink_usesProfileScaling(nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile)
12158      = sum(timeData, abs(sourcesink_profileIn(timeData,nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile)));
12159   
12160  set sourcesink_ProfileScaleError(nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile);
12161  sourcesink_ProfileScaleError(nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile)
12162      $(sourcesink_usesProfileScaling(nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile)
12163          and sourcesink_ProfileSum(nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile) = 0
12164          and sourcesink_ProfileAbsSum(nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile) > 0)
12165      = yes;
12166   
12167  abort$sum((nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile),
12168              sourcesink_ProfileScaleError(nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile)) "One or more profiles cannot be rescaled as their annual sum equals zero!"
12169   
12170  * calculate scaling factor for each type
12171  parameter sourcesink_scalingFactor(nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile);
12172  sourcesink_scalingFactor(nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile)
12173      $(sourcesink_ProfileSum(nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile)
12174          and sourcesink_usesProfileScaling(nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile))
12175      = sum(pc_sourcesink_annualSum$sameas(pc_sourcesink_profile,pc_sourcesink_annualSum),
12176          sourcesink_annualSumIn(nodesData,years,sourcesink_techs,commodity,pc_sourcesink_annualSum)
12177              / sourcesink_ProfileSum(nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile));
12178   
12179  * rescale profiles
12180  sourcesink_profileIn(timeData,nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile)
12181      $sourcesink_usesProfileScaling(nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile)
12182      = sourcesink_profileIn(timeData,nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile)
12183          * sourcesink_scalingFactor(nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile)
12184   
12185  * // ## Aggregation of profiles
12186  * // Profiles are aggregated based on the mapping from data nodes to model nodes.
12187   
12188  * ==== aggregation of profiles ====
12189  set sourcesink_usesProfileIn(nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile);
12190  option sourcesink_usesProfileIn < sourcesink_profileIn
12191   
12192  set sourcesink_usesProfile(nodesModel,years,sourcesink_techs,commodity,pc_sourcesink_profile);
12193  sourcesink_usesProfile(nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity,pc_sourcesink_profile)
12194      $sum(nodesData$(aggregateNodesModel(nodesData,nodesModelToCalc)
12195          and sourcesink_usesProfileIn(nodesData,yearsToCalc,sourcesink_techs,commodity,pc_sourcesink_profile)), 1)
12196      = yes;
12197   
12198  * aagregate time dimension
12199  parameter sourcesink_profileIn_aggTime(timeModel,nodesData,yearsToCalc,sourcesink_techs,commodity,pc_sourcesink_profile);
12200  sourcesink_profileIn_aggTime(timeModelToCalc,nodesData,yearsToCalc,sourcesink_techs,commodity,pc_sourcesink_profile)
12201    $sourcesink_usesProfileIn(nodesData,yearsToCalc,sourcesink_techs,commodity,pc_sourcesink_profile)
12202    = sum(timeData$timeMapping(timeData,timeModelToCalc),
12203            sourcesink_profileIn(timeData,nodesData,yearsToCalc,sourcesink_techs,commodity,pc_sourcesink_profile)
12204            / timeLength(timeModelToCalc));
12205  option clear = sourcesink_profileIn;
12206   
12207  * sum up absolute profiles
12208  parameter sourcesink_profile(timeModel,nodesModel,years,sourcesink_techs,commodity,pc_sourcesink_profile);
12209  sourcesink_profile(timeModelToCalc,nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity,pc_sourcesink_profile)
12210      $sourcesink_usesProfile(nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity,pc_sourcesink_profile)
12211      = sum(nodesData$aggregateNodesModel(nodesData,nodesModelToCalc),
12212              sourcesink_profileIn_aggTime(timeModelToCalc,nodesData,yearsToCalc,sourcesink_techs,commodity,pc_sourcesink_profile));
12213  option clear = sourcesink_profileIn_aggTime;
12214   
12215  set sourcesink_enabled(nodesModel,years,sourcesink_techs,commodity);
12216  option sourcesink_enabled < sourcesink_config;
12217   
12219   
12220  * ==== declaration of variables ====
12221  * // ## Bounding of variables
12222  * // Source-sink variables with either a lower, fixed, or upper profile are bounded to their respective profiles given by the input parameters.
12223   
12224  sourcesink_flow.lo(timeModelToCalc,nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity)
12225      $( sourcesink_enabled(nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity)
12226          and sourcesink_config(nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity,"usesLowerProfile") = 1
12227          and sourcesink_profile(timeModelToCalc,nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity,"lower") > -inf )
12228      = sourcesink_profile(timeModelToCalc,nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity,"lower");
12229   
12230  sourcesink_flow.up(timeModelToCalc,nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity)
12231      $( sourcesink_enabled(nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity)
12232          and sourcesink_config(nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity,"usesUpperProfile") = 1
12233          and sourcesink_profile(timeModelToCalc,nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity,"upper") < inf )
12234      = sourcesink_profile(timeModelToCalc,nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity,"upper");
12235   
12236  sourcesink_flow.fx(timeModelToCalc,nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity)
12237      $( sourcesink_enabled(nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity)
12238          and sourcesink_config(nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity,"usesFixedProfile") = 1 )
12239      = sourcesink_profile(timeModelToCalc,nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity,"fixed");
12240   
12241  option clear = sourcesink_profile;
12242   
12243   
12244  * ==== equation definition ====
12245  * // ## Equations
12246  equations
12247  Eq_sourcesink_useFixedSum(nodesModel,years,sourcesink_techs,commodity
12248      ) "Fixes the annual sum from sources / to sinks"
12249  Eq_sourcesink_useLowerSum(nodesModel,years,sourcesink_techs,commodity
12250      ) "Limits the lower sum from sources / to sinks"
12251  Eq_sourcesink_useUpperSum(nodesModel,years,sourcesink_techs,commodity
12252      ) "Limits the upper sum from sources / to sinks"
12253    ;
12254   
12255  * // ### Fixed annual sums for sources and sinks
12256  * // Ensures that the sources and sinks with annual sums given as fixed limits are balanced.
12257  * // {Eq_sourcesink_useFixedSum}
12258  Eq_sourcesink_useFixedSum(nodesModelSel,yearsSel,sourcesink_techs,commodity)
12259      $( sourcesink_enabled(nodesModelSel,yearsSel,sourcesink_techs,commodity)
12260          and sourcesink_config(nodesModelSel,yearsSel,sourcesink_techs,commodity,"usesFixedSum") = 1 )
12261      ..
12262      sum(timeModelSel,
12263          sourcesink_flow(timeModelSel,nodesModelSel,yearsSel,sourcesink_techs,commodity))
12264      =e=
12265      sourcesink_annualSum(nodesModelSel,yearsSel,sourcesink_techs,commodity,"fixed")
12266      ;
12267   
12268  * // ### Lower annual sums for sources and sinks
12269  * // Ensures that the sources and sinks with annual sums given as lower limits are balanced.
12270  * // {Eq_sourcesink_useLowerSum}
12271  Eq_sourcesink_useLowerSum(nodesModelSel,yearsSel,sourcesink_techs,commodity)
12272      $( sourcesink_enabled(nodesModelSel,yearsSel,sourcesink_techs,commodity)
12273          and sourcesink_config(nodesModelSel,yearsSel,sourcesink_techs,commodity,"usesLowerSum") = 1
12274          and sourcesink_annualSum(nodesModelSel,yearsSel,sourcesink_techs,commodity,"lower") > -inf )
12275      ..
12276      sum(timeModelSel,
12277          sourcesink_flow(timeModelSel,nodesModelSel,yearsSel,sourcesink_techs,commodity))
12278      =g=
12279      sourcesink_annualSum(nodesModelSel,yearsSel,sourcesink_techs,commodity,"lower")
12280      ;
12281   
12282  * // ### Upper annual sums for sources and sinks
12283  * // Ensures that the sources and sinks with annual sums given as upper limits are balanced.
12284  * // {Eq_sourcesink_useUpperSum}
12285  Eq_sourcesink_useUpperSum(nodesModelSel,yearsSel,sourcesink_techs,commodity)
12286      $( sourcesink_enabled(nodesModelSel,yearsSel,sourcesink_techs,commodity)
12287          and sourcesink_config(nodesModelSel,yearsSel,sourcesink_techs,commodity,"usesUpperSum") = 1
12288          and sourcesink_annualSum(nodesModelSel,yearsSel,sourcesink_techs,commodity,"upper") < inf )
12289      ..
12290      sum(timeModelSel,
12291          sourcesink_flow(timeModelSel,nodesModelSel,yearsSel,sourcesink_techs,commodity))
12292      =l=
12293      sourcesink_annualSum(nodesModelSel,yearsSel,sourcesink_techs,commodity,"upper")
12294      ;
12295   
12296   
12297  * ==== model definition ====
12298   
12299  Model M_sourcesink
12300  /
12301    Eq_sourcesink_useFixedSum
12302    Eq_sourcesink_useLowerSum
12303    Eq_sourcesink_useUpperSum
12304  /;
INCLUDE    C:\Local\REMix\framework\remix\framework\model\source\core\balance.gms
12306  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
12307  * SPDX-License-Identifier: BSD-3-Clause
12308   
12309  * // # balance
12310  * // The equations in this file describe the commodity balancing in the model.
12311   
12312  Equations
12313    Eq_balance_commodities(timeModel,nodesModel,years,commodity
12314      ) "Balance for each commodity used in each time step, region, and year";
12315   
12316   
12317  * ==== calculation of mappings ====
12318   
12319  set balance_techComm(techs,commodity);
12320  balance_techComm(converter_techs(techs),commodity)
12321      $sum((vintage,activity)$converter_coefficient(converter_techs,vintage,activity,commodity,"coefficient"), 1) = yes;
12322  balance_techComm(storage_techs(techs),commodity)
12323      $sum((vintage)$storage_sizeParam(storage_techs,vintage,commodity,"size"), 1) = yes;
12324  balance_techComm(transfer_techs(techs),commodity)
12325      $sum((vintage)$transfer_coefficient(transfer_techs,vintage,commodity,"coefficient"), 1) = yes;
12326  balance_techComm(sourcesink_techs(techs),commodity)
12327      $sum((nodesModelToCalc,yearsToCalc)$sourcesink_enabled(nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity), 1) = yes;
12328   
12329  set balance_usedConverter(nodesModel,years,commodity);
12330  set balance_usedStorage(nodesModel,years,commodity);
12331  set balance_usedTransfer(nodesModel,years,commodity);
12332  set balance_usedSourceSink(nodesModel,years,commodity);
12333  set balance_usedBalance(nodesModel,years,commodity);
12334   
12335  balance_usedConverter(nodesModel,years,commodity)
12336      = sum ((converter_techs,vintage,activity)
12337              $( converter_coefficient(converter_techs,vintage,activity,commodity,"coefficient") <> 0
12338                  and converter_usedTech(nodesModel,years,converter_techs,vintage) ), 1);
12339   
12340  balance_usedStorage(nodesModel,years,commodity)
12341      = sum ((storage_techs,vintage,activity)
12342              $(storage_sizeParam(storage_techs,vintage,commodity,"size") <> 0
12343                  and storage_usedTech(nodesModel,years,storage_techs,vintage) ), 1);
12344   
12345  balance_usedTransfer(nodesModel,years,commodity)
12346      = sum ((linksModel,transfer_techs,vintage)
12347              $(transfer_coefficient(transfer_techs,vintage,commodity,"coefficient") <> 0
12348                  and transfer_incidenceModel(nodesModel,linksModel) <> 0), 1);
12349   
12350  option balance_usedSourceSink < sourcesink_enabled;
12351   
12352  balance_usedBalance(nodesModel,years,commodity)
12353      $(balance_usedConverter(nodesModel,years,commodity)
12354          or balance_usedStorage(nodesModel,years,commodity)
12355          or balance_usedTransfer(nodesModel,years,commodity)
12356          or balance_usedSourceSink(nodesModel,years,commodity) )
12357      = yes;
12358   
12359   
12360  * ==== equation definition ====
12361   
12362  * // ### Balance commodities
12363  * // Balancing of commodities for all model regions, time steps, and years
12364  * // {Eq_balance_commodities}
12365  Eq_balance_commodities(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,commodity)
12366      $balance_usedBalance(nodesModelSel,yearsSel,commodity)
12367      ..
12368  * converter
12369      sum((converter_techs,vintage,activity)
12370              $( converter_coefficientProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity,commodity) <> 0
12371                  AND converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage) ),
12372          converter_activity(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity)
12373              * converter_coefficientProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity,commodity)
12374              * timeLength(timeModelSel)
12375          + converter_unitsUsingActivity_MIP(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity)
12376              * converter_coefficient(converter_techs,vintage,activity,commodity,"constant")
12377              * timeLength(timeModelSel))
12378   
12379  * storages
12380      + sum((storage_techs,vintage)
12381              $( storage_sizeParam(storage_techs,vintage,commodity,"size") <> 0
12382                  and storage_usedTech(nodesModelSel,yearsSel,storage_techs,vintage) ),
12383          storage_level(timeModelToCalc--1,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
12384          - storage_level(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
12386          - storage_losses(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
12387          * timeLength(timeModelSel)
12389          )
12390   
12391  * transfer
12392      + sum((linksModel,transfer_techs,vintage)
12393              $(transfer_usedTech(linksModel,yearsSel,transfer_techs,vintage)
12394                  and linksModelToCalc(linksModel)),
12395          (   transfer_flowAlong(timeModelSel,linksModel,yearsSel,transfer_techs,vintage)
12396                  $(transfer_incidenceModel(nodesModelSel,linksModel) > 0)
12397            + transfer_flowAgainst(timeModelSel,linksModel,yearsSel,transfer_techs,vintage)
12398                  $(transfer_incidenceModel(nodesModelSel,linksModel) < 0) )
12399          * transfer_coefficient(transfer_techs,vintage,commodity,"coefficient")
12400          * timeLength(timeModelSel))
12401   
12402      - sum((linksModel,transfer_techs,vintage)
12403              $(transfer_usedTech(linksModel,yearsSel,transfer_techs,vintage)
12404                  and linksModelToCalc(linksModel)),
12405          (   transfer_flowAlong(timeModelSel,linksModel,yearsSel,transfer_techs,vintage)
12406                  $(transfer_incidenceModel(nodesModelSel,linksModel) < 0)
12407            + transfer_flowAgainst(timeModelSel,linksModel,yearsSel,transfer_techs,vintage)
12408                  $(transfer_incidenceModel(nodesModelSel,linksModel) > 0) )
12409          * transfer_coefficient(transfer_techs,vintage,commodity,"coefficient")
12410          * timeLength(timeModelSel))
12411   
12412      + 0.5 * sum((linksModel,transfer_techs,vintage)
12413              $(transfer_usedTech(linksModel,yearsSel,transfer_techs,vintage)
12414                  AND linksModelToCalc(linksModel)),
12415          (   transfer_flowAlong(timeModelSel,linksModel,yearsSel,transfer_techs,vintage)
12416                  $(transfer_incidenceModel(nodesModelSel,linksModel) <> 0)
12417            + transfer_flowAgainst(timeModelSel,linksModel,yearsSel,transfer_techs,vintage)
12418                  $(transfer_incidenceModel(nodesModelSel,linksModel) <> 0) )
12419          * timeLength(timeModelSel)
12420          * ( transfer_coefPerFlow(transfer_techs,vintage,commodity,"coefPerFlow")
12421              + sum(link_types,
12422                  transfer_coefPerLength(transfer_techs,vintage,commodity,link_types,"coefPerLength")
12423                  * transfer_lengthParam(linksModel,link_types,"length"))))
12424   
12425  * sourcesink
12426      + sum((sourcesink_techs)
12427              $sourcesink_enabled(nodesModelSel,yearsSel,sourcesink_techs,commodity),
12428          sourcesink_flow(timeModelSel,nodesModelSel,yearsSel,sourcesink_techs,commodity)
12429          * timeLength(timeModelSel))
12430      =e=
12431      0;
12432   
12433   
12434  * ==== model definition ====
12435   
12436  Model M_balance
12437  /
12438    Eq_balance_commodities
12439  /;
12440   
INCLUDE    C:\Local\REMix\framework\remix\framework\model\source\accounting\equations.gms
12442  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
12443  * SPDX-License-Identifier: BSD-3-Clause
12444   
12445  * // # accounting_equations
12446   
12447  * ==== declaration of variables ====
12448   
12449  variables
12450  accounting_indicator(accNodesModel,accYears,indicator)
12451  accounting_indicator_links(linksModel,years,indicator)
12452  accounting_objective
12453    ;
12454   
12455   
12456  * ==== definition of variables ====
12457   
12458  * set the variable levels to be fixed for years before the optimization years
12459  accounting_indicator.l(accNodesModel,accYears,indicator)
12460      $activeIndicators(accNodesModel,accYears,indicator)
12461      = 0;
12462   
12463  accounting_indicator.lo(accNodesModel,accYears,indicator)
12464      $(accounting_indicatorBounds(accNodesModel,accYears,indicator,"useLower") <> 0 )
12465      = accounting_indicatorBounds(accNodesModel,accYears,indicator,"lowerValue");
12466   
12467  accounting_indicator.up(accNodesModel,accYears,indicator)
12468      $(accounting_indicatorBounds(accNodesModel,accYears,indicator,"useUpper") <> 0 )
12469      = accounting_indicatorBounds(accNodesModel,accYears,indicator,"upperValue");
12470   
12471  accounting_indicator.fx(accNodesModel,accYears,indicator)
12472      $(accounting_indicatorBounds(accNodesModel,accYears,indicator,"useFixed") <> 0 )
12473      = accounting_indicatorBounds(accNodesModel,accYears,indicator,"fixedValue");
12474   
12475   
12476  accounting_indicator_links.lo(linksModelToCalc,yearsToCalc,indicator)
12477      $(accounting_indicatorBounds_links(linksModelToCalc,yearsToCalc,indicator,"useLower") <> 0 )
12478      = accounting_indicatorBounds_links(linksModelToCalc,yearsToCalc,indicator,"lowerValue");
12479   
12480  accounting_indicator_links.up(linksModelToCalc,yearsToCalc,indicator)
12481      $(accounting_indicatorBounds_links(linksModelToCalc,yearsToCalc,indicator,"useUpper") <> 0 )
12482      = accounting_indicatorBounds_links(linksModelToCalc,yearsToCalc,indicator,"upperValue");
12483   
12484  accounting_indicator_links.fx(linksModelToCalc,yearsToCalc,indicator)
12485      $(accounting_indicatorBounds_links(linksModelToCalc,yearsToCalc,indicator,"useFixed") <> 0 )
12486      = accounting_indicatorBounds_links(linksModelToCalc,yearsToCalc,indicator,"fixedValue");
12487   
12488   
12489  * ==== declaration of equations ====
12490   
12491  equations
12492  Eq_accounting_indicatorCalc(accNodesModel,accYears,indicator
12493      ) "Calculates the level of an indicator per accounting region"
12494  Eq_accounting_indicatorCalc_links(linksModel,years,indicator
12495      ) "Calculates the level of an indicator per model link"
12496  Eq_accounting_objective "Calculates the objective value based on the specified indicator"
12497    ;
12498   
12499   
12500  * ==== equations definition ====
12501  * // ## Equations
12502  * // ### Accounting Indicator Calculation
12503  * // Calculates the indicators for each model node for converters, sources and sinks, transfer, storage and variable indicators.
12504  * // {Eq_accounting_indicatorCalc}
12505  Eq_accounting_indicatorCalc(accNodesModel,accYearsSel(accYears),indicator)
12506      $activeIndicators(accNodesModel,accYears,indicator)
12507      ..
12508      accounting_indicator(accNodesModel,accYears,indicator)
12509      =e=
12510   
12511  * == variable indicators ==
12512      sum((accNodesModel_a,accYears_a,indicator_a)
12513          $(compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
12514              and variableIndicators(accNodesModel_a,accYears_a,indicator_a)),
12515          compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
12516          * accounting_indicator(accNodesModel_a,accYears_a,indicator_a))
12517   
12518  * == converters ==
12519      + sum ((accNodesModel_a,nodesModelSel,accYears_a,yearsSel,indicator_a)
12520              $( compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
12521                  and sameas(nodesModelSel,accNodesModel_a) and sameas(yearsSel,accYears_a)),
12522          compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
12523          *
12524          ( sum ((converter_techs,vintage)
12525                      $(converter_availTech(nodesModelSel,yearsSel,converter_techs,vintage)
12526                          and accounting_converterUnits(indicator_a,nodesModelSel,converter_techs,vintage,"useAnnuity") = 0),
12527              converter_unitsBuild(nodesModelSel,yearsSel,converter_techs,vintage)
12528              * accounting_converterUnits(indicator_a,nodesModelSel,converter_techs,vintage,"perUnitBuild"))
12529   
12530          + sum ((years_a,converter_techs,vintage)
12531                      $(converter_availTech(nodesModelSel,years_a,converter_techs,vintage)
12532                          and years_a.val < sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
12533                          and accounting_converterUnits(indicator_a,nodesModelSel,converter_techs,vintage,"useAnnuity") = 1
12534                          and years_a.val + accounting_converterUnits(indicator_a,nodesModelSel,converter_techs,vintage,"amorTime") > yearsSel.val
12535                          and years_a.val <= yearsSel.val ),
12536              converter_unitsBuild(nodesModelSel,years_a,converter_techs,vintage)
12537              * accounting_converterUnits(indicator_a,nodesModelSel,converter_techs,vintage,"perUnitBuild")
12538              * accounting_annuityFactor_converter(indicator_a,nodesModelSel,converter_techs,vintage) )
12539   
12540          + sum ((yearsToCalc,converter_techs,vintage)
12541                      $(converter_availTech(nodesModelSel,yearsToCalc,converter_techs,vintage)
12542                          and yearsToCalc.val >= sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
12543                          and accounting_converterUnits(indicator_a,nodesModelSel,converter_techs,vintage,"useAnnuity") = 1
12544                          and yearsToCalc.val + accounting_converterUnits(indicator_a,nodesModelSel,converter_techs,vintage,"amorTime") > yearsSel.val
12545                          and yearsToCalc.val <= yearsSel.val ),
12546              converter_unitsBuild(nodesModelSel,yearsToCalc,converter_techs,vintage)
12547              * accounting_converterUnits(indicator_a,nodesModelSel,converter_techs,vintage,"perUnitBuild")
12548              * accounting_annuityFactor_converter(indicator_a,nodesModelSel,converter_techs,vintage) )
12549   
12550          + sum ((converter_techs,vintage)
12551                      $converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage),
12552              converter_unitsDecom(nodesModelSel,yearsSel,converter_techs,vintage)
12553              * accounting_converterUnits(indicator_a,nodesModelSel,converter_techs,vintage,"perUnitDecom")
12554   
12555              + converter_unitsTotal(nodesModelSel,yearsSel,converter_techs,vintage)
12556              * accounting_converterUnits(indicator_a,nodesModelSel,converter_techs,vintage,"perUnitTotal") )
12557   
12558          + sum ((timeModelSel,converter_techs,vintage,activity)
12559                      $converter_usedTechAct(nodesModelSel,yearsSel,converter_techs,vintage,activity),
12560              converter_activity(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity)
12561              * timeLength(timeModelSel)
12562              * accounting_converterActivity(indicator_a,nodesModelSel,converter_techs,vintage,activity,"perActivity") )
12563   
12564          + sum ((timeModelSel,converter_techs,vintage)
12565                      $converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage),
12566              converter_unitStartups(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
12567              * accounting_converterStartup(indicator_a,nodesModelSel,converter_techs,vintage,"perStartup") )
12568   
12569          + sum ((timeModelSel,converter_techs,vintage)
12570                      $converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage),
12571              converter_rampPos(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
12572              * (accounting_converterStartup(indicator_a,nodesModelSel,converter_techs,vintage,"perRamp")
12573                 + accounting_converterStartup(indicator_a,nodesModelSel,converter_techs,vintage,"perRampPos"))
12574   
12575              + converter_rampNeg(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
12576              * (accounting_converterStartup(indicator_a,nodesModelSel,converter_techs,vintage,"perRamp")
12577                 + accounting_converterStartup(indicator_a,nodesModelSel,converter_techs,vintage,"perRampNeg")))
12578          )
12579      )
12580   
12581  * == storage ==
12582      + sum ((accNodesModel_a,nodesModelSel,accYears_a,yearsSel,indicator_a)
12583              $( compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
12584                  and sameas(nodesModelSel,accNodesModel_a) and sameas(yearsSel,accYears_a)),
12585          compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
12586          *
12587          ( sum ((storage_techs,vintage)
12588                      $(storage_availTech(nodesModelSel,yearsSel,storage_techs,vintage)
12589                          and accounting_storageUnits(indicator_a,nodesModelSel,storage_techs,vintage,"useAnnuity") = 0),
12590              storage_unitsBuild(nodesModelSel,yearsSel,storage_techs,vintage)
12591              * accounting_storageUnits(indicator_a,nodesModelSel,storage_techs,vintage,"perUnitBuild") )
12592   
12593          + sum ((years_a,storage_techs,vintage)
12594                      $(storage_availTech(nodesModelSel,years_a,storage_techs,vintage)
12595                          and years_a.val < sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
12596                          and accounting_storageUnits(indicator_a,nodesModelSel,storage_techs,vintage,"useAnnuity") = 1
12597                          and years_a.val + accounting_storageUnits(indicator_a,nodesModelSel,storage_techs,vintage,"amorTime") > yearsSel.val
12598                          and years_a.val <= yearsSel.val ),
12599              storage_unitsBuild(nodesModelSel,years_a,storage_techs,vintage)
12600              * accounting_storageUnits(indicator_a,nodesModelSel,storage_techs,vintage,"perUnitBuild")
12601              * accounting_annuityFactor_storage(indicator_a,nodesModelSel,storage_techs,vintage) )
12602   
12603          + sum ((yearsToCalc,storage_techs,vintage)
12604                      $(storage_availTech(nodesModelSel,yearsToCalc,storage_techs,vintage)
12605                          and yearsToCalc.val >= sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
12606                          and accounting_storageUnits(indicator_a,nodesModelSel,storage_techs,vintage,"useAnnuity") = 1
12607                          and yearsToCalc.val + accounting_storageUnits(indicator_a,nodesModelSel,storage_techs,vintage,"amorTime") > yearsSel.val
12608                          and yearsToCalc.val <= yearsSel.val ),
12609              storage_unitsBuild(nodesModelSel,yearsToCalc,storage_techs,vintage)
12610              * accounting_storageUnits(indicator_a,nodesModelSel,storage_techs,vintage,"perUnitBuild")
12611              * accounting_annuityFactor_storage(indicator_a,nodesModelSel,storage_techs,vintage) )
12612   
12613          + sum ((storage_techs,vintage)
12614                      $storage_usedTech(nodesModelSel,yearsSel,storage_techs,vintage),
12615              storage_unitsDecom(nodesModelSel,yearsSel,storage_techs,vintage)
12616              * accounting_storageUnits(indicator_a,nodesModelSel,storage_techs,vintage,"perUnitDecom")
12617   
12618              + storage_unitsTotal(nodesModelSel,yearsSel,storage_techs,vintage)
12619              * accounting_storageUnits(indicator_a,nodesModelSel,storage_techs,vintage,"perUnitTotal") )
12620          )
12621      )
12622   
12623   
12624  * == transfer ==
12625      + sum ((accNodesModel_a,nodesModelSel,accYears_a,yearsSel,indicator_a)
12626              $( compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
12627                  and sameas(nodesModelSel,accNodesModel_a) and sameas(yearsSel,accYears_a)),
12628          compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
12629          *
12630          ( sum ((linksModelToCalc,transfer_techs,vintage)
12631                      $(transfer_availTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
12632                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0
12633                          and accounting_transferLinks(indicator_a,linksModelToCalc,transfer_techs,vintage,"useAnnuity") = 0),
12634              0.5
12635              * transfer_linksBuild(linksModelToCalc,yearsSel,transfer_techs,vintage)
12636              * accounting_transferLinks(indicator_a,linksModelToCalc,transfer_techs,vintage,"perLinkBuild") )
12637   
12638          + sum ((linksModelToCalc,years_a,transfer_techs,vintage)
12639                      $(transfer_availTech(linksModelToCalc,years_a,transfer_techs,vintage)
12640                          and years_a.val < sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
12641                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0
12642                          and accounting_transferLinks(indicator_a,linksModelToCalc,transfer_techs,vintage,"useAnnuity") = 1
12643                          and years_a.val + accounting_transferLinks(indicator_a,linksModelToCalc,transfer_techs,vintage,"amorTime") > yearsSel.val
12644                          and years_a.val <= yearsSel.val ),
12645              0.5
12646              * transfer_linksBuild(linksModelToCalc,years_a,transfer_techs,vintage)
12647              * accounting_transferLinks(indicator_a,linksModelToCalc,transfer_techs,vintage,"perLinkBuild")
12648              * accounting_annuityFactor_transferLink(indicator_a,linksModelToCalc,transfer_techs,vintage) )
12649   
12650          + sum ((linksModelToCalc,yearsToCalc,transfer_techs,vintage)
12651                      $(transfer_availTech(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
12652                          and yearsToCalc.val >= sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
12653                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0
12654                          and accounting_transferLinks(indicator_a,linksModelToCalc,transfer_techs,vintage,"useAnnuity") = 1
12655                          and yearsToCalc.val + accounting_transferLinks(indicator_a,linksModelToCalc,transfer_techs,vintage,"amorTime") > yearsSel.val
12656                          and yearsToCalc.val <= yearsSel.val ),
12657              0.5
12658              * transfer_linksBuild(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
12659              * accounting_transferLinks(indicator_a,linksModelToCalc,transfer_techs,vintage,"perLinkBuild")
12660              * accounting_annuityFactor_transferLink(indicator_a,linksModelToCalc,transfer_techs,vintage) )
12661   
12662          + sum ((linksModelToCalc,transfer_techs,vintage,link_types)
12663                      $(transfer_availTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
12664                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0
12665                          and accounting_transferPerLength(indicator_a,linksModelToCalc,transfer_techs,vintage,link_types,"useAnnuity") = 0 ),
12666              0.5
12667              * transfer_linksBuild(linksModelToCalc,yearsSel,transfer_techs,vintage)
12668              * transfer_lengthParam(linksModelToCalc,link_types,"length")
12669              * accounting_transferPerLength(indicator_a,linksModelToCalc,transfer_techs,vintage,link_types,"perLengthBuild") )
12670   
12671          + sum ((linksModelToCalc,years_a,transfer_techs,vintage,link_types)
12672                      $(transfer_availTech(linksModelToCalc,years_a,transfer_techs,vintage)
12673                          and years_a.val < sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
12674                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0
12675                          and accounting_transferPerLength(indicator_a,linksModelToCalc,transfer_techs,vintage,link_types,"useAnnuity") = 1
12676                          and years_a.val + accounting_transferPerLength(indicator_a,linksModelToCalc,transfer_techs,vintage,link_types,"amorTime") > yearsSel.val
12677                          and years_a.val <= yearsSel.val ),
12678              0.5
12679              * transfer_linksBuild(linksModelToCalc,years_a,transfer_techs,vintage)
12680              * transfer_lengthParam(linksModelToCalc,link_types,"length")
12681              * accounting_transferPerLength(indicator_a,linksModelToCalc,transfer_techs,vintage,link_types,"perLengthBuild")
12682              * accounting_annuityFactor_transferPerLength(indicator_a,linksModelToCalc,transfer_techs,vintage,link_types) )
12683   
12684          + sum ((linksModelToCalc,yearsToCalc,transfer_techs,vintage,link_types)
12685                      $(transfer_availTech(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
12686                          and yearsToCalc.val >= sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
12687                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0
12688                          and accounting_transferPerLength(indicator_a,linksModelToCalc,transfer_techs,vintage,link_types,"useAnnuity") = 1
12689                          and yearsToCalc.val + accounting_transferPerLength(indicator_a,linksModelToCalc,transfer_techs,vintage,link_types,"amorTime") > yearsSel.val
12690                          and yearsToCalc.val <= yearsSel.val ),
12691              0.5
12692              * transfer_linksBuild(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
12693              * transfer_lengthParam(linksModelToCalc,link_types,"length")
12694              * accounting_transferPerLength(indicator_a,linksModelToCalc,transfer_techs,vintage,link_types,"perLengthBuild")
12695              * accounting_annuityFactor_transferPerLength(indicator_a,linksModelToCalc,transfer_techs,vintage,link_types) )
12696   
12697          + sum ((linksModelToCalc,transfer_techs,vintage)
12698                      $(transfer_usedTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
12699                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0 ),
12700              0.5
12701              * transfer_linksDecom(linksModelToCalc,yearsSel,transfer_techs,vintage)
12702              * accounting_transferLinks(indicator_a,linksModelToCalc,transfer_techs,vintage,"perLinkDecom")
12703   
12704              + 0.5
12705              * transfer_linksTotal(linksModelToCalc,yearsSel,transfer_techs,vintage)
12706              * accounting_transferLinks(indicator_a,linksModelToCalc,transfer_techs,vintage,"perLinkTotal")
12707   
12708              + 0.5
12709              * sum (link_types,
12710                  transfer_linksDecom(linksModelToCalc,yearsSel,transfer_techs,vintage)
12711                  * transfer_lengthParam(linksModelToCalc,link_types,"length")
12712                  * accounting_transferPerLength(indicator_a,linksModelToCalc,transfer_techs,vintage,link_types,"perLengthDecom")
12713   
12714                  + transfer_linksTotal(linksModelToCalc,yearsSel,transfer_techs,vintage)
12715                  * transfer_lengthParam(linksModelToCalc,link_types,"length")
12716                  * accounting_transferPerLength(indicator_a,linksModelToCalc,transfer_techs,vintage,link_types,"perLengthTotal"))
12717   
12718              + 0.5
12719              * sum (timeModelSel,
12720                  transfer_flowAlong(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
12721                  * timeLength(timeModelSel)
12722                  * ( accounting_transferLinks(indicator_a,linksModelToCalc,transfer_techs,vintage,"perFlow")
12723                      + accounting_transferLinks(indicator_a,linksModelToCalc,transfer_techs,vintage,"perFlowAlong"))
12724   
12725                  + transfer_flowAgainst(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
12726                  * timeLength(timeModelSel)
12727                  * ( accounting_transferLinks(indicator_a,linksModelToCalc,transfer_techs,vintage,"perFlow")
12728                      + accounting_transferLinks(indicator_a,linksModelToCalc,transfer_techs,vintage,"perFlowAgainst")))
12729   
12730              + 0.5
12731              * sum ((timeModelSel, link_types),
12732                  transfer_flowAlong(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
12733                  * timeLength(timeModelSel)
12734                  * transfer_lengthParam(linksModelToCalc,link_types,"length")
12735                  * (accounting_transferPerLength(indicator_a,linksModelToCalc,transfer_techs,vintage,link_types,"perFlow")
12736                      + accounting_transferPerLength(indicator_a,linksModelToCalc,transfer_techs,vintage,link_types,"perFlowAlong"))
12737   
12738                  + transfer_flowAgainst(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
12739                  * timeLength(timeModelSel)
12740                  * transfer_lengthParam(linksModelToCalc,link_types,"length")
12741                  * (accounting_transferPerLength(indicator_a,linksModelToCalc,transfer_techs,vintage,link_types,"perFlow")
12742                      + accounting_transferPerLength(indicator_a,linksModelToCalc,transfer_techs,vintage,link_types,"perFlowAgainst")))
12743              )
12744          )
12745      )
12746   
12747   
12748  * == sources / sinks ==
12749      + sum ((accNodesModel_a,nodesModelSel,accYears_a,yearsSel,indicator_a)
12750              $( compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
12751                  and sameas(nodesModelSel,accNodesModel_a) and sameas(yearsSel,accYears_a)),
12752          compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
12753          *
12754          sum ((timeModelSel,sourcesink_techs,commodity)
12755                  $sourcesink_enabled(nodesModelSel,yearsSel,sourcesink_techs,commodity),
12756              sourcesink_flow(timeModelSel,nodesModelSel,yearsSel,sourcesink_techs,commodity)
12757              * timeLength(timeModelSel)
12758              * accounting_sourcesinkFlow(indicator_a,nodesModelSel,yearsSel,sourcesink_techs,commodity,"perFlow") )
12759      );
12760   
12761  * // ### Accounting Indicator Calculation Links
12762  * // Calculates the indicators for each transfer for converters, sources and sinks, transfer, storage and variable indicators.
12763  * // {Eq_accounting_indicatorCalc_links}
12764  Eq_accounting_indicatorCalc_links(linksModelToCalc,yearsSel,indicator)
12765      $activeIndicators_links(linksModelToCalc,yearsSel,indicator)
12766      ..
12767      accounting_indicator_links(linksModelToCalc,yearsSel,indicator)
12768      =e=
12769      sum ((transfer_techs,vintage)
12770                  $(transfer_availTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
12771                      and accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"useAnnuity") = 0),
12772          transfer_linksBuild(linksModelToCalc,yearsSel,transfer_techs,vintage)
12773          * accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"perLinkBuild") )
12774   
12775      + sum ((years_a,transfer_techs,vintage)
12776                  $(transfer_availTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
12777                      and accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"useAnnuity") = 1
12778                      and years_a.val + accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"amorTime") > yearsSel.val
12779                      and years_a.val <= yearsSel.val ),
12780          transfer_linksBuild(linksModelToCalc,years_a,transfer_techs,vintage)
12781          * accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"perLinkBuild")
12782          * accounting_annuityFactor_transferLink(indicator,linksModelToCalc,transfer_techs,vintage) )
12783   
12784      + sum ((transfer_techs,vintage,link_types)
12785                  $(transfer_availTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
12786                      and accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"useAnnuity") = 0 ),
12787          transfer_linksBuild(linksModelToCalc,yearsSel,transfer_techs,vintage)
12788          * transfer_lengthParam(linksModelToCalc,link_types,"length")
12789          * accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"perLengthBuild") )
12790   
12791      + sum ((years_a,transfer_techs,vintage,link_types)
12792                  $(transfer_availTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
12793                      and accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"useAnnuity") = 1
12794                      and years_a.val + accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"amorTime") > yearsSel.val
12795                      and years_a.val <= yearsSel.val ),
12796          transfer_linksBuild(linksModelToCalc,years_a,transfer_techs,vintage)
12797          * transfer_lengthParam(linksModelToCalc,link_types,"length")
12798          * accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"perLengthBuild")
12799          * accounting_annuityFactor_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types) )
12800   
12801      + sum ((transfer_techs,vintage)
12802                  $(transfer_usedTech(linksModelToCalc,yearsSel,transfer_techs,vintage)),
12803          transfer_linksDecom(linksModelToCalc,yearsSel,transfer_techs,vintage)
12804          * accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"perLinkDecom")
12805   
12806          + transfer_linksTotal(linksModelToCalc,yearsSel,transfer_techs,vintage)
12807          * accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"perLinkTotal")
12808   
12809          + sum (link_types,
12810              transfer_linksDecom(linksModelToCalc,yearsSel,transfer_techs,vintage)
12811              * transfer_lengthParam(linksModelToCalc,link_types,"length")
12812              * accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"perLengthDecom")
12813   
12814              + transfer_linksTotal(linksModelToCalc,yearsSel,transfer_techs,vintage)
12815              * transfer_lengthParam(linksModelToCalc,link_types,"length")
12816              * accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"perLengthTotal"))
12817   
12818          + sum (timeModelSel,
12819              transfer_flowAlong(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
12820              * timeLength(timeModelSel)
12821              * ( accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"perFlow")
12822                  + accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"perFlowAlong"))
12823   
12824              + transfer_flowAgainst(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
12825              * timeLength(timeModelSel)
12826              * ( accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"perFlow")
12827                  + accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"perFlowAgainst")))
12828   
12829          + sum ((timeModelSel, link_types),
12830              transfer_flowAlong(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
12831              * timeLength(timeModelSel)
12832              * transfer_lengthParam(linksModelToCalc,link_types,"length")
12833              * (accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"perFlow")
12834                  + accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"perFlowAlong"))
12835   
12836              + transfer_flowAgainst(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
12837              * timeLength(timeModelSel)
12838              * transfer_lengthParam(linksModelToCalc,link_types,"length")
12839              * (accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"perFlow")
12840                  + accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"perFlowAgainst")))
12841          );
12842   
12843  * // ### Accounting Objective
12844  * // Calculates the indicators for the objective.
12845  * // {Eq_accounting_objective}
12846  Eq_accounting_objective
12847      ..
12848      accounting_objective
12849      =e=
12850      sum ((accNodesModel,accYears,indicator)
12851              $(accounting_indicatorBounds(accNodesModel,accYears,indicator,"obj") <> 0 ),
12852          accounting_indicator(accNodesModel,accYears,indicator) )
12853   
12854   
12855  * ==== model definition ====
12856   
12857  Model M_accounting
12858  /
12859  Eq_accounting_indicatorCalc_links
12860  Eq_accounting_indicatorCalc
12861  Eq_accounting_objective
12862  /;
INCLUDE    C:\Local\REMix\framework\remix\framework\model\source\optiframe.gms
12864  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
12865  * SPDX-License-Identifier: BSD-3-Clause
12866   
12867  * ==== optimization frames ====
12869   
12870  * mapping from optimization frame to years
12872  set optiframe / of1 * of3 /;
12873  set optiframeToCalc(optiframe);
12874   
12876  set map_optiframe(optiframe,years) / of1 . #yearsToCalc /;
12878   
12880   
12881  option optiframeToCalc < map_optiframe;
12882   
12883  Model remix /
12884    M_converter
12885    M_storage
12886    M_transfer
12887    M_sourcesink
12888    M_balance
12889    M_accounting
12890  /;
12891   
12892   
12893  * ==== include methods  ====
12894   
12895  * check if the method is valid
12901   
12902   
12903  * if method is pips write the checkanno tool
INCLUDE    C:\Local\REMix\framework\remix\framework\model\source\methods\checkanno.gms
12905  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
12906  * SPDX-License-Identifier: BSD-3-Clause
12907   
12910   
12913   
12914  * if method is pips generate the annotated gdx file
INCLUDE    C:\Local\REMix\framework\remix\framework\model\source\methods\pips.gms
12916  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
12917  * SPDX-License-Identifier: BSD-3-Clause
12918   
12922   
12923  * if method is solve run the model with commercial solvers
INCLUDE    C:\Local\REMix\framework\remix\framework\model\source\methods\solve.gms
12925  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
12926  * SPDX-License-Identifier: BSD-3-Clause
12927   
12930   
12932   
12933  * ==== global options ====
12940   
12941  * ==== general solver options ====
12951   
12952  * ==== cplex options ====
12961   
12962  * ==== gurobi options ====
12963   
12964   
12965  * ==== copt options ====
12969   
12970  * ==== debug options ====
12973   
12974   
12975  * ==== setup optimization ====
12976  if ((sum(nodesModelToCalc, 1)>40 or sum(timeModelToCalc, 1)>50) and not 0,
12977     option limRow=0, limCol=0, solPrint=off;
12978  else
12979     option limRow=100000, limCol=100000, solPrint=on;
12980  );
12981   
12983   
12984  option mip = cplex;
12985  option reslim = 1209600;
12986  option optcr = 1e-3;
12987  remix.threads = 4;
12988  remix.optFile = 1;
12989  remix.solveLink = 0;
12990  remix.holdFixed = 1;
12991   
12992   
12993  * ==== configure option files ====
12994   
12997   
12998  file opt / "cplex.opt" /;
12999  put opt;
13001  put "rerun no" /;
13002  put "iis 1" /;
13003  put "lpmethod 4" /;
13005  put "barorder 3 /;" /;
13006  put "preind 1" /;
13007  put "scaind 0" /;
13008  put "predual -1" /;
13009  put "baralg 0" /;
13010  put "barstartalg 1" /;
13011  put "barepcomp 1e-6" /;
13012  put "solutiontype 2" /;
13014  put "startalg 4" /;
13015  put "epgap 1e-3" /;
13016  put "quality 1" /;
13017  put "barcolnz 0" /;
13018  put "threads 4" /;
13019  put "parallelmode 1" /;
13022  putclose;
13023   
13025   
13026   
13027  * ==== solve the problem ====
13028   
13029  loop ( optiframeToCalc,
13030      yearsSel(years) = no;
13031      yearsSel(years)$map_optiframe(optiframeToCalc,years) = yes;
13032      yearsToFix(years) = no;
13033      yearsToFix(years)$(years.val < smin(years_a$yearsSel(years_a), years_a.val)) = yes;
13034      accYearsSel(accYears) = no;
13035      accYearsSel("horizon") = yes;
13036      accYearsSel(accYears)$(sum(yearsSel$sameas(accYears,yearsSel), 1)) = yes;
13037      accYearsToFix(accYears) = no;
13038      accYearsToFix(accYears)$(sum(years$(sameas(years,accYears) and years.val < smin(years_a$yearsSel(years_a), years_a.val)), 1) > 0) = yes;
13039      timeModelSel(timeModel) = no;
13040      timeModelSel(timeModel)$timeModelToCalc(timeModel) = yes;
13041      nodesModelSel(nodesModel) = no;
13042      nodesModelSel(nodesModel)$nodesModelToCalc(nodesModel) = yes;
13043   
13044  * Fix decision for years previously optimized in case of myopic or foresight
13045      converter_unitsDelta(nodesModelToCalc,yearsToFix,converter_techs)
13046          $(sum(yearsToCalc$sameas(yearsToFix, yearsToCalc), 1))
13047          = sum(vintage, converter_unitsTotal.l(nodesModelToCalc,yearsToFix,converter_techs,vintage))
13048              - converter_capacityParam(nodesModelToCalc,yearsToFix,converter_techs,"unitsUpperLimit");
13049      converter_unitsDelta(nodesModelToCalc,yearsToFix,converter_techs)
13050          $(converter_unitsDelta(nodesModelToCalc,yearsToFix,converter_techs) < 0) = 0;
13051   
13052      converter_unitsBuild.l(nodesModelToCalc,yearsToFix,converter_techs,vintage)
13053          $converter_availTech(nodesModelToCalc,yearsToFix,converter_techs,vintage)
13054          = converter_unitsBuild.l(nodesModelToCalc,yearsToFix,converter_techs,vintage)
13055              - converter_unitsDelta(nodesModelToCalc,yearsToFix,converter_techs);
13056   
13057      converter_unitsBuild.l(nodesModelToCalc,yearsToFix,converter_techs,vintage)
13058          $(converter_unitsBuild.l(nodesModelToCalc,yearsToFix,converter_techs,vintage) < 0) = 0;
13059      converter_unitsBuild.fx(nodesModelToCalc,yearsToFix,converter_techs,vintage)
13060          = converter_unitsBuild.l(nodesModelToCalc,yearsToFix,converter_techs,vintage);
13061      converter_unitsDecom.l(nodesModelToCalc,yearsToFix,converter_techs,vintage)
13062          $(converter_unitsDecom.l(nodesModelToCalc,yearsToFix,converter_techs,vintage) < 0) = 0;
13063      converter_unitsDecom.fx(nodesModelToCalc,yearsToFix,converter_techs,vintage)
13064          = converter_unitsDecom.l(nodesModelToCalc,yearsToFix,converter_techs,vintage);
13065      converter_unitsTotal.fx(nodesModelToCalc,yearsToFix,converter_techs,vintage)
13066          = converter_unitsTotal.l(nodesModelToCalc,yearsToFix,converter_techs,vintage);
13067   
13068   
13069      storage_unitsDelta(nodesModelToCalc,yearsToFix,storage_techs)
13070          $(sum(yearsToCalc$sameas(yearsToFix, yearsToCalc), 1))
13071          = sum(vintage, storage_unitsTotal.l(nodesModelToCalc,yearsToFix,storage_techs,vintage))
13072              - storage_reservoirParam(nodesModelToCalc,yearsToFix,storage_techs,"unitsUpperLimit");
13073      storage_unitsDelta(nodesModelToCalc,yearsToFix,storage_techs)
13074          $(storage_unitsDelta(nodesModelToCalc,yearsToFix,storage_techs) < 0) = 0;
13075   
13076      storage_unitsBuild.l(nodesModelToCalc,yearsToFix,storage_techs,vintage)
13077          $storage_availTech(nodesModelToCalc,yearsToFix,storage_techs,vintage)
13078          = storage_unitsBuild.l(nodesModelToCalc,yearsToFix,storage_techs,vintage)
13079              - storage_unitsDelta(nodesModelToCalc,yearsToFix,storage_techs);
13080   
13081      storage_unitsBuild.l(nodesModelToCalc,yearsToFix,storage_techs,vintage)
13082          $(storage_unitsBuild.l(nodesModelToCalc,yearsToFix,storage_techs,vintage) < 0) = 0;
13083      storage_unitsBuild.fx(nodesModelToCalc,yearsToFix,storage_techs,vintage)
13084          = storage_unitsBuild.l(nodesModelToCalc,yearsToFix,storage_techs,vintage);
13085      storage_unitsDecom.l(nodesModelToCalc,yearsToFix,storage_techs,vintage)
13086          $(storage_unitsDecom.l(nodesModelToCalc,yearsToFix,storage_techs,vintage) < 0) = 0;
13087      storage_unitsDecom.fx(nodesModelToCalc,yearsToFix,storage_techs,vintage)
13088          = storage_unitsDecom.l(nodesModelToCalc,yearsToFix,storage_techs,vintage);
13089      storage_unitsTotal.fx(nodesModelToCalc,yearsToFix,storage_techs,vintage)
13090          = storage_unitsTotal.l(nodesModelToCalc,yearsToFix,storage_techs,vintage);
13091   
13092   
13093      transfer_linksDelta(linksModelToCalc,yearsToFix,transfer_techs)
13094          $(sum(yearsToCalc$sameas(yearsToFix, yearsToCalc), 1))
13095          = sum(vintage, transfer_linksTotal.l(linksModelToCalc,yearsToFix,transfer_techs,vintage))
13096              - transfer_linksParam(linksModelToCalc,yearsToFix,transfer_techs,"linksUpperLimit");
13097      transfer_linksDelta(linksModelToCalc,yearsToFix,transfer_techs)
13098          $(transfer_linksDelta(linksModelToCalc,yearsToFix,transfer_techs) < 0) = 0;
13099   
13100      transfer_linksBuild.l(linksModelToCalc,yearsToFix,transfer_techs,vintage)
13101          $transfer_availTech(linksModelToCalc,yearsToFix,transfer_techs,vintage)
13102          = transfer_linksBuild.l(linksModelToCalc,yearsToFix,transfer_techs,vintage)
13103              - transfer_linksDelta(linksModelToCalc,yearsToFix,transfer_techs);
13104   
13105      transfer_linksBuild.l(linksModelToCalc,yearsToFix,transfer_techs,vintage)
13106          $(transfer_linksBuild.l(linksModelToCalc,yearsToFix,transfer_techs,vintage) < 0) = 0;
13107      transfer_linksBuild.fx(linksModelToCalc,yearsToFix,transfer_techs,vintage)
13108          = transfer_linksBuild.l(linksModelToCalc,yearsToFix,transfer_techs,vintage);
13109      transfer_linksDecom.l(linksModelToCalc,yearsToFix,transfer_techs,vintage)
13110          $(transfer_linksDecom.l(linksModelToCalc,yearsToFix,transfer_techs,vintage) < 0) = 0;
13111      transfer_linksDecom.fx(linksModelToCalc,yearsToFix,transfer_techs,vintage)
13112          = transfer_linksDecom.l(linksModelToCalc,yearsToFix,transfer_techs,vintage);
13113      transfer_linksTotal.fx(linksModelToCalc,yearsToFix,transfer_techs,vintage)
13114          = transfer_linksTotal.l(linksModelToCalc,yearsToFix,transfer_techs,vintage);
13115   
13116      accounting_indicator.fx(accNodesModel,accYearsToFix,indicator)
13117          = accounting_indicator.l(accNodesModel,accYearsToFix,indicator);
13118   
13119  * Optimize and log values
13120      if (opti_sense < 0,
13121      solve remix minimizing accounting_objective using mip;
13122      else
13123      solve remix maximizing accounting_objective using mip;
13124      );
13125   
13126      put_utility 'log' / 'Model status ' remix.modelstat:0:0;
13127      put_utility 'log' / 'Objective value ' accounting_objective.l:0:3;
13128   
13129  );
13130   
13134   
13135  * if method is pareto solve the model once and afterwards run multiple points along the pareto front
INCLUDE    C:\Local\REMix\framework\remix\framework\model\source\methods\pareto.gms
13137  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
13138  * SPDX-License-Identifier: BSD-3-Clause
13139   
13143   
13144  * if method is mga solve the model once and afterwards maximize the length metric of indicators
INCLUDE    C:\Local\REMix\framework\remix\framework\model\source\methods\mga.gms
13146  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
13147  * SPDX-License-Identifier: BSD-3-Clause
13148   
13152   
13153  * if method is iternodes run the model by iterating through all nodesToCalc
INCLUDE    C:\Local\REMix\framework\remix\framework\model\source\methods\iternodes.gms
13155  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
13156  * SPDX-License-Identifier: BSD-3-Clause
13157   
13161   
13162  * if postcalc is one write the results gdx
INCLUDE    C:\Local\REMix\framework\remix\framework\model\source\postcalc\definition.gms
13164  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
13165  * SPDX-License-Identifier: BSD-3-Clause
13166   
13168   
13169  * ==== indicator accounting ====
13170   
13171  indicator_accounting_detailed(indicator,nodesModelToCalc,yearsToCalc,techs)
13172      =
13173  * == converters ==
13174      sum ((converter_techs(techs),vintage)
13175                  $(converter_availTech(nodesModelToCalc,yearsToCalc,converter_techs,vintage)
13176                      and accounting_converterUnits(indicator,nodesModelToCalc,converter_techs,vintage,"useAnnuity") = 0),
13177          converter_unitsBuild.l(nodesModelToCalc,yearsToCalc,converter_techs,vintage)
13178          * accounting_converterUnits(indicator,nodesModelToCalc,converter_techs,vintage,"perUnitBuild"))
13179   
13180      + sum ((years_a,converter_techs(techs),vintage)
13181                  $(converter_availTech(nodesModelToCalc,years_a,converter_techs,vintage)
13182                      and accounting_converterUnits(indicator,nodesModelToCalc,converter_techs,vintage,"useAnnuity") = 1
13183                      and years_a.val + accounting_converterUnits(indicator,nodesModelToCalc,converter_techs,vintage,"amorTime") > yearsToCalc.val
13184                      and years_a.val <= yearsToCalc.val ),
13185          converter_unitsBuild.l(nodesModelToCalc,years_a,converter_techs,vintage)
13186          * accounting_converterUnits(indicator,nodesModelToCalc,converter_techs,vintage,"perUnitBuild")
13187          * accounting_annuityFactor_converter(indicator,nodesModelToCalc,converter_techs,vintage) )
13188   
13189      + sum ((converter_techs(techs),vintage)
13190                  $converter_usedTech(nodesModelToCalc,yearsToCalc,converter_techs,vintage),
13191          converter_unitsDecom.l(nodesModelToCalc,yearsToCalc,converter_techs,vintage)
13192          * accounting_converterUnits(indicator,nodesModelToCalc,converter_techs,vintage,"perUnitDecom")
13193   
13194          + converter_unitsTotal.l(nodesModelToCalc,yearsToCalc,converter_techs,vintage)
13195          * accounting_converterUnits(indicator,nodesModelToCalc,converter_techs,vintage,"perUnitTotal") )
13196   
13197      + sum ((timeModelToCalc,converter_techs(techs),vintage,activity)
13198                  $converter_usedTechAct(nodesModelToCalc,yearsToCalc,converter_techs,vintage,activity),
13199          converter_activity.l(timeModelToCalc,nodesModelToCalc,yearsToCalc,converter_techs,vintage,activity)
13200          * timeLength(timeModelToCalc)
13201          * accounting_converterActivity(indicator,nodesModelToCalc,converter_techs,vintage,activity,"perActivity") )
13202   
13203      + sum ((timeModelToCalc,converter_techs(techs),vintage)
13204                  $converter_usedTech(nodesModelToCalc,yearsToCalc,converter_techs,vintage),
13205          converter_unitStartups.l(timeModelToCalc,nodesModelToCalc,yearsToCalc,converter_techs,vintage)
13206          * accounting_converterStartup(indicator,nodesModelToCalc,converter_techs,vintage,"perStartup") )
13207   
13208      + sum ((timeModelToCalc,converter_techs(techs),vintage)
13209                  $converter_usedTech(nodesModelToCalc,yearsToCalc,converter_techs,vintage),
13210          converter_rampPos.l(timeModelToCalc,nodesModelToCalc,yearsToCalc,converter_techs,vintage)
13211          * (accounting_converterStartup(indicator,nodesModelToCalc,converter_techs,vintage,"perRamp")
13212              + accounting_converterStartup(indicator,nodesModelToCalc,converter_techs,vintage,"perRampPos"))
13213   
13214          + converter_rampNeg.l(timeModelToCalc,nodesModelToCalc,yearsToCalc,converter_techs,vintage)
13215          * (accounting_converterStartup(indicator,nodesModelToCalc,converter_techs,vintage,"perRamp")
13216              + accounting_converterStartup(indicator,nodesModelToCalc,converter_techs,vintage,"perRampNeg")))
13217   
13218  * == storage ==
13219      + sum ((storage_techs(techs),vintage)
13220                  $(storage_availTech(nodesModelToCalc,yearsToCalc,storage_techs,vintage)
13221                      and accounting_storageUnits(indicator,nodesModelToCalc,storage_techs,vintage,"useAnnuity") = 0),
13222          storage_unitsBuild.l(nodesModelToCalc,yearsToCalc,storage_techs,vintage)
13223          * accounting_storageUnits(indicator,nodesModelToCalc,storage_techs,vintage,"perUnitBuild") )
13224   
13225      + sum ((years_a,storage_techs(techs),vintage)
13226                  $(storage_availTech(nodesModelToCalc,yearsToCalc,storage_techs,vintage)
13227                      and accounting_storageUnits(indicator,nodesModelToCalc,storage_techs,vintage,"useAnnuity") = 1
13228                      and years_a.val + accounting_storageUnits(indicator,nodesModelToCalc,storage_techs,vintage,"amorTime") > yearsToCalc.val
13229                      and years_a.val <= yearsToCalc.val ),
13230          storage_unitsBuild.l(nodesModelToCalc,years_a,storage_techs,vintage)
13231          * accounting_storageUnits(indicator,nodesModelToCalc,storage_techs,vintage,"perUnitBuild")
13232          * accounting_annuityFactor_storage(indicator,nodesModelToCalc,storage_techs,vintage) )
13233   
13234      + sum ((storage_techs(techs),vintage)
13235                  $storage_usedTech(nodesModelToCalc,yearsToCalc,storage_techs,vintage),
13236          storage_unitsDecom.l(nodesModelToCalc,yearsToCalc,storage_techs,vintage)
13237          * accounting_storageUnits(indicator,nodesModelToCalc,storage_techs,vintage,"perUnitDecom")
13238   
13239          + storage_unitsTotal.l(nodesModelToCalc,yearsToCalc,storage_techs,vintage)
13240          * accounting_storageUnits(indicator,nodesModelToCalc,storage_techs,vintage,"perUnitTotal") )
13241   
13242  * == transfer ==
13243      + sum ((linksModel,transfer_techs(techs),vintage)
13244                  $(transfer_availTech(linksModel,yearsToCalc,transfer_techs,vintage)
13245                      and linksModelToCalc(linksModel)
13246                      and transfer_incidenceModel(nodesModelToCalc,linksModel) <> 0
13247                      and accounting_transferLinks(indicator,linksModel,transfer_techs,vintage,"useAnnuity") = 0),
13248          0.5
13249          * transfer_linksBuild.l(linksModel,yearsToCalc,transfer_techs,vintage)
13250          * accounting_transferLinks(indicator,linksModel,transfer_techs,vintage,"perLinkBuild") )
13251   
13252      + sum ((linksModel,years_a,transfer_techs(techs),vintage)
13253                  $(transfer_availTech(linksModel,yearsToCalc,transfer_techs,vintage)
13254                      and linksModelToCalc(linksModel)
13255                      and transfer_incidenceModel(nodesModelToCalc,linksModel) <> 0
13256                      and accounting_transferLinks(indicator,linksModel,transfer_techs,vintage,"useAnnuity") = 1
13257                      and years_a.val + accounting_transferLinks(indicator,linksModel,transfer_techs,vintage,"amorTime") > yearsToCalc.val
13258                      and years_a.val <= yearsToCalc.val ),
13259          0.5
13260          * transfer_linksBuild.l(linksModel,years_a,transfer_techs,vintage)
13261          * accounting_transferLinks(indicator,linksModel,transfer_techs,vintage,"perLinkBuild")
13262          * accounting_annuityFactor_transferLink(indicator,linksModel,transfer_techs,vintage) )
13263   
13264      + sum ((linksModel,transfer_techs(techs),vintage,link_types)
13265                  $(transfer_availTech(linksModel,yearsToCalc,transfer_techs,vintage)
13266                      and linksModelToCalc(linksModel)
13267                      and transfer_incidenceModel(nodesModelToCalc,linksModel) <> 0
13268                      and accounting_transferPerLength(indicator,linksModel,transfer_techs,vintage,link_types,"useAnnuity") = 0 ),
13269          0.5
13270          * transfer_linksBuild.l(linksModel,yearsToCalc,transfer_techs,vintage)
13271          * transfer_lengthParam(linksModel,link_types,"length")
13272          * accounting_transferPerLength(indicator,linksModel,transfer_techs,vintage,link_types,"perLengthBuild") )
13273   
13274      + sum ((linksModel,years_a,transfer_techs(techs),vintage,link_types)
13275                  $(transfer_availTech(linksModel,yearsToCalc,transfer_techs,vintage)
13276                      and linksModelToCalc(linksModel)
13277                      and transfer_incidenceModel(nodesModelToCalc,linksModel) <> 0
13278                      and accounting_transferPerLength(indicator,linksModel,transfer_techs,vintage,link_types,"useAnnuity") = 1
13279                      and years_a.val + accounting_transferPerLength(indicator,linksModel,transfer_techs,vintage,link_types,"amorTime") > yearsToCalc.val
13280                      and years_a.val <= yearsToCalc.val ),
13281          0.5
13282          * transfer_linksBuild.l(linksModel,years_a,transfer_techs,vintage)
13283          * transfer_lengthParam(linksModel,link_types,"length")
13284          * accounting_transferPerLength(indicator,linksModel,transfer_techs,vintage,link_types,"perLengthBuild")
13285          * accounting_annuityFactor_transferPerLength(indicator,linksModel,transfer_techs,vintage,link_types) )
13286   
13287      + sum ((linksModel,transfer_techs(techs),vintage)
13288                  $(transfer_usedTech(linksModel,yearsToCalc,transfer_techs,vintage)
13289                      and linksModelToCalc(linksModel)
13290                      and transfer_incidenceModel(nodesModelToCalc,linksModel) <> 0 ),
13291          0.5
13292          * transfer_linksDecom.l(linksModel,yearsToCalc,transfer_techs,vintage)
13293          * accounting_transferLinks(indicator,linksModel,transfer_techs,vintage,"perLinkDecom")
13294   
13295          + 0.5
13296          * transfer_linksTotal.l(linksModel,yearsToCalc,transfer_techs,vintage)
13297          * accounting_transferLinks(indicator,linksModel,transfer_techs,vintage,"perLinkTotal")
13298   
13299          + 0.5
13300          * sum (link_types,
13301              transfer_linksDecom.l(linksModel,yearsToCalc,transfer_techs,vintage)
13302              * transfer_lengthParam(linksModel,link_types,"length")
13303              * accounting_transferPerLength(indicator,linksModel,transfer_techs,vintage,link_types,"perLengthDecom")
13304   
13305              + transfer_linksTotal.l(linksModel,yearsToCalc,transfer_techs,vintage)
13306              * transfer_lengthParam(linksModel,link_types,"length")
13307              * accounting_transferPerLength(indicator,linksModel,transfer_techs,vintage,link_types,"perLengthTotal"))
13308   
13309          + 0.5
13310          * sum (timeModelToCalc,
13311              transfer_flowAlong.l(timeModelToCalc,linksModel,yearsToCalc,transfer_techs,vintage)
13312              * timeLength(timeModelToCalc)
13313              * ( accounting_transferLinks(indicator,linksModel,transfer_techs,vintage,"perFlow")
13314                  + accounting_transferLinks(indicator,linksModel,transfer_techs,vintage,"perFlowAlong"))
13315   
13316              + transfer_flowAgainst.l(timeModelToCalc,linksModel,yearsToCalc,transfer_techs,vintage)
13317              * timeLength(timeModelToCalc)
13318              * ( accounting_transferLinks(indicator,linksModel,transfer_techs,vintage,"perFlow")
13319                  + accounting_transferLinks(indicator,linksModel,transfer_techs,vintage,"perFlowAgainst")))
13320   
13321          + 0.5
13322          * sum ((timeModelToCalc, link_types),
13323              transfer_flowAlong.l(timeModelToCalc,linksModel,yearsToCalc,transfer_techs,vintage)
13324              * timeLength(timeModelToCalc)
13325              * transfer_lengthParam(linksModel,link_types,"length")
13326              * (accounting_transferPerLength(indicator,linksModel,transfer_techs,vintage,link_types,"perFlow")
13327                  + accounting_transferPerLength(indicator,linksModel,transfer_techs,vintage,link_types,"perFlowAlong"))
13328   
13329              + transfer_flowAgainst.l(timeModelToCalc,linksModel,yearsToCalc,transfer_techs,vintage)
13330              * timeLength(timeModelToCalc)
13331              * transfer_lengthParam(linksModel,link_types,"length")
13332              * (accounting_transferPerLength(indicator,linksModel,transfer_techs,vintage,link_types,"perFlow")
13333                  + accounting_transferPerLength(indicator,linksModel,transfer_techs,vintage,link_types,"perFlowAgainst"))))
13334   
13335   
13336  * == sources / sinks ==
13337      + sum ((timeModelToCalc,sourcesink_techs(techs),commodity)
13338              $sourcesink_enabled(nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity),
13339          sourcesink_flow.l(timeModelToCalc,nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity)
13340          * timeLength(timeModelToCalc)
13341          * accounting_sourcesinkFlow(indicator,nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity,"perFlow"))
13342      ;
13343   
13344   
13345  * ==== full set of main indicators ====
13346   
13347  indicator_accounting(accNodesModel,accYears,indicator)
13348      $sum((accNodesModel_a,accYears_a,indicator_a)
13349              $compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a), 1)
13350      =
13351      + sum((accNodesModel_a,accYears_a,indicator_a)
13352              $(compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
13353                  and variableIndicators(accNodesModel_a,accYears_a,indicator_a)),
13354          compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
13355          * accounting_indicator.l(accNodesModel_a,accYears_a,indicator_a))
13356   
13357      + sum((accNodesModel_a,accYears_a,indicator_a)
13358              $(compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)),
13359          compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
13360          * (sum((nodesModelToCalc,yearsToCalc,techs)
13361                  $(sameas(accNodesModel_a, nodesModelToCalc)
13362                      and sameas(accYears_a, yearsToCalc)),
13363                  indicator_accounting_detailed(indicator_a,nodesModelToCalc,yearsToCalc,techs))))
13364      ;
13365   
13366  indicator_accounting_comp(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
13367      $compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
13368      =
13369          compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
13370          * accounting_indicator.l(accNodesModel_a,accYears_a,indicator_a)
13371              $variableIndicators(accNodesModel_a,accYears_a,indicator_a)
13372   
13373          + compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
13374          * (sum((nodesModelToCalc,yearsToCalc,techs)
13375                  $(sameas(accNodesModel_a, nodesModelToCalc)
13376                      and sameas(accYears_a, yearsToCalc)),
13377                  indicator_accounting_detailed(indicator_a,nodesModelToCalc,yearsToCalc,techs)))
13378      ;
13379   
13380  indicator_accounting_ref(accNodesModel,accYears,indicator)
13381      $accounting_indicator.l(accNodesModel,accYears,indicator)
13382      = accounting_indicator.l(accNodesModel,accYears,indicator);
13383   
13384  * ==== link-specific indicator accounting ====
13385   
13386  indicator_accounting_links(indicator,nodesModelToCalc,nodesModelToCalc_a,linksModelToCalc,yearsToCalc,techs)
13387      $(transfer_incidenceModel(nodesModelToCalc,linksModelToCalc) < 0
13388          and transfer_incidenceModel(nodesModelToCalc_a,linksModelToCalc) > 0)
13389      =
13390      sum ((transfer_techs(techs),vintage)
13391                  $(transfer_availTech(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
13392                      and accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"useAnnuity") = 0),
13393          transfer_linksBuild.l(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
13394          * accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"perLinkBuild") )
13395   
13396      + sum ((years_a,transfer_techs(techs),vintage)
13397                  $(transfer_availTech(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
13398                      and accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"useAnnuity") = 1
13399                      and years_a.val + accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"amorTime") > yearsToCalc.val
13400                      and years_a.val <= yearsToCalc.val ),
13401          transfer_linksBuild.l(linksModelToCalc,years_a,transfer_techs,vintage)
13402          * accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"perLinkBuild")
13403          * accounting_annuityFactor_transferLink(indicator,linksModelToCalc,transfer_techs,vintage) )
13404   
13405      + sum ((transfer_techs(techs),vintage,link_types)
13406                  $(transfer_availTech(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
13407                      and accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"useAnnuity") = 0 ),
13408          transfer_linksBuild.l(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
13409          * transfer_lengthParam(linksModelToCalc,link_types,"length")
13410          * accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"perLengthBuild") )
13411   
13412      + sum ((years_a,transfer_techs(techs),vintage,link_types)
13413                  $(transfer_availTech(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
13414                      and accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"useAnnuity") = 1
13415                      and years_a.val + accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"amorTime") > yearsToCalc.val
13416                      and years_a.val <= yearsToCalc.val ),
13417          transfer_linksBuild.l(linksModelToCalc,years_a,transfer_techs,vintage)
13418          * transfer_lengthParam(linksModelToCalc,link_types,"length")
13419          * accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"perLengthBuild")
13420          * accounting_annuityFactor_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types) )
13421   
13422      + sum ((transfer_techs(techs),vintage)
13423                  $(transfer_usedTech(linksModelToCalc,yearsToCalc,transfer_techs,vintage)),
13424          transfer_linksDecom.l(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
13425          * accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"perLinkDecom")
13426   
13427          + transfer_linksTotal.l(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
13428          * accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"perLinkTotal")
13429   
13430          + sum (link_types,
13431              transfer_linksDecom.l(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
13432              * transfer_lengthParam(linksModelToCalc,link_types,"length")
13433              * accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"perLengthDecom")
13434   
13435              + transfer_linksTotal.l(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
13436              * transfer_lengthParam(linksModelToCalc,link_types,"length")
13437              * accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"perLengthTotal"))
13438   
13439          + sum (timeModelToCalc,
13440              transfer_flowAlong.l(timeModelToCalc,linksModelToCalc,yearsToCalc,transfer_techs,vintage)
13441              * timeLength(timeModelToCalc)
13442              * ( accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"perFlow")
13443                  + accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"perFlowAlong"))
13444   
13445              + transfer_flowAgainst.l(timeModelToCalc,linksModelToCalc,yearsToCalc,transfer_techs,vintage)
13446              * timeLength(timeModelToCalc)
13447              * ( accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"perFlow")
13448                  + accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"perFlowAgainst")))
13449   
13450          + sum ((timeModelToCalc, link_types),
13451              transfer_flowAlong.l(timeModelToCalc,linksModelToCalc,yearsToCalc,transfer_techs,vintage)
13452              * timeLength(timeModelToCalc)
13453              * transfer_lengthParam(linksModelToCalc,link_types,"length")
13454              * (accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"perFlow")
13455                  + accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"perFlowAlong"))
13456   
13457              + transfer_flowAgainst.l(timeModelToCalc,linksModelToCalc,yearsToCalc,transfer_techs,vintage)
13458              * timeLength(timeModelToCalc)
13459              * transfer_lengthParam(linksModelToCalc,link_types,"length")
13460              * (accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"perFlow")
13461                  + accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"perFlowAgainst")))
13462      );
13463   
13464   
13465  * == converter capacities ==
13466   
13467  converter_ratedInput(converter_techs,vintage,commodity)
13468      $(converter_techParam(converter_techs,vintage,"lifeTime") > 0)
13469      = smin(activity$converter_usedAct(converter_techs,vintage,activity),
13470              converter_coefficient(converter_techs,vintage,activity,commodity,"coefficient"));
13471  converter_ratedInput(converter_techs,vintage,commodity)
13472      $(converter_ratedInput(converter_techs,vintage,commodity) > 0)
13473      = 0;
13474   
13475  converter_ratedOutput(converter_techs,vintage,commodity)
13476      $(converter_techParam(converter_techs,vintage,"lifeTime") > 0)
13477      = smax(activity$converter_usedAct(converter_techs,vintage,activity),
13478              converter_coefficient(converter_techs,vintage,activity,commodity,"coefficient"));
13479  converter_ratedOutput(converter_techs,vintage,commodity)
13480      $(converter_ratedOutput(converter_techs,vintage,commodity) < 0)
13481      = 0;
13482   
13483  converter_ratedOutput_min(nodesModelToCalc,years,converter_techs(techs),commodity)
13484      $sum(vintage$(converter_usedTech(nodesModelToCalc,years,converter_techs,vintage)
13485          and converter_ratedOutput(converter_techs,vintage,commodity)), 1)
13486      = smin(vintage$(converter_usedTech(nodesModelToCalc,years,converter_techs,vintage)
13487              and converter_ratedOutput(converter_techs,vintage,commodity)),
13488          converter_ratedOutput(converter_techs,vintage,commodity));
13489   
13490  converter_ratedOutput_max(nodesModelToCalc,years,converter_techs(techs),commodity)
13491      $sum(vintage$(converter_usedTech(nodesModelToCalc,years,converter_techs,vintage)
13492          and converter_ratedOutput(converter_techs,vintage,commodity)), 1)
13493      = smax(vintage$(converter_usedTech(nodesModelToCalc,years,converter_techs,vintage)
13494              and converter_ratedOutput(converter_techs,vintage,commodity)),
13495          converter_ratedOutput(converter_techs,vintage,commodity));
13496   
13497  converter_units_ext(map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,years),converter_techs(techs),vintage,"build")
13498      = converter_unitsBuild.l(nodesModelToCalc,years,converter_techs,vintage);
13499   
13500  converter_units_ext(map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,years),converter_techs(techs),vintage,"decom")
13501      = converter_unitsDecom.l(nodesModelToCalc,years,converter_techs,vintage);
13502   
13503  converter_units_ext(map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,years),converter_techs(techs),vintage,"total")
13504      = converter_unitsTotal.l(nodesModelToCalc,years,converter_techs,vintage);
13505   
13506  converter_caps_ext(map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,years),converter_techs(techs),vintage,commodity,capType)
13507      $(converter_ratedOutput(converter_techs,vintage,commodity))
13508      = converter_units_ext(accNodesModel,nodesModelToCalc,accYears,years,techs,vintage,capType)
13509          * converter_ratedOutput(converter_techs,vintage,commodity);
13510   
13511  converter_caps_ext(map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,years),converter_techs(techs),vintage,commodity,"lowerLimit")
13512      $(converter_usedTech(nodesModelToCalc,years,converter_techs,vintage)
13513          and converter_capacityParam(nodesModelToCalc,years,converter_techs,"unitsLowerLimit") > 0
13514          and converter_ratedOutput_min(nodesModelToCalc,years,converter_techs,commodity))
13515      = converter_capacityParam(nodesModelToCalc,years,converter_techs,"unitsLowerLimit")
13516          * converter_ratedOutput_min(nodesModelToCalc,years,converter_techs,commodity);
13517   
13518  converter_caps_ext(map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,years),converter_techs(techs),vintage,commodity,"upperLimit")
13519      $(converter_usedTech(nodesModelToCalc,years,converter_techs,vintage)
13520          and converter_capacityParam(nodesModelToCalc,years,converter_techs,"unitsUpperLimit") < inf
13521          and converter_ratedOutput_min(nodesModelToCalc,years,converter_techs,commodity))
13522      = converter_capacityParam(nodesModelToCalc,years,converter_techs,"unitsUpperLimit")
13523          * converter_ratedOutput_max(nodesModelToCalc,years,converter_techs,commodity);
13524   
13525  converter_caps(accNodesModel,accYears,converter_techs(techs),commodity,capType)
13526      = sum((nodesModelToCalc,years,vintage)
13527              $(map_accNodesPostCalc(accNodesModel,nodesModelToCalc)
13528                  and map_accYearsPostCalc(accYears,years)),
13529          converter_caps_ext(accNodesModel,nodesModelToCalc,accYears,years,converter_techs,vintage,commodity,capType));
13530  option clear = converter_caps_ext;
13531   
13532  converter_units(accNodesModel,accYears,converter_techs(techs),vintage,capType)
13533      = sum((nodesModelToCalc,years)
13534              $(map_accNodesPostCalc(accNodesModel,nodesModelToCalc)
13535                  and map_accYearsPostCalc(accYears,years)),
13536          converter_units_ext(accNodesModel,nodesModelToCalc,accYears,years,converter_techs,vintage,capType));
13537  option clear = converter_units_ext;
13538   
13539   
13540  * ==== transfer capacities ====
13541   
13542  max_transfer_coefficient(transfer_techs(techs),commodity)
13543          $(smax(vintage, transfer_coefficient(transfer_techs,vintage,commodity,"coefficient")) > 0)
13544          = smax(vintage, transfer_coefficient(transfer_techs,vintage,commodity,"coefficient"));
13545   
13546  min_transfer_coefficient(transfer_techs(techs),commodity)
13547          $(smin(vintage, transfer_coefficient(transfer_techs,vintage,commodity,"coefficient")) > 0)
13548          = smin(vintage, transfer_coefficient(transfer_techs,vintage,commodity,"coefficient"));
13549   
13550  transfer_usedStartEnd(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,years,transfer_techs)
13551      $(transfer_incidenceModel(nodesModelToCalc_start,linksModel) < 0
13552          and transfer_incidenceModel(nodesModelToCalc_end,linksModel) > 0
13553          and sum(vintage$transfer_usedTech(linksModel,years,transfer_techs,vintage), 1))
13554      = yes;
13555   
13556  transfer_links(linksModel,years,transfer_techs,vintage,"build")
13557      = transfer_linksBuild.l(linksModel,years,transfer_techs,vintage);
13558   
13559  transfer_links(linksModel,years,transfer_techs,vintage,"decom")
13560      = transfer_linksDecom.l(linksModel,years,transfer_techs,vintage);
13561   
13562  transfer_links(linksModel,years,transfer_techs,vintage,"total")
13563      = transfer_linksTotal.l(linksModel,years,transfer_techs,vintage);
13564   
13565  transfer_caps(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,years,transfer_techs(techs),commodity,capType)
13566      $(transfer_usedStartEnd(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,years,transfer_techs)
13567          and sum(vintage$(transfer_usedTech(linksModel,years,transfer_techs,vintage)
13568                              and transfer_coefficient(transfer_techs,vintage,commodity,"coefficient")), 1))
13569      = sum(vintage,
13570          transfer_links(linksModel,years,transfer_techs,vintage,capType)
13571          * transfer_coefficient(transfer_techs,vintage,commodity,"coefficient"));
13572   
13573  transfer_caps(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,years,transfer_techs(techs),commodity,"lowerLimit")
13574      $(transfer_usedStartEnd(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,years,transfer_techs)
13575          and sum(vintage$(transfer_usedTech(linksModel,years,transfer_techs,vintage)
13576                              and transfer_coefficient(transfer_techs,vintage,commodity,"coefficient")), 1))
13577      = transfer_linksParam(linksModel,years,transfer_techs,'linksLowerLimit')
13578          * min_transfer_coefficient(transfer_techs,commodity);
13579   
13580  transfer_caps(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,years,transfer_techs(techs),commodity,"upperLimit")
13581      $(transfer_usedStartEnd(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,years,transfer_techs)
13582          and sum(vintage$(transfer_usedTech(linksModel,years,transfer_techs,vintage)
13583                              and transfer_coefficient(transfer_techs,vintage,commodity,"coefficient")), 1))
13584      = transfer_linksParam(linksModel,years,transfer_techs,'linksUpperLimit')
13585          * max_transfer_coefficient(transfer_techs,commodity);
13586   
13587   
13588  * ==== transfer flows ====
13589   
13590  transfer_flows(timeModelToCalc,nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs(techs),commodity)
13591      $transfer_usedStartEnd(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs)
13592      = sum(vintage,
13593          ( transfer_flowAlong.l(timeModelToCalc,linksModel,yearsToCalc,transfer_techs,vintage)
13594              - transfer_flowAgainst.l(timeModelToCalc,linksModel,yearsToCalc,transfer_techs,vintage) )
13595          * timeLength(timeModelToCalc)
13596          * transfer_coefficient(transfer_techs,vintage,commodity,"coefficient"));
13597   
13598  transfer_flows_annual(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs(techs),commodity,"netto")
13599      $transfer_usedStartEnd(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs)
13600      = sum(timeModelToCalc,
13601          transfer_flows(timeModelToCalc,nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs,commodity));
13602   
13603  transfer_flows_annual(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs(techs),commodity,"positive")
13604      $transfer_usedStartEnd(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs)
13605      = sum(timeModelToCalc
13606              $(transfer_flows(timeModelToCalc,nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs,commodity) > 0),
13607          transfer_flows(timeModelToCalc,nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs,commodity));
13608   
13609  transfer_flows_annual(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs(techs),commodity,"negative")
13610      $transfer_usedStartEnd(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs)
13611      = sum(timeModelToCalc
13612              $(transfer_flows(timeModelToCalc,nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs,commodity) < 0),
13613          transfer_flows(timeModelToCalc,nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs,commodity));
13614   
13615  transfer_flows_annual(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs(techs),commodity,"brutto")
13616      $transfer_usedStartEnd(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs)
13617      = transfer_flows_annual(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs,commodity,"positive")
13618          - transfer_flows_annual(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs,commodity,"negative");
13619   
13620  transfer_flows_annual(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs(techs),commodity,"flh")
13621      $(transfer_usedStartEnd(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs)
13622          and transfer_flows_annual(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs,commodity,"brutto") > 0
13623          and transfer_caps(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs,commodity,"total") > 0)
13624      = transfer_flows_annual(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs,commodity,"brutto")
13625          / transfer_caps(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs,commodity,"total");
13626   
13627  transfer_losses(timeModelToCalc,nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs(techs),commodity)
13628      $(transfer_usedStartEnd(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs)
13629          and (sum(vintage$transfer_coefPerFlow(transfer_techs,vintage,commodity,"coefPerFlow"), 1)
13630              or sum((vintage, link_types)$transfer_coefPerLength(transfer_techs,vintage,commodity,link_types,"coefPerLength"), 1)))
13631      = -1 * abs(sum(vintage,
13632          ( transfer_flowAlong.l(timeModelToCalc,linksModel,yearsToCalc,transfer_techs,vintage)
13633              - transfer_flowAgainst.l(timeModelToCalc,linksModel,yearsToCalc,transfer_techs,vintage) )
13634          * ( transfer_coefPerFlow(transfer_techs,vintage,commodity,"coefPerFlow")
13635              + sum(link_types,
13636                  transfer_coefPerLength(transfer_techs,vintage,commodity,link_types,"coefPerLength")
13637                  * transfer_lengthParam(linksModel,link_types,"length")))))
13638          * timeLength(timeModelToCalc);
13639   
13640  transfer_losses_annual(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs(techs),commodity,"netto")
13641      $(transfer_usedStartEnd(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs)
13642          and (sum(vintage$transfer_coefPerFlow(transfer_techs,vintage,commodity,"coefPerFlow"), 1)
13643              or sum((vintage, link_types)$transfer_coefPerLength(transfer_techs,vintage,commodity,link_types,"coefPerLength"), 1)))
13644      = sum(timeModelToCalc,
13645          transfer_losses(timeModelToCalc,nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs,commodity));
13646   
13647   
13648  * ==== storage capacities ====
13649   
13650  storage_size_max(nodesModelToCalc,years,storage_techs(techs),commodity)
13651      $sum(vintage$(storage_usedTech(nodesModelToCalc,years,storage_techs,vintage)
13652              and storage_usedCom(storage_techs,vintage,commodity)
13653              and storage_sizeParam(storage_techs,vintage,commodity,"size")), 1)
13654      = smax(vintage$(storage_usedTech(nodesModelToCalc,years,storage_techs,vintage)
13655              and storage_usedCom(storage_techs,vintage,commodity)
13656              and storage_sizeParam(storage_techs,vintage,commodity,"size")),
13657          storage_sizeParam(storage_techs,vintage,commodity,"size"));
13658   
13659  storage_size_min(nodesModelToCalc,years,storage_techs(techs),commodity)
13660      $sum(vintage$(storage_usedTech(nodesModelToCalc,years,storage_techs,vintage)
13661              and storage_usedCom(storage_techs,vintage,commodity)
13662              and storage_sizeParam(storage_techs,vintage,commodity,"size")), 1)
13663      = smin(vintage$(storage_usedTech(nodesModelToCalc,years,storage_techs,vintage)
13664              and storage_usedCom(storage_techs,vintage,commodity)
13665              and storage_sizeParam(storage_techs,vintage,commodity,"size")),
13666          storage_sizeParam(storage_techs,vintage,commodity,"size"));
13667   
13668  storage_units_ext(map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,years),storage_techs(techs),vintage,"build")
13669      $storage_usedTech(nodesModelToCalc,years,storage_techs,vintage)
13670      = storage_unitsBuild.l(nodesModelToCalc,years,storage_techs,vintage);
13671   
13672  storage_units_ext(map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,years),storage_techs(techs),vintage,"decom")
13673      $storage_usedTech(nodesModelToCalc,years,storage_techs,vintage)
13674      = storage_unitsDecom.l(nodesModelToCalc,years,storage_techs,vintage);
13675   
13676  storage_units_ext(map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,years),storage_techs(techs),vintage,"total")
13677      $storage_usedTech(nodesModelToCalc,years,storage_techs,vintage)
13678      = storage_unitsTotal.l(nodesModelToCalc,years,storage_techs,vintage);
13679   
13680  storage_caps_ext(map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,years),storage_techs(techs),vintage,commodity,capType)
13681      $storage_sizeParam(storage_techs,vintage,commodity,"size")
13682      = storage_units_ext(accNodesModel,nodesModelToCalc,accYears,years,storage_techs,vintage,capType)
13683          * storage_sizeParam(storage_techs,vintage,commodity,"size");
13684   
13685  storage_caps_ext(map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,years),storage_techs(techs),vintage,commodity,"lowerLimit")
13686      $(storage_usedTech(nodesModelToCalc,years,storage_techs,vintage)
13687          and storage_reservoirParam(nodesModelToCalc,years,storage_techs,"unitsLowerLimit") > 0
13688          and storage_size_min(nodesModelToCalc,years,storage_techs,commodity))
13689      = storage_reservoirParam(nodesModelToCalc,years,storage_techs,"unitsLowerLimit")
13690          * storage_size_min(nodesModelToCalc,years,storage_techs,commodity);
13691   
13692  storage_caps_ext(map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,years),storage_techs(techs),vintage,commodity,"upperLimit")
13693      $(storage_usedTech(nodesModelToCalc,years,storage_techs,vintage)
13694          and storage_reservoirParam(nodesModelToCalc,years,storage_techs,"unitsUpperLimit") < inf
13695          and storage_size_max(nodesModelToCalc,years,storage_techs,commodity))
13696      = storage_reservoirParam(nodesModelToCalc,years,storage_techs,"unitsUpperLimit")
13697          * storage_size_max(nodesModelToCalc,years,storage_techs,commodity);
13698   
13699  storage_caps_ext(map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,years),storage_techs(techs),vintage,commodity,"total_degraded")
13700      $(storage_usedCom(storage_techs,vintage,commodity)
13701          and (storage_techParam(storage_techs,vintage,"annualDegradation") > 0
13702               or storage_techParam(storage_techs,vintage,"usageDegradation")))
13703      = sum((degradation_states,yearsCom), (storage_degradationParam(storage_techs,vintage,degradation_states,"remainingCapacity")
13704                                      - (years.val - yearsCom.val) * storage_techParam(storage_techs,vintage,"annualDegradation"))
13705                                      * storage_unitsStateTracker.l(nodesModelToCalc,years,yearsCom,storage_techs,vintage,degradation_states)
13706                                      * storage_sizeParam(storage_techs,vintage,commodity,"size"));
13707   
13708  storage_caps(accNodesModel,accYears,storage_techs(techs),commodity,capType)
13709      = sum((nodesModelToCalc,years,vintage)
13710              $(map_accNodesPostCalc(accNodesModel,nodesModelToCalc)
13711                  and map_accYearsPostCalc(accYears,years)),
13712          storage_caps_ext(accNodesModel,nodesModelToCalc,accYears,years,storage_techs,vintage,commodity,capType));
13713  option clear = storage_caps_ext;
13714   
13715  storage_units(accNodesModel,accYears,storage_techs(techs),vintage,capType)
13716      = sum((nodesModelToCalc,years)
13717              $(map_accNodesPostCalc(accNodesModel,nodesModelToCalc)
13718                  and map_accYearsPostCalc(accYears,years)),
13719          storage_units_ext(accNodesModel,nodesModelToCalc,accYears,years,storage_techs,vintage,capType));
13720  option clear = storage_units_ext;
13721   
13722   
13723  * ==== storage levels and flows ====
13724   
13725  storage_flows_ext(timeModelToCalc,map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,yearsToCalc),storage_techs(techs),vintage,commodity)
13726      $(storage_usedTech(nodesModelToCalc,yearsToCalc,storage_techs,vintage) and balance_techComm(storage_techs,commodity))
13727      = storage_level.l(timeModelToCalc,nodesModelToCalc,yearsToCalc,storage_techs,vintage,commodity)
13728          - storage_level.l(timeModelToCalc--1,nodesModelToCalc,yearsToCalc,storage_techs,vintage,commodity)
13730      + storage_losses.l(timeModelToCalc,nodesModelToCalc,yearsToCalc,storage_techs,vintage,commodity)
13731          * timeLength(timeModelToCalc)
13733      ;
13734   
13735  storage_flows(timeModelToCalc,accNodesModel,accYears,storage_techs(techs),commodity)
13736      = sum((nodesModelToCalc,yearsToCalc,vintage)
13737              $(storage_usedTech(nodesModelToCalc,yearsToCalc,storage_techs,vintage) and balance_techComm(storage_techs,commodity)),
13738          storage_flows_ext(timeModelToCalc,accNodesModel,nodesModelToCalc,accYears,yearsToCalc,storage_techs,vintage,commodity));
13739  option clear = storage_flows_ext;
13740   
13741  storage_level_out_ext(timeModelToCalc,map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,yearsToCalc),storage_techs(techs),vintage,commodity)
13742      $(storage_usedTech(nodesModelToCalc,yearsToCalc,storage_techs,vintage) and balance_techComm(storage_techs,commodity))
13743      = storage_level.l(timeModelToCalc,nodesModelToCalc,yearsToCalc,storage_techs,vintage,commodity);
13744   
13745  storage_level_out(timeModelToCalc,accNodesModel,accYears,storage_techs(techs),commodity)
13746      = sum((nodesModelToCalc,yearsToCalc,vintage)
13747              $(storage_usedTech(nodesModelToCalc,yearsToCalc,storage_techs,vintage) and balance_techComm(storage_techs,commodity)),
13748          storage_level_out_ext(timeModelToCalc,accNodesModel,nodesModelToCalc,accYears,yearsToCalc,storage_techs,vintage,commodity));
13749  option clear = storage_level_out_ext;
13750   
13751  storage_flows_annual(accNodesModel,accYears,storage_techs(techs),commodity,"netto")
13752      = sum(timeModelToCalc,
13753          storage_flows(timeModelToCalc,accNodesModel,accYears,storage_techs,commodity));
13754   
13755  storage_flows_annual(accNodesModel,accYears,storage_techs(techs),commodity,"positive")
13756      = sum(timeModelToCalc
13757              $(storage_flows(timeModelToCalc,accNodesModel,accYears,storage_techs,commodity) > 0),
13758          storage_flows(timeModelToCalc,accNodesModel,accYears,storage_techs,commodity));
13759   
13760  storage_flows_annual(accNodesModel,accYears,storage_techs(techs),commodity,"negative")
13761      = sum(timeModelToCalc
13762              $(storage_flows(timeModelToCalc,accNodesModel,accYears,storage_techs,commodity) < 0),
13763          storage_flows(timeModelToCalc,accNodesModel,accYears,storage_techs,commodity));
13764   
13765  storage_flows_annual(accNodesModel,accYears,storage_techs(techs),commodity,"brutto")
13766      = storage_flows_annual(accNodesModel,accYears,storage_techs,commodity,"positive")
13767          + storage_flows_annual(accNodesModel,accYears,storage_techs,commodity,"negative");
13768   
13769  storage_flows_annual(accNodesModel,accYears,storage_techs(techs),commodity,"flh")
13770      $(storage_flows_annual(accNodesModel,accYears,storage_techs,commodity,"brutto") > 0
13771          and storage_caps(accNodesModel,accYears,storage_techs,commodity,"total") > 0)
13772      = storage_flows_annual(accNodesModel,accYears,storage_techs,commodity,"brutto")
13773          / storage_caps(accNodesModel,accYears,storage_techs,commodity,"total");
13774   
13775  storage_losses_out(timeModelToCalc,accNodesModel,accYears,storage_techs(techs),commodity)
13776      = sum((nodesModelToCalc,yearsToCalc,vintage)
13777              $(storage_losses.l(timeModelToCalc,nodesModelToCalc,yearsToCalc,storage_techs,vintage,commodity)
13778                  and map_accNodesPostCalc(accNodesModel,nodesModelToCalc)
13779                  and map_accYearsPostCalc(accYears,yearsToCalc)),
13780          storage_losses.l(timeModelToCalc,nodesModelToCalc,yearsToCalc,storage_techs,vintage,commodity)
13781          * timeLength(timeModelToCalc));
13782   
13783  storage_losses_annual(accNodesModel,accYears,storage_techs(techs),commodity,"netto")
13784      = sum(timeModelToCalc,
13785          storage_losses_out(timeModelToCalc,accNodesModel,accYears,storage_techs,commodity));
13786   
13787   
13788  * == commodity balance ==
13789   
13790  commodity_balance_ext(timeModelToCalc,map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,yearsToCalc),converter_techs(techs),vintage,commodity)
13791      $(converter_usedTech(nodesModelToCalc,yearsToCalc,converter_techs,vintage)
13792          and balance_usedConverter(nodesModelToCalc,yearsToCalc,commodity))
13793      = sum((activity)
13794              $(converter_coefficientProfile(timeModelToCalc,nodesModelToCalc,yearsToCalc,converter_techs,vintage,activity,commodity)),
13795          converter_activity.l(timeModelToCalc,nodesModelToCalc,yearsToCalc,converter_techs,vintage,activity)
13796              * timeLength(timeModelToCalc)
13797              * converter_coefficientProfile(timeModelToCalc,nodesModelToCalc,yearsToCalc,converter_techs,vintage,activity,commodity)
13798          + converter_unitsUsingActivity_MIP.l(timeModelToCalc,nodesModelToCalc,yearsToCalc,converter_techs,vintage,activity)
13799              * timeLength(timeModelToCalc)
13800              * converter_coefficient(converter_techs,vintage,activity,commodity,"constant"));
13801   
13802  commodity_balance_ext(timeModelToCalc,map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,yearsToCalc),storage_techs(techs),vintage,commodity)
13803      $(storage_usedTech(nodesModelToCalc,yearsToCalc,storage_techs,vintage)
13804          and storage_sizeParam(storage_techs,vintage,commodity,"size"))
13805      = commodity_balance_ext(timeModelToCalc,accNodesModel,nodesModelToCalc,accYears,yearsToCalc,storage_techs,vintage,commodity)
13806      + storage_level.l(timeModelToCalc--1,nodesModelToCalc,yearsToCalc,storage_techs,vintage,commodity)
13807          - storage_level.l(timeModelToCalc,nodesModelToCalc,yearsToCalc,storage_techs,vintage,commodity)
13808      - storage_losses.l(timeModelToCalc,nodesModelToCalc,yearsToCalc,storage_techs,vintage,commodity)
13809      * timeLength(timeModelToCalc);
13810   
13811  commodity_balance_ext(timeModelToCalc,map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,yearsToCalc),sourcesink_techs(techs),vintage,commodity)
13812      $(sourcesink_enabled(nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity)
13813          and sameas(yearsToCalc,vintage))
13814      = commodity_balance_ext(timeModelToCalc,accNodesModel,nodesModelToCalc,accYears,yearsToCalc,sourcesink_techs,vintage,commodity)
13815      + sourcesink_flow.l(timeModelToCalc,nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity)
13816      * timeLength(timeModelToCalc);
13817   
13818  commodity_balance_ext(timeModelToCalc,map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,yearsToCalc),transfer_techs(techs),vintage,commodity)
13819      $sum((linksModel)
13820          $(transfer_incidenceModel(nodesModelToCalc,linksModel)
13821                  and transfer_usedTech(linksModel,yearsToCalc,transfer_techs,vintage)
13822                  and transfer_coefficient(transfer_techs,vintage,commodity,"coefficient")), 1)
13823      = commodity_balance_ext(timeModelToCalc,accNodesModel,nodesModelToCalc,accYears,yearsToCalc,transfer_techs,vintage,commodity)
13824      + sum((linksModel)
13825              $(transfer_incidenceModel(nodesModelToCalc,linksModel)
13826                  and transfer_usedTech(linksModel,yearsToCalc,transfer_techs,vintage)
13827                  and transfer_coefficient(transfer_techs,vintage,commodity,"coefficient")),
13828   
13829              (transfer_flowAlong.l(timeModelToCalc,linksModel,yearsToCalc,transfer_techs,vintage)
13830                      $(transfer_incidenceModel(nodesModelToCalc,linksModel) > 0)
13831                + transfer_flowAgainst.l(timeModelToCalc,linksModel,yearsToCalc,transfer_techs,vintage)
13832                      $(transfer_incidenceModel(nodesModelToCalc,linksModel) < 0))
13833              * timeLength(timeModelToCalc)
13834              * transfer_coefficient(transfer_techs,vintage,commodity,"coefficient")
13835   
13836              - (transfer_flowAlong.l(timeModelToCalc,linksModel,yearsToCalc,transfer_techs,vintage)
13837                      $(transfer_incidenceModel(nodesModelToCalc,linksModel) < 0)
13838                + transfer_flowAgainst.l(timeModelToCalc,linksModel,yearsToCalc,transfer_techs,vintage)
13839                      $(transfer_incidenceModel(nodesModelToCalc,linksModel) > 0))
13840              * timeLength(timeModelToCalc)
13841              * transfer_coefficient(transfer_techs,vintage,commodity,"coefficient")
13842   
13843              + 0.5 * ((transfer_flowAlong.l(timeModelToCalc,linksModel,yearsToCalc,transfer_techs,vintage)
13844                          $(transfer_incidenceModel(nodesModelToCalc,linksModel) <> 0)
13845                      + transfer_flowAgainst.l(timeModelToCalc,linksModel,yearsToCalc,transfer_techs,vintage)
13846                          $(transfer_incidenceModel(nodesModelToCalc,linksModel) <> 0))
13847                      * timeLength(timeModelToCalc)
13848                      * ( transfer_coefPerFlow(transfer_techs,vintage,commodity,"coefPerFlow")
13849                          + sum(link_types,
13850                              transfer_coefPerLength(transfer_techs,vintage,commodity,link_types,"coefPerLength")
13851                              * transfer_lengthParam(linksModel,link_types,"length")))))
13852      ;
13853   
13854  commodity_balance(timeModelToCalc,accNodesModel,accYears,balance_techComm(techs,commodity))
13855      = sum((nodesModelToCalc,yearsToCalc,vintage)
13856              $(commodity_balance_ext(timeModelToCalc,accNodesModel,nodesModelToCalc,accYears,yearsToCalc,techs,vintage,commodity)
13857                  and map_accNodesPostCalc(accNodesModel,nodesModelToCalc)
13858                  and map_accYearsPostCalc(accYears,yearsToCalc)),
13859          commodity_balance_ext(timeModelToCalc,accNodesModel,nodesModelToCalc,accYears,yearsToCalc,techs,vintage,commodity));
13860  option clear = commodity_balance_ext;
13861   
13862   
13863  * ==== annual commodity sums ====
13864   
13865  commodity_balance_annual(accNodesModel,accYears,techs,commodity,"netto")
13866      = sum(timeModelToCalc,
13867          commodity_balance(timeModelToCalc,accNodesModel,accYears,techs,commodity));
13868   
13869  commodity_balance_annual(accNodesModel,accYears,techs,commodity,"positive")
13870      = sum(timeModelToCalc
13871              $(commodity_balance(timeModelToCalc,accNodesModel,accYears,techs,commodity) > 0),
13872          commodity_balance(timeModelToCalc,accNodesModel,accYears,techs,commodity));
13873   
13874  commodity_balance_annual(accNodesModel,accYears,techs,commodity,"negative")
13875      = sum(timeModelToCalc
13876              $(commodity_balance(timeModelToCalc,accNodesModel,accYears,techs,commodity) < 0),
13877          commodity_balance(timeModelToCalc,accNodesModel,accYears,techs,commodity));
13878   
13879  commodity_balance_annual(accNodesModel,accYears,techs,commodity,"brutto")
13880      = commodity_balance_annual(accNodesModel,accYears,techs,commodity,"positive")
13881          - commodity_balance_annual(accNodesModel,accYears,techs,commodity,"negative");
13882   
13883  commodity_balance_annual(accNodesModel,accYears,techs,commodity,"flh")
13884      $(commodity_balance_annual(accNodesModel,accYears,techs,commodity,"brutto") > 0
13885          and converter_caps(accNodesModel,accYears,techs,commodity,"total") > 0 )
13886      = commodity_balance_annual(accNodesModel,accYears,techs,commodity,"brutto")
13887          / converter_caps(accNodesModel,accYears,techs,commodity,"total");
13888   
13889   
13890  * ==== marginal information ====
13891   
13892  marginals_balance(timeModelToCalc,nodesModelToCalc,yearsToCalc,commodity)
13893    $balance_usedBalance(nodesModelToCalc,yearsToCalc,commodity)
13894    =
13895    Eq_balance_commodities.m(timeModelToCalc,nodesModelToCalc,yearsToCalc,commodity);
13896   
13897  marginals_sourcesink_profile(timeModelToCalc,nodesModelToCalc,yearsToCalc,sourcesink_techs(techs),commodity)
13898      $( sourcesink_flow.m(timeModelToCalc,nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity) <> 0 )
13899      =
13900      sourcesink_flow.m(timeModelToCalc,nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity);
13901   
13902  marginals_sourcesink_sum(nodesModelToCalc,yearsToCalc,sourcesink_techs(techs),commodity)
13903      $( ( Eq_sourcesink_useLowerSum.m(nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity)
13904          + Eq_sourcesink_useUpperSum.m(nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity)
13905          + Eq_sourcesink_useFixedSum.m(nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity) ) <> eps )
13906      =
13907      ( Eq_sourcesink_useLowerSum.m(nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity)
13908      + Eq_sourcesink_useUpperSum.m(nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity)
13909      + Eq_sourcesink_useFixedSum.m(nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity) );
13910   
13911  marginals_indicator_bounds(accNodesModel,accYears,indicator)
13912      $( accounting_indicator.m(accNodesModel,accYears,indicator) <> 0 )
13913      =
13914      accounting_indicator.m(accNodesModel,accYears,indicator);
13915   
13916   
13917  * ==== R2A postcalc information ====
13918   
13920   
13921   
13922  * ==== round profiles to reduce size of gdx ====
13923   
13925  commodity_balance(timeModelToCalc,accNodesModel,accYears,techs,commodity)
13926      $commodity_balance(timeModelToCalc,accNodesModel,accYears,techs,commodity)
13927      = round(commodity_balance(timeModelToCalc,accNodesModel,accYears,techs,commodity), 6);
13928   
13929  transfer_flows(timeModelToCalc,nodesModelToCalc,nodesModelToCalc_a,linksModel,yearsToCalc,transfer_techs,commodity)
13930      $transfer_flows(timeModelToCalc,nodesModelToCalc,nodesModelToCalc_a,linksModel,yearsToCalc,transfer_techs,commodity)
13931      = round(transfer_flows(timeModelToCalc,nodesModelToCalc,nodesModelToCalc_a,linksModel,yearsToCalc,transfer_techs,commodity), 6);
13932   
13933  transfer_losses(timeModelToCalc,nodesModelToCalc,nodesModelToCalc_a,linksModel,yearsToCalc,transfer_techs,commodity)
13934      $transfer_losses(timeModelToCalc,nodesModelToCalc,nodesModelToCalc_a,linksModel,yearsToCalc,transfer_techs,commodity)
13935      = round(transfer_losses(timeModelToCalc,nodesModelToCalc,nodesModelToCalc_a,linksModel,yearsToCalc,transfer_techs,commodity), 6);
13936   
13937  storage_flows(timeModelToCalc,accNodesModel,accYears,storage_techs,commodity)
13938      $storage_flows(timeModelToCalc,accNodesModel,accYears,storage_techs,commodity)
13939      = round(storage_flows(timeModelToCalc,accNodesModel,accYears,storage_techs,commodity), 6);
13940   
13941  storage_level_out(timeModelToCalc,accNodesModel,accYears,storage_techs,commodity)
13942      $storage_level_out(timeModelToCalc,accNodesModel,accYears,storage_techs,commodity)
13943      = round(storage_level_out(timeModelToCalc,accNodesModel,accYears,storage_techs,commodity), 6);
13944   
13945  marginals_balance(timeModelToCalc,nodesModelToCalc,yearsToCalc,commodity)
13946      $marginals_balance(timeModelToCalc,nodesModelToCalc,yearsToCalc,commodity)
13947      = round(marginals_balance(timeModelToCalc,nodesModelToCalc,yearsToCalc,commodity), 6);
13948   
13949  marginals_sourcesink_profile(timeModelToCalc,nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity)
13950      $marginals_sourcesink_profile(timeModelToCalc,nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity)
13951      = round(marginals_sourcesink_profile(timeModelToCalc,nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity), 6);
13953   
INCLUDE    C:\Local\REMix\framework\remix\framework\model\source\postcalc\writegdx.gms
13956  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
13957  * SPDX-License-Identifier: BSD-3-Clause
13958   
13961   
13962  execute_unload "C:\Local\REMix\remix_nz\output\will\02-battery-overnight_2020-2035-2050\result\02-battery-overnight_2020-2035-2050.gdx"
13963      metadata
13964      timeModel
13965      timeModelToCalc
13966      nodesModel
13967      linksModel
13968      indicator
13969      commodity
13970      techs
13971      accNodesModel
13972      accYears
13973   
13974      map_nodesModel
13975      map_linksModel
13976      map_nodesAccounting
13977   
13978      indicator_accounting
13979      indicator_accounting_ref
13980      indicator_accounting_comp
13981      indicator_accounting_detailed
13982      indicator_accounting_links
13983   
13984      converter_caps
13985      converter_units
13987   
13988      transfer_caps
13989      transfer_links
13990      transfer_flows
13991      transfer_flows_annual
13992      transfer_losses
13993      transfer_losses_annual
13994   
13995      storage_caps
13996      storage_units
13997      storage_flows
13998      storage_level_out
13999      storage_flows_annual
14000      storage_losses_out
14001      storage_losses_annual
14003   
14004      commodity_balance
14005      commodity_balance_annual
14006   
14007      marginals_balance
14008      marginals_sourcesink_profile
14009      marginals_sourcesink_sum
14010      marginals_indicator_bounds
14011   
14013      ;
GAMS 40.4.0  d540b52e Oct 3, 2022           WEX-WEI x86 64bit/MS Windows - 03/08/24 20:08:10 Page 2
G e n e r a l   A l g e b r a i c   M o d e l i n g   S y s t e m
Include File Summary


   SEQ   GLOBAL TYPE      PARENT   LOCAL  FILENAME

     1        1 INPUT          0       0  C:\Local\REMix\framework\remix\framework\model\run_remix.gms
     2       13 IF DEXIST      1      13  C:\Local\REMix\remix_nz\output\will\02-battery-overnight_2020-2035-2050\data\
     3       16 INCLUDE        1      16  .C:\Local\REMix\framework\remix\framework\model\source\metadata.gms
     4       25 CALL           3       9  .printf "remix_version \"0.9.7\"\n" > c:\Local\REMix\remix_nz\process\225a\\metadata
     5       26 CALL           3      10  .printf "gams_version \"40.4.0\"\n" >> c:\Local\REMix\remix_nz\process\225a\\metadata
     6       27 CALL           3      11  .printf "timestamp \"03/08/24 20:08:10\"\n" >> c:\Local\REMix\remix_nz\process\225a\\metadata
     7       29 CALL           3      13  .printf "framework_path " >> c:\Local\REMix\remix_nz\process\225a\\metadata
     8       31 CALL           3      15  .cd C:\Local\REMix\framework\remix\framework\model\source && cd| sed "s/^/\"/;s/$/\"/" >> c:\Local\REMix\remix_nz\process\225a\\metadata
     9       33 CALL           3      19  .printf "\n" >> c:\Local\REMix\remix_nz\process\225a\\metadata
    10       34 CALL           3      20  .printf "framework_hash " >> c:\Local\REMix\remix_nz\process\225a\\metadata
    11       36 CALL           3      22  .cd C:\Local\REMix\framework\remix\framework\model\source && git rev-parse HEAD >nul 2>&1 && git rev-parse HEAD >> c:\Local\REMix\remix_nz\process\225a\\metadata
    12       38 CALL           3      26  .printf "\n" >> c:\Local\REMix\remix_nz\process\225a\\metadata
    13       39 CALL           3      27  .printf "framework_branch " >> c:\Local\REMix\remix_nz\process\225a\\metadata
    14       41 CALL           3      29  .cd C:\Local\REMix\framework\remix\framework\model\source && git rev-parse --abbrev-ref HEAD >nul 2>&1 && git rev-parse --abbrev-ref HEAD | sed "s/^/\"/;s/$/\"/" >> c:\Local\REMix\remix_nz\process\225a\\metadata
    15       43 CALL           3      33  .printf "\n" >> c:\Local\REMix\remix_nz\process\225a\\metadata
    16       45 CALL           3      35  .printf "project_path " >> c:\Local\REMix\remix_nz\process\225a\\metadata
    17       47 CALL           3      37  .cd C:\Local\REMix\remix_nz\output\will\02-battery-overnight_2020-2035-2050\data\./ && cd| sed "s/^/\"/;s/$/\"/" >> c:\Local\REMix\remix_nz\process\225a\\metadata
    18       49 CALL           3      41  .printf "\n" >> c:\Local\REMix\remix_nz\process\225a\\metadata
    19       50 CALL           3      42  .printf "project_hash " >> c:\Local\REMix\remix_nz\process\225a\\metadata
    20       52 CALL           3      44  .cd C:\Local\REMix\remix_nz\output\will\02-battery-overnight_2020-2035-2050\data\./ && git rev-parse HEAD >nul 2>&1 && git rev-parse HEAD | sed "s/^/\"/;s/$/\"/" >> c:\Local\REMix\remix_nz\process\225a\\metadata
    21       54 CALL           3      48  .printf "\n" >> c:\Local\REMix\remix_nz\process\225a\\metadata
    22       55 CALL           3      49  .printf "project_branch " >> c:\Local\REMix\remix_nz\process\225a\\metadata
    23       57 CALL           3      51  .cd C:\Local\REMix\remix_nz\output\will\02-battery-overnight_2020-2035-2050\data\./ && git rev-parse --abbrev-ref HEAD >nul 2>&1 && git rev-parse --abbrev-ref HEAD | sed "s/^/\"/;s/$/\"/" >> c:\Local\REMix\remix_nz\process\225a\\metadata
    24       59 CALL           3      55  .printf "\n" >> c:\Local\REMix\remix_nz\process\225a\\metadata
    25       62 INCLUDE        3      58  ..c:\Local\REMix\remix_nz\process\225a\metadata
    26       79 INCLUDE        1      17  .C:\Local\REMix\framework\remix\framework\model\source\data_inheritance.gms
    27      123 INCLUDE        1      26  .C:\Local\REMix\framework\remix\framework\model\source\remix.gms
    28      145 INCLUDE       27      22  ..C:\Local\REMix\framework\remix\framework\model\source\sets.gms
    29      165 IF EXIST      28      20  ..c:\Local\REMix\remix_nz\process\225a\map_aggregatetimemodel.csv
    30      216 IF EXIST      28      97  ..c:\Local\REMix\remix_nz\process\225a\set_nodesmodel.csv
    31      216 INCLUDE       28      97  ...c:\Local\REMix\remix_nz\process\225a\set_nodesmodel.csv
    32      229 IF EXIST      28      99  ..c:\Local\REMix\remix_nz\process\225a\set_nodesmodel.csv
    33      236 IF EXIST      28     106  ..c:\Local\REMix\remix_nz\process\225a\set_nodesdata.csv
    34      236 INCLUDE       28     106  ...c:\Local\REMix\remix_nz\process\225a\set_nodesdata.csv
    35      249 IF EXIST      28     108  ..c:\Local\REMix\remix_nz\process\225a\set_nodesdata.csv
    36      255 IF EXIST      28     114  ..c:\Local\REMix\remix_nz\process\225a\set_nodesmodelsel.csv
    37      255 INCLUDE       28     114  ...c:\Local\REMix\remix_nz\process\225a\set_nodesmodelsel.csv
    38      268 IF EXIST      28     116  ..c:\Local\REMix\remix_nz\process\225a\set_nodesmodelsel.csv
    39      270 IF EXIST      28     118  ..c:\Local\REMix\remix_nz\process\225a\set_nodesmodelsel.csv
    40      283 IF EXIST      28     131  ..c:\Local\REMix\remix_nz\process\225a\map_aggregatenodesmodel.csv
    41      283 INCLUDE       28     131  ...c:\Local\REMix\remix_nz\process\225a\map_aggregatenodesmodel.csv
    42      296 IF EXIST      28     133  ..c:\Local\REMix\remix_nz\process\225a\map_aggregatenodesmodel.csv
    43      299 IF EXIST      28     136  ..c:\Local\REMix\remix_nz\process\225a\map_aggregatenodesmodel.csv
    44      322 IF EXIST      28     159  ..c:\Local\REMix\remix_nz\process\225a\set_years.csv
    45      322 INCLUDE       28     159  ...c:\Local\REMix\remix_nz\process\225a\set_years.csv
    46      444 IF EXIST      28     161  ..c:\Local\REMix\remix_nz\process\225a\set_years.csv
    47      453 IF EXIST      28     170  ..c:\Local\REMix\remix_nz\process\225a\set_years.csv
    48      453 INCLUDE       28     170  ...c:\Local\REMix\remix_nz\process\225a\set_years.csv
    49      575 IF EXIST      28     172  ..c:\Local\REMix\remix_nz\process\225a\set_years.csv
    50      581 IF EXIST      28     178  ..c:\Local\REMix\remix_nz\process\225a\set_yearssel.csv
    51      581 INCLUDE       28     178  ...c:\Local\REMix\remix_nz\process\225a\set_yearssel.csv
    52      586 IF EXIST      28     180  ..c:\Local\REMix\remix_nz\process\225a\set_yearssel.csv
    53      604 IF EXIST      28     198  ..c:\Local\REMix\remix_nz\process\225a\set_activities.csv
    54      604 INCLUDE       28     198  ...c:\Local\REMix\remix_nz\process\225a\set_activities.csv
    55      613 IF EXIST      28     200  ..c:\Local\REMix\remix_nz\process\225a\set_activities.csv
    56      621 IF EXIST      28     208  ..c:\Local\REMix\remix_nz\process\225a\set_gridsegments.csv
    57      623 IF EXIST      28     210  ..c:\Local\REMix\remix_nz\process\225a\set_gridsegments.csv
    58      631 IF EXIST      28     218  ..c:\Local\REMix\remix_nz\process\225a\set_linksdata.csv
    59      631 INCLUDE       28     218  ...c:\Local\REMix\remix_nz\process\225a\set_linksdata.csv
    60      645 IF EXIST      28     220  ..c:\Local\REMix\remix_nz\process\225a\set_linksdata.csv
    61      663 IF EXIST      28     238  ..c:\Local\REMix\remix_nz\process\225a\set_link_types.csv
    62      663 INCLUDE       28     238  ...c:\Local\REMix\remix_nz\process\225a\set_link_types.csv
    63      667 IF EXIST      28     240  ..c:\Local\REMix\remix_nz\process\225a\set_link_types.csv
    64      676 IF EXIST      28     249  ..c:\Local\REMix\remix_nz\process\225a\set_commodities.csv
    65      676 INCLUDE       28     249  ...c:\Local\REMix\remix_nz\process\225a\set_commodities.csv
    66      685 IF EXIST      28     251  ..c:\Local\REMix\remix_nz\process\225a\set_commodities.csv
    67      694 IF EXIST      28     260  ..c:\Local\REMix\remix_nz\process\225a\set_indicators.csv
    68      694 INCLUDE       28     260  ...c:\Local\REMix\remix_nz\process\225a\set_indicators.csv
    69      703 IF EXIST      28     262  ..c:\Local\REMix\remix_nz\process\225a\set_indicators.csv
    70      712 IF EXIST      28     271  ..c:\Local\REMix\remix_nz\process\225a\set_converter_techs.csv
    71      712 INCLUDE       28     271  ...c:\Local\REMix\remix_nz\process\225a\set_converter_techs.csv
    72      733 IF EXIST      28     274  ..c:\Local\REMix\remix_nz\process\225a\set_storage_techs.csv
    73      733 INCLUDE       28     274  ...c:\Local\REMix\remix_nz\process\225a\set_storage_techs.csv
    74      739 IF EXIST      28     277  ..c:\Local\REMix\remix_nz\process\225a\set_transfer_techs.csv
    75      739 INCLUDE       28     277  ...c:\Local\REMix\remix_nz\process\225a\set_transfer_techs.csv
    76      743 IF EXIST      28     280  ..c:\Local\REMix\remix_nz\process\225a\set_sourcesink_techs.csv
    77      743 INCLUDE       28     280  ...c:\Local\REMix\remix_nz\process\225a\set_sourcesink_techs.csv
    78      754 IF EXIST      28     285  ..c:\Local\REMix\remix_nz\process\225a\set_converter_techs.csv
    79      754 INCLUDE       28     285  ...c:\Local\REMix\remix_nz\process\225a\set_converter_techs.csv
    80      773 IF EXIST      28     286  ..c:\Local\REMix\remix_nz\process\225a\set_converter_techs.csv
    81      777 IF EXIST      28     290  ..c:\Local\REMix\remix_nz\process\225a\set_storage_techs.csv
    82      777 INCLUDE       28     290  ...c:\Local\REMix\remix_nz\process\225a\set_storage_techs.csv
    83      781 IF EXIST      28     291  ..c:\Local\REMix\remix_nz\process\225a\set_storage_techs.csv
    84      786 IF EXIST      28     296  ..c:\Local\REMix\remix_nz\process\225a\set_transfer_techs.csv
    85      786 INCLUDE       28     296  ...c:\Local\REMix\remix_nz\process\225a\set_transfer_techs.csv
    86      788 IF EXIST      28     297  ..c:\Local\REMix\remix_nz\process\225a\set_transfer_techs.csv
    87      792 IF EXIST      28     301  ..c:\Local\REMix\remix_nz\process\225a\set_sourcesink_techs.csv
    88      792 INCLUDE       28     301  ...c:\Local\REMix\remix_nz\process\225a\set_sourcesink_techs.csv
    89      799 IF EXIST      28     302  ..c:\Local\REMix\remix_nz\process\225a\set_sourcesink_techs.csv
    90      809 IF EXIST      28     312  ..c:\Local\REMix\remix_nz\process\225a\set_degradation_states.csv
    91      811 IF EXIST      28     314  ..c:\Local\REMix\remix_nz\process\225a\set_degradation_states.csv
    92      820 IF EXIST      28     323  ..c:\Local\REMix\remix_nz\process\225a\set_soc.csv
    93      822 IF EXIST      28     325  ..c:\Local\REMix\remix_nz\process\225a\set_soc.csv
    94      838 IF EXIST      28     341  ..c:\Local\REMix\remix_nz\process\225a\transfer_linkstartend.csv
    95      838 INCLUDE       28     341  ...c:\Local\REMix\remix_nz\process\225a\transfer_linkstartend.csv
    96      865 IF EXIST      28     343  ..c:\Local\REMix\remix_nz\process\225a\transfer_linkstartend.csv
    97      879 BATINCLUDE    28     357  ...C:\Local\REMix\framework\remix\framework\model\source\battools\aggregateNodes.gms
    98      990 IF EXIST      28     466  ..c:\Local\REMix\remix_nz\process\225a\set_accnodes.csv
    99      992 IF EXIST      28     468  ..c:\Local\REMix\remix_nz\process\225a\set_accnodes.csv
   100     1057 IF EXIST      28     533  ..c:\Local\REMix\remix_nz\process\225a\map_accnodes.csv
   101     1059 IF EXIST      28     535  ..c:\Local\REMix\remix_nz\process\225a\map_accnodes.csv
   102     1113 INCLUDE       27      23  ..C:\Local\REMix\framework\remix\framework\model\source\accounting\input.gms
   103     1145 IF EXIST     102      32  ..c:\Local\REMix\remix_nz\process\225a\accounting_converterunits.csv
   104     1145 INCLUDE      102      32  ...c:\Local\REMix\remix_nz\process\225a\accounting_converterunits.csv
   105     1258 IF EXIST     102      34  ..c:\Local\REMix\remix_nz\process\225a\accounting_converterunits.csv
   106     1272 IF EXIST     102      48  ..c:\Local\REMix\remix_nz\process\225a\accounting_converteractivity.csv
   107     1272 INCLUDE      102      48  ...c:\Local\REMix\remix_nz\process\225a\accounting_converteractivity.csv
   108     1299 IF EXIST     102      50  ..c:\Local\REMix\remix_nz\process\225a\accounting_converteractivity.csv
   109     1316 IF EXIST     102      67  ..c:\Local\REMix\remix_nz\process\225a\accounting_converterstartup.csv
   110     1318 IF EXIST     102      69  ..c:\Local\REMix\remix_nz\process\225a\accounting_converterstartup.csv
   111     1337 IF EXIST     102      88  ..c:\Local\REMix\remix_nz\process\225a\accounting_storageunits.csv
   112     1337 INCLUDE      102      88  ...c:\Local\REMix\remix_nz\process\225a\accounting_storageunits.csv
   113     1366 IF EXIST     102      90  ..c:\Local\REMix\remix_nz\process\225a\accounting_storageunits.csv
   114     1388 IF EXIST     102     112  ..c:\Local\REMix\remix_nz\process\225a\accounting_transferlinks.csv
   115     1388 INCLUDE      102     112  ...c:\Local\REMix\remix_nz\process\225a\accounting_transferlinks.csv
   116     1397 IF EXIST     102     114  ..c:\Local\REMix\remix_nz\process\225a\accounting_transferlinks.csv
   117     1419 IF EXIST     102     136  ..c:\Local\REMix\remix_nz\process\225a\accounting_transferperlength.csv
   118     1419 INCLUDE      102     136  ...c:\Local\REMix\remix_nz\process\225a\accounting_transferperlength.csv
   119     1434 IF EXIST     102     138  ..c:\Local\REMix\remix_nz\process\225a\accounting_transferperlength.csv
   120     1449 IF EXIST     102     153  ..c:\Local\REMix\remix_nz\process\225a\accounting_sourcesinkflow.csv
   121     1449 INCLUDE      102     153  ...c:\Local\REMix\remix_nz\process\225a\accounting_sourcesinkflow.csv
   122     1455 IF EXIST     102     155  ..c:\Local\REMix\remix_nz\process\225a\accounting_sourcesinkflow.csv
   123     1469 IF EXIST     102     169  ..c:\Local\REMix\remix_nz\process\225a\accounting_perindicator.csv
   124     1469 INCLUDE      102     169  ...c:\Local\REMix\remix_nz\process\225a\accounting_perindicator.csv
   125     1477 IF EXIST     102     171  ..c:\Local\REMix\remix_nz\process\225a\accounting_perindicator.csv
   126     1503 IF EXIST     102     197  ..c:\Local\REMix\remix_nz\process\225a\accounting_indicatorbounds.csv
   127     1503 INCLUDE      102     197  ...c:\Local\REMix\remix_nz\process\225a\accounting_indicatorbounds.csv
   128     1507 IF EXIST     102     199  ..c:\Local\REMix\remix_nz\process\225a\accounting_indicatorbounds.csv
   129     1526 IF EXIST     102     218  ..c:\Local\REMix\remix_nz\process\225a\accounting_indicatorbounds_links.csv
   130     1528 IF EXIST     102     220  ..c:\Local\REMix\remix_nz\process\225a\accounting_indicatorbounds_links.csv
   131     1534 BATINCLUDE   102     226  ...C:\Local\REMix\framework\remix\framework\model\source\battools\aggregateAccountingMean.gms
   132     1593 BATINCLUDE   102     227  ...C:\Local\REMix\framework\remix\framework\model\source\battools\aggregateAccountingMean.gms
   133     1636 BATINCLUDE   102     228  ...C:\Local\REMix\framework\remix\framework\model\source\battools\aggregateAccountingMean.gms
   134     1679 BATINCLUDE   102     229  ...C:\Local\REMix\framework\remix\framework\model\source\battools\aggregateAccountingMean.gms
   135     1738 BATINCLUDE   102     230  ...C:\Local\REMix\framework\remix\framework\model\source\battools\aggregateAccountingMean.gms
   136     1797 BATINCLUDE   102     231  ...C:\Local\REMix\framework\remix\framework\model\source\battools\aggregateAccountingMean.gms
   137     1856 BATINCLUDE   102     232  ...C:\Local\REMix\framework\remix\framework\model\source\battools\aggregateAccountingMean.gms
   138     2265 INCLUDE       27      24  ..C:\Local\REMix\framework\remix\framework\model\source\accounting\annuities.gms
   139     2339 INCLUDE       27      26  ..C:\Local\REMix\framework\remix\framework\model\source\methods\mga_pre.gms
   140     2345 INCLUDE       27      27  ..C:\Local\REMix\framework\remix\framework\model\source\methods\pareto_pre.gms
   141     2351 INCLUDE       27      28  ..C:\Local\REMix\framework\remix\framework\model\source\postcalc\declaration.gms
   142     2368 IF DEXIST    141      17  ..C:\Local\REMix\remix_nz\output\will\02-battery-overnight_2020-2035-2050\result\
   143     2570 INCLUDE       27      29  ..C:\Local\REMix\framework\remix\framework\model\source\loadgdx.gms
   144     2579 INCLUDE       27      31  ..C:\Local\REMix\framework\remix\framework\model\source\core\converter.gms
   145     2682 IF EXIST     144     103  ..c:\Local\REMix\remix_nz\process\225a\converter_capacityparam.csv
   146     2682 INCLUDE      144     103  ...c:\Local\REMix\remix_nz\process\225a\converter_capacityparam.csv
   147     8018 IF EXIST     144     105  ..c:\Local\REMix\remix_nz\process\225a\converter_capacityparam.csv
   148     8026 BATINCLUDE   144     113  ...C:\Local\REMix\framework\remix\framework\model\source\battools\aggregateNodes.gms
   149     8037 BATINCLUDE   144     114  ...C:\Local\REMix\framework\remix\framework\model\source\battools\aggregateNodes.gms
   150     8070 IF EXIST     144     137  ..c:\Local\REMix\remix_nz\process\225a\converter_techparam.csv
   151     8070 INCLUDE      144     137  ...c:\Local\REMix\remix_nz\process\225a\converter_techparam.csv
   152     8128 IF EXIST     144     139  ..c:\Local\REMix\remix_nz\process\225a\converter_techparam.csv
   153     8150 IF EXIST     144     161  ..c:\Local\REMix\remix_nz\process\225a\converter_activityprofile.csv
   154     8150 INCLUDE      144     161  ...c:\Local\REMix\remix_nz\process\225a\converter_activityprofile.csv
   155     8362 IF EXIST     144     162  ..c:\Local\REMix\remix_nz\process\225a\converter_activityprofile.csv
   156     8364 IF EXIST     144     164  ..c:\Local\REMix\remix_nz\process\225a\converter_activityprofile.csv
   157     8384 IF EXIST     144     184  ..c:\Local\REMix\remix_nz\process\225a\converter_coefficient.csv
   158     8384 INCLUDE      144     184  ...c:\Local\REMix\remix_nz\process\225a\converter_coefficient.csv
   159     8566 IF EXIST     144     185  ..c:\Local\REMix\remix_nz\process\225a\converter_coefficient.csv
   160     8567 IF EXIST     144     186  ..c:\Local\REMix\remix_nz\process\225a\converter_coefficient.csv
   161     8569 IF EXIST     144     188  ..c:\Local\REMix\remix_nz\process\225a\converter_coefficient.csv
   162     8581 IF EXIST     144     200  ..c:\Local\REMix\remix_nz\process\225a\converter_coefficientprofile.csv
   163     8582 IF EXIST     144     201  ..c:\Local\REMix\remix_nz\process\225a\converter_coefficientprofile.csv
   164     8584 IF EXIST     144     203  ..c:\Local\REMix\remix_nz\process\225a\converter_coefficientprofile.csv
   165     9520 INCLUDE       27      32  ..C:\Local\REMix\framework\remix\framework\model\source\core\storage.gms
   166     9611 IF EXIST     165      91  ..c:\Local\REMix\remix_nz\process\225a\storage_reservoirparam.csv
   167     9611 INCLUDE      165      91  ...c:\Local\REMix\remix_nz\process\225a\storage_reservoirparam.csv
   168     9824 IF EXIST     165      93  ..c:\Local\REMix\remix_nz\process\225a\storage_reservoirparam.csv
   169     9828 BATINCLUDE   165      97  ...C:\Local\REMix\framework\remix\framework\model\source\battools\aggregateNodes.gms
   170     9839 BATINCLUDE   165      98  ...C:\Local\REMix\framework\remix\framework\model\source\battools\aggregateNodes.gms
   171     9875 IF EXIST     165     124  ..c:\Local\REMix\remix_nz\process\225a\storage_techparam.csv
   172     9875 INCLUDE      165     124  ...c:\Local\REMix\remix_nz\process\225a\storage_techparam.csv
   173     9891 IF EXIST     165     126  ..c:\Local\REMix\remix_nz\process\225a\storage_techparam.csv
   174     9912 IF EXIST     165     147  ..c:\Local\REMix\remix_nz\process\225a\storage_sizeparam.csv
   175     9912 INCLUDE      165     147  ...c:\Local\REMix\remix_nz\process\225a\storage_sizeparam.csv
   176     9928 IF EXIST     165     149  ..c:\Local\REMix\remix_nz\process\225a\storage_sizeparam.csv
   177     9945 IF EXIST     165     166  ..c:\Local\REMix\remix_nz\process\225a\storage_socparam.csv
   178     9947 IF EXIST     165     168  ..c:\Local\REMix\remix_nz\process\225a\storage_socparam.csv
   179     9966 IF EXIST     165     187  ..c:\Local\REMix\remix_nz\process\225a\storage_degradationparam.csv
   180     9968 IF EXIST     165     189  ..c:\Local\REMix\remix_nz\process\225a\storage_degradationparam.csv
   181     9997 IF EXIST     165     218  ..c:\Local\REMix\remix_nz\process\225a\storage_levelprofile.csv
   182     9998 IF EXIST     165     219  ..c:\Local\REMix\remix_nz\process\225a\storage_levelprofile.csv
   183    10000 IF EXIST     165     221  ..c:\Local\REMix\remix_nz\process\225a\storage_levelprofile.csv
   184    10820 INCLUDE       27      33  ..C:\Local\REMix\framework\remix\framework\model\source\core\transfer.gms
   185    10887 IF EXIST     184      73  ..c:\Local\REMix\remix_nz\process\225a\transfer_linksparam.csv
   186    10887 INCLUDE      184      73  ...c:\Local\REMix\remix_nz\process\225a\transfer_linksparam.csv
   187    10926 IF EXIST     184      75  ..c:\Local\REMix\remix_nz\process\225a\transfer_linksparam.csv
   188    10942 IF EXIST     184      91  ..c:\Local\REMix\remix_nz\process\225a\transfer_flowprofile.csv
   189    10944 IF EXIST     184      93  ..c:\Local\REMix\remix_nz\process\225a\transfer_flowprofile.csv
   190    10964 IF EXIST     184     113  ..c:\Local\REMix\remix_nz\process\225a\transfer_techparam.csv
   191    10964 INCLUDE      184     113  ...c:\Local\REMix\remix_nz\process\225a\transfer_techparam.csv
   192    10970 IF EXIST     184     115  ..c:\Local\REMix\remix_nz\process\225a\transfer_techparam.csv
   193    10984 IF EXIST     184     129  ..c:\Local\REMix\remix_nz\process\225a\transfer_coefficient.csv
   194    10984 INCLUDE      184     129  ...c:\Local\REMix\remix_nz\process\225a\transfer_coefficient.csv
   195    10990 IF EXIST     184     131  ..c:\Local\REMix\remix_nz\process\225a\transfer_coefficient.csv
   196    11004 IF EXIST     184     145  ..c:\Local\REMix\remix_nz\process\225a\transfer_coefperflow.csv
   197    11004 INCLUDE      184     145  ...c:\Local\REMix\remix_nz\process\225a\transfer_coefperflow.csv
   198    11010 IF EXIST     184     147  ..c:\Local\REMix\remix_nz\process\225a\transfer_coefperflow.csv
   199    11024 IF EXIST     184     161  ..c:\Local\REMix\remix_nz\process\225a\transfer_coefperlength.csv
   200    11024 INCLUDE      184     161  ...c:\Local\REMix\remix_nz\process\225a\transfer_coefperlength.csv
   201    11033 IF EXIST     184     163  ..c:\Local\REMix\remix_nz\process\225a\transfer_coefperlength.csv
   202    11047 IF EXIST     184     177  ..c:\Local\REMix\remix_nz\process\225a\transfer_reactperlength.csv
   203    11049 IF EXIST     184     179  ..c:\Local\REMix\remix_nz\process\225a\transfer_reactperlength.csv
   204    11063 IF EXIST     184     193  ..c:\Local\REMix\remix_nz\process\225a\transfer_lengthparam.csv
   205    11063 INCLUDE      184     193  ...c:\Local\REMix\remix_nz\process\225a\transfer_lengthparam.csv
   206    11090 IF EXIST     184     195  ..c:\Local\REMix\remix_nz\process\225a\transfer_lengthparam.csv
   207    11104 IF EXIST     184     209  ..c:\Local\REMix\remix_nz\process\225a\transfer_gridsegments.csv
   208    11106 IF EXIST     184     211  ..c:\Local\REMix\remix_nz\process\225a\transfer_gridsegments.csv
   209    11703 INCLUDE       27      34  ..C:\Local\REMix\framework\remix\framework\model\source\core\sourcesink.gms
   210    11741 IF EXIST     209      38  ..c:\Local\REMix\remix_nz\process\225a\sourcesink_config.csv
   211    11741 INCLUDE      209      38  ...c:\Local\REMix\remix_nz\process\225a\sourcesink_config.csv
   212    11919 IF EXIST     209      40  ..c:\Local\REMix\remix_nz\process\225a\sourcesink_config.csv
   213    11923 BATINCLUDE   209      44  ...C:\Local\REMix\framework\remix\framework\model\source\battools\aggregateNodes.gms
   214    11951 IF EXIST     209      62  ..c:\Local\REMix\remix_nz\process\225a\sourcesink_profile.csv
   215    11951 INCLUDE      209      62  ...c:\Local\REMix\remix_nz\process\225a\sourcesink_profile.csv
   216    12029 IF EXIST     209      63  ..c:\Local\REMix\remix_nz\process\225a\sourcesink_profile.csv
   217    12030 IF EXIST     209      64  ..c:\Local\REMix\remix_nz\process\225a\sourcesink_profile.csv
   218    12032 IF EXIST     209      66  ..c:\Local\REMix\remix_nz\process\225a\sourcesink_profile.csv
   219    12052 IF EXIST     209      86  ..c:\Local\REMix\remix_nz\process\225a\sourcesink_annualsum.csv
   220    12052 INCLUDE      209      86  ...c:\Local\REMix\remix_nz\process\225a\sourcesink_annualsum.csv
   221    12121 IF EXIST     209      88  ..c:\Local\REMix\remix_nz\process\225a\sourcesink_annualsum.csv
   222    12124 BATINCLUDE   209      91  ...C:\Local\REMix\framework\remix\framework\model\source\battools\aggregateNodes.gms
   223    12305 INCLUDE       27      35  ..C:\Local\REMix\framework\remix\framework\model\source\core\balance.gms
   224    12441 INCLUDE       27      37  ..C:\Local\REMix\framework\remix\framework\model\source\accounting\equations.gms
   225    12863 INCLUDE       27      38  ..C:\Local\REMix\framework\remix\framework\model\source\optiframe.gms
   226    12904 INCLUDE       27      72  ..C:\Local\REMix\framework\remix\framework\model\source\methods\checkanno.gms
   227    12915 INCLUDE       27      75  ..C:\Local\REMix\framework\remix\framework\model\source\methods\pips.gms
   228    12924 INCLUDE       27      78  ..C:\Local\REMix\framework\remix\framework\model\source\methods\solve.gms
   229    13136 INCLUDE       27      81  ..C:\Local\REMix\framework\remix\framework\model\source\methods\pareto.gms
   230    13145 INC