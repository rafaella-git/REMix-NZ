GAMS 40.4.0  d540b52e Oct 3, 2022           WEX-WEI x86 64bit/MS Windows - 10/12/23 12:13:41 Page 1
G e n e r a l   A l g e b r a i c   M o d e l i n g   S y s t e m
C o m p i l a t i o n


   1  * SPDX-FileCopyrightText: Copyright (c) 2023 German Aerospace Center (DLR)
   2  * SPDX-License-Identifier: BSD-3-Clause
   3   
   4  * ==== REMix version number ====
   6   
   7  * ==== global settings ====
  11   
  13   
  14  * ==== write metadata and inherit dataset ====
INCLUDE    C:\Local\REMix\framework\remix\framework\model\source\metadata.gms
  22   
  26   
  42   
  58   
  59  set metadata(*) /
INCLUDE    c:\Local\REMix\remix_nz\process\225a\metadata
  61  remix_version "0.9.2"
  62  gams_version "40.4.0"
  63  timestamp "10/12/23 12:13:41"
  64  framework_path "C:\Local\REMix\framework\remix\framework\model\source"
  65   
  66  framework_hash 96c2159997fb47c52b8300c49677756ddfb1ee40
  67   
  68  framework_branch "dev"
  69   
  70  project_path "C:\Local\REMix\remix_nz\output\nz_profile_11nodes_2020\data"
  71   
  72  project_hash "41c2b0f887a6f2ed536f5c4484ff6baa596f01d4"
  73   
  74  project_branch "main"
  75   
  76  /;
INCLUDE    C:\Local\REMix\framework\remix\framework\model\source\data_inheritance.gms
  78  * SPDX-FileCopyrightText: Copyright (c) 2023 German Aerospace Center (DLR)
  79  * SPDX-License-Identifier: BSD-3-Clause
  80   
  83   
  88   
  89  * pandas based data inheritance reading in the dat files, merging them and writing csv files in the scrdir
 109  ;
 110   
 114   
 115  * ==== run remix ====
INCLUDE    C:\Local\REMix\framework\remix\framework\model\source\remix.gms
 120  * SPDX-FileCopyrightText: Copyright (c) 2023 German Aerospace Center (DLR)
 121  * SPDX-License-Identifier: BSD-3-Clause
 122   
 123  * ==== global settings ====
 130   
 133   
 135   
 138   
 139  * ==== include modules ====
INCLUDE    C:\Local\REMix\framework\remix\framework\model\source\sets.gms
 141  * SPDX-FileCopyrightText: Copyright (c) 2023 German Aerospace Center (DLR)
 142  * SPDX-License-Identifier: BSD-3-Clause
 143   
 144  * // # sets
 145  * // Sets are the indices of variables and parameters.
 146   
 147  * // ## Reference
 148  * // {special_table_sets}
 149   
 150  * // ## Input Files
 151  * // {special_table_set_input_files}
 804   
 805  map_accNodes(accNodesModel,accNodesModel_aggregation)
 806      $sum((nodesData, nodesModelToCalc)
 807              $( sameas(nodesModelToCalc,accNodesModel)
 808                  and map_accNodesLoad(nodesData,accNodesModel_aggregation)
 809                  and aggregateNodesModel(nodesData,nodesModelToCalc)), 1) = yes;
 810   
 811  map_accNodes(accNodesModel,"global")$sum(nodesModelToCalc$sameas(accNodesModel,nodesModelToCalc), 1) = yes;
 812  map_accNodes(accNodesModel,"global")$sum(accNodes$sameas(accNodesModel,accNodes), 1) = yes;
 813  map_accNodes(accNodesModel,accNodesModel) = yes;
 814  map_accLinks(accLinksModel,"global")$sum(linksModelToCalc$sameas(accLinksModel,linksModelToCalc), 1) = yes;
 815  map_accLinks(accLinksModel,accLinksModel) = yes;
 816  map_accYears(accYears,"horizon")$sum(yearsToCalc$sameas(accYears,yearsToCalc), 1)  = yes;
 817  map_accYears(accYears,accYears) = yes;
 818   
 819  map_accNodesToCalc(accNodesModel,nodesModelToCalc)
 820      $sum((nodesData)
 821              $( map_accNodesLoad(nodesData,accNodesModel)
 822                  and aggregateNodesModel(nodesData,nodesModelToCalc)), 1) = yes;
 823   
 824  map_accNodesToCalc("global",nodesModelToCalc) = yes;
 825  map_accNodesToCalc(accNodesModel,nodesModelToCalc)$sameas(accNodesModel,nodesModelToCalc) = yes;
 826  map_accLinksToCalc("global",linksModelToCalc) = yes;
 827  map_accLinksToCalc(accLinksModel,linksModelToCalc)$sameas(accLinksModel,linksModelToCalc) = yes;
 828  map_accYearsToCalc("horizon",yearsToCalc) = yes;
 829  map_accYearsToCalc(accYears,yearsToCalc)$sameas(accYears,yearsToCalc) = yes;
 830   
 831  * Duplicate sets for postcalc reporting without horizon and accYears
 832  map_accNodesPostCalc(accNodesModel,nodesModelToCalc) = map_accNodesToCalc(accNodesModel,nodesModelToCalc);
 833  map_accLinksPostCalc(accLinksModel,linksModelToCalc) = map_accLinksToCalc(accLinksModel,linksModelToCalc);
 834  map_accYearsPostCalc(accYears,yearsToCalc)$sameas(accYears,yearsToCalc) = yes;
 835  map_accYearsPostCalc(accYears,years)$(sameas(accYears,years) and years.val < sum(yearsToCalc$(ord(yearsToCalc) = 1), yearsToCalc.val)) = yes;
 836   
 837  set map_nodesAccounting(accNodesModel_aggregation,accNodesModel) "Map accounting nodes describes the mapping between model accounting nodes and data nodes." ;
 838  option map_nodesAccounting < map_accNodes;
 839   
 840  * ==== Generic sets  ====
 841  * These set names are repeated across different profile parameters.
 842  * they are not strictly related to each other and are not input data but
 843  * are needed for validation.
 844  ** // PROFILE: profileTypes | Profile Types | OEO_00140056:flow potential | set_profiletypes.csv
 845   
 846  ** // SET: scenario | Scenario | OEO_00000364:scenario | set_scenarios.csv
 847  * "Scenario indexes help to differentiate scenarios." /
 848   
 849  ** // SET: capType | Capacity Types | OEO_00030019:balance process attribute | set_captypes.csv
 850  * "Capacity types differentiate investment decisions." /
 851   
 852  ** // SET: balanceType | Balance Types | OEO_00030019:balance process attribute | set_balancetypes.csv
 853  * "Balance types differentiate types of balances." /
INCLUDE    C:\Local\REMix\framework\remix\framework\model\source\accounting\input.gms
 855  * SPDX-FileCopyrightText: Copyright (c) 2023 German Aerospace Center (DLR)
 856  * SPDX-License-Identifier: BSD-3-Clause
 857   
 858  * // # accounting_input
 859  * // The parameters in this file describe the accounting of indicators in the model.
 860   
 861  * // ## Variables
 862  * // {special_table_input_variables}
1190   
1191  * Aggregate accounting parameters
BATINCLUDE C:\Local\REMix\framework\remix\framework\model\source\battools\aggregateAccountingMean.gms
1193  * SPDX-FileCopyrightText: Copyright (c) 2023 German Aerospace Center (DLR)
1194  * SPDX-License-Identifier: BSD-3-Clause
1195   
1197   
1199   
1200  set accounting_converterUnitsNonzero(indicator,accnodesData,converter_techs,vintage);
1201  accounting_converterUnitsNonzero(indicator,accnodesData,converter_techs,vintage)
1202      $sum(pc_accounting_converterUnits$accounting_converterUnitsIn(indicator,accnodesData,converter_techs,vintage,pc_accounting_converterUnits), 1)
1203      = yes;
1204   
1206  set accounting_converterUnitsChk(indicator,nodesModel,converter_techs,vintage,pc_accounting_converterUnits);
1207  accounting_converterUnitsChk(indicator,nodesModel,converter_techs,vintage,"useAnnuity")
1208      $sum((nodesData,accnodesData)
1209              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1210                  and accounting_converterUnitsNonzero(indicator,accnodesData,converter_techs,vintage)), 1)
1211      = smax((nodesData,accnodesData)
1212              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1213                  and accounting_converterUnitsNonzero(indicator,accnodesData,converter_techs,vintage)),
1214          accounting_converterUnitsIn(indicator,accnodesData,converter_techs,vintage,"useAnnuity"))
1215      - smin((nodesData,accnodesData)
1216              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1217                  and accounting_converterUnitsNonzero(indicator,accnodesData,converter_techs,vintage)),
1218          accounting_converterUnitsIn(indicator,accnodesData,converter_techs,vintage,"useAnnuity"));
1219   
1220  abort$sum(accounting_converterUnitsChk(indicator,nodesModel,converter_techs,vintage,pc_accounting_converterUnits), 1) "Cannot aggregate technologies with different useAnnuity values."
1222   
1223  parameter accounting_converterUnitsAgg(indicator,nodesModel,converter_techs,vintage,pc_accounting_converterUnits);
1224  accounting_converterUnitsAgg(indicator,nodesModel,converter_techs,vintage,pc_accounting_converterUnits)
1225      $sum((nodesData,accnodesData)
1226              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1227                  and accounting_converterUnitsNonzero(indicator,accnodesData,converter_techs,vintage)), 1)
1228      = sum((nodesData,accnodesData)
1229              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1230                  and accounting_converterUnitsNonzero(indicator,accnodesData,converter_techs,vintage)),
1231          accounting_converterUnitsIn(indicator,accnodesData,converter_techs,vintage,pc_accounting_converterUnits))
1232      / sum((nodesData,accnodesData)
1233              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1234                  and accounting_converterUnitsNonzero(indicator,accnodesData,converter_techs,vintage)),
1235          1);
1236   
1237  parameter accounting_converterUnits(indicator,nodesModel,converter_techs,vintage,pc_accounting_converterUnits);
1238  loop(accnodes,
1239  accounting_converterUnits(indicator,nodesModel,converter_techs,vintage,pc_accounting_converterUnits)
1240      $sum(accnodesData$(map_accnodesToCalc(accnodes,nodesModel) and sameas(accnodes,accnodesData)
1241                              and accounting_converterUnitsIn(indicator,accnodesData,converter_techs,vintage,pc_accounting_converterUnits)), 1)
1242      = sum(accnodesData$(map_accnodesToCalc(accnodes,nodesModel) and sameas(accnodes,accnodesData)),
1243              accounting_converterUnitsIn(indicator,accnodesData,converter_techs,vintage,pc_accounting_converterUnits));
1244  );
1245   
1246  accounting_converterUnits(indicator,nodesModel,converter_techs,vintage,pc_accounting_converterUnits)
1247      $accounting_converterUnitsAgg(indicator,nodesModel,converter_techs,vintage,pc_accounting_converterUnits)
1248      = accounting_converterUnitsAgg(indicator,nodesModel,converter_techs,vintage,pc_accounting_converterUnits);
1249   
1250  * option kill %paramName%Nonzero %paramName%Chk %paramName%Agg
BATINCLUDE C:\Local\REMix\framework\remix\framework\model\source\battools\aggregateAccountingMean.gms
1252  * SPDX-FileCopyrightText: Copyright (c) 2023 German Aerospace Center (DLR)
1253  * SPDX-License-Identifier: BSD-3-Clause
1254   
1256   
1258   
1259  set accounting_converterActivityNonzero(indicator,accnodesData,converter_techs,vintage,activity);
1260  accounting_converterActivityNonzero(indicator,accnodesData,converter_techs,vintage,activity)
1261      $sum(pc_accounting_converterActivity$accounting_converterActivityIn(indicator,accnodesData,converter_techs,vintage,activity,pc_accounting_converterActivity), 1)
1262      = yes;
1263   
1265   
1266  parameter accounting_converterActivityAgg(indicator,nodesModel,converter_techs,vintage,activity,pc_accounting_converterActivity);
1267  accounting_converterActivityAgg(indicator,nodesModel,converter_techs,vintage,activity,pc_accounting_converterActivity)
1268      $sum((nodesData,accnodesData)
1269              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1270                  and accounting_converterActivityNonzero(indicator,accnodesData,converter_techs,vintage,activity)), 1)
1271      = sum((nodesData,accnodesData)
1272              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1273                  and accounting_converterActivityNonzero(indicator,accnodesData,converter_techs,vintage,activity)),
1274          accounting_converterActivityIn(indicator,accnodesData,converter_techs,vintage,activity,pc_accounting_converterActivity))
1275      / sum((nodesData,accnodesData)
1276              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1277                  and accounting_converterActivityNonzero(indicator,accnodesData,converter_techs,vintage,activity)),
1278          1);
1279   
1280  parameter accounting_converterActivity(indicator,nodesModel,converter_techs,vintage,activity,pc_accounting_converterActivity);
1281  loop(accnodes,
1282  accounting_converterActivity(indicator,nodesModel,converter_techs,vintage,activity,pc_accounting_converterActivity)
1283      $sum(accnodesData$(map_accnodesToCalc(accnodes,nodesModel) and sameas(accnodes,accnodesData)
1284                              and accounting_converterActivityIn(indicator,accnodesData,converter_techs,vintage,activity,pc_accounting_converterActivity)), 1)
1285      = sum(accnodesData$(map_accnodesToCalc(accnodes,nodesModel) and sameas(accnodes,accnodesData)),
1286              accounting_converterActivityIn(indicator,accnodesData,converter_techs,vintage,activity,pc_accounting_converterActivity));
1287  );
1288   
1289  accounting_converterActivity(indicator,nodesModel,converter_techs,vintage,activity,pc_accounting_converterActivity)
1290      $accounting_converterActivityAgg(indicator,nodesModel,converter_techs,vintage,activity,pc_accounting_converterActivity)
1291      = accounting_converterActivityAgg(indicator,nodesModel,converter_techs,vintage,activity,pc_accounting_converterActivity);
1292   
1293  * option kill %paramName%Nonzero %paramName%Chk %paramName%Agg
BATINCLUDE C:\Local\REMix\framework\remix\framework\model\source\battools\aggregateAccountingMean.gms
1295  * SPDX-FileCopyrightText: Copyright (c) 2023 German Aerospace Center (DLR)
1296  * SPDX-License-Identifier: BSD-3-Clause
1297   
1299   
1301   
1302  set accounting_converterStartupNonzero(indicator,accnodesData,converter_techs,vintage);
1303  accounting_converterStartupNonzero(indicator,accnodesData,converter_techs,vintage)
1304      $sum(pc_accounting_converterStartup$accounting_converterStartupIn(indicator,accnodesData,converter_techs,vintage,pc_accounting_converterStartup), 1)
1305      = yes;
1306   
1308   
1309  parameter accounting_converterStartupAgg(indicator,nodesModel,converter_techs,vintage,pc_accounting_converterStartup);
1310  accounting_converterStartupAgg(indicator,nodesModel,converter_techs,vintage,pc_accounting_converterStartup)
1311      $sum((nodesData,accnodesData)
1312              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1313                  and accounting_converterStartupNonzero(indicator,accnodesData,converter_techs,vintage)), 1)
1314      = sum((nodesData,accnodesData)
1315              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1316                  and accounting_converterStartupNonzero(indicator,accnodesData,converter_techs,vintage)),
1317          accounting_converterStartupIn(indicator,accnodesData,converter_techs,vintage,pc_accounting_converterStartup))
1318      / sum((nodesData,accnodesData)
1319              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1320                  and accounting_converterStartupNonzero(indicator,accnodesData,converter_techs,vintage)),
1321          1);
1322   
1323  parameter accounting_converterStartup(indicator,nodesModel,converter_techs,vintage,pc_accounting_converterStartup);
1324  loop(accnodes,
1325  accounting_converterStartup(indicator,nodesModel,converter_techs,vintage,pc_accounting_converterStartup)
1326      $sum(accnodesData$(map_accnodesToCalc(accnodes,nodesModel) and sameas(accnodes,accnodesData)
1327                              and accounting_converterStartupIn(indicator,accnodesData,converter_techs,vintage,pc_accounting_converterStartup)), 1)
1328      = sum(accnodesData$(map_accnodesToCalc(accnodes,nodesModel) and sameas(accnodes,accnodesData)),
1329              accounting_converterStartupIn(indicator,accnodesData,converter_techs,vintage,pc_accounting_converterStartup));
1330  );
1331   
1332  accounting_converterStartup(indicator,nodesModel,converter_techs,vintage,pc_accounting_converterStartup)
1333      $accounting_converterStartupAgg(indicator,nodesModel,converter_techs,vintage,pc_accounting_converterStartup)
1334      = accounting_converterStartupAgg(indicator,nodesModel,converter_techs,vintage,pc_accounting_converterStartup);
1335   
1336  * option kill %paramName%Nonzero %paramName%Chk %paramName%Agg
BATINCLUDE C:\Local\REMix\framework\remix\framework\model\source\battools\aggregateAccountingMean.gms
1338  * SPDX-FileCopyrightText: Copyright (c) 2023 German Aerospace Center (DLR)
1339  * SPDX-License-Identifier: BSD-3-Clause
1340   
1342   
1344   
1345  set accounting_storageUnitsNonzero(indicator,accnodesData,storage_techs,vintage);
1346  accounting_storageUnitsNonzero(indicator,accnodesData,storage_techs,vintage)
1347      $sum(pc_accounting_storageUnits$accounting_storageUnitsIn(indicator,accnodesData,storage_techs,vintage,pc_accounting_storageUnits), 1)
1348      = yes;
1349   
1351  set accounting_storageUnitsChk(indicator,nodesModel,storage_techs,vintage,pc_accounting_storageUnits);
1352  accounting_storageUnitsChk(indicator,nodesModel,storage_techs,vintage,"useAnnuity")
1353      $sum((nodesData,accnodesData)
1354              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1355                  and accounting_storageUnitsNonzero(indicator,accnodesData,storage_techs,vintage)), 1)
1356      = smax((nodesData,accnodesData)
1357              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1358                  and accounting_storageUnitsNonzero(indicator,accnodesData,storage_techs,vintage)),
1359          accounting_storageUnitsIn(indicator,accnodesData,storage_techs,vintage,"useAnnuity"))
1360      - smin((nodesData,accnodesData)
1361              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1362                  and accounting_storageUnitsNonzero(indicator,accnodesData,storage_techs,vintage)),
1363          accounting_storageUnitsIn(indicator,accnodesData,storage_techs,vintage,"useAnnuity"));
1364   
1365  abort$sum(accounting_storageUnitsChk(indicator,nodesModel,storage_techs,vintage,pc_accounting_storageUnits), 1) "Cannot aggregate technologies with different useAnnuity values."
1367   
1368  parameter accounting_storageUnitsAgg(indicator,nodesModel,storage_techs,vintage,pc_accounting_storageUnits);
1369  accounting_storageUnitsAgg(indicator,nodesModel,storage_techs,vintage,pc_accounting_storageUnits)
1370      $sum((nodesData,accnodesData)
1371              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1372                  and accounting_storageUnitsNonzero(indicator,accnodesData,storage_techs,vintage)), 1)
1373      = sum((nodesData,accnodesData)
1374              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1375                  and accounting_storageUnitsNonzero(indicator,accnodesData,storage_techs,vintage)),
1376          accounting_storageUnitsIn(indicator,accnodesData,storage_techs,vintage,pc_accounting_storageUnits))
1377      / sum((nodesData,accnodesData)
1378              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1379                  and accounting_storageUnitsNonzero(indicator,accnodesData,storage_techs,vintage)),
1380          1);
1381   
1382  parameter accounting_storageUnits(indicator,nodesModel,storage_techs,vintage,pc_accounting_storageUnits);
1383  loop(accnodes,
1384  accounting_storageUnits(indicator,nodesModel,storage_techs,vintage,pc_accounting_storageUnits)
1385      $sum(accnodesData$(map_accnodesToCalc(accnodes,nodesModel) and sameas(accnodes,accnodesData)
1386                              and accounting_storageUnitsIn(indicator,accnodesData,storage_techs,vintage,pc_accounting_storageUnits)), 1)
1387      = sum(accnodesData$(map_accnodesToCalc(accnodes,nodesModel) and sameas(accnodes,accnodesData)),
1388              accounting_storageUnitsIn(indicator,accnodesData,storage_techs,vintage,pc_accounting_storageUnits));
1389  );
1390   
1391  accounting_storageUnits(indicator,nodesModel,storage_techs,vintage,pc_accounting_storageUnits)
1392      $accounting_storageUnitsAgg(indicator,nodesModel,storage_techs,vintage,pc_accounting_storageUnits)
1393      = accounting_storageUnitsAgg(indicator,nodesModel,storage_techs,vintage,pc_accounting_storageUnits);
1394   
1395  * option kill %paramName%Nonzero %paramName%Chk %paramName%Agg
BATINCLUDE C:\Local\REMix\framework\remix\framework\model\source\battools\aggregateAccountingMean.gms
1397  * SPDX-FileCopyrightText: Copyright (c) 2023 German Aerospace Center (DLR)
1398  * SPDX-License-Identifier: BSD-3-Clause
1399   
1401   
1403   
1404  set accounting_transferLinksNonzero(indicator,acclinksData,transfer_techs,vintage);
1405  accounting_transferLinksNonzero(indicator,acclinksData,transfer_techs,vintage)
1406      $sum(pc_accounting_transferLinks$accounting_transferLinksIn(indicator,acclinksData,transfer_techs,vintage,pc_accounting_transferLinks), 1)
1407      = yes;
1408   
1410  set accounting_transferLinksChk(indicator,linksModel,transfer_techs,vintage,pc_accounting_transferLinks);
1411  accounting_transferLinksChk(indicator,linksModel,transfer_techs,vintage,"useAnnuity")
1412      $sum((linksData,acclinksData)
1413              $(aggregatelinksModel(linksData,linksModel) and sameas(linksData,acclinksData)
1414                  and accounting_transferLinksNonzero(indicator,acclinksData,transfer_techs,vintage)), 1)
1415      = smax((linksData,acclinksData)
1416              $(aggregatelinksModel(linksData,linksModel) and sameas(linksData,acclinksData)
1417                  and accounting_transferLinksNonzero(indicator,acclinksData,transfer_techs,vintage)),
1418          accounting_transferLinksIn(indicator,acclinksData,transfer_techs,vintage,"useAnnuity"))
1419      - smin((linksData,acclinksData)
1420              $(aggregatelinksModel(linksData,linksModel) and sameas(linksData,acclinksData)
1421                  and accounting_transferLinksNonzero(indicator,acclinksData,transfer_techs,vintage)),
1422          accounting_transferLinksIn(indicator,acclinksData,transfer_techs,vintage,"useAnnuity"));
1423   
1424  abort$sum(accounting_transferLinksChk(indicator,linksModel,transfer_techs,vintage,pc_accounting_transferLinks), 1) "Cannot aggregate technologies with different useAnnuity values."
1426   
1427  parameter accounting_transferLinksAgg(indicator,linksModel,transfer_techs,vintage,pc_accounting_transferLinks);
1428  accounting_transferLinksAgg(indicator,linksModel,transfer_techs,vintage,pc_accounting_transferLinks)
1429      $sum((linksData,acclinksData)
1430              $(aggregatelinksModel(linksData,linksModel) and sameas(linksData,acclinksData)
1431                  and accounting_transferLinksNonzero(indicator,acclinksData,transfer_techs,vintage)), 1)
1432      = sum((linksData,acclinksData)
1433              $(aggregatelinksModel(linksData,linksModel) and sameas(linksData,acclinksData)
1434                  and accounting_transferLinksNonzero(indicator,acclinksData,transfer_techs,vintage)),
1435          accounting_transferLinksIn(indicator,acclinksData,transfer_techs,vintage,pc_accounting_transferLinks))
1436      / sum((linksData,acclinksData)
1437              $(aggregatelinksModel(linksData,linksModel) and sameas(linksData,acclinksData)
1438                  and accounting_transferLinksNonzero(indicator,acclinksData,transfer_techs,vintage)),
1439          1);
1440   
1441  parameter accounting_transferLinks(indicator,linksModel,transfer_techs,vintage,pc_accounting_transferLinks);
1442  loop(acclinks,
1443  accounting_transferLinks(indicator,linksModel,transfer_techs,vintage,pc_accounting_transferLinks)
1444      $sum(acclinksData$(map_acclinksToCalc(acclinks,linksModel) and sameas(acclinks,acclinksData)
1445                              and accounting_transferLinksIn(indicator,acclinksData,transfer_techs,vintage,pc_accounting_transferLinks)), 1)
1446      = sum(acclinksData$(map_acclinksToCalc(acclinks,linksModel) and sameas(acclinks,acclinksData)),
1447              accounting_transferLinksIn(indicator,acclinksData,transfer_techs,vintage,pc_accounting_transferLinks));
1448  );
1449   
1450  accounting_transferLinks(indicator,linksModel,transfer_techs,vintage,pc_accounting_transferLinks)
1451      $accounting_transferLinksAgg(indicator,linksModel,transfer_techs,vintage,pc_accounting_transferLinks)
1452      = accounting_transferLinksAgg(indicator,linksModel,transfer_techs,vintage,pc_accounting_transferLinks);
1453   
1454  * option kill %paramName%Nonzero %paramName%Chk %paramName%Agg
BATINCLUDE C:\Local\REMix\framework\remix\framework\model\source\battools\aggregateAccountingMean.gms
1456  * SPDX-FileCopyrightText: Copyright (c) 2023 German Aerospace Center (DLR)
1457  * SPDX-License-Identifier: BSD-3-Clause
1458   
1460   
1462   
1463  set accounting_transferPerLengthNonzero(indicator,acclinksData,transfer_techs,vintage,link_types);
1464  accounting_transferPerLengthNonzero(indicator,acclinksData,transfer_techs,vintage,link_types)
1465      $sum(pc_accounting_transferPerLength$accounting_transferPerLengthIn(indicator,acclinksData,transfer_techs,vintage,link_types,pc_accounting_transferPerLength), 1)
1466      = yes;
1467   
1469  set accounting_transferPerLengthChk(indicator,linksModel,transfer_techs,vintage,link_types,pc_accounting_transferPerLength);
1470  accounting_transferPerLengthChk(indicator,linksModel,transfer_techs,vintage,link_types,"useAnnuity")
1471      $sum((linksData,acclinksData)
1472              $(aggregatelinksModel(linksData,linksModel) and sameas(linksData,acclinksData)
1473                  and accounting_transferPerLengthNonzero(indicator,acclinksData,transfer_techs,vintage,link_types)), 1)
1474      = smax((linksData,acclinksData)
1475              $(aggregatelinksModel(linksData,linksModel) and sameas(linksData,acclinksData)
1476                  and accounting_transferPerLengthNonzero(indicator,acclinksData,transfer_techs,vintage,link_types)),
1477          accounting_transferPerLengthIn(indicator,acclinksData,transfer_techs,vintage,link_types,"useAnnuity"))
1478      - smin((linksData,acclinksData)
1479              $(aggregatelinksModel(linksData,linksModel) and sameas(linksData,acclinksData)
1480                  and accounting_transferPerLengthNonzero(indicator,acclinksData,transfer_techs,vintage,link_types)),
1481          accounting_transferPerLengthIn(indicator,acclinksData,transfer_techs,vintage,link_types,"useAnnuity"));
1482   
1483  abort$sum(accounting_transferPerLengthChk(indicator,linksModel,transfer_techs,vintage,link_types,pc_accounting_transferPerLength), 1) "Cannot aggregate technologies with different useAnnuity values."
1485   
1486  parameter accounting_transferPerLengthAgg(indicator,linksModel,transfer_techs,vintage,link_types,pc_accounting_transferPerLength);
1487  accounting_transferPerLengthAgg(indicator,linksModel,transfer_techs,vintage,link_types,pc_accounting_transferPerLength)
1488      $sum((linksData,acclinksData)
1489              $(aggregatelinksModel(linksData,linksModel) and sameas(linksData,acclinksData)
1490                  and accounting_transferPerLengthNonzero(indicator,acclinksData,transfer_techs,vintage,link_types)), 1)
1491      = sum((linksData,acclinksData)
1492              $(aggregatelinksModel(linksData,linksModel) and sameas(linksData,acclinksData)
1493                  and accounting_transferPerLengthNonzero(indicator,acclinksData,transfer_techs,vintage,link_types)),
1494          accounting_transferPerLengthIn(indicator,acclinksData,transfer_techs,vintage,link_types,pc_accounting_transferPerLength))
1495      / sum((linksData,acclinksData)
1496              $(aggregatelinksModel(linksData,linksModel) and sameas(linksData,acclinksData)
1497                  and accounting_transferPerLengthNonzero(indicator,acclinksData,transfer_techs,vintage,link_types)),
1498          1);
1499   
1500  parameter accounting_transferPerLength(indicator,linksModel,transfer_techs,vintage,link_types,pc_accounting_transferPerLength);
1501  loop(acclinks,
1502  accounting_transferPerLength(indicator,linksModel,transfer_techs,vintage,link_types,pc_accounting_transferPerLength)
1503      $sum(acclinksData$(map_acclinksToCalc(acclinks,linksModel) and sameas(acclinks,acclinksData)
1504                              and accounting_transferPerLengthIn(indicator,acclinksData,transfer_techs,vintage,link_types,pc_accounting_transferPerLength)), 1)
1505      = sum(acclinksData$(map_acclinksToCalc(acclinks,linksModel) and sameas(acclinks,acclinksData)),
1506              accounting_transferPerLengthIn(indicator,acclinksData,transfer_techs,vintage,link_types,pc_accounting_transferPerLength));
1507  );
1508   
1509  accounting_transferPerLength(indicator,linksModel,transfer_techs,vintage,link_types,pc_accounting_transferPerLength)
1510      $accounting_transferPerLengthAgg(indicator,linksModel,transfer_techs,vintage,link_types,pc_accounting_transferPerLength)
1511      = accounting_transferPerLengthAgg(indicator,linksModel,transfer_techs,vintage,link_types,pc_accounting_transferPerLength);
1512   
1513  * option kill %paramName%Nonzero %paramName%Chk %paramName%Agg
BATINCLUDE C:\Local\REMix\framework\remix\framework\model\source\battools\aggregateAccountingMean.gms
1515  * SPDX-FileCopyrightText: Copyright (c) 2023 German Aerospace Center (DLR)
1516  * SPDX-License-Identifier: BSD-3-Clause
1517   
1519   
1521   
1522  set accounting_sourcesinkFlowNonzero(indicator,accnodesData,years,sourcesink_techs,commodity);
1523  accounting_sourcesinkFlowNonzero(indicator,accnodesData,years,sourcesink_techs,commodity)
1524      $sum(pc_accounting_sourcesinkFlow$accounting_sourcesinkFlowIn(indicator,accnodesData,years,sourcesink_techs,commodity,pc_accounting_sourcesinkFlow), 1)
1525      = yes;
1526   
1528   
1529  parameter accounting_sourcesinkFlowAgg(indicator,nodesModel,years,sourcesink_techs,commodity,pc_accounting_sourcesinkFlow);
1530  accounting_sourcesinkFlowAgg(indicator,nodesModel,years,sourcesink_techs,commodity,pc_accounting_sourcesinkFlow)
1531      $sum((nodesData,accnodesData)
1532              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1533                  and accounting_sourcesinkFlowNonzero(indicator,accnodesData,years,sourcesink_techs,commodity)), 1)
1534      = sum((nodesData,accnodesData)
1535              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1536                  and accounting_sourcesinkFlowNonzero(indicator,accnodesData,years,sourcesink_techs,commodity)),
1537          accounting_sourcesinkFlowIn(indicator,accnodesData,years,sourcesink_techs,commodity,pc_accounting_sourcesinkFlow))
1538      / sum((nodesData,accnodesData)
1539              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1540                  and accounting_sourcesinkFlowNonzero(indicator,accnodesData,years,sourcesink_techs,commodity)),
1541          1);
1542   
1543  parameter accounting_sourcesinkFlow(indicator,nodesModel,years,sourcesink_techs,commodity,pc_accounting_sourcesinkFlow);
1544  loop(accnodes,
1545  accounting_sourcesinkFlow(indicator,nodesModel,years,sourcesink_techs,commodity,pc_accounting_sourcesinkFlow)
1546      $sum(accnodesData$(map_accnodesToCalc(accnodes,nodesModel) and sameas(accnodes,accnodesData)
1547                              and accounting_sourcesinkFlowIn(indicator,accnodesData,years,sourcesink_techs,commodity,pc_accounting_sourcesinkFlow)), 1)
1548      = sum(accnodesData$(map_accnodesToCalc(accnodes,nodesModel) and sameas(accnodes,accnodesData)),
1549              accounting_sourcesinkFlowIn(indicator,accnodesData,years,sourcesink_techs,commodity,pc_accounting_sourcesinkFlow));
1550  );
1551   
1552  accounting_sourcesinkFlow(indicator,nodesModel,years,sourcesink_techs,commodity,pc_accounting_sourcesinkFlow)
1553      $accounting_sourcesinkFlowAgg(indicator,nodesModel,years,sourcesink_techs,commodity,pc_accounting_sourcesinkFlow)
1554      = accounting_sourcesinkFlowAgg(indicator,nodesModel,years,sourcesink_techs,commodity,pc_accounting_sourcesinkFlow);
1555   
1556  * option kill %paramName%Nonzero %paramName%Chk %paramName%Agg
1557   
1558  parameter accounting_indicatorBounds_links(linksModel,years,indicator,pc_accounting_indicatorBounds_links);
1559  accounting_indicatorBounds_links(linksModelToCalc,yearsToCalc,indicator,pc_accounting_indicatorBounds_links)
1560      = sum((linksData)$sameas(linksModelToCalc,linksData),
1561              accounting_indicatorBounds_linksIn(linksData,yearsToCalc,indicator,pc_accounting_indicatorBounds_links));
1562   
1563  accounting_indicatorBounds_links(linksModelToCalc,yearsToCalc,indicator,pc_accounting_indicatorBounds_links)
1564      = sum((linksData)$links_aggregate(linksModelToCalc,linksData),
1565              accounting_indicatorBounds_linksIn(linksData,yearsToCalc,indicator,pc_accounting_indicatorBounds_links));
1566   
1567  parameter accounting_indicatorBounds(accNodesModel,accYears,indicator,pc_accounting_indicatorBounds);
1568  accounting_indicatorBounds(accNodesModel,accYears,indicator,pc_accounting_indicatorBounds)
1569      = sum (accNodesData$sameas(accNodesModel,accNodesData),
1570          accounting_indicatorBoundsIn(accNodesData,accYears,indicator,pc_accounting_indicatorBounds));
1571   
1572  accounting_indicatorBounds(accNodesModel,accYears,indicator,pc_accounting_indicatorBounds)
1573      $(sum (nodesModel$sameas(accNodesModel,nodesModel), 1) > 0)
1574      = sum ((accNodesData,nodesData,nodesModel)
1575              $(aggregateNodesModel(nodesData,nodesModel) and sameas(accNodesModel,nodesModel) and sameas(accNodesData,nodesData)),
1576          accounting_indicatorBoundsIn(accNodesData,accYears,indicator,pc_accounting_indicatorBounds));
1577   
1578  set accounting_perIndicatorNonzero(indicator,indicator_a,accNodesData,accYears);
1579  accounting_perIndicatorNonzero(indicator,indicator_a,accNodesData,accYears)
1580      $sum(pc_accounting_perIndicator$accounting_perIndicatorIn(indicator,indicator_a,accNodesData,accYears,pc_accounting_perIndicator), 1)
1581      = yes;
1582   
1583  parameter accounting_perIndicatorAgg(indicator,indicator_a,nodesModel,accYears,pc_accounting_perIndicator);
1584  accounting_perIndicatorAgg(indicator,indicator_a,nodesModel,accYears,pc_accounting_perIndicator)
1585      $sum((nodesData,accnodesData)
1586              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1587                  and accounting_perIndicatorNonzero(indicator,indicator_a,accnodesData,accYears)), 1)
1588      = sum((nodesData,accnodesData)
1589              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1590                  and accounting_perIndicatorNonzero(indicator,indicator_a,accnodesData,accYears)),
1591          accounting_perIndicatorIn(indicator,indicator_a,accnodesData,accYears,pc_accounting_perIndicator))
1592      / sum((nodesData,accnodesData)
1593              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1594                  and accounting_perIndicatorNonzero(indicator,indicator_a,accnodesData,accYears)),
1595          1);
1596   
1597  parameter accounting_perIndicator(indicator,indicator_a,accNodesModel,accYears,pc_accounting_perIndicator);
1598   
1599  loop(accNodes,
1600  accounting_perIndicator(indicator,indicator_a,accNodesModel,accYears,pc_accounting_perIndicator)
1601      $(sum(accNodesData$(sameas(accNodes,accNodesData)
1602              and accounting_perIndicatorIn(indicator,indicator_a,accNodesData,"horizon",pc_accounting_perIndicator)), 1)
1603          and map_accNodes(accNodesModel,accNodes)
1604              )
1605      = sum(accNodesData$(sameas(accNodes,accNodesData)),
1606              accounting_perIndicatorIn(indicator,indicator_a,accNodesData,"horizon",pc_accounting_perIndicator));
1607   
1608  accounting_perIndicator(indicator,indicator_a,accNodesModel,accYears,pc_accounting_perIndicator)
1609      $(sum(accNodesData$(sameas(accNodes,accNodesData)
1610              and accounting_perIndicatorIn(indicator,indicator_a,accNodesData,accYears,pc_accounting_perIndicator)), 1)
1611          and map_accNodes(accNodesModel,accNodes)
1612          and not sameas(accYears, "horizon"))
1613      = sum(accNodesData$(sameas(accNodes,accNodesData)),
1614              accounting_perIndicatorIn(indicator,indicator_a,accNodesData,accYears,pc_accounting_perIndicator));
1615  );
1616   
1617  accounting_perIndicator(indicator,indicator_a,accNodesModel,accYears,pc_accounting_perIndicator)
1618      $sum(nodesModel$(accounting_perIndicatorAgg(indicator,indicator_a,nodesModel,"horizon",pc_accounting_perIndicator)
1619          and sameas(accNodesModel,nodesModel)), 1)
1620      = sum(nodesModel$sameas(accNodesModel,nodesModel),
1621          accounting_perIndicatorAgg(indicator,indicator_a,nodesModel,"horizon",pc_accounting_perIndicator));
1622   
1623  accounting_perIndicator(indicator,indicator_a,accNodesModel,accYears,pc_accounting_perIndicator)
1624      $sum(nodesModel$(accounting_perIndicatorAgg(indicator,indicator_a,nodesModel,accYears,pc_accounting_perIndicator)
1625          and sameas(accNodesModel,nodesModel) and not sameas(accYears, "horizon")), 1)
1626      = sum(nodesModel$sameas(accNodesModel,nodesModel),
1627          accounting_perIndicatorAgg(indicator,indicator_a,nodesModel,accYears,pc_accounting_perIndicator));
1628   
1629   
1630  * Make sure all required indicators end up in the model
1631  set activeIndicators(accNodesModel,accYears,indicator);
1632  activeIndicators(accNodesModel,accYears,indicator)
1633     $((accounting_indicatorBounds(accNodesModel,accYears,indicator,"obj") <> 0
1636        or accounting_indicatorBounds(accNodesModel,accYears,indicator,"useFixed") <> 0
1637        or accounting_indicatorBounds(accNodesModel,accYears,indicator,"useLower") <> 0
1638        or accounting_indicatorBounds(accNodesModel,accYears,indicator,"useUpper") <> 0 )
1639          and not accounting_indicatorBounds(accNodesModel,accYears,indicator,"isVariable"))
1640     = yes;
1641   
1642  set activeIndicators_links(linksModel,years,indicator);
1643  activeIndicators_links(linksModelToCalc,yearsToCalc,indicator)
1644     $(accounting_indicatorBounds_links(linksModelToCalc,yearsToCalc,indicator,"useFixed") <> 0
1645        or accounting_indicatorBounds_links(linksModelToCalc,yearsToCalc,indicator,"useLower") <> 0
1646        or accounting_indicatorBounds_links(linksModelToCalc,yearsToCalc,indicator,"useUpper") <> 0 )
1647     = yes;
1648   
1649  set variableIndicators(accNodesModel,accYears,indicator);
1650  variableIndicators(accNodesModel,accYears,indicator)
1651     $(accounting_indicatorBounds(accNodesModel,accYears,indicator,"obj") = 0
1652        and accounting_indicatorBounds(accNodesModel,accYears,indicator,"isVariable"))
1653     = yes;
1654   
1655  * Calculate length of years and discount rates per indicator
1656  parameter yearFactor(accNodesModel,accYears,indicator,accYears);
1657  yearFactor(accNodesModel,accYears,indicator,accYears_a)
1658      $(map_accYears(accYears_a,accYears)
1659          and sum(yearsToCalc$(sameas(yearsToCalc,accYears_a)), 1))
1660      = 1;
1661   
1662  yearFactor(accNodesModel,accYears,indicator,accYears_a)
1663      $(map_accYears(accYears_a,accYears)
1664          and sum(yearsToCalc$(sameas(yearsToCalc,accYears_a)), 1)
1665          and accounting_indicatorBounds(accNodesModel,accYears,indicator,"integral"))
1666      = sum(yearsToCalc$sameas(accYears_a,yearsToCalc), yearsLen(yearsToCalc));
1667   
1668  yearFactor(accNodesModel,accYears,indicator,accYears_a)
1669      $(map_accYears(accYears_a,accYears)
1670          and sum(yearsToCalc$(sameas(yearsToCalc,accYears_a)), 1)
1671          and accounting_indicatorBounds(accNodesModel,accYears,indicator,"integral")
1672          and accounting_indicatorBounds(accNodesModel,accYears,indicator,"endyear")
1673          and yearFactor(accNodesModel,accYears,indicator,accYears_a) = inf)
1674      = accounting_indicatorBounds(accNodesModel,accYears,indicator,"endyear");
1675   
1676  yearFactor(accNodesModel,accYears,indicator,accYears_a)
1677      $(map_accYears(accYears_a,accYears)
1678          and sum(yearsToCalc$(sameas(yearsToCalc,accYears_a)), 1)
1679          and accounting_indicatorBounds(accNodesModel,accYears,indicator,"integral")
1680          and accounting_indicatorBounds(accNodesModel,accYears,indicator,"discount"))
1681      = yearFactor(accNodesModel,accYears,indicator,accYears_a)
1682          * (1 - accounting_indicatorBounds(accNodesModel,accYears,indicator,"discount"))
1683                  ** (accYears_a.val - smin(yearsToCalc, yearsToCalc.val));
1684   
1685   
1686  * ==== calculate compound indicators for the optimization ====
1687  scalar compIndicators_pre;
1688  scalar compIndicators_post;
1689   
1690  parameter compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a);
1691  compoundIndicators(accNodesModel,accYears,indicator,accNodesModel,accYears,indicator)
1692      $activeIndicators(accNodesModel,accYears,indicator) = 1;
1693   
1694  set compoundIndicators_act(accNodesModel,accYears,indicator);
1695  option compoundIndicators_act < compoundIndicators;
1696   
1697  parameter compoundIndicatorsExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa);
1698  parameter compoundIndicatorsExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a);
1699  compoundIndicatorsExt(accNodesModel,accYears,indicator,accNodesModel,accYears,indicator,accNodesModel,accYears,indicator)
1700      $compoundIndicators_act(accNodesModel,accYears,indicator) = 1;
1701   
1702  compIndicators_pre = 0;
1703  compIndicators_post = 1;
1704   
1705  option sparseval = 1;
1706  while(compIndicators_pre < compIndicators_post,
1707      compIndicators_pre = sum((accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa)
1708          $compoundIndicatorsExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa), 1);
1709   
1710      compoundIndicatorsExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa)
1711          $(compoundIndicators_act(accNodesModel,accYears,indicator)
1712              and compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
1713              and not accounting_indicatorBounds(accNodesModel_a,accYears_a,indicator_a,"isVariable")
1714              and map_accNodes(accNodesModel_aa,accNodesModel_a)
1715              and map_accYears(accYears_aa,accYears_a))
1716          = compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
1717              * accounting_perIndicator(indicator_a,indicator_aa,accNodesModel_aa,accYears_aa,"perIndicator");
1718   
1719      option compoundIndicatorsExt_r < compoundIndicatorsExt;
1720   
1721      compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa)
1722          $(compoundIndicators_act(accNodesModel,accYears,indicator)
1723              and sum((accNodesModel_a,accYears_a,indicator_a)
1724                      $compoundIndicatorsExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a), 1) = 1)
1725          = sum((accNodesModel_a,accYears_a,indicator_a)
1726                  $(compoundIndicatorsExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a)),
1727              compoundIndicatorsExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a));
1728   
1729      compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa)
1730          $(compoundIndicators_act(accNodesModel,accYears,indicator)
1731              and sum((accNodesModel_a,accYears_a,indicator_a)
1732                      $compoundIndicatorsExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a), 1) > 1)
1733          = sum((accNodesModel_a,accYears_a,indicator_a)
1734                  $(compoundIndicatorsExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a)
1735                      and not (sameas(accNodesModel, accNodesModel_a) and sameas(accYears, accYears_a) and sameas(indicator, indicator_a))),
1736              compoundIndicatorsExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a))
1737          / sum((accNodesModel_a,accYears_a,indicator_a)
1738                  $(compoundIndicatorsExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a)
1739                      and not (sameas(accNodesModel, accNodesModel_a) and sameas(accYears, accYears_a) and sameas(indicator, indicator_a))), 1);
1740   
1741      option compoundIndicators_act < compoundIndicators;
1742      compIndicators_post = sum((accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa)
1743          $compoundIndicatorsExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa), 1);
1744  );
1745  option sparseval = 0;
1746   
1747  * map to sub-years and sub-nodes
1748  compoundIndicatorsExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_a)
1749      $(compoundIndicators_act(accNodesModel,accYears,indicator)
1750          and compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
1751          and map_accYears(accYears_aa,accYears_a)
1752          and map_accNodes(accNodesModel_aa,accNodesModel_a))
1753      = compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
1754          * yearFactor(accNodesModel,accYears,indicator,accYears_aa);
1755   
1756  * Remove all accounting regions and accounting years
1757  compoundIndicatorsExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa)
1758      $(compoundIndicatorsExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa)
1759          and not accounting_indicatorBounds(accNodesModel_aa,accYears_aa,indicator_aa,"isVariable")
1760          and sum(accNodes$(sameas(accNodes,accNodesModel_aa)), 1)
1761              or sameas("horizon",accYears_aa))
1762      = 0;
1763   
1764  * Map from extended parameter to final parameter
1765  option compoundIndicatorsExt_r < compoundIndicatorsExt;
1766  compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa)
1767      $(compoundIndicators_act(accNodesModel,accYears,indicator)
1768          and sum((accNodesModel_a,accYears_a,indicator_a)
1769                  $compoundIndicatorsExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a), 1) = 1)
1770      = sum((accNodesModel_a,accYears_a,indicator_a)
1771              $(compoundIndicatorsExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a)),
1772          compoundIndicatorsExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a));
1773   
1774  compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa)
1775      $(compoundIndicators_act(accNodesModel,accYears,indicator)
1776          and sum((accNodesModel_a,accYears_a,indicator_a)
1777                  $compoundIndicatorsExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a), 1) > 1)
1778      = sum((accNodesModel_a,accYears_a,indicator_a)
1779              $(compoundIndicatorsExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a)
1780                  and not (sameas(accNodesModel, accNodesModel_a) and sameas(accYears, accYears_a) and sameas(indicator, indicator_a))),
1781          compoundIndicatorsExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a))
1782      / sum((accNodesModel_a,accYears_a,indicator_a)
1783              $(compoundIndicatorsExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a)
1784                  and not (sameas(accNodesModel, accNodesModel_a) and sameas(accYears, accYears_a) and sameas(indicator, indicator_a))), 1);
1785   
1786  * Remove all accounting regions and accounting years
1787  compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
1788      $(compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
1789          and not accounting_indicatorBounds(accNodesModel_a,accYears_a,indicator_a,"isVariable")
1790          and (sum(accNodes$(sameas(accNodes,accNodesModel_a)), 1)
1791              or sameas("horizon",accYears_a)))
1792      = 0;
1793   
1794  * Remove all slack indicators except the ones declared in indicatorBounds
1795  compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
1796      $(compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
1797          and sum((accNodesModel_aa,accYears_aa)$accounting_indicatorBounds(accNodesModel_aa,accYears_aa,indicator_a,"isVariable"), 1)
1798          and not accounting_indicatorBounds(accNodesModel_a,accYears_a,indicator_a,"isVariable"))
1799      = 0;
1800   
1801  * ==== compound indicators for the post calculation ====
1802  parameter compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a);
1803  compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel,accYears,indicator)
1804      $(sum(nodesModelToCalc$map_accNodesToCalc(accNodesModel,nodesModelToCalc), 1)
1805          and sum(yearsToCalc$map_accYearsToCalc(accYears,yearsToCalc), 1)) = 1;
1806   
1807  set compoundIndicatorsFull_act(accNodesModel,accYears,indicator);
1808  option compoundIndicatorsFull_act < compoundIndicatorsFull;
1809   
1810  parameter compoundIndicatorsFullExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa);
1811  parameter compoundIndicatorsFullExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a);
1812  compoundIndicatorsFullExt(accNodesModel,accYears,indicator,accNodesModel,accYears,indicator,accNodesModel,accYears,indicator) = 1;
1813   
1814  compIndicators_pre = 0;
1815  compIndicators_post = 1;
1816   
1817  option sparseval = 1;
1818  while(compIndicators_pre < compIndicators_post,
1819      compIndicators_pre = sum((accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa)
1820          $compoundIndicatorsFullExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa), 1);
1821   
1822      compoundIndicatorsFullExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa)
1823          $(compoundIndicatorsFull_act(accNodesModel,accYears,indicator)
1824              and compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
1825              and not accounting_indicatorBounds(accNodesModel_a,accYears_a,indicator_a,"isVariable")
1826              and map_accNodes(accNodesModel_aa,accNodesModel_a)
1827              and map_accYears(accYears_aa,accYears_a))
1828          = compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
1829              * accounting_perIndicator(indicator_a,indicator_aa,accNodesModel_aa,accYears_aa,"perIndicator");
1830   
1831      option compoundIndicatorsFullExt_r < compoundIndicatorsFullExt;
1832   
1833      compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa)
1834          $(compoundIndicatorsFull_act(accNodesModel,accYears,indicator)
1835              and sum((accNodesModel_a,accYears_a,indicator_a)
1836                      $compoundIndicatorsFullExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a), 1) = 1)
1837          = sum((accNodesModel_a,accYears_a,indicator_a)
1838                  $(compoundIndicatorsFullExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a)),
1839              compoundIndicatorsFullExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a));
1840   
1841      compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa)
1842          $(compoundIndicatorsFull_act(accNodesModel,accYears,indicator)
1843              and sum((accNodesModel_a,accYears_a,indicator_a)
1844                      $compoundIndicatorsFullExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a), 1) > 1)
1845          = sum((accNodesModel_a,accYears_a,indicator_a)
1846                  $(compoundIndicatorsFullExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a)
1847                      and not (sameas(accNodesModel, accNodesModel_a) and sameas(accYears, accYears_a) and sameas(indicator, indicator_a))),
1848              compoundIndicatorsFullExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a))
1849          / sum((accNodesModel_a,accYears_a,indicator_a)
1850                  $(compoundIndicatorsFullExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a)
1851                      and not (sameas(accNodesModel, accNodesModel_a) and sameas(accYears, accYears_a) and sameas(indicator, indicator_a))), 1);
1852   
1853      option compoundIndicatorsFull_act < compoundIndicatorsFull;
1854      compIndicators_post = sum((accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa)
1855          $compoundIndicatorsFullExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa), 1);
1856  );
1857  option sparseval = 0;
1858   
1859  * map to sub-years and sub-nodes
1860  compoundIndicatorsFullExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_a)
1861      $(compoundIndicatorsFull_act(accNodesModel,accYears,indicator)
1862          and compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
1863          and map_accYears(accYears_aa,accYears_a)
1864          and map_accNodes(accNodesModel_aa,accNodesModel_a))
1865      = compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
1866          * yearFactor(accNodesModel,accYears,indicator,accYears_aa);
1867   
1868  * Remove all accounting regions and accounting years
1869  compoundIndicatorsFullExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa)
1870      $(compoundIndicatorsFullExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa)
1871          and not accounting_indicatorBounds(accNodesModel_aa,accYears_aa,indicator_aa,"isVariable")
1872          and sum(accNodes$(sameas(accNodes,accNodesModel_aa)), 1)
1873              or sameas("horizon",accYears_aa))
1874      = 0;
1875   
1876  * Map from extended parameter to final parameter
1877  option compoundIndicatorsFullExt_r < compoundIndicatorsFullExt;
1878  compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa)
1879      $(compoundIndicatorsFull_act(accNodesModel,accYears,indicator)
1880          and sum((accNodesModel_a,accYears_a,indicator_a)
1881                  $compoundIndicatorsFullExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a), 1) = 1)
1882      = sum((accNodesModel_a,accYears_a,indicator_a)
1883              $(compoundIndicatorsFullExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a)),
1884          compoundIndicatorsFullExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a));
1885   
1886  compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa)
1887      $(compoundIndicatorsFull_act(accNodesModel,accYears,indicator)
1888          and sum((accNodesModel_a,accYears_a,indicator_a)
1889                  $compoundIndicatorsFullExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a), 1) > 1)
1890      = sum((accNodesModel_a,accYears_a,indicator_a)
1891              $(compoundIndicatorsFullExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a)
1892                  and not (sameas(accNodesModel, accNodesModel_a) and sameas(accYears, accYears_a) and sameas(indicator, indicator_a))),
1893          compoundIndicatorsFullExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a))
1894      / sum((accNodesModel_a,accYears_a,indicator_a)
1895              $(compoundIndicatorsFullExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a)
1896                  and not (sameas(accNodesModel, accNodesModel_a) and sameas(accYears, accYears_a) and sameas(indicator, indicator_a))), 1);
1897   
1898  * Remove all accounting regions and accounting years
1899  compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
1900      $(compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
1901          and not accounting_indicatorBounds(accNodesModel_a,accYears_a,indicator_a,"isVariable")
1902          and (sum(accNodes$(sameas(accNodes,accNodesModel_a)), 1)
1903              or sameas("horizon",accYears_a)))
1904      = 0;
1905   
1906  * Remove all slack indicators except the ones declared in indicatorBounds
1907  compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
1908      $(compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
1909          and sum((accNodesModel_aa,accYears_aa)$accounting_indicatorBounds(accNodesModel_aa,accYears_aa,indicator_a,"isVariable"), 1)
1910          and not accounting_indicatorBounds(accNodesModel_a,accYears_a,indicator_a,"isVariable"))
1911      = 0;
1912   
1913  * Check if the objective value and optimization sense is set correctly
1914  scalar opti_values, opti_sense;
1915  opti_values = sum((accNodesModel,accYears,indicator)$(accounting_indicatorBounds(accNodesModel,accYears,indicator,"obj") <> 0), 1);
1916  opti_sense = sum((accNodesModel,accYears,indicator), accounting_indicatorBounds(accNodesModel,accYears,indicator,"obj"));
1917  abort$(opti_values < 1)
1918      "Accounting: No indicator specified as objective value"
1919  abort$(opti_values > 1)
1920      "Accounting: Too many indicators specified as objective value"
1921  abort$(opti_sense <> -1 and opti_sense <> 1)
1922      "Accounting: Optimization sense has to be either -1 or 1"
INCLUDE    C:\Local\REMix\framework\remix\framework\model\source\accounting\annuities.gms
1924  * SPDX-FileCopyrightText: Copyright (c) 2023 German Aerospace Center (DLR)
1925  * SPDX-License-Identifier: BSD-3-Clause
1926   
1927  * Calculation of annuities
1928   
1929  abort$(sum((indicator,nodesModelToCalc,converter_techs,vintage)
1930          $(accounting_converterUnits(indicator,nodesModelToCalc,converter_techs,vintage,"useAnnuity") = 1
1931          and accounting_converterUnits(indicator,nodesModelToCalc,converter_techs,vintage,"amorTime") < 1), 1) > 0 )
1932      "Accounting: Some converter technologies use annuities but have no amortization time"
1933   
1934  parameter accounting_annuityFactor_converter(indicator,nodesModel,converter_techs,vintage);
1935  accounting_annuityFactor_converter(indicator,nodesModelToCalc,converter_techs,vintage)
1936      $accounting_converterUnits(indicator,nodesModelToCalc,converter_techs,vintage,"useAnnuity")
1937      =
1938      accounting_converterUnits(indicator,nodesModelToCalc,converter_techs,vintage,"interest")
1939          * (1 + accounting_converterUnits(indicator,nodesModelToCalc,converter_techs,vintage,"interest"))
1940          ** accounting_converterUnits(indicator,nodesModelToCalc,converter_techs,vintage,"amorTime")
1941      / ((1 + accounting_converterUnits(indicator,nodesModelToCalc,converter_techs,vintage,"interest"))
1942          ** accounting_converterUnits(indicator,nodesModelToCalc,converter_techs,vintage,"amorTime") - 1);
1943   
1944   
1945  abort$(sum((indicator,nodesModelToCalc,storage_techs,vintage)
1946          $(accounting_storageUnits(indicator,nodesModelToCalc,storage_techs,vintage,"useAnnuity") = 1
1947          and accounting_storageUnits(indicator,nodesModelToCalc,storage_techs,vintage,"amorTime") < 1), 1) > 0 )
1948      "Accounting: Some storage technologies use annuities but have no amortization time"
1949   
1950  parameter accounting_annuityFactor_storage(indicator,nodesModel,storage_techs,vintage);
1951  accounting_annuityFactor_storage(indicator,nodesModelToCalc,storage_techs,vintage)
1952      $accounting_storageUnits(indicator,nodesModelToCalc,storage_techs,vintage,"useAnnuity")
1953      =
1954      accounting_storageUnits(indicator,nodesModelToCalc,storage_techs,vintage,"interest")
1955          * (1 + accounting_storageUnits(indicator,nodesModelToCalc,storage_techs,vintage,"interest"))
1956          ** accounting_storageUnits(indicator,nodesModelToCalc,storage_techs,vintage,"amorTime")
1957      / ((1 + accounting_storageUnits(indicator,nodesModelToCalc,storage_techs,vintage,"interest"))
1958          ** accounting_storageUnits(indicator,nodesModelToCalc,storage_techs,vintage,"amorTime") - 1);
1959   
1960   
1961  abort$(sum((indicator,linksModelToCalc,transfer_techs,vintage)
1962          $(accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"useAnnuity") = 1
1963          and accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"amorTime") < 1), 1) > 0 )
1964      "Accounting: Some transfer technologies use annuities but have no amortization time"
1965   
1966  parameter accounting_annuityFactor_transferLink(indicator,linksModel,transfer_techs,vintage);
1967  accounting_annuityFactor_transferLink(indicator,linksModelToCalc,transfer_techs,vintage)
1968      $accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"useAnnuity")
1969      =
1970      accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"interest")
1971          * (1 + accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"interest"))
1972          ** accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"amorTime")
1973      / ((1 + accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"interest"))
1974          ** accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"amorTime") - 1);
1975   
1976   
1977   
1978  abort$(sum((indicator,linksModelToCalc,transfer_techs,vintage,link_types)
1979          $(accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"useAnnuity") = 1
1980          and accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"amorTime") < 1), 1) > 0 )
1981      "Accounting: Some transfer-per-length technologies use annuities but have no amortization time"
1982   
1983  parameter accounting_annuityFactor_transferDistance(indicator,linksModel,transfer_techs,vintage,link_types);
1984  accounting_annuityFactor_transferDistance(indicator,linksModelToCalc,transfer_techs,vintage,link_types) = 1;
1985   
1986  accounting_annuityFactor_transferDistance(indicator,linksModelToCalc,transfer_techs,vintage,link_types)
1987      $accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"useAnnuity")
1988      =
1989      accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"interest")
1990          * (1 + accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"interest"))
1991          ** accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"amorTime")
1992      / ((1 + accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"interest"))
1993          ** accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"amorTime") - 1);
1994   
INCLUDE    C:\Local\REMix\framework\remix\framework\model\source\methods\mga_pre.gms
1996  * SPDX-FileCopyrightText: Copyright (c) 2023 German Aerospace Center (DLR)
1997  * SPDX-License-Identifier: BSD-3-Clause
1998   
INCLUDE    C:\Local\REMix\framework\remix\framework\model\source\methods\pareto_pre.gms
2002  * SPDX-FileCopyrightText: Copyright (c) 2023 German Aerospace Center (DLR)
2003  * SPDX-License-Identifier: BSD-3-Clause
2004   
INCLUDE    C:\Local\REMix\framework\remix\framework\model\source\postcalc\declaration.gms
2008  * SPDX-FileCopyrightText: Copyright (c) 2023 German Aerospace Center (DLR)
2009  * SPDX-License-Identifier: BSD-3-Clause
2010  * // # Output data
2011  * // This is the reference data model of the REMix output.
2012  * //
2013  * // ## Standard output
2016   
2023   
2025   
2026  set capType / "build", "decom", "total", "lowerLimit", "upperLimit", "total_degraded" /;
2027  set balanceType / "netto", "brutto", "positive", "negative", "flh" /;
2028  set profileType / "upper", "fixed", "lower" /;
2029  set r2a_has_converter_cost(indicator,nodesModel,years,techs,vintage,commodity);
2030   
2031  ** // OUTPUT: indicator_accounting | OEO_00000350:quantity value
2032  * // ### indicator_accounting
2033  * // Title: Accounting indicators Post-calculation
2034  parameter indicator_accounting(accNodesModel,accYears,indicator) "Post-calculation aggregated indicator accounting" ;
2035  * //
2036  ** // OUTPUT: indicator_accounting_ref | OEO_00000350:quantity value
2037  * // ### indicator_accounting_ref
2038  * // Title: Accounting indicators reference
2039  parameter indicator_accounting_ref(accNodesModel,accYears,indicator) "Indicator accounting optimization levels" ;
2040  * //
2041  ** // OUTPUT: indicator_accounting_comp | OEO_00000350:quantity value
2042  * // ### indicator_accounting_comp
2043  * // Title: Accounting indicators composition
2044  parameter indicator_accounting_comp(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a) "Indicator accounting with other indicator composition" ;
2045  * //
2046  ** // OUTPUT: indicator_accounting_detailed | OEO_00000350:quantity value
2047  * // ### indicator_accounting_detailed
2048  * // Title: Accounting indicators detail
2049  parameter indicator_accounting_detailed(indicator,nodesModel,years,techs) "Indicator accounting with technological composition" ;
2050  * //
2051  ** // OUTPUT: indicator_accounting_links | OEO_00000350:quantity value
2052  * // ### indicator_accounting_links
2053  * // Title: Accounting indicators per transfer link
2054  parameter indicator_accounting_links(indicator,nodesModel,nodesModel_a,linksModel,years,techs) "Indicator accounting of transfer technologies" ;
2055  * //
2056  parameter converter_ratedInput(techs,vintage,commodity);
2057  parameter converter_ratedOutput(techs,vintage,commodity);
2058  parameter converter_ratedOutput_min(nodesModel,years,techs,commodity);
2059  parameter converter_ratedOutput_max(nodesModel,years,techs,commodity);
2060   
2061  ** // OUTPUT: converter_caps | OEO_00010257:power capacity
2062  * // ### converter_caps
2063  * // Title: Coverter capacities post-calculation
2064  parameter converter_caps(accNodesModel,accYears,techs,commodity,capType) "Converter capacities, aggregated total" ;
2065  * //
2066  parameter converter_caps_ext(accNodesModel,nodesModel,accYears,years,techs,vintage,commodity,capType);
2067   
2068  ** // OUTPUT: converter_units | OEO_00000350:quantity value
2069  * // ### converter_units
2070  * // Title: Coverter units post-calculation
2071  parameter converter_units(accNodesModel,accYears,techs,vintage,capType) "Converter units" ;
2072  * //
2073  parameter converter_units_ext(accNodesModel,nodesModel,accYears,years,techs,vintage,capType);
2074   
2075  parameter max_transfer_coefficient(techs,commodity);
2076  parameter min_transfer_coefficient(techs,commodity);
2077  ** // OUTPUT: transfer_links | OEO_00000350:quantity value
2078  * // ### transfer_links
2079  * // Title: Transfer post-calculation
2080  parameter transfer_links(linksModel,years,techs,vintage,capType) "Transfer links" ;
2081  * //
2082  ** // OUTPUT: transfer_caps | OEO_00010257:power capacity
2083  * // ### transfer_caps
2084  * // Title: Transfer capacities post-calculation
2085  parameter transfer_caps(nodesModel_start,nodesModel_end,linksModel,years,techs,commodity,capType) "Transfer capacities, aggregated total" ;
2086  * //
2087  ** // OUTPUT: transfer_flows | OEO_00050019:energy amount value
2088  * // ### transfer_flows
2089  * // Title: Transfer hourly flows
2090  parameter transfer_flows(timeModel,nodesModel_start,nodesModel_end,linksModel,years,techs,commodity) "Hourly link flows" ;
2091  * //
2092  ** // OUTPUT: transfer_flows_annual | OEO_00050019:energy amount value
2093  * // ### transfer_flows_annual
2094  * // Title: Transfer annual flows
2095  parameter transfer_flows_annual(nodesModel_start,nodesModel_end,linksModel,years,techs,commodity,balanceType) "Annual link flows" ;
2096  * //
2097  ** // OUTPUT: transfer_losses | OEO_00050019:energy amount value
2098  * // ### transfer_losses
2099  * // Title: Transfer hourly losses
2100  parameter transfer_losses(timeModel,nodesModel_start,nodesModel_end,linksModel,years,techs,commodity) "Hourly link losses" ;
2101  * //
2102  ** // OUTPUT: transfer_losses_annual | OEO_00050019:energy amount value
2103  * // ### transfer_losses_annual
2104  * // Title: Transfer annual losses
2105  parameter transfer_losses_annual(nodesModel_start,nodesModel_end,linksModel,years,techs,commodity,balanceType) "Annual link losses" ;
2106  * //
2107  parameter storage_size_max(nodesModel,years,techs,commodity);
2108  parameter storage_size_min(nodesModel,years,techs,commodity);
2109  ** // OUTPUT: storage_units |  OEO_00000350:quantity value
2110  * // ### storage_units
2111  * // Title: Storage units post-calculation
2112  parameter storage_units(accNodesModel,accYears,techs,vintage,capType) "Storage units" ;
2113  * //
2114  parameter storage_units_ext(accNodesModel,nodesModel,accYears,years,techs,vintage,capType);
2115  ** // OUTPUT: storage_caps | OEO_00230000:energy storage capacity
2116  * // ### storage_caps
2117  * // Title: Storage capacities post-calculation
2118  parameter storage_caps(accNodesModel,accYears,techs,commodity,capType) "Storage capacities, aggregated total" ;
2119  * //
2120  parameter storage_caps_ext(accNodesModel,nodesModel,accYears,years,techs,vintage,commodity,capType);
2121  ** // OUTPUT: storage_level_out | OEO_00330012:energy storage content
2122  * // ### storage_level_out
2123  * // Title: Storage level
2124  parameter storage_level_out(timeModel,accNodesModel,accYears,techs,commodity) "Storage level per time step" ;
2125  * //
2126  parameter storage_level_out_ext(timeModel,accNodesModel,nodesModel,accYears,years,techs,vintage,commodity);
2127  ** // OUTPUT: storage_flows | OEO_00050019:energy amount value
2128  * // ### storage_flows
2129  * // Title: Storage hourly flows
2130  parameter storage_flows(timeModel,accNodesModel,accYears,techs,commodity) "Storage flows per time step" ;
2131  * //
2132  parameter storage_flows_ext(timeModel,accNodesModel,nodesModel,accYears,years,techs,vintage,commodity);
2133  ** // OUTPUT: storage_flows_annual | OEO_00050019:energy amount value
2134  * // ### storage_flows_annual
2135  * // Title: Storage annual flows
2136  parameter storage_flows_annual(accNodesModel,accYears,techs,commodity,balanceType) "Aggregated storage flows" ;
2137  * //
2138  ** // OUTPUT: storage_losses_out | OEO_00050019:energy amount value
2139  * // ### storage_losses_out
2140  * // Title: Storage hourly losses
2141  parameter storage_losses_out(timeModel,accNodesModel,accYears,techs,commodity) "Storage losses per time step" ;
2142  * //
2143  ** // OUTPUT: storage_losses_annual | OEO_00050019:energy amount value
2144  * // ### storage_losses_annual
2145  * // Title: Storage annual losses
2146  parameter storage_losses_annual(accNodesModel,accYears,techs,commodity,balanceType) "Aggregated storage losses" ;
2147  * //
2148  ** // OUTPUT: commodity_balance | OEO_00000350:quantity value
2149  * // ### commodity_balance
2150  * // Title: Hourly commodity balance
2151  parameter commodity_balance(timeModel,accNodesModel,accYears,techs,commodity) "Commodity balances per model hour" ;
2152  parameter commodity_balance_ext(timeModel,accNodesModel,nodesModel,accYears,years,techs,vintage,commodity);
2153  * //
2154  ** // OUTPUT: commodity_balance_annual | OEO_00000350:quantity value
2155  * // ### commodity_balance_annual
2156  * // Title: Annual commodity balance
2157  parameter commodity_balance_annual(accNodesModel,accYears,techs,commodity,balanceType) "Aggregated commodity balances" ;
2158  * //
2159  ** // OUTPUT: marginals_sourcesink_profile | OEO_00040008:marginal cost
2160  * // ### marginals_sourcesink_profile
2161  * // Title: Source-sink marginals
2162  parameter marginals_sourcesink_profile(timeModel,nodesModel,years,techs,commodity) "Source and sink flow marginal values" ;
2163  * //
2164  ** // OUTPUT: marginals_balance | OEO_00040008:marginal cost
2165  * // ### marginals_balance
2166  * // Title: Nodel balance marginals
2167  parameter marginals_balance(timeModel,nodesModel,years,commodity) "Nodal balance marginal values" ;
2168  * //
2169  ** // OUTPUT: marginals_sourcesink_sum | OEO_00040008:marginal cost
2170  * // ### marginals_sourcesink_sum
2171  * // Title: Source-sink annual marginals
2172  parameter marginals_sourcesink_sum(nodesModel,years,techs,commodity) "Annual source and sink flow marginal values" ;
2173  * //
2174  ** // OUTPUT: marginals_indicator_bounds | OEO_00040008:marginal cost
2175  * // ### marginals_indicator_bounds
2176  * // Title: Indicator bounds marginals
2177  parameter marginals_indicator_bounds(accNodesModel,accYears,indicator) "Accounting indicator marginals" ;
2178  * //
2179  * // ## REMix-AMIRIS interface output
2180  * //
2181  ** // OUTPUT: r2a_annuity_cost_converter | OEO_00040009:cost
2182  * // ### r2a_annuity_cost_converter
2183  * // Title: Converter annuity cost
2184  parameter r2a_annuity_cost_converter(indicator,accNodesModel,accYears,techs,vintage,commodity) "Annuity cost of converters" ;
2185  * //
2186  ** // OUTPUT: r2a_spec_cost_converter | OEO_00040009:cost
2187  * // ### r2a_spec_cost_converter
2188  * // Title: Converter specific cost
2189  parameter r2a_spec_cost_converter(indicator,accNodesModel,accYears,techs,vintage,commodity) "Specific cost of converters" ;
2190  * //
2191  ** // OUTPUT: r2a_spec_cost_fuel | OEO_00040009:cost
2192  * // ### r2a_spec_cost_fuel
2193  * // Title: Commodity specific cost
2194  parameter r2a_spec_cost_fuel(indicator,accNodesModel,accYears,techs,commodity) "Specific cost of commodities, used particularly for fuels" ;
2195  * //
2196  ** // OUTPUT: r2a_spec_cost_indicator | OEO_00040009:cost
2197  * // ### r2a_spec_cost_indicator
2198  * // Title: Indicator specific cost
2199  parameter r2a_spec_cost_indicator(indicator,indicator_a,accNodesModel,accYears) "Specific indicator cost" ;
2200  * //
2201  ** // OUTPUT: r2a_converter_efficiencies | OEO_00140050:efficiency value
2202  * // ### r2a_converter_efficiencies
2203  * // Title: Indicator specific cost
2204  parameter r2a_converter_efficiencies(techs,vintage,activity,commodity,commodity_a) "Converter-specific efficiency" ;
2205  * //
2206  ** // OUTPUT: r2a_converter_avail_factor | OEO_00000350:quantity value
2207  * // ### r2a_converter_avail_factor
2208  * // Title: Converter availability factor
2209  parameter r2a_converter_avail_factor(accNodesModel,accYears,techs,vintage) "Availability factor of converter technologies" ;
2210  parameter r2a_converter_avail_profile(timeModel,accNodesModel,accYears,techs,commodity,profileType) "Availability of converter technologies" ;
2211  parameter r2a_converter_avail_profile_ext(timeModel,accNodesModel,nodesModel,accYears,years,techs,vintage,commodity,profileType);
2212  * //
2213  ** // OUTPUT: r2a_storage_e2p | OEO_00000350:quantity value
2214  * // ### r2a_storage_e2p
2215  * // Title: E2P Storage
2216  parameter r2a_storage_e2p(accNodesModel,accYears,techs,vintage,commodity,capType) "Energy-to-power ratio" ;
2217  * //
2218  ** // OUTPUT: r2a_storage_selfdischarge | OEO_00000350:quantity value
2219  * // ### r2a_storage_selfdischarge
2220  * // Title: Storage self discharge rates
2221  parameter r2a_storage_selfdischarge(accNodesModel,accYears,techs,vintage,commodity);
2222   
INCLUDE    C:\Local\REMix\framework\remix\framework\model\source\loadgdx.gms
2226  * SPDX-FileCopyrightText: Copyright (c) 2023 German Aerospace Center (DLR)
2227  * SPDX-License-Identifier: BSD-3-Clause
2228   
2229  * ==== global settings ====
2231   
2233   
INCLUDE    C:\Local\REMix\framework\remix\framework\model\source\core\converter.gms
2235  * SPDX-FileCopyrightText: Copyright (c) 2023 German Aerospace Center (DLR)
2236  * SPDX-License-Identifier: BSD-3-Clause
2237   
2238  * // # core_converter
2239  * // The equations in this file describe the converters in the model.
2240   
2241  * // ## Advanced features
2242  * //
2243  * // You can find a more detailed explanation of the %curly_open%ref%curly_close%`MIP features <explanations_mip_label>`.
2244  ** // There is also a more detailed explanation on the modeling of outages at the %curly_open%ref%curly_close%`resilience section <explanations_resilience_label>`.
2245  * //
2246  * // In the following table you can see which modifications you have to make to your data to use the different features.
2247  * //
2248  * // | Feature | Modification |
2249  * // | ------ | ------ |
2250  * // | MIP expansion | The converter_tech_Parameter "mipUnits" has to be set to 1 in converter_techParam.dat for the technologies and years where descrete expansion is wanted |
2251  * // | Minimum up/downtime | The converter_tech_Parameters "minUptime" and/or "minDowntime" need to be set to the according amount of minimum time steps.Furthermore, the converter_tech_Parameter "mipDispatch" has to be set to 1 in converter_techParam.dat
2252  * // for the technologies and years where a minimum up- or downtime should be applied so that the units can be shut down. "mipUnits" will automatically be set to 1 |
2253  * // | Partial load | The converter_tech_Parameter "mipDispatch" has to be set to 1 in converter_techParam.dat for the technologies and years where you want to make use of the partial load feature. You also have to set a value to
2254  * // the converter_coefficient_parameters "minLoad" and/or "maxLoad" for the according technologies, vintages, activities and commodities. You can then for example set different "coefficient" values for each activity in converter_coefficient.dat |
2255  ** // | Outages | You have to include the converter_outageProfile.dat-file and while executing the model you have to set --method=resilience |
2256   
2257  * // ## %curly_open%ref%curly_close%`sets <remix_model_sets_label>`
2258  * //
2259  * // ### set_converter_techs.dat
2260  * // In this file all converter technologies are listed that can be used within your model.
2261  * //
2262  * // ### set_activities.dat
2263  * // All modes with which the converter technologies can be operated need to be added here.
2264  * // Examples: Charge (for the charging mode of a storage), Powergen (for the mode in which a converter produces electricity), Curtailment (for the mode in which a renewable power plant is shut down), …
2265  * // If you would like to use the partial load feature, all activity modes that should be available for this feature need to be defined here as well.
2266  * //
2267  * // ### set_commodities.dat
2268  * // In this file all commodities are listed that can be used and converted by the converter technologies.
2269  * // Examples: Electricity, Coal, Biomass, Hydrogen, …
2270   
2271  * // ## Variables
2272  * // {special_table_converter_variables}
3766   
3767  * ==== loading units from gdx file ====
3768   
3769  * Load units from gdx file
3771   
3772  * ==== calculation of mappings ====
3773   
3774  * Technologies with a lifeTime > 0 are available
3775  set converter_availTech(nodesModel,years,converter_techs,vintage);
3776  converter_availTech(nodesModel,years,converter_techs,vintage)
3777      $(vintage.val = smax(vintage_a$(vintage_a.val <= years.val
3778          and converter_techParam(converter_techs,vintage_a,"lifeTime") > 0), vintage_a.val)) = yes;
3779   
3780  * Technologies to optimize become unavailable if they have an unitsUpperLimit of 0
3781  converter_availTech(nodesModel,years,converter_techs,vintage)
3782      $(yearsToCalc(years) and converter_capacityParam(nodesModel,years,converter_techs,"unitsUpperLimit") = 0 ) = no;
3783   
3784  * Technologies already built become unavailable if they have an unitsBuild of 0
3785  converter_availTech(nodesModel,years,converter_techs,vintage)
3786      $( ( not yearsToCalc(years)) and converter_capacityParam(nodesModel,years,converter_techs,"unitsBuild") = 0 ) = no;
3787   
3788  * Used technologies are available technologies over their technical lifeTime
3789  set converter_usedTech(nodesModel,years,converter_techs,vintage);
3790  converter_usedTech(nodesModel,years,converter_techs,vintage)
3791      $(vintage.val <= years.val
3792          and years.val < smax(years_a$converter_availTech(nodesModel,years_a,converter_techs,vintage),
3793                                  years_a.val + converter_techParam(converter_techs,vintage,"lifeTime"))
3794          ) = yes;
3795   
3796  * Technologies have to be decomissioned in the interval of first avail + lifetime to last avail + lifetime
3797  set converter_decomTech(nodesModel,years,converter_techs,vintage);
3798  converter_decomTech(nodesModel,years,converter_techs,vintage)
3799    $(sum(years_a$converter_usedTech(nodesModel,years_a,converter_techs,vintage), 1)
3800      and sum(yearsToCalc
3801        $(sameas(years, yearsToCalc)
3802          and yearsToCalc.val >= smin(years_a$converter_availTech(nodesModel,years_a,converter_techs,vintage), years_a.val) + converter_techParam(converter_techs,vintage,"lifeTime")
3803          and yearsToCalc.val <= smax(years_a$converter_availTech(nodesModel,years_a,converter_techs,vintage), years_a.val) + converter_techParam(converter_techs,vintage,"lifeTime")), 1))
3804    = yes;
3805   
3806  * Extend the decom frame to the year after the last year of usedTech
3807  converter_decomTech(nodesModel,yearsToCalc,converter_techs,vintage)
3808    $(converter_usedTech(nodesModel,yearsToCalc-1,converter_techs,vintage)
3809      and converter_decomTech(nodesModel,yearsToCalc-1,converter_techs,vintage))
3810    = yes;
3811   
3812  * Mapping for used activities and commodities
3813  set converter_usedActCom(converter_techs,vintage,activity,commodity);
3814  option converter_usedActCom < converter_coefficient;
3815   
3816  set converter_usedAct(converter_techs,vintage,activity);
3817  option converter_usedAct < converter_usedActCom;
3818   
3819  set converter_usedCom(converter_techs,vintage,commodity);
3820  option converter_usedCom < converter_usedActCom;
3821   
3822  set converter_usedTechAct(nodesModel,years,converter_techs,vintage,activity);
3823  converter_usedTechAct(nodesModel,years,converter_techs,vintage,activity)
3824      $(converter_usedTech(nodesModel,years,converter_techs,vintage)
3825          and converter_usedAct(converter_techs,vintage,activity))
3826      = yes;
3827   
3828  set converter_useRampPos(nodesModel,years,converter_techs,vintage);
3829  converter_useRampPos(nodesModelToCalc,yearsToCalc,converter_techs,vintage)
3830    $(sum(indicator$accounting_converterStartup(indicator,nodesModelToCalc,converter_techs,vintage,"perRamp"), 1)
3831      or sum(indicator$accounting_converterStartup(indicator,nodesModelToCalc,converter_techs,vintage,"perRampPos"), 1))
3832    = 1;
3833   
3834  set converter_useRampNeg(nodesModel,years,converter_techs,vintage);
3835  converter_useRampNeg(nodesModelToCalc,yearsToCalc,converter_techs,vintage)
3836    $(sum(indicator$accounting_converterStartup(indicator,nodesModelToCalc,converter_techs,vintage,"perRamp"), 1)
3837      or sum(indicator$accounting_converterStartup(indicator,nodesModelToCalc,converter_techs,vintage,"perRampNeg"), 1))
3838    = 1;
3839   
3840   
3841  * ==== aggregation of profiles ====
3842   
3843  * derive upper and lower profiles then aggregate
3844  set converter_activity_hasProfileIn(nodesData,years,converter_techs,pc_converter_activityProfile);
3845  option converter_activity_hasProfileIn < converter_activityProfileIn;
3846   
3847  set converter_activity_hasProfile(nodesModel,years,converter_techs,pc_converter_activityProfile);
3848  converter_activity_hasProfile(nodesModelToCalc,yearsToCalc,converter_techs,pc_converter_activityProfile)
3849      = sum(nodesData$aggregateNodesModel(nodesData,nodesModelToCalc),
3850              converter_activity_hasProfileIn(nodesData,yearsToCalc,converter_techs,pc_converter_activityProfile));
3851   
3852  set converter_coefficient_hasProfileIn(nodesData,years,converter_techs,vintage,activity,commodity);
3853  option converter_coefficient_hasProfileIn < converter_coefficientProfileIn;
3854   
3855  set converter_coefficient_hasProfile(nodesModel,years,converter_techs,vintage,activity,commodity);
3856  converter_coefficient_hasProfile(nodesModelToCalc,yearsToCalc,converter_techs,vintage,activity,commodity)
3857      = sum(nodesData$aggregateNodesModel(nodesData,nodesModelToCalc),
3858              converter_coefficient_hasProfileIn(nodesData,yearsToCalc,converter_techs,vintage,activity,commodity));
3859   
3860  * aagregate time dimension
3861  parameter converter_activityProfileIn_aggTime(timeModel,nodesData,yearsToCalc,converter_techs,pc_converter_activityProfile);
3862  converter_activityProfileIn_aggTime(timeModelToCalc,nodesData,yearsToCalc,converter_techs,pc_converter_activityProfile)
3863    $converter_activity_hasProfileIn(nodesData,yearsToCalc,converter_techs,pc_converter_activityProfile)
3864    = sum(timeData$timeMapping(timeData,timeModelToCalc),
3865            converter_activityProfileIn(timeData,nodesData,yearsToCalc,converter_techs,pc_converter_activityProfile)
3866            / timeLength(timeModelToCalc));
3867  option clear = converter_activityProfileIn;
3868   
3869  * weighted average for a real sum of units upper limits, plain average if one region has an upper limit of inf
3870  parameter converter_activityProfile(timeModel,nodesModel,years,converter_techs,vintage,pc_converter_activityProfile);
3871  converter_activityProfile(timeModelToCalc,converter_usedTech(nodesModelToCalc,yearsToCalc,converter_techs,vintage),"upper")
3872      = converter_techParam(converter_techs,vintage,"activityUpperLimit");
3873  converter_activityProfile(timeModelToCalc,converter_usedTech(nodesModelToCalc,yearsToCalc,converter_techs,vintage),"lower")
3874      = converter_techParam(converter_techs,vintage,"activityLowerLimit");
3875   
3876   
3877  set converter_finiteUnitLimit(nodesModelToCalc,yearsToCalc,converter_techs);
3878  converter_finiteUnitLimit(nodesModelToCalc,yearsToCalc,converter_techs)
3879      = sum(nodesData$aggregateNodesModel(nodesData,nodesModelToCalc), converter_capacityParamIn(nodesData,yearsToCalc,converter_techs,"unitsUpperLimit")) > 0
3880          and sum(nodesData$aggregateNodesModel(nodesData,nodesModelToCalc), converter_capacityParamIn(nodesData,yearsToCalc,converter_techs,"unitsUpperLimit")) < inf;
3881   
3882  set converter_infiniteUnitLimit(nodesModelToCalc,yearsToCalc,converter_techs);
3883  converter_infiniteUnitLimit(nodesModelToCalc,yearsToCalc,converter_techs)
3884      = sum(nodesData$aggregateNodesModel(nodesData,nodesModelToCalc), converter_capacityParamIn(nodesData,yearsToCalc,converter_techs,"unitsUpperLimit")) = inf;
3885   
3886  converter_activityProfile(timeModelToCalc,converter_usedTech(nodesModelToCalc,yearsToCalc,converter_techs,vintage),pc_converter_activityProfile)
3887      $(converter_activity_hasProfile(nodesModelToCalc,yearsToCalc,converter_techs,pc_converter_activityProfile)
3888          and converter_finiteUnitLimit(nodesModelToCalc,yearsToCalc,converter_techs))
3889      = sum(nodesData$(aggregateNodesModel(nodesData,nodesModelToCalc)
3890                  and converter_capacityParamIn(nodesData,yearsToCalc,converter_techs,"unitsUpperLimit") < inf ),
3891                converter_activityProfileIn_aggTime(timeModelToCalc,nodesData,yearsToCalc,converter_techs,pc_converter_activityProfile)
3892                * converter_capacityParamIn(nodesData,yearsToCalc,converter_techs,"unitsUpperLimit"))
3893      / sum(nodesData$aggregateNodesModel(nodesData,nodesModelToCalc),
3894              converter_capacityParamIn(nodesData,yearsToCalc,converter_techs,"unitsUpperLimit"));
3895   
3896  converter_activityProfile(timeModelToCalc,converter_usedTech(nodesModelToCalc,yearsToCalc,converter_techs,vintage),pc_converter_activityProfile)
3897      $(converter_activity_hasProfile(nodesModelToCalc,yearsToCalc,converter_techs,pc_converter_activityProfile)
3898          and converter_infiniteUnitLimit(nodesModelToCalc,yearsToCalc,converter_techs))
3899      = sum(nodesData$(aggregateNodesModel(nodesData,nodesModelToCalc)
3900                  and converter_capacityParamIn(nodesData,yearsToCalc,converter_techs,"unitsUpperLimit") = inf),
3901                converter_activityProfileIn_aggTime(timeModelToCalc,nodesData,yearsToCalc,converter_techs,pc_converter_activityProfile)
3902                * converter_capacityParamIn(nodesData,yearsToCalc,converter_techs,"unitsUpperLimit"))
3903      / sum(nodesData$(aggregateNodesModel(nodesData,nodesModelToCalc)
3904                      and converter_capacityParamIn(nodesData,yearsToCalc,converter_techs,"unitsUpperLimit") = inf ),
3905              1);
3906  option clear = converter_activityProfileIn_aggTime;
3907   
3908  * for fixed profiles overwrite upper and lower profile
3909  converter_activityProfile(timeModelToCalc,nodesModelToCalc,yearsToCalc,converter_techs,vintage,"lower")
3910      $converter_activity_hasProfile(nodesModelToCalc,yearsToCalc,converter_techs,"fixed")
3911      = converter_activityProfile(timeModelToCalc,nodesModelToCalc,yearsToCalc,converter_techs,vintage,"fixed");
3912   
3913  converter_activityProfile(timeModelToCalc,nodesModelToCalc,yearsToCalc,converter_techs,vintage,"upper")
3914      $converter_activity_hasProfile(nodesModelToCalc,yearsToCalc,converter_techs,"fixed")
3915      = converter_activityProfile(timeModelToCalc,nodesModelToCalc,yearsToCalc,converter_techs,vintage,"fixed");
3916   
3917   
3918  * weighted average for a real sum of units upper limits, plain average if one region has an upper limit of inf
3919  parameter converter_coefficientProfile(timeModel,nodesModel,years,converter_techs,vintage,activity,commodity);
3920  converter_coefficientProfile(timeModelToCalc,converter_usedTechAct(nodesModelToCalc,yearsToCalc,converter_techs,vintage,activity),commodity)
3921      = converter_coefficient(converter_techs,vintage,activity,commodity,"coefficient");
3922   
3923  converter_coefficientProfile(timeModelToCalc,converter_usedTechAct(nodesModelToCalc,yearsToCalc,converter_techs,vintage,activity),commodity)
3924      $( converter_coefficient_hasProfile(nodesModelToCalc,yearsToCalc,converter_techs,vintage,activity,commodity)
3925          and converter_finiteUnitLimit(nodesModelToCalc,yearsToCalc,converter_techs) )
3926      = sum(nodesData$aggregateNodesModel(nodesData,nodesModelToCalc),
3927            sum(timeData$timeMapping(timeData,timeModelToCalc),
3928                    converter_coefficientProfileIn(timeData,nodesData,yearsToCalc,converter_techs,vintage,activity,commodity))
3929                / timeLength(timeModelToCalc)
3930              * converter_capacityParamIn(nodesData,yearsToCalc,converter_techs,"unitsUpperLimit") )
3931      / sum(nodesData$aggregateNodesModel(nodesData,nodesModelToCalc),
3932              converter_capacityParamIn(nodesData,yearsToCalc,converter_techs,"unitsUpperLimit"));
3933   
3934  converter_coefficientProfile(timeModelToCalc,converter_usedTechAct(nodesModelToCalc,yearsToCalc,converter_techs,vintage,activity),commodity)
3935      $( converter_coefficient_hasProfile(nodesModelToCalc,yearsToCalc,converter_techs,vintage,activity,commodity)
3936          and converter_infiniteUnitLimit(nodesModelToCalc,yearsToCalc,converter_techs))
3937      = sum(nodesData$(aggregateNodesModel(nodesData,nodesModelToCalc)
3938                      and converter_capacityParamIn(nodesData,yearsToCalc,converter_techs,"unitsUpperLimit") = inf ),
3939            sum(timeData$timeMapping(timeData,timeModelToCalc),
3940                    converter_coefficientProfileIn(timeData,nodesData,yearsToCalc,converter_techs,vintage,activity,commodity))
3941                / timeLength(timeModelToCalc))
3942      / sum(nodesData$(aggregateNodesModel(nodesData,nodesModelToCalc)
3943                      and converter_capacityParamIn(nodesData,yearsToCalc,converter_techs,"unitsUpperLimit") = inf ), 1);
3944   
3945  * ==== prepare partial load behavior parameters ====
3946   
3947  * set disabled max load requirements to 1 to avoid excessive logical expressions later on
3948  alias(commodity, com);
3949  converter_coefficient(converter_techs,vintage,activity,commodity,"maxLoad")
3950      $((converter_coefficient(converter_techs,vintage,activity,commodity,"maxLoad") = 0)
3951        and converter_usedAct(converter_techs,vintage,activity))
3952      = 1;
3953   
3954  * indicate that at least one activity of a technology makes use of partial load behavior
3955  set converter_hasMaxLoad(converter_techs,vintage);
3956  converter_hasMaxLoad(converter_techs,vintage)
3957    = smin((activity,commodity)$converter_usedAct(converter_techs,vintage,activity),
3958              converter_coefficient(converter_techs,vintage,activity,commodity,"maxLoad")) < 1;
3959   
3960  set converter_hasMinLoad(converter_techs,vintage);
3961  converter_hasMinLoad(converter_techs,vintage)
3962    = smax((activity,commodity)$converter_usedAct(converter_techs,vintage,activity),
3963              converter_coefficient(converter_techs,vintage,activity,commodity,"minLoad")) > 0;
3964   
3965  set converter_hasConstantFluxInActivity(converter_techs,vintage);
3966  converter_hasConstantFluxInActivity(converter_techs,vintage)
3967    = sum((activity,commodity)$converter_usedAct(converter_techs,vintage,activity),
3968                          abs(converter_coefficient(converter_techs,vintage,activity,commodity,"constant"))) > 0;
3969   
3970  * setting up a requirements parameter to avoid having to cycle through commodities in equations
3971  set pc_converter_activityRequirements
3972      /
3973      minLoad             "Lower profile for converter activity"
3974      maxLoad             "Upper profile for converter activity"
3975      /;
3976  parameter converter_activityRequirements(converter_techs,vintage,activity,pc_converter_activityRequirements);
3977  converter_activityRequirements(converter_techs,vintage,activity,"minLoad")
3978    = smax(commodity, converter_coefficient(converter_techs,vintage,activity,commodity,"minLoad"));
3979  converter_activityRequirements(converter_techs,vintage,activity,"maxLoad")
3980    = smin(commodity, converter_coefficient(converter_techs,vintage,activity,commodity,"maxLoad"));
3981   
3982  * ==== activate MIP units for MIP dispatch or partial load technologies ====
3983   
3984  set converter_hasMinUptime(converter_techs,vintage);
3985  converter_hasMinUptime(converter_techs,vintage)
3986    $(converter_techParam(converter_techs,vintage,"minUptime")
3987      and converter_techParam(converter_techs,vintage,"mipDispatch"))
3988    = yes;
3989   
3990  set converter_hasMinDowntime(converter_techs,vintage);
3991  converter_hasMinDowntime(converter_techs,vintage)
3992    $(converter_techParam(converter_techs,vintage,"minDowntime")
3993      and converter_techParam(converter_techs,vintage,"mipDispatch"))
3994    = yes;
3995   
3996  * require integer unit counts if online state is to be tracked
3997  converter_techParam(converter_techs,vintage,"mipUnits")
3998      $(converter_techParam(converter_techs,vintage,"mipDispatch")
3999        or converter_hasMinLoad(converter_techs, vintage)
4000        or converter_hasMaxLoad(converter_techs, vintage)
4001        or converter_hasConstantFluxInActivity(converter_techs,vintage))
4002      = 1;
4003   
4004  * ==== floor mip converter units to integer values ====
4005  converter_capacityParam(nodesModelToCalc,yearsToCalc,converter_techs,"unitsLowerLimit")
4006      $sum(vintage, converter_techParam(converter_techs,vintage,"mipUnits"))
4007      = floor(converter_capacityParam(nodesModelToCalc,yearsToCalc,converter_techs,"unitsLowerLimit"));
4008  converter_capacityParam(nodesModelToCalc,yearsToCalc,converter_techs,"unitsUpperLimit")
4009      $sum(vintage, converter_techParam(converter_techs,vintage,"mipUnits"))
4010      = ceil(converter_capacityParam(nodesModelToCalc,yearsToCalc,converter_techs,"unitsUpperLimit"));
4011   
4012  * ==== scalars and sets for minUptime and minDowntime ====
4013   
4014  scalar converter_maxUptimeReq;
4015  converter_maxUptimeReq = smax((converter_techs,vintage), converter_techParam(converter_techs,vintage,"minUptime"));
4016  set uptimeSearchRange(timeModelToCalc);
4017  uptimeSearchRange(timeModelToCalc) = ord(timeModelToCalc) <= converter_maxUptimeReq;
4018   
4019  scalar converter_maxDowntimeReq;
4020  converter_maxDowntimeReq = smax((converter_techs,vintage), converter_techParam(converter_techs,vintage,"minDowntime"));
4021  set downtimeSearchRange(timeModelToCalc);
4022  downtimeSearchRange(timeModelToCalc) = ord(timeModelToCalc) <= converter_maxDowntimeReq;
4023   
4024  * ==== definition of variables ====
4025   
4026  * Initialise variables for unitsBuild
4027  converter_unitsBuild.l(nodesModel,years,converter_techs,vintage)
4028      $converter_availTech(nodesModel,years,converter_techs,vintage)
4029      = converter_capacityParam(nodesModel,years,converter_techs,"unitsBuild");
4030  converter_unitsBuild.lo(nodesModel,yearsToCalc,converter_techs,vintage)
4031      $converter_availTech(nodesModel,yearsToCalc,converter_techs,vintage)
4032      = converter_unitsBuild.l(nodesModel,yearsToCalc,converter_techs,vintage);
4033  converter_unitsBuild.fx(nodesModel,years,converter_techs,vintage)
4034      $converter_capacityParam(nodesModel,years,converter_techs,"noExpansion")
4035      = converter_unitsBuild.l(nodesModel,years,converter_techs,vintage);
4036   
4037  * Initialise variables for unitsDecom
4038  converter_unitsDecom.l(nodesModel,years,converter_techs,vintage)
4039    $(converter_decomTech(nodesModel,years,converter_techs,vintage)
4040      and years.val < sum(yearsToCalc$(ord(yearsToCalc) = 1), yearsToCalc.val))
4041    = sum((years_a,years_aa)$(sameas(years-1, years_aa)
4042                        and years_a.val > years_aa.val - converter_techParam(converter_techs,vintage,'lifeTime')
4043                        and years_a.val <= years.val - converter_techParam(converter_techs,vintage,'lifeTime')
4044                        and converter_availTech(nodesModel,years_a,converter_techs,vintage)),
4045          converter_unitsBuild.l(nodesModel,years_a,converter_techs,vintage));
4046   
4047  converter_unitsDecom.l(nodesModel,yearsToCalc,converter_techs,vintage)
4048    $converter_decomTech(nodesModel,yearsToCalc,converter_techs,vintage)
4049    = sum(years$
4050          (years.val < sum(yearsToCalc_a$(ord(yearsToCalc_a) = 1), yearsToCalc_a.val)
4051            and converter_availTech(nodesModel,years,converter_techs,vintage)
4052            and years.val > sum(years_a$sameas(years_a, yearsToCalc-1), years_a.val) - converter_techParam(converter_techs,vintage,'lifeTime')
4053            and years.val <= yearsToCalc.val - converter_techParam(converter_techs,vintage,'lifeTime')),
4054        converter_unitsBuild.l(nodesModel,years,converter_techs,vintage))
4055      + sum(yearsToCalc_a$
4056          (yearsToCalc_a.val < sum(yearsToCalc_aa$(ord(yearsToCalc_aa) > 1), yearsToCalc_a.val)
4057            and converter_availTech(nodesModel,yearsToCalc_a,converter_techs,vintage)
4058            and yearsToCalc_a.val > sum(years_a$sameas(years_a, yearsToCalc-1), years_a.val) - converter_techParam(converter_techs,vintage,'lifeTime')
4059            and yearsToCalc_a.val <= yearsToCalc.val - converter_techParam(converter_techs,vintage,'lifeTime')),
4060        converter_unitsBuild.l(nodesModel,yearsToCalc_a,converter_techs,vintage));
4061        ;
4062   
4063  converter_unitsDecom.lo(nodesModel,yearsToCalc,converter_techs,vintage)
4064      $(converter_usedTech(nodesModel,yearsToCalc,converter_techs,vintage)
4065          and not converter_techParam(converter_techs,vintage,"freeDecom"))
4066      = converter_unitsDecom.l(nodesModel,yearsToCalc,converter_techs,vintage)
4067   
4068  * Calculate planned unit expansion
4069  parameter converter_unitsPlanned(nodesModel,years,converter_techs,vintage);
4070  converter_unitsPlanned(nodesModel,years,converter_techs,vintage) = 0;
4071  loop(years,
4072    converter_unitsPlanned(nodesModel,years,converter_techs,vintage)
4073      =
4074      converter_unitsPlanned(nodesModel,years-1,converter_techs,vintage)
4075          $converter_usedTech(nodesModel,years-1,converter_techs,vintage)
4076      + converter_unitsBuild.l(nodesModel,years,converter_techs,vintage)
4077          $converter_availTech(nodesModel,years,converter_techs,vintage)
4078      - converter_unitsDecom.l(nodesModel,years,converter_techs,vintage)
4079          $converter_usedTech(nodesModel,years,converter_techs,vintage);
4080  );
4081   
4082  * Set initial state for planned units
4083  converter_unitsTotal.l(nodesModel,years,converter_techs,vintage)
4084    = converter_unitsPlanned(nodesModel,years,converter_techs,vintage)
4085   
4086  * Calculate if planned unit expansion is bounded by upper and lower limits
4087  set converter_unitBoundsFixed(nodesModel,years,converter_techs);
4088  converter_unitBoundsFixed(nodesModel,years,converter_techs)
4089    $(sum(vintage$converter_usedTech(nodesModel,years,converter_techs,vintage),
4090          converter_unitsPlanned(nodesModel,years,converter_techs,vintage))
4091      = converter_capacityParam(nodesModel,years,converter_techs,"unitsUpperLimit")
4092    and sum(vintage$converter_usedTech(nodesModel,years,converter_techs,vintage),
4093          converter_unitsPlanned(nodesModel,years,converter_techs,vintage))
4094      = converter_capacityParam(nodesModel,years,converter_techs,"unitsLowerLimit"))
4095    = yes;
4096   
4097  * Fix unitsBuild, unitsDecom, unitsTotal if levels are predetermined by upper and lower limits
4098  converter_unitsBuild.fx(nodesModel,years,converter_techs,vintage)
4099    $(converter_availTech(nodesModel,years,converter_techs,vintage)
4100      and converter_unitBoundsFixed(nodesModel,years,converter_techs))
4101    = converter_unitsBuild.l(nodesModel,years,converter_techs,vintage);
4102  converter_unitsDecom.fx(nodesModel,years,converter_techs,vintage)
4103    $(converter_usedTech(nodesModel,years,converter_techs,vintage)
4104      and converter_unitBoundsFixed(nodesModel,years,converter_techs))
4105    = converter_unitsDecom.l(nodesModel,years,converter_techs,vintage);
4106  converter_unitsTotal.fx(nodesModel,years,converter_techs,vintage)
4107    $(converter_usedTech(nodesModel,years,converter_techs,vintage)
4108      and converter_unitBoundsFixed(nodesModel,years,converter_techs))
4109    = converter_unitsTotal.l(nodesModel,years,converter_techs,vintage);
4110   
4111  converter_unitsOnline_MIP.up(timeModelToCalc,nodesModel,years,converter_techs,vintage)
4112      $(converter_usedTech(nodesModel,years,converter_techs,vintage)
4113        and converter_techParam(converter_techs,vintage,"mipDispatch") = 1)
4114      = converter_capacityParam(nodesModel,years,converter_techs,"unitsUpperLimit");
4115   
4116  converter_unitsTotal_MIP.up(nodesModel,years,converter_techs,vintage)
4117      $(converter_usedTech(nodesModel,years,converter_techs,vintage)
4118        and converter_techParam(converter_techs,vintage,"mipUnits") = 1)
4119      = converter_capacityParam(nodesModel,years,converter_techs,"unitsUpperLimit");
4120   
4121  converter_unitsUsingActivity_MIP.up(timeModelToCalc,nodesModel,years,converter_techs,vintage,activity)
4122      $(converter_usedTech(nodesModel,years,converter_techs,vintage)
4123        and (converter_hasMinLoad(converter_techs, vintage)
4124              or converter_hasMaxLoad(converter_techs, vintage)))
4125      = converter_capacityParam(nodesModel,years,converter_techs,"unitsUpperLimit");
4126   
4127  * Add parameter for fixing capacities during myopic runs
4128  parameter converter_unitsDelta(nodesModel,years,converter_techs);
4129   
4130  * ==== declaration of equations ====
4131   
4132  equations
4133    Eq_converter_unitsBalance(nodesModel,years,converter_techs,vintage
4134      ) "Ensures the units balance over the planning period."
4135    Eq_converter_unitsFixedDecom(nodesModel,years,converter_techs,vintage
4136      ) "Restricts the fixed decommissioning of units over the planning period."
4137    Eq_converter_unitsFreeDecom(nodesModel,years,converter_techs,vintage
4138      ) "Restricts the free decommissioning of units over the planning period."
4139    Eq_converter_unitsUpperLimit(nodesModel,years,converter_techs
4140      ) "Upper bound for the total number of units."
4141    Eq_converter_unitsLowerLimit(nodesModel,years,converter_techs
4142      ) "Lower bound for the total number of units."
4143    Eq_converter_unitsFixedLimit(nodesModel,years,converter_techs
4144      ) "Fixed bound for the total number of units."
4145    Eq_converter_unitsTotalMIP(nodesModel,years,converter_techs,vintage
4146      ) "Fixes the total number of units to the corresponding integer variable."
4147    Eq_converter_unitsOnlineMIP(timeModel,nodesModel,years,converter_techs,vintage
4148      ) "Fixes the number of online units to the corresponding integer variable."
4149   
4150    Eq_converter_activityLowerLimit(timeModel,nodesModel,years,converter_techs,vintage
4151      ) "Lower limit on the activity."
4152    Eq_converter_activityUpperLimit(timeModel,nodesModel,years,converter_techs,vintage
4153      ) "Upper limit on the activity."
4154   
4155    Eq_converter_activityFixedLimit(timeModel,nodesModel,years,converter_techs,vintage
4156      ) "Fixed limit on the activity."
4157    Eq_converter_rampPos(timeModel,nodesModel,years,converter_techs,vintage
4158      ) "Positive ramping of unit activity."
4159    Eq_converter_rampNeg(timeModel,nodesModel,years,converter_techs,vintage
4160      ) "Negative ramping of unit activity."
4161    Eq_converter_rampLimit(timeModel,nodesModel,years,converter_techs,vintage
4162      ) "Restrict ramping up of unit activity."
4163   
4164    Eq_converter_unitsOnline(timeModel,nodesModel,years,converter_techs,vintage
4165      ) "Set online units to total number of operational units."
4166    Eq_converter_unitsOnlineUC(timeModel,nodesModel,years,converter_techs,vintage
4167      ) "Allow shutting down units."
4168    Eq_converter_activityStartups(timeModel,nodesModel,years,converter_techs,vintage
4169      ) "Variable counting the number of unit startups."
4170    Eq_converter_activityShutdowns(timeModel,nodesModel,years,converter_techs,vintage
4171      ) "Variable tracking the number of unit shutdowns."
4172    Eq_converter_limitStartups(nodesModel,years,converter_techs,vintage
4173      ) "Limit the number of startup cycles a unit can perform."
4174    Eq_converter_minUptime(timeModel,nodesModel,years,converter_techs,vintage
4175      ) "Require recently started units to remain online for their respective minimum uptime."
4176    Eq_converter_minDowntime(timeModel,nodesModel,years,converter_techs,vintage
4177      ) "Require recently shut down units to remain offline for their respective minimum downtime."
4178    Eq_converter_activityUpperLimitDetailedPartLoadMinReq(timeModel,nodesModel,years,converter_techs,vintage,activity
4179      ) "Limit activity coefficients of activities with a given load requirement or stricter to the number of units in such modes."
4180    Eq_converter_activityUpperLimitDetailedPartLoadMaxReq(timeModel,nodesModel,years,converter_techs,vintage,activity
4181      ) "Limit activity coefficients of activities with a given load requirement or stricter to the number of units in such modes."
4182    Eq_converter_activityLowerLimitDetailedPartLoadMinReq(timeModel,nodesModel,years,converter_techs,vintage,activity
4183      ) "Enforce sufficient activity coefficients of activities to justify all active modes."
4184    Eq_converter_noOnlineIdle(timeModel,nodesModel,years,converter_techs,vintage
4185      ) "Prevent the circumvention of requirements by keeping units online without using any modes."
4186    Eq_converter_noOnlineIdleDetailedPartLoad(timeModel,nodesModel,years,converter_techs,vintage
4187      ) "Prevent the circumvention of requirements by keeping units online without using any modes. Allow more than one mode activation per unit."
4188    Eq_converter_activityUpperLimitPartLoad(timeModel,nodesModel,years,converter_techs,vintage,activity
4189      ) "Limit usage of an activity to corresponding units."
4190    Eq_converter_activityLowerLimitPartLoad(timeModel,nodesModel,years,converter_techs,vintage,activity
4191      ) "Limit usage of an activity to corresponding units."
4192    Eq_converter_activityModeLimit(timeModel,nodesModel,years,converter_techs,vintage,activity
4193      ) "Limit the number of units in one particular mode to the number of operational units."
4194    ;
4195   
4196  * ==== equation definition ====
4197  * // ## Equations
4198  * // ### Converter Units Balance
4199  * // Ensures that the total units are consistent with the built and decommissioned units.
4200  * // {Eq_converter_unitsBalance}
4201  Eq_converter_unitsBalance(nodesModelSel,yearsSel,converter_techs,vintage)
4202      $((converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
4203            or sum(years$sameas(years,yearsSel), converter_usedTech(nodesModelSel,years-1,converter_techs,vintage)))
4204          and not converter_unitBoundsFixed(nodesModelSel,yearsSel,converter_techs))
4205      ..
4206      converter_unitsTotal(nodesModelSel,yearsSel,converter_techs,vintage)
4207      =e=
4208      sum(yearsToCalc$(ord(yearsToCalc) = 1 and sameas(yearsToCalc, yearsSel)),
4209        sum(years$sameas(years, yearsToCalc),
4210          converter_unitsTotal(nodesModelSel,years-1,converter_techs,vintage)
4211            $converter_usedTech(nodesModelSel,years-1,converter_techs,vintage)))
4212      + sum((yearsToCalc)$(ord(yearsToCalc) > 1 and sameas(yearsToCalc, yearsSel)),
4213        converter_unitsTotal(nodesModelSel,yearsToCalc-1,converter_techs,vintage)
4214          $converter_usedTech(nodesModelSel,yearsToCalc-1,converter_techs,vintage))
4215      + converter_unitsBuild(nodesModelSel,yearsSel,converter_techs,vintage)
4216          $converter_availTech(nodesModelSel,yearsSel,converter_techs,vintage)
4217      - converter_unitsDecom(nodesModelSel,yearsSel,converter_techs,vintage)
4218          $converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage);
4219   
4220  * // ### Converter Units Fixed Decommission
4221  * // Restricts the fixed decommissioning of units over the planning period.
4222  * // {Eq_converter_unitsFixedDecom}
4223  Eq_converter_unitsFixedDecom(nodesModelSel,yearsSel,converter_techs,vintage)
4224      $(converter_decomTech(nodesModelSel,yearsSel,converter_techs,vintage)
4225          and not converter_techParam(converter_techs,vintage,"freeDecom") = 1
4226          and not converter_unitBoundsFixed(nodesModelSel,yearsSel,converter_techs))
4227      ..
4228      converter_unitsDecom(nodesModelSel,yearsSel,converter_techs,vintage)
4229      =e=
4230      sum(years$
4231          (converter_availTech(nodesModelSel,years,converter_techs,vintage)
4232            and years.val > sum(yearsToCalc$sameas(yearsToCalc+1, yearsSel), yearsToCalc.val) - converter_techParam(converter_techs,vintage,'lifeTime')
4233            and years.val <= yearsSel.val - converter_techParam(converter_techs,vintage,'lifeTime')),
4234        converter_unitsBuild(nodesModelSel,years,converter_techs,vintage));
4235   
4236  * // ### Converter Units Free Decommission
4237  * // Restricts the free decommissioning of units over the planning period.
4238  * // {Eq_converter_unitsFreeDecom}
4239  Eq_converter_unitsFreeDecom(nodesModelSel,yearsSel,converter_techs,vintage)
4240      $((converter_decomTech(nodesModelSel,yearsSel,converter_techs,vintage)
4241          or converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage))
4242          and converter_techParam(converter_techs,vintage,"freeDecom") = 1)
4243      ..
4244      sum(years$
4245            ((converter_decomTech(nodesModelSel,years,converter_techs,vintage)
4246              or converter_usedTech(nodesModelSel,years,converter_techs,vintage))
4247              and years.val < sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)),
4248          converter_unitsDecom(nodesModelSel,years,converter_techs,vintage))
4249      + sum(yearsToCalc$
4250            ((converter_decomTech(nodesModelSel,yearsToCalc,converter_techs,vintage)
4251              or converter_usedTech(nodesModelSel,yearsToCalc,converter_techs,vintage))
4252              and yearsToCalc.val >= sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
4253              and yearsToCalc.val <= yearsSel.val),
4254          converter_unitsDecom(nodesModelSel,yearsToCalc,converter_techs,vintage))
4255      =g=
4256      sum(years$
4257            (converter_availTech(nodesModelSel,years,converter_techs,vintage)
4258              and years.val < sum(yearsToCalc$(ord(yearsToCalc)=1), yearsToCalc.val) - converter_techParam(converter_techs,vintage,'lifeTime')),
4259          converter_unitsBuild(nodesModelSel,years,converter_techs,vintage))
4260      + sum(yearsToCalc$
4261            (converter_availTech(nodesModelSel,yearsToCalc,converter_techs,vintage)
4262              and yearsToCalc.val >= sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
4263              and yearsToCalc.val <= yearsSel.val - converter_techParam(converter_techs,vintage,'lifeTime')),
4264          converter_unitsBuild(nodesModelSel,yearsToCalc,converter_techs,vintage));
4265   
4266  * // ### Converter Units Upper Limit
4267  * // Upper bound for the total number of units.
4268  * // {Eq_converter_unitsUpperLimit}
4269  Eq_converter_unitsUpperLimit(nodesModelSel,yearsSel,converter_techs)
4270      $(converter_capacityParam(nodesModelSel,yearsSel,converter_techs,'unitsUpperLimit') >= 0
4271          and converter_capacityParam(nodesModelSel,yearsSel,converter_techs,'unitsUpperLimit') < +inf
4272          and converter_capacityParam(nodesModelSel,yearsSel,converter_techs,'unitsUpperLimit')
4273              <> converter_capacityParam(nodesModelSel,yearsSel,converter_techs,'unitsLowerLimit'))
4274      ..
4275      sum(vintage$converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage),
4276          converter_unitsTotal(nodesModelSel,yearsSel,converter_techs,vintage))
4277      =l=
4278      converter_capacityParam(nodesModelSel,yearsSel,converter_techs,"unitsUpperLimit");
4279   
4280  * // ### Converter Units Lower Limit
4281  * // Lower bound for the total number of units.
4282  * // {Eq_converter_unitsLowerLimit}
4283  Eq_converter_unitsLowerLimit(nodesModelSel,yearsSel,converter_techs)
4284      $(converter_capacityParam(nodesModelSel,yearsSel,converter_techs,'unitsLowerLimit') > 0
4285          and converter_capacityParam(nodesModelSel,yearsSel,converter_techs,'unitsLowerLimit')
4286              <> converter_capacityParam(nodesModelSel,yearsSel,converter_techs,'unitsUpperLimit'))
4287      ..
4288      sum(vintage$converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage),
4289          converter_unitsTotal(nodesModelSel,yearsSel,converter_techs,vintage))
4290      =g=
4291      converter_capacityParam(nodesModelSel,yearsSel,converter_techs,"unitsLowerLimit");
4292   
4293  Eq_converter_unitsFixedLimit(nodesModelSel,yearsSel,converter_techs)
4294      $(converter_capacityParam(nodesModelSel,yearsSel,converter_techs,'unitsLowerLimit')
4295          = converter_capacityParam(nodesModelSel,yearsSel,converter_techs,'unitsUpperLimit'))
4296      ..
4297      sum(vintage$converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage),
4298          converter_unitsTotal(nodesModelSel,yearsSel,converter_techs,vintage))
4299      =e=
4300      converter_capacityParam(nodesModelSel,yearsSel,converter_techs,"unitsUpperLimit");
4301   
4302  * // ### Converter Units Total MIP
4303  * // Fixes the total number of units to the corresponding integer variable.
4304  * // {Eq_converter_unitsTotalMIP}
4305  Eq_converter_unitsTotalMIP(nodesModelSel,yearsSel,converter_techs,vintage)
4306      $( converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
4307          and converter_techParam(converter_techs,vintage,"mipUnits") = 1 )
4308      ..
4309      converter_unitsTotal(nodesModelSel,yearsSel,converter_techs,vintage)
4310      =e=
4311      converter_unitsTotal_MIP(nodesModelSel,yearsSel,converter_techs,vintage);
4312   
4313  * // ### Converter Units Online MIP
4314  * // Fixes the number of online units to the corresponding integer variable.
4315  * // {Eq_converter_unitsOnlineMIP}
4316  Eq_converter_unitsOnlineMIP(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
4317      $( converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
4318          and converter_techParam(converter_techs,vintage,"mipDispatch") = 1 )
4319      ..
4320      converter_unitsOnline(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
4321      =e=
4322      converter_unitsOnline_MIP(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage);
4323   
4324  * // ### Converter Activity Lower Limit
4325  * // Lower limit on the activity.
4326  * // {Eq_converter_activityLowerLimit}
4327  Eq_converter_activityLowerLimit(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
4328      $(converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
4329          and converter_activityProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,"lower") > 0
4330          and converter_activityProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,"lower")
4331               <> converter_activityProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,"upper")
4332          and not converter_hasMinLoad(converter_techs, vintage))
4333      ..
4334      sum(activity$converter_usedAct(converter_techs,vintage,activity),
4335          converter_activity(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity)
4336      )
4337      =g=
4338      converter_activityProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,"lower")
4340      * converter_unitsOnline(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage);
4342   
4343  * // ### Converter Activity Upper Limit
4344  * // Upper limit on the activity.
4345  * // {Eq_converter_activityUpperLimit}
4346  Eq_converter_activityUpperLimit(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
4347      $(converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
4348          and converter_activityProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,"upper") >= 0
4349          and converter_activityProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,"upper")
4350               <> converter_activityProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,"lower"))
4351      ..
4352      sum(activity$converter_usedAct(converter_techs,vintage,activity),
4353          converter_activity(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity)
4354      )
4355      =l=
4356      converter_activityProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,"upper")
4358      * converter_unitsOnline(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage);
4360   
4361  Eq_converter_activityFixedLimit(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
4362      $(converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
4363          and converter_activityProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,"lower")
4364               = converter_activityProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,"upper"))
4365      ..
4366      sum(activity$converter_usedAct(converter_techs,vintage,activity),
4367          converter_activity(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity)
4368      )
4369      =e=
4370      converter_activityProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,"upper")
4372      * converter_unitsOnline(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage);
4374   
4375  * // ### Converter Positive Ramping
4376  * // Positive ramping of unit activity.
4377  * // {Eq_converter_rampPos}
4378  Eq_converter_rampPos(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,converter_techs,vintage)
4379    $( converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
4380        and converter_useRampPos(nodesModelSel,yearsSel,converter_techs,vintage))
4381      ..
4382      converter_rampPos(timeModelToCalc,nodesModelSel,yearsSel,converter_techs,vintage)
4383      =g=
4384      sum(activity$converter_usedAct(converter_techs,vintage,activity),
4385              converter_activity(timeModelToCalc,nodesModelSel,yearsSel,converter_techs,vintage,activity)
4386              - converter_activity(timeModelToCalc--1,nodesModelSel,yearsSel,converter_techs,vintage,activity));
4387   
4388  * // ### Converter Negative Ramping
4389  * // Negative ramping of unit activity.
4390  * // {Eq_converter_rampNeg}
4391  Eq_converter_rampNeg(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,converter_techs,vintage)
4392    $( converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
4393        and converter_useRampNeg(nodesModelSel,yearsSel,converter_techs,vintage))
4394      ..
4395      converter_rampNeg(timeModelToCalc,nodesModelSel,yearsSel,converter_techs,vintage)
4396      =g=
4397      - sum(activity$converter_usedAct(converter_techs,vintage,activity),
4398              converter_activity(timeModelToCalc,nodesModelSel,yearsSel,converter_techs,vintage,activity)
4399              - converter_activity(timeModelToCalc--1,nodesModelSel,yearsSel,converter_techs,vintage,activity));
4400   
4401  * // ### Converter Ramping Limit
4402  * // Restrict ramping up of unit activity.
4403  * // {Eq_converter_rampLimit}
4404  Eq_converter_rampLimit(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,converter_techs,vintage)
4405    $( converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
4406          and converter_techParam(converter_techs,vintage,"activityRampLimit") > 0)
4407      ..
4408      sum(activity$converter_usedAct(converter_techs,vintage,activity),
4409              converter_activity(timeModelToCalc,nodesModelSel,yearsSel,converter_techs,vintage,activity)
4410              - converter_activity(timeModelToCalc--1,nodesModelSel,yearsSel,converter_techs,vintage,activity))
4411    =l=
4412    converter_techParam(converter_techs,vintage,"activityRampLimit")
4414      * converter_unitsOnline(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage);
4416   
4417   
4419   
4420  * // ### Converter MIP Units Online
4421  * // Restrict ramping up of unit activity.
4422  * // {Eq_converter_unitsOnline}
4423  Eq_converter_unitsOnline(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
4424      $( converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
4425          and converter_techParam(converter_techs,vintage,"mipDispatch") = 0 )
4426    ..
4427    converter_unitsOnline(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
4428    =e=
4429    converter_unitsTotal(nodesModelSel,yearsSel,converter_techs,vintage)
4430      ;
4431   
4432  * // ### Converter MIP Units Shutting Down
4433  * // Allow shutting down units.
4434  * // {Eq_converter_unitsOnlineUC}
4435  Eq_converter_unitsOnlineUC(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
4436      $( converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
4437          and converter_techParam(converter_techs,vintage,"mipDispatch") = 1 )
4438    ..
4439    converter_unitsOnline(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
4440    =l=
4441    converter_unitsTotal(nodesModelSel,yearsSel,converter_techs,vintage)
4442      ;
4444   
4445  * // ### Converter Activity Startups
4446  * // Variable counting the number of unit startups.
4447  * // {Eq_converter_activityStartups}
4448  Eq_converter_activityStartups(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,converter_techs,vintage)
4449    $( converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
4450          and converter_techParam(converter_techs,vintage,"mipDispatch") = 1 )
4451      ..
4452      converter_unitStartups(timeModelToCalc,nodesModelSel,yearsSel,converter_techs,vintage)
4453      =g=
4454          converter_unitsOnline(timeModelToCalc,nodesModelSel,yearsSel,converter_techs,vintage)
4455      - converter_unitsOnline(timeModelToCalc--1,nodesModelSel,yearsSel,converter_techs,vintage);
4456   
4457  * // ### Converter Activity Shutdowns
4458  * // Variable tracking the number of unit shutdowns.
4459  * // {Eq_converter_activityShutdowns}
4460  Eq_converter_activityShutdowns(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,converter_techs,vintage)
4461    $( converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
4462          and converter_techParam(converter_techs,vintage,"mipDispatch") = 1
4463          and converter_techParam(converter_techs,vintage,"minDowntime") > 0)
4464      ..
4465      converter_unitShutdowns(timeModelToCalc,nodesModelSel,yearsSel,converter_techs,vintage)
4466      =g=
4467          converter_unitsOnline(timeModelToCalc--1,nodesModelSel,yearsSel,converter_techs,vintage)
4468      - converter_unitsOnline(timeModelToCalc,nodesModelSel,yearsSel,converter_techs,vintage);
4469   
4470  * // ### Converter Activity Startup Limit
4471  * // Limit the number of startup cycles a unit can perform.
4472  * // {Eq_converter_limitStartups}
4473  Eq_converter_limitStartups(nodesModelSel,yearsSel,converter_techs,vintage)
4474    $( converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
4475          and converter_techParam(converter_techs,vintage,"mipDispatch") = 1
4476      and converter_techParam(converter_techs,vintage,"startupLimit") > 0)
4477      ..
4478      sum(timeModelToCalc, converter_unitStartups(timeModelToCalc,nodesModelSel,yearsSel,converter_techs,vintage))
4479    =l=
4480    converter_techParam(converter_techs,vintage,"startupLimit")
4481    * converter_unitsTotal(nodesModelSel,yearsSel,converter_techs,vintage);
4482   
4483  alias(timeModelToCalc,ttc);
4484   
4485  * // ### Converter Units Minimum Uptime
4486  * // Require recently started units to remain online for their respective minimum uptime.
4487  * // {Eq_converter_minUptime}
4488  Eq_converter_minUptime(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,converter_techs,vintage)
4489    $( converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
4490          and converter_techParam(converter_techs,vintage,"mipDispatch") = 1
4491      and converter_techParam(converter_techs,vintage,"minUptime") > 0)
4492      ..
4493      sum(ttc$[uptimeSearchRange(ttc) and ord(ttc)<=converter_techParam(converter_techs,vintage,"minUptime")],
4494          converter_unitStartups(ttc+[ord(timeModelToCalc)-converter_techParam(converter_techs,vintage,"minUptime")],
4495              nodesModelSel,yearsSel,converter_techs,vintage))
4496          =l=
4497          converter_unitsOnline(timeModelToCalc,nodesModelSel,yearsSel,converter_techs,vintage);
4498   
4499  * // ### Converter Units Minimum Downtime
4500  * // Require recently shut down units to remain offline for their respective minimum downtime.
4501  * // {Eq_converter_minDowntime}
4502  Eq_converter_minDowntime(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,converter_techs,vintage)
4503    $( converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
4504          and converter_techParam(converter_techs,vintage,"mipDispatch") = 1
4505      and converter_techParam(converter_techs,vintage,"minDowntime") > 0)
4506      ..
4507      sum(ttc$[downtimeSearchRange(ttc) and ord(ttc)<=converter_techParam(converter_techs,vintage,"minDowntime")],
4508          converter_unitShutdowns(ttc+[ord(timeModelToCalc)-converter_techParam(converter_techs,vintage,"minDowntime")],
4509              nodesModelSel,yearsSel,converter_techs,vintage))
4510          =l=
4511          converter_unitsTotal(nodesModelSel,yearsSel,converter_techs,vintage)
4512      - converter_unitsOnline(timeModelToCalc,nodesModelSel,yearsSel,converter_techs,vintage);
4513   
4514  * This equation is meant to cause the units to activate particular mode counters to gain access to the corresponding activities.
4515  * Activities are allowed to be used on units with stricter activity requirements but not the other way around.
4516  alias(activity, act);
4517   
4518  * // ### Converter MIP Units Activity Upper Limit Minimum Required Load
4519  * // Limit activity coefficients of activities with a given load requirement or stricter to the number of units in such modes.
4520  * // {Eq_converter_activityUpperLimitDetailedPartLoadMinReq}
4521  Eq_converter_activityUpperLimitDetailedPartLoadMinReq(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity)
4522    $( converter_usedTechAct(nodesModelSel,yearsSel,converter_techs,vintage,activity)
4523          and converter_hasMinLoad(converter_techs, vintage)
4524          and converter_techParam(converter_techs,vintage,"mipDetailedPartialLoad"))
4525      ..
4526      sum(act$(converter_activityRequirements(converter_techs,vintage,act,"minLoad")
4527                  >= converter_activityRequirements(converter_techs,vintage,activity,"minLoad")
4528               and converter_usedAct(converter_techs,vintage,act)),
4529      converter_activity(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,act))
4530    =l=
4531    converter_activityProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,"upper")
4532      * sum(act$(converter_activityRequirements(converter_techs,vintage,act,"minLoad")
4533                  >= converter_activityRequirements(converter_techs,vintage,activity,"minLoad")
4534                 and converter_usedAct(converter_techs,vintage,act)),
4535      converter_unitsUsingActivity_MIP(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,act));
4536   
4537  * // ### Converter MIP Units Activity Upper Limit Maximum Required Load
4538  * // Limit activity coefficients of activities with a given load requirement or stricter to the number of units in such modes.
4539  * // {Eq_converter_activityUpperLimitDetailedPartLoadMaxReq}
4540  Eq_converter_activityUpperLimitDetailedPartLoadMaxReq(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity)
4541    $( converter_usedTechAct(nodesModelSel,yearsSel,converter_techs,vintage,activity)
4542          and converter_hasMaxLoad(converter_techs,vintage)
4543          and converter_techParam(converter_techs,vintage,"mipDetailedPartialLoad"))
4544      ..
4545      sum(act$(converter_activityRequirements(converter_techs,vintage,act,"maxLoad")
4546                  <= converter_activityRequirements(converter_techs,vintage,activity,"maxLoad")
4547               and converter_usedAct(converter_techs,vintage,act)),
4548      converter_activity(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,act))
4549    =l=
4550      sum(act$(converter_activityRequirements(converter_techs,vintage,act,"maxLoad")
4551                  <= converter_activityRequirements(converter_techs,vintage,activity,"maxLoad")
4552               and converter_usedAct(converter_techs,vintage,act)),
4553      min(converter_activityRequirements(converter_techs,vintage,act,"maxLoad"),
4554            converter_activityProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,"upper"))
4555            * converter_unitsUsingActivity_MIP(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,act));
4556   
4557  * This equation is meant to enforce the lower limit requirements of activities in use.
4558  * Loads produced by activities with less strict requirements can contribute to the minimum load requirement of strict activities but not the other way around,
4559  * because these activities can only run on units in the respectively strict activation state.
4560   
4561  * // ### Converter MIP Units Activity Lower Limit Minimum Required Load
4562  * // Enforce sufficient activity coefficients of activities to justify all active modes.
4563  * // {Eq_converter_activityLowerLimitDetailedPartLoadMinReq}
4564  Eq_converter_activityLowerLimitDetailedPartLoadMinReq(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity)
4565    $( converter_usedTechAct(nodesModelSel,yearsSel,converter_techs,vintage,activity)
4566          and converter_hasMinLoad(converter_techs, vintage)
4567          and converter_techParam(converter_techs,vintage,"mipDetailedPartialLoad"))
4568      ..
4569      sum(act$(converter_activityRequirements(converter_techs,vintage,act,"minLoad")
4570                  <= converter_activityRequirements(converter_techs,vintage,activity,"minLoad")
4571               and converter_usedAct(converter_techs,vintage,act)),
4572      converter_activity(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,act))
4573    =g=
4574      sum(act$(converter_activityRequirements(converter_techs,vintage,act,"minLoad")
4575                  <= converter_activityRequirements(converter_techs,vintage,activity,"minLoad")
4576               and converter_usedAct(converter_techs,vintage,act)),
4577      max(converter_activityRequirements(converter_techs,vintage,act,"minLoad"),
4578            converter_activityProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,"lower"))
4579            * converter_unitsUsingActivity_MIP(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,act));
4580   
4581   
4582  * Simple one-activity-per-unit partial load equations
4583  * // ### Converter MIP Units Activity Upper Limit Partial Load Balance
4584  * // Enforce MIP units partial load upper limit.
4585  * // {Eq_converter_activityUpperLimitPartLoad}
4586  Eq_converter_activityUpperLimitPartLoad(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity)
4587    $( converter_usedTechAct(nodesModelSel,yearsSel,converter_techs,vintage,activity)
4588          and (converter_hasMinLoad(converter_techs, vintage)
4589                or converter_hasMaxLoad(converter_techs, vintage)
4590                or converter_hasConstantFluxInActivity(converter_techs, vintage))
4591          and not converter_techParam(converter_techs,vintage,"mipDetailedPartialLoad"))
4592      ..
4593      converter_activity(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity)
4594    =l=
4595    min(converter_activityRequirements(converter_techs,vintage,activity,"maxLoad"),
4596          converter_activityProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,"upper"))
4597          * converter_unitsUsingActivity_MIP(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity);
4598   
4599  * // ### Converter MIP Units Activity Lower Limit Partial Load Balance
4600  * // Enforce MIP units partial load lower limit.
4601  * // {Eq_converter_activityLowerLimitPartLoad}
4602  Eq_converter_activityLowerLimitPartLoad(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity)
4603    $( converter_usedTechAct(nodesModelSel,yearsSel,converter_techs,vintage,activity)
4604          and (converter_hasMinLoad(converter_techs, vintage)
4605                or converter_hasMaxLoad(converter_techs, vintage))
4606          and not converter_techParam(converter_techs,vintage,"mipDetailedPartialLoad"))
4607      ..
4608      converter_activity(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity)
4609    =g=
4610    max(converter_activityRequirements(converter_techs,vintage,activity,"minLoad"),
4611          converter_activityProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,"lower"))
4612          * converter_unitsUsingActivity_MIP(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity);
4613   
4614  * // ### Converter MIP Units Idle Online Units
4615  * // Counts idle online units at every time step
4616  * // {Eq_converter_noOnlineIdle}
4617  Eq_converter_noOnlineIdle(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
4618    $( converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
4619          and (converter_hasMinLoad(converter_techs, vintage)
4620              or converter_hasMaxLoad(converter_techs, vintage)
4621              or converter_hasConstantFluxInActivity(converter_techs,vintage))
4622          and not converter_techParam(converter_techs,vintage,"mipDetailedPartialLoad"))
4623      ..
4624      converter_unitsOnline(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
4625      =e=
4626      sum(activity$converter_usedAct(converter_techs,vintage,activity),
4627            converter_unitsUsingActivity_MIP(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity));
4628   
4629  * // ### Converter MIP Units Idle Online Units Partial load
4630  * // Counts idle online units at every time step
4631  * // {Eq_converter_noOnlineIdleDetailedPartLoad}
4632  Eq_converter_noOnlineIdleDetailedPartLoad(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
4633    $( converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
4634          and (converter_hasMinLoad(converter_techs, vintage)
4635                  or converter_hasMaxLoad(converter_techs, vintage))
4636          and converter_techParam(converter_techs,vintage,"mipDetailedPartialLoad"))
4637      ..
4638      converter_unitsOnline(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
4639      =l=
4640      sum(activity$converter_usedAct(converter_techs,vintage,activity),
4641            converter_unitsUsingActivity_MIP(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity));
4642   
4643  * // ### Converter MIP activity model limit
4644  * // Converter activity model limit
4645  * // {Eq_converter_activityModeLimit}
4646  Eq_converter_activityModeLimit(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity)
4647    $( converter_usedTechAct(nodesModelSel,yearsSel,converter_techs,vintage,activity)
4648          and (converter_hasMinLoad(converter_techs, vintage)
4649                or converter_hasMaxLoad(converter_techs, vintage))
4650          and converter_techParam(converter_techs,vintage,"mipDetailedPartialLoad"))
4651      ..
4652      converter_unitsOnline(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
4653      =g=
4654      converter_unitsUsingActivity_MIP(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity);
4655   
4656  * ==== model definition ====
4657   
4658  Model M_converter
4659  /
4660    Eq_converter_unitsBalance
4661    Eq_converter_unitsFixedDecom
4662    Eq_converter_unitsFreeDecom
4663    Eq_converter_unitsUpperLimit
4664    Eq_converter_unitsLowerLimit
4665    Eq_converter_unitsFixedLimit
4666    Eq_converter_unitsTotalMIP
4667    Eq_converter_unitsOnlineMIP
4668    Eq_converter_activityUpperLimit
4669    Eq_converter_activityLowerLimit
4670    Eq_converter_activityFixedLimit
4671    Eq_converter_rampPos
4672    Eq_converter_rampNeg
4673    Eq_converter_rampLimit
4675    Eq_converter_unitsOnline
4676    Eq_converter_unitsOnlineUC
4678    Eq_converter_activityStartups
4679    Eq_converter_activityShutdowns
4680    Eq_converter_limitStartups
4681    Eq_converter_minUptime
4682    Eq_converter_minDowntime
4683    Eq_converter_activityUpperLimitDetailedPartLoadMinReq
4684    Eq_converter_activityUpperLimitDetailedPartLoadMaxReq
4685    Eq_converter_activityLowerLimitDetailedPartLoadMinReq
4686    Eq_converter_activityUpperLimitPartLoad
4687    Eq_converter_activityLowerLimitPartLoad
4688    Eq_converter_noOnlineIdle
4689    Eq_converter_noOnlineIdleDetailedPartLoad
4690    Eq_converter_activityModeLimit
4691  /;
INCLUDE    C:\Local\REMix\framework\remix\framework\model\source\core\storage.gms
4693  * SPDX-FileCopyrightText: Copyright (c) 2023 German Aerospace Center (DLR)
4694  * SPDX-License-Identifier: BSD-3-Clause
4695   
4696  * // # core_storage
4697  * // The equations in this file describe the storages in the model.
4698   
4699  * // ## Variables
4700  * // {special_table_storage_variables}
5029   
5030   
5031  * === SoC mappings ===
5032  set storage_usedTechSoCState(storage_techs,vintage,soc_statesIn);
5033  storage_usedTechSoCState(storage_techs,vintage,soc_states(soc_statesIn))
5034      $(storage_SoCParam(storage_techs,vintage,soc_states,"eRate") > 0
5035        and storage_SoCParam(storage_techs,vintage,soc_states,"cRate") > 0)
5036      = yes;
5037   
5038  set storage_validSoCRange(storage_techs,vintage);
5039  storage_validSoCRange(storage_techs,vintage)
5040      = smax(soc_states$storage_usedTechSoCState(storage_techs,vintage,soc_states), storage_SoCParam(storage_techs,vintage,soc_states,"SoC")) = 1
5041        and smin(soc_states$storage_usedTechSoCState(storage_techs,vintage,soc_states), storage_SoCParam(storage_techs,vintage,soc_states,"SoC")) = 0;
5042   
5043  * === Translate SoC parameters to ordered SoC-set ===
5044  * set ordered_socs / soc1*soc20 /;
5045  * alias(soc_states, soc_states_c);
5046  * parameter storage_SoCParam_ordered(storage_techs,vintage,ordered_socs,pc_storage_SoCParam);
5047  * storage_SoCParam_ordered(storage_techs,vintage,ordered_socs,pc_storage_SoCParam)
5048  *     $storage_validSoCRange(storage_techs,vintage)
5049  *     = sum(soc_states$(ord(ordered_socs) = sum(soc_states_c$(storage_SoCParam(storage_techs,vintage,soc_states_c,"SoC") <= storage_SoCParam(storage_techs,vintage,soc_states,"SoC")
5050  *                                                            and storage_usedTechSoCState(storage_techs,vintage,soc_states_c)), 1)
5051  *                       and storage_usedTechSoCState(storage_techs,vintage,soc_states)),
5052  *           storage_SoCParam(storage_techs,vintage,soc_states,pc_storage_SoCParam));
5053  *
5054  * set storage_usedTechSoCStateOrdered(storage_techs,vintage,ordered_socs);
5055  * storage_usedTechSoCStateOrdered(storage_techs,vintage,ordered_socs)
5056  *     $(storage_SoCParam_ordered(storage_techs,vintage,ordered_socs,"eRate") > 0
5057  *       and storage_SoCParam_ordered(storage_techs,vintage,ordered_socs,"cRate") > 0)
5058  *     = yes;
5059   
5060  parameter storage_bigM(storage_techs,vintage);
5061  storage_bigM(storage_techs,vintage) = smax((nodesModel,years), storage_reservoirParam(nodesModel,years,storage_techs,"unitsUpperLimit"));
5062  storage_bigM(storage_techs,vintage)$(storage_bigM(storage_techs,vintage) = INF) = 10000;
5063  storage_bigM(storage_techs,vintage)$(storage_bigM(storage_techs,vintage) = 0) = 10000;
5064   
5065  * === calculate the number of years represented by single year to calc ===
5066  alias(yearsToCalc, yearsToCalc_a)
5067  parameter representedYears(years);
5068  representedYears(years) = 0.5 *(smin(yearsToCalc$(yearsToCalc.val > years.val or yearsToCalc.val = smax(yearsToCalc_a, yearsToCalc_a.val)), yearsToCalc.val)
5069                                  - smax(yearsToCalc$(yearsToCalc.val < years.val or yearsToCalc.val = smin(yearsToCalc_a, yearsToCalc_a.val)), yearsToCalc.val));
5070   
5071  * ==== calculation of mappings ====
5072   
5073  * Technologies with a lifeTime > 0 are available
5074  set storage_availTech(nodesModel,years,storage_techs,vintage);
5075  storage_availTech(nodesModel,years,storage_techs,vintage)
5076      $(vintage.val = smax(vintage_a$(vintage_a.val <= years.val
5077          and storage_techParam(storage_techs,vintage_a,"lifeTime") > 0), vintage_a.val)) = yes;
5078   
5079  * Technologies to optimize become unavailable if they have an unitsUpperLimit of 0
5080  storage_availTech(nodesModel,years,storage_techs,vintage)
5081      $(yearsToCalc(years) and storage_reservoirParam(nodesModel,years,storage_techs,"unitsUpperLimit") = 0 ) = no;
5082   
5083  * Technologies already built become unavailable if they have an unitsBuild of 0
5084  storage_availTech(nodesModel,years,storage_techs,vintage)
5085      $( ( not yearsToCalc(years)) and storage_reservoirParam(nodesModel,years,storage_techs,"unitsBuild") = 0 ) = no;
5086   
5087  * Used technologies are available technologies over their technical lifeTime
5088  set storage_usedTech(nodesModel,years,storage_techs,vintage);
5089  storage_usedTech(nodesModel,years,storage_techs,vintage)
5090      $(vintage.val <= years.val
5091          and years.val < smax(years_a$storage_availTech(nodesModel,years_a,storage_techs,vintage),
5092                                              years_a.val + storage_techParam(storage_techs,vintage,"lifeTime"))
5093          ) = yes;
5094   
5095  * Technologies have to be decomissioned in the interval of first avail + lifetime to last avail + lifetime
5096  set storage_decomTech(nodesModel,years,storage_techs,vintage);
5097  storage_decomTech(nodesModel,years,storage_techs,vintage)
5098    $(sum(years_a$storage_usedTech(nodesModel,years_a,storage_techs,vintage), 1)
5099      and sum(yearsToCalc
5100        $(sameas(years, yearsToCalc)
5101          and yearsToCalc.val >= smin(years_a$storage_availTech(nodesModel,years_a,storage_techs,vintage), years_a.val) + storage_techParam(storage_techs,vintage,"lifeTime")
5102          and yearsToCalc.val <= smax(years_a$storage_availTech(nodesModel,years_a,storage_techs,vintage), years_a.val) + storage_techParam(storage_techs,vintage,"lifeTime")), 1))
5103    = yes;
5104   
5105  * Extend the decom frame to the year after the last year of usedTech
5106  storage_decomTech(nodesModel,yearsToCalc,storage_techs,vintage)
5107    $(storage_usedTech(nodesModel,yearsToCalc-1,storage_techs,vintage)
5108      and storage_decomTech(nodesModel,yearsToCalc-1,storage_techs,vintage))
5109    = yes;
5110   
5111  * Mapping for used commodities
5112  set storage_usedCom(storage_techs,vintage,commodity);
5113  option storage_usedCom < storage_sizeParam;
5114   
5115  set storage_usedTechCom(nodesModel,years,storage_techs,vintage,commodity);
5116  storage_usedTechCom(nodesModel,years,storage_techs,vintage,commodity)
5117      $(storage_usedTech(nodesModel,years,storage_techs,vintage)
5118          and storage_usedCom(storage_techs,vintage,commodity))
5119      = yes;
5120   
5121   
5122  * // ## Load units from gdx file
5124   
5125  * ==== aggregation of profiles ====
5126  * derive upper and lower profiles then aggregate
5127  set storage_level_hasProfileIn(nodesData,years,storage_techs,pc_storage_levelProfile);
5128  option storage_level_hasProfileIn < storage_levelProfileIn;
5129   
5130  set storage_level_hasProfile(nodesModel,years,storage_techs,pc_storage_levelProfile);
5131  storage_level_hasProfile(nodesModelToCalc,yearsToCalc,storage_techs,pc_storage_levelProfile)
5132      = sum(nodesData$aggregateNodesModel(nodesData,nodesModelToCalc),
5133              storage_level_hasProfileIn(nodesData,yearsToCalc,storage_techs,pc_storage_levelProfile));
5134   
5135  * weighted average for a real sum of units upper limits, plain average if one region has an upper limit of inf
5136  parameter storage_levelProfile(timeModel,nodesModel,years,storage_techs,vintage,pc_storage_levelProfile);
5137  storage_levelProfile(timeModelToCalc,storage_usedTech(nodesModelToCalc,yearsToCalc,storage_techs,vintage),"upper")
5138      = storage_techParam(storage_techs,vintage,"levelUpperLimit");
5139  storage_levelProfile(timeModelToCalc,storage_usedTech(nodesModelToCalc,yearsToCalc,storage_techs,vintage),"lower")
5140      = storage_techParam(storage_techs,vintage,"levelLowerLimit");
5141   
5142  set storage_finiteUnitLimit(nodesModelToCalc,yearsToCalc,storage_techs);
5143  storage_finiteUnitLimit(nodesModelToCalc,yearsToCalc,storage_techs) = sum(nodesData$aggregateNodesModel(nodesData,nodesModelToCalc), storage_reservoirParamIn(nodesData,yearsToCalc,storage_techs,"unitsUpperLimit")) > 0
5144                                                   and sum(nodesData$aggregateNodesModel(nodesData,nodesModelToCalc), storage_reservoirParamIn(nodesData,yearsToCalc,storage_techs,"unitsUpperLimit")) < inf;
5145   
5146  storage_levelProfile(timeModelToCalc,storage_usedTech(nodesModelToCalc,yearsToCalc,storage_techs,vintage),pc_storage_levelProfile)
5147      $( storage_level_hasProfile(nodesModelToCalc,yearsToCalc,storage_techs,pc_storage_levelProfile)
5148          and storage_finiteUnitLimit(nodesModelToCalc,yearsToCalc,storage_techs))
5149      = sum(nodesData$aggregateNodesModel(nodesData,nodesModelToCalc),
5150              sum(timeData$timeMapping(timeData,timeModelToCalc),
5151                    storage_levelProfileIn(timeData,nodesData,yearsToCalc,storage_techs,pc_storage_levelProfile))
5152                / timeLength(timeModelToCalc)
5153              * storage_reservoirParamIn(nodesData,yearsToCalc,storage_techs,"unitsUpperLimit"))
5154      / sum(nodesData$aggregateNodesModel(nodesData,nodesModelToCalc),
5155              storage_reservoirParamIn(nodesData,yearsToCalc,storage_techs,"unitsUpperLimit"));
5156   
5157  storage_levelProfile(timeModelToCalc,storage_usedTech(nodesModelToCalc,yearsToCalc,storage_techs,vintage),pc_storage_levelProfile)
5158      $( storage_level_hasProfile(nodesModelToCalc,yearsToCalc,storage_techs,pc_storage_levelProfile)
5159          and sum(nodesData$aggregateNodesModel(nodesData,nodesModelToCalc),
5160                      storage_reservoirParamIn(nodesData,yearsToCalc,storage_techs,"unitsUpperLimit")) = inf )
5161      = sum(nodesData$(aggregateNodesModel(nodesData,nodesModelToCalc)
5162                      and storage_reservoirParamIn(nodesData,yearsToCalc,storage_techs,"unitsUpperLimit") = inf ),
5163              sum(timeData$timeMapping(timeData,timeModelToCalc),
5164                    storage_levelProfileIn(timeData,nodesData,yearsToCalc,storage_techs,pc_storage_levelProfile))
5165                / timeLength(timeModelToCalc))
5166      / sum(nodesData$(aggregateNodesModel(nodesData,nodesModelToCalc)
5167                      and storage_reservoirParamIn(nodesData,yearsToCalc,storage_techs,"unitsUpperLimit") = inf ), 1);
5168   
5169  * for fixed profiles overwrite upper and lower profile
5170  storage_levelProfile(timeModelToCalc,nodesModelToCalc,yearsToCalc,storage_techs,vintage,"lower")
5171      $storage_level_hasProfile(nodesModelToCalc,yearsToCalc,storage_techs,"fixed")
5172      = storage_levelProfile(timeModelToCalc,nodesModelToCalc,yearsToCalc,storage_techs,vintage,"fixed");
5173   
5174  storage_levelProfile(timeModelToCalc,nodesModelToCalc,yearsToCalc,storage_techs,vintage,"upper")
5175      $storage_level_hasProfile(nodesModelToCalc,yearsToCalc,storage_techs,"fixed")
5176      = storage_levelProfile(timeModelToCalc,nodesModelToCalc,yearsToCalc,storage_techs,vintage,"fixed");
5177   
5178   
5179  * ==== parameter modifications ====
5180  storage_reservoirParam(nodesModel,years,storage_techs,"unitsLowerLimit")
5181          $sum(vintage, storage_techParam(storage_techs,vintage,"mipUnits"))
5182      = floor(storage_reservoirParam(nodesModel,years,storage_techs,"unitsLowerLimit"));
5183  storage_reservoirParam(nodesModel,years,storage_techs,"unitsUpperLimit")
5184          $sum(vintage, storage_techParam(storage_techs,vintage,"mipUnits"))
5185      = ceil(storage_reservoirParam(nodesModel,years,storage_techs,"unitsUpperLimit"));
5186   
5187   
5188  * ==== definition of variables ====
5189   
5190  * Initialise variables for unitsBuild
5191  storage_unitsBuild.l(nodesModel,years,storage_techs,vintage)
5192      $storage_availTech(nodesModel,years,storage_techs,vintage)
5193      = storage_reservoirParam(nodesModel,years,storage_techs,"unitsBuild");
5194  storage_unitsBuild.lo(nodesModel,yearsToCalc,storage_techs,vintage)
5195      $storage_availTech(nodesModel,yearsToCalc,storage_techs,vintage)
5196      = storage_unitsBuild.l(nodesModel,yearsToCalc,storage_techs,vintage);
5197  storage_unitsBuild.fx(nodesModel,years,storage_techs,vintage)
5198      $storage_reservoirParam(nodesModel,years,storage_techs,"noExpansion")
5199      = storage_unitsBuild.l(nodesModel,years,storage_techs,vintage);
5200   
5201  * Initialise variables for unitsDecom
5202  storage_unitsDecom.l(nodesModel,years,storage_techs,vintage)
5203      $(storage_decomTech(nodesModel,years,storage_techs,vintage)
5204        and years.val < sum(yearsToCalc$(ord(yearsToCalc) = 1), yearsToCalc.val))
5205      = sum((years_a,years_aa)$(sameas(years-1, years_aa)
5206                        and years_a.val > years_aa.val - storage_techParam(storage_techs,vintage,'lifeTime')
5207                        and years_a.val <= years.val - storage_techParam(storage_techs,vintage,'lifeTime')
5208                        and storage_availTech(nodesModel,years_a,storage_techs,vintage)),
5209          storage_unitsBuild.l(nodesModel,years_a,storage_techs,vintage));
5210   
5211  storage_unitsDecom.l(nodesModel,yearsToCalc,storage_techs,vintage)
5212    $storage_decomTech(nodesModel,yearsToCalc,storage_techs,vintage)
5213    = sum(years$
5214          (years.val < sum(yearsToCalc_a$(ord(yearsToCalc_a) = 1), yearsToCalc_a.val)
5215            and storage_availTech(nodesModel,years,storage_techs,vintage)
5216            and years.val > sum(years_a$sameas(years_a, yearsToCalc-1), years_a.val) - storage_techParam(storage_techs,vintage,'lifeTime')
5217            and years.val <= yearsToCalc.val - storage_techParam(storage_techs,vintage,'lifeTime')),
5218        storage_unitsBuild.l(nodesModel,years,storage_techs,vintage))
5219      + sum(yearsToCalc_a$
5220          (yearsToCalc_a.val < sum(yearsToCalc_aa$(ord(yearsToCalc_aa) > 1), yearsToCalc_a.val)
5221            and storage_availTech(nodesModel,yearsToCalc_a,storage_techs,vintage)
5222            and yearsToCalc_a.val > sum(years_a$sameas(years_a, yearsToCalc-1), years_a.val) - storage_techParam(storage_techs,vintage,'lifeTime')
5223            and yearsToCalc_a.val <= yearsToCalc.val - storage_techParam(storage_techs,vintage,'lifeTime')),
5224        storage_unitsBuild.l(nodesModel,yearsToCalc_a,storage_techs,vintage));
5225        ;
5226   
5227  storage_unitsDecom.lo(nodesModel,yearsToCalc,storage_techs,vintage)
5228      $(storage_usedTech(nodesModel,yearsToCalc,storage_techs,vintage)
5229        and not storage_techParam(storage_techs,vintage,"freeDecom"))
5230      = storage_unitsDecom.l(nodesModel,yearsToCalc,storage_techs,vintage)
5231   
5232  * Calculate planned unit expansion
5233  parameter storage_unitsPlanned(nodesModel,years,storage_techs,vintage);
5234  storage_unitsPlanned(nodesModel,years,storage_techs,vintage) = 0;
5235  loop(years,
5236    storage_unitsPlanned(nodesModel,years,storage_techs,vintage)
5237      =
5238      storage_unitsPlanned(nodesModel,years-1,storage_techs,vintage)
5239          $storage_usedTech(nodesModel,years-1,storage_techs,vintage)
5240      + storage_unitsBuild.l(nodesModel,years,storage_techs,vintage)
5241          $storage_availTech(nodesModel,years,storage_techs,vintage)
5242      - storage_unitsDecom.l(nodesModel,years,storage_techs,vintage)
5243          $storage_usedTech(nodesModel,years,storage_techs,vintage);
5244  );
5245   
5246  * Set initial state for planned units
5247  storage_unitsTotal.l(nodesModel,years,storage_techs,vintage)
5248    = storage_unitsPlanned(nodesModel,years,storage_techs,vintage)
5249   
5250  * Calculate if planned unit expansion is bounded by upper and lower limits
5251  set storage_unitBoundsFixed(nodesModel,years,storage_techs);
5252  storage_unitBoundsFixed(nodesModel,years,storage_techs)
5253    $(sum(vintage$storage_usedTech(nodesModel,years,storage_techs,vintage),
5254          storage_unitsPlanned(nodesModel,years,storage_techs,vintage))
5255      = storage_reservoirParam(nodesModel,years,storage_techs,"unitsUpperLimit")
5256    and sum(vintage$storage_usedTech(nodesModel,years,storage_techs,vintage),
5257          storage_unitsPlanned(nodesModel,years,storage_techs,vintage))
5258      = storage_reservoirParam(nodesModel,years,storage_techs,"unitsLowerLimit"))
5259    = yes;
5260   
5261  * Fix unitsBuild, unitsDecom, unitsTotal if levels are predetermined by upper and lower limits
5262  storage_unitsBuild.fx(nodesModel,years,storage_techs,vintage)
5263    $(storage_availTech(nodesModel,years,storage_techs,vintage)
5264      and storage_unitBoundsFixed(nodesModel,years,storage_techs))
5265    = storage_unitsBuild.l(nodesModel,years,storage_techs,vintage);
5266  storage_unitsDecom.fx(nodesModel,years,storage_techs,vintage)
5267    $(storage_usedTech(nodesModel,years,storage_techs,vintage)
5268      and storage_unitBoundsFixed(nodesModel,years,storage_techs))
5269    = storage_unitsDecom.l(nodesModel,years,storage_techs,vintage);
5270  storage_unitsTotal.fx(nodesModel,years,storage_techs,vintage)
5271    $(storage_usedTech(nodesModel,years,storage_techs,vintage)
5272      and storage_unitBoundsFixed(nodesModel,years,storage_techs))
5273    = storage_unitsTotal.l(nodesModel,years,storage_techs,vintage);
5274   
5275  storage_unitsTotal_MIP.up(nodesModel,years,storage_techs,vintage)
5276      $(storage_usedTech(nodesModel,years,storage_techs,vintage)
5277        and storage_techParam(storage_techs,vintage,"mipUnits") = 1)
5278      = storage_reservoirParam(nodesModel,years,storage_techs,"unitsUpperLimit");
5279   
5280  * Add parameter for fixing capacities during myopic runs
5281  parameter storage_unitsDelta(nodesModel,years,storage_techs);
5282   
5283   
5284  * ==== declaration of equations ====
5285   
5286  equations
5287    Eq_storage_unitsBalance(nodesModel,years,storage_techs,vintage
5288      ) "Ensures the units balance over the planning period."
5289    Eq_storage_unitsFixedDecom(nodesModel,years,storage_techs,vintage
5290      ) "Restricts the fixed decommissioning of units over the planning period."
5291    Eq_storage_unitsFreeDecom(nodesModel,years,storage_techs,vintage
5292      ) "Restricts the free decommissioning of units over the planning period."
5293    Eq_storage_unitsUpperLimit(nodesModel,years,storage_techs
5294      ) "Upper bound for the total number of units."
5295    Eq_storage_unitsLowerLimit(nodesModel,years,storage_techs
5296      ) "Lower bound for the total number of units."
5297    Eq_storage_unitsTotalMIP(nodesModel,years,storage_techs,vintage
5298      ) "Fixes the total number of units to the corresponding integer variable."
5299   
5300    Eq_storage_levelUpperLimit(timeModel,nodesModel,years,storage_techs,vintage,commodity
5301      ) "Upper bound for the total number of units."
5302    Eq_storage_levelUpperLimit_degradation(timeModel,nodesModel,years,storage_techs,vintage,commodity
5303      ) "Upper bound for the total number of units if the storage technology accounts for degradation."
5304    Eq_storage_levelLowerLimit(timeModel,nodesModel,years,storage_techs,vintage,commodity
5305      ) "Lower bound for the total number of units."
5306    Eq_storage_losses(timeModel,nodesModel,years,storage_techs,vintage,commodity
5307      ) "Stored commodities lost due to self discharge."
5308    Eq_storage_unitsBalanceStates(nodesModel,years,storage_techs,vintage
5309      ) "Currently available units must have been built at some point in time and have some state of degradation."
5310    Eq_storage_unitsUpperLimitPerState(nodesModel,years,yearsCom,storage_techs,vintage
5311      ) "There cannot be more units from a certain year than the amount built in that year."
5312    Eq_storage_unitsStatesNoRecovery(nodesModel,years,yearsCom,storage_techs,vintage,degradation_states
5313      ) "There is no recovery."
5314    Eq_storage_cRateLimit(timeModel,nodesModel,years,storage_techs,vintage,commodity
5315      ) "Limit charging rate based on unit capacity."
5316    Eq_storage_eRateLimit(timeModel,nodesModel,years,storage_techs,vintage,commodity
5317      ) "Limit discharging rate based on unit capacity."
5318    Eq_storage_charge(timeModel,nodesModel,years,storage_techs,vintage,commodity
5319      ) "Positive change in state of charge is influx."
5320    Eq_storage_discharge(timeModel,nodesModel,years,storage_techs,vintage,commodity
5321      ) "Negative change in state of charge is outflux."
5322   
5323    Eq_storage_levelStateSum(timeModel,nodesModel,years,storage_techs,vintage,commodity
5324      ) "Sum of degradation class storage levels is the global level."
5325    Eq_storage_levelUpperLimitPerAge(timeModel,nodesModel,years,yearsCom,storage_techs,vintage,commodity
5326      ) "Upper bound for units of a certain state."
5327    Eq_storage_chargingPerAge(timeModel,nodesModel,years,yearsCom,storage_techs,vintage,commodity
5328      ) "Positive change in state of charge is influx for each degradation class."
5329    Eq_storage_chargeBasedDegradationDistribution(nodesModel,years,yearsCom,storage_techs,vintage,commodity
5330      ) "Determine degradation states of storage units."
5331    Eq_storage_unitsDecomStateSum(nodesModel,years,storage_techs,vintage
5332      ) "All decomminsioned units must have a degradation state."
5333    Eq_storage_unitsDegradation(nodesModel,years,yearsCom,storage_techs,vintage,degradation_states
5334      ) "Only allow one range of degradation states per year and age group."
5335    Eq_storage_unitsDegradation_onlyOneRange(nodesModel,years,yearsCom,storage_techs,vintage
5336      ) "Limit usable degradation states to one range, i.e., two neighboring states."
5337   
5338    Eq_storage_unitsSoC_sum(timeModel,nodesModel,years,storage_techs,vintage
5339      ) "Every unit has a state of charge."
5340    Eq_storage_levelSoC(timeModel,nodesModel,years,storage_techs,vintage,commodity
5341      ) "Every unit has a state of charge."
5342    Eq_storage_unitsSoC(timeModel,nodesModel,years,storage_techs,vintage,soc_statesIn
5343      ) "Number of units in particular SoC."
5344    Eq_storage_unitsSoC_onlyOneRange(timeModel,nodesModel,years,storage_techs,vintage
5345      ) "Limit usable SoC states to one range, i.e., two neighboring states."
5346   
5347    Eq_storage_cRateLimit_SoC(timeModel,nodesModel,years,storage_techs,vintage,commodity
5348      ) "Limit charging rate based on unit capacity."
5349    Eq_storage_eRateLimit_SoC(timeModel,nodesModel,years,storage_techs,vintage,commodity
5350      ) "Limit discharging rate based on unit capacity."
5351    ;
5352   
5353  * ==== equation definition ====
5354  * // ## Equations
5355  * // ### Storage Units Balance
5356  * // Ensures that the total units are consistent with the built and decommissioned units.
5357  * // {Eq_storage_unitsBalance}
5358  Eq_storage_unitsBalance(nodesModelSel,yearsSel,storage_techs,vintage)
5359      $((storage_usedTech(nodesModelSel,yearsSel,storage_techs,vintage)
5360            or sum(years$sameas(years,yearsSel), storage_usedTech(nodesModelSel,years-1,storage_techs,vintage)))
5361          and not storage_unitBoundsFixed(nodesModelSel,yearsSel,storage_techs))
5362      ..
5363      storage_unitsTotal(nodesModelSel,yearsSel,storage_techs,vintage)
5364      =e=
5365          sum(yearsToCalc$(ord(yearsToCalc) = 1 and sameas(yearsToCalc, yearsSel)),
5366        sum(years$sameas(years, yearsToCalc),
5367          storage_unitsTotal(nodesModelSel,years-1,storage_techs,vintage)
5368            $storage_usedTech(nodesModelSel,years-1,storage_techs,vintage)))
5369      + sum((yearsToCalc)$(ord(yearsToCalc) > 1 and sameas(yearsToCalc, yearsSel)),
5370        storage_unitsTotal(nodesModelSel,yearsToCalc-1,storage_techs,vintage)
5371          $storage_usedTech(nodesModelSel,yearsToCalc-1,storage_techs,vintage))
5372      + storage_unitsBuild(nodesModelSel,yearsSel,storage_techs,vintage)
5373          $storage_availTech(nodesModelSel,yearsSel,storage_techs,vintage)
5374      - storage_unitsDecom(nodesModelSel,yearsSel,storage_techs,vintage)
5375          $storage_usedTech(nodesModelSel,yearsSel,storage_techs,vintage);
5376   
5377  * // ### Storage Units Fixed Decommission
5378  * // Restricts the fixed decommissioning of storage units over the planning period.
5379  * // {Eq_storage_unitsFixedDecom}
5380  Eq_storage_unitsFixedDecom(nodesModelSel,yearsSel,storage_techs,vintage)
5381      $(storage_decomTech(nodesModelSel,yearsSel,storage_techs,vintage)
5382          and not storage_techParam(storage_techs,vintage,"freeDecom") = 1
5383          and not storage_unitBoundsFixed(nodesModelSel,yearsSel,storage_techs))
5384      ..
5385      storage_unitsDecom(nodesModelSel,yearsSel,storage_techs,vintage)
5386      =e=
5387      sum(years$
5388          (storage_availTech(nodesModelSel,years,storage_techs,vintage)
5389            and years.val > sum(yearsToCalc$sameas(yearsToCalc+1, yearsSel), yearsToCalc.val) - storage_techParam(storage_techs,vintage,'lifeTime')
5390            and years.val <= yearsSel.val - storage_techParam(storage_techs,vintage,'lifeTime')),
5391        storage_unitsBuild(nodesModelSel,years,storage_techs,vintage));
5392   
5393  * // ### Storage Units Free Decomission
5394  * // Restricts the free decommissioning of storage units over the planning period.
5395  * // {Eq_storage_unitsFreeDecom}
5396  Eq_storage_unitsFreeDecom(nodesModelSel,yearsSel,storage_techs,vintage)
5397      $((storage_decomTech(nodesModelSel,yearsSel,storage_techs,vintage)
5398          or storage_usedTech(nodesModelSel,yearsSel,storage_techs,vintage))
5399          and storage_techParam(storage_techs,vintage,"freeDecom") = 1)
5400      ..
5401      sum(years$
5402            ((storage_decomTech(nodesModelSel,years,storage_techs,vintage)
5403              or storage_usedTech(nodesModelSel,years,storage_techs,vintage))
5404              and years.val < sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)),
5405          storage_unitsDecom(nodesModelSel,years,storage_techs,vintage))
5406      + sum(yearsToCalc$
5407            ((storage_decomTech(nodesModelSel,yearsToCalc,storage_techs,vintage)
5408              or storage_usedTech(nodesModelSel,yearsToCalc,storage_techs,vintage))
5409              and yearsToCalc.val >= sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
5410              and yearsToCalc.val <= yearsSel.val),
5411          storage_unitsDecom(nodesModelSel,yearsToCalc,storage_techs,vintage))
5412      =g=
5413      sum(years$
5414            (storage_availTech(nodesModelSel,years,storage_techs,vintage)
5415              and years.val < sum(yearsToCalc$(ord(yearsToCalc)=1), yearsToCalc.val) - storage_techParam(storage_techs,vintage,'lifeTime')),
5416          storage_unitsBuild(nodesModelSel,years,storage_techs,vintage))
5417      + sum(yearsToCalc$
5418            (storage_availTech(nodesModelSel,yearsToCalc,storage_techs,vintage)
5419              and yearsToCalc.val >= sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
5420              and yearsToCalc.val <= yearsSel.val - storage_techParam(storage_techs,vintage,'lifeTime')),
5421          storage_unitsBuild(nodesModelSel,yearsToCalc,storage_techs,vintage));
5422   
5423  * // ### Storage Units Lower Limit
5424  * // Lower bound for the total number of storage units.
5425  * // {Eq_storage_unitsLowerLimit}
5426  Eq_storage_unitsLowerLimit(nodesModelSel,yearsSel,storage_techs)
5427      $(storage_reservoirParam(nodesModelSel,yearsSel,storage_techs,'unitsLowerLimit') > 0 )
5428      ..
5429      sum(vintage$storage_usedTech(nodesModelSel,yearsSel,storage_techs,vintage),
5430          storage_unitsTotal(nodesModelSel,yearsSel,storage_techs,vintage))
5431      =g=
5432      storage_reservoirParam(nodesModelSel,yearsSel,storage_techs,"unitsLowerLimit");
5433   
5434  * // ### Storage Units Upper Limit
5435  * // Upper bound for the total number of storage units.
5436  * // {Eq_storage_unitsUpperLimit}
5437  Eq_storage_unitsUpperLimit(nodesModelSel,yearsSel,storage_techs)
5438      $(storage_reservoirParam(nodesModelSel,yearsSel,storage_techs,'unitsUpperLimit') >= 0
5439          and storage_reservoirParam(nodesModelSel,yearsSel,storage_techs,'unitsUpperLimit') < +inf )
5440      ..
5441      sum(vintage$storage_usedTech(nodesModelSel,yearsSel,storage_techs,vintage),
5442          storage_unitsTotal(nodesModelSel,yearsSel,storage_techs,vintage))
5443      =l=
5444      storage_reservoirParam(nodesModelSel,yearsSel,storage_techs,"unitsUpperLimit");
5445   
5446  * // ### Storage Units Total MIP
5447  * // Fixes the total number of storage units to the corresponding integer variable.
5448  * // {Eq_storage_unitsTotalMIP}
5449  Eq_storage_unitsTotalMIP(nodesModelSel,yearsSel,storage_techs,vintage)
5450      $( storage_usedTech(nodesModelSel,yearsSel,storage_techs,vintage)
5451          and storage_techParam(storage_techs,vintage,"mipUnits") = 1 )
5452      ..
5453      storage_unitsTotal(nodesModelSel,yearsSel,storage_techs,vintage)
5454      =e=
5455      storage_unitsTotal_MIP(nodesModelSel,yearsSel,storage_techs,vintage);
5456   
5457  * // ### Storage Level Lower Limit
5458  * // Lower limit on the storage level.
5459  * // {Eq_storage_levelLowerLimit}
5460  Eq_storage_levelLowerLimit(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
5461      $(storage_usedTechCom(nodesModelSel,yearsSel,storage_techs,vintage,commodity)
5462          and storage_levelProfile(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,"lower") > 0)
5463      ..
5464      storage_level(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
5465      =g=
5466      storage_levelProfile(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,"lower")
5467      * storage_sizeParam(storage_techs,vintage,commodity,"size")
5468      * storage_unitsTotal(nodesModelSel,yearsSel,storage_techs,vintage);
5469   
5470  * // ### Storage Level Upper Limit
5471  * // Upper limit on the storage level.
5472  * // {Eq_storage_levelUpperLimit}
5473  Eq_storage_levelUpperLimit(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
5474      $(storage_usedTechCom(nodesModelSel,yearsSel,storage_techs,vintage,commodity)
5475          and not storage_hasDegradation(storage_techs,vintage)
5476          and storage_levelProfile(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,"upper") >= 0)
5477      ..
5478      storage_level(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
5479      =l=
5480      storage_levelProfile(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,"upper")
5481      * storage_sizeParam(storage_techs,vintage,commodity,"size")
5482      * storage_unitsTotal(nodesModelSel,yearsSel,storage_techs,vintage);
5483   
5484  * // ### Storage Level Upper Limit (degradation)
5485  * // Upper limit on the storage level if the storage technology accounts for degradation.
5486  * // {Eq_storage_levelUpperLimit_degradation}
5487  Eq_storage_levelUpperLimit_degradation(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
5488      $(storage_usedTechCom(nodesModelSel,yearsSel,storage_techs,vintage,commodity)
5489          and storage_hasDegradation(storage_techs,vintage)
5490          and storage_levelProfile(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,"upper") >= 0)
5491      ..
5492      storage_level(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
5493      =l=
5494      storage_levelProfile(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,"upper")
5495      * storage_sizeParam(storage_techs,vintage,commodity,"size")
5496      * sum((degradation_states,yearsCom)$storage_usedDegradation(storage_techs,vintage,degradation_states),
5497              (storage_degradationParam(storage_techs,vintage,degradation_states,"remainingCapacity")
5498                - (yearsSel.val - yearsCom.val) * storage_techParam(storage_techs,vintage,"annualDegradation"))
5499                * storage_unitsStateTracker(nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,degradation_states));
5500   
5501  * // ### Storage Unit States Sum (degradation)
5502  * // The number of units in all degradation state must match the total unit number.
5503  * // {Eq_storage_unitsBalanceStates}
5504  Eq_storage_unitsBalanceStates(nodesModelSel,yearsSel,storage_techs,vintage)
5505      $(storage_usedTech(nodesModelSel,yearsSel,storage_techs,vintage)
5506        and storage_hasDegradation(storage_techs,vintage))
5507      ..
5508      storage_unitsTotal(nodesModelSel,yearsSel,storage_techs,vintage)
5509      =e=
5510      sum((yearsCom,degradation_states)$storage_usedDegradation(storage_techs,vintage,degradation_states),
5511            storage_unitsStateTracker(nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,degradation_states));
5512   
5513  * // ### Storage Unit States Upper Limit(degradation)
5514  * // The states of all commissioned units in one year (unitsBuilt) must either still be tracked or have been decommissioned.
5515  * // {Eq_storage_unitsUpperLimitPerState}
5516  Eq_storage_unitsUpperLimitPerState(nodesModelSel,yearsSel,yearsCom,storage_techs,vintage)
5517      $(storage_usedTech(nodesModelSel,yearsSel,storage_techs,vintage)
5518          and storage_hasDegradation(storage_techs,vintage))
5519      ..
5520      sum(degradation_states$storage_usedDegradation(storage_techs,vintage,degradation_states),
5521            storage_unitsStateTracker(nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,degradation_states)
5522            + sum(years$(years.val <= yearsSel.val),
5523                  storage_unitsStateTrackerDecom(nodesModelSel,years,yearsCom,storage_techs,vintage,degradation_states)))
5524      =e=
5525      storage_unitsBuild(nodesModelSel,yearsCom,storage_techs,vintage)$(yearsCom.val <= yearsSel.val);
5526   
5527  * // ### Storage Unit States Progression (degradation)
5528  * // Unit recovery by reassigning the storage cycles to other units is disabled. Therefore, the number of units in a particular degradation state can only increase if the number in a less degraded state is decreased by at least the same amount.
5529  * // {Eq_storage_unitsStatesNoRecovery}
5530  alias(degradation_states, dc_states);
5531  Eq_storage_unitsStatesNoRecovery(nodesModelSel,yearsSel(yearsToCalc),yearsCom,storage_techs,vintage,degradation_states)
5532      $(storage_usedTech(nodesModelSel,yearsSel,storage_techs,vintage)
5533        and yearsToCalc.val > yearsCom.val
5534        and storage_usedDegradation(storage_techs,vintage,degradation_states))
5535      ..
5536      sum(dc_states$(storage_usedDegradation(storage_techs,vintage,dc_states)
5537                and storage_degradationParam(storage_techs,vintage,dc_states,"maxFullCycles") <= storage_degradationParam(storage_techs,vintage,degradation_states,"maxFullCycles")),
5538              storage_unitsStateTracker(nodesModelSel,yearsToCalc,yearsCom,storage_techs,vintage,dc_states)
5539              + sum(years$(years.val <= yearsToCalc.val), storage_unitsStateTrackerDecom(nodesModelSel,years,yearsCom,storage_techs,vintage,dc_states)))
5540      =l=
5541      sum(dc_states$(storage_usedDegradation(storage_techs,vintage,dc_states)
5542                      and storage_degradationParam(storage_techs,vintage,dc_states,"maxFullCycles") <= storage_degradationParam(storage_techs,vintage,degradation_states,"maxFullCycles")),
5543              storage_unitsStateTracker(nodesModelSel,yearsToCalc-1,yearsCom,storage_techs,vintage,dc_states)
5544              + sum(years$(years.val < yearsToCalc.val), storage_unitsStateTrackerDecom(nodesModelSel,years,yearsCom,storage_techs,vintage,dc_states)));
5545   
5546  * // ### Storage Losses
5547  * // Accumulation of storage losses.
5548  * // {Eq_storage_losses}
5549  Eq_storage_losses(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,storage_techs,vintage,commodity)
5550      $storage_usedTechCom(nodesModelSel,yearsSel,storage_techs,vintage,commodity)
5551      ..
5552      storage_losses(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
5553      =e=
5554      - storage_level(timeModelToCalc--1,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
5555        * storage_sizeParam(storage_techs,vintage,commodity,"selfdischarge")
5556      + storage_sizeParam(storage_techs,vintage,commodity,"selfdischargeAbs")
5557      + (storage_techParam(storage_techs,vintage,"chargingLoss")
5558          /(1 - storage_techParam(storage_techs,vintage,"chargingLoss")))
5559        * storage_charge(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
5560          $(storage_techParam(storage_techs,vintage,"chargingLoss") > 0)
5561      + storage_techParam(storage_techs,vintage,"dischargingLoss")
5562        * storage_discharge(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
5563          $(storage_techParam(storage_techs,vintage,"dischargingLoss") > 0)
5564      - storage_sizeParam(storage_techs,vintage,commodity,"size")
5565        * sum(soc_states$(storage_usedTechSoCState(storage_techs,vintage,soc_states)
5566                          and storage_validSoCRange(storage_techs,vintage)),
5567              storage_unitsSoC(timeModelToCalc--1,nodesModelSel,yearsSel,storage_techs,vintage,soc_states)
5568              * storage_SoCParam(storage_techs,vintage,soc_states,"SoC")
5569              * storage_SoCParam(storage_techs,vintage,soc_states,"selfdischarge"));
5570   
5571  * // ### C-Rate Limit
5572  * // The increase in storage level per time step, i.e., the charging rate, is limited relative to the storage capacity.
5573  * // {Eq_storage_cRateLimit}
5574  Eq_storage_cRateLimit(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,storage_techs,vintage,commodity)
5575      $(storage_usedTechCom(nodesModelSel,yearsSel,storage_techs,vintage,commodity)
5576        and storage_techParam(storage_techs,vintage,"maxCRate") > 0)
5577      ..
5578      storage_level(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
5579      - storage_level(timeModelToCalc--1,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
5580      =l=
5581      storage_techParam(storage_techs,vintage,"maxCRate")
5582      * storage_sizeParam(storage_techs,vintage,commodity,"size")
5583      * storage_unitsTotal(nodesModelSel,yearsSel,storage_techs,vintage);
5584   
5585  * // ### E-Rate Limit
5586  * // The decrease in storage level per time step, i.e., the discharging rate, is limited relative to the storage capacity.
5587  * // {Eq_storage_eRateLimit}
5588  Eq_storage_eRateLimit(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,storage_techs,vintage,commodity)
5589      $(storage_usedTechCom(nodesModelSel,yearsSel,storage_techs,vintage,commodity)
5590        and storage_techParam(storage_techs,vintage,"maxERate") > 0)
5591      ..
5592      storage_level(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
5593      - storage_level(timeModelToCalc--1,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
5594      =g=
5595      - storage_techParam(storage_techs,vintage,"maxERate")
5596      * storage_sizeParam(storage_techs,vintage,commodity,"size")
5597      * storage_unitsTotal(nodesModelSel,yearsSel,storage_techs,vintage);
5598   
5599  * // ### Storage Charging
5600  * // Increases in storage levels are accounted as charging amounts.
5601  * // {Eq_storage_charge}
5602  Eq_storage_charge(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,storage_techs,vintage,commodity)
5603      $(storage_usedTechCom(nodesModelSel,yearsSel,storage_techs,vintage,commodity)
5604        and storage_techParam(storage_techs,vintage,"chargingLoss") > 0)
5605      ..
5606      storage_charge(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
5607      =g=
5608      storage_level(timeModelToCalc,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
5609      - storage_level(timeModelToCalc--1,nodesModelSel,yearsSel,storage_techs,vintage,commodity);
5610   
5611  * // ### Storage Discharging
5612  * // Decreases in storage levels are accounted as discharging amounts.
5613  * // {Eq_storage_discharge}
5614  Eq_storage_discharge(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,storage_techs,vintage,commodity)
5615      $(storage_usedTechCom(nodesModelSel,yearsSel,storage_techs,vintage,commodity)
5616        and storage_techParam(storage_techs,vintage,"dischargingLoss") > 0)
5617      ..
5618      storage_discharge(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
5619      =g=
5620      storage_level(timeModelToCalc--1,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
5621      - storage_level(timeModelToCalc,nodesModelSel,yearsSel,storage_techs,vintage,commodity);
5622   
5623  * // ### Storage Level Sum (degradation)
5624  * // The storage level is accounted individually by commissioning year in the case of degradation in order to prohibit the model to assign pre-existing storage cycles to newly built storage reservoirs and thereby avoiding degradation. All those storage levels represent the total storage level.
5625  * // {Eq_storage_levelStateSum}
5626  Eq_storage_levelStateSum(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
5627      $(storage_usedTechCom(nodesModelSel,yearsSel,storage_techs,vintage,commodity)
5628        and storage_techParam(storage_techs,vintage,"usageDegradation"))
5629      ..
5630      storage_level(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
5631      =e=
5632      sum(yearsCom, storage_levelPerAge(timeModelSel,nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,commodity));
5633   
5634  * // ### Storage Level Upper Limit per Age Group (degradation)
5635  * // Upper limit on the storage level per commissioning year if the storage technology accounts for degradation.
5636  * // {Eq_storage_levelUpperLimitPerAge}
5637  Eq_storage_levelUpperLimitPerAge(timeModelSel,nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,commodity)
5638      $(storage_usedTechCom(nodesModelSel,yearsSel,storage_techs,vintage,commodity)
5639        and storage_techParam(storage_techs,vintage,"usageDegradation"))
5640      ..
5641      storage_levelPerAge(timeModelSel,nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,commodity)
5642      =l=
5643      storage_techParam(storage_techs,vintage,"levelUpperLimit")
5644      * storage_sizeParam(storage_techs,vintage,commodity,"size")
5645      * sum(degradation_states,
5646              (storage_degradationParam(storage_techs,vintage,degradation_states,"remainingCapacity")
5647                - (yearsSel.val - yearsCom.val) * storage_techParam(storage_techs,vintage,"annualDegradation"))
5648                * storage_unitsStateTracker(nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,degradation_states));
5649   
5650  * // ### Storage Cycle Distribution to Degradation States per Commissioning Year (degradation)
5651  * // The charging amounts are converted to equivalent full cycles which then must be represented by an adequate distribution of degradation states.
5652  * // {Eq_storage_chargeBasedDegradationDistribution}
5653  alias(years, prev_years);
5654  Eq_storage_chargeBasedDegradationDistribution(nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,commodity)
5655      $(storage_usedTechCom(nodesModelSel,yearsSel,storage_techs,vintage,commodity)
5656        and storage_techParam(storage_techs,vintage,"usageDegradation"))
5657      ..
5658      sum(prev_years$(prev_years.val <= yearsSel.val), representedYears(prev_years)
5659          * sum(timeModel, storage_chargePerAge(timeModel,nodesModelSel,prev_years,yearsCom,storage_techs,vintage,commodity)))
5660      =l=
5661      storage_sizeParam(storage_techs,vintage,commodity,"size")
5662      * sum(dc_states$storage_usedDegradation(storage_techs,vintage,dc_states),
5663          storage_degradationParam(storage_techs,vintage,dc_states,"maxFullCycles")
5664          * (storage_unitsStateTracker(nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,dc_states)
5665             + sum(prev_years$(prev_years.val <= yearsSel.val), storage_unitsStateTrackerDecom(nodesModelSel,prev_years,yearsCom,storage_techs,vintage,dc_states))));
5666   
5667  * // ### Storage Charging per Commissioning Year (degradation)
5668  * // Increases in storage levels are accounted as charging amounts.
5669  * // {Eq_storage_chargingPerAge}
5670  Eq_storage_chargingPerAge(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,commodity)
5671      $(storage_usedTechCom(nodesModelSel,yearsSel,storage_techs,vintage,commodity)
5672        and storage_techParam(storage_techs,vintage,"usageDegradation"))
5673      ..
5674      storage_chargePerAge(timeModelSel,nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,commodity)
5675      =g=
5676      storage_levelPerAge(timeModelToCalc,nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,commodity)
5677      - storage_levelPerAge(timeModelToCalc--1,nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,commodity);
5678   
5679  * // ### Storage Unit Decommissioning States Sum (degradation)
5680  * // The number of decommissioned units in all degradation state must match the total decommissioning unit number.
5681  * // {Eq_storage_unitsDecomStateSum}
5682  Eq_storage_unitsDecomStateSum(nodesModelSel,yearsSel,storage_techs,vintage)
5683      $(storage_techParam(storage_techs,vintage,"usageDegradation"))
5684      ..
5685      storage_unitsDecom(nodesModelSel,yearsSel,storage_techs,vintage)
5686      =e=
5687      sum((yearsCom,degradation_states)$storage_usedDegradation(storage_techs,vintage,degradation_states),
5688          storage_unitsStateTrackerDecom(nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,degradation_states));
5689   
5690  * // ### Storage Unit Sequential Degradation (degradation)
5691  * // Only active degradation ranges, i.e., two neighboring degradation states, can be used.
5692  * // {Eq_storage_unitsDegradation}
5693  alias(degradation_states, degradation_states_a, degradation_states_b);
5694  Eq_storage_unitsDegradation(nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,degradation_states)
5695      $(storage_techParam(storage_techs,vintage,"usageDegradation")
5696        and storage_techParam(storage_techs,vintage,"sequentialDegradationStates"))
5697      ..
5698      sum(degradation_states_a$((storage_degradationParam(storage_techs,vintage,degradation_states_a,"maxFullCycles") = storage_degradationParam(storage_techs,vintage,degradation_states,"maxFullCycles")
5699                        or storage_degradationParam(storage_techs,vintage,degradation_states_a,"maxFullCycles")
5700                                         = smax(degradation_states_b$(storage_degradationParam(storage_techs,vintage,degradation_states_b,"maxFullCycles") < storage_degradationParam(storage_techs,vintage,degradation_states,"maxFullCycles")
5701                                                              and storage_usedDegradation(storage_techs,vintage,degradation_states_b)),
5702                                                              storage_degradationParam(storage_techs,vintage,degradation_states_b,"maxFullCycles")))
5703                        and storage_usedDegradation(storage_techs,vintage,degradation_states_a)),
5704          storage_unitsStateTracker_activeRange(nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,degradation_states_a))
5705      * storage_bigM(storage_techs,vintage)
5706      =g=
5707      storage_unitsStateTracker(nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,degradation_states);
5708   
5709  * // ### Storage Unit Sequential Degradation Range (degradation)
5710  * // Only one degradation range can be active.
5711  * // {Eq_storage_unitsDegradation_onlyOneRange}
5712  Eq_storage_unitsDegradation_onlyOneRange(nodesModelSel,yearsSel,yearsCom,storage_techs,vintage)
5713      $(storage_techParam(storage_techs,vintage,"usageDegradation") and storage_techParam(storage_techs,vintage,"sequentialDegradationStates"))
5714      ..
5715      sum(degradation_states$storage_usedDegradation(storage_techs,vintage,degradation_states),
5716            storage_unitsStateTracker_activeRange(nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,degradation_states))
5717      =e= 1;
5718   
5719  * // ### Storage Unit Sequential State of Charge (SoC)
5720  * // Only active state of charge ranges, i.e., two neighboring states of charge, can be used.
5721  * // {Eq_storage_unitsSoC}
5722  alias(soc_states, soc_states_a, soc_states_b);
5723  Eq_storage_unitsSoC(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,storage_techs,vintage,soc_states)
5724      $(storage_validSoCRange(storage_techs,vintage) and storage_techParam(storage_techs,vintage,"sequentialSoC"))
5725      ..
5726      sum(soc_states_a$((storage_SoCParam(storage_techs,vintage,soc_states_a,"SoC") = storage_SoCParam(storage_techs,vintage,soc_states,"SoC")
5727                        or storage_SoCParam(storage_techs,vintage,soc_states_a,"SoC")
5728                                         = smax(soc_states_b$(storage_SoCParam(storage_techs,vintage,soc_states_b,"SoC") < storage_SoCParam(storage_techs,vintage,soc_states,"SoC")
5729                                                              and storage_usedTechSoCState(storage_techs,vintage,soc_states_b)),
5730                                                              storage_SoCParam(storage_techs,vintage,soc_states_b,"SoC")))
5731                        and storage_usedTechSoCState(storage_techs,vintage,soc_states_a)),
5732          storage_unitsSoC_activeRange(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,soc_states_a))
5733      * storage_bigM(storage_techs,vintage)
5734      =g=
5735      storage_unitsSoC(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,soc_states);
5736   
5737  * // ### Storage Unit Sequential State of Charge Range (SoC)
5738  * // Only one state of charge range can be active.
5739  * // {Eq_storage_unitsSoC_onlyOneRange}
5740  Eq_storage_unitsSoC_onlyOneRange(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,storage_techs,vintage)
5741      $(storage_validSoCRange(storage_techs,vintage) and storage_techParam(storage_techs,vintage,"sequentialSoC"))
5742      ..
5743      sum(soc_states$storage_usedTechSoCState(storage_techs,vintage,soc_states),
5744            storage_unitsSoC_activeRange(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,soc_states)) =e= 1;
5745   
5746  * // ### Storage Unit State of Charge Sum (SoC)
5747  * // Each storage unit must have one state of charge.
5748  * // {Eq_storage_unitsSoC_sum}
5749  Eq_storage_unitsSoC_sum(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,storage_techs,vintage)
5750      $storage_validSoCRange(storage_techs,vintage)
5751      ..
5752      storage_unitsTotal(nodesModelSel,yearsSel,storage_techs,vintage)
5753      =e=
5754      sum(soc_states$storage_usedTechSoCState(storage_techs,vintage,soc_states),
5755            storage_unitsSoC(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,soc_states));
5756   
5757  * // ### Storage Level State of Charge Sum (SoC)
5758  * // The total storage level must be represented by units in their specific states of charge.
5759  * // {Eq_storage_levelSoC}
5760  Eq_storage_levelSoC(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,storage_techs,vintage,commodity)
5761      $(storage_validSoCRange(storage_techs,vintage) and storage_usedTechCom(nodesModelSel,yearsSel,storage_techs,vintage,commodity))
5762      ..
5763      storage_level(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
5764      =e=
5765      storage_sizeParam(storage_techs,vintage,commodity,"size")
5766      * sum(soc_states$storage_usedTechSoCState(storage_techs,vintage,soc_states),
5767              storage_unitsSoC(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,soc_states)
5768              * storage_SoCParam(storage_techs,vintage,soc_states,"SoC"));
5769   
5770  * // ### C-Rate Limit (SoC)
5771  * // The increase in storage level per time step, i.e., the charging rate, is limited relative to the storage capacity. The coefficients can vary between states of charge.
5772  * // {Eq_storage_cRateLimit_SoC}
5773  Eq_storage_cRateLimit_SoC(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,storage_techs,vintage,commodity)
5774      $(storage_usedTechCom(nodesModelSel,yearsSel,storage_techs,vintage,commodity)
5775        and storage_validSoCRange(storage_techs,vintage)
5776        and sum(soc_states, storage_SoCParam(storage_techs,vintage,soc_states,"cRate")) < inf)
5777      ..
5778      storage_level(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
5779      - storage_level(timeModelToCalc--1,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
5780      =l=
5781      storage_sizeParam(storage_techs,vintage,commodity,"size")
5782      * sum(soc_states$storage_usedTechSoCState(storage_techs,vintage,soc_states),
5783                      storage_SoCParam(storage_techs,vintage,soc_states,"cRate")
5784                      * storage_unitsSoC(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,soc_states));
5785   
5786  * // ### E-Rate Limit (SoC)
5787  * // The decrease in storage level per time step, i.e., the discharging rate, is limited relative to the storage capacity. The coefficients can vary between states of charge.
5788  * // {Eq_storage_cRateLimit_SoC}
5789  Eq_storage_eRateLimit_SoC(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,storage_techs,vintage,commodity)
5790      $(storage_usedTechCom(nodesModelSel,yearsSel,storage_techs,vintage,commodity)
5791        and storage_validSoCRange(storage_techs,vintage)
5792        and sum(soc_states, storage_SoCParam(storage_techs,vintage,soc_states,"eRate")) < inf)
5793      ..
5794      storage_level(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
5795      - storage_level(timeModelToCalc--1,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
5796      =g=
5797      - storage_sizeParam(storage_techs,vintage,commodity,"size")
5798      * sum(soc_states$storage_usedTechSoCState(storage_techs,vintage,soc_states),
5799                      storage_SoCParam(storage_techs,vintage,soc_states,"eRate")
5800                      * storage_unitsSoC(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,soc_states));
5801   
5802   
5803  * ==== model definition ====
5804   
5805  Model M_storage
5806  /
5807    Eq_storage_unitsBalance
5808    Eq_storage_unitsFixedDecom
5809    Eq_storage_unitsFreeDecom
5810    Eq_storage_unitsLowerLimit
5811    Eq_storage_unitsUpperLimit
5812    Eq_storage_levelUpperLimit_degradation
5813    Eq_storage_unitsTotalMIP
5814    Eq_storage_levelLowerLimit
5815    Eq_storage_levelUpperLimit
5817    Eq_storage_losses
5819    Eq_storage_unitsBalanceStates
5820    Eq_storage_unitsUpperLimitPerState
5821    Eq_storage_unitsStatesNoRecovery
5822    Eq_storage_cRateLimit
5823    Eq_storage_eRateLimit
5824    Eq_storage_charge
5825    Eq_storage_discharge
5826    Eq_storage_levelStateSum
5827    Eq_storage_levelUpperLimitPerAge
5828    Eq_storage_chargeBasedDegradationDistribution
5829    Eq_storage_chargingPerAge
5830    Eq_storage_unitsDecomStateSum
5831    Eq_storage_unitsDegradation
5832    Eq_storage_unitsDegradation_onlyOneRange
5833   
5834    Eq_storage_unitsSoC
5835    Eq_storage_unitsSoC_sum
5836    Eq_storage_unitsSoC_onlyOneRange
5837    Eq_storage_levelSoC
5838    Eq_storage_cRateLimit_SoC
5839    Eq_storage_eRateLimit_SoC
5840  /;
INCLUDE    C:\Local\REMix\framework\remix\framework\model\source\core\transfer.gms
5842  * SPDX-FileCopyrightText: Copyright (c) 2023 German Aerospace Center (DLR)
5843  * SPDX-License-Identifier: BSD-3-Clause
5844   
5845  * // # core_transfer
5846  * // The equations in this file describe the commodity transfer in the model.
5847   
5848  * // ## Variables
5849  * // {special_table_transfer_variables}
5852   
5857   
6100   
6101  parameter transfer_linksParam(linksModel,years,transfer_techs,pc_transfer_linksParam);
6102  transfer_linksParam(linksModelToCalc,years,transfer_techs,pc_transfer_linksParam)
6103      = sum(linksData$links_aggregate(linksModelToCalc,linksData), transfer_linksParamIn(linksData,years,transfer_techs,pc_transfer_linksParam));
6104   
6105  * // ## Load links from gdx file
6107   
6108   
6109  set transfer_hasflowProfileIn(linksData,years,transfer_techs,pc_transfer_flowProfile);
6110  option transfer_hasflowProfileIn < transfer_flowProfileIn;
6111   
6112  * === modify transfer_flowProfileIn vector to fill with default values, in case profile is not specified ===
6113  transfer_linksParamIn(linksData,years,transfer_techs,"flowAlongLimit")
6114      $(not transfer_linksParamIn(linksData,years,transfer_techs,"limitFlows"))
6115      = 1;
6116   
6117  transfer_linksParamIn(linksData,years,transfer_techs,"flowAgainstLimit")
6118      $(not transfer_linksParamIn(linksData,years,transfer_techs,"limitFlows"))
6119      = 1;
6120   
6121  transfer_flowProfileIn(timeData,linksData,years,transfer_techs,"along")
6122      $(not transfer_hasflowProfileIn(linksData,years,transfer_techs,"along"))
6123      = transfer_linksParamIn(linksData,years,transfer_techs,"flowAlongLimit");
6124   
6125  transfer_flowProfileIn(timeData,linksData,years,transfer_techs,"against")
6126      $(not transfer_hasflowProfileIn(linksData,years,transfer_techs,"against"))
6127      = transfer_linksParamIn(linksData,years,transfer_techs,"flowAgainstLimit");
6128   
6129  * aggregate time dimension
6130  parameter transfer_flowProfileIn_aggTime(timeModel,linksData,yearsToCalc,transfer_techs,pc_transfer_flowProfile);
6131  transfer_flowProfileIn_aggTime(timeModelToCalc,linksData,yearsToCalc,transfer_techs,pc_transfer_flowProfile)
6132    = sum(timeData$timeMapping(timeData,timeModelToCalc),
6133            transfer_flowProfileIn(timeData,linksData,yearsToCalc,transfer_techs,pc_transfer_flowProfile)
6134            / timeLength(timeModelToCalc));
6135  option clear = transfer_flowProfileIn;
6136   
6137   
6138  set transfer_finiteLinkLimit(linksModel,years,transfer_techs);
6139  transfer_finiteLinkLimit(linksModelToCalc,yearsToCalc,transfer_techs)
6140      = sum(linksData$links_aggregate(linksModelToCalc,linksData), transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"linksUpperLimit")) > 0
6141          and sum(linksData$links_aggregate(linksModelToCalc,linksData), transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"linksUpperLimit")) < inf;
6142   
6143  set transfer_infiniteLinkLimit(linksModel,years,transfer_techs);
6144  transfer_infiniteLinkLimit(linksModelToCalc,yearsToCalc,transfer_techs)
6145      = sum(linksData$links_aggregate(linksModelToCalc,linksData), transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"linksUpperLimit")) = inf;
6147   
6148  parameter transfer_lengthParam(linksModel,link_types,pc_transfer_lengthParam);
6149  transfer_lengthParam(linksModelToCalc,link_types,pc_transfer_lengthParam)
6150      = sum(linksData$links_aggregate(linksModelToCalc,linksData), transfer_lengthParamIn(linksData,link_types,pc_transfer_lengthParam))
6151          / sum(linksData$links_aggregate(linksModelToCalc,linksData), 1);
6152   
6153  parameter transfer_gridSegments(linksModel,transfer_techs,gridSegments,pc_transfer_gridSegments);
6154  transfer_gridSegments(linksModelToCalc,transfer_techs,gridSegments,pc_transfer_gridSegments)
6155      = smax(linksData$links_aggregate(linksModelToCalc,linksData), transfer_gridSegmentsIn(linksData,transfer_techs,gridSegments,pc_transfer_gridSegments));
6156   
6157  parameter transfer_dcopf_Xtech(linksModel,years,transfer_techs,vintage,gridSegments);
6158  transfer_dcopf_Xtech(linksModelToCalc,yearsToCalc,transfer_techs,vintage,gridSegments)
6159      $(transfer_gridSegments(linksModelToCalc,transfer_techs,gridSegments,"useDCopf")
6160          and transfer_linksParam(linksModelToCalc,yearsToCalc,transfer_techs,"circuits") > 0
6161          and sum(link_types, transfer_reactPerLength(transfer_techs,vintage,link_types,"reactPerLength")) > 0 )
6162      = (1 / sum(linksData
6163                  $links_aggregate(linksModelToCalc,linksData),
6164              1 / ( sum(link_types,
6165                          transfer_lengthParamIn(linksData,link_types,"length")
6166                          * transfer_reactPerLength(transfer_techs,vintage,link_types,"reactPerLength"))
6167                      / transfer_linksParam(linksModelToCalc,yearsToCalc,transfer_techs,"circuits"))));
6168   
6169  set transfer_hasflowProfile(linksModel,years,transfer_techs,pc_transfer_flowProfile);
6170  transfer_hasflowProfile(linksModelToCalc,yearsToCalc,transfer_techs,pc_transfer_flowProfile)
6171      = sum(linksData$links_aggregate(linksModelToCalc,linksData),
6172              transfer_hasflowProfileIn(linksData,yearsToCalc,transfer_techs,pc_transfer_flowProfile));
6173   
6174  * ==== parameter modifications ====
6175  transfer_linksParam(linksModelToCalc,yearsToCalc,transfer_techs,"linksLowerLimit")
6176      $sum(vintage, transfer_techParam(transfer_techs,vintage,"mipLinks"))
6177      = floor(transfer_linksParam(linksModelToCalc,yearsToCalc,transfer_techs,"linksLowerLimit"));
6178  transfer_linksParam(linksModelToCalc,yearsToCalc,transfer_techs,"linksUpperLimit")
6179      $sum(vintage, transfer_techParam(transfer_techs,vintage,"mipLinks"))
6180      = ceil(transfer_linksParam(linksModelToCalc,yearsToCalc,transfer_techs,"linksUpperLimit"));
6181   
6182   
6183  * ==== calculation of mappings ====
6184   
6185  * Technologies with a lifeTime > 0 are available
6186  set transfer_availTech(linksModel,years,transfer_techs,vintage);
6187  transfer_availTech(linksModel,years,transfer_techs,vintage)
6188      $(vintage.val = smax(vintage_a$(vintage_a.val <= years.val
6189          and transfer_techParam(transfer_techs,vintage_a,"lifeTime") > 0), vintage_a.val)) = yes;
6190   
6191  * Technologies to optimize become unavailable if they have an linksUpperLimit of 0
6192  transfer_availTech(linksModelToCalc,years,transfer_techs,vintage)
6193      $(yearsToCalc(years) and transfer_linksParam(linksModelToCalc,years,transfer_techs,"linksUpperLimit") = 0 ) = no;
6194   
6195  * Technologies already built become unavailable if they have an linksBuild of 0
6196  transfer_availTech(linksModelToCalc,years,transfer_techs,vintage)
6197      $( ( not yearsToCalc(years)) and transfer_linksParam(linksModelToCalc,years,transfer_techs,"linksBuild") = 0 ) = no;
6198   
6199  * Used technologies are available technologies over their technical lifeTime
6200  set transfer_usedTech(linksModel,years,transfer_techs,vintage);
6201  transfer_usedTech(linksModelToCalc,years,transfer_techs,vintage)
6202      $(vintage.val <= years.val
6203          and years.val < smax(years_a$transfer_availTech(linksModelToCalc,years_a,transfer_techs,vintage),
6204                                  years_a.val + transfer_techParam(transfer_techs,vintage,"lifeTime"))
6205          ) = yes;
6206   
6207  * Technologies have to be decomissioned in the interval of first avail + lifetime to last avail + lifetime
6208  set transfer_decomTech(linksModel,years,transfer_techs,vintage);
6209  transfer_decomTech(linksModel,years,transfer_techs,vintage)
6210    $(sum(years_a$transfer_usedTech(linksModel,years_a,transfer_techs,vintage), 1)
6211      and sum(yearsToCalc
6212        $(sameas(years, yearsToCalc)
6213          and yearsToCalc.val >= smin(years_a$transfer_availTech(linksModel,years_a,transfer_techs,vintage), years_a.val) + transfer_techParam(transfer_techs,vintage,"lifeTime")
6214          and yearsToCalc.val <= smax(years_a$transfer_availTech(linksModel,years_a,transfer_techs,vintage), years_a.val) + transfer_techParam(transfer_techs,vintage,"lifeTime")), 1))
6215    = yes;
6216   
6217  * Extend the decom frame to the year after the last year of usedTech
6218  transfer_decomTech(linksModel,yearsToCalc,transfer_techs,vintage)
6219    $(transfer_usedTech(linksModel,yearsToCalc-1,transfer_techs,vintage)
6220      and transfer_decomTech(linksModel,yearsToCalc-1,transfer_techs,vintage))
6221    = yes;
6222   
6223  parameter transfer_flowProfile(timeModel,linksModel,years,transfer_techs,vintage,pc_transfer_flowProfile);
6224   
6225  transfer_flowProfile(timeModelToCalc,linksModelToCalc,yearsToCalc,transfer_techs,vintage,"along")
6226      $transfer_finiteLinkLimit(linksModelToCalc,yearsToCalc,transfer_techs)
6227      = (sum(linksData$(links_aggregate(linksModelToCalc,linksData)
6228                       and transfer_incidenceData_flip(linksData) = 1),
6229              transfer_flowProfileIn_aggTime(timeModelToCalc,linksData,yearsToCalc,transfer_techs,"along")
6230              * transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"linksUpperLimit"))
6231          + sum(linksData$(links_aggregate(linksModelToCalc,linksData)
6232                          and transfer_incidenceData_flip(linksData) = -1),
6233              transfer_flowProfileIn_aggTime(timeModelToCalc,linksData,yearsToCalc,transfer_techs,"against")
6234              * transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"linksUpperLimit")))
6235      / sum(linksData$links_aggregate(linksModelToCalc,linksData),
6236              transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"linksUpperLimit"));
6237   
6238  transfer_flowProfile(timeModelToCalc,linksModelToCalc,yearsToCalc,transfer_techs,vintage,"against")
6239      $transfer_finiteLinkLimit(linksModelToCalc,yearsToCalc,transfer_techs)
6240      = (sum(linksData$(links_aggregate(linksModelToCalc,linksData)
6241                       and transfer_incidenceData_flip(linksData) = 1),
6242              transfer_flowProfileIn_aggTime(timeModelToCalc,linksData,yearsToCalc,transfer_techs,"against")
6243              * transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"linksUpperLimit"))
6244          + sum(linksData$(links_aggregate(linksModelToCalc,linksData)
6245                          and transfer_incidenceData_flip(linksData) = -1),
6246              transfer_flowProfileIn_aggTime(timeModelToCalc,linksData,yearsToCalc,transfer_techs,"along")
6247              * transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"linksUpperLimit")))
6248      / sum(linksData$links_aggregate(linksModelToCalc,linksData),
6249              transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"linksUpperLimit"));
6250   
6251  transfer_flowProfile(timeModelToCalc,linksModelToCalc,yearsToCalc,transfer_techs,vintage,"along")
6252      $transfer_infiniteLinkLimit(linksModelToCalc,yearsToCalc,transfer_techs)
6253      = (sum(linksData$(links_aggregate(linksModelToCalc,linksData)
6254                       and transfer_incidenceData_flip(linksData) = 1
6255                       and transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"linksUpperLimit") = inf ),
6256              transfer_flowProfileIn_aggTime(timeModelToCalc,linksData,yearsToCalc,transfer_techs,"along"))
6257          + sum(linksData$(links_aggregate(linksModelToCalc,linksData)
6258                          and transfer_incidenceData_flip(linksData) = -1
6259                          and transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"linksUpperLimit") = inf ),
6260              transfer_flowProfileIn_aggTime(timeModelToCalc,linksData,yearsToCalc,transfer_techs,"against")))
6261      / sum(linksData$(links_aggregate(linksModelToCalc,linksData)
6262                      and transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"linksUpperLimit") = inf ),
6263              1);
6264   
6265  transfer_flowProfile(timeModelToCalc,linksModelToCalc,yearsToCalc,transfer_techs,vintage,"against")
6266      $transfer_infiniteLinkLimit(linksModelToCalc,yearsToCalc,transfer_techs)
6267      = (sum(linksData$(links_aggregate(linksModelToCalc,linksData)
6268                       and transfer_incidenceData_flip(linksData) = 1
6269                       and transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"linksUpperLimit") = inf ),
6270              transfer_flowProfileIn_aggTime(timeModelToCalc,linksData,yearsToCalc,transfer_techs,"against"))
6271          + sum(linksData$(links_aggregate(linksModelToCalc,linksData)
6272                          and transfer_incidenceData_flip(linksData) = -1
6273                          and transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"linksUpperLimit") = inf ),
6274              transfer_flowProfileIn_aggTime(timeModelToCalc,linksData,yearsToCalc,transfer_techs,"along")))
6275      / sum(linksData$(links_aggregate(linksModelToCalc,linksData)
6276                      and transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"linksUpperLimit") = inf ),
6277              1);
6278  option clear = transfer_flowProfileIn_aggTime;
6279   
6280  * Orientation of links affects the flowAlongLimit/flowAgainstLimit
6281   
6282  transfer_linksParam(linksModelToCalc,years,transfer_techs,"flowAlongLimit")
6283      $transfer_finiteLinkLimit(linksModelToCalc,years,transfer_techs)
6284      = (sum(linksData$(links_aggregate(linksModelToCalc,linksData)
6285                       and transfer_incidenceData_flip(linksData) = 1),
6286              transfer_linksParamIn(linksData,years,transfer_techs,"flowAlongLimit")
6287              * transfer_linksParamIn(linksData,years,transfer_techs,"linksUpperLimit"))
6288          + sum(linksData$(links_aggregate(linksModelToCalc,linksData)
6289                          and transfer_incidenceData_flip(linksData) = -1),
6290              transfer_linksParamIn(linksData,years,transfer_techs,"flowAgainstLimit")
6291              * transfer_linksParamIn(linksData,years,transfer_techs,"linksUpperLimit")))
6292      / sum(linksData$links_aggregate(linksModelToCalc,linksData),
6293              transfer_linksParamIn(linksData,years,transfer_techs,"linksUpperLimit"));
6294   
6295  transfer_linksParam(linksModelToCalc,years,transfer_techs,"flowAgainstLimit")
6296      $transfer_finiteLinkLimit(linksModelToCalc,years,transfer_techs)
6297      = (sum(linksData$(links_aggregate(linksModelToCalc,linksData)
6298                       and transfer_incidenceData_flip(linksData) = -1),
6299              transfer_linksParamIn(linksData,years,transfer_techs,"flowAlongLimit")
6300              * transfer_linksParamIn(linksData,years,transfer_techs,"linksUpperLimit"))
6301          + sum(linksData$(links_aggregate(linksModelToCalc,linksData)
6302                          and transfer_incidenceData_flip(linksData) = 1),
6303              transfer_linksParamIn(linksData,years,transfer_techs,"flowAgainstLimit")
6304              * transfer_linksParamIn(linksData,years,transfer_techs,"linksUpperLimit")))
6305      / sum(linksData$links_aggregate(linksModelToCalc,linksData),
6306              transfer_linksParamIn(linksData,years,transfer_techs,"linksUpperLimit"));
6307   
6308  transfer_linksParam(linksModelToCalc,years,transfer_techs,"flowAlongLimit")
6309      $transfer_infiniteLinkLimit(linksModelToCalc,years,transfer_techs)
6310      = (sum(linksData$(links_aggregate(linksModelToCalc,linksData)
6311                       and transfer_incidenceData_flip(linksData) = 1
6312                       and transfer_linksParamIn(linksData,years,transfer_techs,"linksUpperLimit") = inf),
6313              transfer_linksParamIn(linksData,years,transfer_techs,"flowAlongLimit"))
6314          + sum(linksData$(links_aggregate(linksModelToCalc,linksData)
6315                          and transfer_incidenceData_flip(linksData) = -1
6316                          and transfer_linksParamIn(linksData,years,transfer_techs,"linksUpperLimit") = inf),
6317              transfer_linksParamIn(linksData,years,transfer_techs,"flowAgainstLimit")))
6318      / sum(linksData$(links_aggregate(linksModelToCalc,linksData)
6319                      and transfer_linksParamIn(linksData,years,transfer_techs,"linksUpperLimit") = inf ),
6320              1);
6321   
6322  transfer_linksParam(linksModelToCalc,years,transfer_techs,"flowAgainstLimit")
6323      $transfer_infiniteLinkLimit(linksModelToCalc,years,transfer_techs)
6324      = (sum(linksData$(links_aggregate(linksModelToCalc,linksData)
6325                       and transfer_incidenceData_flip(linksData) = -1
6326                       and transfer_linksParamIn(linksData,years,transfer_techs,"linksUpperLimit") = inf),
6327              transfer_linksParamIn(linksData,years,transfer_techs,"flowAlongLimit"))
6328          + sum(linksData$(links_aggregate(linksModelToCalc,linksData)
6329                          and transfer_incidenceData_flip(linksData) = 1
6330                          and transfer_linksParamIn(linksData,years,transfer_techs,"linksUpperLimit") = inf),
6331              transfer_linksParamIn(linksData,years,transfer_techs,"flowAgainstLimit")))
6332      / sum(linksData$(links_aggregate(linksModelToCalc,linksData)
6333                      and transfer_linksParamIn(linksData,years,transfer_techs,"linksUpperLimit") = inf ),
6334              1);
6335   
6336  * Mapping for grid segments using DC optimal power flow
6337  set gridSegments_dcopf(linksModel,transfer_techs,gridSegments);
6338  gridSegments_dcopf(linksModelToCalc,transfer_techs,gridSegments)
6339      $transfer_gridSegments(linksModelToCalc,transfer_techs,gridSegments,"useDCopf")
6341      = yes;
6343   
6344  * Ensure each grid segment uses exactly one commodity
6345  parameter checkGridSegmentCommodities(gridSegments);
6346  checkGridSegmentCommodities(gridSegments)
6347      = sum (commodity$(sum((linksModelToCalc,transfer_techs,vintage)
6348                              $( transfer_coefficient(transfer_techs,vintage,commodity,"coefficient") > 0
6349                                  and gridSegments_dcopf(linksModelToCalc,transfer_techs,gridSegments)) , 1) > 0), 1);
6350   
6351  parameter transfer_incidenceSegments(nodesModel,linksModel,years,gridSegments);
6352  transfer_incidenceSegments(nodesModelToCalc,linksModelToCalc,yearsToCalc,gridSegments)
6353      $(sum((transfer_techs,vintage)$(transfer_usedTech(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
6354                                          and gridSegments_dcopf(linksModelToCalc,transfer_techs,gridSegments)
6355                                          and transfer_incidenceModel(nodesModelToCalc,linksModelToCalc) <> 0), 1) > 0)
6356      = transfer_incidenceModel(nodesModelToCalc,linksModelToCalc);
6357   
6358   
6362   
6363  scalar transfer_enableMIP;
6364  transfer_enableMIP = sum(transfer_usedTech(linksModelToCalc,yearsToCalc,transfer_techs,vintage)$transfer_techParam(transfer_techs,vintage,"mipLinks"), 1 );
6365   
6366   
6367  * ==== definition of variables ====
6368   
6369  * Initialise variables for linksBuild
6370  transfer_linksBuild.l(linksModel,years,transfer_techs,vintage)
6371      $transfer_availTech(linksModel,years,transfer_techs,vintage)
6372      = transfer_linksParam(linksModel,years,transfer_techs,"linksBuild");
6373  transfer_linksBuild.lo(linksModel,yearsToCalc,transfer_techs,vintage)
6374      $transfer_availTech(linksModel,yearsToCalc,transfer_techs,vintage)
6375      = transfer_linksBuild.l(linksModel,yearsToCalc,transfer_techs,vintage);
6376  transfer_linksBuild.fx(linksModel,years,transfer_techs,vintage)
6377      $transfer_linksParam(linksModel,years,transfer_techs,"noExpansion")
6378      = transfer_linksBuild.l(linksModel,years,transfer_techs,vintage);
6379   
6380  * Initialise variables for linksDecom
6381  transfer_linksDecom.l(linksModel,years,transfer_techs,vintage)
6382      $(transfer_decomTech(linksModel,years,transfer_techs,vintage)
6383        and years.val < sum(yearsToCalc$(ord(yearsToCalc) = 1), yearsToCalc.val))
6384      = sum((years_a,years_aa)$(sameas(years-1, years_aa)
6385                        and years_a.val > years_aa.val - transfer_techParam(transfer_techs,vintage,'lifeTime')
6386                        and years_a.val <= years.val - transfer_techParam(transfer_techs,vintage,'lifeTime')
6387                        and transfer_availTech(linksModel,years_a,transfer_techs,vintage)),
6388          transfer_linksBuild.l(linksModel,years_a,transfer_techs,vintage));
6389   
6390  transfer_linksDecom.l(linksModel,yearsToCalc,transfer_techs,vintage)
6391    $transfer_decomTech(linksModel,yearsToCalc,transfer_techs,vintage)
6392    = sum(years$
6393          (years.val < sum(yearsToCalc_a$(ord(yearsToCalc_a) = 1), yearsToCalc_a.val)
6394            and transfer_availTech(linksModel,years,transfer_techs,vintage)
6395            and years.val > sum(years_a$sameas(years_a, yearsToCalc-1), years_a.val) - transfer_techParam(transfer_techs,vintage,'lifeTime')
6396            and years.val <= yearsToCalc.val - transfer_techParam(transfer_techs,vintage,'lifeTime')),
6397        transfer_linksBuild.l(linksModel,years,transfer_techs,vintage))
6398      + sum(yearsToCalc_a$
6399          (yearsToCalc_a.val < sum(yearsToCalc_aa$(ord(yearsToCalc_aa) > 1), yearsToCalc_a.val)
6400            and transfer_availTech(linksModel,yearsToCalc_a,transfer_techs,vintage)
6401            and yearsToCalc_a.val > sum(years_a$sameas(years_a, yearsToCalc-1), years_a.val) - transfer_techParam(transfer_techs,vintage,'lifeTime')
6402            and yearsToCalc_a.val <= yearsToCalc.val - transfer_techParam(transfer_techs,vintage,'lifeTime')),
6403        transfer_linksBuild.l(linksModel,yearsToCalc_a,transfer_techs,vintage));
6404        ;
6405   
6406  transfer_linksDecom.lo(linksModel,yearsToCalc,transfer_techs,vintage)
6407      $(transfer_usedTech(linksModel,yearsToCalc,transfer_techs,vintage)
6408          and not transfer_techParam(transfer_techs,vintage,"freeDecom"))
6409      = transfer_linksDecom.l(linksModel,yearsToCalc,transfer_techs,vintage)
6410   
6411  * Calculate planned transfer links expansion
6412  parameter transfer_linksPlanned(linksModel,years,transfer_techs,vintage);
6413  transfer_linksPlanned(linksModel,years,transfer_techs,vintage) = 0;
6414  loop(years,
6415    transfer_linksPlanned(linksModel,years,transfer_techs,vintage)
6416      =
6417      transfer_linksPlanned(linksModel,years-1,transfer_techs,vintage)
6418          $transfer_usedTech(linksModel,years-1,transfer_techs,vintage)
6419      + transfer_linksBuild.l(linksModel,years,transfer_techs,vintage)
6420          $transfer_availTech(linksModel,years,transfer_techs,vintage)
6421      - transfer_linksDecom.l(linksModel,years,transfer_techs,vintage)
6422          $transfer_usedTech(linksModel,years,transfer_techs,vintage);
6423  );
6424   
6425  * Set initial state for planned units
6426  transfer_linksTotal.l(linksModel,years,transfer_techs,vintage)
6427    = transfer_linksPlanned(linksModel,years,transfer_techs,vintage)
6428   
6429  * Calculate if planned links expansion is bound by upper and lower limits
6430  set transfer_linkBoundsFixed(linksModel,years,transfer_techs);
6431  transfer_linkBoundsFixed(linksModel,years,transfer_techs)
6432    $(sum(vintage$transfer_usedTech(linksModel,years,transfer_techs,vintage),
6433          transfer_linksPlanned(linksModel,years,transfer_techs,vintage))
6434      = transfer_linksParam(linksModel,years,transfer_techs,"linksUpperLimit")
6435    and sum(vintage$transfer_usedTech(linksModel,years,transfer_techs,vintage),
6436          transfer_linksPlanned(linksModel,years,transfer_techs,vintage))
6437      = transfer_linksParam(linksModel,years,transfer_techs,"linksLowerLimit"))
6438    = yes;
6439   
6440  * Fix linksBuild, linksDecom, linksTotal if levels are predetermined by upper and lower limits
6441  transfer_linksBuild.fx(linksModel,years,transfer_techs,vintage)
6442    $(transfer_availTech(linksModel,years,transfer_techs,vintage)
6443      and transfer_linkBoundsFixed(linksModel,years,transfer_techs))
6444    = transfer_linksBuild.l(linksModel,years,transfer_techs,vintage);
6445  transfer_linksDecom.fx(linksModel,years,transfer_techs,vintage)
6446    $(transfer_usedTech(linksModel,years,transfer_techs,vintage)
6447      and transfer_linkBoundsFixed(linksModel,years,transfer_techs))
6448    = transfer_linksDecom.l(linksModel,years,transfer_techs,vintage);
6449  transfer_linksTotal.fx(linksModel,years,transfer_techs,vintage)
6450    $(transfer_usedTech(linksModel,years,transfer_techs,vintage)
6451      and transfer_linkBoundsFixed(linksModel,years,transfer_techs))
6452    = transfer_linksTotal.l(linksModel,years,transfer_techs,vintage);
6453   
6454  transfer_linksTotal_MIP.up(linksModel,years,transfer_techs,vintage)
6455      $(transfer_usedTech(linksModel,years,transfer_techs,vintage)
6456        and transfer_techParam(transfer_techs,vintage,"miplinks") = 1)
6457      = transfer_linksParam(linksModel,years,transfer_techs,"linksUpperLimit");
6458   
6459  * Add parameter for fixing capacities during myopic runs
6460  parameter transfer_linksDelta(linksModel,years,transfer_techs);
6461   
6462   
6463  * ==== declaration of equations ====
6464   
6465  equations
6466    Eq_transfer_linksBalance(linksModel,years,transfer_techs,vintage
6467      ) "Ensures the links balance over the planning period."
6468    Eq_transfer_linksFixedDecom(linksModel,years,transfer_techs,vintage
6469      ) "Restricts the fixed decommissioning of links over the planning period."
6470    Eq_transfer_linksFreeDecom(linksModel,years,transfer_techs,vintage
6471      ) "Restricts the free decommissioning of links over the planning period."
6472    Eq_transfer_linksUpperLimit(linksModel,years,transfer_techs
6473      ) "Upper bound for the total number of links."
6474    Eq_transfer_linksLowerLimit(linksModel,years,transfer_techs
6475      ) "Lower bound for the total number of links."
6476    Eq_transfer_linksTotalMIP(linksModel,years,transfer_techs,vintage
6477      ) "Fixes the total number of links to the corresponding integer variable."
6478   
6479    Eq_transfer_flowAlongUpperLimit(timeModel,linksModel,years,transfer_techs,vintage
6480      ) "Upper bound for the flow along the transfer links."
6481    Eq_transfer_flowAgainstUpperLimit(timeModel,linksModel,years,transfer_techs,vintage
6482      ) "Upper bound for the flow against the transfer links."
6483    Eq_transfer_dcopf_angleFlows(timeModel,linksModel,years,gridSegments
6484      )
6485    Eq_transfer_dcopf_cycleFlows(timeModel,years,cycles,gridSegments
6486      )
6487    ;
6488   
6489   
6490  * ==== equation definition ====
6491  * // ## Equations
6492  * // ### Transfer Links Balance
6493  * // Ensures that the transfer between nodes is balanced.
6494  * // {Eq_transfer_linksBalance}
6495  Eq_transfer_linksBalance(linksModelToCalc,yearsSel,transfer_techs,vintage)
6496      $((transfer_usedTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
6497            or sum(years$sameas(years,yearsSel), transfer_usedTech(linksModelToCalc,years-1,transfer_techs,vintage)))
6498          and not transfer_linkBoundsFixed(linksModelToCalc,yearsSel,transfer_techs))
6499      ..
6500      transfer_linksTotal(linksModelToCalc,yearsSel,transfer_techs,vintage)
6501      =e=
6502      sum(yearsToCalc$(ord(yearsToCalc) = 1 and sameas(yearsToCalc, yearsSel)),
6503        sum(years$sameas(years, yearsToCalc),
6504          transfer_linksTotal(linksModelToCalc,years-1,transfer_techs,vintage)
6505            $transfer_usedTech(linksModelToCalc,years-1,transfer_techs,vintage)))
6506      + sum((yearsToCalc)$(ord(yearsToCalc) > 1 and sameas(yearsToCalc, yearsSel)),
6507        transfer_linksTotal(linksModelToCalc,yearsToCalc-1,transfer_techs,vintage)
6508          $transfer_usedTech(linksModelToCalc,yearsToCalc-1,transfer_techs,vintage))
6509      + transfer_linksBuild(linksModelToCalc,yearsSel,transfer_techs,vintage)
6510          $transfer_availTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
6511      - transfer_linksDecom(linksModelToCalc,yearsSel,transfer_techs,vintage)
6512          $transfer_usedTech(linksModelToCalc,yearsSel,transfer_techs,vintage);
6513   
6514  * // ### Transfer Links Fixed Decommissioning
6515  * // Balances fixed link decommissioning.
6516  * // {Eq_transfer_linksFixedDecom}
6517  Eq_transfer_linksFixedDecom(linksModelToCalc,yearsSel,transfer_techs,vintage)
6518      $(transfer_decomTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
6519          and not transfer_techParam(transfer_techs,vintage,"freeDecom") = 1
6520          and not transfer_linkBoundsFixed(linksModelToCalc,yearsSel,transfer_techs))
6521      ..
6522      transfer_linksDecom(linksModelToCalc,yearsSel,transfer_techs,vintage)
6523      =e=
6524      sum(years$
6525          (transfer_availTech(linksModelToCalc,years,transfer_techs,vintage)
6526              and years.val > sum(yearsToCalc$sameas(yearsToCalc+1, yearsSel), yearsToCalc.val) - transfer_techParam(transfer_techs,vintage,'lifeTime')
6527              and years.val <= yearsSel.val - transfer_techParam(transfer_techs,vintage,'lifeTime')),
6528          transfer_linksBuild(linksModelToCalc,years,transfer_techs,vintage));
6529   
6530  * // ### Transfer Links Free Decommissioning
6531  * // Balances free link decommissioning.
6532  * // {Eq_transfer_linksFreeDecom}
6533  Eq_transfer_linksFreeDecom(linksModelToCalc,yearsSel,transfer_techs,vintage)
6534      $((transfer_decomTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
6535          or transfer_usedTech(linksModelToCalc,yearsSel,transfer_techs,vintage))
6536          and transfer_techParam(transfer_techs,vintage,"freeDecom") = 1)
6537      ..
6538      sum(years$
6539            ((transfer_decomTech(linksModelToCalc,years,transfer_techs,vintage)
6540              or transfer_usedTech(linksModelToCalc,years,transfer_techs,vintage))
6541              and years.val < sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)),
6542          transfer_linksDecom(linksModelToCalc,years,transfer_techs,vintage))
6543      + sum(yearsToCalc$
6544            ((transfer_decomTech(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
6545              or transfer_usedTech(linksModelToCalc,yearsToCalc,transfer_techs,vintage))
6546              and yearsToCalc.val >= sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
6547              and yearsToCalc.val <= yearsSel.val),
6548          transfer_linksDecom(linksModelToCalc,yearsToCalc,transfer_techs,vintage))
6549      =g=
6550      sum(years$
6551            (transfer_availTech(linksModelToCalc,years,transfer_techs,vintage)
6552              and years.val < sum(yearsToCalc$(ord(yearsToCalc)=1), yearsToCalc.val) - transfer_techParam(transfer_techs,vintage,'lifeTime')),
6553          transfer_linksBuild(linksModelToCalc,years,transfer_techs,vintage))
6554      + sum(yearsToCalc$
6555            (transfer_availTech(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
6556              and yearsToCalc.val >= sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
6557              and yearsToCalc.val <= yearsSel.val - transfer_techParam(transfer_techs,vintage,'lifeTime')),
6558          transfer_linksBuild(linksModelToCalc,yearsToCalc,transfer_techs,vintage));
6559   
6560  * // ### Transfer Links Lower Limit
6561  * // Ensures link capacity lower limits.
6562  * // {Eq_transfer_linksLowerLimit}
6563  Eq_transfer_linksLowerLimit(linksModelToCalc,yearsSel,transfer_techs)
6564      $(transfer_linksParam(linksModelToCalc,yearsSel,transfer_techs,'linksLowerLimit') > 0 )
6565      ..
6566      sum(vintage$transfer_usedTech(linksModelToCalc,yearsSel,transfer_techs,vintage),
6567          transfer_linksTotal(linksModelToCalc,yearsSel,transfer_techs,vintage))
6568      =g=
6569      transfer_linksParam(linksModelToCalc,yearsSel,transfer_techs,"linksLowerLimit");
6570   
6571  * // ### Transfer Links Upper Limit
6572  * // Ensures link capacity upper limits.
6573  * // {Eq_transfer_linksUpperLimit}
6574  Eq_transfer_linksUpperLimit(linksModelToCalc,yearsSel,transfer_techs)
6575      $(transfer_linksParam(linksModelToCalc,yearsSel,transfer_techs,'linksUpperLimit') >= 0
6576          and transfer_linksParam(linksModelToCalc,yearsSel,transfer_techs,'linksUpperLimit') < +inf )
6577      ..
6578      sum(vintage$transfer_usedTech(linksModelToCalc,yearsSel,transfer_techs,vintage),
6579          transfer_linksTotal(linksModelToCalc,yearsSel,transfer_techs,vintage))
6580      =l=
6581      transfer_linksParam(linksModelToCalc,yearsSel,transfer_techs,"linksUpperLimit");
6582   
6583  * // ### Transfer Links Total MIP
6584  * // Ensures number of MIP links.
6585  * // {Eq_transfer_linksTotalMIP}
6586  Eq_transfer_linksTotalMIP(linksModelToCalc,yearsSel,transfer_techs,vintage)
6587      $(transfer_usedTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
6588          and transfer_techParam(transfer_techs,vintage,"mipLinks"))
6589      ..
6590      transfer_linksTotal(linksModelToCalc,yearsSel,transfer_techs,vintage)
6591      =e=
6592      transfer_linksTotal_MIP(linksModelToCalc,yearsSel,transfer_techs,vintage);
6593   
6594  * // ### Transfer Links Flow Along Upper Limit
6595  * // Ensures links flow along upper limit.
6596  * // {Eq_transfer_flowAlongUpperLimit}
6597  Eq_transfer_flowAlongUpperLimit(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
6598      $transfer_usedTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
6599      ..
6600      transfer_flowAlong(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
6601      =l=
6602      transfer_flowProfile(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage,"along")
6603      * transfer_linksTotal(linksModelToCalc,yearsSel,transfer_techs,vintage)
6604      * transfer_techParam(transfer_techs,vintage,"flowUpperLimit")
6605      ;
6606   
6607  * // ### Transfer Links Flow Against Upper Limit
6608  * // Ensures links flow against upper limit.
6609  * // {Eq_transfer_flowAgainstUpperLimit}
6610  Eq_transfer_flowAgainstUpperLimit(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
6611      $transfer_usedTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
6612      ..
6613      transfer_flowAgainst(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
6614      =l=
6615      transfer_flowProfile(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage,"against")
6616      * transfer_linksTotal(linksModelToCalc,yearsSel,transfer_techs,vintage)
6617      * transfer_techParam(transfer_techs,vintage,"flowUpperLimit")
6618      ;
6619   
6620  set transfer_usedOpf(linksModel,years,gridSegments,transfer_techs,vintage);
6621  transfer_usedOpf(linksModel,yearsToCalc,gridSegments,transfer_techs,vintage)
6622      $(transfer_usedTech(linksModel,yearsToCalc,transfer_techs,vintage)
6623          and gridSegments_dcopf(linksModel,transfer_techs,gridSegments))
6624      = yes;
6625   
6626  set transfer_usedOpfLinks(linksModel,years,gridSegments);
6627  option transfer_usedOpfLinks < transfer_usedOpf;
6628   
6629  set transfer_usedOpfSegments(years,gridSegments);
6630  option transfer_usedOpfSegments < transfer_usedOpf;
6631   
6635  * // ### Transfer DC optimal flow angle flows
6636  * // Angle flows.
6637  * // {Eq_transfer_dcopf_cycleFlows}
6638  Eq_transfer_dcopf_angleFlows(timeModelSel,linksModelToCalc,yearsSel,gridSegments)
6639      $transfer_usedOpfLinks(linksModelToCalc,yearsSel,gridSegments)
6640      ..
6641      sum ((transfer_techs,vintage)
6642              $transfer_usedOpf(linksModelToCalc,yearsSel,gridSegments,transfer_techs,vintage),
6643          ( transfer_flowAlong(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
6644              - transfer_flowAgainst(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage) )
6645          * transfer_dcopf_Xtech(linksModelToCalc,yearsSel,transfer_techs,vintage,gridSegments) )
6646      =e=
6647      sum ( nodesModelSel,
6648          - transfer_incidenceModel(nodesModelSel,linksModelToCalc)
6649          * transfer_dcopf_voltageAngle(timeModelSel,nodesModelSel,yearsSel,gridSegments));
6653   
6654   
6655  * ==== model definition ====
6656   
6657  Model M_transfer
6658  /
6659    Eq_transfer_linksBalance
6660    Eq_transfer_linksFixedDecom
6661    Eq_transfer_linksFreeDecom
6662    Eq_transfer_linksLowerLimit
6663    Eq_transfer_linksUpperLimit
6664    Eq_transfer_linksTotalMIP
6665    Eq_transfer_flowAlongUpperLimit
6666    Eq_transfer_flowAgainstUpperLimit
6670    Eq_transfer_dcopf_angleFlows
6674  /;
INCLUDE    C:\Local\REMix\framework\remix\framework\model\source\core\sourcesink.gms
6676  * SPDX-FileCopyrightText: Copyright (c) 2023 German Aerospace Center (DLR)
6677  * SPDX-License-Identifier: BSD-3-Clause
6678   
6679  * // # core_sourcesink
6680  * // The equations in this file describe the sources and sinks in the model.
6681   
6682  * // ## Variables
6683  * // {special_table_sourcesink_variables}
6991   
6992  * // ## Aggregation of profiles
6993  * // Profiles are rescaled based on the annual sum.
6994   
6995  set sourcesink_usesProfileScaling(nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile);
6996  sourcesink_usesProfileScaling(nodesData,years,sourcesink_techs,commodity,"fixed")
6997      $sourcesink_configIn(nodesData,years,sourcesink_techs,commodity,"scaleFixProfileWithFixSum") = yes;
6998  sourcesink_usesProfileScaling(nodesData,years,sourcesink_techs,commodity,"lower")
6999      $sourcesink_configIn(nodesData,years,sourcesink_techs,commodity,"scaleLowProfileWithLowSum") = yes;
7000  sourcesink_usesProfileScaling(nodesData,years,sourcesink_techs,commodity,"upper")
7001      $sourcesink_configIn(nodesData,years,sourcesink_techs,commodity,"scaleUpProfileWithUpSum") = yes;
7002   
7003  parameter sourcesink_ProfileSum(nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile);
7004  sourcesink_ProfileSum(nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile)
7005      $sourcesink_usesProfileScaling(nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile)
7006      = sum(timeData, sourcesink_profileIn(timeData,nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile));
7007   
7008  parameter sourcesink_ProfileAbsSum(nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile);
7009  sourcesink_ProfileAbsSum(nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile)
7010      $sourcesink_usesProfileScaling(nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile)
7011      = sum(timeData, abs(sourcesink_profileIn(timeData,nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile)));
7012   
7013  set sourcesink_ProfileScaleError(nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile);
7014  sourcesink_ProfileScaleError(nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile)
7015      $(sourcesink_usesProfileScaling(nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile)
7016          and sourcesink_ProfileSum(nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile) = 0
7017          and sourcesink_ProfileAbsSum(nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile) > 0)
7018      = yes;
7019   
7020  abort$sum((nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile),
7021              sourcesink_ProfileScaleError(nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile)) "One or more profiles cannot be rescaled as their annual sum equals zero!"
7022   
7023  * calculate scaling factor for each type
7024  parameter sourcesink_scalingFactor(nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile);
7025  sourcesink_scalingFactor(nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile)
7026      $(sourcesink_ProfileSum(nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile)
7027          and sourcesink_usesProfileScaling(nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile))
7028      = sum(pc_sourcesink_annualSum$sameas(pc_sourcesink_profile,pc_sourcesink_annualSum),
7029          sourcesink_annualSumIn(nodesData,years,sourcesink_techs,commodity,pc_sourcesink_annualSum)
7030              / sourcesink_ProfileSum(nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile));
7031   
7032  * rescale profiles
7033  sourcesink_profileIn(timeData,nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile)
7034      $sourcesink_usesProfileScaling(nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile)
7035      = sourcesink_profileIn(timeData,nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile)
7036          * sourcesink_scalingFactor(nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile)
7037   
7038  * // ## Aggregation of profiles
7039  * // Profiles are aggregated based on the mapping from data nodes to model nodes.
7040   
7041  * ==== aggregation of profiles ====
7042  set sourcesink_usesProfileIn(nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile);
7043  option sourcesink_usesProfileIn < sourcesink_profileIn
7044   
7045  set sourcesink_usesProfile(nodesModel,years,sourcesink_techs,commodity,pc_sourcesink_profile);
7046  sourcesink_usesProfile(nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity,pc_sourcesink_profile)
7047      $sum(nodesData$(aggregateNodesModel(nodesData,nodesModelToCalc)
7048          and sourcesink_usesProfileIn(nodesData,yearsToCalc,sourcesink_techs,commodity,pc_sourcesink_profile)), 1)
7049      = yes;
7050   
7051  * aagregate time dimension
7052  parameter sourcesink_profileIn_aggTime(timeModel,nodesData,yearsToCalc,sourcesink_techs,commodity,pc_sourcesink_profile);
7053  sourcesink_profileIn_aggTime(timeModelToCalc,nodesData,yearsToCalc,sourcesink_techs,commodity,pc_sourcesink_profile)
7054    $sourcesink_usesProfileIn(nodesData,yearsToCalc,sourcesink_techs,commodity,pc_sourcesink_profile)
7055    = sum(timeData$timeMapping(timeData,timeModelToCalc),
7056            sourcesink_profileIn(timeData,nodesData,yearsToCalc,sourcesink_techs,commodity,pc_sourcesink_profile)
7057            / timeLength(timeModelToCalc));
7058  option clear = sourcesink_profileIn;
7059   
7060  * sum up absolute profiles
7061  parameter sourcesink_profile(timeModel,nodesModel,years,sourcesink_techs,commodity,pc_sourcesink_profile);
7062  sourcesink_profile(timeModelToCalc,nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity,pc_sourcesink_profile)
7063      $sourcesink_usesProfile(nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity,pc_sourcesink_profile)
7064      = sum(nodesData$aggregateNodesModel(nodesData,nodesModelToCalc),
7065              sourcesink_profileIn_aggTime(timeModelToCalc,nodesData,yearsToCalc,sourcesink_techs,commodity,pc_sourcesink_profile));
7066  option clear = sourcesink_profileIn_aggTime;
7067   
7068  set sourcesink_enabled(nodesModel,years,sourcesink_techs,commodity);
7069  option sourcesink_enabled < sourcesink_config;
7070   
7071   
7072  * ==== declaration of variables ====
7073  * // ## Bounding of variables
7074  * // Source-sink variables with either a lower, fixed, or upper profile are bounded to their respective profiles given by the input parameters.
7075   
7076  sourcesink_flow.lo(timeModelToCalc,nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity)
7077      $( sourcesink_enabled(nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity)
7078          and sourcesink_config(nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity,"usesLowerProfile") = 1
7079          and sourcesink_profile(timeModelToCalc,nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity,"lower") > -inf )
7080      = sourcesink_profile(timeModelToCalc,nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity,"lower");
7081   
7082  sourcesink_flow.up(timeModelToCalc,nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity)
7083      $( sourcesink_enabled(nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity)
7084          and sourcesink_config(nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity,"usesUpperProfile") = 1
7085          and sourcesink_profile(timeModelToCalc,nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity,"upper") < inf )
7086      = sourcesink_profile(timeModelToCalc,nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity,"upper");
7087   
7088  sourcesink_flow.fx(timeModelToCalc,nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity)
7089      $( sourcesink_enabled(nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity)
7090          and sourcesink_config(nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity,"usesFixedProfile") = 1 )
7091      = sourcesink_profile(timeModelToCalc,nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity,"fixed");
7092   
7093  option clear = sourcesink_profile;
7094   
7095   
7096  * ==== equation definition ====
7097  * // ## Equations
7098  equations
7099  Eq_sourcesink_useFixedSum(nodesModel,years,sourcesink_techs,commodity
7100      ) "Fixes the annual sum from sources / to sinks"
7101  Eq_sourcesink_useLowerSum(nodesModel,years,sourcesink_techs,commodity
7102      ) "Limits the lower sum from sources / to sinks"
7103  Eq_sourcesink_useUpperSum(nodesModel,years,sourcesink_techs,commodity
7104      ) "Limits the upper sum from sources / to sinks"
7105    ;
7106   
7107  * // ### Fixed annual sums for sources and sinks
7108  * // Ensures that the sources and sinks with annual sums given as fixed limits are balanced.
7109  * // {Eq_sourcesink_useFixedSum}
7110  Eq_sourcesink_useFixedSum(nodesModelSel,yearsSel,sourcesink_techs,commodity)
7111      $( sourcesink_enabled(nodesModelSel,yearsSel,sourcesink_techs,commodity)
7112          and sourcesink_config(nodesModelSel,yearsSel,sourcesink_techs,commodity,"usesFixedSum") = 1 )
7113      ..
7114      sum(timeModelSel,
7115          sourcesink_flow(timeModelSel,nodesModelSel,yearsSel,sourcesink_techs,commodity))
7116      =e=
7117      sourcesink_annualSum(nodesModelSel,yearsSel,sourcesink_techs,commodity,"fixed")
7118      ;
7119   
7120  * // ### Lower annual sums for sources and sinks
7121  * // Ensures that the sources and sinks with annual sums given as lower limits are balanced.
7122  * // {Eq_sourcesink_useLowerSum}
7123  Eq_sourcesink_useLowerSum(nodesModelSel,yearsSel,sourcesink_techs,commodity)
7124      $( sourcesink_enabled(nodesModelSel,yearsSel,sourcesink_techs,commodity)
7125          and sourcesink_config(nodesModelSel,yearsSel,sourcesink_techs,commodity,"usesLowerSum") = 1
7126          and sourcesink_annualSum(nodesModelSel,yearsSel,sourcesink_techs,commodity,"lower") > -inf )
7127      ..
7128      sum(timeModelSel,
7129          sourcesink_flow(timeModelSel,nodesModelSel,yearsSel,sourcesink_techs,commodity))
7130      =g=
7131      sourcesink_annualSum(nodesModelSel,yearsSel,sourcesink_techs,commodity,"lower")
7132      ;
7133   
7134  * // ### Upper annual sums for sources and sinks
7135  * // Ensures that the sources and sinks with annual sums given as upper limits are balanced.
7136  * // {Eq_sourcesink_useUpperSum}
7137  Eq_sourcesink_useUpperSum(nodesModelSel,yearsSel,sourcesink_techs,commodity)
7138      $( sourcesink_enabled(nodesModelSel,yearsSel,sourcesink_techs,commodity)
7139          and sourcesink_config(nodesModelSel,yearsSel,sourcesink_techs,commodity,"usesUpperSum") = 1
7140          and sourcesink_annualSum(nodesModelSel,yearsSel,sourcesink_techs,commodity,"upper") < inf )
7141      ..
7142      sum(timeModelSel,
7143          sourcesink_flow(timeModelSel,nodesModelSel,yearsSel,sourcesink_techs,commodity))
7144      =l=
7145      sourcesink_annualSum(nodesModelSel,yearsSel,sourcesink_techs,commodity,"upper")
7146      ;
7147   
7148   
7149  * ==== model definition ====
7150   
7151  Model M_sourcesink
7152  /
7153    Eq_sourcesink_useFixedSum
7154    Eq_sourcesink_useLowerSum
7155    Eq_sourcesink_useUpperSum
7156  /;
INCLUDE    C:\Local\REMix\framework\remix\framework\model\source\core\balance.gms
7158  * SPDX-FileCopyrightText: Copyright (c) 2023 German Aerospace Center (DLR)
7159  * SPDX-License-Identifier: BSD-3-Clause
7160   
7161  * // # balance
7162  * // The equations in this file describe the commodity balancing in the model.
7163   
7164  Equations
7165    Eq_balance_commodities(timeModel,nodesModel,years,commodity
7166      ) "Balance for each commodity used in each time step, region, and year";
7167   
7168   
7169  * ==== calculation of mappings ====
7170   
7171  set balance_techComm(techs,commodity);
7172  balance_techComm(converter_techs(techs),commodity)
7173      $sum((vintage,activity)$converter_coefficient(converter_techs,vintage,activity,commodity,"coefficient"), 1) = yes;
7174  balance_techComm(storage_techs(techs),commodity)
7175      $sum((vintage)$storage_sizeParam(storage_techs,vintage,commodity,"size"), 1) = yes;
7176  balance_techComm(transfer_techs(techs),commodity)
7177      $sum((vintage)$transfer_coefficient(transfer_techs,vintage,commodity,"coefficient"), 1) = yes;
7178  balance_techComm(sourcesink_techs(techs),commodity)
7179      $sum((nodesModelToCalc,yearsToCalc)$sourcesink_enabled(nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity), 1) = yes;
7180   
7181  set balance_usedConverter(nodesModel,years,commodity);
7182  set balance_usedStorage(nodesModel,years,commodity);
7183  set balance_usedTransfer(nodesModel,years,commodity);
7184  set balance_usedSourceSink(nodesModel,years,commodity);
7185  set balance_usedBalance(nodesModel,years,commodity);
7186   
7187  balance_usedConverter(nodesModel,years,commodity)
7188      = sum ((converter_techs,vintage,activity)
7189              $( converter_coefficient(converter_techs,vintage,activity,commodity,"coefficient") <> 0
7190                  and converter_usedTech(nodesModel,years,converter_techs,vintage) ), 1);
7191   
7192  balance_usedStorage(nodesModel,years,commodity)
7193      = sum ((storage_techs,vintage,activity)
7194              $(storage_sizeParam(storage_techs,vintage,commodity,"size") <> 0
7195                  and storage_usedTech(nodesModel,years,storage_techs,vintage) ), 1);
7196   
7197  balance_usedTransfer(nodesModel,years,commodity)
7198      = sum ((linksModel,transfer_techs,vintage)
7199              $(transfer_coefficient(transfer_techs,vintage,commodity,"coefficient") <> 0
7200                  and transfer_incidenceModel(nodesModel,linksModel) <> 0), 1);
7201   
7202  option balance_usedSourceSink < sourcesink_enabled;
7203   
7204  balance_usedBalance(nodesModel,years,commodity)
7205      $(balance_usedConverter(nodesModel,years,commodity)
7206          or balance_usedStorage(nodesModel,years,commodity)
7207          or balance_usedTransfer(nodesModel,years,commodity)
7208          or balance_usedSourceSink(nodesModel,years,commodity) )
7209      = yes;
7210   
7211   
7212  * ==== equation definition ====
7213   
7214  * // ### Balance commodities
7215  * // Balancing of commodities for all model regions, time steps, and years
7216  * // {Eq_balance_commodities}
7217  Eq_balance_commodities(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,commodity)
7218      $balance_usedBalance(nodesModelSel,yearsSel,commodity)
7219      ..
7220  * converter
7221      sum((converter_techs,vintage,activity)
7222              $( converter_coefficientProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity,commodity) <> 0
7223                  AND converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage) ),
7224          converter_activity(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity)
7225              * converter_coefficientProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity,commodity)
7226              * timeLength(timeModelSel)
7227          + converter_unitsUsingActivity_MIP(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity)
7228              * converter_coefficient(converter_techs,vintage,activity,commodity,"constant")
7229              * timeLength(timeModelSel))
7230   
7231  * storages
7232      + sum((storage_techs,vintage)
7233              $( storage_sizeParam(storage_techs,vintage,commodity,"size") <> 0
7234                  and storage_usedTech(nodesModelSel,yearsSel,storage_techs,vintage) ),
7235          storage_level(timeModelToCalc--1,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
7236          - storage_level(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
7238          - storage_losses(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
7239          * timeLength(timeModelSel)
7241          )
7242   
7243  * transfer
7244      + sum((linksModel,transfer_techs,vintage)
7245              $(transfer_usedTech(linksModel,yearsSel,transfer_techs,vintage)
7246                  and linksModelToCalc(linksModel)),
7247          (   transfer_flowAlong(timeModelSel,linksModel,yearsSel,transfer_techs,vintage)
7248                  $(transfer_incidenceModel(nodesModelSel,linksModel) > 0)
7249            + transfer_flowAgainst(timeModelSel,linksModel,yearsSel,transfer_techs,vintage)
7250                  $(transfer_incidenceModel(nodesModelSel,linksModel) < 0) )
7251          * transfer_coefficient(transfer_techs,vintage,commodity,"coefficient")
7252          * timeLength(timeModelSel))
7253   
7254      - sum((linksModel,transfer_techs,vintage)
7255              $(transfer_usedTech(linksModel,yearsSel,transfer_techs,vintage)
7256                  and linksModelToCalc(linksModel)),
7257          (   transfer_flowAlong(timeModelSel,linksModel,yearsSel,transfer_techs,vintage)
7258                  $(transfer_incidenceModel(nodesModelSel,linksModel) < 0)
7259            + transfer_flowAgainst(timeModelSel,linksModel,yearsSel,transfer_techs,vintage)
7260                  $(transfer_incidenceModel(nodesModelSel,linksModel) > 0) )
7261          * transfer_coefficient(transfer_techs,vintage,commodity,"coefficient")
7262          * timeLength(timeModelSel))
7263   
7264      + 0.5 * sum((linksModel,transfer_techs,vintage)
7265              $(transfer_usedTech(linksModel,yearsSel,transfer_techs,vintage)
7266                  AND linksModelToCalc(linksModel)),
7267          (   transfer_flowAlong(timeModelSel,linksModel,yearsSel,transfer_techs,vintage)
7268                  $(transfer_incidenceModel(nodesModelSel,linksModel) <> 0)
7269            + transfer_flowAgainst(timeModelSel,linksModel,yearsSel,transfer_techs,vintage)
7270                  $(transfer_incidenceModel(nodesModelSel,linksModel) <> 0) )
7271          * timeLength(timeModelSel)
7272          * ( transfer_coefPerFlow(transfer_techs,vintage,commodity,"coefPerFlow")
7273              + sum(link_types,
7274                  transfer_coefPerLength(transfer_techs,vintage,commodity,link_types,"coefPerLength")
7275                  * transfer_lengthParam(linksModel,link_types,"length"))))
7276   
7277  * sourcesink
7278      + sum((sourcesink_techs)
7279              $sourcesink_enabled(nodesModelSel,yearsSel,sourcesink_techs,commodity),
7280          sourcesink_flow(timeModelSel,nodesModelSel,yearsSel,sourcesink_techs,commodity)
7281          * timeLength(timeModelSel))
7282      =e=
7283      0;
7284   
7285   
7286  * ==== model definition ====
7287   
7288  Model M_balance
7289  /
7290    Eq_balance_commodities
7291  /;
7292   
INCLUDE    C:\Local\REMix\framework\remix\framework\model\source\accounting\equations.gms
7294  * SPDX-FileCopyrightText: Copyright (c) 2023 German Aerospace Center (DLR)
7295  * SPDX-License-Identifier: BSD-3-Clause
7296   
7297  * // # accounting_equations
7298   
7299  * ==== declaration of variables ====
7300   
7301  variables
7302  accounting_indicator(accNodesModel,accYears,indicator)
7303  accounting_indicator_links(linksModel,years,indicator)
7304  accounting_objective
7305    ;
7306   
7307   
7308  * ==== definition of variables ====
7309   
7310  * set the variable levels to be fixed for years before the optimization years
7311  accounting_indicator.l(accNodesModel,accYears,indicator)
7312      $activeIndicators(accNodesModel,accYears,indicator)
7313      = 0;
7314   
7315  accounting_indicator.lo(accNodesModel,accYears,indicator)
7316      $(accounting_indicatorBounds(accNodesModel,accYears,indicator,"useLower") <> 0 )
7317      = accounting_indicatorBounds(accNodesModel,accYears,indicator,"lowerValue");
7318   
7319  accounting_indicator.up(accNodesModel,accYears,indicator)
7320      $(accounting_indicatorBounds(accNodesModel,accYears,indicator,"useUpper") <> 0 )
7321      = accounting_indicatorBounds(accNodesModel,accYears,indicator,"upperValue");
7322   
7323  accounting_indicator.fx(accNodesModel,accYears,indicator)
7324      $(accounting_indicatorBounds(accNodesModel,accYears,indicator,"useFixed") <> 0 )
7325      = accounting_indicatorBounds(accNodesModel,accYears,indicator,"fixedValue");
7326   
7327   
7328  accounting_indicator_links.lo(linksModelToCalc,yearsToCalc,indicator)
7329      $(accounting_indicatorBounds_links(linksModelToCalc,yearsToCalc,indicator,"useLower") <> 0 )
7330      = accounting_indicatorBounds_links(linksModelToCalc,yearsToCalc,indicator,"lowerValue");
7331   
7332  accounting_indicator_links.up(linksModelToCalc,yearsToCalc,indicator)
7333      $(accounting_indicatorBounds_links(linksModelToCalc,yearsToCalc,indicator,"useUpper") <> 0 )
7334      = accounting_indicatorBounds_links(linksModelToCalc,yearsToCalc,indicator,"upperValue");
7335   
7336  accounting_indicator_links.fx(linksModelToCalc,yearsToCalc,indicator)
7337      $(accounting_indicatorBounds_links(linksModelToCalc,yearsToCalc,indicator,"useFixed") <> 0 )
7338      = accounting_indicatorBounds_links(linksModelToCalc,yearsToCalc,indicator,"fixedValue");
7339   
7340   
7341  * ==== declaration of equations ====
7342   
7343  equations
7344  Eq_accounting_indicatorCalc(accNodesModel,accYears,indicator
7345      ) "Calculates the level of an indicator per accounting region"
7346  Eq_accounting_indicatorCalc_links(linksModel,years,indicator
7347      ) "Calculates the level of an indicator per model link"
7348  Eq_accounting_objective "Calculates the objective value based on the specified indicator"
7349    ;
7350   
7351   
7352  * ==== equations definition ====
7353  * // ## Equations
7354  * // ### Accounting Indicator Calculation
7355  * // Calculates the indicators for each model node for converters, sources and sinks, transfer, storage and variable indicators.
7356  * // {Eq_accounting_indicatorCalc}
7357  Eq_accounting_indicatorCalc(accNodesModel,accYearsSel(accYears),indicator)
7358      $activeIndicators(accNodesModel,accYears,indicator)
7359      ..
7360      accounting_indicator(accNodesModel,accYears,indicator)
7361      =e=
7362   
7363  * == variable indicators ==
7364      sum((accNodesModel_a,accYears_a,indicator_a)
7365          $(compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
7366              and variableIndicators(accNodesModel_a,accYears_a,indicator_a)),
7367          compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
7368          * accounting_indicator(accNodesModel_a,accYears_a,indicator_a))
7369   
7370  * == converters ==
7371      + sum ((accNodesModel_a,nodesModelSel,accYears_a,yearsSel,indicator_a)
7372              $( compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
7373                  and sameas(nodesModelSel,accNodesModel_a) and sameas(yearsSel,accYears_a)),
7374          compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
7375          *
7376          ( sum ((converter_techs,vintage)
7377                      $(converter_availTech(nodesModelSel,yearsSel,converter_techs,vintage)
7378                          and accounting_converterUnits(indicator_a,nodesModelSel,converter_techs,vintage,"useAnnuity") = 0),
7379              converter_unitsBuild(nodesModelSel,yearsSel,converter_techs,vintage)
7380              * accounting_converterUnits(indicator_a,nodesModelSel,converter_techs,vintage,"perUnitBuild"))
7381   
7382          + sum ((years_a,converter_techs,vintage)
7383                      $(converter_availTech(nodesModelSel,years_a,converter_techs,vintage)
7384                          and years_a.val < sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
7385                          and accounting_converterUnits(indicator_a,nodesModelSel,converter_techs,vintage,"useAnnuity") = 1
7386                          and years_a.val + accounting_converterUnits(indicator_a,nodesModelSel,converter_techs,vintage,"amorTime") > yearsSel.val
7387                          and years_a.val <= yearsSel.val ),
7388              converter_unitsBuild(nodesModelSel,years_a,converter_techs,vintage)
7389              * accounting_converterUnits(indicator_a,nodesModelSel,converter_techs,vintage,"perUnitBuild")
7390              * accounting_annuityFactor_converter(indicator_a,nodesModelSel,converter_techs,vintage) )
7391   
7392          + sum ((yearsToCalc,converter_techs,vintage)
7393                      $(converter_availTech(nodesModelSel,yearsToCalc,converter_techs,vintage)
7394                          and yearsToCalc.val >= sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
7395                          and accounting_converterUnits(indicator_a,nodesModelSel,converter_techs,vintage,"useAnnuity") = 1
7396                          and yearsToCalc.val + accounting_converterUnits(indicator_a,nodesModelSel,converter_techs,vintage,"amorTime") > yearsSel.val
7397                          and yearsToCalc.val <= yearsSel.val ),
7398              converter_unitsBuild(nodesModelSel,yearsToCalc,converter_techs,vintage)
7399              * accounting_converterUnits(indicator_a,nodesModelSel,converter_techs,vintage,"perUnitBuild")
7400              * accounting_annuityFactor_converter(indicator_a,nodesModelSel,converter_techs,vintage) )
7401   
7402          + sum ((converter_techs,vintage)
7403                      $converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage),
7404              converter_unitsDecom(nodesModelSel,yearsSel,converter_techs,vintage)
7405              * accounting_converterUnits(indicator_a,nodesModelSel,converter_techs,vintage,"perUnitDecom")
7406   
7407              + converter_unitsTotal(nodesModelSel,yearsSel,converter_techs,vintage)
7408              * accounting_converterUnits(indicator_a,nodesModelSel,converter_techs,vintage,"perUnitTotal") )
7409   
7410          + sum ((timeModelSel,converter_techs,vintage,activity)
7411                      $converter_usedTechAct(nodesModelSel,yearsSel,converter_techs,vintage,activity),
7412              converter_activity(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity)
7413              * timeLength(timeModelSel)
7414              * accounting_converterActivity(indicator_a,nodesModelSel,converter_techs,vintage,activity,"perActivity") )
7415   
7416          + sum ((timeModelSel,converter_techs,vintage)
7417                      $converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage),
7418              converter_unitStartups(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
7419              * accounting_converterStartup(indicator_a,nodesModelSel,converter_techs,vintage,"perStartup") )
7420   
7421          + sum ((timeModelSel,converter_techs,vintage)
7422                      $converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage),
7423              converter_rampPos(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
7424              * (accounting_converterStartup(indicator_a,nodesModelSel,converter_techs,vintage,"perRamp")
7425                 + accounting_converterStartup(indicator_a,nodesModelSel,converter_techs,vintage,"perRampPos"))
7426   
7427              + converter_rampNeg(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
7428              * (accounting_converterStartup(indicator_a,nodesModelSel,converter_techs,vintage,"perRamp")
7429                 + accounting_converterStartup(indicator_a,nodesModelSel,converter_techs,vintage,"perRampNeg")))
7430          )
7431      )
7432   
7433  * == storage ==
7434      + sum ((accNodesModel_a,nodesModelSel,accYears_a,yearsSel,indicator_a)
7435              $( compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
7436                  and sameas(nodesModelSel,accNodesModel_a) and sameas(yearsSel,accYears_a)),
7437          compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
7438          *
7439          ( sum ((storage_techs,vintage)
7440                      $(storage_availTech(nodesModelSel,yearsSel,storage_techs,vintage)
7441                          and accounting_storageUnits(indicator_a,nodesModelSel,storage_techs,vintage,"useAnnuity") = 0),
7442              storage_unitsBuild(nodesModelSel,yearsSel,storage_techs,vintage)
7443              * accounting_storageUnits(indicator_a,nodesModelSel,storage_techs,vintage,"perUnitBuild") )
7444   
7445          + sum ((years_a,storage_techs,vintage)
7446                      $(storage_availTech(nodesModelSel,years_a,storage_techs,vintage)
7447                          and years_a.val < sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
7448                          and accounting_storageUnits(indicator_a,nodesModelSel,storage_techs,vintage,"useAnnuity") = 1
7449                          and years_a.val + accounting_storageUnits(indicator_a,nodesModelSel,storage_techs,vintage,"amorTime") > yearsSel.val
7450                          and years_a.val <= yearsSel.val ),
7451              storage_unitsBuild(nodesModelSel,years_a,storage_techs,vintage)
7452              * accounting_storageUnits(indicator_a,nodesModelSel,storage_techs,vintage,"perUnitBuild")
7453              * accounting_annuityFactor_storage(indicator_a,nodesModelSel,storage_techs,vintage) )
7454   
7455          + sum ((yearsToCalc,storage_techs,vintage)
7456                      $(storage_availTech(nodesModelSel,yearsToCalc,storage_techs,vintage)
7457                          and yearsToCalc.val >= sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
7458                          and accounting_storageUnits(indicator_a,nodesModelSel,storage_techs,vintage,"useAnnuity") = 1
7459                          and yearsToCalc.val + accounting_storageUnits(indicator_a,nodesModelSel,storage_techs,vintage,"amorTime") > yearsSel.val
7460                          and yearsToCalc.val <= yearsSel.val ),
7461              storage_unitsBuild(nodesModelSel,yearsToCalc,storage_techs,vintage)
7462              * accounting_storageUnits(indicator_a,nodesModelSel,storage_techs,vintage,"perUnitBuild")
7463              * accounting_annuityFactor_storage(indicator_a,nodesModelSel,storage_techs,vintage) )
7464   
7465          + sum ((storage_techs,vintage)
7466                      $storage_usedTech(nodesModelSel,yearsSel,storage_techs,vintage),
7467              storage_unitsDecom(nodesModelSel,yearsSel,storage_techs,vintage)
7468              * accounting_storageUnits(indicator_a,nodesModelSel,storage_techs,vintage,"perUnitDecom")
7469   
7470              + storage_unitsTotal(nodesModelSel,yearsSel,storage_techs,vintage)
7471              * accounting_storageUnits(indicator_a,nodesModelSel,storage_techs,vintage,"perUnitTotal") )
7472          )
7473      )
7474   
7475   
7476  * == transfer ==
7477      + sum ((accNodesModel_a,nodesModelSel,accYears_a,yearsSel,indicator_a)
7478              $( compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
7479                  and sameas(nodesModelSel,accNodesModel_a) and sameas(yearsSel,accYears_a)),
7480          compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
7481          *
7482          ( sum ((linksModelToCalc,transfer_techs,vintage)
7483                      $(transfer_availTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
7484                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0
7485                          and accounting_transferLinks(indicator_a,linksModelToCalc,transfer_techs,vintage,"useAnnuity") = 0),
7486              0.5
7487              * transfer_linksBuild(linksModelToCalc,yearsSel,transfer_techs,vintage)
7488              * accounting_transferLinks(indicator_a,linksModelToCalc,transfer_techs,vintage,"perLinkBuild") )
7489   
7490          + sum ((linksModelToCalc,years_a,transfer_techs,vintage)
7491                      $(transfer_availTech(linksModelToCalc,years_a,transfer_techs,vintage)
7492                          and years_a.val < sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
7493                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0
7494                          and accounting_transferLinks(indicator_a,linksModelToCalc,transfer_techs,vintage,"useAnnuity") = 1
7495                          and years_a.val + accounting_transferLinks(indicator_a,linksModelToCalc,transfer_techs,vintage,"amorTime") > yearsSel.val
7496                          and years_a.val <= yearsSel.val ),
7497              0.5
7498              * transfer_linksBuild(linksModelToCalc,years_a,transfer_techs,vintage)
7499              * accounting_transferLinks(indicator_a,linksModelToCalc,transfer_techs,vintage,"perLinkBuild")
7500              * accounting_annuityFactor_transferLink(indicator_a,linksModelToCalc,transfer_techs,vintage) )
7501   
7502          + sum ((linksModelToCalc,yearsToCalc,transfer_techs,vintage)
7503                      $(transfer_availTech(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
7504                          and yearsToCalc.val >= sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
7505                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0
7506                          and accounting_transferLinks(indicator_a,linksModelToCalc,transfer_techs,vintage,"useAnnuity") = 1
7507                          and yearsToCalc.val + accounting_transferLinks(indicator_a,linksModelToCalc,transfer_techs,vintage,"amorTime") > yearsSel.val
7508                          and yearsToCalc.val <= yearsSel.val ),
7509              0.5
7510              * transfer_linksBuild(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
7511              * accounting_transferLinks(indicator_a,linksModelToCalc,transfer_techs,vintage,"perLinkBuild")
7512              * accounting_annuityFactor_transferLink(indicator_a,linksModelToCalc,transfer_techs,vintage) )
7513   
7514          + sum ((linksModelToCalc,transfer_techs,vintage,link_types)
7515                      $(transfer_availTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
7516                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0
7517                          and accounting_transferPerLength(indicator_a,linksModelToCalc,transfer_techs,vintage,link_types,"useAnnuity") = 0 ),
7518              0.5
7519              * transfer_linksBuild(linksModelToCalc,yearsSel,transfer_techs,vintage)
7520              * transfer_lengthParam(linksModelToCalc,link_types,"length")
7521              * accounting_transferPerLength(indicator_a,linksModelToCalc,transfer_techs,vintage,link_types,"perLengthBuild") )
7522   
7523          + sum ((linksModelToCalc,years_a,transfer_techs,vintage,link_types)
7524                      $(transfer_availTech(linksModelToCalc,years_a,transfer_techs,vintage)
7525                          and years_a.val < sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
7526                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0
7527                          and accounting_transferPerLength(indicator_a,linksModelToCalc,transfer_techs,vintage,link_types,"useAnnuity") = 1
7528                          and years_a.val + accounting_transferPerLength(indicator_a,linksModelToCalc,transfer_techs,vintage,link_types,"amorTime") > yearsSel.val
7529                          and years_a.val <= yearsSel.val ),
7530              0.5
7531              * transfer_linksBuild(linksModelToCalc,years_a,transfer_techs,vintage)
7532              * transfer_lengthParam(linksModelToCalc,link_types,"length")
7533              * accounting_transferPerLength(indicator_a,linksModelToCalc,transfer_techs,vintage,link_types,"perLengthBuild")
7534              * accounting_annuityFactor_transferDistance(indicator_a,linksModelToCalc,transfer_techs,vintage,link_types) )
7535   
7536          + sum ((linksModelToCalc,yearsToCalc,transfer_techs,vintage,link_types)
7537                      $(transfer_availTech(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
7538                          and yearsToCalc.val >= sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
7539                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0
7540                          and accounting_transferPerLength(indicator_a,linksModelToCalc,transfer_techs,vintage,link_types,"useAnnuity") = 1
7541                          and yearsToCalc.val + accounting_transferPerLength(indicator_a,linksModelToCalc,transfer_techs,vintage,link_types,"amorTime") > yearsSel.val
7542                          and yearsToCalc.val <= yearsSel.val ),
7543              0.5
7544              * transfer_linksBuild(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
7545              * transfer_lengthParam(linksModelToCalc,link_types,"length")
7546              * accounting_transferPerLength(indicator_a,linksModelToCalc,transfer_techs,vintage,link_types,"perLengthBuild")
7547              * accounting_annuityFactor_transferDistance(indicator_a,linksModelToCalc,transfer_techs,vintage,link_types) )
7548   
7549          + sum ((linksModelToCalc,transfer_techs,vintage)
7550                      $(transfer_usedTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
7551                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0 ),
7552              0.5
7553              * transfer_linksDecom(linksModelToCalc,yearsSel,transfer_techs,vintage)
7554              * accounting_transferLinks(indicator_a,linksModelToCalc,transfer_techs,vintage,"perLinkDecom")
7555   
7556              + 0.5
7557              * transfer_linksTotal(linksModelToCalc,yearsSel,transfer_techs,vintage)
7558              * accounting_transferLinks(indicator_a,linksModelToCalc,transfer_techs,vintage,"perLinkTotal")
7559   
7560              + 0.5
7561              * sum (link_types,
7562                  transfer_linksDecom(linksModelToCalc,yearsSel,transfer_techs,vintage)
7563                  * transfer_lengthParam(linksModelToCalc,link_types,"length")
7564                  * accounting_transferPerLength(indicator_a,linksModelToCalc,transfer_techs,vintage,link_types,"perLengthDecom")
7565   
7566                  + transfer_linksTotal(linksModelToCalc,yearsSel,transfer_techs,vintage)
7567                  * transfer_lengthParam(linksModelToCalc,link_types,"length")
7568                  * accounting_transferPerLength(indicator_a,linksModelToCalc,transfer_techs,vintage,link_types,"perLengthTotal"))
7569   
7570              + 0.5
7571              * sum (timeModelSel,
7572                  transfer_flowAlong(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
7573                  * timeLength(timeModelSel)
7574                  * ( accounting_transferLinks(indicator_a,linksModelToCalc,transfer_techs,vintage,"perFlow")
7575                      + accounting_transferLinks(indicator_a,linksModelToCalc,transfer_techs,vintage,"perFlowAlong"))
7576   
7577                  + transfer_flowAgainst(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
7578                  * timeLength(timeModelSel)
7579                  * ( accounting_transferLinks(indicator_a,linksModelToCalc,transfer_techs,vintage,"perFlow")
7580                      + accounting_transferLinks(indicator_a,linksModelToCalc,transfer_techs,vintage,"perFlowAgainst")))
7581   
7582              + 0.5
7583              * sum ((timeModelSel, link_types),
7584                  transfer_flowAlong(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
7585                  * timeLength(timeModelSel)
7586                  * transfer_lengthParam(linksModelToCalc,link_types,"length")
7587                  * (accounting_transferPerLength(indicator_a,linksModelToCalc,transfer_techs,vintage,link_types,"perFlow")
7588                      + accounting_transferPerLength(indicator_a,linksModelToCalc,transfer_techs,vintage,link_types,"perFlowAlong"))
7589   
7590                  + transfer_flowAgainst(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
7591                  * timeLength(timeModelSel)
7592                  * transfer_lengthParam(linksModelToCalc,link_types,"length")
7593                  * (accounting_transferPerLength(indicator_a,linksModelToCalc,transfer_techs,vintage,link_types,"perFlow")
7594                      + accounting_transferPerLength(indicator_a,linksModelToCalc,transfer_techs,vintage,link_types,"perFlowAgainst")))
7595              )
7596          )
7597      )
7598   
7599   
7600  * == sources / sinks ==
7601      + sum ((accNodesModel_a,nodesModelSel,accYears_a,yearsSel,indicator_a)
7602              $( compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
7603                  and sameas(nodesModelSel,accNodesModel_a) and sameas(yearsSel,accYears_a)),
7604          compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
7605          *
7606          sum ((timeModelSel,sourcesink_techs,commodity)
7607                  $sourcesink_enabled(nodesModelSel,yearsSel,sourcesink_techs,commodity),
7608              sourcesink_flow(timeModelSel,nodesModelSel,yearsSel,sourcesink_techs,commodity)
7609              * timeLength(timeModelSel)
7610              * accounting_sourcesinkFlow(indicator_a,nodesModelSel,yearsSel,sourcesink_techs,commodity,"perFlow") )
7611      );
7612   
7613  * // ### Accounting Indicator Calculation Links
7614  * // Calculates the indicators for each transfer for converters, sources and sinks, transfer, storage and variable indicators.
7615  * // {Eq_accounting_indicatorCalc_links}
7616  Eq_accounting_indicatorCalc_links(linksModelToCalc,yearsSel,indicator)
7617      $activeIndicators_links(linksModelToCalc,yearsSel,indicator)
7618      ..
7619      accounting_indicator_links(linksModelToCalc,yearsSel,indicator)
7620      =e=
7621      sum ((transfer_techs,vintage)
7622                  $(transfer_availTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
7623                      and accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"useAnnuity") = 0),
7624          transfer_linksBuild(linksModelToCalc,yearsSel,transfer_techs,vintage)
7625          * accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"perLinkBuild") )
7626   
7627      + sum ((years_a,transfer_techs,vintage)
7628                  $(transfer_availTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
7629                      and accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"useAnnuity") = 1
7630                      and years_a.val + accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"amorTime") > yearsSel.val
7631                      and years_a.val <= yearsSel.val ),
7632          transfer_linksBuild(linksModelToCalc,years_a,transfer_techs,vintage)
7633          * accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"perLinkBuild")
7634          * accounting_annuityFactor_transferLink(indicator,linksModelToCalc,transfer_techs,vintage) )
7635   
7636      + sum ((transfer_techs,vintage,link_types)
7637                  $(transfer_availTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
7638                      and accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"useAnnuity") = 0 ),
7639          transfer_linksBuild(linksModelToCalc,yearsSel,transfer_techs,vintage)
7640          * transfer_lengthParam(linksModelToCalc,link_types,"length")
7641          * accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"perLengthBuild") )
7642   
7643      + sum ((years_a,transfer_techs,vintage,link_types)
7644                  $(transfer_availTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
7645                      and accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"useAnnuity") = 1
7646                      and years_a.val + accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"amorTime") > yearsSel.val
7647                      and years_a.val <= yearsSel.val ),
7648          transfer_linksBuild(linksModelToCalc,years_a,transfer_techs,vintage)
7649          * transfer_lengthParam(linksModelToCalc,link_types,"length")
7650          * accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"perLengthBuild")
7651          * accounting_annuityFactor_transferDistance(indicator,linksModelToCalc,transfer_techs,vintage,link_types) )
7652   
7653      + sum ((transfer_techs,vintage)
7654                  $(transfer_usedTech(linksModelToCalc,yearsSel,transfer_techs,vintage)),
7655          transfer_linksDecom(linksModelToCalc,yearsSel,transfer_techs,vintage)
7656          * accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"perLinkDecom")
7657   
7658          + transfer_linksTotal(linksModelToCalc,yearsSel,transfer_techs,vintage)
7659          * accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"perLinkTotal")
7660   
7661          + sum (link_types,
7662              transfer_linksDecom(linksModelToCalc,yearsSel,transfer_techs,vintage)
7663              * transfer_lengthParam(linksModelToCalc,link_types,"length")
7664              * accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"perLengthDecom")
7665   
7666              + transfer_linksTotal(linksModelToCalc,yearsSel,transfer_techs,vintage)
7667              * transfer_lengthParam(linksModelToCalc,link_types,"length")
7668              * accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"perLengthTotal"))
7669   
7670          + sum (timeModelSel,
7671              transfer_flowAlong(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
7672              * timeLength(timeModelSel)
7673              * ( accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"perFlow")
7674                  + accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"perFlowAlong"))
7675   
7676              + transfer_flowAgainst(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
7677              * timeLength(timeModelSel)
7678              * ( accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"perFlow")
7679                  + accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"perFlowAgainst")))
7680   
7681          + sum ((timeModelSel, link_types),
7682              transfer_flowAlong(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
7683              * timeLength(timeModelSel)
7684              * transfer_lengthParam(linksModelToCalc,link_types,"length")
7685              * (accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"perFlow")
7686                  + accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"perFlowAlong"))
7687   
7688              + transfer_flowAgainst(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
7689              * timeLength(timeModelSel)
7690              * transfer_lengthParam(linksModelToCalc,link_types,"length")
7691              * (accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"perFlow")
7692                  + accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"perFlowAgainst")))
7693          );
7694   
7695  * // ### Accounting Objective
7696  * // Calculates the indicators for the objective.
7697  * // {Eq_accounting_objective}
7698  Eq_accounting_objective
7699      ..
7700      accounting_objective
7701      =e=
7702      sum ((accNodesModel,accYears,indicator)
7703              $(accounting_indicatorBounds(accNodesModel,accYears,indicator,"obj") <> 0 ),
7704          accounting_indicator(accNodesModel,accYears,indicator) )
7705   
7706   
7707  * ==== model definition ====
7708   
7709  Model M_accounting
7710  /
7711  Eq_accounting_indicatorCalc_links
7712  Eq_accounting_indicatorCalc
7713  Eq_accounting_objective
7714  /;
INCLUDE    C:\Local\REMix\framework\remix\framework\model\source\optiframe.gms
7716  * SPDX-FileCopyrightText: Copyright (c) 2023 German Aerospace Center (DLR)
7717  * SPDX-License-Identifier: BSD-3-Clause
7718   
7719  * ==== optimization frames ====
7721   
7722  * mapping from optimization frame to years
7724  set optiframe / of1 * of1 /;
7725  set optiframeToCalc(optiframe);
7726   
7728  set map_optiframe(optiframe,years) / of1 . #yearsToCalc /;
7730   
7732   
7733  option optiframeToCalc < map_optiframe;
7734   
7735  Model remix /
7736    M_converter
7737    M_storage
7738    M_transfer
7739    M_sourcesink
7740    M_balance
7741    M_accounting
7742  /;
7743   
7744   
7745  * ==== include methods  ====
7746   
7747  * check if the method is valid
7753   
7754   
7755  * if method is pips write the checkanno tool
INCLUDE    C:\Local\REMix\framework\remix\framework\model\source\methods\checkanno.gms
7757  * SPDX-FileCopyrightText: Copyright (c) 2023 German Aerospace Center (DLR)
7758  * SPDX-License-Identifier: BSD-3-Clause
7759   
7762   
7765   
7766  * if method is pips generate the annotated gdx file
INCLUDE    C:\Local\REMix\framework\remix\framework\model\source\methods\pips.gms
7768  * SPDX-FileCopyrightText: Copyright (c) 2023 German Aerospace Center (DLR)
7769  * SPDX-License-Identifier: BSD-3-Clause
7770   
7774   
7775  * if method is solve run the model with commercial solvers
INCLUDE    C:\Local\REMix\framework\remix\framework\model\source\methods\solve.gms
7777  * SPDX-FileCopyrightText: Copyright (c) 2023 German Aerospace Center (DLR)
7778  * SPDX-License-Identifier: BSD-3-Clause
7779   
7782   
7784   
7785  * ==== global options ====
7792   
7793  * ==== general solver options ====
7803   
7804  * ==== cplex options ====
7813   
7814  * ==== copt options ====
7818   
7819  * ==== debug options ====
7822   
7823   
7824  * ==== setup optimization ====
7825  if ((sum(nodesModelToCalc, 1)>40 or sum(timeModelToCalc, 1)>50) and not 0,
7826     option limRow=0, limCol=0, solPrint=off;
7827  else
7828     option limRow=100000, limCol=100000, solPrint=on;
7829  );
7830   
7832   
7833  option mip = cplex;
7834  option reslim = 604800;
7835  option optcr = 1e-3;
7836  remix.threads=4;
7837  remix.optFile = 1;
7838  remix.solveLink = 0;
7839  remix.holdFixed = 1;
7840   
7841   
7842  * ==== configure optionfiles ====
7843   
7845  file opt / "cplex.opt" /;
7846  put opt;
7848  put "rerun no" /;
7850  put "lpmethod 4" /;
7852  put "barorder 0" /;
7853  put "preind 1" /;
7854  put "scaind 0" /;
7855  put "predual -1" /;
7856  put "baralg 0" /;
7857  put "barstartalg 1" /;
7858  put "barepcomp 1e-6" /;
7859  put "solutiontype 2" /;
7860  put "startalg 4" /;
7861  put "epgap 1e-3" /;
7862  put "quality 1" /;
7863  put "barcolnz 0" /;
7864  put "threads 4" /;
7865  put "parallelmode 1" /;
7868  putclose;
7869   
7871   
7872   
7873  * ==== solve the problem ====
7874   
7875  loop ( optiframeToCalc,
7876      yearsSel(years) = no;
7877      yearsSel(years)$map_optiframe(optiframeToCalc,years) = yes;
7878      yearsToFix(years) = no;
7879      yearsToFix(years)$(years.val < smin(years_a$yearsSel(years_a), years_a.val)) = yes;
7880      accYearsSel(accYears) = no;
7881      accYearsSel("horizon") = yes;
7882      accYearsSel(accYears)$(sum(yearsSel$sameas(accYears,yearsSel), 1)) = yes;
7883      accYearsToFix(accYears) = no;
7884      accYearsToFix(accYears)$(sum(years$(sameas(years,accYears) and years.val < smin(years_a$yearsSel(years_a), years_a.val)), 1) > 0) = yes;
7885      timeModelSel(timeModel) = no;
7886      timeModelSel(timeModel)$timeModelToCalc(timeModel) = yes;
7887      nodesModelSel(nodesModel) = no;
7888      nodesModelSel(nodesModel)$nodesModelToCalc(nodesModel) = yes;
7889   
7890  * Fix decision for years previously optimized in case of myopic or foresight
7891      converter_unitsDelta(nodesModelToCalc,yearsToFix,converter_techs)
7892          $(sum(yearsToCalc$sameas(yearsToFix, yearsToCalc), 1))
7893          = sum(vintage, converter_unitsTotal.l(nodesModelToCalc,yearsToFix,converter_techs,vintage))
7894              - converter_capacityParam(nodesModelToCalc,yearsToFix,converter_techs,"unitsUpperLimit");
7895      converter_unitsDelta(nodesModelToCalc,yearsToFix,converter_techs)
7896          $(converter_unitsDelta(nodesModelToCalc,yearsToFix,converter_techs) < 0) = 0;
7897   
7898      converter_unitsBuild.l(nodesModelToCalc,yearsToFix,converter_techs,vintage)
7899          $converter_availTech(nodesModelToCalc,yearsToFix,converter_techs,vintage)
7900          = converter_unitsBuild.l(nodesModelToCalc,yearsToFix,converter_techs,vintage)
7901              - converter_unitsDelta(nodesModelToCalc,yearsToFix,converter_techs);
7902   
7903      converter_unitsBuild.l(nodesModelToCalc,yearsToFix,converter_techs,vintage)
7904          $(converter_unitsBuild.l(nodesModelToCalc,yearsToFix,converter_techs,vintage) < 0) = 0;
7905      converter_unitsBuild.fx(nodesModelToCalc,yearsToFix,converter_techs,vintage)
7906          = converter_unitsBuild.l(nodesModelToCalc,yearsToFix,converter_techs,vintage);
7907      converter_unitsDecom.l(nodesModelToCalc,yearsToFix,converter_techs,vintage)
7908          $(converter_unitsDecom.l(nodesModelToCalc,yearsToFix,converter_techs,vintage) < 0) = 0;
7909      converter_unitsDecom.fx(nodesModelToCalc,yearsToFix,converter_techs,vintage)
7910          = converter_unitsDecom.l(nodesModelToCalc,yearsToFix,converter_techs,vintage);
7911      converter_unitsTotal.fx(nodesModelToCalc,yearsToFix,converter_techs,vintage)
7912          = converter_unitsTotal.l(nodesModelToCalc,yearsToFix,converter_techs,vintage);
7913   
7914   
7915      storage_unitsDelta(nodesModelToCalc,yearsToFix,storage_techs)
7916          $(sum(yearsToCalc$sameas(yearsToFix, yearsToCalc), 1))
7917          = sum(vintage, storage_unitsTotal.l(nodesModelToCalc,yearsToFix,storage_techs,vintage))
7918              - storage_reservoirParam(nodesModelToCalc,yearsToFix,storage_techs,"unitsUpperLimit");
7919      storage_unitsDelta(nodesModelToCalc,yearsToFix,storage_techs)
7920          $(storage_unitsDelta(nodesModelToCalc,yearsToFix,storage_techs) < 0) = 0;
7921   
7922      storage_unitsBuild.l(nodesModelToCalc,yearsToFix,storage_techs,vintage)
7923          $storage_availTech(nodesModelToCalc,yearsToFix,storage_techs,vintage)
7924          = storage_unitsBuild.l(nodesModelToCalc,yearsToFix,storage_techs,vintage)
7925              - storage_unitsDelta(nodesModelToCalc,yearsToFix,storage_techs);
7926   
7927      storage_unitsBuild.l(nodesModelToCalc,yearsToFix,storage_techs,vintage)
7928          $(storage_unitsBuild.l(nodesModelToCalc,yearsToFix,storage_techs,vintage) < 0) = 0;
7929      storage_unitsBuild.fx(nodesModelToCalc,yearsToFix,storage_techs,vintage)
7930          = storage_unitsBuild.l(nodesModelToCalc,yearsToFix,storage_techs,vintage);
7931      storage_unitsDecom.l(nodesModelToCalc,yearsToFix,storage_techs,vintage)
7932          $(storage_unitsDecom.l(nodesModelToCalc,yearsToFix,storage_techs,vintage) < 0) = 0;
7933      storage_unitsDecom.fx(nodesModelToCalc,yearsToFix,storage_techs,vintage)
7934          = storage_unitsDecom.l(nodesModelToCalc,yearsToFix,storage_techs,vintage);
7935      storage_unitsTotal.fx(nodesModelToCalc,yearsToFix,storage_techs,vintage)
7936          = storage_unitsTotal.l(nodesModelToCalc,yearsToFix,storage_techs,vintage);
7937   
7938   
7939      transfer_linksDelta(linksModelToCalc,yearsToFix,transfer_techs)
7940          $(sum(yearsToCalc$sameas(yearsToFix, yearsToCalc), 1))
7941          = sum(vintage, transfer_linksTotal.l(linksModelToCalc,yearsToFix,transfer_techs,vintage))
7942              - transfer_linksParam(linksModelToCalc,yearsToFix,transfer_techs,"linksUpperLimit");
7943      transfer_linksDelta(linksModelToCalc,yearsToFix,transfer_techs)
7944          $(transfer_linksDelta(linksModelToCalc,yearsToFix,transfer_techs) < 0) = 0;
7945   
7946      transfer_linksBuild.l(linksModelToCalc,yearsToFix,transfer_techs,vintage)
7947          $transfer_availTech(linksModelToCalc,yearsToFix,transfer_techs,vintage)
7948          = transfer_linksBuild.l(linksModelToCalc,yearsToFix,transfer_techs,vintage)
7949              - transfer_linksDelta(linksModelToCalc,yearsToFix,transfer_techs);
7950   
7951      transfer_linksBuild.l(linksModelToCalc,yearsToFix,transfer_techs,vintage)
7952          $(transfer_linksBuild.l(linksModelToCalc,yearsToFix,transfer_techs,vintage) < 0) = 0;
7953      transfer_linksBuild.fx(linksModelToCalc,yearsToFix,transfer_techs,vintage)
7954          = transfer_linksBuild.l(linksModelToCalc,yearsToFix,transfer_techs,vintage);
7955      transfer_linksDecom.l(linksModelToCalc,yearsToFix,transfer_techs,vintage)
7956          $(transfer_linksDecom.l(linksModelToCalc,yearsToFix,transfer_techs,vintage) < 0) = 0;
7957      transfer_linksDecom.fx(linksModelToCalc,yearsToFix,transfer_techs,vintage)
7958          = transfer_linksDecom.l(linksModelToCalc,yearsToFix,transfer_techs,vintage);
7959      transfer_linksTotal.fx(linksModelToCalc,yearsToFix,transfer_techs,vintage)
7960          = transfer_linksTotal.l(linksModelToCalc,yearsToFix,transfer_techs,vintage);
7961   
7962      accounting_indicator.fx(accNodesModel,accYearsToFix,indicator)
7963          = accounting_indicator.l(accNodesModel,accYearsToFix,indicator);
7964   
7965  * Optimize and log values
7966      if (opti_sense < 0,
7967      solve remix minimizing accounting_objective using mip;
7968      else
7969      solve remix maximizing accounting_objective using mip;
7970      );
7971   
7972      put_utility 'log' / 'Model status ' remix.modelstat:0:0;
7973      put_utility 'log' / 'Objective value ' accounting_objective.l:0:3;
7974   
7975  );
7976   
7980   
7981  * if method is pareto solve the model once and afterwards run multiple points along the pareto front
INCLUDE    C:\Local\REMix\framework\remix\framework\model\source\methods\pareto.gms
7983  * SPDX-FileCopyrightText: Copyright (c) 2023 German Aerospace Center (DLR)
7984  * SPDX-License-Identifier: BSD-3-Clause
7985   
7989   
7990  * if method is mga solve the model once and afterwards maximize the length metric of indicators
INCLUDE    C:\Local\REMix\framework\remix\framework\model\source\methods\mga.gms
7992  * SPDX-FileCopyrightText: Copyright (c) 2023 German Aerospace Center (DLR)
7993  * SPDX-License-Identifier: BSD-3-Clause
7994   
7998   
7999  * if method is iternodes run the model by iterating through all nodesToCalc
INCLUDE    C:\Local\REMix\framework\remix\framework\model\source\methods\iternodes.gms
8001  * SPDX-FileCopyrightText: Copyright (c) 2023 German Aerospace Center (DLR)
8002  * SPDX-License-Identifier: BSD-3-Clause
8003   
8007   
8008  * if postcalc is one write the results gdx
INCLUDE    C:\Local\REMix\framework\remix\framework\model\source\postcalc\definition.gms
8010  * SPDX-FileCopyrightText: Copyright (c) 2023 German Aerospace Center (DLR)
8011  * SPDX-License-Identifier: BSD-3-Clause
8012   
8014   
8015  * ==== indicator accounting ====
8016   
8017  indicator_accounting_detailed(indicator,nodesModelToCalc,yearsToCalc,techs)
8018      =
8019  * == converters ==
8020      sum ((converter_techs(techs),vintage)
8021                  $(converter_availTech(nodesModelToCalc,yearsToCalc,converter_techs,vintage)
8022                      and accounting_converterUnits(indicator,nodesModelToCalc,converter_techs,vintage,"useAnnuity") = 0),
8023          converter_unitsBuild.l(nodesModelToCalc,yearsToCalc,converter_techs,vintage)
8024          * accounting_converterUnits(indicator,nodesModelToCalc,converter_techs,vintage,"perUnitBuild"))
8025   
8026      + sum ((years_a,converter_techs(techs),vintage)
8027                  $(converter_availTech(nodesModelToCalc,years_a,converter_techs,vintage)
8028                      and accounting_converterUnits(indicator,nodesModelToCalc,converter_techs,vintage,"useAnnuity") = 1
8029                      and years_a.val + accounting_converterUnits(indicator,nodesModelToCalc,converter_techs,vintage,"amorTime") > yearsToCalc.val
8030                      and years_a.val <= yearsToCalc.val ),
8031          converter_unitsBuild.l(nodesModelToCalc,years_a,converter_techs,vintage)
8032          * accounting_converterUnits(indicator,nodesModelToCalc,converter_techs,vintage,"perUnitBuild")
8033          * accounting_annuityFactor_converter(indicator,nodesModelToCalc,converter_techs,vintage) )
8034   
8035      + sum ((converter_techs(techs),vintage)
8036                  $converter_usedTech(nodesModelToCalc,yearsToCalc,converter_techs,vintage),
8037          converter_unitsDecom.l(nodesModelToCalc,yearsToCalc,converter_techs,vintage)
8038          * accounting_converterUnits(indicator,nodesModelToCalc,converter_techs,vintage,"perUnitDecom")
8039   
8040          + converter_unitsTotal.l(nodesModelToCalc,yearsToCalc,converter_techs,vintage)
8041          * accounting_converterUnits(indicator,nodesModelToCalc,converter_techs,vintage,"perUnitTotal") )
8042   
8043      + sum ((timeModelToCalc,converter_techs(techs),vintage,activity)
8044                  $converter_usedTechAct(nodesModelToCalc,yearsToCalc,converter_techs,vintage,activity),
8045          converter_activity.l(timeModelToCalc,nodesModelToCalc,yearsToCalc,converter_techs,vintage,activity)
8046          * timeLength(timeModelToCalc)
8047          * accounting_converterActivity(indicator,nodesModelToCalc,converter_techs,vintage,activity,"perActivity") )
8048   
8049      + sum ((timeModelToCalc,converter_techs(techs),vintage)
8050                  $converter_usedTech(nodesModelToCalc,yearsToCalc,converter_techs,vintage),
8051          converter_unitStartups.l(timeModelToCalc,nodesModelToCalc,yearsToCalc,converter_techs,vintage)
8052          * accounting_converterStartup(indicator,nodesModelToCalc,converter_techs,vintage,"perStartup") )
8053   
8054      + sum ((timeModelToCalc,converter_techs(techs),vintage)
8055                  $converter_usedTech(nodesModelToCalc,yearsToCalc,converter_techs,vintage),
8056          converter_rampPos.l(timeModelToCalc,nodesModelToCalc,yearsToCalc,converter_techs,vintage)
8057          * (accounting_converterStartup(indicator,nodesModelToCalc,converter_techs,vintage,"perRamp")
8058              + accounting_converterStartup(indicator,nodesModelToCalc,converter_techs,vintage,"perRampPos"))
8059   
8060          + converter_rampNeg.l(timeModelToCalc,nodesModelToCalc,yearsToCalc,converter_techs,vintage)
8061          * (accounting_converterStartup(indicator,nodesModelToCalc,converter_techs,vintage,"perRamp")
8062              + accounting_converterStartup(indicator,nodesModelToCalc,converter_techs,vintage,"perRampNeg")))
8063   
8064  * == storage ==
8065      + sum ((storage_techs(techs),vintage)
8066                  $(storage_availTech(nodesModelToCalc,yearsToCalc,storage_techs,vintage)
8067                      and accounting_storageUnits(indicator,nodesModelToCalc,storage_techs,vintage,"useAnnuity") = 0),
8068          storage_unitsBuild.l(nodesModelToCalc,yearsToCalc,storage_techs,vintage)
8069          * accounting_storageUnits(indicator,nodesModelToCalc,storage_techs,vintage,"perUnitBuild") )
8070   
8071      + sum ((years_a,storage_techs(techs),vintage)
8072                  $(storage_availTech(nodesModelToCalc,yearsToCalc,storage_techs,vintage)
8073                      and accounting_storageUnits(indicator,nodesModelToCalc,storage_techs,vintage,"useAnnuity") = 1
8074                      and years_a.val + accounting_storageUnits(indicator,nodesModelToCalc,storage_techs,vintage,"amorTime") > yearsToCalc.val
8075                      and years_a.val <= yearsToCalc.val ),
8076          storage_unitsBuild.l(nodesModelToCalc,years_a,storage_techs,vintage)
8077          * accounting_storageUnits(indicator,nodesModelToCalc,storage_techs,vintage,"perUnitBuild")
8078          * accounting_annuityFactor_storage(indicator,nodesModelToCalc,storage_techs,vintage) )
8079   
8080      + sum ((storage_techs(techs),vintage)
8081                  $storage_usedTech(nodesModelToCalc,yearsToCalc,storage_techs,vintage),
8082          storage_unitsDecom.l(nodesModelToCalc,yearsToCalc,storage_techs,vintage)
8083          * accounting_storageUnits(indicator,nodesModelToCalc,storage_techs,vintage,"perUnitDecom")
8084   
8085          + storage_unitsTotal.l(nodesModelToCalc,yearsToCalc,storage_techs,vintage)
8086          * accounting_storageUnits(indicator,nodesModelToCalc,storage_techs,vintage,"perUnitTotal") )
8087   
8088  * == transfer ==
8089      + sum ((linksModel,transfer_techs(techs),vintage)
8090                  $(transfer_availTech(linksModel,yearsToCalc,transfer_techs,vintage)
8091                      and linksModelToCalc(linksModel)
8092                      and transfer_incidenceModel(nodesModelToCalc,linksModel) <> 0
8093                      and accounting_transferLinks(indicator,linksModel,transfer_techs,vintage,"useAnnuity") = 0),
8094          0.5
8095          * transfer_linksBuild.l(linksModel,yearsToCalc,transfer_techs,vintage)
8096          * accounting_transferLinks(indicator,linksModel,transfer_techs,vintage,"perLinkBuild") )
8097   
8098      + sum ((linksModel,years_a,transfer_techs(techs),vintage)
8099                  $(transfer_availTech(linksModel,yearsToCalc,transfer_techs,vintage)
8100                      and linksModelToCalc(linksModel)
8101                      and transfer_incidenceModel(nodesModelToCalc,linksModel) <> 0
8102                      and accounting_transferLinks(indicator,linksModel,transfer_techs,vintage,"useAnnuity") = 1
8103                      and years_a.val + accounting_transferLinks(indicator,linksModel,transfer_techs,vintage,"amorTime") > yearsToCalc.val
8104                      and years_a.val <= yearsToCalc.val ),
8105          0.5
8106          * transfer_linksBuild.l(linksModel,years_a,transfer_techs,vintage)
8107          * accounting_transferLinks(indicator,linksModel,transfer_techs,vintage,"perLinkBuild")
8108          * accounting_annuityFactor_transferLink(indicator,linksModel,transfer_techs,vintage) )
8109   
8110      + sum ((linksModel,transfer_techs(techs),vintage,link_types)
8111                  $(transfer_availTech(linksModel,yearsToCalc,transfer_techs,vintage)
8112                      and linksModelToCalc(linksModel)
8113                      and transfer_incidenceModel(nodesModelToCalc,linksModel) <> 0
8114                      and accounting_transferPerLength(indicator,linksModel,transfer_techs,vintage,link_types,"useAnnuity") = 0 ),
8115          0.5
8116          * transfer_linksBuild.l(linksModel,yearsToCalc,transfer_techs,vintage)
8117          * transfer_lengthParam(linksModel,link_types,"length")
8118          * accounting_transferPerLength(indicator,linksModel,transfer_techs,vintage,link_types,"perLengthBuild") )
8119   
8120      + sum ((linksModel,years_a,transfer_techs(techs),vintage,link_types)
8121                  $(transfer_availTech(linksModel,yearsToCalc,transfer_techs,vintage)
8122                      and linksModelToCalc(linksModel)
8123                      and transfer_incidenceModel(nodesModelToCalc,linksModel) <> 0
8124                      and accounting_transferPerLength(indicator,linksModel,transfer_techs,vintage,link_types,"useAnnuity") = 1
8125                      and years_a.val + accounting_transferPerLength(indicator,linksModel,transfer_techs,vintage,link_types,"amorTime") > yearsToCalc.val
8126                      and years_a.val <= yearsToCalc.val ),
8127          0.5
8128          * transfer_linksBuild.l(linksModel,years_a,transfer_techs,vintage)
8129          * transfer_lengthParam(linksModel,link_types,"length")
8130          * accounting_transferPerLength(indicator,linksModel,transfer_techs,vintage,link_types,"perLengthBuild")
8131          * accounting_annuityFactor_transferDistance(indicator,linksModel,transfer_techs,vintage,link_types) )
8132   
8133      + sum ((linksModel,transfer_techs(techs),vintage)
8134                  $(transfer_usedTech(linksModel,yearsToCalc,transfer_techs,vintage)
8135                      and linksModelToCalc(linksModel)
8136                      and transfer_incidenceModel(nodesModelToCalc,linksModel) <> 0 ),
8137          0.5
8138          * transfer_linksDecom.l(linksModel,yearsToCalc,transfer_techs,vintage)
8139          * accounting_transferLinks(indicator,linksModel,transfer_techs,vintage,"perLinkDecom")
8140   
8141          + 0.5
8142          * transfer_linksTotal.l(linksModel,yearsToCalc,transfer_techs,vintage)
8143          * accounting_transferLinks(indicator,linksModel,transfer_techs,vintage,"perLinkTotal")
8144   
8145          + 0.5
8146          * sum (link_types,
8147              transfer_linksDecom.l(linksModel,yearsToCalc,transfer_techs,vintage)
8148              * transfer_lengthParam(linksModel,link_types,"length")
8149              * accounting_transferPerLength(indicator,linksModel,transfer_techs,vintage,link_types,"perLengthDecom")
8150   
8151              + transfer_linksTotal.l(linksModel,yearsToCalc,transfer_techs,vintage)
8152              * transfer_lengthParam(linksModel,link_types,"length")
8153              * accounting_transferPerLength(indicator,linksModel,transfer_techs,vintage,link_types,"perLengthTotal"))
8154   
8155          + 0.5
8156          * sum (timeModelToCalc,
8157              transfer_flowAlong.l(timeModelToCalc,linksModel,yearsToCalc,transfer_techs,vintage)
8158              * timeLength(timeModelToCalc)
8159              * ( accounting_transferLinks(indicator,linksModel,transfer_techs,vintage,"perFlow")
8160                  + accounting_transferLinks(indicator,linksModel,transfer_techs,vintage,"perFlowAlong"))
8161   
8162              + transfer_flowAgainst.l(timeModelToCalc,linksModel,yearsToCalc,transfer_techs,vintage)
8163              * timeLength(timeModelToCalc)
8164              * ( accounting_transferLinks(indicator,linksModel,transfer_techs,vintage,"perFlow")
8165                  + accounting_transferLinks(indicator,linksModel,transfer_techs,vintage,"perFlowAgainst")))
8166   
8167          + 0.5
8168          * sum ((timeModelToCalc, link_types),
8169              transfer_flowAlong.l(timeModelToCalc,linksModel,yearsToCalc,transfer_techs,vintage)
8170              * timeLength(timeModelToCalc)
8171              * transfer_lengthParam(linksModel,link_types,"length")
8172              * (accounting_transferPerLength(indicator,linksModel,transfer_techs,vintage,link_types,"perFlow")
8173                  + accounting_transferPerLength(indicator,linksModel,transfer_techs,vintage,link_types,"perFlowAlong"))
8174   
8175              + transfer_flowAgainst.l(timeModelToCalc,linksModel,yearsToCalc,transfer_techs,vintage)
8176              * timeLength(timeModelToCalc)
8177              * transfer_lengthParam(linksModel,link_types,"length")
8178              * (accounting_transferPerLength(indicator,linksModel,transfer_techs,vintage,link_types,"perFlow")
8179                  + accounting_transferPerLength(indicator,linksModel,transfer_techs,vintage,link_types,"perFlowAgainst"))))
8180   
8181   
8182  * == sources / sinks ==
8183      + sum ((timeModelToCalc,sourcesink_techs(techs),commodity)
8184              $sourcesink_enabled(nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity),
8185          sourcesink_flow.l(timeModelToCalc,nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity)
8186          * timeLength(timeModelToCalc)
8187          * accounting_sourcesinkFlow(indicator,nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity,"perFlow"))
8188      ;
8189   
8190   
8191  * ==== full set of main indicators ====
8192   
8193  indicator_accounting(accNodesModel,accYears,indicator)
8194      $sum((accNodesModel_a,accYears_a,indicator_a)
8195              $compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a), 1)
8196      =
8197      + sum((accNodesModel_a,accYears_a,indicator_a)
8198              $(compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
8199                  and variableIndicators(accNodesModel_a,accYears_a,indicator_a)),
8200          compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
8201          * accounting_indicator.l(accNodesModel_a,accYears_a,indicator_a))
8202   
8203      + sum((accNodesModel_a,accYears_a,indicator_a)
8204              $(compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)),
8205          compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
8206          * (sum((nodesModelToCalc,yearsToCalc,techs)
8207                  $(sameas(accNodesModel_a, nodesModelToCalc)
8208                      and sameas(accYears_a, yearsToCalc)),
8209                  indicator_accounting_detailed(indicator_a,nodesModelToCalc,yearsToCalc,techs))))
8210      ;
8211   
8212  indicator_accounting_comp(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
8213      $compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
8214      =
8215          compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
8216          * accounting_indicator.l(accNodesModel_a,accYears_a,indicator_a)
8217              $variableIndicators(accNodesModel_a,accYears_a,indicator_a)
8218   
8219          + compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
8220          * (sum((nodesModelToCalc,yearsToCalc,techs)
8221                  $(sameas(accNodesModel_a, nodesModelToCalc)
8222                      and sameas(accYears_a, yearsToCalc)),
8223                  indicator_accounting_detailed(indicator_a,nodesModelToCalc,yearsToCalc,techs)))
8224      ;
8225   
8226  indicator_accounting_ref(accNodesModel,accYears,indicator)
8227      $accounting_indicator.l(accNodesModel,accYears,indicator)
8228      = accounting_indicator.l(accNodesModel,accYears,indicator);
8229   
8230  * ==== link-specific indicator accounting ====
8231   
8232  indicator_accounting_links(indicator,nodesModelToCalc,nodesModelToCalc_a,linksModelToCalc,yearsToCalc,techs)
8233      $(transfer_incidenceModel(nodesModelToCalc,linksModelToCalc) < 0
8234          and transfer_incidenceModel(nodesModelToCalc_a,linksModelToCalc) > 0)
8235      =
8236      sum ((transfer_techs(techs),vintage)
8237                  $(transfer_availTech(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
8238                      and accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"useAnnuity") = 0),
8239          transfer_linksBuild.l(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
8240          * accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"perLinkBuild") )
8241   
8242      + sum ((years_a,transfer_techs(techs),vintage)
8243                  $(transfer_availTech(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
8244                      and accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"useAnnuity") = 1
8245                      and years_a.val + accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"amorTime") > yearsToCalc.val
8246                      and years_a.val <= yearsToCalc.val ),
8247          transfer_linksBuild.l(linksModelToCalc,years_a,transfer_techs,vintage)
8248          * accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"perLinkBuild")
8249          * accounting_annuityFactor_transferLink(indicator,linksModelToCalc,transfer_techs,vintage) )
8250   
8251      + sum ((transfer_techs(techs),vintage,link_types)
8252                  $(transfer_availTech(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
8253                      and accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"useAnnuity") = 0 ),
8254          transfer_linksBuild.l(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
8255          * transfer_lengthParam(linksModelToCalc,link_types,"length")
8256          * accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"perLengthBuild") )
8257   
8258      + sum ((years_a,transfer_techs(techs),vintage,link_types)
8259                  $(transfer_availTech(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
8260                      and accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"useAnnuity") = 1
8261                      and years_a.val + accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"amorTime") > yearsToCalc.val
8262                      and years_a.val <= yearsToCalc.val ),
8263          transfer_linksBuild.l(linksModelToCalc,years_a,transfer_techs,vintage)
8264          * transfer_lengthParam(linksModelToCalc,link_types,"length")
8265          * accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"perLengthBuild")
8266          * accounting_annuityFactor_transferDistance(indicator,linksModelToCalc,transfer_techs,vintage,link_types) )
8267   
8268      + sum ((transfer_techs(techs),vintage)
8269                  $(transfer_usedTech(linksModelToCalc,yearsToCalc,transfer_techs,vintage)),
8270          transfer_linksDecom.l(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
8271          * accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"perLinkDecom")
8272   
8273          + transfer_linksTotal.l(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
8274          * accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"perLinkTotal")
8275   
8276          + sum (link_types,
8277              transfer_linksDecom.l(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
8278              * transfer_lengthParam(linksModelToCalc,link_types,"length")
8279              * accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"perLengthDecom")
8280   
8281              + transfer_linksTotal.l(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
8282              * transfer_lengthParam(linksModelToCalc,link_types,"length")
8283              * accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"perLengthTotal"))
8284   
8285          + sum (timeModelToCalc,
8286              transfer_flowAlong.l(timeModelToCalc,linksModelToCalc,yearsToCalc,transfer_techs,vintage)
8287              * timeLength(timeModelToCalc)
8288              * ( accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"perFlow")
8289                  + accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"perFlowAlong"))
8290   
8291              + transfer_flowAgainst.l(timeModelToCalc,linksModelToCalc,yearsToCalc,transfer_techs,vintage)
8292              * timeLength(timeModelToCalc)
8293              * ( accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"perFlow")
8294                  + accounting_transferLinks(indicator,linksModelToCalc,transfer_techs,vintage,"perFlowAgainst")))
8295   
8296          + sum ((timeModelToCalc, link_types),
8297              transfer_flowAlong.l(timeModelToCalc,linksModelToCalc,yearsToCalc,transfer_techs,vintage)
8298              * timeLength(timeModelToCalc)
8299              * transfer_lengthParam(linksModelToCalc,link_types,"length")
8300              * (accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"perFlow")
8301                  + accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"perFlowAlong"))
8302   
8303              + transfer_flowAgainst.l(timeModelToCalc,linksModelToCalc,yearsToCalc,transfer_techs,vintage)
8304              * timeLength(timeModelToCalc)
8305              * transfer_lengthParam(linksModelToCalc,link_types,"length")
8306              * (accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"perFlow")
8307                  + accounting_transferPerLength(indicator,linksModelToCalc,transfer_techs,vintage,link_types,"perFlowAgainst")))
8308      );
8309   
8310   
8311  * == converter capacities ==
8312   
8313  converter_ratedInput(converter_techs,vintage,commodity)
8314      $(converter_techParam(converter_techs,vintage,"lifeTime") > 0)
8315      = smin(activity$converter_usedAct(converter_techs,vintage,activity),
8316              converter_coefficient(converter_techs,vintage,activity,commodity,"coefficient"));
8317  converter_ratedInput(converter_techs,vintage,commodity)
8318      $(converter_ratedInput(converter_techs,vintage,commodity) > 0)
8319      = 0;
8320   
8321  converter_ratedOutput(converter_techs,vintage,commodity)
8322      $(converter_techParam(converter_techs,vintage,"lifeTime") > 0)
8323      = smax(activity$converter_usedAct(converter_techs,vintage,activity),
8324              converter_coefficient(converter_techs,vintage,activity,commodity,"coefficient"));
8325  converter_ratedOutput(converter_techs,vintage,commodity)
8326      $(converter_ratedOutput(converter_techs,vintage,commodity) < 0)
8327      = 0;
8328   
8329  converter_ratedOutput_min(nodesModelToCalc,years,converter_techs(techs),commodity)
8330      $sum(vintage$(converter_usedTech(nodesModelToCalc,years,converter_techs,vintage)
8331          and converter_ratedOutput(converter_techs,vintage,commodity)), 1)
8332      = smin(vintage$(converter_usedTech(nodesModelToCalc,years,converter_techs,vintage)
8333              and converter_ratedOutput(converter_techs,vintage,commodity)),
8334          converter_ratedOutput(converter_techs,vintage,commodity));
8335   
8336  converter_ratedOutput_max(nodesModelToCalc,years,converter_techs(techs),commodity)
8337      $sum(vintage$(converter_usedTech(nodesModelToCalc,years,converter_techs,vintage)
8338          and converter_ratedOutput(converter_techs,vintage,commodity)), 1)
8339      = smax(vintage$(converter_usedTech(nodesModelToCalc,years,converter_techs,vintage)
8340              and converter_ratedOutput(converter_techs,vintage,commodity)),
8341          converter_ratedOutput(converter_techs,vintage,commodity));
8342   
8343  converter_units_ext(map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,years),converter_techs(techs),vintage,"build")
8344      = converter_unitsBuild.l(nodesModelToCalc,years,converter_techs,vintage);
8345   
8346  converter_units_ext(map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,years),converter_techs(techs),vintage,"decom")
8347      = converter_unitsDecom.l(nodesModelToCalc,years,converter_techs,vintage);
8348   
8349  converter_units_ext(map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,years),converter_techs(techs),vintage,"total")
8350      = converter_unitsTotal.l(nodesModelToCalc,years,converter_techs,vintage);
8351   
8352  converter_caps_ext(map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,years),converter_techs(techs),vintage,commodity,capType)
8353      $(converter_ratedOutput(converter_techs,vintage,commodity))
8354      = converter_units_ext(accNodesModel,nodesModelToCalc,accYears,years,techs,vintage,capType)
8355          * converter_ratedOutput(converter_techs,vintage,commodity);
8356   
8357  converter_caps_ext(map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,years),converter_techs(techs),vintage,commodity,"lowerLimit")
8358      $(converter_usedTech(nodesModelToCalc,years,converter_techs,vintage)
8359          and converter_capacityParam(nodesModelToCalc,years,converter_techs,"unitsLowerLimit") > 0
8360          and converter_ratedOutput_min(nodesModelToCalc,years,converter_techs,commodity))
8361      = converter_capacityParam(nodesModelToCalc,years,converter_techs,"unitsLowerLimit")
8362          * converter_ratedOutput_min(nodesModelToCalc,years,converter_techs,commodity);
8363   
8364  converter_caps_ext(map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,years),converter_techs(techs),vintage,commodity,"upperLimit")
8365      $(converter_usedTech(nodesModelToCalc,years,converter_techs,vintage)
8366          and converter_capacityParam(nodesModelToCalc,years,converter_techs,"unitsUpperLimit") < inf
8367          and converter_ratedOutput_min(nodesModelToCalc,years,converter_techs,commodity))
8368      = converter_capacityParam(nodesModelToCalc,years,converter_techs,"unitsUpperLimit")
8369          * converter_ratedOutput_max(nodesModelToCalc,years,converter_techs,commodity);
8370   
8371  converter_caps(accNodesModel,accYears,converter_techs(techs),commodity,capType)
8372      = sum((nodesModelToCalc,years,vintage)
8373              $(map_accNodesPostCalc(accNodesModel,nodesModelToCalc)
8374                  and map_accYearsPostCalc(accYears,years)),
8375          converter_caps_ext(accNodesModel,nodesModelToCalc,accYears,years,converter_techs,vintage,commodity,capType));
8376  option clear = converter_caps_ext;
8377   
8378  converter_units(accNodesModel,accYears,converter_techs(techs),vintage,capType)
8379      = sum((nodesModelToCalc,years)
8380              $(map_accNodesPostCalc(accNodesModel,nodesModelToCalc)
8381                  and map_accYearsPostCalc(accYears,years)),
8382          converter_units_ext(accNodesModel,nodesModelToCalc,accYears,years,converter_techs,vintage,capType));
8383  option clear = converter_units_ext;
8384   
8385   
8386  * ==== transfer capacities ====
8387   
8388  max_transfer_coefficient(transfer_techs(techs),commodity)
8389          $(smax(vintage, transfer_coefficient(transfer_techs,vintage,commodity,"coefficient")) > 0)
8390          = smax(vintage, transfer_coefficient(transfer_techs,vintage,commodity,"coefficient"));
8391   
8392  min_transfer_coefficient(transfer_techs(techs),commodity)
8393          $(smin(vintage, transfer_coefficient(transfer_techs,vintage,commodity,"coefficient")) > 0)
8394          = smin(vintage, transfer_coefficient(transfer_techs,vintage,commodity,"coefficient"));
8395   
8396   
8397  transfer_links(linksModel,years,transfer_techs,vintage,"build")
8398      = transfer_linksBuild.l(linksModel,years,transfer_techs,vintage);
8399   
8400  transfer_links(linksModel,years,transfer_techs,vintage,"decom")
8401      = transfer_linksDecom.l(linksModel,years,transfer_techs,vintage);
8402   
8403  transfer_links(linksModel,years,transfer_techs,vintage,"total")
8404      = transfer_linksTotal.l(linksModel,years,transfer_techs,vintage);
8405   
8406  transfer_caps(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,years,transfer_techs(techs),commodity,capType)
8407      $(transfer_incidenceModel(nodesModelToCalc_start,linksModel) < 0
8408          and transfer_incidenceModel(nodesModelToCalc_end,linksModel) > 0)
8409      = sum(vintage,
8410          transfer_links(linksModel,years,transfer_techs,vintage,capType)
8411          * transfer_coefficient(transfer_techs,vintage,commodity,"coefficient"));
8412   
8413  transfer_caps(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,years,transfer_techs(techs),commodity,"lowerLimit")
8414      $(transfer_linksParam(linksModel,years,transfer_techs,'linksLowerLimit') > 0
8415          and transfer_incidenceModel(nodesModelToCalc_start,linksModel) < 0
8416          and transfer_incidenceModel(nodesModelToCalc_end,linksModel) > 0
8417          and sum(vintage$(transfer_usedTech(linksModel,years,transfer_techs,vintage)
8418                              and transfer_coefficient(transfer_techs,vintage,commodity,"coefficient")), 1))
8419      = transfer_linksParam(linksModel,years,transfer_techs,'linksLowerLimit')
8420          * min_transfer_coefficient(transfer_techs,commodity);
8421   
8422  transfer_caps(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,years,transfer_techs(techs),commodity,"upperLimit")
8423      $(transfer_linksParam(linksModel,years,transfer_techs,'linksUpperLimit') < inf
8424          and transfer_incidenceModel(nodesModelToCalc_start,linksModel) < 0
8425          and transfer_incidenceModel(nodesModelToCalc_end,linksModel) > 0
8426          and sum(vintage$(transfer_usedTech(linksModel,years,transfer_techs,vintage)
8427                              and transfer_coefficient(transfer_techs,vintage,commodity,"coefficient")), 1))
8428      = transfer_linksParam(linksModel,years,transfer_techs,'linksUpperLimit')
8429          * max_transfer_coefficient(transfer_techs,commodity);
8430   
8431   
8432  * ==== transfer flows ====
8433   
8434  transfer_flows(timeModelToCalc,nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs(techs),commodity)
8435      $(transfer_incidenceModel(nodesModelToCalc_start,linksModel) < 0
8436          and transfer_incidenceModel(nodesModelToCalc_end,linksModel) > 0)
8437      = sum(vintage,
8438          ( transfer_flowAlong.l(timeModelToCalc,linksModel,yearsToCalc,transfer_techs,vintage)
8439              - transfer_flowAgainst.l(timeModelToCalc,linksModel,yearsToCalc,transfer_techs,vintage) )
8440          * timeLength(timeModelToCalc)
8441          * transfer_coefficient(transfer_techs,vintage,commodity,"coefficient"));
8442   
8443  transfer_flows_annual(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs(techs),commodity,"netto")
8444      = sum(timeModelToCalc,
8445          transfer_flows(timeModelToCalc,nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs,commodity));
8446   
8447  transfer_flows_annual(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs(techs),commodity,"positive")
8448      = sum(timeModelToCalc
8449              $(transfer_flows(timeModelToCalc,nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs,commodity) > 0),
8450          transfer_flows(timeModelToCalc,nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs,commodity));
8451   
8452  transfer_flows_annual(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs(techs),commodity,"negative")
8453      = sum(timeModelToCalc
8454              $(transfer_flows(timeModelToCalc,nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs,commodity) < 0),
8455          transfer_flows(timeModelToCalc,nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs,commodity));
8456   
8457  transfer_flows_annual(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs(techs),commodity,"brutto")
8458      = transfer_flows_annual(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs,commodity,"positive")
8459          - transfer_flows_annual(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs,commodity,"negative");
8460   
8461  transfer_flows_annual(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs(techs),commodity,"flh")
8462      $(transfer_flows_annual(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs,commodity,"brutto") > 0
8463          and transfer_caps(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs,commodity,"total") > 0)
8464      = transfer_flows_annual(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs,commodity,"brutto")
8465          / transfer_caps(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs,commodity,"total");
8466   
8467  transfer_losses(timeModelToCalc,nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs(techs),commodity)
8468      $(transfer_incidenceModel(nodesModelToCalc_start,linksModel) < 0
8469          and transfer_incidenceModel(nodesModelToCalc_end,linksModel) > 0)
8470      = -1 * abs(sum(vintage,
8471          ( transfer_flowAlong.l(timeModelToCalc,linksModel,yearsToCalc,transfer_techs,vintage)
8472              - transfer_flowAgainst.l(timeModelToCalc,linksModel,yearsToCalc,transfer_techs,vintage) )
8473          * ( transfer_coefPerFlow(transfer_techs,vintage,commodity,"coefPerFlow")
8474              + sum(link_types,
8475                  transfer_coefPerLength(transfer_techs,vintage,commodity,link_types,"coefPerLength")
8476                  * transfer_lengthParam(linksModel,link_types,"length")))))
8477          * timeLength(timeModelToCalc);
8478   
8479  transfer_losses_annual(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs(techs),commodity,"netto")
8480      = sum(timeModelToCalc,
8481          transfer_losses(timeModelToCalc,nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs,commodity));
8482   
8483   
8484  * ==== storage capacities ====
8485   
8486  storage_size_max(nodesModelToCalc,years,storage_techs(techs),commodity)
8487      $sum(vintage$(storage_usedTech(nodesModelToCalc,years,storage_techs,vintage)
8488              and storage_usedCom(storage_techs,vintage,commodity)
8489              and storage_sizeParam(storage_techs,vintage,commodity,"size")), 1)
8490      = smax(vintage$(storage_usedTech(nodesModelToCalc,years,storage_techs,vintage)
8491              and storage_usedCom(storage_techs,vintage,commodity)
8492              and storage_sizeParam(storage_techs,vintage,commodity,"size")),
8493          storage_sizeParam(storage_techs,vintage,commodity,"size"));
8494   
8495  storage_size_min(nodesModelToCalc,years,storage_techs(techs),commodity)
8496      $sum(vintage$(storage_usedTech(nodesModelToCalc,years,storage_techs,vintage)
8497              and storage_usedCom(storage_techs,vintage,commodity)
8498              and storage_sizeParam(storage_techs,vintage,commodity,"size")), 1)
8499      = smin(vintage$(storage_usedTech(nodesModelToCalc,years,storage_techs,vintage)
8500              and storage_usedCom(storage_techs,vintage,commodity)
8501              and storage_sizeParam(storage_techs,vintage,commodity,"size")),
8502          storage_sizeParam(storage_techs,vintage,commodity,"size"));
8503   
8504  storage_units_ext(map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,years),storage_techs(techs),vintage,"build")
8505      $storage_usedTech(nodesModelToCalc,years,storage_techs,vintage)
8506      = storage_unitsBuild.l(nodesModelToCalc,years,storage_techs,vintage);
8507   
8508  storage_units_ext(map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,years),storage_techs(techs),vintage,"decom")
8509      $storage_usedTech(nodesModelToCalc,years,storage_techs,vintage)
8510      = storage_unitsDecom.l(nodesModelToCalc,years,storage_techs,vintage);
8511   
8512  storage_units_ext(map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,years),storage_techs(techs),vintage,"total")
8513      $storage_usedTech(nodesModelToCalc,years,storage_techs,vintage)
8514      = storage_unitsTotal.l(nodesModelToCalc,years,storage_techs,vintage);
8515   
8516  storage_caps_ext(map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,years),storage_techs(techs),vintage,commodity,capType)
8517      $storage_sizeParam(storage_techs,vintage,commodity,"size")
8518      = storage_units_ext(accNodesModel,nodesModelToCalc,accYears,years,storage_techs,vintage,capType)
8519          * storage_sizeParam(storage_techs,vintage,commodity,"size");
8520   
8521  storage_caps_ext(map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,years),storage_techs(techs),vintage,commodity,"lowerLimit")
8522      $(storage_usedTech(nodesModelToCalc,years,storage_techs,vintage)
8523          and storage_reservoirParam(nodesModelToCalc,years,storage_techs,"unitsLowerLimit") > 0
8524          and storage_size_min(nodesModelToCalc,years,storage_techs,commodity))
8525      = storage_reservoirParam(nodesModelToCalc,years,storage_techs,"unitsLowerLimit")
8526          * storage_size_min(nodesModelToCalc,years,storage_techs,commodity);
8527   
8528  storage_caps_ext(map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,years),storage_techs(techs),vintage,commodity,"upperLimit")
8529      $(storage_usedTech(nodesModelToCalc,years,storage_techs,vintage)
8530          and storage_reservoirParam(nodesModelToCalc,years,storage_techs,"unitsUpperLimit") < inf
8531          and storage_size_max(nodesModelToCalc,years,storage_techs,commodity))
8532      = storage_reservoirParam(nodesModelToCalc,years,storage_techs,"unitsUpperLimit")
8533          * storage_size_max(nodesModelToCalc,years,storage_techs,commodity);
8534   
8535  storage_caps_ext(map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,years),storage_techs(techs),vintage,commodity,"total_degraded")
8536      $(storage_usedCom(storage_techs,vintage,commodity)
8537          and (storage_techParam(storage_techs,vintage,"annualDegradation") > 0
8538               or storage_techParam(storage_techs,vintage,"usageDegradation")))
8539      = sum((degradation_states,yearsCom), (storage_degradationParam(storage_techs,vintage,degradation_states,"remainingCapacity")
8540                                      - (years.val - yearsCom.val) * storage_techParam(storage_techs,vintage,"annualDegradation"))
8541                                      * storage_unitsStateTracker.l(nodesModelToCalc,years,yearsCom,storage_techs,vintage,degradation_states)
8542                                      * storage_sizeParam(storage_techs,vintage,commodity,"size"));
8543   
8544  storage_caps(accNodesModel,accYears,storage_techs(techs),commodity,capType)
8545      = sum((nodesModelToCalc,years,vintage)
8546              $(map_accNodesPostCalc(accNodesModel,nodesModelToCalc)
8547                  and map_accYearsPostCalc(accYears,years)),
8548          storage_caps_ext(accNodesModel,nodesModelToCalc,accYears,years,storage_techs,vintage,commodity,capType));
8549  option clear = storage_caps_ext;
8550   
8551  storage_units(accNodesModel,accYears,storage_techs(techs),vintage,capType)
8552      = sum((nodesModelToCalc,years)
8553              $(map_accNodesPostCalc(accNodesModel,nodesModelToCalc)
8554                  and map_accYearsPostCalc(accYears,years)),
8555          storage_units_ext(accNodesModel,nodesModelToCalc,accYears,years,storage_techs,vintage,capType));
8556  option clear = storage_units_ext;
8557   
8558   
8559  * ==== storage levels and flows ====
8560   
8561  storage_flows_ext(timeModelToCalc,map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,yearsToCalc),storage_techs(techs),vintage,commodity)
8562      $(storage_usedTech(nodesModelToCalc,yearsToCalc,storage_techs,vintage) and balance_techComm(storage_techs,commodity))
8563      = storage_level.l(timeModelToCalc,nodesModelToCalc,yearsToCalc,storage_techs,vintage,commodity)
8564          - storage_level.l(timeModelToCalc--1,nodesModelToCalc,yearsToCalc,storage_techs,vintage,commodity)
8566      + storage_losses.l(timeModelToCalc,nodesModelToCalc,yearsToCalc,storage_techs,vintage,commodity)
8567          * timeLength(timeModelToCalc)
8569      ;
8570   
8571  storage_flows(timeModelToCalc,accNodesModel,accYears,storage_techs(techs),commodity)
8572      = sum((nodesModelToCalc,yearsToCalc,vintage)
8573              $(storage_usedTech(nodesModelToCalc,yearsToCalc,storage_techs,vintage) and balance_techComm(storage_techs,commodity)),
8574          storage_flows_ext(timeModelToCalc,accNodesModel,nodesModelToCalc,accYears,yearsToCalc,storage_techs,vintage,commodity));
8575  option clear = storage_flows_ext;
8576   
8577  storage_level_out_ext(timeModelToCalc,map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,yearsToCalc),storage_techs(techs),vintage,commodity)
8578      $(storage_usedTech(nodesModelToCalc,yearsToCalc,storage_techs,vintage) and balance_techComm(storage_techs,commodity))
8579      = storage_level.l(timeModelToCalc,nodesModelToCalc,yearsToCalc,storage_techs,vintage,commodity);
8580   
8581  storage_level_out(timeModelToCalc,accNodesModel,accYears,storage_techs(techs),commodity)
8582      = sum((nodesModelToCalc,yearsToCalc,vintage)
8583              $(storage_usedTech(nodesModelToCalc,yearsToCalc,storage_techs,vintage) and balance_techComm(storage_techs,commodity)),
8584          storage_level_out_ext(timeModelToCalc,accNodesModel,nodesModelToCalc,accYears,yearsToCalc,storage_techs,vintage,commodity));
8585  option clear = storage_level_out_ext;
8586   
8587  storage_flows_annual(accNodesModel,accYears,storage_techs(techs),commodity,"netto")
8588      = sum(timeModelToCalc,
8589          storage_flows(timeModelToCalc,accNodesModel,accYears,storage_techs,commodity));
8590   
8591  storage_flows_annual(accNodesModel,accYears,storage_techs(techs),commodity,"positive")
8592      = sum(timeModelToCalc
8593              $(storage_flows(timeModelToCalc,accNodesModel,accYears,storage_techs,commodity) > 0),
8594          storage_flows(timeModelToCalc,accNodesModel,accYears,storage_techs,commodity));
8595   
8596  storage_flows_annual(accNodesModel,accYears,storage_techs(techs),commodity,"negative")
8597      = sum(timeModelToCalc
8598              $(storage_flows(timeModelToCalc,accNodesModel,accYears,storage_techs,commodity) < 0),
8599          storage_flows(timeModelToCalc,accNodesModel,accYears,storage_techs,commodity));
8600   
8601  storage_flows_annual(accNodesModel,accYears,storage_techs(techs),commodity,"brutto")
8602      = storage_flows_annual(accNodesModel,accYears,storage_techs,commodity,"positive")
8603          + storage_flows_annual(accNodesModel,accYears,storage_techs,commodity,"negative");
8604   
8605  storage_flows_annual(accNodesModel,accYears,storage_techs(techs),commodity,"flh")
8606      $(storage_flows_annual(accNodesModel,accYears,storage_techs,commodity,"brutto") > 0
8607          and storage_caps(accNodesModel,accYears,storage_techs,commodity,"total") > 0)
8608      = storage_flows_annual(accNodesModel,accYears,storage_techs,commodity,"brutto")
8609          / storage_caps(accNodesModel,accYears,storage_techs,commodity,"total");
8610   
8611  storage_losses_out(timeModelToCalc,accNodesModel,accYears,storage_techs(techs),commodity)
8612      = sum((nodesModelToCalc,yearsToCalc,vintage)
8613              $(storage_losses.l(timeModelToCalc,nodesModelToCalc,yearsToCalc,storage_techs,vintage,commodity)
8614                  and map_accNodesPostCalc(accNodesModel,nodesModelToCalc)
8615                  and map_accYearsPostCalc(accYears,yearsToCalc)),
8616          storage_losses.l(timeModelToCalc,nodesModelToCalc,yearsToCalc,storage_techs,vintage,commodity)
8617          * timeLength(timeModelToCalc));
8618   
8619  storage_losses_annual(accNodesModel,accYears,storage_techs(techs),commodity,"netto")
8620      = sum(timeModelToCalc,
8621          storage_losses_out(timeModelToCalc,accNodesModel,accYears,storage_techs,commodity));
8622   
8623   
8624  * == commodity balance ==
8625   
8626  commodity_balance_ext(timeModelToCalc,map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,yearsToCalc),converter_techs(techs),vintage,commodity)
8627      $(converter_usedTech(nodesModelToCalc,yearsToCalc,converter_techs,vintage)
8628          and balance_usedConverter(nodesModelToCalc,yearsToCalc,commodity))
8629      = sum((activity)
8630              $(converter_coefficientProfile(timeModelToCalc,nodesModelToCalc,yearsToCalc,converter_techs,vintage,activity,commodity)),
8631          converter_activity.l(timeModelToCalc,nodesModelToCalc,yearsToCalc,converter_techs,vintage,activity)
8632              * timeLength(timeModelToCalc)
8633              * converter_coefficientProfile(timeModelToCalc,nodesModelToCalc,yearsToCalc,converter_techs,vintage,activity,commodity)
8634          + converter_unitsUsingActivity_MIP.l(timeModelToCalc,nodesModelToCalc,yearsToCalc,converter_techs,vintage,activity)
8635              * timeLength(timeModelToCalc)
8636              * converter_coefficient(converter_techs,vintage,activity,commodity,"constant"));
8637   
8638  commodity_balance_ext(timeModelToCalc,map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,yearsToCalc),storage_techs(techs),vintage,commodity)
8639      $(storage_usedTech(nodesModelToCalc,yearsToCalc,storage_techs,vintage)
8640          and storage_sizeParam(storage_techs,vintage,commodity,"size"))
8641      = commodity_balance_ext(timeModelToCalc,accNodesModel,nodesModelToCalc,accYears,yearsToCalc,storage_techs,vintage,commodity)
8642      + storage_level.l(timeModelToCalc--1,nodesModelToCalc,yearsToCalc,storage_techs,vintage,commodity)
8643          - storage_level.l(timeModelToCalc,nodesModelToCalc,yearsToCalc,storage_techs,vintage,commodity)
8644      - storage_losses.l(timeModelToCalc,nodesModelToCalc,yearsToCalc,storage_techs,vintage,commodity)
8645      * timeLength(timeModelToCalc);
8646   
8647  commodity_balance_ext(timeModelToCalc,map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,yearsToCalc),sourcesink_techs(techs),vintage,commodity)
8648      $(sourcesink_enabled(nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity)
8649          and sameas(yearsToCalc,vintage))
8650      = commodity_balance_ext(timeModelToCalc,accNodesModel,nodesModelToCalc,accYears,yearsToCalc,sourcesink_techs,vintage,commodity)
8651      + sourcesink_flow.l(timeModelToCalc,nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity)
8652      * timeLength(timeModelToCalc);
8653   
8654  commodity_balance_ext(timeModelToCalc,map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,yearsToCalc),transfer_techs(techs),vintage,commodity)
8655      $sum((linksModel)
8656          $(transfer_incidenceModel(nodesModelToCalc,linksModel)
8657                  and transfer_usedTech(linksModel,yearsToCalc,transfer_techs,vintage)
8658                  and transfer_coefficient(transfer_techs,vintage,commodity,"coefficient")), 1)
8659      = commodity_balance_ext(timeModelToCalc,accNodesModel,nodesModelToCalc,accYears,yearsToCalc,transfer_techs,vintage,commodity)
8660      + sum((linksModel)
8661              $(transfer_incidenceModel(nodesModelToCalc,linksModel)
8662                  and transfer_usedTech(linksModel,yearsToCalc,transfer_techs,vintage)
8663                  and transfer_coefficient(transfer_techs,vintage,commodity,"coefficient")),
8664   
8665              (transfer_flowAlong.l(timeModelToCalc,linksModel,yearsToCalc,transfer_techs,vintage)
8666                      $(transfer_incidenceModel(nodesModelToCalc,linksModel) > 0)
8667                + transfer_flowAgainst.l(timeModelToCalc,linksModel,yearsToCalc,transfer_techs,vintage)
8668                      $(transfer_incidenceModel(nodesModelToCalc,linksModel) < 0))
8669              * timeLength(timeModelToCalc)
8670              * transfer_coefficient(transfer_techs,vintage,commodity,"coefficient")
8671   
8672              - (transfer_flowAlong.l(timeModelToCalc,linksModel,yearsToCalc,transfer_techs,vintage)
8673                      $(transfer_incidenceModel(nodesModelToCalc,linksModel) < 0)
8674                + transfer_flowAgainst.l(timeModelToCalc,linksModel,yearsToCalc,transfer_techs,vintage)
8675                      $(transfer_incidenceModel(nodesModelToCalc,linksModel) > 0))
8676              * timeLength(timeModelToCalc)
8677              * transfer_coefficient(transfer_techs,vintage,commodity,"coefficient")
8678   
8679              + 0.5 * ((transfer_flowAlong.l(timeModelToCalc,linksModel,yearsToCalc,transfer_techs,vintage)
8680                          $(transfer_incidenceModel(nodesModelToCalc,linksModel) <> 0)
8681                      + transfer_flowAgainst.l(timeModelToCalc,linksModel,yearsToCalc,transfer_techs,vintage)
8682                          $(transfer_incidenceModel(nodesModelToCalc,linksModel) <> 0))
8683                      * timeLength(timeModelToCalc)
8684                      * ( transfer_coefPerFlow(transfer_techs,vintage,commodity,"coefPerFlow")
8685                          + sum(link_types,
8686                              transfer_coefPerLength(transfer_techs,vintage,commodity,link_types,"coefPerLength")
8687                              * transfer_lengthParam(linksModel,link_types,"length")))))
8688      ;
8689   
8690  commodity_balance(timeModelToCalc,accNodesModel,accYears,balance_techComm(techs,commodity))
8691      = sum((nodesModelToCalc,yearsToCalc,vintage)
8692              $(commodity_balance_ext(timeModelToCalc,accNodesModel,nodesModelToCalc,accYears,yearsToCalc,techs,vintage,commodity)
8693                  and map_accNodesPostCalc(accNodesModel,nodesModelToCalc)
8694                  and map_accYearsPostCalc(accYears,yearsToCalc)),
8695          commodity_balance_ext(timeModelToCalc,accNodesModel,nodesModelToCalc,accYears,yearsToCalc,techs,vintage,commodity));
8696  option clear = commodity_balance_ext;
8697   
8698   
8699  * ==== annual commodity sums ====
8700   
8701  commodity_balance_annual(accNodesModel,accYears,techs,commodity,"netto")
8702      = sum(timeModelToCalc,
8703          commodity_balance(timeModelToCalc,accNodesModel,accYears,techs,commodity));
8704   
8705  commodity_balance_annual(accNodesModel,accYears,techs,commodity,"positive")
8706      = sum(timeModelToCalc
8707              $(commodity_balance(timeModelToCalc,accNodesModel,accYears,techs,commodity) > 0),
8708          commodity_balance(timeModelToCalc,accNodesModel,accYears,techs,commodity));
8709   
8710  commodity_balance_annual(accNodesModel,accYears,techs,commodity,"negative")
8711      = sum(timeModelToCalc
8712              $(commodity_balance(timeModelToCalc,accNodesModel,accYears,techs,commodity) < 0),
8713          commodity_balance(timeModelToCalc,accNodesModel,accYears,techs,commodity));
8714   
8715  commodity_balance_annual(accNodesModel,accYears,techs,commodity,"brutto")
8716      = commodity_balance_annual(accNodesModel,accYears,techs,commodity,"positive")
8717          - commodity_balance_annual(accNodesModel,accYears,techs,commodity,"negative");
8718   
8719  commodity_balance_annual(accNodesModel,accYears,techs,commodity,"flh")
8720      $(commodity_balance_annual(accNodesModel,accYears,techs,commodity,"brutto") > 0
8721          and converter_caps(accNodesModel,accYears,techs,commodity,"total") > 0 )
8722      = commodity_balance_annual(accNodesModel,accYears,techs,commodity,"brutto")
8723          / converter_caps(accNodesModel,accYears,techs,commodity,"total");
8724   
8725   
8726  * ==== marginal information ====
8727   
8728  marginals_balance(timeModelToCalc,nodesModelToCalc,yearsToCalc,commodity)
8729    $balance_usedBalance(nodesModelToCalc,yearsToCalc,commodity)
8730    =
8731    Eq_balance_commodities.m(timeModelToCalc,nodesModelToCalc,yearsToCalc,commodity);
8732   
8733  marginals_sourcesink_profile(timeModelToCalc,nodesModelToCalc,yearsToCalc,sourcesink_techs(techs),commodity)
8734      $( sourcesink_flow.m(timeModelToCalc,nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity) <> 0 )
8735      =
8736      sourcesink_flow.m(timeModelToCalc,nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity);
8737   
8738  marginals_sourcesink_sum(nodesModelToCalc,yearsToCalc,sourcesink_techs(techs),commodity)
8739      $( ( Eq_sourcesink_useLowerSum.m(nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity)
8740          + Eq_sourcesink_useUpperSum.m(nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity)
8741          + Eq_sourcesink_useFixedSum.m(nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity) ) <> eps )
8742      =
8743      ( Eq_sourcesink_useLowerSum.m(nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity)
8744      + Eq_sourcesink_useUpperSum.m(nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity)
8745      + Eq_sourcesink_useFixedSum.m(nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity) );
8746   
8747  marginals_indicator_bounds(accNodesModel,accYears,indicator)
8748      $( accounting_indicator.m(accNodesModel,accYears,indicator) <> 0 )
8749      =
8750      accounting_indicator.m(accNodesModel,accYears,indicator);
8751   
8752   
8753  * ==== R2A postcalc information ====
8754   
8756   
8757   
8758  * ==== round profiles to reduce size of gdx ====
8759   
8761  commodity_balance(timeModelToCalc,accNodesModel,accYears,techs,commodity)
8762      $commodity_balance(timeModelToCalc,accNodesModel,accYears,techs,commodity)
8763      = round(commodity_balance(timeModelToCalc,accNodesModel,accYears,techs,commodity), 6);
8764   
8765  transfer_flows(timeModelToCalc,nodesModelToCalc,nodesModelToCalc_a,linksModel,yearsToCalc,transfer_techs,commodity)
8766      $transfer_flows(timeModelToCalc,nodesModelToCalc,nodesModelToCalc_a,linksModel,yearsToCalc,transfer_techs,commodity)
8767      = round(transfer_flows(timeModelToCalc,nodesModelToCalc,nodesModelToCalc_a,linksModel,yearsToCalc,transfer_techs,commodity), 6);
8768   
8769  transfer_losses(timeModelToCalc,nodesModelToCalc,nodesModelToCalc_a,linksModel,yearsToCalc,transfer_techs,commodity)
8770      $transfer_losses(timeModelToCalc,nodesModelToCalc,nodesModelToCalc_a,linksModel,yearsToCalc,transfer_techs,commodity)
8771      = round(transfer_losses(timeModelToCalc,nodesModelToCalc,nodesModelToCalc_a,linksModel,yearsToCalc,transfer_techs,commodity), 6);
8772   
8773  storage_flows(timeModelToCalc,accNodesModel,accYears,storage_techs,commodity)
8774      $storage_flows(timeModelToCalc,accNodesModel,accYears,storage_techs,commodity)
8775      = round(storage_flows(timeModelToCalc,accNodesModel,accYears,storage_techs,commodity), 6);
8776   
8777  storage_level_out(timeModelToCalc,accNodesModel,accYears,storage_techs,commodity)
8778      $storage_level_out(timeModelToCalc,accNodesModel,accYears,storage_techs,commodity)
8779      = round(storage_level_out(timeModelToCalc,accNodesModel,accYears,storage_techs,commodity), 6);
8780   
8781  marginals_balance(timeModelToCalc,nodesModelToCalc,yearsToCalc,commodity)
8782      $marginals_balance(timeModelToCalc,nodesModelToCalc,yearsToCalc,commodity)
8783      = round(marginals_balance(timeModelToCalc,nodesModelToCalc,yearsToCalc,commodity), 6);
8784   
8785  marginals_sourcesink_profile(timeModelToCalc,nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity)
8786      $marginals_sourcesink_profile(timeModelToCalc,nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity)
8787      = round(marginals_sourcesink_profile(timeModelToCalc,nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity), 6);
8789   
INCLUDE    C:\Local\REMix\framework\remix\framework\model\source\postcalc\writegdx.gms
8792  * SPDX-FileCopyrightText: Copyright (c) 2023 German Aerospace Center (DLR)
8793  * SPDX-License-Identifier: BSD-3-Clause
8794   
8797   
8798  execute_unload "C:\Local\REMix\remix_nz\output\nz_profile_11nodes_2020\result\nz_profile_11nodes_2020.gdx"
8799      metadata
8800      timeModel
8801      timeModelToCalc
8802      nodesModel
8803      linksModel
8804      indicator
8805      commodity
8806      techs
8807      accNodesModel
8808      accYears
8809   
8810      map_nodesModel
8811      map_linksModel
8812      map_nodesAccounting
8813   
8814      indicator_accounting
8815      indicator_accounting_ref
8816      indicator_accounting_comp
8817      indicator_accounting_detailed
8818      indicator_accounting_links
8819   
8820      converter_caps
8821      converter_units
8823   
8824      transfer_caps
8825      transfer_links
8826      transfer_flows
8827      transfer_flows_annual
8828      transfer_losses
8829      transfer_losses_annual
8830   
8831      storage_caps
8832      storage_units
8833      storage_flows
8834      storage_level_out
8835      storage_flows_annual
8836      storage_losses_out
8837      storage_losses_annual
8839   
8840      commodity_balance
8841      commodity_balance_annual
8842   
8843      marginals_balance
8844      marginals_sourcesink_profile
8845      marginals_sourcesink_sum
8846      marginals_indicator_bounds
8847   
8849      ;
GAMS 40.4.0  d540b52e Oct 3, 2022           WEX-WEI x86 64bit/MS Windows - 10/12/23 12:13:41 Page 2
G e n e r a l   A l g e b r a i c   M o d e l i n g   S y s t e m
Include File Summary


   SEQ   GLOBAL TYPE      PARENT   LOCAL  FILENAME

     1        1 INPUT          0       0  C:\Local\REMix\framework\remix\framework\model\run_remix.gms
     2       12 IF DEXIST      1      12  C:\Local\REMix\remix_nz\output\nz_profile_11nodes_2020\data\
     3       15 INCLUDE        1      15  .C:\Local\REMix\framework\remix\framework\model\source\metadata.gms
     4       23 CALL           3       8  .printf "remix_version \"0.9.2\"\n" > c:\Local\REMix\remix_nz\process\225a\\metadata
     5       24 CALL           3       9  .printf "gams_version \"40.4.0\"\n" >> c:\Local\REMix\remix_nz\process\225a\\metadata
     6       25 CALL           3      10  .printf "timestamp \"10/12/23 12:13:41\"\n" >> c:\Local\REMix\remix_nz\process\225a\\metadata
     7       27 CALL           3      12  .printf "framework_path " >> c:\Local\REMix\remix_nz\process\225a\\metadata
     8       29 CALL           3      14  .cd C:\Local\REMix\framework\remix\framework\model\source && cd| sed "s/^/\"/;s/$/\"/" >> c:\Local\REMix\remix_nz\process\225a\\metadata
     9       31 CALL           3      18  .printf "\n" >> c:\Local\REMix\remix_nz\process\225a\\metadata
    10       32 CALL           3      19  .printf "framework_hash " >> c:\Local\REMix\remix_nz\process\225a\\metadata
    11       34 CALL           3      21  .cd C:\Local\REMix\framework\remix\framework\model\source && git rev-parse HEAD >nul 2>&1 && git rev-parse HEAD >> c:\Local\REMix\remix_nz\process\225a\\metadata
    12       36 CALL           3      25  .printf "\n" >> c:\Local\REMix\remix_nz\process\225a\\metadata
    13       37 CALL           3      26  .printf "framework_branch " >> c:\Local\REMix\remix_nz\process\225a\\metadata
    14       39 CALL           3      28  .cd C:\Local\REMix\framework\remix\framework\model\source && git rev-parse --abbrev-ref HEAD >nul 2>&1 && git rev-parse --abbrev-ref HEAD | sed "s/^/\"/;s/$/\"/" >> c:\Local\REMix\remix_nz\process\225a\\metadata
    15       41 CALL           3      32  .printf "\n" >> c:\Local\REMix\remix_nz\process\225a\\metadata
    16       43 CALL           3      34  .printf "project_path " >> c:\Local\REMix\remix_nz\process\225a\\metadata
    17       45 CALL           3      36  .cd C:\Local\REMix\remix_nz\output\nz_profile_11nodes_2020\data\./ && cd| sed "s/^/\"/;s/$/\"/" >> c:\Local\REMix\remix_nz\process\225a\\metadata
    18       47 CALL           3      40  .printf "\n" >> c:\Local\REMix\remix_nz\process\225a\\metadata
    19       48 CALL           3      41  .printf "project_hash " >> c:\Local\REMix\remix_nz\process\225a\\metadata
    20       50 CALL           3      43  .cd C:\Local\REMix\remix_nz\output\nz_profile_11nodes_2020\data\./ && git rev-parse HEAD >nul 2>&1 && git rev-parse HEAD | sed "s/^/\"/;s/$/\"/" >> c:\Local\REMix\remix_nz\process\225a\\metadata
    21       52 CALL           3      47  .printf "\n" >> c:\Local\REMix\remix_nz\process\225a\\metadata
    22       53 CALL           3      48  .printf "project_branch " >> c:\Local\REMix\remix_nz\process\225a\\metadata
    23       55 CALL           3      50  .cd C:\Local\REMix\remix_nz\output\nz_profile_11nodes_2020\data\./ && git rev-parse --abbrev-ref HEAD >nul 2>&1 && git rev-parse --abbrev-ref HEAD | sed "s/^/\"/;s/$/\"/" >> c:\Local\REMix\remix_nz\process\225a\\metadata
    24       57 CALL           3      54  .printf "\n" >> c:\Local\REMix\remix_nz\process\225a\\metadata
    25       60 INCLUDE        3      57  ..c:\Local\REMix\remix_nz\process\225a\metadata
    26       77 INCLUDE        1      16  .C:\Local\REMix\framework\remix\framework\model\source\data_inheritance.gms
    27      119 INCLUDE        1      25  .C:\Local\REMix\framework\remix\framework\model\source\remix.gms
    28      140 INCLUDE       27      21  ..C:\Local\REMix\framework\remix\framework\model\source\sets.gms
    29      160 IF EXIST      28      20  ..c:\Local\REMix\remix_nz\process\225a\map_aggregatetimemodel.csv
    30      211 IF EXIST      28      97  ..c:\Local\REMix\remix_nz\process\225a\set_nodesmodel.csv
    31      211 INCLUDE       28      97  ...c:\Local\REMix\remix_nz\process\225a\set_nodesmodel.csv
    32      224 IF EXIST      28      99  ..c:\Local\REMix\remix_nz\process\225a\set_nodesmodel.csv
    33      231 IF EXIST      28     106  ..c:\Local\REMix\remix_nz\process\225a\set_nodesdata.csv
    34      231 INCLUDE       28     106  ...c:\Local\REMix\remix_nz\process\225a\set_nodesdata.csv
    35      244 IF EXIST      28     108  ..c:\Local\REMix\remix_nz\process\225a\set_nodesdata.csv
    36      250 IF EXIST      28     114  ..c:\Local\REMix\remix_nz\process\225a\set_nodesmodelsel.csv
    37      250 INCLUDE       28     114  ...c:\Local\REMix\remix_nz\process\225a\set_nodesmodelsel.csv
    38      263 IF EXIST      28     116  ..c:\Local\REMix\remix_nz\process\225a\set_nodesmodelsel.csv
    39      265 IF EXIST      28     118  ..c:\Local\REMix\remix_nz\process\225a\set_nodesmodelsel.csv
    40      278 IF EXIST      28     131  ..c:\Local\REMix\remix_nz\process\225a\map_aggregatenodesmodel.csv
    41      278 INCLUDE       28     131  ...c:\Local\REMix\remix_nz\process\225a\map_aggregatenodesmodel.csv
    42      291 IF EXIST      28     133  ..c:\Local\REMix\remix_nz\process\225a\map_aggregatenodesmodel.csv
    43      294 IF EXIST      28     136  ..c:\Local\REMix\remix_nz\process\225a\map_aggregatenodesmodel.csv
    44      317 IF EXIST      28     159  ..c:\Local\REMix\remix_nz\process\225a\set_years.csv
    45      317 INCLUDE       28     159  ...c:\Local\REMix\remix_nz\process\225a\set_years.csv
    46      326 IF EXIST      28     161  ..c:\Local\REMix\remix_nz\process\225a\set_years.csv
    47      335 IF EXIST      28     170  ..c:\Local\REMix\remix_nz\process\225a\set_years.csv
    48      335 INCLUDE       28     170  ...c:\Local\REMix\remix_nz\process\225a\set_years.csv
    49      344 IF EXIST      28     172  ..c:\Local\REMix\remix_nz\process\225a\set_years.csv
    50      350 IF EXIST      28     178  ..c:\Local\REMix\remix_nz\process\225a\set_yearssel.csv
    51      350 INCLUDE       28     178  ...c:\Local\REMix\remix_nz\process\225a\set_yearssel.csv
    52      353 IF EXIST      28     180  ..c:\Local\REMix\remix_nz\process\225a\set_yearssel.csv
    53      371 IF EXIST      28     198  ..c:\Local\REMix\remix_nz\process\225a\set_activities.csv
    54      371 INCLUDE       28     198  ...c:\Local\REMix\remix_nz\process\225a\set_activities.csv
    55      380 IF EXIST      28     200  ..c:\Local\REMix\remix_nz\process\225a\set_activities.csv
    56      388 IF EXIST      28     208  ..c:\Local\REMix\remix_nz\process\225a\set_gridsegments.csv
    57      390 IF EXIST      28     210  ..c:\Local\REMix\remix_nz\process\225a\set_gridsegments.csv
    58      398 IF EXIST      28     218  ..c:\Local\REMix\remix_nz\process\225a\set_linksdata.csv
    59      398 INCLUDE       28     218  ...c:\Local\REMix\remix_nz\process\225a\set_linksdata.csv
    60      412 IF EXIST      28     220  ..c:\Local\REMix\remix_nz\process\225a\set_linksdata.csv
    61      430 IF EXIST      28     238  ..c:\Local\REMix\remix_nz\process\225a\set_link_types.csv
    62      430 INCLUDE       28     238  ...c:\Local\REMix\remix_nz\process\225a\set_link_types.csv
    63      434 IF EXIST      28     240  ..c:\Local\REMix\remix_nz\process\225a\set_link_types.csv
    64      443 IF EXIST      28     249  ..c:\Local\REMix\remix_nz\process\225a\set_commodities.csv
    65      443 INCLUDE       28     249  ...c:\Local\REMix\remix_nz\process\225a\set_commodities.csv
    66      453 IF EXIST      28     251  ..c:\Local\REMix\remix_nz\process\225a\set_commodities.csv
    67      462 IF EXIST      28     260  ..c:\Local\REMix\remix_nz\process\225a\set_indicators.csv
    68      462 INCLUDE       28     260  ...c:\Local\REMix\remix_nz\process\225a\set_indicators.csv
    69      470 IF EXIST      28     262  ..c:\Local\REMix\remix_nz\process\225a\set_indicators.csv
    70      479 IF EXIST      28     271  ..c:\Local\REMix\remix_nz\process\225a\set_converter_techs.csv
    71      479 INCLUDE       28     271  ...c:\Local\REMix\remix_nz\process\225a\set_converter_techs.csv
    72      493 IF EXIST      28     274  ..c:\Local\REMix\remix_nz\process\225a\set_storage_techs.csv
    73      493 INCLUDE       28     274  ...c:\Local\REMix\remix_nz\process\225a\set_storage_techs.csv
    74      497 IF EXIST      28     277  ..c:\Local\REMix\remix_nz\process\225a\set_transfer_techs.csv
    75      497 INCLUDE       28     277  ...c:\Local\REMix\remix_nz\process\225a\set_transfer_techs.csv
    76      501 IF EXIST      28     280  ..c:\Local\REMix\remix_nz\process\225a\set_sourcesink_techs.csv
    77      501 INCLUDE       28     280  ...c:\Local\REMix\remix_nz\process\225a\set_sourcesink_techs.csv
    78      509 IF EXIST      28     285  ..c:\Local\REMix\remix_nz\process\225a\set_converter_techs.csv
    79      509 INCLUDE       28     285  ...c:\Local\REMix\remix_nz\process\225a\set_converter_techs.csv
    80      521 IF EXIST      28     286  ..c:\Local\REMix\remix_nz\process\225a\set_converter_techs.csv
    81      525 IF EXIST      28     290  ..c:\Local\REMix\remix_nz\process\225a\set_storage_techs.csv
    82      525 INCLUDE       28     290  ...c:\Local\REMix\remix_nz\process\225a\set_storage_techs.csv
    83      527 IF EXIST      28     291  ..c:\Local\REMix\remix_nz\process\225a\set_storage_techs.csv
    84      532 IF EXIST      28     296  ..c:\Local\REMix\remix_nz\process\225a\set_transfer_techs.csv
    85      532 INCLUDE       28     296  ...c:\Local\REMix\remix_nz\process\225a\set_transfer_techs.csv
    86      534 IF EXIST      28     297  ..c:\Local\REMix\remix_nz\process\225a\set_transfer_techs.csv
    87      538 IF EXIST      28     301  ..c:\Local\REMix\remix_nz\process\225a\set_sourcesink_techs.csv
    88      538 INCLUDE       28     301  ...c:\Local\REMix\remix_nz\process\225a\set_sourcesink_techs.csv
    89      542 IF EXIST      28     302  ..c:\Local\REMix\remix_nz\process\225a\set_sourcesink_techs.csv
    90      552 IF EXIST      28     312  ..c:\Local\REMix\remix_nz\process\225a\set_degradation_states.csv
    91      554 IF EXIST      28     314  ..c:\Local\REMix\remix_nz\process\225a\set_degradation_states.csv
    92      563 IF EXIST      28     323  ..c:\Local\REMix\remix_nz\process\225a\set_soc.csv
    93      565 IF EXIST      28     325  ..c:\Local\REMix\remix_nz\process\225a\set_soc.csv
    94      581 IF EXIST      28     341  ..c:\Local\REMix\remix_nz\process\225a\transfer_linkstartend.csv
    95      581 INCLUDE       28     341  ...c:\Local\REMix\remix_nz\process\225a\transfer_linkstartend.csv
    96      608 IF EXIST      28     343  ..c:\Local\REMix\remix_nz\process\225a\transfer_linkstartend.csv
    97      622 BATINCLUDE    28     357  ...C:\Local\REMix\framework\remix\framework\model\source\battools\aggregateNodes.gms
    98      731 IF EXIST      28     464  ..c:\Local\REMix\remix_nz\process\225a\set_accnodes.csv
    99      733 IF EXIST      28     466  ..c:\Local\REMix\remix_nz\process\225a\set_accnodes.csv
   100      798 IF EXIST      28     531  ..c:\Local\REMix\remix_nz\process\225a\map_accnodes.csv
   101      800 IF EXIST      28     533  ..c:\Local\REMix\remix_nz\process\225a\map_accnodes.csv
   102      854 INCLUDE       27      22  ..C:\Local\REMix\framework\remix\framework\model\source\accounting\input.gms
   103      886 IF EXIST     102      32  ..c:\Local\REMix\remix_nz\process\225a\accounting_converterunits.csv
   104      886 INCLUDE      102      32  ...c:\Local\REMix\remix_nz\process\225a\accounting_converterunits.csv
   105      967 IF EXIST     102      34  ..c:\Local\REMix\remix_nz\process\225a\accounting_converterunits.csv
   106      981 IF EXIST     102      48  ..c:\Local\REMix\remix_nz\process\225a\accounting_converteractivity.csv
   107      983 IF EXIST     102      50  ..c:\Local\REMix\remix_nz\process\225a\accounting_converteractivity.csv
   108     1000 IF EXIST     102      67  ..c:\Local\REMix\remix_nz\process\225a\accounting_converterstartup.csv
   109     1002 IF EXIST     102      69  ..c:\Local\REMix\remix_nz\process\225a\accounting_converterstartup.csv
   110     1021 IF EXIST     102      88  ..c:\Local\REMix\remix_nz\process\225a\accounting_storageunits.csv
   111     1021 INCLUDE      102      88  ...c:\Local\REMix\remix_nz\process\225a\accounting_storageunits.csv
   112     1032 IF EXIST     102      90  ..c:\Local\REMix\remix_nz\process\225a\accounting_storageunits.csv
   113     1054 IF EXIST     102     112  ..c:\Local\REMix\remix_nz\process\225a\accounting_transferlinks.csv
   114     1054 INCLUDE      102     112  ...c:\Local\REMix\remix_nz\process\225a\accounting_transferlinks.csv
   115     1059 IF EXIST     102     114  ..c:\Local\REMix\remix_nz\process\225a\accounting_transferlinks.csv
   116     1081 IF EXIST     102     136  ..c:\Local\REMix\remix_nz\process\225a\accounting_transferperlength.csv
   117     1081 INCLUDE      102     136  ...c:\Local\REMix\remix_nz\process\225a\accounting_transferperlength.csv
   118     1088 IF EXIST     102     138  ..c:\Local\REMix\remix_nz\process\225a\accounting_transferperlength.csv
   119     1103 IF EXIST     102     153  ..c:\Local\REMix\remix_nz\process\225a\accounting_sourcesinkflow.csv
   120     1103 INCLUDE      102     153  ...c:\Local\REMix\remix_nz\process\225a\accounting_sourcesinkflow.csv
   121     1113 IF EXIST     102     155  ..c:\Local\REMix\remix_nz\process\225a\accounting_sourcesinkflow.csv
   122     1127 IF EXIST     102     169  ..c:\Local\REMix\remix_nz\process\225a\accounting_perindicator.csv
   123     1127 INCLUDE      102     169  ...c:\Local\REMix\remix_nz\process\225a\accounting_perindicator.csv
   124     1135 IF EXIST     102     171  ..c:\Local\REMix\remix_nz\process\225a\accounting_perindicator.csv
   125     1161 IF EXIST     102     197  ..c:\Local\REMix\remix_nz\process\225a\accounting_indicatorbounds.csv
   126     1161 INCLUDE      102     197  ...c:\Local\REMix\remix_nz\process\225a\accounting_indicatorbounds.csv
   127     1165 IF EXIST     102     199  ..c:\Local\REMix\remix_nz\process\225a\accounting_indicatorbounds.csv
   128     1184 IF EXIST     102     218  ..c:\Local\REMix\remix_nz\process\225a\accounting_indicatorbounds_links.csv
   129     1186 IF EXIST     102     220  ..c:\Local\REMix\remix_nz\process\225a\accounting_indicatorbounds_links.csv
   130     1192 BATINCLUDE   102     226  ...C:\Local\REMix\framework\remix\framework\model\source\battools\aggregateAccountingMean.gms
   131     1251 BATINCLUDE   102     227  ...C:\Local\REMix\framework\remix\framework\model\source\battools\aggregateAccountingMean.gms
   132     1294 BATINCLUDE   102     228  ...C:\Local\REMix\framework\remix\framework\model\source\battools\aggregateAccountingMean.gms
   133     1337 BATINCLUDE   102     229  ...C:\Local\REMix\framework\remix\framework\model\source\battools\aggregateAccountingMean.gms
   134     1396 BATINCLUDE   102     230  ...C:\Local\REMix\framework\remix\framework\model\source\battools\aggregateAccountingMean.gms
   135     1455 BATINCLUDE   102     231  ...C:\Local\REMix\framework\remix\framework\model\source\battools\aggregateAccountingMean.gms
   136     1514 BATINCLUDE   102     232  ...C:\Local\REMix\framework\remix\framework\model\source\battools\aggregateAccountingMean.gms
   137     1923 INCLUDE       27      23  ..C:\Local\REMix\framework\remix\framework\model\source\accounting\annuities.gms
   138     1995 INCLUDE       27      25  ..C:\Local\REMix\framework\remix\framework\model\source\methods\mga_pre.gms
   139     2001 INCLUDE       27      26  ..C:\Local\REMix\framework\remix\framework\model\source\methods\pareto_pre.gms
   140     2007 INCLUDE       27      27  ..C:\Local\REMix\framework\remix\framework\model\source\postcalc\declaration.gms
   141     2024 IF DEXIST    140      17  ..C:\Local\REMix\remix_nz\output\nz_profile_11nodes_2020\result\
   142     2225 INCLUDE       27      28  ..C:\Local\REMix\framework\remix\framework\model\source\loadgdx.gms
   143     2234 INCLUDE       27      30  ..C:\Local\REMix\framework\remix\framework\model\source\core\converter.gms
   144     2337 IF EXIST     143     103  ..c:\Local\REMix\remix_nz\process\225a\converter_capacityparam.csv
   145     2337 INCLUDE      143     103  ...c:\Local\REMix\remix_nz\process\225a\converter_capacityparam.csv
   146     3187 IF EXIST     143     105  ..c:\Local\REMix\remix_nz\process\225a\converter_capacityparam.csv
   147     3195 BATINCLUDE   143     113  ...C:\Local\REMix\framework\remix\framework\model\source\battools\aggregateNodes.gms
   148     3206 BATINCLUDE   143     114  ...C:\Local\REMix\framework\remix\framework\model\source\battools\aggregateNodes.gms
   149     3239 IF EXIST     143     137  ..c:\Local\REMix\remix_nz\process\225a\converter_techparam.csv
   150     3239 INCLUDE      143     137  ...c:\Local\REMix\remix_nz\process\225a\converter_techparam.csv
   151     3281 IF EXIST     143     139  ..c:\Local\REMix\remix_nz\process\225a\converter_techparam.csv
   152     3303 IF EXIST     143     161  ..c:\Local\REMix\remix_nz\process\225a\converter_activityprofile.csv
   153     3303 INCLUDE      143     161  ...c:\Local\REMix\remix_nz\process\225a\converter_activityprofile.csv
   154     3569 IF EXIST     143     162  ..c:\Local\REMix\remix_nz\process\225a\converter_activityprofile.csv
   155     3571 IF EXIST     143     164  ..c:\Local\REMix\remix_nz\process\225a\converter_activityprofile.csv
   156     3591 IF EXIST     143     184  ..c:\Local\REMix\remix_nz\process\225a\converter_coefficient.csv
   157     3591 INCLUDE      143     184  ...c:\Local\REMix\remix_nz\process\225a\converter_coefficient.csv
   158     3741 IF EXIST     143     185  ..c:\Local\REMix\remix_nz\process\225a\converter_coefficient.csv
   159     3742 IF EXIST     143     186  ..c:\Local\REMix\remix_nz\process\225a\converter_coefficient.csv
   160     3744 IF EXIST     143     188  ..c:\Local\REMix\remix_nz\process\225a\converter_coefficient.csv
   161     3756 IF EXIST     143     200  ..c:\Local\REMix\remix_nz\process\225a\converter_coefficientprofile.csv
   162     3757 IF EXIST     143     201  ..c:\Local\REMix\remix_nz\process\225a\converter_coefficientprofile.csv
   163     3759 IF EXIST     143     203  ..c:\Local\REMix\remix_nz\process\225a\converter_coefficientprofile.csv
   164     4692 INCLUDE       27      31  ..C:\Local\REMix\framework\remix\framework\model\source\core\storage.gms
   165     4783 IF EXIST     164      91  ..c:\Local\REMix\remix_nz\process\225a\storage_reservoirparam.csv
   166     4783 INCLUDE      164      91  ...c:\Local\REMix\remix_nz\process\225a\storage_reservoirparam.csv
   167     4863 IF EXIST     164      93  ..c:\Local\REMix\remix_nz\process\225a\storage_reservoirparam.csv
   168     4867 BATINCLUDE   164      97  ...C:\Local\REMix\framework\remix\framework\model\source\battools\aggregateNodes.gms
   169     4878 BATINCLUDE   164      98  ...C:\Local\REMix\framework\remix\framework\model\source\battools\aggregateNodes.gms
   170     4914 IF EXIST     164     124  ..c:\Local\REMix\remix_nz\process\225a\storage_techparam.csv
   171     4914 INCLUDE      164     124  ...c:\Local\REMix\remix_nz\process\225a\storage_techparam.csv
   172     4921 IF EXIST     164     126  ..c:\Local\REMix\remix_nz\process\225a\storage_techparam.csv
   173     4942 IF EXIST     164     147  ..c:\Local\REMix\remix_nz\process\225a\storage_sizeparam.csv
   174     4942 INCLUDE      164     147  ...c:\Local\REMix\remix_nz\process\225a\storage_sizeparam.csv
   175     4949 IF EXIST     164     149  ..c:\Local\REMix\remix_nz\process\225a\storage_sizeparam.csv
   176     4966 IF EXIST     164     166  ..c:\Local\REMix\remix_nz\process\225a\storage_socparam.csv
   177     4968 IF EXIST     164     168  ..c:\Local\REMix\remix_nz\process\225a\storage_socparam.csv
   178     4987 IF EXIST     164     187  ..c:\Local\REMix\remix_nz\process\225a\storage_degradationparam.csv
   179     4989 IF EXIST     164     189  ..c:\Local\REMix\remix_nz\process\225a\storage_degradationparam.csv
   180     5018 IF EXIST     164     218  ..c:\Local\REMix\remix_nz\process\225a\storage_levelprofile.csv
   181     5019 IF EXIST     164     219  ..c:\Local\REMix\remix_nz\process\225a\storage_levelprofile.csv
   182     5021 IF EXIST     164     221  ..c:\Local\REMix\remix_nz\process\225a\storage_levelprofile.csv
   183     5841 INCLUDE       27      32  ..C:\Local\REMix\framework\remix\framework\model\source\core\transfer.gms
   184     5908 IF EXIST     183      73  ..c:\Local\REMix\remix_nz\process\225a\transfer_linksparam.csv
   185     5908 INCLUDE      183      73  ...c:\Local\REMix\remix_nz\process\225a\transfer_linksparam.csv
   186     5923 IF EXIST     183      75  ..c:\Local\REMix\remix_nz\process\225a\transfer_linksparam.csv
   187     5939 IF EXIST     183      91  ..c:\Local\REMix\remix_nz\process\225a\transfer_flowprofile.csv
   188     5941 IF EXIST     183      93  ..c:\Local\REMix\remix_nz\process\225a\transfer_flowprofile.csv
   189     5961 IF EXIST     183     113  ..c:\Local\REMix\remix_nz\process\225a\transfer_techparam.csv
   190     5961 INCLUDE      183     113  ...c:\Local\REMix\remix_nz\process\225a\transfer_techparam.csv
   191     5965 IF EXIST     183     115  ..c:\Local\REMix\remix_nz\process\225a\transfer_techparam.csv
   192     5979 IF EXIST     183     129  ..c:\Local\REMix\remix_nz\process\225a\transfer_coefficient.csv
   193     5979 INCLUDE      183     129  ...c:\Local\REMix\remix_nz\process\225a\transfer_coefficient.csv
   194     5983 IF EXIST     183     131  ..c:\Local\REMix\remix_nz\process\225a\transfer_coefficient.csv
   195     5997 IF EXIST     183     145  ..c:\Local\REMix\remix_nz\process\225a\transfer_coefperflow.csv
   196     5997 INCLUDE      183     145  ...c:\Local\REMix\remix_nz\process\225a\transfer_coefperflow.csv
   197     6001 IF EXIST     183     147  ..c:\Local\REMix\remix_nz\process\225a\transfer_coefperflow.csv
   198     6015 IF EXIST     183     161  ..c:\Local\REMix\remix_nz\process\225a\transfer_coefperlength.csv
   199     6015 INCLUDE      183     161  ...c:\Local\REMix\remix_nz\process\225a\transfer_coefperlength.csv
   200     6020 IF EXIST     183     163  ..c:\Local\REMix\remix_nz\process\225a\transfer_coefperlength.csv
   201     6034 IF EXIST     183     177  ..c:\Local\REMix\remix_nz\process\225a\transfer_reactperlength.csv
   202     6036 IF EXIST     183     179  ..c:\Local\REMix\remix_nz\process\225a\transfer_reactperlength.csv
   203     6050 IF EXIST     183     193  ..c:\Local\REMix\remix_nz\process\225a\transfer_lengthparam.csv
   204     6050 INCLUDE      183     193  ...c:\Local\REMix\remix_nz\process\225a\transfer_lengthparam.csv
   205     6077 IF EXIST     183     195  ..c:\Local\REMix\remix_nz\process\225a\transfer_lengthparam.csv
   206     6091 IF EXIST     183     209  ..c:\Local\REMix\remix_nz\process\225a\transfer_gridsegments.csv
   207     6093 IF EXIST     183     211  ..c:\Local\REMix\remix_nz\process\225a\transfer_gridsegments.csv
   208     6675 INCLUDE       27      33  ..C:\Local\REMix\framework\remix\framework\model\source\core\sourcesink.gms
   209     6713 IF EXIST     208      38  ..c:\Local\REMix\remix_nz\process\225a\sourcesink_config.csv
   210     6713 INCLUDE      208      38  ...c:\Local\REMix\remix_nz\process\225a\sourcesink_config.csv
   211     6815 IF EXIST     208      40  ..c:\Local\REMix\remix_nz\process\225a\sourcesink_config.csv
   212     6819 BATINCLUDE   208      44  ...C:\Local\REMix\framework\remix\framework\model\source\battools\aggregateNodes.gms
   213     6847 IF EXIST     208      62  ..c:\Local\REMix\remix_nz\process\225a\sourcesink_profile.csv
   214     6847 INCLUDE      208      62  ...c:\Local\REMix\remix_nz\process\225a\sourcesink_profile.csv
   215     6904 IF EXIST     208      63  ..c:\Local\REMix\remix_nz\process\225a\sourcesink_profile.csv
   216     6905 IF EXIST     208      64  ..c:\Local\REMix\remix_nz\process\225a\sourcesink_profile.csv
   217     6907 IF EXIST     208      66  ..c:\Local\REMix\remix_nz\process\225a\sourcesink_profile.csv
   218     6927 IF EXIST     208      86  ..c:\Local\REMix\remix_nz\process\225a\sourcesink_annualsum.csv
   219     6927 INCLUDE      208      86  ...c:\Local\REMix\remix_nz\process\225a\sourcesink_annualsum.csv
   220     6974 IF EXIST     208      88  ..c:\Local\REMix\remix_nz\process\225a\sourcesink_annualsum.csv
   221     6977 BATINCLUDE   208      91  ...C:\Local\REMix\framework\remix\framework\model\source\battools\aggregateNodes.gms
   222     7157 INCLUDE       27      34  ..C:\Local\REMix\framework\remix\framework\model\source\core\balance.gms
   223     7293 INCLUDE       27      36  ..C:\Local\REMix\framework\remix\framework\model\source\accounting\equations.gms
   224     7715 INCLUDE       27      37  ..C:\Local\REMix\framework\remix\framework\model\source\optiframe.gms
   225     7756 INCLUDE       27      71  ..C:\Local\REMix\framework\remix\framework\model\source\methods\checkanno.gms
   226     7767 INCLUDE       27      74  ..C:\Local\REMix\framework\remix\framework\model\source\methods\pips.gms
   227     7776 INCLUDE       27      77  ..C:\Local\REMix\framework\remix\framework\model\source\methods\solve.gms
   228     7982 INCLUDE       27      80  ..C:\Local\REMix\framework\remix\framework\model\source\methods\pareto.gms
   229     7991 INCLUDE       27      83  ..C:\Local\REMix\framework\remix\framework\model\source\methods\mga.gms
   230     8000 INCLUDE       27      86  ..C:\Local\REMix\framework\remix\framework\model\source\methods\iternodes.gms
   231     8009 INCLUDE       27      89  ..C:\Local\REMix\framework\remix\framework\model\source\postcalc\definition.gms
   232     8791 INCLUDE       27      90  ..C:\Local\REMix\framework\remix\framework\model\source\postcalc\writegdx.gms


COMPILATION TIME     =       11.000 SECONDS     76 MB  40.4.0 d540b52e WEX-WEI
GAMS 40.4.0  d540b52e Oct 3, 2022           WEX-WEI x86 64bit/MS Windows - 10/12/23 12:13:41 Page 3
G e n e r a l   A l g e b r a i c   M o d e l i n g   S y s t e m
Range Statistics    SOLVE remix Using MIP From line 7967


RANGE STATISTICS (ABSOLUTE NON-ZERO FINITE VALUES)

RHS       [min, max] : [ 6.400E-02, 1.165E+03] - Zero values observed as well
Bound     [min, max] : [        NA,        NA] - Zero values observed as well
Matrix    [min, max] : [ 6.000E-03, 1.926E+02]

GAMS 40.4.0  d540b52e Oct 3, 2022           WEX-WEI x86 64bit/MS Windows - 10/12/23 12:13:41 Page 4
G e n e r a l   A l g e b r a i c   M o d e l i n g   S y s t e m
Model Statistics    SOLVE remix Using MIP From line 7967


LOOPS                           optiframeToCalc   of1


MODEL STATISTICS

BLOCKS OF EQUATIONS          75     SINGLE EQUATIONS    3,197,690
BLOCKS OF VARIABLES          38     SINGLE VARIABLES    2,716,034
NON ZERO ELEMENTS     8,096,414


GENERATION TIME      =       21.516 SECONDS  1,890 MB  40.4.0 d540b52e WEX-WEI


EXECUTION TIME       =       28.250 SECONDS  1,890 MB  40.4.0 d540b52e WEX-WEI
               L O O P S         optiframeToCalc of1

GAMS 40.4.0  d540b52e Oct 3, 2022           WEX-WEI x86 64bit/MS Windows - 10/12/23 12:13:41 Page 5
G e n e r a l   A l g e b r a i c   M o d e l i n g   S y s t e m
Solution Report     SOLVE remix Using MIP From line 7967


               S O L V E      S U M M A R Y

     MODEL   remix               OBJECTIVE  accounting_objective
     TYPE    MIP                 DIRECTION  MINIMIZE
     SOLVER  CPLEX               FROM LINE  7967

**** SOLVER STATUS     1 Normal Completion
**** MODEL STATUS      1 Optimal
**** OBJECTIVE VALUE             3504.2470

 RESOURCE USAGE, LIMIT         67.422    604800.000
 ITERATION COUNT, LIMIT        92    2147483647
--- GAMS/Cplex Link licensed for continuous and discrete problems.

Reading parameter(s) from "c:\Local\REMix\remix_nz\process\cplex.opt"
>>  rerun no
>>  lpmethod 4
>>  barorder 0
>>  preind 1
>>  scaind 0
>>  predual -1
>>  baralg 0
>>  barstartalg 1
>>  barepcomp 1e-6
>>  solutiontype 2
>>  startalg 4
>>  epgap 1e-3
>>  quality 1
>>  barcolnz 0
>>  threads 4
>>  parallelmode 1
Finished reading from "c:\Local\REMix\remix_nz\process\cplex.opt"

--- GMO setup time: 0.00s
--- Space for names approximately 389.01 Mb
--- Use option 'names no' to turn use of names off
--- GMO memory 1045.93 Mb (peak 1066.66 Mb)
--- Dictionary memory 0.00 Mb
--- Cplex 22.1.0.0 link memory 88.40 Mb (peak 624.92 Mb)
--- Starting Cplex


--- LP status (1): optimal.
--- Cplex Time: 62.42sec (det. 60324.62 ticks)


Optimal solution found
Objective:         3504.247029

Solution Quality Statistics:
                                   unscaled                scaled
                               max         sum         max         sum
primal infeasibility        2.046e-05   7.991e-03   2.046e-05   7.991e-03
dual infeasibility          2.962e-09   3.294e-05   2.962e-09   3.294e-05
primal residual             4.547e-13   2.760e-11   4.547e-13   2.760e-11
dual residual               4.655e-09   4.247e-03   4.655e-09   4.247e-03
primal solution vector      3.504e+03   6.567e+05   3.504e+03   6.567e+05
dual solution vector        1.926e+02   8.786e+04   1.926e+02   8.786e+04
slacks                      1.162e+03   4.657e+05   1.162e+03   4.657e+05
reduced costs               1.926e+02   3.222e+05   1.926e+02   3.222e+05
comp. slackness viol.       6.512e-06   1.177e-02




**** REPORT SUMMARY :        0     NONOPT
                             0 INFEASIBLE
                             0  UNBOUNDED
GAMS 40.4.0  d540b52e Oct 3, 2022           WEX-WEI x86 64bit/MS Windows - 10/12/23 12:13:41 Page 6
G e n e r a l   A l g e b r a i c   M o d e l i n g   S y s t e m
E x e c u t i o n


**** REPORT FILE SUMMARY

opt c:\Local\REMix\remix_nz\process\cplex.opt


EXECUTION TIME       =       17.125 SECONDS  1,340 MB  40.4.0 d540b52e WEX-WEI


USER: Medium MUD - 10 User License                   S220920|0002AO-GEN
      University of Canterbury, Civil Engineering Department    DC16319
      License for teaching and research at degree granting institutions


**** FILE SUMMARY

Input      C:\Local\REMix\framework\remix\framework\model\run_remix.gms
Output     c:\Local\REMix\remix_nz\process\run_remix.lst
